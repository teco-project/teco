//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCVpcError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case accountReturnQuota = "LimitExceeded.AccountReturnQuota"
            case address = "LimitExceeded.Address"
            case addressQuotaLimitExceeded = "LimitExceeded.AddressQuotaLimitExceeded"
            case bandwidthPackageQuota = "LimitExceeded.BandwidthPackageQuota"
            case changeAddressQuota = "LimitExceeded.ChangeAddressQuota"
            case cidrBlock = "LimitExceeded.CidrBlock"
            case dailyAllocateAddressQuotaLimitExceeded = "LimitExceeded.DailyAllocateAddressQuotaLimitExceeded"
            case dailyChangeAddressQuota = "LimitExceeded.DailyChangeAddressQuota"
            case instanceAddressQuota = "LimitExceeded.InstanceAddressQuota"
            case modifyAddressInternetChargeTypeQuota = "LimitExceeded.ModifyAddressInternetChargeTypeQuota"
            case monthlyAddressRecoveryQuota = "LimitExceeded.MonthlyAddressRecoveryQuota"
            case natGatewayLimitExceeded = "LimitExceeded.NatGatewayLimitExceeded"
            case natGatewayPerVpcLimitExceeded = "LimitExceeded.NatGatewayPerVpcLimitExceeded"
            case numberOfFilters = "LimitExceeded.NumberOfFilters"
            case publicIpAddressPerNatGatewayLimitExceeded = "LimitExceeded.PublicIpAddressPerNatGatewayLimitExceeded"
            case securityGroupPolicySet = "LimitExceeded.SecurityGroupPolicySet"
            case subnetCidrBlock = "LimitExceeded.SubnetCidrBlock"
            case tagKeyExceeded = "LimitExceeded.TagKeyExceeded"
            case tagKeyPerResourceExceeded = "LimitExceeded.TagKeyPerResourceExceeded"
            case tagNotEnoughQuota = "LimitExceeded.TagNotEnoughQuota"
            case tagQuota = "LimitExceeded.TagQuota"
            case tagQuotaExceeded = "LimitExceeded.TagQuotaExceeded"
            case tagTagsExceeded = "LimitExceeded.TagTagsExceeded"
            case other = "LimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 账号退还配额超过限制。
        public static var accountReturnQuota: LimitExceeded {
            LimitExceeded(.accountReturnQuota)
        }
        
        /// 分配IP地址数量达到上限。
        public static var address: LimitExceeded {
            LimitExceeded(.address)
        }
        
        /// 租户申请的弹性IP超过上限。
        public static var addressQuotaLimitExceeded: LimitExceeded {
            LimitExceeded(.addressQuotaLimitExceeded)
        }
        
        /// 带宽包配额超过限制。
        public static var bandwidthPackageQuota: LimitExceeded {
            LimitExceeded(.bandwidthPackageQuota)
        }
        
        /// 超过更换IP配额。
        public static var changeAddressQuota: LimitExceeded {
            LimitExceeded(.changeAddressQuota)
        }
        
        /// VPC分配网段数量达到上限。
        public static var cidrBlock: LimitExceeded {
            LimitExceeded(.cidrBlock)
        }
        
        /// 租户每天申请的弹性IP超过上限。
        public static var dailyAllocateAddressQuotaLimitExceeded: LimitExceeded {
            LimitExceeded(.dailyAllocateAddressQuotaLimitExceeded)
        }
        
        /// 超过每日更换IP配额。
        public static var dailyChangeAddressQuota: LimitExceeded {
            LimitExceeded(.dailyChangeAddressQuota)
        }
        
        /// 实例绑定的弹性IP超过配额。
        public static var instanceAddressQuota: LimitExceeded {
            LimitExceeded(.instanceAddressQuota)
        }
        
        /// 修改地址网络计费模式配额超过限制。
        public static var modifyAddressInternetChargeTypeQuota: LimitExceeded {
            LimitExceeded(.modifyAddressInternetChargeTypeQuota)
        }
        
        /// 每月地址找回配额超过限制。
        public static var monthlyAddressRecoveryQuota: LimitExceeded {
            LimitExceeded(.monthlyAddressRecoveryQuota)
        }
        
        /// NAT网关数量已达到上限。
        public static var natGatewayLimitExceeded: LimitExceeded {
            LimitExceeded(.natGatewayLimitExceeded)
        }
        
        /// 私有网络创建的NAT网关超过上限。
        public static var natGatewayPerVpcLimitExceeded: LimitExceeded {
            LimitExceeded(.natGatewayPerVpcLimitExceeded)
        }
        
        /// 过滤参数名称超过限制。
        public static var numberOfFilters: LimitExceeded {
            LimitExceeded(.numberOfFilters)
        }
        
        /// NAT网关绑定的弹性IP超过上限。
        public static var publicIpAddressPerNatGatewayLimitExceeded: LimitExceeded {
            LimitExceeded(.publicIpAddressPerNatGatewayLimitExceeded)
        }
        
        /// 安全组规则数量超过上限。
        public static var securityGroupPolicySet: LimitExceeded {
            LimitExceeded(.securityGroupPolicySet)
        }
        
        /// 子网分配子网段数量达到上限。
        public static var subnetCidrBlock: LimitExceeded {
            LimitExceeded(.subnetCidrBlock)
        }
        
        public static var tagKeyExceeded: LimitExceeded {
            LimitExceeded(.tagKeyExceeded)
        }
        
        public static var tagKeyPerResourceExceeded: LimitExceeded {
            LimitExceeded(.tagKeyPerResourceExceeded)
        }
        
        public static var tagNotEnoughQuota: LimitExceeded {
            LimitExceeded(.tagNotEnoughQuota)
        }
        
        public static var tagQuota: LimitExceeded {
            LimitExceeded(.tagQuota)
        }
        
        public static var tagQuotaExceeded: LimitExceeded {
            LimitExceeded(.tagQuotaExceeded)
        }
        
        public static var tagTagsExceeded: LimitExceeded {
            LimitExceeded(.tagTagsExceeded)
        }
        
        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }
    }
}

extension TCVpcError.LimitExceeded: Equatable {
    public static func == (lhs: TCVpcError.LimitExceeded, rhs: TCVpcError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCVpcError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCVpcError.LimitExceeded {
    public func toVpcError() -> TCVpcError {
        guard let code = TCVpcError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCVpcError(code, context: self.context)
    }
}