//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCVpcError {
    public struct LimitExceeded: TCVpcErrorType {
        enum Code: String {
            case accountReturnQuota = "LimitExceeded.AccountReturnQuota"
            case actionLimited = "LimitExceeded.ActionLimited"
            case address = "LimitExceeded.Address"
            case addressQuotaLimitExceeded = "LimitExceeded.AddressQuotaLimitExceeded"
            case attachedSnapshotPolicyExceeded = "LimitExceeded.AttachedSnapshotPolicyExceeded"
            case bandwidthPackageQuota = "LimitExceeded.BandwidthPackageQuota"
            case bandwidthPackageResourceQuota = "LimitExceeded.BandwidthPackageResourceQuota"
            case changeAddressQuota = "LimitExceeded.ChangeAddressQuota"
            case cidrBlock = "LimitExceeded.CidrBlock"
            case currentInstanceAttachedCcnInstances = "LimitExceeded.CurrentInstanceAttachedCcnInstances"
            case dailyAllocateAddressQuotaLimitExceeded = "LimitExceeded.DailyAllocateAddressQuotaLimitExceeded"
            case dailyChangeAddressQuota = "LimitExceeded.DailyChangeAddressQuota"
            case instanceAddressQuota = "LimitExceeded.InstanceAddressQuota"
            case modifyAddressInternetChargeTypeQuota = "LimitExceeded.ModifyAddressInternetChargeTypeQuota"
            case monthlyAddressRecoveryQuota = "LimitExceeded.MonthlyAddressRecoveryQuota"
            case natGatewayLimitExceeded = "LimitExceeded.NatGatewayLimitExceeded"
            case natGatewayPerVpcLimitExceeded = "LimitExceeded.NatGatewayPerVpcLimitExceeded"
            case numberOfFilters = "LimitExceeded.NumberOfFilters"
            case publicIpAddressPerNatGatewayLimitExceeded = "LimitExceeded.PublicIpAddressPerNatGatewayLimitExceeded"
            case securityGroupPolicySet = "LimitExceeded.SecurityGroupPolicySet"
            case subnetCidrBlock = "LimitExceeded.SubnetCidrBlock"
            case tagKeyExceeded = "LimitExceeded.TagKeyExceeded"
            case tagKeyPerResourceExceeded = "LimitExceeded.TagKeyPerResourceExceeded"
            case tagNotEnoughQuota = "LimitExceeded.TagNotEnoughQuota"
            case tagQuota = "LimitExceeded.TagQuota"
            case tagQuotaExceeded = "LimitExceeded.TagQuotaExceeded"
            case tagTagsExceeded = "LimitExceeded.TagTagsExceeded"
            case trafficPackageQuota = "LimitExceeded.TrafficPackageQuota"
            case vpcPeerAvaLimitExceeded = "LimitExceeded.VpcPeerAvaLimitExceeded"
            case vpcPeerTotalLimitExceeded = "LimitExceeded.VpcPeerTotalLimitExceeded"
            case other = "LimitExceeded"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 账号退还配额超过限制。
        public static var accountReturnQuota: LimitExceeded {
            LimitExceeded(.accountReturnQuota)
        }

        /// 接口请求次数超过限频。
        public static var actionLimited: LimitExceeded {
            LimitExceeded(.actionLimited)
        }

        /// 分配IP地址数量达到上限。
        public static var address: LimitExceeded {
            LimitExceeded(.address)
        }

        /// 租户申请的弹性IP超过上限。
        public static var addressQuotaLimitExceeded: LimitExceeded {
            LimitExceeded(.addressQuotaLimitExceeded)
        }

        /// 实例关联快照策略数量达到上限。
        public static var attachedSnapshotPolicyExceeded: LimitExceeded {
            LimitExceeded(.attachedSnapshotPolicyExceeded)
        }

        /// 带宽包配额超过限制。
        public static var bandwidthPackageQuota: LimitExceeded {
            LimitExceeded(.bandwidthPackageQuota)
        }

        /// 当前带宽包加入资源上限。
        public static var bandwidthPackageResourceQuota: LimitExceeded {
            LimitExceeded(.bandwidthPackageResourceQuota)
        }

        /// 超过更换IP配额。
        public static var changeAddressQuota: LimitExceeded {
            LimitExceeded(.changeAddressQuota)
        }

        /// VPC分配网段数量达到上限。
        public static var cidrBlock: LimitExceeded {
            LimitExceeded(.cidrBlock)
        }

        /// 当前实例关联的云联网数量达到上限。
        public static var currentInstanceAttachedCcnInstances: LimitExceeded {
            LimitExceeded(.currentInstanceAttachedCcnInstances)
        }

        /// 租户每天申请的弹性IP超过上限。
        public static var dailyAllocateAddressQuotaLimitExceeded: LimitExceeded {
            LimitExceeded(.dailyAllocateAddressQuotaLimitExceeded)
        }

        /// 超过每日更换IP配额。
        public static var dailyChangeAddressQuota: LimitExceeded {
            LimitExceeded(.dailyChangeAddressQuota)
        }

        /// 实例绑定的弹性IP超过配额。
        public static var instanceAddressQuota: LimitExceeded {
            LimitExceeded(.instanceAddressQuota)
        }

        /// 修改地址网络计费模式配额超过限制。
        public static var modifyAddressInternetChargeTypeQuota: LimitExceeded {
            LimitExceeded(.modifyAddressInternetChargeTypeQuota)
        }

        /// 每月地址找回配额超过限制。
        public static var monthlyAddressRecoveryQuota: LimitExceeded {
            LimitExceeded(.monthlyAddressRecoveryQuota)
        }

        /// NAT网关数量已达到上限。
        public static var natGatewayLimitExceeded: LimitExceeded {
            LimitExceeded(.natGatewayLimitExceeded)
        }

        /// 私有网络创建的NAT网关超过上限。
        public static var natGatewayPerVpcLimitExceeded: LimitExceeded {
            LimitExceeded(.natGatewayPerVpcLimitExceeded)
        }

        /// 过滤参数名称超过限制。
        public static var numberOfFilters: LimitExceeded {
            LimitExceeded(.numberOfFilters)
        }

        /// NAT网关绑定的弹性IP超过上限。
        public static var publicIpAddressPerNatGatewayLimitExceeded: LimitExceeded {
            LimitExceeded(.publicIpAddressPerNatGatewayLimitExceeded)
        }

        /// 安全组规则数量超过上限。
        public static var securityGroupPolicySet: LimitExceeded {
            LimitExceeded(.securityGroupPolicySet)
        }

        /// 子网分配子网段数量达到上限。
        public static var subnetCidrBlock: LimitExceeded {
            LimitExceeded(.subnetCidrBlock)
        }

        /// 标签键已达到上限。
        public static var tagKeyExceeded: LimitExceeded {
            LimitExceeded(.tagKeyExceeded)
        }

        /// 每个资源的标签键已达到上限。
        public static var tagKeyPerResourceExceeded: LimitExceeded {
            LimitExceeded(.tagKeyPerResourceExceeded)
        }

        /// 没有足够的标签配额。
        public static var tagNotEnoughQuota: LimitExceeded {
            LimitExceeded(.tagNotEnoughQuota)
        }

        /// 标签配额已满，无法创建资源。
        public static var tagQuota: LimitExceeded {
            LimitExceeded(.tagQuota)
        }

        /// 标签配额已达到上限。
        public static var tagQuotaExceeded: LimitExceeded {
            LimitExceeded(.tagQuotaExceeded)
        }

        /// 标签键的数目已达到上限。
        public static var tagTagsExceeded: LimitExceeded {
            LimitExceeded(.tagTagsExceeded)
        }

        /// 流量包配额超过限制。
        public static var trafficPackageQuota: LimitExceeded {
            LimitExceeded(.trafficPackageQuota)
        }

        /// 有效的对等个数超过配额上限。
        public static var vpcPeerAvaLimitExceeded: LimitExceeded {
            LimitExceeded(.vpcPeerAvaLimitExceeded)
        }

        /// 可创建的对等连接个数超过总上限。
        public static var vpcPeerTotalLimitExceeded: LimitExceeded {
            LimitExceeded(.vpcPeerTotalLimitExceeded)
        }

        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }

        public func asVpcError() -> TCVpcError {
            let code: TCVpcError.Code
            switch self.error {
            case .accountReturnQuota:
                code = .limitExceeded_AccountReturnQuota
            case .actionLimited:
                code = .limitExceeded_ActionLimited
            case .address:
                code = .limitExceeded_Address
            case .addressQuotaLimitExceeded:
                code = .limitExceeded_AddressQuotaLimitExceeded
            case .attachedSnapshotPolicyExceeded:
                code = .limitExceeded_AttachedSnapshotPolicyExceeded
            case .bandwidthPackageQuota:
                code = .limitExceeded_BandwidthPackageQuota
            case .bandwidthPackageResourceQuota:
                code = .limitExceeded_BandwidthPackageResourceQuota
            case .changeAddressQuota:
                code = .limitExceeded_ChangeAddressQuota
            case .cidrBlock:
                code = .limitExceeded_CidrBlock
            case .currentInstanceAttachedCcnInstances:
                code = .limitExceeded_CurrentInstanceAttachedCcnInstances
            case .dailyAllocateAddressQuotaLimitExceeded:
                code = .limitExceeded_DailyAllocateAddressQuotaLimitExceeded
            case .dailyChangeAddressQuota:
                code = .limitExceeded_DailyChangeAddressQuota
            case .instanceAddressQuota:
                code = .limitExceeded_InstanceAddressQuota
            case .modifyAddressInternetChargeTypeQuota:
                code = .limitExceeded_ModifyAddressInternetChargeTypeQuota
            case .monthlyAddressRecoveryQuota:
                code = .limitExceeded_MonthlyAddressRecoveryQuota
            case .natGatewayLimitExceeded:
                code = .limitExceeded_NatGatewayLimitExceeded
            case .natGatewayPerVpcLimitExceeded:
                code = .limitExceeded_NatGatewayPerVpcLimitExceeded
            case .numberOfFilters:
                code = .limitExceeded_NumberOfFilters
            case .publicIpAddressPerNatGatewayLimitExceeded:
                code = .limitExceeded_PublicIpAddressPerNatGatewayLimitExceeded
            case .securityGroupPolicySet:
                code = .limitExceeded_SecurityGroupPolicySet
            case .subnetCidrBlock:
                code = .limitExceeded_SubnetCidrBlock
            case .tagKeyExceeded:
                code = .limitExceeded_TagKeyExceeded
            case .tagKeyPerResourceExceeded:
                code = .limitExceeded_TagKeyPerResourceExceeded
            case .tagNotEnoughQuota:
                code = .limitExceeded_TagNotEnoughQuota
            case .tagQuota:
                code = .limitExceeded_TagQuota
            case .tagQuotaExceeded:
                code = .limitExceeded_TagQuotaExceeded
            case .tagTagsExceeded:
                code = .limitExceeded_TagTagsExceeded
            case .trafficPackageQuota:
                code = .limitExceeded_TrafficPackageQuota
            case .vpcPeerAvaLimitExceeded:
                code = .limitExceeded_VpcPeerAvaLimitExceeded
            case .vpcPeerTotalLimitExceeded:
                code = .limitExceeded_VpcPeerTotalLimitExceeded
            case .other:
                code = .limitExceeded
            }
            return TCVpcError(code, context: self.context)
        }
    }
}
