//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// 查看VPC资源信息
    ///
    /// 本接口(DescribeVpcResourceDashboard)用于查看VPC资源信息。
    @inlinable
    public func describeVpcResourceDashboard(_ input: DescribeVpcResourceDashboardRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeVpcResourceDashboardResponse > {
        self.client.execute(action: "DescribeVpcResourceDashboard", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查看VPC资源信息
    ///
    /// 本接口(DescribeVpcResourceDashboard)用于查看VPC资源信息。
    @inlinable
    public func describeVpcResourceDashboard(_ input: DescribeVpcResourceDashboardRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVpcResourceDashboardResponse {
        try await self.client.execute(action: "DescribeVpcResourceDashboard", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeVpcResourceDashboard请求参数结构体
    public struct DescribeVpcResourceDashboardRequest: TCRequestModel {
        /// Vpc实例ID，例如：vpc-f1xjkw1b。
        public let vpcIds: [String]
        
        public init (vpcIds: [String]) {
            self.vpcIds = vpcIds
        }
        
        enum CodingKeys: String, CodingKey {
            case vpcIds = "VpcIds"
        }
    }
    
    /// DescribeVpcResourceDashboard返回参数结构体
    public struct DescribeVpcResourceDashboardResponse: TCResponseModel {
        /// 资源对象列表。
        public let resourceDashboardSet: [ResourceDashboard]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case resourceDashboardSet = "ResourceDashboardSet"
            case requestId = "RequestId"
        }
    }
}
