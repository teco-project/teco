//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DisableCcnRoutes请求参数结构体
    public struct DisableCcnRoutesRequest: TCRequestModel {
        /// CCN实例ID。形如：ccn-f49l6u0z。
        public let ccnId: String
        
        /// CCN路由策略唯一ID。形如：ccnr-f49l6u0z。
        public let routeIds: [String]
        
        public init (ccnId: String, routeIds: [String]) {
            self.ccnId = ccnId
            self.routeIds = routeIds
        }
        
        enum CodingKeys: String, CodingKey {
            case ccnId = "CcnId"
            case routeIds = "RouteIds"
        }
    }
    
    /// DisableCcnRoutes返回参数结构体
    public struct DisableCcnRoutesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 禁用云联网路由
    ///
    /// 本接口（DisableCcnRoutes）用于禁用已经启用的云联网（CCN）路由
    @inlinable
    public func disableCcnRoutes(_ input: DisableCcnRoutesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DisableCcnRoutesResponse > {
        self.client.execute(action: "DisableCcnRoutes", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 禁用云联网路由
    ///
    /// 本接口（DisableCcnRoutes）用于禁用已经启用的云联网（CCN）路由
    @inlinable
    public func disableCcnRoutes(_ input: DisableCcnRoutesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableCcnRoutesResponse {
        try await self.client.execute(action: "DisableCcnRoutes", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
