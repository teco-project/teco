//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DeleteSubnet请求参数结构体
    public struct DeleteSubnetRequest: TCRequestModel {
        /// 子网实例ID。可通过DescribeSubnets接口返回值中的SubnetId获取。
        public let subnetId: String
        
        public init (subnetId: String) {
            self.subnetId = subnetId
        }
        
        enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
        }
    }
    
    /// DeleteSubnet返回参数结构体
    public struct DeleteSubnetResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 删除子网
    ///
    /// 本接口（DeleteSubnet）用于用于删除子网(Subnet)。
    /// * 删除子网前，请清理该子网下所有资源，包括云服务器、负载均衡、云数据、noSql、弹性网卡等资源。
    @inlinable
    public func deleteSubnet(_ input: DeleteSubnetRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteSubnetResponse > {
        self.client.execute(action: "DeleteSubnet", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除子网
    ///
    /// 本接口（DeleteSubnet）用于用于删除子网(Subnet)。
    /// * 删除子网前，请清理该子网下所有资源，包括云服务器、负载均衡、云数据、noSql、弹性网卡等资源。
    @inlinable
    public func deleteSubnet(_ input: DeleteSubnetRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteSubnetResponse {
        try await self.client.execute(action: "DeleteSubnet", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
