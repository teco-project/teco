//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// ModifyHaVipAttribute请求参数结构体
    public struct ModifyHaVipAttributeRequest: TCRequestModel {
        /// `HAVIP`唯一`ID`，形如：`havip-9o233uri`。
        public let haVipId: String
        
        /// `HAVIP`名称，可任意命名，但不得超过60个字符。
        public let haVipName: String
        
        public init (haVipId: String, haVipName: String) {
            self.haVipId = haVipId
            self.haVipName = haVipName
        }
        
        enum CodingKeys: String, CodingKey {
            case haVipId = "HaVipId"
            case haVipName = "HaVipName"
        }
    }
    
    /// ModifyHaVipAttribute返回参数结构体
    public struct ModifyHaVipAttributeResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 修改HAVIP属性
    ///
    /// 本接口（ModifyHaVipAttribute）用于修改高可用虚拟IP（HAVIP）属性
    @inlinable
    public func modifyHaVipAttribute(_ input: ModifyHaVipAttributeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyHaVipAttributeResponse > {
        self.client.execute(action: "ModifyHaVipAttribute", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改HAVIP属性
    ///
    /// 本接口（ModifyHaVipAttribute）用于修改高可用虚拟IP（HAVIP）属性
    @inlinable
    public func modifyHaVipAttribute(_ input: ModifyHaVipAttributeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyHaVipAttributeResponse {
        try await self.client.execute(action: "ModifyHaVipAttribute", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 修改HAVIP属性
    ///
    /// 本接口（ModifyHaVipAttribute）用于修改高可用虚拟IP（HAVIP）属性
    @inlinable
    public func modifyHaVipAttribute(haVipId: String, haVipName: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyHaVipAttributeResponse > {
        self.modifyHaVipAttribute(ModifyHaVipAttributeRequest(haVipId: haVipId, haVipName: haVipName), logger: logger, on: eventLoop)
    }
    
    /// 修改HAVIP属性
    ///
    /// 本接口（ModifyHaVipAttribute）用于修改高可用虚拟IP（HAVIP）属性
    @inlinable
    public func modifyHaVipAttribute(haVipId: String, haVipName: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyHaVipAttributeResponse {
        try await self.modifyHaVipAttribute(ModifyHaVipAttributeRequest(haVipId: haVipId, haVipName: haVipName), logger: logger, on: eventLoop)
    }
}
