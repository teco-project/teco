//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// ModifyVpcEndPointServiceWhiteList请求参数结构体
    public struct ModifyVpcEndPointServiceWhiteListRequest: TCRequestModel {
        /// 用户UIN。
        public let userUin: String

        /// 终端节点服务ID。
        public let endPointServiceId: String

        /// 白名单描述信息。
        public let description: String?

        public init(userUin: String, endPointServiceId: String, description: String? = nil) {
            self.userUin = userUin
            self.endPointServiceId = endPointServiceId
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case userUin = "UserUin"
            case endPointServiceId = "EndPointServiceId"
            case description = "Description"
        }
    }

    /// ModifyVpcEndPointServiceWhiteList返回参数结构体
    public struct ModifyVpcEndPointServiceWhiteListResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改终端节点服务白名单属性
    ///
    /// 修改终端节点服务白名单属性。
    @inlinable @discardableResult
    public func modifyVpcEndPointServiceWhiteList(_ input: ModifyVpcEndPointServiceWhiteListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcEndPointServiceWhiteListResponse> {
        self.client.execute(action: "ModifyVpcEndPointServiceWhiteList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改终端节点服务白名单属性
    ///
    /// 修改终端节点服务白名单属性。
    @inlinable @discardableResult
    public func modifyVpcEndPointServiceWhiteList(_ input: ModifyVpcEndPointServiceWhiteListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcEndPointServiceWhiteListResponse {
        try await self.client.execute(action: "ModifyVpcEndPointServiceWhiteList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改终端节点服务白名单属性
    ///
    /// 修改终端节点服务白名单属性。
    @inlinable @discardableResult
    public func modifyVpcEndPointServiceWhiteList(userUin: String, endPointServiceId: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcEndPointServiceWhiteListResponse> {
        self.modifyVpcEndPointServiceWhiteList(.init(userUin: userUin, endPointServiceId: endPointServiceId, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 修改终端节点服务白名单属性
    ///
    /// 修改终端节点服务白名单属性。
    @inlinable @discardableResult
    public func modifyVpcEndPointServiceWhiteList(userUin: String, endPointServiceId: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcEndPointServiceWhiteListResponse {
        try await self.modifyVpcEndPointServiceWhiteList(.init(userUin: userUin, endPointServiceId: endPointServiceId, description: description), region: region, logger: logger, on: eventLoop)
    }
}
