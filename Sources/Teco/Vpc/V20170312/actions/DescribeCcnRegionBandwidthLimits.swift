//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DescribeCcnRegionBandwidthLimits请求参数结构体
    public struct DescribeCcnRegionBandwidthLimitsRequest: TCRequestModel {
        /// CCN实例ID。形如：ccn-f49l6u0z。
        public let ccnId: String
        
        public init (ccnId: String) {
            self.ccnId = ccnId
        }
        
        enum CodingKeys: String, CodingKey {
            case ccnId = "CcnId"
        }
    }
    
    /// DescribeCcnRegionBandwidthLimits返回参数结构体
    public struct DescribeCcnRegionBandwidthLimitsResponse: TCResponseModel {
        /// 云联网（CCN）各地域出带宽上限
        public let ccnRegionBandwidthLimitSet: [CcnRegionBandwidthLimit]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case ccnRegionBandwidthLimitSet = "CcnRegionBandwidthLimitSet"
            case requestId = "RequestId"
        }
    }
    
    /// 查询云联网各地域出带宽上限
    ///
    /// 本接口（DescribeCcnRegionBandwidthLimits）用于查询云联网各地域出带宽上限，该接口只返回已关联网络实例包含的地域
    @inlinable
    public func describeCcnRegionBandwidthLimits(_ input: DescribeCcnRegionBandwidthLimitsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeCcnRegionBandwidthLimitsResponse > {
        self.client.execute(action: "DescribeCcnRegionBandwidthLimits", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询云联网各地域出带宽上限
    ///
    /// 本接口（DescribeCcnRegionBandwidthLimits）用于查询云联网各地域出带宽上限，该接口只返回已关联网络实例包含的地域
    @inlinable
    public func describeCcnRegionBandwidthLimits(_ input: DescribeCcnRegionBandwidthLimitsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCcnRegionBandwidthLimitsResponse {
        try await self.client.execute(action: "DescribeCcnRegionBandwidthLimits", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
