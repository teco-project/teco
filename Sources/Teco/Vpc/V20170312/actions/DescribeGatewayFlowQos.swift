//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DescribeGatewayFlowQos请求参数结构体
    public struct DescribeGatewayFlowQosRequest: TCPaginatedRequest {
        /// 网关实例ID，目前我们支持的网关实例类型有，
        /// 专线网关实例ID，形如，`dcg-ltjahce6`；
        /// Nat网关实例ID，形如，`nat-ltjahce6`；
        /// VPN网关实例ID，形如，`vpn-ltjahce6`。
        public let gatewayId: String

        /// 限流的云服务器内网IP。
        public let ipAddresses: [String]?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 返回数量，默认为20，最大值为100。
        public let limit: UInt64?

        public init(gatewayId: String, ipAddresses: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.gatewayId = gatewayId
            self.ipAddresses = ipAddresses
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case ipAddresses = "IpAddresses"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeGatewayFlowQosResponse) -> DescribeGatewayFlowQosRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(gatewayId: self.gatewayId, ipAddresses: self.ipAddresses, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeGatewayFlowQos返回参数结构体
    public struct DescribeGatewayFlowQosResponse: TCPaginatedResponse {
        /// 实例详细信息列表。
        public let gatewayQosSet: [GatewayQos]

        /// 符合条件的实例数量。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case gatewayQosSet = "GatewayQosSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``GatewayQos`` list from the paginated response.
        public func getItems() -> [GatewayQos] {
            self.gatewayQosSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询网关来访IP流控带宽
    ///
    /// 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
    @inlinable
    public func describeGatewayFlowQos(_ input: DescribeGatewayFlowQosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayFlowQosResponse> {
        self.client.execute(action: "DescribeGatewayFlowQos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询网关来访IP流控带宽
    ///
    /// 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
    @inlinable
    public func describeGatewayFlowQos(_ input: DescribeGatewayFlowQosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayFlowQosResponse {
        try await self.client.execute(action: "DescribeGatewayFlowQos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询网关来访IP流控带宽
    ///
    /// 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
    @inlinable
    public func describeGatewayFlowQos(gatewayId: String, ipAddresses: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayFlowQosResponse> {
        self.describeGatewayFlowQos(.init(gatewayId: gatewayId, ipAddresses: ipAddresses, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询网关来访IP流控带宽
    ///
    /// 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
    @inlinable
    public func describeGatewayFlowQos(gatewayId: String, ipAddresses: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayFlowQosResponse {
        try await self.describeGatewayFlowQos(.init(gatewayId: gatewayId, ipAddresses: ipAddresses, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询网关来访IP流控带宽
    ///
    /// 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
    @inlinable
    public func describeGatewayFlowQosPaginated(_ input: DescribeGatewayFlowQosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [GatewayQos])> {
        self.client.paginate(input: input, region: region, command: self.describeGatewayFlowQos, logger: logger, on: eventLoop)
    }

    /// 查询网关来访IP流控带宽
    ///
    /// 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
    @inlinable @discardableResult
    public func describeGatewayFlowQosPaginated(_ input: DescribeGatewayFlowQosRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeGatewayFlowQosResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeGatewayFlowQos, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询网关来访IP流控带宽
    ///
    /// 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
    ///
    /// - Returns: `AsyncSequence`s of ``GatewayQos`` and ``DescribeGatewayFlowQosResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeGatewayFlowQosPaginator(_ input: DescribeGatewayFlowQosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeGatewayFlowQosRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeGatewayFlowQos, logger: logger, on: eventLoop)
    }
}
