//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// ModifyVpcPeeringConnection请求参数结构体
    public struct ModifyVpcPeeringConnectionRequest: TCRequest {
        /// 对等连接ID。
        public let peeringConnectionId: String

        /// 对等连接名称。
        public let peeringConnectionName: String?

        /// 带宽上限，单位Mbps。
        public let bandwidth: Int64?

        /// 计费模式，日峰值POSTPAID_BY_DAY_MAX，月95 POSTPAID_BY_MONTH_95。
        public let chargeType: String?

        public init(peeringConnectionId: String, peeringConnectionName: String? = nil, bandwidth: Int64? = nil, chargeType: String? = nil) {
            self.peeringConnectionId = peeringConnectionId
            self.peeringConnectionName = peeringConnectionName
            self.bandwidth = bandwidth
            self.chargeType = chargeType
        }

        enum CodingKeys: String, CodingKey {
            case peeringConnectionId = "PeeringConnectionId"
            case peeringConnectionName = "PeeringConnectionName"
            case bandwidth = "Bandwidth"
            case chargeType = "ChargeType"
        }
    }

    /// ModifyVpcPeeringConnection返回参数结构体
    public struct ModifyVpcPeeringConnectionResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改私有网络对等连接属性
    ///
    /// 本接口（ModifyVpcPeeringConnection）用于修改私有网络对等连接属性。
    @inlinable @discardableResult
    public func modifyVpcPeeringConnection(_ input: ModifyVpcPeeringConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcPeeringConnectionResponse> {
        self.client.execute(action: "ModifyVpcPeeringConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改私有网络对等连接属性
    ///
    /// 本接口（ModifyVpcPeeringConnection）用于修改私有网络对等连接属性。
    @inlinable @discardableResult
    public func modifyVpcPeeringConnection(_ input: ModifyVpcPeeringConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcPeeringConnectionResponse {
        try await self.client.execute(action: "ModifyVpcPeeringConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改私有网络对等连接属性
    ///
    /// 本接口（ModifyVpcPeeringConnection）用于修改私有网络对等连接属性。
    @inlinable @discardableResult
    public func modifyVpcPeeringConnection(peeringConnectionId: String, peeringConnectionName: String? = nil, bandwidth: Int64? = nil, chargeType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcPeeringConnectionResponse> {
        self.modifyVpcPeeringConnection(.init(peeringConnectionId: peeringConnectionId, peeringConnectionName: peeringConnectionName, bandwidth: bandwidth, chargeType: chargeType), region: region, logger: logger, on: eventLoop)
    }

    /// 修改私有网络对等连接属性
    ///
    /// 本接口（ModifyVpcPeeringConnection）用于修改私有网络对等连接属性。
    @inlinable @discardableResult
    public func modifyVpcPeeringConnection(peeringConnectionId: String, peeringConnectionName: String? = nil, bandwidth: Int64? = nil, chargeType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcPeeringConnectionResponse {
        try await self.modifyVpcPeeringConnection(.init(peeringConnectionId: peeringConnectionId, peeringConnectionName: peeringConnectionName, bandwidth: bandwidth, chargeType: chargeType), region: region, logger: logger, on: eventLoop)
    }
}
