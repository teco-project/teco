//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DeleteAssistantCidr请求参数结构体
    public struct DeleteAssistantCidrRequest: TCRequestModel {
        /// `VPC`实例`ID`。形如：`vpc-6v2ht8q5`
        public let vpcId: String

        /// CIDR数组，格式如["10.0.0.0/16", "172.16.0.0/16"]
        public let cidrBlocks: [String]

        public init(vpcId: String, cidrBlocks: [String]) {
            self.vpcId = vpcId
            self.cidrBlocks = cidrBlocks
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case cidrBlocks = "CidrBlocks"
        }
    }

    /// DeleteAssistantCidr返回参数结构体
    public struct DeleteAssistantCidrResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除辅助CIDR
    ///
    /// 本接口(DeleteAssistantCidr)用于删除辅助CIDR。
    @inlinable
    public func deleteAssistantCidr(_ input: DeleteAssistantCidrRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAssistantCidrResponse> {
        self.client.execute(action: "DeleteAssistantCidr", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除辅助CIDR
    ///
    /// 本接口(DeleteAssistantCidr)用于删除辅助CIDR。
    @inlinable
    public func deleteAssistantCidr(_ input: DeleteAssistantCidrRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAssistantCidrResponse {
        try await self.client.execute(action: "DeleteAssistantCidr", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除辅助CIDR
    ///
    /// 本接口(DeleteAssistantCidr)用于删除辅助CIDR。
    @inlinable
    public func deleteAssistantCidr(vpcId: String, cidrBlocks: [String], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAssistantCidrResponse> {
        self.deleteAssistantCidr(DeleteAssistantCidrRequest(vpcId: vpcId, cidrBlocks: cidrBlocks), logger: logger, on: eventLoop)
    }

    /// 删除辅助CIDR
    ///
    /// 本接口(DeleteAssistantCidr)用于删除辅助CIDR。
    @inlinable
    public func deleteAssistantCidr(vpcId: String, cidrBlocks: [String], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAssistantCidrResponse {
        try await self.deleteAssistantCidr(DeleteAssistantCidrRequest(vpcId: vpcId, cidrBlocks: cidrBlocks), logger: logger, on: eventLoop)
    }
}
