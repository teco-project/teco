//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DescribeNetworkAccountType请求参数结构体
    public struct DescribeNetworkAccountTypeRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeNetworkAccountType返回参数结构体
    public struct DescribeNetworkAccountTypeResponse: TCResponseModel {
        /// 用户账号的网络类型，STANDARD为标准用户，LEGACY为传统用户
        public let networkAccountType: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case networkAccountType = "NetworkAccountType"
            case requestId = "RequestId"
        }
    }

    /// 查询用户网络类型
    ///
    /// 判断用户在网络侧的用户类型，如标准（带宽上移），传统（非上移）。
    @inlinable
    public func describeNetworkAccountType(_ input: DescribeNetworkAccountTypeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNetworkAccountTypeResponse> {
        self.client.execute(action: "DescribeNetworkAccountType", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询用户网络类型
    ///
    /// 判断用户在网络侧的用户类型，如标准（带宽上移），传统（非上移）。
    @inlinable
    public func describeNetworkAccountType(_ input: DescribeNetworkAccountTypeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNetworkAccountTypeResponse {
        try await self.client.execute(action: "DescribeNetworkAccountType", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询用户网络类型
    ///
    /// 判断用户在网络侧的用户类型，如标准（带宽上移），传统（非上移）。
    @inlinable
    public func describeNetworkAccountType(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNetworkAccountTypeResponse> {
        self.describeNetworkAccountType(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户网络类型
    ///
    /// 判断用户在网络侧的用户类型，如标准（带宽上移），传统（非上移）。
    @inlinable
    public func describeNetworkAccountType(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNetworkAccountTypeResponse {
        try await self.describeNetworkAccountType(.init(), region: region, logger: logger, on: eventLoop)
    }
}
