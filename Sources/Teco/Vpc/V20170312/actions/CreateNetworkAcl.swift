//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// CreateNetworkAcl请求参数结构体
    public struct CreateNetworkAclRequest: TCRequestModel {
        /// VPC实例ID。可通过<a href="https://cloud.tencent.com/document/product/215/15778">DescribeVpcs</a>接口返回值中的VpcId获取。
        public let vpcId: String

        /// 网络ACL名称，最大长度不能超过60个字节。
        public let networkAclName: String

        /// 网络ACL类型，三元组(TRIPLE)或五元组(QUINTUPLE)。默认值三元组(TRIPLE)。
        public let networkAclType: String?

        /// 指定绑定的标签列表，例如：[{"Key": "city", "Value": "shanghai"}]。
        public let tags: [Tag]?

        public init(vpcId: String, networkAclName: String, networkAclType: String? = nil, tags: [Tag]? = nil) {
            self.vpcId = vpcId
            self.networkAclName = networkAclName
            self.networkAclType = networkAclType
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case networkAclName = "NetworkAclName"
            case networkAclType = "NetworkAclType"
            case tags = "Tags"
        }
    }

    /// CreateNetworkAcl返回参数结构体
    public struct CreateNetworkAclResponse: TCResponseModel {
        /// 网络ACL实例。
        public let networkAcl: NetworkAcl

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case networkAcl = "NetworkAcl"
            case requestId = "RequestId"
        }
    }

    /// 创建网络ACL
    ///
    /// 本接口（CreateNetworkAcl）用于创建新的<a href="https://cloud.tencent.com/document/product/215/20088">网络ACL</a>。
    /// * 新建的网络ACL的入站和出站规则默认都是全部拒绝，在创建后通常您需要再调用ModifyNetworkAclEntries将网络ACL的规则设置为需要的规则。
    @inlinable
    public func createNetworkAcl(_ input: CreateNetworkAclRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNetworkAclResponse> {
        self.client.execute(action: "CreateNetworkAcl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建网络ACL
    ///
    /// 本接口（CreateNetworkAcl）用于创建新的<a href="https://cloud.tencent.com/document/product/215/20088">网络ACL</a>。
    /// * 新建的网络ACL的入站和出站规则默认都是全部拒绝，在创建后通常您需要再调用ModifyNetworkAclEntries将网络ACL的规则设置为需要的规则。
    @inlinable
    public func createNetworkAcl(_ input: CreateNetworkAclRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNetworkAclResponse {
        try await self.client.execute(action: "CreateNetworkAcl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建网络ACL
    ///
    /// 本接口（CreateNetworkAcl）用于创建新的<a href="https://cloud.tencent.com/document/product/215/20088">网络ACL</a>。
    /// * 新建的网络ACL的入站和出站规则默认都是全部拒绝，在创建后通常您需要再调用ModifyNetworkAclEntries将网络ACL的规则设置为需要的规则。
    @inlinable
    public func createNetworkAcl(vpcId: String, networkAclName: String, networkAclType: String? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNetworkAclResponse> {
        self.createNetworkAcl(.init(vpcId: vpcId, networkAclName: networkAclName, networkAclType: networkAclType, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 创建网络ACL
    ///
    /// 本接口（CreateNetworkAcl）用于创建新的<a href="https://cloud.tencent.com/document/product/215/20088">网络ACL</a>。
    /// * 新建的网络ACL的入站和出站规则默认都是全部拒绝，在创建后通常您需要再调用ModifyNetworkAclEntries将网络ACL的规则设置为需要的规则。
    @inlinable
    public func createNetworkAcl(vpcId: String, networkAclName: String, networkAclType: String? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNetworkAclResponse {
        try await self.createNetworkAcl(.init(vpcId: vpcId, networkAclName: networkAclName, networkAclType: networkAclType, tags: tags), region: region, logger: logger, on: eventLoop)
    }
}
