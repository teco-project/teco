//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// CreateNatGatewaySourceIpTranslationNatRule请求参数结构体
    public struct CreateNatGatewaySourceIpTranslationNatRuleRequest: TCRequestModel {
        /// NAT网关的ID，形如："nat-df45454"
        public let natGatewayId: String

        /// NAT网关的SNAT转换规则
        public let sourceIpTranslationNatRules: [SourceIpTranslationNatRule]

        public init(natGatewayId: String, sourceIpTranslationNatRules: [SourceIpTranslationNatRule]) {
            self.natGatewayId = natGatewayId
            self.sourceIpTranslationNatRules = sourceIpTranslationNatRules
        }

        enum CodingKeys: String, CodingKey {
            case natGatewayId = "NatGatewayId"
            case sourceIpTranslationNatRules = "SourceIpTranslationNatRules"
        }
    }

    /// CreateNatGatewaySourceIpTranslationNatRule返回参数结构体
    public struct CreateNatGatewaySourceIpTranslationNatRuleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建NAT网关SNAT规则
    ///
    /// 本接口(CreateNatGatewaySourceIpTranslationNatRule)用于创建NAT网关SNAT规则
    @inlinable
    public func createNatGatewaySourceIpTranslationNatRule(_ input: CreateNatGatewaySourceIpTranslationNatRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNatGatewaySourceIpTranslationNatRuleResponse> {
        self.client.execute(action: "CreateNatGatewaySourceIpTranslationNatRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建NAT网关SNAT规则
    ///
    /// 本接口(CreateNatGatewaySourceIpTranslationNatRule)用于创建NAT网关SNAT规则
    @inlinable
    public func createNatGatewaySourceIpTranslationNatRule(_ input: CreateNatGatewaySourceIpTranslationNatRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNatGatewaySourceIpTranslationNatRuleResponse {
        try await self.client.execute(action: "CreateNatGatewaySourceIpTranslationNatRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建NAT网关SNAT规则
    ///
    /// 本接口(CreateNatGatewaySourceIpTranslationNatRule)用于创建NAT网关SNAT规则
    @inlinable
    public func createNatGatewaySourceIpTranslationNatRule(natGatewayId: String, sourceIpTranslationNatRules: [SourceIpTranslationNatRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNatGatewaySourceIpTranslationNatRuleResponse> {
        self.createNatGatewaySourceIpTranslationNatRule(CreateNatGatewaySourceIpTranslationNatRuleRequest(natGatewayId: natGatewayId, sourceIpTranslationNatRules: sourceIpTranslationNatRules), region: region, logger: logger, on: eventLoop)
    }

    /// 创建NAT网关SNAT规则
    ///
    /// 本接口(CreateNatGatewaySourceIpTranslationNatRule)用于创建NAT网关SNAT规则
    @inlinable
    public func createNatGatewaySourceIpTranslationNatRule(natGatewayId: String, sourceIpTranslationNatRules: [SourceIpTranslationNatRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNatGatewaySourceIpTranslationNatRuleResponse {
        try await self.createNatGatewaySourceIpTranslationNatRule(CreateNatGatewaySourceIpTranslationNatRuleRequest(natGatewayId: natGatewayId, sourceIpTranslationNatRules: sourceIpTranslationNatRules), region: region, logger: logger, on: eventLoop)
    }
}
