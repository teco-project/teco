//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DeleteNetworkAclEntries请求参数结构体
    public struct DeleteNetworkAclEntriesRequest: TCRequest {
        /// 三元组网络ACL实例ID。例如：acl-12345678。
        public let networkAclId: String

        /// 三元组网络ACL规则集。
        public let networkAclEntrySet: NetworkAclEntrySet?

        public init(networkAclId: String, networkAclEntrySet: NetworkAclEntrySet? = nil) {
            self.networkAclId = networkAclId
            self.networkAclEntrySet = networkAclEntrySet
        }

        enum CodingKeys: String, CodingKey {
            case networkAclId = "NetworkAclId"
            case networkAclEntrySet = "NetworkAclEntrySet"
        }
    }

    /// DeleteNetworkAclEntries返回参数结构体
    public struct DeleteNetworkAclEntriesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除ACL三元组单条规则
    ///
    /// 本接口（DeleteNetworkAclEntries）用于删除三元组网络ACL的入站规则和出站规则。在NetworkAclEntrySet参数中：
    /// * 删除IPv4规则，需要传入NetworkAclIpv4EntryId。
    /// * 删除IPv6规则，需要传入NetworkAclIpv6EntryId。
    @inlinable @discardableResult
    public func deleteNetworkAclEntries(_ input: DeleteNetworkAclEntriesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteNetworkAclEntriesResponse> {
        self.client.execute(action: "DeleteNetworkAclEntries", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除ACL三元组单条规则
    ///
    /// 本接口（DeleteNetworkAclEntries）用于删除三元组网络ACL的入站规则和出站规则。在NetworkAclEntrySet参数中：
    /// * 删除IPv4规则，需要传入NetworkAclIpv4EntryId。
    /// * 删除IPv6规则，需要传入NetworkAclIpv6EntryId。
    @inlinable @discardableResult
    public func deleteNetworkAclEntries(_ input: DeleteNetworkAclEntriesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteNetworkAclEntriesResponse {
        try await self.client.execute(action: "DeleteNetworkAclEntries", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除ACL三元组单条规则
    ///
    /// 本接口（DeleteNetworkAclEntries）用于删除三元组网络ACL的入站规则和出站规则。在NetworkAclEntrySet参数中：
    /// * 删除IPv4规则，需要传入NetworkAclIpv4EntryId。
    /// * 删除IPv6规则，需要传入NetworkAclIpv6EntryId。
    @inlinable @discardableResult
    public func deleteNetworkAclEntries(networkAclId: String, networkAclEntrySet: NetworkAclEntrySet? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteNetworkAclEntriesResponse> {
        self.deleteNetworkAclEntries(.init(networkAclId: networkAclId, networkAclEntrySet: networkAclEntrySet), region: region, logger: logger, on: eventLoop)
    }

    /// 删除ACL三元组单条规则
    ///
    /// 本接口（DeleteNetworkAclEntries）用于删除三元组网络ACL的入站规则和出站规则。在NetworkAclEntrySet参数中：
    /// * 删除IPv4规则，需要传入NetworkAclIpv4EntryId。
    /// * 删除IPv6规则，需要传入NetworkAclIpv6EntryId。
    @inlinable @discardableResult
    public func deleteNetworkAclEntries(networkAclId: String, networkAclEntrySet: NetworkAclEntrySet? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteNetworkAclEntriesResponse {
        try await self.deleteNetworkAclEntries(.init(networkAclId: networkAclId, networkAclEntrySet: networkAclEntrySet), region: region, logger: logger, on: eventLoop)
    }
}
