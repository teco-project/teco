//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Vpc {
    /// CreateVpnConnection请求参数结构体
    public struct CreateVpnConnectionRequest: TCRequestModel {
        /// VPN网关实例ID。
        public let vpnGatewayId: String

        /// 对端网关ID，例如：cgw-2wqq41m9，可通过DescribeCustomerGateways接口查询对端网关。
        public let customerGatewayId: String

        /// 通道名称，可任意命名，但不得超过60个字符。
        public let vpnConnectionName: String

        /// 预共享密钥。
        public let preShareKey: String

        /// VPC实例ID。可通过[DescribeVpcs](https://cloud.tencent.com/document/product/215/15778)接口返回值中的VpcId获取。
        /// CCN VPN 形的通道 可以不传VPCID
        public let vpcId: String?

        /// SPD策略组，例如：{"10.0.0.5/24":["172.123.10.5/16"]}，10.0.0.5/24是vpc内网段172.123.10.5/16是IDC网段。用户指定VPC内哪些网段可以和您IDC中哪些网段通信。
        public let securityPolicyDatabases: [SecurityPolicyDatabase]?

        /// IKE配置（Internet Key Exchange，因特网密钥交换），IKE具有一套自我保护机制，用户配置网络安全协议
        public let ikeOptionsSpecification: IKEOptionsSpecification?

        /// IPSec配置，腾讯云提供IPSec安全会话设置
        public let ipsecOptionsSpecification: IPSECOptionsSpecification?

        /// 指定绑定的标签列表，例如：[{"Key": "city", "Value": "shanghai"}]
        public let tags: [Tag]?

        /// 是否支持隧道内健康检查
        public let enableHealthCheck: Bool?

        /// 健康检查本端地址
        public let healthCheckLocalIp: String?

        /// 健康检查对端地址
        public let healthCheckRemoteIp: String?

        /// 通道类型, 例如:["STATIC", "StaticRoute", "Policy"]
        public let routeType: String?

        /// 协商类型，默认为active（主动协商）。可选值：active（主动协商），passive（被动协商），flowTrigger（流量协商）
        public let negotiationType: String?

        /// DPD探测开关。默认为0，表示关闭DPD探测。可选值：0（关闭），1（开启）
        public let dpdEnable: Int64?

        /// DPD超时时间。即探测确认对端不存在需要的时间。dpdEnable为1（开启）时有效。默认30，单位为秒
        public let dpdTimeout: String?

        /// DPD超时后的动作。默认为clear。dpdEnable为1（开启）时有效。可取值为clear（断开）和restart（重试）
        public let dpdAction: String?

        public init(vpnGatewayId: String, customerGatewayId: String, vpnConnectionName: String, preShareKey: String, vpcId: String? = nil, securityPolicyDatabases: [SecurityPolicyDatabase]? = nil, ikeOptionsSpecification: IKEOptionsSpecification? = nil, ipsecOptionsSpecification: IPSECOptionsSpecification? = nil, tags: [Tag]? = nil, enableHealthCheck: Bool? = nil, healthCheckLocalIp: String? = nil, healthCheckRemoteIp: String? = nil, routeType: String? = nil, negotiationType: String? = nil, dpdEnable: Int64? = nil, dpdTimeout: String? = nil, dpdAction: String? = nil) {
            self.vpnGatewayId = vpnGatewayId
            self.customerGatewayId = customerGatewayId
            self.vpnConnectionName = vpnConnectionName
            self.preShareKey = preShareKey
            self.vpcId = vpcId
            self.securityPolicyDatabases = securityPolicyDatabases
            self.ikeOptionsSpecification = ikeOptionsSpecification
            self.ipsecOptionsSpecification = ipsecOptionsSpecification
            self.tags = tags
            self.enableHealthCheck = enableHealthCheck
            self.healthCheckLocalIp = healthCheckLocalIp
            self.healthCheckRemoteIp = healthCheckRemoteIp
            self.routeType = routeType
            self.negotiationType = negotiationType
            self.dpdEnable = dpdEnable
            self.dpdTimeout = dpdTimeout
            self.dpdAction = dpdAction
        }

        enum CodingKeys: String, CodingKey {
            case vpnGatewayId = "VpnGatewayId"
            case customerGatewayId = "CustomerGatewayId"
            case vpnConnectionName = "VpnConnectionName"
            case preShareKey = "PreShareKey"
            case vpcId = "VpcId"
            case securityPolicyDatabases = "SecurityPolicyDatabases"
            case ikeOptionsSpecification = "IKEOptionsSpecification"
            case ipsecOptionsSpecification = "IPSECOptionsSpecification"
            case tags = "Tags"
            case enableHealthCheck = "EnableHealthCheck"
            case healthCheckLocalIp = "HealthCheckLocalIp"
            case healthCheckRemoteIp = "HealthCheckRemoteIp"
            case routeType = "RouteType"
            case negotiationType = "NegotiationType"
            case dpdEnable = "DpdEnable"
            case dpdTimeout = "DpdTimeout"
            case dpdAction = "DpdAction"
        }
    }

    /// CreateVpnConnection返回参数结构体
    public struct CreateVpnConnectionResponse: TCResponseModel {
        /// 通道实例对象。
        public let vpnConnection: VpnConnection

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case vpnConnection = "VpnConnection"
            case requestId = "RequestId"
        }
    }

    /// 创建VPN通道
    ///
    /// 本接口（CreateVpnConnection）用于创建VPN通道。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable
    public func createVpnConnection(_ input: CreateVpnConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVpnConnectionResponse> {
        self.client.execute(action: "CreateVpnConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建VPN通道
    ///
    /// 本接口（CreateVpnConnection）用于创建VPN通道。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable
    public func createVpnConnection(_ input: CreateVpnConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVpnConnectionResponse {
        try await self.client.execute(action: "CreateVpnConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建VPN通道
    ///
    /// 本接口（CreateVpnConnection）用于创建VPN通道。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable
    public func createVpnConnection(vpnGatewayId: String, customerGatewayId: String, vpnConnectionName: String, preShareKey: String, vpcId: String? = nil, securityPolicyDatabases: [SecurityPolicyDatabase]? = nil, ikeOptionsSpecification: IKEOptionsSpecification? = nil, ipsecOptionsSpecification: IPSECOptionsSpecification? = nil, tags: [Tag]? = nil, enableHealthCheck: Bool? = nil, healthCheckLocalIp: String? = nil, healthCheckRemoteIp: String? = nil, routeType: String? = nil, negotiationType: String? = nil, dpdEnable: Int64? = nil, dpdTimeout: String? = nil, dpdAction: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVpnConnectionResponse> {
        self.createVpnConnection(.init(vpnGatewayId: vpnGatewayId, customerGatewayId: customerGatewayId, vpnConnectionName: vpnConnectionName, preShareKey: preShareKey, vpcId: vpcId, securityPolicyDatabases: securityPolicyDatabases, ikeOptionsSpecification: ikeOptionsSpecification, ipsecOptionsSpecification: ipsecOptionsSpecification, tags: tags, enableHealthCheck: enableHealthCheck, healthCheckLocalIp: healthCheckLocalIp, healthCheckRemoteIp: healthCheckRemoteIp, routeType: routeType, negotiationType: negotiationType, dpdEnable: dpdEnable, dpdTimeout: dpdTimeout, dpdAction: dpdAction), region: region, logger: logger, on: eventLoop)
    }

    /// 创建VPN通道
    ///
    /// 本接口（CreateVpnConnection）用于创建VPN通道。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable
    public func createVpnConnection(vpnGatewayId: String, customerGatewayId: String, vpnConnectionName: String, preShareKey: String, vpcId: String? = nil, securityPolicyDatabases: [SecurityPolicyDatabase]? = nil, ikeOptionsSpecification: IKEOptionsSpecification? = nil, ipsecOptionsSpecification: IPSECOptionsSpecification? = nil, tags: [Tag]? = nil, enableHealthCheck: Bool? = nil, healthCheckLocalIp: String? = nil, healthCheckRemoteIp: String? = nil, routeType: String? = nil, negotiationType: String? = nil, dpdEnable: Int64? = nil, dpdTimeout: String? = nil, dpdAction: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVpnConnectionResponse {
        try await self.createVpnConnection(.init(vpnGatewayId: vpnGatewayId, customerGatewayId: customerGatewayId, vpnConnectionName: vpnConnectionName, preShareKey: preShareKey, vpcId: vpcId, securityPolicyDatabases: securityPolicyDatabases, ikeOptionsSpecification: ikeOptionsSpecification, ipsecOptionsSpecification: ipsecOptionsSpecification, tags: tags, enableHealthCheck: enableHealthCheck, healthCheckLocalIp: healthCheckLocalIp, healthCheckRemoteIp: healthCheckRemoteIp, routeType: routeType, negotiationType: negotiationType, dpdEnable: dpdEnable, dpdTimeout: dpdTimeout, dpdAction: dpdAction), region: region, logger: logger, on: eventLoop)
    }
}
