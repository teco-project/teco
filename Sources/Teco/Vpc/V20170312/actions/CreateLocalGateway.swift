//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// CreateLocalGateway请求参数结构体
    public struct CreateLocalGatewayRequest: TCRequestModel {
        /// 本地网关名称。
        public let localGatewayName: String

        /// VPC实例ID。
        public let vpcId: String

        /// CDC实例ID。
        public let cdcId: String

        public init(localGatewayName: String, vpcId: String, cdcId: String) {
            self.localGatewayName = localGatewayName
            self.vpcId = vpcId
            self.cdcId = cdcId
        }

        enum CodingKeys: String, CodingKey {
            case localGatewayName = "LocalGatewayName"
            case vpcId = "VpcId"
            case cdcId = "CdcId"
        }
    }

    /// CreateLocalGateway返回参数结构体
    public struct CreateLocalGatewayResponse: TCResponseModel {
        /// 本地网关信息。
        public let localGateway: LocalGateway

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case localGateway = "LocalGateway"
            case requestId = "RequestId"
        }
    }

    /// 创建本地网关
    ///
    /// 本接口（CreateLocalGateway）用于创建用于CDC的本地网关。
    @inlinable
    public func createLocalGateway(_ input: CreateLocalGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLocalGatewayResponse> {
        self.client.execute(action: "CreateLocalGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建本地网关
    ///
    /// 本接口（CreateLocalGateway）用于创建用于CDC的本地网关。
    @inlinable
    public func createLocalGateway(_ input: CreateLocalGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLocalGatewayResponse {
        try await self.client.execute(action: "CreateLocalGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建本地网关
    ///
    /// 本接口（CreateLocalGateway）用于创建用于CDC的本地网关。
    @inlinable
    public func createLocalGateway(localGatewayName: String, vpcId: String, cdcId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLocalGatewayResponse> {
        self.createLocalGateway(.init(localGatewayName: localGatewayName, vpcId: vpcId, cdcId: cdcId), region: region, logger: logger, on: eventLoop)
    }

    /// 创建本地网关
    ///
    /// 本接口（CreateLocalGateway）用于创建用于CDC的本地网关。
    @inlinable
    public func createLocalGateway(localGatewayName: String, vpcId: String, cdcId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLocalGatewayResponse {
        try await self.createLocalGateway(.init(localGatewayName: localGatewayName, vpcId: vpcId, cdcId: cdcId), region: region, logger: logger, on: eventLoop)
    }
}
