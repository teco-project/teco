//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// CreateSnapshotPolicies请求参数结构体
    public struct CreateSnapshotPoliciesRequest: TCRequestModel {
        /// 快照策略详情。
        public let snapshotPolicies: [SnapshotPolicy]

        public init(snapshotPolicies: [SnapshotPolicy]) {
            self.snapshotPolicies = snapshotPolicies
        }

        enum CodingKeys: String, CodingKey {
            case snapshotPolicies = "SnapshotPolicies"
        }
    }

    /// CreateSnapshotPolicies返回参数结构体
    public struct CreateSnapshotPoliciesResponse: TCResponseModel {
        /// 快照策略。
        public let snapshotPolicies: [SnapshotPolicy]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case snapshotPolicies = "SnapshotPolicies"
            case requestId = "RequestId"
        }
    }

    /// 创建快照策略
    ///
    /// 本接口（CreateSnapshotPolicies）用于创建快照策略。
    @inlinable
    public func createSnapshotPolicies(_ input: CreateSnapshotPoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSnapshotPoliciesResponse> {
        self.client.execute(action: "CreateSnapshotPolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建快照策略
    ///
    /// 本接口（CreateSnapshotPolicies）用于创建快照策略。
    @inlinable
    public func createSnapshotPolicies(_ input: CreateSnapshotPoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSnapshotPoliciesResponse {
        try await self.client.execute(action: "CreateSnapshotPolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建快照策略
    ///
    /// 本接口（CreateSnapshotPolicies）用于创建快照策略。
    @inlinable
    public func createSnapshotPolicies(snapshotPolicies: [SnapshotPolicy], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSnapshotPoliciesResponse> {
        self.createSnapshotPolicies(.init(snapshotPolicies: snapshotPolicies), region: region, logger: logger, on: eventLoop)
    }

    /// 创建快照策略
    ///
    /// 本接口（CreateSnapshotPolicies）用于创建快照策略。
    @inlinable
    public func createSnapshotPolicies(snapshotPolicies: [SnapshotPolicy], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSnapshotPoliciesResponse {
        try await self.createSnapshotPolicies(.init(snapshotPolicies: snapshotPolicies), region: region, logger: logger, on: eventLoop)
    }
}
