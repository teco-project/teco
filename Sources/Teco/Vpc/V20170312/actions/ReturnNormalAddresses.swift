//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Vpc {
    /// ReturnNormalAddresses请求参数结构体
    public struct ReturnNormalAddressesRequest: TCRequestModel {
        /// EIP 的 IP 地址,示例：101.35.139.183
        public let addressIps: [String]?

        public init(addressIps: [String]? = nil) {
            self.addressIps = addressIps
        }

        enum CodingKeys: String, CodingKey {
            case addressIps = "AddressIps"
        }
    }

    /// ReturnNormalAddresses返回参数结构体
    public struct ReturnNormalAddressesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 解绑并释放普通公网IP
    ///
    /// 本接口（ReturnNormalAddresses）用于解绑并释放普通公网IP。
    /// 为完善公网IP的访问管理功能，此接口于2022年12月15日升级优化鉴权功能，升级后子用户调用此接口需向主账号申请CAM策略授权，否则可能调用失败。您可以提前为子账号配置操作授权，详情见[授权指南](https://cloud.tencent.com/document/product/598/34545)。
    @inlinable @discardableResult
    public func returnNormalAddresses(_ input: ReturnNormalAddressesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReturnNormalAddressesResponse> {
        self.client.execute(action: "ReturnNormalAddresses", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 解绑并释放普通公网IP
    ///
    /// 本接口（ReturnNormalAddresses）用于解绑并释放普通公网IP。
    /// 为完善公网IP的访问管理功能，此接口于2022年12月15日升级优化鉴权功能，升级后子用户调用此接口需向主账号申请CAM策略授权，否则可能调用失败。您可以提前为子账号配置操作授权，详情见[授权指南](https://cloud.tencent.com/document/product/598/34545)。
    @inlinable @discardableResult
    public func returnNormalAddresses(_ input: ReturnNormalAddressesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReturnNormalAddressesResponse {
        try await self.client.execute(action: "ReturnNormalAddresses", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 解绑并释放普通公网IP
    ///
    /// 本接口（ReturnNormalAddresses）用于解绑并释放普通公网IP。
    /// 为完善公网IP的访问管理功能，此接口于2022年12月15日升级优化鉴权功能，升级后子用户调用此接口需向主账号申请CAM策略授权，否则可能调用失败。您可以提前为子账号配置操作授权，详情见[授权指南](https://cloud.tencent.com/document/product/598/34545)。
    @inlinable @discardableResult
    public func returnNormalAddresses(addressIps: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReturnNormalAddressesResponse> {
        self.returnNormalAddresses(.init(addressIps: addressIps), region: region, logger: logger, on: eventLoop)
    }

    /// 解绑并释放普通公网IP
    ///
    /// 本接口（ReturnNormalAddresses）用于解绑并释放普通公网IP。
    /// 为完善公网IP的访问管理功能，此接口于2022年12月15日升级优化鉴权功能，升级后子用户调用此接口需向主账号申请CAM策略授权，否则可能调用失败。您可以提前为子账号配置操作授权，详情见[授权指南](https://cloud.tencent.com/document/product/598/34545)。
    @inlinable @discardableResult
    public func returnNormalAddresses(addressIps: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReturnNormalAddressesResponse {
        try await self.returnNormalAddresses(.init(addressIps: addressIps), region: region, logger: logger, on: eventLoop)
    }
}
