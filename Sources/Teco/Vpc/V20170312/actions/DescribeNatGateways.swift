//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DescribeNatGateways请求参数结构体
    public struct DescribeNatGatewaysRequest: TCPaginatedRequest {
        /// NAT网关统一 ID，形如：`nat-123xx454`。每次请求的实例上限为100。参数不支持同时指定NatGatewayIds和Filters。
        public let natGatewayIds: [String]?

        /// 过滤条件，参数不支持同时指定NatGatewayIds和Filters。每次请求的Filters的上限为10，Filter.Values的上限为5。
        /// - nat-gateway-id - String - （过滤条件）协议端口模板实例ID，形如：`nat-123xx454`。
        /// - vpc-id - String - （过滤条件）私有网络 唯一ID，形如：`vpc-123xx454`。
        /// - nat-gateway-name - String - （过滤条件）协议端口模板实例ID，形如：`test_nat`。
        /// - tag-key - String - （过滤条件）标签键，形如：`test-key`。
        public let filters: [Filter]?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 返回数量，默认为20，最大值为100。
        public let limit: UInt64?

        public init(natGatewayIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.natGatewayIds = natGatewayIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case natGatewayIds = "NatGatewayIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeNatGatewaysResponse) -> DescribeNatGatewaysRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(natGatewayIds: self.natGatewayIds, filters: self.filters, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeNatGateways返回参数结构体
    public struct DescribeNatGatewaysResponse: TCPaginatedResponse {
        /// NAT网关对象数组。
        public let natGatewaySet: [NatGateway]

        /// 符合条件的NAT网关对象个数。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case natGatewaySet = "NatGatewaySet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``NatGateway`` list from the paginated response.
        public func getItems() -> [NatGateway] {
            self.natGatewaySet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询NAT网关
    ///
    /// 本接口（DescribeNatGateways）用于查询 NAT 网关。
    @inlinable
    public func describeNatGateways(_ input: DescribeNatGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNatGatewaysResponse> {
        self.client.execute(action: "DescribeNatGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询NAT网关
    ///
    /// 本接口（DescribeNatGateways）用于查询 NAT 网关。
    @inlinable
    public func describeNatGateways(_ input: DescribeNatGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNatGatewaysResponse {
        try await self.client.execute(action: "DescribeNatGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询NAT网关
    ///
    /// 本接口（DescribeNatGateways）用于查询 NAT 网关。
    @inlinable
    public func describeNatGateways(natGatewayIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNatGatewaysResponse> {
        self.describeNatGateways(.init(natGatewayIds: natGatewayIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询NAT网关
    ///
    /// 本接口（DescribeNatGateways）用于查询 NAT 网关。
    @inlinable
    public func describeNatGateways(natGatewayIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNatGatewaysResponse {
        try await self.describeNatGateways(.init(natGatewayIds: natGatewayIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询NAT网关
    ///
    /// 本接口（DescribeNatGateways）用于查询 NAT 网关。
    @inlinable
    public func describeNatGatewaysPaginated(_ input: DescribeNatGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [NatGateway])> {
        self.client.paginate(input: input, region: region, command: self.describeNatGateways, logger: logger, on: eventLoop)
    }

    /// 查询NAT网关
    ///
    /// 本接口（DescribeNatGateways）用于查询 NAT 网关。
    @inlinable @discardableResult
    public func describeNatGatewaysPaginated(_ input: DescribeNatGatewaysRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeNatGatewaysResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeNatGateways, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询NAT网关
    ///
    /// 本接口（DescribeNatGateways）用于查询 NAT 网关。
    ///
    /// - Returns: `AsyncSequence`s of ``NatGateway`` and ``DescribeNatGatewaysResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeNatGatewaysPaginator(_ input: DescribeNatGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeNatGatewaysRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeNatGateways, logger: logger, on: eventLoop)
    }
}
