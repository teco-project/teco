//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// 查询网络探测列表
    ///
    /// 本接口（DescribeNetDetects）用于查询网络探测列表。
    @inlinable
    public func describeNetDetects(_ input: DescribeNetDetectsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeNetDetectsResponse > {
        self.client.execute(action: "DescribeNetDetects", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询网络探测列表
    ///
    /// 本接口（DescribeNetDetects）用于查询网络探测列表。
    @inlinable
    public func describeNetDetects(_ input: DescribeNetDetectsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNetDetectsResponse {
        try await self.client.execute(action: "DescribeNetDetects", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeNetDetects请求参数结构体
    public struct DescribeNetDetectsRequest: TCRequestModel {
        /// 网络探测实例`ID`数组。形如：[`netd-12345678`]
        public let netDetectIds: [String]?
        
        /// 过滤条件，参数不支持同时指定NetDetectIds和Filters。
        /// <li>vpc-id - String - （过滤条件）VPC实例ID，形如：vpc-12345678</li>
        /// <li>net-detect-id - String - （过滤条件）网络探测实例ID，形如：netd-12345678</li>
        /// <li>subnet-id - String - （过滤条件）子网实例ID，形如：subnet-12345678</li>
        /// <li>net-detect-name - String - （过滤条件）网络探测名称</li>
        public let filters: [Filter]?
        
        /// 偏移量，默认为0。
        public let offset: UInt64?
        
        /// 返回数量，默认为20，最大值为100。
        public let limit: UInt64?
        
        public init (netDetectIds: [String]?, filters: [Filter]?, offset: UInt64?, limit: UInt64?) {
            self.netDetectIds = netDetectIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }
        
        enum CodingKeys: String, CodingKey {
            case netDetectIds = "NetDetectIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }
    }
    
    /// DescribeNetDetects返回参数结构体
    public struct DescribeNetDetectsResponse: TCResponseModel {
        /// 符合条件的网络探测对象数组。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let netDetectSet: [NetDetect]?
        
        /// 符合条件的网络探测对象数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case netDetectSet = "NetDetectSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
}