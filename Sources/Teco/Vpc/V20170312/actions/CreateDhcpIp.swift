//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// CreateDhcpIp请求参数结构体
    public struct CreateDhcpIpRequest: TCRequestModel {
        /// 私有网络`ID`。
        public let vpcId: String
        
        /// 子网`ID`。
        public let subnetId: String
        
        /// `DhcpIp`名称。
        public let dhcpIpName: String
        
        /// 新申请的内网IP地址个数。总数不能超过64个。
        public let secondaryPrivateIpAddressCount: UInt64?
        
        public init (vpcId: String, subnetId: String, dhcpIpName: String, secondaryPrivateIpAddressCount: UInt64? = nil) {
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.dhcpIpName = dhcpIpName
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }
        
        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case dhcpIpName = "DhcpIpName"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
        }
    }
    
    /// CreateDhcpIp返回参数结构体
    public struct CreateDhcpIpResponse: TCResponseModel {
        /// 新创建的`DhcpIp`信息
        public let dhcpIpSet: [DhcpIp]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case dhcpIpSet = "DhcpIpSet"
            case requestId = "RequestId"
        }
    }
    
    /// 创建DhcpIp
    ///
    /// 本接口（CreateDhcpIp）用于创建DhcpIp
    @inlinable
    public func createDhcpIp(_ input: CreateDhcpIpRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateDhcpIpResponse > {
        self.client.execute(action: "CreateDhcpIp", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建DhcpIp
    ///
    /// 本接口（CreateDhcpIp）用于创建DhcpIp
    @inlinable
    public func createDhcpIp(_ input: CreateDhcpIpRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDhcpIpResponse {
        try await self.client.execute(action: "CreateDhcpIp", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 创建DhcpIp
    ///
    /// 本接口（CreateDhcpIp）用于创建DhcpIp
    @inlinable
    public func createDhcpIp(vpcId: String, subnetId: String, dhcpIpName: String, secondaryPrivateIpAddressCount: UInt64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateDhcpIpResponse > {
        self.createDhcpIp(CreateDhcpIpRequest(vpcId: vpcId, subnetId: subnetId, dhcpIpName: dhcpIpName, secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount), logger: logger, on: eventLoop)
    }
    
    /// 创建DhcpIp
    ///
    /// 本接口（CreateDhcpIp）用于创建DhcpIp
    @inlinable
    public func createDhcpIp(vpcId: String, subnetId: String, dhcpIpName: String, secondaryPrivateIpAddressCount: UInt64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDhcpIpResponse {
        try await self.createDhcpIp(CreateDhcpIpRequest(vpcId: vpcId, subnetId: subnetId, dhcpIpName: dhcpIpName, secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount), logger: logger, on: eventLoop)
    }
}
