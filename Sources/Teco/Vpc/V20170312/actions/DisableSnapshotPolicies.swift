//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DisableSnapshotPolicies请求参数结构体
    public struct DisableSnapshotPoliciesRequest: TCRequestModel {
        /// 快照策略Id。
        public let snapshotPolicyIds: [String]

        public init(snapshotPolicyIds: [String]) {
            self.snapshotPolicyIds = snapshotPolicyIds
        }

        enum CodingKeys: String, CodingKey {
            case snapshotPolicyIds = "SnapshotPolicyIds"
        }
    }

    /// DisableSnapshotPolicies返回参数结构体
    public struct DisableSnapshotPoliciesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 停用快照策略
    ///
    /// 本接口（DisableSnapshotPolicies）用于停用快照策略。
    @inlinable @discardableResult
    public func disableSnapshotPolicies(_ input: DisableSnapshotPoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableSnapshotPoliciesResponse> {
        self.client.execute(action: "DisableSnapshotPolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 停用快照策略
    ///
    /// 本接口（DisableSnapshotPolicies）用于停用快照策略。
    @inlinable @discardableResult
    public func disableSnapshotPolicies(_ input: DisableSnapshotPoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableSnapshotPoliciesResponse {
        try await self.client.execute(action: "DisableSnapshotPolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 停用快照策略
    ///
    /// 本接口（DisableSnapshotPolicies）用于停用快照策略。
    @inlinable @discardableResult
    public func disableSnapshotPolicies(snapshotPolicyIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableSnapshotPoliciesResponse> {
        self.disableSnapshotPolicies(DisableSnapshotPoliciesRequest(snapshotPolicyIds: snapshotPolicyIds), region: region, logger: logger, on: eventLoop)
    }

    /// 停用快照策略
    ///
    /// 本接口（DisableSnapshotPolicies）用于停用快照策略。
    @inlinable @discardableResult
    public func disableSnapshotPolicies(snapshotPolicyIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableSnapshotPoliciesResponse {
        try await self.disableSnapshotPolicies(DisableSnapshotPoliciesRequest(snapshotPolicyIds: snapshotPolicyIds), region: region, logger: logger, on: eventLoop)
    }
}
