//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// RenewAddresses请求参数结构体
    public struct RenewAddressesRequest: TCRequestModel {
        /// EIP唯一标识ID列表，形如'eip-xxxx'
        public let addressIds: [String]

        /// 续费参数
        public let addressChargePrepaid: AddressChargePrepaid

        public init(addressIds: [String], addressChargePrepaid: AddressChargePrepaid) {
            self.addressIds = addressIds
            self.addressChargePrepaid = addressChargePrepaid
        }

        enum CodingKeys: String, CodingKey {
            case addressIds = "AddressIds"
            case addressChargePrepaid = "AddressChargePrepaid"
        }
    }

    /// RenewAddresses返回参数结构体
    public struct RenewAddressesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 续费包月带宽弹性公网IP
    ///
    /// 该接口用于续费包月带宽计费模式的弹性公网IP
    @inlinable @discardableResult
    public func renewAddresses(_ input: RenewAddressesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewAddressesResponse> {
        self.client.execute(action: "RenewAddresses", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 续费包月带宽弹性公网IP
    ///
    /// 该接口用于续费包月带宽计费模式的弹性公网IP
    @inlinable @discardableResult
    public func renewAddresses(_ input: RenewAddressesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewAddressesResponse {
        try await self.client.execute(action: "RenewAddresses", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 续费包月带宽弹性公网IP
    ///
    /// 该接口用于续费包月带宽计费模式的弹性公网IP
    @inlinable @discardableResult
    public func renewAddresses(addressIds: [String], addressChargePrepaid: AddressChargePrepaid, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewAddressesResponse> {
        self.renewAddresses(RenewAddressesRequest(addressIds: addressIds, addressChargePrepaid: addressChargePrepaid), region: region, logger: logger, on: eventLoop)
    }

    /// 续费包月带宽弹性公网IP
    ///
    /// 该接口用于续费包月带宽计费模式的弹性公网IP
    @inlinable @discardableResult
    public func renewAddresses(addressIds: [String], addressChargePrepaid: AddressChargePrepaid, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewAddressesResponse {
        try await self.renewAddresses(RenewAddressesRequest(addressIds: addressIds, addressChargePrepaid: addressChargePrepaid), region: region, logger: logger, on: eventLoop)
    }
}
