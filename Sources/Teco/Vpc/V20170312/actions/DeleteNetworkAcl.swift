//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DeleteNetworkAcl请求参数结构体
    public struct DeleteNetworkAclRequest: TCRequestModel {
        /// 网络ACL实例ID。例如：acl-12345678。
        public let networkAclId: String

        public init(networkAclId: String) {
            self.networkAclId = networkAclId
        }

        enum CodingKeys: String, CodingKey {
            case networkAclId = "NetworkAclId"
        }
    }

    /// DeleteNetworkAcl返回参数结构体
    public struct DeleteNetworkAclResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除网络ACL
    ///
    /// 本接口（DeleteNetworkAcl）用于删除网络ACL。
    @inlinable @discardableResult
    public func deleteNetworkAcl(_ input: DeleteNetworkAclRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteNetworkAclResponse> {
        self.client.execute(action: "DeleteNetworkAcl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除网络ACL
    ///
    /// 本接口（DeleteNetworkAcl）用于删除网络ACL。
    @inlinable @discardableResult
    public func deleteNetworkAcl(_ input: DeleteNetworkAclRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteNetworkAclResponse {
        try await self.client.execute(action: "DeleteNetworkAcl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除网络ACL
    ///
    /// 本接口（DeleteNetworkAcl）用于删除网络ACL。
    @inlinable @discardableResult
    public func deleteNetworkAcl(networkAclId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteNetworkAclResponse> {
        self.deleteNetworkAcl(DeleteNetworkAclRequest(networkAclId: networkAclId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除网络ACL
    ///
    /// 本接口（DeleteNetworkAcl）用于删除网络ACL。
    @inlinable @discardableResult
    public func deleteNetworkAcl(networkAclId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteNetworkAclResponse {
        try await self.deleteNetworkAcl(DeleteNetworkAclRequest(networkAclId: networkAclId), region: region, logger: logger, on: eventLoop)
    }
}
