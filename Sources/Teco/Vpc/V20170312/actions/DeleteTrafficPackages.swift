//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DeleteTrafficPackages请求参数结构体
    public struct DeleteTrafficPackagesRequest: TCRequest {
        /// 待删除的流量包唯一ID数组
        public let trafficPackageIds: [String]

        public init(trafficPackageIds: [String]) {
            self.trafficPackageIds = trafficPackageIds
        }

        enum CodingKeys: String, CodingKey {
            case trafficPackageIds = "TrafficPackageIds"
        }
    }

    /// DeleteTrafficPackages返回参数结构体
    public struct DeleteTrafficPackagesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除共享流量包
    ///
    /// 删除共享带宽包（仅非活动状态的流量包可删除）。
    @inlinable @discardableResult
    public func deleteTrafficPackages(_ input: DeleteTrafficPackagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTrafficPackagesResponse> {
        self.client.execute(action: "DeleteTrafficPackages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除共享流量包
    ///
    /// 删除共享带宽包（仅非活动状态的流量包可删除）。
    @inlinable @discardableResult
    public func deleteTrafficPackages(_ input: DeleteTrafficPackagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteTrafficPackagesResponse {
        try await self.client.execute(action: "DeleteTrafficPackages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除共享流量包
    ///
    /// 删除共享带宽包（仅非活动状态的流量包可删除）。
    @inlinable @discardableResult
    public func deleteTrafficPackages(trafficPackageIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTrafficPackagesResponse> {
        self.deleteTrafficPackages(.init(trafficPackageIds: trafficPackageIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除共享流量包
    ///
    /// 删除共享带宽包（仅非活动状态的流量包可删除）。
    @inlinable @discardableResult
    public func deleteTrafficPackages(trafficPackageIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteTrafficPackagesResponse {
        try await self.deleteTrafficPackages(.init(trafficPackageIds: trafficPackageIds), region: region, logger: logger, on: eventLoop)
    }
}
