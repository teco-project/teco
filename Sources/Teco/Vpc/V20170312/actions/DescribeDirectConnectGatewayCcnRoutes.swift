//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DescribeDirectConnectGatewayCcnRoutes请求参数结构体
    public struct DescribeDirectConnectGatewayCcnRoutesRequest: TCPaginatedRequest {
        /// 专线网关ID，形如：`dcg-prpqlmg1`。
        public let directConnectGatewayId: String

        /// 云联网路由学习类型，可选值：
        /// - `BGP` - 自动学习。
        /// - `STATIC` - 静态，即用户配置，默认值。
        public let ccnRouteType: String?

        /// 偏移量。
        public let offset: UInt64?

        /// 返回数量。
        public let limit: UInt64?

        public init(directConnectGatewayId: String, ccnRouteType: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.directConnectGatewayId = directConnectGatewayId
            self.ccnRouteType = ccnRouteType
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "DirectConnectGatewayId"
            case ccnRouteType = "CcnRouteType"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDirectConnectGatewayCcnRoutesResponse) -> DescribeDirectConnectGatewayCcnRoutesRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(directConnectGatewayId: self.directConnectGatewayId, ccnRouteType: self.ccnRouteType, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeDirectConnectGatewayCcnRoutes返回参数结构体
    public struct DescribeDirectConnectGatewayCcnRoutesResponse: TCPaginatedResponse {
        /// 符合条件的对象数。
        public let totalCount: UInt64

        /// 云联网路由（IDC网段）列表。
        public let routeSet: [DirectConnectGatewayCcnRoute]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case routeSet = "RouteSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DirectConnectGatewayCcnRoute`` list from the paginated response.
        public func getItems() -> [DirectConnectGatewayCcnRoute] {
            self.routeSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询专线网关云联网路由
    ///
    /// 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
    @inlinable
    public func describeDirectConnectGatewayCcnRoutes(_ input: DescribeDirectConnectGatewayCcnRoutesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDirectConnectGatewayCcnRoutesResponse> {
        self.client.execute(action: "DescribeDirectConnectGatewayCcnRoutes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询专线网关云联网路由
    ///
    /// 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
    @inlinable
    public func describeDirectConnectGatewayCcnRoutes(_ input: DescribeDirectConnectGatewayCcnRoutesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDirectConnectGatewayCcnRoutesResponse {
        try await self.client.execute(action: "DescribeDirectConnectGatewayCcnRoutes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询专线网关云联网路由
    ///
    /// 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
    @inlinable
    public func describeDirectConnectGatewayCcnRoutes(directConnectGatewayId: String, ccnRouteType: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDirectConnectGatewayCcnRoutesResponse> {
        self.describeDirectConnectGatewayCcnRoutes(.init(directConnectGatewayId: directConnectGatewayId, ccnRouteType: ccnRouteType, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询专线网关云联网路由
    ///
    /// 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
    @inlinable
    public func describeDirectConnectGatewayCcnRoutes(directConnectGatewayId: String, ccnRouteType: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDirectConnectGatewayCcnRoutesResponse {
        try await self.describeDirectConnectGatewayCcnRoutes(.init(directConnectGatewayId: directConnectGatewayId, ccnRouteType: ccnRouteType, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询专线网关云联网路由
    ///
    /// 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
    @inlinable
    public func describeDirectConnectGatewayCcnRoutesPaginated(_ input: DescribeDirectConnectGatewayCcnRoutesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [DirectConnectGatewayCcnRoute])> {
        self.client.paginate(input: input, region: region, command: self.describeDirectConnectGatewayCcnRoutes, logger: logger, on: eventLoop)
    }

    /// 查询专线网关云联网路由
    ///
    /// 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
    @inlinable @discardableResult
    public func describeDirectConnectGatewayCcnRoutesPaginated(_ input: DescribeDirectConnectGatewayCcnRoutesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDirectConnectGatewayCcnRoutesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDirectConnectGatewayCcnRoutes, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询专线网关云联网路由
    ///
    /// 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
    ///
    /// - Returns: `AsyncSequence`s of ``DirectConnectGatewayCcnRoute`` and ``DescribeDirectConnectGatewayCcnRoutesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDirectConnectGatewayCcnRoutesPaginator(_ input: DescribeDirectConnectGatewayCcnRoutesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDirectConnectGatewayCcnRoutesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDirectConnectGatewayCcnRoutes, logger: logger, on: eventLoop)
    }
}
