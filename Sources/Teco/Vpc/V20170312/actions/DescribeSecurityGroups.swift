//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DescribeSecurityGroups请求参数结构体
    public struct DescribeSecurityGroupsRequest: TCRequest {
        /// 安全组实例ID，例如：sg-33ocnj9n。每次请求的实例的上限为100。参数不支持同时指定SecurityGroupIds和Filters。
        public let securityGroupIds: [String]?

        /// 过滤条件，参数不支持同时指定SecurityGroupIds和Filters。
        /// - security-group-id - String - （过滤条件）安全组ID。
        /// - project-id - Integer - （过滤条件）项目ID。
        /// - security-group-name - String - （过滤条件）安全组名称。
        /// - tag-key - String -是否必填：否- （过滤条件）按照标签键进行过滤。
        /// - tag:tag-key - String - 是否必填：否 - （过滤条件）按照标签键值对进行过滤。 其中 tag-key 请使用具体的标签键进行替换。
        public let filters: [Filter]?

        /// 偏移量，默认为0。
        public let offset: String?

        /// 返回数量，默认为20，最大值为100。
        public let limit: String?

        /// 排序字段。支持：`CreatedTime` `UpdateTime`。注意：该字段没有默认值。
        public let orderField: String?

        /// 排序方法。升序：`ASC`，倒序：`DESC`。默认值：`ASC`
        public let orderDirection: String?

        public init(securityGroupIds: [String]? = nil, filters: [Filter]? = nil, offset: String? = nil, limit: String? = nil, orderField: String? = nil, orderDirection: String? = nil) {
            self.securityGroupIds = securityGroupIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.orderField = orderField
            self.orderDirection = orderDirection
        }

        enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
            case orderField = "OrderField"
            case orderDirection = "OrderDirection"
        }
    }

    /// DescribeSecurityGroups返回参数结构体
    public struct DescribeSecurityGroupsResponse: TCResponse {
        /// 安全组对象。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityGroupSet: [SecurityGroup]?

        /// 符合条件的实例数量。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case securityGroupSet = "SecurityGroupSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查看安全组
    ///
    /// 本接口（DescribeSecurityGroups）用于查询安全组。
    @inlinable
    public func describeSecurityGroups(_ input: DescribeSecurityGroupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecurityGroupsResponse> {
        self.client.execute(action: "DescribeSecurityGroups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看安全组
    ///
    /// 本接口（DescribeSecurityGroups）用于查询安全组。
    @inlinable
    public func describeSecurityGroups(_ input: DescribeSecurityGroupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecurityGroupsResponse {
        try await self.client.execute(action: "DescribeSecurityGroups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看安全组
    ///
    /// 本接口（DescribeSecurityGroups）用于查询安全组。
    @inlinable
    public func describeSecurityGroups(securityGroupIds: [String]? = nil, filters: [Filter]? = nil, offset: String? = nil, limit: String? = nil, orderField: String? = nil, orderDirection: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecurityGroupsResponse> {
        self.describeSecurityGroups(.init(securityGroupIds: securityGroupIds, filters: filters, offset: offset, limit: limit, orderField: orderField, orderDirection: orderDirection), region: region, logger: logger, on: eventLoop)
    }

    /// 查看安全组
    ///
    /// 本接口（DescribeSecurityGroups）用于查询安全组。
    @inlinable
    public func describeSecurityGroups(securityGroupIds: [String]? = nil, filters: [Filter]? = nil, offset: String? = nil, limit: String? = nil, orderField: String? = nil, orderDirection: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecurityGroupsResponse {
        try await self.describeSecurityGroups(.init(securityGroupIds: securityGroupIds, filters: filters, offset: offset, limit: limit, orderField: orderField, orderDirection: orderDirection), region: region, logger: logger, on: eventLoop)
    }
}
