//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DescribeTemplateLimits请求参数结构体
    public struct DescribeTemplateLimitsRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeTemplateLimits返回参数结构体
    public struct DescribeTemplateLimitsResponse: TCResponseModel {
        /// 参数模板配额对象。
        public let templateLimit: TemplateLimit

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateLimit = "TemplateLimit"
            case requestId = "RequestId"
        }
    }

    /// 查询参数模板配额列表
    ///
    /// 本接口（DescribeTemplateLimits）用于查询参数模板配额列表。
    @inlinable
    public func describeTemplateLimits(_ input: DescribeTemplateLimitsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTemplateLimitsResponse> {
        self.client.execute(action: "DescribeTemplateLimits", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询参数模板配额列表
    ///
    /// 本接口（DescribeTemplateLimits）用于查询参数模板配额列表。
    @inlinable
    public func describeTemplateLimits(_ input: DescribeTemplateLimitsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTemplateLimitsResponse {
        try await self.client.execute(action: "DescribeTemplateLimits", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询参数模板配额列表
    ///
    /// 本接口（DescribeTemplateLimits）用于查询参数模板配额列表。
    @inlinable
    public func describeTemplateLimits(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTemplateLimitsResponse> {
        self.describeTemplateLimits(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询参数模板配额列表
    ///
    /// 本接口（DescribeTemplateLimits）用于查询参数模板配额列表。
    @inlinable
    public func describeTemplateLimits(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTemplateLimitsResponse {
        try await self.describeTemplateLimits(.init(), region: region, logger: logger, on: eventLoop)
    }
}
