//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DescribeCustomerGateways请求参数结构体
    public struct DescribeCustomerGatewaysRequest: TCRequestModel {
        /// 对端网关ID，例如：cgw-2wqq41m9。每次请求的实例的上限为100。参数不支持同时指定CustomerGatewayIds和Filters。
        public let customerGatewayIds: [String]?

        /// 过滤条件，详见下表：实例过滤条件表。每次请求的Filters的上限为10，Filter.Values的上限为5。参数不支持同时指定CustomerGatewayIds和Filters。
        /// <li>customer-gateway-id - String - （过滤条件）用户网关唯一ID形如：`cgw-mgp33pll`。</li>
        /// <li>customer-gateway-name - String - （过滤条件）用户网关名称形如：`test-cgw`。</li>
        /// <li>ip-address - String - （过滤条件）公网地址形如：`58.211.1.12`。</li>
        public let filters: [Filter]?

        /// 偏移量，默认为0。关于Offset的更进一步介绍请参考 API 简介中的相关小节。
        public let offset: UInt64?

        /// 返回数量，默认为20，最大值为100。
        public let limit: UInt64?

        public init(customerGatewayIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.customerGatewayIds = customerGatewayIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case customerGatewayIds = "CustomerGatewayIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// DescribeCustomerGateways返回参数结构体
    public struct DescribeCustomerGatewaysResponse: TCResponseModel {
        /// 对端网关对象列表
        public let customerGatewaySet: [CustomerGateway]

        /// 符合条件的实例数量。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case customerGatewaySet = "CustomerGatewaySet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询对端网关
    ///
    /// 本接口（DescribeCustomerGateways）用于查询对端网关列表。
    @inlinable
    public func describeCustomerGateways(_ input: DescribeCustomerGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomerGatewaysResponse> {
        self.client.execute(action: "DescribeCustomerGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询对端网关
    ///
    /// 本接口（DescribeCustomerGateways）用于查询对端网关列表。
    @inlinable
    public func describeCustomerGateways(_ input: DescribeCustomerGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomerGatewaysResponse {
        try await self.client.execute(action: "DescribeCustomerGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询对端网关
    ///
    /// 本接口（DescribeCustomerGateways）用于查询对端网关列表。
    @inlinable
    public func describeCustomerGateways(customerGatewayIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomerGatewaysResponse> {
        self.describeCustomerGateways(DescribeCustomerGatewaysRequest(customerGatewayIds: customerGatewayIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询对端网关
    ///
    /// 本接口（DescribeCustomerGateways）用于查询对端网关列表。
    @inlinable
    public func describeCustomerGateways(customerGatewayIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomerGatewaysResponse {
        try await self.describeCustomerGateways(DescribeCustomerGatewaysRequest(customerGatewayIds: customerGatewayIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }
}
