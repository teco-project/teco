//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// CheckAssistantCidr请求参数结构体
    public struct CheckAssistantCidrRequest: TCRequestModel {
        /// `VPC`实例`ID`。形如：`vpc-6v2ht8q5`
        public let vpcId: String

        /// 待添加的负载CIDR。CIDR数组，格式如["10.0.0.0/16", "172.16.0.0/16"]。入参NewCidrBlocks和OldCidrBlocks至少需要其一。
        public let newCidrBlocks: [String]?

        /// 待删除的负载CIDR。CIDR数组，格式如["10.0.0.0/16", "172.16.0.0/16"]。入参NewCidrBlocks和OldCidrBlocks至少需要其一。
        public let oldCidrBlocks: [String]?

        public init(vpcId: String, newCidrBlocks: [String]? = nil, oldCidrBlocks: [String]? = nil) {
            self.vpcId = vpcId
            self.newCidrBlocks = newCidrBlocks
            self.oldCidrBlocks = oldCidrBlocks
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case newCidrBlocks = "NewCidrBlocks"
            case oldCidrBlocks = "OldCidrBlocks"
        }
    }

    /// CheckAssistantCidr返回参数结构体
    public struct CheckAssistantCidrResponse: TCResponseModel {
        /// 冲突资源信息数组。
        public let conflictSourceSet: [ConflictSource]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case conflictSourceSet = "ConflictSourceSet"
            case requestId = "RequestId"
        }
    }

    /// 检查辅助CIDR冲突
    ///
    /// 本接口(CheckAssistantCidr)用于检查辅助CIDR是否与存量路由、对等连接（对端VPC的CIDR）等资源存在冲突。如果存在重叠，则返回重叠的资源。
    /// * 检测辅助CIDR是否与当前VPC的主CIDR和辅助CIDR存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的路由的目的端存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的对等连接，对端VPC下的主CIDR或辅助CIDR存在重叠。
    @inlinable
    public func checkAssistantCidr(_ input: CheckAssistantCidrRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckAssistantCidrResponse> {
        self.client.execute(action: "CheckAssistantCidr", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 检查辅助CIDR冲突
    ///
    /// 本接口(CheckAssistantCidr)用于检查辅助CIDR是否与存量路由、对等连接（对端VPC的CIDR）等资源存在冲突。如果存在重叠，则返回重叠的资源。
    /// * 检测辅助CIDR是否与当前VPC的主CIDR和辅助CIDR存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的路由的目的端存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的对等连接，对端VPC下的主CIDR或辅助CIDR存在重叠。
    @inlinable
    public func checkAssistantCidr(_ input: CheckAssistantCidrRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckAssistantCidrResponse {
        try await self.client.execute(action: "CheckAssistantCidr", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 检查辅助CIDR冲突
    ///
    /// 本接口(CheckAssistantCidr)用于检查辅助CIDR是否与存量路由、对等连接（对端VPC的CIDR）等资源存在冲突。如果存在重叠，则返回重叠的资源。
    /// * 检测辅助CIDR是否与当前VPC的主CIDR和辅助CIDR存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的路由的目的端存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的对等连接，对端VPC下的主CIDR或辅助CIDR存在重叠。
    @inlinable
    public func checkAssistantCidr(vpcId: String, newCidrBlocks: [String]? = nil, oldCidrBlocks: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckAssistantCidrResponse> {
        self.checkAssistantCidr(.init(vpcId: vpcId, newCidrBlocks: newCidrBlocks, oldCidrBlocks: oldCidrBlocks), region: region, logger: logger, on: eventLoop)
    }

    /// 检查辅助CIDR冲突
    ///
    /// 本接口(CheckAssistantCidr)用于检查辅助CIDR是否与存量路由、对等连接（对端VPC的CIDR）等资源存在冲突。如果存在重叠，则返回重叠的资源。
    /// * 检测辅助CIDR是否与当前VPC的主CIDR和辅助CIDR存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的路由的目的端存在重叠。
    /// * 检测辅助CIDR是否与当前VPC的对等连接，对端VPC下的主CIDR或辅助CIDR存在重叠。
    @inlinable
    public func checkAssistantCidr(vpcId: String, newCidrBlocks: [String]? = nil, oldCidrBlocks: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckAssistantCidrResponse {
        try await self.checkAssistantCidr(.init(vpcId: vpcId, newCidrBlocks: newCidrBlocks, oldCidrBlocks: oldCidrBlocks), region: region, logger: logger, on: eventLoop)
    }
}
