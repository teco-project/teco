//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// GenerateVpnConnectionDefaultHealthCheckIp请求参数结构体
    public struct GenerateVpnConnectionDefaultHealthCheckIpRequest: TCRequestModel {
        /// VPN网关id， 例如：vpngw-1w9tue3d
        public let vpnGatewayId: String

        public init(vpnGatewayId: String) {
            self.vpnGatewayId = vpnGatewayId
        }

        enum CodingKeys: String, CodingKey {
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    /// GenerateVpnConnectionDefaultHealthCheckIp返回参数结构体
    public struct GenerateVpnConnectionDefaultHealthCheckIpResponse: TCResponseModel {
        /// VPN通道健康检查本端ip
        public let healthCheckLocalIp: String

        /// VPN通道健康检查对端ip
        public let healthCheckRemoteIp: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case healthCheckLocalIp = "HealthCheckLocalIp"
            case healthCheckRemoteIp = "HealthCheckRemoteIp"
            case requestId = "RequestId"
        }
    }

    /// 获取一对VPN通道健康检查地址
    ///
    /// 本接口（GenerateVpnConnectionDefaultHealthCheckIp）用于获取一对VPN通道健康检查地址。
    @inlinable
    public func generateVpnConnectionDefaultHealthCheckIp(_ input: GenerateVpnConnectionDefaultHealthCheckIpRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GenerateVpnConnectionDefaultHealthCheckIpResponse> {
        self.client.execute(action: "GenerateVpnConnectionDefaultHealthCheckIp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取一对VPN通道健康检查地址
    ///
    /// 本接口（GenerateVpnConnectionDefaultHealthCheckIp）用于获取一对VPN通道健康检查地址。
    @inlinable
    public func generateVpnConnectionDefaultHealthCheckIp(_ input: GenerateVpnConnectionDefaultHealthCheckIpRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GenerateVpnConnectionDefaultHealthCheckIpResponse {
        try await self.client.execute(action: "GenerateVpnConnectionDefaultHealthCheckIp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取一对VPN通道健康检查地址
    ///
    /// 本接口（GenerateVpnConnectionDefaultHealthCheckIp）用于获取一对VPN通道健康检查地址。
    @inlinable
    public func generateVpnConnectionDefaultHealthCheckIp(vpnGatewayId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GenerateVpnConnectionDefaultHealthCheckIpResponse> {
        self.generateVpnConnectionDefaultHealthCheckIp(.init(vpnGatewayId: vpnGatewayId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取一对VPN通道健康检查地址
    ///
    /// 本接口（GenerateVpnConnectionDefaultHealthCheckIp）用于获取一对VPN通道健康检查地址。
    @inlinable
    public func generateVpnConnectionDefaultHealthCheckIp(vpnGatewayId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GenerateVpnConnectionDefaultHealthCheckIpResponse {
        try await self.generateVpnConnectionDefaultHealthCheckIp(.init(vpnGatewayId: vpnGatewayId), region: region, logger: logger, on: eventLoop)
    }
}
