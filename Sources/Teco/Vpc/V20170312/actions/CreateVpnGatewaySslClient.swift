//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// CreateVpnGatewaySslClient请求参数结构体
    public struct CreateVpnGatewaySslClientRequest: TCRequest {
        /// SSL-VPN-SERVER 实例ID。
        public let sslVpnServerId: String

        /// SSL-VPN-CLIENT实例Name。不可和SslVpnClientNames同时使用。
        public let sslVpnClientName: String?

        /// SSL-VPN-CLIENT实例Name数字。批量创建时使用。不可和SslVpnClientName同时使用。
        public let sslVpnClientNames: [String]?

        public init(sslVpnServerId: String, sslVpnClientName: String? = nil, sslVpnClientNames: [String]? = nil) {
            self.sslVpnServerId = sslVpnServerId
            self.sslVpnClientName = sslVpnClientName
            self.sslVpnClientNames = sslVpnClientNames
        }

        enum CodingKeys: String, CodingKey {
            case sslVpnServerId = "SslVpnServerId"
            case sslVpnClientName = "SslVpnClientName"
            case sslVpnClientNames = "SslVpnClientNames"
        }
    }

    /// CreateVpnGatewaySslClient返回参数结构体
    public struct CreateVpnGatewaySslClientResponse: TCResponse {
        /// 异步任务ID。
        public let taskId: UInt64

        /// SSL-VPN client 唯一ID
        public let sslVpnClientId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case sslVpnClientId = "SslVpnClientId"
            case requestId = "RequestId"
        }
    }

    /// 创建SSL-VPN-CLIENT
    @inlinable
    public func createVpnGatewaySslClient(_ input: CreateVpnGatewaySslClientRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVpnGatewaySslClientResponse> {
        self.client.execute(action: "CreateVpnGatewaySslClient", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建SSL-VPN-CLIENT
    @inlinable
    public func createVpnGatewaySslClient(_ input: CreateVpnGatewaySslClientRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVpnGatewaySslClientResponse {
        try await self.client.execute(action: "CreateVpnGatewaySslClient", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建SSL-VPN-CLIENT
    @inlinable
    public func createVpnGatewaySslClient(sslVpnServerId: String, sslVpnClientName: String? = nil, sslVpnClientNames: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVpnGatewaySslClientResponse> {
        self.createVpnGatewaySslClient(.init(sslVpnServerId: sslVpnServerId, sslVpnClientName: sslVpnClientName, sslVpnClientNames: sslVpnClientNames), region: region, logger: logger, on: eventLoop)
    }

    /// 创建SSL-VPN-CLIENT
    @inlinable
    public func createVpnGatewaySslClient(sslVpnServerId: String, sslVpnClientName: String? = nil, sslVpnClientNames: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVpnGatewaySslClientResponse {
        try await self.createVpnGatewaySslClient(.init(sslVpnServerId: sslVpnServerId, sslVpnClientName: sslVpnClientName, sslVpnClientNames: sslVpnClientNames), region: region, logger: logger, on: eventLoop)
    }
}
