//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// EnableGatewayFlowMonitor请求参数结构体
    public struct EnableGatewayFlowMonitorRequest: TCRequestModel {
        /// 网关实例ID，目前我们支持的网关实例有，
        /// 专线网关实例ID，形如，`dcg-ltjahce6`；
        /// Nat网关实例ID，形如，`nat-ltjahce6`；
        /// VPN网关实例ID，形如，`vpn-ltjahce6`。
        public let gatewayId: String

        public init(gatewayId: String) {
            self.gatewayId = gatewayId
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
        }
    }

    /// EnableGatewayFlowMonitor返回参数结构体
    public struct EnableGatewayFlowMonitorResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 开启网关流量监控
    ///
    /// 本接口（EnableGatewayFlowMonitor）用于开启网关流量监控。
    @inlinable
    public func enableGatewayFlowMonitor(_ input: EnableGatewayFlowMonitorRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableGatewayFlowMonitorResponse> {
        self.client.execute(action: "EnableGatewayFlowMonitor", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开启网关流量监控
    ///
    /// 本接口（EnableGatewayFlowMonitor）用于开启网关流量监控。
    @inlinable
    public func enableGatewayFlowMonitor(_ input: EnableGatewayFlowMonitorRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableGatewayFlowMonitorResponse {
        try await self.client.execute(action: "EnableGatewayFlowMonitor", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开启网关流量监控
    ///
    /// 本接口（EnableGatewayFlowMonitor）用于开启网关流量监控。
    @inlinable
    public func enableGatewayFlowMonitor(gatewayId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableGatewayFlowMonitorResponse> {
        self.enableGatewayFlowMonitor(EnableGatewayFlowMonitorRequest(gatewayId: gatewayId), logger: logger, on: eventLoop)
    }

    /// 开启网关流量监控
    ///
    /// 本接口（EnableGatewayFlowMonitor）用于开启网关流量监控。
    @inlinable
    public func enableGatewayFlowMonitor(gatewayId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableGatewayFlowMonitorResponse {
        try await self.enableGatewayFlowMonitor(EnableGatewayFlowMonitorRequest(gatewayId: gatewayId), logger: logger, on: eventLoop)
    }
}
