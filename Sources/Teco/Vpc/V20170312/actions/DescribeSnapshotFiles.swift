//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DescribeSnapshotFiles请求参数结构体
    public struct DescribeSnapshotFilesRequest: TCRequestModel {
        /// 业务类型，目前支持安全组：securitygroup。
        public let businessType: String

        /// 实例Id。
        public let instanceId: String

        /// 开始日期，格式%Y-%m-%d %H:%M:%S。
        public let startDate: String

        /// 结束日期，格式%Y-%m-%d %H:%M:%S。
        public let endDate: String

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 返回数量，默认为20，最大为200。
        public let limit: UInt64?

        public init(businessType: String, instanceId: String, startDate: String, endDate: String, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.businessType = businessType
            self.instanceId = instanceId
            self.startDate = startDate
            self.endDate = endDate
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case businessType = "BusinessType"
            case instanceId = "InstanceId"
            case startDate = "StartDate"
            case endDate = "EndDate"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// DescribeSnapshotFiles返回参数结构体
    public struct DescribeSnapshotFilesResponse: TCResponseModel {
        /// 快照文件集合。
        public let snapshotFileSet: [SnapshotFileInfo]

        /// 符合条件的对象数。
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case snapshotFileSet = "SnapshotFileSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询快照文件
    ///
    /// 本接口（DescribeSnapshotFiles）用于查询快照文件。
    @inlinable
    public func describeSnapshotFiles(_ input: DescribeSnapshotFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSnapshotFilesResponse> {
        self.client.execute(action: "DescribeSnapshotFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询快照文件
    ///
    /// 本接口（DescribeSnapshotFiles）用于查询快照文件。
    @inlinable
    public func describeSnapshotFiles(_ input: DescribeSnapshotFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSnapshotFilesResponse {
        try await self.client.execute(action: "DescribeSnapshotFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询快照文件
    ///
    /// 本接口（DescribeSnapshotFiles）用于查询快照文件。
    @inlinable
    public func describeSnapshotFiles(businessType: String, instanceId: String, startDate: String, endDate: String, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSnapshotFilesResponse> {
        let input = DescribeSnapshotFilesRequest(businessType: businessType, instanceId: instanceId, startDate: startDate, endDate: endDate, offset: offset, limit: limit)
        return self.client.execute(action: "DescribeSnapshotFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询快照文件
    ///
    /// 本接口（DescribeSnapshotFiles）用于查询快照文件。
    @inlinable
    public func describeSnapshotFiles(businessType: String, instanceId: String, startDate: String, endDate: String, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSnapshotFilesResponse {
        let input = DescribeSnapshotFilesRequest(businessType: businessType, instanceId: instanceId, startDate: startDate, endDate: endDate, offset: offset, limit: limit)
        return try await self.client.execute(action: "DescribeSnapshotFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
