//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers
import TecoPaginationHelpers

extension Vpc {
    /// DescribeSpecificTrafficPackageUsedDetails请求参数结构体
    public struct DescribeSpecificTrafficPackageUsedDetailsRequest: TCPaginatedRequest {
        /// 共享流量包唯一ID
        public let trafficPackageId: String

        /// 每次请求的`Filters`的上限为10，`Filter.Values`的上限为5。详细的过滤条件如下：<li> resource-id - String - 是否必填：否 - （过滤条件）按照抵扣流量资源的唯一 ID 过滤。</li><li> resource-type - String - 是否必填：否 - （过滤条件）按照资源类型过滤，资源类型包括 CVM 和 EIP </li>
        public let filters: [Filter]?

        /// 排序条件。该参数仅支持根据抵扣量排序，传值为 deduction
        public let orderField: String?

        /// 排序类型，仅支持0和1，0-降序，1-升序。不传默认为0
        public let orderType: Int64?

        /// 开始时间。不传默认为当前时间往前推30天
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date?

        /// 结束时间。不传默认为当前时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date?

        /// 分页参数
        public let offset: Int64?

        /// 分页参数
        public let limit: Int64?

        public init(trafficPackageId: String, filters: [Filter]? = nil, orderField: String? = nil, orderType: Int64? = nil, startTime: Date? = nil, endTime: Date? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.trafficPackageId = trafficPackageId
            self.filters = filters
            self.orderField = orderField
            self.orderType = orderType
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case trafficPackageId = "TrafficPackageId"
            case filters = "Filters"
            case orderField = "OrderField"
            case orderType = "OrderType"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeSpecificTrafficPackageUsedDetailsResponse) -> DescribeSpecificTrafficPackageUsedDetailsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeSpecificTrafficPackageUsedDetailsRequest(trafficPackageId: self.trafficPackageId, filters: self.filters, orderField: self.orderField, orderType: self.orderType, startTime: self.startTime, endTime: self.endTime, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeSpecificTrafficPackageUsedDetails返回参数结构体
    public struct DescribeSpecificTrafficPackageUsedDetailsResponse: TCPaginatedResponse {
        /// 符合查询条件的共享流量包用量明细的总数
        public let totalCount: Int64

        /// 共享流量包用量明细列表
        public let usedDetailSet: [UsedDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case usedDetailSet = "UsedDetailSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``UsedDetail`` list from the paginated response.
        public func getItems() -> [UsedDetail] {
            self.usedDetailSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询指定共享流量包的用量明细
    ///
    /// 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
    @inlinable
    public func describeSpecificTrafficPackageUsedDetails(_ input: DescribeSpecificTrafficPackageUsedDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSpecificTrafficPackageUsedDetailsResponse> {
        self.client.execute(action: "DescribeSpecificTrafficPackageUsedDetails", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询指定共享流量包的用量明细
    ///
    /// 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
    @inlinable
    public func describeSpecificTrafficPackageUsedDetails(_ input: DescribeSpecificTrafficPackageUsedDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSpecificTrafficPackageUsedDetailsResponse {
        try await self.client.execute(action: "DescribeSpecificTrafficPackageUsedDetails", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询指定共享流量包的用量明细
    ///
    /// 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
    @inlinable
    public func describeSpecificTrafficPackageUsedDetails(trafficPackageId: String, filters: [Filter]? = nil, orderField: String? = nil, orderType: Int64? = nil, startTime: Date? = nil, endTime: Date? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSpecificTrafficPackageUsedDetailsResponse> {
        self.describeSpecificTrafficPackageUsedDetails(.init(trafficPackageId: trafficPackageId, filters: filters, orderField: orderField, orderType: orderType, startTime: startTime, endTime: endTime, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询指定共享流量包的用量明细
    ///
    /// 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
    @inlinable
    public func describeSpecificTrafficPackageUsedDetails(trafficPackageId: String, filters: [Filter]? = nil, orderField: String? = nil, orderType: Int64? = nil, startTime: Date? = nil, endTime: Date? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSpecificTrafficPackageUsedDetailsResponse {
        try await self.describeSpecificTrafficPackageUsedDetails(.init(trafficPackageId: trafficPackageId, filters: filters, orderField: orderField, orderType: orderType, startTime: startTime, endTime: endTime, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询指定共享流量包的用量明细
    ///
    /// 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
    @inlinable
    public func describeSpecificTrafficPackageUsedDetailsPaginated(_ input: DescribeSpecificTrafficPackageUsedDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [UsedDetail])> {
        self.client.paginate(input: input, region: region, command: self.describeSpecificTrafficPackageUsedDetails, logger: logger, on: eventLoop)
    }

    /// 查询指定共享流量包的用量明细
    ///
    /// 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
    @inlinable @discardableResult
    public func describeSpecificTrafficPackageUsedDetailsPaginated(_ input: DescribeSpecificTrafficPackageUsedDetailsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeSpecificTrafficPackageUsedDetailsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeSpecificTrafficPackageUsedDetails, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询指定共享流量包的用量明细
    ///
    /// 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
    ///
    /// - Returns: `AsyncSequence`s of ``UsedDetail`` and ``DescribeSpecificTrafficPackageUsedDetailsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeSpecificTrafficPackageUsedDetailsPaginator(_ input: DescribeSpecificTrafficPackageUsedDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeSpecificTrafficPackageUsedDetailsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeSpecificTrafficPackageUsedDetails, logger: logger, on: eventLoop)
    }
}
