//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DeleteVpcPeeringConnection请求参数结构体
    public struct DeleteVpcPeeringConnectionRequest: TCRequest {
        /// 对等连接唯一ID。
        public let peeringConnectionId: String

        public init(peeringConnectionId: String) {
            self.peeringConnectionId = peeringConnectionId
        }

        enum CodingKeys: String, CodingKey {
            case peeringConnectionId = "PeeringConnectionId"
        }
    }

    /// DeleteVpcPeeringConnection返回参数结构体
    public struct DeleteVpcPeeringConnectionResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除私有网络对等连接
    ///
    /// 本接口（DeleteVpcPeeringConnection）用于删除私有网络对等连接。
    @inlinable @discardableResult
    public func deleteVpcPeeringConnection(_ input: DeleteVpcPeeringConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteVpcPeeringConnectionResponse> {
        self.client.execute(action: "DeleteVpcPeeringConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除私有网络对等连接
    ///
    /// 本接口（DeleteVpcPeeringConnection）用于删除私有网络对等连接。
    @inlinable @discardableResult
    public func deleteVpcPeeringConnection(_ input: DeleteVpcPeeringConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteVpcPeeringConnectionResponse {
        try await self.client.execute(action: "DeleteVpcPeeringConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除私有网络对等连接
    ///
    /// 本接口（DeleteVpcPeeringConnection）用于删除私有网络对等连接。
    @inlinable @discardableResult
    public func deleteVpcPeeringConnection(peeringConnectionId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteVpcPeeringConnectionResponse> {
        self.deleteVpcPeeringConnection(.init(peeringConnectionId: peeringConnectionId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除私有网络对等连接
    ///
    /// 本接口（DeleteVpcPeeringConnection）用于删除私有网络对等连接。
    @inlinable @discardableResult
    public func deleteVpcPeeringConnection(peeringConnectionId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteVpcPeeringConnectionResponse {
        try await self.deleteVpcPeeringConnection(.init(peeringConnectionId: peeringConnectionId), region: region, logger: logger, on: eventLoop)
    }
}
