//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// DescribeVpcPeeringConnections请求参数结构体
    public struct DescribeVpcPeeringConnectionsRequest: TCRequest {
        /// 对等连接唯一ID数组。
        public let peeringConnectionIds: [String]?

        /// 过滤条件，参数不支持同时指定PeeringConnectionIds和Filters。
        /// - vpc-id - String - （过滤条件）VPC实例ID，形如：vpc-f49l6u0z。
        /// - state String - （过滤条件）对等连接状态，可选值有：PENDING，投放中；ACTIVE，使用中；EXPIRED，已过期；REJECTED，拒绝。
        /// - peering-connection-name - String - （过滤条件）对等连接名称。
        public let filters: [Filter]?

        /// 偏移量。
        public let offset: Int64?

        /// 请求对象个数。
        public let limit: Int64?

        /// 排序字段，可选值有：CreatedTime，PeeringConnectionName。
        public let orderField: String?

        /// 排序方式：DESC，降序；ASC，升序。
        public let orderDirection: String?

        public init(peeringConnectionIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, orderField: String? = nil, orderDirection: String? = nil) {
            self.peeringConnectionIds = peeringConnectionIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.orderField = orderField
            self.orderDirection = orderDirection
        }

        enum CodingKeys: String, CodingKey {
            case peeringConnectionIds = "PeeringConnectionIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
            case orderField = "OrderField"
            case orderDirection = "OrderDirection"
        }
    }

    /// DescribeVpcPeeringConnections返回参数结构体
    public struct DescribeVpcPeeringConnectionsResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 查询私有网络对等连接
    ///
    /// 查询私有网络对等连接。
    @inlinable @discardableResult
    public func describeVpcPeeringConnections(_ input: DescribeVpcPeeringConnectionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVpcPeeringConnectionsResponse> {
        self.client.execute(action: "DescribeVpcPeeringConnections", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询私有网络对等连接
    ///
    /// 查询私有网络对等连接。
    @inlinable @discardableResult
    public func describeVpcPeeringConnections(_ input: DescribeVpcPeeringConnectionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVpcPeeringConnectionsResponse {
        try await self.client.execute(action: "DescribeVpcPeeringConnections", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询私有网络对等连接
    ///
    /// 查询私有网络对等连接。
    @inlinable @discardableResult
    public func describeVpcPeeringConnections(peeringConnectionIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, orderField: String? = nil, orderDirection: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVpcPeeringConnectionsResponse> {
        self.describeVpcPeeringConnections(.init(peeringConnectionIds: peeringConnectionIds, filters: filters, offset: offset, limit: limit, orderField: orderField, orderDirection: orderDirection), region: region, logger: logger, on: eventLoop)
    }

    /// 查询私有网络对等连接
    ///
    /// 查询私有网络对等连接。
    @inlinable @discardableResult
    public func describeVpcPeeringConnections(peeringConnectionIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, orderField: String? = nil, orderDirection: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVpcPeeringConnectionsResponse {
        try await self.describeVpcPeeringConnections(.init(peeringConnectionIds: peeringConnectionIds, filters: filters, offset: offset, limit: limit, orderField: orderField, orderDirection: orderDirection), region: region, logger: logger, on: eventLoop)
    }
}
