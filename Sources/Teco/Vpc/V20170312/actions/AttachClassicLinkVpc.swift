//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// AttachClassicLinkVpc请求参数结构体
    public struct AttachClassicLinkVpcRequest: TCRequestModel {
        /// VPC实例ID
        public let vpcId: String

        /// CVM实例ID
        public let instanceIds: [String]

        public init(vpcId: String, instanceIds: [String]) {
            self.vpcId = vpcId
            self.instanceIds = instanceIds
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case instanceIds = "InstanceIds"
        }
    }

    /// AttachClassicLinkVpc返回参数结构体
    public struct AttachClassicLinkVpcResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建基础网络互通
    ///
    /// 本接口(AttachClassicLinkVpc)用于创建私有网络和基础网络设备互通。
    /// * 私有网络和基础网络设备必须在同一个地域。
    /// * 私有网络和基础网络的区别详见vpc产品文档-<a href="https://cloud.tencent.com/document/product/215/30720">私有网络与基础网络</a>。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable @discardableResult
    public func attachClassicLinkVpc(_ input: AttachClassicLinkVpcRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AttachClassicLinkVpcResponse> {
        self.client.execute(action: "AttachClassicLinkVpc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建基础网络互通
    ///
    /// 本接口(AttachClassicLinkVpc)用于创建私有网络和基础网络设备互通。
    /// * 私有网络和基础网络设备必须在同一个地域。
    /// * 私有网络和基础网络的区别详见vpc产品文档-<a href="https://cloud.tencent.com/document/product/215/30720">私有网络与基础网络</a>。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable @discardableResult
    public func attachClassicLinkVpc(_ input: AttachClassicLinkVpcRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachClassicLinkVpcResponse {
        try await self.client.execute(action: "AttachClassicLinkVpc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建基础网络互通
    ///
    /// 本接口(AttachClassicLinkVpc)用于创建私有网络和基础网络设备互通。
    /// * 私有网络和基础网络设备必须在同一个地域。
    /// * 私有网络和基础网络的区别详见vpc产品文档-<a href="https://cloud.tencent.com/document/product/215/30720">私有网络与基础网络</a>。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable @discardableResult
    public func attachClassicLinkVpc(vpcId: String, instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AttachClassicLinkVpcResponse> {
        let input = AttachClassicLinkVpcRequest(vpcId: vpcId, instanceIds: instanceIds)
        return self.client.execute(action: "AttachClassicLinkVpc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建基础网络互通
    ///
    /// 本接口(AttachClassicLinkVpc)用于创建私有网络和基础网络设备互通。
    /// * 私有网络和基础网络设备必须在同一个地域。
    /// * 私有网络和基础网络的区别详见vpc产品文档-<a href="https://cloud.tencent.com/document/product/215/30720">私有网络与基础网络</a>。
    /// >?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
    /// >
    @inlinable @discardableResult
    public func attachClassicLinkVpc(vpcId: String, instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachClassicLinkVpcResponse {
        let input = AttachClassicLinkVpcRequest(vpcId: vpcId, instanceIds: instanceIds)
        return try await self.client.execute(action: "AttachClassicLinkVpc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
