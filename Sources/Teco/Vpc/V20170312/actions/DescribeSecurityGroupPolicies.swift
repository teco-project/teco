//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// 查询安全组规则
    ///
    /// 本接口（DescribeSecurityGroupPolicies）用于查询安全组规则。
    @inlinable
    public func describeSecurityGroupPolicies(_ input: DescribeSecurityGroupPoliciesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeSecurityGroupPoliciesResponse > {
        self.client.execute(action: "DescribeSecurityGroupPolicies", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询安全组规则
    ///
    /// 本接口（DescribeSecurityGroupPolicies）用于查询安全组规则。
    @inlinable
    public func describeSecurityGroupPolicies(_ input: DescribeSecurityGroupPoliciesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecurityGroupPoliciesResponse {
        try await self.client.execute(action: "DescribeSecurityGroupPolicies", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeSecurityGroupPolicies请求参数结构体
    public struct DescribeSecurityGroupPoliciesRequest: TCRequestModel {
        /// 安全组实例ID，例如：sg-33ocnj9n，可通过DescribeSecurityGroups获取。
        public let securityGroupId: String
        
        /// 过滤条件。
        /// <li>security-group-id - String - 规则中的安全组ID。</li>
        /// <li>ip - String - IP，支持IPV4和IPV6模糊匹配。</li>
        /// <li>address-module - String - IP地址模板或IP地址组模板ID。</li>
        /// <li>service-module - String - 协议端口模板或协议端口组模板ID。</li>
        /// <li>protocol-type - String - 安全组策略支持的协议，可选值：`TCP`, `UDP`, `ICMP`, `ICMPV6`, `GRE`, `ALL`。</li>
        /// <li>port - String - 是否必填：否 -协议端口，支持模糊匹配，值为`ALL`时，查询所有的端口。</li>
        /// <li>poly - String - 协议策略，可选值：`ALL`，所有策略；`ACCEPT`，允许；`DROP`，拒绝。</li>
        /// <li>direction - String - 协议规则，可选值：`ALL`，所有策略；`INBOUND`，入站规则；`OUTBOUND`，出站规则。</li>
        /// <li>description - String - 协议描述，该过滤条件支持模糊匹配。</li>
        public let filters: [Filter]?
        
        public init (securityGroupId: String, filters: [Filter]?) {
            self.securityGroupId = securityGroupId
            self.filters = filters
        }
        
        enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
            case filters = "Filters"
        }
    }
    
    /// DescribeSecurityGroupPolicies返回参数结构体
    public struct DescribeSecurityGroupPoliciesResponse: TCResponseModel {
        /// 安全组规则集合。
        public let securityGroupPolicySet: SecurityGroupPolicySet
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case securityGroupPolicySet = "SecurityGroupPolicySet"
            case requestId = "RequestId"
        }
    }
}
