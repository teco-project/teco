//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vpc {
    /// RemoveBandwidthPackageResources请求参数结构体
    public struct RemoveBandwidthPackageResourcesRequest: TCRequest {
        /// 带宽包唯一标识ID，形如'bwp-xxxx'
        public let bandwidthPackageId: String?

        /// 资源类型，包括‘Address’, ‘LoadBalance’
        public let resourceType: String?

        /// 资源ID，可支持资源形如'eip-xxxx', 'lb-xxxx'
        public let resourceIds: [String]?

        public init(bandwidthPackageId: String? = nil, resourceType: String? = nil, resourceIds: [String]? = nil) {
            self.bandwidthPackageId = bandwidthPackageId
            self.resourceType = resourceType
            self.resourceIds = resourceIds
        }

        enum CodingKeys: String, CodingKey {
            case bandwidthPackageId = "BandwidthPackageId"
            case resourceType = "ResourceType"
            case resourceIds = "ResourceIds"
        }
    }

    /// RemoveBandwidthPackageResources返回参数结构体
    public struct RemoveBandwidthPackageResourcesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除带宽包资源
    ///
    /// 接口用于删除带宽包资源，包括[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)和[负载均衡](https://cloud.tencent.com/document/product/214/517)等
    @inlinable @discardableResult
    public func removeBandwidthPackageResources(_ input: RemoveBandwidthPackageResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveBandwidthPackageResourcesResponse> {
        self.client.execute(action: "RemoveBandwidthPackageResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除带宽包资源
    ///
    /// 接口用于删除带宽包资源，包括[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)和[负载均衡](https://cloud.tencent.com/document/product/214/517)等
    @inlinable @discardableResult
    public func removeBandwidthPackageResources(_ input: RemoveBandwidthPackageResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveBandwidthPackageResourcesResponse {
        try await self.client.execute(action: "RemoveBandwidthPackageResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除带宽包资源
    ///
    /// 接口用于删除带宽包资源，包括[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)和[负载均衡](https://cloud.tencent.com/document/product/214/517)等
    @inlinable @discardableResult
    public func removeBandwidthPackageResources(bandwidthPackageId: String? = nil, resourceType: String? = nil, resourceIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveBandwidthPackageResourcesResponse> {
        self.removeBandwidthPackageResources(.init(bandwidthPackageId: bandwidthPackageId, resourceType: resourceType, resourceIds: resourceIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除带宽包资源
    ///
    /// 接口用于删除带宽包资源，包括[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)和[负载均衡](https://cloud.tencent.com/document/product/214/517)等
    @inlinable @discardableResult
    public func removeBandwidthPackageResources(bandwidthPackageId: String? = nil, resourceType: String? = nil, resourceIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveBandwidthPackageResourcesResponse {
        try await self.removeBandwidthPackageResources(.init(bandwidthPackageId: bandwidthPackageId, resourceType: resourceType, resourceIds: resourceIds), region: region, logger: logger, on: eventLoop)
    }
}
