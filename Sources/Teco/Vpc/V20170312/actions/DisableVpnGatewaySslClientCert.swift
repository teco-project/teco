//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vpc {
    /// DisableVpnGatewaySslClientCert请求参数结构体
    public struct DisableVpnGatewaySslClientCertRequest: TCRequestModel {
        /// SSL-VPN-CLIENT 实例ID。
        public let sslVpnClientId: String

        public init(sslVpnClientId: String) {
            self.sslVpnClientId = sslVpnClientId
        }

        enum CodingKeys: String, CodingKey {
            case sslVpnClientId = "SslVpnClientId"
        }
    }

    /// DisableVpnGatewaySslClientCert返回参数结构体
    public struct DisableVpnGatewaySslClientCertResponse: TCResponseModel {
        /// 异步任务实例ID。
        public let taskId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 禁用SSL-VPN-CLIENT 证书
    @inlinable
    public func disableVpnGatewaySslClientCert(_ input: DisableVpnGatewaySslClientCertRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableVpnGatewaySslClientCertResponse> {
        self.client.execute(action: "DisableVpnGatewaySslClientCert", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 禁用SSL-VPN-CLIENT 证书
    @inlinable
    public func disableVpnGatewaySslClientCert(_ input: DisableVpnGatewaySslClientCertRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableVpnGatewaySslClientCertResponse {
        try await self.client.execute(action: "DisableVpnGatewaySslClientCert", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 禁用SSL-VPN-CLIENT 证书
    @inlinable
    public func disableVpnGatewaySslClientCert(sslVpnClientId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableVpnGatewaySslClientCertResponse> {
        self.disableVpnGatewaySslClientCert(.init(sslVpnClientId: sslVpnClientId), region: region, logger: logger, on: eventLoop)
    }

    /// 禁用SSL-VPN-CLIENT 证书
    @inlinable
    public func disableVpnGatewaySslClientCert(sslVpnClientId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableVpnGatewaySslClientCertResponse {
        try await self.disableVpnGatewaySslClientCert(.init(sslVpnClientId: sslVpnClientId), region: region, logger: logger, on: eventLoop)
    }
}
