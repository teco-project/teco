//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotvideoindustry {
    /// DescribeAbnormalEvents请求参数结构体
    public struct DescribeAbnormalEventsRequest: TCRequestModel {
        /// 开始时间
        public let startTime: Int64

        /// 结束时间
        public let endTime: Int64

        public init(startTime: Int64, endTime: Int64) {
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeAbnormalEvents返回参数结构体
    public struct DescribeAbnormalEventsResponse: TCResponseModel {
        /// 异动事件走势列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [AbnormalEvents]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取异常事件统计
    @inlinable
    public func describeAbnormalEvents(_ input: DescribeAbnormalEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAbnormalEventsResponse> {
        self.client.execute(action: "DescribeAbnormalEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取异常事件统计
    @inlinable
    public func describeAbnormalEvents(_ input: DescribeAbnormalEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAbnormalEventsResponse {
        try await self.client.execute(action: "DescribeAbnormalEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取异常事件统计
    @inlinable
    public func describeAbnormalEvents(startTime: Int64, endTime: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAbnormalEventsResponse> {
        let input = DescribeAbnormalEventsRequest(startTime: startTime, endTime: endTime)
        return self.client.execute(action: "DescribeAbnormalEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取异常事件统计
    @inlinable
    public func describeAbnormalEvents(startTime: Int64, endTime: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAbnormalEventsResponse {
        let input = DescribeAbnormalEventsRequest(startTime: startTime, endTime: endTime)
        return try await self.client.execute(action: "DescribeAbnormalEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
