//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotvideoindustry {
    /// DescribeLiveChannel请求参数结构体
    public struct DescribeLiveChannelRequest: TCRequestModel {
        /// 频道ID
        public let liveChannelId: String

        public init(liveChannelId: String) {
            self.liveChannelId = liveChannelId
        }

        enum CodingKeys: String, CodingKey {
            case liveChannelId = "LiveChannelId"
        }
    }

    /// DescribeLiveChannel返回参数结构体
    public struct DescribeLiveChannelResponse: TCResponseModel {
        /// 频道ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let liveChannelId: String?

        /// 频道名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let liveChannelName: String?

        /// 直播频道类型 1：固定直播；2：移动直播
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let liveChannelType: Int64?

        /// 通道直播状态：1: 未推流，2: 推流中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let liveStatus: Int64?

        /// 推流地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pushStreamAddress: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: [String]?

        /// 修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case liveChannelId = "LiveChannelId"
            case liveChannelName = "LiveChannelName"
            case liveChannelType = "LiveChannelType"
            case liveStatus = "LiveStatus"
            case pushStreamAddress = "PushStreamAddress"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case requestId = "RequestId"
        }
    }

    /// 直播详情接口
    @inlinable
    public func describeLiveChannel(_ input: DescribeLiveChannelRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveChannelResponse> {
        self.client.execute(action: "DescribeLiveChannel", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 直播详情接口
    @inlinable
    public func describeLiveChannel(_ input: DescribeLiveChannelRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveChannelResponse {
        try await self.client.execute(action: "DescribeLiveChannel", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 直播详情接口
    @inlinable
    public func describeLiveChannel(liveChannelId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveChannelResponse> {
        self.describeLiveChannel(.init(liveChannelId: liveChannelId), region: region, logger: logger, on: eventLoop)
    }

    /// 直播详情接口
    @inlinable
    public func describeLiveChannel(liveChannelId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveChannelResponse {
        try await self.describeLiveChannel(.init(liveChannelId: liveChannelId), region: region, logger: logger, on: eventLoop)
    }
}
