//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Iotvideoindustry {
    /// DescribeLiveChannelList请求参数结构体
    public struct DescribeLiveChannelListRequest: TCPaginatedRequest {
        /// 偏移量
        public let offset: Int64

        /// 最大数
        public let limit: Int64

        /// 直播频道类型，1：固定直播；2：移动直播
        public let liveChannelType: Int64?

        /// 直播录制计划ID, null: 直播录制计划为空
        public let recordPlanId: String?

        /// 频道名称 (支持模糊搜索)
        public let liveChannelName: String?

        public init(offset: Int64, limit: Int64, liveChannelType: Int64? = nil, recordPlanId: String? = nil, liveChannelName: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.liveChannelType = liveChannelType
            self.recordPlanId = recordPlanId
            self.liveChannelName = liveChannelName
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case liveChannelType = "LiveChannelType"
            case recordPlanId = "RecordPlanId"
            case liveChannelName = "LiveChannelName"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeLiveChannelListResponse) -> DescribeLiveChannelListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeLiveChannelListRequest(offset: self.offset + .init(response.getItems().count), limit: self.limit, liveChannelType: self.liveChannelType, recordPlanId: self.recordPlanId, liveChannelName: self.liveChannelName)
        }
    }

    /// DescribeLiveChannelList返回参数结构体
    public struct DescribeLiveChannelListResponse: TCPaginatedResponse {
        /// 频道总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 频道信息数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let liveChannels: [LiveChannelInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case liveChannels = "LiveChannels"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [LiveChannelInfo] {
            self.liveChannels ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 直播列表接口
    @inlinable
    public func describeLiveChannelList(_ input: DescribeLiveChannelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveChannelListResponse> {
        self.client.execute(action: "DescribeLiveChannelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 直播列表接口
    @inlinable
    public func describeLiveChannelList(_ input: DescribeLiveChannelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveChannelListResponse {
        try await self.client.execute(action: "DescribeLiveChannelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 直播列表接口
    @inlinable
    public func describeLiveChannelList(offset: Int64, limit: Int64, liveChannelType: Int64? = nil, recordPlanId: String? = nil, liveChannelName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveChannelListResponse> {
        self.describeLiveChannelList(.init(offset: offset, limit: limit, liveChannelType: liveChannelType, recordPlanId: recordPlanId, liveChannelName: liveChannelName), region: region, logger: logger, on: eventLoop)
    }

    /// 直播列表接口
    @inlinable
    public func describeLiveChannelList(offset: Int64, limit: Int64, liveChannelType: Int64? = nil, recordPlanId: String? = nil, liveChannelName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveChannelListResponse {
        try await self.describeLiveChannelList(.init(offset: offset, limit: limit, liveChannelType: liveChannelType, recordPlanId: recordPlanId, liveChannelName: liveChannelName), region: region, logger: logger, on: eventLoop)
    }

    /// 直播列表接口
    @inlinable
    public func describeLiveChannelListPaginated(_ input: DescribeLiveChannelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [LiveChannelInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeLiveChannelList, logger: logger, on: eventLoop)
    }

    /// 直播列表接口
    @inlinable @discardableResult
    public func describeLiveChannelListPaginated(_ input: DescribeLiveChannelListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeLiveChannelListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeLiveChannelList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 直播列表接口
    ///
    /// - Returns: `AsyncSequence`s of `LiveChannelInfo` and `DescribeLiveChannelListResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeLiveChannelListPaginator(_ input: DescribeLiveChannelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeLiveChannelListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeLiveChannelList, logger: logger, on: eventLoop)
    }
}
