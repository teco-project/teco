//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotvideoindustry {
    /// ControlDevicePTZ请求参数结构体
    public struct ControlDevicePTZRequest: TCRequestModel {
        /// 设备唯一标识
        public let deviceId: String

        /// PTZ控制命令类型：
        /// stop - 停止当前PTZ信令
        /// left - 向左移动
        /// right - 向右移动
        /// up - 向上移动
        /// down - 向下移动
        /// leftUp - 左上移动
        /// leftDown - 左下移动
        /// rightUp - 右上移动
        /// rightDown - 右下移动
        /// zoomOut - 镜头缩小
        /// zoomIn - 镜头放大
        /// irisIn - 光圈缩小
        /// irisOut - 光圈放大
        /// focusIn - 焦距变近
        /// focusOut - 焦距变远
        public let command: String

        /// 通道唯一标识
        public let channelId: String?

        public init(deviceId: String, command: String, channelId: String? = nil) {
            self.deviceId = deviceId
            self.command = command
            self.channelId = channelId
        }

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case command = "Command"
            case channelId = "ChannelId"
        }
    }

    /// ControlDevicePTZ返回参数结构体
    public struct ControlDevicePTZResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 远程PTZ控制设备通道（旧）
    ///
    /// 本接口(ControlDevicePTZ) 用于对支持GB28181 PTZ信令的设备进行远程控制。
    /// 请使用ControlChannelPTZ接口
    @inlinable @discardableResult
    public func controlDevicePTZ(_ input: ControlDevicePTZRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDevicePTZResponse> {
        self.client.execute(action: "ControlDevicePTZ", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 远程PTZ控制设备通道（旧）
    ///
    /// 本接口(ControlDevicePTZ) 用于对支持GB28181 PTZ信令的设备进行远程控制。
    /// 请使用ControlChannelPTZ接口
    @inlinable @discardableResult
    public func controlDevicePTZ(_ input: ControlDevicePTZRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDevicePTZResponse {
        try await self.client.execute(action: "ControlDevicePTZ", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 远程PTZ控制设备通道（旧）
    ///
    /// 本接口(ControlDevicePTZ) 用于对支持GB28181 PTZ信令的设备进行远程控制。
    /// 请使用ControlChannelPTZ接口
    @inlinable @discardableResult
    public func controlDevicePTZ(deviceId: String, command: String, channelId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDevicePTZResponse> {
        self.controlDevicePTZ(.init(deviceId: deviceId, command: command, channelId: channelId), region: region, logger: logger, on: eventLoop)
    }

    /// 远程PTZ控制设备通道（旧）
    ///
    /// 本接口(ControlDevicePTZ) 用于对支持GB28181 PTZ信令的设备进行远程控制。
    /// 请使用ControlChannelPTZ接口
    @inlinable @discardableResult
    public func controlDevicePTZ(deviceId: String, command: String, channelId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDevicePTZResponse {
        try await self.controlDevicePTZ(.init(deviceId: deviceId, command: command, channelId: channelId), region: region, logger: logger, on: eventLoop)
    }
}
