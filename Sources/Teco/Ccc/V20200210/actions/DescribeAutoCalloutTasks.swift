//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Ccc {
    /// DescribeAutoCalloutTasks请求参数结构体
    public struct DescribeAutoCalloutTasksRequest: TCPaginatedRequest {
        /// 应用 ID（必填），可以查看 https://console.cloud.tencent.com/ccc
        public let sdkAppId: UInt64

        /// 分页大小
        public let pageSize: UInt64

        /// 页数
        public let pageNumber: UInt64

        public init(sdkAppId: UInt64, pageSize: UInt64, pageNumber: UInt64) {
            self.sdkAppId = sdkAppId
            self.pageSize = pageSize
            self.pageNumber = pageNumber
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeAutoCalloutTasksResponse) -> DescribeAutoCalloutTasksRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeAutoCalloutTasksRequest(sdkAppId: self.sdkAppId, pageSize: self.pageSize, pageNumber: self.pageNumber + 1)
        }
    }

    /// DescribeAutoCalloutTasks返回参数结构体
    public struct DescribeAutoCalloutTasksResponse: TCPaginatedResponse {
        /// 总数
        public let totalCount: UInt64

        /// 任务列表
        public let tasks: [AutoCalloutTaskInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case tasks = "Tasks"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [AutoCalloutTaskInfo] {
            self.tasks
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 批量查询自动任务外呼
    @inlinable
    public func describeAutoCalloutTasks(_ input: DescribeAutoCalloutTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAutoCalloutTasksResponse> {
        self.client.execute(action: "DescribeAutoCalloutTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量查询自动任务外呼
    @inlinable
    public func describeAutoCalloutTasks(_ input: DescribeAutoCalloutTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAutoCalloutTasksResponse {
        try await self.client.execute(action: "DescribeAutoCalloutTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量查询自动任务外呼
    @inlinable
    public func describeAutoCalloutTasks(sdkAppId: UInt64, pageSize: UInt64, pageNumber: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAutoCalloutTasksResponse> {
        let input = DescribeAutoCalloutTasksRequest(sdkAppId: sdkAppId, pageSize: pageSize, pageNumber: pageNumber)
        return self.client.execute(action: "DescribeAutoCalloutTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量查询自动任务外呼
    @inlinable
    public func describeAutoCalloutTasks(sdkAppId: UInt64, pageSize: UInt64, pageNumber: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAutoCalloutTasksResponse {
        let input = DescribeAutoCalloutTasksRequest(sdkAppId: sdkAppId, pageSize: pageSize, pageNumber: pageNumber)
        return try await self.client.execute(action: "DescribeAutoCalloutTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量查询自动任务外呼
    @inlinable
    public func describeAutoCalloutTasksPaginated(_ input: DescribeAutoCalloutTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [AutoCalloutTaskInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeAutoCalloutTasks, logger: logger, on: eventLoop)
    }

    /// 批量查询自动任务外呼
    @inlinable
    public func describeAutoCalloutTasksPaginated(_ input: DescribeAutoCalloutTasksRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAutoCalloutTasksResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAutoCalloutTasks, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 批量查询自动任务外呼
    @inlinable
    public func describeAutoCalloutTasksPaginator(_ input: DescribeAutoCalloutTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<DescribeAutoCalloutTasksRequest, DescribeAutoCalloutTasksResponse>.ResultSequence, responses: TCClient.Paginator<DescribeAutoCalloutTasksRequest, DescribeAutoCalloutTasksResponse>.ResponseSequence) {
        let results = TCClient.Paginator<DescribeAutoCalloutTasksRequest, DescribeAutoCalloutTasksResponse>.ResultSequence(input: input, region: region, command: self.describeAutoCalloutTasks, logger: logger, on: eventLoop)
        let responses = TCClient.Paginator<DescribeAutoCalloutTasksRequest, DescribeAutoCalloutTasksResponse>.ResponseSequence(input: input, region: region, command: self.describeAutoCalloutTasks, logger: logger, on: eventLoop)
        return (results, responses)
    }
}
