//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ccc {
    /// BindNumberCallOutSkillGroup请求参数结构体
    public struct BindNumberCallOutSkillGroupRequest: TCRequestModel {
        /// 应用 ID（必填），可以查看 https://console.cloud.tencent.com/ccc
        public let sdkAppId: UInt64

        /// 待绑定的号码
        public let number: String

        /// 待绑定的技能组Id列表
        public let skillGroupIds: [UInt64]

        public init(sdkAppId: UInt64, number: String, skillGroupIds: [UInt64]) {
            self.sdkAppId = sdkAppId
            self.number = number
            self.skillGroupIds = skillGroupIds
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case number = "Number"
            case skillGroupIds = "SkillGroupIds"
        }
    }

    /// BindNumberCallOutSkillGroup返回参数结构体
    public struct BindNumberCallOutSkillGroupResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 绑定号码外呼技能组
    @inlinable @discardableResult
    public func bindNumberCallOutSkillGroup(_ input: BindNumberCallOutSkillGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindNumberCallOutSkillGroupResponse> {
        self.client.execute(action: "BindNumberCallOutSkillGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定号码外呼技能组
    @inlinable @discardableResult
    public func bindNumberCallOutSkillGroup(_ input: BindNumberCallOutSkillGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindNumberCallOutSkillGroupResponse {
        try await self.client.execute(action: "BindNumberCallOutSkillGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 绑定号码外呼技能组
    @inlinable @discardableResult
    public func bindNumberCallOutSkillGroup(sdkAppId: UInt64, number: String, skillGroupIds: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindNumberCallOutSkillGroupResponse> {
        self.bindNumberCallOutSkillGroup(.init(sdkAppId: sdkAppId, number: number, skillGroupIds: skillGroupIds), region: region, logger: logger, on: eventLoop)
    }

    /// 绑定号码外呼技能组
    @inlinable @discardableResult
    public func bindNumberCallOutSkillGroup(sdkAppId: UInt64, number: String, skillGroupIds: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindNumberCallOutSkillGroupResponse {
        try await self.bindNumberCallOutSkillGroup(.init(sdkAppId: sdkAppId, number: number, skillGroupIds: skillGroupIds), region: region, logger: logger, on: eventLoop)
    }
}
