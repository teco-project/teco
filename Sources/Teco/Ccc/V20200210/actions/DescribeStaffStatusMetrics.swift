//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ccc {
    /// DescribeStaffStatusMetrics请求参数结构体
    public struct DescribeStaffStatusMetricsRequest: TCRequest {
        /// 应用 ID（必填），可以查看 https://console.cloud.tencent.com/ccc
        public let sdkAppId: Int64

        /// 筛选坐席列表，默认不传返回全部坐席信息
        public let staffList: [String]?

        /// 筛选技能组ID列表
        public let groupIdList: [Int64]?

        /// 筛选坐席状态列表
        public let statusList: [String]?

        public init(sdkAppId: Int64, staffList: [String]? = nil, groupIdList: [Int64]? = nil, statusList: [String]? = nil) {
            self.sdkAppId = sdkAppId
            self.staffList = staffList
            self.groupIdList = groupIdList
            self.statusList = statusList
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case staffList = "StaffList"
            case groupIdList = "GroupIdList"
            case statusList = "StatusList"
        }
    }

    /// DescribeStaffStatusMetrics返回参数结构体
    public struct DescribeStaffStatusMetricsResponse: TCResponse {
        /// 坐席状态实时信息
        public let metrics: [StaffStatusMetrics]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case metrics = "Metrics"
            case requestId = "RequestId"
        }
    }

    /// 获取坐席实时状态统计指标
    @inlinable
    public func describeStaffStatusMetrics(_ input: DescribeStaffStatusMetricsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStaffStatusMetricsResponse> {
        self.client.execute(action: "DescribeStaffStatusMetrics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取坐席实时状态统计指标
    @inlinable
    public func describeStaffStatusMetrics(_ input: DescribeStaffStatusMetricsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStaffStatusMetricsResponse {
        try await self.client.execute(action: "DescribeStaffStatusMetrics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取坐席实时状态统计指标
    @inlinable
    public func describeStaffStatusMetrics(sdkAppId: Int64, staffList: [String]? = nil, groupIdList: [Int64]? = nil, statusList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStaffStatusMetricsResponse> {
        self.describeStaffStatusMetrics(.init(sdkAppId: sdkAppId, staffList: staffList, groupIdList: groupIdList, statusList: statusList), region: region, logger: logger, on: eventLoop)
    }

    /// 获取坐席实时状态统计指标
    @inlinable
    public func describeStaffStatusMetrics(sdkAppId: Int64, staffList: [String]? = nil, groupIdList: [Int64]? = nil, statusList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStaffStatusMetricsResponse {
        try await self.describeStaffStatusMetrics(.init(sdkAppId: sdkAppId, staffList: staffList, groupIdList: groupIdList, statusList: statusList), region: region, logger: logger, on: eventLoop)
    }
}
