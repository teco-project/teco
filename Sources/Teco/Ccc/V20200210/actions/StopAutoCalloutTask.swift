//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ccc {
    /// StopAutoCalloutTask请求参数结构体
    public struct StopAutoCalloutTaskRequest: TCRequestModel {
        /// 呼叫中心实例Id
        public let sdkAppId: UInt64

        /// 任务Id
        public let taskId: UInt64

        public init(sdkAppId: UInt64, taskId: UInt64) {
            self.sdkAppId = sdkAppId
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case taskId = "TaskId"
        }
    }

    /// StopAutoCalloutTask返回参数结构体
    public struct StopAutoCalloutTaskResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 停止自动外呼任务
    @inlinable @discardableResult
    public func stopAutoCalloutTask(_ input: StopAutoCalloutTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopAutoCalloutTaskResponse> {
        self.client.execute(action: "StopAutoCalloutTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 停止自动外呼任务
    @inlinable @discardableResult
    public func stopAutoCalloutTask(_ input: StopAutoCalloutTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopAutoCalloutTaskResponse {
        try await self.client.execute(action: "StopAutoCalloutTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 停止自动外呼任务
    @inlinable @discardableResult
    public func stopAutoCalloutTask(sdkAppId: UInt64, taskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopAutoCalloutTaskResponse> {
        let input = StopAutoCalloutTaskRequest(sdkAppId: sdkAppId, taskId: taskId)
        return self.client.execute(action: "StopAutoCalloutTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 停止自动外呼任务
    @inlinable @discardableResult
    public func stopAutoCalloutTask(sdkAppId: UInt64, taskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopAutoCalloutTaskResponse {
        let input = StopAutoCalloutTaskRequest(sdkAppId: sdkAppId, taskId: taskId)
        return try await self.client.execute(action: "StopAutoCalloutTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
