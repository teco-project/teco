//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ccc {
    /// DescribeCallInMetrics请求参数结构体
    public struct DescribeCallInMetricsRequest: TCRequest {
        /// 应用 ID（必填），可以查看 https://console.cloud.tencent.com/ccc
        public let sdkAppId: Int64

        /// 是否返回技能组维度信息，默认“是”
        public let enabledSkillGroup: Bool?

        /// 是否返回线路维度信息，默认“否”
        public let enabledNumber: Bool?

        /// 筛选技能组列表
        public let groupIdList: [Int64]?

        public init(sdkAppId: Int64, enabledSkillGroup: Bool? = nil, enabledNumber: Bool? = nil, groupIdList: [Int64]? = nil) {
            self.sdkAppId = sdkAppId
            self.enabledSkillGroup = enabledSkillGroup
            self.enabledNumber = enabledNumber
            self.groupIdList = groupIdList
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case enabledSkillGroup = "EnabledSkillGroup"
            case enabledNumber = "EnabledNumber"
            case groupIdList = "GroupIdList"
        }
    }

    /// DescribeCallInMetrics返回参数结构体
    public struct DescribeCallInMetricsResponse: TCResponse {
        /// 时间戳
        public let timestamp: Int64

        /// 总体指标
        public let totalMetrics: CallInMetrics

        /// 线路维度指标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numberMetrics: [CallInNumberMetrics]?

        /// 技能组维度指标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let skillGroupMetrics: [CallInSkillGroupMetrics]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case timestamp = "Timestamp"
            case totalMetrics = "TotalMetrics"
            case numberMetrics = "NumberMetrics"
            case skillGroupMetrics = "SkillGroupMetrics"
            case requestId = "RequestId"
        }
    }

    /// 获取呼入实时数据统计指标
    @inlinable
    public func describeCallInMetrics(_ input: DescribeCallInMetricsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCallInMetricsResponse> {
        self.client.execute(action: "DescribeCallInMetrics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取呼入实时数据统计指标
    @inlinable
    public func describeCallInMetrics(_ input: DescribeCallInMetricsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCallInMetricsResponse {
        try await self.client.execute(action: "DescribeCallInMetrics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取呼入实时数据统计指标
    @inlinable
    public func describeCallInMetrics(sdkAppId: Int64, enabledSkillGroup: Bool? = nil, enabledNumber: Bool? = nil, groupIdList: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCallInMetricsResponse> {
        self.describeCallInMetrics(.init(sdkAppId: sdkAppId, enabledSkillGroup: enabledSkillGroup, enabledNumber: enabledNumber, groupIdList: groupIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 获取呼入实时数据统计指标
    @inlinable
    public func describeCallInMetrics(sdkAppId: Int64, enabledSkillGroup: Bool? = nil, enabledNumber: Bool? = nil, groupIdList: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCallInMetricsResponse {
        try await self.describeCallInMetrics(.init(sdkAppId: sdkAppId, enabledSkillGroup: enabledSkillGroup, enabledNumber: enabledNumber, groupIdList: groupIdList), region: region, logger: logger, on: eventLoop)
    }
}
