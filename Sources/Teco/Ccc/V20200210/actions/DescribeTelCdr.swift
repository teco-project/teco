//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Ccc {
    /// DescribeTelCdr请求参数结构体
    public struct DescribeTelCdrRequest: TCPaginatedRequest {
        /// 起始时间戳，Unix 秒级时间戳
        public let startTimeStamp: Int64

        /// 结束时间戳，Unix 秒级时间戳
        public let endTimeStamp: Int64

        /// 实例 ID（废弃）
        public let instanceId: Int64?

        /// 返回数据条数，上限（废弃）
        public let limit: Int64?

        /// 偏移（废弃）
        public let offset: Int64?

        /// 应用 ID（必填），可以查看 https://console.cloud.tencent.com/ccc
        public let sdkAppId: Int64?

        /// 分页尺寸（必填），上限 100
        public let pageSize: Int64?

        /// 分页页码（必填），从 0 开始
        public let pageNumber: Int64?

        /// 按手机号筛选
        public let phones: [String]?

        /// 按SessionId筛选
        public let sessionIds: [String]?

        public init(startTimeStamp: Int64, endTimeStamp: Int64, instanceId: Int64? = nil, limit: Int64? = nil, offset: Int64? = nil, sdkAppId: Int64? = nil, pageSize: Int64? = nil, pageNumber: Int64? = nil, phones: [String]? = nil, sessionIds: [String]? = nil) {
            self.startTimeStamp = startTimeStamp
            self.endTimeStamp = endTimeStamp
            self.instanceId = instanceId
            self.limit = limit
            self.offset = offset
            self.sdkAppId = sdkAppId
            self.pageSize = pageSize
            self.pageNumber = pageNumber
            self.phones = phones
            self.sessionIds = sessionIds
        }

        enum CodingKeys: String, CodingKey {
            case startTimeStamp = "StartTimeStamp"
            case endTimeStamp = "EndTimeStamp"
            case instanceId = "InstanceId"
            case limit = "Limit"
            case offset = "Offset"
            case sdkAppId = "SdkAppId"
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
            case phones = "Phones"
            case sessionIds = "SessionIds"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTelCdrResponse) -> DescribeTelCdrRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeTelCdrRequest(startTimeStamp: self.startTimeStamp, endTimeStamp: self.endTimeStamp, instanceId: self.instanceId, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), sdkAppId: self.sdkAppId, pageSize: self.pageSize, pageNumber: self.pageNumber, phones: self.phones, sessionIds: self.sessionIds)
        }
    }

    /// DescribeTelCdr返回参数结构体
    public struct DescribeTelCdrResponse: TCPaginatedResponse {
        /// 话单记录总数
        public let totalCount: Int64

        /// 话单记录
        public let telCdrs: [TelCdrInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case telCdrs = "TelCdrs"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [TelCdrInfo] {
            self.telCdrs
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取电话服务记录与录音
    @inlinable
    public func describeTelCdr(_ input: DescribeTelCdrRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTelCdrResponse> {
        self.client.execute(action: "DescribeTelCdr", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取电话服务记录与录音
    @inlinable
    public func describeTelCdr(_ input: DescribeTelCdrRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTelCdrResponse {
        try await self.client.execute(action: "DescribeTelCdr", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取电话服务记录与录音
    @inlinable
    public func describeTelCdr(startTimeStamp: Int64, endTimeStamp: Int64, instanceId: Int64? = nil, limit: Int64? = nil, offset: Int64? = nil, sdkAppId: Int64? = nil, pageSize: Int64? = nil, pageNumber: Int64? = nil, phones: [String]? = nil, sessionIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTelCdrResponse> {
        self.describeTelCdr(.init(startTimeStamp: startTimeStamp, endTimeStamp: endTimeStamp, instanceId: instanceId, limit: limit, offset: offset, sdkAppId: sdkAppId, pageSize: pageSize, pageNumber: pageNumber, phones: phones, sessionIds: sessionIds), region: region, logger: logger, on: eventLoop)
    }

    /// 获取电话服务记录与录音
    @inlinable
    public func describeTelCdr(startTimeStamp: Int64, endTimeStamp: Int64, instanceId: Int64? = nil, limit: Int64? = nil, offset: Int64? = nil, sdkAppId: Int64? = nil, pageSize: Int64? = nil, pageNumber: Int64? = nil, phones: [String]? = nil, sessionIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTelCdrResponse {
        try await self.describeTelCdr(.init(startTimeStamp: startTimeStamp, endTimeStamp: endTimeStamp, instanceId: instanceId, limit: limit, offset: offset, sdkAppId: sdkAppId, pageSize: pageSize, pageNumber: pageNumber, phones: phones, sessionIds: sessionIds), region: region, logger: logger, on: eventLoop)
    }

    /// 获取电话服务记录与录音
    @inlinable
    public func describeTelCdrPaginated(_ input: DescribeTelCdrRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [TelCdrInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeTelCdr, logger: logger, on: eventLoop)
    }

    /// 获取电话服务记录与录音
    @inlinable @discardableResult
    public func describeTelCdrPaginated(_ input: DescribeTelCdrRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTelCdrResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTelCdr, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取电话服务记录与录音
    ///
    /// - Returns: `AsyncSequence`s of `TelCdrInfo` and `DescribeTelCdrResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTelCdrPaginator(_ input: DescribeTelCdrRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTelCdrRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTelCdr, logger: logger, on: eventLoop)
    }
}
