//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ccc {
    /// CreateAdminURL请求参数结构体
    public struct CreateAdminURLRequest: TCRequest {
        /// 应用 ID（必填），可以查看 https://console.cloud.tencent.com/ccc
        public let sdkAppId: Int64

        /// 管理员账号
        public let seatUserId: String

        public init(sdkAppId: Int64, seatUserId: String) {
            self.sdkAppId = sdkAppId
            self.seatUserId = seatUserId
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case seatUserId = "SeatUserId"
        }
    }

    /// CreateAdminURL返回参数结构体
    public struct CreateAdminURLResponse: TCResponse {
        /// 登录链接
        public let url: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case url = "URL"
            case requestId = "RequestId"
        }
    }

    /// 创建管理端访问链接
    @inlinable
    public func createAdminURL(_ input: CreateAdminURLRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAdminURLResponse> {
        self.client.execute(action: "CreateAdminURL", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建管理端访问链接
    @inlinable
    public func createAdminURL(_ input: CreateAdminURLRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAdminURLResponse {
        try await self.client.execute(action: "CreateAdminURL", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建管理端访问链接
    @inlinable
    public func createAdminURL(sdkAppId: Int64, seatUserId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAdminURLResponse> {
        self.createAdminURL(.init(sdkAppId: sdkAppId, seatUserId: seatUserId), region: region, logger: logger, on: eventLoop)
    }

    /// 创建管理端访问链接
    @inlinable
    public func createAdminURL(sdkAppId: Int64, seatUserId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAdminURLResponse {
        try await self.createAdminURL(.init(sdkAppId: sdkAppId, seatUserId: seatUserId), region: region, logger: logger, on: eventLoop)
    }
}
