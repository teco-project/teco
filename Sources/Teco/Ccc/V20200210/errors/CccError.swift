//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

/// Service error type returned by `Ccc`.
public protocol TCCccErrorType: TCServiceErrorType {
    /// Get the service error as ``TCCccError``.
    ///
    /// - Returns: ``TCCccError`` that holds the same error code and context.
    func asCccError() -> TCCccError
}

public struct TCCccError: TCCccErrorType {
    enum Code: String {
        case failedOperation_CallOutFailed = "FailedOperation.CallOutFailed"
        case failedOperation_CalleeIsLimited = "FailedOperation.CalleeIsLimited"
        case failedOperation_CallerOverFrequency = "FailedOperation.CallerOverFrequency"
        case failedOperation_CurStateNotAllowModify = "FailedOperation.CurStateNotAllowModify"
        case failedOperation_DuplicatedAccount = "FailedOperation.DuplicatedAccount"
        case failedOperation_NoCallOutNumber = "FailedOperation.NoCallOutNumber"
        case failedOperation_PermissionDenied = "FailedOperation.PermissionDenied"
        case failedOperation_SeatStatusBusy = "FailedOperation.SeatStatusBusy"
        case internalError = "InternalError"
        case internalError_DBError = "InternalError.DBError"
        case invalidParameter = "InvalidParameter"
        case invalidParameterValue = "InvalidParameterValue"
        case invalidParameterValue_AccountNotExist = "InvalidParameterValue.AccountNotExist"
        case invalidParameterValue_InstanceNotExist = "InvalidParameterValue.InstanceNotExist"
        case invalidParameterValue_PhoneNumIsBoundOtherAccount = "InvalidParameterValue.PhoneNumIsBoundOtherAccount"
        case invalidParameterValue_RecordNotExist = "InvalidParameterValue.RecordNotExist"
        case invalidParameterValue_SkillGroupError = "InvalidParameterValue.SkillGroupError"
        case invalidParameterValue_SkillGroupExist = "InvalidParameterValue.SkillGroupExist"
        case invalidParameter_DuplicateAddress = "InvalidParameter.DuplicateAddress"
        case invalidParameter_DuplicatePhoneNumber = "InvalidParameter.DuplicatePhoneNumber"
        case invalidParameter_DuplicateSipAccount = "InvalidParameter.DuplicateSipAccount"
        case invalidParameter_IllegalAddress = "InvalidParameter.IllegalAddress"
        case invalidParameter_IllegalPhoneNumber = "InvalidParameter.IllegalPhoneNumber"
        case invalidParameter_InstanceNotExist = "InvalidParameter.InstanceNotExist"
        case invalidParameter_InvalidAddress = "InvalidParameter.InvalidAddress"
        case invalidParameter_InvalidIP = "InvalidParameter.InvalidIP"
        case invalidParameter_InvalidPhoneNumber = "InvalidParameter.InvalidPhoneNumber"
        case invalidParameter_InvalidPort = "InvalidParameter.InvalidPort"
        case invalidParameter_SipAccountPasswordFormat = "InvalidParameter.SipAccountPasswordFormat"
        case invalidParameter_SipAccountUserFormat = "InvalidParameter.SipAccountUserFormat"
        case invalidParameter_SipTrunkInUsed = "InvalidParameter.SipTrunkInUsed"
        case invalidParameter_SipTrunkNotFound = "InvalidParameter.SipTrunkNotFound"
        case limitExceeded = "LimitExceeded"
        case limitExceeded_OutOfCountLimit = "LimitExceeded.OutOfCountLimit"
        case operationDenied_NotInWhiteList = "OperationDenied.NotInWhiteList"
        case unknownParameter = "UnknownParameter"
        case unsupportedOperation = "UnsupportedOperation"
    }

    /// Error domains affliated to ``TCCccError``.
    public static var domains: [TCErrorType.Type] {
        [FailedOperation.self, InternalError.self, InvalidParameter.self, InvalidParameterValue.self, LimitExceeded.self, OperationDenied.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 外呼失败。
    ///
    /// 外呼失败，请检查主叫或被叫号码是否正常。
    public static var failedOperation_CallOutFailed: TCCccError {
        TCCccError(.failedOperation_CallOutFailed)
    }

    /// 被叫号码外呼受限。
    public static var failedOperation_CalleeIsLimited: TCCccError {
        TCCccError(.failedOperation_CalleeIsLimited)
    }

    /// 主叫号码外呼超频。
    public static var failedOperation_CallerOverFrequency: TCCccError {
        TCCccError(.failedOperation_CallerOverFrequency)
    }

    /// 当前号码状态不能被修改。
    public static var failedOperation_CurStateNotAllowModify: TCCccError {
        TCCccError(.failedOperation_CurStateNotAllowModify)
    }

    /// 重复账号。
    public static var failedOperation_DuplicatedAccount: TCCccError {
        TCCccError(.failedOperation_DuplicatedAccount)
    }

    /// 无可用的外呼号码。
    public static var failedOperation_NoCallOutNumber: TCCccError {
        TCCccError(.failedOperation_NoCallOutNumber)
    }

    /// 权限不足。
    ///
    /// 检查账号权限
    public static var failedOperation_PermissionDenied: TCCccError {
        TCCccError(.failedOperation_PermissionDenied)
    }

    /// 坐席处于忙碌状态。
    public static var failedOperation_SeatStatusBusy: TCCccError {
        TCCccError(.failedOperation_SeatStatusBusy)
    }

    /// 内部错误。
    public static var internalError: TCCccError {
        TCCccError(.internalError)
    }

    /// 内部数据库访问失败。
    public static var internalError_DBError: TCCccError {
        TCCccError(.internalError_DBError)
    }

    /// 参数错误。
    public static var invalidParameter: TCCccError {
        TCCccError(.invalidParameter)
    }

    /// 参数取值错误。
    public static var invalidParameterValue: TCCccError {
        TCCccError(.invalidParameterValue)
    }

    /// 账号不存在。
    public static var invalidParameterValue_AccountNotExist: TCCccError {
        TCCccError(.invalidParameterValue_AccountNotExist)
    }

    /// 实例不存在。
    public static var invalidParameterValue_InstanceNotExist: TCCccError {
        TCCccError(.invalidParameterValue_InstanceNotExist)
    }

    /// 号码已经绑定别的账号。
    ///
    /// 请确认手机号是否有误
    public static var invalidParameterValue_PhoneNumIsBoundOtherAccount: TCCccError {
        TCCccError(.invalidParameterValue_PhoneNumIsBoundOtherAccount)
    }

    /// 查询记录不存在。
    ///
    /// 确认查询条件是否正确
    public static var invalidParameterValue_RecordNotExist: TCCccError {
        TCCccError(.invalidParameterValue_RecordNotExist)
    }

    /// 技能组错误。
    public static var invalidParameterValue_SkillGroupError: TCCccError {
        TCCccError(.invalidParameterValue_SkillGroupError)
    }

    /// 技能组已存在。
    public static var invalidParameterValue_SkillGroupExist: TCCccError {
        TCCccError(.invalidParameterValue_SkillGroupExist)
    }

    /// 重复的地址
    ///
    /// 检查输入参数
    public static var invalidParameter_DuplicateAddress: TCCccError {
        TCCccError(.invalidParameter_DuplicateAddress)
    }

    /// 重复的号码
    ///
    /// 检查输入参数
    public static var invalidParameter_DuplicatePhoneNumber: TCCccError {
        TCCccError(.invalidParameter_DuplicatePhoneNumber)
    }

    /// 重复的SIP账号
    ///
    /// 检查输入参数
    public static var invalidParameter_DuplicateSipAccount: TCCccError {
        TCCccError(.invalidParameter_DuplicateSipAccount)
    }

    /// 非法的地址
    ///
    /// 检查输入参数
    public static var invalidParameter_IllegalAddress: TCCccError {
        TCCccError(.invalidParameter_IllegalAddress)
    }

    /// 非法的号码
    ///
    /// 检查输入参数
    public static var invalidParameter_IllegalPhoneNumber: TCCccError {
        TCCccError(.invalidParameter_IllegalPhoneNumber)
    }

    /// 实例不存在。
    public static var invalidParameter_InstanceNotExist: TCCccError {
        TCCccError(.invalidParameter_InstanceNotExist)
    }

    /// 无效的地址
    ///
    /// 检查输入参数
    public static var invalidParameter_InvalidAddress: TCCccError {
        TCCccError(.invalidParameter_InvalidAddress)
    }

    /// 无效的IP信息
    ///
    /// 检查输入参数
    public static var invalidParameter_InvalidIP: TCCccError {
        TCCccError(.invalidParameter_InvalidIP)
    }

    /// 无效的号码
    ///
    /// 检查输入参数
    public static var invalidParameter_InvalidPhoneNumber: TCCccError {
        TCCccError(.invalidParameter_InvalidPhoneNumber)
    }

    /// 无效的端口信息
    ///
    /// 检查输入参数
    public static var invalidParameter_InvalidPort: TCCccError {
        TCCccError(.invalidParameter_InvalidPort)
    }

    /// 密码不合法(长度大于等于八位，必须包含大小写字母以及数字)
    ///
    /// 检查输入参数
    public static var invalidParameter_SipAccountPasswordFormat: TCCccError {
        TCCccError(.invalidParameter_SipAccountPasswordFormat)
    }

    /// 用户名不合法(只能包含A-Z、a-z、以及数字)
    ///
    /// 检查输入参数
    public static var invalidParameter_SipAccountUserFormat: TCCccError {
        TCCccError(.invalidParameter_SipAccountUserFormat)
    }

    /// SIP通道仍在使用中
    ///
    /// 检查输入参数
    public static var invalidParameter_SipTrunkInUsed: TCCccError {
        TCCccError(.invalidParameter_SipTrunkInUsed)
    }

    /// 未找到SIP通道信息
    ///
    /// 检查输入参数
    public static var invalidParameter_SipTrunkNotFound: TCCccError {
        TCCccError(.invalidParameter_SipTrunkNotFound)
    }

    /// 超过配额限制。
    public static var limitExceeded: TCCccError {
        TCCccError(.limitExceeded)
    }

    /// 超出数量限制。
    public static var limitExceeded_OutOfCountLimit: TCCccError {
        TCCccError(.limitExceeded_OutOfCountLimit)
    }

    /// 不在白名单中。
    ///
    /// 请申请号码白名单并通过之后再试。
    public static var operationDenied_NotInWhiteList: TCCccError {
        TCCccError(.operationDenied_NotInWhiteList)
    }

    /// 未知参数错误。
    public static var unknownParameter: TCCccError {
        TCCccError(.unknownParameter)
    }

    /// 操作不支持。
    public static var unsupportedOperation: TCCccError {
        TCCccError(.unsupportedOperation)
    }

    public func asCccError() -> TCCccError {
        return self
    }
}
