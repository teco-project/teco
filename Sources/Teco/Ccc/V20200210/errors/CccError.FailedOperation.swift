//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCccError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case callOutFailed = "FailedOperation.CallOutFailed"
            case calleeIsLimited = "FailedOperation.CalleeIsLimited"
            case callerOverFrequency = "FailedOperation.CallerOverFrequency"
            case curStateNotAllowModify = "FailedOperation.CurStateNotAllowModify"
            case duplicatedAccount = "FailedOperation.DuplicatedAccount"
            case noCallOutNumber = "FailedOperation.NoCallOutNumber"
            case permissionDenied = "FailedOperation.PermissionDenied"
            case seatStatusBusy = "FailedOperation.SeatStatusBusy"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 外呼失败。
        ///
        /// 外呼失败，请检查主叫或被叫号码是否正常。
        public static var callOutFailed: FailedOperation {
            FailedOperation(.callOutFailed)
        }
        
        public static var calleeIsLimited: FailedOperation {
            FailedOperation(.calleeIsLimited)
        }
        
        public static var callerOverFrequency: FailedOperation {
            FailedOperation(.callerOverFrequency)
        }
        
        public static var curStateNotAllowModify: FailedOperation {
            FailedOperation(.curStateNotAllowModify)
        }
        
        /// 重复账号。
        public static var duplicatedAccount: FailedOperation {
            FailedOperation(.duplicatedAccount)
        }
        
        public static var noCallOutNumber: FailedOperation {
            FailedOperation(.noCallOutNumber)
        }
        
        /// 权限不足。
        ///
        /// 检查账号权限
        public static var permissionDenied: FailedOperation {
            FailedOperation(.permissionDenied)
        }
        
        public static var seatStatusBusy: FailedOperation {
            FailedOperation(.seatStatusBusy)
        }
    }
}

extension TCCccError.FailedOperation: Equatable {
    public static func == (lhs: TCCccError.FailedOperation, rhs: TCCccError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCccError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCccError.FailedOperation {
    /// - Returns: ``TCCccError`` that holds the same error and context.
    public func toCccError() -> TCCccError {
        guard let code = TCCccError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCccError(code, context: self.context)
    }
}

extension TCCccError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
