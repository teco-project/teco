//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCIeError {
    public struct FailedOperation: TCIeErrorType {
        enum Code: String {
            case cosStorageError = "FailedOperation.CosStorageError"
            case editError = "FailedOperation.EditError"
            case encodeFormatError = "FailedOperation.EncodeFormatError"
            case runningTaskExceed = "FailedOperation.RunningTaskExceed"
            case segmentError = "FailedOperation.SegmentError"
            case serverBusy = "FailedOperation.ServerBusy"
            case serverError = "FailedOperation.ServerError"
            case taskResubmit = "FailedOperation.TaskResubmit"
            case transcodeError = "FailedOperation.TranscodeError"
            case unknowError = "FailedOperation.UnknowError"
            case videoDownloadError = "FailedOperation.VideoDownloadError"
            case videoParseError = "FailedOperation.VideoParseError"
            case videoSizeExceed = "FailedOperation.VideoSizeExceed"
            case other = "FailedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// Cos存储结果错误。
        public static var cosStorageError: FailedOperation {
            FailedOperation(.cosStorageError)
        }

        /// 转码时截取失败。
        public static var editError: FailedOperation {
            FailedOperation(.editError)
        }

        /// 编码格式或参数不支持。
        public static var encodeFormatError: FailedOperation {
            FailedOperation(.encodeFormatError)
        }

        /// 运行中的任务达到上限，如需要增加任务上限，请提交工单。
        public static var runningTaskExceed: FailedOperation {
            FailedOperation(.runningTaskExceed)
        }

        /// 转码后切片失败。
        public static var segmentError: FailedOperation {
            FailedOperation(.segmentError)
        }

        /// 系统繁忙，请稍后重试。
        public static var serverBusy: FailedOperation {
            FailedOperation(.serverBusy)
        }

        /// 内部服务错误。
        public static var serverError: FailedOperation {
            FailedOperation(.serverError)
        }

        /// 任务重复提交。
        public static var taskResubmit: FailedOperation {
            FailedOperation(.taskResubmit)
        }

        /// 转码服务异常。
        public static var transcodeError: FailedOperation {
            FailedOperation(.transcodeError)
        }

        /// 转码服务未知错误。
        public static var unknowError: FailedOperation {
            FailedOperation(.unknowError)
        }

        /// 视频源下载失败或超时。
        public static var videoDownloadError: FailedOperation {
            FailedOperation(.videoDownloadError)
        }

        /// 视频源解析出错。
        public static var videoParseError: FailedOperation {
            FailedOperation(.videoParseError)
        }

        /// 视频大小超过限制。
        public static var videoSizeExceed: FailedOperation {
            FailedOperation(.videoSizeExceed)
        }

        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }

        public func asIeError() -> TCIeError {
            let code: TCIeError.Code
            switch self.error {
            case .cosStorageError:
                code = .failedOperation_CosStorageError
            case .editError:
                code = .failedOperation_EditError
            case .encodeFormatError:
                code = .failedOperation_EncodeFormatError
            case .runningTaskExceed:
                code = .failedOperation_RunningTaskExceed
            case .segmentError:
                code = .failedOperation_SegmentError
            case .serverBusy:
                code = .failedOperation_ServerBusy
            case .serverError:
                code = .failedOperation_ServerError
            case .taskResubmit:
                code = .failedOperation_TaskResubmit
            case .transcodeError:
                code = .failedOperation_TranscodeError
            case .unknowError:
                code = .failedOperation_UnknowError
            case .videoDownloadError:
                code = .failedOperation_VideoDownloadError
            case .videoParseError:
                code = .failedOperation_VideoParseError
            case .videoSizeExceed:
                code = .failedOperation_VideoSizeExceed
            case .other:
                code = .failedOperation
            }
            return TCIeError(code, context: self.context)
        }
    }
}
