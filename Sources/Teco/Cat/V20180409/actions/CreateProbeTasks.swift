//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cat {
    /// 批量创建拨测任务
    @inlinable
    public func createProbeTasks(_ input: CreateProbeTasksRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateProbeTasksResponse > {
        self.client.execute(action: "CreateProbeTasks", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 批量创建拨测任务
    @inlinable
    public func createProbeTasks(_ input: CreateProbeTasksRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateProbeTasksResponse {
        try await self.client.execute(action: "CreateProbeTasks", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateProbeTasks请求参数结构体
    public struct CreateProbeTasksRequest: TCRequestModel {
        /// 批量任务名-地址
        public let batchTasks: [ProbeTaskBasicConfiguration]
        
        /// 任务类型
        public let taskType: Int64
        
        /// 拨测节点
        public let nodes: [String]
        
        /// 拨测间隔
        public let interval: Int64
        
        /// 拨测参数
        public let parameters: String
        
        /// 任务分类
        /// <li>1 = PC</li>
        /// <li> 2 = Mobile </li>
        public let taskCategory: Int64
        
        /// 定时任务cron表达式
        public let cron: String?
        
        /// 资源标签值
        public let tag: [Tag]?
        
        /// 测试类型，包含定时测试与即时测试
        public let probeType: UInt64?
        
        /// 插件类型
        public let pluginSource: String?
        
        /// 客户端ID
        public let clientNum: String?
        
        public init (batchTasks: [ProbeTaskBasicConfiguration], taskType: Int64, nodes: [String], interval: Int64, parameters: String, taskCategory: Int64, cron: String?, tag: [Tag]?, probeType: UInt64?, pluginSource: String?, clientNum: String?) {
            self.batchTasks = batchTasks
            self.taskType = taskType
            self.nodes = nodes
            self.interval = interval
            self.parameters = parameters
            self.taskCategory = taskCategory
            self.cron = cron
            self.tag = tag
            self.probeType = probeType
            self.pluginSource = pluginSource
            self.clientNum = clientNum
        }
        
        enum CodingKeys: String, CodingKey {
            case batchTasks = "BatchTasks"
            case taskType = "TaskType"
            case nodes = "Nodes"
            case interval = "Interval"
            case parameters = "Parameters"
            case taskCategory = "TaskCategory"
            case cron = "Cron"
            case tag = "Tag"
            case probeType = "ProbeType"
            case pluginSource = "PluginSource"
            case clientNum = "ClientNum"
        }
    }
    
    /// CreateProbeTasks返回参数结构体
    public struct CreateProbeTasksResponse: TCResponseModel {
        /// 任务ID列表
        public let taskIDs: [String]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case taskIDs = "TaskIDs"
            case requestId = "RequestId"
        }
    }
}
