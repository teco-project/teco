//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cat {
    /// SuspendProbeTask请求参数结构体
    public struct SuspendProbeTaskRequest: TCRequestModel {
        /// 任务 ID
        public let taskIds: [String]

        public init(taskIds: [String]) {
            self.taskIds = taskIds
        }

        enum CodingKeys: String, CodingKey {
            case taskIds = "TaskIds"
        }
    }

    /// SuspendProbeTask返回参数结构体
    public struct SuspendProbeTaskResponse: TCResponseModel {
        /// 任务总量
        public let total: Int64

        /// 任务成功量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let successCount: Int64?

        /// 任务执行结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let results: [TaskResult]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case successCount = "SuccessCount"
            case results = "Results"
            case requestId = "RequestId"
        }
    }

    /// 暂停拨测任务
    @inlinable
    public func suspendProbeTask(_ input: SuspendProbeTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SuspendProbeTaskResponse> {
        self.client.execute(action: "SuspendProbeTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 暂停拨测任务
    @inlinable
    public func suspendProbeTask(_ input: SuspendProbeTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SuspendProbeTaskResponse {
        try await self.client.execute(action: "SuspendProbeTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 暂停拨测任务
    @inlinable
    public func suspendProbeTask(taskIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SuspendProbeTaskResponse> {
        self.suspendProbeTask(SuspendProbeTaskRequest(taskIds: taskIds), region: region, logger: logger, on: eventLoop)
    }

    /// 暂停拨测任务
    @inlinable
    public func suspendProbeTask(taskIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SuspendProbeTaskResponse {
        try await self.suspendProbeTask(SuspendProbeTaskRequest(taskIds: taskIds), region: region, logger: logger, on: eventLoop)
    }
}
