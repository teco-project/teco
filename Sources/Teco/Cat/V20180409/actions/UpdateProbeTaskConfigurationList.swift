//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cat {
    /// UpdateProbeTaskConfigurationList请求参数结构体
    public struct UpdateProbeTaskConfigurationListRequest: TCRequestModel {
        /// 任务 ID
        public let taskIds: [String]

        /// 拨测节点
        public let nodes: [String]

        /// 拨测间隔
        public let interval: Int64

        /// 拨测参数
        public let parameters: String

        /// 定时任务cron表达式
        public let cron: String?

        /// 预付费套餐id
        /// 需要与taskId对应
        public let resourceIDs: [String]?

        public init(taskIds: [String], nodes: [String], interval: Int64, parameters: String, cron: String? = nil, resourceIDs: [String]? = nil) {
            self.taskIds = taskIds
            self.nodes = nodes
            self.interval = interval
            self.parameters = parameters
            self.cron = cron
            self.resourceIDs = resourceIDs
        }

        enum CodingKeys: String, CodingKey {
            case taskIds = "TaskIds"
            case nodes = "Nodes"
            case interval = "Interval"
            case parameters = "Parameters"
            case cron = "Cron"
            case resourceIDs = "ResourceIDs"
        }
    }

    /// UpdateProbeTaskConfigurationList返回参数结构体
    public struct UpdateProbeTaskConfigurationListResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 批量更新拨测任务配置
    @inlinable @discardableResult
    public func updateProbeTaskConfigurationList(_ input: UpdateProbeTaskConfigurationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateProbeTaskConfigurationListResponse> {
        self.client.execute(action: "UpdateProbeTaskConfigurationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量更新拨测任务配置
    @inlinable @discardableResult
    public func updateProbeTaskConfigurationList(_ input: UpdateProbeTaskConfigurationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateProbeTaskConfigurationListResponse {
        try await self.client.execute(action: "UpdateProbeTaskConfigurationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量更新拨测任务配置
    @inlinable @discardableResult
    public func updateProbeTaskConfigurationList(taskIds: [String], nodes: [String], interval: Int64, parameters: String, cron: String? = nil, resourceIDs: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateProbeTaskConfigurationListResponse> {
        let input = UpdateProbeTaskConfigurationListRequest(taskIds: taskIds, nodes: nodes, interval: interval, parameters: parameters, cron: cron, resourceIDs: resourceIDs)
        return self.client.execute(action: "UpdateProbeTaskConfigurationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量更新拨测任务配置
    @inlinable @discardableResult
    public func updateProbeTaskConfigurationList(taskIds: [String], nodes: [String], interval: Int64, parameters: String, cron: String? = nil, resourceIDs: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateProbeTaskConfigurationListResponse {
        let input = UpdateProbeTaskConfigurationListRequest(taskIds: taskIds, nodes: nodes, interval: interval, parameters: parameters, cron: cron, resourceIDs: resourceIDs)
        return try await self.client.execute(action: "UpdateProbeTaskConfigurationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
