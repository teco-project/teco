//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tdid {
    /// 凭证链上状态信息
    public struct CredentialStatus: TCInputModel, TCOutputModel {
        /// 凭证唯一id
        public let credentialId: String

        /// 凭证状态（0：吊销；1：有效）
        public let status: UInt64

        /// 凭证颁发者Did
        public let issuer: String

        /// 凭证摘要
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let digest: String?

        /// 凭证签名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signature: String?

        /// 更新时间戳
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeStamp: UInt64?

        public init(credentialId: String, status: UInt64, issuer: String, digest: String, signature: String, timeStamp: UInt64) {
            self.credentialId = credentialId
            self.status = status
            self.issuer = issuer
            self.digest = digest
            self.signature = signature
            self.timeStamp = timeStamp
        }

        enum CodingKeys: String, CodingKey {
            case credentialId = "CredentialId"
            case status = "Status"
            case issuer = "Issuer"
            case digest = "Digest"
            case signature = "Signature"
            case timeStamp = "TimeStamp"
        }
    }

    /// 创建凭证入参的FunctionArg
    public struct FunctionArg: TCInputModel {
        /// CPT ID
        public let cptId: UInt64

        /// 签发者 did
        public let issuer: String

        /// 过期时间
        public let expirationDate: String

        /// 声明
        public let claimJson: String

        public init(cptId: UInt64, issuer: String, expirationDate: String, claimJson: String) {
            self.cptId = cptId
            self.issuer = issuer
            self.expirationDate = expirationDate
            self.claimJson = claimJson
        }

        enum CodingKeys: String, CodingKey {
            case cptId = "CptId"
            case issuer = "Issuer"
            case expirationDate = "ExpirationDate"
            case claimJson = "ClaimJson"
        }
    }

    /// 验证凭证签名
    public struct Proof: TCInputModel {
        /// 创建时间
        public let created: Int64

        /// 创建着did
        public let creator: String

        /// salt值
        public let saltJson: String

        /// 签名
        public let signatureValue: String

        /// type类型
        public let type: String

        public init(created: Int64, creator: String, saltJson: String, signatureValue: String, type: String) {
            self.created = created
            self.creator = creator
            self.saltJson = saltJson
            self.signatureValue = signatureValue
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case created = "Created"
            case creator = "Creator"
            case saltJson = "SaltJson"
            case signatureValue = "SignatureValue"
            case type = "Type"
        }
    }

    /// 创建凭证第二个
    public struct TransactionArg: TCInputModel {
        /// 凭证did
        public let invokerTDid: String

        public init(invokerTDid: String) {
            self.invokerTDid = invokerTDid
        }

        enum CodingKeys: String, CodingKey {
            case invokerTDid = "InvokerTDid"
        }
    }

    /// 验证凭证参数值
    public struct VerifyFunctionArg: TCInputModel {
        /// CPT ID
        public let cptId: UInt64

        /// issuer did
        public let issuer: String

        /// 过期时间
        public let expirationDate: Int64

        /// 声明
        public let claimJson: String

        /// 颁发时间
        public let issuanceDate: Int64

        /// context值
        public let context: String

        /// id值
        public let id: String

        /// 签名值
        public let proof: Proof

        /// type值
        public let type: [String]

        public init(cptId: UInt64, issuer: String, expirationDate: Int64, claimJson: String, issuanceDate: Int64, context: String, id: String, proof: Proof, type: [String]) {
            self.cptId = cptId
            self.issuer = issuer
            self.expirationDate = expirationDate
            self.claimJson = claimJson
            self.issuanceDate = issuanceDate
            self.context = context
            self.id = id
            self.proof = proof
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case cptId = "CptId"
            case issuer = "Issuer"
            case expirationDate = "ExpirationDate"
            case claimJson = "ClaimJson"
            case issuanceDate = "IssuanceDate"
            case context = "Context"
            case id = "Id"
            case proof = "Proof"
            case type = "Type"
        }
    }
}
