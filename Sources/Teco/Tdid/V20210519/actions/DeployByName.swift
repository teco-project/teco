//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdid {
    /// 通过Name部署TDID合约
    @inlinable
    public func deployByName(_ input: DeployByNameRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeployByNameResponse > {
        self.client.execute(action: "DeployByName", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 通过Name部署TDID合约
    @inlinable
    public func deployByName(_ input: DeployByNameRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeployByNameResponse {
        try await self.client.execute(action: "DeployByName", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DeployByName请求参数结构体
    public struct DeployByNameRequest: TCRequestModel {
        /// 应用名称
        public let applicationName: String
        
        /// 网络ID
        public let clusterId: String
        
        /// 群组ID
        public let groupId: UInt64
        
        public init (applicationName: String, clusterId: String, groupId: UInt64) {
            self.applicationName = applicationName
            self.clusterId = clusterId
            self.groupId = groupId
        }
        
        enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case clusterId = "ClusterId"
            case groupId = "GroupId"
        }
    }
    
    /// DeployByName返回参数结构体
    public struct DeployByNameResponse: TCResponseModel {
        /// 哈希值
        public let hash: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case hash = "Hash"
            case requestId = "RequestId"
        }
    }
}
