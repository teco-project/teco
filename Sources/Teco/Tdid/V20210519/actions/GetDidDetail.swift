//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdid {
    /// GetDidDetail请求参数结构体
    public struct GetDidDetailRequest: TCRequestModel {
        /// DID号码的具体信息
        public let did: String

        public init(did: String) {
            self.did = did
        }

        enum CodingKeys: String, CodingKey {
            case did = "Did"
        }
    }

    /// GetDidDetail返回参数结构体
    public struct GetDidDetailResponse: TCResponseModel {
        /// DID名称
        public let did: String

        /// 备注
        public let remark: String

        /// 公钥
        public let publicKey: String

        /// 权威认证
        public let authorityState: Int64

        /// 联盟ID
        public let consortiumId: Int64

        /// 联盟名称
        public let consortiumName: String

        /// 群组ID
        public let groupId: Int64

        /// 网络ID
        public let clusterId: String

        /// bcos资源ID
        public let resChainId: String

        /// 创建时间
        public let createTime: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case did = "Did"
            case remark = "Remark"
            case publicKey = "PublicKey"
            case authorityState = "AuthorityState"
            case consortiumId = "ConsortiumId"
            case consortiumName = "ConsortiumName"
            case groupId = "GroupId"
            case clusterId = "ClusterId"
            case resChainId = "ResChainId"
            case createTime = "CreateTime"
            case requestId = "RequestId"
        }
    }

    /// DID详情
    @inlinable
    public func getDidDetail(_ input: GetDidDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDidDetailResponse> {
        self.client.execute(action: "GetDidDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// DID详情
    @inlinable
    public func getDidDetail(_ input: GetDidDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDidDetailResponse {
        try await self.client.execute(action: "GetDidDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// DID详情
    @inlinable
    public func getDidDetail(did: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDidDetailResponse> {
        self.getDidDetail(GetDidDetailRequest(did: did), region: region, logger: logger, on: eventLoop)
    }

    /// DID详情
    @inlinable
    public func getDidDetail(did: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDidDetailResponse {
        try await self.getDidDetail(GetDidDetailRequest(did: did), region: region, logger: logger, on: eventLoop)
    }
}
