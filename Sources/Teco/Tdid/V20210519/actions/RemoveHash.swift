//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdid {
    /// RemoveHash请求参数结构体
    public struct RemoveHashRequest: TCRequestModel {
        /// 合约CNS地址
        public let hash: String

        public init(hash: String) {
            self.hash = hash
        }

        enum CodingKeys: String, CodingKey {
            case hash = "Hash"
        }
    }

    /// RemoveHash返回参数结构体
    public struct RemoveHashResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除合约
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable @discardableResult
    public func removeHash(_ input: RemoveHashRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveHashResponse> {
        fatalError("RemoveHash is no longer available.")
    }

    /// 删除合约
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable @discardableResult
    public func removeHash(_ input: RemoveHashRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveHashResponse {
        fatalError("RemoveHash is no longer available.")
    }

    /// 删除合约
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable @discardableResult
    public func removeHash(hash: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveHashResponse> {
        fatalError("RemoveHash is no longer available.")
    }

    /// 删除合约
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable @discardableResult
    public func removeHash(hash: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveHashResponse {
        fatalError("RemoveHash is no longer available.")
    }
}
