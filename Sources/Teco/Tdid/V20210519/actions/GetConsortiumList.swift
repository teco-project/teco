//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdid {
    /// GetConsortiumList请求参数结构体
    public struct GetConsortiumListRequest: TCRequestModel {
        public init() {
        }
    }

    /// GetConsortiumList返回参数结构体
    public struct GetConsortiumListResponse: TCResponseModel {
        /// 联盟列表
        public let consortiumList: [ConsortiumItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case consortiumList = "ConsortiumList"
            case requestId = "RequestId"
        }
    }

    /// 获取联盟列表
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getConsortiumList(_ input: GetConsortiumListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetConsortiumListResponse> {
        fatalError("GetConsortiumList is no longer available.")
    }

    /// 获取联盟列表
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getConsortiumList(_ input: GetConsortiumListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetConsortiumListResponse {
        fatalError("GetConsortiumList is no longer available.")
    }

    /// 获取联盟列表
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getConsortiumList(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetConsortiumListResponse> {
        fatalError("GetConsortiumList is no longer available.")
    }

    /// 获取联盟列表
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getConsortiumList(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetConsortiumListResponse {
        fatalError("GetConsortiumList is no longer available.")
    }
}
