//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Tdid {
    /// GetLabelList请求参数结构体
    public struct GetLabelListRequest: TCPaginatedRequest {
        /// 每页大小
        public let pageSize: Int64

        /// 页码，从1开始
        public let pageNumber: Int64

        /// 网络ID
        public let clusterId: String?

        /// 群组ID
        public let groupId: Int64?

        public init(pageSize: Int64, pageNumber: Int64, clusterId: String? = nil, groupId: Int64? = nil) {
            self.pageSize = pageSize
            self.pageNumber = pageNumber
            self.clusterId = clusterId
            self.groupId = groupId
        }

        enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
            case clusterId = "ClusterId"
            case groupId = "GroupId"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: GetLabelListResponse) -> GetLabelListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return GetLabelListRequest(pageSize: self.pageSize, pageNumber: self.pageNumber + 1, clusterId: self.clusterId, groupId: self.groupId)
        }
    }

    /// GetLabelList返回参数结构体
    public struct GetLabelListResponse: TCPaginatedResponse {
        /// 数据集合
        public let result: [Label]

        /// 总条数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Label] {
            self.result
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 标签列表
    @inlinable
    public func getLabelList(_ input: GetLabelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetLabelListResponse> {
        self.client.execute(action: "GetLabelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 标签列表
    @inlinable
    public func getLabelList(_ input: GetLabelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetLabelListResponse {
        try await self.client.execute(action: "GetLabelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 标签列表
    @inlinable
    public func getLabelList(pageSize: Int64, pageNumber: Int64, clusterId: String? = nil, groupId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetLabelListResponse> {
        let input = GetLabelListRequest(pageSize: pageSize, pageNumber: pageNumber, clusterId: clusterId, groupId: groupId)
        return self.client.execute(action: "GetLabelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 标签列表
    @inlinable
    public func getLabelList(pageSize: Int64, pageNumber: Int64, clusterId: String? = nil, groupId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetLabelListResponse {
        let input = GetLabelListRequest(pageSize: pageSize, pageNumber: pageNumber, clusterId: clusterId, groupId: groupId)
        return try await self.client.execute(action: "GetLabelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 标签列表
    @inlinable
    public func getLabelListPaginated(_ input: GetLabelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [Label])> {
        self.client.paginate(input: input, region: region, command: self.getLabelList, logger: logger, on: eventLoop)
    }

    /// 标签列表
    @inlinable @discardableResult
    public func getLabelListPaginated(_ input: GetLabelListRequest, region: TCRegion? = nil, onResponse: @escaping (GetLabelListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getLabelList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 标签列表
    @inlinable
    public func getLabelListPaginator(_ input: GetLabelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<GetLabelListRequest, GetLabelListResponse>.ResultSequence, responses: TCClient.Paginator<GetLabelListRequest, GetLabelListResponse>.ResponseSequence) {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.getLabelList, logger: logger, on: eventLoop)
    }
}
