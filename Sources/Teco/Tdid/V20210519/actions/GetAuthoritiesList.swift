//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Tdid {
    /// GetAuthoritiesList请求参数结构体
    public struct GetAuthoritiesListRequest: TCPaginatedRequest {
        /// 页码，从1开始
        public let pageNumber: Int64

        /// 每页大小
        public let pageSize: Int64

        /// Did信息
        public let did: String?

        /// 权威认证 1:已认证，2:未认证
        public let status: Int64?

        public init(pageNumber: Int64, pageSize: Int64, did: String? = nil, status: Int64? = nil) {
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.did = did
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case did = "Did"
            case status = "Status"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: GetAuthoritiesListResponse) -> GetAuthoritiesListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return GetAuthoritiesListRequest(pageNumber: self.pageNumber + 1, pageSize: self.pageSize, did: self.did, status: self.status)
        }
    }

    /// GetAuthoritiesList返回参数结构体
    public struct GetAuthoritiesListResponse: TCPaginatedResponse {
        /// 数据集合
        public let resultList: [Authority]

        /// 总数
        public let allCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case resultList = "ResultList"
            case allCount = "AllCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Authority] {
            self.resultList
        }
    }

    /// 权威机构列表
    @inlinable
    public func getAuthoritiesList(_ input: GetAuthoritiesListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAuthoritiesListResponse> {
        self.client.execute(action: "GetAuthoritiesList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 权威机构列表
    @inlinable
    public func getAuthoritiesList(_ input: GetAuthoritiesListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAuthoritiesListResponse {
        try await self.client.execute(action: "GetAuthoritiesList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 权威机构列表
    @inlinable
    public func getAuthoritiesList(pageNumber: Int64, pageSize: Int64, did: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAuthoritiesListResponse> {
        let input = GetAuthoritiesListRequest(pageNumber: pageNumber, pageSize: pageSize, did: did, status: status)
        return self.client.execute(action: "GetAuthoritiesList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 权威机构列表
    @inlinable
    public func getAuthoritiesList(pageNumber: Int64, pageSize: Int64, did: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAuthoritiesListResponse {
        let input = GetAuthoritiesListRequest(pageNumber: pageNumber, pageSize: pageSize, did: did, status: status)
        return try await self.client.execute(action: "GetAuthoritiesList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 权威机构列表
    @inlinable
    public func getAuthoritiesListPaginated(_ input: GetAuthoritiesListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [Authority])> {
        self.client.paginate(input: input, region: region, command: self.getAuthoritiesList, logger: logger, on: eventLoop)
    }

    /// 权威机构列表
    @inlinable @discardableResult
    public func getAuthoritiesListPaginated(_ input: GetAuthoritiesListRequest, region: TCRegion? = nil, onResponse: @escaping (GetAuthoritiesListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getAuthoritiesList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 权威机构列表
    @inlinable
    public func getAuthoritiesListPaginator(_ input: GetAuthoritiesListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<GetAuthoritiesListRequest, GetAuthoritiesListResponse>.ResultSequence, responses: TCClient.Paginator<GetAuthoritiesListRequest, GetAuthoritiesListResponse>.ResponseSequence) {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.getAuthoritiesList, logger: logger, on: eventLoop)
    }
}
