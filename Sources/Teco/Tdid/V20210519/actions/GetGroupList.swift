//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdid {
    /// GetGroupList请求参数结构体
    public struct GetGroupListRequest: TCRequestModel {
        /// 0为未部署DID服务的群组，1为已部署DID服务的群组
        public let status: Int64

        /// 网络ID
        public let clusterId: String

        public init(status: Int64, clusterId: String) {
            self.status = status
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case clusterId = "ClusterId"
        }
    }

    /// GetGroupList返回参数结构体
    public struct GetGroupListResponse: TCResponseModel {
        /// 群组数据集合
        public let result: [Group]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 主群组配置列表
    @inlinable
    public func getGroupList(_ input: GetGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetGroupListResponse> {
        self.client.execute(action: "GetGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 主群组配置列表
    @inlinable
    public func getGroupList(_ input: GetGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetGroupListResponse {
        try await self.client.execute(action: "GetGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 主群组配置列表
    @inlinable
    public func getGroupList(status: Int64, clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetGroupListResponse> {
        let input = GetGroupListRequest(status: status, clusterId: clusterId)
        return self.client.execute(action: "GetGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 主群组配置列表
    @inlinable
    public func getGroupList(status: Int64, clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetGroupListResponse {
        let input = GetGroupListRequest(status: status, clusterId: clusterId)
        return try await self.client.execute(action: "GetGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
