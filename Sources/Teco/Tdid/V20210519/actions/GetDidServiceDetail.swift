//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdid {
    /// GetDidServiceDetail请求参数结构体
    public struct GetDidServiceDetailRequest: TCRequestModel {
        /// DID服务ID
        public let serviceId: UInt64
        
        public init (serviceId: UInt64) {
            self.serviceId = serviceId
        }
        
        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
        }
    }
    
    /// GetDidServiceDetail返回参数结构体
    public struct GetDidServiceDetailResponse: TCResponseModel {
        /// did服务信息
        public let didService: DidServiceInfo
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case didService = "DidService"
            case requestId = "RequestId"
        }
    }
    
    /// 获取DID服务详情
    @inlinable
    public func getDidServiceDetail(_ input: GetDidServiceDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetDidServiceDetailResponse > {
        self.client.execute(action: "GetDidServiceDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取DID服务详情
    @inlinable
    public func getDidServiceDetail(_ input: GetDidServiceDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDidServiceDetailResponse {
        try await self.client.execute(action: "GetDidServiceDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取DID服务详情
    @inlinable
    public func getDidServiceDetail(serviceId: UInt64, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetDidServiceDetailResponse > {
        self.getDidServiceDetail(GetDidServiceDetailRequest(serviceId: serviceId), logger: logger, on: eventLoop)
    }
    
    /// 获取DID服务详情
    @inlinable
    public func getDidServiceDetail(serviceId: UInt64, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDidServiceDetailResponse {
        try await self.getDidServiceDetail(GetDidServiceDetailRequest(serviceId: serviceId), logger: logger, on: eventLoop)
    }
}
