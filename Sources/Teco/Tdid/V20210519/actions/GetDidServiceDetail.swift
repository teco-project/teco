//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tdid {
    /// GetDidServiceDetail请求参数结构体
    public struct GetDidServiceDetailRequest: TCRequestModel {
        /// DID服务ID
        public let serviceId: UInt64

        public init(serviceId: UInt64) {
            self.serviceId = serviceId
        }

        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
        }
    }

    /// GetDidServiceDetail返回参数结构体
    public struct GetDidServiceDetailResponse: TCResponseModel {
        /// did服务信息
        public let didService: DidServiceInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case didService = "DidService"
            case requestId = "RequestId"
        }
    }

    /// 获取DID服务详情
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getDidServiceDetail(_ input: GetDidServiceDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDidServiceDetailResponse> {
        fatalError("GetDidServiceDetail is no longer available.")
    }

    /// 获取DID服务详情
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getDidServiceDetail(_ input: GetDidServiceDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDidServiceDetailResponse {
        fatalError("GetDidServiceDetail is no longer available.")
    }

    /// 获取DID服务详情
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getDidServiceDetail(serviceId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDidServiceDetailResponse> {
        fatalError("GetDidServiceDetail is no longer available.")
    }

    /// 获取DID服务详情
    @available(*, unavailable, message: "下线已有内测接口，待上线正式版本的接口")
    @inlinable
    public func getDidServiceDetail(serviceId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDidServiceDetailResponse {
        fatalError("GetDidServiceDetail is no longer available.")
    }
}
