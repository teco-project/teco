//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCCdbError {
    public struct InvalidParameterValue: TCCdbErrorType {
        enum Code: String {
            case accountDescriptionCharacterError = "InvalidParameterValue.AccountDescriptionCharacterError"
            case accountDescriptionLengthError = "InvalidParameterValue.AccountDescriptionLengthError"
            case accountHostRuleError = "InvalidParameterValue.AccountHostRuleError"
            case accountPasswordCharacterError = "InvalidParameterValue.AccountPasswordCharacterError"
            case accountPasswordLengthError = "InvalidParameterValue.AccountPasswordLengthError"
            case accountPasswordRuleError = "InvalidParameterValue.AccountPasswordRuleError"
            case dataConvertError = "InvalidParameterValue.DataConvertError"
            case invalidParameterValueError = "InvalidParameterValue.InvalidParameterValueError"
            case userNameRuleError = "InvalidParameterValue.UserNameRuleError"
            case userNotExistError = "InvalidParameterValue.UserNotExistError"
            case verifyAccountNoRootError = "InvalidParameterValue.VerifyAccountNoRootError"
            case verifyAccountPasswordError = "InvalidParameterValue.VerifyAccountPasswordError"
            case verifyAccountPrivError = "InvalidParameterValue.VerifyAccountPrivError"
            case other = "InvalidParameterValue"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 账号描述信息包含特殊字符。
        public static var accountDescriptionCharacterError: InvalidParameterValue {
            InvalidParameterValue(.accountDescriptionCharacterError)
        }

        /// 账号描述信息长度超过255个字符。
        public static var accountDescriptionLengthError: InvalidParameterValue {
            InvalidParameterValue(.accountDescriptionLengthError)
        }

        /// 账号主机参数规则错误。
        public static var accountHostRuleError: InvalidParameterValue {
            InvalidParameterValue(.accountHostRuleError)
        }

        /// 账号密码中包含无效的字符。
        public static var accountPasswordCharacterError: InvalidParameterValue {
            InvalidParameterValue(.accountPasswordCharacterError)
        }

        /// 账号密码不符合长度。
        public static var accountPasswordLengthError: InvalidParameterValue {
            InvalidParameterValue(.accountPasswordLengthError)
        }

        /// 密码规则错误，至少包含字母、数字和字符（_+-&amp;=!@#$%^*()）中的两种，长度为8-64个字符。
        public static var accountPasswordRuleError: InvalidParameterValue {
            InvalidParameterValue(.accountPasswordRuleError)
        }

        /// 数据转换失败。
        public static var dataConvertError: InvalidParameterValue {
            InvalidParameterValue(.dataConvertError)
        }

        /// 参数值无效。
        public static var invalidParameterValueError: InvalidParameterValue {
            InvalidParameterValue(.invalidParameterValueError)
        }

        /// 账号用户名规则错误。
        public static var userNameRuleError: InvalidParameterValue {
            InvalidParameterValue(.userNameRuleError)
        }

        /// 账号信息不存在。
        public static var userNotExistError: InvalidParameterValue {
            InvalidParameterValue(.userNotExistError)
        }

        /// 未找到root账号信息。
        public static var verifyAccountNoRootError: InvalidParameterValue {
            InvalidParameterValue(.verifyAccountNoRootError)
        }

        /// 账号密码无效。
        public static var verifyAccountPasswordError: InvalidParameterValue {
            InvalidParameterValue(.verifyAccountPasswordError)
        }

        /// 账号无GRANT权限。
        public static var verifyAccountPrivError: InvalidParameterValue {
            InvalidParameterValue(.verifyAccountPrivError)
        }

        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }

        public func asCdbError() -> TCCdbError {
            let code: TCCdbError.Code
            switch self.error {
            case .accountDescriptionCharacterError:
                code = .invalidParameterValue_AccountDescriptionCharacterError
            case .accountDescriptionLengthError:
                code = .invalidParameterValue_AccountDescriptionLengthError
            case .accountHostRuleError:
                code = .invalidParameterValue_AccountHostRuleError
            case .accountPasswordCharacterError:
                code = .invalidParameterValue_AccountPasswordCharacterError
            case .accountPasswordLengthError:
                code = .invalidParameterValue_AccountPasswordLengthError
            case .accountPasswordRuleError:
                code = .invalidParameterValue_AccountPasswordRuleError
            case .dataConvertError:
                code = .invalidParameterValue_DataConvertError
            case .invalidParameterValueError:
                code = .invalidParameterValue_InvalidParameterValueError
            case .userNameRuleError:
                code = .invalidParameterValue_UserNameRuleError
            case .userNotExistError:
                code = .invalidParameterValue_UserNotExistError
            case .verifyAccountNoRootError:
                code = .invalidParameterValue_VerifyAccountNoRootError
            case .verifyAccountPasswordError:
                code = .invalidParameterValue_VerifyAccountPasswordError
            case .verifyAccountPrivError:
                code = .invalidParameterValue_VerifyAccountPrivError
            case .other:
                code = .invalidParameterValue
            }
            return TCCdbError(code, context: self.context)
        }
    }
}
