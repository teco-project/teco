//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCdbError {
    public struct InvalidParameter: TCCdbErrorType {
        enum Code: String {
            case controllerNotFoundError = "InvalidParameter.ControllerNotFoundError"
            case deployGroupNotEmpty = "InvalidParameter.DeployGroupNotEmpty"
            case exceptionParam = "InvalidParameter.ExceptionParam"
            case instanceNameNotFound = "InvalidParameter.InstanceNameNotFound"
            case instanceNotFound = "InvalidParameter.InstanceNotFound"
            case invalidAsyncRequestId = "InvalidParameter.InvalidAsyncRequestId"
            case invalidName = "InvalidParameter.InvalidName"
            case invalidParameterError = "InvalidParameter.InvalidParameterError"
            case jsonUnmarshalError = "InvalidParameter.JsonUnmarshalError"
            case overDeployGroupQuota = "InvalidParameter.OverDeployGroupQuota"
            case resourceExists = "InvalidParameter.ResourceExists"
            case resourceNotExists = "InvalidParameter.ResourceNotExists"
            case resourceNotFound = "InvalidParameter.ResourceNotFound"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 未找到该接口。
        public static var controllerNotFoundError: InvalidParameter {
            InvalidParameter(.controllerNotFoundError)
        }
        
        /// 置放群组下存在资源。
        ///
        /// 请从置放群组里移除资源。
        public static var deployGroupNotEmpty: InvalidParameter {
            InvalidParameter(.deployGroupNotEmpty)
        }
        
        /// 异常参数。
        public static var exceptionParam: InvalidParameter {
            InvalidParameter(.exceptionParam)
        }
        
        /// 未找到该实例。
        public static var instanceNameNotFound: InvalidParameter {
            InvalidParameter(.instanceNameNotFound)
        }
        
        /// 实例不存在。
        public static var instanceNotFound: InvalidParameter {
            InvalidParameter(.instanceNotFound)
        }
        
        /// 异步任务不存在。
        public static var invalidAsyncRequestId: InvalidParameter {
            InvalidParameter(.invalidAsyncRequestId)
        }
        
        /// 非法的名称。
        public static var invalidName: InvalidParameter {
            InvalidParameter(.invalidName)
        }
        
        /// 无效的参数值。
        public static var invalidParameterError: InvalidParameter {
            InvalidParameter(.invalidParameterError)
        }
        
        /// Json反序列化错误。
        public static var jsonUnmarshalError: InvalidParameter {
            InvalidParameter(.jsonUnmarshalError)
        }
        
        /// 超出置放群组资源数量配额。
        public static var overDeployGroupQuota: InvalidParameter {
            InvalidParameter(.overDeployGroupQuota)
        }
        
        /// 资源已存在。
        public static var resourceExists: InvalidParameter {
            InvalidParameter(.resourceExists)
        }
        
        /// 资源不存在。
        public static var resourceNotExists: InvalidParameter {
            InvalidParameter(.resourceNotExists)
        }
        
        /// 未找到相关资源。
        public static var resourceNotFound: InvalidParameter {
            InvalidParameter(.resourceNotFound)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
        
        public func asCdbError() -> TCCdbError {
            let code: TCCdbError.Code
            switch self.error {
            case .controllerNotFoundError: 
                code = .invalidParameter_ControllerNotFoundError
            case .deployGroupNotEmpty: 
                code = .invalidParameter_DeployGroupNotEmpty
            case .exceptionParam: 
                code = .invalidParameter_ExceptionParam
            case .instanceNameNotFound: 
                code = .invalidParameter_InstanceNameNotFound
            case .instanceNotFound: 
                code = .invalidParameter_InstanceNotFound
            case .invalidAsyncRequestId: 
                code = .invalidParameter_InvalidAsyncRequestId
            case .invalidName: 
                code = .invalidParameter_InvalidName
            case .invalidParameterError: 
                code = .invalidParameter_InvalidParameterError
            case .jsonUnmarshalError: 
                code = .invalidParameter_JsonUnmarshalError
            case .overDeployGroupQuota: 
                code = .invalidParameter_OverDeployGroupQuota
            case .resourceExists: 
                code = .invalidParameter_ResourceExists
            case .resourceNotExists: 
                code = .invalidParameter_ResourceNotExists
            case .resourceNotFound: 
                code = .invalidParameter_ResourceNotFound
            case .other: 
                code = .invalidParameter
            }
            return TCCdbError(code, context: self.context)
        }
    }
}
