//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// CreateCdbProxy请求参数结构体
    public struct CreateCdbProxyRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 私有网络ID
        public let uniqVpcId: String

        /// 私有子网ID
        public let uniqSubnetId: String

        /// 节点规格配置
        public let proxyNodeCustom: [ProxyNodeCustom]

        /// 安全组
        public let securityGroup: [String]?

        /// 描述
        public let desc: String?

        /// 连接池阈值
        public let connectionPoolLimit: UInt64?

        public init(instanceId: String, uniqVpcId: String, uniqSubnetId: String, proxyNodeCustom: [ProxyNodeCustom], securityGroup: [String]? = nil, desc: String? = nil, connectionPoolLimit: UInt64? = nil) {
            self.instanceId = instanceId
            self.uniqVpcId = uniqVpcId
            self.uniqSubnetId = uniqSubnetId
            self.proxyNodeCustom = proxyNodeCustom
            self.securityGroup = securityGroup
            self.desc = desc
            self.connectionPoolLimit = connectionPoolLimit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case uniqVpcId = "UniqVpcId"
            case uniqSubnetId = "UniqSubnetId"
            case proxyNodeCustom = "ProxyNodeCustom"
            case securityGroup = "SecurityGroup"
            case desc = "Desc"
            case connectionPoolLimit = "ConnectionPoolLimit"
        }
    }

    /// CreateCdbProxy返回参数结构体
    public struct CreateCdbProxyResponse: TCResponse {
        /// 异步任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asyncRequestId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case asyncRequestId = "AsyncRequestId"
            case requestId = "RequestId"
        }
    }

    /// 创建数据库代理
    ///
    /// 主实例创建数据库代理
    @inlinable
    public func createCdbProxy(_ input: CreateCdbProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCdbProxyResponse> {
        self.client.execute(action: "CreateCdbProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理
    ///
    /// 主实例创建数据库代理
    @inlinable
    public func createCdbProxy(_ input: CreateCdbProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCdbProxyResponse {
        try await self.client.execute(action: "CreateCdbProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据库代理
    ///
    /// 主实例创建数据库代理
    @inlinable
    public func createCdbProxy(instanceId: String, uniqVpcId: String, uniqSubnetId: String, proxyNodeCustom: [ProxyNodeCustom], securityGroup: [String]? = nil, desc: String? = nil, connectionPoolLimit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCdbProxyResponse> {
        self.createCdbProxy(.init(instanceId: instanceId, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, proxyNodeCustom: proxyNodeCustom, securityGroup: securityGroup, desc: desc, connectionPoolLimit: connectionPoolLimit), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理
    ///
    /// 主实例创建数据库代理
    @inlinable
    public func createCdbProxy(instanceId: String, uniqVpcId: String, uniqSubnetId: String, proxyNodeCustom: [ProxyNodeCustom], securityGroup: [String]? = nil, desc: String? = nil, connectionPoolLimit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCdbProxyResponse {
        try await self.createCdbProxy(.init(instanceId: instanceId, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, proxyNodeCustom: proxyNodeCustom, securityGroup: securityGroup, desc: desc, connectionPoolLimit: connectionPoolLimit), region: region, logger: logger, on: eventLoop)
    }
}
