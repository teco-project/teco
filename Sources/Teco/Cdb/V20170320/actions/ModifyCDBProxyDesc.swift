//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdb {
    /// ModifyCDBProxyDesc请求参数结构体
    public struct ModifyCDBProxyDescRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 数据库代理ID
        public let proxyGroupId: String

        /// 数据库代理描述
        public let desc: String

        public init(instanceId: String, proxyGroupId: String, desc: String) {
            self.instanceId = instanceId
            self.proxyGroupId = proxyGroupId
            self.desc = desc
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case proxyGroupId = "ProxyGroupId"
            case desc = "Desc"
        }
    }

    /// ModifyCDBProxyDesc返回参数结构体
    public struct ModifyCDBProxyDescResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改数据库代理描述
    @inlinable
    public func modifyCDBProxyDesc(_ input: ModifyCDBProxyDescRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCDBProxyDescResponse> {
        self.client.execute(action: "ModifyCDBProxyDesc", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改数据库代理描述
    @inlinable
    public func modifyCDBProxyDesc(_ input: ModifyCDBProxyDescRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCDBProxyDescResponse {
        try await self.client.execute(action: "ModifyCDBProxyDesc", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改数据库代理描述
    @inlinable
    public func modifyCDBProxyDesc(instanceId: String, proxyGroupId: String, desc: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCDBProxyDescResponse> {
        self.modifyCDBProxyDesc(ModifyCDBProxyDescRequest(instanceId: instanceId, proxyGroupId: proxyGroupId, desc: desc), logger: logger, on: eventLoop)
    }

    /// 修改数据库代理描述
    @inlinable
    public func modifyCDBProxyDesc(instanceId: String, proxyGroupId: String, desc: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCDBProxyDescResponse {
        try await self.modifyCDBProxyDesc(ModifyCDBProxyDescRequest(instanceId: instanceId, proxyGroupId: proxyGroupId, desc: desc), logger: logger, on: eventLoop)
    }
}
