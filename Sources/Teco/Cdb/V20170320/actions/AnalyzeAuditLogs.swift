//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// AnalyzeAuditLogs请求参数结构体
    public struct AnalyzeAuditLogsRequest: TCRequestModel {
        /// 实例ID。
        public let instanceId: String

        /// 要分析的日志开始时间，格式为："2023-02-16 00:00:20"。
        public let startTime: String

        /// 要分析的日志结束时间，格式为："2023-02-16 00:10:20"。
        public let endTime: String

        /// 聚合维度的排序条件。
        public let aggregationConditions: [AggregationCondition]

        /// 该过滤条件下的审计日志结果集作为分析日志。
        public let auditLogFilter: AuditLogFilter?

        public init(instanceId: String, startTime: String, endTime: String, aggregationConditions: [AggregationCondition], auditLogFilter: AuditLogFilter? = nil) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
            self.aggregationConditions = aggregationConditions
            self.auditLogFilter = auditLogFilter
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case aggregationConditions = "AggregationConditions"
            case auditLogFilter = "AuditLogFilter"
        }
    }

    /// AnalyzeAuditLogs返回参数结构体
    public struct AnalyzeAuditLogsResponse: TCResponseModel {
        /// 返回的聚合桶信息集
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [AuditLogAggregationResult]?

        /// 扫描的日志条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 分析审计日志
    ///
    /// 在不同过滤条件下的审计日志结果集中，选定特定的数据列进行聚合统计。
    @inlinable
    public func analyzeAuditLogs(_ input: AnalyzeAuditLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AnalyzeAuditLogsResponse> {
        self.client.execute(action: "AnalyzeAuditLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 分析审计日志
    ///
    /// 在不同过滤条件下的审计日志结果集中，选定特定的数据列进行聚合统计。
    @inlinable
    public func analyzeAuditLogs(_ input: AnalyzeAuditLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AnalyzeAuditLogsResponse {
        try await self.client.execute(action: "AnalyzeAuditLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 分析审计日志
    ///
    /// 在不同过滤条件下的审计日志结果集中，选定特定的数据列进行聚合统计。
    @inlinable
    public func analyzeAuditLogs(instanceId: String, startTime: String, endTime: String, aggregationConditions: [AggregationCondition], auditLogFilter: AuditLogFilter? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AnalyzeAuditLogsResponse> {
        self.analyzeAuditLogs(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, aggregationConditions: aggregationConditions, auditLogFilter: auditLogFilter), region: region, logger: logger, on: eventLoop)
    }

    /// 分析审计日志
    ///
    /// 在不同过滤条件下的审计日志结果集中，选定特定的数据列进行聚合统计。
    @inlinable
    public func analyzeAuditLogs(instanceId: String, startTime: String, endTime: String, aggregationConditions: [AggregationCondition], auditLogFilter: AuditLogFilter? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AnalyzeAuditLogsResponse {
        try await self.analyzeAuditLogs(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, aggregationConditions: aggregationConditions, auditLogFilter: auditLogFilter), region: region, logger: logger, on: eventLoop)
    }
}
