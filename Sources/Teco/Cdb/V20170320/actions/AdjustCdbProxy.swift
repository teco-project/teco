//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// AdjustCdbProxy请求参数结构体
    public struct AdjustCdbProxyRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 代理组ID
        public let proxyGroupId: String

        /// 节点规格配置
        public let proxyNodeCustom: [ProxyNodeCustom]

        /// 重新负载均衡：auto(自动),manual(手动)
        public let reloadBalance: String

        /// 升级切换时间：nowTime(升级完成时),timeWindow(维护时间内)
        public let upgradeTime: String

        public init(instanceId: String, proxyGroupId: String, proxyNodeCustom: [ProxyNodeCustom], reloadBalance: String, upgradeTime: String) {
            self.instanceId = instanceId
            self.proxyGroupId = proxyGroupId
            self.proxyNodeCustom = proxyNodeCustom
            self.reloadBalance = reloadBalance
            self.upgradeTime = upgradeTime
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case proxyGroupId = "ProxyGroupId"
            case proxyNodeCustom = "ProxyNodeCustom"
            case reloadBalance = "ReloadBalance"
            case upgradeTime = "UpgradeTime"
        }
    }

    /// AdjustCdbProxy返回参数结构体
    public struct AdjustCdbProxyResponse: TCResponseModel {
        /// 异步任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asyncRequestId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case asyncRequestId = "AsyncRequestId"
            case requestId = "RequestId"
        }
    }

    /// 调整数据库代理
    ///
    /// 调整数据库代理配置
    @inlinable
    public func adjustCdbProxy(_ input: AdjustCdbProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AdjustCdbProxyResponse> {
        self.client.execute(action: "AdjustCdbProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 调整数据库代理
    ///
    /// 调整数据库代理配置
    @inlinable
    public func adjustCdbProxy(_ input: AdjustCdbProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AdjustCdbProxyResponse {
        try await self.client.execute(action: "AdjustCdbProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 调整数据库代理
    ///
    /// 调整数据库代理配置
    @inlinable
    public func adjustCdbProxy(instanceId: String, proxyGroupId: String, proxyNodeCustom: [ProxyNodeCustom], reloadBalance: String, upgradeTime: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AdjustCdbProxyResponse> {
        self.adjustCdbProxy(.init(instanceId: instanceId, proxyGroupId: proxyGroupId, proxyNodeCustom: proxyNodeCustom, reloadBalance: reloadBalance, upgradeTime: upgradeTime), region: region, logger: logger, on: eventLoop)
    }

    /// 调整数据库代理
    ///
    /// 调整数据库代理配置
    @inlinable
    public func adjustCdbProxy(instanceId: String, proxyGroupId: String, proxyNodeCustom: [ProxyNodeCustom], reloadBalance: String, upgradeTime: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AdjustCdbProxyResponse {
        try await self.adjustCdbProxy(.init(instanceId: instanceId, proxyGroupId: proxyGroupId, proxyNodeCustom: proxyNodeCustom, reloadBalance: reloadBalance, upgradeTime: upgradeTime), region: region, logger: logger, on: eventLoop)
    }
}
