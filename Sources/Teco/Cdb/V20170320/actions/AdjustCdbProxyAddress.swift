//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// AdjustCdbProxyAddress请求参数结构体
    public struct AdjustCdbProxyAddressRequest: TCRequestModel {
        /// 代理组ID
        public let proxyGroupId: String

        /// 权重分配模式，
        /// 系统自动分配："system"， 自定义："custom"
        public let weightMode: String

        /// 是否开启延迟剔除，取值："true" | "false"
        public let isKickOut: Bool

        /// 最小保留数量，最小取值：0
        public let minCount: UInt64

        /// 延迟剔除阈值，最小取值：0
        public let maxDelay: UInt64

        /// 是否开启故障转移，取值："true" | "false"
        public let failOver: Bool

        /// 是否自动添加RO，取值："true" | "false"
        public let autoAddRo: Bool

        /// 是否是只读，取值："true" | "false"
        public let readOnly: Bool

        /// 代理组地址ID
        public let proxyAddressId: String

        /// 是否开启事务分离，取值："true" | "false"
        public let transSplit: Bool?

        /// 是否开启连接池
        public let connectionPool: Bool?

        /// 读写权重分配。如果 WeightMode 传的是 system ，则传入的权重不生效，由系统分配默认权重。
        public let proxyAllocation: [ProxyAllocation]?

        public init(proxyGroupId: String, weightMode: String, isKickOut: Bool, minCount: UInt64, maxDelay: UInt64, failOver: Bool, autoAddRo: Bool, readOnly: Bool, proxyAddressId: String, transSplit: Bool? = nil, connectionPool: Bool? = nil, proxyAllocation: [ProxyAllocation]? = nil) {
            self.proxyGroupId = proxyGroupId
            self.weightMode = weightMode
            self.isKickOut = isKickOut
            self.minCount = minCount
            self.maxDelay = maxDelay
            self.failOver = failOver
            self.autoAddRo = autoAddRo
            self.readOnly = readOnly
            self.proxyAddressId = proxyAddressId
            self.transSplit = transSplit
            self.connectionPool = connectionPool
            self.proxyAllocation = proxyAllocation
        }

        enum CodingKeys: String, CodingKey {
            case proxyGroupId = "ProxyGroupId"
            case weightMode = "WeightMode"
            case isKickOut = "IsKickOut"
            case minCount = "MinCount"
            case maxDelay = "MaxDelay"
            case failOver = "FailOver"
            case autoAddRo = "AutoAddRo"
            case readOnly = "ReadOnly"
            case proxyAddressId = "ProxyAddressId"
            case transSplit = "TransSplit"
            case connectionPool = "ConnectionPool"
            case proxyAllocation = "ProxyAllocation"
        }
    }

    /// AdjustCdbProxyAddress返回参数结构体
    public struct AdjustCdbProxyAddressResponse: TCResponseModel {
        /// 异步任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asyncRequestId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case asyncRequestId = "AsyncRequestId"
            case requestId = "RequestId"
        }
    }

    /// 调整数据库代理地址
    ///
    /// 调整数据库代理地址配置
    @inlinable
    public func adjustCdbProxyAddress(_ input: AdjustCdbProxyAddressRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AdjustCdbProxyAddressResponse> {
        self.client.execute(action: "AdjustCdbProxyAddress", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 调整数据库代理地址
    ///
    /// 调整数据库代理地址配置
    @inlinable
    public func adjustCdbProxyAddress(_ input: AdjustCdbProxyAddressRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AdjustCdbProxyAddressResponse {
        try await self.client.execute(action: "AdjustCdbProxyAddress", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 调整数据库代理地址
    ///
    /// 调整数据库代理地址配置
    @inlinable
    public func adjustCdbProxyAddress(proxyGroupId: String, weightMode: String, isKickOut: Bool, minCount: UInt64, maxDelay: UInt64, failOver: Bool, autoAddRo: Bool, readOnly: Bool, proxyAddressId: String, transSplit: Bool? = nil, connectionPool: Bool? = nil, proxyAllocation: [ProxyAllocation]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AdjustCdbProxyAddressResponse> {
        self.adjustCdbProxyAddress(.init(proxyGroupId: proxyGroupId, weightMode: weightMode, isKickOut: isKickOut, minCount: minCount, maxDelay: maxDelay, failOver: failOver, autoAddRo: autoAddRo, readOnly: readOnly, proxyAddressId: proxyAddressId, transSplit: transSplit, connectionPool: connectionPool, proxyAllocation: proxyAllocation), region: region, logger: logger, on: eventLoop)
    }

    /// 调整数据库代理地址
    ///
    /// 调整数据库代理地址配置
    @inlinable
    public func adjustCdbProxyAddress(proxyGroupId: String, weightMode: String, isKickOut: Bool, minCount: UInt64, maxDelay: UInt64, failOver: Bool, autoAddRo: Bool, readOnly: Bool, proxyAddressId: String, transSplit: Bool? = nil, connectionPool: Bool? = nil, proxyAllocation: [ProxyAllocation]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AdjustCdbProxyAddressResponse {
        try await self.adjustCdbProxyAddress(.init(proxyGroupId: proxyGroupId, weightMode: weightMode, isKickOut: isKickOut, minCount: minCount, maxDelay: maxDelay, failOver: failOver, autoAddRo: autoAddRo, readOnly: readOnly, proxyAddressId: proxyAddressId, transSplit: transSplit, connectionPool: connectionPool, proxyAllocation: proxyAllocation), region: region, logger: logger, on: eventLoop)
    }
}
