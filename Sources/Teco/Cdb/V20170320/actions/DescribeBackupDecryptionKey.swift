//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// DescribeBackupDecryptionKey请求参数结构体
    public struct DescribeBackupDecryptionKeyRequest: TCRequest {
        /// 实例ID，格式如：cdb-XXXX。与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceId: String

        /// 实例的备份ID，可通过DescribeBackups接口查询备份的ID。
        public let backupId: Int64

        public init(instanceId: String, backupId: Int64) {
            self.instanceId = instanceId
            self.backupId = backupId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case backupId = "BackupId"
        }
    }

    /// DescribeBackupDecryptionKey返回参数结构体
    public struct DescribeBackupDecryptionKeyResponse: TCResponse {
        /// 备份文件解密密钥。
        public let decryptionKey: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case decryptionKey = "DecryptionKey"
            case requestId = "RequestId"
        }
    }

    /// 查询备份文件解密密钥
    ///
    /// 本接口(DescribeBackupDecryptionKey)用于查询备份文件解密密钥。
    @inlinable
    public func describeBackupDecryptionKey(_ input: DescribeBackupDecryptionKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupDecryptionKeyResponse> {
        self.client.execute(action: "DescribeBackupDecryptionKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询备份文件解密密钥
    ///
    /// 本接口(DescribeBackupDecryptionKey)用于查询备份文件解密密钥。
    @inlinable
    public func describeBackupDecryptionKey(_ input: DescribeBackupDecryptionKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupDecryptionKeyResponse {
        try await self.client.execute(action: "DescribeBackupDecryptionKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询备份文件解密密钥
    ///
    /// 本接口(DescribeBackupDecryptionKey)用于查询备份文件解密密钥。
    @inlinable
    public func describeBackupDecryptionKey(instanceId: String, backupId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupDecryptionKeyResponse> {
        self.describeBackupDecryptionKey(.init(instanceId: instanceId, backupId: backupId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份文件解密密钥
    ///
    /// 本接口(DescribeBackupDecryptionKey)用于查询备份文件解密密钥。
    @inlinable
    public func describeBackupDecryptionKey(instanceId: String, backupId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupDecryptionKeyResponse {
        try await self.describeBackupDecryptionKey(.init(instanceId: instanceId, backupId: backupId), region: region, logger: logger, on: eventLoop)
    }
}
