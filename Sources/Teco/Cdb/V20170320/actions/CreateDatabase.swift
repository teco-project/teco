//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// CreateDatabase请求参数结构体
    public struct CreateDatabaseRequest: TCRequestModel {
        /// 实例 ID，格式如：cdb-c1nl9rpv，与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceId: String

        /// 数据库名称。
        public let dbName: String

        /// 字符集，可选值：utf8，gbk，latin1，utf8mb4。
        public let characterSetName: String

        public init(instanceId: String, dbName: String, characterSetName: String) {
            self.instanceId = instanceId
            self.dbName = dbName
            self.characterSetName = characterSetName
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dbName = "DBName"
            case characterSetName = "CharacterSetName"
        }
    }

    /// CreateDatabase返回参数结构体
    public struct CreateDatabaseResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建数据库
    ///
    /// 本接口(CreateDatabase)用于在云数据库实例中创建数据库。
    @inlinable @discardableResult
    public func createDatabase(_ input: CreateDatabaseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDatabaseResponse> {
        self.client.execute(action: "CreateDatabase", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据库
    ///
    /// 本接口(CreateDatabase)用于在云数据库实例中创建数据库。
    @inlinable @discardableResult
    public func createDatabase(_ input: CreateDatabaseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDatabaseResponse {
        try await self.client.execute(action: "CreateDatabase", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据库
    ///
    /// 本接口(CreateDatabase)用于在云数据库实例中创建数据库。
    @inlinable @discardableResult
    public func createDatabase(instanceId: String, dbName: String, characterSetName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDatabaseResponse> {
        self.createDatabase(.init(instanceId: instanceId, dbName: dbName, characterSetName: characterSetName), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据库
    ///
    /// 本接口(CreateDatabase)用于在云数据库实例中创建数据库。
    @inlinable @discardableResult
    public func createDatabase(instanceId: String, dbName: String, characterSetName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDatabaseResponse {
        try await self.createDatabase(.init(instanceId: instanceId, dbName: dbName, characterSetName: characterSetName), region: region, logger: logger, on: eventLoop)
    }
}
