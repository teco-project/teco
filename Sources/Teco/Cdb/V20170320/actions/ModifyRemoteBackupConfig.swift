//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// ModifyRemoteBackupConfig请求参数结构体
    public struct ModifyRemoteBackupConfigRequest: TCRequestModel {
        /// 实例 ID，格式如：cdb-c1nl9rpv。与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceId: String

        /// 异地数据备份开关，off - 关闭异地备份，on-开启异地备份
        public let remoteBackupSave: String

        /// 异地日志备份开关，off - 关闭异地备份，on-开启异地备份，只有在参数RemoteBackupSave为on时，RemoteBinlogSave参数才可设置为on
        public let remoteBinlogSave: String

        /// 用户设置异地备份地域列表
        public let remoteRegion: [String]

        /// 异地备份保留时间，单位为天
        public let expireDays: Int64

        public init(instanceId: String, remoteBackupSave: String, remoteBinlogSave: String, remoteRegion: [String], expireDays: Int64) {
            self.instanceId = instanceId
            self.remoteBackupSave = remoteBackupSave
            self.remoteBinlogSave = remoteBinlogSave
            self.remoteRegion = remoteRegion
            self.expireDays = expireDays
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case remoteBackupSave = "RemoteBackupSave"
            case remoteBinlogSave = "RemoteBinlogSave"
            case remoteRegion = "RemoteRegion"
            case expireDays = "ExpireDays"
        }
    }

    /// ModifyRemoteBackupConfig返回参数结构体
    public struct ModifyRemoteBackupConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改云数据库异地备份配置信息
    ///
    /// 本接口(ModifyRemoteBackupConfig)用于修改数据库异地备份配置信息。
    @inlinable @discardableResult
    public func modifyRemoteBackupConfig(_ input: ModifyRemoteBackupConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRemoteBackupConfigResponse> {
        self.client.execute(action: "ModifyRemoteBackupConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改云数据库异地备份配置信息
    ///
    /// 本接口(ModifyRemoteBackupConfig)用于修改数据库异地备份配置信息。
    @inlinable @discardableResult
    public func modifyRemoteBackupConfig(_ input: ModifyRemoteBackupConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRemoteBackupConfigResponse {
        try await self.client.execute(action: "ModifyRemoteBackupConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改云数据库异地备份配置信息
    ///
    /// 本接口(ModifyRemoteBackupConfig)用于修改数据库异地备份配置信息。
    @inlinable @discardableResult
    public func modifyRemoteBackupConfig(instanceId: String, remoteBackupSave: String, remoteBinlogSave: String, remoteRegion: [String], expireDays: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRemoteBackupConfigResponse> {
        self.modifyRemoteBackupConfig(.init(instanceId: instanceId, remoteBackupSave: remoteBackupSave, remoteBinlogSave: remoteBinlogSave, remoteRegion: remoteRegion, expireDays: expireDays), region: region, logger: logger, on: eventLoop)
    }

    /// 修改云数据库异地备份配置信息
    ///
    /// 本接口(ModifyRemoteBackupConfig)用于修改数据库异地备份配置信息。
    @inlinable @discardableResult
    public func modifyRemoteBackupConfig(instanceId: String, remoteBackupSave: String, remoteBinlogSave: String, remoteRegion: [String], expireDays: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRemoteBackupConfigResponse {
        try await self.modifyRemoteBackupConfig(.init(instanceId: instanceId, remoteBackupSave: remoteBackupSave, remoteBinlogSave: remoteBinlogSave, remoteRegion: remoteRegion, expireDays: expireDays), region: region, logger: logger, on: eventLoop)
    }
}
