//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdb {
    /// DescribeBackupEncryptionStatus请求参数结构体
    public struct DescribeBackupEncryptionStatusRequest: TCRequestModel {
        /// 实例ID，格式如：cdb-XXXX。与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeBackupEncryptionStatus返回参数结构体
    public struct DescribeBackupEncryptionStatusResponse: TCResponseModel {
        /// 实例是否开启了物理备份加密。可能的值有 on, off 。
        public let encryptionStatus: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case encryptionStatus = "EncryptionStatus"
            case requestId = "RequestId"
        }
    }

    /// 查询实例默认备份加密状态
    ///
    /// 本接口(DescribeBackupEncryptionStatus)用于查询实例默认备份加密状态。
    @inlinable
    public func describeBackupEncryptionStatus(_ input: DescribeBackupEncryptionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupEncryptionStatusResponse> {
        self.client.execute(action: "DescribeBackupEncryptionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例默认备份加密状态
    ///
    /// 本接口(DescribeBackupEncryptionStatus)用于查询实例默认备份加密状态。
    @inlinable
    public func describeBackupEncryptionStatus(_ input: DescribeBackupEncryptionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupEncryptionStatusResponse {
        try await self.client.execute(action: "DescribeBackupEncryptionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例默认备份加密状态
    ///
    /// 本接口(DescribeBackupEncryptionStatus)用于查询实例默认备份加密状态。
    @inlinable
    public func describeBackupEncryptionStatus(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupEncryptionStatusResponse> {
        self.describeBackupEncryptionStatus(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例默认备份加密状态
    ///
    /// 本接口(DescribeBackupEncryptionStatus)用于查询实例默认备份加密状态。
    @inlinable
    public func describeBackupEncryptionStatus(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupEncryptionStatusResponse {
        try await self.describeBackupEncryptionStatus(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
