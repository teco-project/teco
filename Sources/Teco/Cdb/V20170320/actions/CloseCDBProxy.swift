//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdb {
    /// CloseCDBProxy请求参数结构体
    public struct CloseCDBProxyRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 代理组ID
        public let proxyGroupId: String?

        /// 是否只关闭读写分离，取值："true" | "false"，默认为"false"
        public let onlyCloseRW: Bool?

        public init(instanceId: String, proxyGroupId: String? = nil, onlyCloseRW: Bool? = nil) {
            self.instanceId = instanceId
            self.proxyGroupId = proxyGroupId
            self.onlyCloseRW = onlyCloseRW
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case proxyGroupId = "ProxyGroupId"
            case onlyCloseRW = "OnlyCloseRW"
        }
    }

    /// CloseCDBProxy返回参数结构体
    public struct CloseCDBProxyResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 关闭数据库代理
    @inlinable @discardableResult
    public func closeCDBProxy(_ input: CloseCDBProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CloseCDBProxyResponse> {
        self.client.execute(action: "CloseCDBProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 关闭数据库代理
    @inlinable @discardableResult
    public func closeCDBProxy(_ input: CloseCDBProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CloseCDBProxyResponse {
        try await self.client.execute(action: "CloseCDBProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 关闭数据库代理
    @inlinable @discardableResult
    public func closeCDBProxy(instanceId: String, proxyGroupId: String? = nil, onlyCloseRW: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CloseCDBProxyResponse> {
        self.closeCDBProxy(CloseCDBProxyRequest(instanceId: instanceId, proxyGroupId: proxyGroupId, onlyCloseRW: onlyCloseRW), region: region, logger: logger, on: eventLoop)
    }

    /// 关闭数据库代理
    @inlinable @discardableResult
    public func closeCDBProxy(instanceId: String, proxyGroupId: String? = nil, onlyCloseRW: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CloseCDBProxyResponse {
        try await self.closeCDBProxy(CloseCDBProxyRequest(instanceId: instanceId, proxyGroupId: proxyGroupId, onlyCloseRW: onlyCloseRW), region: region, logger: logger, on: eventLoop)
    }
}
