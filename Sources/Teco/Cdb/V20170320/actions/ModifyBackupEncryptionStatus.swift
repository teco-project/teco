//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cdb {
    /// ModifyBackupEncryptionStatus请求参数结构体
    public struct ModifyBackupEncryptionStatusRequest: TCRequestModel {
        /// 实例ID，格式如：cdb-XXXX。与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceId: String

        /// 设置实例新增的自动物理备份文件默认加密状态。可选值为 on或者off。
        public let encryptionStatus: String

        public init(instanceId: String, encryptionStatus: String) {
            self.instanceId = instanceId
            self.encryptionStatus = encryptionStatus
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case encryptionStatus = "EncryptionStatus"
        }
    }

    /// ModifyBackupEncryptionStatus返回参数结构体
    public struct ModifyBackupEncryptionStatusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置实例备份文件是否加密
    ///
    /// 本接口(ModifyBackupEncryptionStatus)用于设置实例备份文件是否加密。
    @inlinable @discardableResult
    public func modifyBackupEncryptionStatus(_ input: ModifyBackupEncryptionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBackupEncryptionStatusResponse> {
        self.client.execute(action: "ModifyBackupEncryptionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置实例备份文件是否加密
    ///
    /// 本接口(ModifyBackupEncryptionStatus)用于设置实例备份文件是否加密。
    @inlinable @discardableResult
    public func modifyBackupEncryptionStatus(_ input: ModifyBackupEncryptionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBackupEncryptionStatusResponse {
        try await self.client.execute(action: "ModifyBackupEncryptionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置实例备份文件是否加密
    ///
    /// 本接口(ModifyBackupEncryptionStatus)用于设置实例备份文件是否加密。
    @inlinable @discardableResult
    public func modifyBackupEncryptionStatus(instanceId: String, encryptionStatus: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBackupEncryptionStatusResponse> {
        self.modifyBackupEncryptionStatus(.init(instanceId: instanceId, encryptionStatus: encryptionStatus), region: region, logger: logger, on: eventLoop)
    }

    /// 设置实例备份文件是否加密
    ///
    /// 本接口(ModifyBackupEncryptionStatus)用于设置实例备份文件是否加密。
    @inlinable @discardableResult
    public func modifyBackupEncryptionStatus(instanceId: String, encryptionStatus: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBackupEncryptionStatusResponse {
        try await self.modifyBackupEncryptionStatus(.init(instanceId: instanceId, encryptionStatus: encryptionStatus), region: region, logger: logger, on: eventLoop)
    }
}
