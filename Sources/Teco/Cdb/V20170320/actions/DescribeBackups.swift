//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Cdb {
    /// DescribeBackups请求参数结构体
    public struct DescribeBackupsRequest: TCPaginatedRequest {
        /// 实例ID，格式如：cdb-c1nl9rpv。与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceId: String

        /// 偏移量，最小值为0。
        public let offset: Int64?

        /// 分页大小，默认值为20，最小值为1，最大值为100。
        public let limit: Int64?

        public init(instanceId: String, offset: Int64? = nil, limit: Int64? = nil) {
            self.instanceId = instanceId
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeBackupsResponse) -> DescribeBackupsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeBackupsRequest(instanceId: self.instanceId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeBackups返回参数结构体
    public struct DescribeBackupsResponse: TCPaginatedResponse {
        /// 符合查询条件的实例总数。
        public let totalCount: Int64

        /// 符合查询条件的备份信息详情。
        public let items: [BackupInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [BackupInfo] {
            self.items
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询数据备份文件列表
    ///
    /// 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
    @inlinable
    public func describeBackups(_ input: DescribeBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupsResponse> {
        self.client.execute(action: "DescribeBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询数据备份文件列表
    ///
    /// 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
    @inlinable
    public func describeBackups(_ input: DescribeBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupsResponse {
        try await self.client.execute(action: "DescribeBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询数据备份文件列表
    ///
    /// 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
    @inlinable
    public func describeBackups(instanceId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupsResponse> {
        let input = DescribeBackupsRequest(instanceId: instanceId, offset: offset, limit: limit)
        return self.client.execute(action: "DescribeBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询数据备份文件列表
    ///
    /// 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
    @inlinable
    public func describeBackups(instanceId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupsResponse {
        let input = DescribeBackupsRequest(instanceId: instanceId, offset: offset, limit: limit)
        return try await self.client.execute(action: "DescribeBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询数据备份文件列表
    ///
    /// 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
    @inlinable
    public func describeBackupsPaginated(_ input: DescribeBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [BackupInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeBackups, logger: logger, on: eventLoop)
    }

    /// 查询数据备份文件列表
    ///
    /// 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
    @inlinable @discardableResult
    public func describeBackupsPaginated(_ input: DescribeBackupsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeBackupsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeBackups, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询数据备份文件列表
    ///
    /// 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
    ///
    /// - Returns: `AsyncSequence`s of `BackupInfo` and `DescribeBackupsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeBackupsPaginator(_ input: DescribeBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeBackupsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeBackups, logger: logger, on: eventLoop)
    }
}
