//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdb {
    /// DescribeProxyConnectionPoolConf请求参数结构体
    public struct DescribeProxyConnectionPoolConfRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 分页查询偏移量
        public let offset: Int64?

        /// 分页查询限制
        public let limit: Int64?

        public init(instanceId: String, offset: Int64? = nil, limit: Int64? = nil) {
            self.instanceId = instanceId
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// DescribeProxyConnectionPoolConf返回参数结构体
    public struct DescribeProxyConnectionPoolConfResponse: TCResponseModel {
        /// 配置规格数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: Int64?

        /// 连接池配置规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let poolConf: PoolConf?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case count = "Count"
            case poolConf = "PoolConf"
            case requestId = "RequestId"
        }
    }

    /// 查询代理连接池规格配置
    ///
    /// 获取数据库代理连接池相关规格配置
    @inlinable
    public func describeProxyConnectionPoolConf(_ input: DescribeProxyConnectionPoolConfRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProxyConnectionPoolConfResponse> {
        self.client.execute(action: "DescribeProxyConnectionPoolConf", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询代理连接池规格配置
    ///
    /// 获取数据库代理连接池相关规格配置
    @inlinable
    public func describeProxyConnectionPoolConf(_ input: DescribeProxyConnectionPoolConfRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProxyConnectionPoolConfResponse {
        try await self.client.execute(action: "DescribeProxyConnectionPoolConf", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询代理连接池规格配置
    ///
    /// 获取数据库代理连接池相关规格配置
    @inlinable
    public func describeProxyConnectionPoolConf(instanceId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProxyConnectionPoolConfResponse> {
        let input = DescribeProxyConnectionPoolConfRequest(instanceId: instanceId, offset: offset, limit: limit)
        return self.client.execute(action: "DescribeProxyConnectionPoolConf", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询代理连接池规格配置
    ///
    /// 获取数据库代理连接池相关规格配置
    @inlinable
    public func describeProxyConnectionPoolConf(instanceId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProxyConnectionPoolConfResponse {
        let input = DescribeProxyConnectionPoolConfRequest(instanceId: instanceId, offset: offset, limit: limit)
        return try await self.client.execute(action: "DescribeProxyConnectionPoolConf", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
