//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdb {
    /// DescribeAuditRules请求参数结构体
    public struct DescribeAuditRulesRequest: TCRequestModel {
        /// 审计规则 ID。
        public let ruleId: String?
        
        /// 审计规则名称。支持按审计规则名称进行模糊匹配查询。
        public let ruleName: String?
        
        /// 分页大小参数。默认值为 20，最小值为 1，最大值为 100。
        public let limit: Int64?
        
        /// 分页偏移量。默认值为0。
        public let offset: Int64?
        
        public init (ruleId: String? = nil, ruleName: String? = nil, limit: Int64? = nil, offset: Int64? = nil) {
            self.ruleId = ruleId
            self.ruleName = ruleName
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeAuditRules返回参数结构体
    public struct DescribeAuditRulesResponse: TCResponseModel {
        /// 符合条件的审计规则个数。
        public let totalCount: Int64
        
        /// 审计规则详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [AuditRule]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
            case requestId = "RequestId"
        }
    }
    
    /// 查询审计规则
    ///
    /// 本接口(DescribeAuditRules)用于查询用户在当前地域的审计规则。
    @inlinable
    public func describeAuditRules(_ input: DescribeAuditRulesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAuditRulesResponse > {
        self.client.execute(action: "DescribeAuditRules", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询审计规则
    ///
    /// 本接口(DescribeAuditRules)用于查询用户在当前地域的审计规则。
    @inlinable
    public func describeAuditRules(_ input: DescribeAuditRulesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAuditRulesResponse {
        try await self.client.execute(action: "DescribeAuditRules", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询审计规则
    ///
    /// 本接口(DescribeAuditRules)用于查询用户在当前地域的审计规则。
    @inlinable
    public func describeAuditRules(ruleId: String? = nil, ruleName: String? = nil, limit: Int64? = nil, offset: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAuditRulesResponse > {
        self.describeAuditRules(DescribeAuditRulesRequest(ruleId: ruleId, ruleName: ruleName, limit: limit, offset: offset), logger: logger, on: eventLoop)
    }
    
    /// 查询审计规则
    ///
    /// 本接口(DescribeAuditRules)用于查询用户在当前地域的审计规则。
    @inlinable
    public func describeAuditRules(ruleId: String? = nil, ruleName: String? = nil, limit: Int64? = nil, offset: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAuditRulesResponse {
        try await self.describeAuditRules(DescribeAuditRulesRequest(ruleId: ruleId, ruleName: ruleName, limit: limit, offset: offset), logger: logger, on: eventLoop)
    }
}
