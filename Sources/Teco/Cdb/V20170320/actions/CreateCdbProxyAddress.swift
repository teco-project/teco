//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// CreateCdbProxyAddress请求参数结构体
    public struct CreateCdbProxyAddressRequest: TCRequest {
        /// 代理组ID
        public let proxyGroupId: String

        /// 权重分配模式，
        /// 系统自动分配："system"， 自定义："custom"
        public let weightMode: String

        /// 是否开启延迟剔除，取值："true" | "false"
        public let isKickOut: Bool

        /// 最小保留数量，最小取值：0
        public let minCount: UInt64

        /// 延迟剔除阈值，最小取值：0
        public let maxDelay: UInt64

        /// 是否开启故障转移，取值："true" | "false"
        public let failOver: Bool

        /// 是否自动添加RO，取值："true" | "false"
        public let autoAddRo: Bool

        /// 是否是只读，取值："true" | "false"
        public let readOnly: Bool

        /// 是否开启事务分离，取值："true" | "false"
        public let transSplit: Bool

        /// 读写权重分配
        public let proxyAllocation: [ProxyAllocation]

        /// 私有网络ID
        public let uniqVpcId: String

        /// 私有子网ID
        public let uniqSubnetId: String

        /// 是否开启连接池
        public let connectionPool: Bool?

        /// 描述
        public let desc: String?

        /// IP地址
        public let vip: String?

        /// 端口
        public let vPort: UInt64?

        /// 安全组
        public let securityGroup: [String]?

        /// 连接池类型。可选值 transaction（事务级别连接池），connection（会话级别连接池），ConnectionPool为true时生效。
        public let connectionPoolType: String?

        public init(proxyGroupId: String, weightMode: String, isKickOut: Bool, minCount: UInt64, maxDelay: UInt64, failOver: Bool, autoAddRo: Bool, readOnly: Bool, transSplit: Bool, proxyAllocation: [ProxyAllocation], uniqVpcId: String, uniqSubnetId: String, connectionPool: Bool? = nil, desc: String? = nil, vip: String? = nil, vPort: UInt64? = nil, securityGroup: [String]? = nil, connectionPoolType: String? = nil) {
            self.proxyGroupId = proxyGroupId
            self.weightMode = weightMode
            self.isKickOut = isKickOut
            self.minCount = minCount
            self.maxDelay = maxDelay
            self.failOver = failOver
            self.autoAddRo = autoAddRo
            self.readOnly = readOnly
            self.transSplit = transSplit
            self.proxyAllocation = proxyAllocation
            self.uniqVpcId = uniqVpcId
            self.uniqSubnetId = uniqSubnetId
            self.connectionPool = connectionPool
            self.desc = desc
            self.vip = vip
            self.vPort = vPort
            self.securityGroup = securityGroup
            self.connectionPoolType = connectionPoolType
        }

        enum CodingKeys: String, CodingKey {
            case proxyGroupId = "ProxyGroupId"
            case weightMode = "WeightMode"
            case isKickOut = "IsKickOut"
            case minCount = "MinCount"
            case maxDelay = "MaxDelay"
            case failOver = "FailOver"
            case autoAddRo = "AutoAddRo"
            case readOnly = "ReadOnly"
            case transSplit = "TransSplit"
            case proxyAllocation = "ProxyAllocation"
            case uniqVpcId = "UniqVpcId"
            case uniqSubnetId = "UniqSubnetId"
            case connectionPool = "ConnectionPool"
            case desc = "Desc"
            case vip = "Vip"
            case vPort = "VPort"
            case securityGroup = "SecurityGroup"
            case connectionPoolType = "ConnectionPoolType"
        }
    }

    /// CreateCdbProxyAddress返回参数结构体
    public struct CreateCdbProxyAddressResponse: TCResponse {
        /// 异步任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asyncRequestId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case asyncRequestId = "AsyncRequestId"
            case requestId = "RequestId"
        }
    }

    /// 创建数据库代理地址
    ///
    /// 数据库代理增加代理地址
    @inlinable
    public func createCdbProxyAddress(_ input: CreateCdbProxyAddressRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCdbProxyAddressResponse> {
        self.client.execute(action: "CreateCdbProxyAddress", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理地址
    ///
    /// 数据库代理增加代理地址
    @inlinable
    public func createCdbProxyAddress(_ input: CreateCdbProxyAddressRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCdbProxyAddressResponse {
        try await self.client.execute(action: "CreateCdbProxyAddress", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据库代理地址
    ///
    /// 数据库代理增加代理地址
    @inlinable
    public func createCdbProxyAddress(proxyGroupId: String, weightMode: String, isKickOut: Bool, minCount: UInt64, maxDelay: UInt64, failOver: Bool, autoAddRo: Bool, readOnly: Bool, transSplit: Bool, proxyAllocation: [ProxyAllocation], uniqVpcId: String, uniqSubnetId: String, connectionPool: Bool? = nil, desc: String? = nil, vip: String? = nil, vPort: UInt64? = nil, securityGroup: [String]? = nil, connectionPoolType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCdbProxyAddressResponse> {
        self.createCdbProxyAddress(.init(proxyGroupId: proxyGroupId, weightMode: weightMode, isKickOut: isKickOut, minCount: minCount, maxDelay: maxDelay, failOver: failOver, autoAddRo: autoAddRo, readOnly: readOnly, transSplit: transSplit, proxyAllocation: proxyAllocation, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, connectionPool: connectionPool, desc: desc, vip: vip, vPort: vPort, securityGroup: securityGroup, connectionPoolType: connectionPoolType), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理地址
    ///
    /// 数据库代理增加代理地址
    @inlinable
    public func createCdbProxyAddress(proxyGroupId: String, weightMode: String, isKickOut: Bool, minCount: UInt64, maxDelay: UInt64, failOver: Bool, autoAddRo: Bool, readOnly: Bool, transSplit: Bool, proxyAllocation: [ProxyAllocation], uniqVpcId: String, uniqSubnetId: String, connectionPool: Bool? = nil, desc: String? = nil, vip: String? = nil, vPort: UInt64? = nil, securityGroup: [String]? = nil, connectionPoolType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCdbProxyAddressResponse {
        try await self.createCdbProxyAddress(.init(proxyGroupId: proxyGroupId, weightMode: weightMode, isKickOut: isKickOut, minCount: minCount, maxDelay: maxDelay, failOver: failOver, autoAddRo: autoAddRo, readOnly: readOnly, transSplit: transSplit, proxyAllocation: proxyAllocation, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, connectionPool: connectionPool, desc: desc, vip: vip, vPort: vPort, securityGroup: securityGroup, connectionPoolType: connectionPoolType), region: region, logger: logger, on: eventLoop)
    }
}
