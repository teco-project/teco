//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdb {
    /// OpenDBInstanceGTID请求参数结构体
    public struct OpenDBInstanceGTIDRequest: TCRequestModel {
        /// 实例 ID，格式如：cdb-c1nl9rpv，与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// OpenDBInstanceGTID返回参数结构体
    public struct OpenDBInstanceGTIDResponse: TCResponseModel {
        /// 异步任务的请求 ID，可使用此 ID 查询异步任务的执行结果。
        public let asyncRequestId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case asyncRequestId = "AsyncRequestId"
            case requestId = "RequestId"
        }
    }

    /// 开启实例的GTID
    ///
    /// 本接口(OpenDBInstanceGTID)用于开启云数据库实例的 GTID，只支持版本为 5.6 以及以上的实例。
    @inlinable
    public func openDBInstanceGTID(_ input: OpenDBInstanceGTIDRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<OpenDBInstanceGTIDResponse> {
        self.client.execute(action: "OpenDBInstanceGTID", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开启实例的GTID
    ///
    /// 本接口(OpenDBInstanceGTID)用于开启云数据库实例的 GTID，只支持版本为 5.6 以及以上的实例。
    @inlinable
    public func openDBInstanceGTID(_ input: OpenDBInstanceGTIDRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OpenDBInstanceGTIDResponse {
        try await self.client.execute(action: "OpenDBInstanceGTID", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开启实例的GTID
    ///
    /// 本接口(OpenDBInstanceGTID)用于开启云数据库实例的 GTID，只支持版本为 5.6 以及以上的实例。
    @inlinable
    public func openDBInstanceGTID(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<OpenDBInstanceGTIDResponse> {
        self.openDBInstanceGTID(OpenDBInstanceGTIDRequest(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 开启实例的GTID
    ///
    /// 本接口(OpenDBInstanceGTID)用于开启云数据库实例的 GTID，只支持版本为 5.6 以及以上的实例。
    @inlinable
    public func openDBInstanceGTID(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OpenDBInstanceGTIDResponse {
        try await self.openDBInstanceGTID(OpenDBInstanceGTIDRequest(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
