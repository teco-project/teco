//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdb {
    /// OfflineIsolatedInstances请求参数结构体
    public struct OfflineIsolatedInstancesRequest: TCRequestModel {
        /// 实例 ID，格式如：cdb-c1nl9rpv，与云数据库控制台页面中显示的实例 ID 相同。
        public let instanceIds: [String]
        
        public init (instanceIds: [String]) {
            self.instanceIds = instanceIds
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
        }
    }
    
    /// OfflineIsolatedInstances返回参数结构体
    public struct OfflineIsolatedInstancesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 下线隔离状态的云数据库实例
    ///
    /// 本接口(OfflineIsolatedInstances)用于立即下线隔离状态的云数据库实例。进行操作的实例状态必须为隔离状态，即通过 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口查询到 Status 值为 5 的实例。
    /// 该接口为异步操作，部分资源的回收可能存在延迟。您可以通过使用 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口，指定实例 InstanceId 和状态 Status 为 [5,6,7] 进行查询，若返回实例为空，则实例资源已全部释放。
    /// 注意，实例下线后，相关资源和数据将无法找回，请谨慎操作。
    @inlinable
    public func offlineIsolatedInstances(_ input: OfflineIsolatedInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < OfflineIsolatedInstancesResponse > {
        self.client.execute(action: "OfflineIsolatedInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 下线隔离状态的云数据库实例
    ///
    /// 本接口(OfflineIsolatedInstances)用于立即下线隔离状态的云数据库实例。进行操作的实例状态必须为隔离状态，即通过 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口查询到 Status 值为 5 的实例。
    /// 该接口为异步操作，部分资源的回收可能存在延迟。您可以通过使用 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口，指定实例 InstanceId 和状态 Status 为 [5,6,7] 进行查询，若返回实例为空，则实例资源已全部释放。
    /// 注意，实例下线后，相关资源和数据将无法找回，请谨慎操作。
    @inlinable
    public func offlineIsolatedInstances(_ input: OfflineIsolatedInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OfflineIsolatedInstancesResponse {
        try await self.client.execute(action: "OfflineIsolatedInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 下线隔离状态的云数据库实例
    ///
    /// 本接口(OfflineIsolatedInstances)用于立即下线隔离状态的云数据库实例。进行操作的实例状态必须为隔离状态，即通过 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口查询到 Status 值为 5 的实例。
    /// 该接口为异步操作，部分资源的回收可能存在延迟。您可以通过使用 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口，指定实例 InstanceId 和状态 Status 为 [5,6,7] 进行查询，若返回实例为空，则实例资源已全部释放。
    /// 注意，实例下线后，相关资源和数据将无法找回，请谨慎操作。
    @inlinable
    public func offlineIsolatedInstances(instanceIds: [String], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < OfflineIsolatedInstancesResponse > {
        self.offlineIsolatedInstances(OfflineIsolatedInstancesRequest(instanceIds: instanceIds), logger: logger, on: eventLoop)
    }
    
    /// 下线隔离状态的云数据库实例
    ///
    /// 本接口(OfflineIsolatedInstances)用于立即下线隔离状态的云数据库实例。进行操作的实例状态必须为隔离状态，即通过 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口查询到 Status 值为 5 的实例。
    /// 该接口为异步操作，部分资源的回收可能存在延迟。您可以通过使用 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口，指定实例 InstanceId 和状态 Status 为 [5,6,7] 进行查询，若返回实例为空，则实例资源已全部释放。
    /// 注意，实例下线后，相关资源和数据将无法找回，请谨慎操作。
    @inlinable
    public func offlineIsolatedInstances(instanceIds: [String], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OfflineIsolatedInstancesResponse {
        try await self.offlineIsolatedInstances(OfflineIsolatedInstancesRequest(instanceIds: instanceIds), logger: logger, on: eventLoop)
    }
}
