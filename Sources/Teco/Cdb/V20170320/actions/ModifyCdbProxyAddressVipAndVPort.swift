//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// ModifyCdbProxyAddressVipAndVPort请求参数结构体
    public struct ModifyCdbProxyAddressVipAndVPortRequest: TCRequest {
        /// 代理组ID
        public let proxyGroupId: String

        /// 代理组地址ID
        public let proxyAddressId: String

        /// 私有网络ID
        public let uniqVpcId: String

        /// 私有子网ID
        public let uniqSubnetId: String

        /// IP地址
        public let vip: String?

        /// 端口
        public let vPort: UInt64?

        /// 旧IP地址回收时间
        public let releaseDuration: UInt64?

        public init(proxyGroupId: String, proxyAddressId: String, uniqVpcId: String, uniqSubnetId: String, vip: String? = nil, vPort: UInt64? = nil, releaseDuration: UInt64? = nil) {
            self.proxyGroupId = proxyGroupId
            self.proxyAddressId = proxyAddressId
            self.uniqVpcId = uniqVpcId
            self.uniqSubnetId = uniqSubnetId
            self.vip = vip
            self.vPort = vPort
            self.releaseDuration = releaseDuration
        }

        enum CodingKeys: String, CodingKey {
            case proxyGroupId = "ProxyGroupId"
            case proxyAddressId = "ProxyAddressId"
            case uniqVpcId = "UniqVpcId"
            case uniqSubnetId = "UniqSubnetId"
            case vip = "Vip"
            case vPort = "VPort"
            case releaseDuration = "ReleaseDuration"
        }
    }

    /// ModifyCdbProxyAddressVipAndVPort返回参数结构体
    public struct ModifyCdbProxyAddressVipAndVPortResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改数据库代理地址VPC
    ///
    /// 修改数据库代理地址VPC信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressVipAndVPort(_ input: ModifyCdbProxyAddressVipAndVPortRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCdbProxyAddressVipAndVPortResponse> {
        self.client.execute(action: "ModifyCdbProxyAddressVipAndVPort", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改数据库代理地址VPC
    ///
    /// 修改数据库代理地址VPC信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressVipAndVPort(_ input: ModifyCdbProxyAddressVipAndVPortRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCdbProxyAddressVipAndVPortResponse {
        try await self.client.execute(action: "ModifyCdbProxyAddressVipAndVPort", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改数据库代理地址VPC
    ///
    /// 修改数据库代理地址VPC信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressVipAndVPort(proxyGroupId: String, proxyAddressId: String, uniqVpcId: String, uniqSubnetId: String, vip: String? = nil, vPort: UInt64? = nil, releaseDuration: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCdbProxyAddressVipAndVPortResponse> {
        self.modifyCdbProxyAddressVipAndVPort(.init(proxyGroupId: proxyGroupId, proxyAddressId: proxyAddressId, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, vip: vip, vPort: vPort, releaseDuration: releaseDuration), region: region, logger: logger, on: eventLoop)
    }

    /// 修改数据库代理地址VPC
    ///
    /// 修改数据库代理地址VPC信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressVipAndVPort(proxyGroupId: String, proxyAddressId: String, uniqVpcId: String, uniqSubnetId: String, vip: String? = nil, vPort: UInt64? = nil, releaseDuration: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCdbProxyAddressVipAndVPortResponse {
        try await self.modifyCdbProxyAddressVipAndVPort(.init(proxyGroupId: proxyGroupId, proxyAddressId: proxyAddressId, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, vip: vip, vPort: vPort, releaseDuration: releaseDuration), region: region, logger: logger, on: eventLoop)
    }
}
