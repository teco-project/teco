//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// InitDBInstances请求参数结构体
    public struct InitDBInstancesRequest: TCRequestModel {
        /// 实例ID，格式如：cdb-c1nl9rpv，与云数据库控制台页面中显示的实例ID相同，可使用[查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口获取，其值为输出参数中字段 InstanceId 的值。
        public let instanceIds: [String]

        /// 实例新的密码，密码规则：8-64个字符，至少包含字母、数字、字符（支持的字符：!@#$%^*()）中的两种。
        public let newPassword: String

        /// 实例的参数列表，目前支持设置“character_set_server”、“lower_case_table_names”参数。其中，“character_set_server”参数可选值为["utf8","latin1","gbk","utf8mb4"]；“lower_case_table_names”可选值为[“0”,“1”]。
        public let parameters: [ParamInfo]

        /// 实例的端口，取值范围为[1024, 65535]
        public let vport: Int64?

        public init(instanceIds: [String], newPassword: String, parameters: [ParamInfo], vport: Int64? = nil) {
            self.instanceIds = instanceIds
            self.newPassword = newPassword
            self.parameters = parameters
            self.vport = vport
        }

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case newPassword = "NewPassword"
            case parameters = "Parameters"
            case vport = "Vport"
        }
    }

    /// InitDBInstances返回参数结构体
    public struct InitDBInstancesResponse: TCResponseModel {
        /// 异步任务的请求ID数组，可使用此ID查询异步任务的执行结果
        public let asyncRequestIds: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case asyncRequestIds = "AsyncRequestIds"
            case requestId = "RequestId"
        }
    }

    /// 初始化新实例（该接口已经不再维护，不建议使用）
    ///
    /// 本接口(InitDBInstances)用于初始化云数据库实例，包括初始化密码、默认字符集、实例端口号等。该接口已经废弃，在发货接口CreateDBInstance、CreateDBInstanceHour可以直接使用参数Password设置密码，使用参数ParamList设置字符集，使用参数Port设置端口号。
    @available(*, unavailable, message: "该接口不再维护，参考CreateDBInstance+API文档，在发货时即可完成初始化。")
    @inlinable
    public func initDBInstances(_ input: InitDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InitDBInstancesResponse> {
        fatalError("InitDBInstances is no longer available.")
    }

    /// 初始化新实例（该接口已经不再维护，不建议使用）
    ///
    /// 本接口(InitDBInstances)用于初始化云数据库实例，包括初始化密码、默认字符集、实例端口号等。该接口已经废弃，在发货接口CreateDBInstance、CreateDBInstanceHour可以直接使用参数Password设置密码，使用参数ParamList设置字符集，使用参数Port设置端口号。
    @available(*, unavailable, message: "该接口不再维护，参考CreateDBInstance+API文档，在发货时即可完成初始化。")
    @inlinable
    public func initDBInstances(_ input: InitDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InitDBInstancesResponse {
        fatalError("InitDBInstances is no longer available.")
    }

    /// 初始化新实例（该接口已经不再维护，不建议使用）
    ///
    /// 本接口(InitDBInstances)用于初始化云数据库实例，包括初始化密码、默认字符集、实例端口号等。该接口已经废弃，在发货接口CreateDBInstance、CreateDBInstanceHour可以直接使用参数Password设置密码，使用参数ParamList设置字符集，使用参数Port设置端口号。
    @available(*, unavailable, message: "该接口不再维护，参考CreateDBInstance+API文档，在发货时即可完成初始化。")
    @inlinable
    public func initDBInstances(instanceIds: [String], newPassword: String, parameters: [ParamInfo], vport: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InitDBInstancesResponse> {
        fatalError("InitDBInstances is no longer available.")
    }

    /// 初始化新实例（该接口已经不再维护，不建议使用）
    ///
    /// 本接口(InitDBInstances)用于初始化云数据库实例，包括初始化密码、默认字符集、实例端口号等。该接口已经废弃，在发货接口CreateDBInstance、CreateDBInstanceHour可以直接使用参数Password设置密码，使用参数ParamList设置字符集，使用参数Port设置端口号。
    @available(*, unavailable, message: "该接口不再维护，参考CreateDBInstance+API文档，在发货时即可完成初始化。")
    @inlinable
    public func initDBInstances(instanceIds: [String], newPassword: String, parameters: [ParamInfo], vport: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InitDBInstancesResponse {
        fatalError("InitDBInstances is no longer available.")
    }
}
