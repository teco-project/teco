//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdb {
    /// ModifyCdbProxyAddressDesc请求参数结构体
    public struct ModifyCdbProxyAddressDescRequest: TCRequestModel {
        /// 代理组ID
        public let proxyGroupId: String

        /// 代理组地址ID
        public let proxyAddressId: String

        /// 描述
        public let desc: String?

        public init(proxyGroupId: String, proxyAddressId: String, desc: String? = nil) {
            self.proxyGroupId = proxyGroupId
            self.proxyAddressId = proxyAddressId
            self.desc = desc
        }

        enum CodingKeys: String, CodingKey {
            case proxyGroupId = "ProxyGroupId"
            case proxyAddressId = "ProxyAddressId"
            case desc = "Desc"
        }
    }

    /// ModifyCdbProxyAddressDesc返回参数结构体
    public struct ModifyCdbProxyAddressDescResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改代理地址描述
    ///
    /// 修改代理地址描述信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressDesc(_ input: ModifyCdbProxyAddressDescRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCdbProxyAddressDescResponse> {
        self.client.execute(action: "ModifyCdbProxyAddressDesc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改代理地址描述
    ///
    /// 修改代理地址描述信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressDesc(_ input: ModifyCdbProxyAddressDescRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCdbProxyAddressDescResponse {
        try await self.client.execute(action: "ModifyCdbProxyAddressDesc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改代理地址描述
    ///
    /// 修改代理地址描述信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressDesc(proxyGroupId: String, proxyAddressId: String, desc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCdbProxyAddressDescResponse> {
        self.modifyCdbProxyAddressDesc(.init(proxyGroupId: proxyGroupId, proxyAddressId: proxyAddressId, desc: desc), region: region, logger: logger, on: eventLoop)
    }

    /// 修改代理地址描述
    ///
    /// 修改代理地址描述信息
    @inlinable @discardableResult
    public func modifyCdbProxyAddressDesc(proxyGroupId: String, proxyAddressId: String, desc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCdbProxyAddressDescResponse {
        try await self.modifyCdbProxyAddressDesc(.init(proxyGroupId: proxyGroupId, proxyAddressId: proxyAddressId, desc: desc), region: region, logger: logger, on: eventLoop)
    }
}
