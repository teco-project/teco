//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudstudio {
    /// ModifyWorkspace请求参数结构体
    public struct ModifyWorkspaceRequest: TCRequestModel {
        /// 工作空间 SpaceKey. 更新该工作空间的属性
        public let spaceKey: String

        /// 工作空间名称
        public let name: String?

        /// 工作空间描述
        public let description: String?

        /// 工作空间规格。STANDARD: 2C4G, CALCULATION: 4C8G, PROFESSION: 8C16G. 默认是 STANDARD。
        public let specs: String?

        /// 环境变量. 会被注入到工作空间中
        public let envs: [Env]?

        /// 预装插件. 工作空间启动时, 会自动安装这些插件
        public let extensions: [String]?

        /// 工作空间生命周期钩子.  分为三个阶段 init, start, destroy. 分别表示工作空间数据初始化阶段, 工作空间启动阶段, 工作空间关闭阶段.  用户可以自定义 shell 命令.
        public let lifecycle: LifeCycle?

        public init(spaceKey: String, name: String? = nil, description: String? = nil, specs: String? = nil, envs: [Env]? = nil, extensions: [String]? = nil, lifecycle: LifeCycle? = nil) {
            self.spaceKey = spaceKey
            self.name = name
            self.description = description
            self.specs = specs
            self.envs = envs
            self.extensions = extensions
            self.lifecycle = lifecycle
        }

        enum CodingKeys: String, CodingKey {
            case spaceKey = "SpaceKey"
            case name = "Name"
            case description = "Description"
            case specs = "Specs"
            case envs = "Envs"
            case extensions = "Extensions"
            case lifecycle = "Lifecycle"
        }
    }

    /// ModifyWorkspace返回参数结构体
    public struct ModifyWorkspaceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改工作空间
    @inlinable @discardableResult
    public func modifyWorkspace(_ input: ModifyWorkspaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyWorkspaceResponse> {
        self.client.execute(action: "ModifyWorkspace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改工作空间
    @inlinable @discardableResult
    public func modifyWorkspace(_ input: ModifyWorkspaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyWorkspaceResponse {
        try await self.client.execute(action: "ModifyWorkspace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改工作空间
    @inlinable @discardableResult
    public func modifyWorkspace(spaceKey: String, name: String? = nil, description: String? = nil, specs: String? = nil, envs: [Env]? = nil, extensions: [String]? = nil, lifecycle: LifeCycle? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyWorkspaceResponse> {
        self.modifyWorkspace(.init(spaceKey: spaceKey, name: name, description: description, specs: specs, envs: envs, extensions: extensions, lifecycle: lifecycle), region: region, logger: logger, on: eventLoop)
    }

    /// 修改工作空间
    @inlinable @discardableResult
    public func modifyWorkspace(spaceKey: String, name: String? = nil, description: String? = nil, specs: String? = nil, envs: [Env]? = nil, extensions: [String]? = nil, lifecycle: LifeCycle? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyWorkspaceResponse {
        try await self.modifyWorkspace(.init(spaceKey: spaceKey, name: name, description: description, specs: specs, envs: envs, extensions: extensions, lifecycle: lifecycle), region: region, logger: logger, on: eventLoop)
    }
}
