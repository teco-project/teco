//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudstudio {
    /// CreateWorkspaceToken请求参数结构体
    public struct CreateWorkspaceTokenRequest: TCRequest {
        /// 工作空间 SpaceKey
        public let spaceKey: String

        /// token过期时间，单位是秒，默认 3600
        public let tokenExpiredLimitSec: UInt64?

        /// token 授权策略，可选值为 workspace-run-only, all。默认为 all
        public let policies: [String]?

        public init(spaceKey: String, tokenExpiredLimitSec: UInt64? = nil, policies: [String]? = nil) {
            self.spaceKey = spaceKey
            self.tokenExpiredLimitSec = tokenExpiredLimitSec
            self.policies = policies
        }

        enum CodingKeys: String, CodingKey {
            case spaceKey = "SpaceKey"
            case tokenExpiredLimitSec = "TokenExpiredLimitSec"
            case policies = "Policies"
        }
    }

    /// CreateWorkspaceToken返回参数结构体
    public struct CreateWorkspaceTokenResponse: TCResponse {
        /// 访问工作空间临时凭证
        public let token: String

        /// token 过期时间
        public let expiredTime: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case token = "Token"
            case expiredTime = "ExpiredTime"
            case requestId = "RequestId"
        }
    }

    /// 创建工作空间临时访问凭证
    ///
    /// 创建工作空间临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceToken(_ input: CreateWorkspaceTokenRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWorkspaceTokenResponse> {
        self.client.execute(action: "CreateWorkspaceToken", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建工作空间临时访问凭证
    ///
    /// 创建工作空间临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceToken(_ input: CreateWorkspaceTokenRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWorkspaceTokenResponse {
        try await self.client.execute(action: "CreateWorkspaceToken", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建工作空间临时访问凭证
    ///
    /// 创建工作空间临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceToken(spaceKey: String, tokenExpiredLimitSec: UInt64? = nil, policies: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWorkspaceTokenResponse> {
        self.createWorkspaceToken(.init(spaceKey: spaceKey, tokenExpiredLimitSec: tokenExpiredLimitSec, policies: policies), region: region, logger: logger, on: eventLoop)
    }

    /// 创建工作空间临时访问凭证
    ///
    /// 创建工作空间临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceToken(spaceKey: String, tokenExpiredLimitSec: UInt64? = nil, policies: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWorkspaceTokenResponse {
        try await self.createWorkspaceToken(.init(spaceKey: spaceKey, tokenExpiredLimitSec: tokenExpiredLimitSec, policies: policies), region: region, logger: logger, on: eventLoop)
    }
}
