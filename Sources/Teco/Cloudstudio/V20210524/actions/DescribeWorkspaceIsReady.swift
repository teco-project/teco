//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudstudio {
    /// DescribeWorkspaceIsReady请求参数结构体
    public struct DescribeWorkspaceIsReadyRequest: TCRequestModel {
        /// 工作空间 spaceKey
        public let spaceKey: String

        public init(spaceKey: String) {
            self.spaceKey = spaceKey
        }

        enum CodingKeys: String, CodingKey {
            case spaceKey = "SpaceKey"
        }
    }

    /// DescribeWorkspaceIsReady返回参数结构体
    public struct DescribeWorkspaceIsReadyResponse: TCResponseModel {
        /// 工作空间是否就绪
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取工作空间是否已经启动就绪
    @inlinable
    public func describeWorkspaceIsReady(_ input: DescribeWorkspaceIsReadyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkspaceIsReadyResponse> {
        self.client.execute(action: "DescribeWorkspaceIsReady", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取工作空间是否已经启动就绪
    @inlinable
    public func describeWorkspaceIsReady(_ input: DescribeWorkspaceIsReadyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkspaceIsReadyResponse {
        try await self.client.execute(action: "DescribeWorkspaceIsReady", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取工作空间是否已经启动就绪
    @inlinable
    public func describeWorkspaceIsReady(spaceKey: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkspaceIsReadyResponse> {
        self.describeWorkspaceIsReady(.init(spaceKey: spaceKey), region: region, logger: logger, on: eventLoop)
    }

    /// 获取工作空间是否已经启动就绪
    @inlinable
    public func describeWorkspaceIsReady(spaceKey: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkspaceIsReadyResponse {
        try await self.describeWorkspaceIsReady(.init(spaceKey: spaceKey), region: region, logger: logger, on: eventLoop)
    }
}
