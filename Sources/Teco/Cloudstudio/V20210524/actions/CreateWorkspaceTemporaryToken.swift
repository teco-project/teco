//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudstudio {
    /// CreateWorkspaceTemporaryToken请求参数结构体
    public struct CreateWorkspaceTemporaryTokenRequest: TCRequest {
        /// 创建工作空间凭证 DTO
        public let workspaceTokenDTO: WorkspaceTokenDTO

        public init(workspaceTokenDTO: WorkspaceTokenDTO) {
            self.workspaceTokenDTO = workspaceTokenDTO
        }

        enum CodingKeys: String, CodingKey {
            case workspaceTokenDTO = "WorkspaceTokenDTO"
        }
    }

    /// CreateWorkspaceTemporaryToken返回参数结构体
    public struct CreateWorkspaceTemporaryTokenResponse: TCResponse {
        /// 工作空间临时访问 token 信息
        public let data: WorkspaceTokenInfoV0

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 为工作空间创建临时访问凭证
    ///
    /// 为工作空间创建临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceTemporaryToken(_ input: CreateWorkspaceTemporaryTokenRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWorkspaceTemporaryTokenResponse> {
        self.client.execute(action: "CreateWorkspaceTemporaryToken", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 为工作空间创建临时访问凭证
    ///
    /// 为工作空间创建临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceTemporaryToken(_ input: CreateWorkspaceTemporaryTokenRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWorkspaceTemporaryTokenResponse {
        try await self.client.execute(action: "CreateWorkspaceTemporaryToken", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 为工作空间创建临时访问凭证
    ///
    /// 为工作空间创建临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceTemporaryToken(workspaceTokenDTO: WorkspaceTokenDTO, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWorkspaceTemporaryTokenResponse> {
        self.createWorkspaceTemporaryToken(.init(workspaceTokenDTO: workspaceTokenDTO), region: region, logger: logger, on: eventLoop)
    }

    /// 为工作空间创建临时访问凭证
    ///
    /// 为工作空间创建临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
    @inlinable
    public func createWorkspaceTemporaryToken(workspaceTokenDTO: WorkspaceTokenDTO, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWorkspaceTemporaryTokenResponse {
        try await self.createWorkspaceTemporaryToken(.init(workspaceTokenDTO: workspaceTokenDTO), region: region, logger: logger, on: eventLoop)
    }
}
