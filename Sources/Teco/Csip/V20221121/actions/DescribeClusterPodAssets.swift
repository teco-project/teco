//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Csip {
    /// DescribeClusterPodAssets请求参数结构体
    public struct DescribeClusterPodAssetsRequest: TCRequestModel {
        /// 过滤
        public let filter: Filter?

        public init(filter: Filter? = nil) {
            self.filter = filter
        }

        enum CodingKeys: String, CodingKey {
            case filter = "Filter"
        }
    }

    /// DescribeClusterPodAssets返回参数结构体
    public struct DescribeClusterPodAssetsResponse: TCResponseModel {
        /// 列表
        public let data: [AssetClusterPod]

        /// 总数
        public let totalCount: Int64

        /// 集群pod状态枚举
        public let podStatusList: [FilterDataObject]

        /// 命名空间枚举
        public let namespaceList: [FilterDataObject]

        /// 地域枚举
        public let regionList: [FilterDataObject]

        /// 租户枚举
        public let appIdList: [FilterDataObject]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case totalCount = "TotalCount"
            case podStatusList = "PodStatusList"
            case namespaceList = "NamespaceList"
            case regionList = "RegionList"
            case appIdList = "AppIdList"
            case requestId = "RequestId"
        }
    }

    /// 集群pod列表
    @inlinable
    public func describeClusterPodAssets(_ input: DescribeClusterPodAssetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterPodAssetsResponse> {
        self.client.execute(action: "DescribeClusterPodAssets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 集群pod列表
    @inlinable
    public func describeClusterPodAssets(_ input: DescribeClusterPodAssetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterPodAssetsResponse {
        try await self.client.execute(action: "DescribeClusterPodAssets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 集群pod列表
    @inlinable
    public func describeClusterPodAssets(filter: Filter? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterPodAssetsResponse> {
        self.describeClusterPodAssets(.init(filter: filter), region: region, logger: logger, on: eventLoop)
    }

    /// 集群pod列表
    @inlinable
    public func describeClusterPodAssets(filter: Filter? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterPodAssetsResponse {
        try await self.describeClusterPodAssets(.init(filter: filter), region: region, logger: logger, on: eventLoop)
    }
}
