//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Csip {
    /// DescribeTaskLogList请求参数结构体
    public struct DescribeTaskLogListRequest: TCPaginatedRequest {
        /// 过滤内容
        public let filter: Filter?

        public init(filter: Filter? = nil) {
            self.filter = filter
        }

        enum CodingKeys: String, CodingKey {
            case filter = "Filter"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTaskLogListResponse) -> DescribeTaskLogListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.filter?.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(
                filter: {
                if let filter = self.filter {
                    return .init(limit: filter.limit, offset: (filter.offset ?? 0) + .init(response.getItems().count), order: filter.order, by: filter.by, filters: filter.filters, startTime: filter.startTime, endTime: filter.endTime)
                } else {
                    return .init(offset: .init(response.getItems().count))
                }
                }()
            )
        }
    }

    /// DescribeTaskLogList返回参数结构体
    public struct DescribeTaskLogListResponse: TCPaginatedResponse {
        /// 总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 报告列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [TaskLogInfo]?

        /// 待查看数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notViewNumber: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case data = "Data"
            case notViewNumber = "NotViewNumber"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TaskLogInfo`` list from the paginated response.
        public func getItems() -> [TaskLogInfo] {
            self.data ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取任务扫描报告列表
    @inlinable
    public func describeTaskLogList(_ input: DescribeTaskLogListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskLogListResponse> {
        self.client.execute(action: "DescribeTaskLogList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取任务扫描报告列表
    @inlinable
    public func describeTaskLogList(_ input: DescribeTaskLogListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskLogListResponse {
        try await self.client.execute(action: "DescribeTaskLogList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取任务扫描报告列表
    @inlinable
    public func describeTaskLogList(filter: Filter? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskLogListResponse> {
        self.describeTaskLogList(.init(filter: filter), region: region, logger: logger, on: eventLoop)
    }

    /// 获取任务扫描报告列表
    @inlinable
    public func describeTaskLogList(filter: Filter? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskLogListResponse {
        try await self.describeTaskLogList(.init(filter: filter), region: region, logger: logger, on: eventLoop)
    }

    /// 获取任务扫描报告列表
    @inlinable
    public func describeTaskLogListPaginated(_ input: DescribeTaskLogListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [TaskLogInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeTaskLogList, logger: logger, on: eventLoop)
    }

    /// 获取任务扫描报告列表
    @inlinable @discardableResult
    public func describeTaskLogListPaginated(_ input: DescribeTaskLogListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTaskLogListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTaskLogList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取任务扫描报告列表
    ///
    /// - Returns: `AsyncSequence`s of ``TaskLogInfo`` and ``DescribeTaskLogListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTaskLogListPaginator(_ input: DescribeTaskLogListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTaskLogListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTaskLogList, logger: logger, on: eventLoop)
    }
}
