//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Csip {
    /// DescribeSearchBugInfo请求参数结构体
    public struct DescribeSearchBugInfoRequest: TCRequest {
        public let id: String

        /// id=3时传入该参数
        public let cveId: String?

        public init(id: String, cveId: String? = nil) {
            self.id = id
            self.cveId = cveId
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case cveId = "CVEId"
        }
    }

    /// DescribeSearchBugInfo返回参数结构体
    public struct DescribeSearchBugInfoResponse: TCResponse {
        /// 漏洞信息和资产信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: DataSearchBug?

        /// 状态值，0：查询成功，非0：查询失败
        public let returnCode: Int64

        /// 状态信息，success：查询成功，fail：查询失败
        public let returnMsg: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case returnCode = "ReturnCode"
            case returnMsg = "ReturnMsg"
            case requestId = "RequestId"
        }
    }

    /// 查询漏洞信息
    ///
    /// 立体防护中心查询漏洞信息
    @inlinable
    public func describeSearchBugInfo(_ input: DescribeSearchBugInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSearchBugInfoResponse> {
        self.client.execute(action: "DescribeSearchBugInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询漏洞信息
    ///
    /// 立体防护中心查询漏洞信息
    @inlinable
    public func describeSearchBugInfo(_ input: DescribeSearchBugInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSearchBugInfoResponse {
        try await self.client.execute(action: "DescribeSearchBugInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询漏洞信息
    ///
    /// 立体防护中心查询漏洞信息
    @inlinable
    public func describeSearchBugInfo(id: String, cveId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSearchBugInfoResponse> {
        self.describeSearchBugInfo(.init(id: id, cveId: cveId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询漏洞信息
    ///
    /// 立体防护中心查询漏洞信息
    @inlinable
    public func describeSearchBugInfo(id: String, cveId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSearchBugInfoResponse {
        try await self.describeSearchBugInfo(.init(id: id, cveId: cveId), region: region, logger: logger, on: eventLoop)
    }
}
