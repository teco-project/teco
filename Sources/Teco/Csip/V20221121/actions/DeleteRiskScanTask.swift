//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Csip {
    /// DeleteRiskScanTask请求参数结构体
    public struct DeleteRiskScanTaskRequest: TCRequest {
        /// 任务id 列表
        public let taskIdList: [TaskIdListKey]

        public init(taskIdList: [TaskIdListKey]) {
            self.taskIdList = taskIdList
        }

        enum CodingKeys: String, CodingKey {
            case taskIdList = "TaskIdList"
        }
    }

    /// DeleteRiskScanTask返回参数结构体
    public struct DeleteRiskScanTaskResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除风险中心扫描任务
    @inlinable @discardableResult
    public func deleteRiskScanTask(_ input: DeleteRiskScanTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRiskScanTaskResponse> {
        self.client.execute(action: "DeleteRiskScanTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除风险中心扫描任务
    @inlinable @discardableResult
    public func deleteRiskScanTask(_ input: DeleteRiskScanTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRiskScanTaskResponse {
        try await self.client.execute(action: "DeleteRiskScanTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除风险中心扫描任务
    @inlinable @discardableResult
    public func deleteRiskScanTask(taskIdList: [TaskIdListKey], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRiskScanTaskResponse> {
        self.deleteRiskScanTask(.init(taskIdList: taskIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 删除风险中心扫描任务
    @inlinable @discardableResult
    public func deleteRiskScanTask(taskIdList: [TaskIdListKey], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRiskScanTaskResponse {
        try await self.deleteRiskScanTask(.init(taskIdList: taskIdList), region: region, logger: logger, on: eventLoop)
    }
}
