//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Csip {
    /// CreateRiskCenterScanTask请求参数结构体
    public struct CreateRiskCenterScanTaskRequest: TCRequestModel {
        /// 任务名称
        public let taskName: String

        /// 0-全扫，1-指定资产扫，2-排除资产扫，3-手动填写扫；1和2则Assets字段必填，3则SelfDefiningAssets必填
        public let scanAssetType: Int64

        /// 扫描项目；port/poc/weakpass/webcontent/configrisk
        public let scanItem: [String]

        /// 0-周期任务,1-立即扫描,2-定时扫描,3-自定义；0,2,3则ScanPlanContent必填
        public let scanPlanType: Int64

        /// 扫描资产信息列表
        public let assets: [TaskAssetObject]?

        /// 扫描计划详情
        public let scanPlanContent: String?

        /// ip/域名/url数组
        public let selfDefiningAssets: [String]?

        /// 高级配置
        public let taskAdvanceCFG: TaskAdvanceCFG?

        /// 体检模式，0-标准模式，1-快速模式，2-高级模式，默认标准模式
        public let taskMode: Int64?

        public init(taskName: String, scanAssetType: Int64, scanItem: [String], scanPlanType: Int64, assets: [TaskAssetObject]? = nil, scanPlanContent: String? = nil, selfDefiningAssets: [String]? = nil, taskAdvanceCFG: TaskAdvanceCFG? = nil, taskMode: Int64? = nil) {
            self.taskName = taskName
            self.scanAssetType = scanAssetType
            self.scanItem = scanItem
            self.scanPlanType = scanPlanType
            self.assets = assets
            self.scanPlanContent = scanPlanContent
            self.selfDefiningAssets = selfDefiningAssets
            self.taskAdvanceCFG = taskAdvanceCFG
            self.taskMode = taskMode
        }

        enum CodingKeys: String, CodingKey {
            case taskName = "TaskName"
            case scanAssetType = "ScanAssetType"
            case scanItem = "ScanItem"
            case scanPlanType = "ScanPlanType"
            case assets = "Assets"
            case scanPlanContent = "ScanPlanContent"
            case selfDefiningAssets = "SelfDefiningAssets"
            case taskAdvanceCFG = "TaskAdvanceCFG"
            case taskMode = "TaskMode"
        }
    }

    /// CreateRiskCenterScanTask返回参数结构体
    public struct CreateRiskCenterScanTaskResponse: TCResponseModel {
        /// 任务id
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 创建风险中心扫描任务
    @inlinable
    public func createRiskCenterScanTask(_ input: CreateRiskCenterScanTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRiskCenterScanTaskResponse> {
        self.client.execute(action: "CreateRiskCenterScanTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建风险中心扫描任务
    @inlinable
    public func createRiskCenterScanTask(_ input: CreateRiskCenterScanTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRiskCenterScanTaskResponse {
        try await self.client.execute(action: "CreateRiskCenterScanTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建风险中心扫描任务
    @inlinable
    public func createRiskCenterScanTask(taskName: String, scanAssetType: Int64, scanItem: [String], scanPlanType: Int64, assets: [TaskAssetObject]? = nil, scanPlanContent: String? = nil, selfDefiningAssets: [String]? = nil, taskAdvanceCFG: TaskAdvanceCFG? = nil, taskMode: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRiskCenterScanTaskResponse> {
        self.createRiskCenterScanTask(.init(taskName: taskName, scanAssetType: scanAssetType, scanItem: scanItem, scanPlanType: scanPlanType, assets: assets, scanPlanContent: scanPlanContent, selfDefiningAssets: selfDefiningAssets, taskAdvanceCFG: taskAdvanceCFG, taskMode: taskMode), region: region, logger: logger, on: eventLoop)
    }

    /// 创建风险中心扫描任务
    @inlinable
    public func createRiskCenterScanTask(taskName: String, scanAssetType: Int64, scanItem: [String], scanPlanType: Int64, assets: [TaskAssetObject]? = nil, scanPlanContent: String? = nil, selfDefiningAssets: [String]? = nil, taskAdvanceCFG: TaskAdvanceCFG? = nil, taskMode: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRiskCenterScanTaskResponse {
        try await self.createRiskCenterScanTask(.init(taskName: taskName, scanAssetType: scanAssetType, scanItem: scanItem, scanPlanType: scanPlanType, assets: assets, scanPlanContent: scanPlanContent, selfDefiningAssets: selfDefiningAssets, taskAdvanceCFG: taskAdvanceCFG, taskMode: taskMode), region: region, logger: logger, on: eventLoop)
    }
}
