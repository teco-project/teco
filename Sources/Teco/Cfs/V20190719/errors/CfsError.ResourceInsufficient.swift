//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCfsError {
    public struct ResourceInsufficient: TCErrorType {
        enum Code: String {
            case fileSystemLimitExceeded = "ResourceInsufficient.FileSystemLimitExceeded"
            case pgroupNumberLimitExceeded = "ResourceInsufficient.PgroupNumberLimitExceeded"
            case regionSoldOut = "ResourceInsufficient.RegionSoldOut"
            case ruleLimitExceeded = "ResourceInsufficient.RuleLimitExceeded"
            case subnetIpAllOccupied = "ResourceInsufficient.SubnetIpAllOccupied"
            case tagLimitExceeded = "ResourceInsufficient.TagLimitExceeded"
            case tagQuotasExceeded = "ResourceInsufficient.TagQuotasExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 文件系统数量达到上限。
        public static var fileSystemLimitExceeded: ResourceInsufficient {
            ResourceInsufficient(.fileSystemLimitExceeded)
        }
        
        /// 权限组数量达到上限。
        public static var pgroupNumberLimitExceeded: ResourceInsufficient {
            ResourceInsufficient(.pgroupNumberLimitExceeded)
        }
        
        /// 区域资源售罄。
        public static var regionSoldOut: ResourceInsufficient {
            ResourceInsufficient(.regionSoldOut)
        }
        
        /// 规则条数超过上限。
        public static var ruleLimitExceeded: ResourceInsufficient {
            ResourceInsufficient(.ruleLimitExceeded)
        }
        
        /// 该子网下已无可用IP。
        public static var subnetIpAllOccupied: ResourceInsufficient {
            ResourceInsufficient(.subnetIpAllOccupied)
        }
        
        /// 该资源的标签个数达到最大限制。
        public static var tagLimitExceeded: ResourceInsufficient {
            ResourceInsufficient(.tagLimitExceeded)
        }
        
        public static var tagQuotasExceeded: ResourceInsufficient {
            ResourceInsufficient(.tagQuotasExceeded)
        }
    }
}

extension TCCfsError.ResourceInsufficient: Equatable {
    public static func == (lhs: TCCfsError.ResourceInsufficient, rhs: TCCfsError.ResourceInsufficient) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCfsError.ResourceInsufficient: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCfsError.ResourceInsufficient {
    /// - Returns: ``TCCfsError`` that holds the same error and context.
    public func toCfsError() -> TCCfsError {
        guard let code = TCCfsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCfsError(code, context: self.context)
    }
}

extension TCCfsError.ResourceInsufficient {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
