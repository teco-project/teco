//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cfs {
    /// 快照策略信息
    public struct AutoSnapshotPolicyInfo: TCOutputModel {
        /// 快照策略ID
        public let autoSnapshotPolicyId: String

        /// 快照策略ID
        public let policyName: String

        /// 快照策略创建时间
        public let creationTime: String

        /// 关联的文件系统个数
        public let fileSystemNums: UInt64

        /// 快照定期备份在一星期哪一天，该参数与DayOfMonth,IntervalDays互斥
        public let dayOfWeek: String

        /// 快照定期备份在一天的哪一小时
        public let hour: String

        /// 是否激活定期快照功能,1代表已激活，0代表未激活
        public let isActivated: UInt64

        /// 下一次触发快照时间
        public let nextActiveTime: String

        /// 快照策略状态，1代表快照策略状态正常。这里只有一种状态
        public let status: String

        /// 帐号ID
        public let appId: UInt64

        /// 保留时间
        public let aliveDays: UInt64

        /// 地域
        public let regionName: String

        /// 文件系统信息
        public let fileSystems: [FileSystemByPolicy]

        /// 快照定期备份在一个月的某个时间；该参数与DayOfWeek,IntervalDays互斥
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dayOfMonth: String?

        /// 快照定期间隔天数，1-365 天；该参数与DayOfMonth,DayOfWeek互斥
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intervalDays: UInt64?

        /// 跨地域复制的快照保留时间，单位天
        public let crossRegionsAliveDays: UInt64

        enum CodingKeys: String, CodingKey {
            case autoSnapshotPolicyId = "AutoSnapshotPolicyId"
            case policyName = "PolicyName"
            case creationTime = "CreationTime"
            case fileSystemNums = "FileSystemNums"
            case dayOfWeek = "DayOfWeek"
            case hour = "Hour"
            case isActivated = "IsActivated"
            case nextActiveTime = "NextActiveTime"
            case status = "Status"
            case appId = "AppId"
            case aliveDays = "AliveDays"
            case regionName = "RegionName"
            case fileSystems = "FileSystems"
            case dayOfMonth = "DayOfMonth"
            case intervalDays = "IntervalDays"
            case crossRegionsAliveDays = "CrossRegionsAliveDays"
        }
    }

    /// 版本控制-协议详情
    public struct AvailableProtoStatus: TCOutputModel {
        /// 售卖状态。可选值有 sale_out 售罄、saling可售、no_saling不可销售
        public let saleStatus: String

        /// 协议类型。可选值有 NFS、CIFS
        public let `protocol`: String

        enum CodingKeys: String, CodingKey {
            case saleStatus = "SaleStatus"
            case `protocol` = "Protocol"
        }
    }

    /// 版本控制-区域数组
    public struct AvailableRegion: TCOutputModel {
        /// 区域名称，如“ap-beijing”
        public let region: String

        /// 区域名称，如“bj”
        public let regionName: String

        /// 区域可用情况，当区域内至少有一个可用区处于可售状态时，取值为AVAILABLE，否则为UNAVAILABLE
        public let regionStatus: String

        /// 可用区数组
        public let zones: [AvailableZone]

        /// 区域中文名称，如“广州”
        public let regionCnName: String

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionName = "RegionName"
            case regionStatus = "RegionStatus"
            case zones = "Zones"
            case regionCnName = "RegionCnName"
        }
    }

    /// 版本控制-类型数组
    public struct AvailableType: TCOutputModel {
        /// 协议与售卖详情
        public let protocols: [AvailableProtoStatus]

        /// 存储类型。返回值中 SD 为通用标准型存储， HP为通用性能型存储， TB为Turbo标准型， TP 为Turbo性能型。
        public let type: String

        /// 是否支持预付费。返回值中 true 为支持、false 为不支持
        public let prepayment: Bool

        enum CodingKeys: String, CodingKey {
            case protocols = "Protocols"
            case type = "Type"
            case prepayment = "Prepayment"
        }
    }

    /// 版本控制-可用区数组
    public struct AvailableZone: TCOutputModel {
        /// 可用区名称
        public let zone: String

        /// 可用区ID
        public let zoneId: Int64

        /// 可用区中文名称
        public let zoneCnName: String

        /// Type数组
        public let types: [AvailableType]

        /// 可用区中英文名称
        public let zoneName: String

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneId = "ZoneId"
            case zoneCnName = "ZoneCnName"
            case types = "Types"
            case zoneName = "ZoneName"
        }
    }

    /// 对象存储桶
    public struct BucketInfo: TCOutputModel {
        /// 桶名称
        public let name: String

        /// 桶所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case region = "Region"
        }
    }

    /// 绑定快照策略的文件系统信息
    public struct FileSystemByPolicy: TCOutputModel {
        /// 文件系统名称
        public let creationToken: String

        /// 文件系统ID
        public let fileSystemId: String

        /// 文件系统大小，单位Byte
        public let sizeByte: UInt64

        /// 存储类型，HP：通用性能型；SD：通用标准型；TP:turbo性能型；TB：turbo标准型；THP：吞吐型
        public let storageType: String

        /// 快照总大小，单位GiB
        public let totalSnapshotSize: UInt64

        /// 文件系统创建时间
        public let creationTime: String

        /// 文件系统所在区ID
        public let zoneId: UInt64

        enum CodingKeys: String, CodingKey {
            case creationToken = "CreationToken"
            case fileSystemId = "FileSystemId"
            case sizeByte = "SizeByte"
            case storageType = "StorageType"
            case totalSnapshotSize = "TotalSnapshotSize"
            case creationTime = "CreationTime"
            case zoneId = "ZoneId"
        }
    }

    /// 文件系统客户端信息
    public struct FileSystemClient: TCOutputModel {
        /// 文件系统IP地址
        public let cfsVip: String

        /// 客户端IP地址
        public let clientIp: String

        /// 文件系统所属VPCID
        public let vpcId: String

        /// 可用区名称，例如ap-beijing-1，请参考 概览文档中的地域与可用区列表
        public let zone: String

        /// 可用区中文名称
        public let zoneName: String

        /// 该文件系统被挂载到客户端上的路径信息
        public let mountDirectory: String

        enum CodingKeys: String, CodingKey {
            case cfsVip = "CfsVip"
            case clientIp = "ClientIp"
            case vpcId = "VpcId"
            case zone = "Zone"
            case zoneName = "ZoneName"
            case mountDirectory = "MountDirectory"
        }
    }

    /// 文件系统基本信息
    public struct FileSystemInfo: TCOutputModel {
        /// 创建时间
        public let creationTime: String

        /// 用户自定义名称
        public let creationToken: String

        /// 文件系统 ID
        public let fileSystemId: String

        /// 文件系统状态。取值范围：
        /// - creating:创建中
        /// - mounting:挂载中
        /// - create_failed:创建失败
        /// - available:可使用
        /// - unserviced:停服中
        /// - upgrading:升级中
        public let lifeCycleState: String

        /// 文件系统已使用容量,单位Byte
        public let sizeByte: UInt64

        /// 文件系统最大空间限制,GiB
        public let sizeLimit: UInt64

        /// 区域 ID
        public let zoneId: UInt64

        /// 区域名称
        public let zone: String

        /// 文件系统协议类型, 支持 NFS,CIFS,TURBO
        public let `protocol`: String

        /// 存储类型，HP：通用性能型；SD：通用标准型；TP:turbo性能型；TB：turbo标准型；THP：吞吐型
        public let storageType: String

        /// 文件系统绑定的预付费存储包
        public let storageResourcePkg: String

        /// 文件系统绑定的预付费带宽包（暂未支持）
        public let bandwidthResourcePkg: String

        /// 文件系统绑定权限组信息
        public let pGroup: PGroup

        /// 用户自定义名称
        public let fsName: String

        /// 文件系统是否加密,true：代表加密，false：非加密
        public let encrypted: Bool

        /// 加密所使用的密钥，可以为密钥的 ID 或者 ARN
        public let kmsKeyId: String

        /// 应用ID
        public let appId: Int64

        /// 文件系统吞吐上限，吞吐上限是根据文件系统当前已使用存储量、绑定的存储资源包以及吞吐资源包一同确定. 单位MiB/s
        public let bandwidthLimit: Float

        /// 文件系统总容量
        public let capacity: UInt64

        /// 文件系统标签列表
        public let tags: [TagInfo]

        /// 文件系统生命周期管理状态
        /// NotAvailable：不可用
        /// Available:可用
        public let tieringState: String

        /// 分层存储详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tieringDetail: TieringDetailInfo?

        enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case creationToken = "CreationToken"
            case fileSystemId = "FileSystemId"
            case lifeCycleState = "LifeCycleState"
            case sizeByte = "SizeByte"
            case sizeLimit = "SizeLimit"
            case zoneId = "ZoneId"
            case zone = "Zone"
            case `protocol` = "Protocol"
            case storageType = "StorageType"
            case storageResourcePkg = "StorageResourcePkg"
            case bandwidthResourcePkg = "BandwidthResourcePkg"
            case pGroup = "PGroup"
            case fsName = "FsName"
            case encrypted = "Encrypted"
            case kmsKeyId = "KmsKeyId"
            case appId = "AppId"
            case bandwidthLimit = "BandwidthLimit"
            case capacity = "Capacity"
            case tags = "Tags"
            case tieringState = "TieringState"
            case tieringDetail = "TieringDetail"
        }
    }

    /// 条件过滤
    public struct Filter: TCInputModel {
        /// 值
        public let values: [String]

        /// 名称
        public let name: String

        public init(values: [String], name: String) {
            self.values = values
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    /// CFS数据迁移任务信息
    public struct MigrationTaskInfo: TCOutputModel {
        /// 迁移任务名称
        public let taskName: String

        /// 迁移任务id
        public let taskId: String

        /// 迁移方式标志位，默认为0。0: 桶迁移；1: 清单迁移
        public let migrationType: UInt64

        /// 迁移模式，默认为0。0: 全量迁移
        public let migrationMode: UInt64

        /// 数据源桶名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketName: String?

        /// 数据源桶地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketRegion: String?

        /// 数据源桶地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketAddress: String?

        /// 清单地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listAddress: String?

        /// 文件系统实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fsName: String?

        /// 文件系统实例Id
        public let fileSystemId: String

        /// 文件系统路径
        public let fsPath: String

        /// 同名文件迁移时覆盖策略，默认为0。0: 最后修改时间优先；1: 全覆盖；2: 不覆盖
        public let coverType: UInt64

        /// 创建时间
        public let createTime: Int64

        /// 完成/终止时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: Int64?

        /// 迁移状态。0: 已完成；1: 进行中；2: 已终止
        public let status: UInt64

        /// 文件数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileTotalCount: UInt64?

        /// 已迁移文件数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileMigratedCount: UInt64?

        /// 迁移失败文件数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileFailedCount: UInt64?

        /// 文件容量，单位Byte
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileTotalSize: Int64?

        /// 已迁移文件容量，单位Byte
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileMigratedSize: Int64?

        /// 迁移失败文件容量，单位Byte
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileFailedSize: Int64?

        /// 全部清单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileTotalList: String?

        /// 已完成文件清单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileCompletedList: String?

        /// 失败文件清单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileFailedList: String?

        /// 源桶路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketPath: String?

        enum CodingKeys: String, CodingKey {
            case taskName = "TaskName"
            case taskId = "TaskId"
            case migrationType = "MigrationType"
            case migrationMode = "MigrationMode"
            case bucketName = "BucketName"
            case bucketRegion = "BucketRegion"
            case bucketAddress = "BucketAddress"
            case listAddress = "ListAddress"
            case fsName = "FsName"
            case fileSystemId = "FileSystemId"
            case fsPath = "FsPath"
            case coverType = "CoverType"
            case createTime = "CreateTime"
            case endTime = "EndTime"
            case status = "Status"
            case fileTotalCount = "FileTotalCount"
            case fileMigratedCount = "FileMigratedCount"
            case fileFailedCount = "FileFailedCount"
            case fileTotalSize = "FileTotalSize"
            case fileMigratedSize = "FileMigratedSize"
            case fileFailedSize = "FileFailedSize"
            case fileTotalList = "FileTotalList"
            case fileCompletedList = "FileCompletedList"
            case fileFailedList = "FileFailedList"
            case bucketPath = "BucketPath"
        }
    }

    /// 挂载点信息
    public struct MountInfo: TCOutputModel {
        /// 文件系统 ID
        public let fileSystemId: String

        /// 挂载点 ID
        public let mountTargetId: String

        /// 挂载点 IP
        public let ipAddress: String

        /// 挂载根目录
        public let fsid: String

        /// 挂载点状态
        public let lifeCycleState: String

        /// 网络类型
        public let networkInterface: String

        /// 私有网络 ID
        public let vpcId: String

        /// 私有网络名称
        public let vpcName: String

        /// 子网 Id
        public let subnetId: String

        /// 子网名称
        public let subnetName: String

        /// CFS Turbo使用的云联网ID
        public let ccnID: String

        /// 云联网中CFS Turbo使用的网段
        public let cidrBlock: String

        enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case mountTargetId = "MountTargetId"
            case ipAddress = "IpAddress"
            case fsid = "FSID"
            case lifeCycleState = "LifeCycleState"
            case networkInterface = "NetworkInterface"
            case vpcId = "VpcId"
            case vpcName = "VpcName"
            case subnetId = "SubnetId"
            case subnetName = "SubnetName"
            case ccnID = "CcnID"
            case cidrBlock = "CidrBlock"
        }
    }

    /// 文件系统绑定权限组信息
    public struct PGroup: TCOutputModel {
        /// 权限组ID
        public let pGroupId: String

        /// 权限组名称
        public let name: String

        enum CodingKeys: String, CodingKey {
            case pGroupId = "PGroupId"
            case name = "Name"
        }
    }

    /// 权限组数组
    public struct PGroupInfo: TCOutputModel {
        /// 权限组ID
        public let pGroupId: String

        /// 权限组名称
        public let name: String

        /// 描述信息
        public let descInfo: String

        /// 创建时间
        public let cDate: String

        /// 关联文件系统个数
        public let bindCfsNum: Int64

        enum CodingKeys: String, CodingKey {
            case pGroupId = "PGroupId"
            case name = "Name"
            case descInfo = "DescInfo"
            case cDate = "CDate"
            case bindCfsNum = "BindCfsNum"
        }
    }

    /// 权限组规则列表
    public struct PGroupRuleInfo: TCOutputModel {
        /// 规则ID
        public let ruleId: String

        /// 允许访问的客户端IP
        public let authClientIp: String

        /// 读写权限, ro为只读，rw为读写
        public let rwPermission: String

        /// 用户权限。其中all_squash为所有访问用户都会被映射为匿名用户或用户组；no_all_squash为访问用户会先与本机用户匹配，匹配失败后再映射为匿名用户或用户组；root_squash为将来访的root用户映射为匿名用户或用户组；no_root_squash为来访的root用户保持root帐号权限。
        public let userPermission: String

        /// 规则优先级，1-100。 其中 1 为最高，100为最低
        public let priority: Int64

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case authClientIp = "AuthClientIp"
            case rwPermission = "RWPermission"
            case userPermission = "UserPermission"
            case priority = "Priority"
        }
    }

    /// 快照信息
    public struct SnapshotInfo: TCOutputModel {
        /// 创建快照时间
        public let creationTime: String

        /// 快照名称
        public let snapshotName: String

        /// 快照ID
        public let snapshotId: String

        /// 快照状态，createing-创建中；available-运行中；deleting-删除中；rollbacking-new 创建新文件系统中；create-failed 创建失败
        public let status: String

        /// 地域名称
        public let regionName: String

        /// 文件系统ID
        public let fileSystemId: String

        /// 快照大小
        public let size: UInt64

        /// 保留时长天
        public let aliveDay: UInt64

        /// 快照进度百分比，1表示1%
        public let percent: UInt64

        /// 帐号ID
        public let appId: UInt64

        /// 快照删除时间
        public let deleteTime: String

        /// 文件系统名称
        public let fsName: String

        /// 快照标签
        public let tags: [TagInfo]

        /// 快照类型, general为通用系列快照，turbo为Turbo系列快照
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshotType: String?

        /// 实际快照时间，反应快照对应文件系统某个时刻的数据。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshotTime: String?

        enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case snapshotName = "SnapshotName"
            case snapshotId = "SnapshotId"
            case status = "Status"
            case regionName = "RegionName"
            case fileSystemId = "FileSystemId"
            case size = "Size"
            case aliveDay = "AliveDay"
            case percent = "Percent"
            case appId = "AppId"
            case deleteTime = "DeleteTime"
            case fsName = "FsName"
            case tags = "Tags"
            case snapshotType = "SnapshotType"
            case snapshotTime = "SnapshotTime"
        }
    }

    /// 快照操作日志
    public struct SnapshotOperateLog: TCOutputModel {
        /// 操作类型
        /// CreateCfsSnapshot：创建快照
        /// DeleteCfsSnapshot：删除快照
        /// CreateCfsFileSystem：创建文件系统
        /// UpdateCfsSnapshotAttribute：更新快照
        public let action: String

        /// 操作时间
        public let actionTime: String

        /// 操作名称
        /// CreateCfsSnapshot
        /// DeleteCfsSnapshot
        /// CreateCfsFileSystem
        /// UpdateCfsSnapshotAttribute
        public let actionName: String

        /// 操作者uin
        public let `operator`: String

        /// 1-任务进行中；2-任务成功；3-任务失败
        public let result: UInt64

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case actionTime = "ActionTime"
            case actionName = "ActionName"
            case `operator` = "Operator"
            case result = "Result"
        }
    }

    /// 文件系统快照统计
    public struct SnapshotStatistics: TCOutputModel {
        /// 地域
        public let region: String

        /// 快照总个数
        public let snapshotNumber: UInt64

        /// 快照总容量
        public let snapshotSize: UInt64

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case snapshotNumber = "SnapshotNumber"
            case snapshotSize = "SnapshotSize"
        }
    }

    /// Tag信息单元
    public struct TagInfo: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 分层存储详细信息
    public struct TieringDetailInfo: TCInputModel, TCOutputModel {
        /// 低频存储容量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tieringSizeInBytes: Int64?

        public init(tieringSizeInBytes: Int64? = nil) {
            self.tieringSizeInBytes = tieringSizeInBytes
        }

        enum CodingKeys: String, CodingKey {
            case tieringSizeInBytes = "TieringSizeInBytes"
        }
    }

    /// 文件系统配额信息
    public struct UserQuota: TCInputModel, TCOutputModel {
        /// 指定配额类型，包括Uid、Gid
        public let userType: String

        /// UID/GID信息
        public let userId: String

        /// 容量硬限制，单位GiB
        public let capacityHardLimit: UInt64

        /// 文件硬限制，单位个
        public let fileHardLimit: UInt64

        /// 文件系统ID
        public let fileSystemId: String

        /// 容量使用，单位GiB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let capacityUsed: UInt64?

        /// 文件使用个数，单位个
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileUsed: UInt64?

        public init(userType: String, userId: String, capacityHardLimit: UInt64, fileHardLimit: UInt64, fileSystemId: String, capacityUsed: UInt64? = nil, fileUsed: UInt64? = nil) {
            self.userType = userType
            self.userId = userId
            self.capacityHardLimit = capacityHardLimit
            self.fileHardLimit = fileHardLimit
            self.fileSystemId = fileSystemId
            self.capacityUsed = capacityUsed
            self.fileUsed = fileUsed
        }

        enum CodingKeys: String, CodingKey {
            case userType = "UserType"
            case userId = "UserId"
            case capacityHardLimit = "CapacityHardLimit"
            case fileHardLimit = "FileHardLimit"
            case fileSystemId = "FileSystemId"
            case capacityUsed = "CapacityUsed"
            case fileUsed = "FileUsed"
        }
    }
}
