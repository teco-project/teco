//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfs {
    /// ScaleUpFileSystem请求参数结构体
    public struct ScaleUpFileSystemRequest: TCRequestModel {
        /// 文件系统Id
        public let fileSystemId: String

        /// 扩容的目标容量（单位GiB）
        public let targetCapacity: UInt64

        public init(fileSystemId: String, targetCapacity: UInt64) {
            self.fileSystemId = fileSystemId
            self.targetCapacity = targetCapacity
        }

        enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case targetCapacity = "TargetCapacity"
        }
    }

    /// ScaleUpFileSystem返回参数结构体
    public struct ScaleUpFileSystemResponse: TCResponseModel {
        /// 文件系统Id
        public let fileSystemId: String

        /// 扩容的目标容量（单位GiB）
        public let targetCapacity: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case targetCapacity = "TargetCapacity"
            case requestId = "RequestId"
        }
    }

    /// 文件系统存储量扩容
    ///
    /// 该接口用于对turbo 文件系统扩容使用
    @inlinable
    public func scaleUpFileSystem(_ input: ScaleUpFileSystemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleUpFileSystemResponse> {
        self.client.execute(action: "ScaleUpFileSystem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 文件系统存储量扩容
    ///
    /// 该接口用于对turbo 文件系统扩容使用
    @inlinable
    public func scaleUpFileSystem(_ input: ScaleUpFileSystemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleUpFileSystemResponse {
        try await self.client.execute(action: "ScaleUpFileSystem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 文件系统存储量扩容
    ///
    /// 该接口用于对turbo 文件系统扩容使用
    @inlinable
    public func scaleUpFileSystem(fileSystemId: String, targetCapacity: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleUpFileSystemResponse> {
        self.scaleUpFileSystem(.init(fileSystemId: fileSystemId, targetCapacity: targetCapacity), region: region, logger: logger, on: eventLoop)
    }

    /// 文件系统存储量扩容
    ///
    /// 该接口用于对turbo 文件系统扩容使用
    @inlinable
    public func scaleUpFileSystem(fileSystemId: String, targetCapacity: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleUpFileSystemResponse {
        try await self.scaleUpFileSystem(.init(fileSystemId: fileSystemId, targetCapacity: targetCapacity), region: region, logger: logger, on: eventLoop)
    }
}
