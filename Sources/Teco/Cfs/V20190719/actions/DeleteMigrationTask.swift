//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfs {
    /// DeleteMigrationTask请求参数结构体
    public struct DeleteMigrationTaskRequest: TCRequestModel {
        /// 迁移任务ID
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
        }
    }

    /// DeleteMigrationTask返回参数结构体
    public struct DeleteMigrationTaskResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除迁移任务
    ///
    /// 用于删除迁移任务。
    /// 此接口需提交工单，开启白名单之后才能使用。
    @inlinable @discardableResult
    public func deleteMigrationTask(_ input: DeleteMigrationTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteMigrationTaskResponse> {
        self.client.execute(action: "DeleteMigrationTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除迁移任务
    ///
    /// 用于删除迁移任务。
    /// 此接口需提交工单，开启白名单之后才能使用。
    @inlinable @discardableResult
    public func deleteMigrationTask(_ input: DeleteMigrationTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteMigrationTaskResponse {
        try await self.client.execute(action: "DeleteMigrationTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除迁移任务
    ///
    /// 用于删除迁移任务。
    /// 此接口需提交工单，开启白名单之后才能使用。
    @inlinable @discardableResult
    public func deleteMigrationTask(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteMigrationTaskResponse> {
        self.deleteMigrationTask(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除迁移任务
    ///
    /// 用于删除迁移任务。
    /// 此接口需提交工单，开启白名单之后才能使用。
    @inlinable @discardableResult
    public func deleteMigrationTask(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteMigrationTaskResponse {
        try await self.deleteMigrationTask(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
