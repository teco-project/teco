//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cfs {
    /// 设置文件系统配额
    ///
    /// 设置文件系统配额，提供UID/GID的配额设置的接口
    @inlinable
    public func setUserQuota(_ input: SetUserQuotaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < SetUserQuotaResponse > {
        self.client.execute(action: "SetUserQuota", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 设置文件系统配额
    ///
    /// 设置文件系统配额，提供UID/GID的配额设置的接口
    @inlinable
    public func setUserQuota(_ input: SetUserQuotaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetUserQuotaResponse {
        try await self.client.execute(action: "SetUserQuota", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// SetUserQuota请求参数结构体
    public struct SetUserQuotaRequest: TCRequestModel {
        /// 文件系统 ID
        public let fileSystemId: String
        
        /// 指定配额类型，包括Uid、Gid
        public let userType: String
        
        /// UID/GID信息
        public let userId: String
        
        /// 容量硬限制，单位GiB
        public let capacityHardLimit: UInt64?
        
        /// 文件硬限制，单位个
        public let fileHardLimit: UInt64?
        
        public init (fileSystemId: String, userType: String, userId: String, capacityHardLimit: UInt64?, fileHardLimit: UInt64?) {
            self.fileSystemId = fileSystemId
            self.userType = userType
            self.userId = userId
            self.capacityHardLimit = capacityHardLimit
            self.fileHardLimit = fileHardLimit
        }
        
        enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case userType = "UserType"
            case userId = "UserId"
            case capacityHardLimit = "CapacityHardLimit"
            case fileHardLimit = "FileHardLimit"
        }
    }
    
    /// SetUserQuota返回参数结构体
    public struct SetUserQuotaResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}