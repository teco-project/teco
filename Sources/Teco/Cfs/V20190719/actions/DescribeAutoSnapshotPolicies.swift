//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cfs {
    /// 查询文件系统快照策略列表信息
    ///
    /// 查询文件系统快照定期策略列表信息
    @inlinable
    public func describeAutoSnapshotPolicies(_ input: DescribeAutoSnapshotPoliciesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAutoSnapshotPoliciesResponse > {
        self.client.execute(action: "DescribeAutoSnapshotPolicies", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询文件系统快照策略列表信息
    ///
    /// 查询文件系统快照定期策略列表信息
    @inlinable
    public func describeAutoSnapshotPolicies(_ input: DescribeAutoSnapshotPoliciesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAutoSnapshotPoliciesResponse {
        try await self.client.execute(action: "DescribeAutoSnapshotPolicies", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeAutoSnapshotPolicies请求参数结构体
    public struct DescribeAutoSnapshotPoliciesRequest: TCRequestModel {
        /// 快照策略ID
        public let autoSnapshotPolicyId: String?
        
        /// 分页码
        public let offset: UInt64?
        
        /// 页面长
        public let limit: UInt64?
        
        /// 过滤条件
        public let filters: [Filter]?
        
        /// 升序，降序
        public let order: String?
        
        /// 排序字段
        public let orderField: String?
        
        public init (autoSnapshotPolicyId: String?, offset: UInt64?, limit: UInt64?, filters: [Filter]?, order: String?, orderField: String?) {
            self.autoSnapshotPolicyId = autoSnapshotPolicyId
            self.offset = offset
            self.limit = limit
            self.filters = filters
            self.order = order
            self.orderField = orderField
        }
        
        enum CodingKeys: String, CodingKey {
            case autoSnapshotPolicyId = "AutoSnapshotPolicyId"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
            case order = "Order"
            case orderField = "OrderField"
        }
    }
    
    /// DescribeAutoSnapshotPolicies返回参数结构体
    public struct DescribeAutoSnapshotPoliciesResponse: TCResponseModel {
        /// 快照策略总个数
        public let totalCount: UInt64
        
        /// 快照策略信息
        public let autoSnapshotPolicies: [AutoSnapshotPolicyInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case autoSnapshotPolicies = "AutoSnapshotPolicies"
            case requestId = "RequestId"
        }
    }
}