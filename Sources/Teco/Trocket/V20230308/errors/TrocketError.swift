//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

/// Service error type returned by `Trocket`.
public protocol TCTrocketErrorType: TCServiceErrorType {
    /// Get the service error as ``TCTrocketError``.
    ///
    /// - Returns: ``TCTrocketError`` that holds the same error code and context.
    func asTrocketError() -> TCTrocketError
}

public struct TCTrocketError: TCTrocketErrorType {
    enum Code: String {
        case failedOperation = "FailedOperation"
        case failedOperation_InstanceNotReady = "FailedOperation.InstanceNotReady"
        case limitExceeded_TopicNum = "LimitExceeded.TopicNum"
        case operationDenied = "OperationDenied"
        case resourceInUse = "ResourceInUse"
        case resourceNotFound_Group = "ResourceNotFound.Group"
        case resourceNotFound_Instance = "ResourceNotFound.Instance"
        case resourceNotFound_Role = "ResourceNotFound.Role"
        case resourceNotFound_Topic = "ResourceNotFound.Topic"
        case resourceUnavailable = "ResourceUnavailable"
        case unsupportedOperation_ResourceAlreadyExists = "UnsupportedOperation.ResourceAlreadyExists"
    }

    /// Error domains affliated to ``TCTrocketError``.
    public static var domains: [TCErrorType.Type] {
        [FailedOperation.self, LimitExceeded.self, ResourceNotFound.self, UnsupportedOperation.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 操作失败。
    public static var failedOperation: TCTrocketError {
        TCTrocketError(.failedOperation)
    }

    public static var failedOperation_InstanceNotReady: TCTrocketError {
        TCTrocketError(.failedOperation_InstanceNotReady)
    }

    public static var limitExceeded_TopicNum: TCTrocketError {
        TCTrocketError(.limitExceeded_TopicNum)
    }

    /// 操作被拒绝。
    public static var operationDenied: TCTrocketError {
        TCTrocketError(.operationDenied)
    }

    /// 资源被占用。
    public static var resourceInUse: TCTrocketError {
        TCTrocketError(.resourceInUse)
    }

    /// 消费组不存在，请检查后重试。
    public static var resourceNotFound_Group: TCTrocketError {
        TCTrocketError(.resourceNotFound_Group)
    }

    /// 实例不存在。
    public static var resourceNotFound_Instance: TCTrocketError {
        TCTrocketError(.resourceNotFound_Instance)
    }

    /// 角色不存在，请检查后重试。
    public static var resourceNotFound_Role: TCTrocketError {
        TCTrocketError(.resourceNotFound_Role)
    }

    /// 主题不存在，请检查后重试。
    public static var resourceNotFound_Topic: TCTrocketError {
        TCTrocketError(.resourceNotFound_Topic)
    }

    /// 资源不可用。
    public static var resourceUnavailable: TCTrocketError {
        TCTrocketError(.resourceUnavailable)
    }

    /// 资源已存在，请检查后重试。
    public static var unsupportedOperation_ResourceAlreadyExists: TCTrocketError {
        TCTrocketError(.unsupportedOperation_ResourceAlreadyExists)
    }

    public func asTrocketError() -> TCTrocketError {
        return self
    }
}
