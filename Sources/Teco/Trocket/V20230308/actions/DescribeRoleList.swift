//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trocket {
    /// DescribeRoleList请求参数结构体
    public struct DescribeRoleListRequest: TCPaginatedRequest {
        /// 实例ID
        public let instanceId: String

        /// 查询起始位置
        public let offset: Int64

        /// 查询结果限制数量
        public let limit: Int64

        /// 查询条件列表
        public let filters: [Filter]?

        public init(instanceId: String, offset: Int64, limit: Int64, filters: [Filter]? = nil) {
            self.instanceId = instanceId
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRoleListResponse) -> DescribeRoleListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(instanceId: self.instanceId, offset: self.offset + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeRoleList返回参数结构体
    public struct DescribeRoleListResponse: TCPaginatedResponse {
        /// 查询总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 角色信息列表
        public let data: [RoleItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RoleItem`` list from the paginated response.
        public func getItems() -> [RoleItem] {
            self.data
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询角色列表
    ///
    /// 查询角色列表，Filter参数使用说明如下：
    ///
    /// 1. RoleName，角色名称模糊搜索
    @inlinable
    public func describeRoleList(_ input: DescribeRoleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRoleListResponse> {
        self.client.execute(action: "DescribeRoleList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询角色列表
    ///
    /// 查询角色列表，Filter参数使用说明如下：
    ///
    /// 1. RoleName，角色名称模糊搜索
    @inlinable
    public func describeRoleList(_ input: DescribeRoleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRoleListResponse {
        try await self.client.execute(action: "DescribeRoleList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询角色列表
    ///
    /// 查询角色列表，Filter参数使用说明如下：
    ///
    /// 1. RoleName，角色名称模糊搜索
    @inlinable
    public func describeRoleList(instanceId: String, offset: Int64, limit: Int64, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRoleListResponse> {
        self.describeRoleList(.init(instanceId: instanceId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询角色列表
    ///
    /// 查询角色列表，Filter参数使用说明如下：
    ///
    /// 1. RoleName，角色名称模糊搜索
    @inlinable
    public func describeRoleList(instanceId: String, offset: Int64, limit: Int64, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRoleListResponse {
        try await self.describeRoleList(.init(instanceId: instanceId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询角色列表
    ///
    /// 查询角色列表，Filter参数使用说明如下：
    ///
    /// 1. RoleName，角色名称模糊搜索
    @inlinable
    public func describeRoleListPaginated(_ input: DescribeRoleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RoleItem])> {
        self.client.paginate(input: input, region: region, command: self.describeRoleList, logger: logger, on: eventLoop)
    }

    /// 查询角色列表
    ///
    /// 查询角色列表，Filter参数使用说明如下：
    ///
    /// 1. RoleName，角色名称模糊搜索
    @inlinable @discardableResult
    public func describeRoleListPaginated(_ input: DescribeRoleListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRoleListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRoleList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询角色列表
    ///
    /// 查询角色列表，Filter参数使用说明如下：
    ///
    /// 1. RoleName，角色名称模糊搜索
    ///
    /// - Returns: `AsyncSequence`s of ``RoleItem`` and ``DescribeRoleListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRoleListPaginator(_ input: DescribeRoleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRoleListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRoleList, logger: logger, on: eventLoop)
    }
}
