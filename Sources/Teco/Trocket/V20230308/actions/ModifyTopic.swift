//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trocket {
    /// ModifyTopic请求参数结构体
    public struct ModifyTopicRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 主题
        public let topic: String

        /// 队列数量
        public let queueNum: Int64?

        /// 备注信息
        public let remark: String?

        public init(instanceId: String, topic: String, queueNum: Int64? = nil, remark: String? = nil) {
            self.instanceId = instanceId
            self.topic = topic
            self.queueNum = queueNum
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case topic = "Topic"
            case queueNum = "QueueNum"
            case remark = "Remark"
        }
    }

    /// ModifyTopic返回参数结构体
    public struct ModifyTopicResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改主题属性
    @inlinable @discardableResult
    public func modifyTopic(_ input: ModifyTopicRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyTopicResponse> {
        self.client.execute(action: "ModifyTopic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改主题属性
    @inlinable @discardableResult
    public func modifyTopic(_ input: ModifyTopicRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTopicResponse {
        try await self.client.execute(action: "ModifyTopic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改主题属性
    @inlinable @discardableResult
    public func modifyTopic(instanceId: String, topic: String, queueNum: Int64? = nil, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyTopicResponse> {
        self.modifyTopic(.init(instanceId: instanceId, topic: topic, queueNum: queueNum, remark: remark), region: region, logger: logger, on: eventLoop)
    }

    /// 修改主题属性
    @inlinable @discardableResult
    public func modifyTopic(instanceId: String, topic: String, queueNum: Int64? = nil, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTopicResponse {
        try await self.modifyTopic(.init(instanceId: instanceId, topic: topic, queueNum: queueNum, remark: remark), region: region, logger: logger, on: eventLoop)
    }
}
