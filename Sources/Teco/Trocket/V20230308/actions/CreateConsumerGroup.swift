//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trocket {
    /// CreateConsumerGroup请求参数结构体
    public struct CreateConsumerGroupRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 消费组名称
        public let consumerGroup: String

        /// 最大重试次数
        public let maxRetryTimes: Int64

        /// 是否开启消费
        public let consumeEnable: Bool

        /// 顺序投递：true
        /// 并发投递：false
        public let consumeMessageOrderly: Bool

        /// 备注
        public let remark: String?

        public init(instanceId: String, consumerGroup: String, maxRetryTimes: Int64, consumeEnable: Bool, consumeMessageOrderly: Bool, remark: String? = nil) {
            self.instanceId = instanceId
            self.consumerGroup = consumerGroup
            self.maxRetryTimes = maxRetryTimes
            self.consumeEnable = consumeEnable
            self.consumeMessageOrderly = consumeMessageOrderly
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case consumerGroup = "ConsumerGroup"
            case maxRetryTimes = "MaxRetryTimes"
            case consumeEnable = "ConsumeEnable"
            case consumeMessageOrderly = "ConsumeMessageOrderly"
            case remark = "Remark"
        }
    }

    /// CreateConsumerGroup返回参数结构体
    public struct CreateConsumerGroupResponse: TCResponse {
        /// 实例ID
        public let instanceId: String

        /// 消费组
        public let consumerGroup: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case consumerGroup = "ConsumerGroup"
            case requestId = "RequestId"
        }
    }

    /// 创建消费组
    @inlinable
    public func createConsumerGroup(_ input: CreateConsumerGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateConsumerGroupResponse> {
        self.client.execute(action: "CreateConsumerGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建消费组
    @inlinable
    public func createConsumerGroup(_ input: CreateConsumerGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConsumerGroupResponse {
        try await self.client.execute(action: "CreateConsumerGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建消费组
    @inlinable
    public func createConsumerGroup(instanceId: String, consumerGroup: String, maxRetryTimes: Int64, consumeEnable: Bool, consumeMessageOrderly: Bool, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateConsumerGroupResponse> {
        self.createConsumerGroup(.init(instanceId: instanceId, consumerGroup: consumerGroup, maxRetryTimes: maxRetryTimes, consumeEnable: consumeEnable, consumeMessageOrderly: consumeMessageOrderly, remark: remark), region: region, logger: logger, on: eventLoop)
    }

    /// 创建消费组
    @inlinable
    public func createConsumerGroup(instanceId: String, consumerGroup: String, maxRetryTimes: Int64, consumeEnable: Bool, consumeMessageOrderly: Bool, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConsumerGroupResponse {
        try await self.createConsumerGroup(.init(instanceId: instanceId, consumerGroup: consumerGroup, maxRetryTimes: maxRetryTimes, consumeEnable: consumeEnable, consumeMessageOrderly: consumeMessageOrderly, remark: remark), region: region, logger: logger, on: eventLoop)
    }
}
