//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trocket {
    /// ModifyRole请求参数结构体
    public struct ModifyRoleRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 角色名称
        public let role: String

        /// 是否开启消费
        public let permRead: Bool

        /// 是否开启生产
        public let permWrite: Bool

        /// 备注
        public let remark: String?

        public init(instanceId: String, role: String, permRead: Bool, permWrite: Bool, remark: String? = nil) {
            self.instanceId = instanceId
            self.role = role
            self.permRead = permRead
            self.permWrite = permWrite
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case role = "Role"
            case permRead = "PermRead"
            case permWrite = "PermWrite"
            case remark = "Remark"
        }
    }

    /// ModifyRole返回参数结构体
    public struct ModifyRoleResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改角色
    @inlinable @discardableResult
    public func modifyRole(_ input: ModifyRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRoleResponse> {
        self.client.execute(action: "ModifyRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改角色
    @inlinable @discardableResult
    public func modifyRole(_ input: ModifyRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRoleResponse {
        try await self.client.execute(action: "ModifyRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改角色
    @inlinable @discardableResult
    public func modifyRole(instanceId: String, role: String, permRead: Bool, permWrite: Bool, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRoleResponse> {
        self.modifyRole(.init(instanceId: instanceId, role: role, permRead: permRead, permWrite: permWrite, remark: remark), region: region, logger: logger, on: eventLoop)
    }

    /// 修改角色
    @inlinable @discardableResult
    public func modifyRole(instanceId: String, role: String, permRead: Bool, permWrite: Bool, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRoleResponse {
        try await self.modifyRole(.init(instanceId: instanceId, role: role, permRead: permRead, permWrite: permWrite, remark: remark), region: region, logger: logger, on: eventLoop)
    }
}
