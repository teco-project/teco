//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trocket {
    /// ModifyInstance请求参数结构体
    public struct ModifyInstanceRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let name: String?

        /// 备注信息
        public let remark: String?

        /// 消息发送和接收的比例
        public let sendReceiveRatio: Float?

        /// 调整实例规格的商品代号
        public let skuCode: String?

        /// 消息保留时长，小时为单位
        public let messageRetention: Int64?

        /// 是否开启弹性TPS
        public let scaledTpsEnabled: Bool?

        public init(instanceId: String, name: String? = nil, remark: String? = nil, sendReceiveRatio: Float? = nil, skuCode: String? = nil, messageRetention: Int64? = nil, scaledTpsEnabled: Bool? = nil) {
            self.instanceId = instanceId
            self.name = name
            self.remark = remark
            self.sendReceiveRatio = sendReceiveRatio
            self.skuCode = skuCode
            self.messageRetention = messageRetention
            self.scaledTpsEnabled = scaledTpsEnabled
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case name = "Name"
            case remark = "Remark"
            case sendReceiveRatio = "SendReceiveRatio"
            case skuCode = "SkuCode"
            case messageRetention = "MessageRetention"
            case scaledTpsEnabled = "ScaledTpsEnabled"
        }
    }

    /// ModifyInstance返回参数结构体
    public struct ModifyInstanceResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改实例属性
    @inlinable @discardableResult
    public func modifyInstance(_ input: ModifyInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceResponse> {
        self.client.execute(action: "ModifyInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例属性
    @inlinable @discardableResult
    public func modifyInstance(_ input: ModifyInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceResponse {
        try await self.client.execute(action: "ModifyInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例属性
    @inlinable @discardableResult
    public func modifyInstance(instanceId: String, name: String? = nil, remark: String? = nil, sendReceiveRatio: Float? = nil, skuCode: String? = nil, messageRetention: Int64? = nil, scaledTpsEnabled: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceResponse> {
        self.modifyInstance(.init(instanceId: instanceId, name: name, remark: remark, sendReceiveRatio: sendReceiveRatio, skuCode: skuCode, messageRetention: messageRetention, scaledTpsEnabled: scaledTpsEnabled), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实例属性
    @inlinable @discardableResult
    public func modifyInstance(instanceId: String, name: String? = nil, remark: String? = nil, sendReceiveRatio: Float? = nil, skuCode: String? = nil, messageRetention: Int64? = nil, scaledTpsEnabled: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceResponse {
        try await self.modifyInstance(.init(instanceId: instanceId, name: name, remark: remark, sendReceiveRatio: sendReceiveRatio, skuCode: skuCode, messageRetention: messageRetention, scaledTpsEnabled: scaledTpsEnabled), region: region, logger: logger, on: eventLoop)
    }
}
