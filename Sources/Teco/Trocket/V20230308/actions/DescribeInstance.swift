//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trocket {
    /// DescribeInstance请求参数结构体
    public struct DescribeInstanceRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeInstance返回参数结构体
    public struct DescribeInstanceResponse: TCResponse {
        /// 实例类型，
        /// EXPERIMENT 体验版
        /// BASIC 基础版
        /// PRO  专业版
        /// PLATINUM 铂金版
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceType: String?

        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 主题数量
        public let topicNum: Int64

        /// 实例最大主题数量
        public let topicNumLimit: Int64

        /// 消费组数量
        public let groupNum: Int64

        /// 实例最大消费组数量
        public let groupNumLimit: Int64

        /// 消息保留时间，小时为单位
        public let messageRetention: Int64

        /// 最大可调整消息保留时间，小时为单位
        public let retentionUpperLimit: Int64

        /// 最小可调整消息保留时间，小时为单位
        public let retentionLowerLimit: Int64

        /// TPS限流值
        public let tpsLimit: Int64

        /// 弹性TPS限流值
        public let scaledTpsLimit: Int64

        /// 延迟消息最长时间，小时为单位
        public let maxMessageDelay: Int64

        /// 创建时间，秒为单位
        public let createdTime: Int64

        /// 消息发送接收比例
        public let sendReceiveRatio: Float

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagList: [Tag]?

        /// 接入点列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endpointList: [Endpoint]?

        /// 主题队列数上限
        public let topicQueueNumUpperLimit: Int64

        /// 主题队列数下限
        public let topicQueueNumLowerLimit: Int64

        /// 备注信息
        public let remark: String

        /// 实例状态
        public let instanceStatus: String

        /// 实例规格
        public let skuCode: String

        /// 计费模式
        public let payMode: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case topicNum = "TopicNum"
            case topicNumLimit = "TopicNumLimit"
            case groupNum = "GroupNum"
            case groupNumLimit = "GroupNumLimit"
            case messageRetention = "MessageRetention"
            case retentionUpperLimit = "RetentionUpperLimit"
            case retentionLowerLimit = "RetentionLowerLimit"
            case tpsLimit = "TpsLimit"
            case scaledTpsLimit = "ScaledTpsLimit"
            case maxMessageDelay = "MaxMessageDelay"
            case createdTime = "CreatedTime"
            case sendReceiveRatio = "SendReceiveRatio"
            case tagList = "TagList"
            case endpointList = "EndpointList"
            case topicQueueNumUpperLimit = "TopicQueueNumUpperLimit"
            case topicQueueNumLowerLimit = "TopicQueueNumLowerLimit"
            case remark = "Remark"
            case instanceStatus = "InstanceStatus"
            case skuCode = "SkuCode"
            case payMode = "PayMode"
            case requestId = "RequestId"
        }
    }

    /// 查询实例信息
    @inlinable
    public func describeInstance(_ input: DescribeInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceResponse> {
        self.client.execute(action: "DescribeInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例信息
    @inlinable
    public func describeInstance(_ input: DescribeInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceResponse {
        try await self.client.execute(action: "DescribeInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例信息
    @inlinable
    public func describeInstance(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceResponse> {
        self.describeInstance(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例信息
    @inlinable
    public func describeInstance(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceResponse {
        try await self.describeInstance(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
