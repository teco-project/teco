//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Trocket {
    /// 接入点信息
    public struct Endpoint: TCOutputModel {
        /// 接入点类型，
        /// VPC，
        /// PUBLIC 公网
        public let type: String?

        /// 状态，
        /// OPEN 开启，
        /// CLOSE 关闭，
        /// PROCESSING 操作中，
        public let status: String?

        /// 付费类型，仅公网
        /// PREPAID 包年包月
        /// POSTPAID 按量付费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: String?

        /// 接入点地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endpointUrl: String?

        /// VPC ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 公网带宽，Mbps为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bandwidth: Int64?

        /// 公网放通规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipRules: [IpRule]?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case status = "Status"
            case payMode = "PayMode"
            case endpointUrl = "EndpointUrl"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case bandwidth = "Bandwidth"
            case ipRules = "IpRules"
        }
    }

    /// 查询过滤器
    public struct Filter: TCInputModel {
        /// 过滤条件名
        public let name: String

        /// 过滤条件的值
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 实例列表页中的实例信息
    public struct InstanceItem: TCOutputModel {
        /// 实例ID
        public let instanceId: String?

        /// 实例名称
        public let instanceName: String?

        /// 实例版本
        public let version: String?

        /// 实例类型，
        /// EXPERIMENT，体验版
        /// BASIC，基础版
        /// PRO，专业版
        /// PLATINUM，铂金版
        public let instanceType: String?

        /// 实例状态，
        /// RUNNING, 运行中
        /// MAINTAINING，维护中
        /// ABNORMAL，异常
        /// OVERDUE，欠费
        /// DESTROYED，已删除
        /// CREATING，创建中
        /// MODIFYING，变配中
        /// CREATE_FAILURE，创建失败
        /// MODIFY_FAILURE，变配失败
        /// DELETING，删除中
        public let instanceStatus: String?

        /// 实例主题数上限
        public let topicNumLimit: Int64?

        /// 实例消费组数量上限
        public let groupNumLimit: Int64?

        /// 计费模式，
        /// POSTPAID，按量计费
        /// PREPAID，包年包月
        public let payMode: String?

        /// 到期时间，秒为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expiryTime: Int64?

        /// 备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 主题数量
        public let topicNum: Int64?

        /// 消费组数量
        public let groupNum: Int64?

        /// 标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagList: [Tag]?

        /// 商品规格
        public let skuCode: String?

        /// TPS限流值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tpsLimit: Int64?

        /// 弹性TPS限流值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scaledTpsLimit: Int64?

        /// 消息保留时间，小时为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let messageRetention: Int64?

        /// 延迟消息最大时长，小时为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxMessageDelay: Int64?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case version = "Version"
            case instanceType = "InstanceType"
            case instanceStatus = "InstanceStatus"
            case topicNumLimit = "TopicNumLimit"
            case groupNumLimit = "GroupNumLimit"
            case payMode = "PayMode"
            case expiryTime = "ExpiryTime"
            case remark = "Remark"
            case topicNum = "TopicNum"
            case groupNum = "GroupNum"
            case tagList = "TagList"
            case skuCode = "SkuCode"
            case tpsLimit = "TpsLimit"
            case scaledTpsLimit = "ScaledTpsLimit"
            case messageRetention = "MessageRetention"
            case maxMessageDelay = "MaxMessageDelay"
        }
    }

    /// IP规则
    public struct IpRule: TCInputModel, TCOutputModel {
        /// IP地址
        public let ip: String

        /// 是否允许放行
        public let allow: Bool

        /// 备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        public init(ip: String, allow: Bool, remark: String) {
            self.ip = ip
            self.allow = allow
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case ip = "Ip"
            case allow = "Allow"
            case remark = "Remark"
        }
    }

    /// 角色信息
    public struct RoleItem: TCOutputModel {
        /// 角色名称
        public let roleName: String?

        /// Access Key
        public let accessKey: String?

        /// Secret Key
        public let secretKey: String?

        /// 是否开启消费
        public let permRead: Bool?

        /// 是否开启生产
        public let permWrite: Bool?

        /// 备注信息
        public let remark: String?

        /// 创建时间，秒为单位
        public let createdTime: Int64?

        /// 修改时间，秒为单位
        public let modifiedTime: Int64?

        enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
            case accessKey = "AccessKey"
            case secretKey = "SecretKey"
            case permRead = "PermRead"
            case permWrite = "PermWrite"
            case remark = "Remark"
            case createdTime = "CreatedTime"
            case modifiedTime = "ModifiedTime"
        }
    }

    /// 主题与消费组的订阅关系数据
    public struct SubscriptionData: TCOutputModel {
        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 主题名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topic: String?

        /// 主题类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicType: String?

        /// 单个节点上主题队列数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicQueueNum: Int64?

        /// 消费组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerGroup: String?

        /// 是否在线
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOnline: Bool?

        /// 消费类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumeType: String?

        /// 订阅规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subString: String?

        /// 过滤类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expressionType: String?

        /// 订阅一致性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consistency: Int64?

        /// 消费堆积
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerLag: Int64?

        /// 最后消费进度更新时间，秒为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastUpdateTime: Int64?

        /// 最大重试次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxRetryTimes: Int64?

        /// 是否顺序消费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumeMessageOrderly: Bool?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case topic = "Topic"
            case topicType = "TopicType"
            case topicQueueNum = "TopicQueueNum"
            case consumerGroup = "ConsumerGroup"
            case isOnline = "IsOnline"
            case consumeType = "ConsumeType"
            case subString = "SubString"
            case expressionType = "ExpressionType"
            case consistency = "Consistency"
            case consumerLag = "ConsumerLag"
            case lastUpdateTime = "LastUpdateTime"
            case maxRetryTimes = "MaxRetryTimes"
            case consumeMessageOrderly = "ConsumeMessageOrderly"
        }
    }

    /// 标签数据
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagKey: String?

        /// 标签值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagValue: String?

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 标签过滤器
    public struct TagFilter: TCInputModel {
        /// 标签键名称
        public let tagKey: String

        /// 标签值列表
        public let tagValues: [String]

        public init(tagKey: String, tagValues: [String]) {
            self.tagKey = tagKey
            self.tagValues = tagValues
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValues = "TagValues"
        }
    }

    /// 列表上的主题信息
    public struct TopicItem: TCInputModel, TCOutputModel {
        /// 实例ID
        public let instanceId: String?

        /// 主题名称
        public let topic: String?

        /// 主题类型
        public let topicType: String?

        /// 队列数量
        public let queueNum: Int64?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        public init(instanceId: String? = nil, topic: String? = nil, topicType: String? = nil, queueNum: Int64? = nil, remark: String? = nil) {
            self.instanceId = instanceId
            self.topic = topic
            self.topicType = topicType
            self.queueNum = queueNum
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case topic = "Topic"
            case topicType = "TopicType"
            case queueNum = "QueueNum"
            case remark = "Remark"
        }
    }

    /// VPC信息
    public struct VpcInfo: TCInputModel {
        /// VPC ID
        public let vpcId: String

        /// 子网ID
        public let subnetId: String

        public init(vpcId: String, subnetId: String) {
            self.vpcId = vpcId
            self.subnetId = subnetId
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
        }
    }
}
