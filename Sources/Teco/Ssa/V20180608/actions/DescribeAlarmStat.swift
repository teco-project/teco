//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssa {
    /// DescribeAlarmStat请求参数结构体
    public struct DescribeAlarmStatRequest: TCRequest {
        /// 开始时间
        public let startTime: String?

        /// 结束时间
        public let endTime: String?

        public init(startTime: String? = nil, endTime: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeAlarmStat返回参数结构体
    public struct DescribeAlarmStatResponse: TCResponse {
        /// 威胁告警信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: AlarmInfoRsp?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 用户威胁告警信息
    ///
    /// 安全大屏-用户威胁告警信息
    @inlinable
    public func describeAlarmStat(_ input: DescribeAlarmStatRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAlarmStatResponse> {
        self.client.execute(action: "DescribeAlarmStat", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 用户威胁告警信息
    ///
    /// 安全大屏-用户威胁告警信息
    @inlinable
    public func describeAlarmStat(_ input: DescribeAlarmStatRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAlarmStatResponse {
        try await self.client.execute(action: "DescribeAlarmStat", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 用户威胁告警信息
    ///
    /// 安全大屏-用户威胁告警信息
    @inlinable
    public func describeAlarmStat(startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAlarmStatResponse> {
        self.describeAlarmStat(.init(startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 用户威胁告警信息
    ///
    /// 安全大屏-用户威胁告警信息
    @inlinable
    public func describeAlarmStat(startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAlarmStatResponse {
        try await self.describeAlarmStat(.init(startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
