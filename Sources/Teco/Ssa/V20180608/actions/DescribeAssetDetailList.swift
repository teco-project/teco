//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ssa {
    /// DescribeAssetDetailList请求参数结构体
    public struct DescribeAssetDetailListRequest: TCRequestModel {
        /// 查询条件，可支持的查询字段：AssetUniqid,AssetName,AssetIpAll,AssetVpcid,Tag
        public let filter: [AssetQueryFilter]?

        /// 排序条件，可支持的排序字段：
        /// AssetCspmRiskNum,AssetVulNum,AssetEventNum,SsaAssetDiscoverTime
        public let sorter: [QuerySort]?

        /// 风险标签
        public let riskTags: [String]?

        /// 标签
        public let tags: [String]?

        /// 页
        public let pageIndex: UInt64?

        /// 页大小
        public let pageSize: UInt64?

        public init(filter: [AssetQueryFilter]? = nil, sorter: [QuerySort]? = nil, riskTags: [String]? = nil, tags: [String]? = nil, pageIndex: UInt64? = nil, pageSize: UInt64? = nil) {
            self.filter = filter
            self.sorter = sorter
            self.riskTags = riskTags
            self.tags = tags
            self.pageIndex = pageIndex
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case sorter = "Sorter"
            case riskTags = "RiskTags"
            case tags = "Tags"
            case pageIndex = "PageIndex"
            case pageSize = "PageSize"
        }
    }

    /// DescribeAssetDetailList返回参数结构体
    public struct DescribeAssetDetailListResponse: TCResponseModel {
        /// 业务数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [AssetDetail]?

        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case total = "Total"
            case requestId = "RequestId"
        }
    }

    /// 获取资产列表
    ///
    /// 资产条件查询
    @inlinable
    public func describeAssetDetailList(_ input: DescribeAssetDetailListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetDetailListResponse> {
        self.client.execute(action: "DescribeAssetDetailList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取资产列表
    ///
    /// 资产条件查询
    @inlinable
    public func describeAssetDetailList(_ input: DescribeAssetDetailListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetDetailListResponse {
        try await self.client.execute(action: "DescribeAssetDetailList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取资产列表
    ///
    /// 资产条件查询
    @inlinable
    public func describeAssetDetailList(filter: [AssetQueryFilter]? = nil, sorter: [QuerySort]? = nil, riskTags: [String]? = nil, tags: [String]? = nil, pageIndex: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetDetailListResponse> {
        let input = DescribeAssetDetailListRequest(filter: filter, sorter: sorter, riskTags: riskTags, tags: tags, pageIndex: pageIndex, pageSize: pageSize)
        return self.client.execute(action: "DescribeAssetDetailList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取资产列表
    ///
    /// 资产条件查询
    @inlinable
    public func describeAssetDetailList(filter: [AssetQueryFilter]? = nil, sorter: [QuerySort]? = nil, riskTags: [String]? = nil, tags: [String]? = nil, pageIndex: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetDetailListResponse {
        let input = DescribeAssetDetailListRequest(filter: filter, sorter: sorter, riskTags: riskTags, tags: tags, pageIndex: pageIndex, pageSize: pageSize)
        return try await self.client.execute(action: "DescribeAssetDetailList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
