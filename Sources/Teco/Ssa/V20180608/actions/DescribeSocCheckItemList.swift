//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Ssa {
    /// DescribeSocCheckItemList请求参数结构体
    public struct DescribeSocCheckItemListRequest: TCPaginatedRequest {
        /// 查询参数,可支持的排序字段:Name,Type,AssetType,Level,Standard,IsFree
        public let filter: [QueryFilter]?

        /// 排序参数:无
        public let sorter: [QuerySort]?

        /// 当前页码数据，默认值为10
        public let pageSize: Int64?

        /// 当前页面索引，默认值为0
        public let pageIndex: Int64?

        public init(filter: [QueryFilter]? = nil, sorter: [QuerySort]? = nil, pageSize: Int64? = nil, pageIndex: Int64? = nil) {
            self.filter = filter
            self.sorter = sorter
            self.pageSize = pageSize
            self.pageIndex = pageIndex
        }

        enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case sorter = "Sorter"
            case pageSize = "PageSize"
            case pageIndex = "PageIndex"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeSocCheckItemListResponse) -> DescribeSocCheckItemListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeSocCheckItemListRequest(filter: self.filter, sorter: self.sorter, pageSize: self.pageSize, pageIndex: (self.pageIndex ?? 0) + 1)
        }
    }

    /// DescribeSocCheckItemList返回参数结构体
    public struct DescribeSocCheckItemListResponse: TCPaginatedResponse {
        /// 检查项列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: DescribeSocCheckItemListRspRsp?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [SocCheckItemV1] {
            self.data?.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data?.total
        }
    }

    /// 云安全配置检查项列表
    @inlinable
    public func describeSocCheckItemList(_ input: DescribeSocCheckItemListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSocCheckItemListResponse> {
        self.client.execute(action: "DescribeSocCheckItemList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云安全配置检查项列表
    @inlinable
    public func describeSocCheckItemList(_ input: DescribeSocCheckItemListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSocCheckItemListResponse {
        try await self.client.execute(action: "DescribeSocCheckItemList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云安全配置检查项列表
    @inlinable
    public func describeSocCheckItemList(filter: [QueryFilter]? = nil, sorter: [QuerySort]? = nil, pageSize: Int64? = nil, pageIndex: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSocCheckItemListResponse> {
        let input = DescribeSocCheckItemListRequest(filter: filter, sorter: sorter, pageSize: pageSize, pageIndex: pageIndex)
        return self.client.execute(action: "DescribeSocCheckItemList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云安全配置检查项列表
    @inlinable
    public func describeSocCheckItemList(filter: [QueryFilter]? = nil, sorter: [QuerySort]? = nil, pageSize: Int64? = nil, pageIndex: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSocCheckItemListResponse {
        let input = DescribeSocCheckItemListRequest(filter: filter, sorter: sorter, pageSize: pageSize, pageIndex: pageIndex)
        return try await self.client.execute(action: "DescribeSocCheckItemList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云安全配置检查项列表
    @inlinable
    public func describeSocCheckItemListPaginated(_ input: DescribeSocCheckItemListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [SocCheckItemV1])> {
        self.client.paginate(input: input, region: region, command: self.describeSocCheckItemList, logger: logger, on: eventLoop)
    }

    /// 云安全配置检查项列表
    @inlinable
    public func describeSocCheckItemListPaginated(_ input: DescribeSocCheckItemListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeSocCheckItemListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeSocCheckItemList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 云安全配置检查项列表
    @inlinable
    public func describeSocCheckItemListPaginator(_ input: DescribeSocCheckItemListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<DescribeSocCheckItemListRequest, DescribeSocCheckItemListResponse>.ResultSequence, responses: TCClient.Paginator<DescribeSocCheckItemListRequest, DescribeSocCheckItemListResponse>.ResponseSequence) {
        let results = TCClient.Paginator<DescribeSocCheckItemListRequest, DescribeSocCheckItemListResponse>.ResultSequence(input: input, region: region, command: self.describeSocCheckItemList, logger: logger, on: eventLoop)
        let responses = TCClient.Paginator<DescribeSocCheckItemListRequest, DescribeSocCheckItemListResponse>.ResponseSequence(input: input, region: region, command: self.describeSocCheckItemList, logger: logger, on: eventLoop)
        return (results, responses)
    }
}
