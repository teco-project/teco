//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssa {
    /// SaDivulgeScanRuleMutate请求参数结构体
    public struct SaDivulgeScanRuleMutateRequest: TCRequest {
        /// Id
        public let id: String

        /// DivulgeSoure
        public let divulgeSoure: String

        /// DivulgeSoureUrl
        public let divulgeSoureUrl: String

        /// RuleName
        public let ruleName: String

        /// RuleWord
        public let ruleWord: String

        /// ScanStatus
        public let scanStatus: String

        /// DivulgeType
        public let divulgeType: String?

        /// RepairAdvice
        public let repairAdvice: String?

        public init(id: String, divulgeSoure: String, divulgeSoureUrl: String, ruleName: String, ruleWord: String, scanStatus: String, divulgeType: String? = nil, repairAdvice: String? = nil) {
            self.id = id
            self.divulgeSoure = divulgeSoure
            self.divulgeSoureUrl = divulgeSoureUrl
            self.ruleName = ruleName
            self.ruleWord = ruleWord
            self.scanStatus = scanStatus
            self.divulgeType = divulgeType
            self.repairAdvice = repairAdvice
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case divulgeSoure = "DivulgeSoure"
            case divulgeSoureUrl = "DivulgeSoureUrl"
            case ruleName = "RuleName"
            case ruleWord = "RuleWord"
            case scanStatus = "ScanStatus"
            case divulgeType = "DivulgeType"
            case repairAdvice = "RepairAdvice"
        }
    }

    /// SaDivulgeScanRuleMutate返回参数结构体
    public struct SaDivulgeScanRuleMutateResponse: TCResponse {
        /// Data
        public let data: SaDivulgeScanRuleSetList

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 设置【泄露监测产品监测扫描规则策略】
    ///
    /// SaDivulgeScanRuleMutate
    @inlinable
    public func saDivulgeScanRuleMutate(_ input: SaDivulgeScanRuleMutateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SaDivulgeScanRuleMutateResponse> {
        self.client.execute(action: "SaDivulgeScanRuleMutate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置【泄露监测产品监测扫描规则策略】
    ///
    /// SaDivulgeScanRuleMutate
    @inlinable
    public func saDivulgeScanRuleMutate(_ input: SaDivulgeScanRuleMutateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SaDivulgeScanRuleMutateResponse {
        try await self.client.execute(action: "SaDivulgeScanRuleMutate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置【泄露监测产品监测扫描规则策略】
    ///
    /// SaDivulgeScanRuleMutate
    @inlinable
    public func saDivulgeScanRuleMutate(id: String, divulgeSoure: String, divulgeSoureUrl: String, ruleName: String, ruleWord: String, scanStatus: String, divulgeType: String? = nil, repairAdvice: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SaDivulgeScanRuleMutateResponse> {
        self.saDivulgeScanRuleMutate(.init(id: id, divulgeSoure: divulgeSoure, divulgeSoureUrl: divulgeSoureUrl, ruleName: ruleName, ruleWord: ruleWord, scanStatus: scanStatus, divulgeType: divulgeType, repairAdvice: repairAdvice), region: region, logger: logger, on: eventLoop)
    }

    /// 设置【泄露监测产品监测扫描规则策略】
    ///
    /// SaDivulgeScanRuleMutate
    @inlinable
    public func saDivulgeScanRuleMutate(id: String, divulgeSoure: String, divulgeSoureUrl: String, ruleName: String, ruleWord: String, scanStatus: String, divulgeType: String? = nil, repairAdvice: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SaDivulgeScanRuleMutateResponse {
        try await self.saDivulgeScanRuleMutate(.init(id: id, divulgeSoure: divulgeSoure, divulgeSoureUrl: divulgeSoureUrl, ruleName: ruleName, ruleWord: ruleWord, scanStatus: scanStatus, divulgeType: divulgeType, repairAdvice: repairAdvice), region: region, logger: logger, on: eventLoop)
    }
}
