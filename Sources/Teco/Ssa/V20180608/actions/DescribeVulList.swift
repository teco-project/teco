//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ssa {
    /// DescribeVulList请求参数结构体
    public struct DescribeVulListRequest: TCRequestModel {
        /// 查询过滤参数
        public let params: String

        public init(params: String) {
            self.params = params
        }

        enum CodingKeys: String, CodingKey {
            case params = "Params"
        }
    }

    /// DescribeVulList返回参数结构体
    public struct DescribeVulListResponse: TCResponseModel {
        /// 漏洞列表
        public let data: VulList

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 漏洞管理-漏洞列表
    ///
    /// 漏洞管理页，获取漏洞列表
    @inlinable
    public func describeVulList(_ input: DescribeVulListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulListResponse> {
        self.client.execute(action: "DescribeVulList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 漏洞管理-漏洞列表
    ///
    /// 漏洞管理页，获取漏洞列表
    @inlinable
    public func describeVulList(_ input: DescribeVulListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulListResponse {
        try await self.client.execute(action: "DescribeVulList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 漏洞管理-漏洞列表
    ///
    /// 漏洞管理页，获取漏洞列表
    @inlinable
    public func describeVulList(params: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulListResponse> {
        self.describeVulList(DescribeVulListRequest(params: params), region: region, logger: logger, on: eventLoop)
    }

    /// 漏洞管理-漏洞列表
    ///
    /// 漏洞管理页，获取漏洞列表
    @inlinable
    public func describeVulList(params: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulListResponse {
        try await self.describeVulList(DescribeVulListRequest(params: params), region: region, logger: logger, on: eventLoop)
    }
}
