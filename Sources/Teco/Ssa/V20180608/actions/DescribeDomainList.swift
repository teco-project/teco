//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssa {
    /// DescribeDomainList请求参数结构体
    public struct DescribeDomainListRequest: TCPaginatedRequest {
        /// 起始，从0开始(只支持32位)
        public let offset: UInt64?

        /// limit,最大值200(只支持32位)
        public let limit: UInt64?

        /// 资产大类，根据此字段时返回不同的子结构,AssetBasicType(只支持32位)
        public let assetBasicType: UInt64?

        /// 过滤条件
        public let filter: [QueryFilterV3]?

        /// 排序
        public let order: String?

        /// 排序字段
        public let by: String?

        /// 导出字段
        public let field: [String]?

        /// 时间范围(只支持32位)
        public let timeRange: UInt64?

        /// 逻辑字段(只支持32位)
        public let logic: UInt64?

        /// 聚合字段
        public let groupByField: String?

        public let task: String?

        /// 0:cfw 1:vss 2.soc 3.waf 4.cwp
        public let requestFrom: UInt64?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, assetBasicType: UInt64? = nil, filter: [QueryFilterV3]? = nil, order: String? = nil, by: String? = nil, field: [String]? = nil, timeRange: UInt64? = nil, logic: UInt64? = nil, groupByField: String? = nil, task: String? = nil, requestFrom: UInt64? = nil) {
            self.offset = offset
            self.limit = limit
            self.assetBasicType = assetBasicType
            self.filter = filter
            self.order = order
            self.by = by
            self.field = field
            self.timeRange = timeRange
            self.logic = logic
            self.groupByField = groupByField
            self.task = task
            self.requestFrom = requestFrom
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case assetBasicType = "AssetBasicType"
            case filter = "Filter"
            case order = "Order"
            case by = "By"
            case field = "Field"
            case timeRange = "TimeRange"
            case logic = "Logic"
            case groupByField = "GroupByField"
            case task = "Task"
            case requestFrom = "RequestFrom"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDomainListResponse) -> DescribeDomainListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, assetBasicType: self.assetBasicType, filter: self.filter, order: self.order, by: self.by, field: self.field, timeRange: self.timeRange, logic: self.logic, groupByField: self.groupByField, task: self.task, requestFrom: self.requestFrom)
        }
    }

    /// DescribeDomainList返回参数结构体
    public struct DescribeDomainListResponse: TCPaginatedResponse {
        public let total: UInt64

        public let domainInfoCollection: [DomainInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case domainInfoCollection = "DomainInfoCollection"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DomainInfo`` list from the paginated response.
        public func getItems() -> [DomainInfo] {
            self.domainInfoCollection
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 域名列表
    ///
    /// 域名列表信息
    @inlinable
    public func describeDomainList(_ input: DescribeDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainListResponse> {
        self.client.execute(action: "DescribeDomainList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 域名列表
    ///
    /// 域名列表信息
    @inlinable
    public func describeDomainList(_ input: DescribeDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainListResponse {
        try await self.client.execute(action: "DescribeDomainList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 域名列表
    ///
    /// 域名列表信息
    @inlinable
    public func describeDomainList(offset: UInt64? = nil, limit: UInt64? = nil, assetBasicType: UInt64? = nil, filter: [QueryFilterV3]? = nil, order: String? = nil, by: String? = nil, field: [String]? = nil, timeRange: UInt64? = nil, logic: UInt64? = nil, groupByField: String? = nil, task: String? = nil, requestFrom: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainListResponse> {
        self.describeDomainList(.init(offset: offset, limit: limit, assetBasicType: assetBasicType, filter: filter, order: order, by: by, field: field, timeRange: timeRange, logic: logic, groupByField: groupByField, task: task, requestFrom: requestFrom), region: region, logger: logger, on: eventLoop)
    }

    /// 域名列表
    ///
    /// 域名列表信息
    @inlinable
    public func describeDomainList(offset: UInt64? = nil, limit: UInt64? = nil, assetBasicType: UInt64? = nil, filter: [QueryFilterV3]? = nil, order: String? = nil, by: String? = nil, field: [String]? = nil, timeRange: UInt64? = nil, logic: UInt64? = nil, groupByField: String? = nil, task: String? = nil, requestFrom: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainListResponse {
        try await self.describeDomainList(.init(offset: offset, limit: limit, assetBasicType: assetBasicType, filter: filter, order: order, by: by, field: field, timeRange: timeRange, logic: logic, groupByField: groupByField, task: task, requestFrom: requestFrom), region: region, logger: logger, on: eventLoop)
    }

    /// 域名列表
    ///
    /// 域名列表信息
    @inlinable
    public func describeDomainListPaginated(_ input: DescribeDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [DomainInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeDomainList, logger: logger, on: eventLoop)
    }

    /// 域名列表
    ///
    /// 域名列表信息
    @inlinable @discardableResult
    public func describeDomainListPaginated(_ input: DescribeDomainListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDomainListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDomainList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 域名列表
    ///
    /// 域名列表信息
    ///
    /// - Returns: `AsyncSequence`s of ``DomainInfo`` and ``DescribeDomainListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDomainListPaginator(_ input: DescribeDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDomainListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDomainList, logger: logger, on: eventLoop)
    }
}
