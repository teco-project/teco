//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ssa {
    /// DescribeConfigList请求参数结构体
    public struct DescribeConfigListRequest: TCRequestModel {
        /// 搜索过滤条件
        public let filter: String?

        public init(filter: String? = nil) {
            self.filter = filter
        }

        enum CodingKeys: String, CodingKey {
            case filter = "Filter"
        }
    }

    /// DescribeConfigList返回参数结构体
    public struct DescribeConfigListResponse: TCResponseModel {
        /// 检查项列表
        public let data: [DataCheck]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 云配置检查项总览页检查项列表
    @inlinable
    public func describeConfigList(_ input: DescribeConfigListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeConfigListResponse> {
        self.client.execute(action: "DescribeConfigList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云配置检查项总览页检查项列表
    @inlinable
    public func describeConfigList(_ input: DescribeConfigListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConfigListResponse {
        try await self.client.execute(action: "DescribeConfigList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云配置检查项总览页检查项列表
    @inlinable
    public func describeConfigList(filter: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeConfigListResponse> {
        self.describeConfigList(.init(filter: filter), region: region, logger: logger, on: eventLoop)
    }

    /// 云配置检查项总览页检查项列表
    @inlinable
    public func describeConfigList(filter: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConfigListResponse {
        try await self.describeConfigList(.init(filter: filter), region: region, logger: logger, on: eventLoop)
    }
}
