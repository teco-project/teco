//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Ssa {
    /// SaEventPub请求参数结构体
    public struct SaEventPubRequest: TCPaginatedRequest {
        /// 受影响资产
        public let asset: String

        /// 安全事件名称
        public let eventName: String

        /// 安全事件1级分类，-1:未知 0:全部 1:攻击事件 2:侦查事件 3:僵木蠕毒 4:违规策略
        public let eventType1: Int64

        /// 安全事件2级分类，-1:未知 0:全部 1:DDOS事件 2:Web攻击 3:木马 4:异地登录 5:密码破解
        public let eventType2: Int64

        /// 风险等级，-1:未知 0:全部 1:低危 2:中危 3:高危 4:严重，可多选，如：1,2
        public let level: String

        /// 安全事件状态，-1:未知 0:全部 1:待处理 2:已处理 3:误报 4:已忽略 5:已知晓 6:已信任
        public let status: Int64

        /// 开始时间
        public let startTime: String

        /// 查询起始地址
        public let offset: UInt64

        /// 查询个数
        public let limit: UInt64

        /// 结束时间
        public let endTime: String

        /// 私有字段和公有字段映射的原始采集数据唯一标识的MD5值
        public let oldIdMd5: String

        public init(asset: String, eventName: String, eventType1: Int64, eventType2: Int64, level: String, status: Int64, startTime: String, offset: UInt64, limit: UInt64, endTime: String, oldIdMd5: String) {
            self.asset = asset
            self.eventName = eventName
            self.eventType1 = eventType1
            self.eventType2 = eventType2
            self.level = level
            self.status = status
            self.startTime = startTime
            self.offset = offset
            self.limit = limit
            self.endTime = endTime
            self.oldIdMd5 = oldIdMd5
        }

        enum CodingKeys: String, CodingKey {
            case asset = "Asset"
            case eventName = "EventName"
            case eventType1 = "EventType1"
            case eventType2 = "EventType2"
            case level = "Level"
            case status = "Status"
            case startTime = "StartTime"
            case offset = "Offset"
            case limit = "Limit"
            case endTime = "EndTime"
            case oldIdMd5 = "OldIdMd5"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: SaEventPubResponse) -> SaEventPubRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return SaEventPubRequest(asset: self.asset, eventName: self.eventName, eventType1: self.eventType1, eventType2: self.eventType2, level: self.level, status: self.status, startTime: self.startTime, offset: self.offset + .init(response.getItems().count), limit: self.limit, endTime: self.endTime, oldIdMd5: self.oldIdMd5)
        }
    }

    /// SaEventPub返回参数结构体
    public struct SaEventPubResponse: TCPaginatedResponse {
        /// DataSaEventPub
        public let dataSaEventPub: ObjDataSaEventPub

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dataSaEventPub = "DataSaEventPub"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ListDataSaEventPub`` list from the paginated response.
        public func getItems() -> [ListDataSaEventPub] {
            self.dataSaEventPub.list
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.dataSaEventPub.count
        }
    }

    /// 【安全事件】【通用字段信息】
    ///
    /// 安全事件通用字段
    @inlinable
    public func saEventPub(_ input: SaEventPubRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SaEventPubResponse> {
        self.client.execute(action: "SaEventPub", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 【安全事件】【通用字段信息】
    ///
    /// 安全事件通用字段
    @inlinable
    public func saEventPub(_ input: SaEventPubRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SaEventPubResponse {
        try await self.client.execute(action: "SaEventPub", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 【安全事件】【通用字段信息】
    ///
    /// 安全事件通用字段
    @inlinable
    public func saEventPub(asset: String, eventName: String, eventType1: Int64, eventType2: Int64, level: String, status: Int64, startTime: String, offset: UInt64, limit: UInt64, endTime: String, oldIdMd5: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SaEventPubResponse> {
        self.saEventPub(.init(asset: asset, eventName: eventName, eventType1: eventType1, eventType2: eventType2, level: level, status: status, startTime: startTime, offset: offset, limit: limit, endTime: endTime, oldIdMd5: oldIdMd5), region: region, logger: logger, on: eventLoop)
    }

    /// 【安全事件】【通用字段信息】
    ///
    /// 安全事件通用字段
    @inlinable
    public func saEventPub(asset: String, eventName: String, eventType1: Int64, eventType2: Int64, level: String, status: Int64, startTime: String, offset: UInt64, limit: UInt64, endTime: String, oldIdMd5: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SaEventPubResponse {
        try await self.saEventPub(.init(asset: asset, eventName: eventName, eventType1: eventType1, eventType2: eventType2, level: level, status: status, startTime: startTime, offset: offset, limit: limit, endTime: endTime, oldIdMd5: oldIdMd5), region: region, logger: logger, on: eventLoop)
    }

    /// 【安全事件】【通用字段信息】
    ///
    /// 安全事件通用字段
    @inlinable
    public func saEventPubPaginated(_ input: SaEventPubRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [ListDataSaEventPub])> {
        self.client.paginate(input: input, region: region, command: self.saEventPub, logger: logger, on: eventLoop)
    }

    /// 【安全事件】【通用字段信息】
    ///
    /// 安全事件通用字段
    @inlinable @discardableResult
    public func saEventPubPaginated(_ input: SaEventPubRequest, region: TCRegion? = nil, onResponse: @escaping (SaEventPubResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.saEventPub, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 【安全事件】【通用字段信息】
    ///
    /// 安全事件通用字段
    ///
    /// - Returns: `AsyncSequence`s of ``ListDataSaEventPub`` and ``SaEventPubResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func saEventPubPaginator(_ input: SaEventPubRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<SaEventPubRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.saEventPub, logger: logger, on: eventLoop)
    }
}
