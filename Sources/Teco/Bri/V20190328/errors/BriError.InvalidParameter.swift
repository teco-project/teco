//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCBriError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case certMd5 = "InvalidParameter.CertMd5"
            case fileMd5 = "InvalidParameter.FileMd5"
            case fileSize = "InvalidParameter.FileSize"
            case imei = "InvalidParameter.Imei"
            case invalidAction = "InvalidParameter.InvalidAction"
            case ip = "InvalidParameter.Ip"
            case packageName = "InvalidParameter.PackageName"
            case phoneNumber = "InvalidParameter.PhoneNumber"
            case qq = "InvalidParameter.QQ"
            case service = "InvalidParameter.Service"
            case url = "InvalidParameter.Url"
            case wechat = "InvalidParameter.Wechat"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// CertMd5参数错误
        public static var certMd5: InvalidParameter {
            InvalidParameter(.certMd5)
        }
        
        /// FileMd5参数错误
        public static var fileMd5: InvalidParameter {
            InvalidParameter(.fileMd5)
        }
        
        /// FileSize参数错误
        public static var fileSize: InvalidParameter {
            InvalidParameter(.fileSize)
        }
        
        /// Imei参数错误
        public static var imei: InvalidParameter {
            InvalidParameter(.imei)
        }
        
        /// 接口不存在
        public static var invalidAction: InvalidParameter {
            InvalidParameter(.invalidAction)
        }
        
        /// IP参数错误
        public static var ip: InvalidParameter {
            InvalidParameter(.ip)
        }
        
        /// 包名填写错误
        public static var packageName: InvalidParameter {
            InvalidParameter(.packageName)
        }
        
        /// PhoneNumber参数错误
        public static var phoneNumber: InvalidParameter {
            InvalidParameter(.phoneNumber)
        }
        
        /// QQ参数错误
        public static var qq: InvalidParameter {
            InvalidParameter(.qq)
        }
        
        /// Service参数错误
        public static var service: InvalidParameter {
            InvalidParameter(.service)
        }
        
        /// Url参数错误
        public static var url: InvalidParameter {
            InvalidParameter(.url)
        }
        
        /// Wechat参数错误
        public static var wechat: InvalidParameter {
            InvalidParameter(.wechat)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
    }
}

extension TCBriError.InvalidParameter: Equatable {
    public static func == (lhs: TCBriError.InvalidParameter, rhs: TCBriError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCBriError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCBriError.InvalidParameter {
    public func toBriError() -> TCBriError {
        guard let code = TCBriError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCBriError(code, context: self.context)
    }
}