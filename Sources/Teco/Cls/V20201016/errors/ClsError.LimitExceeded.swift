//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCClsError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case config = "LimitExceeded.Config"
            case export = "LimitExceeded.Export"
            case logSearch = "LimitExceeded.LogSearch"
            case logSize = "LimitExceeded.LogSize"
            case logset = "LimitExceeded.Logset"
            case machineGroup = "LimitExceeded.MachineGroup"
            case machineGroupIp = "LimitExceeded.MachineGroupIp"
            case machineGroupIpLabels = "LimitExceeded.MachineGroupIpLabels"
            case partition = "LimitExceeded.Partition"
            case searchResources = "LimitExceeded.SearchResources"
            case searchResultTooLarge = "LimitExceeded.SearchResultTooLarge"
            case shipper = "LimitExceeded.Shipper"
            case tag = "LimitExceeded.Tag"
            case topic = "LimitExceeded.Topic"
            case other = "LimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 采集规则配置超过最大值限制。
        public static var config: LimitExceeded {
            LimitExceeded(.config)
        }
        
        /// 日志导出数量超出限制。
        public static var export: LimitExceeded {
            LimitExceeded(.export)
        }
        
        /// 并发查询超过限制，单topic并发最大值15。
        public static var logSearch: LimitExceeded {
            LimitExceeded(.logSearch)
        }
        
        /// 日志大小超过限制。
        public static var logSize: LimitExceeded {
            LimitExceeded(.logSize)
        }
        
        /// 日志集数量超出限制。
        public static var logset: LimitExceeded {
            LimitExceeded(.logset)
        }
        
        /// 机器组超过限制。
        public static var machineGroup: LimitExceeded {
            LimitExceeded(.machineGroup)
        }
        
        /// 机器组IP超过限制。
        public static var machineGroupIp: LimitExceeded {
            LimitExceeded(.machineGroupIp)
        }
        
        /// 机器组Label超过限制。
        public static var machineGroupIpLabels: LimitExceeded {
            LimitExceeded(.machineGroupIpLabels)
        }
        
        /// 分区超过限制。
        public static var partition: LimitExceeded {
            LimitExceeded(.partition)
        }
        
        /// 修改检索语句，减少查询范围。
        public static var searchResources: LimitExceeded {
            LimitExceeded(.searchResources)
        }
        
        /// 检索接口返回的日志量太大， 超过20MB限制。
        ///
        /// 可以把limit参数降低一点
        public static var searchResultTooLarge: LimitExceeded {
            LimitExceeded(.searchResultTooLarge)
        }
        
        /// 投递规则超出限制。
        public static var shipper: LimitExceeded {
            LimitExceeded(.shipper)
        }
        
        /// tag超过限制。
        public static var tag: LimitExceeded {
            LimitExceeded(.tag)
        }
        
        /// 日志主题数目超过限制。
        public static var topic: LimitExceeded {
            LimitExceeded(.topic)
        }
        
        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }
    }
}

extension TCClsError.LimitExceeded: Equatable {
    public static func == (lhs: TCClsError.LimitExceeded, rhs: TCClsError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCClsError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCClsError.LimitExceeded {
    /// - Returns: ``TCClsError`` that holds the same error and context.
    public func toClsError() -> TCClsError {
        guard let code = TCClsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCClsError(code, context: self.context)
    }
}

extension TCClsError.LimitExceeded {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
