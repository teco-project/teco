//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCClsError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case bindedAlarm = "FailedOperation.BindedAlarm"
            case getlogReachLimit = "FailedOperation.GetlogReachLimit"
            case inValidIndexRuleForSearchLow = "FailedOperation.InValidIndexRuleForSearchLow"
            case invalidAlarm = "FailedOperation.InvalidAlarm"
            case invalidContext = "FailedOperation.InvalidContext"
            case invalidPeriod = "FailedOperation.InvalidPeriod"
            case logsetConflict = "FailedOperation.LogsetConflict"
            case logsetNotEmpty = "FailedOperation.LogsetNotEmpty"
            case missingContent = "FailedOperation.MissingContent"
            case periodModifyForbidden = "FailedOperation.PeriodModifyForbidden"
            case queryError = "FailedOperation.QueryError"
            case readQpsLimit = "FailedOperation.ReadQpsLimit"
            case searchTimeout = "FailedOperation.SearchTimeout"
            case shipperTaskNotToRetry = "FailedOperation.ShipperTaskNotToRetry"
            case syntaxError = "FailedOperation.SyntaxError"
            case tagQpsLimit = "FailedOperation.TagQpsLimit"
            case topicClosed = "FailedOperation.TopicClosed"
            case topicIsolated = "FailedOperation.TopicIsolated"
            case writeQpsLimit = "FailedOperation.WriteQpsLimit"
            case writeTrafficLimit = "FailedOperation.WriteTrafficLimit"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 告警策略通知模板已经绑定到了某个告警策略上。
        public static var bindedAlarm: FailedOperation {
            FailedOperation(.bindedAlarm)
        }
        
        /// 检索日志触发最大条数限制。
        public static var getlogReachLimit: FailedOperation {
            FailedOperation(.getlogReachLimit)
        }
        
        /// 低频不支持配置kv和tag索引。
        public static var inValidIndexRuleForSearchLow: FailedOperation {
            FailedOperation(.inValidIndexRuleForSearchLow)
        }
        
        /// 该告警策略状态异常，请检查下日志主题ID是否都存在。
        public static var invalidAlarm: FailedOperation {
            FailedOperation(.invalidAlarm)
        }
        
        /// 检索游标已失效或不存在。
        public static var invalidContext: FailedOperation {
            FailedOperation(.invalidContext)
        }
        
        /// 离线存储保存时间不得少于7天。
        public static var invalidPeriod: FailedOperation {
            FailedOperation(.invalidPeriod)
        }
        
        /// 相同的日志集已存在。
        public static var logsetConflict: FailedOperation {
            FailedOperation(.logsetConflict)
        }
        
        /// 日志集下存在日志主题。
        public static var logsetNotEmpty: FailedOperation {
            FailedOperation(.logsetNotEmpty)
        }
        
        /// 无效的Content。
        public static var missingContent: FailedOperation {
            FailedOperation(.missingContent)
        }
        
        /// 修改的生命周期被禁止。
        public static var periodModifyForbidden: FailedOperation {
            FailedOperation(.periodModifyForbidden)
        }
        
        /// 查询语句运行失败。
        public static var queryError: FailedOperation {
            FailedOperation(.queryError)
        }
        
        /// 读qps超过限制。
        public static var readQpsLimit: FailedOperation {
            FailedOperation(.readQpsLimit)
        }
        
        /// 查询超时。
        public static var searchTimeout: FailedOperation {
            FailedOperation(.searchTimeout)
        }
        
        /// 投递任务不允许重试。
        public static var shipperTaskNotToRetry: FailedOperation {
            FailedOperation(.shipperTaskNotToRetry)
        }
        
        /// 查询语句解析错误。
        public static var syntaxError: FailedOperation {
            FailedOperation(.syntaxError)
        }
        
        /// 请求标签服务限频。
        public static var tagQpsLimit: FailedOperation {
            FailedOperation(.tagQpsLimit)
        }
        
        /// 日志主题已关闭。
        public static var topicClosed: FailedOperation {
            FailedOperation(.topicClosed)
        }
        
        /// 日志主题已隔离。
        public static var topicIsolated: FailedOperation {
            FailedOperation(.topicIsolated)
        }
        
        /// 写qps超过限制。
        public static var writeQpsLimit: FailedOperation {
            FailedOperation(.writeQpsLimit)
        }
        
        /// 写流量超过限制。
        public static var writeTrafficLimit: FailedOperation {
            FailedOperation(.writeTrafficLimit)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCClsError.FailedOperation: Equatable {
    public static func == (lhs: TCClsError.FailedOperation, rhs: TCClsError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCClsError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCClsError.FailedOperation {
    public func toClsError() -> TCClsError {
        guard let code = TCClsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCClsError(code, context: self.context)
    }
}