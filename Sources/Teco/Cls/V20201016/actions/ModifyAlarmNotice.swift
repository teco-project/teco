//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cls {
    /// 修改通知渠道组
    ///
    /// 该接口用于修改通知渠道组
    @inlinable
    public func modifyAlarmNotice(_ input: ModifyAlarmNoticeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyAlarmNoticeResponse > {
        self.client.execute(action: "ModifyAlarmNotice", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改通知渠道组
    ///
    /// 该接口用于修改通知渠道组
    @inlinable
    public func modifyAlarmNotice(_ input: ModifyAlarmNoticeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmNoticeResponse {
        try await self.client.execute(action: "ModifyAlarmNotice", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyAlarmNotice请求参数结构体
    public struct ModifyAlarmNoticeRequest: TCRequestModel {
        /// 通知渠道组ID。
        public let alarmNoticeId: String
        
        /// 通知渠道组名称。
        public let name: String?
        
        /// 通知类型。可选值：
        /// <li> Trigger - 告警触发
        /// <li> Recovery - 告警恢复
        /// <li> All - 告警触发和告警恢复
        public let type: String?
        
        /// 通知接收对象。
        public let noticeReceivers: [NoticeReceiver]?
        
        /// 接口回调信息（包括企业微信）。
        public let webCallbacks: [WebCallback]?
        
        public init (alarmNoticeId: String, name: String?, type: String?, noticeReceivers: [NoticeReceiver]?, webCallbacks: [WebCallback]?) {
            self.alarmNoticeId = alarmNoticeId
            self.name = name
            self.type = type
            self.noticeReceivers = noticeReceivers
            self.webCallbacks = webCallbacks
        }
        
        enum CodingKeys: String, CodingKey {
            case alarmNoticeId = "AlarmNoticeId"
            case name = "Name"
            case type = "Type"
            case noticeReceivers = "NoticeReceivers"
            case webCallbacks = "WebCallbacks"
        }
    }
    
    /// ModifyAlarmNotice返回参数结构体
    public struct ModifyAlarmNoticeResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}