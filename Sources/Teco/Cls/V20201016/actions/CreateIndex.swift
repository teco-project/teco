//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// CreateIndex请求参数结构体
    public struct CreateIndexRequest: TCRequest {
        /// 日志主题ID
        public let topicId: String

        /// 索引规则
        public let rule: RuleInfo

        /// 是否生效，默认为true
        public let status: Bool?

        /// 内置保留字段（`__FILENAME__`，`__HOSTNAME__`及`__SOURCE__`）是否包含至全文索引，默认为false，推荐设置为true
        /// * false:不包含
        /// * true:包含
        public let includeInternalFields: Bool?

        /// 元数据字段（前缀为`__TAG__`的字段）是否包含至全文索引，默认为0，推荐设置为1
        /// * 0:仅包含开启键值索引的元数据字段
        /// * 1:包含所有元数据字段
        /// * 2:不包含任何元数据字段
        public let metadataFlag: UInt64?

        public init(topicId: String, rule: RuleInfo, status: Bool? = nil, includeInternalFields: Bool? = nil, metadataFlag: UInt64? = nil) {
            self.topicId = topicId
            self.rule = rule
            self.status = status
            self.includeInternalFields = includeInternalFields
            self.metadataFlag = metadataFlag
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case rule = "Rule"
            case status = "Status"
            case includeInternalFields = "IncludeInternalFields"
            case metadataFlag = "MetadataFlag"
        }
    }

    /// CreateIndex返回参数结构体
    public struct CreateIndexResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建索引
    ///
    /// 本接口用于创建索引
    @inlinable @discardableResult
    public func createIndex(_ input: CreateIndexRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateIndexResponse> {
        self.client.execute(action: "CreateIndex", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建索引
    ///
    /// 本接口用于创建索引
    @inlinable @discardableResult
    public func createIndex(_ input: CreateIndexRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateIndexResponse {
        try await self.client.execute(action: "CreateIndex", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建索引
    ///
    /// 本接口用于创建索引
    @inlinable @discardableResult
    public func createIndex(topicId: String, rule: RuleInfo, status: Bool? = nil, includeInternalFields: Bool? = nil, metadataFlag: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateIndexResponse> {
        self.createIndex(.init(topicId: topicId, rule: rule, status: status, includeInternalFields: includeInternalFields, metadataFlag: metadataFlag), region: region, logger: logger, on: eventLoop)
    }

    /// 创建索引
    ///
    /// 本接口用于创建索引
    @inlinable @discardableResult
    public func createIndex(topicId: String, rule: RuleInfo, status: Bool? = nil, includeInternalFields: Bool? = nil, metadataFlag: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateIndexResponse {
        try await self.createIndex(.init(topicId: topicId, rule: rule, status: status, includeInternalFields: includeInternalFields, metadataFlag: metadataFlag), region: region, logger: logger, on: eventLoop)
    }
}
