//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// DescribeScheduledSqlInfo请求参数结构体
    public struct DescribeScheduledSqlInfoRequest: TCPaginatedRequest {
        /// 分页的偏移量，默认值为0。
        public let offset: UInt64?

        /// 分页单页限制数目，默认值为20，最大值100。
        public let limit: UInt64?

        /// 任务名称
        public let name: String?

        /// 任务id
        public let taskId: String?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, name: String? = nil, taskId: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.name = name
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case name = "Name"
            case taskId = "TaskId"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeScheduledSqlInfoResponse) -> DescribeScheduledSqlInfoRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, name: self.name, taskId: self.taskId)
        }
    }

    /// DescribeScheduledSqlInfo返回参数结构体
    public struct DescribeScheduledSqlInfoResponse: TCPaginatedResponse {
        /// ScheduledSQL任务列表信息
        public let scheduledSqlTaskInfos: [ScheduledSqlTaskInfo]

        /// 任务总次数
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case scheduledSqlTaskInfos = "ScheduledSqlTaskInfos"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ScheduledSqlTaskInfo`` list from the paginated response.
        public func getItems() -> [ScheduledSqlTaskInfo] {
            self.scheduledSqlTaskInfos
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取定时SQL分析任务列表
    ///
    /// 本接口用于获取定时SQL分析任务列表
    @inlinable
    public func describeScheduledSqlInfo(_ input: DescribeScheduledSqlInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeScheduledSqlInfoResponse> {
        self.client.execute(action: "DescribeScheduledSqlInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取定时SQL分析任务列表
    ///
    /// 本接口用于获取定时SQL分析任务列表
    @inlinable
    public func describeScheduledSqlInfo(_ input: DescribeScheduledSqlInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScheduledSqlInfoResponse {
        try await self.client.execute(action: "DescribeScheduledSqlInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取定时SQL分析任务列表
    ///
    /// 本接口用于获取定时SQL分析任务列表
    @inlinable
    public func describeScheduledSqlInfo(offset: UInt64? = nil, limit: UInt64? = nil, name: String? = nil, taskId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeScheduledSqlInfoResponse> {
        self.describeScheduledSqlInfo(.init(offset: offset, limit: limit, name: name, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取定时SQL分析任务列表
    ///
    /// 本接口用于获取定时SQL分析任务列表
    @inlinable
    public func describeScheduledSqlInfo(offset: UInt64? = nil, limit: UInt64? = nil, name: String? = nil, taskId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScheduledSqlInfoResponse {
        try await self.describeScheduledSqlInfo(.init(offset: offset, limit: limit, name: name, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取定时SQL分析任务列表
    ///
    /// 本接口用于获取定时SQL分析任务列表
    @inlinable
    public func describeScheduledSqlInfoPaginated(_ input: DescribeScheduledSqlInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [ScheduledSqlTaskInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeScheduledSqlInfo, logger: logger, on: eventLoop)
    }

    /// 获取定时SQL分析任务列表
    ///
    /// 本接口用于获取定时SQL分析任务列表
    @inlinable @discardableResult
    public func describeScheduledSqlInfoPaginated(_ input: DescribeScheduledSqlInfoRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeScheduledSqlInfoResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeScheduledSqlInfo, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取定时SQL分析任务列表
    ///
    /// 本接口用于获取定时SQL分析任务列表
    ///
    /// - Returns: `AsyncSequence`s of ``ScheduledSqlTaskInfo`` and ``DescribeScheduledSqlInfoResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeScheduledSqlInfoPaginator(_ input: DescribeScheduledSqlInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeScheduledSqlInfoRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeScheduledSqlInfo, logger: logger, on: eventLoop)
    }
}
