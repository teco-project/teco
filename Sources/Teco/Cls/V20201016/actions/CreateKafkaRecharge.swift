//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// CreateKafkaRecharge请求参数结构体
    public struct CreateKafkaRechargeRequest: TCRequest {
        /// 导入CLS目标topic ID
        public let topicId: String

        /// Kafka导入配置名称
        public let name: String

        /// 导入Kafka类型，0: 腾讯云CKafka，1: 用户自建Kafka
        public let kafkaType: UInt64

        /// 用户需要导入的Kafka相关topic列表，多个topic之间使用半角逗号隔开
        public let userKafkaTopics: String

        /// 导入数据位置，-2:最早（默认），-1：最晚
        public let offset: Int64

        /// 腾讯云CKafka实例ID，KafkaType为0时必填
        public let kafkaInstance: String?

        /// 服务地址，KafkaType为1时必填
        public let serverAddr: String?

        /// ServerAddr是否为加密连接，KafkaType为1时必填
        public let isEncryptionAddr: Bool?

        /// 加密访问协议，IsEncryptionAddr参数为true时必填
        public let `protocol`: KafkaProtocolInfo?

        /// 用户Kafka消费组名称
        public let consumerGroupName: String?

        /// 日志导入规则
        public let logRechargeRule: LogRechargeRuleInfo?

        public init(topicId: String, name: String, kafkaType: UInt64, userKafkaTopics: String, offset: Int64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, consumerGroupName: String? = nil, logRechargeRule: LogRechargeRuleInfo? = nil) {
            self.topicId = topicId
            self.name = name
            self.kafkaType = kafkaType
            self.userKafkaTopics = userKafkaTopics
            self.offset = offset
            self.kafkaInstance = kafkaInstance
            self.serverAddr = serverAddr
            self.isEncryptionAddr = isEncryptionAddr
            self.protocol = `protocol`
            self.consumerGroupName = consumerGroupName
            self.logRechargeRule = logRechargeRule
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case name = "Name"
            case kafkaType = "KafkaType"
            case userKafkaTopics = "UserKafkaTopics"
            case offset = "Offset"
            case kafkaInstance = "KafkaInstance"
            case serverAddr = "ServerAddr"
            case isEncryptionAddr = "IsEncryptionAddr"
            case `protocol` = "Protocol"
            case consumerGroupName = "ConsumerGroupName"
            case logRechargeRule = "LogRechargeRule"
        }
    }

    /// CreateKafkaRecharge返回参数结构体
    public struct CreateKafkaRechargeResponse: TCResponse {
        /// Kafka导入配置ID
        public let id: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case requestId = "RequestId"
        }
    }

    /// 创建Kafka数据订阅任务
    ///
    /// 本接口用于创建Kafka数据订阅任务
    @inlinable
    public func createKafkaRecharge(_ input: CreateKafkaRechargeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateKafkaRechargeResponse> {
        self.client.execute(action: "CreateKafkaRecharge", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建Kafka数据订阅任务
    ///
    /// 本接口用于创建Kafka数据订阅任务
    @inlinable
    public func createKafkaRecharge(_ input: CreateKafkaRechargeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateKafkaRechargeResponse {
        try await self.client.execute(action: "CreateKafkaRecharge", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建Kafka数据订阅任务
    ///
    /// 本接口用于创建Kafka数据订阅任务
    @inlinable
    public func createKafkaRecharge(topicId: String, name: String, kafkaType: UInt64, userKafkaTopics: String, offset: Int64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, consumerGroupName: String? = nil, logRechargeRule: LogRechargeRuleInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateKafkaRechargeResponse> {
        self.createKafkaRecharge(.init(topicId: topicId, name: name, kafkaType: kafkaType, userKafkaTopics: userKafkaTopics, offset: offset, kafkaInstance: kafkaInstance, serverAddr: serverAddr, isEncryptionAddr: isEncryptionAddr, protocol: `protocol`, consumerGroupName: consumerGroupName, logRechargeRule: logRechargeRule), region: region, logger: logger, on: eventLoop)
    }

    /// 创建Kafka数据订阅任务
    ///
    /// 本接口用于创建Kafka数据订阅任务
    @inlinable
    public func createKafkaRecharge(topicId: String, name: String, kafkaType: UInt64, userKafkaTopics: String, offset: Int64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, consumerGroupName: String? = nil, logRechargeRule: LogRechargeRuleInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateKafkaRechargeResponse {
        try await self.createKafkaRecharge(.init(topicId: topicId, name: name, kafkaType: kafkaType, userKafkaTopics: userKafkaTopics, offset: offset, kafkaInstance: kafkaInstance, serverAddr: serverAddr, isEncryptionAddr: isEncryptionAddr, protocol: `protocol`, consumerGroupName: consumerGroupName, logRechargeRule: logRechargeRule), region: region, logger: logger, on: eventLoop)
    }
}
