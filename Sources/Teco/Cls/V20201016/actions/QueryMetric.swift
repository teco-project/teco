//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// QueryMetric请求参数结构体
    public struct QueryMetricRequest: TCRequest {
        /// 查询语句，使用PromQL语法
        public let query: String

        /// 指标主题ID
        public let topicId: String

        /// 查询时间，秒级Unix时间戳
        public let time: UInt64?

        public init(query: String, topicId: String, time: UInt64? = nil) {
            self.query = query
            self.topicId = topicId
            self.time = time
        }

        enum CodingKeys: String, CodingKey {
            case query = "Query"
            case topicId = "TopicId"
            case time = "Time"
        }
    }

    /// QueryMetric返回参数结构体
    public struct QueryMetricResponse: TCResponse {
        /// 指标查询结果类型
        public let resultType: String

        /// 指标查询结果
        public let result: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case resultType = "ResultType"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 指标查询（最新值查询）
    ///
    /// 查询指定时刻指标的最新值
    @inlinable
    public func queryMetric(_ input: QueryMetricRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryMetricResponse> {
        self.client.execute(action: "QueryMetric", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 指标查询（最新值查询）
    ///
    /// 查询指定时刻指标的最新值
    @inlinable
    public func queryMetric(_ input: QueryMetricRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryMetricResponse {
        try await self.client.execute(action: "QueryMetric", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 指标查询（最新值查询）
    ///
    /// 查询指定时刻指标的最新值
    @inlinable
    public func queryMetric(query: String, topicId: String, time: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryMetricResponse> {
        self.queryMetric(.init(query: query, topicId: topicId, time: time), region: region, logger: logger, on: eventLoop)
    }

    /// 指标查询（最新值查询）
    ///
    /// 查询指定时刻指标的最新值
    @inlinable
    public func queryMetric(query: String, topicId: String, time: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryMetricResponse {
        try await self.queryMetric(.init(query: query, topicId: topicId, time: time), region: region, logger: logger, on: eventLoop)
    }
}
