//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// ModifyDataTransform请求参数结构体
    public struct ModifyDataTransformRequest: TCRequest {
        /// 加工任务id
        public let taskId: String

        /// 加工任务名称
        public let name: String?

        /// 加工语句
        public let etlContent: String?

        /// 任务启动状态. 默认为1，开启,  2关闭
        public let enableFlag: Int64?

        /// 加工任务目的topic_id以及别名
        public let dstResources: [DataTransformResouceInfo]?

        public init(taskId: String, name: String? = nil, etlContent: String? = nil, enableFlag: Int64? = nil, dstResources: [DataTransformResouceInfo]? = nil) {
            self.taskId = taskId
            self.name = name
            self.etlContent = etlContent
            self.enableFlag = enableFlag
            self.dstResources = dstResources
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case name = "Name"
            case etlContent = "EtlContent"
            case enableFlag = "EnableFlag"
            case dstResources = "DstResources"
        }
    }

    /// ModifyDataTransform返回参数结构体
    public struct ModifyDataTransformResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改数据加工任务
    ///
    /// 本接口用于修改数据加工任务
    @inlinable @discardableResult
    public func modifyDataTransform(_ input: ModifyDataTransformRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDataTransformResponse> {
        self.client.execute(action: "ModifyDataTransform", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改数据加工任务
    ///
    /// 本接口用于修改数据加工任务
    @inlinable @discardableResult
    public func modifyDataTransform(_ input: ModifyDataTransformRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDataTransformResponse {
        try await self.client.execute(action: "ModifyDataTransform", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改数据加工任务
    ///
    /// 本接口用于修改数据加工任务
    @inlinable @discardableResult
    public func modifyDataTransform(taskId: String, name: String? = nil, etlContent: String? = nil, enableFlag: Int64? = nil, dstResources: [DataTransformResouceInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDataTransformResponse> {
        self.modifyDataTransform(.init(taskId: taskId, name: name, etlContent: etlContent, enableFlag: enableFlag, dstResources: dstResources), region: region, logger: logger, on: eventLoop)
    }

    /// 修改数据加工任务
    ///
    /// 本接口用于修改数据加工任务
    @inlinable @discardableResult
    public func modifyDataTransform(taskId: String, name: String? = nil, etlContent: String? = nil, enableFlag: Int64? = nil, dstResources: [DataTransformResouceInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDataTransformResponse {
        try await self.modifyDataTransform(.init(taskId: taskId, name: name, etlContent: etlContent, enableFlag: enableFlag, dstResources: dstResources), region: region, logger: logger, on: eventLoop)
    }
}
