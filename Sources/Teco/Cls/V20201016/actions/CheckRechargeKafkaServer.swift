//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// CheckRechargeKafkaServer请求参数结构体
    public struct CheckRechargeKafkaServerRequest: TCRequest {
        /// 导入Kafka类型，0: 腾讯云CKafka，1: 用户自建Kafka
        public let kafkaType: UInt64

        /// 腾讯云CKafka实例ID，KafkaType为0时必填
        public let kafkaInstance: String?

        /// 服务地址
        public let serverAddr: String?

        /// ServerAddr是否为加密连接
        public let isEncryptionAddr: Bool?

        /// 加密访问协议，IsEncryptionAddr参数为true时必填
        public let `protocol`: KafkaProtocolInfo?

        public init(kafkaType: UInt64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil) {
            self.kafkaType = kafkaType
            self.kafkaInstance = kafkaInstance
            self.serverAddr = serverAddr
            self.isEncryptionAddr = isEncryptionAddr
            self.protocol = `protocol`
        }

        enum CodingKeys: String, CodingKey {
            case kafkaType = "KafkaType"
            case kafkaInstance = "KafkaInstance"
            case serverAddr = "ServerAddr"
            case isEncryptionAddr = "IsEncryptionAddr"
            case `protocol` = "Protocol"
        }
    }

    /// CheckRechargeKafkaServer返回参数结构体
    public struct CheckRechargeKafkaServerResponse: TCResponse {
        /// Kafka集群可访问状态，0：可正常访问 ...
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// Kafka服务集群连通性校验
    ///
    /// 本接口用于校验Kafka服务集群是否可以正常访问
    @inlinable
    public func checkRechargeKafkaServer(_ input: CheckRechargeKafkaServerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckRechargeKafkaServerResponse> {
        self.client.execute(action: "CheckRechargeKafkaServer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Kafka服务集群连通性校验
    ///
    /// 本接口用于校验Kafka服务集群是否可以正常访问
    @inlinable
    public func checkRechargeKafkaServer(_ input: CheckRechargeKafkaServerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckRechargeKafkaServerResponse {
        try await self.client.execute(action: "CheckRechargeKafkaServer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// Kafka服务集群连通性校验
    ///
    /// 本接口用于校验Kafka服务集群是否可以正常访问
    @inlinable
    public func checkRechargeKafkaServer(kafkaType: UInt64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckRechargeKafkaServerResponse> {
        self.checkRechargeKafkaServer(.init(kafkaType: kafkaType, kafkaInstance: kafkaInstance, serverAddr: serverAddr, isEncryptionAddr: isEncryptionAddr, protocol: `protocol`), region: region, logger: logger, on: eventLoop)
    }

    /// Kafka服务集群连通性校验
    ///
    /// 本接口用于校验Kafka服务集群是否可以正常访问
    @inlinable
    public func checkRechargeKafkaServer(kafkaType: UInt64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckRechargeKafkaServerResponse {
        try await self.checkRechargeKafkaServer(.init(kafkaType: kafkaType, kafkaInstance: kafkaInstance, serverAddr: serverAddr, isEncryptionAddr: isEncryptionAddr, protocol: `protocol`), region: region, logger: logger, on: eventLoop)
    }
}
