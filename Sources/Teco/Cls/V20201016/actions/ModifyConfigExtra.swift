//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// ModifyConfigExtra请求参数结构体
    public struct ModifyConfigExtraRequest: TCRequestModel {
        /// 采集配置扩展信息id
        public let configExtraId: String

        /// 采集配置规程名称，最长63个字符，只能包含小写字符、数字及分隔符（“-”），且必须以小写字符开头，数字或小写字符结尾
        public let name: String?

        /// 日志主题id
        public let topicId: String?

        /// 节点文件配置信息
        public let hostFile: HostFileInfo?

        /// 容器文件路径信息
        public let containerFile: ContainerFileInfo?

        /// 容器标准输出信息
        public let containerStdout: ContainerStdoutInfo?

        /// 采集的日志类型，json_log代表json格式日志，delimiter_log代表分隔符格式日志，minimalist_log代表极简日志，multiline_log代表多行日志，fullregex_log代表完整正则，默认为minimalist_log
        public let logType: String?

        /// 日志格式化方式
        public let logFormat: String?

        /// 提取规则，如果设置了ExtractRule，则必须设置LogType
        public let extractRule: ExtractRuleInfo?

        /// 采集黑名单路径列表
        public let excludePaths: [ExcludePathInfo]?

        /// 用户自定义采集规则，Json格式序列化的字符串
        public let userDefineRule: String?

        /// 类型：container_stdout、container_file、host_file
        public let type: String?

        /// 机器组ID
        public let groupId: String?

        /// 自建采集配置标
        public let configFlag: String?

        /// 日志集ID
        public let logsetId: String?

        /// 日志集name
        public let logsetName: String?

        /// 日志主题name
        public let topicName: String?

        public init(configExtraId: String, name: String? = nil, topicId: String? = nil, hostFile: HostFileInfo? = nil, containerFile: ContainerFileInfo? = nil, containerStdout: ContainerStdoutInfo? = nil, logType: String? = nil, logFormat: String? = nil, extractRule: ExtractRuleInfo? = nil, excludePaths: [ExcludePathInfo]? = nil, userDefineRule: String? = nil, type: String? = nil, groupId: String? = nil, configFlag: String? = nil, logsetId: String? = nil, logsetName: String? = nil, topicName: String? = nil) {
            self.configExtraId = configExtraId
            self.name = name
            self.topicId = topicId
            self.hostFile = hostFile
            self.containerFile = containerFile
            self.containerStdout = containerStdout
            self.logType = logType
            self.logFormat = logFormat
            self.extractRule = extractRule
            self.excludePaths = excludePaths
            self.userDefineRule = userDefineRule
            self.type = type
            self.groupId = groupId
            self.configFlag = configFlag
            self.logsetId = logsetId
            self.logsetName = logsetName
            self.topicName = topicName
        }

        enum CodingKeys: String, CodingKey {
            case configExtraId = "ConfigExtraId"
            case name = "Name"
            case topicId = "TopicId"
            case hostFile = "HostFile"
            case containerFile = "ContainerFile"
            case containerStdout = "ContainerStdout"
            case logType = "LogType"
            case logFormat = "LogFormat"
            case extractRule = "ExtractRule"
            case excludePaths = "ExcludePaths"
            case userDefineRule = "UserDefineRule"
            case type = "Type"
            case groupId = "GroupId"
            case configFlag = "ConfigFlag"
            case logsetId = "LogsetId"
            case logsetName = "LogsetName"
            case topicName = "TopicName"
        }
    }

    /// ModifyConfigExtra返回参数结构体
    public struct ModifyConfigExtraResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改特殊采集配置任务
    ///
    /// 本接口用于修改特殊采集配置任务，特殊采集配置应用于自建K8S环境的采集Agent
    @inlinable @discardableResult
    public func modifyConfigExtra(_ input: ModifyConfigExtraRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyConfigExtraResponse> {
        self.client.execute(action: "ModifyConfigExtra", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改特殊采集配置任务
    ///
    /// 本接口用于修改特殊采集配置任务，特殊采集配置应用于自建K8S环境的采集Agent
    @inlinable @discardableResult
    public func modifyConfigExtra(_ input: ModifyConfigExtraRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyConfigExtraResponse {
        try await self.client.execute(action: "ModifyConfigExtra", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改特殊采集配置任务
    ///
    /// 本接口用于修改特殊采集配置任务，特殊采集配置应用于自建K8S环境的采集Agent
    @inlinable @discardableResult
    public func modifyConfigExtra(configExtraId: String, name: String? = nil, topicId: String? = nil, hostFile: HostFileInfo? = nil, containerFile: ContainerFileInfo? = nil, containerStdout: ContainerStdoutInfo? = nil, logType: String? = nil, logFormat: String? = nil, extractRule: ExtractRuleInfo? = nil, excludePaths: [ExcludePathInfo]? = nil, userDefineRule: String? = nil, type: String? = nil, groupId: String? = nil, configFlag: String? = nil, logsetId: String? = nil, logsetName: String? = nil, topicName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyConfigExtraResponse> {
        self.modifyConfigExtra(.init(configExtraId: configExtraId, name: name, topicId: topicId, hostFile: hostFile, containerFile: containerFile, containerStdout: containerStdout, logType: logType, logFormat: logFormat, extractRule: extractRule, excludePaths: excludePaths, userDefineRule: userDefineRule, type: type, groupId: groupId, configFlag: configFlag, logsetId: logsetId, logsetName: logsetName, topicName: topicName), region: region, logger: logger, on: eventLoop)
    }

    /// 修改特殊采集配置任务
    ///
    /// 本接口用于修改特殊采集配置任务，特殊采集配置应用于自建K8S环境的采集Agent
    @inlinable @discardableResult
    public func modifyConfigExtra(configExtraId: String, name: String? = nil, topicId: String? = nil, hostFile: HostFileInfo? = nil, containerFile: ContainerFileInfo? = nil, containerStdout: ContainerStdoutInfo? = nil, logType: String? = nil, logFormat: String? = nil, extractRule: ExtractRuleInfo? = nil, excludePaths: [ExcludePathInfo]? = nil, userDefineRule: String? = nil, type: String? = nil, groupId: String? = nil, configFlag: String? = nil, logsetId: String? = nil, logsetName: String? = nil, topicName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyConfigExtraResponse {
        try await self.modifyConfigExtra(.init(configExtraId: configExtraId, name: name, topicId: topicId, hostFile: hostFile, containerFile: containerFile, containerStdout: containerStdout, logType: logType, logFormat: logFormat, extractRule: extractRule, excludePaths: excludePaths, userDefineRule: userDefineRule, type: type, groupId: groupId, configFlag: configFlag, logsetId: logsetId, logsetName: logsetName, topicName: topicName), region: region, logger: logger, on: eventLoop)
    }
}
