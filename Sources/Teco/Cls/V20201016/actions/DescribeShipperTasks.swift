//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cls {
    /// DescribeShipperTasks请求参数结构体
    public struct DescribeShipperTasksRequest: TCRequestModel {
        /// 投递规则ID
        public let shipperId: String

        /// 查询的开始时间戳，支持最近3天的查询， 毫秒
        public let startTime: Int64

        /// 查询的结束时间戳， 毫秒
        public let endTime: Int64

        public init(shipperId: String, startTime: Int64, endTime: Int64) {
            self.shipperId = shipperId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case shipperId = "ShipperId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeShipperTasks返回参数结构体
    public struct DescribeShipperTasksResponse: TCResponseModel {
        /// 投递任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tasks: [ShipperTaskInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case tasks = "Tasks"
            case requestId = "RequestId"
        }
    }

    /// 获取投递任务列表
    @inlinable
    public func describeShipperTasks(_ input: DescribeShipperTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeShipperTasksResponse> {
        self.client.execute(action: "DescribeShipperTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取投递任务列表
    @inlinable
    public func describeShipperTasks(_ input: DescribeShipperTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeShipperTasksResponse {
        try await self.client.execute(action: "DescribeShipperTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取投递任务列表
    @inlinable
    public func describeShipperTasks(shipperId: String, startTime: Int64, endTime: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeShipperTasksResponse> {
        let input = DescribeShipperTasksRequest(shipperId: shipperId, startTime: startTime, endTime: endTime)
        return self.client.execute(action: "DescribeShipperTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取投递任务列表
    @inlinable
    public func describeShipperTasks(shipperId: String, startTime: Int64, endTime: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeShipperTasksResponse {
        let input = DescribeShipperTasksRequest(shipperId: shipperId, startTime: startTime, endTime: endTime)
        return try await self.client.execute(action: "DescribeShipperTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
