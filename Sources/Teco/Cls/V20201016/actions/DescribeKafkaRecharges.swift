//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// DescribeKafkaRecharges请求参数结构体
    public struct DescribeKafkaRechargesRequest: TCRequest {
        /// 日志主题 ID
        public let topicId: String

        /// 导入配置ID
        public let id: String?

        /// 状态   status 1: 运行中, 2: 暂停...
        public let status: UInt64?

        public init(topicId: String, id: String? = nil, status: UInt64? = nil) {
            self.topicId = topicId
            self.id = id
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case id = "Id"
            case status = "Status"
        }
    }

    /// DescribeKafkaRecharges返回参数结构体
    public struct DescribeKafkaRechargesResponse: TCResponse {
        /// KafkaRechargeInfo 信息列表
        public let infos: [KafkaRechargeInfo]

        /// Kafka导入信息总条数
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case infos = "Infos"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 获取Kafka数据订阅任务列表
    ///
    /// 本接口用于获取Kafka数据订阅任务
    @inlinable
    public func describeKafkaRecharges(_ input: DescribeKafkaRechargesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKafkaRechargesResponse> {
        self.client.execute(action: "DescribeKafkaRecharges", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取Kafka数据订阅任务列表
    ///
    /// 本接口用于获取Kafka数据订阅任务
    @inlinable
    public func describeKafkaRecharges(_ input: DescribeKafkaRechargesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKafkaRechargesResponse {
        try await self.client.execute(action: "DescribeKafkaRecharges", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取Kafka数据订阅任务列表
    ///
    /// 本接口用于获取Kafka数据订阅任务
    @inlinable
    public func describeKafkaRecharges(topicId: String, id: String? = nil, status: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKafkaRechargesResponse> {
        self.describeKafkaRecharges(.init(topicId: topicId, id: id, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 获取Kafka数据订阅任务列表
    ///
    /// 本接口用于获取Kafka数据订阅任务
    @inlinable
    public func describeKafkaRecharges(topicId: String, id: String? = nil, status: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKafkaRechargesResponse {
        try await self.describeKafkaRecharges(.init(topicId: topicId, id: id, status: status), region: region, logger: logger, on: eventLoop)
    }
}
