//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// QueryRangeMetric请求参数结构体
    public struct QueryRangeMetricRequest: TCRequest {
        /// 指标主题ID
        public let topicId: String

        /// 查询语句，使用PromQL语法
        public let query: String

        /// 查询起始时间，秒级Unix时间戳
        public let start: UInt64

        /// 查询结束时间，秒级Unix时间戳
        public let end: UInt64

        /// 查询时间间隔，单位秒
        public let step: UInt64

        public init(topicId: String, query: String, start: UInt64, end: UInt64, step: UInt64) {
            self.topicId = topicId
            self.query = query
            self.start = start
            self.end = end
            self.step = step
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case query = "Query"
            case start = "Start"
            case end = "End"
            case step = "Step"
        }
    }

    /// QueryRangeMetric返回参数结构体
    public struct QueryRangeMetricResponse: TCResponse {
        /// 指标查询结果类型
        public let resultType: String

        /// 指标查询结果
        public let result: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case resultType = "ResultType"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 指标查询（范围查询）
    ///
    /// 查询指定时间范围内指标的变化趋势
    @inlinable
    public func queryRangeMetric(_ input: QueryRangeMetricRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryRangeMetricResponse> {
        self.client.execute(action: "QueryRangeMetric", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 指标查询（范围查询）
    ///
    /// 查询指定时间范围内指标的变化趋势
    @inlinable
    public func queryRangeMetric(_ input: QueryRangeMetricRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryRangeMetricResponse {
        try await self.client.execute(action: "QueryRangeMetric", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 指标查询（范围查询）
    ///
    /// 查询指定时间范围内指标的变化趋势
    @inlinable
    public func queryRangeMetric(topicId: String, query: String, start: UInt64, end: UInt64, step: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryRangeMetricResponse> {
        self.queryRangeMetric(.init(topicId: topicId, query: query, start: start, end: end, step: step), region: region, logger: logger, on: eventLoop)
    }

    /// 指标查询（范围查询）
    ///
    /// 查询指定时间范围内指标的变化趋势
    @inlinable
    public func queryRangeMetric(topicId: String, query: String, start: UInt64, end: UInt64, step: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryRangeMetricResponse {
        try await self.queryRangeMetric(.init(topicId: topicId, query: query, start: start, end: end, step: step), region: region, logger: logger, on: eventLoop)
    }
}
