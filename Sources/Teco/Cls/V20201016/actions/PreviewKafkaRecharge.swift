//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// PreviewKafkaRecharge请求参数结构体
    public struct PreviewKafkaRechargeRequest: TCRequestModel {
        /// 预览类型，1:源数据预览，2:导出结果预览
        public let previewType: UInt64

        /// 导入Kafka类型，0: 腾讯云CKafka，1: 用户自建Kafka
        public let kafkaType: UInt64

        /// 用户需要导入的Kafka相关topic列表，多个topic之间使用半角逗号隔开
        public let userKafkaTopics: String

        /// 导入数据位置，-2:最早（默认），-1：最晚
        public let offset: Int64

        /// 腾讯云CKafka实例ID，KafkaType为0时必填
        public let kafkaInstance: String?

        /// 服务地址
        public let serverAddr: String?

        /// ServerAddr是否为加密连接
        public let isEncryptionAddr: Bool?

        /// 加密访问协议，IsEncryptionAddr参数为true时必填
        public let `protocol`: KafkaProtocolInfo?

        /// 用户Kafka消费组
        public let consumerGroupName: String?

        /// 日志导入规则
        public let logRechargeRule: LogRechargeRuleInfo?

        public init(previewType: UInt64, kafkaType: UInt64, userKafkaTopics: String, offset: Int64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, consumerGroupName: String? = nil, logRechargeRule: LogRechargeRuleInfo? = nil) {
            self.previewType = previewType
            self.kafkaType = kafkaType
            self.userKafkaTopics = userKafkaTopics
            self.offset = offset
            self.kafkaInstance = kafkaInstance
            self.serverAddr = serverAddr
            self.isEncryptionAddr = isEncryptionAddr
            self.protocol = `protocol`
            self.consumerGroupName = consumerGroupName
            self.logRechargeRule = logRechargeRule
        }

        enum CodingKeys: String, CodingKey {
            case previewType = "PreviewType"
            case kafkaType = "KafkaType"
            case userKafkaTopics = "UserKafkaTopics"
            case offset = "Offset"
            case kafkaInstance = "KafkaInstance"
            case serverAddr = "ServerAddr"
            case isEncryptionAddr = "IsEncryptionAddr"
            case `protocol` = "Protocol"
            case consumerGroupName = "ConsumerGroupName"
            case logRechargeRule = "LogRechargeRule"
        }
    }

    /// PreviewKafkaRecharge返回参数结构体
    public struct PreviewKafkaRechargeResponse: TCResponseModel {
        /// 日志样例，PreviewType为2时返回
        public let logSample: String

        /// 日志预览结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logData: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case logSample = "LogSample"
            case logData = "LogData"
            case requestId = "RequestId"
        }
    }

    /// Kafka数据订阅日志预览
    ///
    /// 本接口用于预览Kafka数据订阅任务客户日志信息
    @inlinable
    public func previewKafkaRecharge(_ input: PreviewKafkaRechargeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<PreviewKafkaRechargeResponse> {
        self.client.execute(action: "PreviewKafkaRecharge", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Kafka数据订阅日志预览
    ///
    /// 本接口用于预览Kafka数据订阅任务客户日志信息
    @inlinable
    public func previewKafkaRecharge(_ input: PreviewKafkaRechargeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PreviewKafkaRechargeResponse {
        try await self.client.execute(action: "PreviewKafkaRecharge", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// Kafka数据订阅日志预览
    ///
    /// 本接口用于预览Kafka数据订阅任务客户日志信息
    @inlinable
    public func previewKafkaRecharge(previewType: UInt64, kafkaType: UInt64, userKafkaTopics: String, offset: Int64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, consumerGroupName: String? = nil, logRechargeRule: LogRechargeRuleInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<PreviewKafkaRechargeResponse> {
        self.previewKafkaRecharge(.init(previewType: previewType, kafkaType: kafkaType, userKafkaTopics: userKafkaTopics, offset: offset, kafkaInstance: kafkaInstance, serverAddr: serverAddr, isEncryptionAddr: isEncryptionAddr, protocol: `protocol`, consumerGroupName: consumerGroupName, logRechargeRule: logRechargeRule), region: region, logger: logger, on: eventLoop)
    }

    /// Kafka数据订阅日志预览
    ///
    /// 本接口用于预览Kafka数据订阅任务客户日志信息
    @inlinable
    public func previewKafkaRecharge(previewType: UInt64, kafkaType: UInt64, userKafkaTopics: String, offset: Int64, kafkaInstance: String? = nil, serverAddr: String? = nil, isEncryptionAddr: Bool? = nil, protocol: KafkaProtocolInfo? = nil, consumerGroupName: String? = nil, logRechargeRule: LogRechargeRuleInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PreviewKafkaRechargeResponse {
        try await self.previewKafkaRecharge(.init(previewType: previewType, kafkaType: kafkaType, userKafkaTopics: userKafkaTopics, offset: offset, kafkaInstance: kafkaInstance, serverAddr: serverAddr, isEncryptionAddr: isEncryptionAddr, protocol: `protocol`, consumerGroupName: consumerGroupName, logRechargeRule: logRechargeRule), region: region, logger: logger, on: eventLoop)
    }
}
