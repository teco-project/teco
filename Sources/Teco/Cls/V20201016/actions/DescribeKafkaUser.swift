//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cls {
    /// DescribeKafkaUser请求参数结构体
    public struct DescribeKafkaUserRequest: TCRequestModel {
        /// kafka消费用户名
        public let userName: String

        public init(userName: String) {
            self.userName = userName
        }

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
        }
    }

    /// DescribeKafkaUser返回参数结构体
    public struct DescribeKafkaUserResponse: TCResponseModel {
        /// kafka消费用户名
        public let userName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case requestId = "RequestId"
        }
    }

    /// 获取kafka用户信息
    ///
    /// 本接口用于获取kafka用户信息
    @inlinable
    public func describeKafkaUser(_ input: DescribeKafkaUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKafkaUserResponse> {
        self.client.execute(action: "DescribeKafkaUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取kafka用户信息
    ///
    /// 本接口用于获取kafka用户信息
    @inlinable
    public func describeKafkaUser(_ input: DescribeKafkaUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKafkaUserResponse {
        try await self.client.execute(action: "DescribeKafkaUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取kafka用户信息
    ///
    /// 本接口用于获取kafka用户信息
    @inlinable
    public func describeKafkaUser(userName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKafkaUserResponse> {
        self.describeKafkaUser(.init(userName: userName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取kafka用户信息
    ///
    /// 本接口用于获取kafka用户信息
    @inlinable
    public func describeKafkaUser(userName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKafkaUserResponse {
        try await self.describeKafkaUser(.init(userName: userName), region: region, logger: logger, on: eventLoop)
    }
}
