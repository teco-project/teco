//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension Bda {
    /// 人体年龄信息。
    /// AttributesType 不含 Age 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
    public struct Age: TCOutputModel {
        /// 人体年龄信息，返回值为以下集合中的一个{小孩,青年,中年,老年}。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 返回人体属性选项，此值不填则为不需要返回，可以选择的值为以下六个。
    /// Age、Bag、Gender、Orientation、UpperBodyCloth、LowerBodyCloth，详细的解释请看对象描述
    /// 需注意本接口最多返回面积最大的 5 个人体属性信息，超过 5 个人体（第 6 个及以后的人体）的人体属性不具备参考意义。
    public struct AttributesOptions: TCInputModel {
        /// 返回年龄信息
        public let age: Bool?

        /// 返回随身挎包信息
        public let bag: Bool?

        /// 返回性别信息
        public let gender: Bool?

        /// 返回朝向信息
        public let orientation: Bool?

        /// 返回上装信息
        public let upperBodyCloth: Bool?

        /// 返回下装信息
        public let lowerBodyCloth: Bool?

        public init(age: Bool? = nil, bag: Bool? = nil, gender: Bool? = nil, orientation: Bool? = nil, upperBodyCloth: Bool? = nil, lowerBodyCloth: Bool? = nil) {
            self.age = age
            self.bag = bag
            self.gender = gender
            self.orientation = orientation
            self.upperBodyCloth = upperBodyCloth
            self.lowerBodyCloth = lowerBodyCloth
        }

        enum CodingKeys: String, CodingKey {
            case age = "Age"
            case bag = "Bag"
            case gender = "Gender"
            case orientation = "Orientation"
            case upperBodyCloth = "UpperBodyCloth"
            case lowerBodyCloth = "LowerBodyCloth"
        }
    }

    /// 人体是否挎包。
    /// AttributesType 不含 Bag 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
    public struct Bag: TCOutputModel {
        /// 挎包信息，返回值为以下集合中的一个{双肩包, 斜挎包, 手拎包, 无包}。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 图中检测出的人体属性信息。
    public struct BodyAttributeInfo: TCOutputModel {
        /// 人体年龄信息。
        /// AttributesType 不含 Age 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let age: Age?

        /// 人体是否挎包。
        /// AttributesType 不含 Bag 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bag: Bag?

        /// 人体性别信息。
        /// AttributesType 不含 Gender 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gender: Gender?

        /// 人体朝向信息。
        /// AttributesType 不含 UpperBodyCloth 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orientation: Orientation?

        /// 人体上衣属性信息。
        /// AttributesType 不含 Orientation 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upperBodyCloth: UpperBodyCloth?

        /// 人体下衣属性信息。
        /// AttributesType 不含 LowerBodyCloth 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lowerBodyCloth: LowerBodyCloth?

        enum CodingKeys: String, CodingKey {
            case age = "Age"
            case bag = "Bag"
            case gender = "Gender"
            case orientation = "Orientation"
            case upperBodyCloth = "UpperBodyCloth"
            case lowerBodyCloth = "LowerBodyCloth"
        }
    }

    /// 图中检测出来的人体框。
    public struct BodyDetectResult: TCOutputModel {
        /// 检测出的人体置信度。
        /// 误识率百分之十对应的阈值是0.14；误识率百分之五对应的阈值是0.32；误识率百分之二对应的阈值是0.62；误识率百分之一对应的阈值是0.81。
        /// 通常情况建议使用阈值0.32，可适用大多数情况。
        public let confidence: Float

        /// 图中检测出来的人体框
        public let bodyRect: BodyRect

        /// 图中检测出的人体属性信息。
        public let bodyAttributeInfo: BodyAttributeInfo

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case bodyRect = "BodyRect"
            case bodyAttributeInfo = "BodyAttributeInfo"
        }
    }

    /// 人体框和人体关键点信息。
    public struct BodyJointsResult: TCOutputModel {
        /// 图中检测出来的人体框。
        public let boundBox: BoundRect

        /// 14个人体关键点的坐标，人体关键点详见KeyPointInfo。
        public let bodyJoints: [KeyPointInfo]

        /// 检测出的人体置信度，0-1之间，数值越高越准确。
        public let confidence: Float

        enum CodingKeys: String, CodingKey {
            case boundBox = "BoundBox"
            case bodyJoints = "BodyJoints"
            case confidence = "Confidence"
        }
    }

    /// 人体框
    public struct BodyRect: TCInputModel, TCOutputModel {
        /// 人体框左上角横坐标。
        public let x: UInt64

        /// 人体框左上角纵坐标。
        public let y: UInt64

        /// 人体宽度。
        public let width: UInt64

        /// 人体高度。
        public let height: UInt64

        public init(x: UInt64, y: UInt64, width: UInt64, height: UInt64) {
            self.x = x
            self.y = y
            self.width = width
            self.height = height
        }

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 人体框
    public struct BoundRect: TCOutputModel {
        /// 人体框左上角横坐标。
        public let x: Int64

        /// 人体框左上角纵坐标。
        public let y: Int64

        /// 人体宽度。
        public let width: Int64

        /// 人体高度。
        public let height: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 识别出的最相似候选人。
    public struct Candidate: TCOutputModel {
        /// 人员ID。
        public let personId: String

        /// 人体动作轨迹ID。
        public let traceId: String

        /// 候选者的匹配得分。
        /// 十万人体库下，误识率百分之五对应的分数为70分；误识率百分之二对应的分数为80分；误识率百分之一对应的分数为90分。
        ///
        /// 二十万人体库下，误识率百分之五对应的分数为80分；误识率百分之二对应的分数为90分；误识率百分之一对应的分数为95分。
        ///
        /// 通常情况建议使用分数80分（保召回）。若希望获得较高精度，建议使用分数90分（保准确）。
        public let score: Float

        enum CodingKeys: String, CodingKey {
            case personId = "PersonId"
            case traceId = "TraceId"
            case score = "Score"
        }
    }

    /// 人体性别信息。
    /// AttributesType 不含 Gender 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
    public struct Gender: TCOutputModel {
        /// 性别信息，返回值为以下集合中的一个 {男性, 女性}
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 返回的人员库信息。
    public struct GroupInfo: TCOutputModel {
        /// 人体库名称。
        public let groupName: String

        /// 人体库ID。
        public let groupId: String

        /// 人体库信息备注。
        public let tag: String

        /// 人体识别所用的算法模型版本。
        public let bodyModelVersion: String

        /// Group的创建时间和日期 CreationTimestamp。CreationTimestamp 的值是自 Unix 纪元时间到Group创建时间的毫秒数。
        /// Unix 纪元时间是 1970 年 1 月 1 日星期四，协调世界时 (UTC) 。
        public let creationTimestamp: UInt64

        enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case groupId = "GroupId"
            case tag = "Tag"
            case bodyModelVersion = "BodyModelVersion"
            case creationTimestamp = "CreationTimestamp"
        }
    }

    /// 图像坐标信息。
    public struct ImageRect: TCOutputModel {
        /// 左上角横坐标。
        public let x: Int64

        /// 左上角纵坐标。
        public let y: Int64

        /// 人体宽度。
        public let width: Int64

        /// 人体高度。
        public let height: Int64

        /// 分割选项名称。
        public let label: String

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
            case label = "Label"
        }
    }

    /// 人体关键点信息
    public struct KeyPointInfo: TCOutputModel {
        /// 代表不同位置的人体关键点信息，返回值为以下集合中的一个 [头部,颈部,右肩,右肘,右腕,左肩,左肘,左腕,右髋,右膝,右踝,左髋,左膝,左踝]
        public let keyPointType: String

        /// 人体关键点横坐标
        public let x: Float

        /// 人体关键点纵坐标
        public let y: Float

        /// 关键点坐标置信度，分数取值在0-1之间，阈值建议为0.25，小于0.25认为在图中无人体关键点。
        public let bodyScore: Float

        enum CodingKeys: String, CodingKey {
            case keyPointType = "KeyPointType"
            case x = "X"
            case y = "Y"
            case bodyScore = "BodyScore"
        }
    }

    /// 下衣属性信息
    public struct LowerBodyCloth: TCOutputModel {
        /// 下衣颜色信息。
        public let color: LowerBodyClothColor

        /// 下衣长度信息 。
        public let length: LowerBodyClothLength

        /// 下衣类型信息。
        public let type: LowerBodyClothType

        enum CodingKeys: String, CodingKey {
            case color = "Color"
            case length = "Length"
            case type = "Type"
        }
    }

    /// 下衣颜色信息
    public struct LowerBodyClothColor: TCOutputModel {
        /// 下衣颜色信息，返回值为以下集合中的一个{ 黑色系, 灰白色系, 彩色} 。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 下衣长度信息
    public struct LowerBodyClothLength: TCOutputModel {
        /// 下衣长度信息，返回值为以下集合中的一个，{长, 短} 。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 下衣类型信息
    public struct LowerBodyClothType: TCOutputModel {
        /// 下衣类型，返回值为以下集合中的一个 {裤子,裙子} 。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 人体朝向信息。
    /// AttributesType 不含 Orientation 或检测超过 5 个人体时，此参数仍返回，但不具备参考意义。
    public struct Orientation: TCOutputModel {
        /// 人体朝向信息，返回值为以下集合中的一个 {正向, 背向, 左, 右}。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 人员信息。
    public struct PersonInfo: TCOutputModel {
        /// 人员名称。
        public let personName: String

        /// 人员ID。
        public let personId: String

        /// 包含的人体动作轨迹图片信息列表。
        public let traceInfos: [TraceInfo]

        enum CodingKeys: String, CodingKey {
            case personName = "PersonName"
            case personId = "PersonId"
            case traceInfos = "TraceInfos"
        }
    }

    /// 此参数为分割选项，请根据需要选择自己所想从图片中分割的部分。注意所有选项均为非必选，如未选择则值默认为false, 但是必须要保证多于一个选项的描述为true。
    public struct SegmentationOptions: TCInputModel {
        /// 分割选项-背景
        public let background: Bool?

        /// 分割选项-头发
        public let hair: Bool?

        /// 分割选项-左眉
        public let leftEyebrow: Bool?

        /// 分割选项-右眉
        public let rightEyebrow: Bool?

        /// 分割选项-左眼
        public let leftEye: Bool?

        /// 分割选项-右眼
        public let rightEye: Bool?

        /// 分割选项-鼻子
        public let nose: Bool?

        /// 分割选项-上唇
        public let upperLip: Bool?

        /// 分割选项-下唇
        public let lowerLip: Bool?

        /// 分割选项-牙齿
        public let tooth: Bool?

        /// 分割选项-口腔（不包含牙齿）
        public let mouth: Bool?

        /// 分割选项-左耳
        public let leftEar: Bool?

        /// 分割选项-右耳
        public let rightEar: Bool?

        /// 分割选项-面部(不包含眼、耳、口、鼻等五官及头发。)
        public let face: Bool?

        /// 复合分割选项-头部(包含所有的头部元素，相关装饰除外)
        public let head: Bool?

        /// 分割选项-身体（包含脖子）
        public let body: Bool?

        /// 分割选项-帽子
        public let hat: Bool?

        /// 分割选项-头饰
        public let headdress: Bool?

        /// 分割选项-耳环
        public let earrings: Bool?

        /// 分割选项-项链
        public let necklace: Bool?

        /// 分割选项-随身物品（ 例如伞、包、手机等。 ）
        public let belongings: Bool?

        public init(background: Bool? = nil, hair: Bool? = nil, leftEyebrow: Bool? = nil, rightEyebrow: Bool? = nil, leftEye: Bool? = nil, rightEye: Bool? = nil, nose: Bool? = nil, upperLip: Bool? = nil, lowerLip: Bool? = nil, tooth: Bool? = nil, mouth: Bool? = nil, leftEar: Bool? = nil, rightEar: Bool? = nil, face: Bool? = nil, head: Bool? = nil, body: Bool? = nil, hat: Bool? = nil, headdress: Bool? = nil, earrings: Bool? = nil, necklace: Bool? = nil, belongings: Bool? = nil) {
            self.background = background
            self.hair = hair
            self.leftEyebrow = leftEyebrow
            self.rightEyebrow = rightEyebrow
            self.leftEye = leftEye
            self.rightEye = rightEye
            self.nose = nose
            self.upperLip = upperLip
            self.lowerLip = lowerLip
            self.tooth = tooth
            self.mouth = mouth
            self.leftEar = leftEar
            self.rightEar = rightEar
            self.face = face
            self.head = head
            self.body = body
            self.hat = hat
            self.headdress = headdress
            self.earrings = earrings
            self.necklace = necklace
            self.belongings = belongings
        }

        enum CodingKeys: String, CodingKey {
            case background = "Background"
            case hair = "Hair"
            case leftEyebrow = "LeftEyebrow"
            case rightEyebrow = "RightEyebrow"
            case leftEye = "LeftEye"
            case rightEye = "RightEye"
            case nose = "Nose"
            case upperLip = "UpperLip"
            case lowerLip = "LowerLip"
            case tooth = "Tooth"
            case mouth = "Mouth"
            case leftEar = "LeftEar"
            case rightEar = "RightEar"
            case face = "Face"
            case head = "Head"
            case body = "Body"
            case hat = "Hat"
            case headdress = "Headdress"
            case earrings = "Earrings"
            case necklace = "Necklace"
            case belongings = "Belongings"
        }
    }

    /// 人体动作轨迹信息
    public struct Trace: TCInputModel, TCOutputModel {
        /// 人体动作轨迹图片 Base64 数组。
        /// 数组长度最小为1最大为5。
        /// 单个图片 base64 编码后大小不可超过2M。
        /// 支持PNG、JPG、JPEG、BMP，不支持 GIF 图片。
        public let images: [String]?

        /// 人体动作轨迹图片 Url 数组。
        /// 数组长度最小为1最大为5。
        /// 单个图片 base64 编码后大小不可超过2M。
        /// Urls、Images必须提供一个，如果都提供，只使用 Urls。
        /// 图片存储于腾讯云的Url可保障更高下载速度和稳定性，建议图片存储于腾讯云。
        /// 非腾讯云存储的Url速度和稳定性可能受一定影响。
        /// 支持PNG、JPG、JPEG、BMP，不支持 GIF 图片。
        public let urls: [String]?

        /// 若输入的Images 和 Urls 是已经裁剪后的人体小图，则可以忽略本参数。
        /// 若否，或图片中包含多个人体，则需要通过本参数来指定图片中的人体框。
        /// 顺序对应 Images 或 Urls 中的顺序。
        /// 当不输入本参数时，我们将认为输入图片已是经过裁剪后的人体小图，不会进行人体检测而直接进行特征提取处理。
        public let bodyRects: [BodyRect]?

        public init(images: [String]? = nil, urls: [String]? = nil, bodyRects: [BodyRect]? = nil) {
            self.images = images
            self.urls = urls
            self.bodyRects = bodyRects
        }

        enum CodingKeys: String, CodingKey {
            case images = "Images"
            case urls = "Urls"
            case bodyRects = "BodyRects"
        }
    }

    /// 人体动作轨迹信息。
    public struct TraceInfo: TCOutputModel {
        /// 人体动作轨迹ID。
        public let traceId: String

        /// 包含的人体动作轨迹图片Id列表。
        public let bodyIds: [String]

        enum CodingKeys: String, CodingKey {
            case traceId = "TraceId"
            case bodyIds = "BodyIds"
        }
    }

    /// 上衣属性信息
    public struct UpperBodyCloth: TCOutputModel {
        /// 上衣纹理信息。
        public let texture: UpperBodyClothTexture

        /// 上衣颜色信息。
        public let color: UpperBodyClothColor

        /// 上衣衣袖信息。
        public let sleeve: UpperBodyClothSleeve

        enum CodingKeys: String, CodingKey {
            case texture = "Texture"
            case color = "Color"
            case sleeve = "Sleeve"
        }
    }

    /// 上衣颜色信息。
    public struct UpperBodyClothColor: TCOutputModel {
        /// 上衣颜色信息，返回值为以下集合中的一个 {红色系, 黄色系, 绿色系, 蓝色系, 黑色系, 灰白色系。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 上衣衣袖信息。
    public struct UpperBodyClothSleeve: TCOutputModel {
        /// 上衣衣袖信息, 返回值为以下集合中的一个 {长袖, 短袖}。
        public let type: String

        /// Type识别概率值，[0.0,1.0],代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 上衣纹理信息。
    public struct UpperBodyClothTexture: TCOutputModel {
        /// 上衣纹理信息，返回值为以下集合中的一个, {纯色, 格子, 大色块}。
        public let type: String

        /// Type识别概率值，[0.0,1.0], 代表判断正确的概率。如0.8则代表有Type值有80%概率正确。
        public let probability: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case probability = "Probability"
        }
    }

    /// 视频基础信息
    public struct VideoBasicInformation: TCOutputModel {
        /// 视频宽度
        public let frameWidth: Int64

        /// 视频高度
        public let frameHeight: Int64

        /// 视频帧速率(FPS)
        public let framesPerSecond: Int64

        /// 视频时长
        public let duration: Float

        /// 视频帧数
        public let totalFrames: Int64

        enum CodingKeys: String, CodingKey {
            case frameWidth = "FrameWidth"
            case frameHeight = "FrameHeight"
            case framesPerSecond = "FramesPerSecond"
            case duration = "Duration"
            case totalFrames = "TotalFrames"
        }
    }
}
