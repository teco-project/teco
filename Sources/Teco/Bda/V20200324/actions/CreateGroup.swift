//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bda {
    /// CreateGroup请求参数结构体
    public struct CreateGroupRequest: TCRequestModel {
        /// 人体库名称，[1,60]个字符，可修改，不可重复。
        public let groupName: String

        /// 人体库 ID，不可修改，不可重复。支持英文、数字、-%@#&_，长度限制64B。
        public let groupId: String

        /// 人体库信息备注，[0，40]个字符。
        public let tag: String?

        /// 人体识别所用的算法模型版本。
        /// 目前入参仅支持 “1.0”1个输入。 默认为"1.0"。
        /// 不同算法模型版本对应的人体识别算法不同，新版本的整体效果会优于旧版本，后续我们将推出更新版本。
        public let bodyModelVersion: String?

        public init(groupName: String, groupId: String, tag: String? = nil, bodyModelVersion: String? = nil) {
            self.groupName = groupName
            self.groupId = groupId
            self.tag = tag
            self.bodyModelVersion = bodyModelVersion
        }

        enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case groupId = "GroupId"
            case tag = "Tag"
            case bodyModelVersion = "BodyModelVersion"
        }
    }

    /// CreateGroup返回参数结构体
    public struct CreateGroupResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建人体库
    ///
    /// 用于创建一个空的人体库，如果人体库已存在返回错误。
    /// 1个APPID下最多有2000W个人体动作轨迹（Trace），最多1W个人体库（Group）。
    /// 单个人体库（Group）最多10W个人体动作轨迹（Trace）。
    /// 单个人员（Person）最多添加 5 个人体动作轨迹（Trace）。
    @inlinable
    public func createGroup(_ input: CreateGroupRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateGroupResponse> {
        self.client.execute(action: "CreateGroup", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建人体库
    ///
    /// 用于创建一个空的人体库，如果人体库已存在返回错误。
    /// 1个APPID下最多有2000W个人体动作轨迹（Trace），最多1W个人体库（Group）。
    /// 单个人体库（Group）最多10W个人体动作轨迹（Trace）。
    /// 单个人员（Person）最多添加 5 个人体动作轨迹（Trace）。
    @inlinable
    public func createGroup(_ input: CreateGroupRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateGroupResponse {
        try await self.client.execute(action: "CreateGroup", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建人体库
    ///
    /// 用于创建一个空的人体库，如果人体库已存在返回错误。
    /// 1个APPID下最多有2000W个人体动作轨迹（Trace），最多1W个人体库（Group）。
    /// 单个人体库（Group）最多10W个人体动作轨迹（Trace）。
    /// 单个人员（Person）最多添加 5 个人体动作轨迹（Trace）。
    @inlinable
    public func createGroup(groupName: String, groupId: String, tag: String? = nil, bodyModelVersion: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateGroupResponse> {
        self.createGroup(CreateGroupRequest(groupName: groupName, groupId: groupId, tag: tag, bodyModelVersion: bodyModelVersion), logger: logger, on: eventLoop)
    }

    /// 创建人体库
    ///
    /// 用于创建一个空的人体库，如果人体库已存在返回错误。
    /// 1个APPID下最多有2000W个人体动作轨迹（Trace），最多1W个人体库（Group）。
    /// 单个人体库（Group）最多10W个人体动作轨迹（Trace）。
    /// 单个人员（Person）最多添加 5 个人体动作轨迹（Trace）。
    @inlinable
    public func createGroup(groupName: String, groupId: String, tag: String? = nil, bodyModelVersion: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateGroupResponse {
        try await self.createGroup(CreateGroupRequest(groupName: groupName, groupId: groupId, tag: tag, bodyModelVersion: bodyModelVersion), logger: logger, on: eventLoop)
    }
}
