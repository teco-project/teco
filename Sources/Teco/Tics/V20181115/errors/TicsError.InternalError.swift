//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTicsError {
    public struct InternalError: TCTicsErrorType {
        enum Code: String {
            case cacheErr = "InternalError.CacheErr"
            case localErr = "InternalError.LocalErr"
            case timeout = "InternalError.Timeout"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 内部系统错误，组件异常。
        public static var cacheErr: InternalError {
            InternalError(.cacheErr)
        }

        /// 内部系统错误，逻辑错误。
        public static var localErr: InternalError {
            InternalError(.localErr)
        }

        /// 内部系统错误，超时等异常。
        public static var timeout: InternalError {
            InternalError(.timeout)
        }

        public func asTicsError() -> TCTicsError {
            let code: TCTicsError.Code
            switch self.error {
            case .cacheErr:
                code = .internalError_CacheErr
            case .localErr:
                code = .internalError_LocalErr
            case .timeout:
                code = .internalError_Timeout
            }
            return TCTicsError(code, context: self.context)
        }
    }
}
