//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bizlive {
    /// ForbidLiveStream请求参数结构体
    public struct ForbidLiveStreamRequest: TCRequestModel {
        /// 应用名称。
        public let appName: String

        /// 您的推流域名。
        public let domainName: String

        /// 流名称。
        public let streamName: String

        /// 恢复流的时间。UTC 格式，例如：2018-11-29T19:00:00Z。
        /// 注意：默认禁播90天，且最长支持禁播90天。
        public let resumeTime: String?

        public init(appName: String, domainName: String, streamName: String, resumeTime: String? = nil) {
            self.appName = appName
            self.domainName = domainName
            self.streamName = streamName
            self.resumeTime = resumeTime
        }

        enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case domainName = "DomainName"
            case streamName = "StreamName"
            case resumeTime = "ResumeTime"
        }
    }

    /// ForbidLiveStream返回参数结构体
    public struct ForbidLiveStreamResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 禁播直播流
    ///
    /// 禁止某条流的推送，可以预设某个时刻将流恢复。
    @inlinable
    public func forbidLiveStream(_ input: ForbidLiveStreamRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ForbidLiveStreamResponse> {
        self.client.execute(action: "ForbidLiveStream", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 禁播直播流
    ///
    /// 禁止某条流的推送，可以预设某个时刻将流恢复。
    @inlinable
    public func forbidLiveStream(_ input: ForbidLiveStreamRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ForbidLiveStreamResponse {
        try await self.client.execute(action: "ForbidLiveStream", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 禁播直播流
    ///
    /// 禁止某条流的推送，可以预设某个时刻将流恢复。
    @inlinable
    public func forbidLiveStream(appName: String, domainName: String, streamName: String, resumeTime: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ForbidLiveStreamResponse> {
        self.forbidLiveStream(ForbidLiveStreamRequest(appName: appName, domainName: domainName, streamName: streamName, resumeTime: resumeTime), logger: logger, on: eventLoop)
    }

    /// 禁播直播流
    ///
    /// 禁止某条流的推送，可以预设某个时刻将流恢复。
    @inlinable
    public func forbidLiveStream(appName: String, domainName: String, streamName: String, resumeTime: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ForbidLiveStreamResponse {
        try await self.forbidLiveStream(ForbidLiveStreamRequest(appName: appName, domainName: domainName, streamName: streamName, resumeTime: resumeTime), logger: logger, on: eventLoop)
    }
}
