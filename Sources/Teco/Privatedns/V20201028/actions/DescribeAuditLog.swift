//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Privatedns {
    /// DescribeAuditLog请求参数结构体
    public struct DescribeAuditLogRequest: TCPaginatedRequest {
        /// 请求量统计起始时间
        public let timeRangeBegin: String

        /// 筛选参数：ZoneId：私有域ID；Domain：私有域；OperatorUin：操作者账号ID
        public let filters: [Filter]?

        /// 请求量统计结束时间
        public let timeRangeEnd: String?

        /// 分页偏移量，从0开始
        public let offset: Int64?

        /// 分页限制数目， 最大100，默认20
        public let limit: Int64?

        public init(timeRangeBegin: String, filters: [Filter]? = nil, timeRangeEnd: String? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.timeRangeBegin = timeRangeBegin
            self.filters = filters
            self.timeRangeEnd = timeRangeEnd
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case timeRangeBegin = "TimeRangeBegin"
            case filters = "Filters"
            case timeRangeEnd = "TimeRangeEnd"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAuditLogResponse) -> DescribeAuditLogRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeAuditLogRequest(timeRangeBegin: self.timeRangeBegin, filters: self.filters, timeRangeEnd: self.timeRangeEnd, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeAuditLog返回参数结构体
    public struct DescribeAuditLogResponse: TCPaginatedResponse {
        /// 操作日志列表
        public let data: [AuditLog]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [AuditLog] {
            self.data
        }
    }

    /// 获取操作日志列表
    @inlinable
    public func describeAuditLog(_ input: DescribeAuditLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAuditLogResponse> {
        self.client.execute(action: "DescribeAuditLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取操作日志列表
    @inlinable
    public func describeAuditLog(_ input: DescribeAuditLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAuditLogResponse {
        try await self.client.execute(action: "DescribeAuditLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取操作日志列表
    @inlinable
    public func describeAuditLog(timeRangeBegin: String, filters: [Filter]? = nil, timeRangeEnd: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAuditLogResponse> {
        self.describeAuditLog(.init(timeRangeBegin: timeRangeBegin, filters: filters, timeRangeEnd: timeRangeEnd, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取操作日志列表
    @inlinable
    public func describeAuditLog(timeRangeBegin: String, filters: [Filter]? = nil, timeRangeEnd: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAuditLogResponse {
        try await self.describeAuditLog(.init(timeRangeBegin: timeRangeBegin, filters: filters, timeRangeEnd: timeRangeEnd, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取操作日志列表
    @inlinable
    public func describeAuditLogPaginated(_ input: DescribeAuditLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [AuditLog])> {
        self.client.paginate(input: input, region: region, command: self.describeAuditLog, logger: logger, on: eventLoop)
    }

    /// 获取操作日志列表
    @inlinable @discardableResult
    public func describeAuditLogPaginated(_ input: DescribeAuditLogRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAuditLogResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAuditLog, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取操作日志列表
    ///
    /// - Returns: `AsyncSequence`s of `AuditLog` and `DescribeAuditLogResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAuditLogPaginator(_ input: DescribeAuditLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAuditLogRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAuditLog, logger: logger, on: eventLoop)
    }
}
