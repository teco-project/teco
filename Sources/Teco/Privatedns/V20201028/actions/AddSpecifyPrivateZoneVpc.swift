//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Privatedns {
    /// AddSpecifyPrivateZoneVpc请求参数结构体
    public struct AddSpecifyPrivateZoneVpcRequest: TCRequest {
        /// 私有域id
        public let zoneId: String

        /// 本次新增的vpc信息
        public let vpcSet: [VpcInfo]?

        /// 本次新增关联账户vpc信息
        public let accountVpcSet: [AccountVpcInfo]?

        public init(zoneId: String, vpcSet: [VpcInfo]? = nil, accountVpcSet: [AccountVpcInfo]? = nil) {
            self.zoneId = zoneId
            self.vpcSet = vpcSet
            self.accountVpcSet = accountVpcSet
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case vpcSet = "VpcSet"
            case accountVpcSet = "AccountVpcSet"
        }
    }

    /// AddSpecifyPrivateZoneVpc返回参数结构体
    public struct AddSpecifyPrivateZoneVpcResponse: TCResponse {
        /// zone id
        public let zoneId: String

        /// 本次新增的vpc
        public let vpcSet: [VpcInfo]

        /// 本次新增的关联账号vpc
        public let accountVpcSet: [AccountVpcInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case vpcSet = "VpcSet"
            case accountVpcSet = "AccountVpcSet"
            case requestId = "RequestId"
        }
    }

    /// 追加与私有域关联的VPC
    @inlinable
    public func addSpecifyPrivateZoneVpc(_ input: AddSpecifyPrivateZoneVpcRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddSpecifyPrivateZoneVpcResponse> {
        self.client.execute(action: "AddSpecifyPrivateZoneVpc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 追加与私有域关联的VPC
    @inlinable
    public func addSpecifyPrivateZoneVpc(_ input: AddSpecifyPrivateZoneVpcRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddSpecifyPrivateZoneVpcResponse {
        try await self.client.execute(action: "AddSpecifyPrivateZoneVpc", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 追加与私有域关联的VPC
    @inlinable
    public func addSpecifyPrivateZoneVpc(zoneId: String, vpcSet: [VpcInfo]? = nil, accountVpcSet: [AccountVpcInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddSpecifyPrivateZoneVpcResponse> {
        self.addSpecifyPrivateZoneVpc(.init(zoneId: zoneId, vpcSet: vpcSet, accountVpcSet: accountVpcSet), region: region, logger: logger, on: eventLoop)
    }

    /// 追加与私有域关联的VPC
    @inlinable
    public func addSpecifyPrivateZoneVpc(zoneId: String, vpcSet: [VpcInfo]? = nil, accountVpcSet: [AccountVpcInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddSpecifyPrivateZoneVpcResponse {
        try await self.addSpecifyPrivateZoneVpc(.init(zoneId: zoneId, vpcSet: vpcSet, accountVpcSet: accountVpcSet), region: region, logger: logger, on: eventLoop)
    }
}
