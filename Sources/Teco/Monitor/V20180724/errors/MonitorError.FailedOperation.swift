//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCMonitorError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case accessSTSFail = "FailedOperation.AccessSTSFail"
            case accessTKEFail = "FailedOperation.AccessTKEFail"
            case accessTagFail = "FailedOperation.AccessTagFail"
            case agentNotAllowed = "FailedOperation.AgentNotAllowed"
            case agentVersionNotSupported = "FailedOperation.AgentVersionNotSupported"
            case agentsNotInUninstallStage = "FailedOperation.AgentsNotInUninstallStage"
            case alertFilterRuleDeleteFailed = "FailedOperation.AlertFilterRuleDeleteFailed"
            case alertPolicyCreateFailed = "FailedOperation.AlertPolicyCreateFailed"
            case alertPolicyDeleteFailed = "FailedOperation.AlertPolicyDeleteFailed"
            case alertPolicyDescribeFailed = "FailedOperation.AlertPolicyDescribeFailed"
            case alertPolicyModifyFailed = "FailedOperation.AlertPolicyModifyFailed"
            case alertTriggerRuleDeleteFailed = "FailedOperation.AlertTriggerRuleDeleteFailed"
            case badYamlFormat = "FailedOperation.BadYamlFormat"
            case createInstance = "FailedOperation.CreateInstance"
            case createInstanceLimited = "FailedOperation.CreateInstanceLimited"
            case dataColumnNotFound = "FailedOperation.DataColumnNotFound"
            case dataQueryFailed = "FailedOperation.DataQueryFailed"
            case dataTableNotFound = "FailedOperation.DataTableNotFound"
            case dbQueryFailed = "FailedOperation.DbQueryFailed"
            case dbRecordCreateFailed = "FailedOperation.DbRecordCreateFailed"
            case dbRecordDeleteFailed = "FailedOperation.DbRecordDeleteFailed"
            case dbRecordUpdateFailed = "FailedOperation.DbRecordUpdateFailed"
            case dbTransactionBeginFailed = "FailedOperation.DbTransactionBeginFailed"
            case dbTransactionCommitFailed = "FailedOperation.DbTransactionCommitFailed"
            case dimQueryRequestFailed = "FailedOperation.DimQueryRequestFailed"
            case divisionByZero = "FailedOperation.DivisionByZero"
            case druidQueryFailed = "FailedOperation.DruidQueryFailed"
            case druidTableNotFound = "FailedOperation.DruidTableNotFound"
            case duplicateName = "FailedOperation.DuplicateName"
            case errNotOpen = "FailedOperation.ErrNotOpen"
            case errOwed = "FailedOperation.ErrOwed"
            case generateInstanceIDFailed = "FailedOperation.GenerateInstanceIDFailed"
            case instanceNotFound = "FailedOperation.InstanceNotFound"
            case instanceNotRunning = "FailedOperation.InstanceNotRunning"
            case internalError = "FailedOperation.InternalError"
            case regionUnavailable = "FailedOperation.RegionUnavailable"
            case resourceExist = "FailedOperation.ResourceExist"
            case resourceNotFound = "FailedOperation.ResourceNotFound"
            case resourceOperating = "FailedOperation.ResourceOperating"
            case sendRequest = "FailedOperation.SendRequest"
            case serviceNotEnabled = "FailedOperation.ServiceNotEnabled"
            case tkeClientAuthFail = "FailedOperation.TKEClientAuthFail"
            case tkeEndpointStatusError = "FailedOperation.TKEEndpointStatusError"
            case tkeResourceConflict = "FailedOperation.TKEResourceConflict"
            case zoneUnavailable = "FailedOperation.ZoneUnavailable"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 访问STS失败。
        public static var accessSTSFail: FailedOperation {
            FailedOperation(.accessSTSFail)
        }
        
        /// 访问用户TKE集群失败。
        public static var accessTKEFail: FailedOperation {
            FailedOperation(.accessTKEFail)
        }
        
        /// 访问标签服务失败。
        public static var accessTagFail: FailedOperation {
            FailedOperation(.accessTagFail)
        }
        
        /// agent当前状态不允许该操作。
        public static var agentNotAllowed: FailedOperation {
            FailedOperation(.agentNotAllowed)
        }
        
        /// Agent版本不支持该操作，请升级Agent。
        public static var agentVersionNotSupported: FailedOperation {
            FailedOperation(.agentVersionNotSupported)
        }
        
        /// 该实例上有正在运行的Agent。
        public static var agentsNotInUninstallStage: FailedOperation {
            FailedOperation(.agentsNotInUninstallStage)
        }
        
        /// 删除过滤条件失败。
        public static var alertFilterRuleDeleteFailed: FailedOperation {
            FailedOperation(.alertFilterRuleDeleteFailed)
        }
        
        /// 创建告警策略失败。
        public static var alertPolicyCreateFailed: FailedOperation {
            FailedOperation(.alertPolicyCreateFailed)
        }
        
        /// 告警策略删除失败。
        public static var alertPolicyDeleteFailed: FailedOperation {
            FailedOperation(.alertPolicyDeleteFailed)
        }
        
        /// 告警策略查询失败。
        public static var alertPolicyDescribeFailed: FailedOperation {
            FailedOperation(.alertPolicyDescribeFailed)
        }
        
        /// 告警策略修改失败。
        public static var alertPolicyModifyFailed: FailedOperation {
            FailedOperation(.alertPolicyModifyFailed)
        }
        
        /// 删除触发条件失败。
        public static var alertTriggerRuleDeleteFailed: FailedOperation {
            FailedOperation(.alertTriggerRuleDeleteFailed)
        }
        
        /// Yaml 格式不正确。
        public static var badYamlFormat: FailedOperation {
            FailedOperation(.badYamlFormat)
        }
        
        /// 创建实例失败。
        public static var createInstance: FailedOperation {
            FailedOperation(.createInstance)
        }
        
        /// 该账号创建实例被限制。
        public static var createInstanceLimited: FailedOperation {
            FailedOperation(.createInstanceLimited)
        }
        
        /// 数据表字段不存在。
        public static var dataColumnNotFound: FailedOperation {
            FailedOperation(.dataColumnNotFound)
        }
        
        /// 数据查询失败。
        public static var dataQueryFailed: FailedOperation {
            FailedOperation(.dataQueryFailed)
        }
        
        /// 数据表不存在。
        public static var dataTableNotFound: FailedOperation {
            FailedOperation(.dataTableNotFound)
        }
        
        /// 数据库查询失败。
        public static var dbQueryFailed: FailedOperation {
            FailedOperation(.dbQueryFailed)
        }
        
        /// 创建数据库记录失败。
        public static var dbRecordCreateFailed: FailedOperation {
            FailedOperation(.dbRecordCreateFailed)
        }
        
        /// 数据库记录删除失败。
        public static var dbRecordDeleteFailed: FailedOperation {
            FailedOperation(.dbRecordDeleteFailed)
        }
        
        /// 数据库记录更新失败。
        public static var dbRecordUpdateFailed: FailedOperation {
            FailedOperation(.dbRecordUpdateFailed)
        }
        
        /// 数据库事务开始失败。
        public static var dbTransactionBeginFailed: FailedOperation {
            FailedOperation(.dbTransactionBeginFailed)
        }
        
        /// 数据库事务提交失败。
        public static var dbTransactionCommitFailed: FailedOperation {
            FailedOperation(.dbTransactionCommitFailed)
        }
        
        /// 请求维度查询服务失败。
        public static var dimQueryRequestFailed: FailedOperation {
            FailedOperation(.dimQueryRequestFailed)
        }
        
        /// 被除数为0。
        public static var divisionByZero: FailedOperation {
            FailedOperation(.divisionByZero)
        }
        
        /// 查询分析数据失败。
        public static var druidQueryFailed: FailedOperation {
            FailedOperation(.druidQueryFailed)
        }
        
        /// druid表不存在。
        public static var druidTableNotFound: FailedOperation {
            FailedOperation(.druidTableNotFound)
        }
        
        /// 名字重复。
        public static var duplicateName: FailedOperation {
            FailedOperation(.duplicateName)
        }
        
        public static var errNotOpen: FailedOperation {
            FailedOperation(.errNotOpen)
        }
        
        public static var errOwed: FailedOperation {
            FailedOperation(.errOwed)
        }
        
        /// 生成资源ID错误。
        public static var generateInstanceIDFailed: FailedOperation {
            FailedOperation(.generateInstanceIDFailed)
        }
        
        /// 实例不存在。
        public static var instanceNotFound: FailedOperation {
            FailedOperation(.instanceNotFound)
        }
        
        /// 实例没有运行。
        public static var instanceNotRunning: FailedOperation {
            FailedOperation(.instanceNotRunning)
        }
        
        public static var internalError: FailedOperation {
            FailedOperation(.internalError)
        }
        
        /// 地区不可用。
        public static var regionUnavailable: FailedOperation {
            FailedOperation(.regionUnavailable)
        }
        
        /// 资源已经存在。
        public static var resourceExist: FailedOperation {
            FailedOperation(.resourceExist)
        }
        
        /// 资源不存在。
        public static var resourceNotFound: FailedOperation {
            FailedOperation(.resourceNotFound)
        }
        
        /// 资源正在被操作。
        public static var resourceOperating: FailedOperation {
            FailedOperation(.resourceOperating)
        }
        
        /// 发送授权请求失败。
        public static var sendRequest: FailedOperation {
            FailedOperation(.sendRequest)
        }
        
        /// 服务未启用，开通服务后方可使用。
        public static var serviceNotEnabled: FailedOperation {
            FailedOperation(.serviceNotEnabled)
        }
        
        /// 没有访问TKE权限。
        public static var tkeClientAuthFail: FailedOperation {
            FailedOperation(.tkeClientAuthFail)
        }
        
        /// TKE的endpoint不可访问。
        public static var tkeEndpointStatusError: FailedOperation {
            FailedOperation(.tkeEndpointStatusError)
        }
        
        /// 更新TKE资源时出现冲突。
        public static var tkeResourceConflict: FailedOperation {
            FailedOperation(.tkeResourceConflict)
        }
        
        /// 可用区不可用。
        public static var zoneUnavailable: FailedOperation {
            FailedOperation(.zoneUnavailable)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCMonitorError.FailedOperation: Equatable {
    public static func == (lhs: TCMonitorError.FailedOperation, rhs: TCMonitorError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCMonitorError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCMonitorError.FailedOperation {
    public func toMonitorError() -> TCMonitorError {
        guard let code = TCMonitorError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCMonitorError(code, context: self.context)
    }
}