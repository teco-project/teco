//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Monitor {
    /// DescribeGrafanaConfig请求参数结构体
    public struct DescribeGrafanaConfigRequest: TCRequestModel {
        /// Grafana 实例 ID，例如：grafana-12345678
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeGrafanaConfig返回参数结构体
    public struct DescribeGrafanaConfigResponse: TCResponseModel {
        /// JSON 编码后的字符串
        public let config: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case config = "Config"
            case requestId = "RequestId"
        }
    }

    /// 列出 Grafana 的设置
    ///
    /// 列出 Grafana 的设置，即 grafana.ini 文件内容
    @inlinable
    public func describeGrafanaConfig(_ input: DescribeGrafanaConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGrafanaConfigResponse> {
        self.client.execute(action: "DescribeGrafanaConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 列出 Grafana 的设置
    ///
    /// 列出 Grafana 的设置，即 grafana.ini 文件内容
    @inlinable
    public func describeGrafanaConfig(_ input: DescribeGrafanaConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGrafanaConfigResponse {
        try await self.client.execute(action: "DescribeGrafanaConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 列出 Grafana 的设置
    ///
    /// 列出 Grafana 的设置，即 grafana.ini 文件内容
    @inlinable
    public func describeGrafanaConfig(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGrafanaConfigResponse> {
        self.describeGrafanaConfig(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 列出 Grafana 的设置
    ///
    /// 列出 Grafana 的设置，即 grafana.ini 文件内容
    @inlinable
    public func describeGrafanaConfig(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGrafanaConfigResponse {
        try await self.describeGrafanaConfig(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
