//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Monitor {
    /// DeletePrometheusScrapeJobs请求参数结构体
    public struct DeletePrometheusScrapeJobsRequest: TCRequestModel {
        /// 实例 ID
        public let instanceId: String

        /// Agent ID
        public let agentId: String

        /// 任务 ID 列表
        public let jobIds: [String]

        public init(instanceId: String, agentId: String, jobIds: [String]) {
            self.instanceId = instanceId
            self.agentId = agentId
            self.jobIds = jobIds
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case agentId = "AgentId"
            case jobIds = "JobIds"
        }
    }

    /// DeletePrometheusScrapeJobs返回参数结构体
    public struct DeletePrometheusScrapeJobsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除 Prometheus 抓取任务
    @inlinable @discardableResult
    public func deletePrometheusScrapeJobs(_ input: DeletePrometheusScrapeJobsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeletePrometheusScrapeJobsResponse> {
        self.client.execute(action: "DeletePrometheusScrapeJobs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除 Prometheus 抓取任务
    @inlinable @discardableResult
    public func deletePrometheusScrapeJobs(_ input: DeletePrometheusScrapeJobsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeletePrometheusScrapeJobsResponse {
        try await self.client.execute(action: "DeletePrometheusScrapeJobs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除 Prometheus 抓取任务
    @inlinable @discardableResult
    public func deletePrometheusScrapeJobs(instanceId: String, agentId: String, jobIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeletePrometheusScrapeJobsResponse> {
        self.deletePrometheusScrapeJobs(.init(instanceId: instanceId, agentId: agentId, jobIds: jobIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除 Prometheus 抓取任务
    @inlinable @discardableResult
    public func deletePrometheusScrapeJobs(instanceId: String, agentId: String, jobIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeletePrometheusScrapeJobsResponse {
        try await self.deletePrometheusScrapeJobs(.init(instanceId: instanceId, agentId: agentId, jobIds: jobIds), region: region, logger: logger, on: eventLoop)
    }
}
