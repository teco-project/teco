//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Monitor {
    /// DescribeBasicAlarmList请求参数结构体
    public struct DescribeBasicAlarmListRequest: TCRequestModel {
        /// 接口模块名，当前取值monitor
        public let module: String

        /// 起始时间，默认一天前的时间戳
        public let startTime: Int64?

        /// 结束时间，默认当前时间戳
        public let endTime: Int64?

        /// 分页参数，每页返回的数量，取值1~100，默认20
        public let limit: Int64?

        /// 分页参数，页偏移量，从0开始计数，默认0
        public let offset: Int64?

        /// 根据发生时间排序，取值ASC或DESC
        public let occurTimeOrder: String?

        /// 根据项目ID过滤
        public let projectIds: [Int64]?

        /// 根据策略类型过滤
        public let viewNames: [String]?

        /// 根据告警状态过滤
        public let alarmStatus: [Int64]?

        /// 根据告警对象过滤
        public let objLike: String?

        /// 根据实例组ID过滤
        public let instanceGroupIds: [Int64]?

        /// 根据指标名过滤
        public let metricNames: [String]?

        public init(module: String, startTime: Int64? = nil, endTime: Int64? = nil, limit: Int64? = nil, offset: Int64? = nil, occurTimeOrder: String? = nil, projectIds: [Int64]? = nil, viewNames: [String]? = nil, alarmStatus: [Int64]? = nil, objLike: String? = nil, instanceGroupIds: [Int64]? = nil, metricNames: [String]? = nil) {
            self.module = module
            self.startTime = startTime
            self.endTime = endTime
            self.limit = limit
            self.offset = offset
            self.occurTimeOrder = occurTimeOrder
            self.projectIds = projectIds
            self.viewNames = viewNames
            self.alarmStatus = alarmStatus
            self.objLike = objLike
            self.instanceGroupIds = instanceGroupIds
            self.metricNames = metricNames
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case limit = "Limit"
            case offset = "Offset"
            case occurTimeOrder = "OccurTimeOrder"
            case projectIds = "ProjectIds"
            case viewNames = "ViewNames"
            case alarmStatus = "AlarmStatus"
            case objLike = "ObjLike"
            case instanceGroupIds = "InstanceGroupIds"
            case metricNames = "MetricNames"
        }
    }

    /// DescribeBasicAlarmList返回参数结构体
    public struct DescribeBasicAlarmListResponse: TCResponseModel {
        /// 告警列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alarms: [DescribeBasicAlarmListAlarms]?

        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warning: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case alarms = "Alarms"
            case total = "Total"
            case warning = "Warning"
            case requestId = "RequestId"
        }
    }

    /// 获取基础告警列表
    @inlinable
    public func describeBasicAlarmList(_ input: DescribeBasicAlarmListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBasicAlarmListResponse> {
        self.client.execute(action: "DescribeBasicAlarmList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取基础告警列表
    @inlinable
    public func describeBasicAlarmList(_ input: DescribeBasicAlarmListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBasicAlarmListResponse {
        try await self.client.execute(action: "DescribeBasicAlarmList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取基础告警列表
    @inlinable
    public func describeBasicAlarmList(module: String, startTime: Int64? = nil, endTime: Int64? = nil, limit: Int64? = nil, offset: Int64? = nil, occurTimeOrder: String? = nil, projectIds: [Int64]? = nil, viewNames: [String]? = nil, alarmStatus: [Int64]? = nil, objLike: String? = nil, instanceGroupIds: [Int64]? = nil, metricNames: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBasicAlarmListResponse> {
        let input = DescribeBasicAlarmListRequest(module: module, startTime: startTime, endTime: endTime, limit: limit, offset: offset, occurTimeOrder: occurTimeOrder, projectIds: projectIds, viewNames: viewNames, alarmStatus: alarmStatus, objLike: objLike, instanceGroupIds: instanceGroupIds, metricNames: metricNames)
        return self.client.execute(action: "DescribeBasicAlarmList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取基础告警列表
    @inlinable
    public func describeBasicAlarmList(module: String, startTime: Int64? = nil, endTime: Int64? = nil, limit: Int64? = nil, offset: Int64? = nil, occurTimeOrder: String? = nil, projectIds: [Int64]? = nil, viewNames: [String]? = nil, alarmStatus: [Int64]? = nil, objLike: String? = nil, instanceGroupIds: [Int64]? = nil, metricNames: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBasicAlarmListResponse {
        let input = DescribeBasicAlarmListRequest(module: module, startTime: startTime, endTime: endTime, limit: limit, offset: offset, occurTimeOrder: occurTimeOrder, projectIds: projectIds, viewNames: viewNames, alarmStatus: alarmStatus, objLike: objLike, instanceGroupIds: instanceGroupIds, metricNames: metricNames)
        return try await self.client.execute(action: "DescribeBasicAlarmList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
