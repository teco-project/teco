//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Monitor {
    /// DeleteGrafanaNotificationChannel请求参数结构体
    public struct DeleteGrafanaNotificationChannelRequest: TCRequestModel {
        /// 通道 ID 数组。例如：nchannel-abcd1234
        public let channelIDs: [String]

        /// Grafana 实例 ID，例如：grafana-abcdefgh
        public let instanceId: String

        public init(channelIDs: [String], instanceId: String) {
            self.channelIDs = channelIDs
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case channelIDs = "ChannelIDs"
            case instanceId = "InstanceId"
        }
    }

    /// DeleteGrafanaNotificationChannel返回参数结构体
    public struct DeleteGrafanaNotificationChannelResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除 Grafana 告警通道
    @inlinable @discardableResult
    public func deleteGrafanaNotificationChannel(_ input: DeleteGrafanaNotificationChannelRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteGrafanaNotificationChannelResponse> {
        self.client.execute(action: "DeleteGrafanaNotificationChannel", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除 Grafana 告警通道
    @inlinable @discardableResult
    public func deleteGrafanaNotificationChannel(_ input: DeleteGrafanaNotificationChannelRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteGrafanaNotificationChannelResponse {
        try await self.client.execute(action: "DeleteGrafanaNotificationChannel", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除 Grafana 告警通道
    @inlinable @discardableResult
    public func deleteGrafanaNotificationChannel(channelIDs: [String], instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteGrafanaNotificationChannelResponse> {
        self.deleteGrafanaNotificationChannel(.init(channelIDs: channelIDs, instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除 Grafana 告警通道
    @inlinable @discardableResult
    public func deleteGrafanaNotificationChannel(channelIDs: [String], instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteGrafanaNotificationChannelResponse {
        try await self.deleteGrafanaNotificationChannel(.init(channelIDs: channelIDs, instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
