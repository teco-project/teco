//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Monitor {
    /// DescribeMonitorTypes请求参数结构体
    public struct DescribeMonitorTypesRequest: TCRequest {
        /// 模块名，固定值 monitor
        public let module: String

        public init(module: String) {
            self.module = module
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
        }
    }

    /// DescribeMonitorTypes返回参数结构体
    public struct DescribeMonitorTypesResponse: TCResponse {
        /// 监控类型，云产品监控为 MT_QCE
        public let monitorTypes: [String]

        /// 监控类型详情
        public let monitorTypeInfos: [MonitorTypeInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case monitorTypes = "MonitorTypes"
            case monitorTypeInfos = "MonitorTypeInfos"
            case requestId = "RequestId"
        }
    }

    /// 查询监控类型
    ///
    /// 腾讯云可观测平台支持多种类型的监控，此接口列出支持的所有类型
    @inlinable
    public func describeMonitorTypes(_ input: DescribeMonitorTypesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMonitorTypesResponse> {
        self.client.execute(action: "DescribeMonitorTypes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询监控类型
    ///
    /// 腾讯云可观测平台支持多种类型的监控，此接口列出支持的所有类型
    @inlinable
    public func describeMonitorTypes(_ input: DescribeMonitorTypesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMonitorTypesResponse {
        try await self.client.execute(action: "DescribeMonitorTypes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询监控类型
    ///
    /// 腾讯云可观测平台支持多种类型的监控，此接口列出支持的所有类型
    @inlinable
    public func describeMonitorTypes(module: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMonitorTypesResponse> {
        self.describeMonitorTypes(.init(module: module), region: region, logger: logger, on: eventLoop)
    }

    /// 查询监控类型
    ///
    /// 腾讯云可观测平台支持多种类型的监控，此接口列出支持的所有类型
    @inlinable
    public func describeMonitorTypes(module: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMonitorTypesResponse {
        try await self.describeMonitorTypes(.init(module: module), region: region, logger: logger, on: eventLoop)
    }
}
