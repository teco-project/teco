//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Monitor {
    /// UnBindingAllPolicyObject请求参数结构体
    public struct UnBindingAllPolicyObjectRequest: TCRequestModel {
        /// 固定值，为"monitor"
        public let module: String

        /// 策略组id，如传入 PolicyId 则该字段被忽略可传入任意值如 0
        public let groupId: Int64

        /// 告警策略ID，使用此字段时 GroupId 会被忽略
        public let policyId: String?

        /// 事件配置的告警
        public let ebSubject: String?

        /// 是否配置了事件告警
        public let ebEventFlag: Int64?

        public init(module: String, groupId: Int64, policyId: String? = nil, ebSubject: String? = nil, ebEventFlag: Int64? = nil) {
            self.module = module
            self.groupId = groupId
            self.policyId = policyId
            self.ebSubject = ebSubject
            self.ebEventFlag = ebEventFlag
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case groupId = "GroupId"
            case policyId = "PolicyId"
            case ebSubject = "EbSubject"
            case ebEventFlag = "EbEventFlag"
        }
    }

    /// UnBindingAllPolicyObject返回参数结构体
    public struct UnBindingAllPolicyObjectResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除全部的关联对象
    @inlinable @discardableResult
    public func unBindingAllPolicyObject(_ input: UnBindingAllPolicyObjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UnBindingAllPolicyObjectResponse> {
        self.client.execute(action: "UnBindingAllPolicyObject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除全部的关联对象
    @inlinable @discardableResult
    public func unBindingAllPolicyObject(_ input: UnBindingAllPolicyObjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UnBindingAllPolicyObjectResponse {
        try await self.client.execute(action: "UnBindingAllPolicyObject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除全部的关联对象
    @inlinable @discardableResult
    public func unBindingAllPolicyObject(module: String, groupId: Int64, policyId: String? = nil, ebSubject: String? = nil, ebEventFlag: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UnBindingAllPolicyObjectResponse> {
        self.unBindingAllPolicyObject(.init(module: module, groupId: groupId, policyId: policyId, ebSubject: ebSubject, ebEventFlag: ebEventFlag), region: region, logger: logger, on: eventLoop)
    }

    /// 删除全部的关联对象
    @inlinable @discardableResult
    public func unBindingAllPolicyObject(module: String, groupId: Int64, policyId: String? = nil, ebSubject: String? = nil, ebEventFlag: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UnBindingAllPolicyObjectResponse {
        try await self.unBindingAllPolicyObject(.init(module: module, groupId: groupId, policyId: policyId, ebSubject: ebSubject, ebEventFlag: ebEventFlag), region: region, logger: logger, on: eventLoop)
    }
}
