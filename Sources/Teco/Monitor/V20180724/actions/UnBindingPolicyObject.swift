//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Monitor {
    /// UnBindingPolicyObject请求参数结构体
    public struct UnBindingPolicyObjectRequest: TCRequestModel {
        /// 固定值，为"monitor"
        public let module: String

        /// 策略组id，如传入 PolicyId 则该字段被忽略可传入任意值如 0
        public let groupId: Int64

        /// 待删除对象实例的唯一id列表，UniqueId从调用[获取已绑定对象列表接口](https://cloud.tencent.com/document/api/248/40570)的出参的List中得到
        public let uniqueId: [String]

        /// 实例分组id，如果按实例分组删除的话UniqueId参数是无效的
        public let instanceGroupId: Int64?

        /// 告警策略ID，使用此字段时 GroupId 会被忽略
        public let policyId: String?

        public init(module: String, groupId: Int64, uniqueId: [String], instanceGroupId: Int64? = nil, policyId: String? = nil) {
            self.module = module
            self.groupId = groupId
            self.uniqueId = uniqueId
            self.instanceGroupId = instanceGroupId
            self.policyId = policyId
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case groupId = "GroupId"
            case uniqueId = "UniqueId"
            case instanceGroupId = "InstanceGroupId"
            case policyId = "PolicyId"
        }
    }

    /// UnBindingPolicyObject返回参数结构体
    public struct UnBindingPolicyObjectResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除策略的关联对象
    @inlinable @discardableResult
    public func unBindingPolicyObject(_ input: UnBindingPolicyObjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UnBindingPolicyObjectResponse> {
        self.client.execute(action: "UnBindingPolicyObject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除策略的关联对象
    @inlinable @discardableResult
    public func unBindingPolicyObject(_ input: UnBindingPolicyObjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UnBindingPolicyObjectResponse {
        try await self.client.execute(action: "UnBindingPolicyObject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除策略的关联对象
    @inlinable @discardableResult
    public func unBindingPolicyObject(module: String, groupId: Int64, uniqueId: [String], instanceGroupId: Int64? = nil, policyId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UnBindingPolicyObjectResponse> {
        self.unBindingPolicyObject(UnBindingPolicyObjectRequest(module: module, groupId: groupId, uniqueId: uniqueId, instanceGroupId: instanceGroupId, policyId: policyId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除策略的关联对象
    @inlinable @discardableResult
    public func unBindingPolicyObject(module: String, groupId: Int64, uniqueId: [String], instanceGroupId: Int64? = nil, policyId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UnBindingPolicyObjectResponse {
        try await self.unBindingPolicyObject(UnBindingPolicyObjectRequest(module: module, groupId: groupId, uniqueId: uniqueId, instanceGroupId: instanceGroupId, policyId: policyId), region: region, logger: logger, on: eventLoop)
    }
}
