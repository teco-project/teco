//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Monitor {
    /// DescribePrometheusAgents请求参数结构体
    public struct DescribePrometheusAgentsRequest: TCPaginatedRequest {
        /// 实例 ID
        public let instanceId: String

        /// Agent 名称
        public let name: String?

        /// Agent ID 列表
        public let agentIds: [String]?

        /// 偏移量，默认为0
        public let offset: Int64?

        /// 返回数量，默认为20，最大值为100
        public let limit: Int64?

        public init(instanceId: String, name: String? = nil, agentIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.instanceId = instanceId
            self.name = name
            self.agentIds = agentIds
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case name = "Name"
            case agentIds = "AgentIds"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribePrometheusAgentsResponse) -> DescribePrometheusAgentsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribePrometheusAgentsRequest(instanceId: self.instanceId, name: self.name, agentIds: self.agentIds, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribePrometheusAgents返回参数结构体
    public struct DescribePrometheusAgentsResponse: TCPaginatedResponse {
        /// Agent 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let agentSet: [PrometheusAgent]?

        /// Agent 总量
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case agentSet = "AgentSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [PrometheusAgent] {
            self.agentSet ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 列出 Prometheus CVM Agent
    @inlinable
    public func describePrometheusAgents(_ input: DescribePrometheusAgentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePrometheusAgentsResponse> {
        self.client.execute(action: "DescribePrometheusAgents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 列出 Prometheus CVM Agent
    @inlinable
    public func describePrometheusAgents(_ input: DescribePrometheusAgentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePrometheusAgentsResponse {
        try await self.client.execute(action: "DescribePrometheusAgents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 列出 Prometheus CVM Agent
    @inlinable
    public func describePrometheusAgents(instanceId: String, name: String? = nil, agentIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePrometheusAgentsResponse> {
        self.describePrometheusAgents(.init(instanceId: instanceId, name: name, agentIds: agentIds, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 列出 Prometheus CVM Agent
    @inlinable
    public func describePrometheusAgents(instanceId: String, name: String? = nil, agentIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePrometheusAgentsResponse {
        try await self.describePrometheusAgents(.init(instanceId: instanceId, name: name, agentIds: agentIds, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 列出 Prometheus CVM Agent
    @inlinable
    public func describePrometheusAgentsPaginated(_ input: DescribePrometheusAgentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [PrometheusAgent])> {
        self.client.paginate(input: input, region: region, command: self.describePrometheusAgents, logger: logger, on: eventLoop)
    }

    /// 列出 Prometheus CVM Agent
    @inlinable @discardableResult
    public func describePrometheusAgentsPaginated(_ input: DescribePrometheusAgentsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribePrometheusAgentsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describePrometheusAgents, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 列出 Prometheus CVM Agent
    ///
    /// - Returns: `AsyncSequence`s of `PrometheusAgent` and `DescribePrometheusAgentsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describePrometheusAgentsPaginator(_ input: DescribePrometheusAgentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribePrometheusAgentsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describePrometheusAgents, logger: logger, on: eventLoop)
    }
}
