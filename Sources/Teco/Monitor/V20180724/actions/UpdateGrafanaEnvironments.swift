//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Monitor {
    /// UpdateGrafanaEnvironments请求参数结构体
    public struct UpdateGrafanaEnvironmentsRequest: TCRequestModel {
        /// Grafana 实例 ID，例如：grafana-12345678
        public let instanceId: String

        /// 环境变量字符串
        public let envs: String

        public init(instanceId: String, envs: String) {
            self.instanceId = instanceId
            self.envs = envs
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case envs = "Envs"
        }
    }

    /// UpdateGrafanaEnvironments返回参数结构体
    public struct UpdateGrafanaEnvironmentsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新 Grafana 环境变量
    @inlinable @discardableResult
    public func updateGrafanaEnvironments(_ input: UpdateGrafanaEnvironmentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateGrafanaEnvironmentsResponse> {
        self.client.execute(action: "UpdateGrafanaEnvironments", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新 Grafana 环境变量
    @inlinable @discardableResult
    public func updateGrafanaEnvironments(_ input: UpdateGrafanaEnvironmentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateGrafanaEnvironmentsResponse {
        try await self.client.execute(action: "UpdateGrafanaEnvironments", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新 Grafana 环境变量
    @inlinable @discardableResult
    public func updateGrafanaEnvironments(instanceId: String, envs: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateGrafanaEnvironmentsResponse> {
        let input = UpdateGrafanaEnvironmentsRequest(instanceId: instanceId, envs: envs)
        return self.client.execute(action: "UpdateGrafanaEnvironments", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新 Grafana 环境变量
    @inlinable @discardableResult
    public func updateGrafanaEnvironments(instanceId: String, envs: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateGrafanaEnvironmentsResponse {
        let input = UpdateGrafanaEnvironmentsRequest(instanceId: instanceId, envs: envs)
        return try await self.client.execute(action: "UpdateGrafanaEnvironments", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
