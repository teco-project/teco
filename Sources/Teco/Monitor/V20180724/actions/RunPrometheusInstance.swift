//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Monitor {
    /// RunPrometheusInstance请求参数结构体
    public struct RunPrometheusInstanceRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 子网ID，默认使用实例所用子网初始化，也可通过该参数传递新的子网ID初始化
        public let subnetId: String?

        public init(instanceId: String, subnetId: String? = nil) {
            self.instanceId = instanceId
            self.subnetId = subnetId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case subnetId = "SubnetId"
        }
    }

    /// RunPrometheusInstance返回参数结构体
    public struct RunPrometheusInstanceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 初始化TMP实例
    ///
    /// 初始化TMP实例，开启集成中心时调用
    @inlinable @discardableResult
    public func runPrometheusInstance(_ input: RunPrometheusInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RunPrometheusInstanceResponse> {
        self.client.execute(action: "RunPrometheusInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 初始化TMP实例
    ///
    /// 初始化TMP实例，开启集成中心时调用
    @inlinable @discardableResult
    public func runPrometheusInstance(_ input: RunPrometheusInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RunPrometheusInstanceResponse {
        try await self.client.execute(action: "RunPrometheusInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 初始化TMP实例
    ///
    /// 初始化TMP实例，开启集成中心时调用
    @inlinable @discardableResult
    public func runPrometheusInstance(instanceId: String, subnetId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RunPrometheusInstanceResponse> {
        self.runPrometheusInstance(.init(instanceId: instanceId, subnetId: subnetId), region: region, logger: logger, on: eventLoop)
    }

    /// 初始化TMP实例
    ///
    /// 初始化TMP实例，开启集成中心时调用
    @inlinable @discardableResult
    public func runPrometheusInstance(instanceId: String, subnetId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RunPrometheusInstanceResponse {
        try await self.runPrometheusInstance(.init(instanceId: instanceId, subnetId: subnetId), region: region, logger: logger, on: eventLoop)
    }
}
