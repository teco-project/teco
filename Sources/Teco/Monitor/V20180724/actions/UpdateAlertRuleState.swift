//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Monitor {
    /// 更新报警策略状态
    ///
    /// 更新 Prometheus 报警策略状态
    @inlinable
    public func updateAlertRuleState(_ input: UpdateAlertRuleStateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UpdateAlertRuleStateResponse > {
        self.client.execute(action: "UpdateAlertRuleState", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 更新报警策略状态
    ///
    /// 更新 Prometheus 报警策略状态
    @inlinable
    public func updateAlertRuleState(_ input: UpdateAlertRuleStateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateAlertRuleStateResponse {
        try await self.client.execute(action: "UpdateAlertRuleState", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// UpdateAlertRuleState请求参数结构体
    public struct UpdateAlertRuleStateRequest: TCRequestModel {
        /// 规则 ID 列表
        public let ruleIds: [String]
        
        /// Prometheus 实例 ID
        public let instanceId: String
        
        /// 规则状态码，取值如下：
        /// <li>2=RuleEnabled</li>
        /// <li>3=RuleDisabled</li>
        /// 默认状态码为 2 启用。
        public let ruleState: Int64
        
        public init (ruleIds: [String], instanceId: String, ruleState: Int64) {
            self.ruleIds = ruleIds
            self.instanceId = instanceId
            self.ruleState = ruleState
        }
        
        enum CodingKeys: String, CodingKey {
            case ruleIds = "RuleIds"
            case instanceId = "InstanceId"
            case ruleState = "RuleState"
        }
    }
    
    /// UpdateAlertRuleState返回参数结构体
    public struct UpdateAlertRuleStateResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}