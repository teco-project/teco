//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Monitor {
    /// EnableGrafanaInternet请求参数结构体
    public struct EnableGrafanaInternetRequest: TCRequestModel {
        /// Grafana 实例 ID，例如：grafana-kleu3gt0
        public let instanceID: String

        /// 开启或关闭公网访问，true为开启，false 为不开启
        public let enableInternet: Bool

        public init(instanceID: String, enableInternet: Bool) {
            self.instanceID = instanceID
            self.enableInternet = enableInternet
        }

        enum CodingKeys: String, CodingKey {
            case instanceID = "InstanceID"
            case enableInternet = "EnableInternet"
        }
    }

    /// EnableGrafanaInternet返回参数结构体
    public struct EnableGrafanaInternetResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置 Grafana 公网访问
    @inlinable @discardableResult
    public func enableGrafanaInternet(_ input: EnableGrafanaInternetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableGrafanaInternetResponse> {
        self.client.execute(action: "EnableGrafanaInternet", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置 Grafana 公网访问
    @inlinable @discardableResult
    public func enableGrafanaInternet(_ input: EnableGrafanaInternetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableGrafanaInternetResponse {
        try await self.client.execute(action: "EnableGrafanaInternet", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置 Grafana 公网访问
    @inlinable @discardableResult
    public func enableGrafanaInternet(instanceID: String, enableInternet: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableGrafanaInternetResponse> {
        self.enableGrafanaInternet(.init(instanceID: instanceID, enableInternet: enableInternet), region: region, logger: logger, on: eventLoop)
    }

    /// 设置 Grafana 公网访问
    @inlinable @discardableResult
    public func enableGrafanaInternet(instanceID: String, enableInternet: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableGrafanaInternetResponse {
        try await self.enableGrafanaInternet(.init(instanceID: instanceID, enableInternet: enableInternet), region: region, logger: logger, on: eventLoop)
    }
}
