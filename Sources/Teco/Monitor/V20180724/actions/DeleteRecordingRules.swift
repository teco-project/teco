//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Monitor {
    /// DeleteRecordingRules请求参数结构体
    public struct DeleteRecordingRulesRequest: TCRequestModel {
        /// 规则 ID 列表
        public let ruleIds: [String]

        /// Prometheus 实例 ID
        public let instanceId: String

        public init(ruleIds: [String], instanceId: String) {
            self.ruleIds = ruleIds
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case ruleIds = "RuleIds"
            case instanceId = "InstanceId"
        }
    }

    /// DeleteRecordingRules返回参数结构体
    public struct DeleteRecordingRulesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除预聚合规则
    ///
    /// 批量删除 Prometheus 预聚合规则
    @inlinable @discardableResult
    public func deleteRecordingRules(_ input: DeleteRecordingRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRecordingRulesResponse> {
        self.client.execute(action: "DeleteRecordingRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除预聚合规则
    ///
    /// 批量删除 Prometheus 预聚合规则
    @inlinable @discardableResult
    public func deleteRecordingRules(_ input: DeleteRecordingRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRecordingRulesResponse {
        try await self.client.execute(action: "DeleteRecordingRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除预聚合规则
    ///
    /// 批量删除 Prometheus 预聚合规则
    @inlinable @discardableResult
    public func deleteRecordingRules(ruleIds: [String], instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRecordingRulesResponse> {
        self.deleteRecordingRules(.init(ruleIds: ruleIds, instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除预聚合规则
    ///
    /// 批量删除 Prometheus 预聚合规则
    @inlinable @discardableResult
    public func deleteRecordingRules(ruleIds: [String], instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRecordingRulesResponse {
        try await self.deleteRecordingRules(.init(ruleIds: ruleIds, instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
