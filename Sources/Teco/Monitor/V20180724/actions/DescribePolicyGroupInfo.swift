//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Monitor {
    /// DescribePolicyGroupInfo请求参数结构体
    public struct DescribePolicyGroupInfoRequest: TCRequestModel {
        /// 固定值，为"monitor"
        public let module: String

        /// 策略组id
        public let groupId: Int64

        public init(module: String, groupId: Int64) {
            self.module = module
            self.groupId = groupId
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case groupId = "GroupId"
        }
    }

    /// DescribePolicyGroupInfo返回参数结构体
    public struct DescribePolicyGroupInfoResponse: TCResponseModel {
        /// 策略组名称
        public let groupName: String

        /// 策略组所属的项目id
        public let projectId: Int64

        /// 是否为默认策略，0表示非默认策略，1表示默认策略
        public let isDefault: Int64

        /// 策略类型
        public let viewName: String

        /// 策略说明
        public let remark: String

        /// 策略类型名称
        public let showName: String

        /// 最近编辑的用户uin
        public let lastEditUin: String

        /// 最近编辑时间
        public let updateTime: String

        /// 该策略支持的地域
        public let region: [String]

        /// 策略类型的维度列表
        public let dimensionGroup: [String]

        /// 阈值规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionsConfig: [DescribePolicyGroupInfoCondition]?

        /// 产品事件规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventConfig: [DescribePolicyGroupInfoEventCondition]?

        /// 用户接收人列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiverInfos: [DescribePolicyGroupInfoReceiverInfo]?

        /// 用户回调信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let callback: DescribePolicyGroupInfoCallback?

        /// 模板策略组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionsTemp: DescribePolicyGroupInfoConditionTpl?

        /// 是否可以设置成默认策略
        public let canSetDefault: Bool

        /// 是否且规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isUnionRule: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case projectId = "ProjectId"
            case isDefault = "IsDefault"
            case viewName = "ViewName"
            case remark = "Remark"
            case showName = "ShowName"
            case lastEditUin = "LastEditUin"
            case updateTime = "UpdateTime"
            case region = "Region"
            case dimensionGroup = "DimensionGroup"
            case conditionsConfig = "ConditionsConfig"
            case eventConfig = "EventConfig"
            case receiverInfos = "ReceiverInfos"
            case callback = "Callback"
            case conditionsTemp = "ConditionsTemp"
            case canSetDefault = "CanSetDefault"
            case isUnionRule = "IsUnionRule"
            case requestId = "RequestId"
        }
    }

    /// 获取基础策略组详情
    @inlinable
    public func describePolicyGroupInfo(_ input: DescribePolicyGroupInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePolicyGroupInfoResponse> {
        self.client.execute(action: "DescribePolicyGroupInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取基础策略组详情
    @inlinable
    public func describePolicyGroupInfo(_ input: DescribePolicyGroupInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePolicyGroupInfoResponse {
        try await self.client.execute(action: "DescribePolicyGroupInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取基础策略组详情
    @inlinable
    public func describePolicyGroupInfo(module: String, groupId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePolicyGroupInfoResponse> {
        let input = DescribePolicyGroupInfoRequest(module: module, groupId: groupId)
        return self.client.execute(action: "DescribePolicyGroupInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取基础策略组详情
    @inlinable
    public func describePolicyGroupInfo(module: String, groupId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePolicyGroupInfoResponse {
        let input = DescribePolicyGroupInfoRequest(module: module, groupId: groupId)
        return try await self.client.execute(action: "DescribePolicyGroupInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
