//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Monitor {
    /// 告警事件
    public struct AlarmEvent: TCOutputModel {
        /// 事件名
        public let eventName: String

        /// 展示的事件名
        public let description: String

        /// 告警策略类型
        public let namespace: String

        enum CodingKeys: String, CodingKey {
            case eventName = "EventName"
            case description = "Description"
            case namespace = "Namespace"
        }
    }

    /// 通知模板ID及通知等级列表，["Remind","Serious"]表示该通知模板仅接收提醒和严重类别的告警
    public struct AlarmHierarchicalNotice: TCInputModel, TCOutputModel {
        /// 通知模板ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noticeId: String?

        /// 通知等级列表，["Remind","Serious"]表示该通知模板仅接收提醒和严重类别的告警
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classification: [String]?

        public init(noticeId: String? = nil, classification: [String]? = nil) {
            self.noticeId = noticeId
            self.classification = classification
        }

        enum CodingKeys: String, CodingKey {
            case noticeId = "NoticeId"
            case classification = "Classification"
        }
    }

    /// 告警分级阈值配置
    public struct AlarmHierarchicalValue: TCInputModel, TCOutputModel {
        /// 提醒等级阈值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remind: String?

        /// 警告等级阈值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warn: String?

        /// 严重等级阈值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serious: String?

        public init(remind: String? = nil, warn: String? = nil, serious: String? = nil) {
            self.remind = remind
            self.warn = warn
            self.serious = serious
        }

        enum CodingKeys: String, CodingKey {
            case remind = "Remind"
            case warn = "Warn"
            case serious = "Serious"
        }
    }

    /// 告警历史数据
    public struct AlarmHistory: TCOutputModel {
        /// 告警历史Id
        public let alarmId: String

        /// 监控类型
        public let monitorType: String

        /// 策略类型
        public let namespace: String

        /// 告警对象
        public let alarmObject: String

        /// 告警内容
        public let content: String

        /// 时间戳，首次出现时间
        public let firstOccurTime: Int64

        /// 时间戳，最后出现时间
        public let lastOccurTime: Int64

        /// 告警状态，ALARM=未恢复 OK=已恢复 NO_CONF=已失效 NO_DATA=数据不足
        public let alarmStatus: String

        /// 告警策略 Id
        public let policyId: String

        /// 策略名称
        public let policyName: String

        /// 基础产品告警的告警对象所属网络
        public let vpc: String

        /// 项目 Id
        public let projectId: Int64

        /// 项目名字
        public let projectName: String

        /// 告警对象所属实例组
        public let instanceGroup: [InstanceGroups]

        /// 接收人列表
        public let receiverUids: [Int64]

        /// 接收组列表
        public let receiverGroups: [Int64]

        /// 告警渠道列表 SMS=短信 EMAIL=邮件 CALL=电话 WECHAT=微信
        public let noticeWays: [String]

        /// 可用于实例、实例组的绑定和解绑接口（[BindingPolicyObject](https://cloud.tencent.com/document/product/248/40421)、[UnBindingAllPolicyObject](https://cloud.tencent.com/document/product/248/40568)、[UnBindingPolicyObject](https://cloud.tencent.com/document/product/248/40567)）的策略 ID
        public let originId: String

        /// 告警类型
        public let alarmType: String

        /// 事件Id
        public let eventId: Int64

        /// 地域
        public let region: String

        /// 策略是否存在 0=不存在 1=存在
        public let policyExists: Int64

        /// 指标信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricsInfo: [AlarmHistoryMetric]?

        /// 告警实例的维度信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dimensions: String?

        enum CodingKeys: String, CodingKey {
            case alarmId = "AlarmId"
            case monitorType = "MonitorType"
            case namespace = "Namespace"
            case alarmObject = "AlarmObject"
            case content = "Content"
            case firstOccurTime = "FirstOccurTime"
            case lastOccurTime = "LastOccurTime"
            case alarmStatus = "AlarmStatus"
            case policyId = "PolicyId"
            case policyName = "PolicyName"
            case vpc = "VPC"
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case instanceGroup = "InstanceGroup"
            case receiverUids = "ReceiverUids"
            case receiverGroups = "ReceiverGroups"
            case noticeWays = "NoticeWays"
            case originId = "OriginId"
            case alarmType = "AlarmType"
            case eventId = "EventId"
            case region = "Region"
            case policyExists = "PolicyExists"
            case metricsInfo = "MetricsInfo"
            case dimensions = "Dimensions"
        }
    }

    /// 告警历史的指标信息
    public struct AlarmHistoryMetric: TCOutputModel {
        /// 云产品监控类型查询数据使用的命名空间
        public let qceNamespace: String

        /// 指标名
        public let metricName: String

        /// 统计周期
        public let period: Int64

        /// 触发告警的数值
        public let value: String

        /// 指标的展示名
        public let description: String

        enum CodingKeys: String, CodingKey {
            case qceNamespace = "QceNamespace"
            case metricName = "MetricName"
            case period = "Period"
            case value = "Value"
            case description = "Description"
        }
    }

    /// 告警通知模板详情
    public struct AlarmNotice: TCOutputModel {
        /// 告警通知模板 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 告警通知模板名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 上次修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedAt: String?

        /// 上次修改人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedBy: String?

        /// 告警通知类型 ALARM=未恢复通知 OK=已恢复通知 ALL=全部通知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noticeType: String?

        /// 用户通知列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userNotices: [UserNotice]?

        /// 回调通知列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let urlNotices: [URLNotice]?

        /// 是否是系统预设通知模板 0=否 1=是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isPreset: Int64?

        /// 通知语言 zh-CN=中文 en-US=英文
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noticeLanguage: String?

        /// 告警通知模板绑定的告警策略ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyIds: [String]?

        /// 后台 amp consumer id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ampConsumerId: String?

        /// 推送cls渠道
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clsNotices: [CLSNotice]?

        /// 通知模板绑定的标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case updatedAt = "UpdatedAt"
            case updatedBy = "UpdatedBy"
            case noticeType = "NoticeType"
            case userNotices = "UserNotices"
            case urlNotices = "URLNotices"
            case isPreset = "IsPreset"
            case noticeLanguage = "NoticeLanguage"
            case policyIds = "PolicyIds"
            case ampConsumerId = "AMPConsumerId"
            case clsNotices = "CLSNotices"
            case tags = "Tags"
        }
    }

    /// 告警策略详情
    public struct AlarmPolicy: TCOutputModel {
        /// 告警策略 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyId: String?

        /// 告警策略名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyName: String?

        /// 备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 监控类型 MT_QCE=云产品监控
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let monitorType: String?

        /// 启停状态 0=停用 1=启用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enable: Int64?

        /// 策略组绑定的实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let useSum: Int64?

        /// 项目 Id -1=无项目 0=默认项目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: Int64?

        /// 项目名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectName: String?

        /// 告警策略类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespace: String?

        /// 触发条件模板 Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionTemplateId: String?

        /// 指标触发条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let condition: AlarmPolicyCondition?

        /// 事件触发条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventCondition: AlarmPolicyEventCondition?

        /// 通知规则 id 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noticeIds: [String]?

        /// 通知规则 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notices: [AlarmNotice]?

        /// 触发任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let triggerTasks: [AlarmPolicyTriggerTask]?

        /// 模板策略组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionsTemp: ConditionsTemp?

        /// 最后编辑的用户uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastEditUin: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Int64?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let insertTime: Int64?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: [String]?

        /// namespace显示名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespaceShowName: String?

        /// 是否默认策略，1是，0否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDefault: Int64?

        /// 能否设置默认策略，1是，0否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let canSetDefault: Int64?

        /// 实例分组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroupId: Int64?

        /// 实例分组总实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceSum: Int64?

        /// 实例分组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroupName: String?

        /// 触发条件类型 STATIC=静态阈值 DYNAMIC=动态类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleType: String?

        /// 用于实例、实例组绑定和解绑接口（BindingPolicyObject、UnBindingAllPolicyObject、UnBindingPolicyObject）的策略 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let originId: String?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagInstances: [TagInstance]?

        /// 策略关联的过滤维度信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let filterDimensionsParam: String?

        /// 是否为一键告警策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOneClick: Int64?

        /// 一键告警策略是否开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let oneClickStatus: Int64?

        /// 高级指标数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advancedMetricNumber: Int64?

        /// 策略是否是全部对象策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isBindAll: Int64?

        /// 策略标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case policyName = "PolicyName"
            case remark = "Remark"
            case monitorType = "MonitorType"
            case enable = "Enable"
            case useSum = "UseSum"
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case namespace = "Namespace"
            case conditionTemplateId = "ConditionTemplateId"
            case condition = "Condition"
            case eventCondition = "EventCondition"
            case noticeIds = "NoticeIds"
            case notices = "Notices"
            case triggerTasks = "TriggerTasks"
            case conditionsTemp = "ConditionsTemp"
            case lastEditUin = "LastEditUin"
            case updateTime = "UpdateTime"
            case insertTime = "InsertTime"
            case region = "Region"
            case namespaceShowName = "NamespaceShowName"
            case isDefault = "IsDefault"
            case canSetDefault = "CanSetDefault"
            case instanceGroupId = "InstanceGroupId"
            case instanceSum = "InstanceSum"
            case instanceGroupName = "InstanceGroupName"
            case ruleType = "RuleType"
            case originId = "OriginId"
            case tagInstances = "TagInstances"
            case filterDimensionsParam = "FilterDimensionsParam"
            case isOneClick = "IsOneClick"
            case oneClickStatus = "OneClickStatus"
            case advancedMetricNumber = "AdvancedMetricNumber"
            case isBindAll = "IsBindAll"
            case tags = "Tags"
        }
    }

    /// 告警策略指标触发条件
    public struct AlarmPolicyCondition: TCInputModel, TCOutputModel {
        /// 告警触发条件的判断方式. 0: 任意; 1: 全部; 2: 复合. 当取值为2的时候为复合告警，与参数 ComplexExpression 配合使用.
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isUnionRule: Int64?

        /// 告警触发条件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rules: [AlarmPolicyRule]?

        /// 复合告警触发条件的判断表达式，当 IsUnionRule 取值为2的时候有效. 其作用是描述多个触发条件需要满足表达式求值为True时才算是满足告警条件.
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complexExpression: String?

        public init(isUnionRule: Int64, rules: [AlarmPolicyRule], complexExpression: String? = nil) {
            self.isUnionRule = isUnionRule
            self.rules = rules
            self.complexExpression = complexExpression
        }

        enum CodingKeys: String, CodingKey {
            case isUnionRule = "IsUnionRule"
            case rules = "Rules"
            case complexExpression = "ComplexExpression"
        }
    }

    /// 告警策略事件触发条件
    public struct AlarmPolicyEventCondition: TCInputModel, TCOutputModel {
        /// 告警触发条件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rules: [AlarmPolicyRule]?

        public init(rules: [AlarmPolicyRule]) {
            self.rules = rules
        }

        enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    /// 告警策略过滤条件
    public struct AlarmPolicyFilter: TCInputModel, TCOutputModel {
        /// 过滤条件类型 DIMENSION=使用 Dimensions 做过滤
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// AlarmPolicyDimension 二维数组序列化后的json字符串，一维数组之间互为或关系，一维数组内的元素互为与关系
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dimensions: String?

        public init(type: String, dimensions: String? = nil) {
            self.type = type
            self.dimensions = dimensions
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case dimensions = "Dimensions"
        }
    }

    /// 告警策略触发条件
    public struct AlarmPolicyRule: TCInputModel, TCOutputModel {
        /// 指标名或事件名，支持的指标可以从 [DescribeAlarmMetrics](https://cloud.tencent.com/document/product/248/51283) 查询，支持的事件可以从 [DescribeAlarmEvents](https://cloud.tencent.com/document/product/248/51284) 查询 。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricName: String?

        /// 秒数 统计周期，支持的值可以从 [DescribeAlarmMetrics](https://cloud.tencent.com/document/product/248/51283) 查询。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let period: Int64?

        /// 英文运算符
        /// intelligent=无阈值智能检测
        /// eq=等于
        /// ge=大于等于
        /// gt=大于
        /// le=小于等于
        /// lt=小于
        /// ne=不等于
        /// day_increase=天同比增长
        /// day_decrease=天同比下降
        /// day_wave=天同比波动
        /// week_increase=周同比增长
        /// week_decrease=周同比下降
        /// week_wave=周同比波动
        /// cycle_increase=环比增长
        /// cycle_decrease=环比下降
        /// cycle_wave=环比波动
        /// re=正则匹配
        /// 支持的值可以从 [DescribeAlarmMetrics](https://cloud.tencent.com/document/product/248/51283) 查询。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `operator`: String?

        /// 阈值，支持的范围可以从 [DescribeAlarmMetrics](https://cloud.tencent.com/document/product/248/51283) 查询。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        /// 周期数 持续通知周期 1=持续1个周期 2=持续2个周期...，支持的值可以从 [DescribeAlarmMetrics](https://cloud.tencent.com/document/product/248/51283) 查询
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let continuePeriod: Int64?

        /// 秒数 告警间隔  0=不重复 300=每5分钟告警一次 600=每10分钟告警一次 900=每15分钟告警一次 1800=每30分钟告警一次 3600=每1小时告警一次 7200=每2小时告警一次 10800=每3小时告警一次 21600=每6小时告警一次 43200=每12小时告警一次 86400=每1天告警一次
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noticeFrequency: Int64?

        /// 告警频率是否指数增长 0=否 1=是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isPowerNotice: Int64?

        /// 对于单个触发规则的过滤条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let filter: AlarmPolicyFilter?

        /// 指标展示名，用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 单位，用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unit: String?

        /// 触发条件类型 STATIC=静态阈值 DYNAMIC=动态阈值。创建或编辑策略时，如不填则默认为 STATIC。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleType: String?

        /// 是否为高级指标，0否，1是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAdvanced: Int64?

        /// 高级指标是否开通，0否，1是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOpen: Int64?

        /// 集成中心产品ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productId: String?

        /// 最大值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let valueMax: Float?

        /// 最小值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let valueMin: Float?

        /// 告警分级阈值配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hierarchicalValue: AlarmHierarchicalValue?

        public init(metricName: String? = nil, period: Int64? = nil, operator: String? = nil, value: String? = nil, continuePeriod: Int64? = nil, noticeFrequency: Int64? = nil, isPowerNotice: Int64? = nil, filter: AlarmPolicyFilter? = nil, description: String? = nil, unit: String? = nil, ruleType: String? = nil, isAdvanced: Int64? = nil, isOpen: Int64? = nil, productId: String? = nil, valueMax: Float? = nil, valueMin: Float? = nil, hierarchicalValue: AlarmHierarchicalValue? = nil) {
            self.metricName = metricName
            self.period = period
            self.operator = `operator`
            self.value = value
            self.continuePeriod = continuePeriod
            self.noticeFrequency = noticeFrequency
            self.isPowerNotice = isPowerNotice
            self.filter = filter
            self.description = description
            self.unit = unit
            self.ruleType = ruleType
            self.isAdvanced = isAdvanced
            self.isOpen = isOpen
            self.productId = productId
            self.valueMax = valueMax
            self.valueMin = valueMin
            self.hierarchicalValue = hierarchicalValue
        }

        enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case period = "Period"
            case `operator` = "Operator"
            case value = "Value"
            case continuePeriod = "ContinuePeriod"
            case noticeFrequency = "NoticeFrequency"
            case isPowerNotice = "IsPowerNotice"
            case filter = "Filter"
            case description = "Description"
            case unit = "Unit"
            case ruleType = "RuleType"
            case isAdvanced = "IsAdvanced"
            case isOpen = "IsOpen"
            case productId = "ProductId"
            case valueMax = "ValueMax"
            case valueMin = "ValueMin"
            case hierarchicalValue = "HierarchicalValue"
        }
    }

    /// 告警策略触发任务
    public struct AlarmPolicyTriggerTask: TCInputModel, TCOutputModel {
        /// 触发任务类型 AS=弹性伸缩
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 用 json 表示配置信息 {"Key1":"Value1","Key2":"Value2"}
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskConfig: String?

        public init(type: String, taskConfig: String) {
            self.type = type
            self.taskConfig = taskConfig
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case taskConfig = "TaskConfig"
        }
    }

    /// 策略绑定实例维度信息
    public struct BindingPolicyObjectDimension: TCInputModel {
        /// 地域名
        public let region: String

        /// 地域ID
        public let regionId: Int64?

        /// 实例的维度信息，格式为
        /// {"unInstanceId":"ins-00jvv9mo"}。不同云产品的维度信息不同，详见
        /// [指标维度信息Dimensions列表](https://cloud.tencent.com/document/product/248/50397)
        public let dimensions: String?

        /// 事件维度信息
        public let eventDimensions: String?

        public init(region: String, regionId: Int64? = nil, dimensions: String? = nil, eventDimensions: String? = nil) {
            self.region = region
            self.regionId = regionId
            self.dimensions = dimensions
            self.eventDimensions = eventDimensions
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionId = "RegionId"
            case dimensions = "Dimensions"
            case eventDimensions = "EventDimensions"
        }
    }

    /// 告警通知中的推送CLS操作
    public struct CLSNotice: TCInputModel, TCOutputModel {
        /// 地域
        public let region: String

        /// 日志集Id
        public let logSetId: String

        /// 主题Id
        public let topicId: String

        /// 启停状态，可不传，默认启用。0=停用，1=启用
        public let enable: Int64?

        public init(region: String, logSetId: String, topicId: String, enable: Int64? = nil) {
            self.region = region
            self.logSetId = logSetId
            self.topicId = topicId
            self.enable = enable
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case logSetId = "LogSetId"
            case topicId = "TopicId"
            case enable = "Enable"
        }
    }

    /// 统一的命名空间信息
    public struct CommonNamespace: TCOutputModel {
        /// 命名空间标示
        public let id: String

        /// 命名空间名称
        public let name: String

        /// 命名空间值
        public let value: String

        /// 产品名称
        public let productName: String

        /// 配置信息
        public let config: String

        /// 支持地域列表
        public let availableRegions: [String]

        /// 排序Id
        public let sortId: Int64

        /// Dashboard中的唯一表示
        public let dashboardId: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case value = "Value"
            case productName = "ProductName"
            case config = "Config"
            case availableRegions = "AvailableRegions"
            case sortId = "SortId"
            case dashboardId = "DashboardId"
        }
    }

    /// 策略类型信息
    public struct CommonNamespaceNew: TCOutputModel {
        /// 命名空间标示
        public let id: String

        /// 命名空间名称
        public let name: String

        /// 监控类型
        public let monitorType: String

        /// 维度信息
        public let dimensions: [DimensionNew]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case monitorType = "MonitorType"
            case dimensions = "Dimensions"
        }
    }

    /// 告警条件
    public struct Condition: TCOutputModel {
        /// 告警通知频率
        public let alarmNotifyPeriod: Int64

        /// 重复通知策略预定义（0 - 只告警一次， 1 - 指数告警，2 - 连接告警）
        public let alarmNotifyType: Int64

        /// 检测方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let calcType: String?

        /// 检测值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let calcValue: String?

        /// 持续时间，单位秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let continueTime: String?

        /// 指标ID
        public let metricID: Int64

        /// 指标展示名称（对外）
        public let metricDisplayName: String

        /// 周期
        public let period: Int64

        /// 规则ID
        public let ruleID: Int64

        /// 指标单位
        public let unit: String

        /// 是否为高级指标，0：否；1：是
        public let isAdvanced: Int64

        /// 是否开通高级指标，0：否；1：是
        public let isOpen: Int64

        /// 产品ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productId: String?

        enum CodingKeys: String, CodingKey {
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case alarmNotifyType = "AlarmNotifyType"
            case calcType = "CalcType"
            case calcValue = "CalcValue"
            case continueTime = "ContinueTime"
            case metricID = "MetricID"
            case metricDisplayName = "MetricDisplayName"
            case period = "Period"
            case ruleID = "RuleID"
            case unit = "Unit"
            case isAdvanced = "IsAdvanced"
            case isOpen = "IsOpen"
            case productId = "ProductId"
        }
    }

    /// 告警条件模板
    public struct ConditionsTemp: TCOutputModel {
        /// 模板名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateName: String?

        /// 指标触发条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let condition: AlarmPolicyCondition?

        /// 事件触发条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventCondition: AlarmPolicyEventCondition?

        enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case condition = "Condition"
            case eventCondition = "EventCondition"
        }
    }

    /// 创建策略传入的阈值告警条件
    public struct CreatePolicyGroupCondition: TCInputModel {
        /// 指标Id
        public let metricId: Int64

        /// 告警发送收敛类型。0连续告警，1指数告警
        public let alarmNotifyType: Int64

        /// 告警发送周期单位秒。<0 不触发, 0 只触发一次, >0 每隔triggerTime秒触发一次
        public let alarmNotifyPeriod: Int64

        /// 比较类型，1表示大于，2表示大于等于，3表示小于，4表示小于等于，5表示相等，6表示不相等。如果指标有配置默认比较类型值可以不填。
        public let calcType: Int64?

        /// 比较的值，如果指标不必须CalcValue可不填
        public let calcValue: Float?

        /// 数据聚合周期(单位秒)，若指标有默认值可不填
        public let calcPeriod: Int64?

        /// 持续几个检测周期触发规则会告警
        public let continuePeriod: Int64?

        /// 如果通过模板创建，需要传入模板中该指标的对应RuleId
        public let ruleId: Int64?

        public init(metricId: Int64, alarmNotifyType: Int64, alarmNotifyPeriod: Int64, calcType: Int64? = nil, calcValue: Float? = nil, calcPeriod: Int64? = nil, continuePeriod: Int64? = nil, ruleId: Int64? = nil) {
            self.metricId = metricId
            self.alarmNotifyType = alarmNotifyType
            self.alarmNotifyPeriod = alarmNotifyPeriod
            self.calcType = calcType
            self.calcValue = calcValue
            self.calcPeriod = calcPeriod
            self.continuePeriod = continuePeriod
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case metricId = "MetricId"
            case alarmNotifyType = "AlarmNotifyType"
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case calcType = "CalcType"
            case calcValue = "CalcValue"
            case calcPeriod = "CalcPeriod"
            case continuePeriod = "ContinuePeriod"
            case ruleId = "RuleId"
        }
    }

    /// 创建策略传入的事件告警条件
    public struct CreatePolicyGroupEventCondition: TCInputModel {
        /// 告警事件的Id
        public let eventId: Int64

        /// 告警发送收敛类型。0连续告警，1指数告警
        public let alarmNotifyType: Int64

        /// 告警发送周期单位秒。<0 不触发, 0 只触发一次, >0 每隔triggerTime秒触发一次
        public let alarmNotifyPeriod: Int64

        /// 如果通过模板创建，需要传入模板中该指标的对应RuleId
        public let ruleId: Int64?

        public init(eventId: Int64, alarmNotifyType: Int64, alarmNotifyPeriod: Int64, ruleId: Int64? = nil) {
            self.eventId = eventId
            self.alarmNotifyType = alarmNotifyType
            self.alarmNotifyPeriod = alarmNotifyPeriod
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case alarmNotifyType = "AlarmNotifyType"
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case ruleId = "RuleId"
        }
    }

    /// 监控数据点
    public struct DataPoint: TCOutputModel {
        /// 实例对象维度组合
        public let dimensions: [Dimension]

        /// 时间戳数组，表示那些时间点有数据，缺失的时间戳，没有数据点，可以理解为掉点了
        public let timestamps: [Float]

        /// 监控值数组，该数组和Timestamps一一对应
        public let values: [Float]

        enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case timestamps = "Timestamps"
            case values = "Values"
        }
    }

    /// DescribeAccidentEventList接口的出参类型
    public struct DescribeAccidentEventListAlarms: TCOutputModel {
        /// 事件分类
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessTypeDesc: String?

        /// 事件类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accidentTypeDesc: String?

        /// 事件分类的ID，1表示服务问题，2表示其他订阅
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessID: Int64?

        /// 事件状态的ID，0表示已恢复，1表示未恢复
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventStatus: Int64?

        /// 影响的对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let affectResource: String?

        /// 事件的地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 事件发生的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let occurTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        enum CodingKeys: String, CodingKey {
            case businessTypeDesc = "BusinessTypeDesc"
            case accidentTypeDesc = "AccidentTypeDesc"
            case businessID = "BusinessID"
            case eventStatus = "EventStatus"
            case affectResource = "AffectResource"
            case region = "Region"
            case occurTime = "OccurTime"
            case updateTime = "UpdateTime"
        }
    }

    /// DescribeBasicAlarmList返回的Alarms
    public struct DescribeBasicAlarmListAlarms: TCOutputModel {
        /// 该条告警的ID
        public let id: UInt64

        /// 项目ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: Int64?

        /// 项目名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectName: String?

        /// 告警状态ID，0表示未恢复；1表示已恢复；2,3,5表示数据不足；4表示已失效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 告警状态，ALARM表示未恢复；OK表示已恢复；NO_DATA表示数据不足；NO_CONF表示已失效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alarmStatus: String?

        /// 策略组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: Int64?

        /// 策略组名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?

        /// 发生时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let firstOccurTime: String?

        /// 持续时间，单位s
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let duration: Int64?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastOccurTime: String?

        /// 告警内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let content: String?

        /// 告警对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objName: String?

        /// 告警对象ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objId: String?

        /// 策略类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewName: String?

        /// VPC，只有CVM有
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpc: String?

        /// 指标ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricId: Int64?

        /// 指标名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricName: String?

        /// 告警类型，0表示指标告警，2表示产品事件告警，3表示平台事件告警
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alarmType: Int64?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 告警对象维度信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dimensions: String?

        /// 通知方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notifyWay: [String]?

        /// 所属实例组信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroup: [InstanceGroup]?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case status = "Status"
            case alarmStatus = "AlarmStatus"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case firstOccurTime = "FirstOccurTime"
            case duration = "Duration"
            case lastOccurTime = "LastOccurTime"
            case content = "Content"
            case objName = "ObjName"
            case objId = "ObjId"
            case viewName = "ViewName"
            case vpc = "Vpc"
            case metricId = "MetricId"
            case metricName = "MetricName"
            case alarmType = "AlarmType"
            case region = "Region"
            case dimensions = "Dimensions"
            case notifyWay = "NotifyWay"
            case instanceGroup = "InstanceGroup"
        }
    }

    /// DescribeBindingPolicyObjectList接口的Dimension
    public struct DescribeBindingPolicyObjectListDimension: TCInputModel {
        /// 地域id
        public let regionId: Int64

        /// 地域简称
        public let region: String

        /// 维度组合json字符串
        public let dimensions: String

        /// 事件维度组合json字符串
        public let eventDimensions: String

        public init(regionId: Int64, region: String, dimensions: String, eventDimensions: String) {
            self.regionId = regionId
            self.region = region
            self.dimensions = dimensions
            self.eventDimensions = eventDimensions
        }

        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case region = "Region"
            case dimensions = "Dimensions"
            case eventDimensions = "EventDimensions"
        }
    }

    /// 查询策略绑定对象列表接口返回的对象实例信息
    public struct DescribeBindingPolicyObjectListInstance: TCOutputModel {
        /// 对象唯一id
        public let uniqueId: String

        /// 表示对象实例的维度集合，jsonObj字符串
        public let dimensions: String

        /// 对象是否被屏蔽，0表示未屏蔽，1表示被屏蔽
        public let isShielded: Int64

        /// 对象所在的地域
        public let region: String

        enum CodingKeys: String, CodingKey {
            case uniqueId = "UniqueId"
            case dimensions = "Dimensions"
            case isShielded = "IsShielded"
            case region = "Region"
        }
    }

    /// DescribeBindingPolicyObjectList返回的是实例分组信息
    public struct DescribeBindingPolicyObjectListInstanceGroup: TCOutputModel {
        /// 实例分组id
        public let instanceGroupId: Int64

        /// 告警策略类型名称
        public let viewName: String

        /// 最后编辑uin
        public let lastEditUin: String

        /// 实例分组名称
        public let groupName: String

        /// 实例数量
        public let instanceSum: Int64

        /// 更新时间
        public let updateTime: Int64

        /// 创建时间
        public let insertTime: Int64

        /// 实例所在的地域集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regions: [String]?

        enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case viewName = "ViewName"
            case lastEditUin = "LastEditUin"
            case groupName = "GroupName"
            case instanceSum = "InstanceSum"
            case updateTime = "UpdateTime"
            case insertTime = "InsertTime"
            case regions = "Regions"
        }
    }

    /// DescribePolicyConditionList策略条件
    public struct DescribePolicyConditionListCondition: TCOutputModel {
        /// 策略视图名称
        public let policyViewName: String

        /// 事件告警条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventMetrics: [DescribePolicyConditionListEventMetric]?

        /// 是否支持多地域
        public let isSupportMultiRegion: Bool

        /// 指标告警条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metrics: [DescribePolicyConditionListMetric]?

        /// 策略类型名称
        public let name: String

        /// 排序id
        public let sortId: Int64

        /// 是否支持默认策略
        public let supportDefault: Bool

        /// 支持该策略类型的地域列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportRegions: [String]?

        /// 弃用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deprecatingInfo: DescribePolicyConditionListResponseDeprecatingInfo?

        enum CodingKeys: String, CodingKey {
            case policyViewName = "PolicyViewName"
            case eventMetrics = "EventMetrics"
            case isSupportMultiRegion = "IsSupportMultiRegion"
            case metrics = "Metrics"
            case name = "Name"
            case sortId = "SortId"
            case supportDefault = "SupportDefault"
            case supportRegions = "SupportRegions"
            case deprecatingInfo = "DeprecatingInfo"
        }
    }

    /// DescribePolicyConditionList.ConfigManual
    public struct DescribePolicyConditionListConfigManual: TCOutputModel {
        /// 检测方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let calcType: DescribePolicyConditionListConfigManualCalcType?

        /// 检测阈值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let calcValue: DescribePolicyConditionListConfigManualCalcValue?

        /// 持续时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let continueTime: DescribePolicyConditionListConfigManualContinueTime?

        /// 数据周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let period: DescribePolicyConditionListConfigManualPeriod?

        /// 持续周期个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let periodNum: DescribePolicyConditionListConfigManualPeriodNum?

        /// 聚合方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statType: DescribePolicyConditionListConfigManualStatType?

        enum CodingKeys: String, CodingKey {
            case calcType = "CalcType"
            case calcValue = "CalcValue"
            case continueTime = "ContinueTime"
            case period = "Period"
            case periodNum = "PeriodNum"
            case statType = "StatType"
        }
    }

    /// DescribePolicyConditionList.ConfigManual.CalcType
    public struct DescribePolicyConditionListConfigManualCalcType: TCOutputModel {
        /// CalcType 取值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keys: [Int64]?

        /// 是否必须
        public let need: Bool

        enum CodingKeys: String, CodingKey {
            case keys = "Keys"
            case need = "Need"
        }
    }

    /// DescribePolicyConditionList.ConfigManual.CalcValue
    public struct DescribePolicyConditionListConfigManualCalcValue: TCOutputModel {
        /// 默认值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `default`: String?

        /// 固定值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fixed: String?

        /// 最大值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let max: String?

        /// 最小值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let min: String?

        /// 是否必须
        public let need: Bool

        enum CodingKeys: String, CodingKey {
            case `default` = "Default"
            case fixed = "Fixed"
            case max = "Max"
            case min = "Min"
            case need = "Need"
        }
    }

    /// DescribePolicyConditionList.ConfigManual.ContinueTime
    public struct DescribePolicyConditionListConfigManualContinueTime: TCOutputModel {
        /// 默认持续时间，单位：秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `default`: Int64?

        /// 可选持续时间，单位：秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keys: [Int64]?

        /// 是否必须
        public let need: Bool

        enum CodingKeys: String, CodingKey {
            case `default` = "Default"
            case keys = "Keys"
            case need = "Need"
        }
    }

    /// DescribePolicyConditionList.ConfigManual.Period
    public struct DescribePolicyConditionListConfigManualPeriod: TCOutputModel {
        /// 默认周期，单位：秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `default`: Int64?

        /// 可选周期，单位：秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keys: [Int64]?

        /// 是否必须
        public let need: Bool

        enum CodingKeys: String, CodingKey {
            case `default` = "Default"
            case keys = "Keys"
            case need = "Need"
        }
    }

    /// DescribePolicyConditionList.ConfigManual.PeriodNum
    public struct DescribePolicyConditionListConfigManualPeriodNum: TCOutputModel {
        /// 默认周期数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `default`: Int64?

        /// 可选周期数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keys: [Int64]?

        /// 是否必须
        public let need: Bool

        enum CodingKeys: String, CodingKey {
            case `default` = "Default"
            case keys = "Keys"
            case need = "Need"
        }
    }

    /// DescribePolicyConditionList.ConfigManual.StatType
    public struct DescribePolicyConditionListConfigManualStatType: TCOutputModel {
        /// 数据聚合方式，周期5秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p5: String?

        /// 数据聚合方式，周期10秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p10: String?

        /// 数据聚合方式，周期1分钟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p60: String?

        /// 数据聚合方式，周期5分钟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p300: String?

        /// 数据聚合方式，周期10分钟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p600: String?

        /// 数据聚合方式，周期30分钟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p1800: String?

        /// 数据聚合方式，周期1小时
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p3600: String?

        /// 数据聚合方式，周期1天
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let p86400: String?

        enum CodingKeys: String, CodingKey {
            case p5 = "P5"
            case p10 = "P10"
            case p60 = "P60"
            case p300 = "P300"
            case p600 = "P600"
            case p1800 = "P1800"
            case p3600 = "P3600"
            case p86400 = "P86400"
        }
    }

    /// DescribePolicyConditionList.EventMetric
    public struct DescribePolicyConditionListEventMetric: TCOutputModel {
        /// 事件id
        public let eventId: Int64

        /// 事件名称
        public let eventShowName: String

        /// 是否需要恢复
        public let needRecovered: Bool

        /// 事件类型，预留字段，当前固定取值为2
        public let type: Int64

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case eventShowName = "EventShowName"
            case needRecovered = "NeedRecovered"
            case type = "Type"
        }
    }

    /// 指标告警配置
    public struct DescribePolicyConditionListMetric: TCOutputModel {
        /// 指标配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configManual: DescribePolicyConditionListConfigManual?

        /// 指标id
        public let metricId: Int64

        /// 指标名称
        public let metricShowName: String

        /// 指标单位
        public let metricUnit: String

        enum CodingKeys: String, CodingKey {
            case configManual = "ConfigManual"
            case metricId = "MetricId"
            case metricShowName = "MetricShowName"
            case metricUnit = "MetricUnit"
        }
    }

    /// DescribePolicyConditionListResponseDeprecatingInfo
    public struct DescribePolicyConditionListResponseDeprecatingInfo: TCOutputModel {
        /// 是否隐藏
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hidden: Bool?

        /// 新视图名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newViewNames: [String]?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        enum CodingKeys: String, CodingKey {
            case hidden = "Hidden"
            case newViewNames = "NewViewNames"
            case description = "Description"
        }
    }

    /// 查询策略输出的用户回调信息
    public struct DescribePolicyGroupInfoCallback: TCOutputModel {
        /// 用户回调接口地址
        public let callbackUrl: String

        /// 用户回调接口状态，0表示未验证，1表示已验证，2表示存在url但没有通过验证
        public let validFlag: Int64

        /// 用户回调接口验证码
        public let verifyCode: String

        enum CodingKeys: String, CodingKey {
            case callbackUrl = "CallbackUrl"
            case validFlag = "ValidFlag"
            case verifyCode = "VerifyCode"
        }
    }

    /// 查询策略输出的阈值告警条件
    public struct DescribePolicyGroupInfoCondition: TCOutputModel {
        /// 指标名称
        public let metricShowName: String

        /// 数据聚合周期(单位秒)
        public let period: Int64

        /// 指标id
        public let metricId: Int64

        /// 阈值规则id
        public let ruleId: Int64

        /// 指标单位
        public let unit: String

        /// 告警发送收敛类型。0连续告警，1指数告警
        public let alarmNotifyType: Int64

        /// 告警发送周期单位秒。<0 不触发, 0 只触发一次, >0 每隔triggerTime秒触发一次
        public let alarmNotifyPeriod: Int64

        /// 比较类型，1表示大于，2表示大于等于，3表示小于，4表示小于等于，5表示相等，6表示不相等，7表示日同比上涨，8表示日同比下降，9表示周同比上涨，10表示周同比下降，11表示周期环比上涨，12表示周期环比下降
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let calcType: Int64?

        /// 检测阈值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let calcValue: String?

        /// 持续多长时间触发规则会告警(单位秒)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let continueTime: Int64?

        /// 告警指标名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricName: String?

        enum CodingKeys: String, CodingKey {
            case metricShowName = "MetricShowName"
            case period = "Period"
            case metricId = "MetricId"
            case ruleId = "RuleId"
            case unit = "Unit"
            case alarmNotifyType = "AlarmNotifyType"
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case calcType = "CalcType"
            case calcValue = "CalcValue"
            case continueTime = "ContinueTime"
            case metricName = "MetricName"
        }
    }

    /// 查询策略输出的模板策略组信息
    public struct DescribePolicyGroupInfoConditionTpl: TCOutputModel {
        /// 策略组id
        public let groupId: Int64

        /// 策略组名称
        public let groupName: String

        /// 策略类型
        public let viewName: String

        /// 策略组说明
        public let remark: String

        /// 最后编辑的用户uin
        public let lastEditUin: String

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Int64?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let insertTime: Int64?

        /// 是否且规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isUnionRule: Int64?

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
            case viewName = "ViewName"
            case remark = "Remark"
            case lastEditUin = "LastEditUin"
            case updateTime = "UpdateTime"
            case insertTime = "InsertTime"
            case isUnionRule = "IsUnionRule"
        }
    }

    /// 查询策略输出的事件告警条件
    public struct DescribePolicyGroupInfoEventCondition: TCOutputModel {
        /// 事件id
        public let eventId: Int64

        /// 事件告警规则id
        public let ruleId: Int64

        /// 事件名称
        public let eventShowName: String

        /// 告警发送周期单位秒。<0 不触发, 0 只触发一次, >0 每隔triggerTime秒触发一次
        public let alarmNotifyPeriod: Int64

        /// 告警发送收敛类型。0连续告警，1指数告警
        public let alarmNotifyType: Int64

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case ruleId = "RuleId"
            case eventShowName = "EventShowName"
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case alarmNotifyType = "AlarmNotifyType"
        }
    }

    /// 查询策略输出的告警接收人信息
    public struct DescribePolicyGroupInfoReceiverInfo: TCOutputModel {
        /// 告警接收组id列表
        public let receiverGroupList: [Int64]

        /// 告警接收人id列表
        public let receiverUserList: [Int64]

        /// 告警时间段开始时间。范围[0,86400)，作为 UNIX 时间戳转成北京时间后去掉日期，例如7200表示"10:0:0"
        public let startTime: Int64

        /// 告警时间段结束时间。含义同StartTime
        public let endTime: Int64

        /// 接收类型。“group”(接收组)或“user”(接收人)
        public let receiverType: String

        /// 告警通知方式。可选 "SMS","SITE","EMAIL","CALL","WECHAT"
        public let notifyWay: [String]

        /// 电话告警接收者uid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uidList: [Int64]?

        /// 电话告警轮数
        public let roundNumber: Int64

        /// 电话告警每轮间隔（秒）
        public let roundInterval: Int64

        /// 电话告警对个人间隔（秒）
        public let personInterval: Int64

        /// 是否需要电话告警触达提示。0不需要，1需要
        public let needSendNotice: Int64

        /// 电话告警通知时机。可选"OCCUR"(告警时通知),"RECOVER"(恢复时通知)
        public let sendFor: [String]

        /// 恢复通知方式。可选"SMS"
        public let recoverNotify: [String]

        /// 告警发送语言
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiveLanguage: String?

        enum CodingKeys: String, CodingKey {
            case receiverGroupList = "ReceiverGroupList"
            case receiverUserList = "ReceiverUserList"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case receiverType = "ReceiverType"
            case notifyWay = "NotifyWay"
            case uidList = "UidList"
            case roundNumber = "RoundNumber"
            case roundInterval = "RoundInterval"
            case personInterval = "PersonInterval"
            case needSendNotice = "NeedSendNotice"
            case sendFor = "SendFor"
            case recoverNotify = "RecoverNotify"
            case receiveLanguage = "ReceiveLanguage"
        }
    }

    /// DescribePolicyGroupList.Group
    public struct DescribePolicyGroupListGroup: TCOutputModel {
        /// 策略组id
        public let groupId: Int64

        /// 策略组名称
        public let groupName: String

        /// 是否开启
        public let isOpen: Bool

        /// 策略视图名称
        public let viewName: String

        /// 最近编辑的用户uin
        public let lastEditUin: String

        /// 最后修改时间
        public let updateTime: Int64

        /// 创建时间
        public let insertTime: Int64

        /// 策略组绑定的实例数
        public let useSum: Int64

        /// 策略组绑定的未屏蔽实例数
        public let noShieldedSum: Int64

        /// 是否为默认策略，0表示非默认策略，1表示默认策略
        public let isDefault: Int64

        /// 是否可以设置成默认策略
        public let canSetDefault: Bool

        /// 父策略组id
        public let parentGroupId: Int64

        /// 策略组备注
        public let remark: String

        /// 策略组所属项目id
        public let projectId: Int64

        /// 阈值规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditions: [DescribePolicyGroupInfoCondition]?

        /// 产品事件规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventConditions: [DescribePolicyGroupInfoEventCondition]?

        /// 用户接收人列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiverInfos: [DescribePolicyGroupInfoReceiverInfo]?

        /// 模板策略组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionsTemp: DescribePolicyGroupInfoConditionTpl?

        /// 策略组绑定的实例组信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroup: DescribePolicyGroupListGroupInstanceGroup?

        /// 且或规则标识, 0表示或规则(任意一条规则满足阈值条件就告警), 1表示且规则(所有规则都满足阈值条件才告警)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isUnionRule: Int64?

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
            case isOpen = "IsOpen"
            case viewName = "ViewName"
            case lastEditUin = "LastEditUin"
            case updateTime = "UpdateTime"
            case insertTime = "InsertTime"
            case useSum = "UseSum"
            case noShieldedSum = "NoShieldedSum"
            case isDefault = "IsDefault"
            case canSetDefault = "CanSetDefault"
            case parentGroupId = "ParentGroupId"
            case remark = "Remark"
            case projectId = "ProjectId"
            case conditions = "Conditions"
            case eventConditions = "EventConditions"
            case receiverInfos = "ReceiverInfos"
            case conditionsTemp = "ConditionsTemp"
            case instanceGroup = "InstanceGroup"
            case isUnionRule = "IsUnionRule"
        }
    }

    /// DescribePolicyGroupList接口策略组绑定的实例分组信息
    public struct DescribePolicyGroupListGroupInstanceGroup: TCOutputModel {
        /// 实例分组名称id
        public let instanceGroupId: Int64

        /// 策略类型视图名称
        public let viewName: String

        /// 最近编辑的用户uin
        public let lastEditUin: String

        /// 实例分组名称
        public let groupName: String

        /// 实例数量
        public let instanceSum: Int64

        /// 更新时间
        public let updateTime: Int64

        /// 创建时间
        public let insertTime: Int64

        enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case viewName = "ViewName"
            case lastEditUin = "LastEditUin"
            case groupName = "GroupName"
            case instanceSum = "InstanceSum"
            case updateTime = "UpdateTime"
            case insertTime = "InsertTime"
        }
    }

    /// DescribeProductEventList的入参Dimensions
    public struct DescribeProductEventListDimensions: TCInputModel {
        /// 维度名
        public let name: String

        /// 维度值
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// DescribeProductEventList返回的Events
    public struct DescribeProductEventListEvents: TCOutputModel {
        /// 事件ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventId: Int64?

        /// 事件中文名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventCName: String?

        /// 事件英文名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventEName: String?

        /// 事件简称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventName: String?

        /// 产品中文名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productCName: String?

        /// 产品英文名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productEName: String?

        /// 产品简称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productName: String?

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 项目ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 是否支持告警
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportAlarm: Int64?

        /// 事件类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: Int64?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Int64?

        /// 实例对象信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dimensions: [DescribeProductEventListEventsDimensions]?

        /// 实例对象附加信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let additionMsg: [DescribeProductEventListEventsDimensions]?

        /// 是否配置告警
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAlarmConfig: Int64?

        /// 策略信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupInfo: [DescribeProductEventListEventsGroupInfo]?

        /// 显示名称ViewName
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewName: String?

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case eventCName = "EventCName"
            case eventEName = "EventEName"
            case eventName = "EventName"
            case productCName = "ProductCName"
            case productEName = "ProductEName"
            case productName = "ProductName"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case projectId = "ProjectId"
            case region = "Region"
            case status = "Status"
            case supportAlarm = "SupportAlarm"
            case type = "Type"
            case startTime = "StartTime"
            case updateTime = "UpdateTime"
            case dimensions = "Dimensions"
            case additionMsg = "AdditionMsg"
            case isAlarmConfig = "IsAlarmConfig"
            case groupInfo = "GroupInfo"
            case viewName = "ViewName"
        }
    }

    /// DescribeProductEventList返回的Events的Dimensions
    public struct DescribeProductEventListEventsDimensions: TCOutputModel {
        /// 维度名（英文）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 维度名（中文）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 维度值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case name = "Name"
            case value = "Value"
        }
    }

    /// DescribeProductEventList返回的Events里的GroupInfo
    public struct DescribeProductEventListEventsGroupInfo: TCOutputModel {
        /// 策略ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: Int64?

        /// 策略名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
        }
    }

    /// DescribeProductEventList返回的OverView对象
    public struct DescribeProductEventListOverView: TCOutputModel {
        /// 状态变更的事件数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusChangeAmount: Int64?

        /// 告警状态未配置的事件数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unConfigAlarmAmount: Int64?

        /// 异常事件数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unNormalEventAmount: Int64?

        /// 未恢复的事件数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unRecoverAmount: Int64?

        enum CodingKeys: String, CodingKey {
            case statusChangeAmount = "StatusChangeAmount"
            case unConfigAlarmAmount = "UnConfigAlarmAmount"
            case unNormalEventAmount = "UnNormalEventAmount"
            case unRecoverAmount = "UnRecoverAmount"
        }
    }

    /// 实例对象的维度组合
    public struct Dimension: TCInputModel {
        /// 实例维度名称
        public let name: String

        /// 实例维度值
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 策略类型的维度信息
    public struct DimensionNew: TCOutputModel {
        /// 维度 key 标示，后台英文名
        public let key: String

        /// 维度 key 名称，中英文前台展示名
        public let name: String

        /// 是否必选
        public let isRequired: Bool

        /// 支持的操作符列表
        public let operators: [Operator]

        /// 是否支持多选
        public let isMultiple: Bool

        /// 创建后是否可以修改
        public let isMutable: Bool

        /// 是否展示给用户
        public let isVisible: Bool

        /// 能否用来过滤策略列表
        public let canFilterPolicy: Bool

        /// 能否用来过滤告警历史
        public let canFilterHistory: Bool

        /// 能否作为聚合维度
        public let canGroupBy: Bool

        /// 是否必须作为聚合维度
        public let mustGroupBy: Bool

        /// 前端翻译要替换的 key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let showValueReplace: String?

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case name = "Name"
            case isRequired = "IsRequired"
            case operators = "Operators"
            case isMultiple = "IsMultiple"
            case isMutable = "IsMutable"
            case isVisible = "IsVisible"
            case canFilterPolicy = "CanFilterPolicy"
            case canFilterHistory = "CanFilterHistory"
            case canGroupBy = "CanGroupBy"
            case mustGroupBy = "MustGroupBy"
            case showValueReplace = "ShowValueReplace"
        }
    }

    /// 维度信息
    public struct DimensionsDesc: TCOutputModel {
        /// 维度名数组
        public let dimensions: [String]

        enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
        }
    }

    /// 事件告警条件
    public struct EventCondition: TCOutputModel {
        /// 告警通知频率
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alarmNotifyPeriod: String?

        /// 重复通知策略预定义（0 - 只告警一次， 1 - 指数告警，2 - 连接告警）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alarmNotifyType: String?

        /// 事件ID
        public let eventID: String

        /// 事件展示名称（对外）
        public let eventDisplayName: String

        /// 规则ID
        public let ruleID: String

        enum CodingKeys: String, CodingKey {
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case alarmNotifyType = "AlarmNotifyType"
            case eventID = "EventID"
            case eventDisplayName = "EventDisplayName"
            case ruleID = "RuleID"
        }
    }

    /// 查询过滤参数
    public struct Filter: TCInputModel {
        /// 过滤方式（=, !=, in）
        public let type: String?

        /// 过滤维度名
        public let key: String?

        /// 过滤值，in过滤方式用逗号分割多个值
        public let value: String?

        /// 过滤条件名称
        public let name: String?

        /// 过滤条件取值范围
        public let values: [String]?

        public init(type: String? = nil, key: String? = nil, value: String? = nil, name: String? = nil, values: [String]? = nil) {
            self.type = type
            self.key = key
            self.value = value
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case key = "Key"
            case value = "Value"
            case name = "Name"
            case values = "Values"
        }
    }

    /// Grafana可视化服务 授权账户信息
    public struct GrafanaAccountInfo: TCOutputModel {
        /// 用户账号ID
        public let userId: String

        /// 用户权限
        public let role: [GrafanaAccountRole]

        /// 备注
        public let notes: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createAt: Date

        /// 实例 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 用户主账号 UIN
        public let uin: String

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case role = "Role"
            case notes = "Notes"
            case createAt = "CreateAt"
            case instanceId = "InstanceId"
            case uin = "Uin"
        }
    }

    /// Grafana可视化服务 账号权限
    public struct GrafanaAccountRole: TCInputModel, TCOutputModel {
        /// 组织
        public let organization: String?

        /// 权限
        public let role: String?

        public init(organization: String? = nil, role: String? = nil) {
            self.organization = organization
            self.role = role
        }

        enum CodingKeys: String, CodingKey {
            case organization = "Organization"
            case role = "Role"
        }
    }

    /// Grafana 告警渠道
    public struct GrafanaChannel: TCOutputModel {
        /// 渠道 ID
        public let channelId: String

        /// 渠道名
        public let channelName: String

        /// 告警通道模板 ID 数组
        public let receivers: [String]

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdAt: Date

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updatedAt: Date

        /// 告警渠道的所有生效组织
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let organizationIds: [String]?

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case channelName = "ChannelName"
            case receivers = "Receivers"
            case createdAt = "CreatedAt"
            case updatedAt = "UpdatedAt"
            case organizationIds = "OrganizationIds"
        }
    }

    /// 查询 Grafana 实例时的实例类型
    public struct GrafanaInstanceInfo: TCOutputModel {
        /// 实例名
        public let instanceName: String

        /// 实例 ID
        public let instanceId: String

        /// 地域
        public let region: String

        /// VPC ID
        public let vpcId: String

        /// 子网 ID 数组
        public let subnetIds: [String]

        /// Grafana 内网地址
        public let internetUrl: String

        /// Grafana 公网地址
        public let internalUrl: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createdAt: Date

        /// 运行状态（1:正在创建；2:运行中；3:异常；4:重启中；5:停机中； 6:已停机； 7: 已删除）
        public let instanceStatus: Int64

        /// 实例的标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSpecification: [PrometheusTag]

        /// 实例的可用区
        public let zone: String

        /// 计费模式（1:包年包月）
        public let instanceChargeType: Int64

        /// VPC 名称
        public let vpcName: String

        /// 子网名称
        public let subnetName: String

        /// 地域 ID
        public let regionId: Int64

        /// 可访问此实例的完整 URL
        public let rootUrl: String

        /// 是否开启 SSO
        public let enableSSO: Bool

        /// 版本号
        public let version: String

        /// SSO登录时是否开启cam鉴权
        public let enableSSOCamCheck: Bool

        enum CodingKeys: String, CodingKey {
            case instanceName = "InstanceName"
            case instanceId = "InstanceId"
            case region = "Region"
            case vpcId = "VpcId"
            case subnetIds = "SubnetIds"
            case internetUrl = "InternetUrl"
            case internalUrl = "InternalUrl"
            case createdAt = "CreatedAt"
            case instanceStatus = "InstanceStatus"
            case tagSpecification = "TagSpecification"
            case zone = "Zone"
            case instanceChargeType = "InstanceChargeType"
            case vpcName = "VpcName"
            case subnetName = "SubnetName"
            case regionId = "RegionId"
            case rootUrl = "RootUrl"
            case enableSSO = "EnableSSO"
            case version = "Version"
            case enableSSOCamCheck = "EnableSSOCamCheck"
        }
    }

    /// Grafana 集成实例配置
    public struct GrafanaIntegrationConfig: TCOutputModel {
        /// 集成 ID
        public let integrationId: String

        /// 集成类型
        public let kind: String

        /// 集成内容
        public let content: String

        /// 集成描述
        public let description: String

        /// Grafana 跳转地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grafanaURL: String?

        enum CodingKeys: String, CodingKey {
            case integrationId = "IntegrationId"
            case kind = "Kind"
            case content = "Content"
            case description = "Description"
            case grafanaURL = "GrafanaURL"
        }
    }

    /// Grafana 告警渠道
    public struct GrafanaNotificationChannel: TCOutputModel {
        /// 渠道 ID
        public let channelId: String

        /// 渠道名
        public let channelName: String

        /// 告警通道模板 ID 数组
        public let receivers: [String]

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdAt: Date

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updatedAt: Date

        /// 默认生效组织，已废弃，请使用 OrganizationIds
        public let orgId: String

        /// 额外生效组织，已废弃，请使用 OrganizationIds
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraOrgIds: [String]?

        /// 生效组织，已废弃，请使用 OrganizationIds
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orgIds: [String]?

        /// 告警渠道的所有生效组织
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let organizationIds: [String]?

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case channelName = "ChannelName"
            case receivers = "Receivers"
            case createdAt = "CreatedAt"
            case updatedAt = "UpdatedAt"
            case orgId = "OrgId"
            case extraOrgIds = "ExtraOrgIds"
            case orgIds = "OrgIds"
            case organizationIds = "OrganizationIds"
        }
    }

    /// Grafana 插件
    public struct GrafanaPlugin: TCInputModel, TCOutputModel {
        /// Grafana 插件 ID
        public let pluginId: String

        /// Grafana 插件版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        public init(pluginId: String, version: String) {
            self.pluginId = pluginId
            self.version = version
        }

        enum CodingKeys: String, CodingKey {
            case pluginId = "PluginId"
            case version = "Version"
        }
    }

    /// 实例维度组合数组
    public struct Instance: TCInputModel {
        /// 实例的维度组合
        public let dimensions: [Dimension]

        public init(dimensions: [Dimension]) {
            self.dimensions = dimensions
        }

        enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
        }
    }

    /// DescribeBasicAlarmList返回的Alarms里的InstanceGroup
    public struct InstanceGroup: TCOutputModel {
        /// 实例组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroupId: Int64?

        /// 实例组名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroupName: String?

        enum CodingKeys: String, CodingKey {
            case instanceGroupId = "InstanceGroupId"
            case instanceGroupName = "InstanceGroupName"
        }
    }

    /// 告警对象所属实例组
    public struct InstanceGroups: TCOutputModel {
        /// 实例组 Id
        public let id: Int64

        /// 实例组名称
        public let name: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
        }
    }

    /// export 集成配置
    public struct IntegrationConfiguration: TCOutputModel {
        /// 名字
        public let name: String

        /// 类型
        public let kind: String

        /// 内容
        public let content: String

        /// 状态
        public let status: Int64

        /// 实例类型
        public let category: String

        /// 实例描述
        public let instanceDesc: String

        /// dashboard 的 URL
        public let grafanaDashboardURL: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case kind = "Kind"
            case content = "Content"
            case status = "Status"
            case category = "Category"
            case instanceDesc = "InstanceDesc"
            case grafanaDashboardURL = "GrafanaDashboardURL"
        }
    }

    /// k8s中标签，一般以数组的方式存在
    public struct Label: TCInputModel, TCOutputModel {
        /// map表中的Name
        public let name: String

        /// map表中的Value
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 日志告警请求信息
    public struct LogAlarmReq: TCInputModel, TCOutputModel {
        /// apm实例id
        public let instanceId: String

        /// 检索条件信息
        public let filter: [LogFilterInfo]

        /// 告警合并开启/暂停
        public let alarmMerge: String

        /// 告警合并时间
        public let alarmMergeTime: String

        public init(instanceId: String, filter: [LogFilterInfo], alarmMerge: String, alarmMergeTime: String) {
            self.instanceId = instanceId
            self.filter = filter
            self.alarmMerge = alarmMerge
            self.alarmMergeTime = alarmMergeTime
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case filter = "Filter"
            case alarmMerge = "AlarmMerge"
            case alarmMergeTime = "AlarmMergeTime"
        }
    }

    /// 日志告警检索条件结构体
    public struct LogFilterInfo: TCInputModel, TCOutputModel {
        /// 字段名
        public let key: String

        /// 比较符号
        public let `operator`: String

        /// 字段值
        public let value: String

        public init(key: String, operator: String, value: String) {
            self.key = key
            self.operator = `operator`
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case `operator` = "Operator"
            case value = "Value"
        }
    }

    /// Prometheus Agent 管理命令行
    public struct ManagementCommand: TCOutputModel {
        /// Agent 安装命令
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let install: String?

        /// Agent 重启命令
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let restart: String?

        /// Agent 停止命令
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stop: String?

        /// Agent 状态检测命令
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusCheck: String?

        /// Agent 日志检测命令
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logCheck: String?

        enum CodingKeys: String, CodingKey {
            case install = "Install"
            case restart = "Restart"
            case stop = "Stop"
            case statusCheck = "StatusCheck"
            case logCheck = "LogCheck"
        }
    }

    /// 指标，可用于设置告警、查询数据
    public struct Metric: TCOutputModel {
        /// 告警策略类型
        public let namespace: String

        /// 指标名
        public let metricName: String

        /// 指标展示名
        public let description: String

        /// 最小值
        public let min: Float

        /// 最大值
        public let max: Float

        /// 维度列表
        public let dimensions: [String]

        /// 单位
        public let unit: String

        /// 指标配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricConfig: MetricConfig?

        /// 是否为高级指标。1是 0否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAdvanced: Int64?

        /// 高级指标是否开通。1是 0否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOpen: Int64?

        /// 集成中心产品ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productId: Int64?

        /// 匹配运算符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operators: [Operator]?

        /// 指标触发
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let periods: [Int64]?

        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case metricName = "MetricName"
            case description = "Description"
            case min = "Min"
            case max = "Max"
            case dimensions = "Dimensions"
            case unit = "Unit"
            case metricConfig = "MetricConfig"
            case isAdvanced = "IsAdvanced"
            case isOpen = "IsOpen"
            case productId = "ProductId"
            case operators = "Operators"
            case periods = "Periods"
        }
    }

    /// 指标配置
    public struct MetricConfig: TCOutputModel {
        /// 允许使用的运算符
        public let `operator`: [String]

        /// 允许配置的数据周期，以秒为单位
        public let period: [Int64]

        /// 允许配置的持续周期个数
        public let continuePeriod: [Int64]

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case period = "Period"
            case continuePeriod = "ContinuePeriod"
        }
    }

    /// DescribeMetricData接口出参
    public struct MetricData: TCOutputModel {
        /// 指标名
        public let metricName: String

        /// 监控数据点
        public let points: [MetricDataPoint]

        enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case points = "Points"
        }
    }

    /// DescribeMetricData出参
    public struct MetricDataPoint: TCOutputModel {
        /// 实例对象维度组合
        public let dimensions: [Dimension]

        /// 数据点列表
        public let values: [Point]

        enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case values = "Values"
        }
    }

    /// 指标数据的解释
    public struct MetricObjectMeaning: TCOutputModel {
        /// 指标英文解释
        public let en: String

        /// 指标中文解释
        public let zh: String

        enum CodingKeys: String, CodingKey {
            case en = "En"
            case zh = "Zh"
        }
    }

    /// 对业务指标的单位及支持统计周期的描述
    public struct MetricSet: TCOutputModel {
        /// 命名空间，每个云产品会有一个命名空间
        public let namespace: String

        /// 指标名称
        public let metricName: String

        /// 指标使用的单位
        public let unit: String

        /// 指标使用的单位
        public let unitCname: String

        /// 指标支持的统计周期，单位是秒，如60、300
        public let period: [Int64]

        /// 统计周期内指标方式
        public let periods: [PeriodsSt]

        /// 统计指标含义解释
        public let meaning: MetricObjectMeaning

        /// 维度描述信息
        public let dimensions: [DimensionsDesc]

        /// 指标中文名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricCName: String?

        /// 指标英文名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricEName: String?

        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case metricName = "MetricName"
            case unit = "Unit"
            case unitCname = "UnitCname"
            case period = "Period"
            case periods = "Periods"
            case meaning = "Meaning"
            case dimensions = "Dimensions"
            case metricCName = "MetricCName"
            case metricEName = "MetricEName"
        }
    }

    /// DescribeMidDimensionValueList的查询条件
    public struct MidQueryCondition: TCInputModel {
        /// 维度
        public let key: String

        /// 操作符，支持等于(eq)、不等于(ne)，以及in
        public let `operator`: String

        /// 维度值，当Op是eq、ne时，只使用第一个元素
        public let value: [String]

        public init(key: String, operator: String, value: [String]) {
            self.key = key
            self.operator = `operator`
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case `operator` = "Operator"
            case value = "Value"
        }
    }

    /// 修改告警策略组传入的指标阈值条件
    public struct ModifyPolicyGroupCondition: TCInputModel {
        /// 指标id
        public let metricId: Int64

        /// 比较类型，1表示大于，2表示大于等于，3表示小于，4表示小于等于，5表示相等，6表示不相等
        public let calcType: Int64

        /// 检测阈值
        public let calcValue: String

        /// 检测指标的数据周期
        public let calcPeriod: Int64

        /// 持续周期个数
        public let continuePeriod: Int64

        /// 告警发送收敛类型。0连续告警，1指数告警
        public let alarmNotifyType: Int64

        /// 告警发送周期单位秒。<0 不触发, 0 只触发一次, >0 每隔triggerTime秒触发一次
        public let alarmNotifyPeriod: Int64

        /// 规则id，不填表示新增，填写了ruleId表示在已存在的规则基础上进行修改
        public let ruleId: Int64?

        public init(metricId: Int64, calcType: Int64, calcValue: String, calcPeriod: Int64, continuePeriod: Int64, alarmNotifyType: Int64, alarmNotifyPeriod: Int64, ruleId: Int64? = nil) {
            self.metricId = metricId
            self.calcType = calcType
            self.calcValue = calcValue
            self.calcPeriod = calcPeriod
            self.continuePeriod = continuePeriod
            self.alarmNotifyType = alarmNotifyType
            self.alarmNotifyPeriod = alarmNotifyPeriod
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case metricId = "MetricId"
            case calcType = "CalcType"
            case calcValue = "CalcValue"
            case calcPeriod = "CalcPeriod"
            case continuePeriod = "ContinuePeriod"
            case alarmNotifyType = "AlarmNotifyType"
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case ruleId = "RuleId"
        }
    }

    /// 修改告警策略组传入的事件告警条件
    public struct ModifyPolicyGroupEventCondition: TCInputModel {
        /// 事件id
        public let eventId: Int64

        /// 告警发送收敛类型。0连续告警，1指数告警
        public let alarmNotifyType: Int64

        /// 告警发送周期单位秒。<0 不触发, 0 只触发一次, >0 每隔triggerTime秒触发一次
        public let alarmNotifyPeriod: Int64

        /// 规则id，不填表示新增，填写了ruleId表示在已存在的规则基础上进行修改
        public let ruleId: Int64?

        public init(eventId: Int64, alarmNotifyType: Int64, alarmNotifyPeriod: Int64, ruleId: Int64? = nil) {
            self.eventId = eventId
            self.alarmNotifyType = alarmNotifyType
            self.alarmNotifyPeriod = alarmNotifyPeriod
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case alarmNotifyType = "AlarmNotifyType"
            case alarmNotifyPeriod = "AlarmNotifyPeriod"
            case ruleId = "RuleId"
        }
    }

    /// 监控类型详细信息
    public struct MonitorTypeInfo: TCOutputModel {
        /// 监控类型ID
        public let id: String

        /// 监控类型
        public let name: String

        /// 排列顺序
        public let sortId: Int64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case sortId = "SortId"
        }
    }

    /// 策略类型
    public struct MonitorTypeNamespace: TCInputModel {
        /// 监控类型
        public let monitorType: String

        /// 策略类型值
        public let namespace: String

        public init(monitorType: String, namespace: String) {
            self.monitorType = monitorType
            self.namespace = namespace
        }

        enum CodingKeys: String, CodingKey {
            case monitorType = "MonitorType"
            case namespace = "Namespace"
        }
    }

    /// 通知模板与策略绑定关系
    public struct NoticeBindPolicys: TCInputModel {
        /// 告警通知模板 ID
        public let noticeId: String?

        /// 告警通知模板绑定的告警策略ID列表
        public let policyIds: [String]?

        public init(noticeId: String? = nil, policyIds: [String]? = nil) {
            self.noticeId = noticeId
            self.policyIds = policyIds
        }

        enum CodingKeys: String, CodingKey {
            case noticeId = "NoticeId"
            case policyIds = "PolicyIds"
        }
    }

    /// 维度支持的操作符信息
    public struct Operator: TCOutputModel {
        /// 运算符标识
        public let id: String

        /// 运算符展示名
        public let name: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
        }
    }

    /// 周期内的统计方式
    public struct PeriodsSt: TCOutputModel {
        /// 周期
        public let period: String

        /// 统计方式
        public let statType: [String]

        enum CodingKeys: String, CodingKey {
            case period = "Period"
            case statType = "StatType"
        }
    }

    /// 监控数据点
    public struct Point: TCOutputModel {
        /// 该监控数据点生成的时间点
        public let timestamp: UInt64

        /// 监控数据点的值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: Float?

        enum CodingKeys: String, CodingKey {
            case timestamp = "Timestamp"
            case value = "Value"
        }
    }

    /// 策略组信息
    public struct PolicyGroup: TCOutputModel {
        /// 是否可设为默认告警策略
        public let canSetDefault: Bool

        /// 告警策略组ID
        public let groupID: Int64

        /// 告警策略组名称
        public let groupName: String

        /// 创建时间
        public let insertTime: Int64

        /// 是否为默认告警策略
        public let isDefault: Int64

        /// 告警策略启用状态
        public let enable: Bool

        /// 最后修改人UIN
        public let lastEditUin: Int64

        /// 未屏蔽的实例数
        public let noShieldedInstanceCount: Int64

        /// 父策略组ID
        public let parentGroupID: Int64

        /// 所属项目ID
        public let projectID: Int64

        /// 告警接收对象信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiverInfos: [PolicyGroupReceiverInfo]?

        /// 备注信息
        public let remark: String

        /// 修改时间
        public let updateTime: Int64

        /// 总绑定实例数
        public let totalInstanceCount: Int64

        /// 视图
        public let viewName: String

        /// 是否为与关系规则
        public let isUnionRule: Int64

        enum CodingKeys: String, CodingKey {
            case canSetDefault = "CanSetDefault"
            case groupID = "GroupID"
            case groupName = "GroupName"
            case insertTime = "InsertTime"
            case isDefault = "IsDefault"
            case enable = "Enable"
            case lastEditUin = "LastEditUin"
            case noShieldedInstanceCount = "NoShieldedInstanceCount"
            case parentGroupID = "ParentGroupID"
            case projectID = "ProjectID"
            case receiverInfos = "ReceiverInfos"
            case remark = "Remark"
            case updateTime = "UpdateTime"
            case totalInstanceCount = "TotalInstanceCount"
            case viewName = "ViewName"
            case isUnionRule = "IsUnionRule"
        }
    }

    /// 2018版策略模板列表接收人信息
    public struct PolicyGroupReceiverInfo: TCOutputModel {
        /// 有效时段结束时间
        public let endTime: Int64

        /// 是否需要发送通知
        public let needSendNotice: Int64

        /// 告警接收渠道
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notifyWay: [String]?

        /// 电话告警对个人间隔（秒）
        public let personInterval: Int64

        /// 消息接收组列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiverGroupList: [Int64]?

        /// 接受者类型
        public let receiverType: String

        /// 接收人列表。通过平台接口查询到的接收人id列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiverUserList: [Int64]?

        /// 告警恢复通知方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recoverNotify: [String]?

        /// 电话告警每轮间隔（秒）
        public let roundInterval: Int64

        /// 电话告警轮数
        public let roundNumber: Int64

        /// 电话告警通知时机。可选"OCCUR"(告警时通知),"RECOVER"(恢复时通知)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sendFor: [String]?

        /// 有效时段开始时间
        public let startTime: Int64

        /// 电话告警接收者uid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uidList: [Int64]?

        enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case needSendNotice = "NeedSendNotice"
            case notifyWay = "NotifyWay"
            case personInterval = "PersonInterval"
            case receiverGroupList = "ReceiverGroupList"
            case receiverType = "ReceiverType"
            case receiverUserList = "ReceiverUserList"
            case recoverNotify = "RecoverNotify"
            case roundInterval = "RoundInterval"
            case roundNumber = "RoundNumber"
            case sendFor = "SendFor"
            case startTime = "StartTime"
            case uidList = "UIDList"
        }
    }

    /// 策略标签
    public struct PolicyTag: TCInputModel {
        /// 标签Key
        public let key: String

        /// 标签Value
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 云产品监控支持的产品简要信息
    public struct ProductSimple: TCOutputModel {
        /// 命名空间
        public let namespace: String

        /// 产品中文名称
        public let productName: String

        /// 产品英文名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productEnName: String?

        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case productName = "ProductName"
            case productEnName = "ProductEnName"
        }
    }

    /// prometheus agent
    public struct PrometheusAgent: TCOutputModel {
        /// Agent 名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// Agent ID
        public let agentId: String

        /// 实例 ID
        public let instanceId: String

        /// Agent IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv4: String?

        /// 心跳时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let heartbeatTime: String?

        /// 最近一次错误
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastError: String?

        /// Agent 版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let agentVersion: String?

        /// Agent 状态
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case agentId = "AgentId"
            case instanceId = "InstanceId"
            case ipv4 = "Ipv4"
            case heartbeatTime = "HeartbeatTime"
            case lastError = "LastError"
            case agentVersion = "AgentVersion"
            case status = "Status"
        }
    }

    /// 托管Prometheus agent信息
    public struct PrometheusAgentInfo: TCInputModel {
        /// 集群类型
        public let clusterType: String

        /// 集群id
        public let clusterId: String

        /// 备注
        public let describe: String?

        public init(clusterType: String, clusterId: String, describe: String? = nil) {
            self.clusterType = clusterType
            self.clusterId = clusterId
            self.describe = describe
        }

        enum CodingKeys: String, CodingKey {
            case clusterType = "ClusterType"
            case clusterId = "ClusterId"
            case describe = "Describe"
        }
    }

    /// 托管prometheus agent概览
    public struct PrometheusAgentOverview: TCOutputModel {
        /// 集群类型
        public let clusterType: String

        /// 集群id
        public let clusterId: String

        /// agent状态
        /// normal = 正常
        /// abnormal = 异常
        public let status: String

        /// 集群名称
        public let clusterName: String

        /// 额外labels
        /// 本集群的所有指标都会带上这几个label
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let externalLabels: [Label]?

        /// 集群所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 集群所在VPC ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 记录关联等操作的失败信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedReason: String?

        /// agent名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        enum CodingKeys: String, CodingKey {
            case clusterType = "ClusterType"
            case clusterId = "ClusterId"
            case status = "Status"
            case clusterName = "ClusterName"
            case externalLabels = "ExternalLabels"
            case region = "Region"
            case vpcId = "VpcId"
            case failedReason = "FailedReason"
            case name = "Name"
        }
    }

    /// 告警渠道使用自建alertmanager的配置
    public struct PrometheusAlertManagerConfig: TCInputModel, TCOutputModel {
        /// alertmanager url
        public let url: String

        /// alertmanager部署所在集群类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterType: String?

        /// alertmanager部署所在集群ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        public init(url: String, clusterType: String? = nil, clusterId: String? = nil) {
            self.url = url
            self.clusterType = clusterType
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case clusterType = "ClusterType"
            case clusterId = "ClusterId"
        }
    }

    /// 托管prometheus告警策略实例
    public struct PrometheusAlertPolicyItem: TCInputModel, TCOutputModel {
        /// 策略名称
        public let name: String

        /// 规则列表
        public let rules: [PrometheusAlertRule]

        /// 告警策略 id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 如果该告警来自模板下发，则TemplateId为模板id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateId: String?

        /// 告警渠道，模板中使用可能返回null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notification: PrometheusNotificationItem?

        /// 最后修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedAt: String?

        /// 如果告警策略来源于用户集群CRD资源定义，则ClusterId为所属集群ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        public init(name: String, rules: [PrometheusAlertRule], id: String? = nil, templateId: String? = nil, notification: PrometheusNotificationItem? = nil, updatedAt: String? = nil, clusterId: String? = nil) {
            self.name = name
            self.rules = rules
            self.id = id
            self.templateId = templateId
            self.notification = notification
            self.updatedAt = updatedAt
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case rules = "Rules"
            case id = "Id"
            case templateId = "TemplateId"
            case notification = "Notification"
            case updatedAt = "UpdatedAt"
            case clusterId = "ClusterId"
        }
    }

    /// Prometheus告警规则
    public struct PrometheusAlertRule: TCInputModel, TCOutputModel {
        /// 规则名称
        public let name: String

        /// prometheus语句
        public let rule: String

        /// 额外标签
        public let labels: [Label]

        /// 告警发送模板
        public let template: String

        /// 持续时间
        public let `for`: String

        /// 该条规则的描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let describe: String?

        /// 参考prometheus rule中的annotations
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotations: [Label]?

        /// 告警规则状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleState: Int64?

        public init(name: String, rule: String, labels: [Label], template: String, for: String, describe: String? = nil, annotations: [Label]? = nil, ruleState: Int64? = nil) {
            self.name = name
            self.rule = rule
            self.labels = labels
            self.template = template
            self.for = `for`
            self.describe = describe
            self.annotations = annotations
            self.ruleState = ruleState
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case rule = "Rule"
            case labels = "Labels"
            case template = "Template"
            case `for` = "For"
            case describe = "Describe"
            case annotations = "Annotations"
            case ruleState = "RuleState"
        }
    }

    /// 与腾讯云可观测平台融合托管 Prometheus 实例，关联集群基础信息
    public struct PrometheusClusterAgentBasic: TCInputModel {
        /// 集群ID
        public let region: String

        /// 集群类型
        public let clusterType: String

        /// 集群ID
        public let clusterId: String

        /// 是否开启公网CLB
        public let enableExternal: Bool

        /// 集群内部署组件的pod配置
        public let inClusterPodConfig: PrometheusClusterAgentPodConfig?

        /// 该集群采集的所有指标都会带上这些labels
        public let externalLabels: [Label]?

        /// 是否安装默认采集配置
        public let notInstallBasicScrape: Bool?

        /// 是否采集指标，true代表drop所有指标，false代表采集默认指标
        public let notScrape: Bool?

        /// 是否开启默认预聚合规则
        public let openDefaultRecord: Bool?

        public init(region: String, clusterType: String, clusterId: String, enableExternal: Bool, inClusterPodConfig: PrometheusClusterAgentPodConfig? = nil, externalLabels: [Label]? = nil, notInstallBasicScrape: Bool? = nil, notScrape: Bool? = nil, openDefaultRecord: Bool? = nil) {
            self.region = region
            self.clusterType = clusterType
            self.clusterId = clusterId
            self.enableExternal = enableExternal
            self.inClusterPodConfig = inClusterPodConfig
            self.externalLabels = externalLabels
            self.notInstallBasicScrape = notInstallBasicScrape
            self.notScrape = notScrape
            self.openDefaultRecord = openDefaultRecord
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case clusterType = "ClusterType"
            case clusterId = "ClusterId"
            case enableExternal = "EnableExternal"
            case inClusterPodConfig = "InClusterPodConfig"
            case externalLabels = "ExternalLabels"
            case notInstallBasicScrape = "NotInstallBasicScrape"
            case notScrape = "NotScrape"
            case openDefaultRecord = "OpenDefaultRecord"
        }
    }

    /// 关联集群时在集群内部署组件的pod额外配置
    public struct PrometheusClusterAgentPodConfig: TCInputModel {
        /// 是否使用HostNetWork
        public let hostNet: Bool?

        /// 指定pod运行节点
        public let nodeSelector: [Label]?

        /// 容忍污点
        public let tolerations: [Toleration]?

        public init(hostNet: Bool? = nil, nodeSelector: [Label]? = nil, tolerations: [Toleration]? = nil) {
            self.hostNet = hostNet
            self.nodeSelector = nodeSelector
            self.tolerations = tolerations
        }

        enum CodingKeys: String, CodingKey {
            case hostNet = "HostNet"
            case nodeSelector = "NodeSelector"
            case tolerations = "Tolerations"
        }
    }

    /// prometheus配置
    public struct PrometheusConfigItem: TCInputModel, TCOutputModel {
        /// 名称
        public let name: String

        /// 配置内容
        public let config: String

        /// 用于出参，如果该配置来至模板，则为模板id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateId: String?

        /// 目标数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: Targets?

        public init(name: String, config: String, templateId: String? = nil, targets: Targets? = nil) {
            self.name = name
            self.config = config
            self.templateId = templateId
            self.targets = targets
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case config = "Config"
            case templateId = "TemplateId"
            case targets = "Targets"
        }
    }

    /// 实例的授权信息
    public struct PrometheusInstanceGrantInfo: TCOutputModel {
        /// 是否有计费操作权限(1=有，2=无)
        public let hasChargeOperation: Int64

        /// 是否显示VPC信息的权限(1=有，2=无)
        public let hasVpcDisplay: Int64

        /// 是否可修改Grafana的状态(1=有，2=无)
        public let hasGrafanaStatusChange: Int64

        /// 是否有管理agent的权限(1=有，2=无)
        public let hasAgentManage: Int64

        /// 是否有管理TKE集成的权限(1=有，2=无)
        public let hasTkeManage: Int64

        /// 是否显示API等信息(1=有, 2=无)
        public let hasApiOperation: Int64

        enum CodingKeys: String, CodingKey {
            case hasChargeOperation = "HasChargeOperation"
            case hasVpcDisplay = "HasVpcDisplay"
            case hasGrafanaStatusChange = "HasGrafanaStatusChange"
            case hasAgentManage = "HasAgentManage"
            case hasTkeManage = "HasTkeManage"
            case hasApiOperation = "HasApiOperation"
        }
    }

    /// Prometheus用量信息
    public struct PrometheusInstanceTenantUsage: TCOutputModel {
        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 计费周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let calcDate: String?

        /// 总用量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Float?

        /// 基础指标用量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let basic: Float?

        /// 付费指标用量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fee: Float?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case calcDate = "CalcDate"
            case total = "Total"
            case basic = "Basic"
            case fee = "Fee"
        }
    }

    /// Prometheus 服务响应体
    public struct PrometheusInstancesItem: TCOutputModel {
        /// 实例ID。
        public let instanceId: String

        /// 实例名称。
        public let instanceName: String

        /// 实例计费模式。取值范围：
        /// <ul>
        /// <li>2：包年包月</li>
        /// <li>3：按量</li>
        /// </ul>
        public let instanceChargeType: Int64

        /// 地域 ID
        public let regionId: Int64

        /// 可用区
        public let zone: String

        /// VPC ID
        public let vpcId: String

        /// 子网 ID
        public let subnetId: String

        /// 存储周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataRetentionTime: Int64?

        /// 实例业务状态。取值范围：
        /// <ul>
        /// <li>1：正在创建</li>
        /// <li>2：运行中</li>
        /// <li>3：异常</li>
        /// <li>4：重建中</li>
        /// <li>5：销毁中</li>
        /// <li>6：已停服</li>
        /// <li>8：欠费停服中</li>
        /// <li>9：欠费已停服</li>
        /// </ul>
        public let instanceStatus: Int64

        /// Grafana 面板 URL
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grafanaURL: String?

        /// 创建时间
        public let createdAt: String

        /// 是否开启 Grafana
        /// <li>0：不开启</li>
        /// <li>1：开启</li>
        public let enableGrafana: Int64

        /// 实例IPV4地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let iPv4Address: String?

        /// 实例关联的标签列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSpecification: [PrometheusTag]?

        /// 购买的实例过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 计费状态
        /// <ul>
        /// <li>1：正常</li>
        /// <li>2：过期</li>
        /// <li>3：销毁</li>
        /// <li>4：分配中</li>
        /// <li>5：分配失败</li>
        /// </ul>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chargeStatus: Int64?

        /// 规格名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specName: String?

        /// 自动续费标记
        /// <ul>
        /// <li>0：不自动续费</li>
        /// <li>1：开启自动续费</li>
        /// <li>2：禁止自动续费</li>
        /// <li>-1：无效</ii>
        /// </ul>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenewFlag: Int64?

        /// 是否快过期
        /// <ul>
        /// <li>0：否</li>
        /// <li>1：快过期</li>
        /// </ul>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isNearExpire: Int64?

        /// 数据写入需要的 Token
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let authToken: String?

        /// Prometheus Remote Write 的地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remoteWrite: String?

        /// Prometheus HTTP Api 根地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let apiRootPath: String?

        /// Proxy 的地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyAddress: String?

        /// Grafana 运行状态
        /// <ul>
        /// <li>1：正在创建</li>
        /// <li>2：运行中</li>
        /// <li>3：异常</li>
        /// <li>4：重启中</li>
        /// <li>5：销毁中</li>
        /// <li>6：已停机</li>
        /// <li>7：已删除</li>
        /// </ul>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grafanaStatus: Int64?

        /// Grafana IP 白名单列表，使用英文分号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grafanaIpWhiteList: String?

        /// 实例的授权信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grant: PrometheusInstanceGrantInfo?

        /// 绑定的 Grafana 实例 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grafanaInstanceId: String?

        /// 告警规则限制
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alertRuleLimit: Int64?

        /// 预聚合规则限制
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recordingRuleLimit: Int64?

        /// 迁移状态，0-不在迁移中，1-迁移中、原实例，2-迁移中、目标实例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let migrationType: Int64?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceChargeType = "InstanceChargeType"
            case regionId = "RegionId"
            case zone = "Zone"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case dataRetentionTime = "DataRetentionTime"
            case instanceStatus = "InstanceStatus"
            case grafanaURL = "GrafanaURL"
            case createdAt = "CreatedAt"
            case enableGrafana = "EnableGrafana"
            case iPv4Address = "IPv4Address"
            case tagSpecification = "TagSpecification"
            case expireTime = "ExpireTime"
            case chargeStatus = "ChargeStatus"
            case specName = "SpecName"
            case autoRenewFlag = "AutoRenewFlag"
            case isNearExpire = "IsNearExpire"
            case authToken = "AuthToken"
            case remoteWrite = "RemoteWrite"
            case apiRootPath = "ApiRootPath"
            case proxyAddress = "ProxyAddress"
            case grafanaStatus = "GrafanaStatus"
            case grafanaIpWhiteList = "GrafanaIpWhiteList"
            case grant = "Grant"
            case grafanaInstanceId = "GrafanaInstanceId"
            case alertRuleLimit = "AlertRuleLimit"
            case recordingRuleLimit = "RecordingRuleLimit"
            case migrationType = "MigrationType"
        }
    }

    /// 托管prometheusV2实例概览
    public struct PrometheusInstancesOverview: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名
        public let instanceName: String

        /// VPC ID
        public let vpcId: String

        /// 子网ID
        public let subnetId: String

        /// 运行状态（1:正在创建；2:运行中；3:异常；4:重启中；5:销毁中； 6:已停机； 7: 已删除）
        public let instanceStatus: Int64

        /// 计费状态（1:正常；2:过期; 3:销毁; 4:分配中; 5:分配失败）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chargeStatus: Int64?

        /// 是否开启 Grafana（0:不开启，1:开启）
        public let enableGrafana: Int64

        /// Grafana 面板 URL
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grafanaURL: String?

        /// 实例付费类型（1:试用版；2:预付费）
        public let instanceChargeType: Int64

        /// 规格名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specName: String?

        /// 存储周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataRetentionTime: Int64?

        /// 购买的实例过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 自动续费标记(0:不自动续费；1:开启自动续费；2:禁止自动续费；-1:无效)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenewFlag: Int64?

        /// 绑定集群总数
        public let boundTotal: Int64

        /// 绑定集群正常状态总数
        public let boundNormal: Int64

        /// 资源包状态，0-无可用资源包，1-有可用资源包
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourcePackageStatus: Int64?

        /// 资源包规格名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourcePackageSpecName: String?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case instanceStatus = "InstanceStatus"
            case chargeStatus = "ChargeStatus"
            case enableGrafana = "EnableGrafana"
            case grafanaURL = "GrafanaURL"
            case instanceChargeType = "InstanceChargeType"
            case specName = "SpecName"
            case dataRetentionTime = "DataRetentionTime"
            case expireTime = "ExpireTime"
            case autoRenewFlag = "AutoRenewFlag"
            case boundTotal = "BoundTotal"
            case boundNormal = "BoundNormal"
            case resourcePackageStatus = "ResourcePackageStatus"
            case resourcePackageSpecName = "ResourcePackageSpecName"
        }
    }

    /// prometheus一个job的targets
    public struct PrometheusJobTargets: TCOutputModel {
    }

    /// 告警通知渠道配置
    public struct PrometheusNotificationItem: TCInputModel, TCOutputModel {
        /// 是否启用
        public let enabled: Bool

        /// 通道类型，默认为amp，支持以下
        /// amp
        /// webhook
        /// alertmanager
        public let type: String

        /// 如果Type为webhook, 则该字段为必填项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let webHook: String?

        /// 如果Type为alertmanager, 则该字段为必填项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alertManager: PrometheusAlertManagerConfig?

        /// 收敛时间
        public let repeatInterval: String?

        /// 生效起始时间
        public let timeRangeStart: String?

        /// 生效结束时间
        public let timeRangeEnd: String?

        /// 告警通知方式。目前有SMS、EMAIL、CALL、WECHAT方式。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notifyWay: [String]?

        /// 告警接收组（用户组）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiverGroups: [String]?

        /// 电话告警顺序。
        /// 注：NotifyWay选择CALL，采用该参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneNotifyOrder: [UInt64]?

        /// 电话告警次数。
        /// 注：NotifyWay选择CALL，采用该参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneCircleTimes: Int64?

        /// 电话告警轮内间隔。单位：秒
        /// 注：NotifyWay选择CALL，采用该参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneInnerInterval: Int64?

        /// 电话告警轮外间隔。单位：秒
        /// 注：NotifyWay选择CALL，采用该参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneCircleInterval: Int64?

        /// 电话告警触达通知
        /// 注：NotifyWay选择CALL，采用该参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneArriveNotice: Bool?

        public init(enabled: Bool, type: String, webHook: String? = nil, alertManager: PrometheusAlertManagerConfig? = nil, repeatInterval: String? = nil, timeRangeStart: String? = nil, timeRangeEnd: String? = nil, notifyWay: [String]? = nil, receiverGroups: [String]? = nil, phoneNotifyOrder: [UInt64]? = nil, phoneCircleTimes: Int64? = nil, phoneInnerInterval: Int64? = nil, phoneCircleInterval: Int64? = nil, phoneArriveNotice: Bool? = nil) {
            self.enabled = enabled
            self.type = type
            self.webHook = webHook
            self.alertManager = alertManager
            self.repeatInterval = repeatInterval
            self.timeRangeStart = timeRangeStart
            self.timeRangeEnd = timeRangeEnd
            self.notifyWay = notifyWay
            self.receiverGroups = receiverGroups
            self.phoneNotifyOrder = phoneNotifyOrder
            self.phoneCircleTimes = phoneCircleTimes
            self.phoneInnerInterval = phoneInnerInterval
            self.phoneCircleInterval = phoneCircleInterval
            self.phoneArriveNotice = phoneArriveNotice
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case type = "Type"
            case webHook = "WebHook"
            case alertManager = "AlertManager"
            case repeatInterval = "RepeatInterval"
            case timeRangeStart = "TimeRangeStart"
            case timeRangeEnd = "TimeRangeEnd"
            case notifyWay = "NotifyWay"
            case receiverGroups = "ReceiverGroups"
            case phoneNotifyOrder = "PhoneNotifyOrder"
            case phoneCircleTimes = "PhoneCircleTimes"
            case phoneInnerInterval = "PhoneInnerInterval"
            case phoneCircleInterval = "PhoneCircleInterval"
            case phoneArriveNotice = "PhoneArriveNotice"
        }
    }

    /// prometheus聚合规则实例详情，包含所属集群ID
    public struct PrometheusRecordRuleYamlItem: TCOutputModel {
        /// 实例名称
        public let name: String

        /// 最近更新时间
        public let updateTime: String

        /// Yaml内容
        public let templateId: String

        /// 如果该聚合规则来至模板，则TemplateId为模板id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let content: String?

        /// 该聚合规则如果来源于用户集群crd资源定义，则ClusterId为所属集群ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 规则数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: Int64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case updateTime = "UpdateTime"
            case templateId = "TemplateId"
            case content = "Content"
            case clusterId = "ClusterId"
            case status = "Status"
            case id = "Id"
            case count = "Count"
        }
    }

    /// prometheus 报警规则 KV 参数
    public struct PrometheusRuleKV: TCInputModel, TCOutputModel {
        /// 键
        public let key: String

        /// 值
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// prometheus 报警规则集
    public struct PrometheusRuleSet: TCOutputModel {
        /// 规则 ID
        public let ruleId: String

        /// 规则名称
        public let ruleName: String

        /// 规则状态码
        public let ruleState: Int64

        /// 规则类别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 规则标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labels: [PrometheusRuleKV]?

        /// 规则注释列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotations: [PrometheusRuleKV]?

        /// 规则表达式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expr: String?

        /// 规则报警持续时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let duration: String?

        /// 报警接收组列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receivers: [String]?

        /// 规则运行健康状态，取值如下：
        /// <li>unknown 未知状态</li>
        /// <li>pending 加载中</li>
        /// <li>ok 运行正常</li>
        /// <li>err 运行错误</li>
        public let health: String

        /// 规则创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdAt: String?

        /// 规则更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedAt: String?

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case ruleState = "RuleState"
            case type = "Type"
            case labels = "Labels"
            case annotations = "Annotations"
            case expr = "Expr"
            case duration = "Duration"
            case receivers = "Receivers"
            case health = "Health"
            case createdAt = "CreatedAt"
            case updatedAt = "UpdatedAt"
        }
    }

    /// Prometheus 抓取任务
    public struct PrometheusScrapeJob: TCOutputModel {
        /// 任务名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// Agent ID
        public let agentId: String

        /// 任务 ID
        public let jobId: String

        /// 配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let config: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case agentId = "AgentId"
            case jobId = "JobId"
            case config = "Config"
        }
    }

    /// Prometheus 托管服务标签
    public struct PrometheusTag: TCInputModel, TCOutputModel {
        /// 标签的健值
        public let key: String

        /// 标签对应的值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 模板实例
    public struct PrometheusTemp: TCInputModel, TCOutputModel {
        /// 模板名称
        public let name: String

        /// 模板维度，支持以下类型
        /// instance 实例级别
        /// cluster 集群级别
        public let level: String

        /// 模板描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let describe: String?

        /// 当Level为instance时有效，
        /// 模板中的聚合规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recordRules: [PrometheusConfigItem]?

        /// 当Level为cluster时有效，
        /// 模板中的ServiceMonitor规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceMonitors: [PrometheusConfigItem]?

        /// 当Level为cluster时有效，
        /// 模板中的PodMonitors规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let podMonitors: [PrometheusConfigItem]?

        /// 当Level为cluster时有效，
        /// 模板中的RawJobs规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rawJobs: [PrometheusConfigItem]?

        /// 模板的ID, 用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateId: String?

        /// 最近更新时间，用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 当前版本，用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        /// 是否系统提供的默认模板，用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDefault: Bool?

        /// 当Level为instance时有效，
        /// 模板中的告警配置列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alertDetailRules: [PrometheusAlertPolicyItem]?

        /// 关联实例数目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetsTotal: Int64?

        public init(name: String, level: String, describe: String? = nil, recordRules: [PrometheusConfigItem]? = nil, serviceMonitors: [PrometheusConfigItem]? = nil, podMonitors: [PrometheusConfigItem]? = nil, rawJobs: [PrometheusConfigItem]? = nil, templateId: String? = nil, updateTime: String? = nil, version: String? = nil, isDefault: Bool? = nil, alertDetailRules: [PrometheusAlertPolicyItem]? = nil, targetsTotal: Int64? = nil) {
            self.name = name
            self.level = level
            self.describe = describe
            self.recordRules = recordRules
            self.serviceMonitors = serviceMonitors
            self.podMonitors = podMonitors
            self.rawJobs = rawJobs
            self.templateId = templateId
            self.updateTime = updateTime
            self.version = version
            self.isDefault = isDefault
            self.alertDetailRules = alertDetailRules
            self.targetsTotal = targetsTotal
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case level = "Level"
            case describe = "Describe"
            case recordRules = "RecordRules"
            case serviceMonitors = "ServiceMonitors"
            case podMonitors = "PodMonitors"
            case rawJobs = "RawJobs"
            case templateId = "TemplateId"
            case updateTime = "UpdateTime"
            case version = "Version"
            case isDefault = "IsDefault"
            case alertDetailRules = "AlertDetailRules"
            case targetsTotal = "TargetsTotal"
        }
    }

    /// 云原生Prometheus模板可修改项
    public struct PrometheusTempModify: TCInputModel, TCOutputModel {
        /// 修改名称
        public let name: String?

        /// 修改描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let describe: String?

        /// 当Level为cluster时有效，
        /// 模板中的ServiceMonitor规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceMonitors: [PrometheusConfigItem]?

        /// 当Level为cluster时有效，
        /// 模板中的PodMonitors规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let podMonitors: [PrometheusConfigItem]?

        /// 当Level为cluster时有效，
        /// 模板中的RawJobs规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rawJobs: [PrometheusConfigItem]?

        /// 当Level为instance时有效，
        /// 模板中的聚合规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recordRules: [PrometheusConfigItem]?

        /// 修改内容，只有当模板类型是Alert时生效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alertDetailRules: [PrometheusAlertPolicyItem]?

        public init(name: String? = nil, describe: String? = nil, serviceMonitors: [PrometheusConfigItem]? = nil, podMonitors: [PrometheusConfigItem]? = nil, rawJobs: [PrometheusConfigItem]? = nil, recordRules: [PrometheusConfigItem]? = nil, alertDetailRules: [PrometheusAlertPolicyItem]? = nil) {
            self.name = name
            self.describe = describe
            self.serviceMonitors = serviceMonitors
            self.podMonitors = podMonitors
            self.rawJobs = rawJobs
            self.recordRules = recordRules
            self.alertDetailRules = alertDetailRules
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case describe = "Describe"
            case serviceMonitors = "ServiceMonitors"
            case podMonitors = "PodMonitors"
            case rawJobs = "RawJobs"
            case recordRules = "RecordRules"
            case alertDetailRules = "AlertDetailRules"
        }
    }

    /// 云原生Prometheus模板同步目标
    public struct PrometheusTemplateSyncTarget: TCInputModel, TCOutputModel {
        /// 目标所在地域
        public let region: String

        /// 目标实例
        public let instanceId: String

        /// 集群id，只有当采集模板的Level为cluster的时候需要
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        /// 最后一次同步时间， 用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let syncTime: String?

        /// 当前使用的模板版本，用于出参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        /// 集群类型，只有当采集模板的Level为cluster的时候需要
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterType: String?

        /// 用于出参，实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 用于出参，集群名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        public init(region: String, instanceId: String, clusterId: String? = nil, syncTime: String? = nil, version: String? = nil, clusterType: String? = nil, instanceName: String? = nil, clusterName: String? = nil) {
            self.region = region
            self.instanceId = instanceId
            self.clusterId = clusterId
            self.syncTime = syncTime
            self.version = version
            self.clusterType = clusterType
            self.instanceName = instanceName
            self.clusterName = clusterName
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case instanceId = "InstanceId"
            case clusterId = "ClusterId"
            case syncTime = "SyncTime"
            case version = "Version"
            case clusterType = "ClusterType"
            case instanceName = "InstanceName"
            case clusterName = "ClusterName"
        }
    }

    /// PrometheusZoneItem 响应结构体内的地域信息
    public struct PrometheusZoneItem: TCOutputModel {
        /// 可用区
        public let zone: String

        /// 可用区 ID
        public let zoneId: Int64

        /// 可用区状态( 0: 不可用；1: 可用)
        public let zoneState: Int64

        /// 地域 ID
        public let regionId: Int64

        /// 可用区名（目前为中文）
        public let zoneName: String

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneId = "ZoneId"
            case zoneState = "ZoneState"
            case regionId = "RegionId"
            case zoneName = "ZoneName"
        }
    }

    /// 接收人信息
    public struct ReceiverInfo: TCInputModel {
        /// 告警时间段开始时间。范围[0,86400)，作为 UNIX 时间戳转成北京时间后去掉日期，例如7200表示"10:0:0"
        public let startTime: Int64

        /// 告警时间段结束时间。含义同StartTime
        public let endTime: Int64

        /// 告警通知方式。可选 "SMS","SITE","EMAIL","CALL","WECHAT"
        public let notifyWay: [String]

        /// 接收人类型。“group” 或 “user”
        public let receiverType: String

        /// ReceiverId
        public let id: Int64?

        /// 电话告警通知时机。可选"OCCUR"(告警时通知),"RECOVER"(恢复时通知)
        public let sendFor: [String]?

        /// 电话告警接收者 UID
        public let uidList: [Int64]?

        /// 电话告警轮数
        public let roundNumber: Int64?

        /// 电话告警对个人间隔（秒）
        public let personInterval: Int64?

        /// 电话告警每轮间隔（秒）
        public let roundInterval: Int64?

        /// 恢复通知方式。可选"SMS"
        public let recoverNotify: [String]?

        /// 是否需要电话告警触达提示。0不需要，1需要
        public let needSendNotice: Int64?

        /// 接收组列表。通过平台接口查询到的接收组 ID 列表
        public let receiverGroupList: [Int64]?

        /// 接收人列表。通过平台接口查询到的接收人 ID 列表
        public let receiverUserList: [Int64]?

        /// 告警接收语言，枚举值（zh-CN，en-US）
        public let receiveLanguage: String?

        public init(startTime: Int64, endTime: Int64, notifyWay: [String], receiverType: String, id: Int64? = nil, sendFor: [String]? = nil, uidList: [Int64]? = nil, roundNumber: Int64? = nil, personInterval: Int64? = nil, roundInterval: Int64? = nil, recoverNotify: [String]? = nil, needSendNotice: Int64? = nil, receiverGroupList: [Int64]? = nil, receiverUserList: [Int64]? = nil, receiveLanguage: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.notifyWay = notifyWay
            self.receiverType = receiverType
            self.id = id
            self.sendFor = sendFor
            self.uidList = uidList
            self.roundNumber = roundNumber
            self.personInterval = personInterval
            self.roundInterval = roundInterval
            self.recoverNotify = recoverNotify
            self.needSendNotice = needSendNotice
            self.receiverGroupList = receiverGroupList
            self.receiverUserList = receiverUserList
            self.receiveLanguage = receiveLanguage
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case notifyWay = "NotifyWay"
            case receiverType = "ReceiverType"
            case id = "Id"
            case sendFor = "SendFor"
            case uidList = "UidList"
            case roundNumber = "RoundNumber"
            case personInterval = "PersonInterval"
            case roundInterval = "RoundInterval"
            case recoverNotify = "RecoverNotify"
            case needSendNotice = "NeedSendNotice"
            case receiverGroupList = "ReceiverGroupList"
            case receiverUserList = "ReceiverUserList"
            case receiveLanguage = "ReceiveLanguage"
        }
    }

    /// Prometheus 聚合规则响应结构体内信息
    public struct RecordingRuleSet: TCOutputModel {
        /// 规则 ID
        public let ruleId: String

        /// 规则状态码
        public let ruleState: Int64

        /// 分组名称
        public let name: String

        /// 规则内容组
        public let group: String

        /// 规则数量
        public let total: Int64

        /// 规则创建时间
        public let createdAt: String

        /// 规则最近更新时间
        public let updatedAt: String

        /// 规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleState = "RuleState"
            case name = "Name"
            case group = "Group"
            case total = "Total"
            case createdAt = "CreatedAt"
            case updatedAt = "UpdatedAt"
            case ruleName = "RuleName"
        }
    }

    /// Prometheus 服务发现信息
    public struct ServiceDiscoveryItem: TCOutputModel {
        /// 服务发现名称
        public let name: String

        /// 服务发现属于的 Namespace
        public let namespace: String

        /// 服务发现类型: ServiceMonitor/PodMonitor
        public let kind: String

        /// Namespace 选取方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespaceSelector: String?

        /// Label 选取方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let selector: String?

        /// Endpoints 信息（PodMonitor 不含该参数）
        public let endpoints: String

        /// 服务发现对应的配置信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let yaml: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case namespace = "Namespace"
            case kind = "Kind"
            case namespaceSelector = "NamespaceSelector"
            case selector = "Selector"
            case endpoints = "Endpoints"
            case yaml = "Yaml"
        }
    }

    /// 标签
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签key
        public let key: String

        /// 标签value
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 策略列表详情标签返回体
    public struct TagInstance: TCOutputModel {
        /// 标签Key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 标签Value
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        /// 实例个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceSum: Int64?

        /// 产品类型，如：cvm
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceType: String?

        /// 地域ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: Int64?

        /// 绑定状态，2：绑定成功，1：绑定中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bindingStatus: Int64?

        /// 标签状态，2：标签存在，1：标签不存在
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagStatus: Int64?

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case instanceSum = "InstanceSum"
            case serviceType = "ServiceType"
            case regionId = "RegionId"
            case bindingStatus = "BindingStatus"
            case tagStatus = "TagStatus"
        }
    }

    /// 抓取目标数
    public struct Targets: TCInputModel, TCOutputModel {
        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?

        /// 在线数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let up: UInt64?

        /// 不在线数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let down: UInt64?

        /// 未知状态数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unknown: UInt64?

        public init(total: UInt64? = nil, up: UInt64? = nil, down: UInt64? = nil, unknown: UInt64? = nil) {
            self.total = total
            self.up = up
            self.down = down
            self.unknown = unknown
        }

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case up = "Up"
            case down = "Down"
            case unknown = "Unknown"
        }
    }

    /// 任务步骤信息
    public struct TaskStepInfo: TCOutputModel {
        /// 步骤名称
        public let step: String

        /// 生命周期
        /// pending : 步骤未开始
        /// running: 步骤执行中
        /// success: 步骤成功完成
        /// failed: 步骤失败
        public let lifeState: String

        /// 步骤开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startAt: String?

        /// 步骤结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endAt: String?

        /// 若步骤生命周期为failed,则此字段显示错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedMsg: String?

        enum CodingKeys: String, CodingKey {
            case step = "Step"
            case lifeState = "LifeState"
            case startAt = "StartAt"
            case endAt = "EndAt"
            case failedMsg = "FailedMsg"
        }
    }

    /// 模板列表
    public struct TemplateGroup: TCOutputModel {
        /// 指标告警规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditions: [Condition]?

        /// 事件告警规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventConditions: [EventCondition]?

        /// 关联告警策略组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyGroups: [PolicyGroup]?

        /// 模板策略组ID
        public let groupID: Int64

        /// 模板策略组名称
        public let groupName: String

        /// 创建时间
        public let insertTime: Int64

        /// 最后修改人UIN
        public let lastEditUin: Int64

        /// 备注
        public let remark: String

        /// 更新时间
        public let updateTime: Int64

        /// 视图
        public let viewName: String

        /// 是否为与关系
        public let isUnionRule: Int64

        enum CodingKeys: String, CodingKey {
            case conditions = "Conditions"
            case eventConditions = "EventConditions"
            case policyGroups = "PolicyGroups"
            case groupID = "GroupID"
            case groupName = "GroupName"
            case insertTime = "InsertTime"
            case lastEditUin = "LastEditUin"
            case remark = "Remark"
            case updateTime = "UpdateTime"
            case viewName = "ViewName"
            case isUnionRule = "IsUnionRule"
        }
    }

    /// kubernetes Taint
    public struct Toleration: TCInputModel {
        /// 容忍应用到的 taint key
        public let key: String?

        /// 键与值的关系
        public let `operator`: String?

        /// 要匹配的污点效果
        public let effect: String?

        public init(key: String? = nil, operator: String? = nil, effect: String? = nil) {
            self.key = key
            self.operator = `operator`
            self.effect = effect
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case `operator` = "Operator"
            case effect = "Effect"
        }
    }

    /// 告警通知模板 - 回调通知详情
    public struct URLNotice: TCInputModel, TCOutputModel {
        /// 回调 url（限长256字符）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 是否通过验证 0=否 1=是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isValid: Int64?

        /// 验证码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validationCode: String?

        /// 通知开始时间 一天开始的秒数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: Int64?

        /// 通知结束时间 一天开始的秒数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: Int64?

        /// 通知周期 1-7表示周一到周日
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weekday: [Int64]?

        public init(url: String, isValid: Int64? = nil, validationCode: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, weekday: [Int64]? = nil) {
            self.url = url
            self.isValid = isValid
            self.validationCode = validationCode
            self.startTime = startTime
            self.endTime = endTime
            self.weekday = weekday
        }

        enum CodingKeys: String, CodingKey {
            case url = "URL"
            case isValid = "IsValid"
            case validationCode = "ValidationCode"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case weekday = "Weekday"
        }
    }

    /// 告警通知模板 - 用户通知详情
    public struct UserNotice: TCInputModel, TCOutputModel {
        /// 接收者类型 USER=用户 GROUP=用户组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let receiverType: String?

        /// 通知开始时间 00:00:00 开始的秒数（取值范围0-86399）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: Int64?

        /// 通知结束时间 00:00:00 开始的秒数（取值范围0-86399）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: Int64?

        /// 通知渠道列表 EMAIL=邮件 SMS=短信 CALL=电话 WECHAT=微信 RTX=企业微信
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noticeWay: [String]?

        /// 用户 uid 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userIds: [Int64]?

        /// 用户组 group id 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupIds: [Int64]?

        /// 电话轮询列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneOrder: [Int64]?

        /// 电话轮询次数 （取值范围1-5）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneCircleTimes: Int64?

        /// 单次轮询内拨打间隔 秒数 （取值范围60-900）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneInnerInterval: Int64?

        /// 两次轮询间隔 秒数（取值范围60-900）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneCircleInterval: Int64?

        /// 是否需要触达通知 0=否 1=是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let needPhoneArriveNotice: Int64?

        /// 电话拨打类型 SYNC=同时拨打 CIRCLE=轮询拨打 不指定时默认是轮询
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneCallType: String?

        /// 通知周期 1-7表示周一到周日
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weekday: [Int64]?

        /// 值班表id列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let onCallFormIDs: [String]?

        public init(receiverType: String, startTime: Int64, endTime: Int64, noticeWay: [String], userIds: [Int64]? = nil, groupIds: [Int64]? = nil, phoneOrder: [Int64]? = nil, phoneCircleTimes: Int64? = nil, phoneInnerInterval: Int64? = nil, phoneCircleInterval: Int64? = nil, needPhoneArriveNotice: Int64? = nil, phoneCallType: String? = nil, weekday: [Int64]? = nil, onCallFormIDs: [String]? = nil) {
            self.receiverType = receiverType
            self.startTime = startTime
            self.endTime = endTime
            self.noticeWay = noticeWay
            self.userIds = userIds
            self.groupIds = groupIds
            self.phoneOrder = phoneOrder
            self.phoneCircleTimes = phoneCircleTimes
            self.phoneInnerInterval = phoneInnerInterval
            self.phoneCircleInterval = phoneCircleInterval
            self.needPhoneArriveNotice = needPhoneArriveNotice
            self.phoneCallType = phoneCallType
            self.weekday = weekday
            self.onCallFormIDs = onCallFormIDs
        }

        enum CodingKeys: String, CodingKey {
            case receiverType = "ReceiverType"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case noticeWay = "NoticeWay"
            case userIds = "UserIds"
            case groupIds = "GroupIds"
            case phoneOrder = "PhoneOrder"
            case phoneCircleTimes = "PhoneCircleTimes"
            case phoneInnerInterval = "PhoneInnerInterval"
            case phoneCircleInterval = "PhoneCircleInterval"
            case needPhoneArriveNotice = "NeedPhoneArriveNotice"
            case phoneCallType = "PhoneCallType"
            case weekday = "Weekday"
            case onCallFormIDs = "OnCallFormIDs"
        }
    }
}
