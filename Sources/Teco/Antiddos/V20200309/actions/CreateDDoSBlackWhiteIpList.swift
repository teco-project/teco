//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Antiddos {
    /// CreateDDoSBlackWhiteIpList请求参数结构体
    public struct CreateDDoSBlackWhiteIpListRequest: TCRequestModel {
        /// 资源实例ID
        public let instanceId: String

        /// IP列表
        public let ipList: [IpSegment]

        /// IP类型，取值[black(黑名单IP), white(白名单IP)]
        public let type: String

        public init(instanceId: String, ipList: [IpSegment], type: String) {
            self.instanceId = instanceId
            self.ipList = ipList
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case ipList = "IpList"
            case type = "Type"
        }
    }

    /// CreateDDoSBlackWhiteIpList返回参数结构体
    public struct CreateDDoSBlackWhiteIpListResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 添加DDoS防护的IP网段黑白名单
    @inlinable @discardableResult
    public func createDDoSBlackWhiteIpList(_ input: CreateDDoSBlackWhiteIpListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDDoSBlackWhiteIpListResponse> {
        self.client.execute(action: "CreateDDoSBlackWhiteIpList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加DDoS防护的IP网段黑白名单
    @inlinable @discardableResult
    public func createDDoSBlackWhiteIpList(_ input: CreateDDoSBlackWhiteIpListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDDoSBlackWhiteIpListResponse {
        try await self.client.execute(action: "CreateDDoSBlackWhiteIpList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加DDoS防护的IP网段黑白名单
    @inlinable @discardableResult
    public func createDDoSBlackWhiteIpList(instanceId: String, ipList: [IpSegment], type: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDDoSBlackWhiteIpListResponse> {
        self.createDDoSBlackWhiteIpList(.init(instanceId: instanceId, ipList: ipList, type: type), region: region, logger: logger, on: eventLoop)
    }

    /// 添加DDoS防护的IP网段黑白名单
    @inlinable @discardableResult
    public func createDDoSBlackWhiteIpList(instanceId: String, ipList: [IpSegment], type: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDDoSBlackWhiteIpListResponse {
        try await self.createDDoSBlackWhiteIpList(.init(instanceId: instanceId, ipList: ipList, type: type), region: region, logger: logger, on: eventLoop)
    }
}
