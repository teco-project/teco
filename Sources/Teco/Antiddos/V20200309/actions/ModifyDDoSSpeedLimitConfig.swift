//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Antiddos {
    /// ModifyDDoSSpeedLimitConfig请求参数结构体
    public struct ModifyDDoSSpeedLimitConfigRequest: TCRequestModel {
        /// 资源实例ID
        public let instanceId: String
        
        /// 访问限速配置，填写参数时配置ID不能为空
        public let dDoSSpeedLimitConfig: DDoSSpeedLimitConfig
        
        public init (instanceId: String, dDoSSpeedLimitConfig: DDoSSpeedLimitConfig) {
            self.instanceId = instanceId
            self.dDoSSpeedLimitConfig = dDoSSpeedLimitConfig
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dDoSSpeedLimitConfig = "DDoSSpeedLimitConfig"
        }
    }
    
    /// ModifyDDoSSpeedLimitConfig返回参数结构体
    public struct ModifyDDoSSpeedLimitConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 修改DDoS防护的访问限速配置
    @inlinable
    public func modifyDDoSSpeedLimitConfig(_ input: ModifyDDoSSpeedLimitConfigRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyDDoSSpeedLimitConfigResponse > {
        self.client.execute(action: "ModifyDDoSSpeedLimitConfig", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改DDoS防护的访问限速配置
    @inlinable
    public func modifyDDoSSpeedLimitConfig(_ input: ModifyDDoSSpeedLimitConfigRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDDoSSpeedLimitConfigResponse {
        try await self.client.execute(action: "ModifyDDoSSpeedLimitConfig", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 修改DDoS防护的访问限速配置
    @inlinable
    public func modifyDDoSSpeedLimitConfig(instanceId: String, dDoSSpeedLimitConfig: DDoSSpeedLimitConfig, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyDDoSSpeedLimitConfigResponse > {
        self.modifyDDoSSpeedLimitConfig(ModifyDDoSSpeedLimitConfigRequest(instanceId: instanceId, dDoSSpeedLimitConfig: dDoSSpeedLimitConfig), logger: logger, on: eventLoop)
    }
    
    /// 修改DDoS防护的访问限速配置
    @inlinable
    public func modifyDDoSSpeedLimitConfig(instanceId: String, dDoSSpeedLimitConfig: DDoSSpeedLimitConfig, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDDoSSpeedLimitConfigResponse {
        try await self.modifyDDoSSpeedLimitConfig(ModifyDDoSSpeedLimitConfigRequest(instanceId: instanceId, dDoSSpeedLimitConfig: dDoSSpeedLimitConfig), logger: logger, on: eventLoop)
    }
}
