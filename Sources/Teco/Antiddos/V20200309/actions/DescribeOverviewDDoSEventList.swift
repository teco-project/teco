//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Antiddos {
    /// DescribeOverviewDDoSEventList请求参数结构体
    public struct DescribeOverviewDDoSEventListRequest: TCPaginatedRequest {
        /// 起始时间
        public let startTime: String

        /// 结束时间
        public let endTime: String

        /// 可选按攻击状态过滤，start：攻击中；end：攻击结束
        public let attackStatus: String?

        /// 偏移量
        public let offset: UInt64?

        /// 记录条数
        public let limit: UInt64?

        public init(startTime: String, endTime: String, attackStatus: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.attackStatus = attackStatus
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case attackStatus = "AttackStatus"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeOverviewDDoSEventListResponse) -> DescribeOverviewDDoSEventListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeOverviewDDoSEventListRequest(startTime: self.startTime, endTime: self.endTime, attackStatus: self.attackStatus, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeOverviewDDoSEventList返回参数结构体
    public struct DescribeOverviewDDoSEventListResponse: TCPaginatedResponse {
        /// 记录总数
        public let total: UInt64

        /// 事件列表
        public let eventList: [OverviewDDoSEvent]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case eventList = "EventList"
            case requestId = "RequestId"
        }

        /// Extract the total count from the paginated response.
        public func getItems() -> [OverviewDDoSEvent] {
            self.eventList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 获取防护概览的ddos攻击事件
    @inlinable
    public func describeOverviewDDoSEventList(_ input: DescribeOverviewDDoSEventListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOverviewDDoSEventListResponse> {
        self.client.execute(action: "DescribeOverviewDDoSEventList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取防护概览的ddos攻击事件
    @inlinable
    public func describeOverviewDDoSEventList(_ input: DescribeOverviewDDoSEventListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOverviewDDoSEventListResponse {
        try await self.client.execute(action: "DescribeOverviewDDoSEventList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取防护概览的ddos攻击事件
    @inlinable
    public func describeOverviewDDoSEventList(startTime: String, endTime: String, attackStatus: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOverviewDDoSEventListResponse> {
        let input = DescribeOverviewDDoSEventListRequest(startTime: startTime, endTime: endTime, attackStatus: attackStatus, offset: offset, limit: limit)
        return self.client.execute(action: "DescribeOverviewDDoSEventList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取防护概览的ddos攻击事件
    @inlinable
    public func describeOverviewDDoSEventList(startTime: String, endTime: String, attackStatus: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOverviewDDoSEventListResponse {
        let input = DescribeOverviewDDoSEventListRequest(startTime: startTime, endTime: endTime, attackStatus: attackStatus, offset: offset, limit: limit)
        return try await self.client.execute(action: "DescribeOverviewDDoSEventList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
