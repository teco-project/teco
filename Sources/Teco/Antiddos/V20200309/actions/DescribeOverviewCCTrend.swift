//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Antiddos {
    /// DescribeOverviewCCTrend请求参数结构体
    public struct DescribeOverviewCCTrendRequest: TCRequest {
        /// 统计粒度，取值[300(5分钟)，3600(小时)，86400(天)]
        public let period: Int64

        /// 统计开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$startTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 统计结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$endTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 指标，取值[inqps(总请求峰值，dropqps(攻击请求峰值))，incount(请求次数), dropcount(攻击次数)]
        public let metricName: String

        /// DDoS防护子产品代号（bgpip表示高防IP；bgp-multip表示共享包；basic表示DDoS基础防护）
        public let business: String?

        /// 资源的IP
        public let ipList: [String]?

        /// 资源实例ID
        public let id: String?

        public init(period: Int64, startTime: Date, endTime: Date, metricName: String, business: String? = nil, ipList: [String]? = nil, id: String? = nil) {
            self.period = period
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.metricName = metricName
            self.business = business
            self.ipList = ipList
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case period = "Period"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case metricName = "MetricName"
            case business = "Business"
            case ipList = "IpList"
            case id = "Id"
        }
    }

    /// DescribeOverviewCCTrend返回参数结构体
    public struct DescribeOverviewCCTrendResponse: TCResponse {
        /// 值个数
        public let count: UInt64

        /// 值数组
        public let data: [UInt64]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case count = "Count"
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取防护概览趋势图
    ///
    /// 获取防护概览总请求峰值(QPS)和攻击请求(QPS)以及总请求次数和攻击请求次数
    @inlinable
    public func describeOverviewCCTrend(_ input: DescribeOverviewCCTrendRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOverviewCCTrendResponse> {
        self.client.execute(action: "DescribeOverviewCCTrend", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取防护概览趋势图
    ///
    /// 获取防护概览总请求峰值(QPS)和攻击请求(QPS)以及总请求次数和攻击请求次数
    @inlinable
    public func describeOverviewCCTrend(_ input: DescribeOverviewCCTrendRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOverviewCCTrendResponse {
        try await self.client.execute(action: "DescribeOverviewCCTrend", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取防护概览趋势图
    ///
    /// 获取防护概览总请求峰值(QPS)和攻击请求(QPS)以及总请求次数和攻击请求次数
    @inlinable
    public func describeOverviewCCTrend(period: Int64, startTime: Date, endTime: Date, metricName: String, business: String? = nil, ipList: [String]? = nil, id: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOverviewCCTrendResponse> {
        self.describeOverviewCCTrend(.init(period: period, startTime: startTime, endTime: endTime, metricName: metricName, business: business, ipList: ipList, id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 获取防护概览趋势图
    ///
    /// 获取防护概览总请求峰值(QPS)和攻击请求(QPS)以及总请求次数和攻击请求次数
    @inlinable
    public func describeOverviewCCTrend(period: Int64, startTime: Date, endTime: Date, metricName: String, business: String? = nil, ipList: [String]? = nil, id: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOverviewCCTrendResponse {
        try await self.describeOverviewCCTrend(.init(period: period, startTime: startTime, endTime: endTime, metricName: metricName, business: business, ipList: ipList, id: id), region: region, logger: logger, on: eventLoop)
    }
}
