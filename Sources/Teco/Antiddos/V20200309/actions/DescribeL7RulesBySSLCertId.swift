//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Antiddos {
    /// 查询与证书ID匹配的七层规则
    ///
    /// 查询与证书ID对于域名匹配的七层规则
    @inlinable
    public func describeL7RulesBySSLCertId(_ input: DescribeL7RulesBySSLCertIdRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeL7RulesBySSLCertIdResponse > {
        self.client.execute(action: "DescribeL7RulesBySSLCertId", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询与证书ID匹配的七层规则
    ///
    /// 查询与证书ID对于域名匹配的七层规则
    @inlinable
    public func describeL7RulesBySSLCertId(_ input: DescribeL7RulesBySSLCertIdRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeL7RulesBySSLCertIdResponse {
        try await self.client.execute(action: "DescribeL7RulesBySSLCertId", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeL7RulesBySSLCertId请求参数结构体
    public struct DescribeL7RulesBySSLCertIdRequest: TCRequestModel {
        /// 域名状态，可取bindable, binded, opened, closed, all，all表示全部状态
        public let status: String
        
        /// 证书ID列表
        public let certIds: [String]
        
        public init (status: String, certIds: [String]) {
            self.status = status
            self.certIds = certIds
        }
        
        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case certIds = "CertIds"
        }
    }
    
    /// DescribeL7RulesBySSLCertId返回参数结构体
    public struct DescribeL7RulesBySSLCertIdResponse: TCResponseModel {
        /// 证书规则集合
        public let certSet: [CertIdInsL7Rules]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case certSet = "CertSet"
            case requestId = "RequestId"
        }
    }
}
