//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// CreateCloudNativeAPIGateway请求参数结构体
    public struct CreateCloudNativeAPIGatewayRequest: TCRequest {
        /// 云原生API网关名字, 最多支持60个字符。
        public let name: String

        /// 云原生API网关类型, 目前只支持kong。
        public let type: String

        /// 云原生API网关版本。参考值：
        /// - 2.4.1
        /// - 2.5.1
        public let gatewayVersion: String

        /// 云原生API网关节点配置。
        public let nodeConfig: CloudNativeAPIGatewayNodeConfig

        /// 云原生API网关vpc配置。
        public let vpcConfig: CloudNativeAPIGatewayVpcConfig

        /// 云原生API网关描述信息, 最多支持120个字符。
        public let description: String?

        /// 标签列表
        public let tags: [InstanceTagInfo]?

        /// 是否开启 CLS 日志。默认值：fasle
        public let enableCls: Bool?

        /// 产品版本。参考值：
        /// - TRIAL：开发版
        /// - STANDARD：标准版 （默认值）
        /// - PROFESSIONAL：专业版
        public let featureVersion: String?

        /// 公网出流量带宽，[1,2048]Mbps
        public let internetMaxBandwidthOut: UInt64?

        /// 实例实际的地域信息，默认值：ap-guangzhou
        public let engineRegion: String?

        /// ingress Class名称
        public let ingressClassName: String?

        /// 付费类型。参考值：
        /// 0：后付费（默认值）
        /// 1：预付费（接口暂不支持创建预付费实例）
        public let tradeType: Int64?

        /// 公网相关配置
        public let internetConfig: InternetConfig?

        public init(name: String, type: String, gatewayVersion: String, nodeConfig: CloudNativeAPIGatewayNodeConfig, vpcConfig: CloudNativeAPIGatewayVpcConfig, description: String? = nil, tags: [InstanceTagInfo]? = nil, enableCls: Bool? = nil, featureVersion: String? = nil, internetMaxBandwidthOut: UInt64? = nil, engineRegion: String? = nil, ingressClassName: String? = nil, tradeType: Int64? = nil, internetConfig: InternetConfig? = nil) {
            self.name = name
            self.type = type
            self.gatewayVersion = gatewayVersion
            self.nodeConfig = nodeConfig
            self.vpcConfig = vpcConfig
            self.description = description
            self.tags = tags
            self.enableCls = enableCls
            self.featureVersion = featureVersion
            self.internetMaxBandwidthOut = internetMaxBandwidthOut
            self.engineRegion = engineRegion
            self.ingressClassName = ingressClassName
            self.tradeType = tradeType
            self.internetConfig = internetConfig
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case gatewayVersion = "GatewayVersion"
            case nodeConfig = "NodeConfig"
            case vpcConfig = "VpcConfig"
            case description = "Description"
            case tags = "Tags"
            case enableCls = "EnableCls"
            case featureVersion = "FeatureVersion"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case engineRegion = "EngineRegion"
            case ingressClassName = "IngressClassName"
            case tradeType = "TradeType"
            case internetConfig = "InternetConfig"
        }
    }

    /// CreateCloudNativeAPIGateway返回参数结构体
    public struct CreateCloudNativeAPIGatewayResponse: TCResponse {
        /// 创建云原生API网关实例响应结果。
        public let result: CreateCloudNativeAPIGatewayResult

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 创建云原生API网关实例
    @inlinable
    public func createCloudNativeAPIGateway(_ input: CreateCloudNativeAPIGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCloudNativeAPIGatewayResponse> {
        self.client.execute(action: "CreateCloudNativeAPIGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建云原生API网关实例
    @inlinable
    public func createCloudNativeAPIGateway(_ input: CreateCloudNativeAPIGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudNativeAPIGatewayResponse {
        try await self.client.execute(action: "CreateCloudNativeAPIGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建云原生API网关实例
    @inlinable
    public func createCloudNativeAPIGateway(name: String, type: String, gatewayVersion: String, nodeConfig: CloudNativeAPIGatewayNodeConfig, vpcConfig: CloudNativeAPIGatewayVpcConfig, description: String? = nil, tags: [InstanceTagInfo]? = nil, enableCls: Bool? = nil, featureVersion: String? = nil, internetMaxBandwidthOut: UInt64? = nil, engineRegion: String? = nil, ingressClassName: String? = nil, tradeType: Int64? = nil, internetConfig: InternetConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCloudNativeAPIGatewayResponse> {
        self.createCloudNativeAPIGateway(.init(name: name, type: type, gatewayVersion: gatewayVersion, nodeConfig: nodeConfig, vpcConfig: vpcConfig, description: description, tags: tags, enableCls: enableCls, featureVersion: featureVersion, internetMaxBandwidthOut: internetMaxBandwidthOut, engineRegion: engineRegion, ingressClassName: ingressClassName, tradeType: tradeType, internetConfig: internetConfig), region: region, logger: logger, on: eventLoop)
    }

    /// 创建云原生API网关实例
    @inlinable
    public func createCloudNativeAPIGateway(name: String, type: String, gatewayVersion: String, nodeConfig: CloudNativeAPIGatewayNodeConfig, vpcConfig: CloudNativeAPIGatewayVpcConfig, description: String? = nil, tags: [InstanceTagInfo]? = nil, enableCls: Bool? = nil, featureVersion: String? = nil, internetMaxBandwidthOut: UInt64? = nil, engineRegion: String? = nil, ingressClassName: String? = nil, tradeType: Int64? = nil, internetConfig: InternetConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudNativeAPIGatewayResponse {
        try await self.createCloudNativeAPIGateway(.init(name: name, type: type, gatewayVersion: gatewayVersion, nodeConfig: nodeConfig, vpcConfig: vpcConfig, description: description, tags: tags, enableCls: enableCls, featureVersion: featureVersion, internetMaxBandwidthOut: internetMaxBandwidthOut, engineRegion: engineRegion, ingressClassName: ingressClassName, tradeType: tradeType, internetConfig: internetConfig), region: region, logger: logger, on: eventLoop)
    }
}
