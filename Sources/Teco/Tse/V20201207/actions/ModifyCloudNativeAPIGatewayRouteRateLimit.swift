//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// ModifyCloudNativeAPIGatewayRouteRateLimit请求参数结构体
    public struct ModifyCloudNativeAPIGatewayRouteRateLimitRequest: TCRequest {
        /// 网关ID
        public let gatewayId: String

        /// 路由id，或路由名称。
        /// 不支持“未命名”
        public let id: String

        /// 限流配置
        public let limitDetail: CloudNativeAPIGatewayRateLimitDetail

        public init(gatewayId: String, id: String, limitDetail: CloudNativeAPIGatewayRateLimitDetail) {
            self.gatewayId = gatewayId
            self.id = id
            self.limitDetail = limitDetail
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case id = "Id"
            case limitDetail = "LimitDetail"
        }
    }

    /// ModifyCloudNativeAPIGatewayRouteRateLimit返回参数结构体
    public struct ModifyCloudNativeAPIGatewayRouteRateLimitResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改云原生网关限流插件(路由)
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGatewayRouteRateLimit(_ input: ModifyCloudNativeAPIGatewayRouteRateLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCloudNativeAPIGatewayRouteRateLimitResponse> {
        self.client.execute(action: "ModifyCloudNativeAPIGatewayRouteRateLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改云原生网关限流插件(路由)
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGatewayRouteRateLimit(_ input: ModifyCloudNativeAPIGatewayRouteRateLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCloudNativeAPIGatewayRouteRateLimitResponse {
        try await self.client.execute(action: "ModifyCloudNativeAPIGatewayRouteRateLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改云原生网关限流插件(路由)
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGatewayRouteRateLimit(gatewayId: String, id: String, limitDetail: CloudNativeAPIGatewayRateLimitDetail, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCloudNativeAPIGatewayRouteRateLimitResponse> {
        self.modifyCloudNativeAPIGatewayRouteRateLimit(.init(gatewayId: gatewayId, id: id, limitDetail: limitDetail), region: region, logger: logger, on: eventLoop)
    }

    /// 修改云原生网关限流插件(路由)
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGatewayRouteRateLimit(gatewayId: String, id: String, limitDetail: CloudNativeAPIGatewayRateLimitDetail, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCloudNativeAPIGatewayRouteRateLimitResponse {
        try await self.modifyCloudNativeAPIGatewayRouteRateLimit(.init(gatewayId: gatewayId, id: id, limitDetail: limitDetail), region: region, logger: logger, on: eventLoop)
    }
}
