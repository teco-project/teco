//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// DescribeCloudNativeAPIGateways请求参数结构体
    public struct DescribeCloudNativeAPIGatewaysRequest: TCPaginatedRequest {
        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 请求过滤参数，支持按照实例名称、ID和标签键值（Name、GatewayId、Tag）筛选
        public let filters: [Filter]?

        public init(limit: Int64? = nil, offset: Int64? = nil, filters: [Filter]? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeCloudNativeAPIGatewaysResponse) -> DescribeCloudNativeAPIGatewaysRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters)
        }
    }

    /// DescribeCloudNativeAPIGateways返回参数结构体
    public struct DescribeCloudNativeAPIGatewaysResponse: TCPaginatedResponse {
        /// 获取云原生API网关实例列表响应结果。
        public let result: ListCloudNativeAPIGatewayResult

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DescribeCloudNativeAPIGatewayResult`` list from the paginated response.
        public func getItems() -> [DescribeCloudNativeAPIGatewayResult] {
            self.result.gatewayList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.result.totalCount
        }
    }

    /// 获取云原生网关实例列表
    ///
    /// 获取云原生API网关实例列表
    @inlinable
    public func describeCloudNativeAPIGateways(_ input: DescribeCloudNativeAPIGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudNativeAPIGatewaysResponse> {
        self.client.execute(action: "DescribeCloudNativeAPIGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取云原生网关实例列表
    ///
    /// 获取云原生API网关实例列表
    @inlinable
    public func describeCloudNativeAPIGateways(_ input: DescribeCloudNativeAPIGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudNativeAPIGatewaysResponse {
        try await self.client.execute(action: "DescribeCloudNativeAPIGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取云原生网关实例列表
    ///
    /// 获取云原生API网关实例列表
    @inlinable
    public func describeCloudNativeAPIGateways(limit: Int64? = nil, offset: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudNativeAPIGatewaysResponse> {
        self.describeCloudNativeAPIGateways(.init(limit: limit, offset: offset, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取云原生网关实例列表
    ///
    /// 获取云原生API网关实例列表
    @inlinable
    public func describeCloudNativeAPIGateways(limit: Int64? = nil, offset: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudNativeAPIGatewaysResponse {
        try await self.describeCloudNativeAPIGateways(.init(limit: limit, offset: offset, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取云原生网关实例列表
    ///
    /// 获取云原生API网关实例列表
    @inlinable
    public func describeCloudNativeAPIGatewaysPaginated(_ input: DescribeCloudNativeAPIGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [DescribeCloudNativeAPIGatewayResult])> {
        self.client.paginate(input: input, region: region, command: self.describeCloudNativeAPIGateways, logger: logger, on: eventLoop)
    }

    /// 获取云原生网关实例列表
    ///
    /// 获取云原生API网关实例列表
    @inlinable @discardableResult
    public func describeCloudNativeAPIGatewaysPaginated(_ input: DescribeCloudNativeAPIGatewaysRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeCloudNativeAPIGatewaysResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeCloudNativeAPIGateways, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取云原生网关实例列表
    ///
    /// 获取云原生API网关实例列表
    ///
    /// - Returns: `AsyncSequence`s of ``DescribeCloudNativeAPIGatewayResult`` and ``DescribeCloudNativeAPIGatewaysResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeCloudNativeAPIGatewaysPaginator(_ input: DescribeCloudNativeAPIGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeCloudNativeAPIGatewaysRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeCloudNativeAPIGateways, logger: logger, on: eventLoop)
    }
}
