//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// CreateCloudNativeAPIGatewayCertificate请求参数结构体
    public struct CreateCloudNativeAPIGatewayCertificateRequest: TCRequest {
        /// 网关ID
        public let gatewayId: String

        /// 绑定的域名
        public let bindDomains: [String]

        /// ssl平台证书 Id
        public let certId: String

        /// 证书名称
        public let name: String?

        /// 证书私钥
        @available(*, deprecated)
        public let key: String? = nil

        /// 证书pem格式
        @available(*, deprecated)
        public let crt: String? = nil

        public init(gatewayId: String, bindDomains: [String], certId: String, name: String? = nil) {
            self.gatewayId = gatewayId
            self.bindDomains = bindDomains
            self.certId = certId
            self.name = name
        }

        @available(*, deprecated, renamed: "init(gatewayId:bindDomains:certId:name:)", message: "'key' and 'crt' are deprecated in 'CreateCloudNativeAPIGatewayCertificateRequest'. Setting these parameters has no effect.")
        public init(gatewayId: String, bindDomains: [String], certId: String, name: String? = nil, key: String? = nil, crt: String? = nil) {
            self.gatewayId = gatewayId
            self.bindDomains = bindDomains
            self.certId = certId
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case bindDomains = "BindDomains"
            case certId = "CertId"
            case name = "Name"
            case key = "Key"
            case crt = "Crt"
        }
    }

    /// CreateCloudNativeAPIGatewayCertificate返回参数结构体
    public struct CreateCloudNativeAPIGatewayCertificateResponse: TCResponse {
        /// 创建证书结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: CertificateInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 创建云原生网关证书
    @inlinable
    public func createCloudNativeAPIGatewayCertificate(_ input: CreateCloudNativeAPIGatewayCertificateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCloudNativeAPIGatewayCertificateResponse> {
        self.client.execute(action: "CreateCloudNativeAPIGatewayCertificate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建云原生网关证书
    @inlinable
    public func createCloudNativeAPIGatewayCertificate(_ input: CreateCloudNativeAPIGatewayCertificateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudNativeAPIGatewayCertificateResponse {
        try await self.client.execute(action: "CreateCloudNativeAPIGatewayCertificate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建云原生网关证书
    @inlinable
    public func createCloudNativeAPIGatewayCertificate(gatewayId: String, bindDomains: [String], certId: String, name: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCloudNativeAPIGatewayCertificateResponse> {
        self.createCloudNativeAPIGatewayCertificate(.init(gatewayId: gatewayId, bindDomains: bindDomains, certId: certId, name: name), region: region, logger: logger, on: eventLoop)
    }

    /// 创建云原生网关证书
    @available(*, deprecated, renamed: "createCloudNativeAPIGatewayCertificate(gatewayId:bindDomains:certId:name:region:logger:on:)", message: "'key' and 'crt' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func createCloudNativeAPIGatewayCertificate(gatewayId: String, bindDomains: [String], certId: String, name: String? = nil, key: String? = nil, crt: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCloudNativeAPIGatewayCertificateResponse> {
        self.createCloudNativeAPIGatewayCertificate(.init(gatewayId: gatewayId, bindDomains: bindDomains, certId: certId, name: name, key: key, crt: crt), region: region, logger: logger, on: eventLoop)
    }

    /// 创建云原生网关证书
    @inlinable
    public func createCloudNativeAPIGatewayCertificate(gatewayId: String, bindDomains: [String], certId: String, name: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudNativeAPIGatewayCertificateResponse {
        try await self.createCloudNativeAPIGatewayCertificate(.init(gatewayId: gatewayId, bindDomains: bindDomains, certId: certId, name: name), region: region, logger: logger, on: eventLoop)
    }

    /// 创建云原生网关证书
    @available(*, deprecated, renamed: "createCloudNativeAPIGatewayCertificate(gatewayId:bindDomains:certId:name:region:logger:on:)", message: "'key' and 'crt' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func createCloudNativeAPIGatewayCertificate(gatewayId: String, bindDomains: [String], certId: String, name: String? = nil, key: String? = nil, crt: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudNativeAPIGatewayCertificateResponse {
        try await self.createCloudNativeAPIGatewayCertificate(.init(gatewayId: gatewayId, bindDomains: bindDomains, certId: certId, name: name, key: key, crt: crt), region: region, logger: logger, on: eventLoop)
    }
}
