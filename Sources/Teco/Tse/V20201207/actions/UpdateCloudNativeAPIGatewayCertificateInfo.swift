//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// UpdateCloudNativeAPIGatewayCertificateInfo请求参数结构体
    public struct UpdateCloudNativeAPIGatewayCertificateInfoRequest: TCRequest {
        /// 网关ID
        public let gatewayId: String

        /// 证书id
        public let id: String

        /// 绑定的域名列表
        public let bindDomains: [String]

        /// 证书名称
        public let name: String?

        public init(gatewayId: String, id: String, bindDomains: [String], name: String? = nil) {
            self.gatewayId = gatewayId
            self.id = id
            self.bindDomains = bindDomains
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case id = "Id"
            case bindDomains = "BindDomains"
            case name = "Name"
        }
    }

    /// UpdateCloudNativeAPIGatewayCertificateInfo返回参数结构体
    public struct UpdateCloudNativeAPIGatewayCertificateInfoResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改云原生网关证书信息
    @inlinable @discardableResult
    public func updateCloudNativeAPIGatewayCertificateInfo(_ input: UpdateCloudNativeAPIGatewayCertificateInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateCloudNativeAPIGatewayCertificateInfoResponse> {
        self.client.execute(action: "UpdateCloudNativeAPIGatewayCertificateInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改云原生网关证书信息
    @inlinable @discardableResult
    public func updateCloudNativeAPIGatewayCertificateInfo(_ input: UpdateCloudNativeAPIGatewayCertificateInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateCloudNativeAPIGatewayCertificateInfoResponse {
        try await self.client.execute(action: "UpdateCloudNativeAPIGatewayCertificateInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改云原生网关证书信息
    @inlinable @discardableResult
    public func updateCloudNativeAPIGatewayCertificateInfo(gatewayId: String, id: String, bindDomains: [String], name: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateCloudNativeAPIGatewayCertificateInfoResponse> {
        self.updateCloudNativeAPIGatewayCertificateInfo(.init(gatewayId: gatewayId, id: id, bindDomains: bindDomains, name: name), region: region, logger: logger, on: eventLoop)
    }

    /// 修改云原生网关证书信息
    @inlinable @discardableResult
    public func updateCloudNativeAPIGatewayCertificateInfo(gatewayId: String, id: String, bindDomains: [String], name: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateCloudNativeAPIGatewayCertificateInfoResponse {
        try await self.updateCloudNativeAPIGatewayCertificateInfo(.init(gatewayId: gatewayId, id: id, bindDomains: bindDomains, name: name), region: region, logger: logger, on: eventLoop)
    }
}
