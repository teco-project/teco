//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// DeleteCloudNativeAPIGatewayServiceRateLimit请求参数结构体
    public struct DeleteCloudNativeAPIGatewayServiceRateLimitRequest: TCRequestModel {
        /// 网关Id
        public let gatewayId: String

        /// 服务名称，或服务ID
        public let name: String

        public init(gatewayId: String, name: String) {
            self.gatewayId = gatewayId
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case name = "Name"
        }
    }

    /// DeleteCloudNativeAPIGatewayServiceRateLimit返回参数结构体
    public struct DeleteCloudNativeAPIGatewayServiceRateLimitResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除云原生网关的限流插件(服务)
    @inlinable @discardableResult
    public func deleteCloudNativeAPIGatewayServiceRateLimit(_ input: DeleteCloudNativeAPIGatewayServiceRateLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCloudNativeAPIGatewayServiceRateLimitResponse> {
        self.client.execute(action: "DeleteCloudNativeAPIGatewayServiceRateLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除云原生网关的限流插件(服务)
    @inlinable @discardableResult
    public func deleteCloudNativeAPIGatewayServiceRateLimit(_ input: DeleteCloudNativeAPIGatewayServiceRateLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCloudNativeAPIGatewayServiceRateLimitResponse {
        try await self.client.execute(action: "DeleteCloudNativeAPIGatewayServiceRateLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除云原生网关的限流插件(服务)
    @inlinable @discardableResult
    public func deleteCloudNativeAPIGatewayServiceRateLimit(gatewayId: String, name: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCloudNativeAPIGatewayServiceRateLimitResponse> {
        self.deleteCloudNativeAPIGatewayServiceRateLimit(.init(gatewayId: gatewayId, name: name), region: region, logger: logger, on: eventLoop)
    }

    /// 删除云原生网关的限流插件(服务)
    @inlinable @discardableResult
    public func deleteCloudNativeAPIGatewayServiceRateLimit(gatewayId: String, name: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCloudNativeAPIGatewayServiceRateLimitResponse {
        try await self.deleteCloudNativeAPIGatewayServiceRateLimit(.init(gatewayId: gatewayId, name: name), region: region, logger: logger, on: eventLoop)
    }
}
