//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// CreateNativeGatewayServerGroup请求参数结构体
    public struct CreateNativeGatewayServerGroupRequest: TCRequest {
        /// 网关实例id。
        /// 只支持后付费实例
        public let gatewayId: String

        /// 网关分组名
        public let name: String

        /// 节点配置
        public let nodeConfig: CloudNativeAPIGatewayNodeConfig

        /// 子网id
        public let subnetId: String

        /// 描述信息
        public let description: String?

        /// 公网带宽信息
        public let internetMaxBandwidthOut: UInt64?

        /// 公网配置。
        public let internetConfig: InternetConfig?

        public init(gatewayId: String, name: String, nodeConfig: CloudNativeAPIGatewayNodeConfig, subnetId: String, description: String? = nil, internetMaxBandwidthOut: UInt64? = nil, internetConfig: InternetConfig? = nil) {
            self.gatewayId = gatewayId
            self.name = name
            self.nodeConfig = nodeConfig
            self.subnetId = subnetId
            self.description = description
            self.internetMaxBandwidthOut = internetMaxBandwidthOut
            self.internetConfig = internetConfig
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case name = "Name"
            case nodeConfig = "NodeConfig"
            case subnetId = "SubnetId"
            case description = "Description"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case internetConfig = "InternetConfig"
        }
    }

    /// CreateNativeGatewayServerGroup返回参数结构体
    public struct CreateNativeGatewayServerGroupResponse: TCResponse {
        /// 网关分组创建信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: CreateCloudNativeAPIGatewayServerGroupResult?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 创建云原生网关引擎分组
    @inlinable
    public func createNativeGatewayServerGroup(_ input: CreateNativeGatewayServerGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNativeGatewayServerGroupResponse> {
        self.client.execute(action: "CreateNativeGatewayServerGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建云原生网关引擎分组
    @inlinable
    public func createNativeGatewayServerGroup(_ input: CreateNativeGatewayServerGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNativeGatewayServerGroupResponse {
        try await self.client.execute(action: "CreateNativeGatewayServerGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建云原生网关引擎分组
    @inlinable
    public func createNativeGatewayServerGroup(gatewayId: String, name: String, nodeConfig: CloudNativeAPIGatewayNodeConfig, subnetId: String, description: String? = nil, internetMaxBandwidthOut: UInt64? = nil, internetConfig: InternetConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNativeGatewayServerGroupResponse> {
        self.createNativeGatewayServerGroup(.init(gatewayId: gatewayId, name: name, nodeConfig: nodeConfig, subnetId: subnetId, description: description, internetMaxBandwidthOut: internetMaxBandwidthOut, internetConfig: internetConfig), region: region, logger: logger, on: eventLoop)
    }

    /// 创建云原生网关引擎分组
    @inlinable
    public func createNativeGatewayServerGroup(gatewayId: String, name: String, nodeConfig: CloudNativeAPIGatewayNodeConfig, subnetId: String, description: String? = nil, internetMaxBandwidthOut: UInt64? = nil, internetConfig: InternetConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNativeGatewayServerGroupResponse {
        try await self.createNativeGatewayServerGroup(.init(gatewayId: gatewayId, name: name, nodeConfig: nodeConfig, subnetId: subnetId, description: description, internetMaxBandwidthOut: internetMaxBandwidthOut, internetConfig: internetConfig), region: region, logger: logger, on: eventLoop)
    }
}
