//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tse {
    /// ModifyCloudNativeAPIGateway请求参数结构体
    public struct ModifyCloudNativeAPIGatewayRequest: TCRequest {
        /// 云原生API网关实例ID。
        public let gatewayId: String

        /// 云原生API网关名字, 最多支持60个字符。
        public let name: String?

        /// 云原生API网关描述信息, 最多支持120个字符。
        public let description: String?

        /// 是否开启 CLS 日志。暂时取值只能是 true，即只能从关闭状态变成开启状态。
        public let enableCls: Bool?

        /// 公网计费模式。可选取值 BANDWIDTH | TRAFFIC ，表示按带宽和按流量计费。
        public let internetPayMode: String?

        public init(gatewayId: String, name: String? = nil, description: String? = nil, enableCls: Bool? = nil, internetPayMode: String? = nil) {
            self.gatewayId = gatewayId
            self.name = name
            self.description = description
            self.enableCls = enableCls
            self.internetPayMode = internetPayMode
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case name = "Name"
            case description = "Description"
            case enableCls = "EnableCls"
            case internetPayMode = "InternetPayMode"
        }
    }

    /// ModifyCloudNativeAPIGateway返回参数结构体
    public struct ModifyCloudNativeAPIGatewayResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改云原生API网关实例基础信息
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGateway(_ input: ModifyCloudNativeAPIGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCloudNativeAPIGatewayResponse> {
        self.client.execute(action: "ModifyCloudNativeAPIGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改云原生API网关实例基础信息
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGateway(_ input: ModifyCloudNativeAPIGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCloudNativeAPIGatewayResponse {
        try await self.client.execute(action: "ModifyCloudNativeAPIGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改云原生API网关实例基础信息
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGateway(gatewayId: String, name: String? = nil, description: String? = nil, enableCls: Bool? = nil, internetPayMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCloudNativeAPIGatewayResponse> {
        self.modifyCloudNativeAPIGateway(.init(gatewayId: gatewayId, name: name, description: description, enableCls: enableCls, internetPayMode: internetPayMode), region: region, logger: logger, on: eventLoop)
    }

    /// 修改云原生API网关实例基础信息
    @inlinable @discardableResult
    public func modifyCloudNativeAPIGateway(gatewayId: String, name: String? = nil, description: String? = nil, enableCls: Bool? = nil, internetPayMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCloudNativeAPIGatewayResponse {
        try await self.modifyCloudNativeAPIGateway(.init(gatewayId: gatewayId, name: name, description: description, enableCls: enableCls, internetPayMode: internetPayMode), region: region, logger: logger, on: eventLoop)
    }
}
