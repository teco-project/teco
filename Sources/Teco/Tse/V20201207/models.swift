//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tse {
    /// Apollo 环境配置参数
    public struct ApolloEnvParam: TCInputModel {
        /// 环境名称
        public let name: String

        /// 环境内引擎的节点规格 ID
        /// -1C2G
        /// -2C4G
        /// 兼容原spec-xxxxxx形式的规格ID
        public let engineResourceSpec: String

        /// 环境内引擎的节点数量
        public let engineNodeNum: Int64

        /// 配置存储空间大小，以GB为单位
        public let storageCapacity: Int64

        /// VPC ID。在 VPC 的子网内分配一个 IP 作为 ConfigServer 的访问地址
        public let vpcId: String

        /// 子网 ID。在 VPC 的子网内分配一个 IP 作为 ConfigServer 的访问地址
        public let subnetId: String

        /// 环境描述
        public let envDesc: String?

        public init(name: String, engineResourceSpec: String, engineNodeNum: Int64, storageCapacity: Int64, vpcId: String, subnetId: String, envDesc: String? = nil) {
            self.name = name
            self.engineResourceSpec = engineResourceSpec
            self.engineNodeNum = engineNodeNum
            self.storageCapacity = storageCapacity
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.envDesc = envDesc
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case engineResourceSpec = "EngineResourceSpec"
            case engineNodeNum = "EngineNodeNum"
            case storageCapacity = "StorageCapacity"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case envDesc = "EnvDesc"
        }
    }

    /// 指标伸缩行为
    public struct AutoScalerBehavior: TCInputModel, TCOutputModel {
        /// 扩容行为配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scaleUp: AutoScalerRules?

        /// 缩容行为配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scaleDown: AutoScalerRules?

        public init(scaleUp: AutoScalerRules? = nil, scaleDown: AutoScalerRules? = nil) {
            self.scaleUp = scaleUp
            self.scaleDown = scaleDown
        }

        enum CodingKeys: String, CodingKey {
            case scaleUp = "ScaleUp"
            case scaleDown = "ScaleDown"
        }
    }

    /// 扩容策略
    public struct AutoScalerPolicy: TCInputModel, TCOutputModel {
        /// 类型，Pods或Percent
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: Int64?

        /// 扩容周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let periodSeconds: Int64?

        public init(type: String? = nil, value: Int64? = nil, periodSeconds: Int64? = nil) {
            self.type = type
            self.value = value
            self.periodSeconds = periodSeconds
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
            case periodSeconds = "PeriodSeconds"
        }
    }

    /// 指标伸缩的规则
    public struct AutoScalerRules: TCInputModel, TCOutputModel {
        /// 稳定窗口时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stabilizationWindowSeconds: Int64?

        /// 选择策略依据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let selectPolicy: String?

        /// 扩容策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policies: [AutoScalerPolicy]?

        public init(stabilizationWindowSeconds: Int64? = nil, selectPolicy: String? = nil, policies: [AutoScalerPolicy]? = nil) {
            self.stabilizationWindowSeconds = stabilizationWindowSeconds
            self.selectPolicy = selectPolicy
            self.policies = policies
        }

        enum CodingKeys: String, CodingKey {
            case stabilizationWindowSeconds = "StabilizationWindowSeconds"
            case selectPolicy = "SelectPolicy"
            case policies = "Policies"
        }
    }

    /// 服务治理引擎绑定的kubernetes信息
    public struct BoundK8SInfo: TCInputModel, TCOutputModel {
        /// 绑定的kubernetes集群ID
        public let boundClusterId: String

        /// 绑定的kubernetes的集群类型，分tke和eks两种
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let boundClusterType: String?

        /// 服务同步模式，all为全量同步，demand为按需同步
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let syncMode: String?

        public init(boundClusterId: String, boundClusterType: String, syncMode: String? = nil) {
            self.boundClusterId = boundClusterId
            self.boundClusterType = boundClusterType
            self.syncMode = syncMode
        }

        enum CodingKeys: String, CodingKey {
            case boundClusterId = "BoundClusterId"
            case boundClusterType = "BoundClusterType"
            case syncMode = "SyncMode"
        }
    }

    /// 证书信息
    public struct CertificateInfo: TCOutputModel {
        /// 唯一id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// 灰度规则列表
    public struct CloudAPIGatewayCanaryRuleList: TCOutputModel {
        /// 灰度规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let canaryRuleList: [CloudNativeAPIGatewayCanaryRule]?

        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        enum CodingKeys: String, CodingKey {
            case canaryRuleList = "CanaryRuleList"
            case totalCount = "TotalCount"
        }
    }

    /// 含百分比流量配置的服务
    public struct CloudNativeAPIGatewayBalancedService: TCInputModel, TCOutputModel {
        /// 服务 ID，作为入参时，必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceID: String?

        /// 服务名称，作为入参时，无意义
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceName: String?

        /// Upstream 名称，作为入参时，无意义
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamName: String?

        /// 百分比，10 即 10%，范围0-100
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let percent: Float?

        public init(serviceID: String? = nil, serviceName: String? = nil, upstreamName: String? = nil, percent: Float? = nil) {
            self.serviceID = serviceID
            self.serviceName = serviceName
            self.upstreamName = upstreamName
            self.percent = percent
        }

        enum CodingKeys: String, CodingKey {
            case serviceID = "ServiceID"
            case serviceName = "ServiceName"
            case upstreamName = "UpstreamName"
            case percent = "Percent"
        }
    }

    /// 灰度规则
    public struct CloudNativeAPIGatewayCanaryRule: TCInputModel, TCOutputModel {
        /// 优先级，值范围为 0 到 100；值越大，优先级越高；不同规则间优先级不可重复
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let priority: Int64?

        /// 是否启用规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enabled: Bool?

        /// 参数匹配条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionList: [CloudNativeAPIGatewayCanaryRuleCondition]?

        /// 服务的流量百分比配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let balancedServiceList: [CloudNativeAPIGatewayBalancedService]?

        /// 归属服务 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceId: String?

        /// 归属服务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceName: String?

        public init(priority: Int64, enabled: Bool, conditionList: [CloudNativeAPIGatewayCanaryRuleCondition]? = nil, balancedServiceList: [CloudNativeAPIGatewayBalancedService]? = nil, serviceId: String? = nil, serviceName: String? = nil) {
            self.priority = priority
            self.enabled = enabled
            self.conditionList = conditionList
            self.balancedServiceList = balancedServiceList
            self.serviceId = serviceId
            self.serviceName = serviceName
        }

        enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case enabled = "Enabled"
            case conditionList = "ConditionList"
            case balancedServiceList = "BalancedServiceList"
            case serviceId = "ServiceId"
            case serviceName = "ServiceName"
        }
    }

    /// 灰度规则中的条件配置
    public struct CloudNativeAPIGatewayCanaryRuleCondition: TCInputModel, TCOutputModel {
        /// 条件类型，支持 path, method, query, header, cookie, body 和 system。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 参数名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 操作符，支持 "le", "eq", "lt", "ne", "ge", "gt", "regex", "exists", "in", "not in",  "prefix" ,"exact", "regex" 等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `operator`: String?

        /// 目标参数值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        /// 分隔符，当 Operator 为 in 或者 not in 时生效。支持值为英文逗号，英文分号，空格，换行符。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delimiter: String?

        /// 全局配置 Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let globalConfigId: String?

        /// 全局配置名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let globalConfigName: String?

        public init(type: String, key: String? = nil, operator: String? = nil, value: String? = nil, delimiter: String? = nil, globalConfigId: String? = nil, globalConfigName: String? = nil) {
            self.type = type
            self.key = key
            self.operator = `operator`
            self.value = value
            self.delimiter = delimiter
            self.globalConfigId = globalConfigId
            self.globalConfigName = globalConfigName
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case key = "Key"
            case `operator` = "Operator"
            case value = "Value"
            case delimiter = "Delimiter"
            case globalConfigId = "GlobalConfigId"
            case globalConfigName = "GlobalConfigName"
        }
    }

    /// 云原生API网关配置信息。
    public struct CloudNativeAPIGatewayConfig: TCOutputModel {
        /// 控制台类型。
        public let consoleType: String

        /// HTTP链接地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpUrl: String?

        /// HTTPS链接地址。
        public let httpsUrl: String

        /// 网络类型, Open|Internal。
        public let netType: String

        /// 管理员用户名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let adminUser: String?

        /// 管理员密码。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let adminPassword: String?

        /// 网络状态, Open|Closed|Updating
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 网络访问策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessControl: NetworkAccessControl?

        /// 内网子网 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 内网VPC ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 负载均衡的描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 负载均衡的规格类型，传 "SLA" 表示性能容量型，返回空为共享型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaType: String?

        /// clb vip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 带宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetMaxBandwidthOut: UInt64?

        /// 是否多可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let multiZoneFlag: Bool?

        /// 主可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterZoneId: String?

        /// 备可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZoneId: String?

        /// 主可用区名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterZoneName: String?

        /// 备可用区名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZoneName: String?

        /// 网络 id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkId: String?

        enum CodingKeys: String, CodingKey {
            case consoleType = "ConsoleType"
            case httpUrl = "HttpUrl"
            case httpsUrl = "HttpsUrl"
            case netType = "NetType"
            case adminUser = "AdminUser"
            case adminPassword = "AdminPassword"
            case status = "Status"
            case accessControl = "AccessControl"
            case subnetId = "SubnetId"
            case vpcId = "VpcId"
            case description = "Description"
            case slaType = "SlaType"
            case vip = "Vip"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case multiZoneFlag = "MultiZoneFlag"
            case masterZoneId = "MasterZoneId"
            case slaveZoneId = "SlaveZoneId"
            case masterZoneName = "MasterZoneName"
            case slaveZoneName = "SlaveZoneName"
            case networkId = "NetworkId"
        }
    }

    /// 云原生API网关节点信息。
    public struct CloudNativeAPIGatewayNode: TCOutputModel {
        /// 云原生网关节点 id
        public let nodeId: String

        /// 节点 ip
        public let nodeIp: String

        /// Zone id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: String?

        /// Zone
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 分组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?

        /// 分组名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case nodeIp = "NodeIp"
            case zoneId = "ZoneId"
            case zone = "Zone"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case status = "Status"
        }
    }

    /// 云原生API网关节点配置。
    public struct CloudNativeAPIGatewayNodeConfig: TCInputModel, TCOutputModel {
        /// 节点配置, 1c2g|2c4g|4c8g|8c16g。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specification: String?

        /// 节点数量，2-9。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let number: Int64?

        public init(specification: String? = nil, number: Int64? = nil) {
            self.specification = specification
            self.number = number
        }

        enum CodingKeys: String, CodingKey {
            case specification = "Specification"
            case number = "Number"
        }
    }

    /// 云原生网关Tse 限流插件配置
    public struct CloudNativeAPIGatewayRateLimitDetail: TCInputModel, TCOutputModel {
        /// 插件启用状态
        public let enabled: Bool

        /// qps阈值
        public let qpsThresholds: [QpsThreshold]

        /// 限流依据
        /// ip service consumer credential path header
        public let limitBy: String

        /// 响应策略
        /// url请求转发
        /// text 响应配置
        /// default 直接返回
        public let responseType: String

        /// 是否隐藏限流客户端响应头
        public let hideClientHeaders: Bool

        /// 是否开启请求排队
        public let isDelay: Bool

        /// 需要进行流量控制的请求路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let path: String?

        /// 需要进行流量控制的请求头Key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let header: String?

        /// 外部redis配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let externalRedis: ExternalRedis?

        /// 计数器策略
        /// local 单机
        /// redis  默认redis
        /// external_redis 外部redis
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policy: String?

        /// 响应配置，响应策略为text
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rateLimitResponse: RateLimitResponse?

        /// 请求转发地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rateLimitResponseUrl: String?

        /// 排队时间
        public let lineUpTime: Int64?

        public init(enabled: Bool, qpsThresholds: [QpsThreshold], limitBy: String, responseType: String, hideClientHeaders: Bool, isDelay: Bool, path: String? = nil, header: String? = nil, externalRedis: ExternalRedis? = nil, policy: String? = nil, rateLimitResponse: RateLimitResponse? = nil, rateLimitResponseUrl: String? = nil, lineUpTime: Int64? = nil) {
            self.enabled = enabled
            self.qpsThresholds = qpsThresholds
            self.limitBy = limitBy
            self.responseType = responseType
            self.hideClientHeaders = hideClientHeaders
            self.isDelay = isDelay
            self.path = path
            self.header = header
            self.externalRedis = externalRedis
            self.policy = policy
            self.rateLimitResponse = rateLimitResponse
            self.rateLimitResponseUrl = rateLimitResponseUrl
            self.lineUpTime = lineUpTime
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case qpsThresholds = "QpsThresholds"
            case limitBy = "LimitBy"
            case responseType = "ResponseType"
            case hideClientHeaders = "HideClientHeaders"
            case isDelay = "IsDelay"
            case path = "Path"
            case header = "Header"
            case externalRedis = "ExternalRedis"
            case policy = "Policy"
            case rateLimitResponse = "RateLimitResponse"
            case rateLimitResponseUrl = "RateLimitResponseUrl"
            case lineUpTime = "LineUpTime"
        }
    }

    /// 网关实例策略
    public struct CloudNativeAPIGatewayStrategy: TCOutputModel {
        /// 策略ID
        public let strategyId: String

        /// 策略名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategyName: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifyTime: String?

        /// 策略描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 弹性伸缩配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let config: CloudNativeAPIGatewayStrategyAutoScalerConfig?

        /// 网关实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gatewayId: String?

        /// 定时伸缩配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cronConfig: CloudNativeAPIGatewayStrategyCronScalerConfig?

        /// 最大节点数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let maxReplicas: UInt64?

        enum CodingKeys: String, CodingKey {
            case strategyId = "StrategyId"
            case strategyName = "StrategyName"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
            case description = "Description"
            case config = "Config"
            case gatewayId = "GatewayId"
            case cronConfig = "CronConfig"
            case maxReplicas = "MaxReplicas"
        }
    }

    /// 弹性伸缩策略
    public struct CloudNativeAPIGatewayStrategyAutoScalerConfig: TCInputModel, TCOutputModel {
        /// 最大副本数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxReplicas: Int64?

        /// 指标列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metrics: [CloudNativeAPIGatewayStrategyAutoScalerConfigMetric]?

        /// 是否开启指标伸缩
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enabled: Bool?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let createTime: String? = nil

        /// 修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let modifyTime: String? = nil

        /// 弹性策略ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let strategyId: String? = nil

        /// 指标配置ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let autoScalerId: String? = nil

        /// 指标伸缩行为配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let behavior: AutoScalerBehavior?

        public init(maxReplicas: Int64? = nil, metrics: [CloudNativeAPIGatewayStrategyAutoScalerConfigMetric]? = nil, enabled: Bool? = nil, behavior: AutoScalerBehavior? = nil) {
            self.maxReplicas = maxReplicas
            self.metrics = metrics
            self.enabled = enabled
            self.behavior = behavior
        }

        @available(*, deprecated, renamed: "init(maxReplicas:metrics:enabled:behavior:)", message: "'createTime', 'modifyTime', 'strategyId' and 'autoScalerId' are deprecated in 'CloudNativeAPIGatewayStrategyAutoScalerConfig'. Setting these parameters has no effect.")
        public init(maxReplicas: Int64? = nil, metrics: [CloudNativeAPIGatewayStrategyAutoScalerConfigMetric]? = nil, enabled: Bool? = nil, createTime: String? = nil, modifyTime: String? = nil, strategyId: String? = nil, autoScalerId: String? = nil, behavior: AutoScalerBehavior? = nil) {
            self.maxReplicas = maxReplicas
            self.metrics = metrics
            self.enabled = enabled
            self.behavior = behavior
        }

        enum CodingKeys: String, CodingKey {
            case maxReplicas = "MaxReplicas"
            case metrics = "Metrics"
            case enabled = "Enabled"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
            case strategyId = "StrategyId"
            case autoScalerId = "AutoScalerId"
            case behavior = "Behavior"
        }
    }

    /// 弹性伸缩配置指标
    public struct CloudNativeAPIGatewayStrategyAutoScalerConfigMetric: TCInputModel, TCOutputModel {
        /// 指标类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 指标资源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceName: String?

        /// 指标目标类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetType: String?

        /// 指标目标值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetValue: Int64?

        public init(type: String? = nil, resourceName: String? = nil, targetType: String? = nil, targetValue: Int64? = nil) {
            self.type = type
            self.resourceName = resourceName
            self.targetType = targetType
            self.targetValue = targetValue
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case resourceName = "ResourceName"
            case targetType = "TargetType"
            case targetValue = "TargetValue"
        }
    }

    /// 定时伸缩策略配置
    public struct CloudNativeAPIGatewayStrategyCronScalerConfig: TCInputModel, TCOutputModel {
        /// 是否开启定时伸缩
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enabled: Bool?

        /// 定时伸缩配置参数列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let params: [CloudNativeAPIGatewayStrategyCronScalerConfigParam]?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let createTime: String? = nil

        /// 修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let modifyTime: String? = nil

        /// 弹性策略ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let strategyId: String? = nil

        public init(enabled: Bool? = nil, params: [CloudNativeAPIGatewayStrategyCronScalerConfigParam]? = nil) {
            self.enabled = enabled
            self.params = params
        }

        @available(*, deprecated, renamed: "init(enabled:params:)", message: "'createTime', 'modifyTime' and 'strategyId' are deprecated in 'CloudNativeAPIGatewayStrategyCronScalerConfig'. Setting these parameters has no effect.")
        public init(enabled: Bool? = nil, params: [CloudNativeAPIGatewayStrategyCronScalerConfigParam]? = nil, createTime: String? = nil, modifyTime: String? = nil, strategyId: String? = nil) {
            self.enabled = enabled
            self.params = params
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case params = "Params"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
            case strategyId = "StrategyId"
        }
    }

    /// 定时伸缩配置参数
    public struct CloudNativeAPIGatewayStrategyCronScalerConfigParam: TCInputModel, TCOutputModel {
        /// 定时伸缩周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let period: String?

        /// 定时伸缩开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startAt: String?

        /// 定时伸缩目标节点数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetReplicas: Int64?

        /// 定时伸缩cron表达式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let crontab: String?

        public init(period: String? = nil, startAt: String? = nil, targetReplicas: Int64? = nil, crontab: String? = nil) {
            self.period = period
            self.startAt = startAt
            self.targetReplicas = targetReplicas
            self.crontab = crontab
        }

        enum CodingKeys: String, CodingKey {
            case period = "Period"
            case startAt = "StartAt"
            case targetReplicas = "TargetReplicas"
            case crontab = "Crontab"
        }
    }

    /// 云原生API网关vpc配置。
    public struct CloudNativeAPIGatewayVpcConfig: TCInputModel, TCOutputModel {
        /// 私有网络ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        public init(vpcId: String? = nil, subnetId: String? = nil) {
            self.vpcId = vpcId
            self.subnetId = subnetId
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
        }
    }

    /// 创建云原生API网关响应结果。
    public struct CreateCloudNativeAPIGatewayResult: TCOutputModel {
        /// 云原生API网关ID。
        public let gatewayId: String

        /// 云原生网关状态。
        public let status: String

        /// 任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case status = "Status"
            case taskId = "TaskId"
        }
    }

    /// 创建网关分组信息
    public struct CreateCloudNativeAPIGatewayServerGroupResult: TCOutputModel {
        /// 网关实例id
        public let gatewayId: String

        /// 分组id
        public let groupId: String

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case groupId = "GroupId"
            case status = "Status"
            case taskId = "TaskId"
        }
    }

    /// 删除云原生API网关响应结果。
    public struct DeleteCloudNativeAPIGatewayResult: TCOutputModel {
        /// 云原生网关ID。
        public let gatewayId: String

        /// 云原生网关状态。
        public let status: String

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case status = "Status"
        }
    }

    /// 删除网关实例结果
    public struct DeleteNativeGatewayServerGroupResult: TCOutputModel {
        /// 网关实例id
        public let gatewayId: String

        /// 网关分组id
        public let groupId: String

        /// 删除状态
        public let status: String

        /// 任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case groupId = "GroupId"
            case status = "Status"
            case taskId = "TaskId"
        }
    }

    /// 获取云原生API网关实例网络配置结果。
    public struct DescribeCloudNativeAPIGatewayConfigResult: TCOutputModel {
        /// 网关实例ID。
        public let gatewayId: String

        /// 分组网络配置列表。
        public let configList: [CloudNativeAPIGatewayConfig]

        /// 分组子网信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupSubnetId: String?

        /// 分组VPC信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupVpcId: String?

        /// 分组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case configList = "ConfigList"
            case groupSubnetId = "GroupSubnetId"
            case groupVpcId = "GroupVpcId"
            case groupId = "GroupId"
        }
    }

    /// 获取网关节点信息
    public struct DescribeCloudNativeAPIGatewayNodesResult: TCOutputModel {
        /// 获取云原生API网关节点列表响应结果。
        public let totalCount: Int64

        /// 云原生API网关节点列表。
        public let nodeList: [CloudNativeAPIGatewayNode]

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case nodeList = "NodeList"
        }
    }

    /// 获取云原生API网关基础信息响应结果。
    public struct DescribeCloudNativeAPIGatewayResult: TCOutputModel {
        /// 云原生API网关ID。
        public let gatewayId: String

        /// 云原生API网关状态。
        public let status: String

        /// 云原生API网关名。
        public let name: String

        /// 云原生API网关类型。
        public let type: String

        /// 实例版本：
        /// - 2.4.1
        /// - 2.5.1
        public let gatewayVersion: String

        /// 云原生API网关节点信息。
        public let nodeConfig: CloudNativeAPIGatewayNodeConfig

        /// 云原生API网关vpc配置。
        public let vpcConfig: CloudNativeAPIGatewayVpcConfig

        /// 云原生API网关描述。
        public let description: String

        /// 云原生API网关创建时间。
        public let createTime: String

        /// 实例的标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [InstanceTagInfo]?

        /// 是否开启 cls 日志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableCls: Bool?

        /// 付费模式，0表示后付费，1预付费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tradeType: Int64?

        /// 实例版本，当前支持开发版、标准版、专业版【TRIAL、STANDARD、PROFESSIONAL】
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let featureVersion: String?

        /// 公网出流量带宽，[1,2048]Mbps
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetMaxBandwidthOut: UInt64?

        /// 自动续费标记，0表示默认状态(用户未设置，即初始状态)；
        /// 1表示自动续费，2表示明确不自动续费(用户设置)，若业务无续费概念或无需自动续费，需要设置为0
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenewFlag: Int64?

        /// 到期时间，预付费时使用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let curDeadline: String?

        /// 隔离时间，实例隔离时使用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolateTime: String?

        /// 是否开启客户端公网。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableInternet: Bool?

        /// 实例实际的地域信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineRegion: String?

        /// Ingress class名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ingressClassName: String?

        /// 公网计费方式。可选取值 BANDWIDTH | TRAFFIC ，表示按带宽和按流量计费。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetPayMode: String?

        /// 云原生API网关小版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gatewayMinorVersion: String?

        /// 实例监听的端口信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instancePort: InstancePort?

        /// 公网CLB默认类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerType: String?

        /// 公网IP地址列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpAddresses: [String]?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case status = "Status"
            case name = "Name"
            case type = "Type"
            case gatewayVersion = "GatewayVersion"
            case nodeConfig = "NodeConfig"
            case vpcConfig = "VpcConfig"
            case description = "Description"
            case createTime = "CreateTime"
            case tags = "Tags"
            case enableCls = "EnableCls"
            case tradeType = "TradeType"
            case featureVersion = "FeatureVersion"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case autoRenewFlag = "AutoRenewFlag"
            case curDeadline = "CurDeadline"
            case isolateTime = "IsolateTime"
            case enableInternet = "EnableInternet"
            case engineRegion = "EngineRegion"
            case ingressClassName = "IngressClassName"
            case internetPayMode = "InternetPayMode"
            case gatewayMinorVersion = "GatewayMinorVersion"
            case instancePort = "InstancePort"
            case loadBalancerType = "LoadBalancerType"
            case publicIpAddresses = "PublicIpAddresses"
        }
    }

    /// 获取云原生API网关实例协议端口列表响应结果
    public struct DescribeGatewayInstancePortResult: TCOutputModel {
        /// 云原生API网关ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gatewayId: String?

        /// 网关实例协议端口列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gatewayInstancePortList: [GatewayInstanceSchemeAndPorts]?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case gatewayInstancePortList = "GatewayInstancePortList"
        }
    }

    /// 实例地域信息描述
    public struct DescribeInstanceRegionInfo: TCOutputModel {
        /// 引擎部署地域信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineRegion: String?

        /// 引擎在该地域的副本数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replica: Int64?

        /// 引擎在该地域的规格id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specId: String?

        /// 内网的网络信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intranetVpcInfos: [VpcInfo]?

        /// 是否开公网
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableClientInternet: Bool?

        enum CodingKeys: String, CodingKey {
            case engineRegion = "EngineRegion"
            case replica = "Replica"
            case specId = "SpecId"
            case intranetVpcInfos = "IntranetVpcInfos"
            case enableClientInternet = "EnableClientInternet"
        }
    }

    /// 引擎的初始管理帐号
    public struct EngineAdmin: TCInputModel, TCOutputModel {
        /// 控制台初始用户名
        public let name: String?

        /// 控制台初始密码
        public let password: String?

        /// 引擎接口的管理员 Token
        public let token: String?

        public init(name: String? = nil, password: String? = nil, token: String? = nil) {
            self.name = name
            self.password = password
            self.token = token
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case password = "Password"
            case token = "Token"
        }
    }

    /// 引擎地域配置详情
    public struct EngineRegionInfo: TCInputModel {
        /// 引擎节点所在地域
        public let engineRegion: String?

        /// 此地域节点分配数量
        public let replica: Int64?

        /// 集群网络信息
        public let vpcInfos: [VpcInfo]?

        public init(engineRegion: String, replica: Int64, vpcInfos: [VpcInfo]) {
            self.engineRegion = engineRegion
            self.replica = replica
            self.vpcInfos = vpcInfos
        }

        enum CodingKeys: String, CodingKey {
            case engineRegion = "EngineRegion"
            case replica = "Replica"
            case vpcInfos = "VpcInfos"
        }
    }

    /// 多环境网络信息
    public struct EnvAddressInfo: TCOutputModel {
        /// 环境名
        public let envName: String

        /// 是否开启config公网
        public let enableConfigInternet: Bool

        /// config公网ip
        public let configInternetServiceIp: String

        /// config内网访问地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configIntranetAddress: String?

        /// 是否开启config内网clb
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableConfigIntranet: Bool?

        /// 客户端公网带宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetBandWidth: Int64?

        enum CodingKeys: String, CodingKey {
            case envName = "EnvName"
            case enableConfigInternet = "EnableConfigInternet"
            case configInternetServiceIp = "ConfigInternetServiceIp"
            case configIntranetAddress = "ConfigIntranetAddress"
            case enableConfigIntranet = "EnableConfigIntranet"
            case internetBandWidth = "InternetBandWidth"
        }
    }

    /// 环境具体信息
    public struct EnvInfo: TCInputModel, TCOutputModel {
        /// 环境名称
        public let envName: String

        /// 环境对应的网络信息
        public let vpcInfos: [VpcInfo]

        /// 云硬盘容量
        public let storageCapacity: Int64

        /// 运行状态
        public let status: String?

        /// Admin service 访问地址
        public let adminServiceIp: String?

        /// Config service访问地址
        public let configServiceIp: String?

        /// 是否开启config-server公网
        public let enableConfigInternet: Bool?

        /// config-server公网访问地址
        public let configInternetServiceIp: String?

        /// 规格ID
        public let specId: String?

        /// 环境的节点数
        public let envReplica: Int64?

        /// 环境运行的节点数
        public let runningCount: Int64?

        /// 环境别名
        public let aliasEnvName: String?

        /// 环境描述
        public let envDesc: String?

        /// 客户端带宽
        public let clientBandWidth: UInt64?

        /// 客户端内网开关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableConfigIntranet: Bool?

        public init(envName: String, vpcInfos: [VpcInfo], storageCapacity: Int64, status: String? = nil, adminServiceIp: String? = nil, configServiceIp: String? = nil, enableConfigInternet: Bool? = nil, configInternetServiceIp: String? = nil, specId: String? = nil, envReplica: Int64? = nil, runningCount: Int64? = nil, aliasEnvName: String? = nil, envDesc: String? = nil, clientBandWidth: UInt64? = nil, enableConfigIntranet: Bool? = nil) {
            self.envName = envName
            self.vpcInfos = vpcInfos
            self.storageCapacity = storageCapacity
            self.status = status
            self.adminServiceIp = adminServiceIp
            self.configServiceIp = configServiceIp
            self.enableConfigInternet = enableConfigInternet
            self.configInternetServiceIp = configInternetServiceIp
            self.specId = specId
            self.envReplica = envReplica
            self.runningCount = runningCount
            self.aliasEnvName = aliasEnvName
            self.envDesc = envDesc
            self.clientBandWidth = clientBandWidth
            self.enableConfigIntranet = enableConfigIntranet
        }

        enum CodingKeys: String, CodingKey {
            case envName = "EnvName"
            case vpcInfos = "VpcInfos"
            case storageCapacity = "StorageCapacity"
            case status = "Status"
            case adminServiceIp = "AdminServiceIp"
            case configServiceIp = "ConfigServiceIp"
            case enableConfigInternet = "EnableConfigInternet"
            case configInternetServiceIp = "ConfigInternetServiceIp"
            case specId = "SpecId"
            case envReplica = "EnvReplica"
            case runningCount = "RunningCount"
            case aliasEnvName = "AliasEnvName"
            case envDesc = "EnvDesc"
            case clientBandWidth = "ClientBandWidth"
            case enableConfigIntranet = "EnableConfigIntranet"
        }
    }

    /// 云原生网关限流插件外部redis配置
    public struct ExternalRedis: TCInputModel, TCOutputModel {
        /// redis ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let redisHost: String?

        /// redis密码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let redisPassword: String?

        /// redis端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let redisPort: Int64?

        /// 超时时间  ms
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let redisTimeout: Int64?

        public init(redisHost: String, redisPassword: String, redisPort: Int64, redisTimeout: Int64) {
            self.redisHost = redisHost
            self.redisPassword = redisPassword
            self.redisPort = redisPort
            self.redisTimeout = redisTimeout
        }

        enum CodingKeys: String, CodingKey {
            case redisHost = "RedisHost"
            case redisPassword = "RedisPassword"
            case redisPort = "RedisPort"
            case redisTimeout = "RedisTimeout"
        }
    }

    /// 查询过滤通用对象
    public struct Filter: TCInputModel {
        /// 过滤参数名
        public let name: String

        /// 过滤参数值
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 网关实例协议端口列表
    public struct GatewayInstanceSchemeAndPorts: TCOutputModel {
        /// 端口协议，可选HTTP、HTTPS、TCP和UDP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scheme: String?

        /// 端口列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let portList: [UInt64]?

        enum CodingKeys: String, CodingKey {
            case scheme = "Scheme"
            case portList = "PortList"
        }
    }

    /// 实例监听端口信息
    public struct InstancePort: TCOutputModel {
        /// 监听的 http 端口范围。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpPort: String?

        /// 监听的 https 端口范围。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpsPort: String?

        enum CodingKeys: String, CodingKey {
            case httpPort = "HttpPort"
            case httpsPort = "HttpsPort"
        }
    }

    /// 引擎实例的标签信息
    public struct InstanceTagInfo: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String?

        /// 标签值
        public let tagValue: String?

        public init(tagKey: String? = nil, tagValue: String? = nil) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 公网负载均衡配置
    public struct InternetConfig: TCInputModel {
        /// 公网地址版本，可选："IPV4" | "IPV6" 。不填默认 IPV4 。
        public let internetAddressVersion: String?

        /// 公网付费类型，当前仅可选："BANDWIDTH"。不填默认为 "BANDWIDTH"
        public let internetPayMode: String?

        /// 公网带宽。
        public let internetMaxBandwidthOut: UInt64?

        /// 负载均衡描述
        public let description: String?

        /// 负载均衡的规格类型，传 "SLA" 表示性能容量型，不传为共享型。
        public let slaType: String?

        /// 负载均衡是否多可用区
        public let multiZoneFlag: Bool?

        /// 主可用区
        public let masterZoneId: String?

        /// 备可用区
        public let slaveZoneId: String?

        public init(internetAddressVersion: String? = nil, internetPayMode: String? = nil, internetMaxBandwidthOut: UInt64? = nil, description: String? = nil, slaType: String? = nil, multiZoneFlag: Bool? = nil, masterZoneId: String? = nil, slaveZoneId: String? = nil) {
            self.internetAddressVersion = internetAddressVersion
            self.internetPayMode = internetPayMode
            self.internetMaxBandwidthOut = internetMaxBandwidthOut
            self.description = description
            self.slaType = slaType
            self.multiZoneFlag = multiZoneFlag
            self.masterZoneId = masterZoneId
            self.slaveZoneId = slaveZoneId
        }

        enum CodingKeys: String, CodingKey {
            case internetAddressVersion = "InternetAddressVersion"
            case internetPayMode = "InternetPayMode"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case description = "Description"
            case slaType = "SlaType"
            case multiZoneFlag = "MultiZoneFlag"
            case masterZoneId = "MasterZoneId"
            case slaveZoneId = "SlaveZoneId"
        }
    }

    /// 键值对
    public struct KVMapping: TCInputModel, TCOutputModel {
        /// key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// value
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 键值对
    public struct KVPair: TCOutputModel {
        /// 键
        public let key: String

        /// 值
        public let value: String

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 云原生网关证书
    public struct KongCertificate: TCOutputModel {
        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cert: KongCertificatesPreview?

        enum CodingKeys: String, CodingKey {
            case cert = "Cert"
        }
    }

    /// kong证书列表
    public struct KongCertificatesList: TCOutputModel {
        /// 证书列表总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificatesList: [KongCertificatesPreview]?

        /// 证书列表总页数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let pages: Int64?

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case certificatesList = "CertificatesList"
            case pages = "Pages"
        }
    }

    /// 云原生网关证书预览信息
    public struct KongCertificatesPreview: TCOutputModel {
        /// 证书名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 绑定的域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bindDomains: [String]?

        /// 证书状态：expired(已过期)
        ///                    active(生效中)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 证书pem格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let crt: String?

        /// 证书私钥
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 证书过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 证书上传时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 证书签发时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let issueTime: String?

        /// 证书来源：native(kong自定义证书)
        ///                     ssl(ssl平台证书)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certSource: String?

        /// ssl平台证书Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certId: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
            case bindDomains = "BindDomains"
            case status = "Status"
            case crt = "Crt"
            case key = "Key"
            case expireTime = "ExpireTime"
            case createTime = "CreateTime"
            case issueTime = "IssueTime"
            case certSource = "CertSource"
            case certId = "CertId"
        }
    }

    /// 云原生网关路由信息
    public struct KongRoutePreview: TCInputModel, TCOutputModel {
        /// 服务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 服务名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let methods: [String]?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paths: [String]?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hosts: [String]?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let protocols: [String]?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let preserveHost: Bool?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpsRedirectStatusCode: Int64?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stripPath: Bool?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdTime: String?

        /// 是否开启了强制HTTPS
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let forceHttps: Bool? = nil

        /// 服务名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceName: String?

        /// 服务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceID: String?

        /// 目的端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let destinationPorts: [UInt64]?

        /// 路由的Headers
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let headers: [KVMapping]?

        public init(id: String, name: String? = nil, methods: [String]? = nil, paths: [String]? = nil, hosts: [String]? = nil, protocols: [String]? = nil, preserveHost: Bool? = nil, httpsRedirectStatusCode: Int64? = nil, stripPath: Bool? = nil, createdTime: String? = nil, serviceName: String? = nil, serviceID: String? = nil, destinationPorts: [UInt64]? = nil, headers: [KVMapping]? = nil) {
            self.id = id
            self.name = name
            self.methods = methods
            self.paths = paths
            self.hosts = hosts
            self.protocols = protocols
            self.preserveHost = preserveHost
            self.httpsRedirectStatusCode = httpsRedirectStatusCode
            self.stripPath = stripPath
            self.createdTime = createdTime
            self.serviceName = serviceName
            self.serviceID = serviceID
            self.destinationPorts = destinationPorts
            self.headers = headers
        }

        @available(*, deprecated, renamed: "init(id:name:methods:paths:hosts:protocols:preserveHost:httpsRedirectStatusCode:stripPath:createdTime:serviceName:serviceID:destinationPorts:headers:)", message: "'forceHttps' is deprecated in 'KongRoutePreview'. Setting this parameter has no effect.")
        public init(id: String, name: String? = nil, methods: [String]? = nil, paths: [String]? = nil, hosts: [String]? = nil, protocols: [String]? = nil, preserveHost: Bool? = nil, httpsRedirectStatusCode: Int64? = nil, stripPath: Bool? = nil, createdTime: String? = nil, forceHttps: Bool? = nil, serviceName: String? = nil, serviceID: String? = nil, destinationPorts: [UInt64]? = nil, headers: [KVMapping]? = nil) {
            self.id = id
            self.name = name
            self.methods = methods
            self.paths = paths
            self.hosts = hosts
            self.protocols = protocols
            self.preserveHost = preserveHost
            self.httpsRedirectStatusCode = httpsRedirectStatusCode
            self.stripPath = stripPath
            self.createdTime = createdTime
            self.serviceName = serviceName
            self.serviceID = serviceID
            self.destinationPorts = destinationPorts
            self.headers = headers
        }

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case name = "Name"
            case methods = "Methods"
            case paths = "Paths"
            case hosts = "Hosts"
            case protocols = "Protocols"
            case preserveHost = "PreserveHost"
            case httpsRedirectStatusCode = "HttpsRedirectStatusCode"
            case stripPath = "StripPath"
            case createdTime = "CreatedTime"
            case forceHttps = "ForceHttps"
            case serviceName = "ServiceName"
            case serviceID = "ServiceID"
            case destinationPorts = "DestinationPorts"
            case headers = "Headers"
        }
    }

    /// 云原生网关服务详细信息
    public struct KongServiceDetail: TCInputModel, TCOutputModel {
        /// 服务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 服务名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 后端协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 后端路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let path: String?

        /// 后端延时，单位ms
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeout: Int64?

        /// 重试次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let retries: Int64?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// 后端配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamInfo: KongUpstreamInfo?

        /// 后端类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamType: String?

        /// 是否可编辑
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let editable: Bool?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdTime: String?

        public init(id: String, name: String? = nil, protocol: String? = nil, path: String? = nil, timeout: Int64? = nil, retries: Int64? = nil, tags: [String]? = nil, upstreamInfo: KongUpstreamInfo? = nil, upstreamType: String? = nil, editable: Bool? = nil, createdTime: String? = nil) {
            self.id = id
            self.name = name
            self.protocol = `protocol`
            self.path = path
            self.timeout = timeout
            self.retries = retries
            self.tags = tags
            self.upstreamInfo = upstreamInfo
            self.upstreamType = upstreamType
            self.editable = editable
            self.createdTime = createdTime
        }

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case name = "Name"
            case `protocol` = "Protocol"
            case path = "Path"
            case timeout = "Timeout"
            case retries = "Retries"
            case tags = "Tags"
            case upstreamInfo = "UpstreamInfo"
            case upstreamType = "UpstreamType"
            case editable = "Editable"
            case createdTime = "CreatedTime"
        }
    }

    /// 云原生网关服务预览信息
    public struct KongServicePreview: TCInputModel, TCOutputModel {
        /// 服务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 服务名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// 后端配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamInfo: KongUpstreamInfo?

        /// 后端类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamType: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdTime: String?

        /// 是否可编辑
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let editable: Bool?

        /// 请求路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let path: String?

        public init(id: String, name: String? = nil, tags: [String]? = nil, upstreamInfo: KongUpstreamInfo? = nil, upstreamType: String? = nil, createdTime: String? = nil, editable: Bool? = nil, path: String? = nil) {
            self.id = id
            self.name = name
            self.tags = tags
            self.upstreamInfo = upstreamInfo
            self.upstreamType = upstreamType
            self.createdTime = createdTime
            self.editable = editable
            self.path = path
        }

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case name = "Name"
            case tags = "Tags"
            case upstreamInfo = "UpstreamInfo"
            case upstreamType = "UpstreamType"
            case createdTime = "CreatedTime"
            case editable = "Editable"
            case path = "Path"
        }
    }

    /// kong服务路由列表
    public struct KongServiceRouteList: TCInputModel, TCOutputModel {
        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let routeList: [KongRoutePreview]?

        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        public init(routeList: [KongRoutePreview]? = nil, totalCount: Int64? = nil) {
            self.routeList = routeList
            self.totalCount = totalCount
        }

        enum CodingKeys: String, CodingKey {
            case routeList = "RouteList"
            case totalCount = "TotalCount"
        }
    }

    /// kong实例的服务列表
    public struct KongServices: TCInputModel, TCOutputModel {
        /// kong实例的服务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceList: [KongServicePreview]?

        /// 列表总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        public init(serviceList: [KongServicePreview]? = nil, totalCount: Int64? = nil) {
            self.serviceList = serviceList
            self.totalCount = totalCount
        }

        enum CodingKeys: String, CodingKey {
            case serviceList = "ServiceList"
            case totalCount = "TotalCount"
        }
    }

    /// Kong Upstream中的Target
    public struct KongTarget: TCInputModel, TCOutputModel {
        /// Host
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let host: String?

        /// 端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 权重
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weight: Int64?

        /// 健康状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let health: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdTime: String?

        /// Target的来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: String?

        public init(host: String? = nil, port: Int64? = nil, weight: Int64? = nil, health: String? = nil, createdTime: String? = nil, source: String? = nil) {
            self.host = host
            self.port = port
            self.weight = weight
            self.health = health
            self.createdTime = createdTime
            self.source = source
        }

        enum CodingKeys: String, CodingKey {
            case host = "Host"
            case port = "Port"
            case weight = "Weight"
            case health = "Health"
            case createdTime = "CreatedTime"
            case source = "Source"
        }
    }

    /// 服务的后端配置
    public struct KongUpstreamInfo: TCInputModel, TCOutputModel {
        /// IP或域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let host: String?

        /// 端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 服务来源ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceID: String?

        /// 命名空间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespace: String?

        /// 服务（注册中心或Kubernetes中的服务）名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceName: String?

        /// 服务后端类型是IPList时提供
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: [KongTarget]?

        /// 服务来源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceType: String?

        /// SCF函数类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scfType: String?

        /// SCF函数命名空间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scfNamespace: String?

        /// SCF函数名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scfLambdaName: String?

        /// SCF函数版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scfLambdaQualifier: String?

        /// 冷启动时间，单位秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slowStart: Int64?

        /// 负载均衡算法，默认为 round-robin，还支持 least-connections，consisten_hashing
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let algorithm: String?

        /// CVM弹性伸缩组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoScalingGroupID: String?

        /// CVM弹性伸缩组端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoScalingCvmPort: UInt64?

        /// CVM弹性伸缩组使用的CVM TAT命令状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoScalingTatCmdStatus: String?

        /// CVM弹性伸缩组生命周期挂钩状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoScalingHookStatus: String?

        /// 服务来源的名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceName: String?

        /// 精确的服务来源类型，新建服务来源时候传入的类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realSourceType: String?

        /// upstream健康状态HEALTHY（健康）, UNHEALTHY（异常）, HEALTHCHECKS_OFF（未开启）和NONE（不支持健康检查）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthStatus: String?

        public init(host: String? = nil, port: Int64? = nil, sourceID: String? = nil, namespace: String? = nil, serviceName: String? = nil, targets: [KongTarget]? = nil, sourceType: String? = nil, scfType: String? = nil, scfNamespace: String? = nil, scfLambdaName: String? = nil, scfLambdaQualifier: String? = nil, slowStart: Int64? = nil, algorithm: String? = nil, autoScalingGroupID: String? = nil, autoScalingCvmPort: UInt64? = nil, autoScalingTatCmdStatus: String? = nil, autoScalingHookStatus: String? = nil, sourceName: String? = nil, realSourceType: String? = nil, healthStatus: String? = nil) {
            self.host = host
            self.port = port
            self.sourceID = sourceID
            self.namespace = namespace
            self.serviceName = serviceName
            self.targets = targets
            self.sourceType = sourceType
            self.scfType = scfType
            self.scfNamespace = scfNamespace
            self.scfLambdaName = scfLambdaName
            self.scfLambdaQualifier = scfLambdaQualifier
            self.slowStart = slowStart
            self.algorithm = algorithm
            self.autoScalingGroupID = autoScalingGroupID
            self.autoScalingCvmPort = autoScalingCvmPort
            self.autoScalingTatCmdStatus = autoScalingTatCmdStatus
            self.autoScalingHookStatus = autoScalingHookStatus
            self.sourceName = sourceName
            self.realSourceType = realSourceType
            self.healthStatus = healthStatus
        }

        enum CodingKeys: String, CodingKey {
            case host = "Host"
            case port = "Port"
            case sourceID = "SourceID"
            case namespace = "Namespace"
            case serviceName = "ServiceName"
            case targets = "Targets"
            case sourceType = "SourceType"
            case scfType = "ScfType"
            case scfNamespace = "ScfNamespace"
            case scfLambdaName = "ScfLambdaName"
            case scfLambdaQualifier = "ScfLambdaQualifier"
            case slowStart = "SlowStart"
            case algorithm = "Algorithm"
            case autoScalingGroupID = "AutoScalingGroupID"
            case autoScalingCvmPort = "AutoScalingCvmPort"
            case autoScalingTatCmdStatus = "AutoScalingTatCmdStatus"
            case autoScalingHookStatus = "AutoScalingHookStatus"
            case sourceName = "SourceName"
            case realSourceType = "RealSourceType"
            case healthStatus = "HealthStatus"
        }
    }

    /// 获取云原生API网关实例列表响应结果。
    public struct ListCloudNativeAPIGatewayResult: TCOutputModel {
        /// 总数。
        public let totalCount: Int64

        /// 云原生API网关实例列表。
        public let gatewayList: [DescribeCloudNativeAPIGatewayResult]

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case gatewayList = "GatewayList"
        }
    }

    /// 列表过滤条件，模糊匹配
    public struct ListFilter: TCInputModel {
        /// 过滤字段
        public let key: String?

        /// 过滤值
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// Nacos副本信息
    public struct NacosReplica: TCOutputModel {
        /// 名称
        public let name: String

        /// 角色
        public let role: String

        /// 状态
        public let status: String

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 可用区ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 可用区ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: String?

        /// VPC ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case role = "Role"
            case status = "Status"
            case subnetId = "SubnetId"
            case zone = "Zone"
            case zoneId = "ZoneId"
            case vpcId = "VpcId"
        }
    }

    /// nacos服务端接口列表，用于云监控
    public struct NacosServerInterface: TCOutputModel {
        /// 接口名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let interface: String?

        enum CodingKeys: String, CodingKey {
            case interface = "Interface"
        }
    }

    /// 云原生网关分组信息
    public struct NativeGatewayServerGroup: TCOutputModel {
        /// 云原生网关分组唯一id
        public let groupId: String

        /// 分组名
        public let name: String

        /// 描述信息
        public let description: String

        /// 节点规格、节点数信息
        public let nodeConfig: CloudNativeAPIGatewayNodeConfig

        /// 网关分组状态。
        public let status: String

        /// 创建时间
        public let createTime: String

        /// 是否是默认分组。
        /// 0：否。
        /// 1：是。
        public let isFirstGroup: Int64

        /// 关联策略信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bindingStrategy: CloudNativeAPIGatewayStrategy?

        /// 网关实例 id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gatewayId: String?

        /// 带宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetMaxBandwidthOut: Int64?

        /// 修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifyTime: String?

        /// 子网id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetIds: String?

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case name = "Name"
            case description = "Description"
            case nodeConfig = "NodeConfig"
            case status = "Status"
            case createTime = "CreateTime"
            case isFirstGroup = "IsFirstGroup"
            case bindingStrategy = "BindingStrategy"
            case gatewayId = "GatewayId"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case modifyTime = "ModifyTime"
            case subnetIds = "SubnetIds"
        }
    }

    /// 网关分组列表
    public struct NativeGatewayServerGroups: TCOutputModel {
        /// 总数
        public let totalCount: UInt64

        /// 分组信息数组。
        public let gatewayGroupList: [NativeGatewayServerGroup]

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case gatewayGroupList = "GatewayGroupList"
        }
    }

    /// 网络访问策略
    public struct NetworkAccessControl: TCInputModel, TCOutputModel {
        /// 访问模式：Whitelist|Blacklist
        public let mode: String

        /// 白名单列表
        public let cidrWhiteList: [String]?

        /// 黑名单列表
        public let cidrBlackList: [String]?

        public init(mode: String, cidrWhiteList: [String]? = nil, cidrBlackList: [String]? = nil) {
            self.mode = mode
            self.cidrWhiteList = cidrWhiteList
            self.cidrBlackList = cidrBlackList
        }

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case cidrWhiteList = "CidrWhiteList"
            case cidrBlackList = "CidrBlackList"
        }
    }

    /// 查询Limiter的接入地址
    public struct PolarisLimiterAddress: TCOutputModel {
        /// VPC接入IP列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intranetAddress: String?

        enum CodingKeys: String, CodingKey {
            case intranetAddress = "IntranetAddress"
        }
    }

    /// 云原生网关限流插件Qps阈值
    public struct QpsThreshold: TCInputModel, TCOutputModel {
        /// qps阈值控制维度,包含:second、minute、hour、day、month、year
        public let unit: String

        /// 阈值
        public let max: Int64

        public init(unit: String, max: Int64) {
            self.unit = unit
            self.max = max
        }

        enum CodingKeys: String, CodingKey {
            case unit = "Unit"
            case max = "Max"
        }
    }

    /// 云原生网关限流插件自定义响应
    public struct RateLimitResponse: TCInputModel, TCOutputModel {
        /// 自定义响应体
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let body: String?

        /// Headers
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let headers: [KVMapping]?

        /// http状态码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpStatus: Int64?

        public init(body: String? = nil, headers: [KVMapping]? = nil, httpStatus: Int64? = nil) {
            self.body = body
            self.headers = headers
            self.httpStatus = httpStatus
        }

        enum CodingKeys: String, CodingKey {
            case body = "Body"
            case headers = "Headers"
            case httpStatus = "HttpStatus"
        }
    }

    /// 微服务注册引擎实例
    public struct SREInstance: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 名称
        public let name: String

        /// 版本号
        public let edition: String

        /// 状态, 枚举值:creating/create_fail/running/updating/update_fail/restarting/restart_fail/destroying/destroy_fail
        public let status: String

        /// 规格ID
        public let specId: String

        /// 副本数
        public let replica: Int64

        /// 类型
        public let type: String

        /// Vpc iD
        public let vpcId: String

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetIds: [String]?

        /// 是否开启持久化存储
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableStorage: Bool?

        /// 数据存储方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageType: String?

        /// 云硬盘容量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageCapacity: Int64?

        /// 计费方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paymode: String?

        /// EKS集群的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eksClusterID: String?

        /// 集群创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 环境配置信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envInfos: [EnvInfo]?

        /// 引擎所在的区域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineRegion: String?

        /// 注册引擎是否开启公网
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableInternet: Bool?

        /// 私有网络列表信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcInfos: [VpcInfo]?

        /// 服务治理相关信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceGovernanceInfos: [ServiceGovernanceInfo]?

        /// 实例的标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [KVPair]?

        /// 引擎实例是否开启控制台公网访问地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableConsoleInternet: Bool?

        /// 引擎实例是否开启控制台内网访问地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableConsoleIntranet: Bool?

        /// 引擎实例是否展示参数配置页面
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configInfoVisible: Bool?

        /// 引擎实例控制台默认密码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consoleDefaultPwd: String?

        /// 交易付费类型，0后付费/1预付费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tradeType: Int64?

        /// 自动续费标记：0表示默认状态(用户未设置，即初始状态)， 1表示自动续费，2表示明确不自动续费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenewFlag: Int64?

        /// 预付费到期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let curDeadline: String?

        /// 隔离开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolateTime: String?

        /// 实例地域相关的描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionInfos: [DescribeInstanceRegionInfo]?

        /// 所在EKS环境，分为common和yunti
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eksType: String?

        /// 引擎的产品版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let featureVersion: String?

        /// 引擎实例是否开启客户端内网访问地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableClientIntranet: Bool?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case name = "Name"
            case edition = "Edition"
            case status = "Status"
            case specId = "SpecId"
            case replica = "Replica"
            case type = "Type"
            case vpcId = "VpcId"
            case subnetIds = "SubnetIds"
            case enableStorage = "EnableStorage"
            case storageType = "StorageType"
            case storageCapacity = "StorageCapacity"
            case paymode = "Paymode"
            case eksClusterID = "EKSClusterID"
            case createTime = "CreateTime"
            case envInfos = "EnvInfos"
            case engineRegion = "EngineRegion"
            case enableInternet = "EnableInternet"
            case vpcInfos = "VpcInfos"
            case serviceGovernanceInfos = "ServiceGovernanceInfos"
            case tags = "Tags"
            case enableConsoleInternet = "EnableConsoleInternet"
            case enableConsoleIntranet = "EnableConsoleIntranet"
            case configInfoVisible = "ConfigInfoVisible"
            case consoleDefaultPwd = "ConsoleDefaultPwd"
            case tradeType = "TradeType"
            case autoRenewFlag = "AutoRenewFlag"
            case curDeadline = "CurDeadline"
            case isolateTime = "IsolateTime"
            case regionInfos = "RegionInfos"
            case eksType = "EKSType"
            case featureVersion = "FeatureVersion"
            case enableClientIntranet = "EnableClientIntranet"
        }
    }

    /// 服务治理相关的信息
    public struct ServiceGovernanceInfo: TCInputModel, TCOutputModel {
        /// 引擎所在的地域
        public let engineRegion: String

        /// 服务治理引擎绑定的kubernetes集群信息
        public let boundK8SInfos: [BoundK8SInfo]?

        /// 服务治理引擎绑定的网络信息
        public let vpcInfos: [VpcInfo]?

        /// 当前实例鉴权是否开启
        public let authOpen: Bool?

        /// 该实例支持的功能，鉴权就是 Auth
        public let features: [String]?

        /// 主账户名默认为 polaris，该值为主账户的默认密码
        public let mainPassword: String?

        /// 服务治理pushgateway引擎绑定的网络信息
        public let pgwVpcInfos: [VpcInfo]?

        /// 服务治理限流server引擎绑定的网络信息
        public let limiterVpcInfos: [VpcInfo]?

        public init(engineRegion: String, boundK8SInfos: [BoundK8SInfo]? = nil, vpcInfos: [VpcInfo]? = nil, authOpen: Bool? = nil, features: [String]? = nil, mainPassword: String? = nil, pgwVpcInfos: [VpcInfo]? = nil, limiterVpcInfos: [VpcInfo]? = nil) {
            self.engineRegion = engineRegion
            self.boundK8SInfos = boundK8SInfos
            self.vpcInfos = vpcInfos
            self.authOpen = authOpen
            self.features = features
            self.mainPassword = mainPassword
            self.pgwVpcInfos = pgwVpcInfos
            self.limiterVpcInfos = limiterVpcInfos
        }

        enum CodingKeys: String, CodingKey {
            case engineRegion = "EngineRegion"
            case boundK8SInfos = "BoundK8SInfos"
            case vpcInfos = "VpcInfos"
            case authOpen = "AuthOpen"
            case features = "Features"
            case mainPassword = "MainPassword"
            case pgwVpcInfos = "PgwVpcInfos"
            case limiterVpcInfos = "LimiterVpcInfos"
        }
    }

    /// 更新云原生API网关响应结果。
    public struct UpdateCloudNativeAPIGatewayResult: TCOutputModel {
        /// 云原生API网关ID。
        public let gatewayId: String

        /// 云原生网关状态。
        public let status: String

        /// 任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case status = "Status"
            case taskId = "TaskId"
        }
    }

    /// 私有网络信息
    public struct VpcInfo: TCInputModel, TCOutputModel {
        /// Vpc Id
        public let vpcId: String

        /// 子网ID
        public let subnetId: String

        /// 内网访问地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intranetAddress: String?

        public init(vpcId: String, subnetId: String, intranetAddress: String? = nil) {
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.intranetAddress = intranetAddress
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case intranetAddress = "IntranetAddress"
        }
    }

    /// Zookeeper副本信息
    public struct ZookeeperReplica: TCOutputModel {
        /// 名称
        public let name: String

        /// 角色
        public let role: String

        /// 状态
        public let status: String

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 可用区ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 可用区ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: String?

        /// 别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aliasName: String?

        /// VPC ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case role = "Role"
            case status = "Status"
            case subnetId = "SubnetId"
            case zone = "Zone"
            case zoneId = "ZoneId"
            case aliasName = "AliasName"
            case vpcId = "VpcId"
        }
    }

    /// Zookeeper服务端接口列表，用于云监控
    public struct ZookeeperServerInterface: TCOutputModel {
        /// 接口名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let interface: String?

        enum CodingKeys: String, CodingKey {
            case interface = "Interface"
        }
    }
}
