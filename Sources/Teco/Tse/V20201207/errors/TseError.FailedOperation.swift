//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTseError {
    public struct FailedOperation: TCTseErrorType {
        enum Code: String {
            case cls = "FailedOperation.Cls"
            case failedOperation = "FailedOperation.FailedOperation"
            case internalError = "FailedOperation.InternalError"
            case resource = "FailedOperation.Resource"
            case role = "FailedOperation.Role"
            case vpc = "FailedOperation.Vpc"
            case other = "FailedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 调用CLS服务失败
        public static var cls: FailedOperation {
            FailedOperation(.cls)
        }

        /// 操作失败。
        public static var failedOperation: FailedOperation {
            FailedOperation(.failedOperation)
        }

        /// 操作失败，内部错误。
        public static var internalError: FailedOperation {
            FailedOperation(.internalError)
        }

        /// 超过购买实例的最大数量。
        public static var resource: FailedOperation {
            FailedOperation(.resource)
        }

        /// 获取临时密钥失败
        public static var role: FailedOperation {
            FailedOperation(.role)
        }

        /// 调用VPC服务失败
        public static var vpc: FailedOperation {
            FailedOperation(.vpc)
        }

        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }

        public func asTseError() -> TCTseError {
            let code: TCTseError.Code
            switch self.error {
            case .cls:
                code = .failedOperation_Cls
            case .failedOperation:
                code = .failedOperation_FailedOperation
            case .internalError:
                code = .failedOperation_InternalError
            case .resource:
                code = .failedOperation_Resource
            case .role:
                code = .failedOperation_Role
            case .vpc:
                code = .failedOperation_Vpc
            case .other:
                code = .failedOperation
            }
            return TCTseError(code, context: self.context)
        }
    }
}
