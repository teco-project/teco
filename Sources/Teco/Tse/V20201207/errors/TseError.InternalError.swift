//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTseError {
    public struct InternalError: TCTseErrorType {
        enum Code: String {
            case createError = "InternalError.CreateError"
            case getCredential = "InternalError.GetCredential"
            case getRoleError = "InternalError.GetRoleError"
            case httpStatusCodeError = "InternalError.HttpStatusCodeError"
            case internalError = "InternalError.InternalError"
            case ioError = "InternalError.IOError"
            case operationFailed = "InternalError.OperationFailed"
            case queryError = "InternalError.QueryError"
            case tagFailure = "InternalError.TagFailure"
            case tkeFailure = "InternalError.TKEFailure"
            case unknownError = "InternalError.UnknownError"
            case updateError = "InternalError.UpdateError"
            case vpcFailure = "InternalError.VPCFailure"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 创建内部错误。
        public static var createError: InternalError {
            InternalError(.createError)
        }

        /// 获取凭证失败。
        public static var getCredential: InternalError {
            InternalError(.getCredential)
        }

        /// 角色获取错误。
        public static var getRoleError: InternalError {
            InternalError(.getRoleError)
        }

        /// 状态码错误。
        public static var httpStatusCodeError: InternalError {
            InternalError(.httpStatusCodeError)
        }

        /// 服务内部错误。
        public static var internalError: InternalError {
            InternalError(.internalError)
        }

        /// 内部服务调用异常。
        public static var ioError: InternalError {
            InternalError(.ioError)
        }

        /// 操作失败。
        public static var operationFailed: InternalError {
            InternalError(.operationFailed)
        }

        /// 查询内部错误。
        public static var queryError: InternalError {
            InternalError(.queryError)
        }

        /// 标签操作失败。
        public static var tagFailure: InternalError {
            InternalError(.tagFailure)
        }

        /// TKE相关操作失败。
        public static var tkeFailure: InternalError {
            InternalError(.tkeFailure)
        }

        /// 未知错误。
        public static var unknownError: InternalError {
            InternalError(.unknownError)
        }

        /// 更新内部错误。
        public static var updateError: InternalError {
            InternalError(.updateError)
        }

        /// 访问VPC内部错误。
        public static var vpcFailure: InternalError {
            InternalError(.vpcFailure)
        }

        public func asTseError() -> TCTseError {
            let code: TCTseError.Code
            switch self.error {
            case .createError:
                code = .internalError_CreateError
            case .getCredential:
                code = .internalError_GetCredential
            case .getRoleError:
                code = .internalError_GetRoleError
            case .httpStatusCodeError:
                code = .internalError_HttpStatusCodeError
            case .internalError:
                code = .internalError_InternalError
            case .ioError:
                code = .internalError_IOError
            case .operationFailed:
                code = .internalError_OperationFailed
            case .queryError:
                code = .internalError_QueryError
            case .tagFailure:
                code = .internalError_TagFailure
            case .tkeFailure:
                code = .internalError_TKEFailure
            case .unknownError:
                code = .internalError_UnknownError
            case .updateError:
                code = .internalError_UpdateError
            case .vpcFailure:
                code = .internalError_VPCFailure
            }
            return TCTseError(code, context: self.context)
        }
    }
}
