//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTseError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case createError = "InternalError.CreateError"
            case getCredential = "InternalError.GetCredential"
            case getRoleError = "InternalError.GetRoleError"
            case internalError = "InternalError.InternalError"
            case ioError = "InternalError.IOError"
            case operationFailed = "InternalError.OperationFailed"
            case queryError = "InternalError.QueryError"
            case tagFailure = "InternalError.TagFailure"
            case tkeFailure = "InternalError.TKEFailure"
            case unknownError = "InternalError.UnknownError"
            case updateError = "InternalError.UpdateError"
            case vpcFailure = "InternalError.VPCFailure"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 创建内部错误。
        public static var createError: InternalError {
            InternalError(.createError)
        }
        
        /// 获取凭证失败。
        public static var getCredential: InternalError {
            InternalError(.getCredential)
        }
        
        /// 角色获取错误。
        public static var getRoleError: InternalError {
            InternalError(.getRoleError)
        }
        
        /// 服务内部错误。
        public static var internalError: InternalError {
            InternalError(.internalError)
        }
        
        /// 内部服务调用异常。
        public static var ioError: InternalError {
            InternalError(.ioError)
        }
        
        /// 操作失败。
        public static var operationFailed: InternalError {
            InternalError(.operationFailed)
        }
        
        /// 查询内部错误。
        public static var queryError: InternalError {
            InternalError(.queryError)
        }
        
        /// 标签操作失败。
        public static var tagFailure: InternalError {
            InternalError(.tagFailure)
        }
        
        /// TKE相关操作失败。
        public static var tkeFailure: InternalError {
            InternalError(.tkeFailure)
        }
        
        /// 未知错误。
        public static var unknownError: InternalError {
            InternalError(.unknownError)
        }
        
        /// 更新内部错误。
        public static var updateError: InternalError {
            InternalError(.updateError)
        }
        
        /// 访问VPC内部错误。
        public static var vpcFailure: InternalError {
            InternalError(.vpcFailure)
        }
    }
}

extension TCTseError.InternalError: Equatable {
    public static func == (lhs: TCTseError.InternalError, rhs: TCTseError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTseError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTseError.InternalError {
    public func toTseError() -> TCTseError {
        guard let code = TCTseError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTseError(code, context: self.context)
    }
}