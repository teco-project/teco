//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cms {
    /// DescribeKeywordsLibs请求参数结构体
    public struct DescribeKeywordsLibsRequest: TCPaginatedRequest {
        /// 单页条数，最大为100条
        public let limit: Int64

        /// 条数偏移量
        public let offset: Int64

        /// 过滤器(支持LibName模糊查询,CustomLibIDs词库id列表过滤)
        public let filters: [Filters]?

        public init(limit: Int64, offset: Int64, filters: [Filters]? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeKeywordsLibsResponse) -> DescribeKeywordsLibsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), self.offset + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(limit: self.limit, offset: self.offset + .init(response.getItems().count), filters: self.filters)
        }
    }

    /// DescribeKeywordsLibs返回参数结构体
    public struct DescribeKeywordsLibsResponse: TCPaginatedResponse {
        /// 词库记录数
        public let totalCount: Int64

        /// 词库详情
        public let infos: [KeywordsLibInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case infos = "Infos"
            case requestId = "RequestId"
        }

        /// Extract the returned ``KeywordsLibInfo`` list from the paginated response.
        public func getItems() -> [KeywordsLibInfo] {
            self.infos
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取词库列表
    ///
    /// 获取用户词库列表
    @inlinable
    public func describeKeywordsLibs(_ input: DescribeKeywordsLibsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKeywordsLibsResponse> {
        self.client.execute(action: "DescribeKeywordsLibs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取词库列表
    ///
    /// 获取用户词库列表
    @inlinable
    public func describeKeywordsLibs(_ input: DescribeKeywordsLibsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKeywordsLibsResponse {
        try await self.client.execute(action: "DescribeKeywordsLibs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取词库列表
    ///
    /// 获取用户词库列表
    @inlinable
    public func describeKeywordsLibs(limit: Int64, offset: Int64, filters: [Filters]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKeywordsLibsResponse> {
        self.describeKeywordsLibs(.init(limit: limit, offset: offset, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取词库列表
    ///
    /// 获取用户词库列表
    @inlinable
    public func describeKeywordsLibs(limit: Int64, offset: Int64, filters: [Filters]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKeywordsLibsResponse {
        try await self.describeKeywordsLibs(.init(limit: limit, offset: offset, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取词库列表
    ///
    /// 获取用户词库列表
    @inlinable
    public func describeKeywordsLibsPaginated(_ input: DescribeKeywordsLibsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [KeywordsLibInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeKeywordsLibs, logger: logger, on: eventLoop)
    }

    /// 获取词库列表
    ///
    /// 获取用户词库列表
    @inlinable @discardableResult
    public func describeKeywordsLibsPaginated(_ input: DescribeKeywordsLibsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeKeywordsLibsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeKeywordsLibs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取词库列表
    ///
    /// 获取用户词库列表
    ///
    /// - Returns: `AsyncSequence`s of ``KeywordsLibInfo`` and ``DescribeKeywordsLibsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeKeywordsLibsPaginator(_ input: DescribeKeywordsLibsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeKeywordsLibsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeKeywordsLibs, logger: logger, on: eventLoop)
    }
}
