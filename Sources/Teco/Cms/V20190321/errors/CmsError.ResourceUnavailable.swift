//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCmsError {
    public struct ResourceUnavailable: TCErrorType {
        enum Code: String {
            case errImageTimeOut = "ResourceUnavailable.ErrImageTimeOut"
            case errTextTimeOut = "ResourceUnavailable.ErrTextTimeOut"
            case imageDownloadError = "ResourceUnavailable.ImageDownloadError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 图片识别服务超时
        public static var errImageTimeOut: ResourceUnavailable {
            ResourceUnavailable(.errImageTimeOut)
        }
        
        /// 文本识别服务超时
        public static var errTextTimeOut: ResourceUnavailable {
            ResourceUnavailable(.errTextTimeOut)
        }
        
        /// 图片文件下载失败。
        public static var imageDownloadError: ResourceUnavailable {
            ResourceUnavailable(.imageDownloadError)
        }
    }
}

extension TCCmsError.ResourceUnavailable: Equatable {
    public static func == (lhs: TCCmsError.ResourceUnavailable, rhs: TCCmsError.ResourceUnavailable) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCmsError.ResourceUnavailable: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCmsError.ResourceUnavailable {
    public func toCmsError() -> TCCmsError {
        guard let code = TCCmsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCmsError(code, context: self.context)
    }
}