//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Dbbrain {
    /// DescribeRedisTopBigKeys请求参数结构体
    public struct DescribeRedisTopBigKeysRequest: TCRequestModel {
        /// 实例ID。
        public let instanceId: String

        /// 查询日期，如2021-05-27，最早可为前30天的日期。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCDateEncoding public var date: Date

        /// 服务产品类型，支持值包括 "redis" - 云数据库 Redis。
        public let product: String

        /// 排序字段，取值包括Capacity - 内存，ItemCount - 元素数量，默认为Capacity。
        public let sortBy: String?

        /// key类型筛选条件，默认为不进行筛选，取值包括string, list, set, hash, sortedset, stream。
        public let keyType: String?

        /// 查询数目，默认为20，最大值为100。
        public let limit: Int64?

        public init(instanceId: String, date: Date, product: String, sortBy: String? = nil, keyType: String? = nil, limit: Int64? = nil) {
            self.instanceId = instanceId
            self.date = date
            self.product = product
            self.sortBy = sortBy
            self.keyType = keyType
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case date = "Date"
            case product = "Product"
            case sortBy = "SortBy"
            case keyType = "KeyType"
            case limit = "Limit"
        }
    }

    /// DescribeRedisTopBigKeys返回参数结构体
    public struct DescribeRedisTopBigKeysResponse: TCResponseModel {
        /// top key列表。
        public let topKeys: [RedisKeySpaceData]

        /// 采集时间戳（秒）。
        public let timestamp: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case topKeys = "TopKeys"
            case timestamp = "Timestamp"
            case requestId = "RequestId"
        }
    }

    /// 查询redis实例大key列表
    ///
    /// 查询redis实例大key列表。
    @inlinable
    public func describeRedisTopBigKeys(_ input: DescribeRedisTopBigKeysRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRedisTopBigKeysResponse> {
        self.client.execute(action: "DescribeRedisTopBigKeys", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询redis实例大key列表
    ///
    /// 查询redis实例大key列表。
    @inlinable
    public func describeRedisTopBigKeys(_ input: DescribeRedisTopBigKeysRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRedisTopBigKeysResponse {
        try await self.client.execute(action: "DescribeRedisTopBigKeys", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询redis实例大key列表
    ///
    /// 查询redis实例大key列表。
    @inlinable
    public func describeRedisTopBigKeys(instanceId: String, date: Date, product: String, sortBy: String? = nil, keyType: String? = nil, limit: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRedisTopBigKeysResponse> {
        self.describeRedisTopBigKeys(DescribeRedisTopBigKeysRequest(instanceId: instanceId, date: date, product: product, sortBy: sortBy, keyType: keyType, limit: limit), logger: logger, on: eventLoop)
    }

    /// 查询redis实例大key列表
    ///
    /// 查询redis实例大key列表。
    @inlinable
    public func describeRedisTopBigKeys(instanceId: String, date: Date, product: String, sortBy: String? = nil, keyType: String? = nil, limit: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRedisTopBigKeysResponse {
        try await self.describeRedisTopBigKeys(DescribeRedisTopBigKeysRequest(instanceId: instanceId, date: date, product: product, sortBy: sortBy, keyType: keyType, limit: limit), logger: logger, on: eventLoop)
    }
}
