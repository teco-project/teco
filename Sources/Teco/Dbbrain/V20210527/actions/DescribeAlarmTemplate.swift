//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// DescribeAlarmTemplate请求参数结构体
    public struct DescribeAlarmTemplateRequest: TCPaginatedRequest {
        /// 搜索字段
        public let templateNameRegexp: String

        /// 返回限制长度
        public let limit: Int64

        /// 偏置
        public let offset: Int64

        /// mysql -  mysql
        /// cynosdb -  tdsql-c
        public let product: String?

        public init(templateNameRegexp: String, limit: Int64, offset: Int64, product: String? = nil) {
            self.templateNameRegexp = templateNameRegexp
            self.limit = limit
            self.offset = offset
            self.product = product
        }

        enum CodingKeys: String, CodingKey {
            case templateNameRegexp = "TemplateNameRegexp"
            case limit = "Limit"
            case offset = "Offset"
            case product = "Product"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAlarmTemplateResponse) -> DescribeAlarmTemplateRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(templateNameRegexp: self.templateNameRegexp, limit: self.limit, offset: self.offset + .init(response.getItems().count), product: self.product)
        }
    }

    /// DescribeAlarmTemplate返回参数结构体
    public struct DescribeAlarmTemplateResponse: TCPaginatedResponse {
        /// 模板列表
        public let profileList: [AlarmProfileList]?

        /// 模板总数
        public let totalCount: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case profileList = "ProfileList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``AlarmProfileList`` list from the paginated response.
        public func getItems() -> [AlarmProfileList] {
            self.profileList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 通知模板查询
    @inlinable
    public func describeAlarmTemplate(_ input: DescribeAlarmTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAlarmTemplateResponse> {
        self.client.execute(action: "DescribeAlarmTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 通知模板查询
    @inlinable
    public func describeAlarmTemplate(_ input: DescribeAlarmTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAlarmTemplateResponse {
        try await self.client.execute(action: "DescribeAlarmTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 通知模板查询
    @inlinable
    public func describeAlarmTemplate(templateNameRegexp: String, limit: Int64, offset: Int64, product: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAlarmTemplateResponse> {
        self.describeAlarmTemplate(.init(templateNameRegexp: templateNameRegexp, limit: limit, offset: offset, product: product), region: region, logger: logger, on: eventLoop)
    }

    /// 通知模板查询
    @inlinable
    public func describeAlarmTemplate(templateNameRegexp: String, limit: Int64, offset: Int64, product: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAlarmTemplateResponse {
        try await self.describeAlarmTemplate(.init(templateNameRegexp: templateNameRegexp, limit: limit, offset: offset, product: product), region: region, logger: logger, on: eventLoop)
    }

    /// 通知模板查询
    @inlinable
    public func describeAlarmTemplatePaginated(_ input: DescribeAlarmTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [AlarmProfileList])> {
        self.client.paginate(input: input, region: region, command: self.describeAlarmTemplate, logger: logger, on: eventLoop)
    }

    /// 通知模板查询
    @inlinable @discardableResult
    public func describeAlarmTemplatePaginated(_ input: DescribeAlarmTemplateRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAlarmTemplateResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAlarmTemplate, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 通知模板查询
    ///
    /// - Returns: `AsyncSequence`s of ``AlarmProfileList`` and ``DescribeAlarmTemplateResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAlarmTemplatePaginator(_ input: DescribeAlarmTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAlarmTemplateRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAlarmTemplate, logger: logger, on: eventLoop)
    }
}
