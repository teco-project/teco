//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// VerifyUserAccount请求参数结构体
    public struct VerifyUserAccountRequest: TCRequest {
        /// 实例ID。
        public let instanceId: String

        /// 数据库账号名。
        public let user: String

        /// 数据库账号密码。
        public let password: String

        /// 服务产品类型，支持值："mysql" - 云数据库 MySQL；"cynosdb" - 云数据库 TDSQL-C for MySQL，默认为"mysql"。
        public let product: String?

        public init(instanceId: String, user: String, password: String, product: String? = nil) {
            self.instanceId = instanceId
            self.user = user
            self.password = password
            self.product = product
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case user = "User"
            case password = "Password"
            case product = "Product"
        }
    }

    /// VerifyUserAccount返回参数结构体
    public struct VerifyUserAccountResponse: TCResponse {
        /// 会话token，有效期为5分钟。
        public let sessionToken: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sessionToken = "SessionToken"
            case requestId = "RequestId"
        }
    }

    /// 验证用户数据库账号权限
    ///
    /// 验证用户数据库账号权限，获取会话token。
    @inlinable
    public func verifyUserAccount(_ input: VerifyUserAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VerifyUserAccountResponse> {
        self.client.execute(action: "VerifyUserAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 验证用户数据库账号权限
    ///
    /// 验证用户数据库账号权限，获取会话token。
    @inlinable
    public func verifyUserAccount(_ input: VerifyUserAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VerifyUserAccountResponse {
        try await self.client.execute(action: "VerifyUserAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 验证用户数据库账号权限
    ///
    /// 验证用户数据库账号权限，获取会话token。
    @inlinable
    public func verifyUserAccount(instanceId: String, user: String, password: String, product: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VerifyUserAccountResponse> {
        self.verifyUserAccount(.init(instanceId: instanceId, user: user, password: password, product: product), region: region, logger: logger, on: eventLoop)
    }

    /// 验证用户数据库账号权限
    ///
    /// 验证用户数据库账号权限，获取会话token。
    @inlinable
    public func verifyUserAccount(instanceId: String, user: String, password: String, product: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VerifyUserAccountResponse {
        try await self.verifyUserAccount(.init(instanceId: instanceId, user: user, password: password, product: product), region: region, logger: logger, on: eventLoop)
    }
}
