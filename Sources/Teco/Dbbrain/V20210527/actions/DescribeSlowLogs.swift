//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Dbbrain {
    /// DescribeSlowLogs请求参数结构体
    public struct DescribeSlowLogsRequest: TCPaginatedRequest {
        /// 服务产品类型，支持值包括： "mysql" - 云数据库 MySQL， "cynosdb" - 云数据库 CynosDB for MySQL，默认为"mysql"。
        public let product: String

        /// 实例id。
        public let instanceId: String

        /// sql模板的md5值
        public let md5: String

        /// 开始时间，如“2019-09-10 12:13:14”。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 截止时间，如“2019-09-11 10:13:14”，截止时间与开始时间的间隔小于7天。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// 偏移量，默认为0。
        public let offset: Int64

        /// 查询数目，默认为20，最大为100。
        public let limit: Int64

        /// 数据库列表
        public let db: [String]?

        /// 关键字
        public let key: [String]?

        /// 用户
        public let user: [String]?

        /// IP
        public let ip: [String]?

        /// 耗时区间,耗时区间的左右边界分别对应数组的第0个元素和第一个元素
        public let time: [Int64]?

        public init(product: String, instanceId: String, md5: String, startTime: Date, endTime: Date, offset: Int64, limit: Int64, db: [String]? = nil, key: [String]? = nil, user: [String]? = nil, ip: [String]? = nil, time: [Int64]? = nil) {
            self.product = product
            self.instanceId = instanceId
            self.md5 = md5
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.offset = offset
            self.limit = limit
            self.db = db
            self.key = key
            self.user = user
            self.ip = ip
            self.time = time
        }

        enum CodingKeys: String, CodingKey {
            case product = "Product"
            case instanceId = "InstanceId"
            case md5 = "Md5"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
            case db = "DB"
            case key = "Key"
            case user = "User"
            case ip = "Ip"
            case time = "Time"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeSlowLogsResponse) -> DescribeSlowLogsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(product: self.product, instanceId: self.instanceId, md5: self.md5, startTime: self.startTime, endTime: self.endTime, offset: self.offset + .init(response.getItems().count), limit: self.limit, db: self.db, key: self.key, user: self.user, ip: self.ip, time: self.time)
        }
    }

    /// DescribeSlowLogs返回参数结构体
    public struct DescribeSlowLogsResponse: TCPaginatedResponse {
        /// 符合条件的记录总数。
        public let totalCount: Int64

        /// 慢日志明细
        public let rows: [SlowLogInfoItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case rows = "Rows"
            case requestId = "RequestId"
        }

        /// Extract the returned ``SlowLogInfoItem`` list from the paginated response.
        public func getItems() -> [SlowLogInfoItem] {
            self.rows
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取SQL模板在指定时间段内的详细信息
    ///
    /// 获取指定时间内某个sql模板的慢日志明细
    @inlinable
    public func describeSlowLogs(_ input: DescribeSlowLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSlowLogsResponse> {
        self.client.execute(action: "DescribeSlowLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取SQL模板在指定时间段内的详细信息
    ///
    /// 获取指定时间内某个sql模板的慢日志明细
    @inlinable
    public func describeSlowLogs(_ input: DescribeSlowLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSlowLogsResponse {
        try await self.client.execute(action: "DescribeSlowLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取SQL模板在指定时间段内的详细信息
    ///
    /// 获取指定时间内某个sql模板的慢日志明细
    @inlinable
    public func describeSlowLogs(product: String, instanceId: String, md5: String, startTime: Date, endTime: Date, offset: Int64, limit: Int64, db: [String]? = nil, key: [String]? = nil, user: [String]? = nil, ip: [String]? = nil, time: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSlowLogsResponse> {
        self.describeSlowLogs(.init(product: product, instanceId: instanceId, md5: md5, startTime: startTime, endTime: endTime, offset: offset, limit: limit, db: db, key: key, user: user, ip: ip, time: time), region: region, logger: logger, on: eventLoop)
    }

    /// 获取SQL模板在指定时间段内的详细信息
    ///
    /// 获取指定时间内某个sql模板的慢日志明细
    @inlinable
    public func describeSlowLogs(product: String, instanceId: String, md5: String, startTime: Date, endTime: Date, offset: Int64, limit: Int64, db: [String]? = nil, key: [String]? = nil, user: [String]? = nil, ip: [String]? = nil, time: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSlowLogsResponse {
        try await self.describeSlowLogs(.init(product: product, instanceId: instanceId, md5: md5, startTime: startTime, endTime: endTime, offset: offset, limit: limit, db: db, key: key, user: user, ip: ip, time: time), region: region, logger: logger, on: eventLoop)
    }

    /// 获取SQL模板在指定时间段内的详细信息
    ///
    /// 获取指定时间内某个sql模板的慢日志明细
    @inlinable
    public func describeSlowLogsPaginated(_ input: DescribeSlowLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [SlowLogInfoItem])> {
        self.client.paginate(input: input, region: region, command: self.describeSlowLogs, logger: logger, on: eventLoop)
    }

    /// 获取SQL模板在指定时间段内的详细信息
    ///
    /// 获取指定时间内某个sql模板的慢日志明细
    @inlinable @discardableResult
    public func describeSlowLogsPaginated(_ input: DescribeSlowLogsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeSlowLogsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeSlowLogs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取SQL模板在指定时间段内的详细信息
    ///
    /// 获取指定时间内某个sql模板的慢日志明细
    ///
    /// - Returns: `AsyncSequence`s of ``SlowLogInfoItem`` and ``DescribeSlowLogsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeSlowLogsPaginator(_ input: DescribeSlowLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeSlowLogsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeSlowLogs, logger: logger, on: eventLoop)
    }
}
