//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// ModifyAlarmPolicy请求参数结构体
    public struct ModifyAlarmPolicyRequest: TCRequest {
        /// 类型
        public let applyType: String

        /// 开启策略
        public let enable: Int64

        /// 列表
        public let instanceIds: [InstanceID]

        /// User-动态关联该用户所有实例
        /// Instance-关联实例列表的实例
        public let newProfileLevel: String

        /// 新策略名
        public let newProfileName: String

        /// 旧策略名
        public let profileName: String

        /// 策略类型
        public let profileType: String

        /// 备注
        public let remark: String

        /// 规则类型 0-快速，1-自定义 若值为0，则QuickRule不能为空，若值为1，则Rules 不能为空
        public let ruleType: Int64

        /// 接受模板
        public let templateInfo: [TemplateInfo]

        /// 快速规则  支持包括fatal-致命, critical-严重,
        /// warning-告警,
        /// information-通知
        public let quickRule: String?

        /// 自定义规则
        public let rules: [AlarmsRules]?

        public init(applyType: String, enable: Int64, instanceIds: [InstanceID], newProfileLevel: String, newProfileName: String, profileName: String, profileType: String, remark: String, ruleType: Int64, templateInfo: [TemplateInfo], quickRule: String? = nil, rules: [AlarmsRules]? = nil) {
            self.applyType = applyType
            self.enable = enable
            self.instanceIds = instanceIds
            self.newProfileLevel = newProfileLevel
            self.newProfileName = newProfileName
            self.profileName = profileName
            self.profileType = profileType
            self.remark = remark
            self.ruleType = ruleType
            self.templateInfo = templateInfo
            self.quickRule = quickRule
            self.rules = rules
        }

        enum CodingKeys: String, CodingKey {
            case applyType = "ApplyType"
            case enable = "Enable"
            case instanceIds = "InstanceIds"
            case newProfileLevel = "NewProfileLevel"
            case newProfileName = "NewProfileName"
            case profileName = "ProfileName"
            case profileType = "ProfileType"
            case remark = "Remark"
            case ruleType = "RuleType"
            case templateInfo = "TemplateInfo"
            case quickRule = "QuickRule"
            case rules = "Rules"
        }
    }

    /// ModifyAlarmPolicy返回参数结构体
    public struct ModifyAlarmPolicyResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改告警策略
    @inlinable @discardableResult
    public func modifyAlarmPolicy(_ input: ModifyAlarmPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmPolicyResponse> {
        self.client.execute(action: "ModifyAlarmPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改告警策略
    @inlinable @discardableResult
    public func modifyAlarmPolicy(_ input: ModifyAlarmPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmPolicyResponse {
        try await self.client.execute(action: "ModifyAlarmPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改告警策略
    @inlinable @discardableResult
    public func modifyAlarmPolicy(applyType: String, enable: Int64, instanceIds: [InstanceID], newProfileLevel: String, newProfileName: String, profileName: String, profileType: String, remark: String, ruleType: Int64, templateInfo: [TemplateInfo], quickRule: String? = nil, rules: [AlarmsRules]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmPolicyResponse> {
        self.modifyAlarmPolicy(.init(applyType: applyType, enable: enable, instanceIds: instanceIds, newProfileLevel: newProfileLevel, newProfileName: newProfileName, profileName: profileName, profileType: profileType, remark: remark, ruleType: ruleType, templateInfo: templateInfo, quickRule: quickRule, rules: rules), region: region, logger: logger, on: eventLoop)
    }

    /// 修改告警策略
    @inlinable @discardableResult
    public func modifyAlarmPolicy(applyType: String, enable: Int64, instanceIds: [InstanceID], newProfileLevel: String, newProfileName: String, profileName: String, profileType: String, remark: String, ruleType: Int64, templateInfo: [TemplateInfo], quickRule: String? = nil, rules: [AlarmsRules]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmPolicyResponse {
        try await self.modifyAlarmPolicy(.init(applyType: applyType, enable: enable, instanceIds: instanceIds, newProfileLevel: newProfileLevel, newProfileName: newProfileName, profileName: profileName, profileType: profileType, remark: remark, ruleType: ruleType, templateInfo: templateInfo, quickRule: quickRule, rules: rules), region: region, logger: logger, on: eventLoop)
    }
}
