//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// CreateRedisBigKeyAnalysisTask请求参数结构体
    public struct CreateRedisBigKeyAnalysisTaskRequest: TCRequest {
        /// 实例ID。
        public let instanceId: String

        /// 服务产品类型，支持值包括 "redis" - 云数据库 Redis。
        public let product: String

        /// 分片节点序号列表。当列表为空时，选择所有分片节点。
        public let shardIds: [Int64]?

        /// Top Key前缀的分隔符列表。
        /// 目前仅支持以下分割符：[",", ";", ":", "_", "-", "+", "@", "=", "|", "#", "."]，当列表为空时，默认选择所有分隔符。
        public let keyDelimiterList: [String]?

        public init(instanceId: String, product: String, shardIds: [Int64]? = nil, keyDelimiterList: [String]? = nil) {
            self.instanceId = instanceId
            self.product = product
            self.shardIds = shardIds
            self.keyDelimiterList = keyDelimiterList
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case product = "Product"
            case shardIds = "ShardIds"
            case keyDelimiterList = "KeyDelimiterList"
        }
    }

    /// CreateRedisBigKeyAnalysisTask返回参数结构体
    public struct CreateRedisBigKeyAnalysisTaskResponse: TCResponse {
        /// 异步任务ID。
        public let asyncRequestId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case asyncRequestId = "AsyncRequestId"
            case requestId = "RequestId"
        }
    }

    /// 创建redis实例即时大key分析任务
    ///
    /// 即时创建redis实例大key分析任务，限制正在运行的即时分析任务数量默认为5。
    @inlinable
    public func createRedisBigKeyAnalysisTask(_ input: CreateRedisBigKeyAnalysisTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRedisBigKeyAnalysisTaskResponse> {
        self.client.execute(action: "CreateRedisBigKeyAnalysisTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建redis实例即时大key分析任务
    ///
    /// 即时创建redis实例大key分析任务，限制正在运行的即时分析任务数量默认为5。
    @inlinable
    public func createRedisBigKeyAnalysisTask(_ input: CreateRedisBigKeyAnalysisTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRedisBigKeyAnalysisTaskResponse {
        try await self.client.execute(action: "CreateRedisBigKeyAnalysisTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建redis实例即时大key分析任务
    ///
    /// 即时创建redis实例大key分析任务，限制正在运行的即时分析任务数量默认为5。
    @inlinable
    public func createRedisBigKeyAnalysisTask(instanceId: String, product: String, shardIds: [Int64]? = nil, keyDelimiterList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRedisBigKeyAnalysisTaskResponse> {
        self.createRedisBigKeyAnalysisTask(.init(instanceId: instanceId, product: product, shardIds: shardIds, keyDelimiterList: keyDelimiterList), region: region, logger: logger, on: eventLoop)
    }

    /// 创建redis实例即时大key分析任务
    ///
    /// 即时创建redis实例大key分析任务，限制正在运行的即时分析任务数量默认为5。
    @inlinable
    public func createRedisBigKeyAnalysisTask(instanceId: String, product: String, shardIds: [Int64]? = nil, keyDelimiterList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRedisBigKeyAnalysisTaskResponse {
        try await self.createRedisBigKeyAnalysisTask(.init(instanceId: instanceId, product: product, shardIds: shardIds, keyDelimiterList: keyDelimiterList), region: region, logger: logger, on: eventLoop)
    }
}
