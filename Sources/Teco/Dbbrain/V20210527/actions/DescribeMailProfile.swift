//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Dbbrain {
    /// DescribeMailProfile请求参数结构体
    public struct DescribeMailProfileRequest: TCPaginatedRequest {
        /// 配置类型，支持值包括："dbScan_mail_configuration" - 数据库巡检邮件配置，"scheduler_mail_configuration" - 定期生成邮件配置。
        public let profileType: String

        /// 服务产品类型，支持值包括： "mysql" - 云数据库 MySQL， "cynosdb" - 云数据库 TDSQL-C for MySQL，默认为"mysql"。
        public let product: String

        /// 分页偏移量。
        public let offset: Int64

        /// 分页单位，最大支持50。
        public let limit: Int64

        /// 根据邮件配置名称查询，定期发送的邮件配置名称遵循："scheduler_"+{instanceId}的规则。
        public let profileName: String?

        public init(profileType: String, product: String, offset: Int64, limit: Int64, profileName: String? = nil) {
            self.profileType = profileType
            self.product = product
            self.offset = offset
            self.limit = limit
            self.profileName = profileName
        }

        enum CodingKeys: String, CodingKey {
            case profileType = "ProfileType"
            case product = "Product"
            case offset = "Offset"
            case limit = "Limit"
            case profileName = "ProfileName"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeMailProfileResponse) -> DescribeMailProfileRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeMailProfileRequest(profileType: self.profileType, product: self.product, offset: self.offset + .init(response.getItems().count), limit: self.limit, profileName: self.profileName)
        }
    }

    /// DescribeMailProfile返回参数结构体
    public struct DescribeMailProfileResponse: TCPaginatedResponse {
        /// 邮件配置详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let profileList: [UserProfile]?

        /// 邮件配置总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case profileList = "ProfileList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [UserProfile] {
            self.profileList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取邮件配置
    ///
    /// 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
    @inlinable
    public func describeMailProfile(_ input: DescribeMailProfileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMailProfileResponse> {
        self.client.execute(action: "DescribeMailProfile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取邮件配置
    ///
    /// 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
    @inlinable
    public func describeMailProfile(_ input: DescribeMailProfileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMailProfileResponse {
        try await self.client.execute(action: "DescribeMailProfile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取邮件配置
    ///
    /// 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
    @inlinable
    public func describeMailProfile(profileType: String, product: String, offset: Int64, limit: Int64, profileName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMailProfileResponse> {
        let input = DescribeMailProfileRequest(profileType: profileType, product: product, offset: offset, limit: limit, profileName: profileName)
        return self.client.execute(action: "DescribeMailProfile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取邮件配置
    ///
    /// 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
    @inlinable
    public func describeMailProfile(profileType: String, product: String, offset: Int64, limit: Int64, profileName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMailProfileResponse {
        let input = DescribeMailProfileRequest(profileType: profileType, product: product, offset: offset, limit: limit, profileName: profileName)
        return try await self.client.execute(action: "DescribeMailProfile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取邮件配置
    ///
    /// 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
    @inlinable
    public func describeMailProfilePaginated(_ input: DescribeMailProfileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [UserProfile])> {
        self.client.paginate(input: input, region: region, command: self.describeMailProfile, logger: logger, on: eventLoop)
    }

    /// 获取邮件配置
    ///
    /// 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
    @inlinable @discardableResult
    public func describeMailProfilePaginated(_ input: DescribeMailProfileRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeMailProfileResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeMailProfile, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取邮件配置
    ///
    /// 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
    ///
    /// - Returns: `AsyncSequence`s of `UserProfile` and `DescribeMailProfileResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeMailProfilePaginator(_ input: DescribeMailProfileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeMailProfileRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeMailProfile, logger: logger, on: eventLoop)
    }
}
