//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// DescribeRedisProcessList请求参数结构体
    public struct DescribeRedisProcessListRequest: TCRequest {
        /// Redis 实例ID。
        public let instanceId: String

        /// 服务产品类型，支持值包括 "redis" - 云数据库 Redis。
        public let product: String

        /// 查询的Proxy节点数量上限，默认值为20，最大值为50。
        public let limit: Int64?

        /// Proxy节点的偏移量，默认值为0。
        public let offset: Int64?

        public init(instanceId: String, product: String, limit: Int64? = nil, offset: Int64? = nil) {
            self.instanceId = instanceId
            self.product = product
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case product = "Product"
            case limit = "Limit"
            case offset = "Offset"
        }
    }

    /// DescribeRedisProcessList返回参数结构体
    public struct DescribeRedisProcessListResponse: TCResponse {
        /// 该实例的Proxy节点数量，可用于分页查询。
        public let proxyCount: Int64

        /// 实时会话详情列表。
        public let processes: [Process]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case proxyCount = "ProxyCount"
            case processes = "Processes"
            case requestId = "RequestId"
        }
    }

    /// 获取Redis实例proxy实时会话详情
    ///
    /// 获取 Redis 实例所有 proxy 节点的实时会话详情列表。
    @inlinable
    public func describeRedisProcessList(_ input: DescribeRedisProcessListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRedisProcessListResponse> {
        self.client.execute(action: "DescribeRedisProcessList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取Redis实例proxy实时会话详情
    ///
    /// 获取 Redis 实例所有 proxy 节点的实时会话详情列表。
    @inlinable
    public func describeRedisProcessList(_ input: DescribeRedisProcessListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRedisProcessListResponse {
        try await self.client.execute(action: "DescribeRedisProcessList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取Redis实例proxy实时会话详情
    ///
    /// 获取 Redis 实例所有 proxy 节点的实时会话详情列表。
    @inlinable
    public func describeRedisProcessList(instanceId: String, product: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRedisProcessListResponse> {
        self.describeRedisProcessList(.init(instanceId: instanceId, product: product, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 获取Redis实例proxy实时会话详情
    ///
    /// 获取 Redis 实例所有 proxy 节点的实时会话详情列表。
    @inlinable
    public func describeRedisProcessList(instanceId: String, product: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRedisProcessListResponse {
        try await self.describeRedisProcessList(.init(instanceId: instanceId, product: product, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }
}
