//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// KillMySqlThreads请求参数结构体
    public struct KillMySqlThreadsRequest: TCRequestModel {
        /// 实例ID。
        public let instanceId: String

        /// kill会话任务的阶段，取值包括："Prepare"-准备阶段，"Commit"-提交阶段。
        public let stage: String

        /// 需要kill的sql会话ID列表，此参数用于Prepare阶段。
        public let threads: [Int64]?

        /// 执行ID，此参数用于Commit阶段。
        public let sqlExecId: String?

        /// 服务产品类型，支持值包括： "mysql" - 云数据库 MySQL， "cynosdb" - 云数据库 CynosDB  for MySQL，默认为"mysql"。
        public let product: String?

        /// 默认是ture, 记录下kill的记录，为了加快kill，可设置为false。
        public let recordHistory: Bool?

        public init(instanceId: String, stage: String, threads: [Int64]? = nil, sqlExecId: String? = nil, product: String? = nil, recordHistory: Bool? = nil) {
            self.instanceId = instanceId
            self.stage = stage
            self.threads = threads
            self.sqlExecId = sqlExecId
            self.product = product
            self.recordHistory = recordHistory
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case stage = "Stage"
            case threads = "Threads"
            case sqlExecId = "SqlExecId"
            case product = "Product"
            case recordHistory = "RecordHistory"
        }
    }

    /// KillMySqlThreads返回参数结构体
    public struct KillMySqlThreadsResponse: TCResponseModel {
        /// kill完成的sql会话ID列表。
        public let threads: [Int64]

        /// 执行ID， Prepare阶段的任务输出，用于Commit阶段中指定执行kill操作的会话ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sqlExecId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case threads = "Threads"
            case sqlExecId = "SqlExecId"
            case requestId = "RequestId"
        }
    }

    /// 中断MySql会话线程
    ///
    /// 根据会话ID中断当前会话，该接口分为两次提交：第一次为预提交阶段，Stage为"Prepare"，得到的返回值包含SqlExecId；第二次为确认提交， Stage为"Commit"， 将SqlExecId的值作为参数传入，最终终止会话进程。
    @inlinable
    public func killMySqlThreads(_ input: KillMySqlThreadsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<KillMySqlThreadsResponse> {
        self.client.execute(action: "KillMySqlThreads", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 中断MySql会话线程
    ///
    /// 根据会话ID中断当前会话，该接口分为两次提交：第一次为预提交阶段，Stage为"Prepare"，得到的返回值包含SqlExecId；第二次为确认提交， Stage为"Commit"， 将SqlExecId的值作为参数传入，最终终止会话进程。
    @inlinable
    public func killMySqlThreads(_ input: KillMySqlThreadsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> KillMySqlThreadsResponse {
        try await self.client.execute(action: "KillMySqlThreads", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 中断MySql会话线程
    ///
    /// 根据会话ID中断当前会话，该接口分为两次提交：第一次为预提交阶段，Stage为"Prepare"，得到的返回值包含SqlExecId；第二次为确认提交， Stage为"Commit"， 将SqlExecId的值作为参数传入，最终终止会话进程。
    @inlinable
    public func killMySqlThreads(instanceId: String, stage: String, threads: [Int64]? = nil, sqlExecId: String? = nil, product: String? = nil, recordHistory: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<KillMySqlThreadsResponse> {
        self.killMySqlThreads(.init(instanceId: instanceId, stage: stage, threads: threads, sqlExecId: sqlExecId, product: product, recordHistory: recordHistory), region: region, logger: logger, on: eventLoop)
    }

    /// 中断MySql会话线程
    ///
    /// 根据会话ID中断当前会话，该接口分为两次提交：第一次为预提交阶段，Stage为"Prepare"，得到的返回值包含SqlExecId；第二次为确认提交， Stage为"Commit"， 将SqlExecId的值作为参数传入，最终终止会话进程。
    @inlinable
    public func killMySqlThreads(instanceId: String, stage: String, threads: [Int64]? = nil, sqlExecId: String? = nil, product: String? = nil, recordHistory: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> KillMySqlThreadsResponse {
        try await self.killMySqlThreads(.init(instanceId: instanceId, stage: stage, threads: threads, sqlExecId: sqlExecId, product: product, recordHistory: recordHistory), region: region, logger: logger, on: eventLoop)
    }
}
