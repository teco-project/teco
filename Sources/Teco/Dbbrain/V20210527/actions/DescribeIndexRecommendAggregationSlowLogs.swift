//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// DescribeIndexRecommendAggregationSlowLogs请求参数结构体
    public struct DescribeIndexRecommendAggregationSlowLogsRequest: TCRequest {
        /// 服务产品类型，支持值包括："mongodb" - 云数据库 。
        public let product: String

        /// 实例ID。
        public let instanceId: String

        /// 数据库名称。
        public let db: String

        /// 表明。
        public let collection: String

        /// 签名。
        public let signs: [String]

        public init(product: String, instanceId: String, db: String, collection: String, signs: [String]) {
            self.product = product
            self.instanceId = instanceId
            self.db = db
            self.collection = collection
            self.signs = signs
        }

        enum CodingKeys: String, CodingKey {
            case product = "Product"
            case instanceId = "InstanceId"
            case db = "Db"
            case collection = "Collection"
            case signs = "Signs"
        }
    }

    /// DescribeIndexRecommendAggregationSlowLogs返回参数结构体
    public struct DescribeIndexRecommendAggregationSlowLogsResponse: TCResponse {
        /// 查询实例慢查询聚合结果。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aggregation: Aggregation?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case aggregation = "Aggregation"
            case requestId = "RequestId"
        }
    }

    /// 慢查模板概览
    ///
    /// 查询某张表的慢查模板概览
    @inlinable
    public func describeIndexRecommendAggregationSlowLogs(_ input: DescribeIndexRecommendAggregationSlowLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIndexRecommendAggregationSlowLogsResponse> {
        self.client.execute(action: "DescribeIndexRecommendAggregationSlowLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 慢查模板概览
    ///
    /// 查询某张表的慢查模板概览
    @inlinable
    public func describeIndexRecommendAggregationSlowLogs(_ input: DescribeIndexRecommendAggregationSlowLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIndexRecommendAggregationSlowLogsResponse {
        try await self.client.execute(action: "DescribeIndexRecommendAggregationSlowLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 慢查模板概览
    ///
    /// 查询某张表的慢查模板概览
    @inlinable
    public func describeIndexRecommendAggregationSlowLogs(product: String, instanceId: String, db: String, collection: String, signs: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIndexRecommendAggregationSlowLogsResponse> {
        self.describeIndexRecommendAggregationSlowLogs(.init(product: product, instanceId: instanceId, db: db, collection: collection, signs: signs), region: region, logger: logger, on: eventLoop)
    }

    /// 慢查模板概览
    ///
    /// 查询某张表的慢查模板概览
    @inlinable
    public func describeIndexRecommendAggregationSlowLogs(product: String, instanceId: String, db: String, collection: String, signs: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIndexRecommendAggregationSlowLogsResponse {
        try await self.describeIndexRecommendAggregationSlowLogs(.init(product: product, instanceId: instanceId, db: db, collection: collection, signs: signs), region: region, logger: logger, on: eventLoop)
    }
}
