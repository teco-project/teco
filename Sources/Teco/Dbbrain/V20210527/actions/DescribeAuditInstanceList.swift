//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dbbrain {
    /// DescribeAuditInstanceList请求参数结构体
    public struct DescribeAuditInstanceListRequest: TCPaginatedRequest {
        /// 服务产品类型，支持值包括： "dcdb" - 云数据库 Tdsql， "mariadb" - 云数据库 MariaDB。
        public let product: String

        /// 与Product保持一致。如："dcdb" ,"mariadb"。
        public let nodeRequestType: String

        /// 审计状态标识，0-未开通审计；1-已开通审计，默认为0。
        public let auditSwitch: Int64?

        /// 偏移量，默认为0。
        public let offset: Int64?

        /// 查询数目，默认为20，最大为100。
        public let limit: Int64?

        /// 查询实例的搜索条件。
        public let filters: [AuditInstanceFilter]?

        public init(product: String, nodeRequestType: String, auditSwitch: Int64? = nil, offset: Int64? = nil, limit: Int64? = nil, filters: [AuditInstanceFilter]? = nil) {
            self.product = product
            self.nodeRequestType = nodeRequestType
            self.auditSwitch = auditSwitch
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case product = "Product"
            case nodeRequestType = "NodeRequestType"
            case auditSwitch = "AuditSwitch"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAuditInstanceListResponse) -> DescribeAuditInstanceListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(product: self.product, nodeRequestType: self.nodeRequestType, auditSwitch: self.auditSwitch, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeAuditInstanceList返回参数结构体
    public struct DescribeAuditInstanceListResponse: TCPaginatedResponse {
        /// 符合条件的实例个数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 实例详情。
        public let items: [AuditInstance]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
            case requestId = "RequestId"
        }

        /// Extract the returned ``AuditInstance`` list from the paginated response.
        public func getItems() -> [AuditInstance] {
            self.items
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询实例列表
    @inlinable
    public func describeAuditInstanceList(_ input: DescribeAuditInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAuditInstanceListResponse> {
        self.client.execute(action: "DescribeAuditInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例列表
    @inlinable
    public func describeAuditInstanceList(_ input: DescribeAuditInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAuditInstanceListResponse {
        try await self.client.execute(action: "DescribeAuditInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例列表
    @inlinable
    public func describeAuditInstanceList(product: String, nodeRequestType: String, auditSwitch: Int64? = nil, offset: Int64? = nil, limit: Int64? = nil, filters: [AuditInstanceFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAuditInstanceListResponse> {
        self.describeAuditInstanceList(.init(product: product, nodeRequestType: nodeRequestType, auditSwitch: auditSwitch, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例列表
    @inlinable
    public func describeAuditInstanceList(product: String, nodeRequestType: String, auditSwitch: Int64? = nil, offset: Int64? = nil, limit: Int64? = nil, filters: [AuditInstanceFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAuditInstanceListResponse {
        try await self.describeAuditInstanceList(.init(product: product, nodeRequestType: nodeRequestType, auditSwitch: auditSwitch, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例列表
    @inlinable
    public func describeAuditInstanceListPaginated(_ input: DescribeAuditInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [AuditInstance])> {
        self.client.paginate(input: input, region: region, command: self.describeAuditInstanceList, logger: logger, on: eventLoop)
    }

    /// 查询实例列表
    @inlinable @discardableResult
    public func describeAuditInstanceListPaginated(_ input: DescribeAuditInstanceListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAuditInstanceListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAuditInstanceList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询实例列表
    ///
    /// - Returns: `AsyncSequence`s of ``AuditInstance`` and ``DescribeAuditInstanceListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAuditInstanceListPaginator(_ input: DescribeAuditInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAuditInstanceListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAuditInstanceList, logger: logger, on: eventLoop)
    }
}
