//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Dbbrain {
    /// DescribeDBDiagHistory请求参数结构体
    public struct DescribeDBDiagHistoryRequest: TCRequestModel {
        /// 实例 ID 。
        public let instanceId: String
        
        /// 开始时间，如“2019-09-10 12:13:14”。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var startTime: Date
        
        /// 结束时间，如“2019-09-11 12:13:14”，结束时间与开始时间的间隔最大可为2天。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var endTime: Date
        
        /// 服务产品类型，支持值包括： "mysql" - 云数据库 MySQL， "cynosdb" - 云数据库 CynosDB  for MySQL，默认为"mysql"。
        public let product: String?
        
        public init (instanceId: String, startTime: Date, endTime: Date, product: String? = nil) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
            self.product = product
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case product = "Product"
        }
    }
    
    /// DescribeDBDiagHistory返回参数结构体
    public struct DescribeDBDiagHistoryResponse: TCResponseModel {
        /// 事件描述。
        public let events: [DiagHistoryEventItem]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case events = "Events"
            case requestId = "RequestId"
        }
    }
    
    /// 获取实例诊断历史
    ///
    /// 获取实例诊断事件的列表。
    @inlinable
    public func describeDBDiagHistory(_ input: DescribeDBDiagHistoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDBDiagHistoryResponse > {
        self.client.execute(action: "DescribeDBDiagHistory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取实例诊断历史
    ///
    /// 获取实例诊断事件的列表。
    @inlinable
    public func describeDBDiagHistory(_ input: DescribeDBDiagHistoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBDiagHistoryResponse {
        try await self.client.execute(action: "DescribeDBDiagHistory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取实例诊断历史
    ///
    /// 获取实例诊断事件的列表。
    @inlinable
    public func describeDBDiagHistory(instanceId: String, startTime: Date, endTime: Date, product: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDBDiagHistoryResponse > {
        self.describeDBDiagHistory(DescribeDBDiagHistoryRequest(instanceId: instanceId, startTime: startTime, endTime: endTime, product: product), logger: logger, on: eventLoop)
    }
    
    /// 获取实例诊断历史
    ///
    /// 获取实例诊断事件的列表。
    @inlinable
    public func describeDBDiagHistory(instanceId: String, startTime: Date, endTime: Date, product: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBDiagHistoryResponse {
        try await self.describeDBDiagHistory(DescribeDBDiagHistoryRequest(instanceId: instanceId, startTime: startTime, endTime: endTime, product: product), logger: logger, on: eventLoop)
    }
}
