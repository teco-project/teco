//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcaplusdb {
    /// DeleteBackupRecords请求参数结构体
    public struct DeleteBackupRecordsRequest: TCRequestModel {
        /// 待删除备份记录的所在集群ID
        public let clusterId: String

        /// 待删除备份记录的详情
        public let backupRecords: [BackupRecords]

        public init(clusterId: String, backupRecords: [BackupRecords]) {
            self.clusterId = clusterId
            self.backupRecords = backupRecords
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case backupRecords = "BackupRecords"
        }
    }

    /// DeleteBackupRecords返回参数结构体
    public struct DeleteBackupRecordsResponse: TCResponseModel {
        /// TaskId由 AppInstanceId-taskId 组成，以区分不同集群的任务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 删除手工备份
    @inlinable
    public func deleteBackupRecords(_ input: DeleteBackupRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBackupRecordsResponse> {
        self.client.execute(action: "DeleteBackupRecords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除手工备份
    @inlinable
    public func deleteBackupRecords(_ input: DeleteBackupRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBackupRecordsResponse {
        try await self.client.execute(action: "DeleteBackupRecords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除手工备份
    @inlinable
    public func deleteBackupRecords(clusterId: String, backupRecords: [BackupRecords], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBackupRecordsResponse> {
        self.deleteBackupRecords(.init(clusterId: clusterId, backupRecords: backupRecords), region: region, logger: logger, on: eventLoop)
    }

    /// 删除手工备份
    @inlinable
    public func deleteBackupRecords(clusterId: String, backupRecords: [BackupRecords], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBackupRecordsResponse {
        try await self.deleteBackupRecords(.init(clusterId: clusterId, backupRecords: backupRecords), region: region, logger: logger, on: eventLoop)
    }
}
