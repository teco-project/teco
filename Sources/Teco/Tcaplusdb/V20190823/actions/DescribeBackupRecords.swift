//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcaplusdb {
    /// DescribeBackupRecords请求参数结构体
    public struct DescribeBackupRecordsRequest: TCPaginatedRequest {
        /// 集群ID，用于获取指定集群的单据
        public let clusterId: String?

        /// 分页
        public let limit: Int64?

        /// 分页
        public let offset: Int64?

        /// 表格组id，用于过滤
        public let tableGroupId: String?

        /// 表格名，用于过滤
        public let tableName: String?

        public init(clusterId: String? = nil, limit: Int64? = nil, offset: Int64? = nil, tableGroupId: String? = nil, tableName: String? = nil) {
            self.clusterId = clusterId
            self.limit = limit
            self.offset = offset
            self.tableGroupId = tableGroupId
            self.tableName = tableName
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case limit = "Limit"
            case offset = "Offset"
            case tableGroupId = "TableGroupId"
            case tableName = "TableName"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeBackupRecordsResponse) -> DescribeBackupRecordsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(clusterId: self.clusterId, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), tableGroupId: self.tableGroupId, tableName: self.tableName)
        }
    }

    /// DescribeBackupRecords返回参数结构体
    public struct DescribeBackupRecordsResponse: TCPaginatedResponse {
        /// 备份记录详情
        public let backupRecords: [BackupRecords]

        /// 返回记录条数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case backupRecords = "BackupRecords"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``BackupRecords`` list from the paginated response.
        public func getItems() -> [BackupRecords] {
            self.backupRecords
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询备份记录
    ///
    /// 查询备份记录
    ///
    /// 查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
    /// 查询集群+表格组级别时， 将TableName设置为"-1"
    /// 查询集群+表格组+表格级别时， 都不能设置为“-1”
    @inlinable
    public func describeBackupRecords(_ input: DescribeBackupRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupRecordsResponse> {
        self.client.execute(action: "DescribeBackupRecords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询备份记录
    ///
    /// 查询备份记录
    ///
    /// 查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
    /// 查询集群+表格组级别时， 将TableName设置为"-1"
    /// 查询集群+表格组+表格级别时， 都不能设置为“-1”
    @inlinable
    public func describeBackupRecords(_ input: DescribeBackupRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupRecordsResponse {
        try await self.client.execute(action: "DescribeBackupRecords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询备份记录
    ///
    /// 查询备份记录
    ///
    /// 查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
    /// 查询集群+表格组级别时， 将TableName设置为"-1"
    /// 查询集群+表格组+表格级别时， 都不能设置为“-1”
    @inlinable
    public func describeBackupRecords(clusterId: String? = nil, limit: Int64? = nil, offset: Int64? = nil, tableGroupId: String? = nil, tableName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupRecordsResponse> {
        self.describeBackupRecords(.init(clusterId: clusterId, limit: limit, offset: offset, tableGroupId: tableGroupId, tableName: tableName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份记录
    ///
    /// 查询备份记录
    ///
    /// 查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
    /// 查询集群+表格组级别时， 将TableName设置为"-1"
    /// 查询集群+表格组+表格级别时， 都不能设置为“-1”
    @inlinable
    public func describeBackupRecords(clusterId: String? = nil, limit: Int64? = nil, offset: Int64? = nil, tableGroupId: String? = nil, tableName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupRecordsResponse {
        try await self.describeBackupRecords(.init(clusterId: clusterId, limit: limit, offset: offset, tableGroupId: tableGroupId, tableName: tableName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份记录
    ///
    /// 查询备份记录
    ///
    /// 查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
    /// 查询集群+表格组级别时， 将TableName设置为"-1"
    /// 查询集群+表格组+表格级别时， 都不能设置为“-1”
    @inlinable
    public func describeBackupRecordsPaginated(_ input: DescribeBackupRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [BackupRecords])> {
        self.client.paginate(input: input, region: region, command: self.describeBackupRecords, logger: logger, on: eventLoop)
    }

    /// 查询备份记录
    ///
    /// 查询备份记录
    ///
    /// 查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
    /// 查询集群+表格组级别时， 将TableName设置为"-1"
    /// 查询集群+表格组+表格级别时， 都不能设置为“-1”
    @inlinable @discardableResult
    public func describeBackupRecordsPaginated(_ input: DescribeBackupRecordsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeBackupRecordsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeBackupRecords, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询备份记录
    ///
    /// 查询备份记录
    ///
    /// 查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
    /// 查询集群+表格组级别时， 将TableName设置为"-1"
    /// 查询集群+表格组+表格级别时， 都不能设置为“-1”
    ///
    /// - Returns: `AsyncSequence`s of ``BackupRecords`` and ``DescribeBackupRecordsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeBackupRecordsPaginator(_ input: DescribeBackupRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeBackupRecordsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeBackupRecords, logger: logger, on: eventLoop)
    }
}
