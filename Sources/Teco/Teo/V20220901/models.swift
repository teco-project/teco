//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Teo {
    /// 中国大陆加速优化配置。
    public struct AccelerateMainland: TCInputModel, TCOutputModel {
        /// 是否开启中国大陆加速优化配置，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 加速类型
    public struct AccelerateType: TCInputModel, TCOutputModel {
        /// 加速开关。取值范围：
        /// - on：打开;
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 加速域名
    public struct AccelerationDomain: TCOutputModel {
        /// 源站信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let originDetail: OriginDetail?

        /// 创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdOn: Date?

        /// 加速域名名称。
        public let domainName: String?

        /// 修改时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifiedOn: Date?

        /// 站点 ID。
        public let zoneId: String?

        /// 加速域名状态，取值有：
        /// - online：已生效；
        /// - process：部署中；
        /// - offline：已停用；
        /// - forbidden：已封禁；
        /// - init：未生效，待激活站点；
        public let domainStatus: String?

        /// CNAME 地址。
        public let cname: String?

        /// 加速域名归属权验证状态，取值有：
        /// - pending：待验证；
        /// - finished：已完成验证。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let identificationStatus: String?

        enum CodingKeys: String, CodingKey {
            case originDetail = "OriginDetail"
            case createdOn = "CreatedOn"
            case domainName = "DomainName"
            case modifiedOn = "ModifiedOn"
            case zoneId = "ZoneId"
            case domainStatus = "DomainStatus"
            case cname = "Cname"
            case identificationStatus = "IdentificationStatus"
        }
    }

    /// 精准防护条件
    public struct AclCondition: TCInputModel, TCOutputModel {
        /// 匹配字段，取值有：
        /// - host：请求域名；
        /// - sip：客户端IP；
        /// - ua：User-Agent；
        /// - cookie：会话 Cookie；
        /// - cgi：CGI 脚本；
        /// - xff：XFF 扩展头部；
        /// - url：请求 URL；
        /// - accept：请求内容类型；
        /// - method：请求方式；
        /// - header：请求头部；
        /// - app_proto：应用层协议；
        /// - sip_proto：网络层协议；
        /// - uabot：UA 特征规则，仅bot自定义规则可用；
        /// - idcid：IDC 规则，仅bot自定义规则可用；
        /// - sipbot：搜索引擎规则，仅bot自定义规则可用；
        /// - portrait：画像分析，仅bot自定义规则可用；
        /// - header_seq：请求头顺序，仅bot自定义规则可用；
        /// - hdr：请求正文，仅Web防护自定义规则可用。
        public let matchFrom: String

        /// 匹配字符串。当 MatchFrom 为 header 时，可以填入 header 的 key 作为参数。
        public let matchParam: String

        /// 匹配关系，取值有：
        /// - equal：字符串等于；
        /// - not_equal：数值不等于；
        /// - include：字符包含；
        /// - not_include：字符不包含；
        /// - match：ip匹配；
        /// - not_match：ip不匹配；
        /// - include_area：地域包含；
        /// - is_empty：存在字段但值为空；
        /// - not_exists：不存在关键字段；
        /// - regexp：正则匹配；
        /// - len_gt：数值大于；
        /// - len_lt：数值小于；
        /// - len_eq：数值等于；
        /// - match_prefix：前缀匹配；
        /// - match_suffix：后缀匹配；
        /// - wildcard：通配符。
        public let `operator`: String

        /// 匹配内容。
        public let matchContent: String

        public init(matchFrom: String, matchParam: String, operator: String, matchContent: String) {
            self.matchFrom = matchFrom
            self.matchParam = matchParam
            self.operator = `operator`
            self.matchContent = matchContent
        }

        enum CodingKeys: String, CodingKey {
            case matchFrom = "MatchFrom"
            case matchParam = "MatchParam"
            case `operator` = "Operator"
            case matchContent = "MatchContent"
        }
    }

    /// ACL配置
    public struct AclConfig: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 用户自定义规则。
        public let aclUserRules: [AclUserRule]

        /// 托管定制规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customizes: [AclUserRule]?

        public init(switch: String, aclUserRules: [AclUserRule], customizes: [AclUserRule]? = nil) {
            self.switch = `switch`
            self.aclUserRules = aclUserRules
            self.customizes = customizes
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case aclUserRules = "AclUserRules"
            case customizes = "Customizes"
        }
    }

    /// 用户自定义规则
    public struct AclUserRule: TCInputModel, TCOutputModel {
        /// 规则名。
        public let ruleName: String

        /// 处罚动作，取值有：
        /// - trans：放行；
        /// - drop：拦截；
        /// - monitor：观察；
        /// - ban：IP封禁；
        /// - redirect：重定向；
        /// - page：指定页面；
        /// - alg：Javascript挑战。
        public let action: String

        /// 规则状态，取值有：
        /// - on：生效；
        /// - off：失效。
        public let ruleStatus: String

        /// 自定义规则。
        public let aclConditions: [AclCondition]

        /// 规则优先级，取值范围0-100。
        public let rulePriority: Int64

        /// 规则Id。仅出参使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleID: Int64?

        /// 更新时间。仅出参使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// ip封禁的惩罚时间，取值范围0-2天。默认为0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let punishTime: Int64?

        /// ip封禁的惩罚时间单位，取值有：
        /// - second：秒；
        /// - minutes：分；
        /// - hour：小时。
        /// 默认为second。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let punishTimeUnit: String?

        /// 自定义返回页面的名称。默认为空字符串。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 自定义返回页面的实例id。默认为0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageId: Int64?

        /// 重定向时候的地址，必须为本用户接入的站点子域名。默认为空字符串。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let redirectUrl: String?

        /// 重定向时候的返回码。默认为0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let responseCode: Int64?

        public init(ruleName: String, action: String, ruleStatus: String, aclConditions: [AclCondition], rulePriority: Int64, ruleID: Int64? = nil, updateTime: String? = nil, punishTime: Int64? = nil, punishTimeUnit: String? = nil, name: String? = nil, pageId: Int64? = nil, redirectUrl: String? = nil, responseCode: Int64? = nil) {
            self.ruleName = ruleName
            self.action = action
            self.ruleStatus = ruleStatus
            self.aclConditions = aclConditions
            self.rulePriority = rulePriority
            self.ruleID = ruleID
            self.updateTime = updateTime
            self.punishTime = punishTime
            self.punishTimeUnit = punishTimeUnit
            self.name = name
            self.pageId = pageId
            self.redirectUrl = redirectUrl
            self.responseCode = responseCode
        }

        enum CodingKeys: String, CodingKey {
            case ruleName = "RuleName"
            case action = "Action"
            case ruleStatus = "RuleStatus"
            case aclConditions = "AclConditions"
            case rulePriority = "RulePriority"
            case ruleID = "RuleID"
            case updateTime = "UpdateTime"
            case punishTime = "PunishTime"
            case punishTimeUnit = "PunishTimeUnit"
            case name = "Name"
            case pageId = "PageId"
            case redirectUrl = "RedirectUrl"
            case responseCode = "ResponseCode"
        }
    }

    /// 规则引擎功能项操作，对于一种功能只对应下面三种类型的其中一种，RuleAction 数组中的每一项只能是其中一个类型，更多功能项的填写规范可调用接口 [查询规则引擎的设置参数](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) 查看。
    public struct Action: TCInputModel, TCOutputModel {
        /// 常规功能操作，选择该类型的功能项有：
        /// - 访问URL 重写（AccessUrlRedirect）；
        /// - 回源 URL 重写 （UpstreamUrlRedirect）；
        /// - QUIC（QUIC）；
        /// - WebSocket （WebSocket）；
        /// - 视频拖拽（VideoSeek）；
        /// - Token 鉴权（Authentication）；
        /// - 自定义CacheKey（CacheKey）；
        /// - 节点缓存 TTL （Cache）；
        /// - 浏览器缓存 TTL（MaxAge）；
        /// - 离线缓存（OfflineCache）；
        /// - 智能加速（SmartRouting）；
        /// - 分片回源（RangeOriginPull）；
        /// - HTTP/2 回源（UpstreamHttp2）；
        /// - Host Header 重写（HostHeader）；
        /// - 强制 HTTPS（ForceRedirect）；
        /// - 回源 HTTPS（OriginPullProtocol）；
        /// - 缓存预刷新（CachePrefresh）；
        /// - 智能压缩（Compression）；
        /// - Hsts；
        /// - ClientIpHeader；
        /// - SslTlsSecureConf；
        /// - OcspStapling；
        /// - HTTP/2 访问（Http2）；
        /// - 回源跟随重定向(UpstreamFollowRedirect)；
        /// - 修改源站(Origin)。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let normalAction: NormalAction?

        /// 带有请求头/响应头的功能操作，选择该类型的功能项有：
        /// - 修改 HTTP 请求头（RequestHeader）；
        /// - 修改HTTP响应头（ResponseHeader）。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rewriteAction: RewriteAction?

        /// 带有状态码的功能操作，选择该类型的功能项有：
        /// - 自定义错误页面（ErrorPage）；
        /// - 状态码缓存 TTL（StatusCodeCache）。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let codeAction: CodeAction?

        public init(normalAction: NormalAction? = nil, rewriteAction: RewriteAction? = nil, codeAction: CodeAction? = nil) {
            self.normalAction = normalAction
            self.rewriteAction = rewriteAction
            self.codeAction = codeAction
        }

        enum CodingKeys: String, CodingKey {
            case normalAction = "NormalAction"
            case rewriteAction = "RewriteAction"
            case codeAction = "CodeAction"
        }
    }

    /// 描述键值对过滤器，用于条件过滤查询，支持模糊查询。例如过滤ID、名称、状态等。
    /// 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
    /// 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct AdvancedFilter: TCInputModel {
        /// 需要过滤的字段。
        public let name: String

        /// 字段的过滤值。
        public let values: [String]

        /// 是否启用模糊查询。
        public let fuzzy: Bool?

        public init(name: String, values: [String], fuzzy: Bool? = nil) {
            self.name = name
            self.values = values
            self.fuzzy = fuzzy
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case fuzzy = "Fuzzy"
        }
    }

    /// AI规则引擎防护
    public struct AiRule: TCInputModel, TCOutputModel {
        /// AI规则引擎状态，取值有：
        /// - smart_status_close：关闭；
        /// - smart_status_open：拦截处置；
        /// - smart_status_observe：观察处置。
        public let mode: String

        public init(mode: String) {
            self.mode = mode
        }

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
        }
    }

    /// Bot主动特征识别客户端行为校验。
    public struct AlgDetectJS: TCInputModel, TCOutputModel {
        /// 操作名称。
        public let name: String?

        /// 工作量证明 (proof_Of-Work)校验强度，默认low，取值有：
        /// - low：低；
        /// - middle：中；
        /// - high：高。
        public let workLevel: String?

        /// 执行方式，js延迟执行的时间。单位为ms，默认500，取值：0～1000。
        public let executeMode: Int64?

        /// 客户端末启用JS（末完成检测）统计周期。单位为秒，默认10，取值：5～3600。
        public let invalidStatTime: Int64?

        /// 客户端末启用JS（末完成检测）触发阈值。单位为次，默认300，取值：1～100000000。
        public let invalidThreshold: Int64?

        /// Bot主动特征识别客户端行为校验结果。
        public let algDetectResults: [AlgDetectResult]?

        public init(name: String? = nil, workLevel: String? = nil, executeMode: Int64? = nil, invalidStatTime: Int64? = nil, invalidThreshold: Int64? = nil, algDetectResults: [AlgDetectResult]? = nil) {
            self.name = name
            self.workLevel = workLevel
            self.executeMode = executeMode
            self.invalidStatTime = invalidStatTime
            self.invalidThreshold = invalidThreshold
            self.algDetectResults = algDetectResults
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case workLevel = "WorkLevel"
            case executeMode = "ExecuteMode"
            case invalidStatTime = "InvalidStatTime"
            case invalidThreshold = "InvalidThreshold"
            case algDetectResults = "AlgDetectResults"
        }
    }

    /// Bot主动特征识别校验结果。
    public struct AlgDetectResult: TCInputModel, TCOutputModel {
        /// 校验结果，取值有：
        /// - invalid：不合法Cookie；
        /// - cookie_empty：末携带Cookie或Cookie己过期；
        /// - js_empty：客户端末启用JS（末完成检测）；
        /// - low：会话速率和周期特征校验低风险；
        /// - middle：会话速率和周期特征校验中风险；
        /// - high：会话速率和周期特征校验高风险；
        /// - timeout：检测超时时长；
        /// - not_browser：不合法浏览器；
        /// - is_bot：Bot客户端。
        public let result: String?

        /// 处罚动作，取值有：
        /// - drop：拦截；
        /// - monitor：观察；
        /// - silence：静默；
        /// - shortdelay：（短时间）等待后响应；
        /// - longdelay：（长时间）等待后响应。
        public let action: String?

        public init(result: String? = nil, action: String? = nil) {
            self.result = result
            self.action = action
        }

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case action = "Action"
        }
    }

    /// Bot主动特征识别规则。
    public struct AlgDetectRule: TCInputModel, TCOutputModel {
        /// 规则id。
        public let ruleID: Int64?

        /// 规则名。
        public let ruleName: String?

        /// 规则开关。
        public let `switch`: String?

        /// 自定义规则。
        public let algConditions: [AclCondition]?

        /// Cookie校验和会话行为分析。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let algDetectSession: AlgDetectSession?

        /// 客户端行为校验。
        public let algDetectJS: [AlgDetectJS]?

        /// 更新时间。仅出参使用。
        public let updateTime: String?

        public init(ruleID: Int64? = nil, ruleName: String? = nil, switch: String? = nil, algConditions: [AclCondition]? = nil, algDetectSession: AlgDetectSession? = nil, algDetectJS: [AlgDetectJS]? = nil, updateTime: String? = nil) {
            self.ruleID = ruleID
            self.ruleName = ruleName
            self.switch = `switch`
            self.algConditions = algConditions
            self.algDetectSession = algDetectSession
            self.algDetectJS = algDetectJS
            self.updateTime = updateTime
        }

        enum CodingKeys: String, CodingKey {
            case ruleID = "RuleID"
            case ruleName = "RuleName"
            case `switch` = "Switch"
            case algConditions = "AlgConditions"
            case algDetectSession = "AlgDetectSession"
            case algDetectJS = "AlgDetectJS"
            case updateTime = "UpdateTime"
        }
    }

    /// Cookie校验与会话跟踪。
    public struct AlgDetectSession: TCInputModel, TCOutputModel {
        /// 操作名称。
        public let name: String?

        /// 校验方式，默认update_detect，取值有：
        /// - detect：仅校验；
        /// - update_detect：更新Cookie并校验。
        public let detectMode: String?

        /// 会话速率和周期特征校验开关，默认off，取值有：
        /// - off：关闭；
        /// - on：打开。
        public let sessionAnalyzeSwitch: String?

        /// 校验结果为未携带Cookie或Cookie已过期的统计周期。单位为秒，默认10，取值：5～3600。
        public let invalidStatTime: Int64?

        /// 校验结果为未携带Cookie或Cookie已过期的触发阈值。单位为次，默认300，取值：1～100000000。
        public let invalidThreshold: Int64?

        /// Cookie校验校验结果。
        public let algDetectResults: [AlgDetectResult]?

        /// 会话速率和周期特征校验结果。
        public let sessionBehaviors: [AlgDetectResult]?

        public init(name: String? = nil, detectMode: String? = nil, sessionAnalyzeSwitch: String? = nil, invalidStatTime: Int64? = nil, invalidThreshold: Int64? = nil, algDetectResults: [AlgDetectResult]? = nil, sessionBehaviors: [AlgDetectResult]? = nil) {
            self.name = name
            self.detectMode = detectMode
            self.sessionAnalyzeSwitch = sessionAnalyzeSwitch
            self.invalidStatTime = invalidStatTime
            self.invalidThreshold = invalidThreshold
            self.algDetectResults = algDetectResults
            self.sessionBehaviors = sessionBehaviors
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case detectMode = "DetectMode"
            case sessionAnalyzeSwitch = "SessionAnalyzeSwitch"
            case invalidStatTime = "InvalidStatTime"
            case invalidThreshold = "InvalidThreshold"
            case algDetectResults = "AlgDetectResults"
            case sessionBehaviors = "SessionBehaviors"
        }
    }

    /// 别称域名信息。
    public struct AliasDomain: TCOutputModel {
        /// 别称域名名称。
        public let aliasName: String

        /// 站点 ID。
        public let zoneId: String

        /// 目标域名名称。
        public let targetName: String

        /// 别称域名状态，取值有：
        /// - active：已生效；
        /// - pending：部署中；
        /// - conflict：被找回。
        /// - stop：已停用；
        public let status: String

        /// 封禁模式，取值有：
        /// - 0：未封禁；
        /// - 11：合规封禁；
        /// - 14：未备案封禁。
        public let forbidMode: Int64

        /// 别称域名创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdOn: Date

        /// 别称域名修改时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifiedOn: Date

        enum CodingKeys: String, CodingKey {
            case aliasName = "AliasName"
            case zoneId = "ZoneId"
            case targetName = "TargetName"
            case status = "Status"
            case forbidMode = "ForbidMode"
            case createdOn = "CreatedOn"
            case modifiedOn = "ModifiedOn"
        }
    }

    /// 应用代理实例
    public struct ApplicationProxy: TCOutputModel {
        /// 站点ID。
        public let zoneId: String

        /// 站点名称。
        public let zoneName: String

        /// 代理ID。
        public let proxyId: String

        /// 当ProxyType=hostname时，表示域名或子域名；
        /// 当ProxyType=instance时，表示代理名称。
        public let proxyName: String

        /// 四层代理模式，取值有：
        /// - hostname：表示子域名模式；
        /// - instance：表示实例模式。
        public let proxyType: String

        /// 调度模式，取值有：
        /// - ip：表示Anycast IP调度；
        /// - domain：表示CNAME调度。
        public let platType: String

        /// 加速区域，取值有：
        /// - mainland：中国大陆境内;
        /// - overseas：全球（不含中国大陆）。
        ///
        /// 默认值：overseas
        public let area: String

        /// 是否开启安全，取值有：
        /// - 0：关闭安全；
        /// - 1：开启安全。
        public let securityType: Int64

        /// 是否开启加速，取值有：
        /// - 0：关闭加速；
        /// - 1：开启加速。
        public let accelerateType: Int64

        /// 会话保持时间。
        public let sessionPersistTime: UInt64

        /// 状态，取值有：
        /// - online：启用；
        /// - offline：停用；
        /// - progress：部署中；
        /// - stopping：停用中；
        /// - fail：部署失败/停用失败。
        public let status: String

        /// 封禁状态，取值有：
        /// - banned：已封禁;
        /// - banning：封禁中；
        /// - recover：已解封；
        /// - recovering：解封禁中。
        public let banStatus: String

        /// 调度信息。
        public let scheduleValue: [String]

        /// 当ProxyType=hostname时：
        /// 表示代理加速唯一标识。
        public let hostId: String

        /// Ipv6访问配置。
        public let ipv6: Ipv6

        /// 更新时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date

        /// 规则列表。
        public let applicationProxyRules: [ApplicationProxyRule]

        /// 中国大陆加速优化配置。
        public let accelerateMainland: AccelerateMainland

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case proxyId = "ProxyId"
            case proxyName = "ProxyName"
            case proxyType = "ProxyType"
            case platType = "PlatType"
            case area = "Area"
            case securityType = "SecurityType"
            case accelerateType = "AccelerateType"
            case sessionPersistTime = "SessionPersistTime"
            case status = "Status"
            case banStatus = "BanStatus"
            case scheduleValue = "ScheduleValue"
            case hostId = "HostId"
            case ipv6 = "Ipv6"
            case updateTime = "UpdateTime"
            case applicationProxyRules = "ApplicationProxyRules"
            case accelerateMainland = "AccelerateMainland"
        }
    }

    /// 应用代理规则
    public struct ApplicationProxyRule: TCInputModel, TCOutputModel {
        /// 协议，取值有：
        /// - TCP：TCP协议；
        /// - UDP：UDP协议。
        public let proto: String

        /// 端口，支持格式：
        /// - 单个端口，如：80。
        /// - 端口段，如：81-82。表示81，82两个端口。
        ///
        /// 注意：一条规则最多可填写20个端口。
        public let port: [String]

        /// 源站类型，取值有：
        /// - custom：手动添加；
        /// - origins：源站组。
        public let originType: String

        /// 源站信息：
        /// - 当 OriginType 为 custom 时，表示一个或多个源站，如`["8.8.8.8","9.9.9.9"]` 或 `OriginValue=["test.com"]`；
        /// - 当 OriginType 为 origins 时，要求有且仅有一个元素，表示源站组ID，如`["origin-537f5b41-162a-11ed-abaa-525400c5da15"]`。
        public let originValue: [String]

        /// 规则ID。
        public let ruleId: String?

        /// 状态，取值有：
        /// - online：启用；
        /// - offline：停用；
        /// - progress：部署中；
        /// - stopping：停用中；
        /// - fail：部署失败/停用失败。
        public let status: String?

        /// 传递客户端IP，取值有：
        /// - TOA：TOA（仅Proto=TCP时可选）；
        /// - PPV1：Proxy Protocol传递，协议版本V1（仅Proto=TCP时可选）；
        /// - PPV2：Proxy Protocol传递，协议版本V2；
        /// - OFF：不传递。
        /// 默认值：OFF。
        public let forwardClientIp: String?

        /// 是否开启会话保持，取值有：
        /// - true：开启；
        /// - false：关闭。
        /// 默认值：false。
        public let sessionPersist: Bool?

        /// 会话保持的时间，只有当SessionPersist为true时，该值才会生效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionPersistTime: UInt64?

        /// 源站端口，支持格式：
        /// - 单端口，如：80。
        /// - 端口段：81-82，表示81，82两个端口。
        public let originPort: String?

        /// 规则标签。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleTag: String?

        public init(proto: String, port: [String], originType: String, originValue: [String], ruleId: String? = nil, status: String? = nil, forwardClientIp: String? = nil, sessionPersist: Bool? = nil, sessionPersistTime: UInt64? = nil, originPort: String? = nil, ruleTag: String? = nil) {
            self.proto = proto
            self.port = port
            self.originType = originType
            self.originValue = originValue
            self.ruleId = ruleId
            self.status = status
            self.forwardClientIp = forwardClientIp
            self.sessionPersist = sessionPersist
            self.sessionPersistTime = sessionPersistTime
            self.originPort = originPort
            self.ruleTag = ruleTag
        }

        enum CodingKeys: String, CodingKey {
            case proto = "Proto"
            case port = "Port"
            case originType = "OriginType"
            case originValue = "OriginValue"
            case ruleId = "RuleId"
            case status = "Status"
            case forwardClientIp = "ForwardClientIp"
            case sessionPersist = "SessionPersist"
            case sessionPersistTime = "SessionPersistTime"
            case originPort = "OriginPort"
            case ruleTag = "RuleTag"
        }
    }

    /// 站点归属信息
    public struct AscriptionInfo: TCOutputModel {
        /// 主机记录。
        public let subdomain: String

        /// 记录类型。
        public let recordType: String

        /// 记录值。
        public let recordValue: String

        enum CodingKeys: String, CodingKey {
            case subdomain = "Subdomain"
            case recordType = "RecordType"
            case recordValue = "RecordValue"
        }
    }

    /// 安全Bot配置
    public struct BotConfig: TCInputModel, TCOutputModel {
        /// bot开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 通用详细基础规则。如果为null，默认使用历史配置。
        public let botManagedRule: BotManagedRule?

        /// 用户画像规则。如果为null，默认使用历史配置。
        public let botPortraitRule: BotPortraitRule?

        /// Bot智能分析。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intelligenceRule: IntelligenceRule?

        /// Bot自定义规则。如果为null，默认使用历史配置。
        public let botUserRules: [BotUserRule]?

        /// Bot主动特征识别规则。
        public let algDetectRule: [AlgDetectRule]?

        /// Bot托管定制策略，入参可不填，仅出参使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customizes: [BotUserRule]?

        public init(switch: String, botManagedRule: BotManagedRule? = nil, botPortraitRule: BotPortraitRule? = nil, intelligenceRule: IntelligenceRule? = nil, botUserRules: [BotUserRule]? = nil, algDetectRule: [AlgDetectRule]? = nil, customizes: [BotUserRule]? = nil) {
            self.switch = `switch`
            self.botManagedRule = botManagedRule
            self.botPortraitRule = botPortraitRule
            self.intelligenceRule = intelligenceRule
            self.botUserRules = botUserRules
            self.algDetectRule = algDetectRule
            self.customizes = customizes
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case botManagedRule = "BotManagedRule"
            case botPortraitRule = "BotPortraitRule"
            case intelligenceRule = "IntelligenceRule"
            case botUserRules = "BotUserRules"
            case algDetectRule = "AlgDetectRule"
            case customizes = "Customizes"
        }
    }

    /// Bot扩展处置方式，多处置动作组合。
    public struct BotExtendAction: TCInputModel, TCOutputModel {
        /// 处置动作，取值有：
        /// - monitor：观察；
        /// - alg：JavaScript挑战；
        /// - captcha：托管挑战；
        /// - random：随机，按照ExtendActions分配处置动作和比例；
        /// - silence：静默；
        /// - shortdelay：短时响应；
        /// - longdelay：长时响应。
        public let action: String

        /// 处置方式的触发概率，范围0-100。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let percent: UInt64?

        public init(action: String, percent: UInt64? = nil) {
            self.action = action
            self.percent = percent
        }

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case percent = "Percent"
        }
    }

    /// Bot 规则，下列规则ID可参考接口 DescribeBotManagedRules返回的ID信息
    public struct BotManagedRule: TCInputModel, TCOutputModel {
        /// 触发规则后的处置方式，取值有：
        /// - drop：拦截；
        /// - trans：放行；
        /// - alg：Javascript挑战；
        /// - monitor：观察。
        public let action: String

        /// 本规则的ID。仅出参使用。
        public let ruleID: Int64?

        /// 放行的规则ID。默认所有规则不配置放行。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transManagedIds: [Int64]?

        /// JS挑战的规则ID。默认所有规则不配置JS挑战。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let algManagedIds: [Int64]?

        /// 数字验证码的规则ID。默认所有规则不配置数字验证码。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let capManagedIds: [Int64]?

        /// 观察的规则ID。默认所有规则不配置观察。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let monManagedIds: [Int64]?

        /// 拦截的规则ID。默认所有规则不配置拦截。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dropManagedIds: [Int64]?

        public init(action: String, ruleID: Int64? = nil, transManagedIds: [Int64]? = nil, algManagedIds: [Int64]? = nil, capManagedIds: [Int64]? = nil, monManagedIds: [Int64]? = nil, dropManagedIds: [Int64]? = nil) {
            self.action = action
            self.ruleID = ruleID
            self.transManagedIds = transManagedIds
            self.algManagedIds = algManagedIds
            self.capManagedIds = capManagedIds
            self.monManagedIds = monManagedIds
            self.dropManagedIds = dropManagedIds
        }

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case ruleID = "RuleID"
            case transManagedIds = "TransManagedIds"
            case algManagedIds = "AlgManagedIds"
            case capManagedIds = "CapManagedIds"
            case monManagedIds = "MonManagedIds"
            case dropManagedIds = "DropManagedIds"
        }
    }

    /// bot 用户画像规则
    public struct BotPortraitRule: TCInputModel, TCOutputModel {
        /// 本功能的开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 本规则的ID。仅出参使用。
        public let ruleID: Int64?

        /// JS挑战的规则ID。默认所有规则不配置JS挑战。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let algManagedIds: [Int64]?

        /// 数字验证码的规则ID。默认所有规则不配置数字验证码。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let capManagedIds: [Int64]?

        /// 观察的规则ID。默认所有规则不配置观察。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let monManagedIds: [Int64]?

        /// 拦截的规则ID。默认所有规则不配置拦截。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dropManagedIds: [Int64]?

        public init(switch: String, ruleID: Int64? = nil, algManagedIds: [Int64]? = nil, capManagedIds: [Int64]? = nil, monManagedIds: [Int64]? = nil, dropManagedIds: [Int64]? = nil) {
            self.switch = `switch`
            self.ruleID = ruleID
            self.algManagedIds = algManagedIds
            self.capManagedIds = capManagedIds
            self.monManagedIds = monManagedIds
            self.dropManagedIds = dropManagedIds
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case ruleID = "RuleID"
            case algManagedIds = "AlgManagedIds"
            case capManagedIds = "CapManagedIds"
            case monManagedIds = "MonManagedIds"
            case dropManagedIds = "DropManagedIds"
        }
    }

    /// Bot自定义规则
    public struct BotUserRule: TCInputModel, TCOutputModel {
        /// 规则名，只能以英文字符，数字，下划线组合，且不能以下划线开头。
        public let ruleName: String

        /// 处置动作，取值有：
        /// - drop：拦截；
        /// - monitor：观察；
        /// - trans：放行；
        /// - alg：JavaScript挑战；
        /// - captcha：托管挑战；
        /// - random：随机处置；
        /// - silence：静默；
        /// - shortdelay：短时响应；
        /// - longdelay：长时响应。
        public let action: String

        /// 规则状态，取值有：
        /// - on：生效；
        /// - off：不生效。
        /// 默认on生效。
        public let ruleStatus: String

        /// 规则详情。
        public let aclConditions: [AclCondition]

        /// 规则权重，取值范围0-100。
        public let rulePriority: Int64

        /// 规则id。仅出参使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleID: Int64?

        /// 随机处置的处置方式及占比，非随机处置可不填暂不支持。
        public let extendActions: [BotExtendAction]?

        /// 过滤词，取值有：
        /// - sip：客户端ip。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freqFields: [String]?

        /// 更新时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 统计范围，字段为null时，代表source_to_eo。取值有：
        /// - source_to_eo：（响应）源站到EdgeOne。
        /// - client_to_eo：（请求）客户端到EdgeOne；
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freqScope: [String]?

        public init(ruleName: String, action: String, ruleStatus: String, aclConditions: [AclCondition], rulePriority: Int64, ruleID: Int64? = nil, extendActions: [BotExtendAction]? = nil, freqFields: [String]? = nil, updateTime: String? = nil, freqScope: [String]? = nil) {
            self.ruleName = ruleName
            self.action = action
            self.ruleStatus = ruleStatus
            self.aclConditions = aclConditions
            self.rulePriority = rulePriority
            self.ruleID = ruleID
            self.extendActions = extendActions
            self.freqFields = freqFields
            self.updateTime = updateTime
            self.freqScope = freqScope
        }

        enum CodingKeys: String, CodingKey {
            case ruleName = "RuleName"
            case action = "Action"
            case ruleStatus = "RuleStatus"
            case aclConditions = "AclConditions"
            case rulePriority = "RulePriority"
            case ruleID = "RuleID"
            case extendActions = "ExtendActions"
            case freqFields = "FreqFields"
            case updateTime = "UpdateTime"
            case freqScope = "FreqScope"
        }
    }

    /// cc配置项。
    public struct CC: TCInputModel, TCOutputModel {
        /// Waf开关，取值为：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 策略ID。
        public let policyId: Int64?

        public init(switch: String, policyId: Int64? = nil) {
            self.switch = `switch`
            self.policyId = policyId
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case policyId = "PolicyId"
        }
    }

    /// 缓存时间设置
    public struct Cache: TCInputModel, TCOutputModel {
        /// 缓存配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 缓存过期时间设置。
        /// 单位为秒，最大可设置为 365 天。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cacheTime: Int64?

        /// 是否开启强制缓存，取值有：
        /// - on：开启；
        /// - off：关闭。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let ignoreCacheControl: String? = nil

        public init(switch: String, cacheTime: Int64? = nil) {
            self.switch = `switch`
            self.cacheTime = cacheTime
        }

        @available(*, deprecated, renamed: "init(switch:cacheTime:)", message: "'ignoreCacheControl' is deprecated in 'Cache'. Setting this parameter has no effect.")
        public init(switch: String, cacheTime: Int64? = nil, ignoreCacheControl: String? = nil) {
            self.switch = `switch`
            self.cacheTime = cacheTime
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case cacheTime = "CacheTime"
            case ignoreCacheControl = "IgnoreCacheControl"
        }
    }

    /// 缓存规则配置。
    public struct CacheConfig: TCInputModel, TCOutputModel {
        /// 缓存配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cache: Cache?

        /// 不缓存配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noCache: NoCache?

        /// 遵循源站配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let followOrigin: FollowOrigin?

        public init(cache: Cache? = nil, noCache: NoCache? = nil, followOrigin: FollowOrigin? = nil) {
            self.cache = cache
            self.noCache = noCache
            self.followOrigin = followOrigin
        }

        enum CodingKeys: String, CodingKey {
            case cache = "Cache"
            case noCache = "NoCache"
            case followOrigin = "FollowOrigin"
        }
    }

    /// 缓存键配置。
    public struct CacheKey: TCInputModel, TCOutputModel {
        /// 是否开启全路径缓存，取值有：
        /// - on：开启全路径缓存（即关闭参数忽略）；
        /// - off：关闭全路径缓存（即开启参数忽略）。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fullUrlCache: String?

        /// 是否忽略大小写缓存，取值有：
        /// - on：忽略；
        /// - off：不忽略。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoreCase: String?

        /// CacheKey 中包含请求参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queryString: QueryString?

        public init(fullUrlCache: String? = nil, ignoreCase: String? = nil, queryString: QueryString? = nil) {
            self.fullUrlCache = fullUrlCache
            self.ignoreCase = ignoreCase
            self.queryString = queryString
        }

        enum CodingKeys: String, CodingKey {
            case fullUrlCache = "FullUrlCache"
            case ignoreCase = "IgnoreCase"
            case queryString = "QueryString"
        }
    }

    /// 缓存预刷新
    public struct CachePrefresh: TCInputModel, TCOutputModel {
        /// 缓存预刷新配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 缓存预刷新百分比，取值范围：1-99。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let percent: Int64?

        public init(switch: String, percent: Int64? = nil) {
            self.switch = `switch`
            self.percent = percent
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case percent = "Percent"
        }
    }

    /// 回源时携带客户端IP所属地域信息，值的格式为ISO-3166-1两位字母代码。
    public struct ClientIpCountry: TCInputModel, TCOutputModel {
        /// 配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 存放客户端 IP 所属地域信息的请求头名称，当 Switch=on 时有效。
        /// 为空则使用默认值：EO-Client-IPCountry。
        public let headerName: String?

        public init(switch: String, headerName: String? = nil) {
            self.switch = `switch`
            self.headerName = headerName
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case headerName = "HeaderName"
        }
    }

    /// 存储客户端请求IP的头部信息配置
    public struct ClientIpHeader: TCInputModel, TCOutputModel {
        /// 配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 回源时，存放客户端 IP 的请求头名称。
        /// 为空则使用默认值：X-Forwarded-IP。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let headerName: String?

        public init(switch: String, headerName: String? = nil) {
            self.switch = `switch`
            self.headerName = headerName
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case headerName = "HeaderName"
        }
    }

    /// CNAME 状态
    public struct CnameStatus: TCOutputModel {
        /// 记录名称。
        public let recordName: String

        /// CNAME 地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cname: String?

        /// Cname状态信息，取值有：
        /// - active：生效；
        /// - moved：不生效。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        enum CodingKeys: String, CodingKey {
            case recordName = "RecordName"
            case cname = "Cname"
            case status = "Status"
        }
    }

    /// 规则引擎带有状态码的动作
    public struct CodeAction: TCInputModel, TCOutputModel {
        /// 功能名称，功能名称填写规范可调用接口 [查询规则引擎的设置参数](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) 查看。
        public let action: String

        /// 操作参数。
        public let parameters: [RuleCodeActionParams]

        public init(action: String, parameters: [RuleCodeActionParams]) {
            self.action = action
            self.parameters = parameters
        }

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case parameters = "Parameters"
        }
    }

    /// 智能压缩配置。
    public struct Compression: TCInputModel, TCOutputModel {
        /// 智能压缩配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 支持的压缩算法列表，取值有：
        /// - brotli：brotli算法；
        /// - gzip：gzip算法。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let algorithms: [String]?

        public init(switch: String, algorithms: [String]? = nil) {
            self.switch = `switch`
            self.algorithms = algorithms
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case algorithms = "Algorithms"
        }
    }

    /// DDoS配置
    public struct DDoS: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// DDoS攻击事件对象
    public struct DDoSAttackEvent: TCOutputModel {
        /// 事件ID。
        public let eventId: String

        /// 攻击类型(对应交互事件名称)。
        public let attackType: String

        /// 攻击状态。
        public let attackStatus: Int64

        /// 攻击最大带宽。
        public let attackMaxBandWidth: Int64

        /// 攻击包速率峰值。
        public let attackPacketMaxRate: Int64

        /// 攻击开始时间，单位为s。
        public let attackStartTime: Int64

        /// 攻击结束时间，单位为s。
        public let attackEndTime: Int64

        /// DDoS策略组ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyId: Int64?

        /// 站点ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: String?

        /// 攻击事件所属地区，取值有：
        /// - overseas：全球（除中国大陆地区）数据；
        /// - mainland：中国大陆地区数据。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let area: String?

        /// 封禁解封信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dDoSBlockData: [DDoSBlockData]?

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case attackType = "AttackType"
            case attackStatus = "AttackStatus"
            case attackMaxBandWidth = "AttackMaxBandWidth"
            case attackPacketMaxRate = "AttackPacketMaxRate"
            case attackStartTime = "AttackStartTime"
            case attackEndTime = "AttackEndTime"
            case policyId = "PolicyId"
            case zoneId = "ZoneId"
            case area = "Area"
            case dDoSBlockData = "DDoSBlockData"
        }
    }

    /// DDoS封禁解封信息
    public struct DDoSBlockData: TCOutputModel {
        /// 开始时间，采用unix时间戳。
        public let startTime: Int64

        /// 结束时间，采用unix时间戳, 为0表示还处于封禁中。
        public let endTime: Int64

        /// 封禁受影响区域。
        public let blockArea: String

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case blockArea = "BlockArea"
        }
    }

    /// https 服务端证书配置
    public struct DefaultServerCertInfo: TCInputModel, TCOutputModel {
        /// 服务器证书 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certId: String?

        /// 证书备注名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alias: String?

        /// 证书类型，取值有：
        /// - default: 默认证书;
        /// - upload:用户上传;
        /// - managed:腾讯云托管。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 证书过期时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var expireTime: Date?

        /// 证书生效时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var effectiveTime: Date?

        /// 证书公用名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let commonName: String?

        /// 证书SAN域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subjectAltName: [String]?

        /// 部署状态，取值有：
        /// - processing: 部署中；
        /// - deployed: 已部署；
        /// - failed: 部署失败。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// Status为失败时,此字段返回失败原因。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 证书算法。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signAlgo: String?

        public init(certId: String, alias: String? = nil, type: String? = nil, expireTime: Date? = nil, effectiveTime: Date? = nil, commonName: String? = nil, subjectAltName: [String]? = nil, status: String? = nil, message: String? = nil, signAlgo: String? = nil) {
            self.certId = certId
            self.alias = alias
            self.type = type
            self._expireTime = .init(wrappedValue: expireTime)
            self._effectiveTime = .init(wrappedValue: effectiveTime)
            self.commonName = commonName
            self.subjectAltName = subjectAltName
            self.status = status
            self.message = message
            self.signAlgo = signAlgo
        }

        enum CodingKeys: String, CodingKey {
            case certId = "CertId"
            case alias = "Alias"
            case type = "Type"
            case expireTime = "ExpireTime"
            case effectiveTime = "EffectiveTime"
            case commonName = "CommonName"
            case subjectAltName = "SubjectAltName"
            case status = "Status"
            case message = "Message"
            case signAlgo = "SignAlgo"
        }
    }

    /// 域名配置信息
    public struct DetailHost: TCOutputModel {
        /// 站点ID。
        public let zoneId: String

        /// 加速服务状态，取值为：
        /// - process：部署中；
        /// - online：已启动；
        /// - offline：已关闭。
        public let status: String

        /// 域名。
        public let host: String

        /// 站点名称。
        public let zoneName: String

        /// 分配的Cname域名
        public let cname: String

        /// 资源ID。
        public let id: String

        /// 实例ID。
        public let instanceId: String

        /// 锁状态。
        public let lock: Int64

        /// 域名状态类型。
        public let mode: Int64

        /// 域名加速地域，取值有：
        /// - global：全球；
        /// - mainland：中国大陆；
        /// - overseas：境外区域。
        public let area: String

        /// 加速类型配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accelerateType: AccelerateType?

        /// Https配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let https: Https?

        /// 缓存配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cacheConfig: CacheConfig?

        /// 源站配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let origin: Origin?

        /// 安全类型。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityType: SecurityType?

        /// 缓存键配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cacheKey: CacheKey?

        /// 智能压缩配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compression: Compression?

        /// Waf防护配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let waf: Waf?

        /// CC防护配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cc: CC?

        /// DDoS防护配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dDoS: DDoS?

        /// 智能路由配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let smartRouting: SmartRouting?

        /// Ipv6访问配置项。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6: Ipv6?

        /// 回源时是否携带客户端IP所属地域信息的配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientIpCountry: ClientIpCountry?

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case status = "Status"
            case host = "Host"
            case zoneName = "ZoneName"
            case cname = "Cname"
            case id = "Id"
            case instanceId = "InstanceId"
            case lock = "Lock"
            case mode = "Mode"
            case area = "Area"
            case accelerateType = "AccelerateType"
            case https = "Https"
            case cacheConfig = "CacheConfig"
            case origin = "Origin"
            case securityType = "SecurityType"
            case cacheKey = "CacheKey"
            case compression = "Compression"
            case waf = "Waf"
            case cc = "CC"
            case dDoS = "DDoS"
            case smartRouting = "SmartRouting"
            case ipv6 = "Ipv6"
            case clientIpCountry = "ClientIpCountry"
        }
    }

    /// 最新IP白名单列表相比于当前IP白名单列表的区别
    public struct DiffIPWhitelist: TCOutputModel {
        /// 最新IP白名单列表。
        public let latestIPWhitelist: IPWhitelist

        /// 最新IP白名单列表相比于当前IP白名单列表，新增部分。
        public let addedIPWhitelist: IPWhitelist

        /// 最新IP白名单列表相比于当前IP白名单列表，删减部分。
        public let removedIPWhitelist: IPWhitelist

        /// 最新IP白名单列表相比于当前IP白名单列表，不变部分。
        public let noChangeIPWhitelist: IPWhitelist

        enum CodingKeys: String, CodingKey {
            case latestIPWhitelist = "LatestIPWhitelist"
            case addedIPWhitelist = "AddedIPWhitelist"
            case removedIPWhitelist = "RemovedIPWhitelist"
            case noChangeIPWhitelist = "NoChangeIPWhitelist"
        }
    }

    /// 拦截页面的总体配置，用于配置各个模块的拦截后行为。
    public struct DropPageConfig: TCInputModel, TCOutputModel {
        /// 配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// Waf(托管规则)模块的拦截页面配置。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wafDropPageDetail: DropPageDetail?

        /// 自定义页面的拦截页面配置。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aclDropPageDetail: DropPageDetail?

        public init(switch: String, wafDropPageDetail: DropPageDetail? = nil, aclDropPageDetail: DropPageDetail? = nil) {
            self.switch = `switch`
            self.wafDropPageDetail = wafDropPageDetail
            self.aclDropPageDetail = aclDropPageDetail
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case wafDropPageDetail = "WafDropPageDetail"
            case aclDropPageDetail = "AclDropPageDetail"
        }
    }

    /// 拦截页面的配置信息
    public struct DropPageDetail: TCInputModel, TCOutputModel {
        /// 拦截页面的唯一Id。系统默认包含一个自带拦截页面，Id值为0。
        /// 该Id可通过创建拦截页面接口进行上传获取。如传入0，代表使用系统默认拦截页面。
        public let pageId: Int64

        /// 拦截页面的HTTP状态码。状态码范围是100-600。
        public let statusCode: Int64

        /// 页面文件名或url。
        public let name: String

        /// 页面的类型，取值有：
        /// - file：页面文件内容；
        /// - url：上传的url地址。
        public let type: String

        public init(pageId: Int64, statusCode: Int64, name: String, type: String) {
            self.pageId = pageId
            self.statusCode = statusCode
            self.name = name
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case pageId = "PageId"
            case statusCode = "StatusCode"
            case name = "Name"
            case type = "Type"
        }
    }

    /// 例外规则，用于配置需要跳过特定场景的规则
    public struct ExceptConfig: TCInputModel, TCOutputModel {
        /// 配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 例外规则详情。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exceptUserRules: [ExceptUserRule]?

        public init(switch: String, exceptUserRules: [ExceptUserRule]? = nil) {
            self.switch = `switch`
            self.exceptUserRules = exceptUserRules
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case exceptUserRules = "ExceptUserRules"
        }
    }

    /// 例外规则的配置，包含生效的条件，生效的范围。
    public struct ExceptUserRule: TCInputModel, TCOutputModel {
        /// 规则名称，不可使用中文。
        public let ruleName: String

        /// 规则的处置方式，当前仅支持skip：跳过全部托管规则。
        public let action: String

        /// 规则生效状态，取值有：
        /// - on：生效；
        /// - off：失效。
        public let ruleStatus: String

        /// 规则ID。仅出参使用。默认由底层生成。
        public let ruleID: Int64?

        /// 更新时间，如果为null，默认由底层按当前时间生成。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        /// 匹配条件。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exceptUserRuleConditions: [ExceptUserRuleCondition]?

        /// 规则生效的范围。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exceptUserRuleScope: ExceptUserRuleScope?

        /// 优先级，取值范围0-100。如果为null，默认由底层设置为0。
        public let rulePriority: Int64?

        public init(ruleName: String, action: String, ruleStatus: String, ruleID: Int64? = nil, updateTime: Date? = nil, exceptUserRuleConditions: [ExceptUserRuleCondition]? = nil, exceptUserRuleScope: ExceptUserRuleScope? = nil, rulePriority: Int64? = nil) {
            self.ruleName = ruleName
            self.action = action
            self.ruleStatus = ruleStatus
            self.ruleID = ruleID
            self._updateTime = .init(wrappedValue: updateTime)
            self.exceptUserRuleConditions = exceptUserRuleConditions
            self.exceptUserRuleScope = exceptUserRuleScope
            self.rulePriority = rulePriority
        }

        enum CodingKeys: String, CodingKey {
            case ruleName = "RuleName"
            case action = "Action"
            case ruleStatus = "RuleStatus"
            case ruleID = "RuleID"
            case updateTime = "UpdateTime"
            case exceptUserRuleConditions = "ExceptUserRuleConditions"
            case exceptUserRuleScope = "ExceptUserRuleScope"
            case rulePriority = "RulePriority"
        }
    }

    /// 例外规则生效的具体条件。
    public struct ExceptUserRuleCondition: TCInputModel, TCOutputModel {
        /// 匹配项，取值有：
        /// - host：请求域名；
        /// - sip：客户端IP；
        /// - ua：User-Agent；
        /// - cookie：会话 Cookie；
        /// - cgi：CGI 脚本；
        /// - xff：XFF 扩展头部；
        /// - url：请求 URL；
        /// - accept：请求内容类型；
        /// - method：请求方式；
        /// - header：请求头部；
        /// - sip_proto：网络层协议。
        public let matchFrom: String?

        /// 匹配项的参数。仅当 MatchFrom 为 header 时，可以使用本参数，值可填入 header 的 key 作为参数。
        public let matchParam: String?

        /// 匹配操作符，取值有：
        /// - equal：字符串等于；
        /// - not_equal：数值不等于；
        /// - include：字符包含；
        /// - not_include：字符不包含；
        /// - match：ip匹配；
        /// - not_match：ip不匹配；
        /// - include_area：地域包含；
        /// - is_empty：存在字段但值为空；
        /// - not_exists：不存在关键字段；
        /// - regexp：正则匹配；
        /// - len_gt：数值大于；
        /// - len_lt：数值小于；
        /// - len_eq：数值等于；
        /// - match_prefix：前缀匹配；
        /// - match_suffix：后缀匹配；
        /// - wildcard：通配符。
        public let `operator`: String?

        /// 匹配值。
        public let matchContent: String?

        public init(matchFrom: String? = nil, matchParam: String? = nil, operator: String? = nil, matchContent: String? = nil) {
            self.matchFrom = matchFrom
            self.matchParam = matchParam
            self.operator = `operator`
            self.matchContent = matchContent
        }

        enum CodingKeys: String, CodingKey {
            case matchFrom = "MatchFrom"
            case matchParam = "MatchParam"
            case `operator` = "Operator"
            case matchContent = "MatchContent"
        }
    }

    /// 例外规则的生效范围。
    public struct ExceptUserRuleScope: TCInputModel, TCOutputModel {
        /// 例外规则类型。其中complete模式代表全量数据进行例外，partial模式代表可选择指定模块指定字段进行例外，该字段取值有：
        /// - complete：完全跳过模式；
        /// - partial：部分跳过模式。
        public let type: String?

        /// 生效的模块，该字段取值有：
        /// - waf：托管规则；
        /// - rate：速率限制；
        /// - acl：自定义规则；
        /// - cc：cc攻击防护；
        /// - bot：Bot防护。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modules: [String]?

        /// 跳过部分规则ID的例外规则详情。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partialModules: [PartialModule]?

        /// 跳过具体字段不去扫描的例外规则详情。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let skipConditions: [SkipCondition]?

        public init(type: String? = nil, modules: [String]? = nil, partialModules: [PartialModule]? = nil, skipConditions: [SkipCondition]? = nil) {
            self.type = type
            self.modules = modules
            self.partialModules = partialModules
            self.skipConditions = skipConditions
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case modules = "Modules"
            case partialModules = "PartialModules"
            case skipConditions = "SkipConditions"
        }
    }

    /// 失败原因
    public struct FailReason: TCOutputModel {
        /// 失败原因。
        public let reason: String

        /// 处理失败的资源列表。
        public let targets: [String]

        enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case targets = "Targets"
        }
    }

    /// 站点归属权校验——文件校验信息。
    public struct FileAscriptionInfo: TCOutputModel {
        /// 文件校验目录。
        public let identifyPath: String

        /// 文件校验内容。
        public let identifyContent: String

        enum CodingKeys: String, CodingKey {
            case identifyPath = "IdentifyPath"
            case identifyContent = "IdentifyContent"
        }
    }

    /// 描述键值对过滤器，用于条件过滤查询。例如过滤ID、名称、状态等。
    /// 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
    /// 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct Filter: TCInputModel {
        /// 需要过滤的字段。
        public let name: String

        /// 字段的过滤值。
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 慢速攻击的首段包配置。
    public struct FirstPartConfig: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `switch`: String?

        /// 首段包的统计时长，单位是秒，即期望首段包的统计时长是多少，默认5秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statTime: UInt64?

        public init(switch: String, statTime: UInt64? = nil) {
            self.switch = `switch`
            self.statTime = statTime
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case statTime = "StatTime"
        }
    }

    /// 缓存遵循源站配置
    public struct FollowOrigin: TCInputModel, TCOutputModel {
        /// 遵循源站配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 源站未返回 Cache-Control 头时, 设置默认的缓存时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultCacheTime: Int64?

        /// 源站未返回 Cache-Control 头时, 设置缓存/不缓存
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultCache: String?

        /// 源站未返回 Cache-Control 头时, 使用/不使用默认缓存策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultCacheStrategy: String?

        public init(switch: String, defaultCacheTime: Int64? = nil, defaultCache: String? = nil, defaultCacheStrategy: String? = nil) {
            self.switch = `switch`
            self.defaultCacheTime = defaultCacheTime
            self.defaultCache = defaultCache
            self.defaultCacheStrategy = defaultCacheStrategy
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case defaultCacheTime = "DefaultCacheTime"
            case defaultCache = "DefaultCache"
            case defaultCacheStrategy = "DefaultCacheStrategy"
        }
    }

    /// 访问协议强制https跳转配置
    public struct ForceRedirect: TCInputModel, TCOutputModel {
        /// 访问强制跳转配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 重定向状态码，取值有：
        /// - 301：301跳转；
        /// - 302：302跳转。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let redirectStatusCode: Int64?

        public init(switch: String, redirectStatusCode: Int64? = nil) {
            self.switch = `switch`
            self.redirectStatusCode = redirectStatusCode
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case redirectStatusCode = "RedirectStatusCode"
        }
    }

    /// Grpc配置项
    public struct Grpc: TCInputModel, TCOutputModel {
        /// 是否开启 Grpc 配置，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 刷新预热附带的头部信息
    public struct Header: TCInputModel, TCOutputModel {
        /// HTTP头部名称。
        public let name: String

        /// HTTP头部值。
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// Hsts配置
    public struct Hsts: TCInputModel, TCOutputModel {
        /// 是否开启，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// MaxAge 数值。单位为秒，最大值为1天。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxAge: Int64?

        /// 是否包含子域名，取值有：
        /// - on：开启；
        /// - off：关闭。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let includeSubDomains: String?

        /// 是否开启预加载，取值有：
        /// - on：开启；
        /// - off：关闭。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let preload: String?

        public init(switch: String, maxAge: Int64? = nil, includeSubDomains: String? = nil, preload: String? = nil) {
            self.switch = `switch`
            self.maxAge = maxAge
            self.includeSubDomains = includeSubDomains
            self.preload = preload
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case maxAge = "MaxAge"
            case includeSubDomains = "IncludeSubDomains"
            case preload = "Preload"
        }
    }

    /// 域名 https 加速配置，默认为关闭状态
    public struct Https: TCInputModel, TCOutputModel {
        /// http2 配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let http2: String?

        /// OCSP 配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocspStapling: String?

        /// Tls 版本设置，取值有：
        /// - TLSv1：TLSv1版本；
        /// - TLSV1.1：TLSv1.1版本；
        /// - TLSV1.2：TLSv1.2版本；
        /// - TLSv1.3：TLSv1.3版本。
        /// 修改时必须开启连续的版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tlsVersion: [String]?

        /// HSTS 配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hsts: Hsts?

        /// 证书配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certInfo: [ServerCertInfo]?

        /// 申请类型，取值有：
        /// - apply：托管EdgeOne；
        /// - none：不托管EdgeOne。
        /// 不填，默认取值为none。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let applyType: String?

        /// 密码套件，取值有：
        /// - loose-v2023：提供最高的兼容性，安全性一般，支持 TLS 1.0-1.3 密码套件；
        /// - general-v2023：提供较高的兼容性，安全性中等，支持 TLS 1.2-1.3 密码套件；
        /// - strict-v2023：提供最高的安全性能，禁用所有含不安全隐患的加密套件，支持 TLS 1.2-1.3 密码套件。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cipherSuite: String?

        public init(http2: String? = nil, ocspStapling: String? = nil, tlsVersion: [String]? = nil, hsts: Hsts? = nil, certInfo: [ServerCertInfo]? = nil, applyType: String? = nil, cipherSuite: String? = nil) {
            self.http2 = http2
            self.ocspStapling = ocspStapling
            self.tlsVersion = tlsVersion
            self.hsts = hsts
            self.certInfo = certInfo
            self.applyType = applyType
            self.cipherSuite = cipherSuite
        }

        enum CodingKeys: String, CodingKey {
            case http2 = "Http2"
            case ocspStapling = "OcspStapling"
            case tlsVersion = "TlsVersion"
            case hsts = "Hsts"
            case certInfo = "CertInfo"
            case applyType = "ApplyType"
            case cipherSuite = "CipherSuite"
        }
    }

    /// IP 网段组
    public struct IPGroup: TCInputModel, TCOutputModel {
        /// 组 Id，创建时填 0 即可。
        public let groupId: Int64

        /// 组名称。
        public let name: String

        /// IP 组内容，可以填入 IP 及 IP 掩码。
        public let content: [String]

        public init(groupId: Int64, name: String, content: [String]) {
            self.groupId = groupId
            self.name = name
            self.content = content
        }

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case name = "Name"
            case content = "Content"
        }
    }

    /// 源站防护IP白名单
    public struct IPWhitelist: TCOutputModel {
        /// IPv4列表。
        public let iPv4: [String]

        /// IPv6列表。
        public let iPv6: [String]

        enum CodingKeys: String, CodingKey {
            case iPv4 = "IPv4"
            case iPv6 = "IPv6"
        }
    }

    /// 站点验证信息
    public struct Identification: TCOutputModel {
        /// 站点名称。
        public let zoneName: String

        /// 验证子域名。验证站点时，该值为空。验证子域名是为具体子域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 验证状态，取值有：
        /// - pending：验证中；
        /// - finished：验证完成。
        public let status: String

        /// 站点归属权校验：Dns校验信息。
        public let ascription: AscriptionInfo

        /// 域名当前的 NS 记录。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let originalNameServers: [String]?

        /// 站点归属权校验：文件校验信息。
        public let fileAscription: FileAscriptionInfo

        enum CodingKeys: String, CodingKey {
            case zoneName = "ZoneName"
            case domain = "Domain"
            case status = "Status"
            case ascription = "Ascription"
            case originalNameServers = "OriginalNameServers"
            case fileAscription = "FileAscription"
        }
    }

    /// 图片优化配置。
    public struct ImageOptimize: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 智能分析规则
    public struct IntelligenceRule: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `switch`: String?

        /// 规则详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intelligenceRuleItems: [IntelligenceRuleItem]?

        public init(switch: String? = nil, intelligenceRuleItems: [IntelligenceRuleItem]? = nil) {
            self.switch = `switch`
            self.intelligenceRuleItems = intelligenceRuleItems
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case intelligenceRuleItems = "IntelligenceRuleItems"
        }
    }

    /// Bot智能分析规则详情
    public struct IntelligenceRuleItem: TCInputModel, TCOutputModel {
        /// 智能分析标签，取值有：
        /// - evil_bot：恶意bot；
        /// - suspect_bot：疑似bot；
        /// - good_bot：良好bot；
        /// - normal：正常请求。
        public let label: String

        /// 触发智能分析标签对应的处置方式，取值有：
        /// - drop：拦截；
        /// - trans：放行；
        /// - alg：Javascript挑战；
        /// - captcha：数字验证码；
        /// - monitor：观察。
        public let action: String

        public init(label: String, action: String) {
            self.label = label
            self.action = action
        }

        enum CodingKeys: String, CodingKey {
            case label = "Label"
            case action = "Action"
        }
    }

    /// IP黑白名单及IP区域控制配置
    public struct IpTableConfig: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭；
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `switch`: String?

        /// 基础管控规则。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipTableRules: [IpTableRule]?

        public init(switch: String, ipTableRules: [IpTableRule]? = nil) {
            self.switch = `switch`
            self.ipTableRules = ipTableRules
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case ipTableRules = "IpTableRules"
        }
    }

    /// IP黑白名单详细规则
    public struct IpTableRule: TCInputModel, TCOutputModel {
        /// 动作，取值有：
        /// - drop：拦截；
        /// - trans：放行；
        /// - monitor：观察。
        public let action: String

        /// 根据类型匹配，取值有：
        /// - ip：对ip进行匹配；
        /// - area：对ip所属地区匹配。
        public let matchFrom: String

        /// 规则的匹配方式，默认为空代表等于。
        /// 取值有：
        /// - is_emty：配置为空；
        /// - not_exists：配置为不存在；
        /// - include：包含；
        /// - not_include：不包含；
        /// - equal：等于；
        /// - not_equal：不等于。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `operator`: String?

        /// 规则id。仅出参使用。
        public let ruleID: Int64?

        /// 更新时间。仅出参使用。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        /// 规则启用状态，当返回为null时，为启用。取值有：
        /// - on：启用；
        /// - off：未启用。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 规则名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        /// 匹配内容。当 Operator为is_emty 或not_exists时，此值允许为空。
        public let matchContent: String?

        public init(action: String, matchFrom: String, operator: String? = nil, ruleID: Int64? = nil, updateTime: Date? = nil, status: String? = nil, ruleName: String? = nil, matchContent: String? = nil) {
            self.action = action
            self.matchFrom = matchFrom
            self.operator = `operator`
            self.ruleID = ruleID
            self._updateTime = .init(wrappedValue: updateTime)
            self.status = status
            self.ruleName = ruleName
            self.matchContent = matchContent
        }

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case matchFrom = "MatchFrom"
            case `operator` = "Operator"
            case ruleID = "RuleID"
            case updateTime = "UpdateTime"
            case status = "Status"
            case ruleName = "RuleName"
            case matchContent = "MatchContent"
        }
    }

    /// Ipv6访问配置
    public struct Ipv6: TCInputModel, TCOutputModel {
        /// Ipv6 访问功能配置，取值有：
        /// - on：开启Ipv6访问功能；
        /// - off：关闭Ipv6访问功能。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 离线日志详细信息
    public struct L4OfflineLog: TCOutputModel {
        /// 四层代理实例 ID。
        public let proxyId: String

        /// 日志所属区域，取值有：
        /// - mainland：中国大陆境内;
        /// - overseas：全球（不含中国大陆）。
        public let area: String

        /// 离线日志数据包名。
        public let logPacketName: String

        /// 离线日志下载地址。
        public let url: String

        /// 日志打包时间，此参数已经废弃。
        public let logTime: Int64

        /// 日志打包开始时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var logStartTime: Date

        /// 日志打包结束时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var logEndTime: Date

        /// 日志大小，单位为 Byte。
        public let size: Int64

        enum CodingKeys: String, CodingKey {
            case proxyId = "ProxyId"
            case area = "Area"
            case logPacketName = "LogPacketName"
            case url = "Url"
            case logTime = "LogTime"
            case logStartTime = "LogStartTime"
            case logEndTime = "LogEndTime"
            case size = "Size"
        }
    }

    /// 七层离线日志详细信息。
    public struct L7OfflineLog: TCOutputModel {
        /// 离线日志域名。
        public let domain: String

        /// 日志所属区域，取值有：
        /// - mainland：中国大陆境内;
        /// - overseas：全球（不含中国大陆）。
        public let area: String

        /// 离线日志数据包名。
        public let logPacketName: String

        /// 离线日志下载地址。
        public let url: String

        /// 日志打包时间，此参数已经废弃。
        public let logTime: Int64

        /// 日志打包开始时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var logStartTime: Date

        /// 日志打包结束时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var logEndTime: Date

        /// 日志原始大小，单位 Byte。
        public let size: Int64

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case area = "Area"
            case logPacketName = "LogPacketName"
            case url = "Url"
            case logTime = "LogTime"
            case logStartTime = "LogStartTime"
            case logEndTime = "LogEndTime"
            case size = "Size"
        }
    }

    /// 浏览器缓存规则配置，用于设置 MaxAge 默认值，默认为关闭状态
    public struct MaxAge: TCInputModel, TCOutputModel {
        /// 是否遵循源站，取值有：
        /// - on：遵循源站，忽略MaxAge 时间设置；
        /// - off：不遵循源站，使用MaxAge 时间设置。
        public let followOrigin: String?

        /// MaxAge 时间设置，单位秒，最大365天。
        /// 注意：时间为0，即不缓存。
        public let maxAgeTime: Int64?

        public init(followOrigin: String? = nil, maxAgeTime: Int64? = nil) {
            self.followOrigin = followOrigin
            self.maxAgeTime = maxAgeTime
        }

        enum CodingKeys: String, CodingKey {
            case followOrigin = "FollowOrigin"
            case maxAgeTime = "MaxAgeTime"
        }
    }

    /// 不缓存配置
    public struct NoCache: TCInputModel, TCOutputModel {
        /// 不缓存配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 规则引擎常规类型的动作
    public struct NormalAction: TCInputModel, TCOutputModel {
        /// 功能名称，功能名称填写规范可调用接口 [查询规则引擎的设置参数](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) 查看。
        public let action: String

        /// 参数。
        public let parameters: [RuleNormalActionParams]

        public init(action: String, parameters: [RuleNormalActionParams]) {
            self.action = action
            self.parameters = parameters
        }

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case parameters = "Parameters"
        }
    }

    /// 离线缓存是否开启
    public struct OfflineCache: TCInputModel, TCOutputModel {
        /// 离线缓存是否开启，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 源站配置。
    public struct Origin: TCInputModel, TCOutputModel {
        /// 主源站列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let origins: [String]?

        /// 备源站列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupOrigins: [String]?

        /// 回源协议配置，取值有：
        /// - http：强制 http 回源；
        /// - follow：协议跟随回源；
        /// - https：强制 https 回源。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let originPullProtocol: String?

        /// 源站为腾讯云 COS 时，是否为私有访问 bucket，取值有：
        /// - on：私有访问；
        /// - off：公共访问。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosPrivateAccess: String?

        public init(origins: [String]? = nil, backupOrigins: [String]? = nil, originPullProtocol: String? = nil, cosPrivateAccess: String? = nil) {
            self.origins = origins
            self.backupOrigins = backupOrigins
            self.originPullProtocol = originPullProtocol
            self.cosPrivateAccess = cosPrivateAccess
        }

        enum CodingKeys: String, CodingKey {
            case origins = "Origins"
            case backupOrigins = "BackupOrigins"
            case originPullProtocol = "OriginPullProtocol"
            case cosPrivateAccess = "CosPrivateAccess"
        }
    }

    /// 加速域名源站信息。
    public struct OriginDetail: TCOutputModel {
        /// 源站类型，取值有：
        /// - IP_DOMAIN：IPV4、IPV6或域名类型源站；
        /// - COS：COS源。
        /// - ORIGIN_GROUP：源站组类型源站。
        /// - AWS_S3：AWS S3对象存储源站。
        public let originType: String?

        /// 源站地址，当OriginType参数指定为ORIGIN_GROUP时，该参数填写源站组ID，其他情况下填写源站地址。
        public let origin: String?

        /// 备用源站组ID，该参数在OriginType参数指定为ORIGIN_GROUP时生效，为空表示不使用备用源站。
        public let backupOrigin: String?

        /// 主源源站组名称，当OriginType参数指定为ORIGIN_GROUP时该参数生效。
        public let originGroupName: String?

        /// 备用源站源站组名称，当OriginType参数指定为ORIGIN_GROUP，且用户指定了被用源站时该参数生效。
        public let backOriginGroupName: String?

        /// 指定是否允许访问私有对象存储源站。当源站类型OriginType=COS或AWS_S3时有效 取值有：
        /// - on：使用私有鉴权；
        /// - off：不使用私有鉴权。
        ///
        /// 不填写，默认值为off。
        public let privateAccess: String?

        /// 私有鉴权使用参数，当源站类型PrivateAccess=on时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateParameters: [PrivateParameter]?

        enum CodingKeys: String, CodingKey {
            case originType = "OriginType"
            case origin = "Origin"
            case backupOrigin = "BackupOrigin"
            case originGroupName = "OriginGroupName"
            case backOriginGroupName = "BackOriginGroupName"
            case privateAccess = "PrivateAccess"
            case privateParameters = "PrivateParameters"
        }
    }

    /// 源站组信息
    public struct OriginGroup: TCOutputModel {
        /// 站点ID。
        public let zoneId: String?

        /// 站点名称。
        public let zoneName: String?

        /// 源站组ID。
        public let originGroupId: String?

        /// 源站类型，取值有：
        /// - self：自有源站；
        /// - third_party：第三方源站；
        /// - cos：腾讯云COS源站。
        public let originType: String?

        /// 源站组名称。
        public let originGroupName: String?

        /// 源站配置类型，当OriginType=self时，取值有：
        /// - area：按区域配置；
        /// - weight： 按权重配置。
        /// - proto： 按HTTP协议配置。
        /// 当OriginType=third_party/cos时放空。
        public let configurationType: String?

        /// 源站记录信息。
        public let originRecords: [OriginRecord]?

        /// 源站组更新时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        /// 当OriginType=self时，表示回源Host。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostHeader: String?

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case originGroupId = "OriginGroupId"
            case originType = "OriginType"
            case originGroupName = "OriginGroupName"
            case configurationType = "ConfigurationType"
            case originRecords = "OriginRecords"
            case updateTime = "UpdateTime"
            case hostHeader = "HostHeader"
        }
    }

    /// 加速域名源站信息。
    public struct OriginInfo: TCInputModel {
        /// 源站类型，取值有：
        /// - IP_DOMAIN：IPV4、IPV6或域名类型源站；
        /// - COS：COS源。
        /// - ORIGIN_GROUP：源站组类型源站。
        /// - AWS_S3：AWS S3对象存储源站。
        /// - SPACE：Edgeone源站Space存储，Space存储不允许配置该类型源站。
        public let originType: String

        /// 源站地址，当OriginType参数指定为ORIGIN_GROUP时，该参数填写源站组ID，其他情况下填写源站地址。
        public let origin: String

        /// 备用源站组ID，该参数在OriginType参数指定为ORIGIN_GROUP时生效，为空表示不使用备用源站。
        public let backupOrigin: String?

        /// 指定是否允许访问私有对象存储源站，当源站类型OriginType=COS或AWS_S3时有效，取值有：
        /// - on：使用私有鉴权；
        /// - off：不使用私有鉴权。
        /// 不填写，默认值为：off。
        public let privateAccess: String?

        /// 私有鉴权使用参数，当源站类型PrivateAccess=on时有效。
        public let privateParameters: [PrivateParameter]?

        public init(originType: String, origin: String, backupOrigin: String? = nil, privateAccess: String? = nil, privateParameters: [PrivateParameter]? = nil) {
            self.originType = originType
            self.origin = origin
            self.backupOrigin = backupOrigin
            self.privateAccess = privateAccess
            self.privateParameters = privateParameters
        }

        enum CodingKeys: String, CodingKey {
            case originType = "OriginType"
            case origin = "Origin"
            case backupOrigin = "BackupOrigin"
            case privateAccess = "PrivateAccess"
            case privateParameters = "PrivateParameters"
        }
    }

    /// 源站防护信息
    public struct OriginProtectionInfo: TCOutputModel {
        /// 站点ID。
        public let zoneId: String

        /// 域名列表。
        public let hosts: [String]

        /// 代理ID列表。
        public let proxyIds: [String]

        /// 当前版本的IP白名单。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentIPWhitelist: IPWhitelist?

        /// 该站点是否需要更新源站白名单，取值有：
        /// - true ：需要更新IP白名单 ；
        /// - false ：无需更新IP白名单。
        public let needUpdate: Bool

        /// 源站防护状态，取值有：
        /// - online ：源站防护启用中 ；
        /// - offline ：源站防护已停用 ；
        /// - nonactivate ：源站防护未激活，仅在从未使用过源站防护功能的站点调用中返回。
        public let status: String

        /// 站点套餐是否支持源站防护，取值有：
        /// - true ：支持 ；
        /// - false ：不支持。
        public let planSupport: Bool

        /// 最新IP白名单与当前IP白名单的对比。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let diffIPWhitelist: DiffIPWhitelist?

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case hosts = "Hosts"
            case proxyIds = "ProxyIds"
            case currentIPWhitelist = "CurrentIPWhitelist"
            case needUpdate = "NeedUpdate"
            case status = "Status"
            case planSupport = "PlanSupport"
            case diffIPWhitelist = "DiffIPWhitelist"
        }
    }

    /// 源站组记录
    public struct OriginRecord: TCInputModel, TCOutputModel {
        /// 源站记录值，不包含端口信息，可以为：IPv4，IPv6，域名格式。
        public let record: String

        /// 源站记录ID。
        public let recordId: String?

        /// 源站端口，取值范围：[1-65535]。
        public let port: UInt64?

        /// 当源站配置类型ConfigurationType=weight时，表示权重。
        /// 不配置权重信息时，所有源站组记录统一填写为0或者不填写，表示多个源站轮询回源。
        /// 配置权重信息时，取值为[1-100]，多个源站权重总和应为100，表示多个源站按照权重回源。
        /// 当源站配置类型ConfigurationType=proto时，表示权重。
        /// 不配置权重信息时，所有源站组记录统一填写为0或者不填写，表示多个源站轮询回源。
        /// 配置权重信息时，取值为[1-100]，源站组内Proto相同的多个源站权重总和应为100，表示多个源站按照权重回源。
        public let weight: UInt64?

        /// 当源站配置类型ConfigurationType=proto时，表示源站的协议类型，将按照客户端请求协议回到相应的源站，取值有：
        /// - http：HTTP协议源站；
        /// - https：HTTPS协议源站。
        public let proto: String?

        /// 当源站配置类型ConfigurationType=area时，表示区域，为空表示全部地区。取值为iso-3166中alpha-2编码或者大洲区域代码。大洲区域代码取值为：
        /// - Asia：亚洲；
        /// - Europe：欧洲；
        /// - Africa：非洲；
        /// - Oceania：大洋洲；
        /// - Americas：美洲。
        /// 源站组记录中，至少需要有一项为全部地区。
        public let area: [String]?

        /// 当源站类型OriginType=third_part时有效
        /// 是否私有鉴权，取值有：
        /// - true：使用私有鉴权；
        /// - false：不使用私有鉴权。
        /// 不填写，默认值为：false。
        public let `private`: Bool?

        /// 当源站类型Private=true时有效，表示私有鉴权使用参数。
        public let privateParameters: [PrivateParameter]?

        public init(record: String, recordId: String? = nil, port: UInt64? = nil, weight: UInt64? = nil, proto: String? = nil, area: [String]? = nil, private: Bool? = nil, privateParameters: [PrivateParameter]? = nil) {
            self.record = record
            self.recordId = recordId
            self.port = port
            self.weight = weight
            self.proto = proto
            self.area = area
            self.private = `private`
            self.privateParameters = privateParameters
        }

        enum CodingKeys: String, CodingKey {
            case record = "Record"
            case recordId = "RecordId"
            case port = "Port"
            case weight = "Weight"
            case proto = "Proto"
            case area = "Area"
            case `private` = "Private"
            case privateParameters = "PrivateParameters"
        }
    }

    /// 例外规则的详细模块配置。
    public struct PartialModule: TCInputModel, TCOutputModel {
        /// 模块名称，取值为：
        /// - waf：托管规则。
        public let module: String?

        /// 模块下的需要例外的具体规则ID列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let include: [Int64]?

        public init(module: String? = nil, include: [Int64]? = nil) {
            self.module = module
            self.include = include
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case include = "Include"
        }
    }

    /// edgeone套餐信息
    public struct PlanInfo: TCOutputModel {
        /// 结算货币类型，取值有：
        /// - CNY ：人民币结算；
        /// - USD ：美元结算。
        public let currency: String

        /// 套餐所含流量，该流量数值为安全加速流量，内容加速流量和智能加速流量的总和（单位：字节）。
        public let flux: UInt64

        /// 结算周期，取值有：
        /// - y ：按年结算；
        /// - m ：按月结算；
        /// - h ：按小时结算；
        /// - M ：按分钟结算；
        /// - s ：按秒结算。
        public let frequency: String

        /// 套餐类型，取值有：
        /// - sta ：全球内容分发网络（不包括中国大陆）标准版套餐；
        /// - sta_with_bot ：全球内容分发网络（不包括中国大陆）标准版套餐附带bot管理；
        /// - sta_cm ：中国大陆内容分发网络标准版套餐；
        /// - sta_cm_with_bot ：中国大陆内容分发网络标准版套餐附带bot管理；
        /// - sta_global ：全球内容分发网络（包括中国大陆）标准版套餐；
        /// - sta_global_with_bot ：全球内容分发网络（包括中国大陆）标准版套餐附带bot管理；
        /// - ent ：全球内容分发网络（不包括中国大陆）企业版套餐；
        /// - ent_with_bot ： 全球内容分发网络（不包括中国大陆）企业版套餐附带bot管理；
        /// - ent_cm ：中国大陆内容分发网络企业版套餐；
        /// - ent_cm_with_bot ：中国大陆内容分发网络企业版套餐附带bot管理；
        /// - ent_global ：全球内容分发网络（包括中国大陆）企业版套餐；
        /// - ent_global_with_bot ：全球内容分发网络（包括中国大陆）企业版套餐附带bot管理。
        public let planType: String

        /// 套餐价格（单位：分）。
        public let price: Float

        /// 套餐所含请求次数，该请求次数为安全加速请求次数。（单位：次）。
        public let request: UInt64

        /// 套餐所能绑定的站点个数。
        public let siteNumber: UInt64

        /// 套餐加速区域类型，取值有：
        /// - mainland ：中国大陆；
        /// - overseas ：全球（不包括中国大陆）；
        /// - global ：全球（包括中国大陆）。
        public let area: String

        enum CodingKeys: String, CodingKey {
            case currency = "Currency"
            case flux = "Flux"
            case frequency = "Frequency"
            case planType = "PlanType"
            case price = "Price"
            case request = "Request"
            case siteNumber = "SiteNumber"
            case area = "Area"
        }
    }

    /// POST请求上传文件流式传输最大限制
    public struct PostMaxSize: TCInputModel, TCOutputModel {
        /// 是否开启 POST 请求上传文件限制，平台默认为限制为32MB，取值有：
        /// - on：开启限制；
        /// - off：关闭限制。
        public let `switch`: String

        /// 最大限制，取值在1MB和500MB之间。单位字节。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxSize: Int64?

        public init(switch: String, maxSize: Int64? = nil) {
            self.switch = `switch`
            self.maxSize = maxSize
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case maxSize = "MaxSize"
        }
    }

    /// 源站记录私有鉴权参数
    public struct PrivateParameter: TCInputModel, TCOutputModel {
        /// 私有鉴权参数名称，取值有：
        /// - AccessKeyId：鉴权参数Access Key ID；
        /// - SecretAccessKey：鉴权参数Secret Access Key。
        public let name: String

        /// 私有鉴权参数值。
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 查询条件
    public struct QueryCondition: TCInputModel {
        /// 筛选条件的key。
        public let key: String

        /// 查询条件操作符，操作类型有：
        /// - equals: 等于；
        /// - notEquals: 不等于；
        /// - include: 包含；
        /// - notInclude: 不包含;
        /// - startWith: 开始的值是value；
        /// - notStartWith: 不以value的值开始；
        /// - endWith: 结尾是value值；
        /// - notEndWith: 不以value的值结尾。
        public let `operator`: String

        /// 筛选条件的值。
        public let value: [String]

        public init(key: String, operator: String, value: [String]) {
            self.key = key
            self.operator = `operator`
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case `operator` = "Operator"
            case value = "Value"
        }
    }

    /// CacheKey中包含请求参数
    public struct QueryString: TCInputModel, TCOutputModel {
        /// CacheKey是否由QueryString组成，取值有：
        /// - on：是；
        /// - off：否。
        public let `switch`: String

        /// CacheKey使用QueryString的方式，取值有：
        /// - includeCustom：使用部分url参数；
        /// - excludeCustom：排除部分url参数。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let action: String?

        /// 使用/排除的url参数数组。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: [String]?

        public init(switch: String, action: String? = nil, value: [String]? = nil) {
            self.switch = `switch`
            self.action = action
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case action = "Action"
            case value = "Value"
        }
    }

    /// Quic配置项
    public struct Quic: TCInputModel, TCOutputModel {
        /// 是否开启 Quic 配置，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 刷新/预热 可用量及配额
    public struct Quota: TCOutputModel {
        /// 单次批量提交配额上限。
        public let batch: Int64

        /// 每日提交配额上限。
        public let daily: Int64

        /// 每日剩余的可提交配额。
        public let dailyAvailable: Int64

        /// 刷新预热缓存类型，取值有：
        /// - purge_prefix：按前缀刷新；
        /// - purge_url：按URL刷新；
        /// - purge_host：按Hostname刷新；
        /// - purge_all：刷新全部缓存内容；
        /// - purge_cache_tag：按CacheTag刷新；
        /// - prefetch_url：按URL预热。
        public let type: String

        enum CodingKeys: String, CodingKey {
            case batch = "Batch"
            case daily = "Daily"
            case dailyAvailable = "DailyAvailable"
            case type = "Type"
        }
    }

    /// 速率限制规则
    public struct RateLimitConfig: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 速率限制-用户规则列表。如果为null，默认使用历史配置。
        public let rateLimitUserRules: [RateLimitUserRule]?

        /// 速率限制模板功能。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rateLimitTemplate: RateLimitTemplate?

        /// 智能客户端过滤。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rateLimitIntelligence: RateLimitIntelligence?

        /// 速率限制-托管定制规则。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rateLimitCustomizes: [RateLimitUserRule]?

        public init(switch: String, rateLimitUserRules: [RateLimitUserRule]? = nil, rateLimitTemplate: RateLimitTemplate? = nil, rateLimitIntelligence: RateLimitIntelligence? = nil, rateLimitCustomizes: [RateLimitUserRule]? = nil) {
            self.switch = `switch`
            self.rateLimitUserRules = rateLimitUserRules
            self.rateLimitTemplate = rateLimitTemplate
            self.rateLimitIntelligence = rateLimitIntelligence
            self.rateLimitCustomizes = rateLimitCustomizes
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case rateLimitUserRules = "RateLimitUserRules"
            case rateLimitTemplate = "RateLimitTemplate"
            case rateLimitIntelligence = "RateLimitIntelligence"
            case rateLimitCustomizes = "RateLimitCustomizes"
        }
    }

    /// 智能客户端过滤
    public struct RateLimitIntelligence: TCInputModel, TCOutputModel {
        /// 功能开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 执行动作，取值有：
        /// - monitor：观察；
        /// - alg：挑战。
        public let action: String

        /// 规则id，仅出参使用。
        public let ruleId: Int64?

        public init(switch: String, action: String, ruleId: Int64? = nil) {
            self.switch = `switch`
            self.action = action
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case action = "Action"
            case ruleId = "RuleId"
        }
    }

    /// 速率限制模板
    public struct RateLimitTemplate: TCInputModel, TCOutputModel {
        /// 模板等级名称，取值有：
        /// - sup_loose：超级宽松；
        /// - loose：宽松；
        /// - emergency：紧急；
        /// - normal：适中；
        /// - strict：严格；
        /// - close：关闭，仅精准速率限制生效。
        public let mode: String

        /// 模板处置方式，取值有：
        /// - alg：JavaScript挑战；
        /// - monitor：观察。
        /// 不填写默认取alg。
        public let action: String?

        /// 模板值详情。仅出参返回。
        public let rateLimitTemplateDetail: RateLimitTemplateDetail?

        public init(mode: String, action: String? = nil, rateLimitTemplateDetail: RateLimitTemplateDetail? = nil) {
            self.mode = mode
            self.action = action
            self.rateLimitTemplateDetail = rateLimitTemplateDetail
        }

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case action = "Action"
            case rateLimitTemplateDetail = "RateLimitTemplateDetail"
        }
    }

    /// 模板当前详细配置
    public struct RateLimitTemplateDetail: TCOutputModel {
        /// 模板等级名称，取值有：
        /// - sup_loose：超级宽松；
        /// - loose：宽松；
        /// - emergency：紧急；
        /// - normal：适中；
        /// - strict：严格；
        /// - close：关闭，仅精准速率限制生效。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mode: String?

        /// 唯一id。
        public let id: Int64?

        /// 模板处置方式，取值有：
        /// - alg：JavaScript挑战；
        /// - monitor：观察。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let action: String?

        /// 惩罚时间，取值范围0-2天，单位秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let punishTime: Int64?

        /// 统计阈值，单位是次，取值范围0-4294967294。
        public let threshold: Int64?

        /// 统计周期，取值范围0-120秒。
        public let period: Int64?

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case id = "ID"
            case action = "Action"
            case punishTime = "PunishTime"
            case threshold = "Threshold"
            case period = "Period"
        }
    }

    /// RateLimit规则
    public struct RateLimitUserRule: TCInputModel, TCOutputModel {
        /// 速率限制统计阈值，单位是次，取值范围0-4294967294。
        public let threshold: Int64

        /// 速率限制统计时间，取值范围 10/20/30/40/50/60 单位是秒。
        public let period: Int64

        /// 规则名，只能以英文字符，数字，下划线组合，且不能以下划线开头。
        public let ruleName: String

        /// 处置动作，取值有：
        /// - monitor：观察；
        /// - drop：拦截；
        /// - alg：JavaScript挑战。
        public let action: String

        /// 惩罚时长，0-2天。
        public let punishTime: Int64

        /// 处罚时长单位，取值有：
        /// - second：秒；
        /// - minutes：分钟；
        /// - hour：小时。
        public let punishTimeUnit: String

        /// 规则状态，取值有：
        /// - on：生效；
        /// - off：不生效。
        /// 默认on生效。
        public let ruleStatus: String

        /// 规则详情。
        public let aclConditions: [AclCondition]

        /// 规则权重，取值范围0-100。
        public let rulePriority: Int64

        /// 规则 Id。仅出参使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleID: Int64?

        /// 过滤词，取值有：
        /// - sip：客户端ip。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freqFields: [String]?

        /// 更新时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 统计范围，字段为 null 时，代表 source_to_eo。取值有：
        /// - source_to_eo：（响应）源站到EdgeOne。
        /// - client_to_eo：（请求）客户端到EdgeOne；
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freqScope: [String]?

        public init(threshold: Int64, period: Int64, ruleName: String, action: String, punishTime: Int64, punishTimeUnit: String, ruleStatus: String, aclConditions: [AclCondition], rulePriority: Int64, ruleID: Int64? = nil, freqFields: [String]? = nil, updateTime: String? = nil, freqScope: [String]? = nil) {
            self.threshold = threshold
            self.period = period
            self.ruleName = ruleName
            self.action = action
            self.punishTime = punishTime
            self.punishTimeUnit = punishTimeUnit
            self.ruleStatus = ruleStatus
            self.aclConditions = aclConditions
            self.rulePriority = rulePriority
            self.ruleID = ruleID
            self.freqFields = freqFields
            self.updateTime = updateTime
            self.freqScope = freqScope
        }

        enum CodingKeys: String, CodingKey {
            case threshold = "Threshold"
            case period = "Period"
            case ruleName = "RuleName"
            case action = "Action"
            case punishTime = "PunishTime"
            case punishTimeUnit = "PunishTimeUnit"
            case ruleStatus = "RuleStatus"
            case aclConditions = "AclConditions"
            case rulePriority = "RulePriority"
            case ruleID = "RuleID"
            case freqFields = "FreqFields"
            case updateTime = "UpdateTime"
            case freqScope = "FreqScope"
        }
    }

    /// 计费资源
    public struct Resource: TCOutputModel {
        /// 资源 ID。
        public let id: String

        /// 付费模式，取值有：
        /// - 0：后付费。
        public let payMode: Int64

        /// 创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 生效时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var enableTime: Date

        /// 失效时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var expireTime: Date

        /// 套餐状态，取值有：
        /// - normal：正常；
        /// - isolated：隔离；
        /// - destroyed：销毁。
        public let status: String

        /// 询价参数。
        public let sv: [Sv]

        /// 是否自动续费，取值有：
        /// - 0：默认状态；
        /// - 1：自动续费；
        /// - 2：不自动续费。
        public let autoRenewFlag: Int64

        /// 套餐关联资源 ID。
        public let planId: String

        /// 地域，取值有：
        /// - mainland：国内；
        /// - overseas：海外。
        /// - global：全球。
        public let area: String

        /// 资源类型，取值有：
        /// - plan：套餐类型；
        /// - pay-as-you-go：后付费类型。
        /// - value-added：增值服务类型。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let group: String?

        /// 当前资源绑定的站点数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneNumber: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case payMode = "PayMode"
            case createTime = "CreateTime"
            case enableTime = "EnableTime"
            case expireTime = "ExpireTime"
            case status = "Status"
            case sv = "Sv"
            case autoRenewFlag = "AutoRenewFlag"
            case planId = "PlanId"
            case area = "Area"
            case group = "Group"
            case zoneNumber = "ZoneNumber"
        }
    }

    /// 规则引擎HTTP请求头/响应头类型的动作
    public struct RewriteAction: TCInputModel, TCOutputModel {
        /// 功能名称，功能名称填写规范可调用接口 [查询规则引擎的设置参数](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) 查看。
        public let action: String

        /// 参数。
        public let parameters: [RuleRewriteActionParams]

        public init(action: String, parameters: [RuleRewriteActionParams]) {
            self.action = action
            self.parameters = parameters
        }

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case parameters = "Parameters"
        }
    }

    /// 规则引擎规则项，Conditions 数组内多个项的关系为 或，内层 Conditions 列表内多个项的关系为 且。
    public struct Rule: TCInputModel, TCOutputModel {
        /// 执行的功能。
        public let actions: [Action]

        /// 执行功能判断条件。
        /// 注意：满足该数组内任意一项条件，功能即可执行。
        public let conditions: [RuleAndConditions]

        /// 嵌套规则。
        public let subRules: [SubRuleItem]?

        public init(actions: [Action], conditions: [RuleAndConditions], subRules: [SubRuleItem]? = nil) {
            self.actions = actions
            self.conditions = conditions
            self.subRules = subRules
        }

        enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case conditions = "Conditions"
            case subRules = "SubRules"
        }
    }

    /// 规则引擎条件且关系条件列表
    public struct RuleAndConditions: TCInputModel, TCOutputModel {
        /// 规则引擎条件，该数组内所有项全部满足即判断该条件满足。
        public let conditions: [RuleCondition]

        public init(conditions: [RuleCondition]) {
            self.conditions = conditions
        }

        enum CodingKeys: String, CodingKey {
            case conditions = "Conditions"
        }
    }

    /// 规则引擎可应用于匹配请求的设置详细信息，可选参数配置项
    public struct RuleChoicePropertiesItem: TCOutputModel {
        /// 参数名称。
        public let name: String

        /// 参数值类型。
        /// - CHOICE：参数值只能在 ChoicesValue 中选择；
        /// - TOGGLE：参数值为开关类型，可在 ChoicesValue 中选择；
        /// - CUSTOM_NUM：参数值用户自定义，整型类型；
        /// - CUSTOM_STRING：参数值用户自定义，字符串类型。
        public let type: String

        /// 参数值的可选值。
        /// 注意：若参数值为用户自定义则该数组为空数组。
        public let choicesValue: [String]

        /// 数值参数的最小值，非数值参数或 Min 和 Max 值都为 0 则此项无意义。
        public let min: Int64

        /// 数值参数的最大值，非数值参数或 Min 和 Max 值都为 0 则此项无意义。
        public let max: Int64

        /// 参数值是否支持多选或者填写多个。
        public let isMultiple: Bool

        /// 是否允许为空。
        public let isAllowEmpty: Bool

        /// 特殊参数。
        /// - 为 NULL：RuleAction 选择 NormalAction；
        /// - 成员参数 Id 为 Action：RuleAction 选择 RewirteAction；
        /// - 成员参数 Id 为 StatusCode：RuleAction 选择 CodeAction。
        public let extraParameter: RuleExtraParameter

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case choicesValue = "ChoicesValue"
            case min = "Min"
            case max = "Max"
            case isMultiple = "IsMultiple"
            case isAllowEmpty = "IsAllowEmpty"
            case extraParameter = "ExtraParameter"
        }
    }

    /// 规则引擎条件使用StatusCode字段动作参数
    public struct RuleCodeActionParams: TCInputModel, TCOutputModel {
        /// 状态 Code。
        public let statusCode: Int64

        /// 参数名称，参数填写规范可调用接口 [查询规则引擎的设置参数](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) 查看。
        public let name: String

        /// 参数值。
        public let values: [String]

        public init(statusCode: Int64, name: String, values: [String]) {
            self.statusCode = statusCode
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case statusCode = "StatusCode"
            case name = "Name"
            case values = "Values"
        }
    }

    /// 规则引擎条件参数
    public struct RuleCondition: TCInputModel, TCOutputModel {
        /// 运算符，取值有：
        /// - equal: 等于；
        /// - notequal: 不等于；
        /// - exist: 存在；
        /// - notexist: 不存在。
        public let `operator`: String

        /// 匹配类型，取值有：
        /// - filename：文件名；
        /// - extension：文件后缀；
        /// - host：HOST；
        /// - full_url：URL Full，当前站点下完整 URL 路径，必须包含 HTTP 协议，Host 和 路径；
        /// - url：URL Path，当前站点下 URL 路径的请求；
        /// - client_country：客户端国家/地区；
        /// - query_string：查询字符串，当前站点下请求URL的查询字符串；
        /// - request_header：HTTP请求头部。
        public let target: String

        /// 对应匹配类型的参数值，仅在匹配类型为查询字符串或HTTP请求头并且运算符取值为存在或不存在时允许传空数组，对应匹配类型有：
        /// - 文件后缀：jpg、txt等文件后缀；
        /// - 文件名称：例如 foo.jpg 中的 foo；
        /// - 全部（站点任意请求）： all；
        /// - HOST：当前站点下的 host ，例如www.maxx55.com；
        /// - URL Path：当前站点下 URL 路径的请求，例如：/example；
        /// - URL Full：当前站点下完整 URL 请求，必须包含 HTTP 协议，Host 和 路径，例如：https://www.maxx55.cn/example；
        /// - 客户端国家/地区：符合ISO3166标准的国家/地区标识；
        /// - 查询字符串: 当前站点下URL请求中查询字符串的参数值，例如lang=cn&version=1中的cn和1；
        /// - HTTP 请求头: HTTP请求头部字段值，例如Accept-Language:zh-CN,zh;q=0.9中的zh-CN,zh;q=0.9。
        public let values: [String]?

        /// 是否忽略参数值的大小写，默认值为 false。
        public let ignoreCase: Bool?

        /// 对应匹配类型的参数名称，在 Target 值为以下取值时有效，有效时值不能为空：
        /// - query_string（查询字符串）: 当前站点下URL请求中查询字符串的参数名称，例如lang=cn&version=1中的lang和version；
        /// - request_header（HTTP 请求头）: HTTP请求头部字段名，例如Accept-Language:zh-CN,zh;q=0.9中的Accept-Language。
        public let name: String?

        /// 是否忽略参数名称的大小写，默认值为 false。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoreNameCase: Bool?

        public init(operator: String, target: String, values: [String]? = nil, ignoreCase: Bool? = nil, name: String? = nil, ignoreNameCase: Bool? = nil) {
            self.operator = `operator`
            self.target = target
            self.values = values
            self.ignoreCase = ignoreCase
            self.name = name
            self.ignoreNameCase = ignoreNameCase
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case target = "Target"
            case values = "Values"
            case ignoreCase = "IgnoreCase"
            case name = "Name"
            case ignoreNameCase = "IgnoreNameCase"
        }
    }

    /// 规则引擎参数详情信息，特殊参数类型。
    public struct RuleExtraParameter: TCOutputModel {
        /// 参数名，取值有：
        /// - Action：修改 HTTP 头部所需参数，RuleAction 选择 RewirteAction；
        /// - StatusCode：状态码相关功能所需参数，RuleAction 选择 CodeAction。
        public let id: String

        /// 参数值类型。
        /// - CHOICE：参数值只能在 Values 中选择；
        /// - CUSTOM_NUM：参数值用户自定义，整型类型；
        /// - CUSTOM_STRING：参数值用户自定义，字符串类型。
        public let type: String

        /// 可选参数值。
        /// 注意：当 Id 的值为 StatusCode 时数组中的值为整型，填写参数值时请填写字符串的整型数值。
        public let choices: [String]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case type = "Type"
            case choices = "Choices"
        }
    }

    /// 规则引擎规则详情
    public struct RuleItem: TCOutputModel {
        /// 规则ID。
        public let ruleId: String

        /// 规则名称，名称字符串长度 1~255。
        public let ruleName: String

        /// 规则状态，取值有:
        /// - enable: 启用；
        /// - disable: 未启用。
        public let status: String

        /// 规则内容。
        public let rules: [Rule]

        /// 规则优先级, 值越大优先级越高，最小为 1。
        public let rulePriority: Int64

        /// 规则标签。
        public let tags: [String]

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case status = "Status"
            case rules = "Rules"
            case rulePriority = "RulePriority"
            case tags = "Tags"
        }
    }

    /// 规则引擎条件常规动作参数
    public struct RuleNormalActionParams: TCInputModel, TCOutputModel {
        /// 参数名称，参数填写规范可调用接口 [查询规则引擎的设置参数](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) 查看。
        public let name: String

        /// 参数值。
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 规则引擎条件 HTTP 请求/响应头操作动作参数。
    public struct RuleRewriteActionParams: TCInputModel, TCOutputModel {
        /// 功能参数名称，参数填写规范可调用接口 [查询规则引擎的设置参数](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) 查看。现在只有三种取值：
        /// - add：添加 HTTP 头部；
        /// - set：重写 HTTP 头部；
        /// - del：删除 HTTP 头部。
        public let action: String

        /// 参数名称。
        public let name: String

        /// 参数值。
        public let values: [String]

        public init(action: String, name: String, values: [String]) {
            self.action = action
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case name = "Name"
            case values = "Values"
        }
    }

    /// 规则引擎可应用于匹配请求的设置详细信息。
    public struct RulesProperties: TCOutputModel {
        /// 值为参数名称。
        public let name: String

        /// 数值参数的最小值，非数值参数或 Min 和 Max 值都为 0 则此项无意义。
        public let min: Int64

        /// 参数值的可选值。
        /// 注意：若参数值为用户自定义则该数组为空数组。
        public let choicesValue: [String]

        /// 参数值类型。
        /// - CHOICE：参数值只能在 ChoicesValue 中选择；
        /// - TOGGLE：参数值为开关类型，可在 ChoicesValue 中选择；
        /// - OBJECT：参数值为对象类型，ChoiceProperties 为改对象类型关联的属性；
        /// - CUSTOM_NUM：参数值用户自定义，整型类型；
        /// - CUSTOM_STRING：参数值用户自定义，字符串类型。
        /// 注意：当参数类型为 OBJECT 类型时，请注意参考 [示例2 参数为 OBJECT 类型的创建](https://tcloud4api.woa.com/document/product/1657/79382?!preview&!document=1)
        public let type: String

        /// 数值参数的最大值，非数值参数或 Min 和 Max 值都为 0 则此项无意义。
        public let max: Int64

        /// 参数值是否支持多选或者填写多个。
        public let isMultiple: Bool

        /// 是否允许为空。
        public let isAllowEmpty: Bool

        /// 该参数对应的关联配置参数，属于调用接口的必填参数。
        /// 注意：如果可选参数无特殊新增参数则该数组为空数组。
        public let choiceProperties: [RuleChoicePropertiesItem]

        /// - 为 NULL：无特殊参数，RuleAction 选择 NormalAction；
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraParameter: RuleExtraParameter?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case min = "Min"
            case choicesValue = "ChoicesValue"
            case type = "Type"
            case max = "Max"
            case isMultiple = "IsMultiple"
            case isAllowEmpty = "IsAllowEmpty"
            case choiceProperties = "ChoiceProperties"
            case extraParameter = "ExtraParameter"
        }
    }

    /// 规则引擎可应用于匹配请求的设置列表及其详细信息
    public struct RulesSettingAction: TCOutputModel {
        /// 功能名称，取值有：
        /// - 访问URL 重写（AccessUrlRedirect）；
        /// - 回源 URL 重写 （UpstreamUrlRedirect）；
        /// - 自定义错误页面
        ///   (ErrorPage)；
        ///
        /// - QUIC（QUIC）；
        /// - WebSocket （WebSocket）；
        /// - 视频拖拽（VideoSeek）；
        /// - Token 鉴权（Authentication）；
        /// - 自定义CacheKey（CacheKey）；
        /// - 节点缓存 TTL （Cache）；
        /// - 浏览器缓存 TTL（MaxAge）；
        /// - 离线缓存（OfflineCache）；
        /// - 智能加速（SmartRouting）；
        /// - 分片回源（RangeOriginPull）；
        /// - HTTP/2 回源（UpstreamHttp2）；
        /// - Host Header 重写（HostHeader）；
        /// - 强制 HTTPS（ForceRedirect）；
        /// - 回源 HTTPS（OriginPullProtocol）；
        /// - 缓存预刷新（CachePrefresh）；
        /// - 智能压缩（Compression）；
        /// - 修改 HTTP 请求头（RequestHeader）；
        /// - 修改HTTP响应头（ResponseHeader）;
        /// - 状态码缓存 TTL（StatusCodeCache）;
        /// - Hsts；
        /// - ClientIpHeader；
        /// - TlsVersion；
        /// - OcspStapling。
        public let action: String

        /// 参数信息。
        public let properties: [RulesProperties]

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case properties = "Properties"
        }
    }

    /// 安全数据Entry返回值
    public struct SecEntry: TCOutputModel {
        /// 查询维度值。
        public let key: String

        /// 查询维度下详细数据。
        public let value: [SecEntryValue]

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 安全数据维度值信息
    public struct SecEntryValue: TCOutputModel {
        /// 指标名称。
        public let metric: String

        /// 时序数据详情。
        public let detail: [TimingDataItem]

        /// 最大值。
        public let max: Int64

        /// 平均值。
        public let avg: Float

        /// 数据总和。
        public let sum: Float

        enum CodingKeys: String, CodingKey {
            case metric = "Metric"
            case detail = "Detail"
            case max = "Max"
            case avg = "Avg"
            case sum = "Sum"
        }
    }

    /// 安全配置
    public struct SecurityConfig: TCInputModel, TCOutputModel {
        /// 托管规则。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wafConfig: WafConfig?

        /// 速率限制。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rateLimitConfig: RateLimitConfig?

        /// 自定义规则。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aclConfig: AclConfig?

        /// Bot配置。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let botConfig: BotConfig?

        /// 七层防护总开关。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let switchConfig: SwitchConfig?

        /// 基础访问管控。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipTableConfig: IpTableConfig?

        /// 例外规则配置。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exceptConfig: ExceptConfig?

        /// 自定义拦截页面配置。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dropPageConfig: DropPageConfig?

        /// 模板配置。此处仅出参数使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateConfig: TemplateConfig?

        /// 慢速攻击配置。如果为null，默认使用历史配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slowPostConfig: SlowPostConfig?

        public init(wafConfig: WafConfig? = nil, rateLimitConfig: RateLimitConfig? = nil, aclConfig: AclConfig? = nil, botConfig: BotConfig? = nil, switchConfig: SwitchConfig? = nil, ipTableConfig: IpTableConfig? = nil, exceptConfig: ExceptConfig? = nil, dropPageConfig: DropPageConfig? = nil, templateConfig: TemplateConfig? = nil, slowPostConfig: SlowPostConfig? = nil) {
            self.wafConfig = wafConfig
            self.rateLimitConfig = rateLimitConfig
            self.aclConfig = aclConfig
            self.botConfig = botConfig
            self.switchConfig = switchConfig
            self.ipTableConfig = ipTableConfig
            self.exceptConfig = exceptConfig
            self.dropPageConfig = dropPageConfig
            self.templateConfig = templateConfig
            self.slowPostConfig = slowPostConfig
        }

        enum CodingKeys: String, CodingKey {
            case wafConfig = "WafConfig"
            case rateLimitConfig = "RateLimitConfig"
            case aclConfig = "AclConfig"
            case botConfig = "BotConfig"
            case switchConfig = "SwitchConfig"
            case ipTableConfig = "IpTableConfig"
            case exceptConfig = "ExceptConfig"
            case dropPageConfig = "DropPageConfig"
            case templateConfig = "TemplateConfig"
            case slowPostConfig = "SlowPostConfig"
        }
    }

    /// 安全类型配置项。
    public struct SecurityType: TCInputModel, TCOutputModel {
        /// 安全类型开关，取值为：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// https 服务端证书配置
    public struct ServerCertInfo: TCInputModel, TCOutputModel {
        /// 服务器证书 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certId: String?

        /// 证书备注名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alias: String?

        /// 证书类型，取值有：
        /// - default：默认证书；</lil>
        /// - upload：用户上传；
        /// - managed：腾讯云托管。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 证书过期时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var expireTime: Date?

        /// 证书部署时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var deployTime: Date?

        /// 签名算法。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signAlgo: String?

        /// 证书归属域名名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let commonName: String?

        public init(certId: String, alias: String? = nil, type: String? = nil, expireTime: Date? = nil, deployTime: Date? = nil, signAlgo: String? = nil, commonName: String? = nil) {
            self.certId = certId
            self.alias = alias
            self.type = type
            self._expireTime = .init(wrappedValue: expireTime)
            self._deployTime = .init(wrappedValue: deployTime)
            self.signAlgo = signAlgo
            self.commonName = commonName
        }

        enum CodingKeys: String, CodingKey {
            case certId = "CertId"
            case alias = "Alias"
            case type = "Type"
            case expireTime = "ExpireTime"
            case deployTime = "DeployTime"
            case signAlgo = "SignAlgo"
            case commonName = "CommonName"
        }
    }

    /// 例外规则的跳过匹配条件，即在例外时根据本匹配条件，略过指定字段及内容。
    public struct SkipCondition: TCInputModel, TCOutputModel {
        /// 例外跳过类型，取值为：
        /// - header_fields：HTTP请求Header；
        /// - cookie：HTTP请求Cookie；
        /// - query_string：HTTP请求URL中的Query参数；
        /// - uri：HTTP请求URI；
        /// - body_raw：HTTP请求Body；
        /// - body_json： JSON格式的HTTP Body。
        public let type: String

        /// 选择跳过的字段，取值为：
        /// - args：uri 下选择 query 参数: ?name1=jack&age=12；
        /// - path：uri 下选择部分路径：/path/to/resource.jpg；
        /// - full：uri 下选择完整路径：example.com/path/to/resource.jpg?name1=jack&age=12；
        /// - upload_filename：分段文件名，即分段传输文件时；
        /// - keys：所有的Key；
        /// - values：匹配Key对应的值；
        /// - key_value：匹配Key及匹配Value。
        public let selector: String

        /// 匹配Key所使用的匹配方式，取值为：
        /// - equal：精准匹配，等于；
        /// - wildcard：通配符匹配，支持 * 通配。
        public let matchFromType: String?

        /// 匹配Key的值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let matchFrom: [String]?

        /// 匹配Content所使用的匹配方式，取值为：
        /// - equal：精准匹配，等于；
        /// - wildcard：通配符匹配，支持 * 通配。
        public let matchContentType: String?

        /// 匹配Value的值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let matchContent: [String]?

        public init(type: String, selector: String, matchFromType: String? = nil, matchFrom: [String]? = nil, matchContentType: String? = nil, matchContent: [String]? = nil) {
            self.type = type
            self.selector = selector
            self.matchFromType = matchFromType
            self.matchFrom = matchFrom
            self.matchContentType = matchContentType
            self.matchContent = matchContent
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case selector = "Selector"
            case matchFromType = "MatchFromType"
            case matchFrom = "MatchFrom"
            case matchContentType = "MatchContentType"
            case matchContent = "MatchContent"
        }
    }

    /// 慢速攻击配置。
    public struct SlowPostConfig: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 首包配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let firstPartConfig: FirstPartConfig?

        /// 基础配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slowRateConfig: SlowRateConfig?

        /// 慢速攻击的处置动作，取值有：
        /// - monitor：观察；
        /// - drop：拦截。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let action: String?

        /// 本规则的Id。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: UInt64?

        public init(switch: String, firstPartConfig: FirstPartConfig? = nil, slowRateConfig: SlowRateConfig? = nil, action: String? = nil, ruleId: UInt64? = nil) {
            self.switch = `switch`
            self.firstPartConfig = firstPartConfig
            self.slowRateConfig = slowRateConfig
            self.action = action
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case firstPartConfig = "FirstPartConfig"
            case slowRateConfig = "SlowRateConfig"
            case action = "Action"
            case ruleId = "RuleId"
        }
    }

    /// 慢速攻击的基础配置。
    public struct SlowRateConfig: TCInputModel, TCOutputModel {
        /// 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 统计的间隔，单位是秒，即在首段包传输结束后，将数据传输轴按照本参数切分，每个分片独立计算慢速攻击。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let interval: UInt64?

        /// 统计时应用的速率阈值，单位是bps，即如果本分片中的传输速率没达到本参数的值，则判定为慢速攻击，应用慢速攻击的处置方式。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let threshold: UInt64?

        public init(switch: String, interval: UInt64? = nil, threshold: UInt64? = nil) {
            self.switch = `switch`
            self.interval = interval
            self.threshold = threshold
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case interval = "Interval"
            case threshold = "Threshold"
        }
    }

    /// 智能加速配置
    public struct SmartRouting: TCInputModel, TCOutputModel {
        /// 智能加速配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 支持标准debug结构体
    public struct StandardDebug: TCInputModel, TCOutputModel {
        /// Debug 功能开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 允许的客户端来源。支持填写 IPV4 以及 IPV6 的 IP/IP 段，不填则表示允许任意客户端 IP。
        public let allowClientIPList: [String]

        /// Debug 功能到期时间。超出设置的时间，则功能失效。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var expireTime: Date

        public init(switch: String, allowClientIPList: [String], expireTime: Date) {
            self.switch = `switch`
            self.allowClientIPList = allowClientIPList
            self._expireTime = .init(wrappedValue: expireTime)
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case allowClientIPList = "AllowClientIPList"
            case expireTime = "ExpireTime"
        }
    }

    /// 嵌套规则信息。
    public struct SubRule: TCInputModel, TCOutputModel {
        /// 执行功能判断条件。
        /// 注意：满足该数组内任意一项条件，功能即可执行。
        public let conditions: [RuleAndConditions]

        /// 执行的功能。
        public let actions: [Action]

        public init(conditions: [RuleAndConditions], actions: [Action]) {
            self.conditions = conditions
            self.actions = actions
        }

        enum CodingKeys: String, CodingKey {
            case conditions = "Conditions"
            case actions = "Actions"
        }
    }

    /// 规则引擎嵌套规则
    public struct SubRuleItem: TCInputModel, TCOutputModel {
        /// 嵌套规则信息。
        public let rules: [SubRule]

        /// 规则标签。
        public let tags: [String]?

        public init(rules: [SubRule], tags: [String]? = nil) {
            self.rules = rules
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case tags = "Tags"
        }
    }

    /// 询价参数
    public struct Sv: TCInputModel, TCOutputModel {
        /// 询价参数键。
        public let key: String

        /// 询价参数值。
        public let value: String

        /// 询价参数映射的配额，取值有：
        /// - zone：站点数；
        /// - custom-rule：自定义规则数；
        /// - rate-limiting-rule：速率限制规则数；
        /// - l4-proxy-instance：四层代理实例数。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pack: String?

        /// 询价参数映射的四层代理实例Id。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 询价参数对应的防护等级。
        /// 取值有：
        /// - cm_30G：中国大陆加速区域保底防护30Gbps；
        /// - cm_60G：中国大陆加速区域保底防护60Gbps；
        /// - cm_100G：中国大陆加速区域保底防护100Gbps；
        /// - anycast_300G：全球加速区域（除中国大陆）Anycast联防300Gbps；
        /// - anycast_unlimited：全球加速区域（除中国大陆）Anycast无上限全力防护；
        /// - cm_30G_anycast_300G：中国大陆加速区域保底防护30Gbps，全球加速区域（除中国大陆）Anycast联防300Gbps；
        /// - cm_30G_anycast_unlimited：中国大陆加速区域保底防护30Gbps，全球加速区域（除中国大陆）Anycast无上限全力防护；
        /// - cm_60G_anycast_300G：中国大陆加速区域保底防护60Gbps，全球加速区域（除中国大陆）Anycast联防300Gbps；
        /// - cm_60G_anycast_unlimited：中国大陆加速区域保底防护60Gbps，全球加速区域（除中国大陆）Anycast无上限全力防护；
        /// - cm_100G_anycast_300G：中国大陆加速区域保底防护100Gbps，全球加速区域（除中国大陆）Anycast联防300Gbps；
        /// - cm_100G_anycast_unlimited：中国大陆加速区域保底防护100Gbps，全球加速区域（除中国大陆）Anycast无上限全力防护。
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let protectionSpecs: String?

        public init(key: String, value: String, pack: String? = nil, instanceId: String? = nil, protectionSpecs: String? = nil) {
            self.key = key
            self.value = value
            self.pack = pack
            self.instanceId = instanceId
            self.protectionSpecs = protectionSpecs
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case pack = "Pack"
            case instanceId = "InstanceId"
            case protectionSpecs = "ProtectionSpecs"
        }
    }

    /// 功能总开关
    public struct SwitchConfig: TCInputModel, TCOutputModel {
        /// Web类型的安全总开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        /// 不影响DDoS与Bot的开关。
        public let webSwitch: String

        public init(webSwitch: String) {
            self.webSwitch = webSwitch
        }

        enum CodingKeys: String, CodingKey {
            case webSwitch = "WebSwitch"
        }
    }

    /// 标签配置
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagKey: String?

        /// 标签值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagValue: String?

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 内容管理任务结果
    public struct Task: TCOutputModel {
        /// 任务 ID。
        public let jobId: String

        /// 状态。
        public let status: String

        /// 资源。
        public let target: String

        /// 任务类型。
        public let type: String

        /// 任务创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 任务完成时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case status = "Status"
            case target = "Target"
            case type = "Type"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 安全模板配置
    public struct TemplateConfig: TCInputModel, TCOutputModel {
        /// 模板ID。
        public let templateId: String

        /// 模板名称。
        public let templateName: String

        public init(templateId: String, templateName: String) {
            self.templateId = templateId
            self.templateName = templateName
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
        }
    }

    /// 统计曲线数据项
    public struct TimingDataItem: TCOutputModel {
        /// 返回数据对应时间点，采用unix秒级时间戳。
        public let timestamp: Int64

        /// 具体数值。
        public let value: Int64

        enum CodingKeys: String, CodingKey {
            case timestamp = "Timestamp"
            case value = "Value"
        }
    }

    /// 时序数据信息
    public struct TimingDataRecord: TCOutputModel {
        /// 查询维度值。
        public let typeKey: String

        /// 详细时序数据。
        public let typeValue: [TimingTypeValue]

        enum CodingKeys: String, CodingKey {
            case typeKey = "TypeKey"
            case typeValue = "TypeValue"
        }
    }

    /// 时序类型详细数据
    public struct TimingTypeValue: TCOutputModel {
        /// 数据和。
        public let sum: Int64

        /// 最大值。
        public let max: Int64

        /// 平均值。
        public let avg: Int64

        /// 指标名。
        public let metricName: String

        /// 详细数据。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: [TimingDataItem]?

        enum CodingKeys: String, CodingKey {
            case sum = "Sum"
            case max = "Max"
            case avg = "Avg"
            case metricName = "MetricName"
            case detail = "Detail"
        }
    }

    /// Top类数据记录
    public struct TopDataRecord: TCOutputModel {
        /// 查询维度值。
        public let typeKey: String

        /// top数据排行。
        public let detailData: [TopDetailData]

        enum CodingKeys: String, CodingKey {
            case typeKey = "TypeKey"
            case detailData = "DetailData"
        }
    }

    /// Top数据的详细信息
    public struct TopDetailData: TCOutputModel {
        /// 字段名。
        public let key: String

        /// 字段值。
        public let value: Int64

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// TopN的Entry数据
    public struct TopEntry: TCOutputModel {
        /// top查询维度值。
        public let key: String

        /// 查询具体数据。
        public let value: [TopEntryValue]

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// TopN数据Entry
    public struct TopEntryValue: TCOutputModel {
        /// 排序实体名。
        public let name: String

        /// 排序实体数量。
        public let count: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case count = "Count"
        }
    }

    /// Http2回源配置
    public struct UpstreamHttp2: TCInputModel, TCOutputModel {
        /// http2 回源配置开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 自定义 nameservers
    public struct VanityNameServers: TCInputModel, TCOutputModel {
        /// 自定义 ns 开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 自定义 ns 列表。
        public let servers: [String]?

        public init(switch: String, servers: [String]? = nil) {
            self.switch = `switch`
            self.servers = servers
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case servers = "Servers"
        }
    }

    /// 自定义名字服务器 IP 信息
    public struct VanityNameServersIps: TCOutputModel {
        /// 自定义名字服务器名称。
        public let name: String

        /// 自定义名字服务器 IPv4 地址。
        public let iPv4: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case iPv4 = "IPv4"
        }
    }

    public struct Waf: TCInputModel, TCOutputModel {
        /// Waf开关，取值为：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 策略ID。
        public let policyId: Int64?

        public init(switch: String, policyId: Int64? = nil) {
            self.switch = `switch`
            self.policyId = policyId
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case policyId = "PolicyId"
        }
    }

    /// Waf配置。
    public struct WafConfig: TCInputModel, TCOutputModel {
        /// WafConfig开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        /// 开关仅与配置是否生效有关，即使为off（关闭），也可以正常修改配置的内容。
        public let `switch`: String

        /// 上一次设置的防护级别，取值有：
        /// - loose：宽松；
        /// - normal：正常；
        /// - strict：严格；
        /// - stricter：超严格；
        /// - custom：自定义。
        public let level: String

        /// 全局WAF模式，取值有：
        /// - block：阻断（全局阻断，但可对详细规则配置观察）；
        /// - observe：观察（无论详细规则配置什么，都为观察）。
        public let mode: String

        /// 托管规则详细配置。如果为null，默认使用历史配置。
        public let wafRule: WafRule?

        /// AI规则引擎防护配置。如果为null，默认使用历史配置。
        public let aiRule: AiRule?

        public init(switch: String, level: String, mode: String, wafRule: WafRule? = nil, aiRule: AiRule? = nil) {
            self.switch = `switch`
            self.level = level
            self.mode = mode
            self.wafRule = wafRule
            self.aiRule = aiRule
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case level = "Level"
            case mode = "Mode"
            case wafRule = "WafRule"
            case aiRule = "AiRule"
        }
    }

    /// Waf规则
    public struct WafRule: TCInputModel, TCOutputModel {
        /// 托管规则开关，取值有：
        /// - on：开启；
        /// - off：关闭。
        public let `switch`: String

        /// 黑名单ID列表，将规则ID加入本参数列表中代表该ID关闭，即该规则ID不再生效。
        public let blockRuleIDs: [Int64]

        /// 观察模式ID列表，将规则ID加入本参数列表中代表该ID使用观察模式生效，即该规则ID进入观察模式。
        public let observeRuleIDs: [Int64]

        public init(switch: String, blockRuleIDs: [Int64], observeRuleIDs: [Int64]) {
            self.switch = `switch`
            self.blockRuleIDs = blockRuleIDs
            self.observeRuleIDs = observeRuleIDs
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockRuleIDs = "BlockRuleIDs"
            case observeRuleIDs = "ObserveRuleIDs"
        }
    }

    /// WebSocket配置
    public struct WebSocket: TCInputModel, TCOutputModel {
        /// WebSocket 超时时间配置开关，取值有：
        /// - on：使用Timeout作为WebSocket超时时间；
        /// - off：平台仍支持WebSocket连接，此时使用系统默认的15秒为超时时间。
        public let `switch`: String

        /// 超时时间，单位为秒，最大超时时间120秒。
        public let timeout: Int64?

        public init(switch: String, timeout: Int64? = nil) {
            self.switch = `switch`
            self.timeout = timeout
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case timeout = "Timeout"
        }
    }

    /// 站点信息
    public struct Zone: TCOutputModel {
        /// 站点ID。
        public let zoneId: String

        /// 站点名称。
        public let zoneName: String

        /// 站点当前使用的 NS 列表。
        public let originalNameServers: [String]

        /// 腾讯云分配的 NS 列表。
        public let nameServers: [String]

        /// 站点状态，取值有：
        /// - active：NS 已切换；
        /// - pending：NS 未切换；
        /// - moved：NS 已切走；
        /// - deactivated：被封禁。
        public let status: String

        /// 站点接入方式，取值有
        /// - full：NS 接入；
        /// - partial：CNAME 接入；
        /// - noDomainAccess：无域名接入。
        public let type: String

        /// 站点是否关闭。
        public let paused: Bool

        /// 是否开启 CNAME 加速，取值有：
        /// - enabled：开启；
        /// - disabled：关闭。
        public let cnameSpeedUp: String

        /// CNAME 接入状态，取值有：
        /// - finished：站点已验证；
        /// - pending：站点验证中。
        public let cnameStatus: String

        /// 资源标签列表。
        public let tags: [Tag]

        /// 计费资源列表。
        public let resources: [Resource]

        /// 站点创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdOn: Date

        /// 站点修改时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifiedOn: Date

        /// 站点接入地域，取值有：
        /// - global：全球；
        /// - mainland：中国大陆；
        /// - overseas：境外区域。
        public let area: String

        /// 用户自定义 NS 信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vanityNameServers: VanityNameServers?

        /// 用户自定义 NS IP 信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vanityNameServersIps: [VanityNameServersIps]?

        /// 展示状态，取值有：
        /// - active：已启用；
        /// - inactive：未生效；
        /// - paused：已停用。
        public let activeStatus: String

        /// 站点别名。数字、英文、-和_组合，限制20个字符。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aliasZoneName: String?

        /// 是否伪站点，取值有：
        /// - 0：非伪站点；
        /// - 1：伪站点。
        public let isFake: Int64

        /// 锁定状态，取值有：
        /// - enable：正常，允许进行修改操作；
        /// - disable：锁定中，不允许进行修改操作。
        public let lockStatus: String?

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case originalNameServers = "OriginalNameServers"
            case nameServers = "NameServers"
            case status = "Status"
            case type = "Type"
            case paused = "Paused"
            case cnameSpeedUp = "CnameSpeedUp"
            case cnameStatus = "CnameStatus"
            case tags = "Tags"
            case resources = "Resources"
            case createdOn = "CreatedOn"
            case modifiedOn = "ModifiedOn"
            case area = "Area"
            case vanityNameServers = "VanityNameServers"
            case vanityNameServersIps = "VanityNameServersIps"
            case activeStatus = "ActiveStatus"
            case aliasZoneName = "AliasZoneName"
            case isFake = "IsFake"
            case lockStatus = "LockStatus"
        }
    }

    /// 站点配置。
    public struct ZoneSetting: TCOutputModel {
        /// 站点名称。
        public let zoneName: String

        /// 站点加速区域信息，取值有：
        /// - mainland：中国境内加速；
        /// - overseas：中国境外加速。
        public let area: String

        /// 节点缓存键配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cacheKey: CacheKey?

        /// Quic访问配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quic: Quic?

        /// POST请求传输配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let postMaxSize: PostMaxSize?

        /// 智能压缩配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compression: Compression?

        /// Http2回源配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamHttp2: UpstreamHttp2?

        /// 访问协议强制Https跳转配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let forceRedirect: ForceRedirect?

        /// 缓存过期时间配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cacheConfig: CacheConfig?

        /// 源站配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let origin: Origin?

        /// 智能加速配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let smartRouting: SmartRouting?

        /// 浏览器缓存配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxAge: MaxAge?

        /// 离线缓存配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let offlineCache: OfflineCache?

        /// WebSocket配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let webSocket: WebSocket?

        /// 客户端IP回源请求头配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientIpHeader: ClientIpHeader?

        /// 缓存预刷新配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cachePrefresh: CachePrefresh?

        /// Ipv6访问配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6: Ipv6?

        /// Https 加速配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let https: Https?

        /// 回源时是否携带客户端IP所属地域信息的配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientIpCountry: ClientIpCountry?

        /// Grpc协议支持配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let grpc: Grpc?

        /// 图片优化相关配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageOptimize: ImageOptimize?

        /// 中国大陆加速优化配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accelerateMainland: AccelerateMainland?

        /// 标准 Debug 配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let standardDebug: StandardDebug?

        enum CodingKeys: String, CodingKey {
            case zoneName = "ZoneName"
            case area = "Area"
            case cacheKey = "CacheKey"
            case quic = "Quic"
            case postMaxSize = "PostMaxSize"
            case compression = "Compression"
            case upstreamHttp2 = "UpstreamHttp2"
            case forceRedirect = "ForceRedirect"
            case cacheConfig = "CacheConfig"
            case origin = "Origin"
            case smartRouting = "SmartRouting"
            case maxAge = "MaxAge"
            case offlineCache = "OfflineCache"
            case webSocket = "WebSocket"
            case clientIpHeader = "ClientIpHeader"
            case cachePrefresh = "CachePrefresh"
            case ipv6 = "Ipv6"
            case https = "Https"
            case clientIpCountry = "ClientIpCountry"
            case grpc = "Grpc"
            case imageOptimize = "ImageOptimize"
            case accelerateMainland = "AccelerateMainland"
            case standardDebug = "StandardDebug"
        }
    }
}
