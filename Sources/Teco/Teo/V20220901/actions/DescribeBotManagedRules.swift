//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// DescribeBotManagedRules请求参数结构体
    public struct DescribeBotManagedRulesRequest: TCRequestModel {
        /// 分页查询偏移量。默认值：0。
        public let offset: Int64
        
        /// 分页查询限制数目。默认值：20，最大值：1000。
        public let limit: Int64
        
        /// 站点Id。当使用ZoneId和Entity时可不填写TemplateId，否则必须填写TemplateId。
        public let zoneId: String?
        
        /// 子域名/应用名。当使用ZoneId和Entity时可不填写TemplateId，否则必须填写TemplateId。
        public let entity: String?
        
        /// 规则类型，取值有：
        /// <li> idcid；</li>
        /// <li>sipbot；</li>
        /// <li>uabot。</li>传空或不传，即全部类型。
        public let ruleType: String?
        
        /// 模板Id。当使用模板Id时可不填ZoneId和Entity，否则必须填写ZoneId和Entity。
        public let templateId: String?
        
        public init (offset: Int64, limit: Int64, zoneId: String? = nil, entity: String? = nil, ruleType: String? = nil, templateId: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.zoneId = zoneId
            self.entity = entity
            self.ruleType = ruleType
            self.templateId = templateId
        }
        
        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case zoneId = "ZoneId"
            case entity = "Entity"
            case ruleType = "RuleType"
            case templateId = "TemplateId"
        }
    }
    
    /// DescribeBotManagedRules返回参数结构体
    public struct DescribeBotManagedRulesResponse: TCResponseModel {
        /// 本次返回的规则数。
        public let count: Int64
        
        /// Bot规则。
        public let botManagedRuleDetails: [BotManagedRuleDetail]
        
        /// 总规则数。
        public let total: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case count = "Count"
            case botManagedRuleDetails = "BotManagedRuleDetails"
            case total = "Total"
            case requestId = "RequestId"
        }
    }
    
    /// 查询Bot托管规则
    @inlinable
    public func describeBotManagedRules(_ input: DescribeBotManagedRulesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeBotManagedRulesResponse > {
        self.client.execute(action: "DescribeBotManagedRules", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询Bot托管规则
    @inlinable
    public func describeBotManagedRules(_ input: DescribeBotManagedRulesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBotManagedRulesResponse {
        try await self.client.execute(action: "DescribeBotManagedRules", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
