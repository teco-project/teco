//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// ModifyAlarmConfig请求参数结构体
    public struct ModifyAlarmConfigRequest: TCRequestModel {
        /// 告警服务类型，取值有：
        /// <li>ddos：ddos告警服务。</li>
        public let serviceType: String

        /// 站点ID。
        public let zoneId: String

        /// 告警维度值列表。
        public let entityList: [String]

        /// 告警阈值，不传或者传0表示不修改阈值。
        public let threshold: Int64?

        /// 是否使用默认值，只有在不传Threshold或者Threshold=0时该参数有效。
        public let isDefault: Bool?

        public init(serviceType: String, zoneId: String, entityList: [String], threshold: Int64? = nil, isDefault: Bool? = nil) {
            self.serviceType = serviceType
            self.zoneId = zoneId
            self.entityList = entityList
            self.threshold = threshold
            self.isDefault = isDefault
        }

        enum CodingKeys: String, CodingKey {
            case serviceType = "ServiceType"
            case zoneId = "ZoneId"
            case entityList = "EntityList"
            case threshold = "Threshold"
            case isDefault = "IsDefault"
        }
    }

    /// ModifyAlarmConfig返回参数结构体
    public struct ModifyAlarmConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改用户告警配置
    ///
    /// 本接口（ModifyAlarmConfig）用于修改用户告警配置。
    @inlinable
    public func modifyAlarmConfig(_ input: ModifyAlarmConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmConfigResponse> {
        self.client.execute(action: "ModifyAlarmConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改用户告警配置
    ///
    /// 本接口（ModifyAlarmConfig）用于修改用户告警配置。
    @inlinable
    public func modifyAlarmConfig(_ input: ModifyAlarmConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmConfigResponse {
        try await self.client.execute(action: "ModifyAlarmConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改用户告警配置
    ///
    /// 本接口（ModifyAlarmConfig）用于修改用户告警配置。
    @inlinable
    public func modifyAlarmConfig(serviceType: String, zoneId: String, entityList: [String], threshold: Int64? = nil, isDefault: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmConfigResponse> {
        self.modifyAlarmConfig(ModifyAlarmConfigRequest(serviceType: serviceType, zoneId: zoneId, entityList: entityList, threshold: threshold, isDefault: isDefault), region: region, logger: logger, on: eventLoop)
    }

    /// 修改用户告警配置
    ///
    /// 本接口（ModifyAlarmConfig）用于修改用户告警配置。
    @inlinable
    public func modifyAlarmConfig(serviceType: String, zoneId: String, entityList: [String], threshold: Int64? = nil, isDefault: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmConfigResponse {
        try await self.modifyAlarmConfig(ModifyAlarmConfigRequest(serviceType: serviceType, zoneId: zoneId, entityList: entityList, threshold: threshold, isDefault: isDefault), region: region, logger: logger, on: eventLoop)
    }
}
