//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Teo {
    /// CreateSharedCNAME请求参数结构体
    public struct CreateSharedCNAMERequest: TCRequest {
        /// 共享 CNAME 所属站点的 ID。
        public let zoneId: String

        /// 共享 CNAME 前缀。请输入合法的域名前缀，例如"test-api"、"test-api.com"，限制输入 50 个字符。
        /// 共享 CNAME 完整格式为：<自定义前缀>+<zoneid中的12位随机字符串>+"share.eo.dnse[0-5].com"。例如前缀传入 example.com，EO 会为您创建共享 CNAME：example.com.sai2ig51kaa5.eo.dns2.com
        /// 示例值：example.com
        public let sharedCNAMEPrefix: String

        /// 描述。可输入 1-50 个任意字符。
        public let description: String?

        public init(zoneId: String, sharedCNAMEPrefix: String, description: String? = nil) {
            self.zoneId = zoneId
            self.sharedCNAMEPrefix = sharedCNAMEPrefix
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case sharedCNAMEPrefix = "SharedCNAMEPrefix"
            case description = "Description"
        }
    }

    /// CreateSharedCNAME返回参数结构体
    public struct CreateSharedCNAMEResponse: TCResponse {
        /// 共享 CNAME。格式为：<自定义前缀>+<ZoneId中的12位随机字符串>+"share.eo.dnse[0-5].com"
        public let sharedCNAME: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sharedCNAME = "SharedCNAME"
            case requestId = "RequestId"
        }
    }

    /// 创建共享 CNAME
    @inlinable
    public func createSharedCNAME(_ input: CreateSharedCNAMERequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSharedCNAMEResponse> {
        self.client.execute(action: "CreateSharedCNAME", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建共享 CNAME
    @inlinable
    public func createSharedCNAME(_ input: CreateSharedCNAMERequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSharedCNAMEResponse {
        try await self.client.execute(action: "CreateSharedCNAME", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建共享 CNAME
    @inlinable
    public func createSharedCNAME(zoneId: String, sharedCNAMEPrefix: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSharedCNAMEResponse> {
        self.createSharedCNAME(.init(zoneId: zoneId, sharedCNAMEPrefix: sharedCNAMEPrefix, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 创建共享 CNAME
    @inlinable
    public func createSharedCNAME(zoneId: String, sharedCNAMEPrefix: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSharedCNAMEResponse {
        try await self.createSharedCNAME(.init(zoneId: zoneId, sharedCNAMEPrefix: sharedCNAMEPrefix, description: description), region: region, logger: logger, on: eventLoop)
    }
}
