//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// DescribeLogTopicTaskDetail请求参数结构体
    public struct DescribeLogTopicTaskDetailRequest: TCRequestModel {
        /// 推送任务ID。
        public let topicId: String

        /// 站点ID。
        public let zoneId: String

        public init(topicId: String, zoneId: String) {
            self.topicId = topicId
            self.zoneId = zoneId
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case zoneId = "ZoneId"
        }
    }

    /// DescribeLogTopicTaskDetail返回参数结构体
    public struct DescribeLogTopicTaskDetailResponse: TCResponseModel {
        /// 推送任务详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logTopicDetailInfo: LogTopicDetailInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case logTopicDetailInfo = "LogTopicDetailInfo"
            case requestId = "RequestId"
        }
    }

    /// 获取推送任务详细信息
    ///
    /// 本接口（DescribeLogTopicTaskDetail）用于获取日志推送任务详细信息。
    @inlinable
    public func describeLogTopicTaskDetail(_ input: DescribeLogTopicTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLogTopicTaskDetailResponse> {
        self.client.execute(action: "DescribeLogTopicTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取推送任务详细信息
    ///
    /// 本接口（DescribeLogTopicTaskDetail）用于获取日志推送任务详细信息。
    @inlinable
    public func describeLogTopicTaskDetail(_ input: DescribeLogTopicTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLogTopicTaskDetailResponse {
        try await self.client.execute(action: "DescribeLogTopicTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取推送任务详细信息
    ///
    /// 本接口（DescribeLogTopicTaskDetail）用于获取日志推送任务详细信息。
    @inlinable
    public func describeLogTopicTaskDetail(topicId: String, zoneId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLogTopicTaskDetailResponse> {
        self.describeLogTopicTaskDetail(DescribeLogTopicTaskDetailRequest(topicId: topicId, zoneId: zoneId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取推送任务详细信息
    ///
    /// 本接口（DescribeLogTopicTaskDetail）用于获取日志推送任务详细信息。
    @inlinable
    public func describeLogTopicTaskDetail(topicId: String, zoneId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLogTopicTaskDetailResponse {
        try await self.describeLogTopicTaskDetail(DescribeLogTopicTaskDetailRequest(topicId: topicId, zoneId: zoneId), region: region, logger: logger, on: eventLoop)
    }
}
