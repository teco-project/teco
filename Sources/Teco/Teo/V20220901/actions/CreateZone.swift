//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Teo {
    /// CreateZone请求参数结构体
    public struct CreateZoneRequest: TCRequest {
        /// 站点接入类型。该参数取值如下，不填写时默认为 partial：
        /// - partial：CNAME 接入；
        /// - full：NS 接入；
        /// - noDomainAccess：无域名接入。
        public let type: String?

        /// 站点名称。CNAME/NS 接入的时，请传入二级域名（example.com）作为站点名称；无域名接入时，该值请保留为空。
        public let zoneName: String?

        /// Type 取值为 partial/full 时，七层域名的加速区域。以下为该参数取值，不填写时该值默认为 overseas。Type 取值为 noDomainAccess 时该值请保留为空：
        /// - global: 全球可用区；
        /// - mainland: 中国大陆可用区；
        /// - overseas: 全球可用区（不含中国大陆）。
        public let area: String?

        /// 待绑定的目标套餐 ID。当您账号下已存在套餐时，可以填写此参数，直接将站点绑定至该套餐。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
        public let planId: String?

        /// 同名站点标识。限制输入数字、英文、- 和 _ 组合，长度 20 个字符以内。详情参考 [同名站点标识](https://cloud.tencent.com/document/product/1552/70202)，无此使用场景时，该字段保留为空即可。
        public let aliasZoneName: String?

        /// 标签。该参数用于对站点进行分权限管控、分账。需要先前往 [标签控制台](https://console.cloud.tencent.com/tag/taglist) 创建对应的标签才可以在此处传入对应的标签键和标签值。
        public let tags: [Tag]?

        /// 是否允许重复接入。
        /// - true：允许重复接入；
        /// - false：不允许重复接入。
        /// 不填写使用默认值false。
        @available(*, deprecated)
        public let allowDuplicates: Bool? = nil

        /// 是否跳过站点现有的DNS记录扫描。默认值：false。
        @available(*, deprecated)
        public let jumpStart: Bool? = nil

        public init(type: String? = nil, zoneName: String? = nil, area: String? = nil, planId: String? = nil, aliasZoneName: String? = nil, tags: [Tag]? = nil) {
            self.type = type
            self.zoneName = zoneName
            self.area = area
            self.planId = planId
            self.aliasZoneName = aliasZoneName
            self.tags = tags
        }

        @available(*, deprecated, renamed: "init(type:zoneName:area:planId:aliasZoneName:tags:)", message: "'allowDuplicates' and 'jumpStart' are deprecated in 'CreateZoneRequest'. Setting these parameters has no effect.")
        public init(type: String? = nil, zoneName: String? = nil, area: String? = nil, planId: String? = nil, aliasZoneName: String? = nil, tags: [Tag]? = nil, allowDuplicates: Bool? = nil, jumpStart: Bool? = nil) {
            self.type = type
            self.zoneName = zoneName
            self.area = area
            self.planId = planId
            self.aliasZoneName = aliasZoneName
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case zoneName = "ZoneName"
            case area = "Area"
            case planId = "PlanId"
            case aliasZoneName = "AliasZoneName"
            case tags = "Tags"
            case allowDuplicates = "AllowDuplicates"
            case jumpStart = "JumpStart"
        }
    }

    /// CreateZone返回参数结构体
    public struct CreateZoneResponse: TCResponse {
        /// 站点 ID。
        public let zoneId: String

        /// 站点归属权验证信息。站点完成创建后，您还需要完成归属权校验，站点才能正常服务。
        ///
        /// Type = partial 时，您需要参考 [站点/域名归属权验证](https://cloud.tencent.com/document/product/1552/70789) 前往您的域名解析服务商添加 TXT 记录或者前往根域名服务器添加文件，再调用接口 [VerifyOwnership]() 完成验证；
        ///
        /// Type = full 时，您需要参考 [修改 DNS 服务器](https://cloud.tencent.com/document/product/1552/90452) 切换 DNS 服务器即可，可通过接口 [VerifyOwnership]() 查询 DNS 是否切换成功；
        ///
        /// Type = noDomainAccess 时，该值为空，不需要进行任何操作。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ownershipVerification: OwnershipVerification?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case ownershipVerification = "OwnershipVerification"
            case requestId = "RequestId"
        }
    }

    /// 创建站点
    ///
    /// EdgeOne 为您提供 CNAME、NS 和无域名接入三种接入方式，您需要先通过此接口完成站点创建。CNAME 和 NS 接入站点的场景可参考 [从零开始快速接入 EdgeOne](https://cloud.tencent.com/document/product/1552/87601); 无域名接入的场景可参考 [快速启用四层代理服务](https://cloud.tencent.com/document/product/1552/96051)。
    ///
    /// > 建议您在账号下已存在套餐时调用本接口创建站点，请在入参时传入 PlanId ，直接将站点绑定至该套餐；不传入 PlanId 时，创建出来的站点会处于未激活状态，无法正常服务，您需要通过 [BindZoneToPlan](https://cloud.tencent.com/document/product/1552/83042) 完成套餐绑定之后，站点才可正常提供服务 。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
    @inlinable
    public func createZone(_ input: CreateZoneRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateZoneResponse> {
        self.client.execute(action: "CreateZone", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建站点
    ///
    /// EdgeOne 为您提供 CNAME、NS 和无域名接入三种接入方式，您需要先通过此接口完成站点创建。CNAME 和 NS 接入站点的场景可参考 [从零开始快速接入 EdgeOne](https://cloud.tencent.com/document/product/1552/87601); 无域名接入的场景可参考 [快速启用四层代理服务](https://cloud.tencent.com/document/product/1552/96051)。
    ///
    /// > 建议您在账号下已存在套餐时调用本接口创建站点，请在入参时传入 PlanId ，直接将站点绑定至该套餐；不传入 PlanId 时，创建出来的站点会处于未激活状态，无法正常服务，您需要通过 [BindZoneToPlan](https://cloud.tencent.com/document/product/1552/83042) 完成套餐绑定之后，站点才可正常提供服务 。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
    @inlinable
    public func createZone(_ input: CreateZoneRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateZoneResponse {
        try await self.client.execute(action: "CreateZone", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建站点
    ///
    /// EdgeOne 为您提供 CNAME、NS 和无域名接入三种接入方式，您需要先通过此接口完成站点创建。CNAME 和 NS 接入站点的场景可参考 [从零开始快速接入 EdgeOne](https://cloud.tencent.com/document/product/1552/87601); 无域名接入的场景可参考 [快速启用四层代理服务](https://cloud.tencent.com/document/product/1552/96051)。
    ///
    /// > 建议您在账号下已存在套餐时调用本接口创建站点，请在入参时传入 PlanId ，直接将站点绑定至该套餐；不传入 PlanId 时，创建出来的站点会处于未激活状态，无法正常服务，您需要通过 [BindZoneToPlan](https://cloud.tencent.com/document/product/1552/83042) 完成套餐绑定之后，站点才可正常提供服务 。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
    @inlinable
    public func createZone(type: String? = nil, zoneName: String? = nil, area: String? = nil, planId: String? = nil, aliasZoneName: String? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateZoneResponse> {
        self.createZone(.init(type: type, zoneName: zoneName, area: area, planId: planId, aliasZoneName: aliasZoneName, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 创建站点
    ///
    /// EdgeOne 为您提供 CNAME、NS 和无域名接入三种接入方式，您需要先通过此接口完成站点创建。CNAME 和 NS 接入站点的场景可参考 [从零开始快速接入 EdgeOne](https://cloud.tencent.com/document/product/1552/87601); 无域名接入的场景可参考 [快速启用四层代理服务](https://cloud.tencent.com/document/product/1552/96051)。
    ///
    /// > 建议您在账号下已存在套餐时调用本接口创建站点，请在入参时传入 PlanId ，直接将站点绑定至该套餐；不传入 PlanId 时，创建出来的站点会处于未激活状态，无法正常服务，您需要通过 [BindZoneToPlan](https://cloud.tencent.com/document/product/1552/83042) 完成套餐绑定之后，站点才可正常提供服务 。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
    @available(*, deprecated, renamed: "createZone(type:zoneName:area:planId:aliasZoneName:tags:region:logger:on:)", message: "'allowDuplicates' and 'jumpStart' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func createZone(type: String? = nil, zoneName: String? = nil, area: String? = nil, planId: String? = nil, aliasZoneName: String? = nil, tags: [Tag]? = nil, allowDuplicates: Bool? = nil, jumpStart: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateZoneResponse> {
        self.createZone(.init(type: type, zoneName: zoneName, area: area, planId: planId, aliasZoneName: aliasZoneName, tags: tags, allowDuplicates: allowDuplicates, jumpStart: jumpStart), region: region, logger: logger, on: eventLoop)
    }

    /// 创建站点
    ///
    /// EdgeOne 为您提供 CNAME、NS 和无域名接入三种接入方式，您需要先通过此接口完成站点创建。CNAME 和 NS 接入站点的场景可参考 [从零开始快速接入 EdgeOne](https://cloud.tencent.com/document/product/1552/87601); 无域名接入的场景可参考 [快速启用四层代理服务](https://cloud.tencent.com/document/product/1552/96051)。
    ///
    /// > 建议您在账号下已存在套餐时调用本接口创建站点，请在入参时传入 PlanId ，直接将站点绑定至该套餐；不传入 PlanId 时，创建出来的站点会处于未激活状态，无法正常服务，您需要通过 [BindZoneToPlan](https://cloud.tencent.com/document/product/1552/83042) 完成套餐绑定之后，站点才可正常提供服务 。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
    @inlinable
    public func createZone(type: String? = nil, zoneName: String? = nil, area: String? = nil, planId: String? = nil, aliasZoneName: String? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateZoneResponse {
        try await self.createZone(.init(type: type, zoneName: zoneName, area: area, planId: planId, aliasZoneName: aliasZoneName, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 创建站点
    ///
    /// EdgeOne 为您提供 CNAME、NS 和无域名接入三种接入方式，您需要先通过此接口完成站点创建。CNAME 和 NS 接入站点的场景可参考 [从零开始快速接入 EdgeOne](https://cloud.tencent.com/document/product/1552/87601); 无域名接入的场景可参考 [快速启用四层代理服务](https://cloud.tencent.com/document/product/1552/96051)。
    ///
    /// > 建议您在账号下已存在套餐时调用本接口创建站点，请在入参时传入 PlanId ，直接将站点绑定至该套餐；不传入 PlanId 时，创建出来的站点会处于未激活状态，无法正常服务，您需要通过 [BindZoneToPlan](https://cloud.tencent.com/document/product/1552/83042) 完成套餐绑定之后，站点才可正常提供服务 。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
    @available(*, deprecated, renamed: "createZone(type:zoneName:area:planId:aliasZoneName:tags:region:logger:on:)", message: "'allowDuplicates' and 'jumpStart' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func createZone(type: String? = nil, zoneName: String? = nil, area: String? = nil, planId: String? = nil, aliasZoneName: String? = nil, tags: [Tag]? = nil, allowDuplicates: Bool? = nil, jumpStart: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateZoneResponse {
        try await self.createZone(.init(type: type, zoneName: zoneName, area: area, planId: planId, aliasZoneName: aliasZoneName, tags: tags, allowDuplicates: allowDuplicates, jumpStart: jumpStart), region: region, logger: logger, on: eventLoop)
    }
}
