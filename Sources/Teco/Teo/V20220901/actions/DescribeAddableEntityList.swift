//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Teo {
    /// DescribeAddableEntityList请求参数结构体
    public struct DescribeAddableEntityListRequest: TCRequestModel {
        /// 站点ID。
        public let zoneId: String

        /// 推送数据类型，取值有:
        /// <li>domain：七层加速日志；</li>
        /// <li>application：四层加速日志；</li>
        /// <li>web-rateLiming：速率限制日志；</li>
        /// <li>web-attack：web攻击防护日志；</li>
        /// <li>web-rule：自定义规则日志；</li>
        /// <li>web-bot：Bot管理日志。</li>
        public let entityType: String

        /// 服务区域，取值有：
        /// <li>mainland：中国大陆境内；</li>
        /// <li>overseas：全球（不含中国大陆）。</li>若为国内站账号，则默认取值为mainland；若为国际站账号，则默认取值为overseas。
        public let area: String?

        public init(zoneId: String, entityType: String, area: String? = nil) {
            self.zoneId = zoneId
            self.entityType = entityType
            self.area = area
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case entityType = "EntityType"
            case area = "Area"
        }
    }

    /// DescribeAddableEntityList返回参数结构体
    public struct DescribeAddableEntityListResponse: TCResponseModel {
        /// 查询结果的总条数。
        public let totalCount: Int64

        /// 可添加的实体列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let entityList: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case entityList = "EntityList"
            case requestId = "RequestId"
        }
    }

    /// 查询剩余可添加的日志推送实体列表
    ///
    /// 本接口（DescribeAddableEntityList）用于查询剩余可添加的日志推送实体列表。
    @inlinable
    public func describeAddableEntityList(_ input: DescribeAddableEntityListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddableEntityListResponse> {
        self.client.execute(action: "DescribeAddableEntityList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询剩余可添加的日志推送实体列表
    ///
    /// 本接口（DescribeAddableEntityList）用于查询剩余可添加的日志推送实体列表。
    @inlinable
    public func describeAddableEntityList(_ input: DescribeAddableEntityListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddableEntityListResponse {
        try await self.client.execute(action: "DescribeAddableEntityList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询剩余可添加的日志推送实体列表
    ///
    /// 本接口（DescribeAddableEntityList）用于查询剩余可添加的日志推送实体列表。
    @inlinable
    public func describeAddableEntityList(zoneId: String, entityType: String, area: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddableEntityListResponse> {
        self.describeAddableEntityList(.init(zoneId: zoneId, entityType: entityType, area: area), region: region, logger: logger, on: eventLoop)
    }

    /// 查询剩余可添加的日志推送实体列表
    ///
    /// 本接口（DescribeAddableEntityList）用于查询剩余可添加的日志推送实体列表。
    @inlinable
    public func describeAddableEntityList(zoneId: String, entityType: String, area: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddableEntityListResponse {
        try await self.describeAddableEntityList(.init(zoneId: zoneId, entityType: entityType, area: area), region: region, logger: logger, on: eventLoop)
    }
}
