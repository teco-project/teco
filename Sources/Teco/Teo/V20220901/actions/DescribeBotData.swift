//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Teo {
    /// DescribeBotData请求参数结构体
    public struct DescribeBotDataRequest: TCRequestModel {
        /// 开始时间。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 结束时间。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// 统计指标列表，取值有：
        /// <li>bot_interceptNum ：bot拦截次数 ；</li>
        /// <li>bot_noneRequestNum ：未分类bot请求次数 ；</li>
        /// <li> bot_maliciousRequestNum：恶意bot请求次数 ；</li>
        /// <li>bot_suspectedRequestNum ：疑似bot请求次数 ；</li>
        /// <li>bot_friendlyRequestNum ：友好bot请求次数 ；</li>
        /// <li>bot_normalRequestNum ：正常bot请求次数 。</li>
        public let metricNames: [String]

        /// 查询的子域名列表，不填默认选择全部子域名。
        public let domains: [String]?

        /// 站点列表，不填默认选择全部站点。
        public let zoneIds: [String]?

        /// 查询时间粒度，取值有：
        /// <li>min：1分钟；</li>
        /// <li>5min：5分钟；</li>
        /// <li>hour：1小时；</li>
        /// <li>day：1天。</li>不填将根据开始时间跟结束时间的间距自动推算粒度，具体为：一小时范围内以min粒度查询，两天范围内以5min粒度查询，七天范围内以hour粒度查询，超过七天以day粒度查询。
        public let interval: String?

        /// 筛选条件，key可选的值有：
        /// <li>action：执行动作 。</li>
        public let queryCondition: [QueryCondition]?

        /// 数据归属地区，取值有：
        /// <li>overseas：全球（除中国大陆地区）数据； </li>
        /// <li>mainland：中国大陆地区数据。 </li>不填将根据用户所在地智能选择地区。
        public let area: String?

        public init(startTime: Date, endTime: Date, metricNames: [String], domains: [String]? = nil, zoneIds: [String]? = nil, interval: String? = nil, queryCondition: [QueryCondition]? = nil, area: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.metricNames = metricNames
            self.domains = domains
            self.zoneIds = zoneIds
            self.interval = interval
            self.queryCondition = queryCondition
            self.area = area
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case metricNames = "MetricNames"
            case domains = "Domains"
            case zoneIds = "ZoneIds"
            case interval = "Interval"
            case queryCondition = "QueryCondition"
            case area = "Area"
        }
    }

    /// DescribeBotData返回参数结构体
    public struct DescribeBotDataResponse: TCResponseModel {
        /// Bot攻击的数据列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [SecEntry]?

        /// 查询结果的总条数。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询Bot攻击时序数据
    ///
    /// 本接口（DescribeBotData）查询Bot攻击时序数据。
    @inlinable
    public func describeBotData(_ input: DescribeBotDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBotDataResponse> {
        self.client.execute(action: "DescribeBotData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询Bot攻击时序数据
    ///
    /// 本接口（DescribeBotData）查询Bot攻击时序数据。
    @inlinable
    public func describeBotData(_ input: DescribeBotDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBotDataResponse {
        try await self.client.execute(action: "DescribeBotData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询Bot攻击时序数据
    ///
    /// 本接口（DescribeBotData）查询Bot攻击时序数据。
    @inlinable
    public func describeBotData(startTime: Date, endTime: Date, metricNames: [String], domains: [String]? = nil, zoneIds: [String]? = nil, interval: String? = nil, queryCondition: [QueryCondition]? = nil, area: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBotDataResponse> {
        self.describeBotData(DescribeBotDataRequest(startTime: startTime, endTime: endTime, metricNames: metricNames, domains: domains, zoneIds: zoneIds, interval: interval, queryCondition: queryCondition, area: area), logger: logger, on: eventLoop)
    }

    /// 查询Bot攻击时序数据
    ///
    /// 本接口（DescribeBotData）查询Bot攻击时序数据。
    @inlinable
    public func describeBotData(startTime: Date, endTime: Date, metricNames: [String], domains: [String]? = nil, zoneIds: [String]? = nil, interval: String? = nil, queryCondition: [QueryCondition]? = nil, area: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBotDataResponse {
        try await self.describeBotData(DescribeBotDataRequest(startTime: startTime, endTime: endTime, metricNames: metricNames, domains: domains, zoneIds: zoneIds, interval: interval, queryCondition: queryCondition, area: area), logger: logger, on: eventLoop)
    }
}
