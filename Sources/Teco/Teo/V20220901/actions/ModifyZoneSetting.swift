//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Teo {
    /// ModifyZoneSetting请求参数结构体
    public struct ModifyZoneSettingRequest: TCRequest {
        /// 待变更的站点 ID。
        public let zoneId: String

        /// 缓存过期时间配置。
        /// 不填写表示保持原有配置。
        public let cacheConfig: CacheConfig?

        /// 节点缓存键配置。
        /// 不填写表示保持原有配置。
        public let cacheKey: CacheKey?

        /// 浏览器缓存配置。
        /// 不填写表示保持原有配置。
        public let maxAge: MaxAge?

        /// 离线缓存配置。
        /// 不填写表示保持原有配置。
        public let offlineCache: OfflineCache?

        /// Quic 访问配置。
        /// 不填写表示保持原有配置。
        public let quic: Quic?

        /// Post 请求传输配置。
        /// 不填写表示保持原有配置。
        public let postMaxSize: PostMaxSize?

        /// 智能压缩配置。
        /// 不填写表示保持原有配置。
        public let compression: Compression?

        /// Http2 回源配置。
        /// 不填写表示保持原有配置。
        public let upstreamHttp2: UpstreamHttp2?

        /// 访问协议强制 Https 跳转配置。
        /// 不填写表示保持原有配置。
        public let forceRedirect: ForceRedirect?

        /// Https 加速配置。
        /// 不填写表示保持原有配置。
        public let https: Https?

        /// 源站配置。
        /// 不填写表示保持原有配置。
        public let origin: Origin?

        /// 智能加速配置。
        /// 不填写表示保持原有配置。
        public let smartRouting: SmartRouting?

        /// WebSocket 配置。
        /// 不填写表示保持原有配置。
        public let webSocket: WebSocket?

        /// 客户端 IP 回源请求头配置。
        /// 不填写表示保持原有配置。
        public let clientIpHeader: ClientIpHeader?

        /// 缓存预刷新配置。
        /// 不填写表示保持原有配置。
        public let cachePrefresh: CachePrefresh?

        /// Ipv6 访问配置。
        /// 不填写表示保持原有配置。
        public let ipv6: Ipv6?

        /// 回源时是否携带客户端 IP 所属地域信息的配置。
        /// 不填写表示保持原有配置。
        public let clientIpCountry: ClientIpCountry?

        /// Grpc 协议支持配置。
        /// 不填写表示保持原有配置。
        public let grpc: Grpc?

        /// 图片优化配置。
        /// 不填写表示关闭。
        public let imageOptimize: ImageOptimize?

        /// 标准 Debug 配置。
        public let standardDebug: StandardDebug?

        public init(zoneId: String, cacheConfig: CacheConfig? = nil, cacheKey: CacheKey? = nil, maxAge: MaxAge? = nil, offlineCache: OfflineCache? = nil, quic: Quic? = nil, postMaxSize: PostMaxSize? = nil, compression: Compression? = nil, upstreamHttp2: UpstreamHttp2? = nil, forceRedirect: ForceRedirect? = nil, https: Https? = nil, origin: Origin? = nil, smartRouting: SmartRouting? = nil, webSocket: WebSocket? = nil, clientIpHeader: ClientIpHeader? = nil, cachePrefresh: CachePrefresh? = nil, ipv6: Ipv6? = nil, clientIpCountry: ClientIpCountry? = nil, grpc: Grpc? = nil, imageOptimize: ImageOptimize? = nil, standardDebug: StandardDebug? = nil) {
            self.zoneId = zoneId
            self.cacheConfig = cacheConfig
            self.cacheKey = cacheKey
            self.maxAge = maxAge
            self.offlineCache = offlineCache
            self.quic = quic
            self.postMaxSize = postMaxSize
            self.compression = compression
            self.upstreamHttp2 = upstreamHttp2
            self.forceRedirect = forceRedirect
            self.https = https
            self.origin = origin
            self.smartRouting = smartRouting
            self.webSocket = webSocket
            self.clientIpHeader = clientIpHeader
            self.cachePrefresh = cachePrefresh
            self.ipv6 = ipv6
            self.clientIpCountry = clientIpCountry
            self.grpc = grpc
            self.imageOptimize = imageOptimize
            self.standardDebug = standardDebug
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case cacheConfig = "CacheConfig"
            case cacheKey = "CacheKey"
            case maxAge = "MaxAge"
            case offlineCache = "OfflineCache"
            case quic = "Quic"
            case postMaxSize = "PostMaxSize"
            case compression = "Compression"
            case upstreamHttp2 = "UpstreamHttp2"
            case forceRedirect = "ForceRedirect"
            case https = "Https"
            case origin = "Origin"
            case smartRouting = "SmartRouting"
            case webSocket = "WebSocket"
            case clientIpHeader = "ClientIpHeader"
            case cachePrefresh = "CachePrefresh"
            case ipv6 = "Ipv6"
            case clientIpCountry = "ClientIpCountry"
            case grpc = "Grpc"
            case imageOptimize = "ImageOptimize"
            case standardDebug = "StandardDebug"
        }
    }

    /// ModifyZoneSetting返回参数结构体
    public struct ModifyZoneSettingResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改站点配置
    ///
    /// 用于修改站点配置
    @inlinable @discardableResult
    public func modifyZoneSetting(_ input: ModifyZoneSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyZoneSettingResponse> {
        self.client.execute(action: "ModifyZoneSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改站点配置
    ///
    /// 用于修改站点配置
    @inlinable @discardableResult
    public func modifyZoneSetting(_ input: ModifyZoneSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyZoneSettingResponse {
        try await self.client.execute(action: "ModifyZoneSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改站点配置
    ///
    /// 用于修改站点配置
    @inlinable @discardableResult
    public func modifyZoneSetting(zoneId: String, cacheConfig: CacheConfig? = nil, cacheKey: CacheKey? = nil, maxAge: MaxAge? = nil, offlineCache: OfflineCache? = nil, quic: Quic? = nil, postMaxSize: PostMaxSize? = nil, compression: Compression? = nil, upstreamHttp2: UpstreamHttp2? = nil, forceRedirect: ForceRedirect? = nil, https: Https? = nil, origin: Origin? = nil, smartRouting: SmartRouting? = nil, webSocket: WebSocket? = nil, clientIpHeader: ClientIpHeader? = nil, cachePrefresh: CachePrefresh? = nil, ipv6: Ipv6? = nil, clientIpCountry: ClientIpCountry? = nil, grpc: Grpc? = nil, imageOptimize: ImageOptimize? = nil, standardDebug: StandardDebug? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyZoneSettingResponse> {
        self.modifyZoneSetting(.init(zoneId: zoneId, cacheConfig: cacheConfig, cacheKey: cacheKey, maxAge: maxAge, offlineCache: offlineCache, quic: quic, postMaxSize: postMaxSize, compression: compression, upstreamHttp2: upstreamHttp2, forceRedirect: forceRedirect, https: https, origin: origin, smartRouting: smartRouting, webSocket: webSocket, clientIpHeader: clientIpHeader, cachePrefresh: cachePrefresh, ipv6: ipv6, clientIpCountry: clientIpCountry, grpc: grpc, imageOptimize: imageOptimize, standardDebug: standardDebug), region: region, logger: logger, on: eventLoop)
    }

    /// 修改站点配置
    ///
    /// 用于修改站点配置
    @inlinable @discardableResult
    public func modifyZoneSetting(zoneId: String, cacheConfig: CacheConfig? = nil, cacheKey: CacheKey? = nil, maxAge: MaxAge? = nil, offlineCache: OfflineCache? = nil, quic: Quic? = nil, postMaxSize: PostMaxSize? = nil, compression: Compression? = nil, upstreamHttp2: UpstreamHttp2? = nil, forceRedirect: ForceRedirect? = nil, https: Https? = nil, origin: Origin? = nil, smartRouting: SmartRouting? = nil, webSocket: WebSocket? = nil, clientIpHeader: ClientIpHeader? = nil, cachePrefresh: CachePrefresh? = nil, ipv6: Ipv6? = nil, clientIpCountry: ClientIpCountry? = nil, grpc: Grpc? = nil, imageOptimize: ImageOptimize? = nil, standardDebug: StandardDebug? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyZoneSettingResponse {
        try await self.modifyZoneSetting(.init(zoneId: zoneId, cacheConfig: cacheConfig, cacheKey: cacheKey, maxAge: maxAge, offlineCache: offlineCache, quic: quic, postMaxSize: postMaxSize, compression: compression, upstreamHttp2: upstreamHttp2, forceRedirect: forceRedirect, https: https, origin: origin, smartRouting: smartRouting, webSocket: webSocket, clientIpHeader: clientIpHeader, cachePrefresh: cachePrefresh, ipv6: ipv6, clientIpCountry: clientIpCountry, grpc: grpc, imageOptimize: imageOptimize, standardDebug: standardDebug), region: region, logger: logger, on: eventLoop)
    }
}
