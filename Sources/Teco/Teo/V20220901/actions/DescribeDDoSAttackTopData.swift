//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Teo {
    /// 查询DDoS攻击Top数据
    ///
    /// 本接口（DescribeDDoSAttackTopData）用于查询DDoS攻击Top数据。
    @inlinable
    public func describeDDoSAttackTopData(_ input: DescribeDDoSAttackTopDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDDoSAttackTopDataResponse > {
        self.client.execute(action: "DescribeDDoSAttackTopData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询DDoS攻击Top数据
    ///
    /// 本接口（DescribeDDoSAttackTopData）用于查询DDoS攻击Top数据。
    @inlinable
    public func describeDDoSAttackTopData(_ input: DescribeDDoSAttackTopDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDDoSAttackTopDataResponse {
        try await self.client.execute(action: "DescribeDDoSAttackTopData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeDDoSAttackTopData请求参数结构体
    public struct DescribeDDoSAttackTopDataRequest: TCRequestModel {
        /// 开始时间。
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let startTime: Date
        
        /// 结束时间。
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let endTime: Date
        
        /// 查询的统计指标，取值有：
        /// <li>ddos_attackFlux_protocol：攻击总流量协议类型分布排行；</li>
        /// <li>ddos_attackPackageNum_protocol：攻击总包量协议类型分布排行；</li>
        /// <li>ddos_attackNum_attackType：攻击总次数攻击类型分布排行；</li>
        /// <li>ddos_attackNum_sregion：攻击总次数攻击源地区分布排行；</li>
        /// <li>ddos_attackFlux_sip：攻击总流量攻击源ip分布排行；</li>
        /// <li>ddos_attackFlux_sregion：攻击总流量攻击源地区分布排行。</li>
        public let metricName: String
        
        /// 站点ID集合，不填默认选择全部站点。
        public let zoneIds: [String]?
        
        /// DDoS策略组ID集合，不填默认选择全部策略ID。
        public let policyIds: [Int64]?
        
        /// 攻击类型，取值有：
        /// <li>flood：洪泛攻击；</li>
        /// <li>icmpFlood：icmp洪泛攻击；</li>
        /// <li>all：所有的攻击类型。</li>不填默认为all，表示查询全部攻击类型。
        public let attackType: String?
        
        /// 协议类型，取值有：
        /// <li>tcp：tcp协议；</li>
        /// <li>udp：udp协议；</li>
        /// <li>all：所有的协议类型。</li>不填默认为all，表示查询所有协议。
        public let protocolType: String?
        
        /// 端口号。
        public let port: Int64?
        
        /// 查询前多少个数据，不填默认默认为10， 表示查询前top 10的数据。
        public let limit: Int64?
        
        /// 数据归属地区，取值有：
        /// <li>overseas：全球（除中国大陆地区）数据；</li>
        /// <li>mainland：中国大陆地区数据。</li>不填将根据用户所在地智能选择地区。
        public let area: String?
        
        public init (startTime: Date, endTime: Date, metricName: String, zoneIds: [String]?, policyIds: [Int64]?, attackType: String?, protocolType: String?, port: Int64?, limit: Int64?, area: String?) {
            self.startTime = startTime
            self.endTime = endTime
            self.metricName = metricName
            self.zoneIds = zoneIds
            self.policyIds = policyIds
            self.attackType = attackType
            self.protocolType = protocolType
            self.port = port
            self.limit = limit
            self.area = area
        }
        
        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case metricName = "MetricName"
            case zoneIds = "ZoneIds"
            case policyIds = "PolicyIds"
            case attackType = "AttackType"
            case protocolType = "ProtocolType"
            case port = "Port"
            case limit = "Limit"
            case area = "Area"
        }
    }
    
    /// DescribeDDoSAttackTopData返回参数结构体
    public struct DescribeDDoSAttackTopDataResponse: TCResponseModel {
        /// DDoS攻击Top数据列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [TopEntry]?
        
        /// 查询结果的总条数。
        public let totalCount: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
}
