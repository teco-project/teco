//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Teo {
    /// DescribeOverviewL7Data请求参数结构体
    public struct DescribeOverviewL7DataRequest: TCRequestModel {
        /// 开始时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 结束时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// 查询的指标，取值有：
        /// - l7Flow_outFlux: Edegone响应流量；
        /// - l7Flow_inFlux: Edgeone请求流量；
        /// - l7Flow_outBandwidth: Edegone响应带宽；
        /// - l7Flow_inBandwidth: Edegone请求带宽；
        /// - l7Flow_hit_outFlux: 缓存命中流量；
        /// - l7Flow_request: 访问请求数；
        /// - l7Flow_flux: 访问请求上行+下行流量；
        /// - l7Flow_bandwidth：访问请求上行+下行带宽。
        public let metricNames: [String]

        /// 站点集合。
        /// 若不填写，默认选择全部站点，且最多只能查询近30天的数据；若填写，则可查询站点绑定套餐支持的[数据分析最大查询范围](https://cloud.tencent.com/document/product/1552/77380#edgeone-.E5.A5.97.E9.A4.90)。
        public let zoneIds: [String]?

        /// 查询的域名集合，不填默认查询所有子域名。
        public let domains: [String]?

        /// 查询的协议类型，取值有：
        /// - http: http协议；
        /// - https: https协议；
        /// - http2: http2协议；
        /// - all:  所有协议。不填默认为all，此参数暂未生效。
        public let `protocol`: String?

        /// 查询时间粒度，取值有：
        /// - min：1分钟；
        /// - 5min：5分钟；
        /// - hour：1小时；
        /// - day：1天。不填将根据开始时间跟结束时间的间距自动推算粒度，具体为：1小时范围内以min粒度查询，2天范围内以5min粒度查询，7天范围内以hour粒度查询，超过7天以day粒度查询。
        public let interval: String?

        /// 过滤条件，详细的过滤条件Key值如下：
        /// - socket
        ///
        /// 按照【**HTTP协议类型**】进行过滤。
        ///
        /// 对应的Value可选项如下：
        ///
        /// HTTP：HTTP 协议；
        ///
        /// HTTPS：HTTPS协议；
        ///
        /// QUIC：QUIC协议。
        /// - tagKey
        ///
        /// 按照【**标签Key**】进行过滤。
        /// - tagValue
        ///
        /// 按照【**标签Value**】进行过滤。
        public let filters: [QueryCondition]?

        /// 数据归属地区，取值有：
        /// - overseas：全球（除中国大陆地区）数据；
        /// - mainland：中国大陆地区数据；
        /// - global：全球数据。不填默认取值为global。
        public let area: String?

        public init(startTime: Date, endTime: Date, metricNames: [String], zoneIds: [String]? = nil, domains: [String]? = nil, protocol: String? = nil, interval: String? = nil, filters: [QueryCondition]? = nil, area: String? = nil) {
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.metricNames = metricNames
            self.zoneIds = zoneIds
            self.domains = domains
            self.protocol = `protocol`
            self.interval = interval
            self.filters = filters
            self.area = area
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case metricNames = "MetricNames"
            case zoneIds = "ZoneIds"
            case domains = "Domains"
            case `protocol` = "Protocol"
            case interval = "Interval"
            case filters = "Filters"
            case area = "Area"
        }
    }

    /// DescribeOverviewL7Data返回参数结构体
    public struct DescribeOverviewL7DataResponse: TCResponseModel {
        /// 查询结果的总条数。
        public let totalCount: UInt64

        /// 七层监控类时序流量数据列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [TimingDataRecord]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询监控流量时序数据
    ///
    /// 本接口（DescribeOverviewL7Data）用于查询七层监控类时序流量数据。
    @inlinable
    public func describeOverviewL7Data(_ input: DescribeOverviewL7DataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOverviewL7DataResponse> {
        self.client.execute(action: "DescribeOverviewL7Data", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询监控流量时序数据
    ///
    /// 本接口（DescribeOverviewL7Data）用于查询七层监控类时序流量数据。
    @inlinable
    public func describeOverviewL7Data(_ input: DescribeOverviewL7DataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOverviewL7DataResponse {
        try await self.client.execute(action: "DescribeOverviewL7Data", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询监控流量时序数据
    ///
    /// 本接口（DescribeOverviewL7Data）用于查询七层监控类时序流量数据。
    @inlinable
    public func describeOverviewL7Data(startTime: Date, endTime: Date, metricNames: [String], zoneIds: [String]? = nil, domains: [String]? = nil, protocol: String? = nil, interval: String? = nil, filters: [QueryCondition]? = nil, area: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOverviewL7DataResponse> {
        self.describeOverviewL7Data(.init(startTime: startTime, endTime: endTime, metricNames: metricNames, zoneIds: zoneIds, domains: domains, protocol: `protocol`, interval: interval, filters: filters, area: area), region: region, logger: logger, on: eventLoop)
    }

    /// 查询监控流量时序数据
    ///
    /// 本接口（DescribeOverviewL7Data）用于查询七层监控类时序流量数据。
    @inlinable
    public func describeOverviewL7Data(startTime: Date, endTime: Date, metricNames: [String], zoneIds: [String]? = nil, domains: [String]? = nil, protocol: String? = nil, interval: String? = nil, filters: [QueryCondition]? = nil, area: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOverviewL7DataResponse {
        try await self.describeOverviewL7Data(.init(startTime: startTime, endTime: endTime, metricNames: metricNames, zoneIds: zoneIds, domains: domains, protocol: `protocol`, interval: interval, filters: filters, area: area), region: region, logger: logger, on: eventLoop)
    }
}
