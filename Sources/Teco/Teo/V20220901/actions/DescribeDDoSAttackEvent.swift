//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers
import TecoPaginationHelpers

extension Teo {
    /// DescribeDDoSAttackEvent请求参数结构体
    public struct DescribeDDoSAttackEventRequest: TCPaginatedRequest {
        /// 开始时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 结束时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// ddos策略组集合，不填默认选择全部策略。
        public let policyIds: [Int64]?

        /// 站点集合，此参数必填，不填默认查询为空。
        public let zoneIds: [String]?

        /// 分页查询的限制数目，默认值为20，最大查询条目为1000。
        public let limit: Int64?

        /// 分页的偏移量，默认值为0。
        public let offset: Int64?

        /// 是否展示详细信息。
        public let showDetail: Bool?

        /// 数据归属地区，取值有：
        /// - overseas：全球（除中国大陆地区）数据；
        /// - mainland：中国大陆地区数据；
        /// - global：全球数据；不填默认取值为global。
        public let area: String?

        /// 排序字段，取值有：
        /// - MaxBandWidth：带宽峰值；
        /// - AttackStartTime：攻击开始时间。不填默认值为：AttackStartTime。
        public let orderBy: String?

        /// 排序方式，取值有：
        /// - asc：升序方式；
        /// - desc：降序方式。不填默认值为：desc。
        public let orderType: String?

        public init(startTime: Date, endTime: Date, policyIds: [Int64]? = nil, zoneIds: [String]? = nil, limit: Int64? = nil, offset: Int64? = nil, showDetail: Bool? = nil, area: String? = nil, orderBy: String? = nil, orderType: String? = nil) {
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.policyIds = policyIds
            self.zoneIds = zoneIds
            self.limit = limit
            self.offset = offset
            self.showDetail = showDetail
            self.area = area
            self.orderBy = orderBy
            self.orderType = orderType
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case policyIds = "PolicyIds"
            case zoneIds = "ZoneIds"
            case limit = "Limit"
            case offset = "Offset"
            case showDetail = "ShowDetail"
            case area = "Area"
            case orderBy = "OrderBy"
            case orderType = "OrderType"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDDoSAttackEventResponse) -> DescribeDDoSAttackEventRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeDDoSAttackEventRequest(startTime: self.startTime, endTime: self.endTime, policyIds: self.policyIds, zoneIds: self.zoneIds, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), showDetail: self.showDetail, area: self.area, orderBy: self.orderBy, orderType: self.orderType)
        }
    }

    /// DescribeDDoSAttackEvent返回参数结构体
    public struct DescribeDDoSAttackEventResponse: TCPaginatedResponse {
        /// DDOS攻击事件数据列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [DDoSAttackEvent]?

        /// 查询结果的总条数。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DDoSAttackEvent`` list from the paginated response.
        public func getItems() -> [DDoSAttackEvent] {
            self.data ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询DDoS攻击事件列表
    ///
    /// 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
    @inlinable
    public func describeDDoSAttackEvent(_ input: DescribeDDoSAttackEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDDoSAttackEventResponse> {
        self.client.execute(action: "DescribeDDoSAttackEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询DDoS攻击事件列表
    ///
    /// 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
    @inlinable
    public func describeDDoSAttackEvent(_ input: DescribeDDoSAttackEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDDoSAttackEventResponse {
        try await self.client.execute(action: "DescribeDDoSAttackEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询DDoS攻击事件列表
    ///
    /// 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
    @inlinable
    public func describeDDoSAttackEvent(startTime: Date, endTime: Date, policyIds: [Int64]? = nil, zoneIds: [String]? = nil, limit: Int64? = nil, offset: Int64? = nil, showDetail: Bool? = nil, area: String? = nil, orderBy: String? = nil, orderType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDDoSAttackEventResponse> {
        self.describeDDoSAttackEvent(.init(startTime: startTime, endTime: endTime, policyIds: policyIds, zoneIds: zoneIds, limit: limit, offset: offset, showDetail: showDetail, area: area, orderBy: orderBy, orderType: orderType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询DDoS攻击事件列表
    ///
    /// 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
    @inlinable
    public func describeDDoSAttackEvent(startTime: Date, endTime: Date, policyIds: [Int64]? = nil, zoneIds: [String]? = nil, limit: Int64? = nil, offset: Int64? = nil, showDetail: Bool? = nil, area: String? = nil, orderBy: String? = nil, orderType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDDoSAttackEventResponse {
        try await self.describeDDoSAttackEvent(.init(startTime: startTime, endTime: endTime, policyIds: policyIds, zoneIds: zoneIds, limit: limit, offset: offset, showDetail: showDetail, area: area, orderBy: orderBy, orderType: orderType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询DDoS攻击事件列表
    ///
    /// 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
    @inlinable
    public func describeDDoSAttackEventPaginated(_ input: DescribeDDoSAttackEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [DDoSAttackEvent])> {
        self.client.paginate(input: input, region: region, command: self.describeDDoSAttackEvent, logger: logger, on: eventLoop)
    }

    /// 查询DDoS攻击事件列表
    ///
    /// 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
    @inlinable @discardableResult
    public func describeDDoSAttackEventPaginated(_ input: DescribeDDoSAttackEventRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDDoSAttackEventResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDDoSAttackEvent, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询DDoS攻击事件列表
    ///
    /// 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
    ///
    /// - Returns: `AsyncSequence`s of ``DDoSAttackEvent`` and ``DescribeDDoSAttackEventResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDDoSAttackEventPaginator(_ input: DescribeDDoSAttackEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDDoSAttackEventRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDDoSAttackEvent, logger: logger, on: eventLoop)
    }
}
