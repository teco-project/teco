//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Teo {
    /// DescribeAccelerationDomains请求参数结构体
    public struct DescribeAccelerationDomainsRequest: TCPaginatedRequest {
        /// 加速域名所属站点ID。
        public let zoneId: String

        /// 过滤条件，Filters.Values的上限为20。详细的过滤条件如下：
        /// <li>domain-name<br>   按照【<strong>加速域名名称</strong>】进行过滤。<br>   类型：String<br>   必选：否
        /// <li>origin-type<br>   按照【<strong>源站类型</strong>】进行过滤。<br>   类型：String<br>   必选：否
        /// <li>origin<br>   按照【<strong>主源站地址</strong>】进行过滤。<br>   类型：String<br>   必选：否
        /// <li>backup-origin<br>   按照【<strong>备用源站地址</strong>】进行过滤。<br>   类型：String<br>   必选：否
        /// <li>domain-cname<br>   按照【<strong>加速CNAME名</strong>】进行过滤。<br>   类型：String<br>   必选：否
        /// <li>share-cname<br>   按照【<strong>共享CNAME名</strong>】进行过滤。<br>   类型：String<br>   必选：否
        public let filters: [AdvancedFilter]?

        /// 列表排序方式，取值有：
        /// <li>asc：升序排列；</li>
        /// <li>desc：降序排列。</li>默认值为asc。
        public let direction: String?

        /// 匹配方式，取值有：
        /// <li>all：返回匹配所有查询条件的加速域名；</li>
        /// <li>any：返回匹配任意一个查询条件的加速域名。</li>默认值为all。
        public let match: String?

        /// 分页查询限制数目，默认值：20，上限：200。
        public let limit: Int64?

        /// 分页查询偏移量，默认为 0。
        public let offset: Int64?

        /// 排序依据，取值有：
        /// <li>created_on：加速域名创建时间；</li>
        /// <li>domain-name：加速域名名称；</li>
        /// </li>默认根据domain-name属性排序。
        public let order: String?

        public init(zoneId: String, filters: [AdvancedFilter]? = nil, direction: String? = nil, match: String? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil) {
            self.zoneId = zoneId
            self.filters = filters
            self.direction = direction
            self.match = match
            self.limit = limit
            self.offset = offset
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case filters = "Filters"
            case direction = "Direction"
            case match = "Match"
            case limit = "Limit"
            case offset = "Offset"
            case order = "Order"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAccelerationDomainsResponse) -> DescribeAccelerationDomainsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeAccelerationDomainsRequest(zoneId: self.zoneId, filters: self.filters, direction: self.direction, match: self.match, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), order: self.order)
        }
    }

    /// DescribeAccelerationDomains返回参数结构体
    public struct DescribeAccelerationDomainsResponse: TCPaginatedResponse {
        /// 加速域名总数。
        public let totalCount: Int64

        /// 加速域名列表。
        public let accelerationDomains: [AccelerationDomain]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case accelerationDomains = "AccelerationDomains"
            case requestId = "RequestId"
        }

        /// Extract the returned ``AccelerationDomain`` list from the paginated response.
        public func getItems() -> [AccelerationDomain] {
            self.accelerationDomains
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询加速域名列表
    ///
    /// 查询加速域名列表，支持搜索、分页、排序、过滤。
    @inlinable
    public func describeAccelerationDomains(_ input: DescribeAccelerationDomainsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccelerationDomainsResponse> {
        self.client.execute(action: "DescribeAccelerationDomains", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询加速域名列表
    ///
    /// 查询加速域名列表，支持搜索、分页、排序、过滤。
    @inlinable
    public func describeAccelerationDomains(_ input: DescribeAccelerationDomainsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccelerationDomainsResponse {
        try await self.client.execute(action: "DescribeAccelerationDomains", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询加速域名列表
    ///
    /// 查询加速域名列表，支持搜索、分页、排序、过滤。
    @inlinable
    public func describeAccelerationDomains(zoneId: String, filters: [AdvancedFilter]? = nil, direction: String? = nil, match: String? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccelerationDomainsResponse> {
        self.describeAccelerationDomains(.init(zoneId: zoneId, filters: filters, direction: direction, match: match, limit: limit, offset: offset, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 查询加速域名列表
    ///
    /// 查询加速域名列表，支持搜索、分页、排序、过滤。
    @inlinable
    public func describeAccelerationDomains(zoneId: String, filters: [AdvancedFilter]? = nil, direction: String? = nil, match: String? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccelerationDomainsResponse {
        try await self.describeAccelerationDomains(.init(zoneId: zoneId, filters: filters, direction: direction, match: match, limit: limit, offset: offset, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 查询加速域名列表
    ///
    /// 查询加速域名列表，支持搜索、分页、排序、过滤。
    @inlinable
    public func describeAccelerationDomainsPaginated(_ input: DescribeAccelerationDomainsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [AccelerationDomain])> {
        self.client.paginate(input: input, region: region, command: self.describeAccelerationDomains, logger: logger, on: eventLoop)
    }

    /// 查询加速域名列表
    ///
    /// 查询加速域名列表，支持搜索、分页、排序、过滤。
    @inlinable @discardableResult
    public func describeAccelerationDomainsPaginated(_ input: DescribeAccelerationDomainsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAccelerationDomainsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAccelerationDomains, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询加速域名列表
    ///
    /// 查询加速域名列表，支持搜索、分页、排序、过滤。
    ///
    /// - Returns: `AsyncSequence`s of ``AccelerationDomain`` and ``DescribeAccelerationDomainsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAccelerationDomainsPaginator(_ input: DescribeAccelerationDomainsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAccelerationDomainsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAccelerationDomains, logger: logger, on: eventLoop)
    }
}
