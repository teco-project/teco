//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Teo {
    /// 查询CC相关攻击事件
    ///
    /// 本接口（DescribeWebProtectionAttackEvents）用于查询CC相关攻击事件列表。
    @inlinable
    public func describeWebProtectionAttackEvents(_ input: DescribeWebProtectionAttackEventsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeWebProtectionAttackEventsResponse > {
        self.client.execute(action: "DescribeWebProtectionAttackEvents", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询CC相关攻击事件
    ///
    /// 本接口（DescribeWebProtectionAttackEvents）用于查询CC相关攻击事件列表。
    @inlinable
    public func describeWebProtectionAttackEvents(_ input: DescribeWebProtectionAttackEventsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWebProtectionAttackEventsResponse {
        try await self.client.execute(action: "DescribeWebProtectionAttackEvents", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeWebProtectionAttackEvents请求参数结构体
    public struct DescribeWebProtectionAttackEventsRequest: TCRequestModel {
        /// 开始时间。
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let startTime: Date
        
        /// 结束时间。
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let endTime: Date
        
        /// 站点集合，不填默认选择全部站点。
        public let zoneIds: [String]?
        
        /// 域名集合，不填默认选择全部子域名。
        public let domains: [String]?
        
        /// 分页查询的限制数目，默认值为20，最大查询条目为1000。
        public let limit: Int64?
        
        /// 分页的偏移量，默认值为0。
        public let offset: Int64?
        
        public init (startTime: Date, endTime: Date, zoneIds: [String]?, domains: [String]?, limit: Int64?, offset: Int64?) {
            self.startTime = startTime
            self.endTime = endTime
            self.zoneIds = zoneIds
            self.domains = domains
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case zoneIds = "ZoneIds"
            case domains = "Domains"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeWebProtectionAttackEvents返回参数结构体
    public struct DescribeWebProtectionAttackEventsResponse: TCResponseModel {
        /// CC相关攻击事件列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [CCInterceptEvent]?
        
        /// 查询结果的总条数。
        public let totalCount: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
}
