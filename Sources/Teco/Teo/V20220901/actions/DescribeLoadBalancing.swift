//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// DescribeLoadBalancing请求参数结构体
    public struct DescribeLoadBalancingRequest: TCRequestModel {
        /// 分页查询偏移量，默认为0。
        public let offset: UInt64
        
        /// 分页查询限制数目，默认为10，取值：1-1000。
        public let limit: UInt64
        
        /// 过滤条件，Filters.Values的上限为20。详细的过滤条件如下：
        /// <li>zone-id<br>   按照【<strong>站点ID</strong>】进行过滤。站点ID形如：zone-1a8df68z<br>   类型：String<br>   必选：否<br>   模糊查询：不支持
        /// </li><li>load-balancing-id<br>   按照【<strong>负载均衡ID</strong>】进行过滤。负载均衡ID形如：lb-d21bfaf7-8d72-11ec-841d-00ff977fb3c8<br>   类型：String<br>   必选：否<br>   模糊查询：不支持
        /// </li><li>host<br>   按照【<strong>负载均衡host</strong>】进行过滤。host形如：lb.tencent.com<br>   类型：String<br>   必选：否<br>   模糊查询：支持，模糊查询时仅支持一个host</li>
        public let filters: [AdvancedFilter]?
        
        public init (offset: UInt64, limit: UInt64, filters: [AdvancedFilter]? = nil) {
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }
        
        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }
    }
    
    /// DescribeLoadBalancing返回参数结构体
    public struct DescribeLoadBalancingResponse: TCResponseModel {
        /// 记录总数。
        public let totalCount: UInt64
        
        /// 负载均衡信息。
        public let data: [LoadBalancing]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case data = "Data"
            case requestId = "RequestId"
        }
    }
    
    /// 获取负载均衡列表
    @inlinable
    public func describeLoadBalancing(_ input: DescribeLoadBalancingRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeLoadBalancingResponse > {
        self.client.execute(action: "DescribeLoadBalancing", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取负载均衡列表
    @inlinable
    public func describeLoadBalancing(_ input: DescribeLoadBalancingRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLoadBalancingResponse {
        try await self.client.execute(action: "DescribeLoadBalancing", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取负载均衡列表
    @inlinable
    public func describeLoadBalancing(offset: UInt64, limit: UInt64, filters: [AdvancedFilter]? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeLoadBalancingResponse > {
        self.describeLoadBalancing(DescribeLoadBalancingRequest(offset: offset, limit: limit, filters: filters), logger: logger, on: eventLoop)
    }
    
    /// 获取负载均衡列表
    @inlinable
    public func describeLoadBalancing(offset: UInt64, limit: UInt64, filters: [AdvancedFilter]? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLoadBalancingResponse {
        try await self.describeLoadBalancing(DescribeLoadBalancingRequest(offset: offset, limit: limit, filters: filters), logger: logger, on: eventLoop)
    }
}
