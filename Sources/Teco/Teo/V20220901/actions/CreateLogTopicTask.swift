//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// CreateLogTopicTask请求参数结构体
    public struct CreateLogTopicTaskRequest: TCRequestModel {
        /// 日志集ID。
        public let logSetId: String

        /// 日志集所属的地域。
        public let logSetRegion: String

        /// 日志集主题名。
        public let topicName: String

        /// 推送任务的名称。
        public let taskName: String

        /// 站点ID。
        public let zoneId: String

        /// 站点名称。
        public let zoneName: String

        /// 数据推送类型，取值有：
        /// <li>domain：七层代理日志；</li>
        /// <li>application：四层代理日志；</li>
        /// <li>web-rateLiming：速率限制日志；</li>
        /// <li>web-attack：Web攻击防护日志；</li>
        /// <li>web-rule：自定义规则日志；</li>
        /// <li>web-bot：Bot管理日志。</li>
        public let entityType: String

        /// 日志主题保存时间，单位为天，取值范围为：1-366。
        public let period: UInt64

        /// 推送任务实体列表。
        public let entityList: [String]?

        /// 加速区域，取值有：
        /// <li>mainland：中国大陆境内；</li>
        /// <li>overseas：全球（不含中国大陆）。</li>不填将根据用户的地域智能选择加速区域。
        public let area: String?

        public init(logSetId: String, logSetRegion: String, topicName: String, taskName: String, zoneId: String, zoneName: String, entityType: String, period: UInt64, entityList: [String]? = nil, area: String? = nil) {
            self.logSetId = logSetId
            self.logSetRegion = logSetRegion
            self.topicName = topicName
            self.taskName = taskName
            self.zoneId = zoneId
            self.zoneName = zoneName
            self.entityType = entityType
            self.period = period
            self.entityList = entityList
            self.area = area
        }

        enum CodingKeys: String, CodingKey {
            case logSetId = "LogSetId"
            case logSetRegion = "LogSetRegion"
            case topicName = "TopicName"
            case taskName = "TaskName"
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case entityType = "EntityType"
            case period = "Period"
            case entityList = "EntityList"
            case area = "Area"
        }
    }

    /// CreateLogTopicTask返回参数结构体
    public struct CreateLogTopicTaskResponse: TCResponseModel {
        /// 创建成功的主题ID。
        public let topicId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case requestId = "RequestId"
        }
    }

    /// 创建推送任务
    ///
    /// 本接口（CreateLogTopicTask）用于创建日志推送任务。
    @inlinable
    public func createLogTopicTask(_ input: CreateLogTopicTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLogTopicTaskResponse> {
        self.client.execute(action: "CreateLogTopicTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建推送任务
    ///
    /// 本接口（CreateLogTopicTask）用于创建日志推送任务。
    @inlinable
    public func createLogTopicTask(_ input: CreateLogTopicTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLogTopicTaskResponse {
        try await self.client.execute(action: "CreateLogTopicTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建推送任务
    ///
    /// 本接口（CreateLogTopicTask）用于创建日志推送任务。
    @inlinable
    public func createLogTopicTask(logSetId: String, logSetRegion: String, topicName: String, taskName: String, zoneId: String, zoneName: String, entityType: String, period: UInt64, entityList: [String]? = nil, area: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLogTopicTaskResponse> {
        self.createLogTopicTask(CreateLogTopicTaskRequest(logSetId: logSetId, logSetRegion: logSetRegion, topicName: topicName, taskName: taskName, zoneId: zoneId, zoneName: zoneName, entityType: entityType, period: period, entityList: entityList, area: area), region: region, logger: logger, on: eventLoop)
    }

    /// 创建推送任务
    ///
    /// 本接口（CreateLogTopicTask）用于创建日志推送任务。
    @inlinable
    public func createLogTopicTask(logSetId: String, logSetRegion: String, topicName: String, taskName: String, zoneId: String, zoneName: String, entityType: String, period: UInt64, entityList: [String]? = nil, area: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLogTopicTaskResponse {
        try await self.createLogTopicTask(CreateLogTopicTaskRequest(logSetId: logSetId, logSetRegion: logSetRegion, topicName: topicName, taskName: taskName, zoneId: zoneId, zoneName: zoneName, entityType: entityType, period: period, entityList: entityList, area: area), region: region, logger: logger, on: eventLoop)
    }
}
