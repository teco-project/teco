//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// DescribeRateLimitIntelligenceRule请求参数结构体
    public struct DescribeRateLimitIntelligenceRuleRequest: TCRequestModel {
        /// 站点Id。
        public let zoneId: String

        /// 子域名/应用名。
        public let entity: String

        public init(zoneId: String, entity: String) {
            self.zoneId = zoneId
            self.entity = entity
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case entity = "Entity"
        }
    }

    /// DescribeRateLimitIntelligenceRule返回参数结构体
    public struct DescribeRateLimitIntelligenceRuleResponse: TCResponseModel {
        /// 速率限制智能规则。
        public let rateLimitIntelligenceRuleDetails: [RateLimitIntelligenceRuleDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case rateLimitIntelligenceRuleDetails = "RateLimitIntelligenceRuleDetails"
            case requestId = "RequestId"
        }
    }

    /// 查询速率限制智能客户端过滤规则
    ///
    /// 查询速率限制智能客户端过滤学习出来的规则
    @inlinable
    public func describeRateLimitIntelligenceRule(_ input: DescribeRateLimitIntelligenceRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRateLimitIntelligenceRuleResponse> {
        self.client.execute(action: "DescribeRateLimitIntelligenceRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询速率限制智能客户端过滤规则
    ///
    /// 查询速率限制智能客户端过滤学习出来的规则
    @inlinable
    public func describeRateLimitIntelligenceRule(_ input: DescribeRateLimitIntelligenceRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRateLimitIntelligenceRuleResponse {
        try await self.client.execute(action: "DescribeRateLimitIntelligenceRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询速率限制智能客户端过滤规则
    ///
    /// 查询速率限制智能客户端过滤学习出来的规则
    @inlinable
    public func describeRateLimitIntelligenceRule(zoneId: String, entity: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRateLimitIntelligenceRuleResponse> {
        self.describeRateLimitIntelligenceRule(DescribeRateLimitIntelligenceRuleRequest(zoneId: zoneId, entity: entity), region: region, logger: logger, on: eventLoop)
    }

    /// 查询速率限制智能客户端过滤规则
    ///
    /// 查询速率限制智能客户端过滤学习出来的规则
    @inlinable
    public func describeRateLimitIntelligenceRule(zoneId: String, entity: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRateLimitIntelligenceRuleResponse {
        try await self.describeRateLimitIntelligenceRule(DescribeRateLimitIntelligenceRuleRequest(zoneId: zoneId, entity: entity), region: region, logger: logger, on: eventLoop)
    }
}
