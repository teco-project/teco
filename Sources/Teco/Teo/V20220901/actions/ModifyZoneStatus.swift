//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// ModifyZoneStatus请求参数结构体
    public struct ModifyZoneStatusRequest: TCRequestModel {
        /// 站点 ID。
        public let zoneId: String

        /// 站点状态，取值有：
        /// <li> false：开启站点；</li>
        /// <li> true：关闭站点。</li>
        public let paused: Bool

        public init(zoneId: String, paused: Bool) {
            self.zoneId = zoneId
            self.paused = paused
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case paused = "Paused"
        }
    }

    /// ModifyZoneStatus返回参数结构体
    public struct ModifyZoneStatusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 切换站点状态
    ///
    /// 用于开启，关闭站点。
    @inlinable @discardableResult
    public func modifyZoneStatus(_ input: ModifyZoneStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyZoneStatusResponse> {
        self.client.execute(action: "ModifyZoneStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 切换站点状态
    ///
    /// 用于开启，关闭站点。
    @inlinable @discardableResult
    public func modifyZoneStatus(_ input: ModifyZoneStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyZoneStatusResponse {
        try await self.client.execute(action: "ModifyZoneStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 切换站点状态
    ///
    /// 用于开启，关闭站点。
    @inlinable @discardableResult
    public func modifyZoneStatus(zoneId: String, paused: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyZoneStatusResponse> {
        self.modifyZoneStatus(ModifyZoneStatusRequest(zoneId: zoneId, paused: paused), region: region, logger: logger, on: eventLoop)
    }

    /// 切换站点状态
    ///
    /// 用于开启，关闭站点。
    @inlinable @discardableResult
    public func modifyZoneStatus(zoneId: String, paused: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyZoneStatusResponse {
        try await self.modifyZoneStatus(ModifyZoneStatusRequest(zoneId: zoneId, paused: paused), region: region, logger: logger, on: eventLoop)
    }
}
