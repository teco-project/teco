//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// DescribeIdentifications请求参数结构体
    public struct DescribeIdentificationsRequest: TCRequestModel {
        /// 过滤条件，Filters.Values的上限为20。详细的过滤条件如下：
        /// <li>zone-name<br>   按照【<strong>站点名称</strong>】进行过滤。<br>   类型：String<br>   必选：是</li>
        public let filters: [Filter]

        /// 分页查询偏移量。默认值：0。
        public let offset: Int64?

        /// 分页查询限制数目。默认值：20，最大值：1000。
        public let limit: Int64?

        public init(filters: [Filter], offset: Int64? = nil, limit: Int64? = nil) {
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// DescribeIdentifications返回参数结构体
    public struct DescribeIdentificationsResponse: TCResponseModel {
        /// 符合条件的站点个数。
        public let totalCount: Int64

        /// 站点验证信息列表。
        public let identifications: [Identification]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case identifications = "Identifications"
            case requestId = "RequestId"
        }
    }

    /// 查询站点的验证信息
    ///
    /// 查询站点的验证信息。
    @inlinable
    public func describeIdentifications(_ input: DescribeIdentificationsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIdentificationsResponse> {
        self.client.execute(action: "DescribeIdentifications", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询站点的验证信息
    ///
    /// 查询站点的验证信息。
    @inlinable
    public func describeIdentifications(_ input: DescribeIdentificationsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIdentificationsResponse {
        try await self.client.execute(action: "DescribeIdentifications", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询站点的验证信息
    ///
    /// 查询站点的验证信息。
    @inlinable
    public func describeIdentifications(filters: [Filter], offset: Int64? = nil, limit: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIdentificationsResponse> {
        self.describeIdentifications(DescribeIdentificationsRequest(filters: filters, offset: offset, limit: limit), logger: logger, on: eventLoop)
    }

    /// 查询站点的验证信息
    ///
    /// 查询站点的验证信息。
    @inlinable
    public func describeIdentifications(filters: [Filter], offset: Int64? = nil, limit: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIdentificationsResponse {
        try await self.describeIdentifications(DescribeIdentificationsRequest(filters: filters, offset: offset, limit: limit), logger: logger, on: eventLoop)
    }
}
