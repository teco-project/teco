//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTeoError {
    public struct ResourceUnavailable: TCTeoErrorType {
        enum Code: String {
            case availableDomainNotFound = "ResourceUnavailable.AvailableDomainNotFound"
            case certNotFound = "ResourceUnavailable.CertNotFound"
            case hostNotFound = "ResourceUnavailable.HostNotFound"
            case proxyZoneNotFound = "ResourceUnavailable.ProxyZoneNotFound"
            case zoneNotFound = "ResourceUnavailable.ZoneNotFound"
            case other = "ResourceUnavailable"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 无剩余可创建新任务的域名。
        public static var availableDomainNotFound: ResourceUnavailable {
            ResourceUnavailable(.availableDomainNotFound)
        }

        /// 证书不存在或未授权。
        public static var certNotFound: ResourceUnavailable {
            ResourceUnavailable(.certNotFound)
        }

        /// 域名不存在或未开启代理。
        public static var hostNotFound: ResourceUnavailable {
            ResourceUnavailable(.hostNotFound)
        }

        /// 未拉取到已开启代理的zone信息。
        public static var proxyZoneNotFound: ResourceUnavailable {
            ResourceUnavailable(.proxyZoneNotFound)
        }

        /// 站点不存在或不属于该账号。
        public static var zoneNotFound: ResourceUnavailable {
            ResourceUnavailable(.zoneNotFound)
        }

        /// 资源不可用。
        public static var other: ResourceUnavailable {
            ResourceUnavailable(.other)
        }

        public func asTeoError() -> TCTeoError {
            let code: TCTeoError.Code
            switch self.error {
            case .availableDomainNotFound:
                code = .resourceUnavailable_AvailableDomainNotFound
            case .certNotFound:
                code = .resourceUnavailable_CertNotFound
            case .hostNotFound:
                code = .resourceUnavailable_HostNotFound
            case .proxyZoneNotFound:
                code = .resourceUnavailable_ProxyZoneNotFound
            case .zoneNotFound:
                code = .resourceUnavailable_ZoneNotFound
            case .other:
                code = .resourceUnavailable
            }
            return TCTeoError(code, context: self.context)
        }
    }
}
