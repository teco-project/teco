//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTeoError {
    public struct InternalError: TCTeoErrorType {
        enum Code: String {
            case backendError = "InternalError.BackendError"
            case dbError = "InternalError.DBError"
            case domainConfig = "InternalError.DomainConfig"
            case failedToGenerateUrl = "InternalError.FailedToGenerateUrl"
            case getRoleError = "InternalError.GetRoleError"
            case proxyServer = "InternalError.ProxyServer"
            case quotaSystem = "InternalError.QuotaSystem"
            case routeError = "InternalError.RouteError"
            case systemError = "InternalError.SystemError"
            case other = "InternalError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 后台处理出错。
        public static var backendError: InternalError {
            InternalError(.backendError)
        }

        /// 数据库错误。
        public static var dbError: InternalError {
            InternalError(.dbError)
        }

        /// 获取配置失败。
        public static var domainConfig: InternalError {
            InternalError(.domainConfig)
        }

        /// 上传链接生成失败。
        public static var failedToGenerateUrl: InternalError {
            InternalError(.failedToGenerateUrl)
        }

        /// 获取角色失败。
        public static var getRoleError: InternalError {
            InternalError(.getRoleError)
        }

        /// 后端服务器发生未知错误。
        public static var proxyServer: InternalError {
            InternalError(.proxyServer)
        }

        /// 配额系统处理失败。
        public static var quotaSystem: InternalError {
            InternalError(.quotaSystem)
        }

        /// 后端服务路由地址错误。
        public static var routeError: InternalError {
            InternalError(.routeError)
        }

        /// 内部错误-系统错误。
        public static var systemError: InternalError {
            InternalError(.systemError)
        }

        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }

        public func asTeoError() -> TCTeoError {
            let code: TCTeoError.Code
            switch self.error {
            case .backendError:
                code = .internalError_BackendError
            case .dbError:
                code = .internalError_DBError
            case .domainConfig:
                code = .internalError_DomainConfig
            case .failedToGenerateUrl:
                code = .internalError_FailedToGenerateUrl
            case .getRoleError:
                code = .internalError_GetRoleError
            case .proxyServer:
                code = .internalError_ProxyServer
            case .quotaSystem:
                code = .internalError_QuotaSystem
            case .routeError:
                code = .internalError_RouteError
            case .systemError:
                code = .internalError_SystemError
            case .other:
                code = .internalError
            }
            return TCTeoError(code, context: self.context)
        }
    }
}
