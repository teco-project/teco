//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTeoError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case backendError = "InternalError.BackendError"
            case dbError = "InternalError.DBError"
            case domainConfig = "InternalError.DomainConfig"
            case failedToGenerateUrl = "InternalError.FailedToGenerateUrl"
            case getRoleError = "InternalError.GetRoleError"
            case proxyServer = "InternalError.ProxyServer"
            case quotaSystem = "InternalError.QuotaSystem"
            case routeError = "InternalError.RouteError"
            case systemError = "InternalError.SystemError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 后台处理出错。
        public static var backendError: InternalError {
            InternalError(.backendError)
        }
        
        /// 数据库错误。
        public static var dbError: InternalError {
            InternalError(.dbError)
        }
        
        /// 获取配置失败。
        public static var domainConfig: InternalError {
            InternalError(.domainConfig)
        }
        
        /// 上传链接生成失败。
        public static var failedToGenerateUrl: InternalError {
            InternalError(.failedToGenerateUrl)
        }
        
        /// 获取角色失败。
        public static var getRoleError: InternalError {
            InternalError(.getRoleError)
        }
        
        /// 后端服务器发生未知错误。
        public static var proxyServer: InternalError {
            InternalError(.proxyServer)
        }
        
        /// 配额系统处理失败。
        public static var quotaSystem: InternalError {
            InternalError(.quotaSystem)
        }
        
        /// 后端服务路由地址错误。
        public static var routeError: InternalError {
            InternalError(.routeError)
        }
        
        /// 内部错误。
        public static var systemError: InternalError {
            InternalError(.systemError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCTeoError.InternalError: Equatable {
    public static func == (lhs: TCTeoError.InternalError, rhs: TCTeoError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTeoError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTeoError.InternalError {
    public func toTeoError() -> TCTeoError {
        guard let code = TCTeoError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTeoError(code, context: self.context)
    }
}