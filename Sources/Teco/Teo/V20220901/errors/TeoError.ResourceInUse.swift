//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTeoError {
    public struct ResourceInUse: TCTeoErrorType {
        enum Code: String {
            case aliasDomain = "ResourceInUse.AliasDomain"
            case aliasName = "ResourceInUse.AliasName"
            case cname = "ResourceInUse.Cname"
            case dns = "ResourceInUse.Dns"
            case dnsRecord = "ResourceInUse.DnsRecord"
            case duplicateName = "ResourceInUse.DuplicateName"
            case genericHost = "ResourceInUse.GenericHost"
            case host = "ResourceInUse.Host"
            case ns = "ResourceInUse.NS"
            case others = "ResourceInUse.Others"
            case othersAliasDomain = "ResourceInUse.OthersAliasDomain"
            case othersCname = "ResourceInUse.OthersCname"
            case othersHost = "ResourceInUse.OthersHost"
            case othersNS = "ResourceInUse.OthersNS"
            case selfAndOthersCname = "ResourceInUse.SelfAndOthersCname"
            case zone = "ResourceInUse.Zone"
            case other = "ResourceInUse"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 资源被本账号别称域名占用。
        public static var aliasDomain: ResourceInUse {
            ResourceInUse(.aliasDomain)
        }

        /// 当前已存在相同的别称域名，不支持重复添加
        public static var aliasName: ResourceInUse {
            ResourceInUse(.aliasName)
        }

        /// 资源被本账号Cname接入占用。
        public static var cname: ResourceInUse {
            ResourceInUse(.cname)
        }

        /// Dns资源被占用。
        public static var dns: ResourceInUse {
            ResourceInUse(.dns)
        }

        /// 该域名正在解析中，如果您需要开启加速，请前往 DNS 记录页开启加速。
        public static var dnsRecord: ResourceInUse {
            ResourceInUse(.dnsRecord)
        }

        /// 已存在相同的别称域名。
        public static var duplicateName: ResourceInUse {
            ResourceInUse(.duplicateName)
        }

        /// 资源已被泛域名占用。
        public static var genericHost: ResourceInUse {
            ResourceInUse(.genericHost)
        }

        /// 资源被本账号的子域名占用。
        public static var host: ResourceInUse {
            ResourceInUse(.host)
        }

        /// 资源被本账号NS接入占用。
        public static var ns: ResourceInUse {
            ResourceInUse(.ns)
        }

        /// 资源被其他用户接入。
        public static var others: ResourceInUse {
            ResourceInUse(.others)
        }

        /// 资源被其他账号别称域名占用。
        public static var othersAliasDomain: ResourceInUse {
            ResourceInUse(.othersAliasDomain)
        }

        /// 资源被其他账号Cname接入占用。
        public static var othersCname: ResourceInUse {
            ResourceInUse(.othersCname)
        }

        /// 资源被其他账号的子域名占用。
        public static var othersHost: ResourceInUse {
            ResourceInUse(.othersHost)
        }

        /// 资源被其他账号NS接入占用。
        public static var othersNS: ResourceInUse {
            ResourceInUse(.othersNS)
        }

        /// 资源被本账号和其他账号同时Cname接入占用。
        public static var selfAndOthersCname: ResourceInUse {
            ResourceInUse(.selfAndOthersCname)
        }

        /// 别称域名已站点接入。
        public static var zone: ResourceInUse {
            ResourceInUse(.zone)
        }

        /// 资源被占用。
        public static var other: ResourceInUse {
            ResourceInUse(.other)
        }

        public func asTeoError() -> TCTeoError {
            let code: TCTeoError.Code
            switch self.error {
            case .aliasDomain:
                code = .resourceInUse_AliasDomain
            case .aliasName:
                code = .resourceInUse_AliasName
            case .cname:
                code = .resourceInUse_Cname
            case .dns:
                code = .resourceInUse_Dns
            case .dnsRecord:
                code = .resourceInUse_DnsRecord
            case .duplicateName:
                code = .resourceInUse_DuplicateName
            case .genericHost:
                code = .resourceInUse_GenericHost
            case .host:
                code = .resourceInUse_Host
            case .ns:
                code = .resourceInUse_NS
            case .others:
                code = .resourceInUse_Others
            case .othersAliasDomain:
                code = .resourceInUse_OthersAliasDomain
            case .othersCname:
                code = .resourceInUse_OthersCname
            case .othersHost:
                code = .resourceInUse_OthersHost
            case .othersNS:
                code = .resourceInUse_OthersNS
            case .selfAndOthersCname:
                code = .resourceInUse_SelfAndOthersCname
            case .zone:
                code = .resourceInUse_Zone
            case .other:
                code = .resourceInUse
            }
            return TCTeoError(code, context: self.context)
        }
    }
}
