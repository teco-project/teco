//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTeoError {
    public struct ResourceInUse: TCErrorType {
        enum Code: String {
            case aliasDomain = "ResourceInUse.AliasDomain"
            case cname = "ResourceInUse.Cname"
            case dns = "ResourceInUse.Dns"
            case duplicateName = "ResourceInUse.DuplicateName"
            case genericHost = "ResourceInUse.GenericHost"
            case host = "ResourceInUse.Host"
            case ns = "ResourceInUse.NS"
            case others = "ResourceInUse.Others"
            case othersAliasDomain = "ResourceInUse.OthersAliasDomain"
            case othersCname = "ResourceInUse.OthersCname"
            case othersHost = "ResourceInUse.OthersHost"
            case othersNS = "ResourceInUse.OthersNS"
            case selfAndOthersCname = "ResourceInUse.SelfAndOthersCname"
            case zone = "ResourceInUse.Zone"
            case other = "ResourceInUse"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var aliasDomain: ResourceInUse {
            ResourceInUse(.aliasDomain)
        }
        
        public static var cname: ResourceInUse {
            ResourceInUse(.cname)
        }
        
        public static var dns: ResourceInUse {
            ResourceInUse(.dns)
        }
        
        public static var duplicateName: ResourceInUse {
            ResourceInUse(.duplicateName)
        }
        
        public static var genericHost: ResourceInUse {
            ResourceInUse(.genericHost)
        }
        
        public static var host: ResourceInUse {
            ResourceInUse(.host)
        }
        
        public static var ns: ResourceInUse {
            ResourceInUse(.ns)
        }
        
        /// 资源被其他用户接入。
        public static var others: ResourceInUse {
            ResourceInUse(.others)
        }
        
        public static var othersAliasDomain: ResourceInUse {
            ResourceInUse(.othersAliasDomain)
        }
        
        public static var othersCname: ResourceInUse {
            ResourceInUse(.othersCname)
        }
        
        public static var othersHost: ResourceInUse {
            ResourceInUse(.othersHost)
        }
        
        public static var othersNS: ResourceInUse {
            ResourceInUse(.othersNS)
        }
        
        public static var selfAndOthersCname: ResourceInUse {
            ResourceInUse(.selfAndOthersCname)
        }
        
        public static var zone: ResourceInUse {
            ResourceInUse(.zone)
        }
        
        /// 资源被占用。
        public static var other: ResourceInUse {
            ResourceInUse(.other)
        }
    }
}

extension TCTeoError.ResourceInUse: Equatable {
    public static func == (lhs: TCTeoError.ResourceInUse, rhs: TCTeoError.ResourceInUse) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTeoError.ResourceInUse: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTeoError.ResourceInUse {
    public func toTeoError() -> TCTeoError {
        guard let code = TCTeoError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTeoError(code, context: self.context)
    }
}