//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTeoError {
    public struct UnauthorizedOperation: TCErrorType {
        enum Code: String {
            case camUnauthorized = "UnauthorizedOperation.CamUnauthorized"
            case domainEmpty = "UnauthorizedOperation.DomainEmpty"
            case noPermission = "UnauthorizedOperation.NoPermission"
            case unknown = "UnauthorizedOperation.Unknown"
            case other = "UnauthorizedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// Cam 未授权。
        public static var camUnauthorized: UnauthorizedOperation {
            UnauthorizedOperation(.camUnauthorized)
        }
        
        /// 鉴权错误。
        public static var domainEmpty: UnauthorizedOperation {
            UnauthorizedOperation(.domainEmpty)
        }
        
        /// 子账户没有操作权限，请添加权限后继续操作。
        public static var noPermission: UnauthorizedOperation {
            UnauthorizedOperation(.noPermission)
        }
        
        /// 后端服务器发生未知错误。
        public static var unknown: UnauthorizedOperation {
            UnauthorizedOperation(.unknown)
        }
        
        /// 未授权操作。
        public static var other: UnauthorizedOperation {
            UnauthorizedOperation(.other)
        }
    }
}

extension TCTeoError.UnauthorizedOperation: Equatable {
    public static func == (lhs: TCTeoError.UnauthorizedOperation, rhs: TCTeoError.UnauthorizedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTeoError.UnauthorizedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTeoError.UnauthorizedOperation {
    /// - Returns: ``TCTeoError`` that holds the same error and context.
    public func toTeoError() -> TCTeoError {
        guard let code = TCTeoError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTeoError(code, context: self.context)
    }
}

extension TCTeoError.UnauthorizedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
