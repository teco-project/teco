//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTeoError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case conflictRecord = "InvalidParameterValue.ConflictRecord"
            case conflictWithDNSSEC = "InvalidParameterValue.ConflictWithDNSSEC"
            case conflictWithLBRecord = "InvalidParameterValue.ConflictWithLBRecord"
            case conflictWithNSRecord = "InvalidParameterValue.ConflictWithNSRecord"
            case invalidDNSContent = "InvalidParameterValue.InvalidDNSContent"
            case invalidDNSName = "InvalidParameterValue.InvalidDNSName"
            case invalidDomainStatus = "InvalidParameterValue.InvalidDomainStatus"
            case invalidProxyName = "InvalidParameterValue.InvalidProxyName"
            case invalidProxyOrigin = "InvalidParameterValue.InvalidProxyOrigin"
            case recordAlreadyExists = "InvalidParameterValue.RecordAlreadyExists"
            case recordNotAllowed = "InvalidParameterValue.RecordNotAllowed"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 与已经添加的记录冲突。
        public static var conflictRecord: InvalidParameterValue {
            InvalidParameterValue(.conflictRecord)
        }
        
        /// DNS 记录与 DNSSEC 功能冲突。
        public static var conflictWithDNSSEC: InvalidParameterValue {
            InvalidParameterValue(.conflictWithDNSSEC)
        }
        
        /// DNS 记录与 LB 记录冲突。
        public static var conflictWithLBRecord: InvalidParameterValue {
            InvalidParameterValue(.conflictWithLBRecord)
        }
        
        /// DNS 记录与 NS 记录冲突。
        public static var conflictWithNSRecord: InvalidParameterValue {
            InvalidParameterValue(.conflictWithNSRecord)
        }
        
        /// DNS 记录内容错误。
        public static var invalidDNSContent: InvalidParameterValue {
            InvalidParameterValue(.invalidDNSContent)
        }
        
        /// DNS 记录名称错误。
        public static var invalidDNSName: InvalidParameterValue {
            InvalidParameterValue(.invalidDNSName)
        }
        
        public static var invalidDomainStatus: InvalidParameterValue {
            InvalidParameterValue(.invalidDomainStatus)
        }
        
        /// DNS 代理域名错误。
        public static var invalidProxyName: InvalidParameterValue {
            InvalidParameterValue(.invalidProxyName)
        }
        
        /// DNS 代理域名源站错误。
        public static var invalidProxyOrigin: InvalidParameterValue {
            InvalidParameterValue(.invalidProxyOrigin)
        }
        
        /// 记录已存在。
        public static var recordAlreadyExists: InvalidParameterValue {
            InvalidParameterValue(.recordAlreadyExists)
        }
        
        /// 记录不允许添加。
        public static var recordNotAllowed: InvalidParameterValue {
            InvalidParameterValue(.recordNotAllowed)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCTeoError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCTeoError.InvalidParameterValue, rhs: TCTeoError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTeoError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTeoError.InvalidParameterValue {
    public func toTeoError() -> TCTeoError {
        guard let code = TCTeoError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTeoError(code, context: self.context)
    }
}