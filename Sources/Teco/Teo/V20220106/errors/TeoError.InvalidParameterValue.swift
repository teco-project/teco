//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTeoError {
    public struct InvalidParameterValue: TCTeoErrorType {
        enum Code: String {
            case conflictRecord = "InvalidParameterValue.ConflictRecord"
            case conflictWithDNSSEC = "InvalidParameterValue.ConflictWithDNSSEC"
            case conflictWithLBRecord = "InvalidParameterValue.ConflictWithLBRecord"
            case conflictWithNSRecord = "InvalidParameterValue.ConflictWithNSRecord"
            case invalidDNSContent = "InvalidParameterValue.InvalidDNSContent"
            case invalidDNSName = "InvalidParameterValue.InvalidDNSName"
            case invalidProxyName = "InvalidParameterValue.InvalidProxyName"
            case invalidProxyOrigin = "InvalidParameterValue.InvalidProxyOrigin"
            case invalidSRVName = "InvalidParameterValue.InvalidSRVName"
            case recordAlreadyExists = "InvalidParameterValue.RecordAlreadyExists"
            case recordNotAllowed = "InvalidParameterValue.RecordNotAllowed"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 与已经添加的记录冲突。
        public static var conflictRecord: InvalidParameterValue {
            InvalidParameterValue(.conflictRecord)
        }

        /// DNS 记录与 DNSSEC 功能冲突。
        public static var conflictWithDNSSEC: InvalidParameterValue {
            InvalidParameterValue(.conflictWithDNSSEC)
        }

        /// DNS 记录与 LB 记录冲突。
        public static var conflictWithLBRecord: InvalidParameterValue {
            InvalidParameterValue(.conflictWithLBRecord)
        }

        /// DNS 记录与 NS 记录冲突。
        public static var conflictWithNSRecord: InvalidParameterValue {
            InvalidParameterValue(.conflictWithNSRecord)
        }

        /// DNS 记录内容错误。
        public static var invalidDNSContent: InvalidParameterValue {
            InvalidParameterValue(.invalidDNSContent)
        }

        /// DNS 记录名称错误。
        public static var invalidDNSName: InvalidParameterValue {
            InvalidParameterValue(.invalidDNSName)
        }

        /// DNS 代理域名错误。
        public static var invalidProxyName: InvalidParameterValue {
            InvalidParameterValue(.invalidProxyName)
        }

        /// DNS 代理域名源站错误。
        public static var invalidProxyOrigin: InvalidParameterValue {
            InvalidParameterValue(.invalidProxyOrigin)
        }

        /// SRV 记录名称错误。
        public static var invalidSRVName: InvalidParameterValue {
            InvalidParameterValue(.invalidSRVName)
        }

        /// 记录已存在。
        public static var recordAlreadyExists: InvalidParameterValue {
            InvalidParameterValue(.recordAlreadyExists)
        }

        /// 记录不允许添加。
        public static var recordNotAllowed: InvalidParameterValue {
            InvalidParameterValue(.recordNotAllowed)
        }

        public func asTeoError() -> TCTeoError {
            let code: TCTeoError.Code
            switch self.error {
            case .conflictRecord:
                code = .invalidParameterValue_ConflictRecord
            case .conflictWithDNSSEC:
                code = .invalidParameterValue_ConflictWithDNSSEC
            case .conflictWithLBRecord:
                code = .invalidParameterValue_ConflictWithLBRecord
            case .conflictWithNSRecord:
                code = .invalidParameterValue_ConflictWithNSRecord
            case .invalidDNSContent:
                code = .invalidParameterValue_InvalidDNSContent
            case .invalidDNSName:
                code = .invalidParameterValue_InvalidDNSName
            case .invalidProxyName:
                code = .invalidParameterValue_InvalidProxyName
            case .invalidProxyOrigin:
                code = .invalidParameterValue_InvalidProxyOrigin
            case .invalidSRVName:
                code = .invalidParameterValue_InvalidSRVName
            case .recordAlreadyExists:
                code = .invalidParameterValue_RecordAlreadyExists
            case .recordNotAllowed:
                code = .invalidParameterValue_RecordNotAllowed
            }
            return TCTeoError(code, context: self.context)
        }
    }
}
