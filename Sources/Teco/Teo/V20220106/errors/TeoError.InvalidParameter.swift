//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTeoError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case actionInProgress = "InvalidParameter.ActionInProgress"
            case domainNotFound = "InvalidParameter.DomainNotFound"
            case invalidCacheOnlyOnSwitch = "InvalidParameter.InvalidCacheOnlyOnSwitch"
            case invalidCertInfo = "InvalidParameter.InvalidCertInfo"
            case invalidClientIpHeaderName = "InvalidParameter.InvalidClientIpHeaderName"
            case invalidDynamicRoutineBilling = "InvalidParameter.InvalidDynamicRoutineBilling"
            case invalidFilterName = "InvalidParameter.InvalidFilterName"
            case invalidForceRedirectType = "InvalidParameter.InvalidForceRedirectType"
            case invalidOrigin = "InvalidParameter.InvalidOrigin"
            case invalidPostMaxSizeBilling = "InvalidParameter.InvalidPostMaxSizeBilling"
            case invalidPostSizeValue = "InvalidParameter.InvalidPostSizeValue"
            case invalidRedirectUrlCapture = "InvalidParameter.InvalidRedirectUrlCapture"
            case invalidRequestHeaderName = "InvalidParameter.InvalidRequestHeaderName"
            case invalidRequestHeaderValue = "InvalidParameter.InvalidRequestHeaderValue"
            case invalidResourceIdBilling = "InvalidParameter.InvalidResourceIdBilling"
            case invalidResponseHeaderValue = "InvalidParameter.InvalidResponseHeaderValue"
            case invalidRuleEngineAction = "InvalidParameter.InvalidRuleEngineAction"
            case invalidRuleEngineTarget = "InvalidParameter.InvalidRuleEngineTarget"
            case invalidRuleEngineTargetsExtension = "InvalidParameter.InvalidRuleEngineTargetsExtension"
            case invalidUrlRedirectUrl = "InvalidParameter.InvalidUrlRedirectUrl"
            case invalidWebSocketTimeout = "InvalidParameter.InvalidWebSocketTimeout"
            case parameterError = "InvalidParameter.ParameterError"
            case security = "InvalidParameter.Security"
            case settingInvalidParam = "InvalidParameter.SettingInvalidParam"
            case target = "InvalidParameter.Target"
            case taskNotGenerated = "InvalidParameter.TaskNotGenerated"
            case uploadUrl = "InvalidParameter.UploadUrl"
            case zoneNotFound = "InvalidParameter.ZoneNotFound"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 操作频繁，请稍后重试。
        public static var actionInProgress: InvalidParameter {
            InvalidParameter(.actionInProgress)
        }
        
        /// 域名不存在或不属于该账号。
        public static var domainNotFound: InvalidParameter {
            InvalidParameter(.domainNotFound)
        }
        
        /// 无效的节点缓存。
        public static var invalidCacheOnlyOnSwitch: InvalidParameter {
            InvalidParameter(.invalidCacheOnlyOnSwitch)
        }
        
        /// 证书信息错误。
        public static var invalidCertInfo: InvalidParameter {
            InvalidParameter(.invalidCertInfo)
        }
        
        /// 无效的客户端IP请求头。
        public static var invalidClientIpHeaderName: InvalidParameter {
            InvalidParameter(.invalidClientIpHeaderName)
        }
        
        public static var invalidDynamicRoutineBilling: InvalidParameter {
            InvalidParameter(.invalidDynamicRoutineBilling)
        }
        
        /// 不合法的过滤字段。
        public static var invalidFilterName: InvalidParameter {
            InvalidParameter(.invalidFilterName)
        }
        
        /// 无效的强制HTTPS跳转。
        public static var invalidForceRedirectType: InvalidParameter {
            InvalidParameter(.invalidForceRedirectType)
        }
        
        /// 无效的源站。
        public static var invalidOrigin: InvalidParameter {
            InvalidParameter(.invalidOrigin)
        }
        
        public static var invalidPostMaxSizeBilling: InvalidParameter {
            InvalidParameter(.invalidPostMaxSizeBilling)
        }
        
        /// 无效的最大上传大小。
        public static var invalidPostSizeValue: InvalidParameter {
            InvalidParameter(.invalidPostSizeValue)
        }
        
        /// 无效的URL重写。
        public static var invalidRedirectUrlCapture: InvalidParameter {
            InvalidParameter(.invalidRedirectUrlCapture)
        }
        
        /// 无效的请求头header。
        public static var invalidRequestHeaderName: InvalidParameter {
            InvalidParameter(.invalidRequestHeaderName)
        }
        
        /// 无效的请求头header。
        public static var invalidRequestHeaderValue: InvalidParameter {
            InvalidParameter(.invalidRequestHeaderValue)
        }
        
        public static var invalidResourceIdBilling: InvalidParameter {
            InvalidParameter(.invalidResourceIdBilling)
        }
        
        /// 无效的响应头header。
        public static var invalidResponseHeaderValue: InvalidParameter {
            InvalidParameter(.invalidResponseHeaderValue)
        }
        
        /// 无效的规则引擎操作。
        public static var invalidRuleEngineAction: InvalidParameter {
            InvalidParameter(.invalidRuleEngineAction)
        }
        
        /// 无效的规则引擎条件。
        public static var invalidRuleEngineTarget: InvalidParameter {
            InvalidParameter(.invalidRuleEngineTarget)
        }
        
        /// 无效的规则引擎文件后缀条件。
        public static var invalidRuleEngineTargetsExtension: InvalidParameter {
            InvalidParameter(.invalidRuleEngineTargetsExtension)
        }
        
        /// URL重写的目标URL无效。
        public static var invalidUrlRedirectUrl: InvalidParameter {
            InvalidParameter(.invalidUrlRedirectUrl)
        }
        
        /// 无效的WebSocket。
        public static var invalidWebSocketTimeout: InvalidParameter {
            InvalidParameter(.invalidWebSocketTimeout)
        }
        
        /// 参数错误。
        public static var parameterError: InvalidParameter {
            InvalidParameter(.parameterError)
        }
        
        /// 安全参数错误。
        public static var security: InvalidParameter {
            InvalidParameter(.security)
        }
        
        /// 域名配置错误。
        public static var settingInvalidParam: InvalidParameter {
            InvalidParameter(.settingInvalidParam)
        }
        
        /// 资源存在错误。
        public static var target: InvalidParameter {
            InvalidParameter(.target)
        }
        
        /// 任务无法生成。
        public static var taskNotGenerated: InvalidParameter {
            InvalidParameter(.taskNotGenerated)
        }
        
        /// 文件上传链接存在问题。
        public static var uploadUrl: InvalidParameter {
            InvalidParameter(.uploadUrl)
        }
        
        /// 站点不存在。
        public static var zoneNotFound: InvalidParameter {
            InvalidParameter(.zoneNotFound)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
    }
}

extension TCTeoError.InvalidParameter: Equatable {
    public static func == (lhs: TCTeoError.InvalidParameter, rhs: TCTeoError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTeoError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTeoError.InvalidParameter {
    public func toTeoError() -> TCTeoError {
        guard let code = TCTeoError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTeoError(code, context: self.context)
    }
}