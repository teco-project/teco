//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Teo {
    /// DescribeWebManagedRulesAttackEvents请求参数结构体
    public struct DescribeWebManagedRulesAttackEventsRequest: TCRequestModel {
        /// 开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// 条数
        public let pageSize: Int64

        /// 当前页
        public let pageNo: Int64

        /// ddos策略组id列表
        public let policyIds: [Int64]?

        /// 站点集合
        public let zoneIds: [String]?

        /// 子域名列表
        public let domains: [String]?

        /// 选填{Y、N},默认为Y；Y：展示，N：不展示
        public let isShowDetail: String?

        public init(startTime: Date, endTime: Date, pageSize: Int64, pageNo: Int64, policyIds: [Int64]? = nil, zoneIds: [String]? = nil, domains: [String]? = nil, isShowDetail: String? = nil) {
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.pageSize = pageSize
            self.pageNo = pageNo
            self.policyIds = policyIds
            self.zoneIds = zoneIds
            self.domains = domains
            self.isShowDetail = isShowDetail
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case pageSize = "PageSize"
            case pageNo = "PageNo"
            case policyIds = "PolicyIds"
            case zoneIds = "ZoneIds"
            case domains = "Domains"
            case isShowDetail = "IsShowDetail"
        }
    }

    /// DescribeWebManagedRulesAttackEvents返回参数结构体
    public struct DescribeWebManagedRulesAttackEventsResponse: TCResponseModel {
        /// Web攻击事件数据
        public let data: WebEventData

        /// 状态，1:失败，0:成功
        public let status: Int64

        /// 返回数据
        public let msg: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case status = "Status"
            case msg = "Msg"
            case requestId = "RequestId"
        }
    }

    /// 查询Web托管攻击事件
    @inlinable
    public func describeWebManagedRulesAttackEvents(_ input: DescribeWebManagedRulesAttackEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWebManagedRulesAttackEventsResponse> {
        self.client.execute(action: "DescribeWebManagedRulesAttackEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询Web托管攻击事件
    @inlinable
    public func describeWebManagedRulesAttackEvents(_ input: DescribeWebManagedRulesAttackEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWebManagedRulesAttackEventsResponse {
        try await self.client.execute(action: "DescribeWebManagedRulesAttackEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询Web托管攻击事件
    @inlinable
    public func describeWebManagedRulesAttackEvents(startTime: Date, endTime: Date, pageSize: Int64, pageNo: Int64, policyIds: [Int64]? = nil, zoneIds: [String]? = nil, domains: [String]? = nil, isShowDetail: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWebManagedRulesAttackEventsResponse> {
        self.describeWebManagedRulesAttackEvents(.init(startTime: startTime, endTime: endTime, pageSize: pageSize, pageNo: pageNo, policyIds: policyIds, zoneIds: zoneIds, domains: domains, isShowDetail: isShowDetail), region: region, logger: logger, on: eventLoop)
    }

    /// 查询Web托管攻击事件
    @inlinable
    public func describeWebManagedRulesAttackEvents(startTime: Date, endTime: Date, pageSize: Int64, pageNo: Int64, policyIds: [Int64]? = nil, zoneIds: [String]? = nil, domains: [String]? = nil, isShowDetail: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWebManagedRulesAttackEventsResponse {
        try await self.describeWebManagedRulesAttackEvents(.init(startTime: startTime, endTime: endTime, pageSize: pageSize, pageNo: pageNo, policyIds: policyIds, zoneIds: zoneIds, domains: domains, isShowDetail: isShowDetail), region: region, logger: logger, on: eventLoop)
    }
}
