//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Teo {
    /// CreateApplicationProxyRules请求参数结构体
    public struct CreateApplicationProxyRulesRequest: TCRequestModel {
        /// 站点ID
        public let zoneId: String

        /// 代理ID
        public let proxyId: String

        /// 规则列表
        public let rule: [ApplicationProxyRule]

        public init(zoneId: String, proxyId: String, rule: [ApplicationProxyRule]) {
            self.zoneId = zoneId
            self.proxyId = proxyId
            self.rule = rule
        }

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case proxyId = "ProxyId"
            case rule = "Rule"
        }
    }

    /// CreateApplicationProxyRules返回参数结构体
    public struct CreateApplicationProxyRulesResponse: TCResponseModel {
        /// 新增的规则ID数组
        public let ruleId: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case requestId = "RequestId"
        }
    }

    /// 批量创建应用代理规则
    @inlinable
    public func createApplicationProxyRules(_ input: CreateApplicationProxyRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApplicationProxyRulesResponse> {
        self.client.execute(action: "CreateApplicationProxyRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量创建应用代理规则
    @inlinable
    public func createApplicationProxyRules(_ input: CreateApplicationProxyRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApplicationProxyRulesResponse {
        try await self.client.execute(action: "CreateApplicationProxyRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量创建应用代理规则
    @inlinable
    public func createApplicationProxyRules(zoneId: String, proxyId: String, rule: [ApplicationProxyRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApplicationProxyRulesResponse> {
        self.createApplicationProxyRules(.init(zoneId: zoneId, proxyId: proxyId, rule: rule), region: region, logger: logger, on: eventLoop)
    }

    /// 批量创建应用代理规则
    @inlinable
    public func createApplicationProxyRules(zoneId: String, proxyId: String, rule: [ApplicationProxyRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApplicationProxyRulesResponse {
        try await self.createApplicationProxyRules(.init(zoneId: zoneId, proxyId: proxyId, rule: rule), region: region, logger: logger, on: eventLoop)
    }
}
