//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Teo {
    /// DescribeWebManagedRulesData请求参数结构体
    public struct DescribeWebManagedRulesDataRequest: TCRequestModel {
        /// 开始时间，RFC3339格式。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 结束时间，RFC3339格式。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// 统计指标列表，取值有：
        /// <li>waf_interceptNum ：waf拦截次数 。</li>
        public let metricNames: [String]

        /// 站点id列表，不填默认选择全部站点。
        public let zoneIds: [String]?

        /// 子域名列表，不填默认选择子域名。
        public let domains: [String]?

        /// 该字段已废弃，请勿传。
        public let protocolType: String?

        /// 该字段已废弃，请勿传。
        public let attackType: String?

        /// 查询时间粒度，取值有：
        /// <li>min ：1分钟 ；</li>
        /// <li>5min ：5分钟 ；</li>
        /// <li>hour ：1小时 ；</li>
        /// <li>day ：1天 。</li>
        public let interval: String?

        /// 筛选条件，取值有：
        /// <li>action ：执行动作 。</li>
        public let queryCondition: [QueryCondition]?

        /// 数据归属地区，取值有：
        /// <li>overseas ：全球（除中国大陆地区）数据 ；</li>
        /// <li>mainland ：中国大陆地区数据 。</li>不填默认查询overseas。
        public let area: String?

        public init(startTime: Date, endTime: Date, metricNames: [String], zoneIds: [String]? = nil, domains: [String]? = nil, protocolType: String? = nil, attackType: String? = nil, interval: String? = nil, queryCondition: [QueryCondition]? = nil, area: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.metricNames = metricNames
            self.zoneIds = zoneIds
            self.domains = domains
            self.protocolType = protocolType
            self.attackType = attackType
            self.interval = interval
            self.queryCondition = queryCondition
            self.area = area
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case metricNames = "MetricNames"
            case zoneIds = "ZoneIds"
            case domains = "Domains"
            case protocolType = "ProtocolType"
            case attackType = "AttackType"
            case interval = "Interval"
            case queryCondition = "QueryCondition"
            case area = "Area"
        }
    }

    /// DescribeWebManagedRulesData返回参数结构体
    public struct DescribeWebManagedRulesDataResponse: TCResponseModel {
        /// Web攻击日志实体。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [SecEntry]?

        /// 请求响应状态，取值有：
        /// <li>1 ：失败 ；</li>
        /// <li>0 ：成功 。</li>
        public let status: Int64

        /// 请求响应消息。
        public let msg: String

        /// 查询时间粒度，取值有：
        /// <li>min ：1分钟 ；</li>
        /// <li>5min ：5分钟 ；</li>
        /// <li>hour ：1小时 ；</li>
        /// <li>day ：1天 。</li>
        public let interval: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case status = "Status"
            case msg = "Msg"
            case interval = "Interval"
            case requestId = "RequestId"
        }
    }

    /// 查询waf攻击时序数据
    @inlinable
    public func describeWebManagedRulesData(_ input: DescribeWebManagedRulesDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWebManagedRulesDataResponse> {
        self.client.execute(action: "DescribeWebManagedRulesData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询waf攻击时序数据
    @inlinable
    public func describeWebManagedRulesData(_ input: DescribeWebManagedRulesDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWebManagedRulesDataResponse {
        try await self.client.execute(action: "DescribeWebManagedRulesData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询waf攻击时序数据
    @inlinable
    public func describeWebManagedRulesData(startTime: Date, endTime: Date, metricNames: [String], zoneIds: [String]? = nil, domains: [String]? = nil, protocolType: String? = nil, attackType: String? = nil, interval: String? = nil, queryCondition: [QueryCondition]? = nil, area: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWebManagedRulesDataResponse> {
        self.describeWebManagedRulesData(DescribeWebManagedRulesDataRequest(startTime: startTime, endTime: endTime, metricNames: metricNames, zoneIds: zoneIds, domains: domains, protocolType: protocolType, attackType: attackType, interval: interval, queryCondition: queryCondition, area: area), logger: logger, on: eventLoop)
    }

    /// 查询waf攻击时序数据
    @inlinable
    public func describeWebManagedRulesData(startTime: Date, endTime: Date, metricNames: [String], zoneIds: [String]? = nil, domains: [String]? = nil, protocolType: String? = nil, attackType: String? = nil, interval: String? = nil, queryCondition: [QueryCondition]? = nil, area: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWebManagedRulesDataResponse {
        try await self.describeWebManagedRulesData(DescribeWebManagedRulesDataRequest(startTime: startTime, endTime: endTime, metricNames: metricNames, zoneIds: zoneIds, domains: domains, protocolType: protocolType, attackType: attackType, interval: interval, queryCondition: queryCondition, area: area), logger: logger, on: eventLoop)
    }
}
