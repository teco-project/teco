//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Teo {
    /// 导入 DNS 记录
    ///
    /// 导入 DNS 记录
    @inlinable
    public func importDnsRecords(_ input: ImportDnsRecordsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ImportDnsRecordsResponse > {
        self.client.execute(action: "ImportDnsRecords", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 导入 DNS 记录
    ///
    /// 导入 DNS 记录
    @inlinable
    public func importDnsRecords(_ input: ImportDnsRecordsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ImportDnsRecordsResponse {
        try await self.client.execute(action: "ImportDnsRecords", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ImportDnsRecords请求参数结构体
    public struct ImportDnsRecordsRequest: TCRequestModel {
        /// 站点 ID
        public let zoneId: String
        
        /// 文件内容
        public let file: String
        
        public init (zoneId: String, file: String) {
            self.zoneId = zoneId
            self.file = file
        }
        
        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case file = "File"
        }
    }
    
    /// ImportDnsRecords返回参数结构体
    public struct ImportDnsRecordsResponse: TCResponseModel {
        /// 记录 ID
        public let ids: [String]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case ids = "Ids"
            case requestId = "RequestId"
        }
    }
}