//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Teo {
    /// 创建站点
    ///
    /// 用于用户接入新的站点
    @inlinable
    public func createZone(_ input: CreateZoneRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateZoneResponse > {
        self.client.execute(action: "CreateZone", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建站点
    ///
    /// 用于用户接入新的站点
    @inlinable
    public func createZone(_ input: CreateZoneRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateZoneResponse {
        try await self.client.execute(action: "CreateZone", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateZone请求参数结构体
    public struct CreateZoneRequest: TCRequestModel {
        /// 站点名字
        public let name: String
        
        /// 接入方式，默认full
        /// - full NS接入
        /// - partial CNAME接入
        public let type: String?
        
        /// 是否跳过站点历史解析记录扫描
        public let jumpStart: Bool?
        
        /// 资源标签
        public let tags: [Tag]?
        
        public init (name: String, type: String?, jumpStart: Bool?, tags: [Tag]?) {
            self.name = name
            self.type = type
            self.jumpStart = jumpStart
            self.tags = tags
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case jumpStart = "JumpStart"
            case tags = "Tags"
        }
    }
    
    /// CreateZone返回参数结构体
    public struct CreateZoneResponse: TCResponseModel {
        /// 站点ID
        public let id: String
        
        /// 站点名称
        public let name: String
        
        /// 站点接入方式
        public let type: String
        
        /// 站点状态
        /// - pending 未切换NS
        /// - active NS 已切换到分配的 NS
        /// - moved NS 从腾讯云切走
        public let status: String
        
        /// 当前使用的 NS 列表
        public let originalNameServers: [String]
        
        /// 给用户分配的 NS 列表
        public let nameServers: [String]
        
        /// 站点创建时间
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let createdOn: Date
        
        /// 站点更新时间
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let modifiedOn: Date
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case type = "Type"
            case status = "Status"
            case originalNameServers = "OriginalNameServers"
            case nameServers = "NameServers"
            case createdOn = "CreatedOn"
            case modifiedOn = "ModifiedOn"
            case requestId = "RequestId"
        }
    }
}