//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Teo {
    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7Logs(_ input: DownloadL7LogsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DownloadL7LogsResponse > {
        self.client.execute(action: "DownloadL7Logs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7Logs(_ input: DownloadL7LogsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DownloadL7LogsResponse {
        try await self.client.execute(action: "DownloadL7Logs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DownloadL7Logs请求参数结构体
    public struct DownloadL7LogsRequest: TCRequestModel {
        /// 起始时间(需严格按照RFC3339标准传参)
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let startTime: Date
        
        /// 结束时间(需严格按照RFC3339标准传参)
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let endTime: Date
        
        /// 每页展示条数
        public let pageSize: Int64
        
        /// 当前页
        public let pageNo: Int64
        
        /// 站点名集合
        public let zones: [String]?
        
        /// 子域名集合
        public let domains: [String]?
        
        public init (startTime: Date, endTime: Date, pageSize: Int64, pageNo: Int64, zones: [String]?, domains: [String]?) {
            self.startTime = startTime
            self.endTime = endTime
            self.pageSize = pageSize
            self.pageNo = pageNo
            self.zones = zones
            self.domains = domains
        }
        
        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case pageSize = "PageSize"
            case pageNo = "PageNo"
            case zones = "Zones"
            case domains = "Domains"
        }
    }
    
    /// DownloadL7Logs返回参数结构体
    public struct DownloadL7LogsResponse: TCResponseModel {
        /// 七层离线日志data
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [L7OfflineLog]?
        
        /// 页面大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageSize: Int64?
        
        /// 页号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageNo: Int64?
        
        /// 总页数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pages: Int64?
        
        /// 总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalSize: Int64?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case pageSize = "PageSize"
            case pageNo = "PageNo"
            case pages = "Pages"
            case totalSize = "TotalSize"
            case requestId = "RequestId"
        }
    }
}