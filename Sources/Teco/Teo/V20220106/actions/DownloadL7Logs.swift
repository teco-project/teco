//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers
import TecoPaginationHelpers

extension Teo {
    /// DownloadL7Logs请求参数结构体
    public struct DownloadL7LogsRequest: TCPaginatedRequest {
        /// 起始时间(需严格按照RFC3339标准传参)
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 结束时间(需严格按照RFC3339标准传参)
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// 每页展示条数
        public let pageSize: Int64

        /// 当前页
        public let pageNo: Int64

        /// 站点名集合
        public let zones: [String]?

        /// 子域名集合
        public let domains: [String]?

        public init(startTime: Date, endTime: Date, pageSize: Int64, pageNo: Int64, zones: [String]? = nil, domains: [String]? = nil) {
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.pageSize = pageSize
            self.pageNo = pageNo
            self.zones = zones
            self.domains = domains
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case pageSize = "PageSize"
            case pageNo = "PageNo"
            case zones = "Zones"
            case domains = "Domains"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DownloadL7LogsResponse) -> DownloadL7LogsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DownloadL7LogsRequest(startTime: self.startTime, endTime: self.endTime, pageSize: self.pageSize, pageNo: self.pageNo + 1, zones: self.zones, domains: self.domains)
        }
    }

    /// DownloadL7Logs返回参数结构体
    public struct DownloadL7LogsResponse: TCPaginatedResponse {
        /// 七层离线日志data
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [L7OfflineLog]?

        /// 页面大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageSize: Int64?

        /// 页号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageNo: Int64?

        /// 总页数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pages: Int64?

        /// 总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalSize: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case pageSize = "PageSize"
            case pageNo = "PageNo"
            case pages = "Pages"
            case totalSize = "TotalSize"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [L7OfflineLog] {
            self.data ?? []
        }
    }

    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7Logs(_ input: DownloadL7LogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DownloadL7LogsResponse> {
        self.client.execute(action: "DownloadL7Logs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7Logs(_ input: DownloadL7LogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DownloadL7LogsResponse {
        try await self.client.execute(action: "DownloadL7Logs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7Logs(startTime: Date, endTime: Date, pageSize: Int64, pageNo: Int64, zones: [String]? = nil, domains: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DownloadL7LogsResponse> {
        let input = DownloadL7LogsRequest(startTime: startTime, endTime: endTime, pageSize: pageSize, pageNo: pageNo, zones: zones, domains: domains)
        return self.client.execute(action: "DownloadL7Logs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7Logs(startTime: Date, endTime: Date, pageSize: Int64, pageNo: Int64, zones: [String]? = nil, domains: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DownloadL7LogsResponse {
        let input = DownloadL7LogsRequest(startTime: startTime, endTime: endTime, pageSize: pageSize, pageNo: pageNo, zones: zones, domains: domains)
        return try await self.client.execute(action: "DownloadL7Logs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7LogsPaginated(_ input: DownloadL7LogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [L7OfflineLog])> {
        self.client.paginate(input: input, region: region, command: self.downloadL7Logs, logger: logger, on: eventLoop)
    }

    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable @discardableResult
    public func downloadL7LogsPaginated(_ input: DownloadL7LogsRequest, region: TCRegion? = nil, onResponse: @escaping (DownloadL7LogsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.downloadL7Logs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 七层离线日志下载
    ///
    /// 查询七层离线日志
    @inlinable
    public func downloadL7LogsPaginator(_ input: DownloadL7LogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DownloadL7LogsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.downloadL7Logs, logger: logger, on: eventLoop)
    }
}
