//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Teo {
    /// 失败原因
    public struct FailReason: TCOutputModel {
        /// 失败原因
        public let reason: String

        /// 处理失败的资源列表。
        /// 该列表元素来源于输入参数中的Targets，因此格式和入参中的Targets保持一致
        public let targets: [String]

        enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case targets = "Targets"
        }
    }

    /// 刷新预热附带的头部信息
    public struct Header: TCInputModel {
        /// HTTP头部
        public let name: String

        /// HTTP头部值
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 计费资源
    public struct Resource: TCOutputModel {
        /// 资源 ID。
        public let id: String

        /// 付费模式，取值有：
        /// <li>0：后付费。</li>
        public let payMode: Int64

        /// 创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 生效时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var enableTime: Date

        /// 失效时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var expireTime: Date

        /// 套餐状态，取值有：
        /// <li>normal：正常；</li>
        /// <li>isolated：隔离；</li>
        /// <li>destroyed：销毁。</li>
        public let status: String

        /// 询价参数。
        public let sv: [Sv]

        /// 是否自动续费，取值有：
        /// <li>0：默认状态；</li>
        /// <li>1：自动续费；</li>
        /// <li>2：不自动续费。</li>
        public let autoRenewFlag: Int64

        /// 套餐关联资源 ID。
        public let planId: String

        /// 地域，取值有：
        /// <li>mainland：国内；</li>
        /// <li>overseas：海外。</li>
        public let area: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case payMode = "PayMode"
            case createTime = "CreateTime"
            case enableTime = "EnableTime"
            case expireTime = "ExpireTime"
            case status = "Status"
            case sv = "Sv"
            case autoRenewFlag = "AutoRenewFlag"
            case planId = "PlanId"
            case area = "Area"
        }
    }

    /// 询价参数
    public struct Sv: TCOutputModel {
        /// 询价参数键。
        public let key: String

        /// 询价参数值。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 标签配置
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagKey: String?

        /// 标签值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagValue: String?

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 内容管理任务结果
    public struct Task: TCOutputModel {
        /// 任务ID
        public let jobId: String

        /// 状态
        public let status: String

        /// 资源
        public let target: String

        /// 任务类型
        public let type: String

        /// 任务创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 任务完成时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case status = "Status"
            case target = "Target"
            case type = "Type"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 站点信息
    public struct Zone: TCOutputModel {
        /// 站点ID。
        public let id: String

        /// 站点名称。
        public let name: String

        /// 站点当前使用的 NS 列表。
        public let originalNameServers: [String]

        /// 腾讯云分配的 NS 列表。
        public let nameServers: [String]

        /// 站点状态，取值有：
        /// <li> active：NS 已切换； </li>
        /// <li> pending：NS 未切换；</li>
        /// <li> moved：NS 已切走；</li>
        /// <li> deactivated：被封禁。 </li>
        public let status: String

        /// 站点接入方式，取值有
        /// <li> full：NS 接入； </li>
        /// <li> partial：CNAME 接入。</li>
        public let type: String

        /// 站点是否关闭。
        public let paused: Bool

        /// 是否开启cname加速，取值有：
        /// <li> enabled：开启；</li>
        /// <li> disabled：关闭。</li>
        public let cnameSpeedUp: String

        /// cname 接入状态，取值有：
        /// <li> finished：站点已验证；</li>
        /// <li> pending：站点验证中。</li>
        public let cnameStatus: String

        /// 资源标签列表。
        public let tags: [Tag]

        /// 计费资源列表。
        public let resources: [Resource]

        /// 站点创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdOn: Date

        /// 站点修改时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifiedOn: Date

        /// 站点接入地域，取值为：
        /// <li> global：全球；</li>
        /// <li> mainland：中国大陆；</li>
        /// <li> overseas：境外区域。</li>
        public let area: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case originalNameServers = "OriginalNameServers"
            case nameServers = "NameServers"
            case status = "Status"
            case type = "Type"
            case paused = "Paused"
            case cnameSpeedUp = "CnameSpeedUp"
            case cnameStatus = "CnameStatus"
            case tags = "Tags"
            case resources = "Resources"
            case createdOn = "CreatedOn"
            case modifiedOn = "ModifiedOn"
            case area = "Area"
        }
    }

    /// 站点查询过滤条件
    public struct ZoneFilter: TCInputModel {
        /// 过滤字段名，支持的列表如下：
        /// <li> name：站点名；</li>
        /// <li> status：站点状态；</li>
        /// <li> tagKey：标签键；</li>
        /// <li> tagValue: 标签值。</li>
        public let name: String

        /// 过滤字段值。
        public let values: [String]

        /// 是否启用模糊查询，仅支持过滤字段名为name。模糊查询时，Values长度最大为1。默认为false。
        public let fuzzy: Bool?

        public init(name: String, values: [String], fuzzy: Bool? = nil) {
            self.name = name
            self.values = values
            self.fuzzy = fuzzy
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case fuzzy = "Fuzzy"
        }
    }
}
