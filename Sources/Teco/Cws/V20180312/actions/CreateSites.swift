//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cws {
    /// CreateSites请求参数结构体
    public struct CreateSitesRequest: TCRequestModel {
        /// 站点的url列表
        public let urls: [String]

        /// 访问网站的客户端标识
        public let userAgent: String?

        public init(urls: [String], userAgent: String? = nil) {
            self.urls = urls
            self.userAgent = userAgent
        }

        enum CodingKeys: String, CodingKey {
            case urls = "Urls"
            case userAgent = "UserAgent"
        }
    }

    /// CreateSites返回参数结构体
    public struct CreateSitesResponse: TCResponseModel {
        /// 新增站点数。
        public let number: UInt64

        /// 站点数组
        public let sites: [MiniSite]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case number = "Number"
            case sites = "Sites"
            case requestId = "RequestId"
        }
    }

    /// 新增站点
    ///
    /// 本接口（CreateSites）用于新增一个或多个站点。
    @inlinable
    public func createSites(_ input: CreateSitesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSitesResponse> {
        self.client.execute(action: "CreateSites", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增站点
    ///
    /// 本接口（CreateSites）用于新增一个或多个站点。
    @inlinable
    public func createSites(_ input: CreateSitesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSitesResponse {
        try await self.client.execute(action: "CreateSites", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增站点
    ///
    /// 本接口（CreateSites）用于新增一个或多个站点。
    @inlinable
    public func createSites(urls: [String], userAgent: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSitesResponse> {
        self.createSites(.init(urls: urls, userAgent: userAgent), region: region, logger: logger, on: eventLoop)
    }

    /// 新增站点
    ///
    /// 本接口（CreateSites）用于新增一个或多个站点。
    @inlinable
    public func createSites(urls: [String], userAgent: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSitesResponse {
        try await self.createSites(.init(urls: urls, userAgent: userAgent), region: region, logger: logger, on: eventLoop)
    }
}
