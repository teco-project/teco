//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension Redis {
    /// 子账号信息
    public struct Account: TCOutputModel {
        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 账号名称（如果是主账号，名称为root）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accountName: String?

        /// 账号描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 读写策略：r-只读，w-只写，rw-读写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privilege: String?

        /// 路由策略：master-主节点，replication-从节点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let readonlyPolicy: [String]?

        /// 子账号状态：1-账号变更中，2-账号有效，-4-账号已删除
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case accountName = "AccountName"
            case remark = "Remark"
            case privilege = "Privilege"
            case readonlyPolicy = "ReadonlyPolicy"
            case status = "Status"
        }
    }

    /// 备份文件下载信息
    public struct BackupDownloadInfo: TCOutputModel {
        /// 备份文件名称
        public let fileName: String

        /// 备份文件大小，单位B，如果为0，表示无效
        public let fileSize: UInt64

        /// 备份文件外网下载地址（6小时）
        public let downloadUrl: String

        /// 备份文件内网下载地址（6小时）
        public let innerDownloadUrl: String

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case fileSize = "FileSize"
            case downloadUrl = "DownloadUrl"
            case innerDownloadUrl = "InnerDownloadUrl"
        }
    }

    /// 自定义的备份文件下载地址的 VPC 信息。
    public struct BackupLimitVpcItem: TCInputModel, TCOutputModel {
        /// 自定义下载备份文件的VPC 所属地域。
        public let region: String

        /// 自定义下载备份文件的 VPC 列表。
        public let vpcList: [String]

        public init(region: String, vpcList: [String]) {
            self.region = region
            self.vpcList = vpcList
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case vpcList = "VpcList"
        }
    }

    /// 大Key详情
    public struct BigKeyInfo: TCOutputModel {
        /// 所属的database
        public let db: Int64

        /// 大Key
        public let key: String

        /// 类型
        public let type: String

        /// 大小
        public let size: Int64

        /// 数据时间戳
        public let updatetime: Int64

        enum CodingKeys: String, CodingKey {
            case db = "DB"
            case key = "Key"
            case type = "Type"
            case size = "Size"
            case updatetime = "Updatetime"
        }
    }

    /// 大Key类型分布详情
    public struct BigKeyTypeInfo: TCOutputModel {
        /// 类型
        public let type: String

        /// 数量
        public let count: Int64

        /// 大小
        public let size: Int64

        /// 时间戳
        public let updatetime: Int64

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case count = "Count"
            case size = "Size"
            case updatetime = "Updatetime"
        }
    }

    /// 命令耗时
    public struct CommandTake: TCOutputModel {
        /// 命令
        public let cmd: String

        /// 耗时
        public let took: Int64

        enum CodingKeys: String, CodingKey {
            case cmd = "Cmd"
            case took = "Took"
        }
    }

    /// 延时分布详情
    public struct DelayDistribution: TCOutputModel {
        /// 分布阶梯，延时和Ladder值的对应关系：
        /// [0ms,1ms]: 1；
        /// [1ms,5ms]: 5；
        /// [5ms,10ms]: 10；
        /// [10ms,50ms]: 50；
        /// [50ms,200ms]: 200；
        /// [200ms,∞]: -1。
        public let ladder: Int64

        /// 延时处于当前分布阶梯的命令数量，个。
        public let size: Int64

        /// 修改时间。
        public let updatetime: Int64

        enum CodingKeys: String, CodingKey {
            case ladder = "Ladder"
            case size = "Size"
            case updatetime = "Updatetime"
        }
    }

    /// 详细DTS实例信息
    public struct DescribeInstanceDTSInstanceInfo: TCOutputModel {
        /// 地域ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: Int64?

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 仓库ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let setId: Int64?

        /// 可用区ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: Int64?

        /// 实例类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 实例访问地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case instanceId = "InstanceId"
            case setId = "SetId"
            case zoneId = "ZoneId"
            case type = "Type"
            case instanceName = "InstanceName"
            case vip = "Vip"
            case status = "Status"
        }
    }

    /// 复制组信息
    public struct Groups: TCOutputModel {
        /// 用户AppID
        public let appId: Int64

        /// 地域ID 。
        /// - 1：广州
        /// - 4：上海
        /// - 5：中国香港
        /// - 6：多伦多
        /// - 7：上海金融
        /// - 8：北京
        /// - 9：新加坡
        /// - 11：深圳金融
        /// - 15：美西（硅谷）
        /// - 16：成都
        /// - 17：德国
        /// - 18：韩国
        /// - 19：重庆
        /// - 21：印度
        /// - 22：美东（弗吉尼亚）
        /// - 23：泰国
        /// - 24：俄罗斯
        /// - 25：日本
        public let regionId: Int64

        /// 复制组 ID。
        public let groupId: String

        /// 复制组名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?

        /// 复制组状态。
        /// - 37：绑定复制组中。
        /// - 38：复制组重连中。
        /// - 51：解绑复制组中。
        /// - 52：复制组实例切主中。
        /// - 53：角色变更中。
        public let status: Int64

        /// 复制组数量。
        public let instanceCount: Int64

        /// 复制组中的实例信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instances: [Instances]?

        /// 备注信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case regionId = "RegionId"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case status = "Status"
            case instanceCount = "InstanceCount"
            case instances = "Instances"
            case remark = "Remark"
        }
    }

    /// 热Key详细信息
    public struct HotKeyInfo: TCOutputModel {
        /// 热Key
        public let key: String

        /// 类型
        public let type: String

        /// 数量
        public let count: Int64

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case type = "Type"
            case count = "Count"
        }
    }

    /// 安全组入站规则
    public struct Inbound: TCOutputModel {
        /// 策略，ACCEPT或者DROP。
        public let action: String

        /// 地址组id代表的地址集合。
        public let addressModule: String

        /// 来源Ip或Ip段，例如192.168.0.0/16。
        public let cidrIp: String

        /// 描述。
        public let desc: String

        /// 网络协议，支持udp、tcp等。
        public let ipProtocol: String

        /// 端口。
        public let portRange: String

        /// 服务组id代表的协议和端口集合。
        public let serviceModule: String

        /// 安全组id代表的地址集合。
        public let id: String

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case addressModule = "AddressModule"
            case cidrIp = "CidrIp"
            case desc = "Desc"
            case ipProtocol = "IpProtocol"
            case portRange = "PortRange"
            case serviceModule = "ServiceModule"
            case id = "Id"
        }
    }

    /// 实例节点类型
    public struct InstanceClusterNode: TCOutputModel {
        /// 节点名称
        public let name: String

        /// 实例运行时节点Id
        public let runId: String

        /// 集群角色：0-master；1-slave
        public let role: Int64

        /// 节点状态：0-readwrite, 1-read, 2-backup
        public let status: Int64

        /// 服务状态：0-down；1-on
        public let connected: Int64

        /// 节点创建时间
        public let createTime: String

        /// 节点下线时间
        public let downTime: String

        /// 节点slot分布
        public let slots: String

        /// 节点key分布
        public let keys: Int64

        /// 节点qps
        public let qps: Int64

        /// 节点qps倾斜度
        public let qpsSlope: Float

        /// 节点存储
        public let storage: Int64

        /// 节点存储倾斜度
        public let storageSlope: Float

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case runId = "RunId"
            case role = "Role"
            case status = "Status"
            case connected = "Connected"
            case createTime = "CreateTime"
            case downTime = "DownTime"
            case slots = "Slots"
            case keys = "Keys"
            case qps = "Qps"
            case qpsSlope = "QpsSlope"
            case storage = "Storage"
            case storageSlope = "StorageSlope"
        }
    }

    /// 实例分片列表信息
    public struct InstanceClusterShard: TCOutputModel {
        /// 分片节点名称
        public let shardName: String

        /// 分片节点Id
        public let shardId: String

        /// 角色
        public let role: Int64

        /// Key数量
        public let keys: Int64

        /// slot信息
        public let slots: String

        /// 使用容量
        public let storage: Int64

        /// 容量倾斜率
        public let storageSlope: Float

        /// 实例运行时节点Id
        public let runid: String

        /// 服务状态：0-down；1-on
        public let connected: Int64

        enum CodingKeys: String, CodingKey {
            case shardName = "ShardName"
            case shardId = "ShardId"
            case role = "Role"
            case keys = "Keys"
            case slots = "Slots"
            case storage = "Storage"
            case storageSlope = "StorageSlope"
            case runid = "Runid"
            case connected = "Connected"
        }
    }

    /// 实例枚举类型参数描述
    public struct InstanceEnumParam: TCOutputModel {
        /// 参数名
        public let paramName: String

        /// 参数类型：enum
        public let valueType: String

        /// 修改后是否需要重启：true，false
        public let needRestart: String

        /// 参数默认值
        public let defaultValue: String

        /// 当前运行参数值
        public let currentValue: String

        /// 参数说明
        public let tips: String

        /// 参数可取值
        public let enumValue: [String]

        /// 参数状态, 1: 修改中， 2：修改完成
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case valueType = "ValueType"
            case needRestart = "NeedRestart"
            case defaultValue = "DefaultValue"
            case currentValue = "CurrentValue"
            case tips = "Tips"
            case enumValue = "EnumValue"
            case status = "Status"
        }
    }

    /// 实例整型参数描述
    public struct InstanceIntegerParam: TCOutputModel {
        /// 参数名
        public let paramName: String

        /// 参数类型：integer
        public let valueType: String

        /// 修改后是否需要重启：true，false
        public let needRestart: String

        /// 参数默认值
        public let defaultValue: String

        /// 当前运行参数值
        public let currentValue: String

        /// 参数说明
        public let tips: String

        /// 参数最小值
        public let min: String

        /// 参数最大值
        public let max: String

        /// 参数状态, 1: 修改中， 2：修改完成
        public let status: Int64

        /// 参数单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unit: String?

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case valueType = "ValueType"
            case needRestart = "NeedRestart"
            case defaultValue = "DefaultValue"
            case currentValue = "CurrentValue"
            case tips = "Tips"
            case min = "Min"
            case max = "Max"
            case status = "Status"
            case unit = "Unit"
        }
    }

    /// 实例多选项类型参数描述
    public struct InstanceMultiParam: TCOutputModel {
        /// 参数名
        public let paramName: String

        /// 参数类型：multi
        public let valueType: String

        /// 修改后是否需要重启：true，false
        public let needRestart: String

        /// 参数默认值
        public let defaultValue: String

        /// 当前运行参数值
        public let currentValue: String

        /// 参数说明
        public let tips: String

        /// 参数说明
        public let enumValue: [String]

        /// 参数状态, 1: 修改中， 2：修改完成
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case valueType = "ValueType"
            case needRestart = "NeedRestart"
            case defaultValue = "DefaultValue"
            case currentValue = "CurrentValue"
            case tips = "Tips"
            case enumValue = "EnumValue"
            case status = "Status"
        }
    }

    /// 实例节点
    public struct InstanceNode: TCOutputModel {
        /// Id
        public let id: Int64

        /// 节点详细信息
        public let instanceClusterNode: [InstanceClusterNode]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case instanceClusterNode = "InstanceClusterNode"
        }
    }

    /// 实例参数
    public struct InstanceParam: TCInputModel {
        /// 设置参数的名称。例如timeout。当前支持自定义的参数，请参见<a href="https://cloud.tencent.com/document/product/239/49925">参数配置</a>。
        public let key: String

        /// 设置参数名称对应的运行值。例如timeout对应运行值可设置为120， 单位为秒（s）。指当客户端连接闲置时间达到120 s时，将关闭连接。更多参数取值信息，请参见<a href="https://cloud.tencent.com/document/product/239/49925">参数配置</a>。
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 实例参数修改历史
    public struct InstanceParamHistory: TCOutputModel {
        /// 参数名称
        public let paramName: String

        /// 修改前值
        public let preValue: String

        /// 修改后值
        public let newValue: String

        /// 状态：1-参数配置修改中；2-参数配置修改成功；3-参数配置修改失败
        public let status: Int64

        /// 修改时间
        public let modifyTime: String

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case preValue = "PreValue"
            case newValue = "NewValue"
            case status = "Status"
            case modifyTime = "ModifyTime"
        }
    }

    /// 代理慢查询详情
    public struct InstanceProxySlowlogDetail: TCOutputModel {
        /// 慢查询耗时（单位：毫秒）。
        public let duration: Int64

        /// 客户端地址。
        public let client: String

        /// 命令。
        public let command: String

        /// 详细命令行信息。
        public let commandLine: String

        /// 执行时间。
        public let executeTime: String

        enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case client = "Client"
            case command = "Command"
            case commandLine = "CommandLine"
            case executeTime = "ExecuteTime"
        }
    }

    /// 实例安全组信息
    public struct InstanceSecurityGroupDetail: TCOutputModel {
        /// 实例Id
        public let instanceId: String

        /// 安全组信息
        public let securityGroupDetails: [SecurityGroupDetail]

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case securityGroupDetails = "SecurityGroupDetails"
        }
    }

    /// 实例详细信息列表。
    public struct InstanceSet: TCOutputModel {
        /// 实例名称。
        public let instanceName: String

        /// 实例 ID。
        public let instanceId: String

        /// 用户的 AppID。
        public let appid: Int64

        /// 项目 ID。
        public let projectId: Int64

        /// 地域 ID。<ul><li>1：广州。</li><li>4：上海。</li><li>5：中国香港。</li><li>6：多伦多。</li> <li>7：上海金融。</li> <li>8：北京。</li> <li>9：新加坡。</li> <li>11：深圳金融。</li> <li>15：美西（硅谷）。</li><li>16：成都。</li><li>17：法兰克福。</li><li>18：首尔。</li><li>19：重庆。</li><li>21：孟买。</li><li>22：美东（弗吉尼亚）。</li><li>23：曼谷。</li><li>24：莫斯科。</li><li>25：东京。</li></ul>
        public let regionId: Int64

        /// 区域 ID。
        public let zoneId: Int64

        /// vpc网络 ID，例如75101。
        public let vpcId: Int64

        /// vpc网络下子网ID，如：46315。
        public let subnetId: Int64

        /// 实例当前状态。<ul><li>0：待初始化。</li><li>1：实例在流程中。</li><li>2：实例运行中。</li><li>-2：实例已隔离。</li><li>-3：实例待删除。</li></ul>
        public let status: Int64

        /// 实例 VIP。
        public let wanIp: String

        /// 实例端口号。
        public let port: Int64

        /// 实例创建时间。
        public let createtime: String

        /// 实例容量大小，单位：MB。
        public let size: Float

        /// 该字段已废弃。可使用云监控 API 接口 [GetMonitorData](https://cloud.tencent.com/document/product/248/31014) 获取实例已使用的内容容量。
        public let sizeUsed: Float

        /// 实例类型：<ul><li>1：Redis2.8内存版（集群架构）。</li><li>2：Redis2.8内存版（标准架构）。</li><li>3：CKV 3.2内存版(标准架构)。</li><li>4：CKV 3.2内存版(集群架构)。</li><li>5：Redis2.8内存版（单机）。</li></li><li>6：Redis4.0内存版（标准架构）。</li></li><li>7：Redis4.0内存版（集群架构）。</li></li><li>8：Redis5.0内存版（标准架构）。</li></li><li>9：Redis5.0内存版（集群架构）。</li></ul>
        public let type: Int64

        /// 实例是否设置自动续费标识。<ul><li>1：设置自动续费。</li><li>0：未设置自动续费。</li></ul>
        public let autoRenewFlag: Int64

        /// 实例到期时间。
        public let deadlineTime: String

        /// 引擎：社区版Redis、腾讯云CKV。
        public let engine: String

        /// 产品类型。<ul><li>standalone：标准版。</li><li>cluster ：集群版。</li></ul>
        public let productType: String

        /// vpc网络id，例如vpc-fk33jsf43kgv。
        public let uniqVpcId: String

        /// vpc网络下子网id，例如：subnet-fd3j6l35mm0。
        public let uniqSubnetId: String

        /// 计费模式。<ul><li>0：按量计费。</li><li>1：包年包月。</li></ul>
        public let billingMode: Int64

        /// 实例运行状态描述：如”实例运行中“。
        public let instanceTitle: String

        /// 计划下线时间。
        public let offlineTime: String

        /// 流程中的实例，返回子状态。
        public let subStatus: Int64

        /// 反亲和性标签。
        public let tags: [String]

        /// 实例节点信息。
        public let instanceNode: [InstanceNode]

        /// 分片大小。
        public let redisShardSize: Int64

        /// 分片数量。
        public let redisShardNum: Int64

        /// 副本数量。
        public let redisReplicasNum: Int64

        /// 计费 ID。
        public let priceId: Int64

        /// 隔离时间。
        public let closeTime: String

        /// 从节点读取权重。
        public let slaveReadWeight: Int64

        /// 实例关联的标签信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceTags: [InstanceTagInfo]?

        /// 项目名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectName: String?

        /// 是否为免密实例。<ul><li>true：免密实例。</li><li>false：非免密实例。</li></ul>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let noAuth: Bool?

        /// 客户端连接数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientLimit: Int64?

        /// DTS状态（内部参数，用户可忽略）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dtsStatus: Int64?

        /// 分片带宽上限，单位MB。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let netLimit: Int64?

        /// 免密实例标识（内部参数，用户可忽略）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let passwordFree: Int64?

        /// 内部参数，用户可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip6: String?

        /// 实例只读标识（内部参数，用户可忽略）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let readOnly: Int64?

        /// 内部参数，用户可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remainBandwidthDuration: String?

        /// Redis实例请忽略该参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let diskSize: Int64?

        /// 监控版本。<ul><li>1m：1分钟粒度监控。</li><li>5s：5秒粒度监控。</li></ul>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let monitorVersion: String?

        /// 客户端最大连接数可设置的最小值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientLimitMin: Int64?

        /// 客户端最大连接数可设置的最大值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientLimitMax: Int64?

        /// 实例的节点详细信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeSet: [RedisNodeInfo]?

        /// 实例所在的地域信息，比如ap-guangzhou。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 外网地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanAddress: String?

        /// 北极星服务地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polarisServer: String?

        /// 实例当前Proxy版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentProxyVersion: String?

        /// 实例当前Cache小版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentRedisVersion: String?

        /// 实例可升级Proxy版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upgradeProxyVersion: String?

        /// 实例可升级Cache小版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upgradeRedisVersion: String?

        enum CodingKeys: String, CodingKey {
            case instanceName = "InstanceName"
            case instanceId = "InstanceId"
            case appid = "Appid"
            case projectId = "ProjectId"
            case regionId = "RegionId"
            case zoneId = "ZoneId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case wanIp = "WanIp"
            case port = "Port"
            case createtime = "Createtime"
            case size = "Size"
            case sizeUsed = "SizeUsed"
            case type = "Type"
            case autoRenewFlag = "AutoRenewFlag"
            case deadlineTime = "DeadlineTime"
            case engine = "Engine"
            case productType = "ProductType"
            case uniqVpcId = "UniqVpcId"
            case uniqSubnetId = "UniqSubnetId"
            case billingMode = "BillingMode"
            case instanceTitle = "InstanceTitle"
            case offlineTime = "OfflineTime"
            case subStatus = "SubStatus"
            case tags = "Tags"
            case instanceNode = "InstanceNode"
            case redisShardSize = "RedisShardSize"
            case redisShardNum = "RedisShardNum"
            case redisReplicasNum = "RedisReplicasNum"
            case priceId = "PriceId"
            case closeTime = "CloseTime"
            case slaveReadWeight = "SlaveReadWeight"
            case instanceTags = "InstanceTags"
            case projectName = "ProjectName"
            case noAuth = "NoAuth"
            case clientLimit = "ClientLimit"
            case dtsStatus = "DtsStatus"
            case netLimit = "NetLimit"
            case passwordFree = "PasswordFree"
            case vip6 = "Vip6"
            case readOnly = "ReadOnly"
            case remainBandwidthDuration = "RemainBandwidthDuration"
            case diskSize = "DiskSize"
            case monitorVersion = "MonitorVersion"
            case clientLimitMin = "ClientLimitMin"
            case clientLimitMax = "ClientLimitMax"
            case nodeSet = "NodeSet"
            case region = "Region"
            case wanAddress = "WanAddress"
            case polarisServer = "PolarisServer"
            case currentProxyVersion = "CurrentProxyVersion"
            case currentRedisVersion = "CurrentRedisVersion"
            case upgradeProxyVersion = "UpgradeProxyVersion"
            case upgradeRedisVersion = "UpgradeRedisVersion"
        }
    }

    /// 慢查询详情
    public struct InstanceSlowlogDetail: TCOutputModel {
        /// 慢查询耗时
        public let duration: Int64

        /// 客户端地址
        public let client: String

        /// 命令
        public let command: String

        /// 详细命令行信息
        public let commandLine: String

        /// 执行时间
        public let executeTime: String

        /// 节点ID
        public let node: String

        enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case client = "Client"
            case command = "Command"
            case commandLine = "CommandLine"
            case executeTime = "ExecuteTime"
            case node = "Node"
        }
    }

    /// 实例标签信息
    public struct InstanceTagInfo: TCOutputModel {
        /// 标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 实例字符型参数描述
    public struct InstanceTextParam: TCOutputModel {
        /// 参数名
        public let paramName: String

        /// 参数类型：text
        public let valueType: String

        /// 修改后是否需要重启：true，false
        public let needRestart: String

        /// 参数默认值
        public let defaultValue: String

        /// 当前运行参数值
        public let currentValue: String

        /// 参数说明
        public let tips: String

        /// 参数可取值
        public let textValue: [String]

        /// 参数状态, 1: 修改中， 2：修改完成
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case valueType = "ValueType"
            case needRestart = "NeedRestart"
            case defaultValue = "DefaultValue"
            case currentValue = "CurrentValue"
            case tips = "Tips"
            case textValue = "TextValue"
            case status = "Status"
        }
    }

    /// 复制组实例
    public struct Instances: TCOutputModel {
        /// 用户AppID。
        public let appId: Int64

        /// 实例 ID。
        public let instanceId: String

        /// 实例名称。
        public let instanceName: String

        /// 地域ID。<ul><li>1：广州。</li><li>4：上海。</li><li> 5：香港。</li> <li> 6：多伦多。</li> <li> 7：上海金融。</li> <li> 8：北京。</li> <li> 9：新加坡。</li> <li> 11：深圳金融。</li> <li> 15：美西（硅谷）。</li> </ul>
        public let regionId: UInt64

        /// 区域 ID。
        public let zoneId: UInt64

        /// 副本数量。
        public let redisReplicasNum: UInt64

        /// 分片数量。
        public let redisShardNum: Int64

        /// 分片内存大小。
        public let redisShardSize: Int64

        /// 实例的磁盘大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let diskSize: Int64?

        /// 引擎：社区版Redis、腾讯云CKV。
        public let engine: String

        /// 实例读写权限。<ul><li>rw：可读写。</li><li>r：只读。</li></ul>
        public let role: String

        /// 实例 VIP 地址。
        public let vip: String

        /// 内部参数，用户可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip6: String?

        /// VPC 网络ID，如：75101。
        public let vpcID: Int64

        /// 实例端口。
        public let vPort: Int64

        /// 实例状态。<ul><li>0：待初始化。</li><li>1：流程中。</li><li>2：运行中。</li><li>-2：已隔离。</li><li>-3：待删除。</li></ul>
        public let status: Int64

        /// 仓库ID。
        public let grocerySysId: Int64

        /// 实例类型。<ul><li>1：Redis 2.8 内存版（集群架构）。</li><li>2：Redis 2.8 内存版（标准架构）。</li><li>3：CKV 3.2 内存版（标准架构）。</li><li>4：CKV 3.2 内存版（集群架构）。</li><li>5：Redis 2.8 单机版。</li><li>6：Redis 4.0 内存版（标准架构）。</li><li>7：Redis 4.0 内存版（集群架构）。</li><li>8：Redis 5.0 内存版（标准架构）。</li><li>9：Redis 5.0 内存版（集群架构）。</li></ul>
        public let productType: Int64

        /// 实例加入复制组的时间。
        public let createTime: String

        /// 复制组中实例更新的时间。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case regionId = "RegionId"
            case zoneId = "ZoneId"
            case redisReplicasNum = "RedisReplicasNum"
            case redisShardNum = "RedisShardNum"
            case redisShardSize = "RedisShardSize"
            case diskSize = "DiskSize"
            case engine = "Engine"
            case role = "Role"
            case vip = "Vip"
            case vip6 = "Vip6"
            case vpcID = "VpcID"
            case vPort = "VPort"
            case status = "Status"
            case grocerySysId = "GrocerySysId"
            case productType = "ProductType"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 安全组出站规则
    public struct Outbound: TCOutputModel {
        /// 策略，ACCEPT或者DROP。
        public let action: String

        /// 地址组id代表的地址集合。
        public let addressModule: String

        /// 来源Ip或Ip段，例如192.168.0.0/16。
        public let cidrIp: String

        /// 描述。
        public let desc: String

        /// 网络协议，支持udp、tcp等。
        public let ipProtocol: String

        /// 端口。
        public let portRange: String

        /// 服务组id代表的协议和端口集合。
        public let serviceModule: String

        /// 安全组id代表的地址集合。
        public let id: String

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case addressModule = "AddressModule"
            case cidrIp = "CidrIp"
            case desc = "Desc"
            case ipProtocol = "IpProtocol"
            case portRange = "PortRange"
            case serviceModule = "ServiceModule"
            case id = "Id"
        }
    }

    /// 参数模板信息
    public struct ParamTemplateInfo: TCOutputModel {
        /// 参数模板ID
        public let templateId: String

        /// 参数模板名称
        public let name: String

        /// 参数模板描述
        public let description: String

        /// 产品类型：1 – Redis2.8内存版（集群架构），2 – Redis2.8内存版（标准架构），3 – CKV 3.2内存版(标准架构)，4 – CKV 3.2内存版(集群架构)，5 – Redis2.8内存版（单机），6 – Redis4.0内存版（标准架构），7 – Redis4.0内存版（集群架构），8 – Redis5.0内存版（标准架构），9 – Redis5.0内存版（集群架构）
        public let productType: UInt64

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case name = "Name"
            case description = "Description"
            case productType = "ProductType"
        }
    }

    /// Redis参数模板参数详情
    public struct ParameterDetail: TCOutputModel {
        /// 参数名称
        public let name: String

        /// 参数类型
        public let paramType: String

        /// 参数默认值
        public let `default`: String

        /// 参数描述
        public let description: String

        /// 参数当前值
        public let currentValue: String

        /// 修改参数后，是否需要重启数据库以使参数生效。可能的值包括：0-不需要重启；1-需要重启
        public let needReboot: Int64

        /// 参数允许的最大值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let max: String?

        /// 参数允许的最小值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let min: String?

        /// 参数的可选枚举值。如果为非枚举参数，则为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enumValue: [String]?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case paramType = "ParamType"
            case `default` = "Default"
            case description = "Description"
            case currentValue = "CurrentValue"
            case needReboot = "NeedReboot"
            case max = "Max"
            case min = "Min"
            case enumValue = "EnumValue"
        }
    }

    /// 产品信息
    public struct ProductConf: TCOutputModel {
        /// 产品类型，2 – Redis2.8内存版(标准架构)，3 – CKV 3.2内存版(标准架构)，4 – CKV 3.2内存版(集群架构)，5 – Redis2.8内存版(单机版)，6 – Redis4.0内存版(标准架构)，7 – Redis4.0内存版(集群架构)，8 – Redis5.0内存版(标准架构)，9 – Redis5.0内存版(集群架构)，10 – Redis4.0混合存储版Tendis
        public let type: Int64

        /// 产品名称，Redis主从版，CKV主从版，CKV集群版，Redis单机版，Redis集群版，混合存储版Tendis
        public let typeName: String

        /// 购买时的最小数量
        public let minBuyNum: Int64

        /// 购买时的最大数量
        public let maxBuyNum: Int64

        /// 产品是否售罄
        public let saleout: Bool

        /// 产品引擎，腾讯云CKV或者社区版Redis
        public let engine: String

        /// 兼容版本，Redis-2.8，Redis-3.2，Redis-4.0
        public let version: String

        /// 规格总大小，单位G
        public let totalSize: [String]

        /// 每个分片大小，单位G
        public let shardSize: [String]

        /// 副本数量
        public let replicaNum: [String]

        /// 分片数量
        public let shardNum: [String]

        /// 支持的计费模式，1-包年包月，0-按量计费
        public let payMode: String

        /// 是否支持副本只读
        public let enableRepicaReadOnly: Bool

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case typeName = "TypeName"
            case minBuyNum = "MinBuyNum"
            case maxBuyNum = "MaxBuyNum"
            case saleout = "Saleout"
            case engine = "Engine"
            case version = "Version"
            case totalSize = "TotalSize"
            case shardSize = "ShardSize"
            case replicaNum = "ReplicaNum"
            case shardNum = "ShardNum"
            case payMode = "PayMode"
            case enableRepicaReadOnly = "EnableRepicaReadOnly"
        }
    }

    /// Proxy节点信息。
    public struct ProxyNodes: TCOutputModel {
        /// 节点 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeId: String?

        /// 可用区 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: Int64?

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case zoneId = "ZoneId"
        }
    }

    /// 实例的备份数组
    public struct RedisBackupSet: TCOutputModel {
        /// 备份开始时间。
        public let startTime: String

        /// 备份ID。
        public let backupId: String

        /// 备份类型。
        ///
        /// - 1：用户发起的手动备份。
        /// - 0：凌晨系统发起的备份。
        public let backupType: String

        /// 备份状态。
        ///
        /// - 1：备份被其它流程锁定。
        /// - 2：备份正常，没有被任何流程锁定。
        /// - -1：备份已过期。
        /// - 3：备份正在被导出。
        /// - 4：备份导出成功。
        public let status: Int64

        /// 备份的备注信息。
        public let remark: String

        /// 备份是否被锁定。
        ///
        /// - 0：未被锁定。
        /// - 1：已被锁定。
        public let locked: Int64

        /// 内部字段，用户可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupSize: Int64?

        /// 内部字段，用户可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fullBackup: Int64?

        /// 内部字段，用户可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceType: Int64?

        /// 实例 ID。
        public let instanceId: String

        /// 实例名称。
        public let instanceName: String

        /// 本地备份所在地域。
        public let region: String

        /// 备份结束时间。
        public let endTime: String

        /// 备份文件类型。
        public let fileType: String

        /// 备份文件过期时间。
        public let expireTime: String

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case backupId = "BackupId"
            case backupType = "BackupType"
            case status = "Status"
            case remark = "Remark"
            case locked = "Locked"
            case backupSize = "BackupSize"
            case fullBackup = "FullBackup"
            case instanceType = "InstanceType"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case region = "Region"
            case endTime = "EndTime"
            case fileType = "FileType"
            case expireTime = "ExpireTime"
        }
    }

    /// 单个实例信息
    public struct RedisCommonInstanceList: TCOutputModel {
        /// 实例名称
        public let instanceName: String

        /// 实例id
        public let instanceId: String

        /// 用户id
        public let appId: Int64

        /// 实例所属项目id
        public let projectId: Int64

        /// 实例接入区域
        public let region: String

        /// 实例接入zone
        public let zone: String

        /// 实例网络id
        public let vpcId: String

        /// 子网id
        public let subnetId: String

        /// 实例状态信息，1-流程中 ,2-运行中, -2-实例已隔离 ,-3-实例待回收, -4-实例已删除
        public let status: String

        /// 实例网络ip
        public let vips: [String]

        /// 实例网络端口
        public let vport: Int64

        /// 实例创建时间
        public let createtime: String

        /// 计费类型，0-按量计费，1-包年包月
        public let payMode: Int64

        /// 网络类型，0-基础网络，1-VPC网络
        public let netType: Int64

        enum CodingKeys: String, CodingKey {
            case instanceName = "InstanceName"
            case instanceId = "InstanceId"
            case appId = "AppId"
            case projectId = "ProjectId"
            case region = "Region"
            case zone = "Zone"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case vips = "Vips"
            case vport = "Vport"
            case createtime = "Createtime"
            case payMode = "PayMode"
            case netType = "NetType"
        }
    }

    /// Redis节点的运行信息
    public struct RedisNode: TCOutputModel {
        /// 节点key的个数
        public let keys: Int64

        /// 节点slot分布
        public let slot: String

        /// 节点的序列ID
        public let nodeId: String

        /// 节点的状态
        public let status: String

        /// 节点角色
        public let role: String

        enum CodingKeys: String, CodingKey {
            case keys = "Keys"
            case slot = "Slot"
            case nodeId = "NodeId"
            case status = "Status"
            case role = "Role"
        }
    }

    /// 描述 Redis 实例的主节点或者副本节点信息。
    public struct RedisNodeInfo: TCInputModel, TCOutputModel {
        /// 节点类型。<ul><li>0：为主节点。</li><li>1：为副本节点。</li></ul>
        public let nodeType: Int64

        /// 主节点或者副本节点的 ID。<ul><li>该参数用于创建 Redis 实例接口[CreateInstances](https://cloud.tencent.com/document/product/239/20026) 并不需要设置，而用于变更实例配置的接口 [UpgradeInstance](https://cloud.tencent.com/document/product/239/20013) 则需要设置。</li><li>该参数可使用接口 [DescribeInstances](https://cloud.tencent.com/document/product/239/20018) 获取Integer类型的节点 ID。</li></ul>
        public let nodeId: Int64?

        /// 主节点或者副本节点的可用区 ID。
        public let zoneId: UInt64?

        /// 主节点或者副本节点的可用区名称。
        public let zoneName: String?

        public init(nodeType: Int64, nodeId: Int64? = nil, zoneId: UInt64? = nil, zoneName: String? = nil) {
            self.nodeType = nodeType
            self.nodeId = nodeId
            self.zoneId = zoneId
            self.zoneName = zoneName
        }

        enum CodingKeys: String, CodingKey {
            case nodeType = "NodeType"
            case nodeId = "NodeId"
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
        }
    }

    /// Redis节点信息
    public struct RedisNodes: TCOutputModel {
        /// 节点ID
        public let nodeId: String

        /// 节点角色
        public let nodeRole: String

        /// 分片ID
        public let clusterId: Int64

        /// 可用区ID
        public let zoneId: Int64

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case nodeRole = "NodeRole"
            case clusterId = "ClusterId"
            case zoneId = "ZoneId"
        }
    }

    /// 地域信息
    public struct RegionConf: TCOutputModel {
        /// 地域ID
        public let regionId: String

        /// 地域名称
        public let regionName: String

        /// 地域简称
        public let regionShortName: String

        /// 地域所在大区名称
        public let area: String

        /// 可用区信息
        public let zoneSet: [ZoneCapacityConf]

        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case regionName = "RegionName"
            case regionShortName = "RegionShortName"
            case area = "Area"
            case zoneSet = "ZoneSet"
        }
    }

    /// 实例节点信息
    public struct ReplicaGroup: TCOutputModel {
        /// 节点组ID
        public let groupId: Int64

        /// 节点组的名称，主节点为空
        public let groupName: String

        /// 节点的可用区ID，比如ap-guangzhou-1
        public let zoneId: String

        /// 节点组类型，master为主节点，replica为副本节点
        public let role: String

        /// 节点组节点列表
        public let redisNodes: [RedisNode]

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
            case zoneId = "ZoneId"
            case role = "Role"
            case redisNodes = "RedisNodes"
        }
    }

    /// API购买实例绑定标签
    public struct ResourceTag: TCInputModel {
        /// 标签key
        public let tagKey: String

        /// 标签value
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 安全组规则
    public struct SecurityGroup: TCOutputModel {
        /// 创建时间，时间格式：yyyy-mm-dd hh:mm:ss。
        public let createTime: String

        /// 项目ID。
        public let projectId: UInt64

        /// 安全组ID。
        public let securityGroupId: String

        /// 安全组名称。
        public let securityGroupName: String

        /// 安全组备注。
        public let securityGroupRemark: String

        /// 出站规则。
        public let outbound: [Outbound]

        /// 入站规则。
        public let inbound: [Inbound]

        enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case projectId = "ProjectId"
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupRemark = "SecurityGroupRemark"
            case outbound = "Outbound"
            case inbound = "Inbound"
        }
    }

    /// 安全组详情
    public struct SecurityGroupDetail: TCOutputModel {
        /// 项目Id
        public let projectId: Int64

        /// 创建时间
        public let createTime: String

        /// 安全组Id
        public let securityGroupId: String

        /// 安全组名称
        public let securityGroupName: String

        /// 安全组标记
        public let securityGroupRemark: String

        /// 安全组入站规则
        public let inboundRule: [SecurityGroupsInboundAndOutbound]

        /// 安全组出站规则
        public let outboundRule: [SecurityGroupsInboundAndOutbound]

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case createTime = "CreateTime"
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupRemark = "SecurityGroupRemark"
            case inboundRule = "InboundRule"
            case outboundRule = "OutboundRule"
        }
    }

    /// 安全组出入规则
    public struct SecurityGroupsInboundAndOutbound: TCOutputModel {
        /// 执行动作
        public let action: String

        /// IP地址
        public let ip: String

        /// 端口号
        public let port: String

        /// 协议类型
        public let proto: String

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case ip = "Ip"
            case port = "Port"
            case proto = "Proto"
        }
    }

    /// 访问命令
    public struct SourceCommand: TCOutputModel {
        /// 命令
        public let cmd: String

        /// 执行次数
        public let count: Int64

        enum CodingKeys: String, CodingKey {
            case cmd = "Cmd"
            case count = "Count"
        }
    }

    /// 访问来源信息
    public struct SourceInfo: TCOutputModel {
        /// 来源IP
        public let ip: String

        /// 连接数
        public let conn: Int64

        /// 命令
        public let cmd: Int64

        enum CodingKeys: String, CodingKey {
            case ip = "Ip"
            case conn = "Conn"
            case cmd = "Cmd"
        }
    }

    /// 任务信息详情
    public struct TaskInfoDetail: TCOutputModel {
        /// 任务Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: Int64?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 任务类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskType: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 实例Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 项目Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: Int64?

        /// 任务进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progress: Float?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 任务状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Int64?

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case startTime = "StartTime"
            case taskType = "TaskType"
            case instanceName = "InstanceName"
            case instanceId = "InstanceId"
            case projectId = "ProjectId"
            case progress = "Progress"
            case endTime = "EndTime"
            case result = "Result"
        }
    }

    /// tendis节点信息
    public struct TendisNodes: TCOutputModel {
        /// 节点ID
        public let nodeId: String

        /// 节点角色
        public let nodeRole: String

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case nodeRole = "NodeRole"
        }
    }

    /// Tendis慢查询详情
    public struct TendisSlowLogDetail: TCOutputModel {
        /// 执行时间
        public let executeTime: String

        /// 慢查询耗时（毫秒）
        public let duration: Int64

        /// 命令
        public let command: String

        /// 详细命令行信息
        public let commandLine: String

        /// 节点ID
        public let node: String

        enum CodingKeys: String, CodingKey {
            case executeTime = "ExecuteTime"
            case duration = "Duration"
            case command = "Command"
            case commandLine = "CommandLine"
            case node = "Node"
        }
    }

    /// 订单交易信息
    public struct TradeDealDetail: TCOutputModel {
        /// 订单号ID，调用云API时使用此ID
        public let dealId: String

        /// 长订单ID，反馈订单问题给官方客服使用此ID
        public let dealName: String

        /// 可用区id
        public let zoneId: Int64

        /// 订单关联的实例数
        public let goodsNum: Int64

        /// 创建用户uin
        public let creater: String

        /// 订单创建时间
        public let creatTime: String

        /// 订单超时时间
        public let overdueTime: String

        /// 订单完成时间
        public let endTime: String

        /// 订单状态 1：未支付 2:已支付，未发货 3:发货中 4:发货成功 5:发货失败 6:已退款 7:已关闭订单 8:订单过期 9:订单已失效 10:产品已失效 11:代付拒绝 12:支付中
        public let status: Int64

        /// 订单状态描述
        public let description: String

        /// 订单实际总价，单位：分
        public let price: Int64

        /// 实例ID
        public let instanceIds: [String]

        enum CodingKeys: String, CodingKey {
            case dealId = "DealId"
            case dealName = "DealName"
            case zoneId = "ZoneId"
            case goodsNum = "GoodsNum"
            case creater = "Creater"
            case creatTime = "CreatTime"
            case overdueTime = "OverdueTime"
            case endTime = "EndTime"
            case status = "Status"
            case description = "Description"
            case price = "Price"
            case instanceIds = "InstanceIds"
        }
    }

    /// 可用区内产品信息
    public struct ZoneCapacityConf: TCOutputModel {
        /// 可用区ID：如ap-guangzhou-3
        public let zoneId: String

        /// 可用区名称
        public let zoneName: String

        /// 可用区是否售罄
        public let isSaleout: Bool

        /// 是否为默认可用区
        public let isDefault: Bool

        /// 网络类型：basenet -- 基础网络；vpcnet -- VPC网络
        public let netWorkType: [String]

        /// 可用区内产品规格等信息
        public let productSet: [ProductConf]

        /// 可用区ID：如100003
        public let oldZoneId: Int64

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case isSaleout = "IsSaleout"
            case isDefault = "IsDefault"
            case netWorkType = "NetWorkType"
            case productSet = "ProductSet"
            case oldZoneId = "OldZoneId"
        }
    }
}
