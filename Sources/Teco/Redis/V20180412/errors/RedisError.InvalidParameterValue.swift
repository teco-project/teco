//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCRedisError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case backupNotExists = "InvalidParameterValue.BackupNotExists"
            case baseNetWorkAccessDeny = "InvalidParameterValue.BaseNetWorkAccessDeny"
            case checkNotPass = "InvalidParameterValue.CheckNotPass"
            case instanceNameRuleError = "InvalidParameterValue.InstanceNameRuleError"
            case invalidInstanceTypeId = "InvalidParameterValue.InvalidInstanceTypeId"
            case invalidSubnetId = "InvalidParameterValue.InvalidSubnetId"
            case memSizeNotInRange = "InvalidParameterValue.MemSizeNotInRange"
            case notRepeatBind = "InvalidParameterValue.NotRepeatBind"
            case passwordEmpty = "InvalidParameterValue.PasswordEmpty"
            case passwordError = "InvalidParameterValue.PasswordError"
            case passwordFreeDenied = "InvalidParameterValue.PasswordFreeDenied"
            case passwordRuleError = "InvalidParameterValue.PasswordRuleError"
            case reduceCapacityNotAllowed = "InvalidParameterValue.ReduceCapacityNotAllowed"
            case replicationGroupNotExists = "InvalidParameterValue.ReplicationGroupNotExists"
            case securityGroupIdsNotExists = "InvalidParameterValue.SecurityGroupIdsNotExists"
            case specNotExist = "InvalidParameterValue.SpecNotExist"
            case unSupportedType = "InvalidParameterValue.UnSupportedType"
            case unVpcIdNotExists = "InvalidParameterValue.UnVpcIdNotExists"
            case weekDaysIsInvalid = "InvalidParameterValue.WeekDaysIsInvalid"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 备份不存在。
        public static var backupNotExists: InvalidParameterValue {
            InvalidParameterValue(.backupNotExists)
        }
        
        /// 不是vpc网络下实例。
        public static var baseNetWorkAccessDeny: InvalidParameterValue {
            InvalidParameterValue(.baseNetWorkAccessDeny)
        }
        
        /// 业务校验不通过。
        public static var checkNotPass: InvalidParameterValue {
            InvalidParameterValue(.checkNotPass)
        }
        
        /// 重命名，命名规则错误。
        public static var instanceNameRuleError: InvalidParameterValue {
            InvalidParameterValue(.instanceNameRuleError)
        }
        
        /// 请求购买的实例类型错误（TypeId 1:集群版；2:主从版,即原主从版)。
        public static var invalidInstanceTypeId: InvalidParameterValue {
            InvalidParameterValue(.invalidInstanceTypeId)
        }
        
        /// vpc网络下，vpcid 子网id 非法。
        public static var invalidSubnetId: InvalidParameterValue {
            InvalidParameterValue(.invalidSubnetId)
        }
        
        /// 请求的容量不在售卖容量范围内。
        public static var memSizeNotInRange: InvalidParameterValue {
            InvalidParameterValue(.memSizeNotInRange)
        }
        
        /// 实例不能重复绑定。
        public static var notRepeatBind: InvalidParameterValue {
            InvalidParameterValue(.notRepeatBind)
        }
        
        /// 密码为空。
        public static var passwordEmpty: InvalidParameterValue {
            InvalidParameterValue(.passwordEmpty)
        }
        
        /// 密码校验出错，密码错误。
        public static var passwordError: InvalidParameterValue {
            InvalidParameterValue(.passwordError)
        }
        
        /// 腾讯集团内部账号禁止使用免密实例。
        ///
        /// 请选择非免密实例，并按照规范设置实例密码。
        public static var passwordFreeDenied: InvalidParameterValue {
            InvalidParameterValue(.passwordFreeDenied)
        }
        
        /// 设置密码时，MC 传入的 old password 与先前设定密码不同。
        public static var passwordRuleError: InvalidParameterValue {
            InvalidParameterValue(.passwordRuleError)
        }
        
        /// 请求容量偏小，不支持缩容。
        public static var reduceCapacityNotAllowed: InvalidParameterValue {
            InvalidParameterValue(.reduceCapacityNotAllowed)
        }
        
        /// 复制组不存在。
        public static var replicationGroupNotExists: InvalidParameterValue {
            InvalidParameterValue(.replicationGroupNotExists)
        }
        
        /// 请求参数错误，安全组id错误。
        public static var securityGroupIdsNotExists: InvalidParameterValue {
            InvalidParameterValue(.securityGroupIdsNotExists)
        }
        
        /// 实例规格不存在。
        public static var specNotExist: InvalidParameterValue {
            InvalidParameterValue(.specNotExist)
        }
        
        /// 实例类型不支持。
        public static var unSupportedType: InvalidParameterValue {
            InvalidParameterValue(.unSupportedType)
        }
        
        /// vpc网络下，uniqVpcId 子网id 非法。
        public static var unVpcIdNotExists: InvalidParameterValue {
            InvalidParameterValue(.unVpcIdNotExists)
        }
        
        /// weekday输入无效数据。
        public static var weekDaysIsInvalid: InvalidParameterValue {
            InvalidParameterValue(.weekDaysIsInvalid)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCRedisError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCRedisError.InvalidParameterValue, rhs: TCRedisError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCRedisError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCRedisError.InvalidParameterValue {
    /// - Returns: ``TCRedisError`` that holds the same error and context.
    public func toRedisError() -> TCRedisError {
        guard let code = TCRedisError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCRedisError(code, context: self.context)
    }
}

extension TCRedisError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
