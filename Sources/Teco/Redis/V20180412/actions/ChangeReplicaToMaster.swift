//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// ChangeReplicaToMaster请求参数结构体
    public struct ChangeReplicaToMasterRequest: TCRequestModel {
        /// 指定实例 ID。例如：crs-xjhsdj****。请登录[Redis控制台](https://console.cloud.tencent.com/redis)在实例列表复制实例 ID。
        public let instanceId: String

        /// 副本节点组 ID，请通过接口[DescribeInstanceZoneInfo](https://cloud.tencent.com/document/product/239/50312)获取多 AZ备节点组的 ID 信息。单 AZ，则无需配置该参数。
        public let groupId: Int64?

        public init(instanceId: String, groupId: Int64? = nil) {
            self.instanceId = instanceId
            self.groupId = groupId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case groupId = "GroupId"
        }
    }

    /// ChangeReplicaToMaster返回参数结构体
    public struct ChangeReplicaToMasterResponse: TCResponseModel {
        /// 异步任务ID。
        public let taskId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 副本组提主
    ///
    /// 本接口（ChangeReplicaToMaster）适用于实例副本组提主或副本提主。
    @inlinable
    public func changeReplicaToMaster(_ input: ChangeReplicaToMasterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChangeReplicaToMasterResponse> {
        self.client.execute(action: "ChangeReplicaToMaster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 副本组提主
    ///
    /// 本接口（ChangeReplicaToMaster）适用于实例副本组提主或副本提主。
    @inlinable
    public func changeReplicaToMaster(_ input: ChangeReplicaToMasterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChangeReplicaToMasterResponse {
        try await self.client.execute(action: "ChangeReplicaToMaster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 副本组提主
    ///
    /// 本接口（ChangeReplicaToMaster）适用于实例副本组提主或副本提主。
    @inlinable
    public func changeReplicaToMaster(instanceId: String, groupId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChangeReplicaToMasterResponse> {
        self.changeReplicaToMaster(.init(instanceId: instanceId, groupId: groupId), region: region, logger: logger, on: eventLoop)
    }

    /// 副本组提主
    ///
    /// 本接口（ChangeReplicaToMaster）适用于实例副本组提主或副本提主。
    @inlinable
    public func changeReplicaToMaster(instanceId: String, groupId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChangeReplicaToMasterResponse {
        try await self.changeReplicaToMaster(.init(instanceId: instanceId, groupId: groupId), region: region, logger: logger, on: eventLoop)
    }
}
