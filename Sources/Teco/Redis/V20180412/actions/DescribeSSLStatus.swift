//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// DescribeSSLStatus请求参数结构体
    public struct DescribeSSLStatusRequest: TCRequest {
        /// 实例 ID。
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeSSLStatus返回参数结构体
    public struct DescribeSSLStatusResponse: TCResponse {
        /// SSL 证书下载地址。
        public let certDownloadUrl: String

        /// 证书下载链接到期时间。
        public let urlExpiredTime: String

        /// 标识实例开启 SSL 功能。
        /// - true：开启 。
        /// - false：关闭。
        public let sslConfig: Bool

        /// 标识实例是否支持 SSL特性。
        /// - true：支持。
        /// - false：不支持。
        public let featureSupport: Bool

        /// 说明配置 SSL 的状态。
        /// - 1: 配置中。
        /// - 2：配置成功。
        public let status: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case certDownloadUrl = "CertDownloadUrl"
            case urlExpiredTime = "UrlExpiredTime"
            case sslConfig = "SSLConfig"
            case featureSupport = "FeatureSupport"
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 查询SSL状态
    ///
    /// 本接口（DescribeSSLStatus）用于查询实例 SSL 认证相关信息，包括开启状态、配置状态、证书地址等。
    @inlinable
    public func describeSSLStatus(_ input: DescribeSSLStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSSLStatusResponse> {
        self.client.execute(action: "DescribeSSLStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询SSL状态
    ///
    /// 本接口（DescribeSSLStatus）用于查询实例 SSL 认证相关信息，包括开启状态、配置状态、证书地址等。
    @inlinable
    public func describeSSLStatus(_ input: DescribeSSLStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSSLStatusResponse {
        try await self.client.execute(action: "DescribeSSLStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询SSL状态
    ///
    /// 本接口（DescribeSSLStatus）用于查询实例 SSL 认证相关信息，包括开启状态、配置状态、证书地址等。
    @inlinable
    public func describeSSLStatus(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSSLStatusResponse> {
        self.describeSSLStatus(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询SSL状态
    ///
    /// 本接口（DescribeSSLStatus）用于查询实例 SSL 认证相关信息，包括开启状态、配置状态、证书地址等。
    @inlinable
    public func describeSSLStatus(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSSLStatusResponse {
        try await self.describeSSLStatus(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
