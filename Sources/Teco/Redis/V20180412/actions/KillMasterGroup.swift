//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// KillMasterGroup请求参数结构体
    public struct KillMasterGroupRequest: TCRequestModel {
        /// 指定实例 ID。例如：crs-xjhsdj****。请登录[Redis控制台](https://console.cloud.tencent.com/redis)在实例列表复制实例 ID。
        public let instanceId: String

        /// 该参数用于配置指定实例的访问密码。若为免密认证，该参数则无需配置。密码复杂度要求如下所示。
        /// - 长度8-30位,推荐使用12位以上的密码
        /// - 不能以"/"开头
        /// - 至少包含小写字母a-z、大写字母A-Z、数字0-9及其 ()`~!@#$%^&*-+=_|{}[]:;<>,.?/中的两项。
        public let password: String?

        /// 分片集群的分片 ID。
        public let shardIds: [Int64]?

        public init(instanceId: String, password: String? = nil, shardIds: [Int64]? = nil) {
            self.instanceId = instanceId
            self.password = password
            self.shardIds = shardIds
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case password = "Password"
            case shardIds = "ShardIds"
        }
    }

    /// KillMasterGroup返回参数结构体
    public struct KillMasterGroupResponse: TCResponseModel {
        /// 异步任务ID。
        public let taskId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 模拟故障接口
    ///
    /// 本接口（KillMasterGroup）模拟故障。
    @inlinable
    public func killMasterGroup(_ input: KillMasterGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<KillMasterGroupResponse> {
        self.client.execute(action: "KillMasterGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 模拟故障接口
    ///
    /// 本接口（KillMasterGroup）模拟故障。
    @inlinable
    public func killMasterGroup(_ input: KillMasterGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> KillMasterGroupResponse {
        try await self.client.execute(action: "KillMasterGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 模拟故障接口
    ///
    /// 本接口（KillMasterGroup）模拟故障。
    @inlinable
    public func killMasterGroup(instanceId: String, password: String? = nil, shardIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<KillMasterGroupResponse> {
        self.killMasterGroup(.init(instanceId: instanceId, password: password, shardIds: shardIds), region: region, logger: logger, on: eventLoop)
    }

    /// 模拟故障接口
    ///
    /// 本接口（KillMasterGroup）模拟故障。
    @inlinable
    public func killMasterGroup(instanceId: String, password: String? = nil, shardIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> KillMasterGroupResponse {
        try await self.killMasterGroup(.init(instanceId: instanceId, password: password, shardIds: shardIds), region: region, logger: logger, on: eventLoop)
    }
}
