//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// RemoveReplicationInstance请求参数结构体
    public struct RemoveReplicationInstanceRequest: TCRequestModel {
        /// 复制组ID
        public let groupId: String

        /// 实例ID
        public let instanceId: String

        /// 数据同步类型，true:需要数据强同步,false:不需要强同步，仅限删除主实例
        public let syncType: Bool

        public init(groupId: String, instanceId: String, syncType: Bool) {
            self.groupId = groupId
            self.instanceId = instanceId
            self.syncType = syncType
        }

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case instanceId = "InstanceId"
            case syncType = "SyncType"
        }
    }

    /// RemoveReplicationInstance返回参数结构体
    public struct RemoveReplicationInstanceResponse: TCResponseModel {
        /// 异步任务ID
        public let taskId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 移除复制组成员
    @inlinable
    public func removeReplicationInstance(_ input: RemoveReplicationInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveReplicationInstanceResponse> {
        self.client.execute(action: "RemoveReplicationInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 移除复制组成员
    @inlinable
    public func removeReplicationInstance(_ input: RemoveReplicationInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveReplicationInstanceResponse {
        try await self.client.execute(action: "RemoveReplicationInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 移除复制组成员
    @inlinable
    public func removeReplicationInstance(groupId: String, instanceId: String, syncType: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveReplicationInstanceResponse> {
        self.removeReplicationInstance(.init(groupId: groupId, instanceId: instanceId, syncType: syncType), region: region, logger: logger, on: eventLoop)
    }

    /// 移除复制组成员
    @inlinable
    public func removeReplicationInstance(groupId: String, instanceId: String, syncType: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveReplicationInstanceResponse {
        try await self.removeReplicationInstance(.init(groupId: groupId, instanceId: instanceId, syncType: syncType), region: region, logger: logger, on: eventLoop)
    }
}
