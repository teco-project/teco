//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Redis {
    /// DescribeCommonDBInstances请求参数结构体
    public struct DescribeCommonDBInstancesRequest: TCPaginatedRequest {
        /// vpc网络ID信息列表
        public let vpcIds: [Int64]?

        /// 子网ID信息列表
        public let subnetIds: [Int64]?

        /// 计费类型过滤列表；0表示包年包月，1表示按量计费
        public let payMode: Int64?

        /// 实例ID过滤信息列表
        public let instanceIds: [String]?

        /// 实例名称过滤信息列表
        public let instanceNames: [String]?

        /// 实例状态信息过滤列表
        public let status: [String]?

        /// 排序字段
        public let orderBy: String?

        /// 排序方式
        public let orderByType: String?

        /// 实例vip信息列表
        public let vips: [String]?

        /// vpc网络ID信息列表
        public let uniqVpcIds: [String]?

        /// 子网统一ID列表
        public let uniqSubnetIds: [String]?

        /// 数量限制，默认推荐100
        public let limit: Int64?

        /// 偏移量，默认0
        public let offset: Int64?

        public init(vpcIds: [Int64]? = nil, subnetIds: [Int64]? = nil, payMode: Int64? = nil, instanceIds: [String]? = nil, instanceNames: [String]? = nil, status: [String]? = nil, orderBy: String? = nil, orderByType: String? = nil, vips: [String]? = nil, uniqVpcIds: [String]? = nil, uniqSubnetIds: [String]? = nil, limit: Int64? = nil, offset: Int64? = nil) {
            self.vpcIds = vpcIds
            self.subnetIds = subnetIds
            self.payMode = payMode
            self.instanceIds = instanceIds
            self.instanceNames = instanceNames
            self.status = status
            self.orderBy = orderBy
            self.orderByType = orderByType
            self.vips = vips
            self.uniqVpcIds = uniqVpcIds
            self.uniqSubnetIds = uniqSubnetIds
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case vpcIds = "VpcIds"
            case subnetIds = "SubnetIds"
            case payMode = "PayMode"
            case instanceIds = "InstanceIds"
            case instanceNames = "InstanceNames"
            case status = "Status"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
            case vips = "Vips"
            case uniqVpcIds = "UniqVpcIds"
            case uniqSubnetIds = "UniqSubnetIds"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeCommonDBInstancesResponse) -> DescribeCommonDBInstancesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeCommonDBInstancesRequest(vpcIds: self.vpcIds, subnetIds: self.subnetIds, payMode: self.payMode, instanceIds: self.instanceIds, instanceNames: self.instanceNames, status: self.status, orderBy: self.orderBy, orderByType: self.orderByType, vips: self.vips, uniqVpcIds: self.uniqVpcIds, uniqSubnetIds: self.uniqSubnetIds, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribeCommonDBInstances返回参数结构体
    public struct DescribeCommonDBInstancesResponse: TCPaginatedResponse {
        /// 实例数
        public let totalCount: Int64

        /// 实例信息
        public let instanceDetails: [RedisCommonInstanceList]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case instanceDetails = "InstanceDetails"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [RedisCommonInstanceList] {
            self.instanceDetails
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询Redis实例列表信息
    ///
    /// 查询Redis实例列表信息。该接口已废弃。
    @inlinable
    public func describeCommonDBInstances(_ input: DescribeCommonDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCommonDBInstancesResponse> {
        self.client.execute(action: "DescribeCommonDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询Redis实例列表信息
    ///
    /// 查询Redis实例列表信息。该接口已废弃。
    @inlinable
    public func describeCommonDBInstances(_ input: DescribeCommonDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCommonDBInstancesResponse {
        try await self.client.execute(action: "DescribeCommonDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询Redis实例列表信息
    ///
    /// 查询Redis实例列表信息。该接口已废弃。
    @inlinable
    public func describeCommonDBInstances(vpcIds: [Int64]? = nil, subnetIds: [Int64]? = nil, payMode: Int64? = nil, instanceIds: [String]? = nil, instanceNames: [String]? = nil, status: [String]? = nil, orderBy: String? = nil, orderByType: String? = nil, vips: [String]? = nil, uniqVpcIds: [String]? = nil, uniqSubnetIds: [String]? = nil, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCommonDBInstancesResponse> {
        let input = DescribeCommonDBInstancesRequest(vpcIds: vpcIds, subnetIds: subnetIds, payMode: payMode, instanceIds: instanceIds, instanceNames: instanceNames, status: status, orderBy: orderBy, orderByType: orderByType, vips: vips, uniqVpcIds: uniqVpcIds, uniqSubnetIds: uniqSubnetIds, limit: limit, offset: offset)
        return self.client.execute(action: "DescribeCommonDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询Redis实例列表信息
    ///
    /// 查询Redis实例列表信息。该接口已废弃。
    @inlinable
    public func describeCommonDBInstances(vpcIds: [Int64]? = nil, subnetIds: [Int64]? = nil, payMode: Int64? = nil, instanceIds: [String]? = nil, instanceNames: [String]? = nil, status: [String]? = nil, orderBy: String? = nil, orderByType: String? = nil, vips: [String]? = nil, uniqVpcIds: [String]? = nil, uniqSubnetIds: [String]? = nil, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCommonDBInstancesResponse {
        let input = DescribeCommonDBInstancesRequest(vpcIds: vpcIds, subnetIds: subnetIds, payMode: payMode, instanceIds: instanceIds, instanceNames: instanceNames, status: status, orderBy: orderBy, orderByType: orderByType, vips: vips, uniqVpcIds: uniqVpcIds, uniqSubnetIds: uniqSubnetIds, limit: limit, offset: offset)
        return try await self.client.execute(action: "DescribeCommonDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询Redis实例列表信息
    ///
    /// 查询Redis实例列表信息。该接口已废弃。
    @inlinable
    public func describeCommonDBInstancesPaginated(_ input: DescribeCommonDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RedisCommonInstanceList])> {
        self.client.paginate(input: input, region: region, command: self.describeCommonDBInstances, logger: logger, on: eventLoop)
    }

    /// 查询Redis实例列表信息
    ///
    /// 查询Redis实例列表信息。该接口已废弃。
    @inlinable @discardableResult
    public func describeCommonDBInstancesPaginated(_ input: DescribeCommonDBInstancesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeCommonDBInstancesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeCommonDBInstances, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询Redis实例列表信息
    ///
    /// 查询Redis实例列表信息。该接口已废弃。
    ///
    /// - Returns: `AsyncSequence`s of `RedisCommonInstanceList` and `DescribeCommonDBInstancesResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeCommonDBInstancesPaginator(_ input: DescribeCommonDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeCommonDBInstancesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeCommonDBInstances, logger: logger, on: eventLoop)
    }
}
