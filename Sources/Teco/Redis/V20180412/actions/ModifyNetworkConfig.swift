//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Redis {
    /// ModifyNetworkConfig请求参数结构体
    public struct ModifyNetworkConfigRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 操作类型：changeVip——修改实例VIP；changeVpc——修改实例子网；changeBaseToVpc——基础网络转VPC网络
        public let operation: String

        /// VIP地址，changeVip的时候填写，不填则默认分配
        public let vip: String?

        /// 私有网络ID，changeVpc、changeBaseToVpc的时候需要提供
        public let vpcId: String?

        /// 子网ID，changeVpc、changeBaseToVpc的时候需要提供
        public let subnetId: String?

        /// 原VIP保留时间，单位：天，注：需要最新版SDK，否则原VIP立即释放，查看SDK版本，详见 [SDK中心](https://cloud.tencent.com/document/sdk)
        public let recycle: Int64?

        public init(instanceId: String, operation: String, vip: String? = nil, vpcId: String? = nil, subnetId: String? = nil, recycle: Int64? = nil) {
            self.instanceId = instanceId
            self.operation = operation
            self.vip = vip
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.recycle = recycle
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case operation = "Operation"
            case vip = "Vip"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case recycle = "Recycle"
        }
    }

    /// ModifyNetworkConfig返回参数结构体
    public struct ModifyNetworkConfigResponse: TCResponseModel {
        /// 执行状态：true|false
        public let status: Bool

        /// 子网ID
        public let subnetId: String

        /// 私有网络ID
        public let vpcId: String

        /// VIP地址
        public let vip: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case subnetId = "SubnetId"
            case vpcId = "VpcId"
            case vip = "Vip"
            case requestId = "RequestId"
        }
    }

    /// 修改实例网络配置
    @inlinable
    public func modifyNetworkConfig(_ input: ModifyNetworkConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyNetworkConfigResponse> {
        self.client.execute(action: "ModifyNetworkConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例网络配置
    @inlinable
    public func modifyNetworkConfig(_ input: ModifyNetworkConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyNetworkConfigResponse {
        try await self.client.execute(action: "ModifyNetworkConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例网络配置
    @inlinable
    public func modifyNetworkConfig(instanceId: String, operation: String, vip: String? = nil, vpcId: String? = nil, subnetId: String? = nil, recycle: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyNetworkConfigResponse> {
        let input = ModifyNetworkConfigRequest(instanceId: instanceId, operation: operation, vip: vip, vpcId: vpcId, subnetId: subnetId, recycle: recycle)
        return self.client.execute(action: "ModifyNetworkConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例网络配置
    @inlinable
    public func modifyNetworkConfig(instanceId: String, operation: String, vip: String? = nil, vpcId: String? = nil, subnetId: String? = nil, recycle: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyNetworkConfigResponse {
        let input = ModifyNetworkConfigRequest(instanceId: instanceId, operation: operation, vip: vip, vpcId: vpcId, subnetId: subnetId, recycle: recycle)
        return try await self.client.execute(action: "ModifyNetworkConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
