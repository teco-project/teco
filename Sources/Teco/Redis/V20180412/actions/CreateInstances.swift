//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// CreateInstances请求参数结构体
    public struct CreateInstancesRequest: TCRequestModel {
        /// 实例类型。
        ///
        /// - 2：Redis 2.8 内存版（标准架构）。
        /// - 3：CKV 3.2 内存版（标准架构）。
        /// - 4：CKV 3.2 内存版（集群架构）。
        /// - 6：Redis 4.0 内存版（标准架构）。
        /// - 7：Redis 4.0 内存版（集群架构）。
        /// - 8：Redis 5.0 内存版（标准架构）。
        /// - 9：Redis 5.0 内存版（集群架构）。
        /// - 15：Redis 6.2 内存版（标准架构）。
        /// - 16：Redis 6.2 内存版（集群架构）。
        public let typeId: UInt64

        /// 内存容量，单位为MB， 数值需为1024的整数倍。具体规格，请通过 [DescribeProductInfo](https://cloud.tencent.com/document/api/239/30600) 接口查询全地域的售卖规格。
        /// - **TypeId**为标准架构时，**MemSize**是实例总内存容量；
        /// - **TypeId**为集群架构时，**MemSize**是单分片内存容量。
        public let memSize: UInt64

        /// 实例数量，单次购买实例数量。具体信息，请通过 [DescribeProductInfo](https://cloud.tencent.com/document/api/239/30600) 接口查询全地域的售卖规格。
        public let goodsNum: UInt64

        /// 购买实例的时长。
        /// - 若 **BillingMode**为**1**，即计费方式为包年包月时，需设置该参数，指定所购买实例的时长。单位：月，取值范围 [1,2,3,4,5,6,7,8,9,10,11,12,24,36]。
        /// - 若 **BillingMode**为**0**，即计费方式为按量计费时，该参数配置为1。
        public let period: UInt64

        /// 计费方式。
        /// - 0：按量计费。
        /// - 1：包年包月。
        public let billingMode: Int64

        /// 实例所属的可用区ID，可参考[地域和可用区](https://cloud.tencent.com/document/product/239/4106)  。
        public let zoneId: UInt64?

        /// 访问实例的密码。
        /// - 当输入参数**NoAuth**为**true**时，指设置实例为免密码访问，Password可不用配置，否则Password为必填参数。
        /// - 当实例类型**TypeId**为Redis 2.8 内存版标准架构、Redis 4.0、5.0、6.0内存版标准架构或集群架构时，其密码复杂度要求为：8-30个字符，至少包含小写字母、大写字母、数字和字符()`~!@#$%^&*-+=_|{}[]:;<>,.?/ 中的2种，不能以"/"开头。
        /// - 当实例类型**TypeId**为CKV 3.2 内存版标准架构或集群架构时，其密码复杂度为：8-30个字符，必须包含字母和数字，且 不包含其他字符。
        public let password: String?

        /// 私有网络ID。如果不配置该参数则默认选择基础网络。请登录 [私有网络](https://console.cloud.tencent.com/vpc)控制台查询具体的ID。
        public let vpcId: String?

        /// 私有网络VPC的子网。基础网络下， 该参数无需配置。请登录 [私有网络](https://console.cloud.tencent.com/vpc)控制台查询子网列表获取具体的 ID。
        public let subnetId: String?

        /// 项目 ID。请登录[Redis控制台](https://console.cloud.tencent.com/redis#/)，在右上角的账户信息菜单中，选择**项目管理**查询项目 ID。
        public let projectId: Int64?

        /// 自动续费标识。
        /// - 0：默认状态（手动续费）。
        /// - 1：自动续费。
        /// - 2：到期不续费。
        public let autoRenew: UInt64?

        /// 安全组 ID 数组。请通过[DescribeInstanceSecurityGroup](https://cloud.tencent.com/document/product/239/34447)接口获取实例的安全组 ID。
        public let securityGroupIdList: [String]?

        /// 用户自定义的网络端口。默认为6379，范围为 [1024,65535]。
        public let vPort: UInt64?

        /// 实例分片数量。
        /// - 标准版实例无需配置该参数。
        /// - 集群版实例，分片数量范围为：[1、3、5、8、12、16、24、32、40、48、64、80、96、128]。
        public let redisShardNum: Int64?

        /// 实例副本数量。
        /// - Redis 内存版 4.0、5.0、6.2 标准架构和集群架构支持副本数量范围为[1,5]。
        /// - Redis 2.8标准版、CKV标准版只支持1副本。
        public let redisReplicasNum: Int64?

        /// 标识实例是否需支持副本只读。
        /// - Redis 2.8 标准版、CKV标准版不支持副本只读。
        /// - 开启副本只读，实例将自动读写分离，写请求路由到主节点，读请求路由到副本节点。
        /// - 如需开启副本只读，建议副本数量大于等于2。
        public let replicasReadonly: Bool?

        /// 实例名称。命名要求：仅支持长度小于60的中文、英文或者数字，短划线"-"、下划线"_"。
        public let instanceName: String?

        /// 配置实例是否支持免密码访问。
        /// - true：免密访问实例。
        /// - false：非免密访问实例。默认为非免密方式，仅VPC网络的实例支持免密码访问。
        public let noAuth: Bool?

        /// 实例的节点信息，包含节点 ID、节点类型、节点可用区 ID等。具体信息，请参见[RedisNodeInfo ](https://cloud.tencent.com/document/product/239/20022)。
        /// 目前支持传入节点的类型（主节点或者副本节点），节点的可用区。单可用区部署不需要传递此参数。
        public let nodeSet: [RedisNodeInfo]?

        /// 给实例设定标签。
        public let resourceTags: [ResourceTag]?

        /// 指定实例所属的可用区名称。具体信息，请参见[地域和可用区](https://cloud.tencent.com/document/product/239/4106)  。
        public let zoneName: String?

        /// 指定实例相关的参数模板 ID。
        /// - 若不配置该参数，则系统会依据所选择的兼容版本及架构，自动适配对应的默认模板。
        /// - 请通过[DescribeParamTemplates](https://cloud.tencent.com/document/product/239/58750)接口，查询实例的参数模板列表，获取模板 ID 编号。
        public let templateId: String?

        /// 内部参数，标识创建实例是否需要检查。
        /// - false ：默认值。发送正常请求，通过检查后直接创建实例。
        /// - true：发送检查请求，不会创建实例。
        public let dryRun: Bool?

        /// 指定实例的产品版本。
        /// - local：本地盘版。
        /// - cloud：云盘版，
        /// - cdc：独享集群版。如果不传默认发货为本地盘版本。
        public let productVersion: String?

        /// 独享集群 ID。当**ProductVersion**设置为**cdc**时，该参数必须设置。
        public let redisClusterId: String?

        public init(typeId: UInt64, memSize: UInt64, goodsNum: UInt64, period: UInt64, billingMode: Int64, zoneId: UInt64? = nil, password: String? = nil, vpcId: String? = nil, subnetId: String? = nil, projectId: Int64? = nil, autoRenew: UInt64? = nil, securityGroupIdList: [String]? = nil, vPort: UInt64? = nil, redisShardNum: Int64? = nil, redisReplicasNum: Int64? = nil, replicasReadonly: Bool? = nil, instanceName: String? = nil, noAuth: Bool? = nil, nodeSet: [RedisNodeInfo]? = nil, resourceTags: [ResourceTag]? = nil, zoneName: String? = nil, templateId: String? = nil, dryRun: Bool? = nil, productVersion: String? = nil, redisClusterId: String? = nil) {
            self.typeId = typeId
            self.memSize = memSize
            self.goodsNum = goodsNum
            self.period = period
            self.billingMode = billingMode
            self.zoneId = zoneId
            self.password = password
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.projectId = projectId
            self.autoRenew = autoRenew
            self.securityGroupIdList = securityGroupIdList
            self.vPort = vPort
            self.redisShardNum = redisShardNum
            self.redisReplicasNum = redisReplicasNum
            self.replicasReadonly = replicasReadonly
            self.instanceName = instanceName
            self.noAuth = noAuth
            self.nodeSet = nodeSet
            self.resourceTags = resourceTags
            self.zoneName = zoneName
            self.templateId = templateId
            self.dryRun = dryRun
            self.productVersion = productVersion
            self.redisClusterId = redisClusterId
        }

        enum CodingKeys: String, CodingKey {
            case typeId = "TypeId"
            case memSize = "MemSize"
            case goodsNum = "GoodsNum"
            case period = "Period"
            case billingMode = "BillingMode"
            case zoneId = "ZoneId"
            case password = "Password"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case projectId = "ProjectId"
            case autoRenew = "AutoRenew"
            case securityGroupIdList = "SecurityGroupIdList"
            case vPort = "VPort"
            case redisShardNum = "RedisShardNum"
            case redisReplicasNum = "RedisReplicasNum"
            case replicasReadonly = "ReplicasReadonly"
            case instanceName = "InstanceName"
            case noAuth = "NoAuth"
            case nodeSet = "NodeSet"
            case resourceTags = "ResourceTags"
            case zoneName = "ZoneName"
            case templateId = "TemplateId"
            case dryRun = "DryRun"
            case productVersion = "ProductVersion"
            case redisClusterId = "RedisClusterId"
        }
    }

    /// CreateInstances返回参数结构体
    public struct CreateInstancesResponse: TCResponseModel {
        /// 交易的ID。
        public let dealId: String

        /// 实例ID。
        public let instanceIds: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dealId = "DealId"
            case instanceIds = "InstanceIds"
            case requestId = "RequestId"
        }
    }

    /// 创建Redis实例
    ///
    /// 本接口（CreateInstances）用于创建 Redis 实例。
    @inlinable
    public func createInstances(_ input: CreateInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInstancesResponse> {
        self.client.execute(action: "CreateInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建Redis实例
    ///
    /// 本接口（CreateInstances）用于创建 Redis 实例。
    @inlinable
    public func createInstances(_ input: CreateInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInstancesResponse {
        try await self.client.execute(action: "CreateInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建Redis实例
    ///
    /// 本接口（CreateInstances）用于创建 Redis 实例。
    @inlinable
    public func createInstances(typeId: UInt64, memSize: UInt64, goodsNum: UInt64, period: UInt64, billingMode: Int64, zoneId: UInt64? = nil, password: String? = nil, vpcId: String? = nil, subnetId: String? = nil, projectId: Int64? = nil, autoRenew: UInt64? = nil, securityGroupIdList: [String]? = nil, vPort: UInt64? = nil, redisShardNum: Int64? = nil, redisReplicasNum: Int64? = nil, replicasReadonly: Bool? = nil, instanceName: String? = nil, noAuth: Bool? = nil, nodeSet: [RedisNodeInfo]? = nil, resourceTags: [ResourceTag]? = nil, zoneName: String? = nil, templateId: String? = nil, dryRun: Bool? = nil, productVersion: String? = nil, redisClusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInstancesResponse> {
        self.createInstances(.init(typeId: typeId, memSize: memSize, goodsNum: goodsNum, period: period, billingMode: billingMode, zoneId: zoneId, password: password, vpcId: vpcId, subnetId: subnetId, projectId: projectId, autoRenew: autoRenew, securityGroupIdList: securityGroupIdList, vPort: vPort, redisShardNum: redisShardNum, redisReplicasNum: redisReplicasNum, replicasReadonly: replicasReadonly, instanceName: instanceName, noAuth: noAuth, nodeSet: nodeSet, resourceTags: resourceTags, zoneName: zoneName, templateId: templateId, dryRun: dryRun, productVersion: productVersion, redisClusterId: redisClusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 创建Redis实例
    ///
    /// 本接口（CreateInstances）用于创建 Redis 实例。
    @inlinable
    public func createInstances(typeId: UInt64, memSize: UInt64, goodsNum: UInt64, period: UInt64, billingMode: Int64, zoneId: UInt64? = nil, password: String? = nil, vpcId: String? = nil, subnetId: String? = nil, projectId: Int64? = nil, autoRenew: UInt64? = nil, securityGroupIdList: [String]? = nil, vPort: UInt64? = nil, redisShardNum: Int64? = nil, redisReplicasNum: Int64? = nil, replicasReadonly: Bool? = nil, instanceName: String? = nil, noAuth: Bool? = nil, nodeSet: [RedisNodeInfo]? = nil, resourceTags: [ResourceTag]? = nil, zoneName: String? = nil, templateId: String? = nil, dryRun: Bool? = nil, productVersion: String? = nil, redisClusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInstancesResponse {
        try await self.createInstances(.init(typeId: typeId, memSize: memSize, goodsNum: goodsNum, period: period, billingMode: billingMode, zoneId: zoneId, password: password, vpcId: vpcId, subnetId: subnetId, projectId: projectId, autoRenew: autoRenew, securityGroupIdList: securityGroupIdList, vPort: vPort, redisShardNum: redisShardNum, redisReplicasNum: redisReplicasNum, replicasReadonly: replicasReadonly, instanceName: instanceName, noAuth: noAuth, nodeSet: nodeSet, resourceTags: resourceTags, zoneName: zoneName, templateId: templateId, dryRun: dryRun, productVersion: productVersion, redisClusterId: redisClusterId), region: region, logger: logger, on: eventLoop)
    }
}
