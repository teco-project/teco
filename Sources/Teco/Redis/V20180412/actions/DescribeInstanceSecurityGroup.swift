//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// DescribeInstanceSecurityGroup请求参数结构体
    public struct DescribeInstanceSecurityGroupRequest: TCRequest {
        /// 实例 ID 列表。例如;["crs-f2ho5rsz\n"]
        public let instanceIds: [String]

        public init(instanceIds: [String]) {
            self.instanceIds = instanceIds
        }

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
        }
    }

    /// DescribeInstanceSecurityGroup返回参数结构体
    public struct DescribeInstanceSecurityGroupResponse: TCResponse {
        /// 实例安全组信息。
        public let instanceSecurityGroupsDetail: [InstanceSecurityGroupDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceSecurityGroupsDetail = "InstanceSecurityGroupsDetail"
            case requestId = "RequestId"
        }
    }

    /// 查询实例安全组信息
    ///
    /// 本接口（DescribeInstanceSecurityGroup）用于查询实例安全组信息。
    @inlinable
    public func describeInstanceSecurityGroup(_ input: DescribeInstanceSecurityGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceSecurityGroupResponse> {
        self.client.execute(action: "DescribeInstanceSecurityGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例安全组信息
    ///
    /// 本接口（DescribeInstanceSecurityGroup）用于查询实例安全组信息。
    @inlinable
    public func describeInstanceSecurityGroup(_ input: DescribeInstanceSecurityGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceSecurityGroupResponse {
        try await self.client.execute(action: "DescribeInstanceSecurityGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例安全组信息
    ///
    /// 本接口（DescribeInstanceSecurityGroup）用于查询实例安全组信息。
    @inlinable
    public func describeInstanceSecurityGroup(instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceSecurityGroupResponse> {
        self.describeInstanceSecurityGroup(.init(instanceIds: instanceIds), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例安全组信息
    ///
    /// 本接口（DescribeInstanceSecurityGroup）用于查询实例安全组信息。
    @inlinable
    public func describeInstanceSecurityGroup(instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceSecurityGroupResponse {
        try await self.describeInstanceSecurityGroup(.init(instanceIds: instanceIds), region: region, logger: logger, on: eventLoop)
    }
}
