//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// DescribeBandwidthRange请求参数结构体
    public struct DescribeBandwidthRangeRequest: TCRequestModel {
        /// 实例 ID。
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeBandwidthRange返回参数结构体
    public struct DescribeBandwidthRangeResponse: TCResponseModel {
        /// 标准带宽。指购买实例时，系统为每个节点分配的带宽。
        public let baseBandwidth: Int64

        /// 指实例的附加带宽。标准带宽不满足需求的情况下，用户可自行增加的带宽。
        /// - 开启副本只读时，实例总带宽 = 附加带宽 * 分片数 + 标准带宽 * 分片数 * Max ([只读副本数量, 1])，标准架构的分片数 = 1。
        /// - 没有开启副本只读时，实例总带宽 = 附加带宽 * 分片数 + 标准带宽 * 分片数，标准架构的分片数 = 1。
        public let addBandwidth: Int64

        /// 附加带宽设置下限。
        public let minAddBandwidth: Int64

        /// 附加带宽设置上限。
        public let maxAddBandwidth: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case baseBandwidth = "BaseBandwidth"
            case addBandwidth = "AddBandwidth"
            case minAddBandwidth = "MinAddBandwidth"
            case maxAddBandwidth = "MaxAddBandwidth"
            case requestId = "RequestId"
        }
    }

    /// 查询实例带宽信息
    ///
    /// 本接口（DescribeBandwidthRange）用于查询实例带宽信息。
    @inlinable
    public func describeBandwidthRange(_ input: DescribeBandwidthRangeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBandwidthRangeResponse> {
        self.client.execute(action: "DescribeBandwidthRange", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例带宽信息
    ///
    /// 本接口（DescribeBandwidthRange）用于查询实例带宽信息。
    @inlinable
    public func describeBandwidthRange(_ input: DescribeBandwidthRangeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBandwidthRangeResponse {
        try await self.client.execute(action: "DescribeBandwidthRange", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例带宽信息
    ///
    /// 本接口（DescribeBandwidthRange）用于查询实例带宽信息。
    @inlinable
    public func describeBandwidthRange(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBandwidthRangeResponse> {
        self.describeBandwidthRange(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例带宽信息
    ///
    /// 本接口（DescribeBandwidthRange）用于查询实例带宽信息。
    @inlinable
    public func describeBandwidthRange(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBandwidthRangeResponse {
        try await self.describeBandwidthRange(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
