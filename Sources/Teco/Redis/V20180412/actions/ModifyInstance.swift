//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Redis {
    /// 修改实例相关信息
    @inlinable
    public func modifyInstance(_ input: ModifyInstanceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyInstanceResponse > {
        self.client.execute(action: "ModifyInstance", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改实例相关信息
    @inlinable
    public func modifyInstance(_ input: ModifyInstanceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceResponse {
        try await self.client.execute(action: "ModifyInstance", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyInstance请求参数结构体
    public struct ModifyInstanceRequest: TCRequestModel {
        /// 修改实例操作，如填写：rename-表示实例重命名；modifyProject-修改实例所属项目；modifyAutoRenew-修改实例续费标记
        public let operation: String
        
        /// 实例Id
        public let instanceIds: [String]?
        
        /// 实例的新名称
        public let instanceNames: [String]?
        
        /// 项目Id
        public let projectId: Int64?
        
        /// 自动续费标识。0 - 默认状态（手动续费）；1 - 自动续费；2 - 明确不自动续费
        public let autoRenews: [Int64]?
        
        /// 已经废弃
        public let instanceId: String?
        
        /// 已经废弃
        public let instanceName: String?
        
        /// 已经废弃
        public let autoRenew: Int64?
        
        public init (operation: String, instanceIds: [String]?, instanceNames: [String]?, projectId: Int64?, autoRenews: [Int64]?, instanceId: String?, instanceName: String?, autoRenew: Int64?) {
            self.operation = operation
            self.instanceIds = instanceIds
            self.instanceNames = instanceNames
            self.projectId = projectId
            self.autoRenews = autoRenews
            self.instanceId = instanceId
            self.instanceName = instanceName
            self.autoRenew = autoRenew
        }
        
        enum CodingKeys: String, CodingKey {
            case operation = "Operation"
            case instanceIds = "InstanceIds"
            case instanceNames = "InstanceNames"
            case projectId = "ProjectId"
            case autoRenews = "AutoRenews"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case autoRenew = "AutoRenew"
        }
    }
    
    /// ModifyInstance返回参数结构体
    public struct ModifyInstanceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}
