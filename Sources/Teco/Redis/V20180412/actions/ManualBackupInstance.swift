//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Redis {
    /// ManualBackupInstance请求参数结构体
    public struct ManualBackupInstanceRequest: TCRequest {
        /// 指定实例 ID。例如：crs-xjhsdj****。请登录[Redis控制台](https://console.cloud.tencent.com/redis)在实例列表复制实例 ID。
        public let instanceId: String

        /// 手动备份任务的备注信息。
        public let remark: String?

        /// 备份数据的保存天数。
        /// - 单位：天；默认值为7天；取值范围：[0.1825]。如果超过 7天，请[提交工单](https://console.cloud.tencent.com/workorder/category)申请。
        /// - 如果不配置该参数，默认与自动备份的保留时间一致。
        /// - 如果未设置自动备份，默认为7天。
        public let storageDays: Int64?

        public init(instanceId: String, remark: String? = nil, storageDays: Int64? = nil) {
            self.instanceId = instanceId
            self.remark = remark
            self.storageDays = storageDays
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case remark = "Remark"
            case storageDays = "StorageDays"
        }
    }

    /// ManualBackupInstance返回参数结构体
    public struct ManualBackupInstanceResponse: TCResponse {
        /// 任务ID
        public let taskId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 手动备份Redis实例
    ///
    /// 本接口（ManualBackupInstance）用于手动备份Redis实例。
    @inlinable
    public func manualBackupInstance(_ input: ManualBackupInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ManualBackupInstanceResponse> {
        self.client.execute(action: "ManualBackupInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 手动备份Redis实例
    ///
    /// 本接口（ManualBackupInstance）用于手动备份Redis实例。
    @inlinable
    public func manualBackupInstance(_ input: ManualBackupInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ManualBackupInstanceResponse {
        try await self.client.execute(action: "ManualBackupInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 手动备份Redis实例
    ///
    /// 本接口（ManualBackupInstance）用于手动备份Redis实例。
    @inlinable
    public func manualBackupInstance(instanceId: String, remark: String? = nil, storageDays: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ManualBackupInstanceResponse> {
        self.manualBackupInstance(.init(instanceId: instanceId, remark: remark, storageDays: storageDays), region: region, logger: logger, on: eventLoop)
    }

    /// 手动备份Redis实例
    ///
    /// 本接口（ManualBackupInstance）用于手动备份Redis实例。
    @inlinable
    public func manualBackupInstance(instanceId: String, remark: String? = nil, storageDays: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ManualBackupInstanceResponse {
        try await self.manualBackupInstance(.init(instanceId: instanceId, remark: remark, storageDays: storageDays), region: region, logger: logger, on: eventLoop)
    }
}
