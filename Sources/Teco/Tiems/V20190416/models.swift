//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tiems {
    /// 状态
    public struct Conditions: TCOutputModel {
        /// 原因
        public let reason: String

        /// 具有相同原因的副本个数
        public let count: UInt64

        enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case count = "Count"
        }
    }

    /// 配置
    public struct Config: TCOutputModel {
        /// Id
        public let id: String

        /// 配置名
        public let name: String

        /// 模型地址
        public let modelUri: String

        /// 创建时间
        public let createTime: String

        /// 运行环境
        public let runtime: String

        /// 配置版本
        public let version: String

        /// 更新时间
        public let updateTime: String

        /// 配置描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case modelUri = "ModelUri"
            case createTime = "CreateTime"
            case runtime = "Runtime"
            case version = "Version"
            case updateTime = "UpdateTime"
            case description = "Description"
        }
    }

    /// 暴露信息
    public struct ExposeInfo: TCOutputModel {
        /// 暴露方式，支持 EXTERNAL（外网暴露），VPC （VPC内网打通）
        public let exposeType: String

        /// 暴露Ip。暴露方式为 EXTERNAL 为外网 Ip，暴露方式为 VPC 时为指定 Vpc 下的Vip
        public let ip: String

        /// 暴露方式为 VPC 时，打通的私有网络Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 暴露方式为 VPC 时，打通的子网Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// GATEWAY 服务id，ExposeType = GATEWAY 时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gateWayServiceId: String?

        /// GATEWAY api id，ExposeType = GATEWAY 时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gateWayAPIId: String?

        /// GATEWAY domain，ExposeType = GATEWAY 时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gateWayDomain: String?

        enum CodingKeys: String, CodingKey {
            case exposeType = "ExposeType"
            case ip = "Ip"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case gateWayServiceId = "GateWayServiceId"
            case gateWayAPIId = "GateWayAPIId"
            case gateWayDomain = "GateWayDomain"
        }
    }

    /// 筛选项
    public struct Filter: TCInputModel {
        /// 名称
        public let name: String

        /// 取值
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 节点
    public struct Instance: TCOutputModel {
        /// 节点 ID
        public let id: String

        /// 节点所在地区
        public let zone: String

        /// 节点类型
        public let instanceType: String

        /// 节点充值类型
        public let instanceChargeType: String

        /// Cpu 核数
        public let cpu: UInt64

        /// 内存
        public let memory: UInt64

        /// Gpu 核数
        public let gpu: UInt64

        /// 节点状态
        public let state: String

        /// 节点故障信息
        public let abnormalReason: String

        /// 创建时间
        public let created: String

        /// 更新时间
        public let updated: String

        /// 到期时间
        public let deadlineTime: String

        /// 所属资源组 ID
        public let resourceGroupId: String

        /// 自动续费标签
        public let renewFlag: String

        /// 节点所在地域
        public let region: String

        /// 当前 Cpu 申请使用量
        public let cpuRequested: UInt64

        /// 当前 Memory 申请使用量
        public let memoryRequested: UInt64

        /// 当前 Gpu 申请使用量
        public let gpuRequested: UInt64

        /// 节点所在伸缩组 ID
        public let rsgAsGroupId: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case zone = "Zone"
            case instanceType = "InstanceType"
            case instanceChargeType = "InstanceChargeType"
            case cpu = "Cpu"
            case memory = "Memory"
            case gpu = "Gpu"
            case state = "State"
            case abnormalReason = "AbnormalReason"
            case created = "Created"
            case updated = "Updated"
            case deadlineTime = "DeadlineTime"
            case resourceGroupId = "ResourceGroupId"
            case renewFlag = "RenewFlag"
            case region = "Region"
            case cpuRequested = "CpuRequested"
            case memoryRequested = "MemoryRequested"
            case gpuRequested = "GpuRequested"
            case rsgAsGroupId = "RsgAsGroupId"
        }
    }

    /// 任务
    public struct Job: TCOutputModel {
        /// 任务 Id
        public let id: String

        /// 集群名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cluster: String?

        /// Region 名
        public let region: String

        /// 任务名称
        public let name: String

        /// Worker 使用的运行环境
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runtime: String?

        /// 任务描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 配置 Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configId: String?

        /// 预测输入
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let predictInput: PredictInput?

        /// 任务状态
        public let status: JobStatus

        /// 任务创建时间
        public let createTime: String

        /// 任务开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 任务结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 任务取消时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cancelTime: String?

        /// 任务使用资源组 Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupId: String?

        /// 处理器配置, 单位为1/1000核；范围[100, 256000]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpu: UInt64?

        /// 内存配置, 单位为1M；范围[100, 256000]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memory: UInt64?

        /// GPU算力配置，单位为1/1000 卡，范围 [0, 256000]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpu: UInt64?

        /// 显存配置, 单位为1M，范围 [0, 256000]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuMemory: UInt64?

        /// 任务使用资源组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupName: String?

        /// GPU类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuType: String?

        /// 配置名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configName: String?

        /// 配置版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configVersion: String?

        /// Job类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobType: String?

        /// 量化输入
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quantizationInput: QuantizationInput?

        /// Cls日志主题ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logTopicId: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case cluster = "Cluster"
            case region = "Region"
            case name = "Name"
            case runtime = "Runtime"
            case description = "Description"
            case configId = "ConfigId"
            case predictInput = "PredictInput"
            case status = "Status"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case cancelTime = "CancelTime"
            case resourceGroupId = "ResourceGroupId"
            case cpu = "Cpu"
            case memory = "Memory"
            case gpu = "Gpu"
            case gpuMemory = "GpuMemory"
            case resourceGroupName = "ResourceGroupName"
            case gpuType = "GpuType"
            case configName = "ConfigName"
            case configVersion = "ConfigVersion"
            case jobType = "JobType"
            case quantizationInput = "QuantizationInput"
            case logTopicId = "LogTopicId"
        }
    }

    /// 任务状态
    public struct JobStatus: TCOutputModel {
        /// 任务状态
        public let status: String

        /// 错误时为错误描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 预期Worker数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let desiredWorkers: UInt64?

        /// 当前Worker数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentWorkers: UInt64?

        /// 副本名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicas: [String]?

        /// 副本实例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicaInfos: [ReplicaInfo]?

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case message = "Message"
            case desiredWorkers = "DesiredWorkers"
            case currentWorkers = "CurrentWorkers"
            case replicas = "Replicas"
            case replicaInfos = "ReplicaInfos"
        }
    }

    /// 模型服务
    public struct ModelService: TCOutputModel {
        /// 服务ID
        public let id: String

        /// 运行集群
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cluster: String?

        /// 服务名称
        public let name: String

        /// 运行环境
        public let runtime: String

        /// 模型地址
        public let modelUri: String

        /// 处理器配置, 单位为1/1000核
        public let cpu: UInt64

        /// 内存配置, 单位为1M
        public let memory: UInt64

        /// GPU 配置, 单位为1/1000 卡
        public let gpu: UInt64

        /// 显存配置, 单位为1M
        public let gpuMemory: UInt64

        /// 创建时间
        public let createTime: String

        /// 更新时间
        public let updateTime: String

        /// 支持AUTO, MANUAL
        public let scaleMode: String

        /// 弹性伸缩配置
        public let scaler: Scaler

        /// 服务状态
        public let status: ServiceStatus

        /// 访问密钥
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessToken: String?

        /// 服务配置Id
        public let configId: String

        /// 服务配置名
        public let configName: String

        /// 服务运行时长
        public let serveSeconds: UInt64

        /// 配置版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configVersion: String?

        /// 服务使用资源组 Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupId: String?

        /// 暴露方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exposes: [ExposeInfo]?

        /// Region 名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 服务使用资源组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupName: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// GPU类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuType: String?

        /// Cls日志主题Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logTopicId: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case cluster = "Cluster"
            case name = "Name"
            case runtime = "Runtime"
            case modelUri = "ModelUri"
            case cpu = "Cpu"
            case memory = "Memory"
            case gpu = "Gpu"
            case gpuMemory = "GpuMemory"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case scaleMode = "ScaleMode"
            case scaler = "Scaler"
            case status = "Status"
            case accessToken = "AccessToken"
            case configId = "ConfigId"
            case configName = "ConfigName"
            case serveSeconds = "ServeSeconds"
            case configVersion = "ConfigVersion"
            case resourceGroupId = "ResourceGroupId"
            case exposes = "Exposes"
            case region = "Region"
            case resourceGroupName = "ResourceGroupName"
            case description = "Description"
            case gpuType = "GpuType"
            case logTopicId = "LogTopicId"
        }
    }

    /// 配置项
    public struct Option: TCInputModel, TCOutputModel {
        /// 名称
        public let name: String

        /// 取值
        public let value: Int64

        public init(name: String, value: Int64) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 预测输入
    public struct PredictInput: TCInputModel, TCOutputModel {
        /// 输入路径，支持 cos 格式路径文件夹或文件
        public let inputPath: String

        /// 输出路径，支持 cos 格式路径
        public let outputPath: String

        /// 输入数据格式，目前支持：JSON
        public let inputDataFormat: String?

        /// 输出数据格式，目前支持：JSON
        public let outputDataFormat: String?

        /// 预测批大小，默认为 64
        public let batchSize: UInt64?

        /// 模型签名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signatureName: String?

        public init(inputPath: String, outputPath: String, inputDataFormat: String? = nil, outputDataFormat: String? = nil, batchSize: UInt64? = nil, signatureName: String? = nil) {
            self.inputPath = inputPath
            self.outputPath = outputPath
            self.inputDataFormat = inputDataFormat
            self.outputDataFormat = outputDataFormat
            self.batchSize = batchSize
            self.signatureName = signatureName
        }

        enum CodingKeys: String, CodingKey {
            case inputPath = "InputPath"
            case outputPath = "OutputPath"
            case inputDataFormat = "InputDataFormat"
            case outputDataFormat = "OutputDataFormat"
            case batchSize = "BatchSize"
            case signatureName = "SignatureName"
        }
    }

    /// 量化输入
    public struct QuantizationInput: TCInputModel, TCOutputModel {
        /// 量化输入路径
        public let inputPath: String

        /// 量化输出路径
        public let outputPath: String

        /// 量化批大小
        public let batchSize: UInt64?

        /// 量化精度，支持：FP32，FP16，INT8
        public let precision: String?

        /// 转换类型
        public let convertType: String?

        public init(inputPath: String, outputPath: String, batchSize: UInt64? = nil, precision: String? = nil, convertType: String? = nil) {
            self.inputPath = inputPath
            self.outputPath = outputPath
            self.batchSize = batchSize
            self.precision = precision
            self.convertType = convertType
        }

        enum CodingKeys: String, CodingKey {
            case inputPath = "InputPath"
            case outputPath = "OutputPath"
            case batchSize = "BatchSize"
            case precision = "Precision"
            case convertType = "ConvertType"
        }
    }

    /// 实例信息
    public struct ReplicaInfo: TCOutputModel {
        /// 实例名称
        public let name: String

        /// 弹性网卡模式时，弹性网卡Ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eniIp: String?

        /// Normal: 正常运行中; Abnormal: 异常；Waiting：等待中
        public let status: String

        /// 当 status为 Abnormal 的时候，一些额外的信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 启动时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 重启次数
        public let restarted: UInt64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case eniIp = "EniIp"
            case status = "Status"
            case message = "Message"
            case startTime = "StartTime"
            case createTime = "CreateTime"
            case restarted = "Restarted"
        }
    }

    /// 资源组
    public struct ResourceGroup: TCOutputModel {
        /// 资源组 Id
        public let id: String

        /// 地域
        public let region: String

        /// 集群
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cluster: String?

        /// 资源组名称
        public let name: String

        /// 资源组描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 创建时间
        public let created: String

        /// 更新时间
        public let updated: String

        /// 资源组主机数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceCount: UInt64?

        /// 使用资源组的服务数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceCount: UInt64?

        /// 使用资源组的任务数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobCount: UInt64?

        /// 资源组是否为公共资源组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `public`: Bool?

        /// 机器类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceType: String?

        /// 资源组状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 显卡总张数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpu: UInt64?

        /// 处理器总核数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpu: UInt64?

        /// 内存总量，单位为G
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memory: UInt64?

        /// 可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// Gpu类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuType: [String]?

        /// 该资源组下是否有预付费资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasPrepaid: Bool?

        /// 资源组是否允许预付费或后付费模式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case region = "Region"
            case cluster = "Cluster"
            case name = "Name"
            case description = "Description"
            case created = "Created"
            case updated = "Updated"
            case instanceCount = "InstanceCount"
            case serviceCount = "ServiceCount"
            case jobCount = "JobCount"
            case `public` = "Public"
            case instanceType = "InstanceType"
            case status = "Status"
            case gpu = "Gpu"
            case cpu = "Cpu"
            case memory = "Memory"
            case zone = "Zone"
            case gpuType = "GpuType"
            case hasPrepaid = "HasPrepaid"
            case payMode = "PayMode"
        }
    }

    /// 伸缩组活动关联的节点
    public struct RsgAsActivityRelatedInstance: TCOutputModel {
        /// 节点 ID
        public let instanceId: String

        /// 节点状态
        public let instanceStatus: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceStatus = "InstanceStatus"
        }
    }

    /// 资源组的伸缩组
    public struct RsgAsGroup: TCOutputModel {
        /// 伸缩组 ID
        public let id: String

        /// 伸缩组所在地域
        public let region: String

        /// 伸缩组所在可用区
        public let zone: String

        /// 伸缩组所在集群
        public let cluster: String

        /// 伸缩组所在资源组 ID
        public let rsgId: String

        /// 伸缩组名称
        public let name: String

        /// 伸缩组允许的最大节点个数
        public let maxSize: UInt64

        /// 伸缩组允许的最小节点个数
        public let minSize: UInt64

        /// 伸缩组创建时间
        public let createTime: String

        /// 伸缩组更新时间
        public let updateTime: String

        /// 伸缩组状态
        public let status: String

        /// 伸缩组节点类型
        public let instanceType: String

        /// 伸缩组内节点个数
        public let instanceCount: UInt64

        /// 伸缩组起始节点数
        public let desiredSize: UInt64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case region = "Region"
            case zone = "Zone"
            case cluster = "Cluster"
            case rsgId = "RsgId"
            case name = "Name"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case status = "Status"
            case instanceType = "InstanceType"
            case instanceCount = "InstanceCount"
            case desiredSize = "DesiredSize"
        }
    }

    /// 伸缩组活动信息
    public struct RsgAsGroupActivity: TCOutputModel {
        /// 伸缩组活动 ID
        public let id: String

        /// 关联的伸缩组 ID
        public let rsgAsGroupId: String

        /// 活动类型
        public let activityType: String

        /// 状态的编码
        public let statusCode: String

        /// 状态的消息
        public let statusMessage: String

        /// 活动原因
        public let cause: String

        /// 活动描述
        public let description: String

        /// 活动开始时间
        public let startTime: String

        /// 活动结束时间
        public let endTime: String

        /// 活动创建时间
        public let createTime: String

        /// 活动相关联的节点
        public let rsgAsActivityRelatedInstance: [RsgAsActivityRelatedInstance]

        /// 简略的状态消息
        public let statusMessageSimplified: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case rsgAsGroupId = "RsgAsGroupId"
            case activityType = "ActivityType"
            case statusCode = "StatusCode"
            case statusMessage = "StatusMessage"
            case cause = "Cause"
            case description = "Description"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case createTime = "CreateTime"
            case rsgAsActivityRelatedInstance = "RsgAsActivityRelatedInstance"
            case statusMessageSimplified = "StatusMessageSimplified"
        }
    }

    /// 运行环境
    public struct Runtime: TCOutputModel {
        /// 运行环境名称
        public let name: String

        /// 运行环境框架
        public let framework: String

        /// 运行环境描述
        public let description: String

        /// 是否为公开运行环境
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `public`: Bool?

        /// 是否打开健康检查
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthCheckOn: Bool?

        /// 镜像地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let image: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case framework = "Framework"
            case description = "Description"
            case `public` = "Public"
            case healthCheckOn = "HealthCheckOn"
            case image = "Image"
            case createTime = "CreateTime"
        }
    }

    /// 扩缩容配置
    public struct Scaler: TCInputModel, TCOutputModel {
        /// 最大副本数，ScaleMode 为 MANUAL 时辞会此值会被置为 StartReplicas 取值
        public let maxReplicas: UInt64

        /// 最小副本数，ScaleMode 为 MANUAL 时辞会此值会被置为 StartReplicas 取值
        public let minReplicas: UInt64

        /// 起始副本数
        public let startReplicas: UInt64

        /// 扩缩容指标，选择自动扩缩容时至少需要选择一个指标，支持CPU-UTIL、MEMORY-UTIL
        public let hpaMetrics: [Option]?

        public init(maxReplicas: UInt64, minReplicas: UInt64, startReplicas: UInt64, hpaMetrics: [Option]? = nil) {
            self.maxReplicas = maxReplicas
            self.minReplicas = minReplicas
            self.startReplicas = startReplicas
            self.hpaMetrics = hpaMetrics
        }

        enum CodingKeys: String, CodingKey {
            case maxReplicas = "MaxReplicas"
            case minReplicas = "MinReplicas"
            case startReplicas = "StartReplicas"
            case hpaMetrics = "HpaMetrics"
        }
    }

    /// 服务状态
    public struct ServiceStatus: TCOutputModel {
        /// 预期副本数
        public let desiredReplicas: UInt64

        /// 当前副本数
        public let currentReplicas: UInt64

        /// Normal：正常运行中；Abnormal：服务异常，例如容器启动失败等；Waiting：服务等待中，例如容器下载镜像过程等；Stopped：已停止 Stopping 停止中；Resuming：重启中；Updating：服务更新中
        public let status: String

        /// 服务处于当前状态的原因集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditions: [Conditions]?

        /// 副本名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicas: [String]?

        /// 运行状态对额外信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 副本信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicaInfos: [ReplicaInfo]?

        enum CodingKeys: String, CodingKey {
            case desiredReplicas = "DesiredReplicas"
            case currentReplicas = "CurrentReplicas"
            case status = "Status"
            case conditions = "Conditions"
            case replicas = "Replicas"
            case message = "Message"
            case replicaInfos = "ReplicaInfos"
        }
    }
}
