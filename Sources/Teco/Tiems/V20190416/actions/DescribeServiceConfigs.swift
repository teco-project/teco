//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tiems {
    /// 描述服务配置
    ///
    /// 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。
    /// 描述服务配置
    @inlinable
    public func describeServiceConfigs(_ input: DescribeServiceConfigsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeServiceConfigsResponse > {
        self.client.execute(action: "DescribeServiceConfigs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 描述服务配置
    ///
    /// 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。
    /// 描述服务配置
    @inlinable
    public func describeServiceConfigs(_ input: DescribeServiceConfigsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeServiceConfigsResponse {
        try await self.client.execute(action: "DescribeServiceConfigs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeServiceConfigs请求参数结构体
    public struct DescribeServiceConfigsRequest: TCRequestModel {
        /// 筛选选项，支持按照name等进行筛选
        public let filters: [Filter]?
        
        /// 偏移量，默认为0
        public let offset: UInt64?
        
        /// 返回数量，默认为20，最大值为1000
        public let limit: UInt64?
        
        /// 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列
        public let order: String?
        
        /// 排序的依据字段， 取值范围 "CREATE_TIME", "UPDATE_TIME", "NAME"
        public let orderField: String?
        
        /// 是否按照配置名分页
        public let pageByName: Bool?
        
        public init (filters: [Filter]?, offset: UInt64?, limit: UInt64?, order: String?, orderField: String?, pageByName: Bool?) {
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.order = order
            self.orderField = orderField
            self.pageByName = pageByName
        }
        
        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
            case order = "Order"
            case orderField = "OrderField"
            case pageByName = "PageByName"
        }
    }
    
    /// DescribeServiceConfigs返回参数结构体
    public struct DescribeServiceConfigsResponse: TCResponseModel {
        /// 服务配置
        public let serviceConfigs: [Config]
        
        /// 服务配置总数
        public let totalCount: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case serviceConfigs = "ServiceConfigs"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
}