//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tiems {
    /// CreateRsgAsGroup请求参数结构体
    public struct CreateRsgAsGroupRequest: TCRequestModel {
        /// 资源组 ID
        public let rsgId: String

        /// 伸缩组允许的最大节点数
        public let maxSize: UInt64

        /// 伸缩组允许的最小节点数
        public let minSize: UInt64

        /// 伸缩组的节点规格
        public let instanceType: String

        /// 资源组所在的集群名
        public let cluster: String?

        /// 伸缩组名称
        public let name: String?

        /// 伸缩组期望的节点数
        public let desiredSize: UInt64?

        public init(rsgId: String, maxSize: UInt64, minSize: UInt64, instanceType: String, cluster: String? = nil, name: String? = nil, desiredSize: UInt64? = nil) {
            self.rsgId = rsgId
            self.maxSize = maxSize
            self.minSize = minSize
            self.instanceType = instanceType
            self.cluster = cluster
            self.name = name
            self.desiredSize = desiredSize
        }

        enum CodingKeys: String, CodingKey {
            case rsgId = "RsgId"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case instanceType = "InstanceType"
            case cluster = "Cluster"
            case name = "Name"
            case desiredSize = "DesiredSize"
        }
    }

    /// CreateRsgAsGroup返回参数结构体
    public struct CreateRsgAsGroupResponse: TCResponseModel {
        /// 所创建的资源组的伸缩组
        public let rsgAsGroup: RsgAsGroup

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case rsgAsGroup = "RsgAsGroup"
            case requestId = "RequestId"
        }
    }

    /// 创建资源组的伸缩组
    ///
    /// 创建资源组的伸缩组。当前一个资源组仅允许创建一个伸缩组。
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createRsgAsGroup(_ input: CreateRsgAsGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRsgAsGroupResponse> {
        fatalError("CreateRsgAsGroup is no longer available.")
    }

    /// 创建资源组的伸缩组
    ///
    /// 创建资源组的伸缩组。当前一个资源组仅允许创建一个伸缩组。
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createRsgAsGroup(_ input: CreateRsgAsGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRsgAsGroupResponse {
        fatalError("CreateRsgAsGroup is no longer available.")
    }

    /// 创建资源组的伸缩组
    ///
    /// 创建资源组的伸缩组。当前一个资源组仅允许创建一个伸缩组。
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createRsgAsGroup(rsgId: String, maxSize: UInt64, minSize: UInt64, instanceType: String, cluster: String? = nil, name: String? = nil, desiredSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRsgAsGroupResponse> {
        fatalError("CreateRsgAsGroup is no longer available.")
    }

    /// 创建资源组的伸缩组
    ///
    /// 创建资源组的伸缩组。当前一个资源组仅允许创建一个伸缩组。
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createRsgAsGroup(rsgId: String, maxSize: UInt64, minSize: UInt64, instanceType: String, cluster: String? = nil, name: String? = nil, desiredSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRsgAsGroupResponse {
        fatalError("CreateRsgAsGroup is no longer available.")
    }
}
