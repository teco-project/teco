//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tiems {
    /// CreateJob请求参数结构体
    public struct CreateJobRequest: TCRequestModel {
        /// 任务名称
        public let name: String

        /// 使用的资源组 Id，默认使用共享资源组
        public let resourceGroupId: String

        /// 处理器配置, 单位为1/1000核；范围[100, 256000]
        public let cpu: UInt64

        /// 内存配置, 单位为1M；范围[100, 256000]
        public let memory: UInt64

        /// 运行集群
        public let cluster: String?

        /// 预测输入
        public let predictInput: PredictInput?

        /// 任务描述
        public let description: String?

        /// 同时处理任务的 Worker 个数
        public let workerCount: UInt64?

        /// 使用的配置 Id
        public let configId: String?

        /// GPU算力配置，单位为1/1000 卡，范围 [0, 256000]
        public let gpu: UInt64?

        /// 显存配置, 单位为1M，范围 [0, 256000]
        public let gpuMemory: UInt64?

        /// GPU类型
        public let gpuType: String?

        /// 量化输入
        public let quantizationInput: QuantizationInput?

        /// Cls日志主题ID
        public let logTopicId: String?

        public init(name: String, resourceGroupId: String, cpu: UInt64, memory: UInt64, cluster: String? = nil, predictInput: PredictInput? = nil, description: String? = nil, workerCount: UInt64? = nil, configId: String? = nil, gpu: UInt64? = nil, gpuMemory: UInt64? = nil, gpuType: String? = nil, quantizationInput: QuantizationInput? = nil, logTopicId: String? = nil) {
            self.name = name
            self.resourceGroupId = resourceGroupId
            self.cpu = cpu
            self.memory = memory
            self.cluster = cluster
            self.predictInput = predictInput
            self.description = description
            self.workerCount = workerCount
            self.configId = configId
            self.gpu = gpu
            self.gpuMemory = gpuMemory
            self.gpuType = gpuType
            self.quantizationInput = quantizationInput
            self.logTopicId = logTopicId
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case resourceGroupId = "ResourceGroupId"
            case cpu = "Cpu"
            case memory = "Memory"
            case cluster = "Cluster"
            case predictInput = "PredictInput"
            case description = "Description"
            case workerCount = "WorkerCount"
            case configId = "ConfigId"
            case gpu = "Gpu"
            case gpuMemory = "GpuMemory"
            case gpuType = "GpuType"
            case quantizationInput = "QuantizationInput"
            case logTopicId = "LogTopicId"
        }
    }

    /// CreateJob返回参数结构体
    public struct CreateJobResponse: TCResponseModel {
        /// 任务
        public let job: Job

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case job = "Job"
            case requestId = "RequestId"
        }
    }

    /// 创建任务
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createJob(_ input: CreateJobRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateJobResponse> {
        self.client.execute(action: "CreateJob", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建任务
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createJob(_ input: CreateJobRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateJobResponse {
        try await self.client.execute(action: "CreateJob", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建任务
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createJob(name: String, resourceGroupId: String, cpu: UInt64, memory: UInt64, cluster: String? = nil, predictInput: PredictInput? = nil, description: String? = nil, workerCount: UInt64? = nil, configId: String? = nil, gpu: UInt64? = nil, gpuMemory: UInt64? = nil, gpuType: String? = nil, quantizationInput: QuantizationInput? = nil, logTopicId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateJobResponse> {
        let input = CreateJobRequest(name: name, resourceGroupId: resourceGroupId, cpu: cpu, memory: memory, cluster: cluster, predictInput: predictInput, description: description, workerCount: workerCount, configId: configId, gpu: gpu, gpuMemory: gpuMemory, gpuType: gpuType, quantizationInput: quantizationInput, logTopicId: logTopicId)
        return self.client.execute(action: "CreateJob", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建任务
    @available(*, unavailable, message: "因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。")
    @inlinable
    public func createJob(name: String, resourceGroupId: String, cpu: UInt64, memory: UInt64, cluster: String? = nil, predictInput: PredictInput? = nil, description: String? = nil, workerCount: UInt64? = nil, configId: String? = nil, gpu: UInt64? = nil, gpuMemory: UInt64? = nil, gpuType: String? = nil, quantizationInput: QuantizationInput? = nil, logTopicId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateJobResponse {
        let input = CreateJobRequest(name: name, resourceGroupId: resourceGroupId, cpu: cpu, memory: memory, cluster: cluster, predictInput: predictInput, description: description, workerCount: workerCount, configId: configId, gpu: gpu, gpuMemory: gpuMemory, gpuType: gpuType, quantizationInput: quantizationInput, logTopicId: logTopicId)
        return try await self.client.execute(action: "CreateJob", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
