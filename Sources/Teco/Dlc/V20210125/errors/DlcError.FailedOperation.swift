//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDlcError {
    public struct FailedOperation: TCDlcErrorType {
        enum Code: String {
            case anotherRequestProcessing = "FailedOperation.AnotherRequestProcessing"
            case getPolicyFailed = "FailedOperation.GetPolicyFailed"
            case getUserInfoFailed = "FailedOperation.GetUserInfoFailed"
            case getWorkGroupInfoFailed = "FailedOperation.GetWorkGroupInfoFailed"
            case grantPolicyFailed = "FailedOperation.GrantPolicyFailed"
            case httpClientDoRequestFailed = "FailedOperation.HttpClientDoRequestFailed"
            case revokePolicyFailed = "FailedOperation.RevokePolicyFailed"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 另一个请求正在处理中，请稍后再试。
        public static var anotherRequestProcessing: FailedOperation {
            FailedOperation(.anotherRequestProcessing)
        }
        
        /// 请重试或联系我们
        public static var getPolicyFailed: FailedOperation {
            FailedOperation(.getPolicyFailed)
        }
        
        /// 请重试，如重试也失败，请联系我们。
        public static var getUserInfoFailed: FailedOperation {
            FailedOperation(.getUserInfoFailed)
        }
        
        /// 请重试或联系我们。
        public static var getWorkGroupInfoFailed: FailedOperation {
            FailedOperation(.getWorkGroupInfoFailed)
        }
        
        /// 请重试或联系我们。
        public static var grantPolicyFailed: FailedOperation {
            FailedOperation(.grantPolicyFailed)
        }
        
        /// HTTP客户端请求失败。
        public static var httpClientDoRequestFailed: FailedOperation {
            FailedOperation(.httpClientDoRequestFailed)
        }
        
        /// 请重试或联系我们。
        public static var revokePolicyFailed: FailedOperation {
            FailedOperation(.revokePolicyFailed)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
        
        public func asDlcError() -> TCDlcError {
            let code: TCDlcError.Code
            switch self.error {
            case .anotherRequestProcessing: 
                code = .failedOperation_AnotherRequestProcessing
            case .getPolicyFailed: 
                code = .failedOperation_GetPolicyFailed
            case .getUserInfoFailed: 
                code = .failedOperation_GetUserInfoFailed
            case .getWorkGroupInfoFailed: 
                code = .failedOperation_GetWorkGroupInfoFailed
            case .grantPolicyFailed: 
                code = .failedOperation_GrantPolicyFailed
            case .httpClientDoRequestFailed: 
                code = .failedOperation_HttpClientDoRequestFailed
            case .revokePolicyFailed: 
                code = .failedOperation_RevokePolicyFailed
            case .other: 
                code = .failedOperation
            }
            return TCDlcError(code, context: self.context)
        }
    }
}
