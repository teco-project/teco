//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDlcError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case anotherRequestProcessing = "FailedOperation.AnotherRequestProcessing"
            case getPolicyFailed = "FailedOperation.GetPolicyFailed"
            case getUserInfoFailed = "FailedOperation.GetUserInfoFailed"
            case getWorkGroupInfoFailed = "FailedOperation.GetWorkGroupInfoFailed"
            case grantPolicyFailed = "FailedOperation.GrantPolicyFailed"
            case httpClientDoRequestFailed = "FailedOperation.HttpClientDoRequestFailed"
            case revokePolicyFailed = "FailedOperation.RevokePolicyFailed"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 另一个请求正在处理中，请稍后再试。
        public static var anotherRequestProcessing: FailedOperation {
            FailedOperation(.anotherRequestProcessing)
        }
        
        /// 请重试或联系我们
        public static var getPolicyFailed: FailedOperation {
            FailedOperation(.getPolicyFailed)
        }
        
        /// 请重试，如重试也失败，请联系我们。
        public static var getUserInfoFailed: FailedOperation {
            FailedOperation(.getUserInfoFailed)
        }
        
        /// 请重试或联系我们。
        public static var getWorkGroupInfoFailed: FailedOperation {
            FailedOperation(.getWorkGroupInfoFailed)
        }
        
        /// 请重试或联系我们。
        public static var grantPolicyFailed: FailedOperation {
            FailedOperation(.grantPolicyFailed)
        }
        
        /// HTTP客户端请求失败。
        public static var httpClientDoRequestFailed: FailedOperation {
            FailedOperation(.httpClientDoRequestFailed)
        }
        
        /// 请重试或联系我们。
        public static var revokePolicyFailed: FailedOperation {
            FailedOperation(.revokePolicyFailed)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCDlcError.FailedOperation: Equatable {
    public static func == (lhs: TCDlcError.FailedOperation, rhs: TCDlcError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCDlcError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCDlcError.FailedOperation {
    /// - Returns: ``TCDlcError`` that holds the same error and context.
    public func toDlcError() -> TCDlcError {
        guard let code = TCDlcError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCDlcError(code, context: self.context)
    }
}

extension TCDlcError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
