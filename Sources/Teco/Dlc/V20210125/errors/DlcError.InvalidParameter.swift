//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDlcError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case duplicateGroupName = "InvalidParameter.DuplicateGroupName"
            case duplicateUserName = "InvalidParameter.DuplicateUserName"
            case invalidAccessPolicy = "InvalidParameter.InvalidAccessPolicy"
            case invalidDataEngineName = "InvalidParameter.InvalidDataEngineName"
            case invalidDescription = "InvalidParameter.InvalidDescription"
            case invalidFailureTolerance = "InvalidParameter.InvalidFailureTolerance"
            case invalidFilterKey = "InvalidParameter.InvalidFilterKey"
            case invalidGroupId = "InvalidParameter.InvalidGroupId"
            case invalidOffset = "InvalidParameter.InvalidOffset"
            case invalidRoleArn = "InvalidParameter.InvalidRoleArn"
            case invalidSQL = "InvalidParameter.InvalidSQL"
            case invalidSQLNum = "InvalidParameter.InvalidSQLNum"
            case invalidSortByType = "InvalidParameter.InvalidSortByType"
            case invalidSparkAppParam = "InvalidParameter.InvalidSparkAppParam"
            case invalidStoreLocation = "InvalidParameter.InvalidStoreLocation"
            case invalidTaskId = "InvalidParameter.InvalidTaskId"
            case invalidTaskType = "InvalidParameter.InvalidTaskType"
            case invalidUserAlias = "InvalidParameter.InvalidUserAlias"
            case invalidUserName = "InvalidParameter.InvalidUserName"
            case invalidUserType = "InvalidParameter.InvalidUserType"
            case invalidWorkGroupName = "InvalidParameter.InvalidWorkGroupName"
            case taskAlreadyFinished = "InvalidParameter.TaskAlreadyFinished"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 重复的工作组名称。
        public static var duplicateGroupName: InvalidParameter {
            InvalidParameter(.duplicateGroupName)
        }
        
        /// 重复的用户名。
        public static var duplicateUserName: InvalidParameter {
            InvalidParameter(.duplicateUserName)
        }
        
        /// 无效的访问策略。
        public static var invalidAccessPolicy: InvalidParameter {
            InvalidParameter(.invalidAccessPolicy)
        }
        
        /// 无效的数据引擎名。
        ///
        /// 一般是引擎名字重复或包含不支持的符号。
        public static var invalidDataEngineName: InvalidParameter {
            InvalidParameter(.invalidDataEngineName)
        }
        
        /// 无效的描述信息。
        public static var invalidDescription: InvalidParameter {
            InvalidParameter(.invalidDescription)
        }
        
        /// 无效的容错策略。
        public static var invalidFailureTolerance: InvalidParameter {
            InvalidParameter(.invalidFailureTolerance)
        }
        
        /// 请更换过滤条件。
        public static var invalidFilterKey: InvalidParameter {
            InvalidParameter(.invalidFilterKey)
        }
        
        /// 无效的工作组Id。
        public static var invalidGroupId: InvalidParameter {
            InvalidParameter(.invalidGroupId)
        }
        
        /// 无效的Offset值。
        public static var invalidOffset: InvalidParameter {
            InvalidParameter(.invalidOffset)
        }
        
        /// 请使用正确的已经授权的CAM role arn
        public static var invalidRoleArn: InvalidParameter {
            InvalidParameter(.invalidRoleArn)
        }
        
        /// SQL解析失败。
        public static var invalidSQL: InvalidParameter {
            InvalidParameter(.invalidSQL)
        }
        
        /// SQL数量不符合规范。
        ///
        /// 单次提交的SQL数量应该小于等于50，大于等于1。
        public static var invalidSQLNum: InvalidParameter {
            InvalidParameter(.invalidSQLNum)
        }
        
        /// 不支持的排序类型。
        public static var invalidSortByType: InvalidParameter {
            InvalidParameter(.invalidSortByType)
        }
        
        public static var invalidSparkAppParam: InvalidParameter {
            InvalidParameter(.invalidSparkAppParam)
        }
        
        /// 存储位置错误。
        public static var invalidStoreLocation: InvalidParameter {
            InvalidParameter(.invalidStoreLocation)
        }
        
        /// 无效的taskid。
        public static var invalidTaskId: InvalidParameter {
            InvalidParameter(.invalidTaskId)
        }
        
        /// 无效的任务类型。
        ///
        /// 填写正确的任务类型SQLTask
        public static var invalidTaskType: InvalidParameter {
            InvalidParameter(.invalidTaskType)
        }
        
        /// 无效用户名称。
        public static var invalidUserAlias: InvalidParameter {
            InvalidParameter(.invalidUserAlias)
        }
        
        /// 无效的用户名。
        public static var invalidUserName: InvalidParameter {
            InvalidParameter(.invalidUserName)
        }
        
        /// 无效的用户类型。
        ///
        /// 请检查用户类型是否存在或者其余入参是否符合所选用户类型的要求。
        public static var invalidUserType: InvalidParameter {
            InvalidParameter(.invalidUserType)
        }
        
        /// 无效的工作组名。
        public static var invalidWorkGroupName: InvalidParameter {
            InvalidParameter(.invalidWorkGroupName)
        }
        
        /// 任务已经结束，不能取消。
        ///
        /// 等待任务状态更新。
        public static var taskAlreadyFinished: InvalidParameter {
            InvalidParameter(.taskAlreadyFinished)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
    }
}

extension TCDlcError.InvalidParameter: Equatable {
    public static func == (lhs: TCDlcError.InvalidParameter, rhs: TCDlcError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCDlcError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCDlcError.InvalidParameter {
    /// - Returns: ``TCDlcError`` that holds the same error and context.
    public func toDlcError() -> TCDlcError {
        guard let code = TCDlcError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCDlcError(code, context: self.context)
    }
}

extension TCDlcError.InvalidParameter {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
