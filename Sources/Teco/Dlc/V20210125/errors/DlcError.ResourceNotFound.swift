//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCDlcError {
    public struct ResourceNotFound: TCDlcErrorType {
        enum Code: String {
            case datasourceNotFound = "ResourceNotFound.DatasourceNotFound"
            case resourceNotFoundCode_SessionInsufficientResources = "ResourceNotFound.ResourceNotFoundCode_SessionInsufficientResources"
            case resultOutputPathNotFound = "ResourceNotFound.ResultOutputPathNotFound"
            case sessionNotFound = "ResourceNotFound.SessionNotFound"
            case sessionStateDead = "ResourceNotFound.SessionStateDead"
            case other = "ResourceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 指定数据源连接没有找到。
        public static var datasourceNotFound: ResourceNotFound {
            ResourceNotFound(.datasourceNotFound)
        }

        /// 当前无资源创建session，请稍后重试或使用包年包月集群。
        public static var resourceNotFoundCode_SessionInsufficientResources: ResourceNotFound {
            ResourceNotFound(.resourceNotFoundCode_SessionInsufficientResources)
        }

        /// 未找到结果路径。
        public static var resultOutputPathNotFound: ResourceNotFound {
            ResourceNotFound(.resultOutputPathNotFound)
        }

        /// session不存在。
        public static var sessionNotFound: ResourceNotFound {
            ResourceNotFound(.sessionNotFound)
        }

        /// session已消亡。
        public static var sessionStateDead: ResourceNotFound {
            ResourceNotFound(.sessionStateDead)
        }

        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }

        public func asDlcError() -> TCDlcError {
            let code: TCDlcError.Code
            switch self.error {
            case .datasourceNotFound:
                code = .resourceNotFound_DatasourceNotFound
            case .resourceNotFoundCode_SessionInsufficientResources:
                code = .resourceNotFound_ResourceNotFoundCode_SessionInsufficientResources
            case .resultOutputPathNotFound:
                code = .resourceNotFound_ResultOutputPathNotFound
            case .sessionNotFound:
                code = .resourceNotFound_SessionNotFound
            case .sessionStateDead:
                code = .resourceNotFound_SessionStateDead
            case .other:
                code = .resourceNotFound
            }
            return TCDlcError(code, context: self.context)
        }
    }
}
