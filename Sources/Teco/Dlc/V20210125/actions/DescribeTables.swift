//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dlc {
    /// DescribeTables请求参数结构体
    public struct DescribeTablesRequest: TCRequestModel {
        /// 列出该数据库下所属数据表。
        public let databaseName: String

        /// 返回数量，默认为10，最大值为100。
        public let limit: Int64?

        /// 数据偏移量，从0开始，默认为0。
        public let offset: UInt64?

        /// 过滤条件，如下支持的过滤类型，传参Name应为其一
        /// table-name - String - （过滤条件）数据表名称,形如：table-001。
        /// table-id - String - （过滤条件）table id形如：12342。
        public let filters: [Filter]?

        /// 指定查询的数据源名称，默认为DataLakeCatalog
        public let datasourceConnectionName: String?

        /// 起始时间：用于对更新时间的筛选
        public let startTime: String?

        /// 终止时间：用于对更新时间的筛选
        public let endTime: String?

        /// 排序字段，支持：CreateTime、UpdateTime、StorageSize、RecordCount、Name（不传则默认按name升序）
        public let sort: String?

        /// 排序字段，false：降序（默认）；true：升序
        public let asc: Bool?

        /// table type，表类型查询,可用值:EXTERNAL_TABLE,INDEX_TABLE,MANAGED_TABLE,MATERIALIZED_VIEW,TABLE,VIEW,VIRTUAL_VIEW
        public let tableType: String?

        /// 筛选字段-表格式：不传（默认）为查全部；LAKEFS：托管表；ICEBERG：非托管iceberg表；HIVE：非托管hive表；OTHER：非托管其它；
        public let tableFormat: String?

        public init(databaseName: String, limit: Int64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, datasourceConnectionName: String? = nil, startTime: String? = nil, endTime: String? = nil, sort: String? = nil, asc: Bool? = nil, tableType: String? = nil, tableFormat: String? = nil) {
            self.databaseName = databaseName
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.datasourceConnectionName = datasourceConnectionName
            self.startTime = startTime
            self.endTime = endTime
            self.sort = sort
            self.asc = asc
            self.tableType = tableType
            self.tableFormat = tableFormat
        }

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case datasourceConnectionName = "DatasourceConnectionName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case sort = "Sort"
            case asc = "Asc"
            case tableType = "TableType"
            case tableFormat = "TableFormat"
        }
    }

    /// DescribeTables返回参数结构体
    public struct DescribeTablesResponse: TCResponseModel {
        /// 数据表对象列表。
        public let tableList: [TableResponseInfo]

        /// 实例总数。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case tableList = "TableList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询数据表列表
    ///
    /// 本接口（DescribeTables）用于查询数据表列表。
    @inlinable
    public func describeTables(_ input: DescribeTablesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTablesResponse> {
        self.client.execute(action: "DescribeTables", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询数据表列表
    ///
    /// 本接口（DescribeTables）用于查询数据表列表。
    @inlinable
    public func describeTables(_ input: DescribeTablesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTablesResponse {
        try await self.client.execute(action: "DescribeTables", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询数据表列表
    ///
    /// 本接口（DescribeTables）用于查询数据表列表。
    @inlinable
    public func describeTables(databaseName: String, limit: Int64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, datasourceConnectionName: String? = nil, startTime: String? = nil, endTime: String? = nil, sort: String? = nil, asc: Bool? = nil, tableType: String? = nil, tableFormat: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTablesResponse> {
        self.describeTables(DescribeTablesRequest(databaseName: databaseName, limit: limit, offset: offset, filters: filters, datasourceConnectionName: datasourceConnectionName, startTime: startTime, endTime: endTime, sort: sort, asc: asc, tableType: tableType, tableFormat: tableFormat), logger: logger, on: eventLoop)
    }

    /// 查询数据表列表
    ///
    /// 本接口（DescribeTables）用于查询数据表列表。
    @inlinable
    public func describeTables(databaseName: String, limit: Int64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, datasourceConnectionName: String? = nil, startTime: String? = nil, endTime: String? = nil, sort: String? = nil, asc: Bool? = nil, tableType: String? = nil, tableFormat: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTablesResponse {
        try await self.describeTables(DescribeTablesRequest(databaseName: databaseName, limit: limit, offset: offset, filters: filters, datasourceConnectionName: datasourceConnectionName, startTime: startTime, endTime: endTime, sort: sort, asc: asc, tableType: tableType, tableFormat: tableFormat), logger: logger, on: eventLoop)
    }
}
