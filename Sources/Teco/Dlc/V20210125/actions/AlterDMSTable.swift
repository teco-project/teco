//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Dlc {
    /// DMS元数据更新表
    ///
    /// DMS元数据更新表
    @inlinable
    public func alterDMSTable(_ input: AlterDMSTableRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < AlterDMSTableResponse > {
        self.client.execute(action: "AlterDMSTable", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// DMS元数据更新表
    ///
    /// DMS元数据更新表
    @inlinable
    public func alterDMSTable(_ input: AlterDMSTableRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AlterDMSTableResponse {
        try await self.client.execute(action: "AlterDMSTable", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// AlterDMSTable请求参数结构体
    public struct AlterDMSTableRequest: TCRequestModel {
        /// 当前名称
        public let currentName: String
        
        /// 当前数据库名称
        public let currentDbName: String
        
        /// 基础对象
        public let asset: Asset
        
        /// 表类型
        public let type: String?
        
        /// 数据库名称
        public let dbName: String?
        
        /// 存储大小
        public let storageSize: Int64?
        
        /// 记录数量
        public let recordCount: Int64?
        
        /// 生命周期
        public let lifeTime: Int64?
        
        /// 数据更新时间
        public let dataUpdateTime: Date?
        
        /// 结构更新时间
        public let structUpdateTime: Date?
        
        /// 最后访问时间
        public let lastAccessTime: Date?
        
        /// 存储对象
        public let sds: DMSSds
        
        /// 列
        public let columns: [DMSColumn]?
        
        /// 分区键值
        public let partitionKeys: [DMSColumn]?
        
        /// 视图文本
        public let viewOriginalText: String?
        
        /// 视图文本
        public let viewExpandedText: String?
        
        /// 分区
        public let partitions: [DMSPartition]?
        
        /// 当前表名
        public let name: String?
        
        public init (currentName: String, currentDbName: String, asset: Asset, type: String?, dbName: String?, storageSize: Int64?, recordCount: Int64?, lifeTime: Int64?, dataUpdateTime: Date?, structUpdateTime: Date?, lastAccessTime: Date?, sds: DMSSds, columns: [DMSColumn]?, partitionKeys: [DMSColumn]?, viewOriginalText: String?, viewExpandedText: String?, partitions: [DMSPartition]?, name: String?) {
            self.currentName = currentName
            self.currentDbName = currentDbName
            self.asset = asset
            self.type = type
            self.dbName = dbName
            self.storageSize = storageSize
            self.recordCount = recordCount
            self.lifeTime = lifeTime
            self.dataUpdateTime = dataUpdateTime
            self.structUpdateTime = structUpdateTime
            self.lastAccessTime = lastAccessTime
            self.sds = sds
            self.columns = columns
            self.partitionKeys = partitionKeys
            self.viewOriginalText = viewOriginalText
            self.viewExpandedText = viewExpandedText
            self.partitions = partitions
            self.name = name
        }
        
        enum CodingKeys: String, CodingKey {
            case currentName = "CurrentName"
            case currentDbName = "CurrentDbName"
            case asset = "Asset"
            case type = "Type"
            case dbName = "DbName"
            case storageSize = "StorageSize"
            case recordCount = "RecordCount"
            case lifeTime = "LifeTime"
            case dataUpdateTime = "DataUpdateTime"
            case structUpdateTime = "StructUpdateTime"
            case lastAccessTime = "LastAccessTime"
            case sds = "Sds"
            case columns = "Columns"
            case partitionKeys = "PartitionKeys"
            case viewOriginalText = "ViewOriginalText"
            case viewExpandedText = "ViewExpandedText"
            case partitions = "Partitions"
            case name = "Name"
        }
    }
    
    /// AlterDMSTable返回参数结构体
    public struct AlterDMSTableResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}