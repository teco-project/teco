//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// SuspendResumeDataEngine请求参数结构体
    public struct SuspendResumeDataEngineRequest: TCRequestModel {
        /// 虚拟集群名称
        public let dataEngineName: String

        /// 操作类型 suspend/resume
        public let operate: String

        public init(dataEngineName: String, operate: String) {
            self.dataEngineName = dataEngineName
            self.operate = operate
        }

        enum CodingKeys: String, CodingKey {
            case dataEngineName = "DataEngineName"
            case operate = "Operate"
        }
    }

    /// SuspendResumeDataEngine返回参数结构体
    public struct SuspendResumeDataEngineResponse: TCResponseModel {
        /// 虚拟集群详细信息
        public let dataEngineName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dataEngineName = "DataEngineName"
            case requestId = "RequestId"
        }
    }

    /// 暂停或恢复数据引擎
    ///
    /// 本接口用于控制暂停或恢复数据引擎
    @inlinable
    public func suspendResumeDataEngine(_ input: SuspendResumeDataEngineRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SuspendResumeDataEngineResponse> {
        self.client.execute(action: "SuspendResumeDataEngine", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 暂停或恢复数据引擎
    ///
    /// 本接口用于控制暂停或恢复数据引擎
    @inlinable
    public func suspendResumeDataEngine(_ input: SuspendResumeDataEngineRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SuspendResumeDataEngineResponse {
        try await self.client.execute(action: "SuspendResumeDataEngine", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 暂停或恢复数据引擎
    ///
    /// 本接口用于控制暂停或恢复数据引擎
    @inlinable
    public func suspendResumeDataEngine(dataEngineName: String, operate: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SuspendResumeDataEngineResponse> {
        self.suspendResumeDataEngine(.init(dataEngineName: dataEngineName, operate: operate), region: region, logger: logger, on: eventLoop)
    }

    /// 暂停或恢复数据引擎
    ///
    /// 本接口用于控制暂停或恢复数据引擎
    @inlinable
    public func suspendResumeDataEngine(dataEngineName: String, operate: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SuspendResumeDataEngineResponse {
        try await self.suspendResumeDataEngine(.init(dataEngineName: dataEngineName, operate: operate), region: region, logger: logger, on: eventLoop)
    }
}
