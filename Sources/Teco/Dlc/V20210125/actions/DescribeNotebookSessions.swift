//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// DescribeNotebookSessions请求参数结构体
    public struct DescribeNotebookSessionsRequest: TCPaginatedRequest {
        /// DLC Spark作业引擎名称
        public let dataEngineName: String

        /// Session状态，包含：not_started（未启动）、starting（已启动）、idle（等待输入）、busy(正在运行statement)、shutting_down（停止）、error（异常）、dead（已退出）、killed（被杀死）、success（正常停止）
        public let state: [String]?

        /// 排序字段（默认按创建时间）
        public let sortFields: [String]?

        /// 排序字段：true：升序、false：降序（默认）
        public let asc: Bool?

        /// 分页参数，默认10
        public let limit: UInt64?

        /// 分页参数，默认0
        public let offset: UInt64?

        public init(dataEngineName: String, state: [String]? = nil, sortFields: [String]? = nil, asc: Bool? = nil, limit: UInt64? = nil, offset: UInt64? = nil) {
            self.dataEngineName = dataEngineName
            self.state = state
            self.sortFields = sortFields
            self.asc = asc
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case dataEngineName = "DataEngineName"
            case state = "State"
            case sortFields = "SortFields"
            case asc = "Asc"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeNotebookSessionsResponse) -> DescribeNotebookSessionsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(dataEngineName: self.dataEngineName, state: self.state, sortFields: self.sortFields, asc: self.asc, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribeNotebookSessions返回参数结构体
    public struct DescribeNotebookSessionsResponse: TCPaginatedResponse {
        /// session总数量
        public let totalElements: Int64

        /// 总页数
        public let totalPages: Int64

        /// 当前页码
        public let page: UInt64

        /// 当前页数量
        public let size: UInt64

        /// session列表信息
        public let sessions: [NotebookSessions]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalElements = "TotalElements"
            case totalPages = "TotalPages"
            case page = "Page"
            case size = "Size"
            case sessions = "Sessions"
            case requestId = "RequestId"
        }

        /// Extract the returned ``NotebookSessions`` list from the paginated response.
        public func getItems() -> [NotebookSessions] {
            self.sessions
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalElements
        }
    }

    /// 查询交互式 session列表
    ///
    /// 本接口（DescribeNotebookSessions）用于查询交互式 session列表
    @inlinable
    public func describeNotebookSessions(_ input: DescribeNotebookSessionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookSessionsResponse> {
        self.client.execute(action: "DescribeNotebookSessions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询交互式 session列表
    ///
    /// 本接口（DescribeNotebookSessions）用于查询交互式 session列表
    @inlinable
    public func describeNotebookSessions(_ input: DescribeNotebookSessionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookSessionsResponse {
        try await self.client.execute(action: "DescribeNotebookSessions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询交互式 session列表
    ///
    /// 本接口（DescribeNotebookSessions）用于查询交互式 session列表
    @inlinable
    public func describeNotebookSessions(dataEngineName: String, state: [String]? = nil, sortFields: [String]? = nil, asc: Bool? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookSessionsResponse> {
        self.describeNotebookSessions(.init(dataEngineName: dataEngineName, state: state, sortFields: sortFields, asc: asc, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询交互式 session列表
    ///
    /// 本接口（DescribeNotebookSessions）用于查询交互式 session列表
    @inlinable
    public func describeNotebookSessions(dataEngineName: String, state: [String]? = nil, sortFields: [String]? = nil, asc: Bool? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookSessionsResponse {
        try await self.describeNotebookSessions(.init(dataEngineName: dataEngineName, state: state, sortFields: sortFields, asc: asc, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询交互式 session列表
    ///
    /// 本接口（DescribeNotebookSessions）用于查询交互式 session列表
    @inlinable
    public func describeNotebookSessionsPaginated(_ input: DescribeNotebookSessionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [NotebookSessions])> {
        self.client.paginate(input: input, region: region, command: self.describeNotebookSessions, logger: logger, on: eventLoop)
    }

    /// 查询交互式 session列表
    ///
    /// 本接口（DescribeNotebookSessions）用于查询交互式 session列表
    @inlinable @discardableResult
    public func describeNotebookSessionsPaginated(_ input: DescribeNotebookSessionsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeNotebookSessionsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeNotebookSessions, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询交互式 session列表
    ///
    /// 本接口（DescribeNotebookSessions）用于查询交互式 session列表
    ///
    /// - Returns: `AsyncSequence`s of ``NotebookSessions`` and ``DescribeNotebookSessionsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeNotebookSessionsPaginator(_ input: DescribeNotebookSessionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeNotebookSessionsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeNotebookSessions, logger: logger, on: eventLoop)
    }
}
