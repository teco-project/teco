//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// DescribeNotebookSession请求参数结构体
    public struct DescribeNotebookSessionRequest: TCRequest {
        /// Session唯一标识
        public let sessionId: String

        public init(sessionId: String) {
            self.sessionId = sessionId
        }

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
        }
    }

    /// DescribeNotebookSession返回参数结构体
    public struct DescribeNotebookSessionResponse: TCResponse {
        /// Session详情信息
        public let session: NotebookSessionInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case session = "Session"
            case requestId = "RequestId"
        }
    }

    /// 查询交互式 session详情信息
    ///
    /// 本接口（DescribeNotebookSession）用于查询交互式 session详情信息
    @inlinable
    public func describeNotebookSession(_ input: DescribeNotebookSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookSessionResponse> {
        self.client.execute(action: "DescribeNotebookSession", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询交互式 session详情信息
    ///
    /// 本接口（DescribeNotebookSession）用于查询交互式 session详情信息
    @inlinable
    public func describeNotebookSession(_ input: DescribeNotebookSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookSessionResponse {
        try await self.client.execute(action: "DescribeNotebookSession", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询交互式 session详情信息
    ///
    /// 本接口（DescribeNotebookSession）用于查询交互式 session详情信息
    @inlinable
    public func describeNotebookSession(sessionId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookSessionResponse> {
        self.describeNotebookSession(.init(sessionId: sessionId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询交互式 session详情信息
    ///
    /// 本接口（DescribeNotebookSession）用于查询交互式 session详情信息
    @inlinable
    public func describeNotebookSession(sessionId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookSessionResponse {
        try await self.describeNotebookSession(.init(sessionId: sessionId), region: region, logger: logger, on: eventLoop)
    }
}
