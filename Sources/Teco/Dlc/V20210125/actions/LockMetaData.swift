//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// LockMetaData请求参数结构体
    public struct LockMetaDataRequest: TCRequest {
        /// 加锁内容
        public let lockComponentList: [LockComponentInfo]

        /// 数据源名称
        public let datasourceConnectionName: String?

        /// 事务id
        public let txnId: Int64?

        /// 客户端信息
        public let agentInfo: String?

        /// 主机名
        public let hostname: String?

        public init(lockComponentList: [LockComponentInfo], datasourceConnectionName: String? = nil, txnId: Int64? = nil, agentInfo: String? = nil, hostname: String? = nil) {
            self.lockComponentList = lockComponentList
            self.datasourceConnectionName = datasourceConnectionName
            self.txnId = txnId
            self.agentInfo = agentInfo
            self.hostname = hostname
        }

        enum CodingKeys: String, CodingKey {
            case lockComponentList = "LockComponentList"
            case datasourceConnectionName = "DatasourceConnectionName"
            case txnId = "TxnId"
            case agentInfo = "AgentInfo"
            case hostname = "Hostname"
        }
    }

    /// LockMetaData返回参数结构体
    public struct LockMetaDataResponse: TCResponse {
        /// 锁id
        public let lockId: Int64

        /// 锁状态：ACQUIRED、WAITING、ABORT、NOT_ACQUIRED
        public let lockState: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case lockId = "LockId"
            case lockState = "LockState"
            case requestId = "RequestId"
        }
    }

    /// 元数据锁
    @inlinable
    public func lockMetaData(_ input: LockMetaDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<LockMetaDataResponse> {
        self.client.execute(action: "LockMetaData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 元数据锁
    @inlinable
    public func lockMetaData(_ input: LockMetaDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> LockMetaDataResponse {
        try await self.client.execute(action: "LockMetaData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 元数据锁
    @inlinable
    public func lockMetaData(lockComponentList: [LockComponentInfo], datasourceConnectionName: String? = nil, txnId: Int64? = nil, agentInfo: String? = nil, hostname: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<LockMetaDataResponse> {
        self.lockMetaData(.init(lockComponentList: lockComponentList, datasourceConnectionName: datasourceConnectionName, txnId: txnId, agentInfo: agentInfo, hostname: hostname), region: region, logger: logger, on: eventLoop)
    }

    /// 元数据锁
    @inlinable
    public func lockMetaData(lockComponentList: [LockComponentInfo], datasourceConnectionName: String? = nil, txnId: Int64? = nil, agentInfo: String? = nil, hostname: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> LockMetaDataResponse {
        try await self.lockMetaData(.init(lockComponentList: lockComponentList, datasourceConnectionName: datasourceConnectionName, txnId: txnId, agentInfo: agentInfo, hostname: hostname), region: region, logger: logger, on: eventLoop)
    }
}
