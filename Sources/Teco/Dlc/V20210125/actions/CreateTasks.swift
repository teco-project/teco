//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// CreateTasks请求参数结构体
    public struct CreateTasksRequest: TCRequestModel {
        /// 数据库名称。如果SQL语句中有数据库名称，优先使用SQL语句中的数据库，否则使用该参数指定的数据库（注：当提交建库sql时，该字段传空字符串）。
        public let databaseName: String

        /// SQL任务信息
        public let tasks: TasksInfo

        /// 数据源名称，默认为DataLakeCatalog
        public let datasourceConnectionName: String?

        /// 计算引擎名称，不填任务提交到默认集群
        public let dataEngineName: String?

        public init(databaseName: String, tasks: TasksInfo, datasourceConnectionName: String? = nil, dataEngineName: String? = nil) {
            self.databaseName = databaseName
            self.tasks = tasks
            self.datasourceConnectionName = datasourceConnectionName
            self.dataEngineName = dataEngineName
        }

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case tasks = "Tasks"
            case datasourceConnectionName = "DatasourceConnectionName"
            case dataEngineName = "DataEngineName"
        }
    }

    /// CreateTasks返回参数结构体
    public struct CreateTasksResponse: TCResponseModel {
        /// 本批次提交的任务的批次Id
        public let batchId: String

        /// 任务Id集合，按照执行顺序排列
        public let taskIdSet: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case batchId = "BatchId"
            case taskIdSet = "TaskIdSet"
            case requestId = "RequestId"
        }
    }

    /// 批量创建任务
    ///
    /// 本接口（CreateTasks），用于批量创建任务
    @inlinable
    public func createTasks(_ input: CreateTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateTasksResponse> {
        self.client.execute(action: "CreateTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量创建任务
    ///
    /// 本接口（CreateTasks），用于批量创建任务
    @inlinable
    public func createTasks(_ input: CreateTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTasksResponse {
        try await self.client.execute(action: "CreateTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量创建任务
    ///
    /// 本接口（CreateTasks），用于批量创建任务
    @inlinable
    public func createTasks(databaseName: String, tasks: TasksInfo, datasourceConnectionName: String? = nil, dataEngineName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateTasksResponse> {
        self.createTasks(.init(databaseName: databaseName, tasks: tasks, datasourceConnectionName: datasourceConnectionName, dataEngineName: dataEngineName), region: region, logger: logger, on: eventLoop)
    }

    /// 批量创建任务
    ///
    /// 本接口（CreateTasks），用于批量创建任务
    @inlinable
    public func createTasks(databaseName: String, tasks: TasksInfo, datasourceConnectionName: String? = nil, dataEngineName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTasksResponse {
        try await self.createTasks(.init(databaseName: databaseName, tasks: tasks, datasourceConnectionName: datasourceConnectionName, dataEngineName: dataEngineName), region: region, logger: logger, on: eventLoop)
    }
}
