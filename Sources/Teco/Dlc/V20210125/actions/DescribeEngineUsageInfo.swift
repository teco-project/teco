//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// DescribeEngineUsageInfo请求参数结构体
    public struct DescribeEngineUsageInfoRequest: TCRequestModel {
        /// House Id
        public let dataEngineId: String

        public init(dataEngineId: String) {
            self.dataEngineId = dataEngineId
        }

        enum CodingKeys: String, CodingKey {
            case dataEngineId = "DataEngineId"
        }
    }

    /// DescribeEngineUsageInfo返回参数结构体
    public struct DescribeEngineUsageInfoResponse: TCResponseModel {
        /// 集群总规格
        public let total: Int64

        /// 已占用集群规格
        public let used: Int64

        /// 剩余集群规格
        public let available: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case used = "Used"
            case available = "Available"
            case requestId = "RequestId"
        }
    }

    /// 获取数据引擎资源使用情况
    ///
    /// 本接口根据引擎ID获取数据引擎资源使用情况
    @inlinable
    public func describeEngineUsageInfo(_ input: DescribeEngineUsageInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEngineUsageInfoResponse> {
        self.client.execute(action: "DescribeEngineUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取数据引擎资源使用情况
    ///
    /// 本接口根据引擎ID获取数据引擎资源使用情况
    @inlinable
    public func describeEngineUsageInfo(_ input: DescribeEngineUsageInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEngineUsageInfoResponse {
        try await self.client.execute(action: "DescribeEngineUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取数据引擎资源使用情况
    ///
    /// 本接口根据引擎ID获取数据引擎资源使用情况
    @inlinable
    public func describeEngineUsageInfo(dataEngineId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEngineUsageInfoResponse> {
        self.describeEngineUsageInfo(.init(dataEngineId: dataEngineId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取数据引擎资源使用情况
    ///
    /// 本接口根据引擎ID获取数据引擎资源使用情况
    @inlinable
    public func describeEngineUsageInfo(dataEngineId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEngineUsageInfoResponse {
        try await self.describeEngineUsageInfo(.init(dataEngineId: dataEngineId), region: region, logger: logger, on: eventLoop)
    }
}
