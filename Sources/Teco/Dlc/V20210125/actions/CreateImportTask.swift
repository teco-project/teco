//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Dlc {
    /// CreateImportTask请求参数结构体
    public struct CreateImportTaskRequest: TCRequestModel {
        /// 数据来源，cos
        public let inputType: String

        /// 输入配置
        public let inputConf: [KVPair]

        /// 输出配置
        public let outputConf: [KVPair]

        /// 目标数据源的类型，目前支持导入到托管存储，即lakefsStorage
        public let outputType: String?

        public init(inputType: String, inputConf: [KVPair], outputConf: [KVPair], outputType: String? = nil) {
            self.inputType = inputType
            self.inputConf = inputConf
            self.outputConf = outputConf
            self.outputType = outputType
        }

        enum CodingKeys: String, CodingKey {
            case inputType = "InputType"
            case inputConf = "InputConf"
            case outputConf = "OutputConf"
            case outputType = "OutputType"
        }
    }

    /// CreateImportTask返回参数结构体
    public struct CreateImportTaskResponse: TCResponseModel {
        /// 任务id
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 创建导入任务
    ///
    /// 该接口（CreateImportTask）用于创建导入任务
    @inlinable
    public func createImportTask(_ input: CreateImportTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateImportTaskResponse> {
        self.client.execute(action: "CreateImportTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建导入任务
    ///
    /// 该接口（CreateImportTask）用于创建导入任务
    @inlinable
    public func createImportTask(_ input: CreateImportTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateImportTaskResponse {
        try await self.client.execute(action: "CreateImportTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建导入任务
    ///
    /// 该接口（CreateImportTask）用于创建导入任务
    @inlinable
    public func createImportTask(inputType: String, inputConf: [KVPair], outputConf: [KVPair], outputType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateImportTaskResponse> {
        self.createImportTask(.init(inputType: inputType, inputConf: inputConf, outputConf: outputConf, outputType: outputType), region: region, logger: logger, on: eventLoop)
    }

    /// 创建导入任务
    ///
    /// 该接口（CreateImportTask）用于创建导入任务
    @inlinable
    public func createImportTask(inputType: String, inputConf: [KVPair], outputConf: [KVPair], outputType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateImportTaskResponse {
        try await self.createImportTask(.init(inputType: inputType, inputConf: inputConf, outputConf: outputConf, outputType: outputType), region: region, logger: logger, on: eventLoop)
    }
}
