//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Dlc {
    /// DescribeNotebookSessionStatementSqlResult请求参数结构体
    public struct DescribeNotebookSessionStatementSqlResultRequest: TCPaginatedRequest {
        /// 任务唯一ID
        public let taskId: String

        /// 返回结果的最大行数，范围0~1000，默认为1000.
        public let maxResults: UInt64?

        /// 上一次请求响应返回的分页信息。第一次可以不带，从头开始返回数据，每次返回MaxResults字段设置的数据量。
        public let nextToken: String?

        public init(taskId: String, maxResults: UInt64? = nil, nextToken: String? = nil) {
            self.taskId = taskId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeNotebookSessionStatementSqlResultResponse) -> DescribeNotebookSessionStatementSqlResultRequest? {
            guard response.nextToken != nil else {
                return nil
            }
            return DescribeNotebookSessionStatementSqlResultRequest(taskId: self.taskId, maxResults: self.maxResults, nextToken: response.nextToken)
        }
    }

    /// DescribeNotebookSessionStatementSqlResult返回参数结构体
    public struct DescribeNotebookSessionStatementSqlResultResponse: TCPaginatedResponse {
        /// 任务Id
        public let taskId: String

        /// 结果数据
        public let resultSet: String

        /// schema
        public let resultSchema: [Column]

        /// 分页信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nextToken: String?

        /// 存储结果地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let outputPath: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case resultSet = "ResultSet"
            case resultSchema = "ResultSchema"
            case nextToken = "NextToken"
            case outputPath = "OutputPath"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Column] {
            self.resultSchema
        }
    }

    /// 获取statement运行结果。
    ///
    /// 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
    @inlinable
    public func describeNotebookSessionStatementSqlResult(_ input: DescribeNotebookSessionStatementSqlResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookSessionStatementSqlResultResponse> {
        self.client.execute(action: "DescribeNotebookSessionStatementSqlResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取statement运行结果。
    ///
    /// 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
    @inlinable
    public func describeNotebookSessionStatementSqlResult(_ input: DescribeNotebookSessionStatementSqlResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookSessionStatementSqlResultResponse {
        try await self.client.execute(action: "DescribeNotebookSessionStatementSqlResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取statement运行结果。
    ///
    /// 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
    @inlinable
    public func describeNotebookSessionStatementSqlResult(taskId: String, maxResults: UInt64? = nil, nextToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookSessionStatementSqlResultResponse> {
        self.describeNotebookSessionStatementSqlResult(.init(taskId: taskId, maxResults: maxResults, nextToken: nextToken), region: region, logger: logger, on: eventLoop)
    }

    /// 获取statement运行结果。
    ///
    /// 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
    @inlinable
    public func describeNotebookSessionStatementSqlResult(taskId: String, maxResults: UInt64? = nil, nextToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookSessionStatementSqlResultResponse {
        try await self.describeNotebookSessionStatementSqlResult(.init(taskId: taskId, maxResults: maxResults, nextToken: nextToken), region: region, logger: logger, on: eventLoop)
    }

    /// 获取statement运行结果。
    ///
    /// 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
    @inlinable
    public func describeNotebookSessionStatementSqlResultPaginated(_ input: DescribeNotebookSessionStatementSqlResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [Column])> {
        self.client.paginate(input: input, region: region, command: self.describeNotebookSessionStatementSqlResult, logger: logger, on: eventLoop)
    }

    /// 获取statement运行结果。
    ///
    /// 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
    @inlinable @discardableResult
    public func describeNotebookSessionStatementSqlResultPaginated(_ input: DescribeNotebookSessionStatementSqlResultRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeNotebookSessionStatementSqlResultResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeNotebookSessionStatementSqlResult, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取statement运行结果。
    ///
    /// 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
    ///
    /// - Returns: `AsyncSequence`s of `Column` and `DescribeNotebookSessionStatementSqlResultResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeNotebookSessionStatementSqlResultPaginator(_ input: DescribeNotebookSessionStatementSqlResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeNotebookSessionStatementSqlResultRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeNotebookSessionStatementSqlResult, logger: logger, on: eventLoop)
    }
}
