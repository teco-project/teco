//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// CreateNotebookSession请求参数结构体
    public struct CreateNotebookSessionRequest: TCRequest {
        /// Session名称
        public let name: String

        /// 类型，当前支持：spark、pyspark、sparkr、sql
        public let kind: String

        /// DLC Spark作业引擎名称
        public let dataEngineName: String

        /// session文件地址，当前支持：cosn://和lakefs://两种路径
        public let programDependentFiles: [String]?

        /// 依赖的jar程序地址，当前支持：cosn://和lakefs://两种路径
        public let programDependentJars: [String]?

        /// 依赖的python程序地址，当前支持：cosn://和lakefs://两种路径
        public let programDependentPython: [String]?

        /// 依赖的pyspark虚拟环境地址，当前支持：cosn://和lakefs://两种路径
        public let programArchives: [String]?

        /// 指定的Driver规格，当前支持：small（默认，1cu）、medium（2cu）、large（4cu）、xlarge（8cu）
        public let driverSize: String?

        /// 指定的Executor规格，当前支持：small（默认，1cu）、medium（2cu）、large（4cu）、xlarge（8cu）
        public let executorSize: String?

        /// 指定的Executor数量，默认为1
        public let executorNumbers: UInt64?

        /// Session相关配置，当前支持：
        /// 1. dlc.eni: 用户配置的eni网关信息，可以通过该字段设置；
        /// 2. dlc.role.arn: 用户配置的roleArn鉴权策略配置信息，可以通过该字段设置；
        /// 3. dlc.sql.set.config: 用户配置的集群配置信息，可以通过该字段设置；
        public let arguments: [KVPair]?

        /// 代理用户，默认为root
        public let proxyUser: String?

        /// 指定的Session超时时间，单位秒，默认3600秒
        public let timeoutInSecond: Int64?

        /// 指定的Executor数量（最大值），默认为1，当开启动态分配有效，若未开启，则该值等于ExecutorNumbers
        public let executorMaxNumbers: UInt64?

        /// 指定spark版本名称，当前任务使用该spark镜像运行
        public let sparkImage: String?

        /// 是否继承集群的资源类配置：0：自定义（默认），1：继承集群；
        public let isInherit: Int64?

        public init(name: String, kind: String, dataEngineName: String, programDependentFiles: [String]? = nil, programDependentJars: [String]? = nil, programDependentPython: [String]? = nil, programArchives: [String]? = nil, driverSize: String? = nil, executorSize: String? = nil, executorNumbers: UInt64? = nil, arguments: [KVPair]? = nil, proxyUser: String? = nil, timeoutInSecond: Int64? = nil, executorMaxNumbers: UInt64? = nil, sparkImage: String? = nil, isInherit: Int64? = nil) {
            self.name = name
            self.kind = kind
            self.dataEngineName = dataEngineName
            self.programDependentFiles = programDependentFiles
            self.programDependentJars = programDependentJars
            self.programDependentPython = programDependentPython
            self.programArchives = programArchives
            self.driverSize = driverSize
            self.executorSize = executorSize
            self.executorNumbers = executorNumbers
            self.arguments = arguments
            self.proxyUser = proxyUser
            self.timeoutInSecond = timeoutInSecond
            self.executorMaxNumbers = executorMaxNumbers
            self.sparkImage = sparkImage
            self.isInherit = isInherit
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case kind = "Kind"
            case dataEngineName = "DataEngineName"
            case programDependentFiles = "ProgramDependentFiles"
            case programDependentJars = "ProgramDependentJars"
            case programDependentPython = "ProgramDependentPython"
            case programArchives = "ProgramArchives"
            case driverSize = "DriverSize"
            case executorSize = "ExecutorSize"
            case executorNumbers = "ExecutorNumbers"
            case arguments = "Arguments"
            case proxyUser = "ProxyUser"
            case timeoutInSecond = "TimeoutInSecond"
            case executorMaxNumbers = "ExecutorMaxNumbers"
            case sparkImage = "SparkImage"
            case isInherit = "IsInherit"
        }
    }

    /// CreateNotebookSession返回参数结构体
    public struct CreateNotebookSessionResponse: TCResponse {
        /// Session唯一标识
        public let sessionId: String

        /// Spark任务返回的AppId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkAppId: String?

        /// Session状态，包含：not_started（未启动）、starting（已启动）、idle（等待输入）、busy(正在运行statement)、shutting_down（停止）、error（异常）、dead（已退出）、killed（被杀死）、success（正常停止）
        public let state: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case sparkAppId = "SparkAppId"
            case state = "State"
            case requestId = "RequestId"
        }
    }

    /// 创建交互式session（notebook）
    ///
    /// 本接口（CreateNotebookSession）用于创建交互式session（notebook）
    @inlinable
    public func createNotebookSession(_ input: CreateNotebookSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNotebookSessionResponse> {
        self.client.execute(action: "CreateNotebookSession", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建交互式session（notebook）
    ///
    /// 本接口（CreateNotebookSession）用于创建交互式session（notebook）
    @inlinable
    public func createNotebookSession(_ input: CreateNotebookSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNotebookSessionResponse {
        try await self.client.execute(action: "CreateNotebookSession", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建交互式session（notebook）
    ///
    /// 本接口（CreateNotebookSession）用于创建交互式session（notebook）
    @inlinable
    public func createNotebookSession(name: String, kind: String, dataEngineName: String, programDependentFiles: [String]? = nil, programDependentJars: [String]? = nil, programDependentPython: [String]? = nil, programArchives: [String]? = nil, driverSize: String? = nil, executorSize: String? = nil, executorNumbers: UInt64? = nil, arguments: [KVPair]? = nil, proxyUser: String? = nil, timeoutInSecond: Int64? = nil, executorMaxNumbers: UInt64? = nil, sparkImage: String? = nil, isInherit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNotebookSessionResponse> {
        self.createNotebookSession(.init(name: name, kind: kind, dataEngineName: dataEngineName, programDependentFiles: programDependentFiles, programDependentJars: programDependentJars, programDependentPython: programDependentPython, programArchives: programArchives, driverSize: driverSize, executorSize: executorSize, executorNumbers: executorNumbers, arguments: arguments, proxyUser: proxyUser, timeoutInSecond: timeoutInSecond, executorMaxNumbers: executorMaxNumbers, sparkImage: sparkImage, isInherit: isInherit), region: region, logger: logger, on: eventLoop)
    }

    /// 创建交互式session（notebook）
    ///
    /// 本接口（CreateNotebookSession）用于创建交互式session（notebook）
    @inlinable
    public func createNotebookSession(name: String, kind: String, dataEngineName: String, programDependentFiles: [String]? = nil, programDependentJars: [String]? = nil, programDependentPython: [String]? = nil, programArchives: [String]? = nil, driverSize: String? = nil, executorSize: String? = nil, executorNumbers: UInt64? = nil, arguments: [KVPair]? = nil, proxyUser: String? = nil, timeoutInSecond: Int64? = nil, executorMaxNumbers: UInt64? = nil, sparkImage: String? = nil, isInherit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNotebookSessionResponse {
        try await self.createNotebookSession(.init(name: name, kind: kind, dataEngineName: dataEngineName, programDependentFiles: programDependentFiles, programDependentJars: programDependentJars, programDependentPython: programDependentPython, programArchives: programArchives, driverSize: driverSize, executorSize: executorSize, executorNumbers: executorNumbers, arguments: arguments, proxyUser: proxyUser, timeoutInSecond: timeoutInSecond, executorMaxNumbers: executorMaxNumbers, sparkImage: sparkImage, isInherit: isInherit), region: region, logger: logger, on: eventLoop)
    }
}
