//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// CheckLockMetaData请求参数结构体
    public struct CheckLockMetaDataRequest: TCRequestModel {
        /// 锁ID
        public let lockId: Int64

        /// 数据源名称
        public let datasourceConnectionName: String?

        /// 事务ID
        public let txnId: Int64?

        /// 过期时间ms
        public let elapsedMs: Int64?

        public init(lockId: Int64, datasourceConnectionName: String? = nil, txnId: Int64? = nil, elapsedMs: Int64? = nil) {
            self.lockId = lockId
            self.datasourceConnectionName = datasourceConnectionName
            self.txnId = txnId
            self.elapsedMs = elapsedMs
        }

        enum CodingKeys: String, CodingKey {
            case lockId = "LockId"
            case datasourceConnectionName = "DatasourceConnectionName"
            case txnId = "TxnId"
            case elapsedMs = "ElapsedMs"
        }
    }

    /// CheckLockMetaData返回参数结构体
    public struct CheckLockMetaDataResponse: TCResponseModel {
        /// 锁ID
        public let lockId: Int64

        /// 锁状态：ACQUIRED、WAITING、ABORT、NOT_ACQUIRED
        public let lockState: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case lockId = "LockId"
            case lockState = "LockState"
            case requestId = "RequestId"
        }
    }

    /// 元数据锁检查
    @inlinable
    public func checkLockMetaData(_ input: CheckLockMetaDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckLockMetaDataResponse> {
        self.client.execute(action: "CheckLockMetaData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 元数据锁检查
    @inlinable
    public func checkLockMetaData(_ input: CheckLockMetaDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckLockMetaDataResponse {
        try await self.client.execute(action: "CheckLockMetaData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 元数据锁检查
    @inlinable
    public func checkLockMetaData(lockId: Int64, datasourceConnectionName: String? = nil, txnId: Int64? = nil, elapsedMs: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckLockMetaDataResponse> {
        self.checkLockMetaData(.init(lockId: lockId, datasourceConnectionName: datasourceConnectionName, txnId: txnId, elapsedMs: elapsedMs), region: region, logger: logger, on: eventLoop)
    }

    /// 元数据锁检查
    @inlinable
    public func checkLockMetaData(lockId: Int64, datasourceConnectionName: String? = nil, txnId: Int64? = nil, elapsedMs: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckLockMetaDataResponse {
        try await self.checkLockMetaData(.init(lockId: lockId, datasourceConnectionName: datasourceConnectionName, txnId: txnId, elapsedMs: elapsedMs), region: region, logger: logger, on: eventLoop)
    }
}
