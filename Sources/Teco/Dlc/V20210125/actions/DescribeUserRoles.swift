//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// DescribeUserRoles请求参数结构体
    public struct DescribeUserRolesRequest: TCPaginatedRequest {
        /// 列举的数量限制
        public let limit: Int64

        /// 列举的偏移位置
        public let offset: Int64

        /// 按照arn模糊列举
        public let fuzzy: String?

        /// 返回结果按照该字段排序
        public let sortBy: String?

        /// 正序或者倒序，例如：desc
        public let sorting: String?

        public init(limit: Int64, offset: Int64, fuzzy: String? = nil, sortBy: String? = nil, sorting: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.fuzzy = fuzzy
            self.sortBy = sortBy
            self.sorting = sorting
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case fuzzy = "Fuzzy"
            case sortBy = "SortBy"
            case sorting = "Sorting"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeUserRolesResponse) -> DescribeUserRolesRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), self.offset + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(limit: self.limit, offset: self.offset + .init(response.getItems().count), fuzzy: self.fuzzy, sortBy: self.sortBy, sorting: self.sorting)
        }
    }

    /// DescribeUserRoles返回参数结构体
    public struct DescribeUserRolesResponse: TCPaginatedResponse {
        /// 符合列举条件的总数量
        public let total: Int64

        /// 用户角色信息
        public let userRoles: [UserRole]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case userRoles = "UserRoles"
            case requestId = "RequestId"
        }

        /// Extract the returned ``UserRole`` list from the paginated response.
        public func getItems() -> [UserRole] {
            self.userRoles
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 列举用户角色信息
    @inlinable
    public func describeUserRoles(_ input: DescribeUserRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUserRolesResponse> {
        self.client.execute(action: "DescribeUserRoles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 列举用户角色信息
    @inlinable
    public func describeUserRoles(_ input: DescribeUserRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUserRolesResponse {
        try await self.client.execute(action: "DescribeUserRoles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 列举用户角色信息
    @inlinable
    public func describeUserRoles(limit: Int64, offset: Int64, fuzzy: String? = nil, sortBy: String? = nil, sorting: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUserRolesResponse> {
        self.describeUserRoles(.init(limit: limit, offset: offset, fuzzy: fuzzy, sortBy: sortBy, sorting: sorting), region: region, logger: logger, on: eventLoop)
    }

    /// 列举用户角色信息
    @inlinable
    public func describeUserRoles(limit: Int64, offset: Int64, fuzzy: String? = nil, sortBy: String? = nil, sorting: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUserRolesResponse {
        try await self.describeUserRoles(.init(limit: limit, offset: offset, fuzzy: fuzzy, sortBy: sortBy, sorting: sorting), region: region, logger: logger, on: eventLoop)
    }

    /// 列举用户角色信息
    @inlinable
    public func describeUserRolesPaginated(_ input: DescribeUserRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [UserRole])> {
        self.client.paginate(input: input, region: region, command: self.describeUserRoles, logger: logger, on: eventLoop)
    }

    /// 列举用户角色信息
    @inlinable @discardableResult
    public func describeUserRolesPaginated(_ input: DescribeUserRolesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeUserRolesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeUserRoles, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 列举用户角色信息
    ///
    /// - Returns: `AsyncSequence`s of ``UserRole`` and ``DescribeUserRolesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeUserRolesPaginator(_ input: DescribeUserRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeUserRolesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeUserRoles, logger: logger, on: eventLoop)
    }
}
