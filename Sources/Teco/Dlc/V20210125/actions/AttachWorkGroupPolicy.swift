//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// AttachWorkGroupPolicy请求参数结构体
    public struct AttachWorkGroupPolicyRequest: TCRequest {
        /// 工作组Id
        public let workGroupId: Int64

        /// 要绑定的策略集合
        public let policySet: [Policy]?

        public init(workGroupId: Int64, policySet: [Policy]? = nil) {
            self.workGroupId = workGroupId
            self.policySet = policySet
        }

        enum CodingKeys: String, CodingKey {
            case workGroupId = "WorkGroupId"
            case policySet = "PolicySet"
        }
    }

    /// AttachWorkGroupPolicy返回参数结构体
    public struct AttachWorkGroupPolicyResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 绑定鉴权策略到工作组
    @inlinable @discardableResult
    public func attachWorkGroupPolicy(_ input: AttachWorkGroupPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AttachWorkGroupPolicyResponse> {
        self.client.execute(action: "AttachWorkGroupPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定鉴权策略到工作组
    @inlinable @discardableResult
    public func attachWorkGroupPolicy(_ input: AttachWorkGroupPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachWorkGroupPolicyResponse {
        try await self.client.execute(action: "AttachWorkGroupPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 绑定鉴权策略到工作组
    @inlinable @discardableResult
    public func attachWorkGroupPolicy(workGroupId: Int64, policySet: [Policy]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AttachWorkGroupPolicyResponse> {
        self.attachWorkGroupPolicy(.init(workGroupId: workGroupId, policySet: policySet), region: region, logger: logger, on: eventLoop)
    }

    /// 绑定鉴权策略到工作组
    @inlinable @discardableResult
    public func attachWorkGroupPolicy(workGroupId: Int64, policySet: [Policy]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachWorkGroupPolicyResponse {
        try await self.attachWorkGroupPolicy(.init(workGroupId: workGroupId, policySet: policySet), region: region, logger: logger, on: eventLoop)
    }
}
