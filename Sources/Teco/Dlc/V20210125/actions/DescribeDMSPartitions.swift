//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dlc {
    /// DMS元数据获取分区
    ///
    /// DMS元数据获取分区
    @inlinable
    public func describeDMSPartitions(_ input: DescribeDMSPartitionsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDMSPartitionsResponse > {
        self.client.execute(action: "DescribeDMSPartitions", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// DMS元数据获取分区
    ///
    /// DMS元数据获取分区
    @inlinable
    public func describeDMSPartitions(_ input: DescribeDMSPartitionsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDMSPartitionsResponse {
        try await self.client.execute(action: "DescribeDMSPartitions", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeDMSPartitions请求参数结构体
    public struct DescribeDMSPartitionsRequest: TCRequestModel {
        /// 数据库名
        public let databaseName: String
        
        /// 表名称
        public let tableName: String
        
        /// schema名称
        public let schemaName: String?
        
        /// 名称
        public let name: String?
        
        /// 单个分区名称，精准匹配
        public let values: [String]?
        
        /// 多个分区名称，精准匹配
        public let partitionNames: [String]?
        
        /// 多个分区字段的匹配，模糊匹配
        public let partValues: [String]?
        
        /// 过滤SQL
        public let filter: String?
        
        /// 最大分区数量
        public let maxParts: Int64?
        
        /// 翻页跳过数量
        public let offset: Int64?
        
        /// 页面数量
        public let limit: Int64?
        
        /// 表达式
        public let expression: String?
        
        public init (databaseName: String, tableName: String, schemaName: String?, name: String?, values: [String]?, partitionNames: [String]?, partValues: [String]?, filter: String?, maxParts: Int64?, offset: Int64?, limit: Int64?, expression: String?) {
            self.databaseName = databaseName
            self.tableName = tableName
            self.schemaName = schemaName
            self.name = name
            self.values = values
            self.partitionNames = partitionNames
            self.partValues = partValues
            self.filter = filter
            self.maxParts = maxParts
            self.offset = offset
            self.limit = limit
            self.expression = expression
        }
        
        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case tableName = "TableName"
            case schemaName = "SchemaName"
            case name = "Name"
            case values = "Values"
            case partitionNames = "PartitionNames"
            case partValues = "PartValues"
            case filter = "Filter"
            case maxParts = "MaxParts"
            case offset = "Offset"
            case limit = "Limit"
            case expression = "Expression"
        }
    }
    
    /// DescribeDMSPartitions返回参数结构体
    public struct DescribeDMSPartitionsResponse: TCResponseModel {
        /// 分区信息
        public let partitions: [DMSPartition]
        
        /// 总数
        public let total: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case partitions = "Partitions"
            case total = "Total"
            case requestId = "RequestId"
        }
    }
}