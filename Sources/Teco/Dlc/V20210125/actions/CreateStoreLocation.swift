//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dlc {
    /// CreateStoreLocation请求参数结构体
    public struct CreateStoreLocationRequest: TCRequestModel {
        /// 计算结果存储cos路径，如：cosn://bucketname/
        public let storeLocation: String

        public init(storeLocation: String) {
            self.storeLocation = storeLocation
        }

        enum CodingKeys: String, CodingKey {
            case storeLocation = "StoreLocation"
        }
    }

    /// CreateStoreLocation返回参数结构体
    public struct CreateStoreLocationResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改结果存储位置
    ///
    /// 该接口（CreateStoreLocation）新增或覆盖计算结果存储位置。
    @inlinable @discardableResult
    public func createStoreLocation(_ input: CreateStoreLocationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStoreLocationResponse> {
        self.client.execute(action: "CreateStoreLocation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改结果存储位置
    ///
    /// 该接口（CreateStoreLocation）新增或覆盖计算结果存储位置。
    @inlinable @discardableResult
    public func createStoreLocation(_ input: CreateStoreLocationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStoreLocationResponse {
        try await self.client.execute(action: "CreateStoreLocation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改结果存储位置
    ///
    /// 该接口（CreateStoreLocation）新增或覆盖计算结果存储位置。
    @inlinable @discardableResult
    public func createStoreLocation(storeLocation: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStoreLocationResponse> {
        self.createStoreLocation(.init(storeLocation: storeLocation), region: region, logger: logger, on: eventLoop)
    }

    /// 修改结果存储位置
    ///
    /// 该接口（CreateStoreLocation）新增或覆盖计算结果存储位置。
    @inlinable @discardableResult
    public func createStoreLocation(storeLocation: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStoreLocationResponse {
        try await self.createStoreLocation(.init(storeLocation: storeLocation), region: region, logger: logger, on: eventLoop)
    }
}
