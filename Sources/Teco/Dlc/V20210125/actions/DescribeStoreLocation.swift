//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dlc {
    /// DescribeStoreLocation请求参数结构体
    public struct DescribeStoreLocationRequest: TCRequestModel {
        public init () {
        }
    }
    
    /// DescribeStoreLocation返回参数结构体
    public struct DescribeStoreLocationResponse: TCResponseModel {
        /// 返回用户设置的结果存储位置路径，如果未设置则返回空字符串：""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storeLocation: String?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case storeLocation = "StoreLocation"
            case requestId = "RequestId"
        }
    }
    
    /// 查询结果存储位置
    ///
    /// 查询计算结果存储位置。
    @inlinable
    public func describeStoreLocation(_ input: DescribeStoreLocationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeStoreLocationResponse > {
        self.client.execute(action: "DescribeStoreLocation", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询结果存储位置
    ///
    /// 查询计算结果存储位置。
    @inlinable
    public func describeStoreLocation(_ input: DescribeStoreLocationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStoreLocationResponse {
        try await self.client.execute(action: "DescribeStoreLocation", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询结果存储位置
    ///
    /// 查询计算结果存储位置。
    @inlinable
    public func describeStoreLocation(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeStoreLocationResponse > {
        self.describeStoreLocation(DescribeStoreLocationRequest(), logger: logger, on: eventLoop)
    }
    
    /// 查询结果存储位置
    ///
    /// 查询计算结果存储位置。
    @inlinable
    public func describeStoreLocation(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStoreLocationResponse {
        try await self.describeStoreLocation(DescribeStoreLocationRequest(), logger: logger, on: eventLoop)
    }
}
