//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Dlc {
    /// 元数据基本对象
    public struct Asset: TCInputModel, TCOutputModel {
        /// 主键
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 对象GUID值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let guid: String?

        /// 数据目录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let catalog: String?

        /// 描述信息
        public let description: String?

        /// 对象owner
        public let owner: String?

        /// 对象owner账户
        public let ownerAccount: String?

        /// 权限
        public let permValues: [KVPair]?

        /// 附加属性
        public let params: [KVPair]?

        /// 附加业务属性
        public let bizParams: [KVPair]?

        /// 数据版本
        public let dataVersion: Int64?

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date?

        /// 修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifiedTime: Date?

        /// 数据源主键
        public let datasourceId: Int64?

        public init(id: Int64? = nil, name: String? = nil, guid: String? = nil, catalog: String? = nil, description: String? = nil, owner: String? = nil, ownerAccount: String? = nil, permValues: [KVPair]? = nil, params: [KVPair]? = nil, bizParams: [KVPair]? = nil, dataVersion: Int64? = nil, createTime: Date? = nil, modifiedTime: Date? = nil, datasourceId: Int64? = nil) {
            self.id = id
            self.name = name
            self.guid = guid
            self.catalog = catalog
            self.description = description
            self.owner = owner
            self.ownerAccount = ownerAccount
            self.permValues = permValues
            self.params = params
            self.bizParams = bizParams
            self.dataVersion = dataVersion
            self._createTime = .init(wrappedValue: createTime)
            self._modifiedTime = .init(wrappedValue: modifiedTime)
            self.datasourceId = datasourceId
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case guid = "Guid"
            case catalog = "Catalog"
            case description = "Description"
            case owner = "Owner"
            case ownerAccount = "OwnerAccount"
            case permValues = "PermValues"
            case params = "Params"
            case bizParams = "BizParams"
            case dataVersion = "DataVersion"
            case createTime = "CreateTime"
            case modifiedTime = "ModifiedTime"
            case datasourceId = "DatasourceId"
        }
    }

    /// CSV类型数据格式
    public struct CSV: TCInputModel {
        /// 压缩格式，["Snappy", "Gzip", "None"选一]。
        public let codeCompress: String?

        /// CSV序列化及反序列化数据结构。
        public let csvSerde: CSVSerde?

        /// 标题行，默认为0。
        public let headLines: Int64?

        /// 格式，默认值为CSV
        public let format: String?

        public init(codeCompress: String? = nil, csvSerde: CSVSerde? = nil, headLines: Int64? = nil, format: String? = nil) {
            self.codeCompress = codeCompress
            self.csvSerde = csvSerde
            self.headLines = headLines
            self.format = format
        }

        enum CodingKeys: String, CodingKey {
            case codeCompress = "CodeCompress"
            case csvSerde = "CSVSerde"
            case headLines = "HeadLines"
            case format = "Format"
        }
    }

    /// CSV序列化及反序列化数据结构
    public struct CSVSerde: TCInputModel {
        /// CSV序列化转义符，默认为"\\"，最长8个字符，如 Escape: "/\"
        public let escape: String?

        /// CSV序列化字段域符，默认为"'"，最长8个字符, 如 Quote: "\""
        public let quote: String?

        /// CSV序列化分隔符，默认为"\t"，最长8个字符, 如 Separator: "\t"
        public let separator: String?

        public init(escape: String? = nil, quote: String? = nil, separator: String? = nil) {
            self.escape = escape
            self.quote = quote
            self.separator = separator
        }

        enum CodingKeys: String, CodingKey {
            case escape = "Escape"
            case quote = "Quote"
            case separator = "Separator"
        }
    }

    /// 数据表列信息。
    public struct Column: TCInputModel, TCOutputModel {
        /// 列名称，不区分大小写，最大支持25个字符。
        public let name: String

        /// 列类型，支持如下类型定义:
        /// string|tinyint|smallint|int|bigint|boolean|float|double|decimal|timestamp|date|binary|array<data_type>|map<primitive_type, data_type>|struct<col_name : data_type [COMMENT col_comment], ...>|uniontype<data_type, data_type, ...>。
        public let type: String

        /// 对该类的注释。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let comment: String?

        /// 表示整个 numeric 的长度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let precision: Int64?

        /// 表示小数部分的长度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scale: Int64?

        /// 是否为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nullable: String?

        /// 字段位置，小的在前
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let position: Int64?

        /// 字段创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 字段修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifiedTime: String?

        /// 是否为分区字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isPartition: Bool?

        public init(name: String, type: String, comment: String? = nil, precision: Int64? = nil, scale: Int64? = nil, nullable: String? = nil, position: Int64? = nil, createTime: String? = nil, modifiedTime: String? = nil, isPartition: Bool? = nil) {
            self.name = name
            self.type = type
            self.comment = comment
            self.precision = precision
            self.scale = scale
            self.nullable = nullable
            self.position = position
            self.createTime = createTime
            self.modifiedTime = modifiedTime
            self.isPartition = isPartition
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case comment = "Comment"
            case precision = "Precision"
            case scale = "Scale"
            case nullable = "Nullable"
            case position = "Position"
            case createTime = "CreateTime"
            case modifiedTime = "ModifiedTime"
            case isPartition = "IsPartition"
        }
    }

    /// 定时启停策略信息
    public struct CrontabResumeSuspendStrategy: TCInputModel, TCOutputModel {
        /// 定时拉起时间：如：周一8点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resumeTime: String?

        /// 定时挂起时间：如：周一20点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let suspendTime: String?

        /// 挂起配置：0（默认）：等待任务结束后挂起、1：强制挂起
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let suspendStrategy: Int64?

        public init(resumeTime: String? = nil, suspendTime: String? = nil, suspendStrategy: Int64? = nil) {
            self.resumeTime = resumeTime
            self.suspendTime = suspendTime
            self.suspendStrategy = suspendStrategy
        }

        enum CodingKeys: String, CodingKey {
            case resumeTime = "ResumeTime"
            case suspendTime = "SuspendTime"
            case suspendStrategy = "SuspendStrategy"
        }
    }

    /// 迁移列对象
    public struct DMSColumn: TCInputModel, TCOutputModel {
        /// 名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 排序
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let position: Int64?

        /// 附加参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let params: [KVPair]?

        /// 业务参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bizParams: [KVPair]?

        /// 是否分区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isPartition: Bool?

        public init(name: String? = nil, description: String? = nil, type: String? = nil, position: Int64? = nil, params: [KVPair]? = nil, bizParams: [KVPair]? = nil, isPartition: Bool? = nil) {
            self.name = name
            self.description = description
            self.type = type
            self.position = position
            self.params = params
            self.bizParams = bizParams
            self.isPartition = isPartition
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case type = "Type"
            case position = "Position"
            case params = "Params"
            case bizParams = "BizParams"
            case isPartition = "IsPartition"
        }
    }

    /// 列排序对象
    public struct DMSColumnOrder: TCInputModel, TCOutputModel {
        /// 列名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let col: String?

        /// 排序
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let order: Int64?

        public init(col: String? = nil, order: Int64? = nil) {
            self.col = col
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case col = "Col"
            case order = "Order"
        }
    }

    /// 迁移元数据分区对象
    public struct DMSPartition: TCInputModel, TCOutputModel {
        /// 数据库名称
        public let databaseName: String?

        /// 数据目录名称
        public let schemaName: String?

        /// 表名称
        public let tableName: String?

        /// 数据版本
        public let dataVersion: Int64?

        /// 分区名称
        public let name: String?

        /// 值列表
        public let values: [String]?

        /// 存储大小
        public let storageSize: Int64?

        /// 记录数量
        public let recordCount: Int64?

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date?

        /// 修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifiedTime: Date?

        /// 最后访问时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastAccessTime: Date?

        /// 附件属性
        public let params: [KVPair]?

        /// 存储对象
        public let sds: DMSSds?

        public init(databaseName: String? = nil, schemaName: String? = nil, tableName: String? = nil, dataVersion: Int64? = nil, name: String? = nil, values: [String]? = nil, storageSize: Int64? = nil, recordCount: Int64? = nil, createTime: Date? = nil, modifiedTime: Date? = nil, lastAccessTime: Date? = nil, params: [KVPair]? = nil, sds: DMSSds? = nil) {
            self.databaseName = databaseName
            self.schemaName = schemaName
            self.tableName = tableName
            self.dataVersion = dataVersion
            self.name = name
            self.values = values
            self.storageSize = storageSize
            self.recordCount = recordCount
            self._createTime = .init(wrappedValue: createTime)
            self._modifiedTime = .init(wrappedValue: modifiedTime)
            self._lastAccessTime = .init(wrappedValue: lastAccessTime)
            self.params = params
            self.sds = sds
        }

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case schemaName = "SchemaName"
            case tableName = "TableName"
            case dataVersion = "DataVersion"
            case name = "Name"
            case values = "Values"
            case storageSize = "StorageSize"
            case recordCount = "RecordCount"
            case createTime = "CreateTime"
            case modifiedTime = "ModifiedTime"
            case lastAccessTime = "LastAccessTime"
            case params = "Params"
            case sds = "Sds"
        }
    }

    /// 元数据存储描述属性
    public struct DMSSds: TCInputModel, TCOutputModel {
        /// 存储地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let location: String?

        /// 输入格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inputFormat: String?

        /// 输出格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let outputFormat: String?

        /// bucket数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numBuckets: Int64?

        /// 是是否压缩
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compressed: Bool?

        /// 是否有子目录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storedAsSubDirectories: Bool?

        /// 序列化lib
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serdeLib: String?

        /// 序列化名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serdeName: String?

        /// 桶名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketCols: [String]?

        /// 序列化参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serdeParams: [KVPair]?

        /// 附加参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let params: [KVPair]?

        /// 列排序(Expired)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sortCols: DMSColumnOrder?

        /// 列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cols: [DMSColumn]?

        /// 列排序字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sortColumns: [DMSColumnOrder]?

        public init(location: String? = nil, inputFormat: String? = nil, outputFormat: String? = nil, numBuckets: Int64? = nil, compressed: Bool? = nil, storedAsSubDirectories: Bool? = nil, serdeLib: String? = nil, serdeName: String? = nil, bucketCols: [String]? = nil, serdeParams: [KVPair]? = nil, params: [KVPair]? = nil, sortCols: DMSColumnOrder? = nil, cols: [DMSColumn]? = nil, sortColumns: [DMSColumnOrder]? = nil) {
            self.location = location
            self.inputFormat = inputFormat
            self.outputFormat = outputFormat
            self.numBuckets = numBuckets
            self.compressed = compressed
            self.storedAsSubDirectories = storedAsSubDirectories
            self.serdeLib = serdeLib
            self.serdeName = serdeName
            self.bucketCols = bucketCols
            self.serdeParams = serdeParams
            self.params = params
            self.sortCols = sortCols
            self.cols = cols
            self.sortColumns = sortColumns
        }

        enum CodingKeys: String, CodingKey {
            case location = "Location"
            case inputFormat = "InputFormat"
            case outputFormat = "OutputFormat"
            case numBuckets = "NumBuckets"
            case compressed = "Compressed"
            case storedAsSubDirectories = "StoredAsSubDirectories"
            case serdeLib = "SerdeLib"
            case serdeName = "SerdeName"
            case bucketCols = "BucketCols"
            case serdeParams = "SerdeParams"
            case params = "Params"
            case sortCols = "SortCols"
            case cols = "Cols"
            case sortColumns = "SortColumns"
        }
    }

    /// DMSTable基本信息
    public struct DMSTable: TCInputModel, TCOutputModel {
        /// 视图文本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewOriginalText: String?

        /// 视图文本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewExpandedText: String?

        /// hive维护版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let retention: Int64?

        /// 存储对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sds: DMSSds?

        /// 分区列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partitionKeys: [DMSColumn]?

        /// 分区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partitions: [DMSPartition]?

        /// 表类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 数据库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbName: String?

        /// Schema名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let schemaName: String?

        /// 存储大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageSize: Int64?

        /// 记录数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recordCount: Int64?

        /// 生命周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lifeTime: Int64?

        /// 最后访问时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastAccessTime: Date?

        /// 数据更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var dataUpdateTime: Date?

        /// 结构更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var structUpdateTime: Date?

        /// 列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let columns: [DMSColumn]?

        /// 表名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        public init(viewOriginalText: String? = nil, viewExpandedText: String? = nil, retention: Int64? = nil, sds: DMSSds? = nil, partitionKeys: [DMSColumn]? = nil, partitions: [DMSPartition]? = nil, type: String? = nil, dbName: String? = nil, schemaName: String? = nil, storageSize: Int64? = nil, recordCount: Int64? = nil, lifeTime: Int64? = nil, lastAccessTime: Date? = nil, dataUpdateTime: Date? = nil, structUpdateTime: Date? = nil, columns: [DMSColumn]? = nil, name: String? = nil) {
            self.viewOriginalText = viewOriginalText
            self.viewExpandedText = viewExpandedText
            self.retention = retention
            self.sds = sds
            self.partitionKeys = partitionKeys
            self.partitions = partitions
            self.type = type
            self.dbName = dbName
            self.schemaName = schemaName
            self.storageSize = storageSize
            self.recordCount = recordCount
            self.lifeTime = lifeTime
            self._lastAccessTime = .init(wrappedValue: lastAccessTime)
            self._dataUpdateTime = .init(wrappedValue: dataUpdateTime)
            self._structUpdateTime = .init(wrappedValue: structUpdateTime)
            self.columns = columns
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case viewOriginalText = "ViewOriginalText"
            case viewExpandedText = "ViewExpandedText"
            case retention = "Retention"
            case sds = "Sds"
            case partitionKeys = "PartitionKeys"
            case partitions = "Partitions"
            case type = "Type"
            case dbName = "DbName"
            case schemaName = "SchemaName"
            case storageSize = "StorageSize"
            case recordCount = "RecordCount"
            case lifeTime = "LifeTime"
            case lastAccessTime = "LastAccessTime"
            case dataUpdateTime = "DataUpdateTime"
            case structUpdateTime = "StructUpdateTime"
            case columns = "Columns"
            case name = "Name"
        }
    }

    /// DMSTable信息
    public struct DMSTableInfo: TCOutputModel {
        /// DMS表信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let table: DMSTable?

        /// 基础对象信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asset: Asset?

        enum CodingKeys: String, CodingKey {
            case table = "Table"
            case asset = "Asset"
        }
    }

    /// 引擎配置
    public struct DataEngineConfigPair: TCInputModel, TCOutputModel {
        public init() {
        }
    }

    /// DataEngine详细信息
    public struct DataEngineInfo: TCInputModel, TCOutputModel {
        /// DataEngine名称
        public let dataEngineName: String

        /// 引擎类型 spark/presto
        public let engineType: String

        /// 集群资源类型 spark_private/presto_private/presto_cu/spark_cu
        public let clusterType: String

        /// 引用ID
        public let quotaId: String?

        /// 数据引擎状态  -2已删除 -1失败 0初始化中 1挂起 2运行中 3准备删除 4删除中
        public let state: Int64?

        /// 创建时间
        public let createTime: Int64?

        /// 更新时间
        public let updateTime: Int64?

        /// 集群规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let size: Int64?

        /// 计费模式 0共享模式 1按量计费 2包年包月
        public let mode: Int64?

        /// 最小集群数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minClusters: Int64?

        /// 最大集群数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxClusters: Int64?

        /// 是否自动恢复
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoResume: Bool?

        /// 自动恢复时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let spendAfter: Int64?

        /// 集群网段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cidrBlock: String?

        /// 是否为默认引擎
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultDataEngine: Bool?

        /// 返回信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 引擎id
        public let dataEngineId: String?

        /// 操作者
        public let subAccountUin: String?

        /// 到期时间
        public let expireTime: String?

        /// 隔离时间
        public let isolatedTime: String?

        /// 冲正时间
        public let reversalTime: String?

        /// 用户名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userAlias: String?

        /// 标签对集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagList: [TagInfo]?

        /// 引擎拥有的权限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let permissions: [String]?

        /// 是否自定挂起集群：false（默认）：不自动挂起、true：自动挂起
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoSuspend: Bool?

        /// 定时启停集群策略：0（默认）：关闭定时策略、1：开启定时策略（注：定时启停策略与自动挂起策略互斥）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let crontabResumeSuspend: Int64?

        /// 定时启停策略，复杂类型：包含启停时间、挂起集群策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let crontabResumeSuspendStrategy: CrontabResumeSuspendStrategy?

        /// 引擎执行任务类型，有效值：SQL/BATCH
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineExecType: String?

        /// 自动续费标志，0，初始状态，默认不自动续费，若用户有预付费不停服特权，自动续费。1：自动续费。2：明确不自动续费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: Int64?

        /// 集群自动挂起时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoSuspendTime: Int64?

        /// 网络连接配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkConnectionSet: [NetworkConnection]?

        /// ui的跳转地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uiURL: String?

        /// 引擎的资源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceType: String?

        /// 集群镜像版本ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageVersionId: String?

        /// 集群镜像小版本ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let childImageVersionId: String?

        /// 集群镜像版本名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageVersionName: String?

        /// 是否开启备集群
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startStandbyCluster: Bool?

        public init(dataEngineName: String, engineType: String, clusterType: String, quotaId: String? = nil, state: Int64? = nil, createTime: Int64? = nil, updateTime: Int64? = nil, size: Int64? = nil, mode: Int64? = nil, minClusters: Int64? = nil, maxClusters: Int64? = nil, autoResume: Bool? = nil, spendAfter: Int64? = nil, cidrBlock: String? = nil, defaultDataEngine: Bool? = nil, message: String? = nil, dataEngineId: String? = nil, subAccountUin: String? = nil, expireTime: String? = nil, isolatedTime: String? = nil, reversalTime: String? = nil, userAlias: String? = nil, tagList: [TagInfo]? = nil, permissions: [String]? = nil, autoSuspend: Bool? = nil, crontabResumeSuspend: Int64? = nil, crontabResumeSuspendStrategy: CrontabResumeSuspendStrategy? = nil, engineExecType: String? = nil, renewFlag: Int64? = nil, autoSuspendTime: Int64? = nil, networkConnectionSet: [NetworkConnection]? = nil, uiURL: String? = nil, resourceType: String? = nil, imageVersionId: String? = nil, childImageVersionId: String? = nil, imageVersionName: String? = nil, startStandbyCluster: Bool? = nil) {
            self.dataEngineName = dataEngineName
            self.engineType = engineType
            self.clusterType = clusterType
            self.quotaId = quotaId
            self.state = state
            self.createTime = createTime
            self.updateTime = updateTime
            self.size = size
            self.mode = mode
            self.minClusters = minClusters
            self.maxClusters = maxClusters
            self.autoResume = autoResume
            self.spendAfter = spendAfter
            self.cidrBlock = cidrBlock
            self.defaultDataEngine = defaultDataEngine
            self.message = message
            self.dataEngineId = dataEngineId
            self.subAccountUin = subAccountUin
            self.expireTime = expireTime
            self.isolatedTime = isolatedTime
            self.reversalTime = reversalTime
            self.userAlias = userAlias
            self.tagList = tagList
            self.permissions = permissions
            self.autoSuspend = autoSuspend
            self.crontabResumeSuspend = crontabResumeSuspend
            self.crontabResumeSuspendStrategy = crontabResumeSuspendStrategy
            self.engineExecType = engineExecType
            self.renewFlag = renewFlag
            self.autoSuspendTime = autoSuspendTime
            self.networkConnectionSet = networkConnectionSet
            self.uiURL = uiURL
            self.resourceType = resourceType
            self.imageVersionId = imageVersionId
            self.childImageVersionId = childImageVersionId
            self.imageVersionName = imageVersionName
            self.startStandbyCluster = startStandbyCluster
        }

        enum CodingKeys: String, CodingKey {
            case dataEngineName = "DataEngineName"
            case engineType = "EngineType"
            case clusterType = "ClusterType"
            case quotaId = "QuotaId"
            case state = "State"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case size = "Size"
            case mode = "Mode"
            case minClusters = "MinClusters"
            case maxClusters = "MaxClusters"
            case autoResume = "AutoResume"
            case spendAfter = "SpendAfter"
            case cidrBlock = "CidrBlock"
            case defaultDataEngine = "DefaultDataEngine"
            case message = "Message"
            case dataEngineId = "DataEngineId"
            case subAccountUin = "SubAccountUin"
            case expireTime = "ExpireTime"
            case isolatedTime = "IsolatedTime"
            case reversalTime = "ReversalTime"
            case userAlias = "UserAlias"
            case tagList = "TagList"
            case permissions = "Permissions"
            case autoSuspend = "AutoSuspend"
            case crontabResumeSuspend = "CrontabResumeSuspend"
            case crontabResumeSuspendStrategy = "CrontabResumeSuspendStrategy"
            case engineExecType = "EngineExecType"
            case renewFlag = "RenewFlag"
            case autoSuspendTime = "AutoSuspendTime"
            case networkConnectionSet = "NetworkConnectionSet"
            case uiURL = "UiURL"
            case resourceType = "ResourceType"
            case imageVersionId = "ImageVersionId"
            case childImageVersionId = "ChildImageVersionId"
            case imageVersionName = "ImageVersionName"
            case startStandbyCluster = "StartStandbyCluster"
        }
    }

    /// 数据表数据格式。
    public struct DataFormat: TCOutputModel {
        /// 文本格式，TextFile。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let textFile: TextFile?

        /// 文本格式，CSV。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let csv: CSV?

        /// 文本格式，Json。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let json: Other?

        /// Parquet格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let parquet: Other?

        /// ORC格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orc: Other?

        /// AVRO格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let avro: Other?

        enum CodingKeys: String, CodingKey {
            case textFile = "TextFile"
            case csv = "CSV"
            case json = "Json"
            case parquet = "Parquet"
            case orc = "ORC"
            case avro = "AVRO"
        }
    }

    /// 数据治理规则
    public struct DataGovernPolicy: TCInputModel, TCOutputModel {
        public init() {
        }
    }

    /// 数据库对象
    public struct DatabaseInfo: TCInputModel, TCOutputModel {
        /// 数据库名称，长度0~128，支持数字、字母下划线，不允许数字大头，统一转换为小写。
        public let databaseName: String

        /// 数据库描述信息，长度 0~500。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let comment: String?

        /// 数据库属性列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let properties: [Property]?

        /// 数据库cos路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let location: String?

        public init(databaseName: String, comment: String? = nil, properties: [Property]? = nil, location: String? = nil) {
            self.databaseName = databaseName
            self.comment = comment
            self.properties = properties
            self.location = location
        }

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case comment = "Comment"
            case properties = "Properties"
            case location = "Location"
        }
    }

    /// 数据库对象
    public struct DatabaseResponseInfo: TCOutputModel {
        /// 数据库名称。
        public let databaseName: String

        /// 数据库描述信息，长度 0~256。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let comment: String?

        /// 允许针对数据库的属性元数据信息进行指定。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let properties: [Property]?

        /// 数据库创建时间戳，单位：s。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 数据库更新时间戳，单位：s。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifiedTime: String?

        /// cos存储路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let location: String?

        /// 建库用户昵称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userAlias: String?

        /// 建库用户ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userSubUin: String?

        /// 数据治理配置项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let governPolicy: DataGovernPolicy?

        /// 数据库ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseId: String?

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case comment = "Comment"
            case properties = "Properties"
            case createTime = "CreateTime"
            case modifiedTime = "ModifiedTime"
            case location = "Location"
            case userAlias = "UserAlias"
            case userSubUin = "UserSubUin"
            case governPolicy = "GovernPolicy"
            case databaseId = "DatabaseId"
        }
    }

    /// SQL语句对象
    public struct Execution: TCOutputModel {
        /// 自动生成SQL语句。
        public let sql: String

        enum CodingKeys: String, CodingKey {
            case sql = "SQL"
        }
    }

    /// 查询列表过滤条件参数
    public struct Filter: TCInputModel {
        /// 属性名称, 若存在多个Filter时，Filter间的关系为逻辑或（OR）关系。
        public let name: String

        /// 属性值, 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 日志详情
    public struct JobLogResult: TCOutputModel {
        /// 日志时间戳，毫秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let time: Int64?

        /// 日志topic id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicId: String?

        /// 日志topic name
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicName: String?

        /// 日志内容，json字符串
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logJson: String?

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case topicId = "TopicId"
            case topicName = "TopicName"
            case logJson = "LogJson"
        }
    }

    /// 配置格式
    public struct KVPair: TCInputModel, TCOutputModel {
        /// 配置的key值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 配置的value值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 元数据加锁内容
    public struct LockComponentInfo: TCInputModel {
        /// 数据库名称
        public let dbName: String

        /// 表名称
        public let tableName: String?

        /// 分区
        public let partition: String?

        /// 锁类型：SHARED_READ、SHARED_WRITE、EXCLUSIVE
        public let lockType: String?

        /// 锁级别：DB、TABLE、PARTITION
        public let lockLevel: String?

        /// 锁操作：SELECT,INSERT,UPDATE,DELETE,UNSET,NO_TXN
        public let dataOperationType: String?

        /// 是否保持Acid
        public let isAcid: Bool?

        /// 是否动态分区写
        public let isDynamicPartitionWrite: Bool?

        public init(dbName: String, tableName: String? = nil, partition: String? = nil, lockType: String? = nil, lockLevel: String? = nil, dataOperationType: String? = nil, isAcid: Bool? = nil, isDynamicPartitionWrite: Bool? = nil) {
            self.dbName = dbName
            self.tableName = tableName
            self.partition = partition
            self.lockType = lockType
            self.lockLevel = lockLevel
            self.dataOperationType = dataOperationType
            self.isAcid = isAcid
            self.isDynamicPartitionWrite = isDynamicPartitionWrite
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
            case tableName = "TableName"
            case partition = "Partition"
            case lockType = "LockType"
            case lockLevel = "LockLevel"
            case dataOperationType = "DataOperationType"
            case isAcid = "IsAcid"
            case isDynamicPartitionWrite = "IsDynamicPartitionWrite"
        }
    }

    /// 网络配置
    public struct NetworkConnection: TCInputModel, TCOutputModel {
        /// 网络配置id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 网络配置唯一标志符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let associateId: String?

        /// 计算引擎id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let houseId: String?

        /// 数据源id(已废弃)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionId: String?

        /// 网络配置状态（0-初始化，1-正常）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let state: Int64?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: Int64?

        /// 修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Int64?

        /// 创建用户Appid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appid: Int64?

        /// 计算引擎名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let houseName: String?

        /// 网络配置名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionName: String?

        /// 网络配置类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkConnectionType: Int64?

        /// 创建用户uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uin: String?

        /// 创建用户SubAccountUin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subAccountUin: String?

        /// 网络配置描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkConnectionDesc: String?

        /// 数据源vpcid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionVpcId: String?

        /// 数据源SubnetId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionSubnetId: String?

        /// 数据源SubnetId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionCidrBlock: String?

        /// 数据源SubnetCidrBlock
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionSubnetCidrBlock: String?

        public init(id: Int64? = nil, associateId: String? = nil, houseId: String? = nil, datasourceConnectionId: String? = nil, state: Int64? = nil, createTime: Int64? = nil, updateTime: Int64? = nil, appid: Int64? = nil, houseName: String? = nil, datasourceConnectionName: String? = nil, networkConnectionType: Int64? = nil, uin: String? = nil, subAccountUin: String? = nil, networkConnectionDesc: String? = nil, datasourceConnectionVpcId: String? = nil, datasourceConnectionSubnetId: String? = nil, datasourceConnectionCidrBlock: String? = nil, datasourceConnectionSubnetCidrBlock: String? = nil) {
            self.id = id
            self.associateId = associateId
            self.houseId = houseId
            self.datasourceConnectionId = datasourceConnectionId
            self.state = state
            self.createTime = createTime
            self.updateTime = updateTime
            self.appid = appid
            self.houseName = houseName
            self.datasourceConnectionName = datasourceConnectionName
            self.networkConnectionType = networkConnectionType
            self.uin = uin
            self.subAccountUin = subAccountUin
            self.networkConnectionDesc = networkConnectionDesc
            self.datasourceConnectionVpcId = datasourceConnectionVpcId
            self.datasourceConnectionSubnetId = datasourceConnectionSubnetId
            self.datasourceConnectionCidrBlock = datasourceConnectionCidrBlock
            self.datasourceConnectionSubnetCidrBlock = datasourceConnectionSubnetCidrBlock
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case associateId = "AssociateId"
            case houseId = "HouseId"
            case datasourceConnectionId = "DatasourceConnectionId"
            case state = "State"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case appid = "Appid"
            case houseName = "HouseName"
            case datasourceConnectionName = "DatasourceConnectionName"
            case networkConnectionType = "NetworkConnectionType"
            case uin = "Uin"
            case subAccountUin = "SubAccountUin"
            case networkConnectionDesc = "NetworkConnectionDesc"
            case datasourceConnectionVpcId = "DatasourceConnectionVpcId"
            case datasourceConnectionSubnetId = "DatasourceConnectionSubnetId"
            case datasourceConnectionCidrBlock = "DatasourceConnectionCidrBlock"
            case datasourceConnectionSubnetCidrBlock = "DatasourceConnectionSubnetCidrBlock"
        }
    }

    /// Notebook Session详细信息。
    public struct NotebookSessionInfo: TCOutputModel {
        /// Session名称
        public let name: String

        /// 类型，当前支持：spark、pyspark、sparkr、sql
        public let kind: String

        /// DLC Spark作业引擎名称
        public let dataEngineName: String

        /// Session相关配置，当前支持：eni、roleArn以及用户指定的配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let arguments: [KVPair]?

        /// 运行程序地址，当前支持：cosn://和lakefs://两种路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let programDependentFiles: [String]?

        /// 依赖的jar程序地址，当前支持：cosn://和lakefs://两种路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let programDependentJars: [String]?

        /// 依赖的python程序地址，当前支持：cosn://和lakefs://两种路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let programDependentPython: [String]?

        /// 依赖的pyspark虚拟环境地址，当前支持：cosn://和lakefs://两种路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let programArchives: [String]?

        /// 指定的Driver规格，当前支持：small（默认，1cu）、medium（2cu）、large（4cu）、xlarge（8cu）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let driverSize: String?

        /// 指定的Executor规格，当前支持：small（默认，1cu）、medium（2cu）、large（4cu）、xlarge（8cu）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let executorSize: String?

        /// 指定的Executor数量，默认为1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let executorNumbers: UInt64?

        /// 代理用户，默认为root
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyUser: String?

        /// 指定的Session超时时间，单位秒，默认3600秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeoutInSecond: Int64?

        /// Spark任务返回的AppId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkAppId: String?

        /// Session唯一标识
        public let sessionId: String

        /// Session状态，包含：not_started（未启动）、starting（已启动）、idle（等待输入）、busy(正在运行statement)、shutting_down（停止）、error（异常）、dead（已退出）、killed（被杀死）、success（正常停止）
        public let state: String

        /// Session创建时间
        public let createTime: String

        /// 其它信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appInfo: [KVPair]?

        /// Spark ui地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkUiUrl: String?

        /// 指定的Executor数量（最大值），默认为1，当开启动态分配有效，若未开启，则该值等于ExecutorNumbers
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let executorMaxNumbers: UInt64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case kind = "Kind"
            case dataEngineName = "DataEngineName"
            case arguments = "Arguments"
            case programDependentFiles = "ProgramDependentFiles"
            case programDependentJars = "ProgramDependentJars"
            case programDependentPython = "ProgramDependentPython"
            case programArchives = "ProgramArchives"
            case driverSize = "DriverSize"
            case executorSize = "ExecutorSize"
            case executorNumbers = "ExecutorNumbers"
            case proxyUser = "ProxyUser"
            case timeoutInSecond = "TimeoutInSecond"
            case sparkAppId = "SparkAppId"
            case sessionId = "SessionId"
            case state = "State"
            case createTime = "CreateTime"
            case appInfo = "AppInfo"
            case sparkUiUrl = "SparkUiUrl"
            case executorMaxNumbers = "ExecutorMaxNumbers"
        }
    }

    /// 按批提交Statement运行SQL任务。
    public struct NotebookSessionStatementBatchInformation: TCOutputModel {
        /// 任务详情列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notebookSessionStatementBatch: [NotebookSessionStatementInfo]?

        /// 当前批任务是否运行完成
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAvailable: Bool?

        /// Session唯一标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionId: String?

        /// Batch唯一标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let batchId: String?

        enum CodingKeys: String, CodingKey {
            case notebookSessionStatementBatch = "NotebookSessionStatementBatch"
            case isAvailable = "IsAvailable"
            case sessionId = "SessionId"
            case batchId = "BatchId"
        }
    }

    /// NotebookSessionStatement详情。
    public struct NotebookSessionStatementInfo: TCOutputModel {
        /// 完成时间戳
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let completed: Int64?

        /// 开始时间戳
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let started: Int64?

        /// 完成进度，百分制
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progress: Float?

        /// Session Statement唯一标识
        public let statementId: String

        /// Session Statement状态，包含：waiting（排队中）、running（运行中）、available（正常）、error（异常）、cancelling（取消中）、cancelled（已取消）
        public let state: String

        /// Statement输出信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let outPut: StatementOutput?

        /// 批任务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let batchId: String?

        /// 运行语句
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let code: String?

        /// 任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        enum CodingKeys: String, CodingKey {
            case completed = "Completed"
            case started = "Started"
            case progress = "Progress"
            case statementId = "StatementId"
            case state = "State"
            case outPut = "OutPut"
            case batchId = "BatchId"
            case code = "Code"
            case taskId = "TaskId"
        }
    }

    /// notebook session列表信息。
    public struct NotebookSessions: TCOutputModel {
        /// 类型，当前支持：spark、pyspark、sparkr、sql
        public let kind: String

        /// Session唯一标识
        public let sessionId: String

        /// 代理用户，默认为root
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyUser: String?

        /// Session状态，包含：not_started（未启动）、starting（已启动）、idle（等待输入）、busy(正在运行statement)、shutting_down（停止）、error（异常）、dead（已退出）、killed（被杀死）、success（正常停止）
        public let state: String

        /// Spark任务返回的AppId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkAppId: String?

        /// Session名称
        public let name: String

        /// Session创建时间
        public let createTime: String

        /// 引擎名称
        public let dataEngineName: String

        /// 最新的运行时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastRunningTime: String?

        /// 创建者
        public let creator: String

        /// spark ui地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkUiUrl: String?

        enum CodingKeys: String, CodingKey {
            case kind = "Kind"
            case sessionId = "SessionId"
            case proxyUser = "ProxyUser"
            case state = "State"
            case sparkAppId = "SparkAppId"
            case name = "Name"
            case createTime = "CreateTime"
            case dataEngineName = "DataEngineName"
            case lastRunningTime = "LastRunningTime"
            case creator = "Creator"
            case sparkUiUrl = "SparkUiUrl"
        }
    }

    /// 数据格式其它类型。
    public struct Other: TCOutputModel {
        /// 枚举类型，默认值为Json，可选值为[Json, Parquet, ORC, AVRD]之一。
        public let format: String

        enum CodingKeys: String, CodingKey {
            case format = "Format"
        }
    }

    /// 数据表分块信息。
    public struct Partition: TCOutputModel {
        /// 分区列名。
        public let name: String

        /// 分区类型。
        public let type: String

        /// 对分区的描述。
        public let comment: String

        /// 隐式分区转换策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transform: String?

        /// 转换策略参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transformArgs: [String]?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: Int64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case comment = "Comment"
            case transform = "Transform"
            case transformArgs = "TransformArgs"
            case createTime = "CreateTime"
        }
    }

    /// 权限对象
    public struct Policy: TCInputModel, TCOutputModel {
        /// 需要授权的数据库名，填*代表当前Catalog下所有数据库。当授权类型为管理员级别时，只允许填“*”，当授权类型为数据连接级别时只允许填空，其他类型下可以任意指定数据库。
        public let database: String

        /// 需要授权的数据源名称，管理员级别下只支持填*（代表该级别全部资源）；数据源级别和数据库级别鉴权的情况下，只支持填COSDataCatalog或者*；在数据表级别鉴权下可以填写用户自定义数据源。不填情况下默认为DataLakeCatalog。注意：如果是对用户自定义数据源进行鉴权，DLC能够管理的权限是用户接入数据源的时候提供的账户的子集。
        public let catalog: String

        /// 需要授权的表名，填*代表当前Database下所有表。当授权类型为管理员级别时，只允许填“*”，当授权类型为数据连接级别、数据库级别时只允许填空，其他类型下可以任意指定数据表。
        public let table: String

        /// 授权的权限操作，对于不同级别的鉴权提供不同操作。管理员权限：ALL，不填默认为ALL；数据连接级鉴权：CREATE；数据库级别鉴权：ALL、CREATE、ALTER、DROP；数据表权限：ALL、SELECT、INSERT、ALTER、DELETE、DROP、UPDATE。注意：在数据表权限下，指定的数据源不为COSDataCatalog的时候，只支持SELECT操作。
        public let operation: String

        /// 授权类型，现在支持八种授权类型：ADMIN:管理员级别鉴权 DATASOURCE：数据连接级别鉴权 DATABASE：数据库级别鉴权 TABLE：表级别鉴权 VIEW：视图级别鉴权 FUNCTION：函数级别鉴权 COLUMN：列级别鉴权 ENGINE：数据引擎鉴权。不填默认为管理员级别鉴权。
        public let policyType: String?

        /// 需要授权的函数名，填*代表当前Catalog下所有函数。当授权类型为管理员级别时，只允许填“*”，当授权类型为数据连接级别时只允许填空，其他类型下可以任意指定函数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let function: String?

        /// 需要授权的视图，填*代表当前Database下所有视图。当授权类型为管理员级别时，只允许填“*”，当授权类型为数据连接级别、数据库级别时只允许填空，其他类型下可以任意指定视图。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let view: String?

        /// 需要授权的列，填*代表当前所有列。当授权类型为管理员级别时，只允许填“*”
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let column: String?

        /// 需要授权的数据引擎，填*代表当前所有引擎。当授权类型为管理员级别时，只允许填“*”
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataEngine: String?

        /// 用户是否可以进行二次授权。当为true的时候，被授权的用户可以将本次获取的权限再次授权给其他子用户。默认为false
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reAuth: Bool?

        /// 权限来源，入参不填。USER：权限来自用户本身；WORKGROUP：权限来自绑定的工作组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: String?

        /// 授权模式，入参不填。COMMON：普通模式；SENIOR：高级模式。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mode: String?

        /// 操作者，入参不填。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `operator`: String?

        /// 权限创建的时间，入参不填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 权限所属工作组的ID，只有当该权限的来源为工作组时才会有值。即仅当Source字段的值为WORKGROUP时该字段才有值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceId: Int64?

        /// 权限所属工作组的名称，只有当该权限的来源为工作组时才会有值。即仅当Source字段的值为WORKGROUP时该字段才有值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceName: String?

        /// 策略ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        public init(database: String, catalog: String, table: String, operation: String, policyType: String? = nil, function: String? = nil, view: String? = nil, column: String? = nil, dataEngine: String? = nil, reAuth: Bool? = nil, source: String? = nil, mode: String? = nil, operator: String? = nil, createTime: String? = nil, sourceId: Int64? = nil, sourceName: String? = nil, id: Int64? = nil) {
            self.database = database
            self.catalog = catalog
            self.table = table
            self.operation = operation
            self.policyType = policyType
            self.function = function
            self.view = view
            self.column = column
            self.dataEngine = dataEngine
            self.reAuth = reAuth
            self.source = source
            self.mode = mode
            self.operator = `operator`
            self.createTime = createTime
            self.sourceId = sourceId
            self.sourceName = sourceName
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case catalog = "Catalog"
            case table = "Table"
            case operation = "Operation"
            case policyType = "PolicyType"
            case function = "Function"
            case view = "View"
            case column = "Column"
            case dataEngine = "DataEngine"
            case reAuth = "ReAuth"
            case source = "Source"
            case mode = "Mode"
            case `operator` = "Operator"
            case createTime = "CreateTime"
            case sourceId = "SourceId"
            case sourceName = "SourceName"
            case id = "Id"
        }
    }

    /// 数据库和数据表属性信息
    public struct Property: TCInputModel, TCOutputModel {
        /// 属性key名称。
        public let key: String

        /// 属性key对应的value。
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// SQL查询任务
    public struct SQLTask: TCInputModel {
        /// base64加密后的SQL语句
        public let sql: String

        /// 任务的配置信息
        public let config: [KVPair]?

        public init(sql: String, config: [KVPair]? = nil) {
            self.sql = sql
            self.config = config
        }

        enum CodingKeys: String, CodingKey {
            case sql = "SQL"
            case config = "Config"
        }
    }

    /// script实例。
    public struct Script: TCOutputModel {
        /// 脚本Id，长度36字节。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scriptId: String?

        /// 脚本名称，长度0-25。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scriptName: String?

        /// 脚本描述，长度0-50。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scriptDesc: String?

        /// 默认关联数据库。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseName: String?

        /// SQL描述，长度0-10000。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sqlStatement: String?

        /// 更新时间戳， 单位：ms。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Int64?

        enum CodingKeys: String, CodingKey {
            case scriptId = "ScriptId"
            case scriptName = "ScriptName"
            case scriptDesc = "ScriptDesc"
            case databaseName = "DatabaseName"
            case sqlStatement = "SQLStatement"
            case updateTime = "UpdateTime"
        }
    }

    /// spark作业详情。
    public struct SparkJobInfo: TCOutputModel {
        /// spark作业ID
        public let jobId: String

        /// spark作业名
        public let jobName: String

        /// spark作业类型，可去1或者2，1表示batch作业， 2表示streaming作业
        public let jobType: Int64

        /// 引擎名
        public let dataEngine: String

        /// 该字段已下线，请使用字段Datasource
        public let eni: String

        /// 程序包是否本地上传，cos或者lakefs
        public let isLocal: String

        /// 程序包路径
        public let jobFile: String

        /// 角色ID
        public let roleArn: Int64

        /// spark作业运行主类
        public let mainClass: String

        /// 命令行参数，spark作业命令行参数，空格分隔
        public let cmdArgs: String

        /// spark原生配置，换行符分隔
        public let jobConf: String

        /// 依赖jars是否本地上传，cos或者lakefs
        public let isLocalJars: String

        /// spark作业依赖jars，逗号分隔
        public let jobJars: String

        /// 依赖文件是否本地上传，cos或者lakefs
        public let isLocalFiles: String

        /// spark作业依赖文件，逗号分隔
        public let jobFiles: String

        /// spark作业driver资源大小
        public let jobDriverSize: String

        /// spark作业executor资源大小
        public let jobExecutorSize: String

        /// spark作业executor个数
        public let jobExecutorNums: Int64

        /// spark流任务最大重试次数
        public let jobMaxAttempts: Int64

        /// spark作业创建者
        public let jobCreator: String

        /// spark作业创建时间
        public let jobCreateTime: Int64

        /// spark作业更新时间
        public let jobUpdateTime: UInt64

        /// spark作业最近任务ID
        public let currentTaskId: String

        /// spark作业最近运行状态
        public let jobStatus: Int64

        /// spark流作业统计
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let streamingStat: StreamingStatistics?

        /// 数据源名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSource: String?

        /// pyspark：依赖上传方式，1、cos；2、lakefs（控制台使用，该方式不支持直接接口调用）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isLocalPythonFiles: String?

        /// 注：该返回值已废弃
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appPythonFiles: String?

        /// archives：依赖上传方式，1、cos；2、lakefs（控制台使用，该方式不支持直接接口调用）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isLocalArchives: String?

        /// archives：依赖资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobArchives: String?

        /// Spark Image 版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkImage: String?

        /// pyspark：python依赖, 除py文件外，还支持zip/egg等归档格式，多文件以逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobPythonFiles: String?

        /// 当前job正在运行或准备运行的任务个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskNum: Int64?

        /// 引擎状态：-100（默认：未知状态），-2~11：引擎正常状态；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataEngineStatus: Int64?

        /// 指定的Executor数量（最大值），默认为1，当开启动态分配有效，若未开启，则该值等于JobExecutorNums
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobExecutorMaxNumbers: Int64?

        /// 镜像版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkImageVersion: String?

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case jobName = "JobName"
            case jobType = "JobType"
            case dataEngine = "DataEngine"
            case eni = "Eni"
            case isLocal = "IsLocal"
            case jobFile = "JobFile"
            case roleArn = "RoleArn"
            case mainClass = "MainClass"
            case cmdArgs = "CmdArgs"
            case jobConf = "JobConf"
            case isLocalJars = "IsLocalJars"
            case jobJars = "JobJars"
            case isLocalFiles = "IsLocalFiles"
            case jobFiles = "JobFiles"
            case jobDriverSize = "JobDriverSize"
            case jobExecutorSize = "JobExecutorSize"
            case jobExecutorNums = "JobExecutorNums"
            case jobMaxAttempts = "JobMaxAttempts"
            case jobCreator = "JobCreator"
            case jobCreateTime = "JobCreateTime"
            case jobUpdateTime = "JobUpdateTime"
            case currentTaskId = "CurrentTaskId"
            case jobStatus = "JobStatus"
            case streamingStat = "StreamingStat"
            case dataSource = "DataSource"
            case isLocalPythonFiles = "IsLocalPythonFiles"
            case appPythonFiles = "AppPythonFiles"
            case isLocalArchives = "IsLocalArchives"
            case jobArchives = "JobArchives"
            case sparkImage = "SparkImage"
            case jobPythonFiles = "JobPythonFiles"
            case taskNum = "TaskNum"
            case dataEngineStatus = "DataEngineStatus"
            case jobExecutorMaxNumbers = "JobExecutorMaxNumbers"
            case sparkImageVersion = "SparkImageVersion"
        }
    }

    /// notebook session statement输出信息。
    public struct StatementOutput: TCOutputModel {
        /// 执行总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let executionCount: Int64?

        /// Statement数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [KVPair]?

        /// Statement状态:ok,error
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 错误名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorName: String?

        /// 错误类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorValue: String?

        /// 错误堆栈信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMessage: [String]?

        /// SQL类型任务结果返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sqlResult: String?

        enum CodingKeys: String, CodingKey {
            case executionCount = "ExecutionCount"
            case data = "Data"
            case status = "Status"
            case errorName = "ErrorName"
            case errorValue = "ErrorValue"
            case errorMessage = "ErrorMessage"
            case sqlResult = "SQLResult"
        }
    }

    /// spark流任务统计信息
    public struct StreamingStatistics: TCOutputModel {
        /// 任务开始时间
        public let startTime: String

        /// 数据接收器数
        public let receivers: Int64

        /// 运行中的接收器数
        public let numActiveReceivers: Int64

        /// 不活跃的接收器数
        public let numInactiveReceivers: Int64

        /// 运行中的批数
        public let numActiveBatches: Int64

        /// 待处理的批数
        public let numRetainedCompletedBatches: Int64

        /// 已完成的批数
        public let numTotalCompletedBatches: Int64

        /// 平均输入速率
        public let averageInputRate: Float

        /// 平均等待时长
        public let averageSchedulingDelay: Float

        /// 平均处理时长
        public let averageProcessingTime: Float

        /// 平均延时
        public let averageTotalDelay: Float

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case receivers = "Receivers"
            case numActiveReceivers = "NumActiveReceivers"
            case numInactiveReceivers = "NumInactiveReceivers"
            case numActiveBatches = "NumActiveBatches"
            case numRetainedCompletedBatches = "NumRetainedCompletedBatches"
            case numTotalCompletedBatches = "NumTotalCompletedBatches"
            case averageInputRate = "AverageInputRate"
            case averageSchedulingDelay = "AverageSchedulingDelay"
            case averageProcessingTime = "AverageProcessingTime"
            case averageTotalDelay = "AverageTotalDelay"
        }
    }

    /// 表字段描述信息
    public struct TColumn: TCInputModel {
        /// 字段名称
        public let name: String

        /// 字段类型
        public let type: String

        /// 字段描述
        public let comment: String?

        /// 字段默认值
        public let `default`: String?

        /// 字段是否是非空
        public let notNull: Bool?

        public init(name: String, type: String, comment: String? = nil, default: String? = nil, notNull: Bool? = nil) {
            self.name = name
            self.type = type
            self.comment = comment
            self.default = `default`
            self.notNull = notNull
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case comment = "Comment"
            case `default` = "Default"
            case notNull = "NotNull"
        }
    }

    /// 表分区字段信息
    public struct TPartition: TCInputModel {
        /// 字段名称
        public let name: String

        /// 字段类型
        public let type: String?

        /// 字段描述
        public let comment: String?

        /// 分区类型
        public let partitionType: String?

        /// 分区格式
        public let partitionFormat: String?

        /// 分区分隔数
        public let partitionDot: Int64?

        /// 分区转换策略
        public let transform: String?

        /// 策略参数
        public let transformArgs: [String]?

        public init(name: String, type: String? = nil, comment: String? = nil, partitionType: String? = nil, partitionFormat: String? = nil, partitionDot: Int64? = nil, transform: String? = nil, transformArgs: [String]? = nil) {
            self.name = name
            self.type = type
            self.comment = comment
            self.partitionType = partitionType
            self.partitionFormat = partitionFormat
            self.partitionDot = partitionDot
            self.transform = transform
            self.transformArgs = transformArgs
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case comment = "Comment"
            case partitionType = "PartitionType"
            case partitionFormat = "PartitionFormat"
            case partitionDot = "PartitionDot"
            case transform = "Transform"
            case transformArgs = "TransformArgs"
        }
    }

    /// 数据表配置信息
    public struct TableBaseInfo: TCInputModel, TCOutputModel {
        /// 该数据表所属数据库名字
        public let databaseName: String

        /// 数据表名字
        public let tableName: String

        /// 该数据表所属数据源名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionName: String?

        /// 该数据表备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableComment: String?

        /// 具体类型，表or视图
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 数据格式类型，hive，iceberg等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableFormat: String?

        /// 建表用户昵称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userAlias: String?

        /// 建表用户ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userSubUin: String?

        /// 数据治理配置项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let governPolicy: DataGovernPolicy?

        public init(databaseName: String, tableName: String, datasourceConnectionName: String? = nil, tableComment: String? = nil, type: String? = nil, tableFormat: String? = nil, userAlias: String? = nil, userSubUin: String? = nil, governPolicy: DataGovernPolicy? = nil) {
            self.databaseName = databaseName
            self.tableName = tableName
            self.datasourceConnectionName = datasourceConnectionName
            self.tableComment = tableComment
            self.type = type
            self.tableFormat = tableFormat
            self.userAlias = userAlias
            self.userSubUin = userSubUin
            self.governPolicy = governPolicy
        }

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case tableName = "TableName"
            case datasourceConnectionName = "DatasourceConnectionName"
            case tableComment = "TableComment"
            case type = "Type"
            case tableFormat = "TableFormat"
            case userAlias = "UserAlias"
            case userSubUin = "UserSubUin"
            case governPolicy = "GovernPolicy"
        }
    }

    /// 返回数据表的相关信息。
    public struct TableInfo: TCInputModel, TCOutputModel {
        /// 数据表配置信息。
        public let tableBaseInfo: TableBaseInfo

        /// 数据表格式。每次入参可选如下其一的KV结构，[TextFile，CSV，Json, Parquet, ORC, AVRD]。
        public let dataFormat: DataFormat

        /// 数据表列信息。
        public let columns: [Column]

        /// 数据表分块信息。
        public let partitions: [Partition]

        /// 数据存储路径。当前仅支持cos路径，格式如下：cosn://bucket-name/filepath。
        public let location: String

        public init(tableBaseInfo: TableBaseInfo, dataFormat: DataFormat, columns: [Column], partitions: [Partition], location: String) {
            self.tableBaseInfo = tableBaseInfo
            self.dataFormat = dataFormat
            self.columns = columns
            self.partitions = partitions
            self.location = location
        }

        enum CodingKeys: String, CodingKey {
            case tableBaseInfo = "TableBaseInfo"
            case dataFormat = "DataFormat"
            case columns = "Columns"
            case partitions = "Partitions"
            case location = "Location"
        }
    }

    /// 查询表信息对象
    public struct TableResponseInfo: TCOutputModel {
        /// 数据表基本信息。
        public let tableBaseInfo: TableBaseInfo

        /// 数据表列信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let columns: [Column]?

        /// 数据表分块信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partitions: [Partition]?

        /// 数据存储路径。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let location: String?

        /// 数据表属性信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let properties: [Property]?

        /// 数据表更新时间, 单位: ms。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifiedTime: String?

        /// 数据表创建时间,单位: ms。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 数据格式。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inputFormat: String?

        /// 数据表存储大小（单位：Byte）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageSize: Int64?

        /// 数据表行数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recordCount: Int64?

        enum CodingKeys: String, CodingKey {
            case tableBaseInfo = "TableBaseInfo"
            case columns = "Columns"
            case partitions = "Partitions"
            case location = "Location"
            case properties = "Properties"
            case modifiedTime = "ModifiedTime"
            case createTime = "CreateTime"
            case inputFormat = "InputFormat"
            case storageSize = "StorageSize"
            case recordCount = "RecordCount"
        }
    }

    /// 标签对信息
    public struct TagInfo: TCInputModel, TCOutputModel {
        /// 标签键
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagKey: String?

        /// 标签值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagValue: String?

        public init(tagKey: String? = nil, tagValue: String? = nil) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 任务类型，任务如SQL查询等。
    public struct Task: TCInputModel {
        /// SQL查询任务
        public let sqlTask: SQLTask?

        /// Spark SQL查询任务
        public let sparkSQLTask: SQLTask?

        public init(sqlTask: SQLTask? = nil, sparkSQLTask: SQLTask? = nil) {
            self.sqlTask = sqlTask
            self.sparkSQLTask = sparkSQLTask
        }

        enum CodingKeys: String, CodingKey {
            case sqlTask = "SQLTask"
            case sparkSQLTask = "SparkSQLTask"
        }
    }

    /// 任务实例。
    public struct TaskResponseInfo: TCOutputModel {
        /// 任务所属Database的名称。
        public let databaseName: String

        /// 任务数据量。
        public let dataAmount: Int64

        /// 任务Id。
        public let id: String

        /// 计算耗时，单位： ms
        public let usedTime: Int64

        /// 任务输出路径。
        public let outputPath: String

        /// 任务创建时间。
        public let createTime: String

        /// 任务状态：0 初始化， 1 执行中， 2 执行成功，-1 执行失败，-3 已取消。
        public let state: Int64

        /// 任务SQL类型，DDL|DML等
        public let sqlType: String

        /// 任务SQL语句
        public let sql: String

        /// 结果是否过期。
        public let resultExpired: Bool

        /// 数据影响统计信息。
        public let rowAffectInfo: String

        /// 任务结果数据表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSet: String?

        /// 失败信息, 例如：errorMessage。该字段已废弃。
        public let error: String

        /// 任务执行进度num/100(%)
        public let percentage: Int64

        /// 任务执行输出信息。
        public let outputMessage: String

        /// 执行SQL的引擎类型
        public let taskType: String

        /// 任务进度明细
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progressDetail: String?

        /// 任务结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 计算资源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataEngineId: String?

        /// 执行sql的子uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operateUin: String?

        /// 计算资源名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataEngineName: String?

        /// 导入类型是本地导入还是cos
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inputType: String?

        /// 导入配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inputConf: String?

        /// 数据条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataNumber: Int64?

        /// 查询数据能不能下载
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let canDownload: Bool?

        /// 用户别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userAlias: String?

        /// spark应用作业名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkJobName: String?

        /// spark应用作业Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkJobId: String?

        /// spark应用入口jar文件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sparkJobFile: String?

        /// spark ui url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uiUrl: String?

        /// 任务耗时，单位： ms
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalTime: Int64?

        /// spark app job执行task的程序入口参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cmdArgs: String?

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case dataAmount = "DataAmount"
            case id = "Id"
            case usedTime = "UsedTime"
            case outputPath = "OutputPath"
            case createTime = "CreateTime"
            case state = "State"
            case sqlType = "SQLType"
            case sql = "SQL"
            case resultExpired = "ResultExpired"
            case rowAffectInfo = "RowAffectInfo"
            case dataSet = "DataSet"
            case error = "Error"
            case percentage = "Percentage"
            case outputMessage = "OutputMessage"
            case taskType = "TaskType"
            case progressDetail = "ProgressDetail"
            case updateTime = "UpdateTime"
            case dataEngineId = "DataEngineId"
            case operateUin = "OperateUin"
            case dataEngineName = "DataEngineName"
            case inputType = "InputType"
            case inputConf = "InputConf"
            case dataNumber = "DataNumber"
            case canDownload = "CanDownload"
            case userAlias = "UserAlias"
            case sparkJobName = "SparkJobName"
            case sparkJobId = "SparkJobId"
            case sparkJobFile = "SparkJobFile"
            case uiUrl = "UiUrl"
            case totalTime = "TotalTime"
            case cmdArgs = "CmdArgs"
        }
    }

    /// 任务结果信息。
    public struct TaskResultInfo: TCOutputModel {
        /// 任务唯一ID
        public let taskId: String

        /// 数据源名称，当前任务执行时候选中的默认数据源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceConnectionName: String?

        /// 数据库名称，当前任务执行时候选中的默认数据库
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseName: String?

        /// 当前执行的SQL，一个任务包含一个SQL
        public let sql: String

        /// 执行任务的类型，现在分为DDL、DML、DQL
        public let sqlType: String

        /// 任务当前的状态，0：初始化 1：任务运行中 2：任务执行成功 -1：任务执行失败 -3：用户手动终止。只有任务执行成功的情况下，才会返回任务执行的结果
        public let state: Int64

        /// 扫描的数据量，单位byte
        public let dataAmount: Int64

        /// 计算耗时，单位： ms
        public let usedTime: Int64

        /// 任务结果输出的COS桶地址
        public let outputPath: String

        /// 任务创建时间，时间戳
        public let createTime: String

        /// 任务执行信息，成功时返回success，失败时返回失败原因
        public let outputMessage: String

        /// 被影响的行数
        public let rowAffectInfo: String

        /// 结果的schema信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultSchema: [Column]?

        /// 结果信息，反转义后，外层数组的每个元素为一行数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultSet: String?

        /// 分页信息，如果没有更多结果数据，nextToken为空
        public let nextToken: String

        /// 任务执行进度num/100(%)
        public let percentage: Int64

        /// 任务进度明细
        public let progressDetail: String

        /// 控制台展示格式。table：表格展示 text：文本展示
        public let displayFormat: String

        /// 任务耗时，单位： ms
        public let totalTime: Int64

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case datasourceConnectionName = "DatasourceConnectionName"
            case databaseName = "DatabaseName"
            case sql = "SQL"
            case sqlType = "SQLType"
            case state = "State"
            case dataAmount = "DataAmount"
            case usedTime = "UsedTime"
            case outputPath = "OutputPath"
            case createTime = "CreateTime"
            case outputMessage = "OutputMessage"
            case rowAffectInfo = "RowAffectInfo"
            case resultSchema = "ResultSchema"
            case resultSet = "ResultSet"
            case nextToken = "NextToken"
            case percentage = "Percentage"
            case progressDetail = "ProgressDetail"
            case displayFormat = "DisplayFormat"
            case totalTime = "TotalTime"
        }
    }

    /// 批量顺序执行任务集合
    public struct TasksInfo: TCInputModel {
        /// 任务类型，SQLTask：SQL查询任务。SparkSQLTask：Spark SQL查询任务
        public let taskType: String

        /// 容错策略。Proceed：前面任务出错/取消后继续执行后面的任务。Terminate：前面的任务出错/取消之后终止后面任务的执行，后面的任务全部标记为已取消。
        public let failureTolerance: String

        /// base64加密后的SQL语句，用";"号分隔每个SQL语句，一次最多提交50个任务。严格按照前后顺序执行
        public let sql: String

        /// 任务的配置信息，当前仅支持SparkSQLTask任务。
        public let config: [KVPair]?

        /// 任务的用户自定义参数信息
        public let params: [KVPair]?

        public init(taskType: String, failureTolerance: String, sql: String, config: [KVPair]? = nil, params: [KVPair]? = nil) {
            self.taskType = taskType
            self.failureTolerance = failureTolerance
            self.sql = sql
            self.config = config
            self.params = params
        }

        enum CodingKeys: String, CodingKey {
            case taskType = "TaskType"
            case failureTolerance = "FailureTolerance"
            case sql = "SQL"
            case config = "Config"
            case params = "Params"
        }
    }

    /// 任务概览
    public struct TasksOverview: TCOutputModel {
        /// 正在排队的任务个数
        public let taskQueuedCount: Int64

        /// 初始化的任务个数
        public let taskInitCount: Int64

        /// 正在执行的任务个数
        public let taskRunningCount: Int64

        /// 当前时间范围的总任务个数
        public let totalTaskCount: Int64

        enum CodingKeys: String, CodingKey {
            case taskQueuedCount = "TaskQueuedCount"
            case taskInitCount = "TaskInitCount"
            case taskRunningCount = "TaskRunningCount"
            case totalTaskCount = "TotalTaskCount"
        }
    }

    /// 文本格式
    public struct TextFile: TCOutputModel {
        /// 文本类型，本参数取值为TextFile。
        public let format: String

        /// 处理文本用的正则表达式。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regex: String?

        enum CodingKeys: String, CodingKey {
            case format = "Format"
            case regex = "Regex"
        }
    }

    /// 绑定到同一个工作组的用户Id的集合
    public struct UserIdSetOfWorkGroupId: TCInputModel {
        /// 工作组Id
        public let workGroupId: Int64

        /// 用户Id集合，和CAM侧Uin匹配
        public let userIds: [String]

        public init(workGroupId: Int64, userIds: [String]) {
            self.workGroupId = workGroupId
            self.userIds = userIds
        }

        enum CodingKeys: String, CodingKey {
            case workGroupId = "WorkGroupId"
            case userIds = "UserIds"
        }
    }

    /// 授权用户信息
    public struct UserInfo: TCOutputModel {
        /// 用户Id，和子用户uin相同
        public let userId: String

        /// 用户描述信息，方便区分不同用户
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userDescription: String?

        /// 单独给用户绑定的权限集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policySet: [Policy]?

        /// 当前用户的创建者
        public let creator: String

        /// 创建时间，格式如2021-07-28 16:19:32
        public let createTime: String

        /// 关联的工作组集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workGroupSet: [WorkGroupMessage]?

        /// 是否是主账号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOwner: Bool?

        /// 用户类型。ADMIN：管理员 COMMON：普通用户。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userType: String?

        /// 用户别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userAlias: String?

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userDescription = "UserDescription"
            case policySet = "PolicySet"
            case creator = "Creator"
            case createTime = "CreateTime"
            case workGroupSet = "WorkGroupSet"
            case isOwner = "IsOwner"
            case userType = "UserType"
            case userAlias = "UserAlias"
        }
    }

    /// 用户部分信息
    public struct UserMessage: TCOutputModel {
        /// 用户Id，和CAM侧子用户Uin匹配
        public let userId: String

        /// 用户描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userDescription: String?

        /// 当前用户的创建者
        public let creator: String

        /// 当前用户的创建时间，形如2021-07-28 16:19:32
        public let createTime: String

        /// 用户别名
        public let userAlias: String

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userDescription = "UserDescription"
            case creator = "Creator"
            case createTime = "CreateTime"
            case userAlias = "UserAlias"
        }
    }

    /// 视图基本配置信息
    public struct ViewBaseInfo: TCInputModel, TCOutputModel {
        /// 该视图所属数据库名字
        public let databaseName: String

        /// 视图名称
        public let viewName: String

        /// 视图创建人昵称
        public let userAlias: String?

        /// 视图创建人ID
        public let userSubUin: String?

        public init(databaseName: String, viewName: String, userAlias: String? = nil, userSubUin: String? = nil) {
            self.databaseName = databaseName
            self.viewName = viewName
            self.userAlias = userAlias
            self.userSubUin = userSubUin
        }

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case viewName = "ViewName"
            case userAlias = "UserAlias"
            case userSubUin = "UserSubUin"
        }
    }

    /// 查询视图信息对象
    public struct ViewResponseInfo: TCOutputModel {
        /// 视图基本信息。
        public let viewBaseInfo: ViewBaseInfo

        /// 视图列信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let columns: [Column]?

        /// 视图属性信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let properties: [Property]?

        /// 视图创建时间。
        public let createTime: String

        /// 视图更新时间。
        public let modifiedTime: String

        enum CodingKeys: String, CodingKey {
            case viewBaseInfo = "ViewBaseInfo"
            case columns = "Columns"
            case properties = "Properties"
            case createTime = "CreateTime"
            case modifiedTime = "ModifiedTime"
        }
    }

    /// 同一个用户绑定的工作组集合
    public struct WorkGroupIdSetOfUserId: TCInputModel {
        /// 用户Id，和CAM侧Uin匹配
        public let userId: String

        /// 工作组Id集合
        public let workGroupIds: [Int64]

        public init(userId: String, workGroupIds: [Int64]) {
            self.userId = userId
            self.workGroupIds = workGroupIds
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case workGroupIds = "WorkGroupIds"
        }
    }

    /// 工作组信息
    public struct WorkGroupInfo: TCOutputModel {
        /// 查询到的工作组唯一Id
        public let workGroupId: Int64

        /// 工作组名称
        public let workGroupName: String

        /// 工作组描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workGroupDescription: String?

        /// 工作组关联的用户数量
        public let userNum: Int64

        /// 工作组关联的用户集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userSet: [UserMessage]?

        /// 工作组绑定的权限集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policySet: [Policy]?

        /// 工作组的创建人
        public let creator: String

        /// 工作组的创建时间，形如2021-07-28 16:19:32
        public let createTime: String

        enum CodingKeys: String, CodingKey {
            case workGroupId = "WorkGroupId"
            case workGroupName = "WorkGroupName"
            case workGroupDescription = "WorkGroupDescription"
            case userNum = "UserNum"
            case userSet = "UserSet"
            case policySet = "PolicySet"
            case creator = "Creator"
            case createTime = "CreateTime"
        }
    }

    /// 工作组部分信息
    public struct WorkGroupMessage: TCOutputModel {
        /// 工作组唯一Id
        public let workGroupId: Int64

        /// 工作组名称
        public let workGroupName: String

        /// 工作组描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workGroupDescription: String?

        /// 创建者
        public let creator: String

        /// 工作组创建的时间，形如2021-07-28 16:19:32
        public let createTime: String

        enum CodingKeys: String, CodingKey {
            case workGroupId = "WorkGroupId"
            case workGroupName = "WorkGroupName"
            case workGroupDescription = "WorkGroupDescription"
            case creator = "Creator"
            case createTime = "CreateTime"
        }
    }
}
