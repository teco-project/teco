//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore
import TecoPaginationHelpers

extension Chdfs {
    /// DescribeFileSystems请求参数结构体
    public struct DescribeFileSystemsRequest: TCPaginatedRequest {
        /// 偏移量，默认为0
        public let offset: UInt64?

        /// 返回数量，默认为所有
        public let limit: UInt64?

        public init(offset: UInt64? = nil, limit: UInt64? = nil) {
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeFileSystemsResponse) -> DescribeFileSystemsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeFileSystemsRequest(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeFileSystems返回参数结构体
    public struct DescribeFileSystemsResponse: TCPaginatedResponse {
        /// 文件系统列表
        public let fileSystems: [FileSystem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case fileSystems = "FileSystems"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [FileSystem] {
            self.fileSystems
        }
    }

    /// 查看文件系统列表
    ///
    /// 查看文件系统列表。
    @available(*, deprecated, message: "云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。")
    @inlinable
    public func describeFileSystems(_ input: DescribeFileSystemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFileSystemsResponse> {
        self.client.execute(action: "DescribeFileSystems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看文件系统列表
    ///
    /// 查看文件系统列表。
    @available(*, deprecated, message: "云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。")
    @inlinable
    public func describeFileSystems(_ input: DescribeFileSystemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFileSystemsResponse {
        try await self.client.execute(action: "DescribeFileSystems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看文件系统列表
    ///
    /// 查看文件系统列表。
    @available(*, deprecated, message: "云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。")
    @inlinable
    public func describeFileSystems(offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFileSystemsResponse> {
        self.describeFileSystems(.init(offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查看文件系统列表
    ///
    /// 查看文件系统列表。
    @available(*, deprecated, message: "云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。")
    @inlinable
    public func describeFileSystems(offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFileSystemsResponse {
        try await self.describeFileSystems(.init(offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查看文件系统列表
    ///
    /// 查看文件系统列表。
    @available(*, deprecated, message: "云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。")
    @inlinable
    public func describeFileSystemsPaginated(_ input: DescribeFileSystemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [FileSystem])> {
        self.client.paginate(input: input, region: region, command: self.describeFileSystems, logger: logger, on: eventLoop)
    }

    /// 查看文件系统列表
    ///
    /// 查看文件系统列表。
    @available(*, deprecated, message: "云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。")
    @inlinable @discardableResult
    public func describeFileSystemsPaginated(_ input: DescribeFileSystemsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeFileSystemsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeFileSystems, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查看文件系统列表
    ///
    /// 查看文件系统列表。
    ///
    /// - Returns: `AsyncSequence`s of `FileSystem` and `DescribeFileSystemsResponse` that can be iterated over asynchronously on demand.
    @available(*, deprecated, message: "云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。")
    @inlinable
    public func describeFileSystemsPaginator(_ input: DescribeFileSystemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeFileSystemsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeFileSystems, logger: logger, on: eventLoop)
    }
}
