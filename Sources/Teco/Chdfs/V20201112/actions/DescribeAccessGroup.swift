//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Chdfs {
    /// DescribeAccessGroup请求参数结构体
    public struct DescribeAccessGroupRequest: TCRequestModel {
        /// 权限组ID
        public let accessGroupId: String

        public init(accessGroupId: String) {
            self.accessGroupId = accessGroupId
        }

        enum CodingKeys: String, CodingKey {
            case accessGroupId = "AccessGroupId"
        }
    }

    /// DescribeAccessGroup返回参数结构体
    public struct DescribeAccessGroupResponse: TCResponseModel {
        /// 权限组
        public let accessGroup: AccessGroup

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case accessGroup = "AccessGroup"
            case requestId = "RequestId"
        }
    }

    /// 查看权限组详细信息
    ///
    /// 查看权限组详细信息。
    @inlinable
    public func describeAccessGroup(_ input: DescribeAccessGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessGroupResponse> {
        self.client.execute(action: "DescribeAccessGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看权限组详细信息
    ///
    /// 查看权限组详细信息。
    @inlinable
    public func describeAccessGroup(_ input: DescribeAccessGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessGroupResponse {
        try await self.client.execute(action: "DescribeAccessGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看权限组详细信息
    ///
    /// 查看权限组详细信息。
    @inlinable
    public func describeAccessGroup(accessGroupId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessGroupResponse> {
        self.describeAccessGroup(.init(accessGroupId: accessGroupId), region: region, logger: logger, on: eventLoop)
    }

    /// 查看权限组详细信息
    ///
    /// 查看权限组详细信息。
    @inlinable
    public func describeAccessGroup(accessGroupId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessGroupResponse {
        try await self.describeAccessGroup(.init(accessGroupId: accessGroupId), region: region, logger: logger, on: eventLoop)
    }
}
