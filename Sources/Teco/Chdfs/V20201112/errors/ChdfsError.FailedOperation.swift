//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCChdfsError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case accessGroupBound = "FailedOperation.AccessGroupBound"
            case fileSystemNotEmpty = "FailedOperation.FileSystemNotEmpty"
            case quotaLessThanCurrentUsed = "FailedOperation.QuotaLessThanCurrentUsed"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 权限组被绑定。
        public static var accessGroupBound: FailedOperation {
            FailedOperation(.accessGroupBound)
        }
        
        /// 文件系统非空。
        public static var fileSystemNotEmpty: FailedOperation {
            FailedOperation(.fileSystemNotEmpty)
        }
        
        /// 修改的文件系统容量小于当前使用量。
        public static var quotaLessThanCurrentUsed: FailedOperation {
            FailedOperation(.quotaLessThanCurrentUsed)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCChdfsError.FailedOperation: Equatable {
    public static func == (lhs: TCChdfsError.FailedOperation, rhs: TCChdfsError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCChdfsError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCChdfsError.FailedOperation {
    public func toChdfsError() -> TCChdfsError {
        guard let code = TCChdfsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCChdfsError(code, context: self.context)
    }
}