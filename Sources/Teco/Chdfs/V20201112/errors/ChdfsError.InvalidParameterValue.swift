//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCChdfsError {
    public struct InvalidParameterValue: TCChdfsErrorType {
        enum Code: String {
            case invalidAccessGroupId = "InvalidParameterValue.InvalidAccessGroupId"
            case invalidAccessGroupName = "InvalidParameterValue.InvalidAccessGroupName"
            case invalidAccessRuleAddress = "InvalidParameterValue.InvalidAccessRuleAddress"
            case invalidCapacityQuota = "InvalidParameterValue.InvalidCapacityQuota"
            case invalidDescription = "InvalidParameterValue.InvalidDescription"
            case invalidFileSystemId = "InvalidParameterValue.InvalidFileSystemId"
            case invalidFileSystemName = "InvalidParameterValue.InvalidFileSystemName"
            case invalidMountPointId = "InvalidParameterValue.InvalidMountPointId"
            case invalidMountPointName = "InvalidParameterValue.InvalidMountPointName"
            case invalidVpcId = "InvalidParameterValue.InvalidVpcId"
            case other = "InvalidParameterValue"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// AccessGroupId参数取值错误。
        public static var invalidAccessGroupId: InvalidParameterValue {
            InvalidParameterValue(.invalidAccessGroupId)
        }

        /// AccessGroupName参数取值错误。
        public static var invalidAccessGroupName: InvalidParameterValue {
            InvalidParameterValue(.invalidAccessGroupName)
        }

        /// 权限规则的Address参数取值错误。
        public static var invalidAccessRuleAddress: InvalidParameterValue {
            InvalidParameterValue(.invalidAccessRuleAddress)
        }

        /// CapacityQuota参数取值错误。
        public static var invalidCapacityQuota: InvalidParameterValue {
            InvalidParameterValue(.invalidCapacityQuota)
        }

        /// Description参数取值错误。
        public static var invalidDescription: InvalidParameterValue {
            InvalidParameterValue(.invalidDescription)
        }

        /// FileSystemId参数取值错误。
        public static var invalidFileSystemId: InvalidParameterValue {
            InvalidParameterValue(.invalidFileSystemId)
        }

        /// FileSystemName参数取值错误。
        public static var invalidFileSystemName: InvalidParameterValue {
            InvalidParameterValue(.invalidFileSystemName)
        }

        /// MountPointId参数取值错误。
        public static var invalidMountPointId: InvalidParameterValue {
            InvalidParameterValue(.invalidMountPointId)
        }

        /// MountPointName参数取值错误。
        public static var invalidMountPointName: InvalidParameterValue {
            InvalidParameterValue(.invalidMountPointName)
        }

        /// VpcId参数取值错误。
        public static var invalidVpcId: InvalidParameterValue {
            InvalidParameterValue(.invalidVpcId)
        }

        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }

        public func asChdfsError() -> TCChdfsError {
            let code: TCChdfsError.Code
            switch self.error {
            case .invalidAccessGroupId:
                code = .invalidParameterValue_InvalidAccessGroupId
            case .invalidAccessGroupName:
                code = .invalidParameterValue_InvalidAccessGroupName
            case .invalidAccessRuleAddress:
                code = .invalidParameterValue_InvalidAccessRuleAddress
            case .invalidCapacityQuota:
                code = .invalidParameterValue_InvalidCapacityQuota
            case .invalidDescription:
                code = .invalidParameterValue_InvalidDescription
            case .invalidFileSystemId:
                code = .invalidParameterValue_InvalidFileSystemId
            case .invalidFileSystemName:
                code = .invalidParameterValue_InvalidFileSystemName
            case .invalidMountPointId:
                code = .invalidParameterValue_InvalidMountPointId
            case .invalidMountPointName:
                code = .invalidParameterValue_InvalidMountPointName
            case .invalidVpcId:
                code = .invalidParameterValue_InvalidVpcId
            case .other:
                code = .invalidParameterValue
            }
            return TCChdfsError(code, context: self.context)
        }
    }
}
