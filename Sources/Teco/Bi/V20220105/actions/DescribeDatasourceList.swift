//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bi {
    /// DescribeDatasourceList请求参数结构体
    public struct DescribeDatasourceListRequest: TCRequest {
        public let projectId: UInt64

        /// 返回所有页面，默认false
        public let allPage: Bool?

        /// 数据库名称检索
        public let dbName: String?

        public let pageNo: Int64?

        public let pageSize: Int64?

        /// 搜索关键词
        public let keyword: String?

        /// 过滤无权限列表的参数（0 全量，1 使用权限，2 编辑权限）
        public let permissionType: Int64?

        public init(projectId: UInt64, allPage: Bool? = nil, dbName: String? = nil, pageNo: Int64? = nil, pageSize: Int64? = nil, keyword: String? = nil, permissionType: Int64? = nil) {
            self.projectId = projectId
            self.allPage = allPage
            self.dbName = dbName
            self.pageNo = pageNo
            self.pageSize = pageSize
            self.keyword = keyword
            self.permissionType = permissionType
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case allPage = "AllPage"
            case dbName = "DbName"
            case pageNo = "PageNo"
            case pageSize = "PageSize"
            case keyword = "Keyword"
            case permissionType = "PermissionType"
        }
    }

    /// DescribeDatasourceList返回参数结构体
    public struct DescribeDatasourceListResponse: TCResponse {
        /// 列表详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: DatasourceInfoData?

        /// 信息
        public let extra: String

        /// 信息
        public let msg: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case extra = "Extra"
            case msg = "Msg"
            case requestId = "RequestId"
        }
    }

    /// 查询数据源列表
    @inlinable
    public func describeDatasourceList(_ input: DescribeDatasourceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDatasourceListResponse> {
        self.client.execute(action: "DescribeDatasourceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询数据源列表
    @inlinable
    public func describeDatasourceList(_ input: DescribeDatasourceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDatasourceListResponse {
        try await self.client.execute(action: "DescribeDatasourceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询数据源列表
    @inlinable
    public func describeDatasourceList(projectId: UInt64, allPage: Bool? = nil, dbName: String? = nil, pageNo: Int64? = nil, pageSize: Int64? = nil, keyword: String? = nil, permissionType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDatasourceListResponse> {
        self.describeDatasourceList(.init(projectId: projectId, allPage: allPage, dbName: dbName, pageNo: pageNo, pageSize: pageSize, keyword: keyword, permissionType: permissionType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询数据源列表
    @inlinable
    public func describeDatasourceList(projectId: UInt64, allPage: Bool? = nil, dbName: String? = nil, pageNo: Int64? = nil, pageSize: Int64? = nil, keyword: String? = nil, permissionType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDatasourceListResponse {
        try await self.describeDatasourceList(.init(projectId: projectId, allPage: allPage, dbName: dbName, pageNo: pageNo, pageSize: pageSize, keyword: keyword, permissionType: permissionType), region: region, logger: logger, on: eventLoop)
    }
}
