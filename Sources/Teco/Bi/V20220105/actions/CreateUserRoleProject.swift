//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bi {
    /// CreateUserRoleProject请求参数结构体
    public struct CreateUserRoleProjectRequest: TCRequest {
        /// 项目ID
        public let projectId: Int64?

        /// 角色ID列表
        public let roleIdList: [Int64]?

        /// 用户列表（废弃）
        public let userList: [UserIdAndUserName]?

        /// 用户列表（新）
        public let userInfoList: [UserInfo]?

        public init(projectId: Int64? = nil, roleIdList: [Int64]? = nil, userList: [UserIdAndUserName]? = nil, userInfoList: [UserInfo]? = nil) {
            self.projectId = projectId
            self.roleIdList = roleIdList
            self.userList = userList
            self.userInfoList = userInfoList
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case roleIdList = "RoleIdList"
            case userList = "UserList"
            case userInfoList = "UserInfoList"
        }
    }

    /// CreateUserRoleProject返回参数结构体
    public struct CreateUserRoleProjectResponse: TCResponse {
        /// 扩展
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extra: String?

        /// 数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: DataId?

        /// 消息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case extra = "Extra"
            case data = "Data"
            case msg = "Msg"
            case requestId = "RequestId"
        }
    }

    /// 项目内-创建用户角色
    @inlinable
    public func createUserRoleProject(_ input: CreateUserRoleProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserRoleProjectResponse> {
        self.client.execute(action: "CreateUserRoleProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 项目内-创建用户角色
    @inlinable
    public func createUserRoleProject(_ input: CreateUserRoleProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserRoleProjectResponse {
        try await self.client.execute(action: "CreateUserRoleProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 项目内-创建用户角色
    @inlinable
    public func createUserRoleProject(projectId: Int64? = nil, roleIdList: [Int64]? = nil, userList: [UserIdAndUserName]? = nil, userInfoList: [UserInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserRoleProjectResponse> {
        self.createUserRoleProject(.init(projectId: projectId, roleIdList: roleIdList, userList: userList, userInfoList: userInfoList), region: region, logger: logger, on: eventLoop)
    }

    /// 项目内-创建用户角色
    @inlinable
    public func createUserRoleProject(projectId: Int64? = nil, roleIdList: [Int64]? = nil, userList: [UserIdAndUserName]? = nil, userInfoList: [UserInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserRoleProjectResponse {
        try await self.createUserRoleProject(.init(projectId: projectId, roleIdList: roleIdList, userList: userList, userInfoList: userInfoList), region: region, logger: logger, on: eventLoop)
    }
}
