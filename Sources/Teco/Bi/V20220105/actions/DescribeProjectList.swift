//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bi {
    /// DescribeProjectList请求参数结构体
    public struct DescribeProjectListRequest: TCRequest {
        /// 页容，初版默认20，将来可能根据屏幕宽度动态变化
        public let pageSize: UInt64?

        /// 页标
        public let pageNo: UInt64?

        /// 检索模糊字段
        public let keyword: String?

        /// 是否全部展示，如果是ture，则忽略分页
        public let allPage: Bool?

        /// 角色信息
        public let moduleCollection: String?

        public init(pageSize: UInt64? = nil, pageNo: UInt64? = nil, keyword: String? = nil, allPage: Bool? = nil, moduleCollection: String? = nil) {
            self.pageSize = pageSize
            self.pageNo = pageNo
            self.keyword = keyword
            self.allPage = allPage
            self.moduleCollection = moduleCollection
        }

        enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case pageNo = "PageNo"
            case keyword = "Keyword"
            case allPage = "AllPage"
            case moduleCollection = "ModuleCollection"
        }
    }

    /// DescribeProjectList返回参数结构体
    public struct DescribeProjectListResponse: TCResponse {
        /// 额外信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extra: String?

        /// 接口信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msg: String?

        /// 数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: ProjectListData?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case extra = "Extra"
            case msg = "Msg"
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 项目列表数据接口
    ///
    /// 项目信息
    @inlinable
    public func describeProjectList(_ input: DescribeProjectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProjectListResponse> {
        self.client.execute(action: "DescribeProjectList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 项目列表数据接口
    ///
    /// 项目信息
    @inlinable
    public func describeProjectList(_ input: DescribeProjectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProjectListResponse {
        try await self.client.execute(action: "DescribeProjectList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 项目列表数据接口
    ///
    /// 项目信息
    @inlinable
    public func describeProjectList(pageSize: UInt64? = nil, pageNo: UInt64? = nil, keyword: String? = nil, allPage: Bool? = nil, moduleCollection: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProjectListResponse> {
        self.describeProjectList(.init(pageSize: pageSize, pageNo: pageNo, keyword: keyword, allPage: allPage, moduleCollection: moduleCollection), region: region, logger: logger, on: eventLoop)
    }

    /// 项目列表数据接口
    ///
    /// 项目信息
    @inlinable
    public func describeProjectList(pageSize: UInt64? = nil, pageNo: UInt64? = nil, keyword: String? = nil, allPage: Bool? = nil, moduleCollection: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProjectListResponse {
        try await self.describeProjectList(.init(pageSize: pageSize, pageNo: pageNo, keyword: keyword, allPage: allPage, moduleCollection: moduleCollection), region: region, logger: logger, on: eventLoop)
    }
}
