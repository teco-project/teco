//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bi {
    /// DeleteUserRoleProject请求参数结构体
    public struct DeleteUserRoleProjectRequest: TCRequest {
        /// 项目ID
        public let projectId: Int64

        /// 用户ID
        public let userId: String

        public init(projectId: Int64, userId: String) {
            self.projectId = projectId
            self.userId = userId
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case userId = "UserId"
        }
    }

    /// DeleteUserRoleProject返回参数结构体
    public struct DeleteUserRoleProjectResponse: TCResponse {
        /// 扩展
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extra: String?

        /// 数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: String?

        /// 消息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case extra = "Extra"
            case data = "Data"
            case msg = "Msg"
            case requestId = "RequestId"
        }
    }

    /// 项目内-删除用户角色
    @inlinable
    public func deleteUserRoleProject(_ input: DeleteUserRoleProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteUserRoleProjectResponse> {
        self.client.execute(action: "DeleteUserRoleProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 项目内-删除用户角色
    @inlinable
    public func deleteUserRoleProject(_ input: DeleteUserRoleProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteUserRoleProjectResponse {
        try await self.client.execute(action: "DeleteUserRoleProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 项目内-删除用户角色
    @inlinable
    public func deleteUserRoleProject(projectId: Int64, userId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteUserRoleProjectResponse> {
        self.deleteUserRoleProject(.init(projectId: projectId, userId: userId), region: region, logger: logger, on: eventLoop)
    }

    /// 项目内-删除用户角色
    @inlinable
    public func deleteUserRoleProject(projectId: Int64, userId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteUserRoleProjectResponse {
        try await self.deleteUserRoleProject(.init(projectId: projectId, userId: userId), region: region, logger: logger, on: eventLoop)
    }
}
