//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bi {
    /// ModifyProject请求参数结构体
    public struct ModifyProjectRequest: TCRequest {
        /// 项目Id
        public let id: UInt64

        /// 名字
        public let name: String?

        /// 颜色值
        public let colorCode: String?

        /// 图标
        public let logo: String?

        /// 备注
        public let mark: String?

        /// 可申请
        public let isApply: Bool?

        /// 种子
        public let seed: String?

        /// 默认看板
        public let defaultPanelType: Int64?

        /// 2
        public let panelScope: String?

        public init(id: UInt64, name: String? = nil, colorCode: String? = nil, logo: String? = nil, mark: String? = nil, isApply: Bool? = nil, seed: String? = nil, defaultPanelType: Int64? = nil, panelScope: String? = nil) {
            self.id = id
            self.name = name
            self.colorCode = colorCode
            self.logo = logo
            self.mark = mark
            self.isApply = isApply
            self.seed = seed
            self.defaultPanelType = defaultPanelType
            self.panelScope = panelScope
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case colorCode = "ColorCode"
            case logo = "Logo"
            case mark = "Mark"
            case isApply = "IsApply"
            case seed = "Seed"
            case defaultPanelType = "DefaultPanelType"
            case panelScope = "PanelScope"
        }
    }

    /// ModifyProject返回参数结构体
    public struct ModifyProjectResponse: TCResponse {
        /// 额外信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extra: String?

        /// 返回数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: String?

        /// 结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case extra = "Extra"
            case data = "Data"
            case msg = "Msg"
            case requestId = "RequestId"
        }
    }

    /// 修改项目
    ///
    /// 修改项目信息
    @inlinable
    public func modifyProject(_ input: ModifyProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProjectResponse> {
        self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改项目
    ///
    /// 修改项目信息
    @inlinable
    public func modifyProject(_ input: ModifyProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProjectResponse {
        try await self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改项目
    ///
    /// 修改项目信息
    @inlinable
    public func modifyProject(id: UInt64, name: String? = nil, colorCode: String? = nil, logo: String? = nil, mark: String? = nil, isApply: Bool? = nil, seed: String? = nil, defaultPanelType: Int64? = nil, panelScope: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProjectResponse> {
        self.modifyProject(.init(id: id, name: name, colorCode: colorCode, logo: logo, mark: mark, isApply: isApply, seed: seed, defaultPanelType: defaultPanelType, panelScope: panelScope), region: region, logger: logger, on: eventLoop)
    }

    /// 修改项目
    ///
    /// 修改项目信息
    @inlinable
    public func modifyProject(id: UInt64, name: String? = nil, colorCode: String? = nil, logo: String? = nil, mark: String? = nil, isApply: Bool? = nil, seed: String? = nil, defaultPanelType: Int64? = nil, panelScope: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProjectResponse {
        try await self.modifyProject(.init(id: id, name: name, colorCode: colorCode, logo: logo, mark: mark, isApply: isApply, seed: seed, defaultPanelType: defaultPanelType, panelScope: panelScope), region: region, logger: logger, on: eventLoop)
    }
}
