//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Bi {
    /// 申请Token延期
    public struct ApplyEmbedTokenInfo: TCOutputModel {
        /// 申请结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?

        enum CodingKeys: String, CodingKey {
            case result = "Result"
        }
    }

    /// 列表查询返回的每条记录的操作属性
    public struct BaseStateAction: TCInputModel, TCOutputModel {
        /// 编辑是否可见
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let showEdit: Bool?

        /// 编辑是否可点击
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isEdit: Bool?

        /// 编辑按钮的文本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let editText: String?

        /// 编辑不可用时的提示文本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let editTips: String?

        /// 删除是否可见
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let showDel: Bool?

        /// 删除是否可点击
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDel: Bool?

        /// 删除按钮的文本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delText: String?

        /// 删除不可用时的提示文本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delTips: String?

        /// 复制是否可见
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let showCopy: Bool?

        /// 是否可见
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let showView: Bool?

        /// 是否可重命名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let showRename: Bool?

        public init(showEdit: Bool? = nil, isEdit: Bool? = nil, editText: String? = nil, editTips: String? = nil, showDel: Bool? = nil, isDel: Bool? = nil, delText: String? = nil, delTips: String? = nil, showCopy: Bool? = nil, showView: Bool? = nil, showRename: Bool? = nil) {
            self.showEdit = showEdit
            self.isEdit = isEdit
            self.editText = editText
            self.editTips = editTips
            self.showDel = showDel
            self.isDel = isDel
            self.delText = delText
            self.delTips = delTips
            self.showCopy = showCopy
            self.showView = showView
            self.showRename = showRename
        }

        enum CodingKeys: String, CodingKey {
            case showEdit = "ShowEdit"
            case isEdit = "IsEdit"
            case editText = "EditText"
            case editTips = "EditTips"
            case showDel = "ShowDel"
            case isDel = "IsDel"
            case delText = "DelText"
            case delTips = "DelTips"
            case showCopy = "ShowCopy"
            case showView = "ShowView"
            case showRename = "ShowRename"
        }
    }

    /// 企业用户列表
    public struct CorpUserListData: TCOutputModel {
        /// 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [UserIdAndUserName]?

        /// 总数
        public let total: Int64

        /// 页数
        public let totalPages: Int64

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case total = "Total"
            case totalPages = "TotalPages"
        }
    }

    /// 数据
    public struct Data: TCOutputModel {
        /// 项目Id
        public let id: Int64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// 数据ID
    public struct DataId: TCOutputModel {
        /// 数据id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// 数据源详情
    public struct DatasourceInfo: TCOutputModel {
        /// 数据库ID
        public let id: UInt64

        /// 数据库名称
        public let dbName: String

        /// 域类型，1、腾讯云，2、本地
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceType: String?

        /// 数据库别名
        public let sourceName: String

        /// 数据库驱动
        public let dbType: String

        /// HOST
        public let dbHost: String

        /// 端口
        public let dbPort: UInt64

        /// 用户名
        public let dbUser: String

        /// 数据库编码
        public let charset: String

        /// 创建时间
        public let createdAt: String

        /// 修改时间
        public let updatedAt: String

        /// 创建人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdUser: String?

        /// catalog值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let catalog: String?

        /// 连接类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectType: String?

        /// 项目id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: String?

        /// 数据源描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let desc: String?

        /// 数据源状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 来源平台
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourcePlat: String?

        /// 扩展参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraParam: String?

        /// 额外信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addInfo: String?

        /// 项目名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectName: String?

        /// 引擎类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineType: String?

        /// 数据源负责人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let manager: String?

        /// 特定操作人员白名单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operatorWhitelist: String?

        /// 数据源的vpc信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 数据源的uniqVpc信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqVpcId: String?

        /// 数据源的地域信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: String?

        /// 操作属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stateAction: BaseStateAction?

        /// 更新人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedUser: String?

        /// 权限列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let permissionList: [PermissionGroup]?

        /// 权限值列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let authList: [String]?

        /// 第三方数据源标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataOrigin: String?

        /// 第三方项目id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataOriginProjectId: String?

        /// 第三方数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataOriginDatasourceId: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case dbName = "DbName"
            case serviceType = "ServiceType"
            case sourceName = "SourceName"
            case dbType = "DbType"
            case dbHost = "DbHost"
            case dbPort = "DbPort"
            case dbUser = "DbUser"
            case charset = "Charset"
            case createdAt = "CreatedAt"
            case updatedAt = "UpdatedAt"
            case createdUser = "CreatedUser"
            case catalog = "Catalog"
            case connectType = "ConnectType"
            case projectId = "ProjectId"
            case desc = "Desc"
            case status = "Status"
            case sourcePlat = "SourcePlat"
            case extraParam = "ExtraParam"
            case addInfo = "AddInfo"
            case projectName = "ProjectName"
            case engineType = "EngineType"
            case manager = "Manager"
            case operatorWhitelist = "OperatorWhitelist"
            case vpcId = "VpcId"
            case uniqVpcId = "UniqVpcId"
            case regionId = "RegionId"
            case stateAction = "StateAction"
            case updatedUser = "UpdatedUser"
            case permissionList = "PermissionList"
            case authList = "AuthList"
            case dataOrigin = "DataOrigin"
            case dataOriginProjectId = "DataOriginProjectId"
            case dataOriginDatasourceId = "DataOriginDatasourceId"
        }
    }

    /// 数据源详情列表
    public struct DatasourceInfoData: TCOutputModel {
        /// 数据源详情列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [DatasourceInfo]?

        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 总页数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalPages: Int64?

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case total = "Total"
            case totalPages = "TotalPages"
        }
    }

    /// 报表嵌出数据结构-强鉴权
    public struct EmbedTokenInfo: TCOutputModel {
        /// 信息标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: UInt64?

        /// 令牌
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let biToken: String?

        /// 项目Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: String?

        /// 创建人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdUser: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdAt: String?

        /// 更新人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedUser: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedAt: String?

        /// 页面Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageId: String?

        /// 备用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraParam: String?

        /// 嵌出类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scope: String?

        /// 过期时间，分钟为单位，最大240
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: UInt64?

        /// 使用者企业Id(仅用于多用户)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userCorpId: String?

        /// 使用者Id(仅用于多用户)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case biToken = "BIToken"
            case projectId = "ProjectId"
            case createdUser = "CreatedUser"
            case createdAt = "CreatedAt"
            case updatedUser = "UpdatedUser"
            case updatedAt = "UpdatedAt"
            case pageId = "PageId"
            case extraParam = "ExtraParam"
            case scope = "Scope"
            case expireTime = "ExpireTime"
            case userCorpId = "UserCorpId"
            case userId = "UserId"
        }
    }

    /// 仅包含id的对象
    public struct IdDTO: TCInputModel, TCOutputModel {
        /// 请求id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessKey: String?

        /// id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: UInt64?

        /// 事务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tranId: String?

        /// 事务状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tranStatus: Int64?

        public init(id: Int64, accessKey: String? = nil, projectId: UInt64? = nil, tranId: String? = nil, tranStatus: Int64? = nil) {
            self.id = id
            self.accessKey = accessKey
            self.projectId = projectId
            self.tranId = tranId
            self.tranStatus = tranStatus
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case accessKey = "AccessKey"
            case projectId = "ProjectId"
            case tranId = "TranId"
            case tranStatus = "TranStatus"
        }
    }

    /// 商业版本权限单元
    public struct PermissionComponent: TCInputModel, TCOutputModel {
        /// 权限值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let moduleId: String?

        /// 可见/可用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let includeType: String?

        /// 目标升级版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upgradeVersionType: String?

        /// 补充信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tips: String?

        /// 补充信息的key值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tipsKey: String?

        public init(moduleId: String? = nil, includeType: String? = nil, upgradeVersionType: String? = nil, tips: String? = nil, tipsKey: String? = nil) {
            self.moduleId = moduleId
            self.includeType = includeType
            self.upgradeVersionType = upgradeVersionType
            self.tips = tips
            self.tipsKey = tipsKey
        }

        enum CodingKeys: String, CodingKey {
            case moduleId = "ModuleId"
            case includeType = "IncludeType"
            case upgradeVersionType = "UpgradeVersionType"
            case tips = "Tips"
            case tipsKey = "TipsKey"
        }
    }

    /// 商业化版本权限分组
    public struct PermissionGroup: TCInputModel, TCOutputModel {
        /// 分组名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let moduleGroup: String?

        /// 权限列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let components: [PermissionComponent]?

        public init(moduleGroup: String? = nil, components: [PermissionComponent]? = nil) {
            self.moduleGroup = moduleGroup
            self.components = components
        }

        enum CodingKeys: String, CodingKey {
            case moduleGroup = "ModuleGroup"
            case components = "Components"
        }
    }

    /// 项目信息描述
    public struct Project: TCOutputModel {
        /// 项目ID
        public let id: UInt64

        /// 项目Logo
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logo: String?

        /// 项目名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// logo底色
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let colorCode: String?

        /// 创建人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdUser: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdAt: String?

        /// 成员个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memberCount: Int64?

        /// 页面个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageCount: Int64?

        /// 最后修改报表、简报名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastModifyName: String?

        /// ""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: String?

        /// ""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let apply: Bool?

        /// ""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedUser: String?

        /// ""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedAt: String?

        /// ""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let corpId: String?

        /// ""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mark: String?

        /// ""
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let seed: String?

        /// 项目内权限列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let authList: [String]?

        /// 默认看板
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let panelScope: String?

        /// 是否被托管
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isExternalManage: Bool?

        /// 托管平台名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let managePlatform: String?

        /// 定制化参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configList: [ProjectConfigList]?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case logo = "Logo"
            case name = "Name"
            case colorCode = "ColorCode"
            case createdUser = "CreatedUser"
            case createdAt = "CreatedAt"
            case memberCount = "MemberCount"
            case pageCount = "PageCount"
            case lastModifyName = "LastModifyName"
            case source = "Source"
            case apply = "Apply"
            case updatedUser = "UpdatedUser"
            case updatedAt = "UpdatedAt"
            case corpId = "CorpId"
            case mark = "Mark"
            case seed = "Seed"
            case authList = "AuthList"
            case panelScope = "PanelScope"
            case isExternalManage = "IsExternalManage"
            case managePlatform = "ManagePlatform"
            case configList = "ConfigList"
        }
    }

    /// 定制化查询
    public struct ProjectConfigList: TCInputModel, TCOutputModel {
        /// 模块组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let moduleGroup: String?

        /// 内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let components: [ProjectConfigResult]?

        public init(moduleGroup: String? = nil, components: [ProjectConfigResult]? = nil) {
            self.moduleGroup = moduleGroup
            self.components = components
        }

        enum CodingKeys: String, CodingKey {
            case moduleGroup = "ModuleGroup"
            case components = "Components"
        }
    }

    /// 定制化查询
    public struct ProjectConfigResult: TCInputModel, TCOutputModel {
        /// 配置名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let moduleId: String?

        /// 配置方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let includeType: String?

        /// 额外参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let params: String?

        public init(moduleId: String? = nil, includeType: String? = nil, params: String? = nil) {
            self.moduleId = moduleId
            self.includeType = includeType
            self.params = params
        }

        enum CodingKeys: String, CodingKey {
            case moduleId = "ModuleId"
            case includeType = "IncludeType"
            case params = "Params"
        }
    }

    /// 项目列表数据
    public struct ProjectListData: TCOutputModel {
        /// 数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [Project]?

        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?

        /// 1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalPages: UInt64?

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case total = "Total"
            case totalPages = "TotalPages"
        }
    }

    /// 用户ID和用户名
    public struct UserIdAndUserName: TCInputModel, TCOutputModel {
        /// 用户ID
        public let userId: String?

        /// 用户名
        public let userName: String?

        /// 企业ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let corpId: String?

        /// 电子邮箱
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let email: String?

        /// 最后一次登录时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$lastLogin`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastLogin: Date?

        /// 停启用状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 首次登陆是否修改密码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let firstModify: Int64?

        /// 手机号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneNumber: String?

        /// 手机区号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let areaCode: String?

        /// 创建人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdUser: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$createdAt`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdAt: Date?

        /// 更改人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedUser: String?

        /// 更改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$updatedAt`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updatedAt: Date?

        /// 全局角色
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let globalUserName: String?

        /// 手机号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mobile: String?

        public init(userId: String? = nil, userName: String? = nil, corpId: String? = nil, email: String? = nil, lastLogin: Date? = nil, status: Int64? = nil, firstModify: Int64? = nil, phoneNumber: String? = nil, areaCode: String? = nil, createdUser: String? = nil, createdAt: Date? = nil, updatedUser: String? = nil, updatedAt: Date? = nil, globalUserName: String? = nil, mobile: String? = nil) {
            self.userId = userId
            self.userName = userName
            self.corpId = corpId
            self.email = email
            self._lastLogin = .init(wrappedValue: lastLogin)
            self.status = status
            self.firstModify = firstModify
            self.phoneNumber = phoneNumber
            self.areaCode = areaCode
            self.createdUser = createdUser
            self._createdAt = .init(wrappedValue: createdAt)
            self.updatedUser = updatedUser
            self._updatedAt = .init(wrappedValue: updatedAt)
            self.globalUserName = globalUserName
            self.mobile = mobile
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userName = "UserName"
            case corpId = "CorpId"
            case email = "Email"
            case lastLogin = "LastLogin"
            case status = "Status"
            case firstModify = "FirstModify"
            case phoneNumber = "PhoneNumber"
            case areaCode = "AreaCode"
            case createdUser = "CreatedUser"
            case createdAt = "CreatedAt"
            case updatedUser = "UpdatedUser"
            case updatedAt = "UpdatedAt"
            case globalUserName = "GlobalUserName"
            case mobile = "Mobile"
        }
    }

    /// 用户ID和用户名
    public struct UserInfo: TCInputModel, TCOutputModel {
        /// 用户ID
        public let userId: String?

        /// 用户名
        public let userName: String?

        /// 邮箱
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let email: String?

        /// 手机号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneNumber: String?

        /// 手机号区号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let areaCode: String?

        public init(userId: String? = nil, userName: String? = nil, email: String? = nil, phoneNumber: String? = nil, areaCode: String? = nil) {
            self.userId = userId
            self.userName = userName
            self.email = email
            self.phoneNumber = phoneNumber
            self.areaCode = areaCode
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userName = "UserName"
            case email = "Email"
            case phoneNumber = "PhoneNumber"
            case areaCode = "AreaCode"
        }
    }

    /// 用户角色信息
    public struct UserRoleListData: TCOutputModel {
        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 总页数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalPages: Int64?

        /// 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [UserRoleListDataUserRoleInfo]?

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case totalPages = "TotalPages"
            case list = "List"
        }
    }

    /// 用户角色列表角色信息
    public struct UserRoleListDataRoleInfo: TCOutputModel {
        /// 角色名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleName: String?

        /// 角色ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleId: Int64?

        /// 项目ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: Int64?

        /// 项目名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectName: String?

        /// 是否为全局角色（0 不是 1 是）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scopeType: Int64?

        /// 角色key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let moduleCollection: String?

        enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
            case roleId = "RoleId"
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case scopeType = "ScopeType"
            case moduleCollection = "ModuleCollection"
        }
    }

    /// 用户角色信息
    public struct UserRoleListDataUserRoleInfo: TCOutputModel {
        /// 业务ID
        public let id: UInt64

        /// 角色列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleList: [UserRoleListDataRoleInfo]?

        /// 角色ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleIdList: [UInt64]?

        /// 用户ID
        public let userId: String

        /// 用户名
        public let userName: String

        /// 企业ID
        public let corpId: String

        /// 邮箱
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let email: String?

        /// 创建人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdUser: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdAt: String?

        /// 更新人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedUser: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedAt: String?

        /// 最后一次登录时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$lastLogin`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastLogin: Date?

        /// 账号状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 手机号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneNumber: String?

        /// 手机号区号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let areaCode: String?

        /// 是否为主账号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rootAccount: Bool?

        /// 是否为企业管理员
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let corpAdmin: Bool?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case roleList = "RoleList"
            case roleIdList = "RoleIdList"
            case userId = "UserId"
            case userName = "UserName"
            case corpId = "CorpId"
            case email = "Email"
            case createdUser = "CreatedUser"
            case createdAt = "CreatedAt"
            case updatedUser = "UpdatedUser"
            case updatedAt = "UpdatedAt"
            case lastLogin = "LastLogin"
            case status = "Status"
            case phoneNumber = "PhoneNumber"
            case areaCode = "AreaCode"
            case rootAccount = "RootAccount"
            case corpAdmin = "CorpAdmin"
        }
    }
}
