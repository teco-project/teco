//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTagError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case deleteTagsParamError = "InvalidParameterValue.DeleteTagsParamError"
            case offsetInvalid = "InvalidParameterValue.OffsetInvalid"
            case regionInvalid = "InvalidParameterValue.RegionInvalid"
            case reservedTagKey = "InvalidParameterValue.ReservedTagKey"
            case resourceDescriptionError = "InvalidParameterValue.ResourceDescriptionError"
            case resourceIdInvalid = "InvalidParameterValue.ResourceIdInvalid"
            case resourcePrefixInvalid = "InvalidParameterValue.ResourcePrefixInvalid"
            case serviceTypeInvalid = "InvalidParameterValue.ServiceTypeInvalid"
            case tagFilters = "InvalidParameterValue.TagFilters"
            case tagFiltersLengthExceeded = "InvalidParameterValue.TagFiltersLengthExceeded"
            case tagKeyCharacterIllegal = "InvalidParameterValue.TagKeyCharacterIllegal"
            case tagKeyDuplicate = "InvalidParameterValue.TagKeyDuplicate"
            case tagKeyEmpty = "InvalidParameterValue.TagKeyEmpty"
            case tagKeyLengthExceeded = "InvalidParameterValue.TagKeyLengthExceeded"
            case tagValueCharacterIllegal = "InvalidParameterValue.TagValueCharacterIllegal"
            case tagValueEmpty = "InvalidParameterValue.TagValueEmpty"
            case tagValueLengthExceeded = "InvalidParameterValue.TagValueLengthExceeded"
            case uinInvalid = "InvalidParameterValue.UinInvalid"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// DeleteTags中不能包含ReplaceTags或AddTags中元素。
        public static var deleteTagsParamError: InvalidParameterValue {
            InvalidParameterValue(.deleteTagsParamError)
        }
        
        /// offset error。
        public static var offsetInvalid: InvalidParameterValue {
            InvalidParameterValue(.offsetInvalid)
        }
        
        /// 地域错误。
        public static var regionInvalid: InvalidParameterValue {
            InvalidParameterValue(.regionInvalid)
        }
        
        /// 系统预留标签键 qcloud、tencent和project 禁止创建。
        public static var reservedTagKey: InvalidParameterValue {
            InvalidParameterValue(.reservedTagKey)
        }
        
        /// 资源描述错误。
        public static var resourceDescriptionError: InvalidParameterValue {
            InvalidParameterValue(.resourceDescriptionError)
        }
        
        /// 资源Id错误。
        public static var resourceIdInvalid: InvalidParameterValue {
            InvalidParameterValue(.resourceIdInvalid)
        }
        
        /// 资源前缀错误。
        public static var resourcePrefixInvalid: InvalidParameterValue {
            InvalidParameterValue(.resourcePrefixInvalid)
        }
        
        /// 业务类型错误。
        public static var serviceTypeInvalid: InvalidParameterValue {
            InvalidParameterValue(.serviceTypeInvalid)
        }
        
        /// TagFilters参数错误。
        public static var tagFilters: InvalidParameterValue {
            InvalidParameterValue(.tagFilters)
        }
        
        /// 过滤标签键对应标签值达到上限数 6。
        public static var tagFiltersLengthExceeded: InvalidParameterValue {
            InvalidParameterValue(.tagFiltersLengthExceeded)
        }
        
        /// 标签键包含非法字符。
        public static var tagKeyCharacterIllegal: InvalidParameterValue {
            InvalidParameterValue(.tagKeyCharacterIllegal)
        }
        
        /// TagList中存在重复的TagKey。
        public static var tagKeyDuplicate: InvalidParameterValue {
            InvalidParameterValue(.tagKeyDuplicate)
        }
        
        /// 标签键不能为空值。
        public static var tagKeyEmpty: InvalidParameterValue {
            InvalidParameterValue(.tagKeyEmpty)
        }
        
        /// 标签键长度超过限制。
        public static var tagKeyLengthExceeded: InvalidParameterValue {
            InvalidParameterValue(.tagKeyLengthExceeded)
        }
        
        /// 标签值包含非法字符。
        public static var tagValueCharacterIllegal: InvalidParameterValue {
            InvalidParameterValue(.tagValueCharacterIllegal)
        }
        
        /// 标签值不能为空值。
        public static var tagValueEmpty: InvalidParameterValue {
            InvalidParameterValue(.tagValueEmpty)
        }
        
        /// 标签值长度超过限制。
        public static var tagValueLengthExceeded: InvalidParameterValue {
            InvalidParameterValue(.tagValueLengthExceeded)
        }
        
        /// Uin参数不合法。
        public static var uinInvalid: InvalidParameterValue {
            InvalidParameterValue(.uinInvalid)
        }
    }
}

extension TCTagError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCTagError.InvalidParameterValue, rhs: TCTagError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTagError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTagError.InvalidParameterValue {
    /// - Returns: ``TCTagError`` that holds the same error and context.
    public func toTagError() -> TCTagError {
        guard let code = TCTagError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTagError(code, context: self.context)
    }
}

extension TCTagError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
