//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tag {
    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeys(_ input: DescribeResourceTagsByTagKeysRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeResourceTagsByTagKeysResponse > {
        self.client.execute(action: "DescribeResourceTagsByTagKeys", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeys(_ input: DescribeResourceTagsByTagKeysRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceTagsByTagKeysResponse {
        try await self.client.execute(action: "DescribeResourceTagsByTagKeys", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeResourceTagsByTagKeys请求参数结构体
    public struct DescribeResourceTagsByTagKeysRequest: TCRequestModel {
        /// 业务类型
        public let serviceType: String
        
        /// 资源前缀
        public let resourcePrefix: String
        
        /// 资源地域
        public let resourceRegion: String
        
        /// 资源唯一标识
        public let resourceIds: [String]
        
        /// 资源标签键
        public let tagKeys: [String]
        
        /// 每页大小，默认为 400
        public let limit: UInt64?
        
        /// 数据偏移量，默认为 0, 必须为Limit参数的整数倍
        public let offset: UInt64?
        
        public init (serviceType: String, resourcePrefix: String, resourceRegion: String, resourceIds: [String], tagKeys: [String], limit: UInt64?, offset: UInt64?) {
            self.serviceType = serviceType
            self.resourcePrefix = resourcePrefix
            self.resourceRegion = resourceRegion
            self.resourceIds = resourceIds
            self.tagKeys = tagKeys
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case serviceType = "ServiceType"
            case resourcePrefix = "ResourcePrefix"
            case resourceRegion = "ResourceRegion"
            case resourceIds = "ResourceIds"
            case tagKeys = "TagKeys"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeResourceTagsByTagKeys返回参数结构体
    public struct DescribeResourceTagsByTagKeysResponse: TCResponseModel {
        /// 结果总数
        public let totalCount: UInt64
        
        /// 数据位移偏量
        public let offset: UInt64
        
        /// 每页大小
        public let limit: UInt64
        
        /// 资源标签
        public let rows: [ResourceIdTag]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case offset = "Offset"
            case limit = "Limit"
            case rows = "Rows"
            case requestId = "RequestId"
        }
    }
}
