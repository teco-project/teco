//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Tag {
    /// DescribeResourceTagsByTagKeys请求参数结构体
    public struct DescribeResourceTagsByTagKeysRequest: TCPaginatedRequest {
        /// 业务类型
        public let serviceType: String

        /// 资源前缀
        public let resourcePrefix: String

        /// 资源地域
        public let resourceRegion: String

        /// 资源唯一标识
        public let resourceIds: [String]

        /// 资源标签键
        public let tagKeys: [String]

        /// 每页大小，默认为 400
        public let limit: UInt64?

        /// 数据偏移量，默认为 0, 必须为Limit参数的整数倍
        public let offset: UInt64?

        public init(serviceType: String, resourcePrefix: String, resourceRegion: String, resourceIds: [String], tagKeys: [String], limit: UInt64? = nil, offset: UInt64? = nil) {
            self.serviceType = serviceType
            self.resourcePrefix = resourcePrefix
            self.resourceRegion = resourceRegion
            self.resourceIds = resourceIds
            self.tagKeys = tagKeys
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case serviceType = "ServiceType"
            case resourcePrefix = "ResourcePrefix"
            case resourceRegion = "ResourceRegion"
            case resourceIds = "ResourceIds"
            case tagKeys = "TagKeys"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeResourceTagsByTagKeysResponse) -> DescribeResourceTagsByTagKeysRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeResourceTagsByTagKeysRequest(serviceType: self.serviceType, resourcePrefix: self.resourcePrefix, resourceRegion: self.resourceRegion, resourceIds: self.resourceIds, tagKeys: self.tagKeys, limit: self.limit, offset: (self.offset ?? 0) + response.limit)
        }
    }

    /// DescribeResourceTagsByTagKeys返回参数结构体
    public struct DescribeResourceTagsByTagKeysResponse: TCPaginatedResponse {
        /// 结果总数
        public let totalCount: UInt64

        /// 数据位移偏量
        public let offset: UInt64

        /// 每页大小
        public let limit: UInt64

        /// 资源标签
        public let rows: [ResourceIdTag]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case offset = "Offset"
            case limit = "Limit"
            case rows = "Rows"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [ResourceIdTag] {
            self.rows
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeys(_ input: DescribeResourceTagsByTagKeysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceTagsByTagKeysResponse> {
        self.client.execute(action: "DescribeResourceTagsByTagKeys", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeys(_ input: DescribeResourceTagsByTagKeysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceTagsByTagKeysResponse {
        try await self.client.execute(action: "DescribeResourceTagsByTagKeys", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeys(serviceType: String, resourcePrefix: String, resourceRegion: String, resourceIds: [String], tagKeys: [String], limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceTagsByTagKeysResponse> {
        let input = DescribeResourceTagsByTagKeysRequest(serviceType: serviceType, resourcePrefix: resourcePrefix, resourceRegion: resourceRegion, resourceIds: resourceIds, tagKeys: tagKeys, limit: limit, offset: offset)
        return self.client.execute(action: "DescribeResourceTagsByTagKeys", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeys(serviceType: String, resourcePrefix: String, resourceRegion: String, resourceIds: [String], tagKeys: [String], limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceTagsByTagKeysResponse {
        let input = DescribeResourceTagsByTagKeysRequest(serviceType: serviceType, resourcePrefix: resourcePrefix, resourceRegion: resourceRegion, resourceIds: resourceIds, tagKeys: tagKeys, limit: limit, offset: offset)
        return try await self.client.execute(action: "DescribeResourceTagsByTagKeys", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeysPaginated(_ input: DescribeResourceTagsByTagKeysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [ResourceIdTag])> {
        self.client.paginate(input: input, region: region, command: self.describeResourceTagsByTagKeys, logger: logger, on: eventLoop)
    }

    /// 根据标签键获取资源标签
    @inlinable @discardableResult
    public func describeResourceTagsByTagKeysPaginated(_ input: DescribeResourceTagsByTagKeysRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeResourceTagsByTagKeysResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeResourceTagsByTagKeys, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 根据标签键获取资源标签
    @inlinable
    public func describeResourceTagsByTagKeysPaginator(_ input: DescribeResourceTagsByTagKeysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeResourceTagsByTagKeysRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeResourceTagsByTagKeys, logger: logger, on: eventLoop)
    }
}
