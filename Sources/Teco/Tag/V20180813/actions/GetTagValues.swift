//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Tag {
    /// GetTagValues请求参数结构体
    public struct GetTagValuesRequest: TCPaginatedRequest {
        /// 标签键。
        /// 返回所有标签键列表对应的标签值。
        /// 最大长度：20
        public let tagKeys: [String]

        /// 从上一页的响应中获取的下一页的Token值。
        /// 如果是第一次请求，设置为空。
        public let paginationToken: String?

        /// 每一页返回的数据最大条数，最大1000。
        /// 缺省值：50。
        public let maxResults: UInt64?

        public init(tagKeys: [String], paginationToken: String? = nil, maxResults: UInt64? = nil) {
            self.tagKeys = tagKeys
            self.paginationToken = paginationToken
            self.maxResults = maxResults
        }

        enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case paginationToken = "PaginationToken"
            case maxResults = "MaxResults"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: GetTagValuesResponse) -> GetTagValuesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return GetTagValuesRequest(tagKeys: self.tagKeys, paginationToken: response.paginationToken, maxResults: self.maxResults)
        }
    }

    /// GetTagValues返回参数结构体
    public struct GetTagValuesResponse: TCPaginatedResponse {
        /// 获取的下一页的Token值
        public let paginationToken: String

        /// 标签列表。
        public let tags: [Tag]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case paginationToken = "PaginationToken"
            case tags = "Tags"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Tag] {
            self.tags
        }
    }

    /// 查询标签值列表
    ///
    /// 用于查询已建立的标签列表中的标签值。
    @inlinable
    public func getTagValues(_ input: GetTagValuesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTagValuesResponse> {
        self.client.execute(action: "GetTagValues", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询标签值列表
    ///
    /// 用于查询已建立的标签列表中的标签值。
    @inlinable
    public func getTagValues(_ input: GetTagValuesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTagValuesResponse {
        try await self.client.execute(action: "GetTagValues", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询标签值列表
    ///
    /// 用于查询已建立的标签列表中的标签值。
    @inlinable
    public func getTagValues(tagKeys: [String], paginationToken: String? = nil, maxResults: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTagValuesResponse> {
        let input = GetTagValuesRequest(tagKeys: tagKeys, paginationToken: paginationToken, maxResults: maxResults)
        return self.client.execute(action: "GetTagValues", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询标签值列表
    ///
    /// 用于查询已建立的标签列表中的标签值。
    @inlinable
    public func getTagValues(tagKeys: [String], paginationToken: String? = nil, maxResults: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTagValuesResponse {
        let input = GetTagValuesRequest(tagKeys: tagKeys, paginationToken: paginationToken, maxResults: maxResults)
        return try await self.client.execute(action: "GetTagValues", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询标签值列表
    ///
    /// 用于查询已建立的标签列表中的标签值。
    @inlinable
    public func getTagValuesPaginated(_ input: GetTagValuesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [Tag])> {
        self.client.paginate(input: input, region: region, command: self.getTagValues, logger: logger, on: eventLoop)
    }

    /// 查询标签值列表
    ///
    /// 用于查询已建立的标签列表中的标签值。
    @inlinable
    public func getTagValuesPaginated(_ input: GetTagValuesRequest, region: TCRegion? = nil, onResponse: @escaping (GetTagValuesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getTagValues, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询标签值列表
    ///
    /// 用于查询已建立的标签列表中的标签值。
    @inlinable
    public func getTagValuesPaginator(_ input: GetTagValuesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<GetTagValuesRequest, GetTagValuesResponse>.ResultSequence, responses: TCClient.Paginator<GetTagValuesRequest, GetTagValuesResponse>.ResponseSequence) {
        let results = TCClient.Paginator<GetTagValuesRequest, GetTagValuesResponse>.ResultSequence(input: input, region: region, command: self.getTagValues, logger: logger, on: eventLoop)
        let responses = TCClient.Paginator<GetTagValuesRequest, GetTagValuesResponse>.ResponseSequence(input: input, region: region, command: self.getTagValues, logger: logger, on: eventLoop)
        return (results, responses)
    }
}
