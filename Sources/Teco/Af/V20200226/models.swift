//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Af {
    /// AntiFraudCryptoFilter – 业务入参
    public struct AntiFraudCryptoFilter: TCInputModel {
        /// 约定用入参，默认不涉及默认BusinessSecurityData 与BusinessCrptoData 不传
        public let cryptoType: String?

        /// 约定用入参，默认不涉及
        public let cryptoContent: String?

        public init(cryptoType: String? = nil, cryptoContent: String? = nil) {
            self.cryptoType = cryptoType
            self.cryptoContent = cryptoContent
        }

        enum CodingKeys: String, CodingKey {
            case cryptoType = "CryptoType"
            case cryptoContent = "CryptoContent"
        }
    }

    /// AntiFraudFilter – 业务入参
    public struct AntiFraudFilter: TCInputModel {
        /// 业务方账号 ID
        public let customerUin: String

        /// 业务方APPID
        public let customerAppid: String

        /// 身份证号
        /// 注 1：下方 idCryptoType 为指定
        /// 加密方式
        /// 注 2：若 idNumber 加密则必传加
        /// 密方式
        public let idNumber: String

        /// 手机号码（注：不需要带国家代码
        /// 例如：13430421011）
        /// 注 1：下方 phoneCryptoType 为
        /// 指定加密方式:
        /// 注 2：若 phoneNumber 加密则必
        /// 传加密方式
        public let phoneNumber: String

        /// 业务场景 ID
        public let scene: String?

        /// 默认不使用，业务方子
        /// 账号，若接口使用密钥对应是子账
        /// 号则必填
        public let customerSubUin: String?

        /// 已获取约定标识则传 1；
        /// 用于基于特定需求而传的标识字段
        /// 注：有约定则是必传，若未传则查
        /// 询接口失败
        public let authorization: String?

        /// 姓名
        /// 注 ：不支持加密
        public let name: String?

        /// 银行卡号
        public let bankCardNumber: String?

        /// 用户请求来源 IP
        public let userIp: String?

        /// 国际移动设备识别码
        public let imei: String?

        /// ios 系统广告标示符
        public let idfa: String?

        /// 用户邮箱地址
        public let emailAddress: String?

        /// 用户住址
        public let address: String?

        /// MAC 地址
        public let mac: String?

        /// 国际移动用户识别码
        public let imsi: String?

        /// 关联的腾讯帐号 QQ：1；
        /// 开放帐号微信： 2；
        public let accountType: String?

        /// 可选的 QQ 或微信 openid
        public let uid: String?

        /// qq 或微信分配给网站或应用的
        /// appid，用来唯一标识网站或应用
        public let appIdU: String?

        /// ＷＩＦＩＭＡＣ
        public let wifiMac: String?

        /// WIFI 服务集标识
        public let wifiSSID: String?

        /// WIFI-BSSID
        public let wifiBSSID: String?

        /// 拓展字段类型 ID
        /// 注：默认不填写，需要时天御侧将
        /// 提供
        public let extensionId: String?

        /// 拓展字段内容
        /// 注：默认不填，需要时天御侧将提
        /// 供
        public let extensionIn: String?

        /// 业务 ID，默认不传
        public let businessId: String?

        /// 身份证加密类型
        /// 0：不加密（默认值）
        /// 1：md5
        /// 2：sha256
        /// 3：SM3
        /// 注：若 idNumber 加密则必传加密
        /// 方式
        public let idCryptoType: String?

        /// 手机号加密类型
        /// 0：不加密（默认值）
        /// 1：md5,
        /// 2：sha256
        /// 3：SM3
        /// 注：若 phoneNumber 加密则必传
        /// 加密方式
        public let phoneCryptoType: String?

        /// 姓名加密类型：——注：已经不支持加
        /// 密，该字段存在是为了兼容可能历史客户
        /// 版本；
        /// 0：不加密（默认值）
        /// 1：md5
        public let nameCryptoType: String?

        /// 是否使用旧回包
        public let oldResponseType: String?

        public init(customerUin: String, customerAppid: String, idNumber: String, phoneNumber: String, scene: String? = nil, customerSubUin: String? = nil, authorization: String? = nil, name: String? = nil, bankCardNumber: String? = nil, userIp: String? = nil, imei: String? = nil, idfa: String? = nil, emailAddress: String? = nil, address: String? = nil, mac: String? = nil, imsi: String? = nil, accountType: String? = nil, uid: String? = nil, appIdU: String? = nil, wifiMac: String? = nil, wifiSSID: String? = nil, wifiBSSID: String? = nil, extensionId: String? = nil, extensionIn: String? = nil, businessId: String? = nil, idCryptoType: String? = nil, phoneCryptoType: String? = nil, nameCryptoType: String? = nil, oldResponseType: String? = nil) {
            self.customerUin = customerUin
            self.customerAppid = customerAppid
            self.idNumber = idNumber
            self.phoneNumber = phoneNumber
            self.scene = scene
            self.customerSubUin = customerSubUin
            self.authorization = authorization
            self.name = name
            self.bankCardNumber = bankCardNumber
            self.userIp = userIp
            self.imei = imei
            self.idfa = idfa
            self.emailAddress = emailAddress
            self.address = address
            self.mac = mac
            self.imsi = imsi
            self.accountType = accountType
            self.uid = uid
            self.appIdU = appIdU
            self.wifiMac = wifiMac
            self.wifiSSID = wifiSSID
            self.wifiBSSID = wifiBSSID
            self.extensionId = extensionId
            self.extensionIn = extensionIn
            self.businessId = businessId
            self.idCryptoType = idCryptoType
            self.phoneCryptoType = phoneCryptoType
            self.nameCryptoType = nameCryptoType
            self.oldResponseType = oldResponseType
        }

        enum CodingKeys: String, CodingKey {
            case customerUin = "CustomerUin"
            case customerAppid = "CustomerAppid"
            case idNumber = "IdNumber"
            case phoneNumber = "PhoneNumber"
            case scene = "Scene"
            case customerSubUin = "CustomerSubUin"
            case authorization = "Authorization"
            case name = "Name"
            case bankCardNumber = "BankCardNumber"
            case userIp = "UserIp"
            case imei = "Imei"
            case idfa = "Idfa"
            case emailAddress = "EmailAddress"
            case address = "Address"
            case mac = "Mac"
            case imsi = "Imsi"
            case accountType = "AccountType"
            case uid = "Uid"
            case appIdU = "AppIdU"
            case wifiMac = "WifiMac"
            case wifiSSID = "WifiSSID"
            case wifiBSSID = "WifiBSSID"
            case extensionId = "ExtensionId"
            case extensionIn = "ExtensionIn"
            case businessId = "BusinessId"
            case idCryptoType = "IdCryptoType"
            case phoneCryptoType = "PhoneCryptoType"
            case nameCryptoType = "NameCryptoType"
            case oldResponseType = "OldResponseType"
        }
    }

    /// 反欺诈查询结果
    public struct AntiFraudRecord: TCOutputModel {
        /// 公共错误码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let code: String?

        /// 业务侧错误码。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let codeDesc: String?

        /// 业务侧错误信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 表示该条记录能否查到：1 为能查到；-1 为查不到，此时 RiskScore 返回-1；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let found: String?

        /// 表示该条记录中的身份 ID 能否查到
        /// 1 为能查到
        /// -1 为查不到
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let idFound: String?

        /// 当可查到时，返回 0~100 区间，值越高 欺诈可
        /// 能性越大。
        /// 当查不到时（即 found=-1），返回-1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskScore: String?

        /// 扩展字段，对风险类型的说明。扩展字段并非必
        /// 然出现。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskInfo: [SimpleKindRiskDetail]?

        /// 默认出现，提供模型版本号说明及多模型返回需
        /// 要时用到；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let otherModelScores: [OtherModelScoresDetail]?

        /// 表示请求时间，标准 sunix 时间戳，非必然出现
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let postTime: String?

        /// 拓展字段，非必然出现，和 ExtensionIn 对应；
        /// 注：非必然出现，需要返回时天御侧将说明；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extensionOut: String?

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case codeDesc = "CodeDesc"
            case message = "Message"
            case found = "Found"
            case idFound = "IdFound"
            case riskScore = "RiskScore"
            case riskInfo = "RiskInfo"
            case otherModelScores = "OtherModelScores"
            case postTime = "PostTime"
            case extensionOut = "ExtensionOut"
        }
    }

    /// 借贷反欺诈密文业务入参
    public struct FinanceAntiFraudCryptoFilter: TCInputModel {
        /// 值1定义：AES加密方式[加密模式ECB；填充格式pkcs7padding；秘钥16字节即128位
        public let cryptoType: String?

        /// 业务字段BusinessSecurityData的json数据格式，采用CryptoType相应的加密方式计算后得到的bash64编码内容。比如对{"PhoneNumber":"13430420001","IdNumber":"420115199501010001","BankCardNumber":"6214000100010001"}包体做加密。
        public let cryptoContent: String?

        public init(cryptoType: String? = nil, cryptoContent: String? = nil) {
            self.cryptoType = cryptoType
            self.cryptoContent = cryptoContent
        }

        enum CodingKeys: String, CodingKey {
            case cryptoType = "CryptoType"
            case cryptoContent = "CryptoContent"
        }
    }

    /// 借贷反欺诈原始业务入参
    public struct FinanceAntiFraudFilter: TCInputModel {
        /// 电话号码(五选二)
        public let phoneNumber: String?

        /// 身份证Id(五选二) 参数详细定义请加微信：TYXGJ-01
        public let idNumber: String?

        /// 银行卡号(五选二)
        public let bankCardNumber: String?

        /// 用户请求来源 IP(五选二)
        public let userIp: String?

        /// 国际移动设备识别码(五选二)
        public let imei: String?

        /// ios 系统广告标示符(五选二)
        public let idfa: String?

        /// 业务场景ID，需要找技术对接
        public let scene: String?

        /// 姓名
        public let name: String?

        /// 用户邮箱地址
        public let emailAddress: String?

        /// 用户住址
        public let address: String?

        /// MAC 地址
        public let mac: String?

        /// 国际移动用户识别码
        public let imsi: String?

        /// 1：关联的腾讯帐号QQ；2：开放帐号微信
        public let accountType: String?

        /// 可选的 QQ 或微信 openid
        public let uid: String?

        /// qq 或微信分配给网站或应用的 appid，用来唯一标识网站或应用
        public let appIdU: String?

        /// WIFI MAC
        public let wifiMac: String?

        /// WIFI 服务集标识
        public let wifiSSID: String?

        /// WIFI-BSSID
        public let wifiBSSID: String?

        /// 业务 ID，在多个业务中使用此服务，通过此ID 区分统计数据
        public let businessId: String?

        /// 手机号加密类型 0：不加密（默认值）；1：md5；2：sha256；3：SM3
        public let phoneCryptoType: String?

        /// 身份证Id加密类型 0：不加密（默认值）；1：md5；2：sha256；3：SM3
        public let idCryptoType: String?

        /// 姓名加密类型 0：不加密（默认值）；1：md5；2：sha256；3：SM3
        public let nameCryptoType: String?

        public init(phoneNumber: String? = nil, idNumber: String? = nil, bankCardNumber: String? = nil, userIp: String? = nil, imei: String? = nil, idfa: String? = nil, scene: String? = nil, name: String? = nil, emailAddress: String? = nil, address: String? = nil, mac: String? = nil, imsi: String? = nil, accountType: String? = nil, uid: String? = nil, appIdU: String? = nil, wifiMac: String? = nil, wifiSSID: String? = nil, wifiBSSID: String? = nil, businessId: String? = nil, phoneCryptoType: String? = nil, idCryptoType: String? = nil, nameCryptoType: String? = nil) {
            self.phoneNumber = phoneNumber
            self.idNumber = idNumber
            self.bankCardNumber = bankCardNumber
            self.userIp = userIp
            self.imei = imei
            self.idfa = idfa
            self.scene = scene
            self.name = name
            self.emailAddress = emailAddress
            self.address = address
            self.mac = mac
            self.imsi = imsi
            self.accountType = accountType
            self.uid = uid
            self.appIdU = appIdU
            self.wifiMac = wifiMac
            self.wifiSSID = wifiSSID
            self.wifiBSSID = wifiBSSID
            self.businessId = businessId
            self.phoneCryptoType = phoneCryptoType
            self.idCryptoType = idCryptoType
            self.nameCryptoType = nameCryptoType
        }

        enum CodingKeys: String, CodingKey {
            case phoneNumber = "PhoneNumber"
            case idNumber = "IdNumber"
            case bankCardNumber = "BankCardNumber"
            case userIp = "UserIp"
            case imei = "Imei"
            case idfa = "Idfa"
            case scene = "Scene"
            case name = "Name"
            case emailAddress = "EmailAddress"
            case address = "Address"
            case mac = "Mac"
            case imsi = "Imsi"
            case accountType = "AccountType"
            case uid = "Uid"
            case appIdU = "AppIdU"
            case wifiMac = "WifiMac"
            case wifiSSID = "WifiSSID"
            case wifiBSSID = "WifiBSSID"
            case businessId = "BusinessId"
            case phoneCryptoType = "PhoneCryptoType"
            case idCryptoType = "IdCryptoType"
            case nameCryptoType = "NameCryptoType"
        }
    }

    /// 借贷反欺查询返回结果出参
    public struct FinanceAntiFraudRecord: TCOutputModel {
        /// 表示该条记录能否查到：1为能查到，-1为查不到
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let found: String?

        /// 表示该条Id能否查到：1为能查到，-1为查不到
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let idFound: String?

        /// 评分0~100;值越高 欺诈可能性越大
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskScore: String?

        /// 扩展字段，对风险类型的说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskInfo: [RiskDetailInfo]?

        /// 多模型返回结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let otherModelScores: [FinanceOtherModelScores]?

        /// 业务侧错误码。成功时返回0，错误时返回非0值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let code: String?

        /// 业务侧错误信息。成功时返回Success，错误时返回具体业务错误原因。
        /// 注意：此字段可能返回 null，表示取不到有效值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        enum CodingKeys: String, CodingKey {
            case found = "Found"
            case idFound = "IdFound"
            case riskScore = "RiskScore"
            case riskInfo = "RiskInfo"
            case otherModelScores = "OtherModelScores"
            case code = "Code"
            case message = "Message"
        }
    }

    /// 借贷反欺返回结果出参中的多模型返回结果
    public struct FinanceOtherModelScores: TCOutputModel {
        /// 模型ID序号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelId: String?

        /// 模型ID序号对应的评分结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelScore: String?

        enum CodingKeys: String, CodingKey {
            case modelId = "ModelId"
            case modelScore = "ModelScore"
        }
    }

    /// 扩展字段，对多模型返回结果的说明，被如下接口引用：GetAntiFraud。
    public struct OtherModelScoresDetail: TCOutputModel {
        /// 模型版本号；默认顺序为 0、1、2、3、…其中：0=主模型，跟 RiskScore 保持一致；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelId: String?

        /// 模型版本对应的评分结果；Found=1 时：模型版本对应的评分结果，0~100 分
        /// 区间；Found=-1（未查到）时：全部模型结果返回-1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelScore: String?

        enum CodingKeys: String, CodingKey {
            case modelId = "ModelId"
            case modelScore = "ModelScore"
        }
    }

    /// 扩展字段，对风险类型的说明
    public struct RiskDetail: TCOutputModel {
        /// 风险码 参数详细定义请加微信：TYXGJ-01
        public let riskCode: UInt64

        enum CodingKeys: String, CodingKey {
            case riskCode = "RiskCode"
        }
    }

    /// 金融借贷反欺诈 风险码输出类型
    public struct RiskDetailInfo: TCOutputModel {
        /// 风险码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskCode: String?

        /// 风险码对应的风险值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskValue: String?

        enum CodingKeys: String, CodingKey {
            case riskCode = "RiskCode"
            case riskValue = "RiskValue"
        }
    }

    /// 扩展字段，对风险类型的说明
    public struct SimpleKindRiskDetail: TCOutputModel {
        /// 风险码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskCode: String?

        /// 风险码详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskCodeValue: String?

        enum CodingKeys: String, CodingKey {
            case riskCode = "RiskCode"
            case riskCodeValue = "RiskCodeValue"
        }
    }
}
