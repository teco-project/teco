//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Sms {
    /// 短信签名状态查询
    ///
    /// ⚠️注意：个人认证用户不支持使用 API 查询短信签名，请参阅了解 [实名认证基本介绍](https://cloud.tencent.com/document/product/378/3629),如果为个人认证请登录 [控制台](https://console.cloud.tencent.com/smsv2) 查询短信签名。
    /// >- 注：由于云 **API3.0 安全性**有所提升，所以**接口鉴权**较为复杂，建议使用 SDK 来使用云短信服务。
    /// >- 您可以在 [API 3.0 Explorer](https://console.cloud.tencent.com/api/explorer?Product=sms&Version=2021-01-11&Action=SendSms) 中直接运行该接口，可以先免去签名计算步骤。运行成功后，API Explorer可以**自动生成**SDK代码示例。
    @inlinable
    public func describeSmsSignList(_ input: DescribeSmsSignListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeSmsSignListResponse > {
        self.client.execute(action: "DescribeSmsSignList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 短信签名状态查询
    ///
    /// ⚠️注意：个人认证用户不支持使用 API 查询短信签名，请参阅了解 [实名认证基本介绍](https://cloud.tencent.com/document/product/378/3629),如果为个人认证请登录 [控制台](https://console.cloud.tencent.com/smsv2) 查询短信签名。
    /// >- 注：由于云 **API3.0 安全性**有所提升，所以**接口鉴权**较为复杂，建议使用 SDK 来使用云短信服务。
    /// >- 您可以在 [API 3.0 Explorer](https://console.cloud.tencent.com/api/explorer?Product=sms&Version=2021-01-11&Action=SendSms) 中直接运行该接口，可以先免去签名计算步骤。运行成功后，API Explorer可以**自动生成**SDK代码示例。
    @inlinable
    public func describeSmsSignList(_ input: DescribeSmsSignListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSmsSignListResponse {
        try await self.client.execute(action: "DescribeSmsSignList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeSmsSignList请求参数结构体
    public struct DescribeSmsSignListRequest: TCRequestModel {
        /// 签名 ID 数组。
        /// 注：默认数组最大长度100。
        public let signIdSet: [UInt64]
        
        /// 是否国际/港澳台短信：
        /// 0：表示国内短信。
        /// 1：表示国际/港澳台短信。
        public let international: UInt64
        
        public init (signIdSet: [UInt64], international: UInt64) {
            self.signIdSet = signIdSet
            self.international = international
        }
        
        enum CodingKeys: String, CodingKey {
            case signIdSet = "SignIdSet"
            case international = "International"
        }
    }
    
    /// DescribeSmsSignList返回参数结构体
    public struct DescribeSmsSignListResponse: TCResponseModel {
        /// 获取签名信息响应
        public let describeSignListStatusSet: [DescribeSignListStatus]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case describeSignListStatusSet = "DescribeSignListStatusSet"
            case requestId = "RequestId"
        }
    }
}
