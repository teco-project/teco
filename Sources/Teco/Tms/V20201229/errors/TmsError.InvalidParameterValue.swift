//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTmsError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case errFileContent = "InvalidParameterValue.ErrFileContent"
            case errTextContentLen = "InvalidParameterValue.ErrTextContentLen"
            case errTextContentType = "InvalidParameterValue.ErrTextContentType"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// FileContent不可用，传入的Base64编码无法转换成标准utf8内容。
        public static var errFileContent: InvalidParameterValue {
            InvalidParameterValue(.errFileContent)
        }
        
        /// 请求的文本长度超过限制。
        ///
        /// 咨询运营人员，获取接口的文本入参长度限制，调整文本入参长度。
        public static var errTextContentLen: InvalidParameterValue {
            InvalidParameterValue(.errTextContentLen)
        }
        
        /// 请求的文本格式错误（需要base64编码格式的文本）。
        ///
        /// 对请求的文本进行base64编码
        public static var errTextContentType: InvalidParameterValue {
            InvalidParameterValue(.errTextContentType)
        }
    }
}

extension TCTmsError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCTmsError.InvalidParameterValue, rhs: TCTmsError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTmsError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTmsError.InvalidParameterValue {
    /// - Returns: ``TCTmsError`` that holds the same error and context.
    public func toTmsError() -> TCTmsError {
        guard let code = TCTmsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTmsError(code, context: self.context)
    }
}

extension TCTmsError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
