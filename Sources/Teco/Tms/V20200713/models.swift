//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tms {
    /// 文本返回的详细结果
    public struct DetailResults: TCOutputModel {
        /// 恶意标签，Normal：正常，Porn：色情，Abuse：谩骂，Ad：广告，Custom：自定义词库。
        /// 以及令人反感、不安全或不适宜的内容类型。
        public let label: String
        
        /// 建议您拿到判断结果后的执行操作。
        /// 建议值，Block：建议屏蔽，Review：建议复审，Pass：建议通过
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let suggestion: String?
        
        /// 该标签下命中的关键词
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keywords: [String]?
        
        /// 该标签模型命中的分值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let score: Int64?
        
        /// 仅当Label为Custom自定义关键词时有效，表示自定义关键词库类型，1:黑白库，2：自定义库
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let libType: Int64?
        
        /// 仅当Label为Custom自定义关键词时有效，表示自定义库id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let libId: String?
        
        /// 仅当Labe为Custom自定义关键词时有效，表示自定义库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let libName: String?
        
        enum CodingKeys: String, CodingKey {
            case label = "Label"
            case suggestion = "Suggestion"
            case keywords = "Keywords"
            case score = "Score"
            case libType = "LibType"
            case libId = "LibId"
            case libName = "LibName"
        }
    }
    
    /// 设备信息
    public struct Device: TCInputModel {
        /// 用户IP
        public let ip: String?
        
        /// Mac地址
        public let mac: String?
        
        /// 设备指纹Token
        public let tokenId: String?
        
        /// 设备指纹ID
        public let deviceId: String?
        
        /// 设备序列号
        public let imei: String?
        
        /// IOS设备，Identifier For Advertising（广告标识符）
        public let idfa: String?
        
        /// IOS设备，IDFV - Identifier For Vendor（应用开发商标识符）
        public let idfv: String?
        
        public init (ip: String?, mac: String?, tokenId: String?, deviceId: String?, imei: String?, idfa: String?, idfv: String?) {
            self.ip = ip
            self.mac = mac
            self.tokenId = tokenId
            self.deviceId = deviceId
            self.imei = imei
            self.idfa = idfa
            self.idfv = idfv
        }
        
        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case mac = "Mac"
            case tokenId = "TokenId"
            case deviceId = "DeviceId"
            case imei = "IMEI"
            case idfa = "IDFA"
            case idfv = "IDFV"
        }
    }
    
    /// 违规数据分布
    public struct EvilCount: TCOutputModel {
        /// ----非必选，该参数功能暂未对外开放
        public let evilType: String
        
        /// 分布类型总量
        public let count: Int64
        
        enum CodingKeys: String, CodingKey {
            case evilType = "EvilType"
            case count = "Count"
        }
    }
    
    /// 文本过滤条件
    public struct Filters: TCInputModel {
        /// 查询字段：
        /// 策略BizType
        /// 子账号SubUin
        /// 日期区间DateRange
        public let name: String
        
        /// 查询值
        public let values: [String]
        
        public init (name: String, values: [String]) {
            self.name = name
            self.values = values
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }
    
    /// 识别结果统计
    public struct Overview: TCOutputModel {
        /// 总调用量
        public let totalCount: Int64
        
        /// 总调用时长
        public let totalHour: Int64
        
        /// 通过量
        public let passCount: Int64
        
        /// 通过时长
        public let passHour: Int64
        
        /// 违规量
        public let evilCount: Int64
        
        /// 违规时长
        public let evilHour: Int64
        
        /// 疑似违规量
        public let suspectCount: Int64
        
        /// 疑似违规时长
        public let suspectHour: Int64
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case totalHour = "TotalHour"
            case passCount = "PassCount"
            case passHour = "PassHour"
            case evilCount = "EvilCount"
            case evilHour = "EvilHour"
            case suspectCount = "SuspectCount"
            case suspectHour = "SuspectHour"
        }
    }
    
    /// 账号风险检测结果
    public struct RiskDetails: TCOutputModel {
        /// 风险类别，RiskAccount，RiskIP, RiskIMEI
        public let label: String
        
        /// 风险等级，1:疑似，2：恶意
        public let level: Int64
        
        enum CodingKeys: String, CodingKey {
            case label = "Label"
            case level = "Level"
        }
    }
    
    /// 自定义库列表
    public struct TextLib: TCOutputModel {
        /// 库id
        public let libId: Int64
        
        /// 库名
        public let libName: String
        
        enum CodingKeys: String, CodingKey {
            case libId = "LibId"
            case libName = "LibName"
        }
    }
    
    /// 举报接口响应数据
    public struct TipoffResponse: TCOutputModel {
        /// 举报结果， "0-举报数据提交成功  99-举报数据提交失败"
        public let resultCode: Int64
        
        /// 结果描述
        public let resultMsg: String
        
        enum CodingKeys: String, CodingKey {
            case resultCode = "ResultCode"
            case resultMsg = "ResultMsg"
        }
    }
    
    /// 识别量统计
    public struct TrendCount: TCOutputModel {
        /// 总调用量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?
        
        /// 总调用时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalHour: Int64?
        
        /// 通过量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let passCount: Int64?
        
        /// 通过时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let passHour: Int64?
        
        /// 违规量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let evilCount: Int64?
        
        /// 违规时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let evilHour: Int64?
        
        /// 疑似违规量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let suspectCount: Int64?
        
        /// 疑似违规时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let suspectHour: Int64?
        
        /// 日期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let date: String?
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case totalHour = "TotalHour"
            case passCount = "PassCount"
            case passHour = "PassHour"
            case evilCount = "EvilCount"
            case evilHour = "EvilHour"
            case suspectCount = "SuspectCount"
            case suspectHour = "SuspectHour"
            case date = "Date"
        }
    }
    
    /// 用户相关信息
    public struct User: TCInputModel {
        /// 用户账号ID，如填写，会根据账号历史恶意情况，判定消息有害结果，特别是有利于可疑恶意情况下的辅助判断。账号可以填写微信uin、QQ号、微信openid、QQopenid、字符串等。该字段和账号类别确定唯一账号。
        public let userId: String?
        
        /// 用户昵称
        public let nickname: String?
        
        /// 账号类别，"1-微信uin 2-QQ号 3-微信群uin 4-qq群号 5-微信openid 6-QQopenid 7-其它string"
        public let accountType: Int64?
        
        /// 性别 默认0 未知 1 男性 2 女性
        public let gender: Int64?
        
        /// 年龄 默认0 未知
        public let age: Int64?
        
        /// 用户等级，默认0 未知 1 低 2 中 3 高
        public let level: Int64?
        
        /// 手机号
        public let phone: String?
        
        public init (userId: String?, nickname: String?, accountType: Int64?, gender: Int64?, age: Int64?, level: Int64?, phone: String?) {
            self.userId = userId
            self.nickname = nickname
            self.accountType = accountType
            self.gender = gender
            self.age = age
            self.level = level
            self.phone = phone
        }
        
        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case nickname = "Nickname"
            case accountType = "AccountType"
            case gender = "Gender"
            case age = "Age"
            case level = "Level"
            case phone = "Phone"
        }
    }
}