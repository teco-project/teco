//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotexplorerError {
    public struct LimitExceeded: TCIotexplorerErrorType {
        enum Code: String {
            case applicationExceedLimit = "LimitExceeded.ApplicationExceedLimit"
            case batchProductionExceedLimit = "LimitExceeded.BatchProductionExceedLimit"
            case batchProductionNull = "LimitExceeded.BatchProductionNull"
            case bindProductsExceedLimit = "LimitExceeded.BindProductsExceedLimit"
            case deviceExceedLimit = "LimitExceeded.DeviceExceedLimit"
            case firmwareExceedLimit = "LimitExceeded.FirmwareExceedLimit"
            case messageSaved = "LimitExceeded.MessageSaved"
            case productExceedLimit = "LimitExceeded.ProductExceedLimit"
            case projectExceedLimit = "LimitExceeded.ProjectExceedLimit"
            case studioLoRaFreqExceedLimit = "LimitExceeded.StudioLoRaFreqExceedLimit"
            case studioProductExceedLimit = "LimitExceeded.StudioProductExceedLimit"
            case thingModelExceedLimit = "LimitExceeded.ThingModelExceedLimit"
            case topicPolicyExceedLimit = "LimitExceeded.TopicPolicyExceedLimit"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 应用数量超出限制。
        public static var applicationExceedLimit: LimitExceeded {
            LimitExceeded(.applicationExceedLimit)
        }

        /// 量产超出限制。
        public static var batchProductionExceedLimit: LimitExceeded {
            LimitExceeded(.batchProductionExceedLimit)
        }

        /// 量产为空。
        public static var batchProductionNull: LimitExceeded {
            LimitExceeded(.batchProductionNull)
        }

        /// 绑定的产品数量超过限制。
        public static var bindProductsExceedLimit: LimitExceeded {
            LimitExceeded(.bindProductsExceedLimit)
        }

        /// 设备数量超过限制。
        public static var deviceExceedLimit: LimitExceeded {
            LimitExceeded(.deviceExceedLimit)
        }

        /// 固件数量超出限制。
        public static var firmwareExceedLimit: LimitExceeded {
            LimitExceeded(.firmwareExceedLimit)
        }

        /// 消息数量超过限制。
        public static var messageSaved: LimitExceeded {
            LimitExceeded(.messageSaved)
        }

        /// 超过产品数量限制。
        public static var productExceedLimit: LimitExceeded {
            LimitExceeded(.productExceedLimit)
        }

        /// 项目数量超出限制。
        public static var projectExceedLimit: LimitExceeded {
            LimitExceeded(.projectExceedLimit)
        }

        /// LoRa频点数量超出限制。
        public static var studioLoRaFreqExceedLimit: LimitExceeded {
            LimitExceeded(.studioLoRaFreqExceedLimit)
        }

        /// 产品数量超出限制。
        public static var studioProductExceedLimit: LimitExceeded {
            LimitExceeded(.studioProductExceedLimit)
        }

        /// 物模型超出限制。
        public static var thingModelExceedLimit: LimitExceeded {
            LimitExceeded(.thingModelExceedLimit)
        }

        /// Topic数量超出限制。
        public static var topicPolicyExceedLimit: LimitExceeded {
            LimitExceeded(.topicPolicyExceedLimit)
        }

        public func asIotexplorerError() -> TCIotexplorerError {
            let code: TCIotexplorerError.Code
            switch self.error {
            case .applicationExceedLimit:
                code = .limitExceeded_ApplicationExceedLimit
            case .batchProductionExceedLimit:
                code = .limitExceeded_BatchProductionExceedLimit
            case .batchProductionNull:
                code = .limitExceeded_BatchProductionNull
            case .bindProductsExceedLimit:
                code = .limitExceeded_BindProductsExceedLimit
            case .deviceExceedLimit:
                code = .limitExceeded_DeviceExceedLimit
            case .firmwareExceedLimit:
                code = .limitExceeded_FirmwareExceedLimit
            case .messageSaved:
                code = .limitExceeded_MessageSaved
            case .productExceedLimit:
                code = .limitExceeded_ProductExceedLimit
            case .projectExceedLimit:
                code = .limitExceeded_ProjectExceedLimit
            case .studioLoRaFreqExceedLimit:
                code = .limitExceeded_StudioLoRaFreqExceedLimit
            case .studioProductExceedLimit:
                code = .limitExceeded_StudioProductExceedLimit
            case .thingModelExceedLimit:
                code = .limitExceeded_ThingModelExceedLimit
            case .topicPolicyExceedLimit:
                code = .limitExceeded_TopicPolicyExceedLimit
            }
            return TCIotexplorerError(code, context: self.context)
        }
    }
}
