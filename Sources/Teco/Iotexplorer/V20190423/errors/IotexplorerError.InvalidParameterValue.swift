//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotexplorerError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case actionNil = "InvalidParameterValue.ActionNil"
            case actionNilOrNotExist = "InvalidParameterValue.ActionNilOrNotExist"
            case appDescriptionTooLong = "InvalidParameterValue.AppDescriptionTooLong"
            case appExists = "InvalidParameterValue.AppExists"
            case appNameTooLong = "InvalidParameterValue.AppNameTooLong"
            case appNoPermission = "InvalidParameterValue.AppNoPermission"
            case appNotExists = "InvalidParameterValue.AppNotExists"
            case checkForwardURLFail = "InvalidParameterValue.CheckForwardURLFail"
            case deviceAlreadyExist = "InvalidParameterValue.DeviceAlreadyExist"
            case deviceHasNotBindGateway = "InvalidParameterValue.DeviceHasNotBindGateway"
            case deviceIsNotGateway = "InvalidParameterValue.DeviceIsNotGateway"
            case deviceNameInvalid = "InvalidParameterValue.DeviceNameInvalid"
            case deviceNotExist = "InvalidParameterValue.DeviceNotExist"
            case errLLSyncBroadcastDeviceNameLengthExceed = "InvalidParameterValue.ErrLLSyncBroadcastDeviceNameLengthExceed"
            case errorTaskNotExist = "InvalidParameterValue.ErrorTaskNotExist"
            case failActionHasSameDevice = "InvalidParameterValue.FailActionHasSameDevice"
            case firmwareAlreadyExist = "InvalidParameterValue.FirmwareAlreadyExist"
            case forwardRedirectDenied = "InvalidParameterValue.ForwardRedirectDenied"
            case invalidSQL = "InvalidParameterValue.InvalidSQL"
            case loRaFreqParmsError = "InvalidParameterValue.LoRaFreqParmsError"
            case modelDefineDontMatchTemplate = "InvalidParameterValue.ModelDefineDontMatchTemplate"
            case modelDefineDupID = "InvalidParameterValue.ModelDefineDupID"
            case modelDefineErrorModel = "InvalidParameterValue.ModelDefineErrorModel"
            case modelDefineErrorType = "InvalidParameterValue.ModelDefineErrorType"
            case modelDefineEventParamsDupID = "InvalidParameterValue.ModelDefineEventParamsDupID"
            case modelDefineEventParamsExceedLimit = "InvalidParameterValue.ModelDefineEventParamsExceedLimit"
            case modelDefineEventPropError = "InvalidParameterValue.ModelDefineEventPropError"
            case modelDefineEventPropNameError = "InvalidParameterValue.ModelDefineEventPropNameError"
            case modelDefineInvalid = "InvalidParameterValue.ModelDefineInvalid"
            case modelDefineNil = "InvalidParameterValue.ModelDefineNil"
            case modelDefinePropBoolMappingError = "InvalidParameterValue.ModelDefinePropBoolMappingError"
            case modelDefinePropEnumMappingError = "InvalidParameterValue.ModelDefinePropEnumMappingError"
            case modelDefinePropRangeError = "InvalidParameterValue.ModelDefinePropRangeError"
            case modelDefinePropRangeOverflow = "InvalidParameterValue.ModelDefinePropRangeOverflow"
            case modelPropertyNotExist = "InvalidParameterValue.ModelPropertyNotExist"
            case msgContentInvalid = "InvalidParameterValue.MsgContentInvalid"
            case msgLevelInvalid = "InvalidParameterValue.MsgLevelInvalid"
            case msgTitleInvalid = "InvalidParameterValue.MsgTitleInvalid"
            case msgTypeInvalid = "InvalidParameterValue.MsgTypeInvalid"
            case operationDenied = "InvalidParameterValue.OperationDenied"
            case payloadOverLimit = "InvalidParameterValue.PayloadOverLimit"
            case productAlreadyExist = "InvalidParameterValue.ProductAlreadyExist"
            case productIDInvalid = "InvalidParameterValue.ProductIDInvalid"
            case productIsNotGateway = "InvalidParameterValue.ProductIsNotGateway"
            case productParmsError = "InvalidParameterValue.ProductParmsError"
            case projectParmsError = "InvalidParameterValue.ProjectParmsError"
            case republishTopicFormatError = "InvalidParameterValue.RepublishTopicFormatError"
            case ruleNumberBeyondLimit = "InvalidParameterValue.RuleNumberBeyondLimit"
            case selectKeyFromBinaryPayload = "InvalidParameterValue.SelectKeyFromBinaryPayload"
            case startTimeLaterEndTime = "InvalidParameterValue.StartTimeLaterEndTime"
            case topicPolicyAlreadyExist = "InvalidParameterValue.TopicPolicyAlreadyExist"
            case topicRuleAlreadyExist = "InvalidParameterValue.TopicRuleAlreadyExist"
            case topicRuleSqlNotEdited = "InvalidParameterValue.TopicRuleSqlNotEdited"
            case updateTopicRuleDBFail = "InvalidParameterValue.UpdateTopicRuleDBFail"
            case userIDInvalid = "InvalidParameterValue.UserIDInvalid"
            case vpnParmsError = "InvalidParameterValue.VPNParmsError"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 规则行为未配置。
        public static var actionNil: InvalidParameterValue {
            InvalidParameterValue(.actionNil)
        }
        
        /// 动作为空或不存在。
        public static var actionNilOrNotExist: InvalidParameterValue {
            InvalidParameterValue(.actionNilOrNotExist)
        }
        
        /// 应用描述过长。
        public static var appDescriptionTooLong: InvalidParameterValue {
            InvalidParameterValue(.appDescriptionTooLong)
        }
        
        /// App已存在。
        public static var appExists: InvalidParameterValue {
            InvalidParameterValue(.appExists)
        }
        
        /// 应用名称过长。
        public static var appNameTooLong: InvalidParameterValue {
            InvalidParameterValue(.appNameTooLong)
        }
        
        /// App无权限。
        public static var appNoPermission: InvalidParameterValue {
            InvalidParameterValue(.appNoPermission)
        }
        
        /// App不存在。
        public static var appNotExists: InvalidParameterValue {
            InvalidParameterValue(.appNotExists)
        }
        
        /// 检查第三方URL超时或失败。
        public static var checkForwardURLFail: InvalidParameterValue {
            InvalidParameterValue(.checkForwardURLFail)
        }
        
        /// 创建的设备名已存在。
        public static var deviceAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.deviceAlreadyExist)
        }
        
        /// 设备未绑定任何网关设备。
        public static var deviceHasNotBindGateway: InvalidParameterValue {
            InvalidParameterValue(.deviceHasNotBindGateway)
        }
        
        /// 设备不是网关类型。
        public static var deviceIsNotGateway: InvalidParameterValue {
            InvalidParameterValue(.deviceIsNotGateway)
        }
        
        /// 设备名称非法。
        public static var deviceNameInvalid: InvalidParameterValue {
            InvalidParameterValue(.deviceNameInvalid)
        }
        
        /// 设备不存在。
        public static var deviceNotExist: InvalidParameterValue {
            InvalidParameterValue(.deviceNotExist)
        }
        
        public static var errLLSyncBroadcastDeviceNameLengthExceed: InvalidParameterValue {
            InvalidParameterValue(.errLLSyncBroadcastDeviceNameLengthExceed)
        }
        
        /// 任务不存在。
        public static var errorTaskNotExist: InvalidParameterValue {
            InvalidParameterValue(.errorTaskNotExist)
        }
        
        /// 存失败，行为操作和转发错误行为数据目标不可为同一设备。
        public static var failActionHasSameDevice: InvalidParameterValue {
            InvalidParameterValue(.failActionHasSameDevice)
        }
        
        /// 固件已经存在。
        public static var firmwareAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.firmwareAlreadyExist)
        }
        
        /// 转发重定向被拒绝。
        public static var forwardRedirectDenied: InvalidParameterValue {
            InvalidParameterValue(.forwardRedirectDenied)
        }
        
        /// SQL语句含有非法字符。
        public static var invalidSQL: InvalidParameterValue {
            InvalidParameterValue(.invalidSQL)
        }
        
        /// LoRa频点参数错误。
        public static var loRaFreqParmsError: InvalidParameterValue {
            InvalidParameterValue(.loRaFreqParmsError)
        }
        
        /// 物模型不符合产品模板。
        public static var modelDefineDontMatchTemplate: InvalidParameterValue {
            InvalidParameterValue(.modelDefineDontMatchTemplate)
        }
        
        /// 物模型存在重复ID。
        public static var modelDefineDupID: InvalidParameterValue {
            InvalidParameterValue(.modelDefineDupID)
        }
        
        /// 物模型事件/属性Model错误。
        public static var modelDefineErrorModel: InvalidParameterValue {
            InvalidParameterValue(.modelDefineErrorModel)
        }
        
        /// 物模型事件/属性Model Type错误。
        public static var modelDefineErrorType: InvalidParameterValue {
            InvalidParameterValue(.modelDefineErrorType)
        }
        
        /// 物模型EVENT Parms存在重复ID。
        public static var modelDefineEventParamsDupID: InvalidParameterValue {
            InvalidParameterValue(.modelDefineEventParamsDupID)
        }
        
        /// 物模型EVENT Parms数量超过限制。
        public static var modelDefineEventParamsExceedLimit: InvalidParameterValue {
            InvalidParameterValue(.modelDefineEventParamsExceedLimit)
        }
        
        /// 物模型事件/属性参数错误。
        public static var modelDefineEventPropError: InvalidParameterValue {
            InvalidParameterValue(.modelDefineEventPropError)
        }
        
        /// 物模型事件/属性 Name 错误。
        public static var modelDefineEventPropNameError: InvalidParameterValue {
            InvalidParameterValue(.modelDefineEventPropNameError)
        }
        
        /// 数据模板未定义。
        public static var modelDefineInvalid: InvalidParameterValue {
            InvalidParameterValue(.modelDefineInvalid)
        }
        
        /// 物模型为空。
        public static var modelDefineNil: InvalidParameterValue {
            InvalidParameterValue(.modelDefineNil)
        }
        
        /// 物模型事件/属性 BOOL类型 Mapping 定义错误。
        public static var modelDefinePropBoolMappingError: InvalidParameterValue {
            InvalidParameterValue(.modelDefinePropBoolMappingError)
        }
        
        /// 物模型事件/属性 Enum类型 Mapping 定义错误。
        public static var modelDefinePropEnumMappingError: InvalidParameterValue {
            InvalidParameterValue(.modelDefinePropEnumMappingError)
        }
        
        /// 物模型事件/属性 Min/Max 定义错误。
        public static var modelDefinePropRangeError: InvalidParameterValue {
            InvalidParameterValue(.modelDefinePropRangeError)
        }
        
        /// 物模型事件/属性 Min/Max 范围超限。
        public static var modelDefinePropRangeOverflow: InvalidParameterValue {
            InvalidParameterValue(.modelDefinePropRangeOverflow)
        }
        
        /// 属性ID不存在。
        public static var modelPropertyNotExist: InvalidParameterValue {
            InvalidParameterValue(.modelPropertyNotExist)
        }
        
        /// 消息内容非法。
        public static var msgContentInvalid: InvalidParameterValue {
            InvalidParameterValue(.msgContentInvalid)
        }
        
        /// 消息等级非法。
        public static var msgLevelInvalid: InvalidParameterValue {
            InvalidParameterValue(.msgLevelInvalid)
        }
        
        /// 消息标题非法。
        public static var msgTitleInvalid: InvalidParameterValue {
            InvalidParameterValue(.msgTitleInvalid)
        }
        
        /// 消息类型非法。
        public static var msgTypeInvalid: InvalidParameterValue {
            InvalidParameterValue(.msgTypeInvalid)
        }
        
        /// 操作不支持。
        public static var operationDenied: InvalidParameterValue {
            InvalidParameterValue(.operationDenied)
        }
        
        /// 消息Payload超出限制。
        public static var payloadOverLimit: InvalidParameterValue {
            InvalidParameterValue(.payloadOverLimit)
        }
        
        /// 创建的产品名已存在。
        public static var productAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.productAlreadyExist)
        }
        
        /// 产品ID非法。
        public static var productIDInvalid: InvalidParameterValue {
            InvalidParameterValue(.productIDInvalid)
        }
        
        /// 产品不是网关类型，无法绑定子产品。
        public static var productIsNotGateway: InvalidParameterValue {
            InvalidParameterValue(.productIsNotGateway)
        }
        
        /// 产品参数错误。
        public static var productParmsError: InvalidParameterValue {
            InvalidParameterValue(.productParmsError)
        }
        
        /// 项目参数错误。
        public static var projectParmsError: InvalidParameterValue {
            InvalidParameterValue(.projectParmsError)
        }
        
        /// 转发的topic格式错误。
        public static var republishTopicFormatError: InvalidParameterValue {
            InvalidParameterValue(.republishTopicFormatError)
        }
        
        /// 规则数量超过限制。
        public static var ruleNumberBeyondLimit: InvalidParameterValue {
            InvalidParameterValue(.ruleNumberBeyondLimit)
        }
        
        /// 二进制数据格式只可利用 * 将数据进行转发。
        public static var selectKeyFromBinaryPayload: InvalidParameterValue {
            InvalidParameterValue(.selectKeyFromBinaryPayload)
        }
        
        /// 开始时间晚于结束时间。
        public static var startTimeLaterEndTime: InvalidParameterValue {
            InvalidParameterValue(.startTimeLaterEndTime)
        }
        
        /// Topic已存在。
        public static var topicPolicyAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.topicPolicyAlreadyExist)
        }
        
        /// 规则已存在。
        public static var topicRuleAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.topicRuleAlreadyExist)
        }
        
        /// 规则sql未编辑。
        public static var topicRuleSqlNotEdited: InvalidParameterValue {
            InvalidParameterValue(.topicRuleSqlNotEdited)
        }
        
        /// 请确认规则相关数据是否有更新。
        public static var updateTopicRuleDBFail: InvalidParameterValue {
            InvalidParameterValue(.updateTopicRuleDBFail)
        }
        
        /// 用户ID非法。
        public static var userIDInvalid: InvalidParameterValue {
            InvalidParameterValue(.userIDInvalid)
        }
        
        /// VPN参数错误。
        public static var vpnParmsError: InvalidParameterValue {
            InvalidParameterValue(.vpnParmsError)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCIotexplorerError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCIotexplorerError.InvalidParameterValue, rhs: TCIotexplorerError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIotexplorerError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIotexplorerError.InvalidParameterValue {
    /// - Returns: ``TCIotexplorerError`` that holds the same error and context.
    public func toIotexplorerError() -> TCIotexplorerError {
        guard let code = TCIotexplorerError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIotexplorerError(code, context: self.context)
    }
}

extension TCIotexplorerError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
