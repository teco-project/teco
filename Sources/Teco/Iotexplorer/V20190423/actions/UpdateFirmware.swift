//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// UpdateFirmware请求参数结构体
    public struct UpdateFirmwareRequest: TCRequestModel {
        /// 产品ID
        public let productID: String

        /// 设备名
        public let deviceName: String

        /// 固件新的版本号
        public let firmwareVersion: String

        /// 固件原版本号
        public let firmwareOriVersion: String

        /// 固件升级方式；0 静默升级 1 用户确认升级   不填默认静默升级
        public let upgradeMethod: UInt64?

        public init(productID: String, deviceName: String, firmwareVersion: String, firmwareOriVersion: String, upgradeMethod: UInt64? = nil) {
            self.productID = productID
            self.deviceName = deviceName
            self.firmwareVersion = firmwareVersion
            self.firmwareOriVersion = firmwareOriVersion
            self.upgradeMethod = upgradeMethod
        }

        enum CodingKeys: String, CodingKey {
            case productID = "ProductID"
            case deviceName = "DeviceName"
            case firmwareVersion = "FirmwareVersion"
            case firmwareOriVersion = "FirmwareOriVersion"
            case upgradeMethod = "UpgradeMethod"
        }
    }

    /// UpdateFirmware返回参数结构体
    public struct UpdateFirmwareResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新设备固件
    ///
    /// 本接口（UpdateFirmware）用于对指定设备发起固件升级请求
    @inlinable @discardableResult
    public func updateFirmware(_ input: UpdateFirmwareRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateFirmwareResponse> {
        self.client.execute(action: "UpdateFirmware", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新设备固件
    ///
    /// 本接口（UpdateFirmware）用于对指定设备发起固件升级请求
    @inlinable @discardableResult
    public func updateFirmware(_ input: UpdateFirmwareRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateFirmwareResponse {
        try await self.client.execute(action: "UpdateFirmware", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新设备固件
    ///
    /// 本接口（UpdateFirmware）用于对指定设备发起固件升级请求
    @inlinable @discardableResult
    public func updateFirmware(productID: String, deviceName: String, firmwareVersion: String, firmwareOriVersion: String, upgradeMethod: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateFirmwareResponse> {
        self.updateFirmware(.init(productID: productID, deviceName: deviceName, firmwareVersion: firmwareVersion, firmwareOriVersion: firmwareOriVersion, upgradeMethod: upgradeMethod), region: region, logger: logger, on: eventLoop)
    }

    /// 更新设备固件
    ///
    /// 本接口（UpdateFirmware）用于对指定设备发起固件升级请求
    @inlinable @discardableResult
    public func updateFirmware(productID: String, deviceName: String, firmwareVersion: String, firmwareOriVersion: String, upgradeMethod: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateFirmwareResponse {
        try await self.updateFirmware(.init(productID: productID, deviceName: deviceName, firmwareVersion: firmwareVersion, firmwareOriVersion: firmwareOriVersion, upgradeMethod: upgradeMethod), region: region, logger: logger, on: eventLoop)
    }
}
