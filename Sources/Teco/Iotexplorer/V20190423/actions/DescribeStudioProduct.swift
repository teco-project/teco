//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// DescribeStudioProduct请求参数结构体
    public struct DescribeStudioProductRequest: TCRequestModel {
        /// 产品ID
        public let productId: String

        public init(productId: String) {
            self.productId = productId
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
        }
    }

    /// DescribeStudioProduct返回参数结构体
    public struct DescribeStudioProductResponse: TCResponseModel {
        /// 产品详情
        public let product: ProductEntry

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case product = "Product"
            case requestId = "RequestId"
        }
    }

    /// 获取产品详情
    ///
    /// 提供查看产品详细信息的能力，包括产品的ID、数据协议、认证类型等重要参数
    @inlinable
    public func describeStudioProduct(_ input: DescribeStudioProductRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStudioProductResponse> {
        self.client.execute(action: "DescribeStudioProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取产品详情
    ///
    /// 提供查看产品详细信息的能力，包括产品的ID、数据协议、认证类型等重要参数
    @inlinable
    public func describeStudioProduct(_ input: DescribeStudioProductRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStudioProductResponse {
        try await self.client.execute(action: "DescribeStudioProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取产品详情
    ///
    /// 提供查看产品详细信息的能力，包括产品的ID、数据协议、认证类型等重要参数
    @inlinable
    public func describeStudioProduct(productId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStudioProductResponse> {
        let input = DescribeStudioProductRequest(productId: productId)
        return self.client.execute(action: "DescribeStudioProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取产品详情
    ///
    /// 提供查看产品详细信息的能力，包括产品的ID、数据协议、认证类型等重要参数
    @inlinable
    public func describeStudioProduct(productId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStudioProductResponse {
        let input = DescribeStudioProductRequest(productId: productId)
        return try await self.client.execute(action: "DescribeStudioProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
