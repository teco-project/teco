//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotexplorer {
    /// DescribeInstance请求参数结构体
    public struct DescribeInstanceRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 附加查询返回包含字段值，不传返回0，有效值 ProductNum、ProjectNum、UsedDeviceNum、TotalDevice、ActivateDevice
        public let include: [String]?

        /// 项目ID
        public let projectId: String?

        /// 产品ID，-1 代表全部产品
        public let productId: String?

        public init(instanceId: String, include: [String]? = nil, projectId: String? = nil, productId: String? = nil) {
            self.instanceId = instanceId
            self.include = include
            self.projectId = projectId
            self.productId = productId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case include = "Include"
            case projectId = "ProjectId"
            case productId = "ProductId"
        }
    }

    /// DescribeInstance返回参数结构体
    public struct DescribeInstanceResponse: TCResponse {
        /// 实例信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: InstanceDetail?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取实例详情
    ///
    /// 公共实例过期时间 0001-01-01T00:00:00Z，公共实例是永久有效
    @inlinable
    public func describeInstance(_ input: DescribeInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceResponse> {
        self.client.execute(action: "DescribeInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取实例详情
    ///
    /// 公共实例过期时间 0001-01-01T00:00:00Z，公共实例是永久有效
    @inlinable
    public func describeInstance(_ input: DescribeInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceResponse {
        try await self.client.execute(action: "DescribeInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取实例详情
    ///
    /// 公共实例过期时间 0001-01-01T00:00:00Z，公共实例是永久有效
    @inlinable
    public func describeInstance(instanceId: String, include: [String]? = nil, projectId: String? = nil, productId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceResponse> {
        self.describeInstance(.init(instanceId: instanceId, include: include, projectId: projectId, productId: productId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取实例详情
    ///
    /// 公共实例过期时间 0001-01-01T00:00:00Z，公共实例是永久有效
    @inlinable
    public func describeInstance(instanceId: String, include: [String]? = nil, projectId: String? = nil, productId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceResponse {
        try await self.describeInstance(.init(instanceId: instanceId, include: include, projectId: projectId, productId: productId), region: region, logger: logger, on: eventLoop)
    }
}
