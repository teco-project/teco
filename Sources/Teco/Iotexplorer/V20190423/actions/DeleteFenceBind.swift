//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// DeleteFenceBind请求参数结构体
    public struct DeleteFenceBindRequest: TCRequestModel {
        /// 围栏Id
        public let fenceId: Int64

        /// 围栏绑定的产品信息
        public let items: [FenceBindProductItem]

        public init(fenceId: Int64, items: [FenceBindProductItem]) {
            self.fenceId = fenceId
            self.items = items
        }

        enum CodingKeys: String, CodingKey {
            case fenceId = "FenceId"
            case items = "Items"
        }
    }

    /// DeleteFenceBind返回参数结构体
    public struct DeleteFenceBindResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除围栏绑定信息
    @inlinable @discardableResult
    public func deleteFenceBind(_ input: DeleteFenceBindRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteFenceBindResponse> {
        self.client.execute(action: "DeleteFenceBind", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除围栏绑定信息
    @inlinable @discardableResult
    public func deleteFenceBind(_ input: DeleteFenceBindRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteFenceBindResponse {
        try await self.client.execute(action: "DeleteFenceBind", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除围栏绑定信息
    @inlinable @discardableResult
    public func deleteFenceBind(fenceId: Int64, items: [FenceBindProductItem], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteFenceBindResponse> {
        self.deleteFenceBind(DeleteFenceBindRequest(fenceId: fenceId, items: items), region: region, logger: logger, on: eventLoop)
    }

    /// 删除围栏绑定信息
    @inlinable @discardableResult
    public func deleteFenceBind(fenceId: Int64, items: [FenceBindProductItem], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteFenceBindResponse {
        try await self.deleteFenceBind(DeleteFenceBindRequest(fenceId: fenceId, items: items), region: region, logger: logger, on: eventLoop)
    }
}
