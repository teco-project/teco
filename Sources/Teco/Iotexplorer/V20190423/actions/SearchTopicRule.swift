//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// SearchTopicRule请求参数结构体
    public struct SearchTopicRuleRequest: TCRequestModel {
        /// 规则名
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        enum CodingKeys: String, CodingKey {
            case ruleName = "RuleName"
        }
    }

    /// SearchTopicRule返回参数结构体
    public struct SearchTopicRuleResponse: TCResponseModel {
        /// 搜索到的规则总数
        public let totalCnt: Int64

        /// 规则信息列表
        public let rules: [TopicRuleInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCnt = "TotalCnt"
            case rules = "Rules"
            case requestId = "RequestId"
        }
    }

    /// 搜索规则
    @inlinable
    public func searchTopicRule(_ input: SearchTopicRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchTopicRuleResponse> {
        self.client.execute(action: "SearchTopicRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 搜索规则
    @inlinable
    public func searchTopicRule(_ input: SearchTopicRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchTopicRuleResponse {
        try await self.client.execute(action: "SearchTopicRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 搜索规则
    @inlinable
    public func searchTopicRule(ruleName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchTopicRuleResponse> {
        self.searchTopicRule(.init(ruleName: ruleName), region: region, logger: logger, on: eventLoop)
    }

    /// 搜索规则
    @inlinable
    public func searchTopicRule(ruleName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchTopicRuleResponse {
        try await self.searchTopicRule(.init(ruleName: ruleName), region: region, logger: logger, on: eventLoop)
    }
}
