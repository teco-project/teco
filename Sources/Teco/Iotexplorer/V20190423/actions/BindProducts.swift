//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// 批量绑定子产品
    ///
    /// 批量绑定子产品
    @inlinable
    public func bindProducts(_ input: BindProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < BindProductsResponse > {
        self.client.execute(action: "BindProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 批量绑定子产品
    ///
    /// 批量绑定子产品
    @inlinable
    public func bindProducts(_ input: BindProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindProductsResponse {
        try await self.client.execute(action: "BindProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// BindProducts请求参数结构体
    public struct BindProductsRequest: TCRequestModel {
        /// 网关产品ID。
        public let gatewayProductId: String
        
        /// 待绑定的子产品ID数组。
        public let productIds: [String]
        
        public init (gatewayProductId: String, productIds: [String]) {
            self.gatewayProductId = gatewayProductId
            self.productIds = productIds
        }
        
        enum CodingKeys: String, CodingKey {
            case gatewayProductId = "GatewayProductId"
            case productIds = "ProductIds"
        }
    }
    
    /// BindProducts返回参数结构体
    public struct BindProductsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}