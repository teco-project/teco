//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// GetLoRaGatewayList请求参数结构体
    public struct GetLoRaGatewayListRequest: TCRequestModel {
        /// 是否是社区网关
        public let isCommunity: Bool

        /// 偏移量
        public let offset: UInt64?

        /// 限制个数
        public let limit: UInt64?

        public init(isCommunity: Bool, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.isCommunity = isCommunity
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case isCommunity = "IsCommunity"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// GetLoRaGatewayList返回参数结构体
    public struct GetLoRaGatewayListResponse: TCResponseModel {
        /// 返回总数
        public let total: UInt64

        /// 返回详情项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gateways: [LoRaGatewayItem]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case gateways = "Gateways"
            case requestId = "RequestId"
        }
    }

    /// 获取 LoRa 网关列表
    ///
    /// 获取 LoRa 网关列表接口
    @inlinable
    public func getLoRaGatewayList(_ input: GetLoRaGatewayListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetLoRaGatewayListResponse> {
        self.client.execute(action: "GetLoRaGatewayList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取 LoRa 网关列表
    ///
    /// 获取 LoRa 网关列表接口
    @inlinable
    public func getLoRaGatewayList(_ input: GetLoRaGatewayListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetLoRaGatewayListResponse {
        try await self.client.execute(action: "GetLoRaGatewayList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取 LoRa 网关列表
    ///
    /// 获取 LoRa 网关列表接口
    @inlinable
    public func getLoRaGatewayList(isCommunity: Bool, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetLoRaGatewayListResponse> {
        let input = GetLoRaGatewayListRequest(isCommunity: isCommunity, offset: offset, limit: limit)
        return self.client.execute(action: "GetLoRaGatewayList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取 LoRa 网关列表
    ///
    /// 获取 LoRa 网关列表接口
    @inlinable
    public func getLoRaGatewayList(isCommunity: Bool, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetLoRaGatewayListResponse {
        let input = GetLoRaGatewayListRequest(isCommunity: isCommunity, offset: offset, limit: limit)
        return try await self.client.execute(action: "GetLoRaGatewayList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
