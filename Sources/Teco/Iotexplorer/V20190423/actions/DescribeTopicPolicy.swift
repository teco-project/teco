//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotexplorer {
    /// DescribeTopicPolicy请求参数结构体
    public struct DescribeTopicPolicyRequest: TCRequest {
        /// 产品ID
        public let productId: String

        /// Topic名字
        public let topicName: String

        public init(productId: String, topicName: String) {
            self.productId = productId
            self.topicName = topicName
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case topicName = "TopicName"
        }
    }

    /// DescribeTopicPolicy返回参数结构体
    public struct DescribeTopicPolicyResponse: TCResponse {
        /// 产品ID
        public let productId: String

        /// Topic名称
        public let topicName: String

        /// Topic权限
        public let privilege: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case topicName = "TopicName"
            case privilege = "Privilege"
            case requestId = "RequestId"
        }
    }

    /// 查看Topic详情
    ///
    /// 本接口（DescribeTopicPolicy）用于查看Topic详细信息
    @inlinable
    public func describeTopicPolicy(_ input: DescribeTopicPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTopicPolicyResponse> {
        self.client.execute(action: "DescribeTopicPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看Topic详情
    ///
    /// 本接口（DescribeTopicPolicy）用于查看Topic详细信息
    @inlinable
    public func describeTopicPolicy(_ input: DescribeTopicPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTopicPolicyResponse {
        try await self.client.execute(action: "DescribeTopicPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看Topic详情
    ///
    /// 本接口（DescribeTopicPolicy）用于查看Topic详细信息
    @inlinable
    public func describeTopicPolicy(productId: String, topicName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTopicPolicyResponse> {
        self.describeTopicPolicy(.init(productId: productId, topicName: topicName), region: region, logger: logger, on: eventLoop)
    }

    /// 查看Topic详情
    ///
    /// 本接口（DescribeTopicPolicy）用于查看Topic详细信息
    @inlinable
    public func describeTopicPolicy(productId: String, topicName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTopicPolicyResponse {
        try await self.describeTopicPolicy(.init(productId: productId, topicName: topicName), region: region, logger: logger, on: eventLoop)
    }
}
