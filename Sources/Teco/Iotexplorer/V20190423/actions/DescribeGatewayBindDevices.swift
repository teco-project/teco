//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotexplorer {
    /// DescribeGatewayBindDevices请求参数结构体
    public struct DescribeGatewayBindDevicesRequest: TCPaginatedRequest {
        /// 网关设备的产品ID
        public let gatewayProductId: String

        /// 网关设备的设备名
        public let gatewayDeviceName: String

        /// 子产品的ID
        public let productId: String

        /// 分页的偏移
        public let offset: Int64

        /// 分页的页大小
        public let limit: Int64

        public init(gatewayProductId: String, gatewayDeviceName: String, productId: String, offset: Int64, limit: Int64) {
            self.gatewayProductId = gatewayProductId
            self.gatewayDeviceName = gatewayDeviceName
            self.productId = productId
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case gatewayProductId = "GatewayProductId"
            case gatewayDeviceName = "GatewayDeviceName"
            case productId = "ProductId"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeGatewayBindDevicesResponse) -> DescribeGatewayBindDevicesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(gatewayProductId: self.gatewayProductId, gatewayDeviceName: self.gatewayDeviceName, productId: self.productId, offset: self.offset + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeGatewayBindDevices返回参数结构体
    public struct DescribeGatewayBindDevicesResponse: TCPaginatedResponse {
        /// 子设备信息。
        public let devices: [BindDeviceInfo]

        /// 子设备总数。
        public let total: Int64

        /// 子设备所属的产品名。
        public let productName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case devices = "Devices"
            case total = "Total"
            case productName = "ProductName"
            case requestId = "RequestId"
        }

        /// Extract the returned ``BindDeviceInfo`` list from the paginated response.
        public func getItems() -> [BindDeviceInfo] {
            self.devices
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 获取网关绑定的子设备列表
    @inlinable
    public func describeGatewayBindDevices(_ input: DescribeGatewayBindDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayBindDevicesResponse> {
        self.client.execute(action: "DescribeGatewayBindDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取网关绑定的子设备列表
    @inlinable
    public func describeGatewayBindDevices(_ input: DescribeGatewayBindDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayBindDevicesResponse {
        try await self.client.execute(action: "DescribeGatewayBindDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取网关绑定的子设备列表
    @inlinable
    public func describeGatewayBindDevices(gatewayProductId: String, gatewayDeviceName: String, productId: String, offset: Int64, limit: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayBindDevicesResponse> {
        self.describeGatewayBindDevices(.init(gatewayProductId: gatewayProductId, gatewayDeviceName: gatewayDeviceName, productId: productId, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取网关绑定的子设备列表
    @inlinable
    public func describeGatewayBindDevices(gatewayProductId: String, gatewayDeviceName: String, productId: String, offset: Int64, limit: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayBindDevicesResponse {
        try await self.describeGatewayBindDevices(.init(gatewayProductId: gatewayProductId, gatewayDeviceName: gatewayDeviceName, productId: productId, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取网关绑定的子设备列表
    @inlinable
    public func describeGatewayBindDevicesPaginated(_ input: DescribeGatewayBindDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [BindDeviceInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeGatewayBindDevices, logger: logger, on: eventLoop)
    }

    /// 获取网关绑定的子设备列表
    @inlinable @discardableResult
    public func describeGatewayBindDevicesPaginated(_ input: DescribeGatewayBindDevicesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeGatewayBindDevicesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeGatewayBindDevices, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取网关绑定的子设备列表
    ///
    /// - Returns: `AsyncSequence`s of ``BindDeviceInfo`` and ``DescribeGatewayBindDevicesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeGatewayBindDevicesPaginator(_ input: DescribeGatewayBindDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeGatewayBindDevicesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeGatewayBindDevices, logger: logger, on: eventLoop)
    }
}
