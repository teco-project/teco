//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// DeleteLoRaFrequency请求参数结构体
    public struct DeleteLoRaFrequencyRequest: TCRequestModel {
        /// 频点唯一ID
        public let freqId: String?

        public init(freqId: String? = nil) {
            self.freqId = freqId
        }

        enum CodingKeys: String, CodingKey {
            case freqId = "FreqId"
        }
    }

    /// DeleteLoRaFrequency返回参数结构体
    public struct DeleteLoRaFrequencyResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除LoRa自定义频点
    ///
    /// 提供删除LoRa自定义频点的能力
    @inlinable @discardableResult
    public func deleteLoRaFrequency(_ input: DeleteLoRaFrequencyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLoRaFrequencyResponse> {
        self.client.execute(action: "DeleteLoRaFrequency", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除LoRa自定义频点
    ///
    /// 提供删除LoRa自定义频点的能力
    @inlinable @discardableResult
    public func deleteLoRaFrequency(_ input: DeleteLoRaFrequencyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLoRaFrequencyResponse {
        try await self.client.execute(action: "DeleteLoRaFrequency", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除LoRa自定义频点
    ///
    /// 提供删除LoRa自定义频点的能力
    @inlinable @discardableResult
    public func deleteLoRaFrequency(freqId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLoRaFrequencyResponse> {
        self.deleteLoRaFrequency(.init(freqId: freqId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除LoRa自定义频点
    ///
    /// 提供删除LoRa自定义频点的能力
    @inlinable @discardableResult
    public func deleteLoRaFrequency(freqId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLoRaFrequencyResponse {
        try await self.deleteLoRaFrequency(.init(freqId: freqId), region: region, logger: logger, on: eventLoop)
    }
}
