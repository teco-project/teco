//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotexplorer {
    /// DeleteDevice请求参数结构体
    public struct DeleteDeviceRequest: TCRequest {
        /// 产品ID。
        public let productId: String

        /// 设备名称。
        public let deviceName: String

        /// 是否删除绑定设备
        public let forceDelete: Bool?

        public init(productId: String, deviceName: String, forceDelete: Bool? = nil) {
            self.productId = productId
            self.deviceName = deviceName
            self.forceDelete = forceDelete
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case deviceName = "DeviceName"
            case forceDelete = "ForceDelete"
        }
    }

    /// DeleteDevice返回参数结构体
    public struct DeleteDeviceResponse: TCResponse {
        /// 删除的结果代码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultCode: String?

        /// 删除的结果信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultMessage: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case resultCode = "ResultCode"
            case resultMessage = "ResultMessage"
            case requestId = "RequestId"
        }
    }

    /// 删除设备
    @inlinable
    public func deleteDevice(_ input: DeleteDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDeviceResponse> {
        self.client.execute(action: "DeleteDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除设备
    @inlinable
    public func deleteDevice(_ input: DeleteDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDeviceResponse {
        try await self.client.execute(action: "DeleteDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除设备
    @inlinable
    public func deleteDevice(productId: String, deviceName: String, forceDelete: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDeviceResponse> {
        self.deleteDevice(.init(productId: productId, deviceName: deviceName, forceDelete: forceDelete), region: region, logger: logger, on: eventLoop)
    }

    /// 删除设备
    @inlinable
    public func deleteDevice(productId: String, deviceName: String, forceDelete: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDeviceResponse {
        try await self.deleteDevice(.init(productId: productId, deviceName: deviceName, forceDelete: forceDelete), region: region, logger: logger, on: eventLoop)
    }
}
