//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotexplorer {
    /// SearchPositionSpace请求参数结构体
    public struct SearchPositionSpaceRequest: TCPaginatedRequest {
        /// 项目Id
        public let projectId: String

        /// 位置空间名字
        public let spaceName: String

        /// 偏移量，从0开始
        public let offset: Int64

        /// 最大获取数量
        public let limit: Int64

        public init(projectId: String, spaceName: String, offset: Int64, limit: Int64) {
            self.projectId = projectId
            self.spaceName = spaceName
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case spaceName = "SpaceName"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: SearchPositionSpaceResponse) -> SearchPositionSpaceRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(projectId: self.projectId, spaceName: self.spaceName, offset: self.offset + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// SearchPositionSpace返回参数结构体
    public struct SearchPositionSpaceResponse: TCPaginatedResponse {
        /// 位置空间列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [PositionSpaceInfo]?

        /// 符合条件的位置空间个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case total = "Total"
            case requestId = "RequestId"
        }

        /// Extract the returned ``PositionSpaceInfo`` list from the paginated response.
        public func getItems() -> [PositionSpaceInfo] {
            self.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 搜索位置空间
    @inlinable
    public func searchPositionSpace(_ input: SearchPositionSpaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchPositionSpaceResponse> {
        self.client.execute(action: "SearchPositionSpace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 搜索位置空间
    @inlinable
    public func searchPositionSpace(_ input: SearchPositionSpaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchPositionSpaceResponse {
        try await self.client.execute(action: "SearchPositionSpace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 搜索位置空间
    @inlinable
    public func searchPositionSpace(projectId: String, spaceName: String, offset: Int64, limit: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchPositionSpaceResponse> {
        self.searchPositionSpace(.init(projectId: projectId, spaceName: spaceName, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 搜索位置空间
    @inlinable
    public func searchPositionSpace(projectId: String, spaceName: String, offset: Int64, limit: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchPositionSpaceResponse {
        try await self.searchPositionSpace(.init(projectId: projectId, spaceName: spaceName, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 搜索位置空间
    @inlinable
    public func searchPositionSpacePaginated(_ input: SearchPositionSpaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [PositionSpaceInfo])> {
        self.client.paginate(input: input, region: region, command: self.searchPositionSpace, logger: logger, on: eventLoop)
    }

    /// 搜索位置空间
    @inlinable @discardableResult
    public func searchPositionSpacePaginated(_ input: SearchPositionSpaceRequest, region: TCRegion? = nil, onResponse: @escaping (SearchPositionSpaceResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.searchPositionSpace, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 搜索位置空间
    ///
    /// - Returns: `AsyncSequence`s of ``PositionSpaceInfo`` and ``SearchPositionSpaceResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func searchPositionSpacePaginator(_ input: SearchPositionSpaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<SearchPositionSpaceRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.searchPositionSpace, logger: logger, on: eventLoop)
    }
}
