//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// ReleaseStudioProduct请求参数结构体
    public struct ReleaseStudioProductRequest: TCRequestModel {
        /// 产品ID
        public let productId: String

        /// 产品DevStatus
        public let devStatus: String

        public init(productId: String, devStatus: String) {
            self.productId = productId
            self.devStatus = devStatus
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case devStatus = "DevStatus"
        }
    }

    /// ReleaseStudioProduct返回参数结构体
    public struct ReleaseStudioProductResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 发布产品
    ///
    /// 产品开发完成并测试通过后，通过发布产品将产品设置为发布状态
    @inlinable @discardableResult
    public func releaseStudioProduct(_ input: ReleaseStudioProductRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReleaseStudioProductResponse> {
        self.client.execute(action: "ReleaseStudioProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 发布产品
    ///
    /// 产品开发完成并测试通过后，通过发布产品将产品设置为发布状态
    @inlinable @discardableResult
    public func releaseStudioProduct(_ input: ReleaseStudioProductRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReleaseStudioProductResponse {
        try await self.client.execute(action: "ReleaseStudioProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 发布产品
    ///
    /// 产品开发完成并测试通过后，通过发布产品将产品设置为发布状态
    @inlinable @discardableResult
    public func releaseStudioProduct(productId: String, devStatus: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReleaseStudioProductResponse> {
        self.releaseStudioProduct(.init(productId: productId, devStatus: devStatus), region: region, logger: logger, on: eventLoop)
    }

    /// 发布产品
    ///
    /// 产品开发完成并测试通过后，通过发布产品将产品设置为发布状态
    @inlinable @discardableResult
    public func releaseStudioProduct(productId: String, devStatus: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReleaseStudioProductResponse {
        try await self.releaseStudioProduct(.init(productId: productId, devStatus: devStatus), region: region, logger: logger, on: eventLoop)
    }
}
