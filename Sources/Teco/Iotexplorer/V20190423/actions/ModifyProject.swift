//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// ModifyProject请求参数结构体
    public struct ModifyProjectRequest: TCRequestModel {
        /// 项目ID
        public let projectId: String

        /// 项目名称
        public let projectName: String

        /// 项目描述
        public let projectDesc: String

        public init(projectId: String, projectName: String, projectDesc: String) {
            self.projectId = projectId
            self.projectName = projectName
            self.projectDesc = projectDesc
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case projectDesc = "ProjectDesc"
        }
    }

    /// ModifyProject返回参数结构体
    public struct ModifyProjectResponse: TCResponseModel {
        /// 项目详情
        public let project: ProjectEntry

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case project = "Project"
            case requestId = "RequestId"
        }
    }

    /// 修改项目
    @inlinable
    public func modifyProject(_ input: ModifyProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProjectResponse> {
        self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改项目
    @inlinable
    public func modifyProject(_ input: ModifyProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProjectResponse {
        try await self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改项目
    @inlinable
    public func modifyProject(projectId: String, projectName: String, projectDesc: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProjectResponse> {
        let input = ModifyProjectRequest(projectId: projectId, projectName: projectName, projectDesc: projectDesc)
        return self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改项目
    @inlinable
    public func modifyProject(projectId: String, projectName: String, projectDesc: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProjectResponse {
        let input = ModifyProjectRequest(projectId: projectId, projectName: projectName, projectDesc: projectDesc)
        return try await self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
