//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotexplorer {
    /// GetPositionSpaceList请求参数结构体
    public struct GetPositionSpaceListRequest: TCRequestModel {
        /// 项目Id
        public let projectId: String
        
        /// 翻页偏移量，0起始
        public let offset: Int64
        
        /// 最大返回结果数
        public let limit: Int64
        
        public init (projectId: String, offset: Int64, limit: Int64) {
            self.projectId = projectId
            self.offset = offset
            self.limit = limit
        }
        
        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case offset = "Offset"
            case limit = "Limit"
        }
    }
    
    /// GetPositionSpaceList返回参数结构体
    public struct GetPositionSpaceListResponse: TCResponseModel {
        /// 位置空间列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [PositionSpaceInfo]?
        
        /// 位置空间数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case list = "List"
            case total = "Total"
            case requestId = "RequestId"
        }
    }
    
    /// 获取位置空间列表
    @inlinable
    public func getPositionSpaceList(_ input: GetPositionSpaceListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetPositionSpaceListResponse > {
        self.client.execute(action: "GetPositionSpaceList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取位置空间列表
    @inlinable
    public func getPositionSpaceList(_ input: GetPositionSpaceListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetPositionSpaceListResponse {
        try await self.client.execute(action: "GetPositionSpaceList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取位置空间列表
    @inlinable
    public func getPositionSpaceList(projectId: String, offset: Int64, limit: Int64, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetPositionSpaceListResponse > {
        self.getPositionSpaceList(GetPositionSpaceListRequest(projectId: projectId, offset: offset, limit: limit), logger: logger, on: eventLoop)
    }
    
    /// 获取位置空间列表
    @inlinable
    public func getPositionSpaceList(projectId: String, offset: Int64, limit: Int64, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetPositionSpaceListResponse {
        try await self.getPositionSpaceList(GetPositionSpaceListRequest(projectId: projectId, offset: offset, limit: limit), logger: logger, on: eventLoop)
    }
}
