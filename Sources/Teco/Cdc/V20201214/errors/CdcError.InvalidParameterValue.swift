//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCdcError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case invalidAppIdFormat = "InvalidParameterValue.InvalidAppIdFormat"
            case invalidValueDedicatedClusterCosSize = "InvalidParameterValue.InvalidValueDedicatedClusterCosSize"
            case invalidValueDedicatedClusterDataStepSize = "InvalidParameterValue.InvalidValueDedicatedClusterDataStepSize"
            case invalidValueRegion = "InvalidParameterValue.InvalidValueRegion"
            case limitExceeded = "InvalidParameterValue.LimitExceeded"
            case region = "InvalidParameterValue.Region"
            case tooLong = "InvalidParameterValue.TooLong"
            case zoneMismatchRegion = "InvalidParameterValue.ZoneMismatchRegion"
            case zoneNotSupported = "InvalidParameterValue.ZoneNotSupported"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// ccdb返回结果不为0。
        public static var invalidAppIdFormat: InvalidParameterValue {
            InvalidParameterValue(.invalidAppIdFormat)
        }
        
        /// 本地专用集群COS大小不正确。
        public static var invalidValueDedicatedClusterCosSize: InvalidParameterValue {
            InvalidParameterValue(.invalidValueDedicatedClusterCosSize)
        }
        
        /// CBS大小不正确，它必须是40的整数倍。
        public static var invalidValueDedicatedClusterDataStepSize: InvalidParameterValue {
            InvalidParameterValue(.invalidValueDedicatedClusterDataStepSize)
        }
        
        /// region无效。
        public static var invalidValueRegion: InvalidParameterValue {
            InvalidParameterValue(.invalidValueRegion)
        }
        
        /// 超出大小限制。
        public static var limitExceeded: InvalidParameterValue {
            InvalidParameterValue(.limitExceeded)
        }
        
        public static var region: InvalidParameterValue {
            InvalidParameterValue(.region)
        }
        
        /// 参数名过长。
        public static var tooLong: InvalidParameterValue {
            InvalidParameterValue(.tooLong)
        }
        
        /// zone和region不匹配。
        public static var zoneMismatchRegion: InvalidParameterValue {
            InvalidParameterValue(.zoneMismatchRegion)
        }
        
        /// 当前可用区暂未支持。
        public static var zoneNotSupported: InvalidParameterValue {
            InvalidParameterValue(.zoneNotSupported)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCCdcError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCCdcError.InvalidParameterValue, rhs: TCCdcError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCdcError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCdcError.InvalidParameterValue {
    public func toCdcError() -> TCCdcError {
        guard let code = TCCdcError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCdcError(code, context: self.context)
    }
}