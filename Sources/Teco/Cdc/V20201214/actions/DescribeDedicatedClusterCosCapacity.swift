//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdc {
    /// DescribeDedicatedClusterCosCapacity请求参数结构体
    public struct DescribeDedicatedClusterCosCapacityRequest: TCRequestModel {
        /// 查询的专用集群id
        public let dedicatedClusterId: String
        
        public init (dedicatedClusterId: String) {
            self.dedicatedClusterId = dedicatedClusterId
        }
        
        enum CodingKeys: String, CodingKey {
            case dedicatedClusterId = "DedicatedClusterId"
        }
    }
    
    /// DescribeDedicatedClusterCosCapacity返回参数结构体
    public struct DescribeDedicatedClusterCosCapacityResponse: TCResponseModel {
        /// 本集群内cos容量信息，单位：‘GB’
        public let cosCapacity: CosCapacity
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case cosCapacity = "CosCapacity"
            case requestId = "RequestId"
        }
    }
    
    /// 查询专用集群内cos的容量信息
    @inlinable
    public func describeDedicatedClusterCosCapacity(_ input: DescribeDedicatedClusterCosCapacityRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDedicatedClusterCosCapacityResponse > {
        self.client.execute(action: "DescribeDedicatedClusterCosCapacity", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询专用集群内cos的容量信息
    @inlinable
    public func describeDedicatedClusterCosCapacity(_ input: DescribeDedicatedClusterCosCapacityRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDedicatedClusterCosCapacityResponse {
        try await self.client.execute(action: "DescribeDedicatedClusterCosCapacity", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
