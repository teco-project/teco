//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdc {
    /// DescribeDedicatedClusterInstanceTypes请求参数结构体
    public struct DescribeDedicatedClusterInstanceTypesRequest: TCRequestModel {
        /// 查询的专用集群id
        public let dedicatedClusterId: String

        public init(dedicatedClusterId: String) {
            self.dedicatedClusterId = dedicatedClusterId
        }

        enum CodingKeys: String, CodingKey {
            case dedicatedClusterId = "DedicatedClusterId"
        }
    }

    /// DescribeDedicatedClusterInstanceTypes返回参数结构体
    public struct DescribeDedicatedClusterInstanceTypesResponse: TCResponseModel {
        /// 支持的实例规格列表
        public let dedicatedClusterInstanceTypeSet: [DedicatedClusterInstanceType]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dedicatedClusterInstanceTypeSet = "DedicatedClusterInstanceTypeSet"
            case requestId = "RequestId"
        }
    }

    /// 查询专用集群支持的实例规格列表
    @inlinable
    public func describeDedicatedClusterInstanceTypes(_ input: DescribeDedicatedClusterInstanceTypesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDedicatedClusterInstanceTypesResponse> {
        self.client.execute(action: "DescribeDedicatedClusterInstanceTypes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询专用集群支持的实例规格列表
    @inlinable
    public func describeDedicatedClusterInstanceTypes(_ input: DescribeDedicatedClusterInstanceTypesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDedicatedClusterInstanceTypesResponse {
        try await self.client.execute(action: "DescribeDedicatedClusterInstanceTypes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询专用集群支持的实例规格列表
    @inlinable
    public func describeDedicatedClusterInstanceTypes(dedicatedClusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDedicatedClusterInstanceTypesResponse> {
        self.describeDedicatedClusterInstanceTypes(DescribeDedicatedClusterInstanceTypesRequest(dedicatedClusterId: dedicatedClusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询专用集群支持的实例规格列表
    @inlinable
    public func describeDedicatedClusterInstanceTypes(dedicatedClusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDedicatedClusterInstanceTypesResponse {
        try await self.describeDedicatedClusterInstanceTypes(DescribeDedicatedClusterInstanceTypesRequest(dedicatedClusterId: dedicatedClusterId), region: region, logger: logger, on: eventLoop)
    }
}
