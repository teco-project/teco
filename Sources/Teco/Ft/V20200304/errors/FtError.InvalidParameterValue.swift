//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCFtError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case faceRectInvalid = "InvalidParameterValue.FaceRectInvalid"
            case faceRectInvalidFirst = "InvalidParameterValue.FaceRectInvalidFirst"
            case faceRectInvalidSecond = "InvalidParameterValue.FaceRectInvalidSecond"
            case faceRectInvalidThrid = "InvalidParameterValue.FaceRectInvalidThrid"
            case imageEmpty = "InvalidParameterValue.ImageEmpty"
            case imageSizeExceed = "InvalidParameterValue.ImageSizeExceed"
            case noFaceInPhoto = "InvalidParameterValue.NoFaceInPhoto"
            case parameterValueError = "InvalidParameterValue.ParameterValueError"
            case urlIllegal = "InvalidParameterValue.UrlIllegal"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 人脸框不合法。
        public static var faceRectInvalid: InvalidParameterValue {
            InvalidParameterValue(.faceRectInvalid)
        }
        
        /// 第1个人脸框参数不合法。
        public static var faceRectInvalidFirst: InvalidParameterValue {
            InvalidParameterValue(.faceRectInvalidFirst)
        }
        
        /// 第2个人脸框参数不合法。
        public static var faceRectInvalidSecond: InvalidParameterValue {
            InvalidParameterValue(.faceRectInvalidSecond)
        }
        
        /// 第3个人脸框参数不合法。
        public static var faceRectInvalidThrid: InvalidParameterValue {
            InvalidParameterValue(.faceRectInvalidThrid)
        }
        
        /// 图片为空。
        public static var imageEmpty: InvalidParameterValue {
            InvalidParameterValue(.imageEmpty)
        }
        
        /// 图片数据太大。
        public static var imageSizeExceed: InvalidParameterValue {
            InvalidParameterValue(.imageSizeExceed)
        }
        
        /// 图片中没有人脸。
        public static var noFaceInPhoto: InvalidParameterValue {
            InvalidParameterValue(.noFaceInPhoto)
        }
        
        /// 参数不合法。
        public static var parameterValueError: InvalidParameterValue {
            InvalidParameterValue(.parameterValueError)
        }
        
        /// URL格式不合法。
        public static var urlIllegal: InvalidParameterValue {
            InvalidParameterValue(.urlIllegal)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCFtError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCFtError.InvalidParameterValue, rhs: TCFtError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCFtError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCFtError.InvalidParameterValue {
    /// - Returns: ``TCFtError`` that holds the same error and context.
    public func toFtError() -> TCFtError {
        guard let code = TCFtError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCFtError(code, context: self.context)
    }
}

extension TCFtError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
