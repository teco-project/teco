//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// DescribeUndoVulCounts请求参数结构体
    public struct DescribeUndoVulCountsRequest: TCRequestModel {
        /// 漏洞分类，1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
        public let vulCategory: UInt64?

        /// 是否应急漏洞筛选, 是 : yes
        public let ifEmergency: String?

        public init(vulCategory: UInt64? = nil, ifEmergency: String? = nil) {
            self.vulCategory = vulCategory
            self.ifEmergency = ifEmergency
        }

        enum CodingKeys: String, CodingKey {
            case vulCategory = "VulCategory"
            case ifEmergency = "IfEmergency"
        }
    }

    /// DescribeUndoVulCounts返回参数结构体
    public struct DescribeUndoVulCountsResponse: TCResponseModel {
        /// 未处理的漏洞数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let undoVulCount: UInt64?

        /// 未处理的主机数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let undoHostCount: Int64?

        /// 普通版主机数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notProfessionCount: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case undoVulCount = "UndoVulCount"
            case undoHostCount = "UndoHostCount"
            case notProfessionCount = "NotProfessionCount"
            case requestId = "RequestId"
        }
    }

    /// 获取指定漏洞分类统计数
    ///
    /// 获取漏洞管理模块指定类型的待处理漏洞数、主机数和非专业版主机数量
    @inlinable
    public func describeUndoVulCounts(_ input: DescribeUndoVulCountsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUndoVulCountsResponse> {
        self.client.execute(action: "DescribeUndoVulCounts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取指定漏洞分类统计数
    ///
    /// 获取漏洞管理模块指定类型的待处理漏洞数、主机数和非专业版主机数量
    @inlinable
    public func describeUndoVulCounts(_ input: DescribeUndoVulCountsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUndoVulCountsResponse {
        try await self.client.execute(action: "DescribeUndoVulCounts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取指定漏洞分类统计数
    ///
    /// 获取漏洞管理模块指定类型的待处理漏洞数、主机数和非专业版主机数量
    @inlinable
    public func describeUndoVulCounts(vulCategory: UInt64? = nil, ifEmergency: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUndoVulCountsResponse> {
        self.describeUndoVulCounts(DescribeUndoVulCountsRequest(vulCategory: vulCategory, ifEmergency: ifEmergency), logger: logger, on: eventLoop)
    }

    /// 获取指定漏洞分类统计数
    ///
    /// 获取漏洞管理模块指定类型的待处理漏洞数、主机数和非专业版主机数量
    @inlinable
    public func describeUndoVulCounts(vulCategory: UInt64? = nil, ifEmergency: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUndoVulCountsResponse {
        try await self.describeUndoVulCounts(DescribeUndoVulCountsRequest(vulCategory: vulCategory, ifEmergency: ifEmergency), logger: logger, on: eventLoop)
    }
}
