//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeMonthInspectionReport请求参数结构体
    public struct DescribeMonthInspectionReportRequest: TCPaginatedRequest {
        /// 分页大小
        public let limit: UInt64

        /// 分页步长
        public let offset: UInt64

        public init(limit: UInt64, offset: UInt64) {
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeMonthInspectionReportResponse) -> DescribeMonthInspectionReportRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(limit: self.limit, offset: self.offset + .init(response.getItems().count))
        }
    }

    /// DescribeMonthInspectionReport返回参数结构体
    public struct DescribeMonthInspectionReportResponse: TCPaginatedResponse {
        /// 总条数
        public let totalCount: UInt64

        /// 巡检报告列表
        public let list: [MonthInspectionReport]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case list = "List"
            case requestId = "RequestId"
        }

        /// Extract the returned ``MonthInspectionReport`` list from the paginated response.
        public func getItems() -> [MonthInspectionReport] {
            self.list
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 安全管家月巡检报告下载
    ///
    /// 专家服务-安全管家月巡检报告下载
    @inlinable
    public func describeMonthInspectionReport(_ input: DescribeMonthInspectionReportRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMonthInspectionReportResponse> {
        self.client.execute(action: "DescribeMonthInspectionReport", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 安全管家月巡检报告下载
    ///
    /// 专家服务-安全管家月巡检报告下载
    @inlinable
    public func describeMonthInspectionReport(_ input: DescribeMonthInspectionReportRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMonthInspectionReportResponse {
        try await self.client.execute(action: "DescribeMonthInspectionReport", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 安全管家月巡检报告下载
    ///
    /// 专家服务-安全管家月巡检报告下载
    @inlinable
    public func describeMonthInspectionReport(limit: UInt64, offset: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMonthInspectionReportResponse> {
        self.describeMonthInspectionReport(.init(limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 安全管家月巡检报告下载
    ///
    /// 专家服务-安全管家月巡检报告下载
    @inlinable
    public func describeMonthInspectionReport(limit: UInt64, offset: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMonthInspectionReportResponse {
        try await self.describeMonthInspectionReport(.init(limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 安全管家月巡检报告下载
    ///
    /// 专家服务-安全管家月巡检报告下载
    @inlinable
    public func describeMonthInspectionReportPaginated(_ input: DescribeMonthInspectionReportRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [MonthInspectionReport])> {
        self.client.paginate(input: input, region: region, command: self.describeMonthInspectionReport, logger: logger, on: eventLoop)
    }

    /// 安全管家月巡检报告下载
    ///
    /// 专家服务-安全管家月巡检报告下载
    @inlinable @discardableResult
    public func describeMonthInspectionReportPaginated(_ input: DescribeMonthInspectionReportRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeMonthInspectionReportResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeMonthInspectionReport, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 安全管家月巡检报告下载
    ///
    /// 专家服务-安全管家月巡检报告下载
    ///
    /// - Returns: `AsyncSequence`s of ``MonthInspectionReport`` and ``DescribeMonthInspectionReportResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeMonthInspectionReportPaginator(_ input: DescribeMonthInspectionReportRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeMonthInspectionReportRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeMonthInspectionReport, logger: logger, on: eventLoop)
    }
}
