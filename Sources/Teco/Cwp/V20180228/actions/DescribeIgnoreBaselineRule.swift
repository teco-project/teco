//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeIgnoreBaselineRule请求参数结构体
    public struct DescribeIgnoreBaselineRuleRequest: TCPaginatedRequest {
        /// 分页参数 最大100条
        public let limit: UInt64

        /// 分页参数
        public let offset: UInt64

        /// 检测项名称
        public let ruleName: String?

        public init(limit: UInt64, offset: UInt64, ruleName: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.ruleName = ruleName
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case ruleName = "RuleName"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeIgnoreBaselineRuleResponse) -> DescribeIgnoreBaselineRuleRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(limit: self.limit, offset: self.offset + .init(response.getItems().count), ruleName: self.ruleName)
        }
    }

    /// DescribeIgnoreBaselineRule返回参数结构体
    public struct DescribeIgnoreBaselineRuleResponse: TCPaginatedResponse {
        /// 忽略基线检测项列表信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoreBaselineRuleList: [IgnoreBaselineRule]?

        /// 分页查询记录总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ignoreBaselineRuleList = "IgnoreBaselineRuleList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``IgnoreBaselineRule`` list from the paginated response.
        public func getItems() -> [IgnoreBaselineRule] {
            self.ignoreBaselineRuleList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询忽略检测项信息
    ///
    /// 查询已经忽略的检测项信息
    @inlinable
    public func describeIgnoreBaselineRule(_ input: DescribeIgnoreBaselineRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIgnoreBaselineRuleResponse> {
        self.client.execute(action: "DescribeIgnoreBaselineRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询忽略检测项信息
    ///
    /// 查询已经忽略的检测项信息
    @inlinable
    public func describeIgnoreBaselineRule(_ input: DescribeIgnoreBaselineRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIgnoreBaselineRuleResponse {
        try await self.client.execute(action: "DescribeIgnoreBaselineRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询忽略检测项信息
    ///
    /// 查询已经忽略的检测项信息
    @inlinable
    public func describeIgnoreBaselineRule(limit: UInt64, offset: UInt64, ruleName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIgnoreBaselineRuleResponse> {
        self.describeIgnoreBaselineRule(.init(limit: limit, offset: offset, ruleName: ruleName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询忽略检测项信息
    ///
    /// 查询已经忽略的检测项信息
    @inlinable
    public func describeIgnoreBaselineRule(limit: UInt64, offset: UInt64, ruleName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIgnoreBaselineRuleResponse {
        try await self.describeIgnoreBaselineRule(.init(limit: limit, offset: offset, ruleName: ruleName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询忽略检测项信息
    ///
    /// 查询已经忽略的检测项信息
    @inlinable
    public func describeIgnoreBaselineRulePaginated(_ input: DescribeIgnoreBaselineRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [IgnoreBaselineRule])> {
        self.client.paginate(input: input, region: region, command: self.describeIgnoreBaselineRule, logger: logger, on: eventLoop)
    }

    /// 查询忽略检测项信息
    ///
    /// 查询已经忽略的检测项信息
    @inlinable @discardableResult
    public func describeIgnoreBaselineRulePaginated(_ input: DescribeIgnoreBaselineRuleRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeIgnoreBaselineRuleResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeIgnoreBaselineRule, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询忽略检测项信息
    ///
    /// 查询已经忽略的检测项信息
    ///
    /// - Returns: `AsyncSequence`s of ``IgnoreBaselineRule`` and ``DescribeIgnoreBaselineRuleResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeIgnoreBaselineRulePaginator(_ input: DescribeIgnoreBaselineRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeIgnoreBaselineRuleRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeIgnoreBaselineRule, logger: logger, on: eventLoop)
    }
}
