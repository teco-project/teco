//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// DescribeProtectNetList请求参数结构体
    public struct DescribeProtectNetListRequest: TCRequestModel {
        /// 过滤条件。
        /// <li>Keyword- String - 是否必填：否 - 关键词过滤，</li>
        /// <li>Uuids - String - 是否必填：否 - 主机id过滤</li>
        public let filters: [Filters]?
        
        /// 需要返回的数量，最大值为100
        public let limit: UInt64?
        
        /// 排序步长
        public let offset: UInt64?
        
        /// 排序方法
        public let order: String?
        
        /// 排序字段 StartTime，EndTime
        public let by: String?
        
        public init (filters: [Filters]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, order: String? = nil, by: String? = nil) {
            self.filters = filters
            self.limit = limit
            self.offset = offset
            self.order = order
            self.by = by
        }
        
        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
            case order = "Order"
            case by = "By"
        }
    }
    
    /// DescribeProtectNetList返回参数结构体
    public struct DescribeProtectNetListResponse: TCResponseModel {
        /// 总条数
        public let totalCount: UInt64
        
        /// 安全管家数据
        public let list: [ProtectNetInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case list = "List"
            case requestId = "RequestId"
        }
    }
    
    /// 旗舰重保列表
    ///
    /// 专家服务-旗舰重保列表
    @inlinable
    public func describeProtectNetList(_ input: DescribeProtectNetListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeProtectNetListResponse > {
        self.client.execute(action: "DescribeProtectNetList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 旗舰重保列表
    ///
    /// 专家服务-旗舰重保列表
    @inlinable
    public func describeProtectNetList(_ input: DescribeProtectNetListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProtectNetListResponse {
        try await self.client.execute(action: "DescribeProtectNetList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
