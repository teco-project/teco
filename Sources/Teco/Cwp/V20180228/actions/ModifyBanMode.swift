//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ModifyBanMode请求参数结构体
    public struct ModifyBanModeRequest: TCRequestModel {
        /// 阻断模式，STANDARD_MODE：标准阻断，DEEP_MODE：深度阻断
        public let mode: String

        /// 阻断时间，用于标准阻断模式
        public let ttl: UInt64?

        public init(mode: String, ttl: UInt64? = nil) {
            self.mode = mode
            self.ttl = ttl
        }

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case ttl = "Ttl"
        }
    }

    /// ModifyBanMode返回参数结构体
    public struct ModifyBanModeResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改爆破阻断模式
    @inlinable @discardableResult
    public func modifyBanMode(_ input: ModifyBanModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBanModeResponse> {
        self.client.execute(action: "ModifyBanMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改爆破阻断模式
    @inlinable @discardableResult
    public func modifyBanMode(_ input: ModifyBanModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBanModeResponse {
        try await self.client.execute(action: "ModifyBanMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改爆破阻断模式
    @inlinable @discardableResult
    public func modifyBanMode(mode: String, ttl: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBanModeResponse> {
        self.modifyBanMode(.init(mode: mode, ttl: ttl), region: region, logger: logger, on: eventLoop)
    }

    /// 修改爆破阻断模式
    @inlinable @discardableResult
    public func modifyBanMode(mode: String, ttl: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBanModeResponse {
        try await self.modifyBanMode(.init(mode: mode, ttl: ttl), region: region, logger: logger, on: eventLoop)
    }
}
