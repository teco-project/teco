//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// RecoverMalwares请求参数结构体
    public struct RecoverMalwaresRequest: TCRequestModel {
        /// 木马Id数组（最大100条）
        public let ids: [UInt64]

        public init(ids: [UInt64]) {
            self.ids = ids
        }

        enum CodingKeys: String, CodingKey {
            case ids = "Ids"
        }
    }

    /// RecoverMalwares返回参数结构体
    public struct RecoverMalwaresResponse: TCResponseModel {
        /// 恢复成功id数组，若无则返回空数组
        public let successIds: [UInt64]

        /// 恢复失败id数组，若无则返回空数组
        public let failedIds: [UInt64]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case successIds = "SuccessIds"
            case failedIds = "FailedIds"
            case requestId = "RequestId"
        }
    }

    /// 恢复木马文件
    ///
    /// 本接口（RecoverMalwares）用于批量恢复已经被隔离的木马文件。
    @inlinable
    public func recoverMalwares(_ input: RecoverMalwaresRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RecoverMalwaresResponse> {
        self.client.execute(action: "RecoverMalwares", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 恢复木马文件
    ///
    /// 本接口（RecoverMalwares）用于批量恢复已经被隔离的木马文件。
    @inlinable
    public func recoverMalwares(_ input: RecoverMalwaresRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverMalwaresResponse {
        try await self.client.execute(action: "RecoverMalwares", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 恢复木马文件
    ///
    /// 本接口（RecoverMalwares）用于批量恢复已经被隔离的木马文件。
    @inlinable
    public func recoverMalwares(ids: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RecoverMalwaresResponse> {
        self.recoverMalwares(.init(ids: ids), region: region, logger: logger, on: eventLoop)
    }

    /// 恢复木马文件
    ///
    /// 本接口（RecoverMalwares）用于批量恢复已经被隔离的木马文件。
    @inlinable
    public func recoverMalwares(ids: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverMalwaresResponse {
        try await self.recoverMalwares(.init(ids: ids), region: region, logger: logger, on: eventLoop)
    }
}
