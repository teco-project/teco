//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Cwp {
    /// ExportSecurityTrends请求参数结构体
    public struct ExportSecurityTrendsRequest: TCRequestModel {
        /// 开始时间。
        // FIXME: Codable support not implemented for date yet.
        public let beginDate: Date
        
        /// 结束时间。
        // FIXME: Codable support not implemented for date yet.
        public let endDate: Date
        
        public init (beginDate: Date, endDate: Date) {
            self.beginDate = beginDate
            self.endDate = endDate
        }
        
        enum CodingKeys: String, CodingKey {
            case beginDate = "BeginDate"
            case endDate = "EndDate"
        }
    }
    
    /// ExportSecurityTrends返回参数结构体
    public struct ExportSecurityTrendsResponse: TCResponseModel {
        /// 导出文件下载链接地址。
        public let downloadUrl: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case downloadUrl = "DownloadUrl"
            case requestId = "RequestId"
        }
    }
    
    /// 导出风险趋势
    @inlinable
    public func exportSecurityTrends(_ input: ExportSecurityTrendsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ExportSecurityTrendsResponse > {
        self.client.execute(action: "ExportSecurityTrends", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 导出风险趋势
    @inlinable
    public func exportSecurityTrends(_ input: ExportSecurityTrendsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportSecurityTrendsResponse {
        try await self.client.execute(action: "ExportSecurityTrends", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 导出风险趋势
    @inlinable
    public func exportSecurityTrends(beginDate: Date, endDate: Date, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ExportSecurityTrendsResponse > {
        self.exportSecurityTrends(ExportSecurityTrendsRequest(beginDate: beginDate, endDate: endDate), logger: logger, on: eventLoop)
    }
    
    /// 导出风险趋势
    @inlinable
    public func exportSecurityTrends(beginDate: Date, endDate: Date, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportSecurityTrendsResponse {
        try await self.exportSecurityTrends(ExportSecurityTrendsRequest(beginDate: beginDate, endDate: endDate), logger: logger, on: eventLoop)
    }
}
