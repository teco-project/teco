//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// ExportMalwares请求参数结构体
    public struct ExportMalwaresRequest: TCRequestModel {
        /// 限制条数,默认10
        public let limit: UInt64?

        /// 偏移量 默认0
        public let offset: UInt64?

        /// 过滤参数。
        /// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
        /// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
        /// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
        /// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
        /// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
        /// <li>Status - String - 是否必填：否 - 状态筛选</li>
        public let filters: [Filters]?

        /// 排序值 CreateTime
        public let by: String?

        /// 排序 方式 ，ASC，DESC
        public let order: String?

        public init(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filters]? = nil, by: String? = nil, order: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.by = by
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case by = "By"
            case order = "Order"
        }
    }

    /// ExportMalwares返回参数结构体
    public struct ExportMalwaresResponse: TCResponseModel {
        /// 导出文件下载链接地址。
        public let downloadUrl: String

        /// 任务id
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case downloadUrl = "DownloadUrl"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 导出木马记录
    ///
    /// 本接口 (ExportMalwares) 用于导出木马记录CSV文件。
    @inlinable
    public func exportMalwares(_ input: ExportMalwaresRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportMalwaresResponse> {
        self.client.execute(action: "ExportMalwares", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导出木马记录
    ///
    /// 本接口 (ExportMalwares) 用于导出木马记录CSV文件。
    @inlinable
    public func exportMalwares(_ input: ExportMalwaresRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportMalwaresResponse {
        try await self.client.execute(action: "ExportMalwares", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导出木马记录
    ///
    /// 本接口 (ExportMalwares) 用于导出木马记录CSV文件。
    @inlinable
    public func exportMalwares(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filters]? = nil, by: String? = nil, order: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportMalwaresResponse> {
        self.exportMalwares(ExportMalwaresRequest(limit: limit, offset: offset, filters: filters, by: by, order: order), logger: logger, on: eventLoop)
    }

    /// 导出木马记录
    ///
    /// 本接口 (ExportMalwares) 用于导出木马记录CSV文件。
    @inlinable
    public func exportMalwares(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filters]? = nil, by: String? = nil, order: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportMalwaresResponse {
        try await self.exportMalwares(ExportMalwaresRequest(limit: limit, offset: offset, filters: filters, by: by, order: order), logger: logger, on: eventLoop)
    }
}
