//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cwp {
    /// EditBashRules请求参数结构体
    public struct EditBashRulesRequest: TCRequestModel {
        /// 规则ID（新增时不填）
        public let id: UInt64?

        /// 客户端ID数组
        public let uuids: [String]?

        /// 主机IP
        public let hostIp: String?

        /// 规则名称，编辑时不可修改规则名称
        public let name: String?

        /// 危险等级(0:无，1: 高危 2:中危 3: 低危)
        public let level: UInt64?

        /// 正则表达式 ，编辑时不可修改正则表达式，需要对内容QueryEscape后再base64
        public let rule: String?

        /// 是否全局规则(默认否)：1-全局，0-非全局
        public let isGlobal: UInt64?

        /// 0=黑名单， 1=白名单
        public let white: UInt64?

        /// 事件列表点击“加入白名单”时,需要传EventId 事件的id
        public let eventId: UInt64?

        /// 是否处理旧事件为白名单 0=不处理 1=处理
        public let dealOldEvents: UInt64?

        public init(id: UInt64? = nil, uuids: [String]? = nil, hostIp: String? = nil, name: String? = nil, level: UInt64? = nil, rule: String? = nil, isGlobal: UInt64? = nil, white: UInt64? = nil, eventId: UInt64? = nil, dealOldEvents: UInt64? = nil) {
            self.id = id
            self.uuids = uuids
            self.hostIp = hostIp
            self.name = name
            self.level = level
            self.rule = rule
            self.isGlobal = isGlobal
            self.white = white
            self.eventId = eventId
            self.dealOldEvents = dealOldEvents
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case uuids = "Uuids"
            case hostIp = "HostIp"
            case name = "Name"
            case level = "Level"
            case rule = "Rule"
            case isGlobal = "IsGlobal"
            case white = "White"
            case eventId = "EventId"
            case dealOldEvents = "DealOldEvents"
        }
    }

    /// EditBashRules返回参数结构体
    public struct EditBashRulesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 新增或修改高危命令规则（支持多服务器选择）
    ///
    /// 新增或修改高危命令规则
    @inlinable @discardableResult
    public func editBashRules(_ input: EditBashRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EditBashRulesResponse> {
        self.client.execute(action: "EditBashRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增或修改高危命令规则（支持多服务器选择）
    ///
    /// 新增或修改高危命令规则
    @inlinable @discardableResult
    public func editBashRules(_ input: EditBashRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EditBashRulesResponse {
        try await self.client.execute(action: "EditBashRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增或修改高危命令规则（支持多服务器选择）
    ///
    /// 新增或修改高危命令规则
    @inlinable @discardableResult
    public func editBashRules(id: UInt64? = nil, uuids: [String]? = nil, hostIp: String? = nil, name: String? = nil, level: UInt64? = nil, rule: String? = nil, isGlobal: UInt64? = nil, white: UInt64? = nil, eventId: UInt64? = nil, dealOldEvents: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EditBashRulesResponse> {
        self.editBashRules(.init(id: id, uuids: uuids, hostIp: hostIp, name: name, level: level, rule: rule, isGlobal: isGlobal, white: white, eventId: eventId, dealOldEvents: dealOldEvents), region: region, logger: logger, on: eventLoop)
    }

    /// 新增或修改高危命令规则（支持多服务器选择）
    ///
    /// 新增或修改高危命令规则
    @inlinable @discardableResult
    public func editBashRules(id: UInt64? = nil, uuids: [String]? = nil, hostIp: String? = nil, name: String? = nil, level: UInt64? = nil, rule: String? = nil, isGlobal: UInt64? = nil, white: UInt64? = nil, eventId: UInt64? = nil, dealOldEvents: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EditBashRulesResponse {
        try await self.editBashRules(.init(id: id, uuids: uuids, hostIp: hostIp, name: name, level: level, rule: rule, isGlobal: isGlobal, white: white, eventId: eventId, dealOldEvents: dealOldEvents), region: region, logger: logger, on: eventLoop)
    }
}
