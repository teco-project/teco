//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ExportBaselineList请求参数结构体
    public struct ExportBaselineListRequest: TCRequestModel {
        /// 过滤条件：
        /// - StrategyId- Uint64 - 基线策略id
        /// - Status - Uint64 - 事件状态：0-未通过，1-忽略，3-通过，5-检测中
        /// - BaselineName  - String - 基线名称
        /// - AliasName- String - 服务器名称/服务器ip
        /// - Uuid- String - 主机uuid
        public let filters: [Filters]?

        /// 已废弃
        public let ifDetail: UInt64?

        public init(filters: [Filters]? = nil, ifDetail: UInt64? = nil) {
            self.filters = filters
            self.ifDetail = ifDetail
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case ifDetail = "IfDetail"
        }
    }

    /// ExportBaselineList返回参数结构体
    public struct ExportBaselineListResponse: TCResponseModel {
        /// 导出文件下载地址（已弃用）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let downloadUrl: String?

        /// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case downloadUrl = "DownloadUrl"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 导出基线列表
    @inlinable
    public func exportBaselineList(_ input: ExportBaselineListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportBaselineListResponse> {
        self.client.execute(action: "ExportBaselineList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导出基线列表
    @inlinable
    public func exportBaselineList(_ input: ExportBaselineListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportBaselineListResponse {
        try await self.client.execute(action: "ExportBaselineList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导出基线列表
    @inlinable
    public func exportBaselineList(filters: [Filters]? = nil, ifDetail: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportBaselineListResponse> {
        self.exportBaselineList(.init(filters: filters, ifDetail: ifDetail), region: region, logger: logger, on: eventLoop)
    }

    /// 导出基线列表
    @inlinable
    public func exportBaselineList(filters: [Filters]? = nil, ifDetail: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportBaselineListResponse {
        try await self.exportBaselineList(.init(filters: filters, ifDetail: ifDetail), region: region, logger: logger, on: eventLoop)
    }
}
