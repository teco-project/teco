//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeMalwareTimingScanSetting请求参数结构体
    public struct DescribeMalwareTimingScanSettingRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeMalwareTimingScanSetting返回参数结构体
    public struct DescribeMalwareTimingScanSettingResponse: TCResponseModel {
        /// 检测模式 0 全盘检测  1快速检测
        public let checkPattern: UInt64

        /// 检测周期 开始时间
        public let startTime: String

        /// 检测周期 超时结束时间
        public let endTime: String

        /// 是否全部服务器 1 全部 2 自选
        public let isGlobal: UInt64

        /// 自选服务器时必须 主机quuid的string数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quuidList: [String]?

        /// 监控模式 0 标准 1深度
        public let monitoringPattern: UInt64

        /// 周期 1每天
        public let cycle: UInt64

        /// 定时检测开关 0 关闭1 开启
        public let enableScan: Int64

        /// 唯一ID
        public let id: Int64

        /// 实时监控0 关闭 1开启
        public let realTimeMonitoring: Int64

        /// 是否自动隔离：1-是，0-否
        public let autoIsolation: UInt64

        /// 一键扫描超时时长，如：1800秒（s）
        public let clickTimeout: UInt64

        /// 是否杀掉进程 1杀掉 0不杀掉 只有开启自动隔离才生效
        public let killProcess: UInt64

        /// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
        public let engineType: UInt64

        /// 启发引擎 0 关闭 1开启
        public let enableInspiredEngine: UInt64

        /// 是否开启恶意进程查杀[0:未开启,1:开启]
        public let enableMemShellScan: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case checkPattern = "CheckPattern"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case isGlobal = "IsGlobal"
            case quuidList = "QuuidList"
            case monitoringPattern = "MonitoringPattern"
            case cycle = "Cycle"
            case enableScan = "EnableScan"
            case id = "Id"
            case realTimeMonitoring = "RealTimeMonitoring"
            case autoIsolation = "AutoIsolation"
            case clickTimeout = "ClickTimeout"
            case killProcess = "KillProcess"
            case engineType = "EngineType"
            case enableInspiredEngine = "EnableInspiredEngine"
            case enableMemShellScan = "EnableMemShellScan"
            case requestId = "RequestId"
        }
    }

    /// 查询定时扫描配置
    @inlinable
    public func describeMalwareTimingScanSetting(_ input: DescribeMalwareTimingScanSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMalwareTimingScanSettingResponse> {
        self.client.execute(action: "DescribeMalwareTimingScanSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询定时扫描配置
    @inlinable
    public func describeMalwareTimingScanSetting(_ input: DescribeMalwareTimingScanSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMalwareTimingScanSettingResponse {
        try await self.client.execute(action: "DescribeMalwareTimingScanSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询定时扫描配置
    @inlinable
    public func describeMalwareTimingScanSetting(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMalwareTimingScanSettingResponse> {
        self.describeMalwareTimingScanSetting(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询定时扫描配置
    @inlinable
    public func describeMalwareTimingScanSetting(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMalwareTimingScanSettingResponse {
        try await self.describeMalwareTimingScanSetting(.init(), region: region, logger: logger, on: eventLoop)
    }
}
