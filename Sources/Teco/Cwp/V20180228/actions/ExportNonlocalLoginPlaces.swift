//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// ExportNonlocalLoginPlaces请求参数结构体
    public struct ExportNonlocalLoginPlacesRequest: TCRequestModel {
        /// <li>Status - int - 是否必填：否 - 状态筛选1:正常登录；2：异地登录</li>
        public let filters: [Filter]?

        public init(filters: [Filter]? = nil) {
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
        }
    }

    /// ExportNonlocalLoginPlaces返回参数结构体
    public struct ExportNonlocalLoginPlacesResponse: TCResponseModel {
        /// 该参数已废弃
        public let downloadUrl: String

        /// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case downloadUrl = "DownloadUrl"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 导出异地登录记录
    ///
    /// 本接口 (ExportNonlocalLoginPlaces) 用于导出异地登录事件记录CSV文件。
    @inlinable
    public func exportNonlocalLoginPlaces(_ input: ExportNonlocalLoginPlacesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportNonlocalLoginPlacesResponse> {
        self.client.execute(action: "ExportNonlocalLoginPlaces", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导出异地登录记录
    ///
    /// 本接口 (ExportNonlocalLoginPlaces) 用于导出异地登录事件记录CSV文件。
    @inlinable
    public func exportNonlocalLoginPlaces(_ input: ExportNonlocalLoginPlacesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportNonlocalLoginPlacesResponse {
        try await self.client.execute(action: "ExportNonlocalLoginPlaces", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导出异地登录记录
    ///
    /// 本接口 (ExportNonlocalLoginPlaces) 用于导出异地登录事件记录CSV文件。
    @inlinable
    public func exportNonlocalLoginPlaces(filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportNonlocalLoginPlacesResponse> {
        self.exportNonlocalLoginPlaces(.init(filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 导出异地登录记录
    ///
    /// 本接口 (ExportNonlocalLoginPlaces) 用于导出异地登录事件记录CSV文件。
    @inlinable
    public func exportNonlocalLoginPlaces(filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportNonlocalLoginPlacesResponse {
        try await self.exportNonlocalLoginPlaces(.init(filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
