//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// 获取木马列表
    ///
    /// 入侵检测获取木马列表
    @inlinable
    public func describeMalWareList(_ input: DescribeMalWareListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeMalWareListResponse > {
        self.client.execute(action: "DescribeMalWareList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取木马列表
    ///
    /// 入侵检测获取木马列表
    @inlinable
    public func describeMalWareList(_ input: DescribeMalWareListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMalWareListResponse {
        try await self.client.execute(action: "DescribeMalWareList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeMalWareList请求参数结构体
    public struct DescribeMalWareListRequest: TCRequestModel {
        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?
        
        /// 偏移量，默认为0。
        public let offset: UInt64?
        
        /// 过滤条件。
        /// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
        /// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
        /// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
        /// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
        /// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
        /// <li>Status - String - 是否必填：否 - 状态筛选 4待处理,5信任,6已隔离,10隔离中,11恢复隔离中</li>
        public let filters: [Filter]?
        
        /// 检测排序 CreateTime
        public let by: String?
        
        /// 排序方式 ASC,DESC
        public let order: String?
        
        public init (limit: UInt64?, offset: UInt64?, filters: [Filter]?, by: String?, order: String?) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.by = by
            self.order = order
        }
        
        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case by = "By"
            case order = "Order"
        }
    }
    
    /// DescribeMalWareList返回参数结构体
    public struct DescribeMalWareListResponse: TCResponseModel {
        /// 木马列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let malWareList: [MalWareList]?
        
        /// 总数量
        public let totalCount: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case malWareList = "MalWareList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
}