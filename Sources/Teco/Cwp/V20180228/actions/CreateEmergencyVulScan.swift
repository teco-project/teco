//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// CreateEmergencyVulScan请求参数结构体
    public struct CreateEmergencyVulScanRequest: TCRequestModel {
        /// 漏洞id
        public let vulId: UInt64

        /// 自选服务器时生效，主机uuid的string数组
        public let uuids: [String]?

        public init(vulId: UInt64, uuids: [String]? = nil) {
            self.vulId = vulId
            self.uuids = uuids
        }

        enum CodingKeys: String, CodingKey {
            case vulId = "VulId"
            case uuids = "Uuids"
        }
    }

    /// CreateEmergencyVulScan返回参数结构体
    public struct CreateEmergencyVulScanResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 应急漏洞扫描
    ///
    /// 创建应急漏洞扫描任务
    @inlinable @discardableResult
    public func createEmergencyVulScan(_ input: CreateEmergencyVulScanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEmergencyVulScanResponse> {
        self.client.execute(action: "CreateEmergencyVulScan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 应急漏洞扫描
    ///
    /// 创建应急漏洞扫描任务
    @inlinable @discardableResult
    public func createEmergencyVulScan(_ input: CreateEmergencyVulScanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEmergencyVulScanResponse {
        try await self.client.execute(action: "CreateEmergencyVulScan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 应急漏洞扫描
    ///
    /// 创建应急漏洞扫描任务
    @inlinable @discardableResult
    public func createEmergencyVulScan(vulId: UInt64, uuids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEmergencyVulScanResponse> {
        self.createEmergencyVulScan(.init(vulId: vulId, uuids: uuids), region: region, logger: logger, on: eventLoop)
    }

    /// 应急漏洞扫描
    ///
    /// 创建应急漏洞扫描任务
    @inlinable @discardableResult
    public func createEmergencyVulScan(vulId: UInt64, uuids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEmergencyVulScanResponse {
        try await self.createEmergencyVulScan(.init(vulId: vulId, uuids: uuids), region: region, logger: logger, on: eventLoop)
    }
}
