//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeVulStoreList请求参数结构体
    public struct DescribeVulStoreListRequest: TCPaginatedRequest {
        /// - VulName- string - 是否必填：否 - 漏洞名称
        /// - CveId- string - 是否必填：否 - cveid
        /// - VulCategory- string - 是否必填：否 - 漏洞分类  1 Web-CMS漏洞 ,2 应用漏洞 ,4 Linux软件漏洞,5 Windows系统漏洞
        /// - Method- string - 是否必填：否 - 检测方法 0版本对比,1 poc检测
        /// - SupportDefense- string - 是否必填：否 - 是否支持防御 0不支持,1支持
        /// - FixSwitch- string - 是否必填：否 - 是否支持自动修复 0不支持,1支持
        public let filters: [Filter]?

        /// 限制条数,默认10,最大100
        public let limit: Int64?

        /// 偏移量,默认0
        public let offset: Int64?

        /// 排序方式: [ASC:升序|DESC:降序]
        public let order: String?

        /// 可选排序列: [PublishDate]
        public let by: String?

        public init(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, by: String? = nil) {
            self.filters = filters
            self.limit = limit
            self.offset = offset
            self.order = order
            self.by = by
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
            case order = "Order"
            case by = "By"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeVulStoreListResponse) -> DescribeVulStoreListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(filters: self.filters, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), order: self.order, by: self.by)
        }
    }

    /// DescribeVulStoreList返回参数结构体
    public struct DescribeVulStoreListResponse: TCPaginatedResponse {
        /// 漏洞信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [VulStoreListInfo]?

        /// 总数
        public let totalCount: UInt64

        /// 今日剩余搜索此时
        public let remaining: UInt64

        /// 免费搜索次数
        public let freeSearchTimes: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case totalCount = "TotalCount"
            case remaining = "Remaining"
            case freeSearchTimes = "FreeSearchTimes"
            case requestId = "RequestId"
        }

        /// Extract the returned ``VulStoreListInfo`` list from the paginated response.
        public func getItems() -> [VulStoreListInfo] {
            self.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取漏洞库列表
    @inlinable
    public func describeVulStoreList(_ input: DescribeVulStoreListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulStoreListResponse> {
        self.client.execute(action: "DescribeVulStoreList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取漏洞库列表
    @inlinable
    public func describeVulStoreList(_ input: DescribeVulStoreListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulStoreListResponse {
        try await self.client.execute(action: "DescribeVulStoreList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取漏洞库列表
    @inlinable
    public func describeVulStoreList(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulStoreListResponse> {
        self.describeVulStoreList(.init(filters: filters, limit: limit, offset: offset, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 获取漏洞库列表
    @inlinable
    public func describeVulStoreList(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulStoreListResponse {
        try await self.describeVulStoreList(.init(filters: filters, limit: limit, offset: offset, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 获取漏洞库列表
    @inlinable
    public func describeVulStoreListPaginated(_ input: DescribeVulStoreListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [VulStoreListInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeVulStoreList, logger: logger, on: eventLoop)
    }

    /// 获取漏洞库列表
    @inlinable @discardableResult
    public func describeVulStoreListPaginated(_ input: DescribeVulStoreListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeVulStoreListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeVulStoreList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取漏洞库列表
    ///
    /// - Returns: `AsyncSequence`s of ``VulStoreListInfo`` and ``DescribeVulStoreListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeVulStoreListPaginator(_ input: DescribeVulStoreListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeVulStoreListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeVulStoreList, logger: logger, on: eventLoop)
    }
}
