//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ModifyLicenseOrder请求参数结构体
    public struct ModifyLicenseOrderRequest: TCRequest {
        /// 资源ID
        public let resourceId: String

        /// 预期值,如果当前为10,扩容则输入原来大的值, 缩容则比原来小的值(缩容时不允许预期值比使用量小),如果保持不变则填写原值,
        public let inquireNum: UInt64?

        /// 项目ID,不修改则输入原值.
        public let projectId: UInt64?

        /// 资源别名,不修改则输入原值.
        public let alias: String?

        public init(resourceId: String, inquireNum: UInt64? = nil, projectId: UInt64? = nil, alias: String? = nil) {
            self.resourceId = resourceId
            self.inquireNum = inquireNum
            self.projectId = projectId
            self.alias = alias
        }

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case inquireNum = "InquireNum"
            case projectId = "ProjectId"
            case alias = "Alias"
        }
    }

    /// ModifyLicenseOrder返回参数结构体
    public struct ModifyLicenseOrderResponse: TCResponse {
        /// 订单号
        public let dealNames: [String]?

        /// 资源ID
        public let resourceIds: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dealNames = "DealNames"
            case resourceIds = "ResourceIds"
            case requestId = "RequestId"
        }
    }

    /// 编辑授权订单
    ///
    /// 编辑《主机安全-按量计费》授权订单
    @inlinable
    public func modifyLicenseOrder(_ input: ModifyLicenseOrderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLicenseOrderResponse> {
        self.client.execute(action: "ModifyLicenseOrder", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑授权订单
    ///
    /// 编辑《主机安全-按量计费》授权订单
    @inlinable
    public func modifyLicenseOrder(_ input: ModifyLicenseOrderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLicenseOrderResponse {
        try await self.client.execute(action: "ModifyLicenseOrder", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑授权订单
    ///
    /// 编辑《主机安全-按量计费》授权订单
    @inlinable
    public func modifyLicenseOrder(resourceId: String, inquireNum: UInt64? = nil, projectId: UInt64? = nil, alias: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLicenseOrderResponse> {
        self.modifyLicenseOrder(.init(resourceId: resourceId, inquireNum: inquireNum, projectId: projectId, alias: alias), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑授权订单
    ///
    /// 编辑《主机安全-按量计费》授权订单
    @inlinable
    public func modifyLicenseOrder(resourceId: String, inquireNum: UInt64? = nil, projectId: UInt64? = nil, alias: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLicenseOrderResponse {
        try await self.modifyLicenseOrder(.init(resourceId: resourceId, inquireNum: inquireNum, projectId: projectId, alias: alias), region: region, logger: logger, on: eventLoop)
    }
}
