//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cwp {
    /// DescribeEventByTable请求参数结构体
    public struct DescribeEventByTableRequest: TCRequestModel {
        /// 事件表名
        public let tableName: String

        /// 事件表id号
        public let ids: [Int64]

        public init(tableName: String, ids: [Int64]) {
            self.tableName = tableName
            self.ids = ids
        }

        enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
            case ids = "Ids"
        }
    }

    /// DescribeEventByTable返回参数结构体
    public struct DescribeEventByTableResponse: TCResponseModel {
        /// 告警类型，爆破bruteattack，高危命令bash，恶意文件malware，恶意请求risk_dns，本地提权privilege_escalation，反弹shell reverse_shell，内存马java_shell
        public let type: String

        /// 事件内容的json编码字符串，字段结构对齐事件表
        public let value: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
            case requestId = "RequestId"
        }
    }

    /// 根据事件表名和id查询告警事件详情
    @inlinable
    public func describeEventByTable(_ input: DescribeEventByTableRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEventByTableResponse> {
        self.client.execute(action: "DescribeEventByTable", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据事件表名和id查询告警事件详情
    @inlinable
    public func describeEventByTable(_ input: DescribeEventByTableRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEventByTableResponse {
        try await self.client.execute(action: "DescribeEventByTable", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据事件表名和id查询告警事件详情
    @inlinable
    public func describeEventByTable(tableName: String, ids: [Int64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEventByTableResponse> {
        self.describeEventByTable(.init(tableName: tableName, ids: ids), region: region, logger: logger, on: eventLoop)
    }

    /// 根据事件表名和id查询告警事件详情
    @inlinable
    public func describeEventByTable(tableName: String, ids: [Int64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEventByTableResponse {
        try await self.describeEventByTable(.init(tableName: tableName, ids: ids), region: region, logger: logger, on: eventLoop)
    }
}
