//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ModifyLogStorageConfig请求参数结构体
    public struct ModifyLogStorageConfigRequest: TCRequestModel {
        /// 是否修改有效期
        public let isModifyPeriod: Bool

        /// 存储类型，string数组
        public let type: [String]?

        /// 日志存储天数，3640表示不限
        public let period: Int64?

        public init(isModifyPeriod: Bool, type: [String]? = nil, period: Int64? = nil) {
            self.isModifyPeriod = isModifyPeriod
            self.type = type
            self.period = period
        }

        enum CodingKeys: String, CodingKey {
            case isModifyPeriod = "IsModifyPeriod"
            case type = "Type"
            case period = "Period"
        }
    }

    /// ModifyLogStorageConfig返回参数结构体
    public struct ModifyLogStorageConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改日志存储配置
    @inlinable @discardableResult
    public func modifyLogStorageConfig(_ input: ModifyLogStorageConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLogStorageConfigResponse> {
        self.client.execute(action: "ModifyLogStorageConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改日志存储配置
    @inlinable @discardableResult
    public func modifyLogStorageConfig(_ input: ModifyLogStorageConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLogStorageConfigResponse {
        try await self.client.execute(action: "ModifyLogStorageConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改日志存储配置
    @inlinable @discardableResult
    public func modifyLogStorageConfig(isModifyPeriod: Bool, type: [String]? = nil, period: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLogStorageConfigResponse> {
        self.modifyLogStorageConfig(.init(isModifyPeriod: isModifyPeriod, type: type, period: period), region: region, logger: logger, on: eventLoop)
    }

    /// 修改日志存储配置
    @inlinable @discardableResult
    public func modifyLogStorageConfig(isModifyPeriod: Bool, type: [String]? = nil, period: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLogStorageConfigResponse {
        try await self.modifyLogStorageConfig(.init(isModifyPeriod: isModifyPeriod, type: type, period: period), region: region, logger: logger, on: eventLoop)
    }
}
