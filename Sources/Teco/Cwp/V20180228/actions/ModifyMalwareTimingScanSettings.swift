//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// ModifyMalwareTimingScanSettings请求参数结构体
    public struct ModifyMalwareTimingScanSettingsRequest: TCRequestModel {
        /// 检测模式 0 全盘检测  1快速检测
        public let checkPattern: UInt64
        
        /// 检测周期 开始时间，如：02:00:00
        public let startTime: String
        
        /// 检测周期 超时结束时间，如：04:00:00
        public let endTime: String
        
        /// 是否全部服务器 1 全部 2 自选
        public let isGlobal: UInt64
        
        /// 定时检测开关 0 关闭 1开启
        public let enableScan: UInt64
        
        /// 监控模式 0 标准 1深度
        public let monitoringPattern: UInt64
        
        /// 扫描周期 默认每天 1
        public let cycle: UInt64
        
        /// 实时监控 0 关闭 1开启
        public let realTimeMonitoring: UInt64
        
        /// 自选服务器时必须 主机quuid的string数组
        public let quuidList: [String]?
        
        /// 是否自动隔离 1隔离 0 不隔离
        public let autoIsolation: UInt64?
        
        /// 是否杀掉进程 1杀掉 0不杀掉
        public let killProcess: UInt64?
        
        /// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
        public let engineType: UInt64?
        
        /// 启发引擎开关 0 关闭 1开启
        public let enableInspiredEngine: UInt64?
        
        /// 是否开启恶意进程查杀[0:未开启,1:开启]
        public let enableMemShellScan: UInt64?
        
        public init (checkPattern: UInt64, startTime: String, endTime: String, isGlobal: UInt64, enableScan: UInt64, monitoringPattern: UInt64, cycle: UInt64, realTimeMonitoring: UInt64, quuidList: [String]? = nil, autoIsolation: UInt64? = nil, killProcess: UInt64? = nil, engineType: UInt64? = nil, enableInspiredEngine: UInt64? = nil, enableMemShellScan: UInt64? = nil) {
            self.checkPattern = checkPattern
            self.startTime = startTime
            self.endTime = endTime
            self.isGlobal = isGlobal
            self.enableScan = enableScan
            self.monitoringPattern = monitoringPattern
            self.cycle = cycle
            self.realTimeMonitoring = realTimeMonitoring
            self.quuidList = quuidList
            self.autoIsolation = autoIsolation
            self.killProcess = killProcess
            self.engineType = engineType
            self.enableInspiredEngine = enableInspiredEngine
            self.enableMemShellScan = enableMemShellScan
        }
        
        enum CodingKeys: String, CodingKey {
            case checkPattern = "CheckPattern"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case isGlobal = "IsGlobal"
            case enableScan = "EnableScan"
            case monitoringPattern = "MonitoringPattern"
            case cycle = "Cycle"
            case realTimeMonitoring = "RealTimeMonitoring"
            case quuidList = "QuuidList"
            case autoIsolation = "AutoIsolation"
            case killProcess = "KillProcess"
            case engineType = "EngineType"
            case enableInspiredEngine = "EnableInspiredEngine"
            case enableMemShellScan = "EnableMemShellScan"
        }
    }
    
    /// ModifyMalwareTimingScanSettings返回参数结构体
    public struct ModifyMalwareTimingScanSettingsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 定时扫描设置
    @inlinable
    public func modifyMalwareTimingScanSettings(_ input: ModifyMalwareTimingScanSettingsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyMalwareTimingScanSettingsResponse > {
        self.client.execute(action: "ModifyMalwareTimingScanSettings", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 定时扫描设置
    @inlinable
    public func modifyMalwareTimingScanSettings(_ input: ModifyMalwareTimingScanSettingsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMalwareTimingScanSettingsResponse {
        try await self.client.execute(action: "ModifyMalwareTimingScanSettings", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
