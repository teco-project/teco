//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeBashEventsInfoNew请求参数结构体
    public struct DescribeBashEventsInfoNewRequest: TCRequestModel {
        /// 事件id
        public let id: UInt64

        public init(id: UInt64) {
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// DescribeBashEventsInfoNew返回参数结构体
    public struct DescribeBashEventsInfoNewResponse: TCResponseModel {
        /// 事件详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bashEventsInfo: BashEventsInfoNew?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case bashEventsInfo = "BashEventsInfo"
            case requestId = "RequestId"
        }
    }

    /// 高危命令详情(新)
    ///
    /// 查询高危命令事件详情(新)
    @inlinable
    public func describeBashEventsInfoNew(_ input: DescribeBashEventsInfoNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBashEventsInfoNewResponse> {
        self.client.execute(action: "DescribeBashEventsInfoNew", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 高危命令详情(新)
    ///
    /// 查询高危命令事件详情(新)
    @inlinable
    public func describeBashEventsInfoNew(_ input: DescribeBashEventsInfoNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBashEventsInfoNewResponse {
        try await self.client.execute(action: "DescribeBashEventsInfoNew", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 高危命令详情(新)
    ///
    /// 查询高危命令事件详情(新)
    @inlinable
    public func describeBashEventsInfoNew(id: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBashEventsInfoNewResponse> {
        self.describeBashEventsInfoNew(.init(id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 高危命令详情(新)
    ///
    /// 查询高危命令事件详情(新)
    @inlinable
    public func describeBashEventsInfoNew(id: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBashEventsInfoNewResponse {
        try await self.describeBashEventsInfoNew(.init(id: id), region: region, logger: logger, on: eventLoop)
    }
}
