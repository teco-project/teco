//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// ModifyMachineRemark请求参数结构体
    public struct ModifyMachineRemarkRequest: TCRequestModel {
        /// 主机Quuid
        public let quuid: String

        /// 备注信息
        public let remark: String?

        public init(quuid: String, remark: String? = nil) {
            self.quuid = quuid
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case quuid = "Quuid"
            case remark = "Remark"
        }
    }

    /// ModifyMachineRemark返回参数结构体
    public struct ModifyMachineRemarkResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改主机备注信息
    @inlinable @discardableResult
    public func modifyMachineRemark(_ input: ModifyMachineRemarkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMachineRemarkResponse> {
        self.client.execute(action: "ModifyMachineRemark", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改主机备注信息
    @inlinable @discardableResult
    public func modifyMachineRemark(_ input: ModifyMachineRemarkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMachineRemarkResponse {
        try await self.client.execute(action: "ModifyMachineRemark", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改主机备注信息
    @inlinable @discardableResult
    public func modifyMachineRemark(quuid: String, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMachineRemarkResponse> {
        self.modifyMachineRemark(.init(quuid: quuid, remark: remark), region: region, logger: logger, on: eventLoop)
    }

    /// 修改主机备注信息
    @inlinable @discardableResult
    public func modifyMachineRemark(quuid: String, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMachineRemarkResponse {
        try await self.modifyMachineRemark(.init(quuid: quuid, remark: remark), region: region, logger: logger, on: eventLoop)
    }
}
