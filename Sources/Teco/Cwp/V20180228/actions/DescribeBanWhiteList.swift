//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeBanWhiteList请求参数结构体
    public struct DescribeBanWhiteListRequest: TCPaginatedRequest {
        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 返回数量，最大值为100。
        public let limit: UInt64?

        /// 过滤条件。
        /// - Keywords - String - 是否必填：否 - 查询关键字
        public let filters: [Filter]?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil) {
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeBanWhiteListResponse) -> DescribeBanWhiteListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeBanWhiteList返回参数结构体
    public struct DescribeBanWhiteListResponse: TCPaginatedResponse {
        /// 总记录数
        public let totalCount: UInt64

        /// 白名单列表
        public let whiteList: [BanWhiteListDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case whiteList = "WhiteList"
            case requestId = "RequestId"
        }

        /// Extract the returned ``BanWhiteListDetail`` list from the paginated response.
        public func getItems() -> [BanWhiteListDetail] {
            self.whiteList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取阻断白名单列表
    @inlinable
    public func describeBanWhiteList(_ input: DescribeBanWhiteListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBanWhiteListResponse> {
        self.client.execute(action: "DescribeBanWhiteList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取阻断白名单列表
    @inlinable
    public func describeBanWhiteList(_ input: DescribeBanWhiteListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBanWhiteListResponse {
        try await self.client.execute(action: "DescribeBanWhiteList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取阻断白名单列表
    @inlinable
    public func describeBanWhiteList(offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBanWhiteListResponse> {
        self.describeBanWhiteList(.init(offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取阻断白名单列表
    @inlinable
    public func describeBanWhiteList(offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBanWhiteListResponse {
        try await self.describeBanWhiteList(.init(offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取阻断白名单列表
    @inlinable
    public func describeBanWhiteListPaginated(_ input: DescribeBanWhiteListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [BanWhiteListDetail])> {
        self.client.paginate(input: input, region: region, command: self.describeBanWhiteList, logger: logger, on: eventLoop)
    }

    /// 获取阻断白名单列表
    @inlinable @discardableResult
    public func describeBanWhiteListPaginated(_ input: DescribeBanWhiteListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeBanWhiteListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeBanWhiteList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取阻断白名单列表
    ///
    /// - Returns: `AsyncSequence`s of ``BanWhiteListDetail`` and ``DescribeBanWhiteListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeBanWhiteListPaginator(_ input: DescribeBanWhiteListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeBanWhiteListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeBanWhiteList, logger: logger, on: eventLoop)
    }
}
