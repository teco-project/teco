//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// CreateScanMalwareSetting请求参数结构体
    public struct CreateScanMalwareSettingRequest: TCRequestModel {
        /// 扫描模式 0 全盘扫描, 1 快速扫描
        public let scanPattern: UInt64

        /// 服务器分类：1:专业版服务器；2:自选服务器
        public let hostType: Int64

        /// 自选服务器时生效，主机quuid的string数组
        public let quuidList: [String]?

        /// 超时时间单位 秒 默认3600 秒
        public let timeoutPeriod: UInt64?

        /// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
        public let engineType: UInt64?

        /// 是否开启恶意进程查杀[0:未开启,1:开启]
        public let enableMemShellScan: Int64?

        public init(scanPattern: UInt64, hostType: Int64, quuidList: [String]? = nil, timeoutPeriod: UInt64? = nil, engineType: UInt64? = nil, enableMemShellScan: Int64? = nil) {
            self.scanPattern = scanPattern
            self.hostType = hostType
            self.quuidList = quuidList
            self.timeoutPeriod = timeoutPeriod
            self.engineType = engineType
            self.enableMemShellScan = enableMemShellScan
        }

        enum CodingKeys: String, CodingKey {
            case scanPattern = "ScanPattern"
            case hostType = "HostType"
            case quuidList = "QuuidList"
            case timeoutPeriod = "TimeoutPeriod"
            case engineType = "EngineType"
            case enableMemShellScan = "EnableMemShellScan"
        }
    }

    /// CreateScanMalwareSetting返回参数结构体
    public struct CreateScanMalwareSettingResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 文件查杀检测
    ///
    /// 该接口可以对入侵检测-文件查杀扫描检测
    @inlinable @discardableResult
    public func createScanMalwareSetting(_ input: CreateScanMalwareSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateScanMalwareSettingResponse> {
        self.client.execute(action: "CreateScanMalwareSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 文件查杀检测
    ///
    /// 该接口可以对入侵检测-文件查杀扫描检测
    @inlinable @discardableResult
    public func createScanMalwareSetting(_ input: CreateScanMalwareSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateScanMalwareSettingResponse {
        try await self.client.execute(action: "CreateScanMalwareSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 文件查杀检测
    ///
    /// 该接口可以对入侵检测-文件查杀扫描检测
    @inlinable @discardableResult
    public func createScanMalwareSetting(scanPattern: UInt64, hostType: Int64, quuidList: [String]? = nil, timeoutPeriod: UInt64? = nil, engineType: UInt64? = nil, enableMemShellScan: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateScanMalwareSettingResponse> {
        let input = CreateScanMalwareSettingRequest(scanPattern: scanPattern, hostType: hostType, quuidList: quuidList, timeoutPeriod: timeoutPeriod, engineType: engineType, enableMemShellScan: enableMemShellScan)
        return self.client.execute(action: "CreateScanMalwareSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 文件查杀检测
    ///
    /// 该接口可以对入侵检测-文件查杀扫描检测
    @inlinable @discardableResult
    public func createScanMalwareSetting(scanPattern: UInt64, hostType: Int64, quuidList: [String]? = nil, timeoutPeriod: UInt64? = nil, engineType: UInt64? = nil, enableMemShellScan: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateScanMalwareSettingResponse {
        let input = CreateScanMalwareSettingRequest(scanPattern: scanPattern, hostType: hostType, quuidList: quuidList, timeoutPeriod: timeoutPeriod, engineType: engineType, enableMemShellScan: enableMemShellScan)
        return try await self.client.execute(action: "CreateScanMalwareSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
