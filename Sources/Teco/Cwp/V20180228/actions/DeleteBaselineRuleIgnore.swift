//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DeleteBaselineRuleIgnore请求参数结构体
    public struct DeleteBaselineRuleIgnoreRequest: TCRequest {
        /// 规则Id
        public let ruleIds: [Int64]

        public init(ruleIds: [Int64]) {
            self.ruleIds = ruleIds
        }

        enum CodingKeys: String, CodingKey {
            case ruleIds = "RuleIds"
        }
    }

    /// DeleteBaselineRuleIgnore返回参数结构体
    public struct DeleteBaselineRuleIgnoreResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除基线忽略规则
    @inlinable @discardableResult
    public func deleteBaselineRuleIgnore(_ input: DeleteBaselineRuleIgnoreRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBaselineRuleIgnoreResponse> {
        self.client.execute(action: "DeleteBaselineRuleIgnore", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除基线忽略规则
    @inlinable @discardableResult
    public func deleteBaselineRuleIgnore(_ input: DeleteBaselineRuleIgnoreRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBaselineRuleIgnoreResponse {
        try await self.client.execute(action: "DeleteBaselineRuleIgnore", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除基线忽略规则
    @inlinable @discardableResult
    public func deleteBaselineRuleIgnore(ruleIds: [Int64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBaselineRuleIgnoreResponse> {
        self.deleteBaselineRuleIgnore(.init(ruleIds: ruleIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除基线忽略规则
    @inlinable @discardableResult
    public func deleteBaselineRuleIgnore(ruleIds: [Int64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBaselineRuleIgnoreResponse {
        try await self.deleteBaselineRuleIgnore(.init(ruleIds: ruleIds), region: region, logger: logger, on: eventLoop)
    }
}
