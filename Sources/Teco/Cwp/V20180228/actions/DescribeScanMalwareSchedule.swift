//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// DescribeScanMalwareSchedule请求参数结构体
    public struct DescribeScanMalwareScheduleRequest: TCRequestModel {
        public init () {
        }
    }
    
    /// DescribeScanMalwareSchedule返回参数结构体
    public struct DescribeScanMalwareScheduleResponse: TCResponseModel {
        /// 扫描进度（单位：%）
        public let schedule: Int64
        
        /// 风险文件数,当进度满了以后才有该值
        public let riskFileNumber: Int64
        
        /// 是否正在扫描中
        public let isSchedule: Bool
        
        /// 0 从未扫描过、 1 扫描中、 2扫描完成、 3停止中、 4停止完成
        public let scanStatus: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case schedule = "Schedule"
            case riskFileNumber = "RiskFileNumber"
            case isSchedule = "IsSchedule"
            case scanStatus = "ScanStatus"
            case requestId = "RequestId"
        }
    }
    
    /// 查询木马扫描进度
    @inlinable
    public func describeScanMalwareSchedule(_ input: DescribeScanMalwareScheduleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeScanMalwareScheduleResponse > {
        self.client.execute(action: "DescribeScanMalwareSchedule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询木马扫描进度
    @inlinable
    public func describeScanMalwareSchedule(_ input: DescribeScanMalwareScheduleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScanMalwareScheduleResponse {
        try await self.client.execute(action: "DescribeScanMalwareSchedule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询木马扫描进度
    @inlinable
    public func describeScanMalwareSchedule(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeScanMalwareScheduleResponse > {
        self.describeScanMalwareSchedule(DescribeScanMalwareScheduleRequest(), logger: logger, on: eventLoop)
    }
    
    /// 查询木马扫描进度
    @inlinable
    public func describeScanMalwareSchedule(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScanMalwareScheduleResponse {
        try await self.describeScanMalwareSchedule(DescribeScanMalwareScheduleRequest(), logger: logger, on: eventLoop)
    }
}
