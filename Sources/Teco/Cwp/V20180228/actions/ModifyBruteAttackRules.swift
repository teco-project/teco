//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ModifyBruteAttackRules请求参数结构体
    public struct ModifyBruteAttackRulesRequest: TCRequestModel {
        /// 暴力破解判断规则
        public let rules: [BruteAttackRule]

        public init(rules: [BruteAttackRule]) {
            self.rules = rules
        }

        enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    /// ModifyBruteAttackRules返回参数结构体
    public struct ModifyBruteAttackRulesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改暴力破解规则
    @inlinable @discardableResult
    public func modifyBruteAttackRules(_ input: ModifyBruteAttackRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBruteAttackRulesResponse> {
        self.client.execute(action: "ModifyBruteAttackRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改暴力破解规则
    @inlinable @discardableResult
    public func modifyBruteAttackRules(_ input: ModifyBruteAttackRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBruteAttackRulesResponse {
        try await self.client.execute(action: "ModifyBruteAttackRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改暴力破解规则
    @inlinable @discardableResult
    public func modifyBruteAttackRules(rules: [BruteAttackRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBruteAttackRulesResponse> {
        self.modifyBruteAttackRules(.init(rules: rules), region: region, logger: logger, on: eventLoop)
    }

    /// 修改暴力破解规则
    @inlinable @discardableResult
    public func modifyBruteAttackRules(rules: [BruteAttackRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBruteAttackRulesResponse {
        try await self.modifyBruteAttackRules(.init(rules: rules), region: region, logger: logger, on: eventLoop)
    }
}
