//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DeleteAttackLogs请求参数结构体
    public struct DeleteAttackLogsRequest: TCRequestModel {
        /// 日志ID数组，最大100条。
        public let ids: [UInt64]?

        /// 是否全部删除
        public let isAll: Bool?

        public init(ids: [UInt64]? = nil, isAll: Bool? = nil) {
            self.ids = ids
            self.isAll = isAll
        }

        enum CodingKeys: String, CodingKey {
            case ids = "Ids"
            case isAll = "IsAll"
        }
    }

    /// DeleteAttackLogs返回参数结构体
    public struct DeleteAttackLogsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除网络攻击日志
    @inlinable @discardableResult
    public func deleteAttackLogs(_ input: DeleteAttackLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAttackLogsResponse> {
        self.client.execute(action: "DeleteAttackLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除网络攻击日志
    @inlinable @discardableResult
    public func deleteAttackLogs(_ input: DeleteAttackLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAttackLogsResponse {
        try await self.client.execute(action: "DeleteAttackLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除网络攻击日志
    @inlinable @discardableResult
    public func deleteAttackLogs(ids: [UInt64]? = nil, isAll: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAttackLogsResponse> {
        self.deleteAttackLogs(.init(ids: ids, isAll: isAll), region: region, logger: logger, on: eventLoop)
    }

    /// 删除网络攻击日志
    @inlinable @discardableResult
    public func deleteAttackLogs(ids: [UInt64]? = nil, isAll: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAttackLogsResponse {
        try await self.deleteAttackLogs(.init(ids: ids, isAll: isAll), region: region, logger: logger, on: eventLoop)
    }
}
