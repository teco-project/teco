//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// DeleteProtectDir请求参数结构体
    public struct DeleteProtectDirRequest: TCRequestModel {
        /// 删除的目录ID 最大100条
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        enum CodingKeys: String, CodingKey {
            case ids = "Ids"
        }
    }

    /// DeleteProtectDir返回参数结构体
    public struct DeleteProtectDirResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除防护网站
    @inlinable @discardableResult
    public func deleteProtectDir(_ input: DeleteProtectDirRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteProtectDirResponse> {
        self.client.execute(action: "DeleteProtectDir", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除防护网站
    @inlinable @discardableResult
    public func deleteProtectDir(_ input: DeleteProtectDirRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteProtectDirResponse {
        try await self.client.execute(action: "DeleteProtectDir", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除防护网站
    @inlinable @discardableResult
    public func deleteProtectDir(ids: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteProtectDirResponse> {
        let input = DeleteProtectDirRequest(ids: ids)
        return self.client.execute(action: "DeleteProtectDir", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除防护网站
    @inlinable @discardableResult
    public func deleteProtectDir(ids: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteProtectDirResponse {
        let input = DeleteProtectDirRequest(ids: ids)
        return try await self.client.execute(action: "DeleteProtectDir", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
