//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// DescribeMalwareRiskWarning请求参数结构体
    public struct DescribeMalwareRiskWarningRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeMalwareRiskWarning返回参数结构体
    public struct DescribeMalwareRiskWarningResponse: TCResponseModel {
        /// 是否开启自动扫描：true-开启，false-未开启
        public let isCheckRisk: Bool

        /// 风险文件列表信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [MalwareRisk]?

        /// 是否弹出提示 true 弹出, false不弹
        public let isPop: Bool

        /// 异常进程列表信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processList: [MalwareRisk]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case isCheckRisk = "IsCheckRisk"
            case list = "List"
            case isPop = "IsPop"
            case processList = "ProcessList"
            case requestId = "RequestId"
        }
    }

    /// 风险预警提示
    ///
    /// 打开入侵检测-恶意文件检测,弹出风险预警内容
    @inlinable
    public func describeMalwareRiskWarning(_ input: DescribeMalwareRiskWarningRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMalwareRiskWarningResponse> {
        self.client.execute(action: "DescribeMalwareRiskWarning", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 风险预警提示
    ///
    /// 打开入侵检测-恶意文件检测,弹出风险预警内容
    @inlinable
    public func describeMalwareRiskWarning(_ input: DescribeMalwareRiskWarningRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMalwareRiskWarningResponse {
        try await self.client.execute(action: "DescribeMalwareRiskWarning", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 风险预警提示
    ///
    /// 打开入侵检测-恶意文件检测,弹出风险预警内容
    @inlinable
    public func describeMalwareRiskWarning(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMalwareRiskWarningResponse> {
        let input = DescribeMalwareRiskWarningRequest()
        return self.client.execute(action: "DescribeMalwareRiskWarning", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 风险预警提示
    ///
    /// 打开入侵检测-恶意文件检测,弹出风险预警内容
    @inlinable
    public func describeMalwareRiskWarning(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMalwareRiskWarningResponse {
        let input = DescribeMalwareRiskWarningRequest()
        return try await self.client.execute(action: "DescribeMalwareRiskWarning", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
