//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ScanAsset请求参数结构体
    public struct ScanAssetRequest: TCRequestModel {
        /// 资产指纹类型id列表
        public let assetTypeIds: [UInt64]?

        /// Quuid列表
        public let quuids: [String]?

        public init(assetTypeIds: [UInt64]? = nil, quuids: [String]? = nil) {
            self.assetTypeIds = assetTypeIds
            self.quuids = quuids
        }

        enum CodingKeys: String, CodingKey {
            case assetTypeIds = "AssetTypeIds"
            case quuids = "Quuids"
        }
    }

    /// ScanAsset返回参数结构体
    public struct ScanAssetResponse: TCResponseModel {
        /// 任务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 资产指纹启动扫描
    @inlinable
    public func scanAsset(_ input: ScanAssetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScanAssetResponse> {
        self.client.execute(action: "ScanAsset", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 资产指纹启动扫描
    @inlinable
    public func scanAsset(_ input: ScanAssetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScanAssetResponse {
        try await self.client.execute(action: "ScanAsset", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 资产指纹启动扫描
    @inlinable
    public func scanAsset(assetTypeIds: [UInt64]? = nil, quuids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScanAssetResponse> {
        self.scanAsset(.init(assetTypeIds: assetTypeIds, quuids: quuids), region: region, logger: logger, on: eventLoop)
    }

    /// 资产指纹启动扫描
    @inlinable
    public func scanAsset(assetTypeIds: [UInt64]? = nil, quuids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScanAssetResponse {
        try await self.scanAsset(.init(assetTypeIds: assetTypeIds, quuids: quuids), region: region, logger: logger, on: eventLoop)
    }
}
