//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ModifyBaselineRule请求参数结构体
    public struct ModifyBaselineRuleRequest: TCRequestModel {
        /// 无
        public let data: BaselineRule

        /// 是否过滤全选
        public let selectAll: Int64?

        /// <li>ItemName - string - 是否必填：否 - 项名称</li>
        public let filters: [Filter]?

        public init(data: BaselineRule, selectAll: Int64? = nil, filters: [Filter]? = nil) {
            self.data = data
            self.selectAll = selectAll
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case selectAll = "SelectAll"
            case filters = "Filters"
        }
    }

    /// ModifyBaselineRule返回参数结构体
    public struct ModifyBaselineRuleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改或新增基线检测规则
    ///
    /// 更改基线检测规则
    @inlinable @discardableResult
    public func modifyBaselineRule(_ input: ModifyBaselineRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBaselineRuleResponse> {
        self.client.execute(action: "ModifyBaselineRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改或新增基线检测规则
    ///
    /// 更改基线检测规则
    @inlinable @discardableResult
    public func modifyBaselineRule(_ input: ModifyBaselineRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBaselineRuleResponse {
        try await self.client.execute(action: "ModifyBaselineRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改或新增基线检测规则
    ///
    /// 更改基线检测规则
    @inlinable @discardableResult
    public func modifyBaselineRule(data: BaselineRule, selectAll: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBaselineRuleResponse> {
        self.modifyBaselineRule(.init(data: data, selectAll: selectAll, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 修改或新增基线检测规则
    ///
    /// 更改基线检测规则
    @inlinable @discardableResult
    public func modifyBaselineRule(data: BaselineRule, selectAll: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBaselineRuleResponse {
        try await self.modifyBaselineRule(.init(data: data, selectAll: selectAll, filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
