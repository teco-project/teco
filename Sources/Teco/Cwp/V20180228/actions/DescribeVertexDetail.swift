//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeVertexDetail请求参数结构体
    public struct DescribeVertexDetailRequest: TCRequest {
        /// 点id列表
        public let vertexIds: [String]

        /// 事件id
        public let incidentId: String

        /// 事件所在表名
        public let tableName: String

        public init(vertexIds: [String], incidentId: String, tableName: String) {
            self.vertexIds = vertexIds
            self.incidentId = incidentId
            self.tableName = tableName
        }

        enum CodingKeys: String, CodingKey {
            case vertexIds = "VertexIds"
            case incidentId = "IncidentId"
            case tableName = "TableName"
        }
    }

    /// DescribeVertexDetail返回参数结构体
    public struct DescribeVertexDetailResponse: TCResponse {
        /// 指定点列表的属性信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vertexDetails: [VertexDetail]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case vertexDetails = "VertexDetails"
            case requestId = "RequestId"
        }
    }

    /// 获取指定点属性信息
    @inlinable
    public func describeVertexDetail(_ input: DescribeVertexDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVertexDetailResponse> {
        self.client.execute(action: "DescribeVertexDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取指定点属性信息
    @inlinable
    public func describeVertexDetail(_ input: DescribeVertexDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVertexDetailResponse {
        try await self.client.execute(action: "DescribeVertexDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取指定点属性信息
    @inlinable
    public func describeVertexDetail(vertexIds: [String], incidentId: String, tableName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVertexDetailResponse> {
        self.describeVertexDetail(.init(vertexIds: vertexIds, incidentId: incidentId, tableName: tableName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取指定点属性信息
    @inlinable
    public func describeVertexDetail(vertexIds: [String], incidentId: String, tableName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVertexDetailResponse {
        try await self.describeVertexDetail(.init(vertexIds: vertexIds, incidentId: incidentId, tableName: tableName), region: region, logger: logger, on: eventLoop)
    }
}
