//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// ExportBaselineHostDetectList请求参数结构体
    public struct ExportBaselineHostDetectListRequest: TCRequestModel {
        /// <li>HostTag - string - 是否必填：否 - 主机标签</i>
        /// <li>ItemId - int64 - 是否必填：否 - 项Id</i>
        /// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
        /// <li>IsPassed - int - 是否必填：否 - 是否通过</li>
        /// <li>RiskTier - int - 是否必填：否 - 风险等级</li>
        public let filters: [Filter]?

        /// 0:过滤的结果导出；1:全部导出
        public let exportAll: Int64?

        public init(filters: [Filter]? = nil, exportAll: Int64? = nil) {
            self.filters = filters
            self.exportAll = exportAll
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case exportAll = "ExportAll"
        }
    }

    /// ExportBaselineHostDetectList返回参数结构体
    public struct ExportBaselineHostDetectListResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 导出基线主机检测
    @inlinable @discardableResult
    public func exportBaselineHostDetectList(_ input: ExportBaselineHostDetectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportBaselineHostDetectListResponse> {
        self.client.execute(action: "ExportBaselineHostDetectList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导出基线主机检测
    @inlinable @discardableResult
    public func exportBaselineHostDetectList(_ input: ExportBaselineHostDetectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportBaselineHostDetectListResponse {
        try await self.client.execute(action: "ExportBaselineHostDetectList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导出基线主机检测
    @inlinable @discardableResult
    public func exportBaselineHostDetectList(filters: [Filter]? = nil, exportAll: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportBaselineHostDetectListResponse> {
        self.exportBaselineHostDetectList(.init(filters: filters, exportAll: exportAll), region: region, logger: logger, on: eventLoop)
    }

    /// 导出基线主机检测
    @inlinable @discardableResult
    public func exportBaselineHostDetectList(filters: [Filter]? = nil, exportAll: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportBaselineHostDetectListResponse {
        try await self.exportBaselineHostDetectList(.init(filters: filters, exportAll: exportAll), region: region, logger: logger, on: eventLoop)
    }
}
