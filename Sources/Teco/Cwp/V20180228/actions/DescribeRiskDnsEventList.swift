//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Cwp {
    /// DescribeRiskDnsEventList请求参数结构体
    public struct DescribeRiskDnsEventListRequest: TCPaginatedRequest {
        /// <li>IpOrName - String - 是否必填：否 - 主机Ip或别名筛选</li>
        /// <li>HostId - String - 是否必填：否 - 主机Id</li>
        /// <li>AgentId - String - 是否必填：否 - 客户端Id</li>
        /// <li>PolicyType - String - 是否必填：否 - 策略类型,0:系统策略1:用户自定义策略</li>
        /// <li>Domain - String - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
        /// <li>HandleStatus - String - 是否必填：否 - 状态筛选0:待处理；2:信任；3:不信任</li>
        /// <li>BeginTime - String - 是否必填：否 - 最近访问开始时间</li>
        /// <li>EndTime - String - 是否必填：否 - 最近访问结束时间</li>
        public let filters: [Filter]?

        /// 需要返回的数量，默认为10，最大值为100
        public let limit: Int64?

        /// 偏移量，默认为0。
        public let offset: Int64?

        /// 排序方式：根据请求次数排序：[asc:升序|desc:降序]
        public let order: String?

        /// 排序字段：[AccessCount:请求次数|LastTime:最近请求时间]
        public let by: String?

        public init(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, by: String? = nil) {
            self.filters = filters
            self.limit = limit
            self.offset = offset
            self.order = order
            self.by = by
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
            case order = "Order"
            case by = "By"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRiskDnsEventListResponse) -> DescribeRiskDnsEventListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeRiskDnsEventListRequest(filters: self.filters, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), order: self.order, by: self.by)
        }
    }

    /// DescribeRiskDnsEventList返回参数结构体
    public struct DescribeRiskDnsEventListResponse: TCPaginatedResponse {
        /// 恶意请求事件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [RiskDnsEvent]?

        /// 总数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RiskDnsEvent`` list from the paginated response.
        public func getItems() -> [RiskDnsEvent] {
            self.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取恶意请求事件列表
    @inlinable
    public func describeRiskDnsEventList(_ input: DescribeRiskDnsEventListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRiskDnsEventListResponse> {
        self.client.execute(action: "DescribeRiskDnsEventList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取恶意请求事件列表
    @inlinable
    public func describeRiskDnsEventList(_ input: DescribeRiskDnsEventListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRiskDnsEventListResponse {
        try await self.client.execute(action: "DescribeRiskDnsEventList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取恶意请求事件列表
    @inlinable
    public func describeRiskDnsEventList(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRiskDnsEventListResponse> {
        self.describeRiskDnsEventList(.init(filters: filters, limit: limit, offset: offset, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 获取恶意请求事件列表
    @inlinable
    public func describeRiskDnsEventList(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRiskDnsEventListResponse {
        try await self.describeRiskDnsEventList(.init(filters: filters, limit: limit, offset: offset, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 获取恶意请求事件列表
    @inlinable
    public func describeRiskDnsEventListPaginated(_ input: DescribeRiskDnsEventListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RiskDnsEvent])> {
        self.client.paginate(input: input, region: region, command: self.describeRiskDnsEventList, logger: logger, on: eventLoop)
    }

    /// 获取恶意请求事件列表
    @inlinable @discardableResult
    public func describeRiskDnsEventListPaginated(_ input: DescribeRiskDnsEventListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRiskDnsEventListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRiskDnsEventList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取恶意请求事件列表
    ///
    /// - Returns: `AsyncSequence`s of ``RiskDnsEvent`` and ``DescribeRiskDnsEventListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRiskDnsEventListPaginator(_ input: DescribeRiskDnsEventListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRiskDnsEventListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRiskDnsEventList, logger: logger, on: eventLoop)
    }
}
