//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// DescribeMalwareInfo请求参数结构体
    public struct DescribeMalwareInfoRequest: TCRequestModel {
        /// 唯一ID
        public let id: Int64

        public init(id: Int64) {
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// DescribeMalwareInfo返回参数结构体
    public struct DescribeMalwareInfoResponse: TCResponseModel {
        /// 恶意文件详情信息
        public let malwareInfo: MalwareInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case malwareInfo = "MalwareInfo"
            case requestId = "RequestId"
        }
    }

    /// 查看恶意文件详情
    @inlinable
    public func describeMalwareInfo(_ input: DescribeMalwareInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMalwareInfoResponse> {
        self.client.execute(action: "DescribeMalwareInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看恶意文件详情
    @inlinable
    public func describeMalwareInfo(_ input: DescribeMalwareInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMalwareInfoResponse {
        try await self.client.execute(action: "DescribeMalwareInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看恶意文件详情
    @inlinable
    public func describeMalwareInfo(id: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMalwareInfoResponse> {
        let input = DescribeMalwareInfoRequest(id: id)
        return self.client.execute(action: "DescribeMalwareInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看恶意文件详情
    @inlinable
    public func describeMalwareInfo(id: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMalwareInfoResponse {
        let input = DescribeMalwareInfoRequest(id: id)
        return try await self.client.execute(action: "DescribeMalwareInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
