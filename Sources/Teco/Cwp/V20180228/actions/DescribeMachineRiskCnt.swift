//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeMachineRiskCnt请求参数结构体
    public struct DescribeMachineRiskCntRequest: TCRequest {
        /// 过滤条件。
        /// - Uuids- String - 是否必填：否 - 主机uuid
        public let filters: [Filter]?

        public init(filters: [Filter]? = nil) {
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
        }
    }

    /// DescribeMachineRiskCnt返回参数结构体
    public struct DescribeMachineRiskCntResponse: TCResponse {
        /// 异地登录
        public let hostLogin: UInt64

        /// 密码破解
        public let bruteAttack: UInt64

        /// 恶意请求
        public let maliciousRequest: UInt64

        /// 反弹shell
        public let reverseShell: UInt64

        /// 高危命令
        public let bash: UInt64

        /// 本地提权
        public let privilegeEscalation: UInt64

        /// 木马
        public let malware: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case hostLogin = "HostLogin"
            case bruteAttack = "BruteAttack"
            case maliciousRequest = "MaliciousRequest"
            case reverseShell = "ReverseShell"
            case bash = "Bash"
            case privilegeEscalation = "PrivilegeEscalation"
            case malware = "Malware"
            case requestId = "RequestId"
        }
    }

    /// 查询主机入侵检测事件统计
    @inlinable
    public func describeMachineRiskCnt(_ input: DescribeMachineRiskCntRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMachineRiskCntResponse> {
        self.client.execute(action: "DescribeMachineRiskCnt", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询主机入侵检测事件统计
    @inlinable
    public func describeMachineRiskCnt(_ input: DescribeMachineRiskCntRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMachineRiskCntResponse {
        try await self.client.execute(action: "DescribeMachineRiskCnt", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询主机入侵检测事件统计
    @inlinable
    public func describeMachineRiskCnt(filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMachineRiskCntResponse> {
        self.describeMachineRiskCnt(.init(filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询主机入侵检测事件统计
    @inlinable
    public func describeMachineRiskCnt(filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMachineRiskCntResponse {
        try await self.describeMachineRiskCnt(.init(filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
