//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// DescribeBaselineTop请求参数结构体
    public struct DescribeBaselineTopRequest: TCRequestModel {
        /// 动态top值
        public let top: UInt64

        /// 策略id
        public let strategyId: UInt64

        public init(top: UInt64, strategyId: UInt64) {
            self.top = top
            self.strategyId = strategyId
        }

        enum CodingKeys: String, CodingKey {
            case top = "Top"
            case strategyId = "StrategyId"
        }
    }

    /// DescribeBaselineTop返回参数结构体
    public struct DescribeBaselineTopResponse: TCResponseModel {
        /// 检测项Top列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleTopList: [BaselineRuleTopInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ruleTopList = "RuleTopList"
            case requestId = "RequestId"
        }
    }

    /// 基线检测项TOP
    ///
    /// 根据策略id查询基线检测项TOP
    @inlinable
    public func describeBaselineTop(_ input: DescribeBaselineTopRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBaselineTopResponse> {
        self.client.execute(action: "DescribeBaselineTop", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 基线检测项TOP
    ///
    /// 根据策略id查询基线检测项TOP
    @inlinable
    public func describeBaselineTop(_ input: DescribeBaselineTopRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBaselineTopResponse {
        try await self.client.execute(action: "DescribeBaselineTop", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 基线检测项TOP
    ///
    /// 根据策略id查询基线检测项TOP
    @inlinable
    public func describeBaselineTop(top: UInt64, strategyId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBaselineTopResponse> {
        self.describeBaselineTop(.init(top: top, strategyId: strategyId), region: region, logger: logger, on: eventLoop)
    }

    /// 基线检测项TOP
    ///
    /// 根据策略id查询基线检测项TOP
    @inlinable
    public func describeBaselineTop(top: UInt64, strategyId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBaselineTopResponse {
        try await self.describeBaselineTop(.init(top: top, strategyId: strategyId), region: region, logger: logger, on: eventLoop)
    }
}
