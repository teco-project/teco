//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeLogStorageConfig请求参数结构体
    public struct DescribeLogStorageConfigRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeLogStorageConfig返回参数结构体
    public struct DescribeLogStorageConfigResponse: TCResponseModel {
        /// 存储类型，string数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: [String]?

        /// 日志存储天数，3640表示不限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let period: Int64?

        /// 本月Period的修改次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let periodModifyCount: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case period = "Period"
            case periodModifyCount = "PeriodModifyCount"
            case requestId = "RequestId"
        }
    }

    /// 获取日志存储配置
    @inlinable
    public func describeLogStorageConfig(_ input: DescribeLogStorageConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLogStorageConfigResponse> {
        self.client.execute(action: "DescribeLogStorageConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取日志存储配置
    @inlinable
    public func describeLogStorageConfig(_ input: DescribeLogStorageConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLogStorageConfigResponse {
        try await self.client.execute(action: "DescribeLogStorageConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取日志存储配置
    @inlinable
    public func describeLogStorageConfig(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLogStorageConfigResponse> {
        self.describeLogStorageConfig(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 获取日志存储配置
    @inlinable
    public func describeLogStorageConfig(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLogStorageConfigResponse {
        try await self.describeLogStorageConfig(.init(), region: region, logger: logger, on: eventLoop)
    }
}
