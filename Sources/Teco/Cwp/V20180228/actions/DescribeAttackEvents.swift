//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cwp {
    /// DescribeAttackEvents请求参数结构体
    public struct DescribeAttackEventsRequest: TCPaginatedRequest {
        /// 返回数量，最大值为100。
        public let limit: UInt64?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 过滤条件。
        /// - Type - String 攻击状态 0: 尝试攻击 1: 攻击成功 - 是否必填: 否
        /// - Status - String 事件处理状态 0：待处理 1：已处理 2： 已加白 3： 已忽略 4：已删除  - 是否必填: 否
        /// - SrcIP - String 来源IP - 是否必填: 否
        /// - Uuids - String 主机安全uuid - 是否必填: 否
        /// - Quuids - String cvm uuid - 是否必填: 否
        /// - DstPort - String 攻击目标端口 - 是否必填: 否
        /// - MachineName - String 主机名称 - 是否必填: 否
        /// - InstanceID - String 主机实例ID - 是否必填: 否
        /// - AttackTimeBegin - String 攻击开始时间 - 是否必填: 否
        /// - AttackTimeEnd - String 攻击结束时间 - 是否必填: 否
        /// - VulSupportDefense - String 漏洞是否支持防御 0不支持，1支持 - 是否必填: 否
        public let filters: [Filter]?

        /// 排序
        public let by: String?

        /// 排序方式 ASC,DESC
        public let order: String?

        public init(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, by: String? = nil, order: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.by = by
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case by = "By"
            case order = "Order"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAttackEventsResponse) -> DescribeAttackEventsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters, by: self.by, order: self.order)
        }
    }

    /// DescribeAttackEvents返回参数结构体
    public struct DescribeAttackEventsResponse: TCPaginatedResponse {
        /// 攻击事件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [NetAttackEvent]?

        /// 总条数
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``NetAttackEvent`` list from the paginated response.
        public func getItems() -> [NetAttackEvent] {
            self.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 网络攻击检测事件列表
    ///
    /// 按分页形式展示网络攻击检测事件列表
    @inlinable
    public func describeAttackEvents(_ input: DescribeAttackEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAttackEventsResponse> {
        self.client.execute(action: "DescribeAttackEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 网络攻击检测事件列表
    ///
    /// 按分页形式展示网络攻击检测事件列表
    @inlinable
    public func describeAttackEvents(_ input: DescribeAttackEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAttackEventsResponse {
        try await self.client.execute(action: "DescribeAttackEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 网络攻击检测事件列表
    ///
    /// 按分页形式展示网络攻击检测事件列表
    @inlinable
    public func describeAttackEvents(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, by: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAttackEventsResponse> {
        self.describeAttackEvents(.init(limit: limit, offset: offset, filters: filters, by: by, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 网络攻击检测事件列表
    ///
    /// 按分页形式展示网络攻击检测事件列表
    @inlinable
    public func describeAttackEvents(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, by: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAttackEventsResponse {
        try await self.describeAttackEvents(.init(limit: limit, offset: offset, filters: filters, by: by, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 网络攻击检测事件列表
    ///
    /// 按分页形式展示网络攻击检测事件列表
    @inlinable
    public func describeAttackEventsPaginated(_ input: DescribeAttackEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [NetAttackEvent])> {
        self.client.paginate(input: input, region: region, command: self.describeAttackEvents, logger: logger, on: eventLoop)
    }

    /// 网络攻击检测事件列表
    ///
    /// 按分页形式展示网络攻击检测事件列表
    @inlinable @discardableResult
    public func describeAttackEventsPaginated(_ input: DescribeAttackEventsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAttackEventsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAttackEvents, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 网络攻击检测事件列表
    ///
    /// 按分页形式展示网络攻击检测事件列表
    ///
    /// - Returns: `AsyncSequence`s of ``NetAttackEvent`` and ``DescribeAttackEventsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAttackEventsPaginator(_ input: DescribeAttackEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAttackEventsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAttackEvents, logger: logger, on: eventLoop)
    }
}
