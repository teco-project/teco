//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cwp {
    /// 隔离木马
    ///
    /// 本接口（SeparateMalwares）用于隔离木马。
    @inlinable
    public func separateMalwares(_ input: SeparateMalwaresRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < SeparateMalwaresResponse > {
        self.client.execute(action: "SeparateMalwares", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 隔离木马
    ///
    /// 本接口（SeparateMalwares）用于隔离木马。
    @inlinable
    public func separateMalwares(_ input: SeparateMalwaresRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SeparateMalwaresResponse {
        try await self.client.execute(action: "SeparateMalwares", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// SeparateMalwares请求参数结构体
    public struct SeparateMalwaresRequest: TCRequestModel {
        /// 木马事件ID数组。(最大100条)
        public let ids: [UInt64]
        
        /// 是否杀掉进程
        public let killProcess: Bool?
        
        public init (ids: [UInt64], killProcess: Bool?) {
            self.ids = ids
            self.killProcess = killProcess
        }
        
        enum CodingKeys: String, CodingKey {
            case ids = "Ids"
            case killProcess = "KillProcess"
        }
    }
    
    /// SeparateMalwares返回参数结构体
    public struct SeparateMalwaresResponse: TCResponseModel {
        /// 隔离成功的id数组，若无则返回空数组
        public let successIds: [UInt64]
        
        /// 隔离失败的id数组，若无则返回空数组
        public let failedIds: [UInt64]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case successIds = "SuccessIds"
            case failedIds = "FailedIds"
            case requestId = "RequestId"
        }
    }
}
