//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCwpError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case dateRange = "InvalidParameter.DateRange"
            case illegalRequest = "InvalidParameter.IllegalRequest"
            case invalidFormat = "InvalidParameter.InvalidFormat"
            case ipNoValid = "InvalidParameter.IpNoValid"
            case missingParameter = "InvalidParameter.MissingParameter"
            case nameHasRepetition = "InvalidParameter.NameHasRepetition"
            case parsingError = "InvalidParameter.ParsingError"
            case regexRuleError = "InvalidParameter.RegexRuleError"
            case reverShellKeyFieldAllEmpty = "InvalidParameter.ReverShellKeyFieldAllEmpty"
            case ruleHostipErr = "InvalidParameter.RuleHostipErr"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 时间区间格式错误。
        public static var dateRange: InvalidParameter {
            InvalidParameter(.dateRange)
        }
        
        /// 非法请求。
        public static var illegalRequest: InvalidParameter {
            InvalidParameter(.illegalRequest)
        }
        
        /// 参数格式错误。
        public static var invalidFormat: InvalidParameter {
            InvalidParameter(.invalidFormat)
        }
        
        /// IP格式不合法。
        public static var ipNoValid: InvalidParameter {
            InvalidParameter(.ipNoValid)
        }
        
        /// 参数缺失。
        public static var missingParameter: InvalidParameter {
            InvalidParameter(.missingParameter)
        }
        
        /// 名字已重复。
        public static var nameHasRepetition: InvalidParameter {
            InvalidParameter(.nameHasRepetition)
        }
        
        /// 参数解析错误。
        public static var parsingError: InvalidParameter {
            InvalidParameter(.parsingError)
        }
        
        /// 正则参数格式错误。
        public static var regexRuleError: InvalidParameter {
            InvalidParameter(.regexRuleError)
        }
        
        /// 进程名/目标IP/目标端口，不能同时为空。
        public static var reverShellKeyFieldAllEmpty: InvalidParameter {
            InvalidParameter(.reverShellKeyFieldAllEmpty)
        }
        
        /// 规则类接口，主机IP不正确。
        public static var ruleHostipErr: InvalidParameter {
            InvalidParameter(.ruleHostipErr)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
    }
}

extension TCCwpError.InvalidParameter: Equatable {
    public static func == (lhs: TCCwpError.InvalidParameter, rhs: TCCwpError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCwpError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCwpError.InvalidParameter {
    /// - Returns: ``TCCwpError`` that holds the same error and context.
    public func toCwpError() -> TCCwpError {
        guard let code = TCCwpError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCwpError(code, context: self.context)
    }
}

extension TCCwpError.InvalidParameter {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
