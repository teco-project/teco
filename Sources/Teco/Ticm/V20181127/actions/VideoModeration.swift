//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ticm {
    /// VideoModeration请求参数结构体
    public struct VideoModerationRequest: TCRequest {
        /// 需要审核的视频的URL地址
        public let videoUrl: String

        /// 开发者标识
        public let developerId: String?

        /// 审核完成后回调地址
        public let cbUrl: String?

        /// 透传字段，透传简单信息。
        public let extra: String?

        public init(videoUrl: String, developerId: String? = nil, cbUrl: String? = nil, extra: String? = nil) {
            self.videoUrl = videoUrl
            self.developerId = developerId
            self.cbUrl = cbUrl
            self.extra = extra
        }

        enum CodingKeys: String, CodingKey {
            case videoUrl = "VideoUrl"
            case developerId = "DeveloperId"
            case cbUrl = "CBUrl"
            case extra = "Extra"
        }
    }

    /// VideoModeration返回参数结构体
    public struct VideoModerationResponse: TCResponse {
        /// 视频审核任务ID
        public let vodTaskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case vodTaskId = "VodTaskId"
            case requestId = "RequestId"
        }
    }

    /// 视频内容识别
    ///
    /// 本接口提供多种维度的视频审核能力，支持色情和性感内容识别，政治人物和涉政敏感场景识别，以及暴恐人物、场景、旗帜标识等违禁内容的识别。
    @inlinable
    public func videoModeration(_ input: VideoModerationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VideoModerationResponse> {
        self.client.execute(action: "VideoModeration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 视频内容识别
    ///
    /// 本接口提供多种维度的视频审核能力，支持色情和性感内容识别，政治人物和涉政敏感场景识别，以及暴恐人物、场景、旗帜标识等违禁内容的识别。
    @inlinable
    public func videoModeration(_ input: VideoModerationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VideoModerationResponse {
        try await self.client.execute(action: "VideoModeration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 视频内容识别
    ///
    /// 本接口提供多种维度的视频审核能力，支持色情和性感内容识别，政治人物和涉政敏感场景识别，以及暴恐人物、场景、旗帜标识等违禁内容的识别。
    @inlinable
    public func videoModeration(videoUrl: String, developerId: String? = nil, cbUrl: String? = nil, extra: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VideoModerationResponse> {
        self.videoModeration(.init(videoUrl: videoUrl, developerId: developerId, cbUrl: cbUrl, extra: extra), region: region, logger: logger, on: eventLoop)
    }

    /// 视频内容识别
    ///
    /// 本接口提供多种维度的视频审核能力，支持色情和性感内容识别，政治人物和涉政敏感场景识别，以及暴恐人物、场景、旗帜标识等违禁内容的识别。
    @inlinable
    public func videoModeration(videoUrl: String, developerId: String? = nil, cbUrl: String? = nil, extra: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VideoModerationResponse {
        try await self.videoModeration(.init(videoUrl: videoUrl, developerId: developerId, cbUrl: cbUrl, extra: extra), region: region, logger: logger, on: eventLoop)
    }
}
