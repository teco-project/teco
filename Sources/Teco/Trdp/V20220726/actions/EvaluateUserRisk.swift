//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Trdp {
    /// EvaluateUserRisk请求参数结构体
    public struct EvaluateUserRiskRequest: TCRequestModel {
        /// 账号信息
        public let account: AccountInfo

        /// 用户信息
        public let user: UserInfo

        /// 模型ID
        public let modelId: String

        /// 设备指纹信息
        public let deviceFingerprint: DeviceFingerprintInfo?

        /// 场景Code，不传默认活动防刷；
        /// e_activity_antirush；活动防刷场景
        /// e_login_protection；登录保护场景
        /// e_register_protection：注册保护场景
        public let sceneCode: String?

        /// 设备详情
        public let deviceDetail: DeviceDetailInfo?

        /// 营销信息
        public let marketing: MarketingInfo?

        public init(account: AccountInfo, user: UserInfo, modelId: String, deviceFingerprint: DeviceFingerprintInfo? = nil, sceneCode: String? = nil, deviceDetail: DeviceDetailInfo? = nil, marketing: MarketingInfo? = nil) {
            self.account = account
            self.user = user
            self.modelId = modelId
            self.deviceFingerprint = deviceFingerprint
            self.sceneCode = sceneCode
            self.deviceDetail = deviceDetail
            self.marketing = marketing
        }

        enum CodingKeys: String, CodingKey {
            case account = "Account"
            case user = "User"
            case modelId = "ModelId"
            case deviceFingerprint = "DeviceFingerprint"
            case sceneCode = "SceneCode"
            case deviceDetail = "DeviceDetail"
            case marketing = "Marketing"
        }
    }

    /// EvaluateUserRisk返回参数结构体
    public struct EvaluateUserRiskResponse: TCResponseModel {
        /// 评估结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let evaluationResult: EvaluationResult?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case evaluationResult = "EvaluationResult"
            case requestId = "RequestId"
        }
    }

    /// 用户风险质量接口
    @inlinable
    public func evaluateUserRisk(_ input: EvaluateUserRiskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EvaluateUserRiskResponse> {
        self.client.execute(action: "EvaluateUserRisk", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 用户风险质量接口
    @inlinable
    public func evaluateUserRisk(_ input: EvaluateUserRiskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EvaluateUserRiskResponse {
        try await self.client.execute(action: "EvaluateUserRisk", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 用户风险质量接口
    @inlinable
    public func evaluateUserRisk(account: AccountInfo, user: UserInfo, modelId: String, deviceFingerprint: DeviceFingerprintInfo? = nil, sceneCode: String? = nil, deviceDetail: DeviceDetailInfo? = nil, marketing: MarketingInfo? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EvaluateUserRiskResponse> {
        self.evaluateUserRisk(EvaluateUserRiskRequest(account: account, user: user, modelId: modelId, deviceFingerprint: deviceFingerprint, sceneCode: sceneCode, deviceDetail: deviceDetail, marketing: marketing), logger: logger, on: eventLoop)
    }

    /// 用户风险质量接口
    @inlinable
    public func evaluateUserRisk(account: AccountInfo, user: UserInfo, modelId: String, deviceFingerprint: DeviceFingerprintInfo? = nil, sceneCode: String? = nil, deviceDetail: DeviceDetailInfo? = nil, marketing: MarketingInfo? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EvaluateUserRiskResponse {
        try await self.evaluateUserRisk(EvaluateUserRiskRequest(account: account, user: user, modelId: modelId, deviceFingerprint: deviceFingerprint, sceneCode: sceneCode, deviceDetail: deviceDetail, marketing: marketing), logger: logger, on: eventLoop)
    }
}
