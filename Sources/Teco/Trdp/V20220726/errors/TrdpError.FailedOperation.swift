//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTrdpError {
    public struct FailedOperation: TCTrdpErrorType {
        enum Code: String {
            case deviceFingerprintNotFound = "FailedOperation.DeviceFingerprintNotFound"
            case unKnownModelId = "FailedOperation.UnKnownModelId"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 未发现有效的设备指纹数据。
        public static var deviceFingerprintNotFound: FailedOperation {
            FailedOperation(.deviceFingerprintNotFound)
        }

        /// ModelId 未开通。
        public static var unKnownModelId: FailedOperation {
            FailedOperation(.unKnownModelId)
        }

        public func asTrdpError() -> TCTrdpError {
            let code: TCTrdpError.Code
            switch self.error {
            case .deviceFingerprintNotFound:
                code = .failedOperation_DeviceFingerprintNotFound
            case .unKnownModelId:
                code = .failedOperation_UnKnownModelId
            }
            return TCTrdpError(code, context: self.context)
        }
    }
}
