//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmvpc {
    /// 创建黑石私有网络的子网
    ///
    /// 创建黑石私有网络的子网
    /// 访问管理: 用户可以对VpcId进行授权操作。例如设置资源为["qcs::bmvpc:::unVpc/vpc-xxxxx"]
    @inlinable
    public func createSubnet(_ input: CreateSubnetRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateSubnetResponse > {
        self.client.execute(action: "CreateSubnet", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建黑石私有网络的子网
    ///
    /// 创建黑石私有网络的子网
    /// 访问管理: 用户可以对VpcId进行授权操作。例如设置资源为["qcs::bmvpc:::unVpc/vpc-xxxxx"]
    @inlinable
    public func createSubnet(_ input: CreateSubnetRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSubnetResponse {
        try await self.client.execute(action: "CreateSubnet", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateSubnet请求参数结构体
    public struct CreateSubnetRequest: TCRequestModel {
        /// 系统分配的私有网络ID，例如：vpc-kd7d06of
        public let vpcId: String
        
        /// 子网信息
        public let subnetSet: [SubnetCreateInputInfo]
        
        public init (vpcId: String, subnetSet: [SubnetCreateInputInfo]) {
            self.vpcId = vpcId
            self.subnetSet = subnetSet
        }
        
        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetSet = "SubnetSet"
        }
    }
    
    /// CreateSubnet返回参数结构体
    public struct CreateSubnetResponse: TCResponseModel {
        /// 任务ID
        public let taskId: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }
}
