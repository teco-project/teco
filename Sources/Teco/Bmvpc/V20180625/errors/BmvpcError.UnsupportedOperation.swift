//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCBmvpcError {
    public struct UnsupportedOperation: TCErrorType {
        enum Code: String {
            case customerGatewayAddrExist = "UnsupportedOperation.CustomerGatewayAddrExist"
            case customerGatewayAddrInvalid = "UnsupportedOperation.CustomerGatewayAddrInvalid"
            case invalidVpcPeerState = "UnsupportedOperation.InvalidVpcPeerState"
            case invalidVpnConnState = "UnsupportedOperation.InvalidVpnConnState"
            case spdAclCidrInvalid = "UnsupportedOperation.SpdAclCidrInvalid"
            case spdSnetNotInCidr = "UnsupportedOperation.SpdSnetNotInCidr"
            case vpcCidrConfict = "UnsupportedOperation.VpcCidrConfict"
            case vpcPeerExist = "UnsupportedOperation.VpcPeerExist"
            case vpnConnExist = "UnsupportedOperation.VpnConnExist"
            case vpnConnInUse = "UnsupportedOperation.VpnConnInUse"
            case other = "UnsupportedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 对端网关地址已存在。
        public static var customerGatewayAddrExist: UnsupportedOperation {
            UnsupportedOperation(.customerGatewayAddrExist)
        }
        
        /// 对端网关地址不合法。
        public static var customerGatewayAddrInvalid: UnsupportedOperation {
            UnsupportedOperation(.customerGatewayAddrInvalid)
        }
        
        /// 对等连接状态不正确。
        public static var invalidVpcPeerState: UnsupportedOperation {
            UnsupportedOperation(.invalidVpcPeerState)
        }
        
        /// VPN通道状态不正确。
        public static var invalidVpnConnState: UnsupportedOperation {
            UnsupportedOperation(.invalidVpnConnState)
        }
        
        /// SPD策略源目的地址冲突。
        public static var spdAclCidrInvalid: UnsupportedOperation {
            UnsupportedOperation(.spdAclCidrInvalid)
        }
        
        /// SPD策略源地址不在VPC网段内。
        public static var spdSnetNotInCidr: UnsupportedOperation {
            UnsupportedOperation(.spdSnetNotInCidr)
        }
        
        /// 对等连接CIDR冲突。
        public static var vpcCidrConfict: UnsupportedOperation {
            UnsupportedOperation(.vpcCidrConfict)
        }
        
        /// 对等连接已存在。
        public static var vpcPeerExist: UnsupportedOperation {
            UnsupportedOperation(.vpcPeerExist)
        }
        
        /// VPN通道已存在。
        public static var vpnConnExist: UnsupportedOperation {
            UnsupportedOperation(.vpnConnExist)
        }
        
        /// 存在VPN通道引用。
        public static var vpnConnInUse: UnsupportedOperation {
            UnsupportedOperation(.vpnConnInUse)
        }
        
        /// 操作不支持。
        public static var other: UnsupportedOperation {
            UnsupportedOperation(.other)
        }
    }
}

extension TCBmvpcError.UnsupportedOperation: Equatable {
    public static func == (lhs: TCBmvpcError.UnsupportedOperation, rhs: TCBmvpcError.UnsupportedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCBmvpcError.UnsupportedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCBmvpcError.UnsupportedOperation {
    public func toBmvpcError() -> TCBmvpcError {
        guard let code = TCBmvpcError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCBmvpcError(code, context: self.context)
    }
}