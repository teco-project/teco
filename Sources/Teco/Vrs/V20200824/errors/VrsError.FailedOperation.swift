//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCVrsError {
    public struct FailedOperation: TCVrsErrorType {
        enum Code: String {
            case errorInvalidTaskStatus = "FailedOperation.ErrorInvalidTaskStatus"
            case noSuchTask = "FailedOperation.NoSuchTask"
            case voiceEvaluateFailed = "FailedOperation.VoiceEvaluateFailed"
            case voiceNotQualified = "FailedOperation.VoiceNotQualified"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var errorInvalidTaskStatus: FailedOperation {
            FailedOperation(.errorInvalidTaskStatus)
        }

        /// 任务不存在。
        public static var noSuchTask: FailedOperation {
            FailedOperation(.noSuchTask)
        }

        /// 检测失败。
        public static var voiceEvaluateFailed: FailedOperation {
            FailedOperation(.voiceEvaluateFailed)
        }

        /// 音频质量差。
        public static var voiceNotQualified: FailedOperation {
            FailedOperation(.voiceNotQualified)
        }

        public func asVrsError() -> TCVrsError {
            let code: TCVrsError.Code
            switch self.error {
            case .errorInvalidTaskStatus:
                code = .failedOperation_ErrorInvalidTaskStatus
            case .noSuchTask:
                code = .failedOperation_NoSuchTask
            case .voiceEvaluateFailed:
                code = .failedOperation_VoiceEvaluateFailed
            case .voiceNotQualified:
                code = .failedOperation_VoiceNotQualified
            }
            return TCVrsError(code, context: self.context)
        }
    }
}
