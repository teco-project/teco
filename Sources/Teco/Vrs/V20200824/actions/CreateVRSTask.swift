//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vrs {
    /// CreateVRSTask请求参数结构体
    public struct CreateVRSTaskRequest: TCRequest {
        /// 唯一请求 ID
        public let sessionId: String

        /// 音色名称
        public let voiceName: String

        /// 音频采样率：
        ///
        /// 16000：16k
        public let sampleRate: Int64

        /// 音色性别:
        ///
        /// 1-male
        ///
        /// 2-female
        public let voiceGender: Int64

        /// 语言类型：
        ///
        /// 1-中文
        public let voiceLanguage: Int64

        /// 音频格式，音频类型(wav,mp3,aac,m4a)
        public let codec: String

        /// 音频ID集合
        public let audioIdList: [String]

        /// 回调 URL，用户自行搭建的用于接收结果的服务URL。如果用户使用轮询方式获取识别结果，则无需提交该参数。
        /// 回调采用POST请求方式，Content-Type为application/json，回调数据格式如下:{"TaskId":"xxxxxxxxxxxxxx","Status":2,"StatusStr":"success","VoiceType":xxxxx,"ErrorMsg":""}
        public let callbackUrl: String?

        /// 任务类型 1:在线 2:离线  默认为1
        public let modelType: Int64?

        public init(sessionId: String, voiceName: String, sampleRate: Int64, voiceGender: Int64, voiceLanguage: Int64, codec: String, audioIdList: [String], callbackUrl: String? = nil, modelType: Int64? = nil) {
            self.sessionId = sessionId
            self.voiceName = voiceName
            self.sampleRate = sampleRate
            self.voiceGender = voiceGender
            self.voiceLanguage = voiceLanguage
            self.codec = codec
            self.audioIdList = audioIdList
            self.callbackUrl = callbackUrl
            self.modelType = modelType
        }

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case voiceName = "VoiceName"
            case sampleRate = "SampleRate"
            case voiceGender = "VoiceGender"
            case voiceLanguage = "VoiceLanguage"
            case codec = "Codec"
            case audioIdList = "AudioIdList"
            case callbackUrl = "CallbackUrl"
            case modelType = "ModelType"
        }
    }

    /// CreateVRSTask返回参数结构体
    public struct CreateVRSTaskResponse: TCResponse {
        /// 创建任务结果
        public let data: CreateVRSTaskRespData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 声音复刻任务创建接口
    ///
    /// 本接口服务对提交音频进行声音复刻任务创建接口，异步返回复刻结果。
    /// • 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
    /// • 签名方法参考 公共参数 中签名方法v3。
    @inlinable
    public func createVRSTask(_ input: CreateVRSTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVRSTaskResponse> {
        self.client.execute(action: "CreateVRSTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 声音复刻任务创建接口
    ///
    /// 本接口服务对提交音频进行声音复刻任务创建接口，异步返回复刻结果。
    /// • 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
    /// • 签名方法参考 公共参数 中签名方法v3。
    @inlinable
    public func createVRSTask(_ input: CreateVRSTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVRSTaskResponse {
        try await self.client.execute(action: "CreateVRSTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 声音复刻任务创建接口
    ///
    /// 本接口服务对提交音频进行声音复刻任务创建接口，异步返回复刻结果。
    /// • 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
    /// • 签名方法参考 公共参数 中签名方法v3。
    @inlinable
    public func createVRSTask(sessionId: String, voiceName: String, sampleRate: Int64, voiceGender: Int64, voiceLanguage: Int64, codec: String, audioIdList: [String], callbackUrl: String? = nil, modelType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVRSTaskResponse> {
        self.createVRSTask(.init(sessionId: sessionId, voiceName: voiceName, sampleRate: sampleRate, voiceGender: voiceGender, voiceLanguage: voiceLanguage, codec: codec, audioIdList: audioIdList, callbackUrl: callbackUrl, modelType: modelType), region: region, logger: logger, on: eventLoop)
    }

    /// 声音复刻任务创建接口
    ///
    /// 本接口服务对提交音频进行声音复刻任务创建接口，异步返回复刻结果。
    /// • 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
    /// • 签名方法参考 公共参数 中签名方法v3。
    @inlinable
    public func createVRSTask(sessionId: String, voiceName: String, sampleRate: Int64, voiceGender: Int64, voiceLanguage: Int64, codec: String, audioIdList: [String], callbackUrl: String? = nil, modelType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVRSTaskResponse {
        try await self.createVRSTask(.init(sessionId: sessionId, voiceName: voiceName, sampleRate: sampleRate, voiceGender: voiceGender, voiceLanguage: voiceLanguage, codec: codec, audioIdList: audioIdList, callbackUrl: callbackUrl, modelType: modelType), region: region, logger: logger, on: eventLoop)
    }
}
