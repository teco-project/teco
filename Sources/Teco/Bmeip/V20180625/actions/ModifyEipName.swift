//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmeip {
    /// ModifyEipName请求参数结构体
    public struct ModifyEipNameRequest: TCRequestModel {
        /// Eip实例ID，可通过/v2/DescribeEip 接口返回字段中的 eipId获取
        public let eipId: String
        
        /// EIP 实例别名
        public let eipName: String
        
        public init (eipId: String, eipName: String) {
            self.eipId = eipId
            self.eipName = eipName
        }
        
        enum CodingKeys: String, CodingKey {
            case eipId = "EipId"
            case eipName = "EipName"
        }
    }
    
    /// ModifyEipName返回参数结构体
    public struct ModifyEipNameResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 更新黑石EIP名称
    @inlinable
    public func modifyEipName(_ input: ModifyEipNameRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyEipNameResponse > {
        self.client.execute(action: "ModifyEipName", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 更新黑石EIP名称
    @inlinable
    public func modifyEipName(_ input: ModifyEipNameRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEipNameResponse {
        try await self.client.execute(action: "ModifyEipName", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
