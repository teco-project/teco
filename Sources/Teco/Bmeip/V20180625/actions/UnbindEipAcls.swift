//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmeip {
    /// 解绑弹性公网IP ACL
    ///
    /// 解绑弹性公网IP ACL
    @inlinable
    public func unbindEipAcls(_ input: UnbindEipAclsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UnbindEipAclsResponse > {
        self.client.execute(action: "UnbindEipAcls", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 解绑弹性公网IP ACL
    ///
    /// 解绑弹性公网IP ACL
    @inlinable
    public func unbindEipAcls(_ input: UnbindEipAclsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UnbindEipAclsResponse {
        try await self.client.execute(action: "UnbindEipAcls", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// UnbindEipAcls请求参数结构体
    public struct UnbindEipAclsRequest: TCRequestModel {
        /// 待解关联的 EIP 与 ACL列表
        public let eipIdAclIdList: [EipAclMap]
        
        public init (eipIdAclIdList: [EipAclMap]) {
            self.eipIdAclIdList = eipIdAclIdList
        }
        
        enum CodingKeys: String, CodingKey {
            case eipIdAclIdList = "EipIdAclIdList"
        }
    }
    
    /// UnbindEipAcls返回参数结构体
    public struct UnbindEipAclsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}