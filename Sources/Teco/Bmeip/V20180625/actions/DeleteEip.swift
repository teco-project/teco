//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmeip {
    /// DeleteEip请求参数结构体
    public struct DeleteEipRequest: TCRequestModel {
        /// Eip实例ID列表
        public let eipIds: [String]

        public init(eipIds: [String]) {
            self.eipIds = eipIds
        }

        enum CodingKeys: String, CodingKey {
            case eipIds = "EipIds"
        }
    }

    /// DeleteEip返回参数结构体
    public struct DeleteEipResponse: TCResponseModel {
        /// 任务Id
        public let taskId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 释放黑石弹性公网IP
    @inlinable
    public func deleteEip(_ input: DeleteEipRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteEipResponse> {
        self.client.execute(action: "DeleteEip", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 释放黑石弹性公网IP
    @inlinable
    public func deleteEip(_ input: DeleteEipRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEipResponse {
        try await self.client.execute(action: "DeleteEip", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 释放黑石弹性公网IP
    @inlinable
    public func deleteEip(eipIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteEipResponse> {
        self.deleteEip(.init(eipIds: eipIds), region: region, logger: logger, on: eventLoop)
    }

    /// 释放黑石弹性公网IP
    @inlinable
    public func deleteEip(eipIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEipResponse {
        try await self.deleteEip(.init(eipIds: eipIds), region: region, logger: logger, on: eventLoop)
    }
}
