//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdwpg {
    /// CreateInstanceByApi请求参数结构体
    public struct CreateInstanceByApiRequest: TCRequest {
        /// 实例名称
        public let instanceName: String

        /// 可用区
        public let zone: String

        /// 私有网络
        public let userVPCId: String

        /// 子网
        public let userSubnetId: String

        /// 计费方式
        public let chargeProperties: ChargeProperties

        /// 集群密码
        public let adminPassword: String

        /// 资源信息
        public let resources: [ResourceSpecNew]

        /// 标签列表
        public let tags: Tag?

        public init(instanceName: String, zone: String, userVPCId: String, userSubnetId: String, chargeProperties: ChargeProperties, adminPassword: String, resources: [ResourceSpecNew], tags: Tag? = nil) {
            self.instanceName = instanceName
            self.zone = zone
            self.userVPCId = userVPCId
            self.userSubnetId = userSubnetId
            self.chargeProperties = chargeProperties
            self.adminPassword = adminPassword
            self.resources = resources
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case instanceName = "InstanceName"
            case zone = "Zone"
            case userVPCId = "UserVPCId"
            case userSubnetId = "UserSubnetId"
            case chargeProperties = "ChargeProperties"
            case adminPassword = "AdminPassword"
            case resources = "Resources"
            case tags = "Tags"
        }
    }

    /// CreateInstanceByApi返回参数结构体
    public struct CreateInstanceByApiResponse: TCResponse {
        /// 流程ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowId: String?

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case instanceId = "InstanceId"
            case errorMsg = "ErrorMsg"
            case requestId = "RequestId"
        }
    }

    /// 创建集群
    @inlinable
    public func createInstanceByApi(_ input: CreateInstanceByApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInstanceByApiResponse> {
        self.client.execute(action: "CreateInstanceByApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建集群
    @inlinable
    public func createInstanceByApi(_ input: CreateInstanceByApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInstanceByApiResponse {
        try await self.client.execute(action: "CreateInstanceByApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建集群
    @inlinable
    public func createInstanceByApi(instanceName: String, zone: String, userVPCId: String, userSubnetId: String, chargeProperties: ChargeProperties, adminPassword: String, resources: [ResourceSpecNew], tags: Tag? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInstanceByApiResponse> {
        self.createInstanceByApi(.init(instanceName: instanceName, zone: zone, userVPCId: userVPCId, userSubnetId: userSubnetId, chargeProperties: chargeProperties, adminPassword: adminPassword, resources: resources, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 创建集群
    @inlinable
    public func createInstanceByApi(instanceName: String, zone: String, userVPCId: String, userSubnetId: String, chargeProperties: ChargeProperties, adminPassword: String, resources: [ResourceSpecNew], tags: Tag? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInstanceByApiResponse {
        try await self.createInstanceByApi(.init(instanceName: instanceName, zone: zone, userVPCId: userVPCId, userSubnetId: userSubnetId, chargeProperties: chargeProperties, adminPassword: adminPassword, resources: resources, tags: tags), region: region, logger: logger, on: eventLoop)
    }
}
