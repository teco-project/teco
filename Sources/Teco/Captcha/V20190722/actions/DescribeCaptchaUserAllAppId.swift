//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Captcha {
    /// DescribeCaptchaUserAllAppId请求参数结构体
    public struct DescribeCaptchaUserAllAppIdRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeCaptchaUserAllAppId返回参数结构体
    public struct DescribeCaptchaUserAllAppIdResponse: TCResponseModel {
        /// 用户注册的所有Appid和应用名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [CaptchaUserAllAppId]?

        /// 成功返回 0  其它失败
        public let captchaCode: Int64

        /// 返回操作信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let captchaMsg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case captchaCode = "CaptchaCode"
            case captchaMsg = "CaptchaMsg"
            case requestId = "RequestId"
        }
    }

    /// 安全验证码获取用户注册所有APPId和应用名称
    @inlinable
    public func describeCaptchaUserAllAppId(_ input: DescribeCaptchaUserAllAppIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCaptchaUserAllAppIdResponse> {
        self.client.execute(action: "DescribeCaptchaUserAllAppId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 安全验证码获取用户注册所有APPId和应用名称
    @inlinable
    public func describeCaptchaUserAllAppId(_ input: DescribeCaptchaUserAllAppIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCaptchaUserAllAppIdResponse {
        try await self.client.execute(action: "DescribeCaptchaUserAllAppId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 安全验证码获取用户注册所有APPId和应用名称
    @inlinable
    public func describeCaptchaUserAllAppId(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCaptchaUserAllAppIdResponse> {
        let input = DescribeCaptchaUserAllAppIdRequest()
        return self.client.execute(action: "DescribeCaptchaUserAllAppId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 安全验证码获取用户注册所有APPId和应用名称
    @inlinable
    public func describeCaptchaUserAllAppId(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCaptchaUserAllAppIdResponse {
        let input = DescribeCaptchaUserAllAppIdRequest()
        return try await self.client.execute(action: "DescribeCaptchaUserAllAppId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
