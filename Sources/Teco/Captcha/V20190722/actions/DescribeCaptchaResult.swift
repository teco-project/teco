//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Captcha {
    /// DescribeCaptchaResult请求参数结构体
    public struct DescribeCaptchaResultRequest: TCRequestModel {
        /// 固定填值：9。可在控制台配置不同验证码类型。
        public let captchaType: UInt64

        /// 前端回调函数返回的用户验证票据
        public let ticket: String

        /// 业务侧获取到的验证码使用者的外网IP
        public let userIp: String

        /// 前端回调函数返回的随机字符串
        public let randstr: String

        /// 验证码应用ID。登录 [验证码控制台](https://console.cloud.tencent.com/captcha/graphical)，在验证列表的【密钥】列，即可查看到CaptchaAppId。
        public let captchaAppId: UInt64

        /// 验证码应用密钥。登录 [验证码控制台](https://console.cloud.tencent.com/captcha/graphical)，在验证列表的【密钥】列，即可查看到AppSecretKey。AppSecretKey属于服务器端校验验证码票据的密钥，请妥善保密，请勿泄露给第三方。
        public let appSecretKey: String

        /// 业务 ID，网站或应用在多个业务中使用此服务，通过此 ID 区分统计数据
        public let businessId: UInt64?

        /// 场景 ID，网站或应用的业务下有多个场景使用此服务，通过此 ID 区分统计数据
        public let sceneId: UInt64?

        /// mac 地址或设备唯一标识
        public let macAddress: String?

        /// 手机设备号
        public let imei: String?

        /// 是否返回前端获取验证码时间，取值1：需要返回
        public let needGetCaptchaTime: Int64?

        public init(captchaType: UInt64, ticket: String, userIp: String, randstr: String, captchaAppId: UInt64, appSecretKey: String, businessId: UInt64? = nil, sceneId: UInt64? = nil, macAddress: String? = nil, imei: String? = nil, needGetCaptchaTime: Int64? = nil) {
            self.captchaType = captchaType
            self.ticket = ticket
            self.userIp = userIp
            self.randstr = randstr
            self.captchaAppId = captchaAppId
            self.appSecretKey = appSecretKey
            self.businessId = businessId
            self.sceneId = sceneId
            self.macAddress = macAddress
            self.imei = imei
            self.needGetCaptchaTime = needGetCaptchaTime
        }

        enum CodingKeys: String, CodingKey {
            case captchaType = "CaptchaType"
            case ticket = "Ticket"
            case userIp = "UserIp"
            case randstr = "Randstr"
            case captchaAppId = "CaptchaAppId"
            case appSecretKey = "AppSecretKey"
            case businessId = "BusinessId"
            case sceneId = "SceneId"
            case macAddress = "MacAddress"
            case imei = "Imei"
            case needGetCaptchaTime = "NeedGetCaptchaTime"
        }
    }

    /// DescribeCaptchaResult返回参数结构体
    public struct DescribeCaptchaResultResponse: TCResponseModel {
        /// 1 OK 验证通过
        /// 7 captcha no match 传入的Randstr不合法，请检查Randstr是否与前端返回的Randstr一致
        /// 8 ticket expired 传入的Ticket已过期（Ticket有效期5分钟），请重新生成Ticket、Randstr进行校验
        /// 9 ticket reused 传入的Ticket被重复使用，请重新生成Ticket、Randstr进行校验
        /// 15 decrypt fail 传入的Ticket不合法，请检查Ticket是否与前端返回的Ticket一致
        /// 16 appid-ticket mismatch 传入的CaptchaAppId错误，请检查CaptchaAppId是否与前端传入的CaptchaAppId一致，并且保障CaptchaAppId是从验证码控制台【验证管理】->【基础配置】中获取
        /// 21 diff 票据校验异常，可能的原因是（1）若Ticket包含terror前缀，一般是由于用户网络较差，导致前端自动容灾，而生成了容灾票据，业务侧可根据需要进行跳过或二次处理。（2）若Ticket不包含terror前缀，则是由于验证码风控系统发现请求有安全风险，业务侧可根据需要进行拦截。
        /// 100 appid-secretkey-ticket mismatch 参数校验错误，（1）请检查CaptchaAppId与AppSecretKey是否正确，CaptchaAppId、AppSecretKey需要在验证码控制台【验证管理】>【基础配置】中获取（2）请检查传入的Ticket是否由传入的CaptchaAppId生成
        public let captchaCode: Int64

        /// 状态描述及验证错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let captchaMsg: String?

        /// 无感验证模式下，该参数返回验证结果：
        /// EvilLevel=0 请求无恶意
        /// EvilLevel=100 请求有恶意
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let evilLevel: Int64?

        /// 前端获取验证码时间，时间戳格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let getCaptchaTime: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case captchaCode = "CaptchaCode"
            case captchaMsg = "CaptchaMsg"
            case evilLevel = "EvilLevel"
            case getCaptchaTime = "GetCaptchaTime"
            case requestId = "RequestId"
        }
    }

    /// 核查验证码票据结果(Web及APP)
    @inlinable
    public func describeCaptchaResult(_ input: DescribeCaptchaResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCaptchaResultResponse> {
        self.client.execute(action: "DescribeCaptchaResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 核查验证码票据结果(Web及APP)
    @inlinable
    public func describeCaptchaResult(_ input: DescribeCaptchaResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCaptchaResultResponse {
        try await self.client.execute(action: "DescribeCaptchaResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 核查验证码票据结果(Web及APP)
    @inlinable
    public func describeCaptchaResult(captchaType: UInt64, ticket: String, userIp: String, randstr: String, captchaAppId: UInt64, appSecretKey: String, businessId: UInt64? = nil, sceneId: UInt64? = nil, macAddress: String? = nil, imei: String? = nil, needGetCaptchaTime: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCaptchaResultResponse> {
        let input = DescribeCaptchaResultRequest(captchaType: captchaType, ticket: ticket, userIp: userIp, randstr: randstr, captchaAppId: captchaAppId, appSecretKey: appSecretKey, businessId: businessId, sceneId: sceneId, macAddress: macAddress, imei: imei, needGetCaptchaTime: needGetCaptchaTime)
        return self.client.execute(action: "DescribeCaptchaResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 核查验证码票据结果(Web及APP)
    @inlinable
    public func describeCaptchaResult(captchaType: UInt64, ticket: String, userIp: String, randstr: String, captchaAppId: UInt64, appSecretKey: String, businessId: UInt64? = nil, sceneId: UInt64? = nil, macAddress: String? = nil, imei: String? = nil, needGetCaptchaTime: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCaptchaResultResponse {
        let input = DescribeCaptchaResultRequest(captchaType: captchaType, ticket: ticket, userIp: userIp, randstr: randstr, captchaAppId: captchaAppId, appSecretKey: appSecretKey, businessId: businessId, sceneId: sceneId, macAddress: macAddress, imei: imei, needGetCaptchaTime: needGetCaptchaTime)
        return try await self.client.execute(action: "DescribeCaptchaResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
