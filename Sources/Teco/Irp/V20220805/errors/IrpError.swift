//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

/// Service error type returned by `Irp`.
public protocol TCIrpErrorType: TCServiceErrorType {
    /// Get the service error as ``TCIrpError``.
    ///
    /// - Returns: ``TCIrpError`` that holds the same error code and context.
    func asIrpError() -> TCIrpError
}

public struct TCIrpError: TCIrpErrorType {
    enum Code: String {
        case internalError = "InternalError"
        case invalidParameter = "InvalidParameter"
        case invalidParameterValue = "InvalidParameterValue"
        case limitExceeded = "LimitExceeded"
        case operationDenied = "OperationDenied"
        case unauthorizedOperation = "UnauthorizedOperation"
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 内部错误。
    public static var internalError: TCIrpError {
        TCIrpError(.internalError)
    }

    /// 参数错误。
    public static var invalidParameter: TCIrpError {
        TCIrpError(.invalidParameter)
    }

    /// 参数取值错误。
    public static var invalidParameterValue: TCIrpError {
        TCIrpError(.invalidParameterValue)
    }

    /// 超过配额限制。
    public static var limitExceeded: TCIrpError {
        TCIrpError(.limitExceeded)
    }

    /// 操作被拒绝。
    public static var operationDenied: TCIrpError {
        TCIrpError(.operationDenied)
    }

    /// 未授权操作。
    public static var unauthorizedOperation: TCIrpError {
        TCIrpError(.unauthorizedOperation)
    }

    public func asIrpError() -> TCIrpError {
        return self
    }
}
