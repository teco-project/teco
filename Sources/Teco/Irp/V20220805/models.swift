//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Irp {
    /// 不喜欢信息
    public struct DislikeInfo: TCInputModel {
        /// 过滤的类别：
        ///
        /// ● author 作者名
        ///
        /// （如当前类型不满足，请<a href="https://console.cloud.tencent.com/workorder/category" target="_blank">提单</a>沟通解决方案）
        public let type: String

        /// Type对应字段名的值，如：需要过滤的作者名
        public let value: String

        public init(type: String, value: String) {
            self.type = type
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
        }
    }

    /// 信息流内容
    public struct DocItem: TCInputModel {
        /// 内容唯一id，建议限制在128字符以内
        public let itemId: String

        /// 内容类型：
        ///
        /// ● article -图文
        ///
        /// ● text -纯文本
        ///
        /// ● video -视频
        ///
        /// ● short_video -时长15秒以内的视频
        ///
        /// ● mini_video -竖屏视频
        ///
        /// ● image -纯图片
        ///
        /// （如当前类型不满足，请登录控制台进入对应项目，在**物料管理->物料类型管理**中添加）
        public let itemType: String

        /// 内容状态：
        /// ● 1 - 上架
        /// ● 2 - 下架
        /// Status=2的内容不会在推荐结果中出现
        /// 需要下架内容时，把Status的值修改为2即可
        public let status: UInt64

        /// 内容生成时间，秒级时间戳（1639624786），需大于0，**用作特征和物料管理**
        public let publishTimestamp: Int64

        /// 内容过期时间，秒级时间戳（1639624786），如未填，则默认PublishTimestamp往后延一年，用作特征，过期则不会被推荐，**强烈建议**
        public let expireTimestamp: Int64?

        /// 类目层级数，例如3级类目，则填3，和CategoryPath字段的类数据匹配，**强烈建议**
        public let categoryLevel: Int64?

        /// 类目路径，一级二级三级等依次用英文冒号联接，和CategoryLevel字段值匹配，如体育：“足球:巴塞罗那”。**用于物料池管理，强烈建议**
        public let categoryPath: String?

        /// 内容标签，多个标签用英文冒号联接，**用作特征，强烈建议**
        public let tags: String?

        /// 作者名，需保证作者名唯一，若有重名需要加编号区分。**用于召回过滤、规则打散，强烈建议**
        public let author: String?

        /// 内容来源类型，客户自定义，**用于物料池管理**
        public let sourceId: String?

        /// 内容标题，**主要用于语义分析**
        public let title: String?

        /// 正文关键片段，建议控制在500字符以内，**主要用于语义分析**
        public let content: String?

        /// 正文详情，主要用于语义分析，当内容过大时建议用ContentUrl传递，**与Content可二选一**
        public let contentUrl: String?

        /// 视频时长，时间秒，大于等于0，小于 3600 * 10。**视频内容必填，其它内容非必填，用作特征**
        public let videoDuration: Int64?

        /// 国家，ISO 3166-1 alpha-2编码，参考<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank">ISO 3166-1 alpha-2</a>，中国：“CN”，**用作特征**
        public let country: String?

        /// 省份，ISO 3166-2行政区编码，如中国参考<a href="https://zh.wikipedia.org/wiki/ISO_3166-2:CN" target="_blank">ISO_3166-2:CN</a>，广东省：“CN-GD”，**用作特征**
        public let province: String?

        /// 城市地区，统一用国家最新标准地区行政编码，如：<a href="https://www.mca.gov.cn/article/sj/xzqh/2020/" target="_blank">2020年行政区编码</a>，其他国家统一用国际公认城市简称或者城市编码，**用作特征**
        public let city: String?

        /// 作者粉丝数，**用作特征**
        public let authorFans: Int64?

        /// 作者评级，**用作特征**
        public let authorLevel: String?

        /// 内容累计收藏次数，**用作特征**
        public let collectCnt: Int64?

        /// 内容累积点赞次数，**用作特征**
        public let praiseCnt: Int64?

        /// 内容累计评论次数，**用作特征**
        public let commentCnt: Int64?

        /// 内容累计分享次数，**用作特征**
        public let shareCnt: Int64?

        /// 内容累积打赏数，**用作特征**
        public let rewardCnt: Int64?

        /// 内容质量评分，**用作特征**
        public let score: Float?

        /// json字符串，**用于物料池管理的自定义扩展**，需要base64加密
        public let `extension`: String?

        public init(itemId: String, itemType: String, status: UInt64, publishTimestamp: Int64, expireTimestamp: Int64? = nil, categoryLevel: Int64? = nil, categoryPath: String? = nil, tags: String? = nil, author: String? = nil, sourceId: String? = nil, title: String? = nil, content: String? = nil, contentUrl: String? = nil, videoDuration: Int64? = nil, country: String? = nil, province: String? = nil, city: String? = nil, authorFans: Int64? = nil, authorLevel: String? = nil, collectCnt: Int64? = nil, praiseCnt: Int64? = nil, commentCnt: Int64? = nil, shareCnt: Int64? = nil, rewardCnt: Int64? = nil, score: Float? = nil, extension: String? = nil) {
            self.itemId = itemId
            self.itemType = itemType
            self.status = status
            self.publishTimestamp = publishTimestamp
            self.expireTimestamp = expireTimestamp
            self.categoryLevel = categoryLevel
            self.categoryPath = categoryPath
            self.tags = tags
            self.author = author
            self.sourceId = sourceId
            self.title = title
            self.content = content
            self.contentUrl = contentUrl
            self.videoDuration = videoDuration
            self.country = country
            self.province = province
            self.city = city
            self.authorFans = authorFans
            self.authorLevel = authorLevel
            self.collectCnt = collectCnt
            self.praiseCnt = praiseCnt
            self.commentCnt = commentCnt
            self.shareCnt = shareCnt
            self.rewardCnt = rewardCnt
            self.score = score
            self.extension = `extension`
        }

        enum CodingKeys: String, CodingKey {
            case itemId = "ItemId"
            case itemType = "ItemType"
            case status = "Status"
            case publishTimestamp = "PublishTimestamp"
            case expireTimestamp = "ExpireTimestamp"
            case categoryLevel = "CategoryLevel"
            case categoryPath = "CategoryPath"
            case tags = "Tags"
            case author = "Author"
            case sourceId = "SourceId"
            case title = "Title"
            case content = "Content"
            case contentUrl = "ContentUrl"
            case videoDuration = "VideoDuration"
            case country = "Country"
            case province = "Province"
            case city = "City"
            case authorFans = "AuthorFans"
            case authorLevel = "AuthorLevel"
            case collectCnt = "CollectCnt"
            case praiseCnt = "PraiseCnt"
            case commentCnt = "CommentCnt"
            case shareCnt = "ShareCnt"
            case rewardCnt = "RewardCnt"
            case score = "Score"
            case `extension` = "Extension"
        }
    }

    /// 信息流行为
    public struct FeedBehaviorInfo: TCInputModel {
        /// 用户唯一ID，客户自定义用户ID，作为一个用户的唯一标识
        public let userId: String

        /// 内容唯一id
        public let itemId: String

        /// 行为类型：
        ///
        /// ● expose - 曝光，**必须**
        ///
        /// ● click - 点击，**必须**
        ///
        /// ● stay - 详情页停留时长，**强烈建议**
        ///
        /// ● videoover - 视频播放时长，**强烈建议**
        ///
        /// ●  like - 点赞&喜欢，**正效果**
        ///
        /// ● collect - 收藏，**正效果**
        ///
        /// ●  share - 转发&分享，**正效果**
        ///
        /// ● reward - 打赏，**正效果**
        ///
        /// ● unlike - 踩&不喜欢，**负效果**
        ///
        /// ●  comment - 评论
        ///
        /// 不支持的行为类型，可以映射到未被使用的其他行为类型。如实际业务数据中有私信行为，没有收藏行为，可以将私信行为映射到收藏行为
        public let behaviorType: String

        /// 行为类型对应的行为值：
        ///
        /// ● expose - 曝光，固定填1
        ///
        /// ● click - 点击，固定填1
        ///
        /// ● stay - 详情页停留时长，填停留秒数，取值[1-86400]
        ///
        /// ● videoover - 视频播放时长，填播放结束的秒数，取值[1-86400]
        ///
        /// ●  like - 点赞&喜欢，固定填1
        ///
        /// ● collect - 收藏，固定填1
        ///
        /// ●  share - 转发&分享，固定填1
        ///
        /// ● reward - 打赏，填打赏金额，没有则填1
        ///
        /// ● unlike - 踩&不喜欢，填不喜欢的原因，没有则填1
        ///
        /// ●  comment - 评论，填评论内容，如“上海加油”
        public let behaviorValue: String

        /// 行为发生的时间戳： 秒级时间戳，尽量实时上报，最长不超过半小时否则会影响推荐结果的准确性
        public let behaviorTimestamp: Int64

        /// 行为发生的场景ID，在控制台创建场景后获取
        public let sceneId: String

        /// 推荐追踪ID，使用推荐结果中返回的ItemTraceId填入。
        /// 注意：如果和推荐结果中的ItemTraceId不同，会影响行为特征归因，影响推荐算法效果
        public let itemTraceId: String

        /// 内容类型，跟内容上报类型一致，用于效果分析，不做内容校验，**强烈建议**
        public let itemType: String?

        /// 相关推荐场景点击进入详情页的内容id，该字段用来注明行为发生于哪个内容的详情页推荐中，**相关推荐场景强烈建议**
        public let referrerItemId: String?

        /// 用户设备ID数组，可传入用户的多个类型ID，详见UserIdInfo结构体，建议补齐，**用于构建用户画像信息**
        public let userIdList: [UserIdInfo]?

        /// 算法来源：
        ///
        /// ● business 业务自己的算法对照组
        ///
        /// ● tencent 腾讯算法
        ///
        /// ● other 其他算法
        ///
        /// 默认为tencent，区分行为来源于哪个算法，**用于Poc阶段的效果对比验证**
        public let source: String?

        /// 行为发生时的国家，ISO 3166-1 alpha-2编码，参考<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank">ISO 3166-1 alpha-2</a>，中国：“CN”，**用作特征**
        public let country: String?

        /// 行为发生时的省份，ISO 3166-2行政区编码，如中国参考<a href="https://zh.wikipedia.org/wiki/ISO_3166-2:CN" target="_blank">ISO_3166-2:CN</a>，广东省：“CN-GD”，**用作特征**
        public let province: String?

        /// 行为发生时的城市地区，统一用国家最新标准地区行政编码，如：<a href="https://www.mca.gov.cn/article/sj/xzqh/2020/" target="_blank">2020年行政区编码</a>，其他国家统一用国际公认城市简称或者城市编码，**用作特征**
        public let city: String?

        /// 行为发生时的客户端ip，**用作特征**
        public let ip: String?

        /// 行为发生时的客户端网络类型，**用作特征**
        public let network: String?

        /// 行为发生时的客户端平台，ios/android/h5，**用作特征**
        public let platform: String?

        /// 行为发生时的客户端app版本，**用作特征**
        public let appVersion: String?

        /// 行为发生时的操作系统版本，**用作特征**
        public let osVersion: String?

        /// 行为发生时的机型，**用作特征**
        public let deviceModel: String?

        /// json字符串，**用于行为数据的扩展**，需要base64加密
        public let `extension`: String?

        public init(userId: String, itemId: String, behaviorType: String, behaviorValue: String, behaviorTimestamp: Int64, sceneId: String, itemTraceId: String, itemType: String? = nil, referrerItemId: String? = nil, userIdList: [UserIdInfo]? = nil, source: String? = nil, country: String? = nil, province: String? = nil, city: String? = nil, ip: String? = nil, network: String? = nil, platform: String? = nil, appVersion: String? = nil, osVersion: String? = nil, deviceModel: String? = nil, extension: String? = nil) {
            self.userId = userId
            self.itemId = itemId
            self.behaviorType = behaviorType
            self.behaviorValue = behaviorValue
            self.behaviorTimestamp = behaviorTimestamp
            self.sceneId = sceneId
            self.itemTraceId = itemTraceId
            self.itemType = itemType
            self.referrerItemId = referrerItemId
            self.userIdList = userIdList
            self.source = source
            self.country = country
            self.province = province
            self.city = city
            self.ip = ip
            self.network = network
            self.platform = platform
            self.appVersion = appVersion
            self.osVersion = osVersion
            self.deviceModel = deviceModel
            self.extension = `extension`
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case itemId = "ItemId"
            case behaviorType = "BehaviorType"
            case behaviorValue = "BehaviorValue"
            case behaviorTimestamp = "BehaviorTimestamp"
            case sceneId = "SceneId"
            case itemTraceId = "ItemTraceId"
            case itemType = "ItemType"
            case referrerItemId = "ReferrerItemId"
            case userIdList = "UserIdList"
            case source = "Source"
            case country = "Country"
            case province = "Province"
            case city = "City"
            case ip = "IP"
            case network = "Network"
            case platform = "Platform"
            case appVersion = "AppVersion"
            case osVersion = "OsVersion"
            case deviceModel = "DeviceModel"
            case `extension` = "Extension"
        }
    }

    /// 信息流用户信息
    public struct FeedUserInfo: TCInputModel {
        /// 用户唯一ID，客户自定义用户ID，作为一个用户的唯一标识
        public let userId: String

        /// 用户设备ID数组，可传入用户的多个类型ID，详见UserIdInfo结构体，建议补齐，**用于构建用户画像信息**
        public let userIdList: [UserIdInfo]?

        /// 用户标签，多个标签用英文冒号联接，**用作特征，强烈建议**
        public let tags: String?

        /// 过滤列表，**会在推荐结果里过滤掉这类内容**
        public let dislikeInfoList: [DislikeInfo]?

        /// 用户年龄
        public let age: Int64?

        /// 用户性别： 0 - 未知 1 - 男 2 - 女
        public let gender: Int64?

        /// 用户学历 ：小学，初中，高中，大专，本科，硕士，博士
        public let degree: String?

        /// 用户毕业学校全称
        public let school: String?

        /// 用户职业
        public let occupation: String?

        /// 用户所属行业
        public let industry: String?

        /// 用户常驻国家，ISO 3166-1 alpha-2编码，参考<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank">ISO 3166-1 alpha-2</a>，中国：“CN”
        public let residentCountry: String?

        /// 用户常驻省份，ISO 3166-2行政区编码，如中国参考<a href="https://zh.wikipedia.org/wiki/ISO_3166-2:CN" target="_blank">ISO_3166-2:CN</a>，广东省：“CN-GD”
        public let residentProvince: String?

        /// 用户常驻城市，统一用国家最新标准地区行政编码，如：<a href="https://www.mca.gov.cn/article/sj/xzqh/2020/" target="_blank">2020年行政区编码</a>，
        public let residentCity: String?

        /// 用户注册时间，秒级时间戳（1639624786）
        public let registerTimestamp: Int64?

        /// 用户会员等级
        public let membershipLevel: String?

        /// 用户上一次登录时间，秒级时间戳（1639624786）
        public let lastLoginTimestamp: Int64?

        /// 用户上一次登录的ip
        public let lastLoginIp: String?

        /// 用户信息的最后修改时间戳，秒级时间戳（1639624786）
        public let lastModifyTimestamp: Int64?

        /// json字符串，用于画像数据的扩展，需要base64加密
        public let `extension`: String?

        public init(userId: String, userIdList: [UserIdInfo]? = nil, tags: String? = nil, dislikeInfoList: [DislikeInfo]? = nil, age: Int64? = nil, gender: Int64? = nil, degree: String? = nil, school: String? = nil, occupation: String? = nil, industry: String? = nil, residentCountry: String? = nil, residentProvince: String? = nil, residentCity: String? = nil, registerTimestamp: Int64? = nil, membershipLevel: String? = nil, lastLoginTimestamp: Int64? = nil, lastLoginIp: String? = nil, lastModifyTimestamp: Int64? = nil, extension: String? = nil) {
            self.userId = userId
            self.userIdList = userIdList
            self.tags = tags
            self.dislikeInfoList = dislikeInfoList
            self.age = age
            self.gender = gender
            self.degree = degree
            self.school = school
            self.occupation = occupation
            self.industry = industry
            self.residentCountry = residentCountry
            self.residentProvince = residentProvince
            self.residentCity = residentCity
            self.registerTimestamp = registerTimestamp
            self.membershipLevel = membershipLevel
            self.lastLoginTimestamp = lastLoginTimestamp
            self.lastLoginIp = lastLoginIp
            self.lastModifyTimestamp = lastModifyTimestamp
            self.extension = `extension`
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userIdList = "UserIdList"
            case tags = "Tags"
            case dislikeInfoList = "DislikeInfoList"
            case age = "Age"
            case gender = "Gender"
            case degree = "Degree"
            case school = "School"
            case occupation = "Occupation"
            case industry = "Industry"
            case residentCountry = "ResidentCountry"
            case residentProvince = "ResidentProvince"
            case residentCity = "ResidentCity"
            case registerTimestamp = "RegisterTimestamp"
            case membershipLevel = "MembershipLevel"
            case lastLoginTimestamp = "LastLoginTimestamp"
            case lastLoginIp = "LastLoginIp"
            case lastModifyTimestamp = "LastModifyTimestamp"
            case `extension` = "Extension"
        }
    }

    /// 电商行为
    public struct GoodsBehaviorInfo: TCInputModel {
        /// 用户唯一ID，客户自定义用户ID，作为一个用户的唯一标识
        public let userId: String

        /// 商品唯一ID，skuId或spuId，客户根据需求自行决定商品主键粒度
        public let goodsId: String

        /// 行为类型：
        ///
        /// ● expose - 曝光，**必须**
        ///
        /// ● click - 点击，**必须**
        ///
        /// ● stay - 详情页停留时长，**强烈建议**
        ///
        /// ● videoover - 视频播放时长，**强烈建议**
        ///
        /// ●  like - 点赞&喜欢，**正效果**
        ///
        /// ● collect - 收藏，**正效果**
        ///
        /// ●  share - 转发&分享，**正效果**
        ///
        /// ● reward - 打赏，**正效果**
        ///
        /// ● unlike - 踩&不喜欢，**负效果**
        ///
        /// ●  comment - 评论
        ///
        /// ●  order - 下单
        ///
        /// ●  buy - 购买成功
        ///
        /// ●  addcart - 加入购物车
        ///
        /// 不支持的行为类型，可以映射到未被使用的其他行为类型。如实际业务数据中有私信行为，没有收藏行为，可以将私信行为映射到收藏行为
        public let behaviorType: String

        /// 行为类型对应的行为值：
        ///
        /// ● expose - 曝光，固定填1
        ///
        /// ● click - 点击，固定填1
        ///
        /// ● stay - 详情页停留时长，填停留秒数，取值[1-86400]
        ///
        /// ● videoover - 视频播放时长，填播放结束的秒数，取值[1-86400]
        ///
        /// ●  like - 点赞&喜欢，固定填1
        ///
        /// ● collect - 收藏，固定填1
        ///
        /// ●  share - 转发&分享，固定填1
        ///
        /// ● reward - 打赏，填打赏金额，没有则填1
        ///
        /// ● unlike - 踩&不喜欢，填不喜欢的原因，没有则填1
        ///
        /// ●  comment - 评论，填评论内容，如“上海加油”
        ///
        /// ●  order - 下单，固定填1
        ///
        /// ●  buy - 购买成功，固定填1
        ///
        /// ●  addcart - 加入购物车，固定填1
        public let behaviorValue: String

        /// 行为发生的时间戳： 秒级时间戳，尽量实时上报，最长不超过半小时否则会影响推荐结果的准确性
        public let behaviorTimestamp: Int64

        /// 行为发生的场景ID，在控制台创建场景后获取
        public let sceneId: String

        /// 算法来源：
        ///
        /// ● business 业务自己的算法对照组
        ///
        /// ● tencent 腾讯算法
        ///
        /// ● other 其他算法
        ///
        /// 默认为tencent，区分行为来源于哪个算法，**用于Poc阶段的效果对比验证**
        public let source: String

        /// 标识行为发生在app内哪个页面，取值客户自定，可以是明文或id，建议传明文便于理解、分析，如首页，发现页，用户中心等
        /// **用作上下文特征，刻画不同场景用户行为分布的差异**
        public let page: String?

        /// 标识行为发生在页面的哪一区块，取值客户自定，可以是明文或id，建议传明文便于理解、分析，如横幅、广告位、猜你喜欢等
        /// **用作上下文特征，刻画不同模块用户行为分布的差异**
        public let module: String?

        /// 推荐追踪ID，使用推荐结果中返回的GoodsTraceId填入。
        /// 注意：如果和推荐结果中的GoodsTraceId不同，会影响行为特征归因，影响推荐算法效果。**强烈建议**
        public let goodsTraceId: String?

        /// 相关推荐场景点击进入详情页的内容id，该字段用来注明行为发生于哪个内容的详情页推荐中，**相关推荐场景强烈建议**
        public let referrerGoodsId: String?

        /// 订单商品购买个数，当behaviorType=order，buy或addcart时有值，**用作特征**
        public let orderGoodsCnt: Int64?

        /// 订单总金额，当behaviorType=order或buy时有值（单位：元，统一货币体系，如统一为RMB，美元等），**用作特征**
        public let orderAmount: Float?

        /// 用户设备ID数组，可传入用户的多个类型ID，详见UserIdInfo结构体，建议补齐，**用于构建用户画像信息**
        public let userIdList: [StrUserIdInfo]?

        /// 行为发生时用户基础特征信息，**用作特征**
        public let userPortraitInfo: UserPortraitInfo?

        /// 标识行为发生在模块内的具体位置，如1、2、...
        /// **用作上下文特征，刻画不同位置用户行为分布的差异**
        public let position: Int64?

        /// json字符串，**用于行为数据的扩展**
        public let `extension`: String?

        public init(userId: String, goodsId: String, behaviorType: String, behaviorValue: String, behaviorTimestamp: Int64, sceneId: String, source: String, page: String? = nil, module: String? = nil, goodsTraceId: String? = nil, referrerGoodsId: String? = nil, orderGoodsCnt: Int64? = nil, orderAmount: Float? = nil, userIdList: [StrUserIdInfo]? = nil, userPortraitInfo: UserPortraitInfo? = nil, position: Int64? = nil, extension: String? = nil) {
            self.userId = userId
            self.goodsId = goodsId
            self.behaviorType = behaviorType
            self.behaviorValue = behaviorValue
            self.behaviorTimestamp = behaviorTimestamp
            self.sceneId = sceneId
            self.source = source
            self.page = page
            self.module = module
            self.goodsTraceId = goodsTraceId
            self.referrerGoodsId = referrerGoodsId
            self.orderGoodsCnt = orderGoodsCnt
            self.orderAmount = orderAmount
            self.userIdList = userIdList
            self.userPortraitInfo = userPortraitInfo
            self.position = position
            self.extension = `extension`
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case goodsId = "GoodsId"
            case behaviorType = "BehaviorType"
            case behaviorValue = "BehaviorValue"
            case behaviorTimestamp = "BehaviorTimestamp"
            case sceneId = "SceneId"
            case source = "Source"
            case page = "Page"
            case module = "Module"
            case goodsTraceId = "GoodsTraceId"
            case referrerGoodsId = "ReferrerGoodsId"
            case orderGoodsCnt = "OrderGoodsCnt"
            case orderAmount = "OrderAmount"
            case userIdList = "UserIdList"
            case userPortraitInfo = "UserPortraitInfo"
            case position = "Position"
            case `extension` = "Extension"
        }
    }

    /// 电商物料内容
    public struct GoodsInfo: TCInputModel {
        /// 商品唯一ID，skuId或spuId，客户根据需求自行决定商品主键粒度。建议限制在128字符以内
        public let goodsId: String

        /// 商品物料展示类型：
        ///
        /// ● article -图文
        ///
        /// ● text -纯文本
        ///
        /// ● video -视频
        ///
        /// ● short_video -时长15秒以内的视频
        ///
        /// ● mini_video -竖屏视频
        ///
        /// ● image -纯图片
        ///
        /// （如当前类型不满足，请<a href="https://console.cloud.tencent.com/workorder/category" target="_blank">提单</a>沟通解决方案）
        public let goodsType: String

        /// 商品状态：
        /// ● 1 - 上架
        /// ● 2 - 下架
        /// Status=2的内容不会在推荐结果中出现
        /// 需要下架内容时，把Status的值修改为2即可
        public let status: UInt64

        /// 商品生成时间，秒级时间戳（1639624786），需大于0，**用作特征和物料管理**
        public let publishTimestamp: Int64

        /// 商品过期时间，秒级时间戳（1639624786），如未填，则默认PublishTimestamp往后延一年，**用作特征**，过期则不会被推荐，**强烈建议**
        public let expireTimestamp: Int64?

        /// spu((Standard Product Unit))维度id，商品聚合信息的最小单位，**强烈建议**
        public let spuId: String?

        /// 类目层级数，例如3级类目，则填3，和CategoryPath字段的类数据匹配，**强烈建议**
        public let categoryLevel: Int64?

        /// 类目路径，一级二级三级等依次用英文冒号联接，和CategoryLevel字段值匹配，如体育：“女装:裙子:半身裙”。**用于物料池管理，强烈建议**
        public let categoryPath: String?

        /// 商品标题，**主要用于语义分析**，**强烈建议**
        public let title: String?

        /// 商品标签，多个标签用英文冒号联接，**用作特征，强烈建议**
        public let tags: String?

        /// 商品对应的品牌，取值用户自定义，可以是品牌id或品牌明文，**用作特征以及打散/过滤规则，强烈建议**
        public let brand: String?

        /// 商品所属店铺ID，取值客户自定义，**用作特征，强烈建议**
        public let shopId: String?

        /// 商品原始价格（单位：元，统一货币体系，如统一为RMB或美元等），**用作特征，强烈建议**
        public let orgPrice: Float?

        /// 商品当前价格（单位：元，统一货币体系，如统一为RMB或美元等），**用作特征，强烈建议**
        public let curPrice: Float?

        /// 商品来源类型，客户自定义，**用于物料池管理**
        public let sourceId: String?

        /// 商品正文关键片段，建议控制在500字符以内，**主要用于语义分析**
        public let content: String?

        /// 商品正文详情，主要用于语义分析，当内容过大时建议用ContentUrl传递，**与Content可二选一**
        public let contentUrl: String?

        /// 商品封面url，不超过10个，**用作特征**
        public let picUrlList: [String]?

        /// 卖家所在国家，ISO 3166-1 alpha-2编码，参考<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank">ISO 3166-1 alpha-2</a>，中国：“CN”，**用作特征**
        public let country: String?

        /// 卖家所在省份，ISO 3166-2行政区编码，如中国参考<a href="https://zh.wikipedia.org/wiki/ISO_3166-2:CN" target="_blank">ISO_3166-2:CN</a>，广东省：“CN-GD”，**用作特征**
        public let province: String?

        /// 卖家所在城市地区，统一用国家最新标准地区行政编码，如：<a href="https://www.mca.gov.cn/article/sj/xzqh/2020/" target="_blank">2020年行政区编码</a>，其他国家统一用国际公认城市简称或者城市编码，**用作特征**
        public let city: String?

        /// 商品是否包邮；1:包邮；2:不包邮；3:满足条件包邮，**用作特征**
        public let freeShipping: Int64?

        /// 商品邮费（单位：元，统一货币体系，如统一为RMB或美元等），**用作特征**
        public let shippingPrice: Float?

        /// 商品累计好评次数，**用作特征**
        public let praiseCnt: Int64?

        /// 商品累计评论次数，**用作特征**
        public let commentCnt: Int64?

        /// 商品累计分享次数，**用作特征**
        public let shareCnt: Int64?

        /// 商品累计收藏次数，**用作特征**
        public let collectCnt: Int64?

        /// 商品累积成交次数，**用作特征**
        public let orderCnt: Int64?

        /// 商品平均客户评分，取值范围用户自定，**用作特征**
        public let score: Float?

        /// json字符串，**用于物料池管理的自定义扩展**
        public let `extension`: String?

        public init(goodsId: String, goodsType: String, status: UInt64, publishTimestamp: Int64, expireTimestamp: Int64? = nil, spuId: String? = nil, categoryLevel: Int64? = nil, categoryPath: String? = nil, title: String? = nil, tags: String? = nil, brand: String? = nil, shopId: String? = nil, orgPrice: Float? = nil, curPrice: Float? = nil, sourceId: String? = nil, content: String? = nil, contentUrl: String? = nil, picUrlList: [String]? = nil, country: String? = nil, province: String? = nil, city: String? = nil, freeShipping: Int64? = nil, shippingPrice: Float? = nil, praiseCnt: Int64? = nil, commentCnt: Int64? = nil, shareCnt: Int64? = nil, collectCnt: Int64? = nil, orderCnt: Int64? = nil, score: Float? = nil, extension: String? = nil) {
            self.goodsId = goodsId
            self.goodsType = goodsType
            self.status = status
            self.publishTimestamp = publishTimestamp
            self.expireTimestamp = expireTimestamp
            self.spuId = spuId
            self.categoryLevel = categoryLevel
            self.categoryPath = categoryPath
            self.title = title
            self.tags = tags
            self.brand = brand
            self.shopId = shopId
            self.orgPrice = orgPrice
            self.curPrice = curPrice
            self.sourceId = sourceId
            self.content = content
            self.contentUrl = contentUrl
            self.picUrlList = picUrlList
            self.country = country
            self.province = province
            self.city = city
            self.freeShipping = freeShipping
            self.shippingPrice = shippingPrice
            self.praiseCnt = praiseCnt
            self.commentCnt = commentCnt
            self.shareCnt = shareCnt
            self.collectCnt = collectCnt
            self.orderCnt = orderCnt
            self.score = score
            self.extension = `extension`
        }

        enum CodingKeys: String, CodingKey {
            case goodsId = "GoodsId"
            case goodsType = "GoodsType"
            case status = "Status"
            case publishTimestamp = "PublishTimestamp"
            case expireTimestamp = "ExpireTimestamp"
            case spuId = "SpuId"
            case categoryLevel = "CategoryLevel"
            case categoryPath = "CategoryPath"
            case title = "Title"
            case tags = "Tags"
            case brand = "Brand"
            case shopId = "ShopId"
            case orgPrice = "OrgPrice"
            case curPrice = "CurPrice"
            case sourceId = "SourceId"
            case content = "Content"
            case contentUrl = "ContentUrl"
            case picUrlList = "PicUrlList"
            case country = "Country"
            case province = "Province"
            case city = "City"
            case freeShipping = "FreeShipping"
            case shippingPrice = "ShippingPrice"
            case praiseCnt = "PraiseCnt"
            case commentCnt = "CommentCnt"
            case shareCnt = "ShareCnt"
            case collectCnt = "CollectCnt"
            case orderCnt = "OrderCnt"
            case score = "Score"
            case `extension` = "Extension"
        }
    }

    /// 推荐返回的内容信息
    public struct RecGoodsData: TCOutputModel {
        /// 推荐返回的商品ID
        public let goodsId: String

        /// 推荐结果分，取值范围[0,1000000]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let score: Float?

        /// 推荐追踪id，本次推荐内容产生的后续行为上报均要用该GoodsTraceId上报。每次接口调用返回的GoodsTraceId不同
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let goodsTraceId: String?

        /// 商品所在位置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let position: Int64?

        enum CodingKeys: String, CodingKey {
            case goodsId = "GoodsId"
            case score = "Score"
            case goodsTraceId = "GoodsTraceId"
            case position = "Position"
        }
    }

    /// 推荐返回的内容信息
    public struct RecItemData: TCOutputModel {
        /// 推荐的内容ID
        public let itemId: String

        /// 内容类型，同内容上报类型一致
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let itemType: String?

        /// 推荐追踪id，本次推荐内容产生的后续行为上报均要用该ItemTraceId上报。每次接口调用返回的ItemTraceId不同
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let itemTraceId: String?

        /// 推荐预测分，分值越高被推荐的理由越充分，取值范围[0,1000000]，用于做二次排序的参考
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let score: Float?

        enum CodingKeys: String, CodingKey {
            case itemId = "ItemId"
            case itemType = "ItemType"
            case itemTraceId = "ItemTraceId"
            case score = "Score"
        }
    }

    /// 用户信息
    public struct StrUserIdInfo: TCInputModel {
        public init() {
        }
    }

    /// 用户ID信息
    public struct UserIdInfo: TCInputModel {
        /// 用户ID类型：
        ///
        /// ● qq: qq号码
        ///
        /// ● qq_md5：qq的md5值
        ///
        /// ● imei：设备imei
        ///
        /// ● imei_md5：imei的md5值
        ///
        /// ● idfa: Apple 向用户设备随机分配的设备标识符
        ///
        /// ● idfa_md5：idfa的md5值
        ///
        /// ● oaid：安卓10之后一种非永久性设备标识符
        ///
        /// ● oaid_md5：md5后的oaid
        ///
        /// ● wx_openid：微信openid
        ///
        /// ● qq_openid：QQ的openid
        ///
        /// ● phone：电话号码
        ///
        /// ● phone_md5：md5后的电话号码
        ///
        /// ● phone_sha256：SHA256加密的手机号
        ///
        /// ● phone_sm3：国密SM3加密的手机号
        ///
        /// （如当前类型不满足，请<a href="https://console.cloud.tencent.com/workorder/category" target="_blank">提单</a>沟通解决方案）
        public let type: String

        /// 用户ID值
        public let value: String

        public init(type: String, value: String) {
            self.type = type
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
        }
    }

    /// 用户基础画像
    public struct UserPortraitInfo: TCInputModel {
        public init() {
        }
    }
}
