//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Irp {
    /// ReportGoodsBehavior请求参数结构体
    public struct ReportGoodsBehaviorRequest: TCRequestModel {
        /// 实例ID，在控制台获取
        public let instanceId: String

        /// 上报的商品对应的用户行为数据数组，数量不超过50
        public let goodsBehaviorList: [GoodsBehaviorInfo]

        public init(instanceId: String, goodsBehaviorList: [GoodsBehaviorInfo]) {
            self.instanceId = instanceId
            self.goodsBehaviorList = goodsBehaviorList
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case goodsBehaviorList = "GoodsBehaviorList"
        }
    }

    /// ReportGoodsBehavior返回参数结构体
    public struct ReportGoodsBehaviorResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 上报电商类行为数据
    @inlinable @discardableResult
    public func reportGoodsBehavior(_ input: ReportGoodsBehaviorRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReportGoodsBehaviorResponse> {
        self.client.execute(action: "ReportGoodsBehavior", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 上报电商类行为数据
    @inlinable @discardableResult
    public func reportGoodsBehavior(_ input: ReportGoodsBehaviorRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReportGoodsBehaviorResponse {
        try await self.client.execute(action: "ReportGoodsBehavior", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 上报电商类行为数据
    @inlinable @discardableResult
    public func reportGoodsBehavior(instanceId: String, goodsBehaviorList: [GoodsBehaviorInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReportGoodsBehaviorResponse> {
        self.reportGoodsBehavior(.init(instanceId: instanceId, goodsBehaviorList: goodsBehaviorList), region: region, logger: logger, on: eventLoop)
    }

    /// 上报电商类行为数据
    @inlinable @discardableResult
    public func reportGoodsBehavior(instanceId: String, goodsBehaviorList: [GoodsBehaviorInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReportGoodsBehaviorResponse {
        try await self.reportGoodsBehavior(.init(instanceId: instanceId, goodsBehaviorList: goodsBehaviorList), region: region, logger: logger, on: eventLoop)
    }
}
