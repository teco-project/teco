//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTdmqError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case cmqBackendError = "FailedOperation.CmqBackendError"
            case createBindVpc = "FailedOperation.CreateBindVpc"
            case createCluster = "FailedOperation.CreateCluster"
            case createEnvironment = "FailedOperation.CreateEnvironment"
            case createEnvironmentRole = "FailedOperation.CreateEnvironmentRole"
            case createNamespace = "FailedOperation.CreateNamespace"
            case createProducerError = "FailedOperation.CreateProducerError"
            case createPulsarClientError = "FailedOperation.CreatePulsarClientError"
            case createRole = "FailedOperation.CreateRole"
            case createSecretKey = "FailedOperation.CreateSecretKey"
            case createSubscription = "FailedOperation.CreateSubscription"
            case createTopic = "FailedOperation.CreateTopic"
            case deleteCluster = "FailedOperation.DeleteCluster"
            case deleteEnvironmentRoles = "FailedOperation.DeleteEnvironmentRoles"
            case deleteEnvironments = "FailedOperation.DeleteEnvironments"
            case deleteNamespace = "FailedOperation.DeleteNamespace"
            case deleteRoles = "FailedOperation.DeleteRoles"
            case deleteSubscriptions = "FailedOperation.DeleteSubscriptions"
            case deleteTopics = "FailedOperation.DeleteTopics"
            case describeSubscription = "FailedOperation.DescribeSubscription"
            case getEnvironmentAttributesFailed = "FailedOperation.GetEnvironmentAttributesFailed"
            case getTopicPartitionsFailed = "FailedOperation.GetTopicPartitionsFailed"
            case maxMessageSizeError = "FailedOperation.MaxMessageSizeError"
            case messageIDError = "FailedOperation.MessageIDError"
            case namespaceInUse = "FailedOperation.NamespaceInUse"
            case pulsarAdminError = "FailedOperation.PulsarAdminError"
            case receiveError = "FailedOperation.ReceiveError"
            case receiveTimeout = "FailedOperation.ReceiveTimeout"
            case resetMsgSubOffsetByTimestampFailed = "FailedOperation.ResetMsgSubOffsetByTimestampFailed"
            case roleInUse = "FailedOperation.RoleInUse"
            case saveSecretKey = "FailedOperation.SaveSecretKey"
            case sendMessageTimeoutError = "FailedOperation.SendMessageTimeoutError"
            case sendMsgFailed = "FailedOperation.SendMsgFailed"
            case setRetentionPolicy = "FailedOperation.SetRetentionPolicy"
            case setTTL = "FailedOperation.SetTTL"
            case topicInUse = "FailedOperation.TopicInUse"
            case topicTypeError = "FailedOperation.TopicTypeError"
            case updateEnvironment = "FailedOperation.UpdateEnvironment"
            case updateEnvironmentRole = "FailedOperation.UpdateEnvironmentRole"
            case updateRole = "FailedOperation.UpdateRole"
            case updateTopic = "FailedOperation.UpdateTopic"
            case vpcInUse = "FailedOperation.VpcInUse"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// CMQ 后台服务错误。
        public static var cmqBackendError: FailedOperation {
            FailedOperation(.cmqBackendError)
        }
        
        /// 创建vpc绑定关系失败。
        public static var createBindVpc: FailedOperation {
            FailedOperation(.createBindVpc)
        }
        
        /// 创建集群失败。
        public static var createCluster: FailedOperation {
            FailedOperation(.createCluster)
        }
        
        /// 环境创建失败。
        public static var createEnvironment: FailedOperation {
            FailedOperation(.createEnvironment)
        }
        
        /// 创建环境角色失败。
        public static var createEnvironmentRole: FailedOperation {
            FailedOperation(.createEnvironmentRole)
        }
        
        /// 创建命名空间失败。
        public static var createNamespace: FailedOperation {
            FailedOperation(.createNamespace)
        }
        
        /// 创建producer出错。
        public static var createProducerError: FailedOperation {
            FailedOperation(.createProducerError)
        }
        
        /// 创建TDMQ client的出错。
        public static var createPulsarClientError: FailedOperation {
            FailedOperation(.createPulsarClientError)
        }
        
        /// 角色创建失败。
        public static var createRole: FailedOperation {
            FailedOperation(.createRole)
        }
        
        /// 创建秘钥失败。
        public static var createSecretKey: FailedOperation {
            FailedOperation(.createSecretKey)
        }
        
        /// 创建订阅关系失败。
        public static var createSubscription: FailedOperation {
            FailedOperation(.createSubscription)
        }
        
        /// 主题创建失败。
        public static var createTopic: FailedOperation {
            FailedOperation(.createTopic)
        }
        
        /// 删除集群失败。
        public static var deleteCluster: FailedOperation {
            FailedOperation(.deleteCluster)
        }
        
        /// 删除环境角色失败。
        public static var deleteEnvironmentRoles: FailedOperation {
            FailedOperation(.deleteEnvironmentRoles)
        }
        
        /// 环境删除失败。
        public static var deleteEnvironments: FailedOperation {
            FailedOperation(.deleteEnvironments)
        }
        
        /// 删除命名空间失败。
        public static var deleteNamespace: FailedOperation {
            FailedOperation(.deleteNamespace)
        }
        
        /// 角色删除失败。
        public static var deleteRoles: FailedOperation {
            FailedOperation(.deleteRoles)
        }
        
        /// 删除订阅关系失败。
        public static var deleteSubscriptions: FailedOperation {
            FailedOperation(.deleteSubscriptions)
        }
        
        /// 主题删除失败。
        public static var deleteTopics: FailedOperation {
            FailedOperation(.deleteTopics)
        }
        
        /// 查询订阅数据失败。
        public static var describeSubscription: FailedOperation {
            FailedOperation(.describeSubscription)
        }
        
        /// 获取环境属性失败。
        public static var getEnvironmentAttributesFailed: FailedOperation {
            FailedOperation(.getEnvironmentAttributesFailed)
        }
        
        /// 获取主题分区数失败。
        public static var getTopicPartitionsFailed: FailedOperation {
            FailedOperation(.getTopicPartitionsFailed)
        }
        
        /// 最大消息超过1MB。
        public static var maxMessageSizeError: FailedOperation {
            FailedOperation(.maxMessageSizeError)
        }
        
        /// 上传的msgID错误。
        public static var messageIDError: FailedOperation {
            FailedOperation(.messageIDError)
        }
        
        /// 必须先清除关联命名空间才能继续操作。
        public static var namespaceInUse: FailedOperation {
            FailedOperation(.namespaceInUse)
        }
        
        public static var pulsarAdminError: FailedOperation {
            FailedOperation(.pulsarAdminError)
        }
        
        /// 接收消息出错。
        public static var receiveError: FailedOperation {
            FailedOperation(.receiveError)
        }
        
        /// 接收消息超时，请重试。
        public static var receiveTimeout: FailedOperation {
            FailedOperation(.receiveTimeout)
        }
        
        /// 消息回溯设置失败。
        public static var resetMsgSubOffsetByTimestampFailed: FailedOperation {
            FailedOperation(.resetMsgSubOffsetByTimestampFailed)
        }
        
        /// 必须先清除关联角色数据才能继续操作。
        public static var roleInUse: FailedOperation {
            FailedOperation(.roleInUse)
        }
        
        /// 保存秘钥失败。
        public static var saveSecretKey: FailedOperation {
            FailedOperation(.saveSecretKey)
        }
        
        /// 消息发送超时。
        public static var sendMessageTimeoutError: FailedOperation {
            FailedOperation(.sendMessageTimeoutError)
        }
        
        /// 发送消息失败。
        public static var sendMsgFailed: FailedOperation {
            FailedOperation(.sendMsgFailed)
        }
        
        /// 设置消息保留策略失败。
        public static var setRetentionPolicy: FailedOperation {
            FailedOperation(.setRetentionPolicy)
        }
        
        /// 设置消息TTL失败。
        public static var setTTL: FailedOperation {
            FailedOperation(.setTTL)
        }
        
        /// 必须先清除关联主题数据才能继续操作。
        public static var topicInUse: FailedOperation {
            FailedOperation(.topicInUse)
        }
        
        /// 请使用partition topic。
        public static var topicTypeError: FailedOperation {
            FailedOperation(.topicTypeError)
        }
        
        /// 环境更新失败。
        public static var updateEnvironment: FailedOperation {
            FailedOperation(.updateEnvironment)
        }
        
        /// 更新环境角色失败。
        public static var updateEnvironmentRole: FailedOperation {
            FailedOperation(.updateEnvironmentRole)
        }
        
        /// 角色更新失败。
        public static var updateRole: FailedOperation {
            FailedOperation(.updateRole)
        }
        
        /// 主题更新失败。
        public static var updateTopic: FailedOperation {
            FailedOperation(.updateTopic)
        }
        
        /// 必须先清除关联VPC路由数据才能继续操作。
        public static var vpcInUse: FailedOperation {
            FailedOperation(.vpcInUse)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCTdmqError.FailedOperation: Equatable {
    public static func == (lhs: TCTdmqError.FailedOperation, rhs: TCTdmqError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTdmqError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTdmqError.FailedOperation {
    public func toTdmqError() -> TCTdmqError {
        guard let code = TCTdmqError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTdmqError(code, context: self.context)
    }
}