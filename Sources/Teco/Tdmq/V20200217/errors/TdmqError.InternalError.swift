//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTdmqError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case brokerService = "InternalError.BrokerService"
            case getAttributesFailed = "InternalError.GetAttributesFailed"
            case illegalMessage = "InternalError.IllegalMessage"
            case retry = "InternalError.Retry"
            case systemError = "InternalError.SystemError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// Broker服务异常。
        public static var brokerService: InternalError {
            InternalError(.brokerService)
        }
        
        /// 获取属性失败。
        public static var getAttributesFailed: InternalError {
            InternalError(.getAttributesFailed)
        }
        
        /// 内部错误。
        public static var illegalMessage: InternalError {
            InternalError(.illegalMessage)
        }
        
        /// 重试可以成功。
        public static var retry: InternalError {
            InternalError(.retry)
        }
        
        /// 系统错误。
        public static var systemError: InternalError {
            InternalError(.systemError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCTdmqError.InternalError: Equatable {
    public static func == (lhs: TCTdmqError.InternalError, rhs: TCTdmqError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTdmqError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTdmqError.InternalError {
    public func toTdmqError() -> TCTdmqError {
        guard let code = TCTdmqError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTdmqError(code, context: self.context)
    }
}