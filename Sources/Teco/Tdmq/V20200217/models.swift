//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Tdmq {
    /// AMQP集群配置
    public struct AMQPClusterConfig: TCOutputModel {
        /// 单Vhost TPS上限
        public let maxTpsPerVHost: UInt64
        
        /// 单Vhost客户端连接数上限
        public let maxConnNumPerVHost: UInt64
        
        /// 最大Vhost数量
        public let maxVHostNum: UInt64
        
        /// 最大exchange数量
        public let maxExchangeNum: UInt64
        
        /// 最大Queue数量
        public let maxQueueNum: UInt64
        
        /// 消息最大保留时间，以毫秒为单位
        public let maxRetentionTime: UInt64
        
        /// 已使用Vhost数量
        public let usedVHostNum: UInt64
        
        /// 已使用exchange数量
        public let usedExchangeNum: UInt64
        
        /// 已使用queue数量
        public let usedQueueNum: UInt64
        
        enum CodingKeys: String, CodingKey {
            case maxTpsPerVHost = "MaxTpsPerVHost"
            case maxConnNumPerVHost = "MaxConnNumPerVHost"
            case maxVHostNum = "MaxVHostNum"
            case maxExchangeNum = "MaxExchangeNum"
            case maxQueueNum = "MaxQueueNum"
            case maxRetentionTime = "MaxRetentionTime"
            case usedVHostNum = "UsedVHostNum"
            case usedExchangeNum = "UsedExchangeNum"
            case usedQueueNum = "UsedQueueNum"
        }
    }
    
    /// 租户AMQP集群详细信息
    public struct AMQPClusterDetail: TCOutputModel {
        /// 集群基本信息
        public let info: AMQPClusterInfo
        
        /// 集群配置信息
        public let config: AMQPClusterConfig
        
        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?
        
        /// 集群状态，0:创建中，1:正常，2:销毁中，3:已删除，4: 隔离中，5:创建失败，6: 删除失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?
        
        enum CodingKeys: String, CodingKey {
            case info = "Info"
            case config = "Config"
            case tags = "Tags"
            case status = "Status"
        }
    }
    
    /// AMQP集群基本信息
    public struct AMQPClusterInfo: TCOutputModel {
        /// 集群ID
        public let clusterId: String
        
        /// 集群名称
        public let clusterName: String
        
        /// 地域信息
        public let region: String
        
        /// 创建时间，毫秒为单位
        public let createTime: UInt64
        
        /// 集群说明信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 公网接入地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicEndPoint: String?
        
        /// VPC接入地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcEndPoint: String?
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case region = "Region"
            case createTime = "CreateTime"
            case remark = "Remark"
            case publicEndPoint = "PublicEndPoint"
            case vpcEndPoint = "VpcEndPoint"
        }
    }
    
    /// AMQP集群近期使用量
    public struct AMQPClusterRecentStats: TCOutputModel {
        /// Queue数量
        public let queueNum: UInt64
        
        /// 消息生产数
        public let producedMsgNum: UInt64
        
        /// 消息堆积数
        public let accumulativeMsgNum: UInt64
        
        /// Exchange数量
        public let exchangeNum: UInt64
        
        enum CodingKeys: String, CodingKey {
            case queueNum = "QueueNum"
            case producedMsgNum = "ProducedMsgNum"
            case accumulativeMsgNum = "AccumulativeMsgNum"
            case exchangeNum = "ExchangeNum"
        }
    }
    
    /// AMQP Exchange信息
    public struct AMQPExchange: TCOutputModel {
        /// Exchange名称
        public let name: String
        
        /// Exchange的类别，为枚举类型:Direct, Fanout, Topic
        public let type: String
        
        /// 主绑定数
        public let sourceBindedNum: UInt64
        
        /// 说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 被绑定数
        public let destBindedNum: UInt64
        
        /// 创建时间，以毫秒为单位
        public let createTime: UInt64
        
        /// 创建时间，以毫秒为单位
        public let updateTime: UInt64
        
        /// 是否为内部Exchange(以amq.前缀开头的)
        public let `internal`: Bool
        
        /// 备用Exchange名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alternateExchange: String?
        
        /// 备用Exchange是否删除标识: true(已删除)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alternateExchangeDeleteMark: Bool?
        
        /// 延迟Exchange的类别，为枚举类型:Direct, Fanout, Topic
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delayType: String?
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case sourceBindedNum = "SourceBindedNum"
            case remark = "Remark"
            case destBindedNum = "DestBindedNum"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case `internal` = "Internal"
            case alternateExchange = "AlternateExchange"
            case alternateExchangeDeleteMark = "AlternateExchangeDeleteMark"
            case delayType = "DelayType"
        }
    }
    
    /// AMQP 队列信息
    public struct AMQPQueueDetail: TCOutputModel {
        /// Queue名称
        public let name: String
        
        /// 说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 被绑定数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let destBindedNum: UInt64?
        
        /// 创建时间，以毫秒为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: UInt64?
        
        /// 创建时间，以毫秒为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: UInt64?
        
        /// 在线消费者数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let onlineConsumerNum: UInt64?
        
        /// 每秒钟的事务数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tps: UInt64?
        
        /// 消息堆积数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accumulativeMsgNum: UInt64?
        
        /// 是否自动删除
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoDelete: Bool?
        
        /// 死信交换机
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadLetterExchange: String?
        
        /// 死信交换机路由键
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadLetterRoutingKey: String?
        
        /// Queue对应的Topic名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicName: String?
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case remark = "Remark"
            case destBindedNum = "DestBindedNum"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case onlineConsumerNum = "OnlineConsumerNum"
            case tps = "Tps"
            case accumulativeMsgNum = "AccumulativeMsgNum"
            case autoDelete = "AutoDelete"
            case deadLetterExchange = "DeadLetterExchange"
            case deadLetterRoutingKey = "DeadLetterRoutingKey"
            case topicName = "TopicName"
        }
    }
    
    /// AMQP路由关系
    public struct AMQPRouteRelation: TCOutputModel {
        /// 路由关系ID
        public let routeRelationId: String
        
        /// 源Exchange
        public let sourceExchange: String
        
        /// 目标类型:Queue|Exchange
        public let destType: String
        
        /// 目标值
        public let destValue: String
        
        /// 绑定key
        public let routingKey: String
        
        /// 源路由类型:Direct|Topic|Fanout
        public let sourceExchangeType: String
        
        /// 创建时间，以毫秒为单位
        public let createTime: UInt64
        
        /// 修改时间，以毫秒为单位
        public let updateTime: UInt64
        
        /// 说明信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        enum CodingKeys: String, CodingKey {
            case routeRelationId = "RouteRelationId"
            case sourceExchange = "SourceExchange"
            case destType = "DestType"
            case destValue = "DestValue"
            case routingKey = "RoutingKey"
            case sourceExchangeType = "SourceExchangeType"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case remark = "Remark"
        }
    }
    
    /// vhostd信息
    public struct AMQPVHost: TCOutputModel {
        /// 命名空间名称，3-64个字符，只能包含字母、数字、“-”及“_”
        public let vHostId: String
        
        /// 未消费消息的保留时间，以毫秒单位，范围60秒到15天
        public let msgTtl: UInt64
        
        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 创建时间，以毫秒为单位
        public let createTime: UInt64
        
        /// 更新时间，以毫秒为单位
        public let updateTime: UInt64
        
        /// 用户名
        public let username: String
        
        /// 密码
        public let password: String
        
        /// 集群状态，0:创建中，1:正常，2:销毁中，3:已删除，4: 隔离中，5:创建失败，6: 删除失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?
        
        enum CodingKeys: String, CodingKey {
            case vHostId = "VHostId"
            case msgTtl = "MsgTtl"
            case remark = "Remark"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case username = "Username"
            case password = "Password"
            case status = "Status"
        }
    }
    
    /// 用户专享集群信息
    public struct BindCluster: TCOutputModel {
        /// 物理集群的名称
        public let clusterName: String
        
        enum CodingKeys: String, CodingKey {
            case clusterName = "ClusterName"
        }
    }
    
    /// 运营端命名空间bundle实体
    public struct BundleSetOpt: TCOutputModel {
    }
    
    /// 集群信息集合
    public struct Cluster: TCOutputModel {
        /// 集群Id。
        public let clusterId: String
        
        /// 集群名称。
        public let clusterName: String
        
        /// 说明信息。
        public let remark: String
        
        /// 接入点数量
        public let endPointNum: Int64
        
        /// 创建时间
        public let createTime: String
        
        /// 集群是否健康，1表示健康，0表示异常
        public let healthy: Int64
        
        /// 集群健康信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthyInfo: String?
        
        /// 集群状态，0:创建中，1:正常，2:销毁中，3:已删除，4: 隔离中，5:创建失败，6: 删除失败
        public let status: Int64
        
        /// 最大命名空间数量
        public let maxNamespaceNum: Int64
        
        /// 最大Topic数量
        public let maxTopicNum: Int64
        
        /// 最大QPS
        public let maxQps: Int64
        
        /// 最大消息保留时间，秒为单位
        public let messageRetentionTime: Int64
        
        /// 最大存储容量
        public let maxStorageCapacity: Int64
        
        /// 集群版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?
        
        /// 公网访问接入点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicEndPoint: String?
        
        /// VPC访问接入点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcEndPoint: String?
        
        /// 命名空间数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespaceNum: Int64?
        
        /// 已使用存储限制，MB为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedStorageBudget: Int64?
        
        /// 最大生产消息速率，以条数为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxPublishRateInMessages: Int64?
        
        /// 最大推送消息速率，以条数为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxDispatchRateInMessages: Int64?
        
        /// 最大生产消息速率，以字节为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxPublishRateInBytes: Int64?
        
        /// 最大推送消息速率，以字节为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxDispatchRateInBytes: Int64?
        
        /// 已创建主题数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicNum: Int64?
        
        /// 最长消息延时，以秒为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxMessageDelayInSeconds: Int64?
        
        /// 是否开启公网访问，不填时默认开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicAccessEnabled: Bool?
        
        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?
        
        /// 计费模式：
        /// 0: 按量计费
        /// 1: 包年包月
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: Int64?
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case remark = "Remark"
            case endPointNum = "EndPointNum"
            case createTime = "CreateTime"
            case healthy = "Healthy"
            case healthyInfo = "HealthyInfo"
            case status = "Status"
            case maxNamespaceNum = "MaxNamespaceNum"
            case maxTopicNum = "MaxTopicNum"
            case maxQps = "MaxQps"
            case messageRetentionTime = "MessageRetentionTime"
            case maxStorageCapacity = "MaxStorageCapacity"
            case version = "Version"
            case publicEndPoint = "PublicEndPoint"
            case vpcEndPoint = "VpcEndPoint"
            case namespaceNum = "NamespaceNum"
            case usedStorageBudget = "UsedStorageBudget"
            case maxPublishRateInMessages = "MaxPublishRateInMessages"
            case maxDispatchRateInMessages = "MaxDispatchRateInMessages"
            case maxPublishRateInBytes = "MaxPublishRateInBytes"
            case maxDispatchRateInBytes = "MaxDispatchRateInBytes"
            case topicNum = "TopicNum"
            case maxMessageDelayInSeconds = "MaxMessageDelayInSeconds"
            case publicAccessEnabled = "PublicAccessEnabled"
            case tags = "Tags"
            case payMode = "PayMode"
        }
    }
    
    /// cmq DeadLetterPolicy
    public struct CmqDeadLetterPolicy: TCOutputModel {
        /// 死信队列。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadLetterQueue: String?
        
        /// 死信队列策略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policy: UInt64?
        
        /// 最大未消费过期时间。Policy为1时必选。范围300-43200，单位秒，需要小于消息最大保留时间MsgRetentionSeconds。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxTimeToLive: UInt64?
        
        /// 最大接收次数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxReceiveCount: UInt64?
        
        enum CodingKeys: String, CodingKey {
            case deadLetterQueue = "DeadLetterQueue"
            case policy = "Policy"
            case maxTimeToLive = "MaxTimeToLive"
            case maxReceiveCount = "MaxReceiveCount"
        }
    }
    
    /// Cmq DeadLetterSource
    public struct CmqDeadLetterSource: TCOutputModel {
        /// 消息队列ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueId: String?
        
        /// 消息队列名字。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueName: String?
        
        enum CodingKeys: String, CodingKey {
            case queueId = "QueueId"
            case queueName = "QueueName"
        }
    }
    
    /// cmq 批量queue属性信息
    public struct CmqQueue: TCOutputModel {
        /// 消息队列ID。
        public let queueId: String
        
        /// 消息队列名字。
        public let queueName: String
        
        /// 每秒钟生产消息条数的限制，消费消息的大小是该值的1.1倍。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let qps: UInt64?
        
        /// 带宽限制。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bps: UInt64?
        
        /// 飞行消息最大保留时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxDelaySeconds: UInt64?
        
        /// 最大堆积消息数。取值范围在公测期间为 1,000,000 - 10,000,000，正式上线后范围可达到 1000,000-1000,000,000。默认取值在公测期间为 10,000,000，正式上线后为 100,000,000。
        public let maxMsgHeapNum: UInt64
        
        /// 消息接收长轮询等待时间。取值范围0 - 30秒，默认值0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pollingWaitSeconds: UInt64?
        
        /// 消息保留周期。取值范围60-1296000秒（1min-15天），默认值345600秒（4 天）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRetentionSeconds: UInt64?
        
        /// 消息可见性超时。取值范围1 - 43200秒（即12小时内），默认值30。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let visibilityTimeout: UInt64?
        
        /// 消息最大长度。取值范围1024 - 1048576 Byte（即1K - 1024K），默认值65536。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxMsgSize: UInt64?
        
        /// 回溯队列的消息回溯时间最大值，取值范围0 - 43200秒，0表示不开启消息回溯。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rewindSeconds: UInt64?
        
        /// 队列的创建时间。返回 Unix 时间戳，精确到毫秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: UInt64?
        
        /// 最后一次修改队列属性的时间。返回 Unix 时间戳，精确到毫秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastModifyTime: UInt64?
        
        /// 在队列中处于 Active 状态（不处于被消费状态）的消息总数，为近似值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let activeMsgNum: UInt64?
        
        /// 在队列中处于 Inactive 状态（正处于被消费状态）的消息总数，为近似值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inactiveMsgNum: UInt64?
        
        /// 延迟消息数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delayMsgNum: UInt64?
        
        /// 已调用 DelMsg 接口删除，但还在回溯保留时间内的消息数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rewindMsgNum: UInt64?
        
        /// 消息最小未消费时间，单位为秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minMsgTime: UInt64?
        
        /// 事务消息队列。true表示是事务消息，false表示不是事务消息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transaction: Bool?
        
        /// 死信队列。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadLetterSource: [CmqDeadLetterSource]?
        
        /// 死信队列策略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadLetterPolicy: CmqDeadLetterPolicy?
        
        /// 事务消息策略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transactionPolicy: CmqTransactionPolicy?
        
        /// 创建者Uin。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createUin: UInt64?
        
        /// 关联的标签。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?
        
        /// 消息轨迹。true表示开启，false表示不开启。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trace: Bool?
        
        /// 租户id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tenantId: String?
        
        /// 命名空间名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespaceName: String?
        
        /// 集群状态，0:创建中，1:正常，2:销毁中，3:已删除，4: 隔离中，5:创建失败，6: 删除失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?
        
        /// 最大未确认消息数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxUnackedMsgNum: Int64?
        
        /// 最大消息堆积大小（字节）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxMsgBacklogSize: Int64?
        
        /// 队列可回溯存储空间，取值范围1024MB - 10240MB，0表示不开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let retentionSizeInMB: UInt64?
        
        enum CodingKeys: String, CodingKey {
            case queueId = "QueueId"
            case queueName = "QueueName"
            case qps = "Qps"
            case bps = "Bps"
            case maxDelaySeconds = "MaxDelaySeconds"
            case maxMsgHeapNum = "MaxMsgHeapNum"
            case pollingWaitSeconds = "PollingWaitSeconds"
            case msgRetentionSeconds = "MsgRetentionSeconds"
            case visibilityTimeout = "VisibilityTimeout"
            case maxMsgSize = "MaxMsgSize"
            case rewindSeconds = "RewindSeconds"
            case createTime = "CreateTime"
            case lastModifyTime = "LastModifyTime"
            case activeMsgNum = "ActiveMsgNum"
            case inactiveMsgNum = "InactiveMsgNum"
            case delayMsgNum = "DelayMsgNum"
            case rewindMsgNum = "RewindMsgNum"
            case minMsgTime = "MinMsgTime"
            case transaction = "Transaction"
            case deadLetterSource = "DeadLetterSource"
            case deadLetterPolicy = "DeadLetterPolicy"
            case transactionPolicy = "TransactionPolicy"
            case createUin = "CreateUin"
            case tags = "Tags"
            case trace = "Trace"
            case tenantId = "TenantId"
            case namespaceName = "NamespaceName"
            case status = "Status"
            case maxUnackedMsgNum = "MaxUnackedMsgNum"
            case maxMsgBacklogSize = "MaxMsgBacklogSize"
            case retentionSizeInMB = "RetentionSizeInMB"
        }
    }
    
    /// cmq订阅返回参数
    public struct CmqSubscription: TCOutputModel {
        /// 订阅名字，在单个地域同一帐号的同一主题下唯一。订阅名称是一个不超过64个字符的字符串，必须以字母为首字符，剩余部分可以包含字母、数字和横划线(-)。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subscriptionName: String?
        
        /// 订阅 ID。订阅 ID 在拉取监控数据时会用到。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subscriptionId: String?
        
        /// 订阅拥有者的 APPID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicOwner: UInt64?
        
        /// 该订阅待投递的消息数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgCount: UInt64?
        
        /// 最后一次修改订阅属性的时间。返回 Unix 时间戳，精确到毫秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastModifyTime: UInt64?
        
        /// 订阅的创建时间。返回 Unix 时间戳，精确到毫秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: UInt64?
        
        /// 表示订阅接收消息的过滤策略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bindingKey: [String]?
        
        /// 接收通知的 endpoint，根据协议 protocol 区分：对于 HTTP，endpoint 必须以http://开头，host 可以是域名或 IP；对于 queue，则填 queueName。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endpoint: String?
        
        /// 描述用户创建订阅时选择的过滤策略：
        /// filterType = 1表示用户使用 filterTag 标签过滤
        /// filterType = 2表示用户使用 bindingKey 过滤。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let filterTags: [String]?
        
        /// 订阅的协议，目前支持两种协议：HTTP、queue。使用 HTTP 协议，用户需自己搭建接受消息的 Web Server。使用 queue，消息会自动推送到 CMQ queue，用户可以并发地拉取消息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?
        
        /// 向 endpoint 推送消息出现错误时，CMQ 推送服务器的重试策略。取值有：
        /// （1）BACKOFF_RETRY，退避重试。每隔一定时间重试一次，重试够一定次数后，就把该消息丢弃，继续推送下一条消息；
        /// （2）EXPONENTIAL_DECAY_RETRY，指数衰退重试。每次重试的间隔是指数递增的，例如开始 1s，后面是 2s，4s，8s...由于 Topic 消息的周期是一天，所以最多重试一天就把消息丢弃。默认值是 EXPONENTIAL_DECAY_RETRY。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notifyStrategy: String?
        
        /// 推送内容的格式。取值：（1）JSON；（2）SIMPLIFIED，即 raw 格式。如果 protocol 是 queue，则取值必须为 SIMPLIFIED。如果 protocol 是 HTTP，两个值均可以，默认值是 JSON。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notifyContentFormat: String?
        
        enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
            case subscriptionId = "SubscriptionId"
            case topicOwner = "TopicOwner"
            case msgCount = "MsgCount"
            case lastModifyTime = "LastModifyTime"
            case createTime = "CreateTime"
            case bindingKey = "BindingKey"
            case endpoint = "Endpoint"
            case filterTags = "FilterTags"
            case `protocol` = "Protocol"
            case notifyStrategy = "NotifyStrategy"
            case notifyContentFormat = "NotifyContentFormat"
        }
    }
    
    /// cmq topic返回信息展示字段
    public struct CmqTopic: TCOutputModel {
        /// 主题的 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicId: String?
        
        /// 主题名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicName: String?
        
        /// 消息在主题中最长存活时间，从发送到该主题开始经过此参数指定的时间后，不论消息是否被成功推送给用户都将被删除，单位为秒。固定为一天（86400秒），该属性不能修改。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRetentionSeconds: UInt64?
        
        /// 消息最大长度。取值范围1024 - 1048576Byte（即1 - 1024K），默认值为65536。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxMsgSize: UInt64?
        
        /// 每秒钟发布消息的条数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let qps: UInt64?
        
        /// 描述用户创建订阅时选择的过滤策略：
        /// FilterType = 1表示用户使用 FilterTag 标签过滤;
        /// FilterType = 2表示用户使用 BindingKey 过滤。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let filterType: UInt64?
        
        /// 主题的创建时间。返回 Unix 时间戳，精确到毫秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: UInt64?
        
        /// 最后一次修改主题属性的时间。返回 Unix 时间戳，精确到毫秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastModifyTime: UInt64?
        
        /// 当前该主题中消息数目（消息堆积数）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgCount: UInt64?
        
        /// 创建者 Uin，CAM 鉴权 resource 由该字段组合而成。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createUin: UInt64?
        
        /// 关联的标签。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?
        
        /// 消息轨迹。true表示开启，false表示不开启。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trace: Bool?
        
        /// 租户id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tenantId: String?
        
        /// 命名空间名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespaceName: String?
        
        /// 集群状态，0:创建中，1:正常，2:销毁中，3:已删除，4: 隔离中，5:创建失败，6: 删除失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?
        
        /// 0表示pulsar，1表示rocketmq
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let brokerType: Int64?
        
        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case topicName = "TopicName"
            case msgRetentionSeconds = "MsgRetentionSeconds"
            case maxMsgSize = "MaxMsgSize"
            case qps = "Qps"
            case filterType = "FilterType"
            case createTime = "CreateTime"
            case lastModifyTime = "LastModifyTime"
            case msgCount = "MsgCount"
            case createUin = "CreateUin"
            case tags = "Tags"
            case trace = "Trace"
            case tenantId = "TenantId"
            case namespaceName = "NamespaceName"
            case status = "Status"
            case brokerType = "BrokerType"
        }
    }
    
    /// cmq TransactionPolicy
    public struct CmqTransactionPolicy: TCOutputModel {
        /// 第一次回查时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let firstQueryInterval: UInt64?
        
        /// 最大查询次数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxQueryCount: UInt64?
        
        enum CodingKeys: String, CodingKey {
            case firstQueryInterval = "FirstQueryInterval"
            case maxQueryCount = "MaxQueryCount"
        }
    }
    
    ///  消费者
    public struct Consumer: TCOutputModel {
        /// 消费者开始连接的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectedSince: String?
        
        /// 消费者地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerAddr: String?
        
        /// 消费者名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerName: String?
        
        /// 消费者版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientVersion: String?
        
        /// 消费者连接的主题分区号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partition: Int64?
        
        enum CodingKeys: String, CodingKey {
            case connectedSince = "ConnectedSince"
            case consumerAddr = "ConsumerAddr"
            case consumerName = "ConsumerName"
            case clientVersion = "ClientVersion"
            case partition = "Partition"
        }
    }
    
    /// 消费进度详情
    public struct ConsumersSchedule: TCOutputModel {
        /// 当前分区id。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partitions: UInt64?
        
        /// 消息数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numberOfEntries: UInt64?
        
        /// 消息积压数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgBacklog: UInt64?
        
        /// 消费者每秒分发消息的数量之和。
        public let msgRateOut: String
        
        /// 消费者每秒消息的byte。
        public let msgThroughputOut: String
        
        /// 超时丢弃比例。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateExpired: String?
        
        enum CodingKeys: String, CodingKey {
            case partitions = "Partitions"
            case numberOfEntries = "NumberOfEntries"
            case msgBacklog = "MsgBacklog"
            case msgRateOut = "MsgRateOut"
            case msgThroughputOut = "MsgThroughputOut"
            case msgRateExpired = "MsgRateExpired"
        }
    }
    
    /// 命名空间信息
    public struct Environment: TCOutputModel {
        /// 命名空间名称
        public let environmentId: String
        
        /// 说明
        public let remark: String
        
        /// 未消费消息过期时间，单位：秒，最大1296000（15天）
        public let msgTTL: Int64
        
        /// 创建时间
        // FIXME: Codable support not implemented for datetime yet.
        public let createTime: Date
        
        /// 最近修改时间
        // FIXME: Codable support not implemented for datetime yet.
        public let updateTime: Date
        
        /// 命名空间ID
        public let namespaceId: String
        
        /// 命名空间名称
        public let namespaceName: String
        
        /// Topic数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicNum: Int64?
        
        /// 消息保留策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let retentionPolicy: RetentionPolicy?
        
        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case remark = "Remark"
            case msgTTL = "MsgTTL"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case namespaceId = "NamespaceId"
            case namespaceName = "NamespaceName"
            case topicNum = "TopicNum"
            case retentionPolicy = "RetentionPolicy"
        }
    }
    
    /// 环境角色集合
    public struct EnvironmentRole: TCOutputModel {
        /// 环境（命名空间）。
        public let environmentId: String
        
        /// 角色名称。
        public let roleName: String
        
        /// 授权项，最多只能包含produce、consume两项的非空字符串数组。
        public let permissions: [String]
        
        /// 角色描述。
        public let roleDescribe: String
        
        /// 创建时间。
        // FIXME: Codable support not implemented for datetime yet.
        public let createTime: Date
        
        /// 更新时间。
        // FIXME: Codable support not implemented for datetime yet.
        public let updateTime: Date
        
        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case roleName = "RoleName"
            case permissions = "Permissions"
            case roleDescribe = "RoleDescribe"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }
    
    /// 过滤参数
    public struct Filter: TCInputModel {
        /// 过滤参数的名字
        public let name: String?
        
        /// 数值
        public let values: [String]?
        
        public init (name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }
    
    /// 过滤订阅列表
    public struct FilterSubscription: TCInputModel {
        /// 是否仅展示包含真实消费者的订阅。
        public let consumerHasCount: Bool?
        
        /// 是否仅展示消息堆积的订阅。
        public let consumerHasBacklog: Bool?
        
        /// 是否仅展示存在消息超期丢弃的订阅。
        public let consumerHasExpired: Bool?
        
        /// 按照订阅名过滤，精确查询。
        public let subscriptionNames: [String]?
        
        public init (consumerHasCount: Bool? = nil, consumerHasBacklog: Bool? = nil, consumerHasExpired: Bool? = nil, subscriptionNames: [String]? = nil) {
            self.consumerHasCount = consumerHasCount
            self.consumerHasBacklog = consumerHasBacklog
            self.consumerHasExpired = consumerHasExpired
            self.subscriptionNames = subscriptionNames
        }
        
        enum CodingKeys: String, CodingKey {
            case consumerHasCount = "ConsumerHasCount"
            case consumerHasBacklog = "ConsumerHasBacklog"
            case consumerHasExpired = "ConsumerHasExpired"
            case subscriptionNames = "SubscriptionNames"
        }
    }
    
    /// 面向运营端的虚拟集群信息
    public struct InternalTenant: TCOutputModel {
        /// 虚拟集群ID
        public let tenantId: String
        
        /// 虚拟集群名称
        public let tenantName: String
        
        /// 客户UIN
        public let customerUin: String
        
        /// 客户的APPID
        public let customerAppId: String
        
        /// 物理集群名称
        public let clusterName: String
        
        /// 集群协议类型，支持的值为TDMQ，ROCKETMQ，AMQP，CMQ
        public let type: String
        
        /// 命名空间配额
        public let maxNamespaces: Int64
        
        /// 已使用命名空间配额
        public let usedNamespaces: Int64
        
        /// Topic配额
        public let maxTopics: Int64
        
        /// 已使用Topic配额
        public let usedTopics: Int64
        
        /// Topic分区数配额
        public let maxPartitions: Int64
        
        /// 已使用Topic分区数配额
        public let usedPartitions: Int64
        
        /// 存储配额, byte为单位
        public let maxMsgBacklogSize: UInt64
        
        /// 命名空间最大生产TPS
        public let maxPublishTps: UInt64
        
        /// 消息最大保留时间，秒为单位
        public let maxRetention: UInt64
        
        /// 创建时间，毫秒为单位
        public let createTime: UInt64
        
        /// 修改时间，毫秒为单位
        public let updateTime: UInt64
        
        /// 命名空间最大消费TPS
        public let maxDispatchTps: UInt64
        
        /// 命名空间最大消费带宽，byte为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxDispatchRateInBytes: UInt64?
        
        /// 命名空间最大生产带宽，byte为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxPublishRateInBytes: UInt64?
        
        /// 消息最大保留空间，MB为单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxRetentionSizeInMB: UInt64?
        
        enum CodingKeys: String, CodingKey {
            case tenantId = "TenantId"
            case tenantName = "TenantName"
            case customerUin = "CustomerUin"
            case customerAppId = "CustomerAppId"
            case clusterName = "ClusterName"
            case type = "Type"
            case maxNamespaces = "MaxNamespaces"
            case usedNamespaces = "UsedNamespaces"
            case maxTopics = "MaxTopics"
            case usedTopics = "UsedTopics"
            case maxPartitions = "MaxPartitions"
            case usedPartitions = "UsedPartitions"
            case maxMsgBacklogSize = "MaxMsgBacklogSize"
            case maxPublishTps = "MaxPublishTps"
            case maxRetention = "MaxRetention"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case maxDispatchTps = "MaxDispatchTps"
            case maxDispatchRateInBytes = "MaxDispatchRateInBytes"
            case maxPublishRateInBytes = "MaxPublishRateInBytes"
            case maxRetentionSizeInMB = "MaxRetentionSizeInMB"
        }
    }
    
    /// 分区topic
    public struct PartitionsTopic: TCOutputModel {
        /// 最后一次间隔内发布消息的平均byte大小。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let averageMsgSize: String?
        
        /// 消费者数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerCount: String?
        
        /// 被记录下来的消息总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastConfirmedEntry: String?
        
        /// 最后一个ledger创建的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastLedgerCreatedTimestamp: String?
        
        /// 本地和复制的发布者每秒发布消息的速率。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateIn: String?
        
        /// 本地和复制的消费者每秒分发消息的数量之和。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateOut: String?
        
        /// 本地和复制的发布者每秒发布消息的byte。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgThroughputIn: String?
        
        /// 本地和复制的消费者每秒分发消息的byte。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgThroughputOut: String?
        
        /// 被记录下来的消息总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numberOfEntries: String?
        
        /// 子分区id。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partitions: Int64?
        
        /// 生产者数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let producerCount: String?
        
        /// 以byte计算的所有消息存储总量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalSize: String?
        
        /// topic类型描述。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicType: UInt64?
        
        enum CodingKeys: String, CodingKey {
            case averageMsgSize = "AverageMsgSize"
            case consumerCount = "ConsumerCount"
            case lastConfirmedEntry = "LastConfirmedEntry"
            case lastLedgerCreatedTimestamp = "LastLedgerCreatedTimestamp"
            case msgRateIn = "MsgRateIn"
            case msgRateOut = "MsgRateOut"
            case msgThroughputIn = "MsgThroughputIn"
            case msgThroughputOut = "MsgThroughputOut"
            case numberOfEntries = "NumberOfEntries"
            case partitions = "Partitions"
            case producerCount = "ProducerCount"
            case totalSize = "TotalSize"
            case topicType = "TopicType"
        }
    }
    
    /// 生产者信息
    public struct Publisher: TCOutputModel {
        /// 生产者id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let producerId: Int64?
        
        /// 生产者名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let producerName: String?
        
        /// 生产者地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let address: String?
        
        /// 客户端版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientVersion: String?
        
        /// 消息生产速率（条/秒）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateIn: Float?
        
        /// 消息生产吞吐速率（字节/秒）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgThroughputIn: Float?
        
        /// 平均消息大小（字节）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let averageMsgSize: Float?
        
        /// 连接时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectedSince: String?
        
        /// 生产者连接的主题分区号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partition: Int64?
        
        enum CodingKeys: String, CodingKey {
            case producerId = "ProducerId"
            case producerName = "ProducerName"
            case address = "Address"
            case clientVersion = "ClientVersion"
            case msgRateIn = "MsgRateIn"
            case msgThroughputIn = "MsgThroughputIn"
            case averageMsgSize = "AverageMsgSize"
            case connectedSince = "ConnectedSince"
            case partition = "Partition"
        }
    }
    
    /// RabbitMQ节点信息
    public struct RabbitMQPrivateNode: TCOutputModel {
        /// 节点名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeName: String?
        
        enum CodingKeys: String, CodingKey {
            case nodeName = "NodeName"
        }
    }
    
    /// RabbitMQ专享实例信息
    public struct RabbitMQVipInstance: TCOutputModel {
        /// 实例id
        public let instanceId: String
        
        /// 实例名称
        public let instanceName: String
        
        /// 实例版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceVersion: String?
        
        /// 实例状态，0表示创建中，1表示正常，2表示隔离中，3表示已销毁，4 - 异常, 5 - 发货失败
        public let status: UInt64
        
        /// 节点数量
        public let nodeCount: UInt64
        
        /// 实例配置规格名称
        public let configDisplay: String
        
        /// 峰值TPS
        public let maxTps: UInt64
        
        /// 峰值带宽，Mbps为单位
        public let maxBandWidth: UInt64
        
        /// 存储容量，GB为单位
        public let maxStorage: UInt64
        
        /// 实例到期时间，毫秒为单位
        public let expireTime: UInt64
        
        /// 自动续费标记，0表示默认状态(用户未设置，即初始状态即手动续费)， 1表示自动续费，2表示明确不自动续费(用户设置)
        public let autoRenewFlag: UInt64
        
        /// 0-后付费，1-预付费
        public let payMode: UInt64
        
        /// 备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 实例配置ID
        public let specName: String
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceVersion = "InstanceVersion"
            case status = "Status"
            case nodeCount = "NodeCount"
            case configDisplay = "ConfigDisplay"
            case maxTps = "MaxTps"
            case maxBandWidth = "MaxBandWidth"
            case maxStorage = "MaxStorage"
            case expireTime = "ExpireTime"
            case autoRenewFlag = "AutoRenewFlag"
            case payMode = "PayMode"
            case remark = "Remark"
            case specName = "SpecName"
        }
    }
    
    /// 消息保留策略
    public struct RetentionPolicy: TCInputModel, TCOutputModel {
        /// 消息保留时长
        public let timeInMinutes: Int64
        
        /// 消息保留大小
        public let sizeInMB: Int64
        
        public init (timeInMinutes: Int64, sizeInMB: Int64) {
            self.timeInMinutes = timeInMinutes
            self.sizeInMB = sizeInMB
        }
        
        enum CodingKeys: String, CodingKey {
            case timeInMinutes = "TimeInMinutes"
            case sizeInMB = "SizeInMB"
        }
    }
    
    /// RocketMQ集群配置
    public struct RocketMQClusterConfig: TCOutputModel {
        /// 单命名空间TPS上线
        public let maxTpsPerNamespace: UInt64
        
        /// 最大命名空间数量
        public let maxNamespaceNum: UInt64
        
        /// 已使用命名空间数量
        public let usedNamespaceNum: UInt64
        
        /// 最大Topic数量
        public let maxTopicNum: UInt64
        
        /// 已使用Topic数量
        public let usedTopicNum: UInt64
        
        /// 最大Group数量
        public let maxGroupNum: UInt64
        
        /// 已使用Group数量
        public let usedGroupNum: UInt64
        
        /// 消息最大保留时间，以毫秒为单位
        public let maxRetentionTime: UInt64
        
        /// 消息最长延时，以毫秒为单位
        public let maxLatencyTime: UInt64
        
        enum CodingKeys: String, CodingKey {
            case maxTpsPerNamespace = "MaxTpsPerNamespace"
            case maxNamespaceNum = "MaxNamespaceNum"
            case usedNamespaceNum = "UsedNamespaceNum"
            case maxTopicNum = "MaxTopicNum"
            case usedTopicNum = "UsedTopicNum"
            case maxGroupNum = "MaxGroupNum"
            case usedGroupNum = "UsedGroupNum"
            case maxRetentionTime = "MaxRetentionTime"
            case maxLatencyTime = "MaxLatencyTime"
        }
    }
    
    /// 租户RocketMQ集群详细信息
    public struct RocketMQClusterDetail: TCOutputModel {
        /// 集群基本信息
        public let info: RocketMQClusterInfo
        
        /// 集群配置信息
        public let config: RocketMQClusterConfig
        
        /// 集群状态，0:创建中，1:正常，2:销毁中，3:已删除，4: 隔离中，5:创建失败，6: 删除失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?
        
        enum CodingKeys: String, CodingKey {
            case info = "Info"
            case config = "Config"
            case status = "Status"
        }
    }
    
    /// RocketMQ集群基本信息
    public struct RocketMQClusterInfo: TCOutputModel {
        /// 集群ID
        public let clusterId: String
        
        /// 集群名称
        public let clusterName: String
        
        /// 地域信息
        public let region: String
        
        /// 创建时间，毫秒为单位
        public let createTime: UInt64
        
        /// 集群说明信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 公网接入地址
        public let publicEndPoint: String
        
        /// VPC接入地址
        public let vpcEndPoint: String
        
        /// 是否支持命名空间接入点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportNamespaceEndpoint: Bool?
        
        /// VPC信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcs: [VpcConfig]?
        
        /// 是否为专享实例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isVip: Bool?
        
        /// Rocketmq集群标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rocketMQFlag: Bool?
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case region = "Region"
            case createTime = "CreateTime"
            case remark = "Remark"
            case publicEndPoint = "PublicEndPoint"
            case vpcEndPoint = "VpcEndPoint"
            case supportNamespaceEndpoint = "SupportNamespaceEndpoint"
            case vpcs = "Vpcs"
            case isVip = "IsVip"
            case rocketMQFlag = "RocketMQFlag"
        }
    }
    
    /// RocketMQ近期使用量
    public struct RocketMQClusterRecentStats: TCOutputModel {
        /// Topic数量
        public let topicNum: UInt64
        
        /// 消息生产数
        public let producedMsgNum: UInt64
        
        /// 消息消费数
        public let consumedMsgNum: UInt64
        
        /// 消息堆积数
        public let accumulativeMsgNum: UInt64
        
        enum CodingKeys: String, CodingKey {
            case topicNum = "TopicNum"
            case producedMsgNum = "ProducedMsgNum"
            case consumedMsgNum = "ConsumedMsgNum"
            case accumulativeMsgNum = "AccumulativeMsgNum"
        }
    }
    
    /// RocketMQ消费组信息
    public struct RocketMQGroup: TCOutputModel {
        /// 消费组名称
        public let name: String
        
        /// 在线消费者数量
        public let consumerNum: UInt64
        
        /// 消费TPS
        public let tps: UInt64
        
        /// 总堆积数量
        public let totalAccumulative: Int64
        
        /// 0表示集群消费模式，1表示广播消费模式，-1表示未知
        public let consumptionMode: Int64
        
        /// 是否允许消费
        public let readEnabled: Bool
        
        /// 重试队列分区数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let retryPartitionNum: UInt64?
        
        /// 创建时间，以毫秒为单位
        public let createTime: UInt64
        
        /// 修改时间，以毫秒为单位
        public let updateTime: UInt64
        
        /// 客户端协议
        public let clientProtocol: String
        
        /// 说明信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 消费者类型，枚举值ACTIVELY, PASSIVELY
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerType: String?
        
        /// 是否开启广播消费
        public let broadcastEnabled: Bool
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case consumerNum = "ConsumerNum"
            case tps = "TPS"
            case totalAccumulative = "TotalAccumulative"
            case consumptionMode = "ConsumptionMode"
            case readEnabled = "ReadEnabled"
            case retryPartitionNum = "RetryPartitionNum"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case clientProtocol = "ClientProtocol"
            case remark = "Remark"
            case consumerType = "ConsumerType"
            case broadcastEnabled = "BroadcastEnabled"
        }
    }
    
    /// RocketMQ命名空间信息
    public struct RocketMQNamespace: TCOutputModel {
        /// 命名空间名称，3-64个字符，只能包含字母、数字、“-”及“_”
        public let namespaceId: String
        
        /// 未消费消息的保留时间，以毫秒单位，范围60秒到15天
        public let ttl: UInt64
        
        /// 消息持久化后保留的时间，以毫秒单位
        public let retentionTime: UInt64
        
        /// 说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 公网接入点地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicEndpoint: String?
        
        /// VPC接入点地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcEndpoint: String?
        
        enum CodingKeys: String, CodingKey {
            case namespaceId = "NamespaceId"
            case ttl = "Ttl"
            case retentionTime = "RetentionTime"
            case remark = "Remark"
            case publicEndpoint = "PublicEndpoint"
            case vpcEndpoint = "VpcEndpoint"
        }
    }
    
    /// RocketMQ主题信息
    public struct RocketMQTopic: TCOutputModel {
        /// 主题名称
        public let name: String
        
        /// 说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 读写分区数
        public let partitionNum: UInt64
        
        /// 创建时间，以毫秒为单位
        public let createTime: UInt64
        
        /// 创建时间，以毫秒为单位
        public let updateTime: UInt64
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case remark = "Remark"
            case partitionNum = "PartitionNum"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }
    
    /// RocketMQ专享实例信息
    public struct RocketMQVipInstance: TCOutputModel {
        /// 实例id
        public let instanceId: String
        
        /// 实例名称
        public let instanceName: String
        
        /// 实例版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceVersion: String?
        
        /// 实例状态，0表示创建中，1表示正常，2表示隔离中，3表示已销毁，4 - 异常
        public let status: UInt64
        
        /// 节点数量
        public let nodeCount: UInt64
        
        /// 实例配置规格名称
        public let configDisplay: String
        
        /// 峰值TPS
        public let maxTps: UInt64
        
        /// 峰值带宽，Mbps为单位
        public let maxBandWidth: UInt64
        
        /// 存储容量，GB为单位
        public let maxStorage: UInt64
        
        /// 实例到期时间，毫秒为单位
        public let expireTime: UInt64
        
        /// 自动续费标记，0表示默认状态(用户未设置，即初始状态即手动续费)， 1表示自动续费，2表示明确不自动续费(用户设置)
        public let autoRenewFlag: UInt64
        
        /// 0-后付费，1-预付费
        public let payMode: UInt64
        
        /// 备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 实例配置ID
        public let specName: String
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceVersion = "InstanceVersion"
            case status = "Status"
            case nodeCount = "NodeCount"
            case configDisplay = "ConfigDisplay"
            case maxTps = "MaxTps"
            case maxBandWidth = "MaxBandWidth"
            case maxStorage = "MaxStorage"
            case expireTime = "ExpireTime"
            case autoRenewFlag = "AutoRenewFlag"
            case payMode = "PayMode"
            case remark = "Remark"
            case specName = "SpecName"
        }
    }
    
    /// 角色实例
    public struct Role: TCOutputModel {
        /// 角色名称。
        public let roleName: String
        
        /// 角色token值。
        public let token: String
        
        /// 备注说明。
        public let remark: String
        
        /// 创建时间。
        // FIXME: Codable support not implemented for datetime yet.
        public let createTime: Date
        
        /// 更新时间。
        // FIXME: Codable support not implemented for datetime yet.
        public let updateTime: Date
        
        enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
            case token = "Token"
            case remark = "Remark"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }
    
    /// 排序器
    public struct Sort: TCInputModel {
        /// 排序字段
        public let name: String
        
        /// 升序ASC，降序DESC
        public let order: String
        
        public init (name: String, order: String) {
            self.name = name
            self.order = order
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case order = "Order"
        }
    }
    
    /// 订阅者
    public struct Subscription: TCOutputModel {
        /// 主题名称。
        public let topicName: String
        
        /// 环境（命名空间）名称。
        public let environmentId: String
        
        /// 消费者开始连接的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectedSince: String?
        
        /// 消费者地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerAddr: String?
        
        /// 消费者数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerCount: String?
        
        /// 消费者名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerName: String?
        
        /// 堆积的消息数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgBacklog: String?
        
        /// 于TTL，此订阅下没有被发送而是被丢弃的比例。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateExpired: String?
        
        /// 消费者每秒分发消息的数量之和。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateOut: String?
        
        /// 消费者每秒消息的byte。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgThroughputOut: String?
        
        /// 订阅名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subscriptionName: String?
        
        /// 消费者集合。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerSets: [Consumer]?
        
        /// 是否在线。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOnline: Bool?
        
        /// 消费进度集合。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumersScheduleSets: [ConsumersSchedule]?
        
        /// 备注。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: Date?
        
        /// 最近修改时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Date?
        
        /// 订阅类型，Exclusive，Shared，Failover， Key_Shared，空或NULL表示未知，
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subType: String?
        
        /// 是否由于未 ack 数到达上限而被 block
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let blockedSubscriptionOnUnackedMsgs: Bool?
        
        /// 未 ack 消息数上限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxUnackedMsgNum: Int64?
        
        enum CodingKeys: String, CodingKey {
            case topicName = "TopicName"
            case environmentId = "EnvironmentId"
            case connectedSince = "ConnectedSince"
            case consumerAddr = "ConsumerAddr"
            case consumerCount = "ConsumerCount"
            case consumerName = "ConsumerName"
            case msgBacklog = "MsgBacklog"
            case msgRateExpired = "MsgRateExpired"
            case msgRateOut = "MsgRateOut"
            case msgThroughputOut = "MsgThroughputOut"
            case subscriptionName = "SubscriptionName"
            case consumerSets = "ConsumerSets"
            case isOnline = "IsOnline"
            case consumersScheduleSets = "ConsumersScheduleSets"
            case remark = "Remark"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case subType = "SubType"
            case blockedSubscriptionOnUnackedMsgs = "BlockedSubscriptionOnUnackedMsgs"
            case maxUnackedMsgNum = "MaxUnackedMsgNum"
        }
    }
    
    /// 订阅关系
    public struct SubscriptionTopic: TCInputModel, TCOutputModel {
        /// 环境（命名空间）名称。
        public let environmentId: String
        
        /// 主题名称。
        public let topicName: String
        
        /// 订阅名称。
        public let subscriptionName: String
        
        public init (environmentId: String, topicName: String, subscriptionName: String) {
            self.environmentId = environmentId
            self.topicName = topicName
            self.subscriptionName = subscriptionName
        }
        
        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case topicName = "TopicName"
            case subscriptionName = "SubscriptionName"
        }
    }
    
    /// 标签的key/value的类型
    public struct Tag: TCInputModel {
        /// 标签的key的值
        public let tagKey: String
        
        /// 标签的Value的值
        public let tagValue: String
        
        public init (tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }
        
        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }
    
    /// 主题实例
    public struct Topic: TCOutputModel {
        /// 最后一次间隔内发布消息的平均byte大小。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let averageMsgSize: String?
        
        /// 消费者数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerCount: String?
        
        /// 被记录下来的消息总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastConfirmedEntry: String?
        
        /// 最后一个ledger创建的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastLedgerCreatedTimestamp: String?
        
        /// 本地和复制的发布者每秒发布消息的速率。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateIn: String?
        
        /// 本地和复制的消费者每秒分发消息的数量之和。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgRateOut: String?
        
        /// 本地和复制的发布者每秒发布消息的byte。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgThroughputIn: String?
        
        /// 本地和复制的消费者每秒分发消息的byte。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgThroughputOut: String?
        
        /// 被记录下来的消息总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numberOfEntries: String?
        
        /// 分区数<=0：topic下无子分区。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partitions: Int64?
        
        /// 生产者数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let producerCount: String?
        
        /// 以byte计算的所有消息存储总量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalSize: String?
        
        /// 分区topic里面的子分区。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subTopicSets: [PartitionsTopic]?
        
        /// topic类型描述：
        /// 0：普通消息；
        /// 1：全局顺序消息；
        /// 2：局部顺序消息；
        /// 3：重试队列；
        /// 4：死信队列；
        /// 5：事务消息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicType: UInt64?
        
        /// 环境（命名空间）名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let environmentId: String?
        
        /// 主题名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicName: String?
        
        /// 说明，128个字符以内。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        /// 创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: Date?
        
        /// 最近修改时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Date?
        
        /// 生产者上限。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let producerLimit: String?
        
        /// 消费者上限。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consumerLimit: String?
        
        /// 0: 非持久非分区
        /// 1: 非持久分区
        /// 2: 持久非分区
        /// 3: 持久分区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pulsarTopicType: Int64?
        
        enum CodingKeys: String, CodingKey {
            case averageMsgSize = "AverageMsgSize"
            case consumerCount = "ConsumerCount"
            case lastConfirmedEntry = "LastConfirmedEntry"
            case lastLedgerCreatedTimestamp = "LastLedgerCreatedTimestamp"
            case msgRateIn = "MsgRateIn"
            case msgRateOut = "MsgRateOut"
            case msgThroughputIn = "MsgThroughputIn"
            case msgThroughputOut = "MsgThroughputOut"
            case numberOfEntries = "NumberOfEntries"
            case partitions = "Partitions"
            case producerCount = "ProducerCount"
            case totalSize = "TotalSize"
            case subTopicSets = "SubTopicSets"
            case topicType = "TopicType"
            case environmentId = "EnvironmentId"
            case topicName = "TopicName"
            case remark = "Remark"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case producerLimit = "ProducerLimit"
            case consumerLimit = "ConsumerLimit"
            case pulsarTopicType = "PulsarTopicType"
        }
    }
    
    /// 主题关键信息
    public struct TopicRecord: TCInputModel, TCOutputModel {
        /// 环境（命名空间）名称。
        public let environmentId: String
        
        /// 主题名称。
        public let topicName: String
        
        public init (environmentId: String, topicName: String) {
            self.environmentId = environmentId
            self.topicName = topicName
        }
        
        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case topicName = "TopicName"
        }
    }
    
    /// vcp绑定记录
    public struct VpcBindRecord: TCOutputModel {
        /// 租户Vpc Id
        public let uniqueVpcId: String
        
        /// 租户Vpc子网Id
        public let uniqueSubnetId: String
        
        /// 路由Id
        public let routerId: String
        
        /// Vpc的Id
        public let ip: String
        
        /// Vpc的Port
        public let port: UInt64
        
        /// 说明，128个字符以内
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        enum CodingKeys: String, CodingKey {
            case uniqueVpcId = "UniqueVpcId"
            case uniqueSubnetId = "UniqueSubnetId"
            case routerId = "RouterId"
            case ip = "Ip"
            case port = "Port"
            case remark = "Remark"
        }
    }
    
    /// VPC配置信息
    public struct VpcConfig: TCInputModel, TCOutputModel {
        /// vpc的id
        public let vpcId: String
        
        /// 子网id
        public let subnetId: String
        
        public init (vpcId: String, subnetId: String) {
            self.vpcId = vpcId
            self.subnetId = subnetId
        }
        
        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
        }
    }
}
