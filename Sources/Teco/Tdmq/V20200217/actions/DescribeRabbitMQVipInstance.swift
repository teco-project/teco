//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// DescribeRabbitMQVipInstance请求参数结构体
    public struct DescribeRabbitMQVipInstanceRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    /// DescribeRabbitMQVipInstance返回参数结构体
    public struct DescribeRabbitMQVipInstanceResponse: TCResponseModel {
        /// 集群信息
        public let clusterInfo: RabbitMQClusterInfo

        /// 集群规格信息
        public let clusterSpecInfo: RabbitMQClusterSpecInfo

        /// 集群访问
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterNetInfo: RabbitMQClusterAccessInfo?

        /// 集群白名单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterWhiteListInfo: RabbitMQClusterWhiteListInfo?

        /// vhost配额信息
        public let virtualHostQuota: VirtualHostQuota

        /// exchange配额信息
        public let exchangeQuota: ExchangeQuota

        /// queue配额信息
        public let queueQuota: QueueQuota

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clusterInfo = "ClusterInfo"
            case clusterSpecInfo = "ClusterSpecInfo"
            case clusterNetInfo = "ClusterNetInfo"
            case clusterWhiteListInfo = "ClusterWhiteListInfo"
            case virtualHostQuota = "VirtualHostQuota"
            case exchangeQuota = "ExchangeQuota"
            case queueQuota = "QueueQuota"
            case requestId = "RequestId"
        }
    }

    /// 获取单个RabbitMQ专享实例信息
    @inlinable
    public func describeRabbitMQVipInstance(_ input: DescribeRabbitMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRabbitMQVipInstanceResponse> {
        self.client.execute(action: "DescribeRabbitMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取单个RabbitMQ专享实例信息
    @inlinable
    public func describeRabbitMQVipInstance(_ input: DescribeRabbitMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRabbitMQVipInstanceResponse {
        try await self.client.execute(action: "DescribeRabbitMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取单个RabbitMQ专享实例信息
    @inlinable
    public func describeRabbitMQVipInstance(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRabbitMQVipInstanceResponse> {
        self.describeRabbitMQVipInstance(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取单个RabbitMQ专享实例信息
    @inlinable
    public func describeRabbitMQVipInstance(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRabbitMQVipInstanceResponse {
        try await self.describeRabbitMQVipInstance(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
