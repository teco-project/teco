//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdmq {
    /// 创建集群
    ///
    /// 创建用户的集群
    @inlinable
    public func createCluster(_ input: CreateClusterRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateClusterResponse > {
        self.client.execute(action: "CreateCluster", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建集群
    ///
    /// 创建用户的集群
    @inlinable
    public func createCluster(_ input: CreateClusterRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateClusterResponse {
        try await self.client.execute(action: "CreateCluster", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateCluster请求参数结构体
    public struct CreateClusterRequest: TCRequestModel {
        /// 集群名称，不支持中字以及除了短线和下划线外的特殊字符且不超过16个字符。
        public let clusterName: String
        
        /// 用户专享物理集群ID，如果不传，则默认在公共集群上创建用户集群资源。
        public let bindClusterId: UInt64?
        
        /// 说明，128个字符以内。
        public let remark: String?
        
        /// 集群的标签列表(已废弃)
        public let tags: [Tag]?
        
        /// 是否开启公网访问，不填时默认开启
        public let publicAccessEnabled: Bool?
        
        public init (clusterName: String, bindClusterId: UInt64?, remark: String?, tags: [Tag]?, publicAccessEnabled: Bool?) {
            self.clusterName = clusterName
            self.bindClusterId = bindClusterId
            self.remark = remark
            self.tags = tags
            self.publicAccessEnabled = publicAccessEnabled
        }
        
        enum CodingKeys: String, CodingKey {
            case clusterName = "ClusterName"
            case bindClusterId = "BindClusterId"
            case remark = "Remark"
            case tags = "Tags"
            case publicAccessEnabled = "PublicAccessEnabled"
        }
    }
    
    /// CreateCluster返回参数结构体
    public struct CreateClusterResponse: TCResponseModel {
        /// 集群ID
        public let clusterId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case requestId = "RequestId"
        }
    }
}
