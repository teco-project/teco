//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore
import TecoPaginationHelpers

extension Tdmq {
    /// DescribeBindVpcs请求参数结构体
    public struct DescribeBindVpcsRequest: TCPaginatedRequest {
        /// 起始下标，不填默认为0。
        public let offset: UInt64?

        /// 返回数量，不填则默认为10，最大值为20。
        public let limit: UInt64?

        /// Pulsar 集群的ID
        public let clusterId: String?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, clusterId: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case clusterId = "ClusterId"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeBindVpcsResponse) -> DescribeBindVpcsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeBindVpcsRequest(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, clusterId: self.clusterId)
        }
    }

    /// DescribeBindVpcs返回参数结构体
    public struct DescribeBindVpcsResponse: TCPaginatedResponse {
        /// 记录数。
        public let totalCount: UInt64

        /// Vpc集合。
        public let vpcSets: [VpcBindRecord]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case vpcSets = "VpcSets"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [VpcBindRecord] {
            self.vpcSets
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取租户VPC绑定关系
    @inlinable
    public func describeBindVpcs(_ input: DescribeBindVpcsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBindVpcsResponse> {
        self.client.execute(action: "DescribeBindVpcs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取租户VPC绑定关系
    @inlinable
    public func describeBindVpcs(_ input: DescribeBindVpcsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBindVpcsResponse {
        try await self.client.execute(action: "DescribeBindVpcs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取租户VPC绑定关系
    @inlinable
    public func describeBindVpcs(offset: UInt64? = nil, limit: UInt64? = nil, clusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBindVpcsResponse> {
        self.describeBindVpcs(.init(offset: offset, limit: limit, clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取租户VPC绑定关系
    @inlinable
    public func describeBindVpcs(offset: UInt64? = nil, limit: UInt64? = nil, clusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBindVpcsResponse {
        try await self.describeBindVpcs(.init(offset: offset, limit: limit, clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取租户VPC绑定关系
    @inlinable
    public func describeBindVpcsPaginated(_ input: DescribeBindVpcsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [VpcBindRecord])> {
        self.client.paginate(input: input, region: region, command: self.describeBindVpcs, logger: logger, on: eventLoop)
    }

    /// 获取租户VPC绑定关系
    @inlinable @discardableResult
    public func describeBindVpcsPaginated(_ input: DescribeBindVpcsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeBindVpcsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeBindVpcs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取租户VPC绑定关系
    ///
    /// - Returns: `AsyncSequence`s of `VpcBindRecord` and `DescribeBindVpcsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeBindVpcsPaginator(_ input: DescribeBindVpcsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeBindVpcsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeBindVpcs, logger: logger, on: eventLoop)
    }
}
