//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// DescribeRocketMQTopicMsgs请求参数结构体
    public struct DescribeRocketMQTopicMsgsRequest: TCPaginatedRequest {
        /// 集群 ID
        public let clusterId: String

        /// 命名空间
        public let environmentId: String

        /// 主题名称，查询死信时为groupId
        public let topicName: String

        /// 开始时间
        public let startTime: String

        /// 结束时间
        public let endTime: String

        /// 消息 ID
        public let msgId: String?

        /// 消息 key
        public let msgKey: String?

        /// 查询偏移
        public let offset: UInt64?

        /// 查询限额
        public let limit: UInt64?

        /// 标志一次分页事务
        public let taskRequestId: String?

        /// 死信查询时该值为true，只对Rocketmq有效
        public let queryDlqMsg: Bool?

        /// 查询最近N条消息 最大不超过1024，默认-1为其他查询条件
        public let numOfLatestMsg: Int64?

        public init(clusterId: String, environmentId: String, topicName: String, startTime: String, endTime: String, msgId: String? = nil, msgKey: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, taskRequestId: String? = nil, queryDlqMsg: Bool? = nil, numOfLatestMsg: Int64? = nil) {
            self.clusterId = clusterId
            self.environmentId = environmentId
            self.topicName = topicName
            self.startTime = startTime
            self.endTime = endTime
            self.msgId = msgId
            self.msgKey = msgKey
            self.offset = offset
            self.limit = limit
            self.taskRequestId = taskRequestId
            self.queryDlqMsg = queryDlqMsg
            self.numOfLatestMsg = numOfLatestMsg
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case environmentId = "EnvironmentId"
            case topicName = "TopicName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case msgId = "MsgId"
            case msgKey = "MsgKey"
            case offset = "Offset"
            case limit = "Limit"
            case taskRequestId = "TaskRequestId"
            case queryDlqMsg = "QueryDlqMsg"
            case numOfLatestMsg = "NumOfLatestMsg"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRocketMQTopicMsgsResponse) -> DescribeRocketMQTopicMsgsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(clusterId: self.clusterId, environmentId: self.environmentId, topicName: self.topicName, startTime: self.startTime, endTime: self.endTime, msgId: self.msgId, msgKey: self.msgKey, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, taskRequestId: self.taskRequestId, queryDlqMsg: self.queryDlqMsg, numOfLatestMsg: self.numOfLatestMsg)
        }
    }

    /// DescribeRocketMQTopicMsgs返回参数结构体
    public struct DescribeRocketMQTopicMsgsResponse: TCPaginatedResponse {
        /// 总数
        public let totalCount: UInt64

        /// 消息列表
        public let topicMsgLogSets: [RocketMQMsgLog]

        /// 标志一次分页事务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskRequestId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case topicMsgLogSets = "TopicMsgLogSets"
            case taskRequestId = "TaskRequestId"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RocketMQMsgLog`` list from the paginated response.
        public func getItems() -> [RocketMQMsgLog] {
            self.topicMsgLogSets
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// rocketmq 消息查询
    @inlinable
    public func describeRocketMQTopicMsgs(_ input: DescribeRocketMQTopicMsgsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRocketMQTopicMsgsResponse> {
        self.client.execute(action: "DescribeRocketMQTopicMsgs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// rocketmq 消息查询
    @inlinable
    public func describeRocketMQTopicMsgs(_ input: DescribeRocketMQTopicMsgsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRocketMQTopicMsgsResponse {
        try await self.client.execute(action: "DescribeRocketMQTopicMsgs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// rocketmq 消息查询
    @inlinable
    public func describeRocketMQTopicMsgs(clusterId: String, environmentId: String, topicName: String, startTime: String, endTime: String, msgId: String? = nil, msgKey: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, taskRequestId: String? = nil, queryDlqMsg: Bool? = nil, numOfLatestMsg: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRocketMQTopicMsgsResponse> {
        self.describeRocketMQTopicMsgs(.init(clusterId: clusterId, environmentId: environmentId, topicName: topicName, startTime: startTime, endTime: endTime, msgId: msgId, msgKey: msgKey, offset: offset, limit: limit, taskRequestId: taskRequestId, queryDlqMsg: queryDlqMsg, numOfLatestMsg: numOfLatestMsg), region: region, logger: logger, on: eventLoop)
    }

    /// rocketmq 消息查询
    @inlinable
    public func describeRocketMQTopicMsgs(clusterId: String, environmentId: String, topicName: String, startTime: String, endTime: String, msgId: String? = nil, msgKey: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, taskRequestId: String? = nil, queryDlqMsg: Bool? = nil, numOfLatestMsg: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRocketMQTopicMsgsResponse {
        try await self.describeRocketMQTopicMsgs(.init(clusterId: clusterId, environmentId: environmentId, topicName: topicName, startTime: startTime, endTime: endTime, msgId: msgId, msgKey: msgKey, offset: offset, limit: limit, taskRequestId: taskRequestId, queryDlqMsg: queryDlqMsg, numOfLatestMsg: numOfLatestMsg), region: region, logger: logger, on: eventLoop)
    }

    /// rocketmq 消息查询
    @inlinable
    public func describeRocketMQTopicMsgsPaginated(_ input: DescribeRocketMQTopicMsgsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [RocketMQMsgLog])> {
        self.client.paginate(input: input, region: region, command: self.describeRocketMQTopicMsgs, logger: logger, on: eventLoop)
    }

    /// rocketmq 消息查询
    @inlinable @discardableResult
    public func describeRocketMQTopicMsgsPaginated(_ input: DescribeRocketMQTopicMsgsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRocketMQTopicMsgsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRocketMQTopicMsgs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// rocketmq 消息查询
    ///
    /// - Returns: `AsyncSequence`s of ``RocketMQMsgLog`` and ``DescribeRocketMQTopicMsgsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRocketMQTopicMsgsPaginator(_ input: DescribeRocketMQTopicMsgsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRocketMQTopicMsgsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRocketMQTopicMsgs, logger: logger, on: eventLoop)
    }
}
