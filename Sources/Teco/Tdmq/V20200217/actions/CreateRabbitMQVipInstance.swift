//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tdmq {
    /// CreateRabbitMQVipInstance请求参数结构体
    public struct CreateRabbitMQVipInstanceRequest: TCRequestModel {
        /// 可用区
        public let zoneIds: [Int64]

        /// 私有网络VpcId
        public let vpcId: String

        /// 私有网络SubnetId
        public let subnetId: String

        /// 集群名称
        public let clusterName: String

        /// 节点规格,基础型rabbit-vip-basic-1,标准型rabbit-vip-basic-2,高阶1型rabbit-vip-basic-3,高阶2型rabbit-vip-basic-4。不传默认为基础型
        public let nodeSpec: String?

        /// 节点数量,多可用区最少为3节点。不传默认单可用区为1,多可用区为3
        public let nodeNum: Int64?

        /// 单节点存储规格,不传默认为200G
        public let storageSize: Int64?

        /// 镜像队列,不传默认为false
        public let enableCreateDefaultHaMirrorQueue: Bool?

        /// 自动续费,不传默认为true
        public let autoRenewFlag: Bool?

        /// 购买时长,不传默认为1(月)
        public let timeSpan: Int64?

        public init(zoneIds: [Int64], vpcId: String, subnetId: String, clusterName: String, nodeSpec: String? = nil, nodeNum: Int64? = nil, storageSize: Int64? = nil, enableCreateDefaultHaMirrorQueue: Bool? = nil, autoRenewFlag: Bool? = nil, timeSpan: Int64? = nil) {
            self.zoneIds = zoneIds
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.clusterName = clusterName
            self.nodeSpec = nodeSpec
            self.nodeNum = nodeNum
            self.storageSize = storageSize
            self.enableCreateDefaultHaMirrorQueue = enableCreateDefaultHaMirrorQueue
            self.autoRenewFlag = autoRenewFlag
            self.timeSpan = timeSpan
        }

        enum CodingKeys: String, CodingKey {
            case zoneIds = "ZoneIds"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case clusterName = "ClusterName"
            case nodeSpec = "NodeSpec"
            case nodeNum = "NodeNum"
            case storageSize = "StorageSize"
            case enableCreateDefaultHaMirrorQueue = "EnableCreateDefaultHaMirrorQueue"
            case autoRenewFlag = "AutoRenewFlag"
            case timeSpan = "TimeSpan"
        }
    }

    /// CreateRabbitMQVipInstance返回参数结构体
    public struct CreateRabbitMQVipInstanceResponse: TCResponseModel {
        /// 订单号Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tranId: String?

        /// 实例Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case tranId = "TranId"
            case instanceId = "InstanceId"
            case requestId = "RequestId"
        }
    }

    /// 创建RabbitMQ专享版实例
    @inlinable
    public func createRabbitMQVipInstance(_ input: CreateRabbitMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRabbitMQVipInstanceResponse> {
        self.client.execute(action: "CreateRabbitMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建RabbitMQ专享版实例
    @inlinable
    public func createRabbitMQVipInstance(_ input: CreateRabbitMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRabbitMQVipInstanceResponse {
        try await self.client.execute(action: "CreateRabbitMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建RabbitMQ专享版实例
    @inlinable
    public func createRabbitMQVipInstance(zoneIds: [Int64], vpcId: String, subnetId: String, clusterName: String, nodeSpec: String? = nil, nodeNum: Int64? = nil, storageSize: Int64? = nil, enableCreateDefaultHaMirrorQueue: Bool? = nil, autoRenewFlag: Bool? = nil, timeSpan: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRabbitMQVipInstanceResponse> {
        self.createRabbitMQVipInstance(.init(zoneIds: zoneIds, vpcId: vpcId, subnetId: subnetId, clusterName: clusterName, nodeSpec: nodeSpec, nodeNum: nodeNum, storageSize: storageSize, enableCreateDefaultHaMirrorQueue: enableCreateDefaultHaMirrorQueue, autoRenewFlag: autoRenewFlag, timeSpan: timeSpan), region: region, logger: logger, on: eventLoop)
    }

    /// 创建RabbitMQ专享版实例
    @inlinable
    public func createRabbitMQVipInstance(zoneIds: [Int64], vpcId: String, subnetId: String, clusterName: String, nodeSpec: String? = nil, nodeNum: Int64? = nil, storageSize: Int64? = nil, enableCreateDefaultHaMirrorQueue: Bool? = nil, autoRenewFlag: Bool? = nil, timeSpan: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRabbitMQVipInstanceResponse {
        try await self.createRabbitMQVipInstance(.init(zoneIds: zoneIds, vpcId: vpcId, subnetId: subnetId, clusterName: clusterName, nodeSpec: nodeSpec, nodeNum: nodeNum, storageSize: storageSize, enableCreateDefaultHaMirrorQueue: enableCreateDefaultHaMirrorQueue, autoRenewFlag: autoRenewFlag, timeSpan: timeSpan), region: region, logger: logger, on: eventLoop)
    }
}
