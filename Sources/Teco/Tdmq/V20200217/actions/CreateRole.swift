//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// CreateRole请求参数结构体
    public struct CreateRoleRequest: TCRequestModel {
        /// 角色名称，不支持中字以及除了短线和下划线外的特殊字符且长度必须大于0且小等于32。
        public let roleName: String

        /// 备注说明，长度必须大等于0且小等于128。
        public let remark: String?

        /// 必填字段，集群Id
        public let clusterId: String?

        public init(roleName: String, remark: String? = nil, clusterId: String? = nil) {
            self.roleName = roleName
            self.remark = remark
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
            case remark = "Remark"
            case clusterId = "ClusterId"
        }
    }

    /// CreateRole返回参数结构体
    public struct CreateRoleResponse: TCResponseModel {
        /// 角色名称
        public let roleName: String

        /// 角色token
        public let token: String

        /// 备注说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
            case token = "Token"
            case remark = "Remark"
            case requestId = "RequestId"
        }
    }

    /// 创建角色
    @inlinable
    public func createRole(_ input: CreateRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRoleResponse> {
        self.client.execute(action: "CreateRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建角色
    @inlinable
    public func createRole(_ input: CreateRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRoleResponse {
        try await self.client.execute(action: "CreateRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建角色
    @inlinable
    public func createRole(roleName: String, remark: String? = nil, clusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRoleResponse> {
        self.createRole(.init(roleName: roleName, remark: remark, clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 创建角色
    @inlinable
    public func createRole(roleName: String, remark: String? = nil, clusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRoleResponse {
        try await self.createRole(.init(roleName: roleName, remark: remark, clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
