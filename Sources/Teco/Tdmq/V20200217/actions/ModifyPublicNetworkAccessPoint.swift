//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// ModifyPublicNetworkAccessPoint请求参数结构体
    public struct ModifyPublicNetworkAccessPointRequest: TCRequest {
        /// 集群名字
        public let clusterId: String

        /// 是否开启
        public let publicNetworkAccessPointStatus: Bool

        /// 必填，公网控制台的开关/Vpc控制台的开关，示例值，Public/Vpc
        public let switchOwner: String?

        /// Vpc
        public let vpcId: String?

        /// 子网
        public let subnetId: String?

        /// 子网下面指定ip作为vpc接入点
        public let selectIp: String?

        public init(clusterId: String, publicNetworkAccessPointStatus: Bool, switchOwner: String? = nil, vpcId: String? = nil, subnetId: String? = nil, selectIp: String? = nil) {
            self.clusterId = clusterId
            self.publicNetworkAccessPointStatus = publicNetworkAccessPointStatus
            self.switchOwner = switchOwner
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.selectIp = selectIp
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case publicNetworkAccessPointStatus = "PublicNetworkAccessPointStatus"
            case switchOwner = "SwitchOwner"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case selectIp = "SelectIp"
        }
    }

    /// ModifyPublicNetworkAccessPoint返回参数结构体
    public struct ModifyPublicNetworkAccessPointResponse: TCResponse {
        /// 修改结果
        public let modifyResult: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case modifyResult = "ModifyResult"
            case requestId = "RequestId"
        }
    }

    /// RabbitMQ专享版修改公网管控台，vpc15672开关
    @inlinable
    public func modifyPublicNetworkAccessPoint(_ input: ModifyPublicNetworkAccessPointRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyPublicNetworkAccessPointResponse> {
        self.client.execute(action: "ModifyPublicNetworkAccessPoint", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// RabbitMQ专享版修改公网管控台，vpc15672开关
    @inlinable
    public func modifyPublicNetworkAccessPoint(_ input: ModifyPublicNetworkAccessPointRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyPublicNetworkAccessPointResponse {
        try await self.client.execute(action: "ModifyPublicNetworkAccessPoint", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// RabbitMQ专享版修改公网管控台，vpc15672开关
    @inlinable
    public func modifyPublicNetworkAccessPoint(clusterId: String, publicNetworkAccessPointStatus: Bool, switchOwner: String? = nil, vpcId: String? = nil, subnetId: String? = nil, selectIp: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyPublicNetworkAccessPointResponse> {
        self.modifyPublicNetworkAccessPoint(.init(clusterId: clusterId, publicNetworkAccessPointStatus: publicNetworkAccessPointStatus, switchOwner: switchOwner, vpcId: vpcId, subnetId: subnetId, selectIp: selectIp), region: region, logger: logger, on: eventLoop)
    }

    /// RabbitMQ专享版修改公网管控台，vpc15672开关
    @inlinable
    public func modifyPublicNetworkAccessPoint(clusterId: String, publicNetworkAccessPointStatus: Bool, switchOwner: String? = nil, vpcId: String? = nil, subnetId: String? = nil, selectIp: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyPublicNetworkAccessPointResponse {
        try await self.modifyPublicNetworkAccessPoint(.init(clusterId: clusterId, publicNetworkAccessPointStatus: publicNetworkAccessPointStatus, switchOwner: switchOwner, vpcId: vpcId, subnetId: subnetId, selectIp: selectIp), region: region, logger: logger, on: eventLoop)
    }
}
