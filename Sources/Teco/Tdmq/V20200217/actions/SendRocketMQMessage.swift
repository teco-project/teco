//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// SendRocketMQMessage请求参数结构体
    public struct SendRocketMQMessageRequest: TCRequestModel {
        /// 集群id
        public let clusterId: String

        /// 命名空间
        public let namespaceId: String

        /// topic名称
        public let topicName: String

        /// 信息内容
        public let msgBody: String

        /// 消息key信息
        public let msgKey: String?

        /// 消息tag信息
        public let msgTag: String?

        public init(clusterId: String, namespaceId: String, topicName: String, msgBody: String, msgKey: String? = nil, msgTag: String? = nil) {
            self.clusterId = clusterId
            self.namespaceId = namespaceId
            self.topicName = topicName
            self.msgBody = msgBody
            self.msgKey = msgKey
            self.msgTag = msgTag
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case namespaceId = "NamespaceId"
            case topicName = "TopicName"
            case msgBody = "MsgBody"
            case msgKey = "MsgKey"
            case msgTag = "MsgTag"
        }
    }

    /// SendRocketMQMessage返回参数结构体
    public struct SendRocketMQMessageResponse: TCResponseModel {
        /// 发送结果
        public let result: Bool

        /// 消息ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msgId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case msgId = "MsgId"
            case requestId = "RequestId"
        }
    }

    /// 发送RocketMQ消息
    @inlinable
    public func sendRocketMQMessage(_ input: SendRocketMQMessageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendRocketMQMessageResponse> {
        self.client.execute(action: "SendRocketMQMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 发送RocketMQ消息
    @inlinable
    public func sendRocketMQMessage(_ input: SendRocketMQMessageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendRocketMQMessageResponse {
        try await self.client.execute(action: "SendRocketMQMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 发送RocketMQ消息
    @inlinable
    public func sendRocketMQMessage(clusterId: String, namespaceId: String, topicName: String, msgBody: String, msgKey: String? = nil, msgTag: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendRocketMQMessageResponse> {
        self.sendRocketMQMessage(.init(clusterId: clusterId, namespaceId: namespaceId, topicName: topicName, msgBody: msgBody, msgKey: msgKey, msgTag: msgTag), region: region, logger: logger, on: eventLoop)
    }

    /// 发送RocketMQ消息
    @inlinable
    public func sendRocketMQMessage(clusterId: String, namespaceId: String, topicName: String, msgBody: String, msgKey: String? = nil, msgTag: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendRocketMQMessageResponse {
        try await self.sendRocketMQMessage(.init(clusterId: clusterId, namespaceId: namespaceId, topicName: topicName, msgBody: msgBody, msgKey: msgKey, msgTag: msgTag), region: region, logger: logger, on: eventLoop)
    }
}
