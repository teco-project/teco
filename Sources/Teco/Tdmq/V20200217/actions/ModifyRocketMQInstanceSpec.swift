//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// ModifyRocketMQInstanceSpec请求参数结构体
    public struct ModifyRocketMQInstanceSpecRequest: TCRequest {
        /// 专享实例ID
        public let instanceId: String

        /// 实例规格，
        /// rocket-vip-basic-1 基础型
        /// rocket-vip-basic-2 标准型
        /// rocket-vip-basic-3 高阶Ⅰ型
        /// rocket-vip-basic-4 高阶Ⅱ型
        public let specification: String?

        /// 节点数量
        public let nodeCount: UInt64?

        /// 存储空间，GB为单位
        public let storageSize: UInt64?

        public init(instanceId: String, specification: String? = nil, nodeCount: UInt64? = nil, storageSize: UInt64? = nil) {
            self.instanceId = instanceId
            self.specification = specification
            self.nodeCount = nodeCount
            self.storageSize = storageSize
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case specification = "Specification"
            case nodeCount = "NodeCount"
            case storageSize = "StorageSize"
        }
    }

    /// ModifyRocketMQInstanceSpec返回参数结构体
    public struct ModifyRocketMQInstanceSpecResponse: TCResponse {
        /// 订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orderId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case orderId = "OrderId"
            case requestId = "RequestId"
        }
    }

    /// 修改RocketMQ专享实例配置
    ///
    /// 本API用于修改RocketMQ专享实例配置，可以支持实例规格、节点数和存储的升配和实例规格的降配。本API发起订单并成功支付后进入实例配置变更的流程，可通过DescribeRocketMQVipInstances查询实例是否已变更完成。
    @inlinable
    public func modifyRocketMQInstanceSpec(_ input: ModifyRocketMQInstanceSpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRocketMQInstanceSpecResponse> {
        self.client.execute(action: "ModifyRocketMQInstanceSpec", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改RocketMQ专享实例配置
    ///
    /// 本API用于修改RocketMQ专享实例配置，可以支持实例规格、节点数和存储的升配和实例规格的降配。本API发起订单并成功支付后进入实例配置变更的流程，可通过DescribeRocketMQVipInstances查询实例是否已变更完成。
    @inlinable
    public func modifyRocketMQInstanceSpec(_ input: ModifyRocketMQInstanceSpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRocketMQInstanceSpecResponse {
        try await self.client.execute(action: "ModifyRocketMQInstanceSpec", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改RocketMQ专享实例配置
    ///
    /// 本API用于修改RocketMQ专享实例配置，可以支持实例规格、节点数和存储的升配和实例规格的降配。本API发起订单并成功支付后进入实例配置变更的流程，可通过DescribeRocketMQVipInstances查询实例是否已变更完成。
    @inlinable
    public func modifyRocketMQInstanceSpec(instanceId: String, specification: String? = nil, nodeCount: UInt64? = nil, storageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRocketMQInstanceSpecResponse> {
        self.modifyRocketMQInstanceSpec(.init(instanceId: instanceId, specification: specification, nodeCount: nodeCount, storageSize: storageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 修改RocketMQ专享实例配置
    ///
    /// 本API用于修改RocketMQ专享实例配置，可以支持实例规格、节点数和存储的升配和实例规格的降配。本API发起订单并成功支付后进入实例配置变更的流程，可通过DescribeRocketMQVipInstances查询实例是否已变更完成。
    @inlinable
    public func modifyRocketMQInstanceSpec(instanceId: String, specification: String? = nil, nodeCount: UInt64? = nil, storageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRocketMQInstanceSpecResponse {
        try await self.modifyRocketMQInstanceSpec(.init(instanceId: instanceId, specification: specification, nodeCount: nodeCount, storageSize: storageSize), region: region, logger: logger, on: eventLoop)
    }
}
