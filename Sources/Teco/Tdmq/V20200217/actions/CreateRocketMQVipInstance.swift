//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// CreateRocketMQVipInstance请求参数结构体
    public struct CreateRocketMQVipInstanceRequest: TCRequest {
        /// 实例名称
        public let name: String

        /// 实例规格：
        /// 基础型，rocket-vip-basic-1
        /// 标准型，rocket-vip-basic-2
        /// 高阶Ⅰ型，rocket-vip-basic-3
        /// 高阶Ⅱ型，rocket-vip-basic-4
        public let spec: String

        /// 节点数量，最小2，最大20
        public let nodeCount: Int64

        /// 单节点存储空间，GB为单位，最低200GB
        public let storageSize: Int64

        /// 节点部署的区域ID列表，如广州一区，则是100001，具体可查询腾讯云官网
        public let zoneIds: [String]

        /// VPC信息
        public let vpcInfo: VpcInfo

        /// 购买时长，月为单位
        public let timeSpan: Int64

        public init(name: String, spec: String, nodeCount: Int64, storageSize: Int64, zoneIds: [String], vpcInfo: VpcInfo, timeSpan: Int64) {
            self.name = name
            self.spec = spec
            self.nodeCount = nodeCount
            self.storageSize = storageSize
            self.zoneIds = zoneIds
            self.vpcInfo = vpcInfo
            self.timeSpan = timeSpan
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case spec = "Spec"
            case nodeCount = "NodeCount"
            case storageSize = "StorageSize"
            case zoneIds = "ZoneIds"
            case vpcInfo = "VpcInfo"
            case timeSpan = "TimeSpan"
        }
    }

    /// CreateRocketMQVipInstance返回参数结构体
    public struct CreateRocketMQVipInstanceResponse: TCResponse {
        /// 集群ID
        public let clusterId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case requestId = "RequestId"
        }
    }

    /// 创建RocketMQ专享实例
    @inlinable
    public func createRocketMQVipInstance(_ input: CreateRocketMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRocketMQVipInstanceResponse> {
        self.client.execute(action: "CreateRocketMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建RocketMQ专享实例
    @inlinable
    public func createRocketMQVipInstance(_ input: CreateRocketMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRocketMQVipInstanceResponse {
        try await self.client.execute(action: "CreateRocketMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建RocketMQ专享实例
    @inlinable
    public func createRocketMQVipInstance(name: String, spec: String, nodeCount: Int64, storageSize: Int64, zoneIds: [String], vpcInfo: VpcInfo, timeSpan: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRocketMQVipInstanceResponse> {
        self.createRocketMQVipInstance(.init(name: name, spec: spec, nodeCount: nodeCount, storageSize: storageSize, zoneIds: zoneIds, vpcInfo: vpcInfo, timeSpan: timeSpan), region: region, logger: logger, on: eventLoop)
    }

    /// 创建RocketMQ专享实例
    @inlinable
    public func createRocketMQVipInstance(name: String, spec: String, nodeCount: Int64, storageSize: Int64, zoneIds: [String], vpcInfo: VpcInfo, timeSpan: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRocketMQVipInstanceResponse {
        try await self.createRocketMQVipInstance(.init(name: name, spec: spec, nodeCount: nodeCount, storageSize: storageSize, zoneIds: zoneIds, vpcInfo: vpcInfo, timeSpan: timeSpan), region: region, logger: logger, on: eventLoop)
    }
}
