//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Tdmq {
    /// DescribeRabbitMQUser请求参数结构体
    public struct DescribeRabbitMQUserRequest: TCPaginatedRequest {
        /// 集群实例Id
        public let instanceId: String

        /// 用户名检索，支持前缀匹配，后缀匹配
        public let searchUser: String?

        /// 分页Offset
        public let offset: Int64?

        /// 分页Limit
        public let limit: Int64?

        /// 用户名，精确查询
        public let user: String?

        /// 用户标签，根据标签过滤列表
        public let tags: [String]?

        public init(instanceId: String, searchUser: String? = nil, offset: Int64? = nil, limit: Int64? = nil, user: String? = nil, tags: [String]? = nil) {
            self.instanceId = instanceId
            self.searchUser = searchUser
            self.offset = offset
            self.limit = limit
            self.user = user
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case searchUser = "SearchUser"
            case offset = "Offset"
            case limit = "Limit"
            case user = "User"
            case tags = "Tags"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRabbitMQUserResponse) -> DescribeRabbitMQUserRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeRabbitMQUserRequest(instanceId: self.instanceId, searchUser: self.searchUser, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, user: self.user, tags: self.tags)
        }
    }

    /// DescribeRabbitMQUser返回参数结构体
    public struct DescribeRabbitMQUserResponse: TCPaginatedResponse {
        /// 返回的User数量
        public let totalCount: Int64

        /// 当前已创建的RabbitMQ用户列表
        public let rabbitMQUserList: [RabbitMQUser]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case rabbitMQUserList = "RabbitMQUserList"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [RabbitMQUser] {
            self.rabbitMQUserList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询RabbitMQ用户列表
    @inlinable
    public func describeRabbitMQUser(_ input: DescribeRabbitMQUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRabbitMQUserResponse> {
        self.client.execute(action: "DescribeRabbitMQUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询RabbitMQ用户列表
    @inlinable
    public func describeRabbitMQUser(_ input: DescribeRabbitMQUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRabbitMQUserResponse {
        try await self.client.execute(action: "DescribeRabbitMQUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询RabbitMQ用户列表
    @inlinable
    public func describeRabbitMQUser(instanceId: String, searchUser: String? = nil, offset: Int64? = nil, limit: Int64? = nil, user: String? = nil, tags: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRabbitMQUserResponse> {
        self.describeRabbitMQUser(.init(instanceId: instanceId, searchUser: searchUser, offset: offset, limit: limit, user: user, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 查询RabbitMQ用户列表
    @inlinable
    public func describeRabbitMQUser(instanceId: String, searchUser: String? = nil, offset: Int64? = nil, limit: Int64? = nil, user: String? = nil, tags: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRabbitMQUserResponse {
        try await self.describeRabbitMQUser(.init(instanceId: instanceId, searchUser: searchUser, offset: offset, limit: limit, user: user, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 查询RabbitMQ用户列表
    @inlinable
    public func describeRabbitMQUserPaginated(_ input: DescribeRabbitMQUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RabbitMQUser])> {
        self.client.paginate(input: input, region: region, command: self.describeRabbitMQUser, logger: logger, on: eventLoop)
    }

    /// 查询RabbitMQ用户列表
    @inlinable @discardableResult
    public func describeRabbitMQUserPaginated(_ input: DescribeRabbitMQUserRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRabbitMQUserResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRabbitMQUser, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询RabbitMQ用户列表
    ///
    /// - Returns: `AsyncSequence`s of `RabbitMQUser` and `DescribeRabbitMQUserResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRabbitMQUserPaginator(_ input: DescribeRabbitMQUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRabbitMQUserRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRabbitMQUser, logger: logger, on: eventLoop)
    }
}
