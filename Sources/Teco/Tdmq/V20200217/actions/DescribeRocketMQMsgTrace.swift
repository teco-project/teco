//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// DescribeRocketMQMsgTrace请求参数结构体
    public struct DescribeRocketMQMsgTraceRequest: TCRequest {
        /// 集群id
        public let clusterId: String

        /// 命名空间
        public let environmentId: String

        /// 主题，rocketmq查询死信时值为groupId
        public let topicName: String

        /// 消息id
        public let msgId: String

        /// 消费组、订阅
        public let groupName: String?

        /// 查询死信时该值为true
        public let queryDLQMsg: Bool?

        public init(clusterId: String, environmentId: String, topicName: String, msgId: String, groupName: String? = nil, queryDLQMsg: Bool? = nil) {
            self.clusterId = clusterId
            self.environmentId = environmentId
            self.topicName = topicName
            self.msgId = msgId
            self.groupName = groupName
            self.queryDLQMsg = queryDLQMsg
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case environmentId = "EnvironmentId"
            case topicName = "TopicName"
            case msgId = "MsgId"
            case groupName = "GroupName"
            case queryDLQMsg = "QueryDLQMsg"
        }
    }

    /// DescribeRocketMQMsgTrace返回参数结构体
    public struct DescribeRocketMQMsgTraceResponse: TCResponse {
        /// [
        ///     {
        ///         "Stage": "produce",
        ///         "Data": {
        ///             "ProducerName": "生产者名",
        ///             "ProduceTime": "消息生产时间",
        ///             "ProducerAddr": "客户端地址",
        ///             "Duration": "耗时ms",
        ///             "Status": "状态（0：成功，1：失败）"
        ///         }
        ///     },
        ///     {
        ///         "Stage": "persist",
        ///         "Data": {
        ///             "PersistTime": "存储时间",
        ///             "Duration": "耗时ms",
        ///             "Status": "状态（0：成功，1：失败）"
        ///         }
        ///     },
        ///     {
        ///         "Stage": "consume",
        ///         "Data": {
        ///             "TotalCount": 2,
        ///             "RocketMqConsumeLogs": [
        ///                 {
        ///                     "ConsumerGroup": "消费组",
        ///                     "ConsumeModel": "消费模式",
        ///                     "ConsumerAddr": "消费者地址",
        ///                     "ConsumeTime": "推送时间",
        ///                     "Status": "状态（0:已推送未确认, 2:已确认, 3:转入重试, 4:已重试未确认, 5:已转入死信队列）"
        ///                 },
        ///                 {
        ///                     "ConsumerGroup": "消费组",
        ///                     "ConsumeModel": "消费模式",
        ///                     "ConsumerAddr": "消费者地址",
        ///                     "ConsumeTime": "推送时间",
        ///                     "Status": "状态（0:已推送未确认, 2:已确认, 3:转入重试, 4:已重试未确认, 5:已转入死信队列）"
        ///                 }
        ///             ]
        ///         }
        ///     }
        /// ]
        public let result: [TraceResult]

        /// 消息轨迹页展示的topic名称
        public let showTopicName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case showTopicName = "ShowTopicName"
            case requestId = "RequestId"
        }
    }

    /// 查询RocketMQ消息轨迹
    ///
    /// 查询消息轨迹
    @inlinable
    public func describeRocketMQMsgTrace(_ input: DescribeRocketMQMsgTraceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRocketMQMsgTraceResponse> {
        self.client.execute(action: "DescribeRocketMQMsgTrace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询RocketMQ消息轨迹
    ///
    /// 查询消息轨迹
    @inlinable
    public func describeRocketMQMsgTrace(_ input: DescribeRocketMQMsgTraceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRocketMQMsgTraceResponse {
        try await self.client.execute(action: "DescribeRocketMQMsgTrace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询RocketMQ消息轨迹
    ///
    /// 查询消息轨迹
    @inlinable
    public func describeRocketMQMsgTrace(clusterId: String, environmentId: String, topicName: String, msgId: String, groupName: String? = nil, queryDLQMsg: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRocketMQMsgTraceResponse> {
        self.describeRocketMQMsgTrace(.init(clusterId: clusterId, environmentId: environmentId, topicName: topicName, msgId: msgId, groupName: groupName, queryDLQMsg: queryDLQMsg), region: region, logger: logger, on: eventLoop)
    }

    /// 查询RocketMQ消息轨迹
    ///
    /// 查询消息轨迹
    @inlinable
    public func describeRocketMQMsgTrace(clusterId: String, environmentId: String, topicName: String, msgId: String, groupName: String? = nil, queryDLQMsg: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRocketMQMsgTraceResponse {
        try await self.describeRocketMQMsgTrace(.init(clusterId: clusterId, environmentId: environmentId, topicName: topicName, msgId: msgId, groupName: groupName, queryDLQMsg: queryDLQMsg), region: region, logger: logger, on: eventLoop)
    }
}
