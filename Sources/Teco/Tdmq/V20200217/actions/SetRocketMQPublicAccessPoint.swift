//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// SetRocketMQPublicAccessPoint请求参数结构体
    public struct SetRocketMQPublicAccessPointRequest: TCRequest {
        /// 集群ID，当前只支持专享集群
        public let instanceId: String

        /// 开启或关闭访问
        public let enabled: Bool

        /// 带宽大小，开启或者调整公网时必须指定，Mbps为单位
        public let bandwidth: UInt64?

        /// 付费模式，开启公网时必须指定，0为按小时计费，1为包年包月，当前只支持按小时计费
        public let payMode: UInt64?

        /// 公网访问安全规则列表，Enabled为true时必须传入
        public let rules: [PublicAccessRule]?

        public init(instanceId: String, enabled: Bool, bandwidth: UInt64? = nil, payMode: UInt64? = nil, rules: [PublicAccessRule]? = nil) {
            self.instanceId = instanceId
            self.enabled = enabled
            self.bandwidth = bandwidth
            self.payMode = payMode
            self.rules = rules
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case enabled = "Enabled"
            case bandwidth = "Bandwidth"
            case payMode = "PayMode"
            case rules = "Rules"
        }
    }

    /// SetRocketMQPublicAccessPoint返回参数结构体
    public struct SetRocketMQPublicAccessPointResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置RocketMQ实例公网访问接入点
    ///
    /// 该接口用于开启关闭公网访问、设置安全访问策略
    @inlinable @discardableResult
    public func setRocketMQPublicAccessPoint(_ input: SetRocketMQPublicAccessPointRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SetRocketMQPublicAccessPointResponse> {
        self.client.execute(action: "SetRocketMQPublicAccessPoint", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置RocketMQ实例公网访问接入点
    ///
    /// 该接口用于开启关闭公网访问、设置安全访问策略
    @inlinable @discardableResult
    public func setRocketMQPublicAccessPoint(_ input: SetRocketMQPublicAccessPointRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetRocketMQPublicAccessPointResponse {
        try await self.client.execute(action: "SetRocketMQPublicAccessPoint", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置RocketMQ实例公网访问接入点
    ///
    /// 该接口用于开启关闭公网访问、设置安全访问策略
    @inlinable @discardableResult
    public func setRocketMQPublicAccessPoint(instanceId: String, enabled: Bool, bandwidth: UInt64? = nil, payMode: UInt64? = nil, rules: [PublicAccessRule]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SetRocketMQPublicAccessPointResponse> {
        self.setRocketMQPublicAccessPoint(.init(instanceId: instanceId, enabled: enabled, bandwidth: bandwidth, payMode: payMode, rules: rules), region: region, logger: logger, on: eventLoop)
    }

    /// 设置RocketMQ实例公网访问接入点
    ///
    /// 该接口用于开启关闭公网访问、设置安全访问策略
    @inlinable @discardableResult
    public func setRocketMQPublicAccessPoint(instanceId: String, enabled: Bool, bandwidth: UInt64? = nil, payMode: UInt64? = nil, rules: [PublicAccessRule]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetRocketMQPublicAccessPointResponse {
        try await self.setRocketMQPublicAccessPoint(.init(instanceId: instanceId, enabled: enabled, bandwidth: bandwidth, payMode: payMode, rules: rules), region: region, logger: logger, on: eventLoop)
    }
}
