//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdmq {
    /// 获取生产者信息
    ///
    /// 获取生产者信息列表
    @inlinable
    public func describePublishers(_ input: DescribePublishersRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePublishersResponse > {
        self.client.execute(action: "DescribePublishers", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取生产者信息
    ///
    /// 获取生产者信息列表
    @inlinable
    public func describePublishers(_ input: DescribePublishersRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePublishersResponse {
        try await self.client.execute(action: "DescribePublishers", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribePublishers请求参数结构体
    public struct DescribePublishersRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String
        
        /// 命名空间名称
        public let namespace: String
        
        /// 主题名称
        public let topic: String
        
        /// 参数过滤器，支持ProducerName，Address字段
        public let filters: [Filter]?
        
        /// 查询偏移量，默认为0
        public let offset: Int64?
        
        /// 查询条数，默认为20
        public let limit: Int64?
        
        /// 排序器
        public let sort: Sort
        
        public init (clusterId: String, namespace: String, topic: String, filters: [Filter]?, offset: Int64?, limit: Int64?, sort: Sort) {
            self.clusterId = clusterId
            self.namespace = namespace
            self.topic = topic
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.sort = sort
        }
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case namespace = "Namespace"
            case topic = "Topic"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
            case sort = "Sort"
        }
    }
    
    /// DescribePublishers返回参数结构体
    public struct DescribePublishersResponse: TCResponseModel {
        /// 总条数
        public let totalCount: Int64
        
        /// 生产者信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publishers: [Publisher]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case publishers = "Publishers"
            case requestId = "RequestId"
        }
    }
}
