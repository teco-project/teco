//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// ModifyRocketMQCluster请求参数结构体
    public struct ModifyRocketMQClusterRequest: TCRequest {
        /// RocketMQ集群ID
        public let clusterId: String

        /// 3-64个字符，只能包含字母、数字、“-”及“_”
        public let clusterName: String?

        /// 说明信息，不超过128个字符
        public let remark: String?

        /// 是否开启HTTP公网访问
        public let publicAccessEnabled: Bool?

        public init(clusterId: String, clusterName: String? = nil, remark: String? = nil, publicAccessEnabled: Bool? = nil) {
            self.clusterId = clusterId
            self.clusterName = clusterName
            self.remark = remark
            self.publicAccessEnabled = publicAccessEnabled
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case remark = "Remark"
            case publicAccessEnabled = "PublicAccessEnabled"
        }
    }

    /// ModifyRocketMQCluster返回参数结构体
    public struct ModifyRocketMQClusterResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新RocketMQ集群信息
    @inlinable @discardableResult
    public func modifyRocketMQCluster(_ input: ModifyRocketMQClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRocketMQClusterResponse> {
        self.client.execute(action: "ModifyRocketMQCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新RocketMQ集群信息
    @inlinable @discardableResult
    public func modifyRocketMQCluster(_ input: ModifyRocketMQClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRocketMQClusterResponse {
        try await self.client.execute(action: "ModifyRocketMQCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新RocketMQ集群信息
    @inlinable @discardableResult
    public func modifyRocketMQCluster(clusterId: String, clusterName: String? = nil, remark: String? = nil, publicAccessEnabled: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRocketMQClusterResponse> {
        self.modifyRocketMQCluster(.init(clusterId: clusterId, clusterName: clusterName, remark: remark, publicAccessEnabled: publicAccessEnabled), region: region, logger: logger, on: eventLoop)
    }

    /// 更新RocketMQ集群信息
    @inlinable @discardableResult
    public func modifyRocketMQCluster(clusterId: String, clusterName: String? = nil, remark: String? = nil, publicAccessEnabled: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRocketMQClusterResponse {
        try await self.modifyRocketMQCluster(.init(clusterId: clusterId, clusterName: clusterName, remark: remark, publicAccessEnabled: publicAccessEnabled), region: region, logger: logger, on: eventLoop)
    }
}
