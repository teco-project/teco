//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// DescribeRocketMQCluster请求参数结构体
    public struct DescribeRocketMQClusterRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    /// DescribeRocketMQCluster返回参数结构体
    public struct DescribeRocketMQClusterResponse: TCResponseModel {
        /// 集群信息
        public let clusterInfo: RocketMQClusterInfo

        /// 集群配置
        public let clusterConfig: RocketMQClusterConfig

        /// 集群最近使用量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterStats: RocketMQClusterRecentStats?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clusterInfo = "ClusterInfo"
            case clusterConfig = "ClusterConfig"
            case clusterStats = "ClusterStats"
            case requestId = "RequestId"
        }
    }

    /// 获取单个RocketMQ集群信息
    @inlinable
    public func describeRocketMQCluster(_ input: DescribeRocketMQClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRocketMQClusterResponse> {
        self.client.execute(action: "DescribeRocketMQCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取单个RocketMQ集群信息
    @inlinable
    public func describeRocketMQCluster(_ input: DescribeRocketMQClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRocketMQClusterResponse {
        try await self.client.execute(action: "DescribeRocketMQCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取单个RocketMQ集群信息
    @inlinable
    public func describeRocketMQCluster(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRocketMQClusterResponse> {
        self.describeRocketMQCluster(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取单个RocketMQ集群信息
    @inlinable
    public func describeRocketMQCluster(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRocketMQClusterResponse {
        try await self.describeRocketMQCluster(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
