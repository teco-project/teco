//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// ModifyRabbitMQVipInstance请求参数结构体
    public struct ModifyRabbitMQVipInstanceRequest: TCRequest {
        /// 实例Id
        public let instanceId: String

        /// 集群名称
        public let clusterName: String?

        /// 备注
        public let remark: String?

        public init(instanceId: String, clusterName: String? = nil, remark: String? = nil) {
            self.instanceId = instanceId
            self.clusterName = clusterName
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case clusterName = "ClusterName"
            case remark = "Remark"
        }
    }

    /// ModifyRabbitMQVipInstance返回参数结构体
    public struct ModifyRabbitMQVipInstanceResponse: TCResponse {
        /// 实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case requestId = "RequestId"
        }
    }

    /// 修改RabbitMQ专享版实例
    @inlinable
    public func modifyRabbitMQVipInstance(_ input: ModifyRabbitMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRabbitMQVipInstanceResponse> {
        self.client.execute(action: "ModifyRabbitMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改RabbitMQ专享版实例
    @inlinable
    public func modifyRabbitMQVipInstance(_ input: ModifyRabbitMQVipInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRabbitMQVipInstanceResponse {
        try await self.client.execute(action: "ModifyRabbitMQVipInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改RabbitMQ专享版实例
    @inlinable
    public func modifyRabbitMQVipInstance(instanceId: String, clusterName: String? = nil, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRabbitMQVipInstanceResponse> {
        self.modifyRabbitMQVipInstance(.init(instanceId: instanceId, clusterName: clusterName, remark: remark), region: region, logger: logger, on: eventLoop)
    }

    /// 修改RabbitMQ专享版实例
    @inlinable
    public func modifyRabbitMQVipInstance(instanceId: String, clusterName: String? = nil, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRabbitMQVipInstanceResponse {
        try await self.modifyRabbitMQVipInstance(.init(instanceId: instanceId, clusterName: clusterName, remark: remark), region: region, logger: logger, on: eventLoop)
    }
}
