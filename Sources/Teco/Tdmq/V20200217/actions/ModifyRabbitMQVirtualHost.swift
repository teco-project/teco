//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdmq {
    /// ModifyRabbitMQVirtualHost请求参数结构体
    public struct ModifyRabbitMQVirtualHostRequest: TCRequest {
        /// 集群实例Id
        public let instanceId: String

        /// vhost名
        public let virtualHost: String

        /// 描述
        public let description: String?

        /// 消息轨迹开关,true打开,false关闭
        public let traceFlag: Bool?

        public init(instanceId: String, virtualHost: String, description: String? = nil, traceFlag: Bool? = nil) {
            self.instanceId = instanceId
            self.virtualHost = virtualHost
            self.description = description
            self.traceFlag = traceFlag
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case virtualHost = "VirtualHost"
            case description = "Description"
            case traceFlag = "TraceFlag"
        }
    }

    /// ModifyRabbitMQVirtualHost返回参数结构体
    public struct ModifyRabbitMQVirtualHostResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改RabbitMQ的vhost
    @inlinable @discardableResult
    public func modifyRabbitMQVirtualHost(_ input: ModifyRabbitMQVirtualHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRabbitMQVirtualHostResponse> {
        self.client.execute(action: "ModifyRabbitMQVirtualHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改RabbitMQ的vhost
    @inlinable @discardableResult
    public func modifyRabbitMQVirtualHost(_ input: ModifyRabbitMQVirtualHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRabbitMQVirtualHostResponse {
        try await self.client.execute(action: "ModifyRabbitMQVirtualHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改RabbitMQ的vhost
    @inlinable @discardableResult
    public func modifyRabbitMQVirtualHost(instanceId: String, virtualHost: String, description: String? = nil, traceFlag: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRabbitMQVirtualHostResponse> {
        self.modifyRabbitMQVirtualHost(.init(instanceId: instanceId, virtualHost: virtualHost, description: description, traceFlag: traceFlag), region: region, logger: logger, on: eventLoop)
    }

    /// 修改RabbitMQ的vhost
    @inlinable @discardableResult
    public func modifyRabbitMQVirtualHost(instanceId: String, virtualHost: String, description: String? = nil, traceFlag: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRabbitMQVirtualHostResponse {
        try await self.modifyRabbitMQVirtualHost(.init(instanceId: instanceId, virtualHost: virtualHost, description: description, traceFlag: traceFlag), region: region, logger: logger, on: eventLoop)
    }
}
