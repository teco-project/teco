//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mps {
    /// CreateStreamLinkInput请求参数结构体
    public struct CreateStreamLinkInputRequest: TCRequestModel {
        /// 媒体传输流ID。
        public let flowId: String

        /// 流的输入组。
        public let inputGroup: [CreateInput]?

        public init(flowId: String, inputGroup: [CreateInput]? = nil) {
            self.flowId = flowId
            self.inputGroup = inputGroup
        }

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case inputGroup = "InputGroup"
        }
    }

    /// CreateStreamLinkInput返回参数结构体
    public struct CreateStreamLinkInputResponse: TCResponseModel {
        /// 创建的Flow信息。
        public let info: DescribeFlow

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case info = "Info"
            case requestId = "RequestId"
        }
    }

    /// 创建媒体传输输入
    ///
    /// 创建媒体传输的输入配置。
    @inlinable
    public func createStreamLinkInput(_ input: CreateStreamLinkInputRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStreamLinkInputResponse> {
        self.client.execute(action: "CreateStreamLinkInput", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建媒体传输输入
    ///
    /// 创建媒体传输的输入配置。
    @inlinable
    public func createStreamLinkInput(_ input: CreateStreamLinkInputRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStreamLinkInputResponse {
        try await self.client.execute(action: "CreateStreamLinkInput", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建媒体传输输入
    ///
    /// 创建媒体传输的输入配置。
    @inlinable
    public func createStreamLinkInput(flowId: String, inputGroup: [CreateInput]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStreamLinkInputResponse> {
        self.createStreamLinkInput(.init(flowId: flowId, inputGroup: inputGroup), region: region, logger: logger, on: eventLoop)
    }

    /// 创建媒体传输输入
    ///
    /// 创建媒体传输的输入配置。
    @inlinable
    public func createStreamLinkInput(flowId: String, inputGroup: [CreateInput]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStreamLinkInputResponse {
        try await self.createStreamLinkInput(.init(flowId: flowId, inputGroup: inputGroup), region: region, logger: logger, on: eventLoop)
    }
}
