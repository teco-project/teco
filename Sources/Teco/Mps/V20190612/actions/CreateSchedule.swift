//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Mps {
    /// CreateSchedule请求参数结构体
    public struct CreateScheduleRequest: TCRequestModel {
        /// 编排名称，最多128字符。同一个用户该名称唯一。
        public let scheduleName: String

        /// 编排绑定的触发规则，当上传视频命中该规则到该对象时即触发编排。
        public let trigger: WorkflowTrigger

        /// 编排任务列表。
        public let activities: [Activity]

        /// 媒体处理的文件输出存储位置。不填则继承 Trigger 中的存储位置。
        public let outputStorage: TaskOutputStorage?

        /// 媒体处理生成的文件输出的目标目录，必选以 / 开头和结尾，如`/movie/201907/`。
        /// 如果不填，表示与触发文件所在的目录一致。
        public let outputDir: String?

        /// 任务的事件通知配置，不填代表不获取事件通知。
        public let taskNotifyConfig: TaskNotifyConfig?

        public init(scheduleName: String, trigger: WorkflowTrigger, activities: [Activity], outputStorage: TaskOutputStorage? = nil, outputDir: String? = nil, taskNotifyConfig: TaskNotifyConfig? = nil) {
            self.scheduleName = scheduleName
            self.trigger = trigger
            self.activities = activities
            self.outputStorage = outputStorage
            self.outputDir = outputDir
            self.taskNotifyConfig = taskNotifyConfig
        }

        enum CodingKeys: String, CodingKey {
            case scheduleName = "ScheduleName"
            case trigger = "Trigger"
            case activities = "Activities"
            case outputStorage = "OutputStorage"
            case outputDir = "OutputDir"
            case taskNotifyConfig = "TaskNotifyConfig"
        }
    }

    /// CreateSchedule返回参数结构体
    public struct CreateScheduleResponse: TCResponseModel {
        /// 编排 ID。
        public let scheduleId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case scheduleId = "ScheduleId"
            case requestId = "RequestId"
        }
    }

    /// 创建编排
    ///
    /// 对 COS 中指定 Bucket 的目录下上传的媒体文件，设置处理规则，包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频转自适应码流；
    /// 7. 智能内容审核（鉴黄、敏感信息检测）；
    /// 8. 智能内容分析（标签、分类、封面、按帧标签）；
    /// 9. 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词）。
    ///
    /// 注意：创建编排成功后是禁用状态，需要手动启用。
    @inlinable
    public func createSchedule(_ input: CreateScheduleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateScheduleResponse> {
        self.client.execute(action: "CreateSchedule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建编排
    ///
    /// 对 COS 中指定 Bucket 的目录下上传的媒体文件，设置处理规则，包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频转自适应码流；
    /// 7. 智能内容审核（鉴黄、敏感信息检测）；
    /// 8. 智能内容分析（标签、分类、封面、按帧标签）；
    /// 9. 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词）。
    ///
    /// 注意：创建编排成功后是禁用状态，需要手动启用。
    @inlinable
    public func createSchedule(_ input: CreateScheduleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateScheduleResponse {
        try await self.client.execute(action: "CreateSchedule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建编排
    ///
    /// 对 COS 中指定 Bucket 的目录下上传的媒体文件，设置处理规则，包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频转自适应码流；
    /// 7. 智能内容审核（鉴黄、敏感信息检测）；
    /// 8. 智能内容分析（标签、分类、封面、按帧标签）；
    /// 9. 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词）。
    ///
    /// 注意：创建编排成功后是禁用状态，需要手动启用。
    @inlinable
    public func createSchedule(scheduleName: String, trigger: WorkflowTrigger, activities: [Activity], outputStorage: TaskOutputStorage? = nil, outputDir: String? = nil, taskNotifyConfig: TaskNotifyConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateScheduleResponse> {
        self.createSchedule(.init(scheduleName: scheduleName, trigger: trigger, activities: activities, outputStorage: outputStorage, outputDir: outputDir, taskNotifyConfig: taskNotifyConfig), region: region, logger: logger, on: eventLoop)
    }

    /// 创建编排
    ///
    /// 对 COS 中指定 Bucket 的目录下上传的媒体文件，设置处理规则，包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频转自适应码流；
    /// 7. 智能内容审核（鉴黄、敏感信息检测）；
    /// 8. 智能内容分析（标签、分类、封面、按帧标签）；
    /// 9. 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词）。
    ///
    /// 注意：创建编排成功后是禁用状态，需要手动启用。
    @inlinable
    public func createSchedule(scheduleName: String, trigger: WorkflowTrigger, activities: [Activity], outputStorage: TaskOutputStorage? = nil, outputDir: String? = nil, taskNotifyConfig: TaskNotifyConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateScheduleResponse {
        try await self.createSchedule(.init(scheduleName: scheduleName, trigger: trigger, activities: activities, outputStorage: outputStorage, outputDir: outputDir, taskNotifyConfig: taskNotifyConfig), region: region, logger: logger, on: eventLoop)
    }
}
