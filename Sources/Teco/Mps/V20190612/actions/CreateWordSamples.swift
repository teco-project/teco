//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mps {
    /// CreateWordSamples请求参数结构体
    public struct CreateWordSamplesRequest: TCRequestModel {
        /// <b>关键词应用场景，可选值：</b>
        /// 1. Recognition.Ocr：通过光学字符识别技术，进行内容识别；
        /// 2. Recognition.Asr：通过音频识别技术，进行内容识别；
        /// 3. Review.Ocr：通过光学字符识别技术，进行不适宜内容识别；
        /// 4. Review.Asr：通过音频识别技术，进行不适宜内容识别；
        /// <b>可合并简写为：</b>
        /// 5. Recognition：通过光学字符识别技术、音频识别技术，进行内容识别，等价于 1+2；
        /// 6. Review：通过光学字符识别技术、音频识别技术，进行不适宜内容识别，等价于 3+4；
        /// 7. All：通过光学字符识别技术、音频识别技术，进行内容识别、不适宜内容识别，等价于 1+2+3+4。
        public let usages: [String]

        /// 关键词，数组长度限制：100。
        public let words: [AiSampleWordInfo]

        public init(usages: [String], words: [AiSampleWordInfo]) {
            self.usages = usages
            self.words = words
        }

        enum CodingKeys: String, CodingKey {
            case usages = "Usages"
            case words = "Words"
        }
    }

    /// CreateWordSamples返回参数结构体
    public struct CreateWordSamplesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建关键词样本
    ///
    /// 该接口用于批量创建关键词样本，样本用于通过OCR、ASR技术，进行不适宜内容识别、内容识别等视频处理。
    @inlinable @discardableResult
    public func createWordSamples(_ input: CreateWordSamplesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWordSamplesResponse> {
        self.client.execute(action: "CreateWordSamples", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建关键词样本
    ///
    /// 该接口用于批量创建关键词样本，样本用于通过OCR、ASR技术，进行不适宜内容识别、内容识别等视频处理。
    @inlinable @discardableResult
    public func createWordSamples(_ input: CreateWordSamplesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWordSamplesResponse {
        try await self.client.execute(action: "CreateWordSamples", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建关键词样本
    ///
    /// 该接口用于批量创建关键词样本，样本用于通过OCR、ASR技术，进行不适宜内容识别、内容识别等视频处理。
    @inlinable @discardableResult
    public func createWordSamples(usages: [String], words: [AiSampleWordInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWordSamplesResponse> {
        self.createWordSamples(.init(usages: usages, words: words), region: region, logger: logger, on: eventLoop)
    }

    /// 创建关键词样本
    ///
    /// 该接口用于批量创建关键词样本，样本用于通过OCR、ASR技术，进行不适宜内容识别、内容识别等视频处理。
    @inlinable @discardableResult
    public func createWordSamples(usages: [String], words: [AiSampleWordInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWordSamplesResponse {
        try await self.createWordSamples(.init(usages: usages, words: words), region: region, logger: logger, on: eventLoop)
    }
}
