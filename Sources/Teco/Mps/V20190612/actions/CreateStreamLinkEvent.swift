//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mps {
    /// CreateStreamLinkEvent请求参数结构体
    public struct CreateStreamLinkEventRequest: TCRequest {
        /// 事件名称。
        public let eventName: String

        /// 事件描述。
        public let description: String?

        public init(eventName: String, description: String? = nil) {
            self.eventName = eventName
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case eventName = "EventName"
            case description = "Description"
        }
    }

    /// CreateStreamLinkEvent返回参数结构体
    public struct CreateStreamLinkEventResponse: TCResponse {
        /// 创建的Event信息。
        public let info: DescribeEvent

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case info = "Info"
            case requestId = "RequestId"
        }
    }

    /// 创建媒体传输事件
    ///
    /// 创建媒体传输的事件Event。
    @inlinable
    public func createStreamLinkEvent(_ input: CreateStreamLinkEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStreamLinkEventResponse> {
        self.client.execute(action: "CreateStreamLinkEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建媒体传输事件
    ///
    /// 创建媒体传输的事件Event。
    @inlinable
    public func createStreamLinkEvent(_ input: CreateStreamLinkEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStreamLinkEventResponse {
        try await self.client.execute(action: "CreateStreamLinkEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建媒体传输事件
    ///
    /// 创建媒体传输的事件Event。
    @inlinable
    public func createStreamLinkEvent(eventName: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStreamLinkEventResponse> {
        self.createStreamLinkEvent(.init(eventName: eventName, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 创建媒体传输事件
    ///
    /// 创建媒体传输的事件Event。
    @inlinable
    public func createStreamLinkEvent(eventName: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStreamLinkEventResponse {
        try await self.createStreamLinkEvent(.init(eventName: eventName, description: description), region: region, logger: logger, on: eventLoop)
    }
}
