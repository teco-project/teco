//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mps {
    /// ParseNotification请求参数结构体
    public struct ParseNotificationRequest: TCRequest {
        /// 从 CMQ 获取到的事件通知内容。
        public let content: String

        public init(content: String) {
            self.content = content
        }

        enum CodingKeys: String, CodingKey {
            case content = "Content"
        }
    }

    /// ParseNotification返回参数结构体
    public struct ParseNotificationResponse: TCResponse {
        /// 支持事件类型，目前取值有：
        /// - WorkflowTask：视频工作流处理任务。
        /// - EditMediaTask：视频编辑任务。
        /// - ScheduleTask：编排任务。
        public let eventType: String

        /// 视频处理任务信息，仅当 EventType 为 WorkflowTask，该字段有值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workflowTaskEvent: WorkflowTask?

        /// 视频编辑任务信息，仅当 EventType 为 EditMediaTask，该字段有值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let editMediaTaskEvent: EditMediaTask?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长50个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长1000个字符。
        public let sessionContext: String

        /// 编排任务信息，仅当 EventType 为 ScheduleTask，该字段有值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scheduleTaskEvent: ScheduleTask?

        /// - 过期时间，事件通知签名过期 UNIX 时间戳。
        /// - 来自媒体处理的消息通知默认过期时间是10分钟，如果一条消息通知中的 Timestamp 值所指定的时间已经过期，则可以判定这条通知无效，进而可以防止网络重放攻击。
        /// - Timestamp 的格式为十进制 UNIX 时间戳，即从1970年01月01日（UTC/GMT 的午夜）开始所经过的秒数。
        public let timestamp: Int64?

        /// 事件通知安全签名 Sign = MD5（Timestamp + NotifyKey）。说明：媒体处理把Timestamp 和 TaskNotifyConfig 里面的NotifyKey 进行字符串拼接后通过 MD5 计算得出 Sign 值，并将其放在通知消息里，您的后台服务器在收到通知消息后可以根据同样的算法确认 Sign 是否正确，进而确认消息是否确实来自媒体处理后台。
        public let sign: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case eventType = "EventType"
            case workflowTaskEvent = "WorkflowTaskEvent"
            case editMediaTaskEvent = "EditMediaTaskEvent"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
            case scheduleTaskEvent = "ScheduleTaskEvent"
            case timestamp = "Timestamp"
            case sign = "Sign"
            case requestId = "RequestId"
        }
    }

    /// 解析事件通知
    ///
    /// 从 CMQ 获取到消息后，从消息的 msgBody 字段中解析出 MPS 事件通知的内容。
    /// 该接口不用于发起网络调用，而是用来帮助生成各个语言平台的 SDK，您可以参考 SDK 中的解析函数，实现事件通知的解析。
    @inlinable
    public func parseNotification(_ input: ParseNotificationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ParseNotificationResponse> {
        self.client.execute(action: "ParseNotification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 解析事件通知
    ///
    /// 从 CMQ 获取到消息后，从消息的 msgBody 字段中解析出 MPS 事件通知的内容。
    /// 该接口不用于发起网络调用，而是用来帮助生成各个语言平台的 SDK，您可以参考 SDK 中的解析函数，实现事件通知的解析。
    @inlinable
    public func parseNotification(_ input: ParseNotificationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ParseNotificationResponse {
        try await self.client.execute(action: "ParseNotification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 解析事件通知
    ///
    /// 从 CMQ 获取到消息后，从消息的 msgBody 字段中解析出 MPS 事件通知的内容。
    /// 该接口不用于发起网络调用，而是用来帮助生成各个语言平台的 SDK，您可以参考 SDK 中的解析函数，实现事件通知的解析。
    @inlinable
    public func parseNotification(content: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ParseNotificationResponse> {
        self.parseNotification(.init(content: content), region: region, logger: logger, on: eventLoop)
    }

    /// 解析事件通知
    ///
    /// 从 CMQ 获取到消息后，从消息的 msgBody 字段中解析出 MPS 事件通知的内容。
    /// 该接口不用于发起网络调用，而是用来帮助生成各个语言平台的 SDK，您可以参考 SDK 中的解析函数，实现事件通知的解析。
    @inlinable
    public func parseNotification(content: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ParseNotificationResponse {
        try await self.parseNotification(.init(content: content), region: region, logger: logger, on: eventLoop)
    }
}
