//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mps {
    /// CreateStreamLinkFlow请求参数结构体
    public struct CreateStreamLinkFlowRequest: TCRequest {
        /// 流名称。
        public let flowName: String

        /// 最大带宽，单位bps，可选[10000000, 20000000, 50000000]。
        public let maxBandwidth: Int64

        /// 流的输入组。
        public let inputGroup: [CreateInput]?

        /// 该Flow关联的媒体传输事件ID，每个flow只能关联一个Event。
        public let eventId: String?

        public init(flowName: String, maxBandwidth: Int64, inputGroup: [CreateInput]? = nil, eventId: String? = nil) {
            self.flowName = flowName
            self.maxBandwidth = maxBandwidth
            self.inputGroup = inputGroup
            self.eventId = eventId
        }

        enum CodingKeys: String, CodingKey {
            case flowName = "FlowName"
            case maxBandwidth = "MaxBandwidth"
            case inputGroup = "InputGroup"
            case eventId = "EventId"
        }
    }

    /// CreateStreamLinkFlow返回参数结构体
    public struct CreateStreamLinkFlowResponse: TCResponse {
        /// 创建的Flow信息。
        public let info: DescribeFlow

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case info = "Info"
            case requestId = "RequestId"
        }
    }

    /// 创建媒体传输流
    ///
    /// 创建媒体传输的传输流配置。
    @inlinable
    public func createStreamLinkFlow(_ input: CreateStreamLinkFlowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStreamLinkFlowResponse> {
        self.client.execute(action: "CreateStreamLinkFlow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建媒体传输流
    ///
    /// 创建媒体传输的传输流配置。
    @inlinable
    public func createStreamLinkFlow(_ input: CreateStreamLinkFlowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStreamLinkFlowResponse {
        try await self.client.execute(action: "CreateStreamLinkFlow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建媒体传输流
    ///
    /// 创建媒体传输的传输流配置。
    @inlinable
    public func createStreamLinkFlow(flowName: String, maxBandwidth: Int64, inputGroup: [CreateInput]? = nil, eventId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateStreamLinkFlowResponse> {
        self.createStreamLinkFlow(.init(flowName: flowName, maxBandwidth: maxBandwidth, inputGroup: inputGroup, eventId: eventId), region: region, logger: logger, on: eventLoop)
    }

    /// 创建媒体传输流
    ///
    /// 创建媒体传输的传输流配置。
    @inlinable
    public func createStreamLinkFlow(flowName: String, maxBandwidth: Int64, inputGroup: [CreateInput]? = nil, eventId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateStreamLinkFlowResponse {
        try await self.createStreamLinkFlow(.init(flowName: flowName, maxBandwidth: maxBandwidth, inputGroup: inputGroup, eventId: eventId), region: region, logger: logger, on: eventLoop)
    }
}
