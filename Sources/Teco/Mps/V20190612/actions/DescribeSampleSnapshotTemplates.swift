//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mps {
    /// DescribeSampleSnapshotTemplates请求参数结构体
    public struct DescribeSampleSnapshotTemplatesRequest: TCRequestModel {
        /// 采样截图模板唯一标识过滤条件，数组长度限制：100。
        public let definitions: [UInt64]?
        
        /// 分页偏移量，默认值：0。
        public let offset: UInt64?
        
        /// 返回记录条数，默认值：10，最大值：100。
        public let limit: UInt64?
        
        /// 模板类型过滤条件，可选值：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String?
        
        public init (definitions: [UInt64]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, type: String? = nil) {
            self.definitions = definitions
            self.offset = offset
            self.limit = limit
            self.type = type
        }
        
        enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case offset = "Offset"
            case limit = "Limit"
            case type = "Type"
        }
    }
    
    /// DescribeSampleSnapshotTemplates返回参数结构体
    public struct DescribeSampleSnapshotTemplatesResponse: TCResponseModel {
        /// 符合过滤条件的记录总数。
        public let totalCount: UInt64
        
        /// 采样截图模板详情列表。
        public let sampleSnapshotTemplateSet: [SampleSnapshotTemplate]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case sampleSnapshotTemplateSet = "SampleSnapshotTemplateSet"
            case requestId = "RequestId"
        }
    }
    
    /// 获取采样截图模板列表
    ///
    /// 查询采样截图模板，支持根据条件，分页查询。
    @inlinable
    public func describeSampleSnapshotTemplates(_ input: DescribeSampleSnapshotTemplatesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeSampleSnapshotTemplatesResponse > {
        self.client.execute(action: "DescribeSampleSnapshotTemplates", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取采样截图模板列表
    ///
    /// 查询采样截图模板，支持根据条件，分页查询。
    @inlinable
    public func describeSampleSnapshotTemplates(_ input: DescribeSampleSnapshotTemplatesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSampleSnapshotTemplatesResponse {
        try await self.client.execute(action: "DescribeSampleSnapshotTemplates", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取采样截图模板列表
    ///
    /// 查询采样截图模板，支持根据条件，分页查询。
    @inlinable
    public func describeSampleSnapshotTemplates(definitions: [UInt64]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, type: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeSampleSnapshotTemplatesResponse > {
        self.describeSampleSnapshotTemplates(DescribeSampleSnapshotTemplatesRequest(definitions: definitions, offset: offset, limit: limit, type: type), logger: logger, on: eventLoop)
    }
    
    /// 获取采样截图模板列表
    ///
    /// 查询采样截图模板，支持根据条件，分页查询。
    @inlinable
    public func describeSampleSnapshotTemplates(definitions: [UInt64]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, type: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSampleSnapshotTemplatesResponse {
        try await self.describeSampleSnapshotTemplates(DescribeSampleSnapshotTemplatesRequest(definitions: definitions, offset: offset, limit: limit, type: type), logger: logger, on: eventLoop)
    }
}
