//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mps {
    /// DescribeStreamLinkEvent请求参数结构体
    public struct DescribeStreamLinkEventRequest: TCRequest {
        /// 媒体传输事件ID。
        public let eventId: String

        public init(eventId: String) {
            self.eventId = eventId
        }

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
        }
    }

    /// DescribeStreamLinkEvent返回参数结构体
    public struct DescribeStreamLinkEventResponse: TCResponse {
        /// 媒体传输事件的配置信息。
        public let info: DescribeEvent

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case info = "Info"
            case requestId = "RequestId"
        }
    }

    /// 查询媒体传输事件
    ///
    /// 查询媒体传输事件的配置信息。
    @inlinable
    public func describeStreamLinkEvent(_ input: DescribeStreamLinkEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStreamLinkEventResponse> {
        self.client.execute(action: "DescribeStreamLinkEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询媒体传输事件
    ///
    /// 查询媒体传输事件的配置信息。
    @inlinable
    public func describeStreamLinkEvent(_ input: DescribeStreamLinkEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStreamLinkEventResponse {
        try await self.client.execute(action: "DescribeStreamLinkEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询媒体传输事件
    ///
    /// 查询媒体传输事件的配置信息。
    @inlinable
    public func describeStreamLinkEvent(eventId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStreamLinkEventResponse> {
        self.describeStreamLinkEvent(.init(eventId: eventId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询媒体传输事件
    ///
    /// 查询媒体传输事件的配置信息。
    @inlinable
    public func describeStreamLinkEvent(eventId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStreamLinkEventResponse {
        try await self.describeStreamLinkEvent(.init(eventId: eventId), region: region, logger: logger, on: eventLoop)
    }
}
