//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Mps {
    /// WithdrawsWatermark请求参数结构体
    public struct WithdrawsWatermarkRequest: TCRequestModel {
        /// 输入媒体文件存储信息。
        public let inputInfo: MediaInputInfo

        /// 任务的事件通知信息，不填代表不获取事件通知。
        public let taskNotifyConfig: TaskNotifyConfig?

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String?

        public init(inputInfo: MediaInputInfo, taskNotifyConfig: TaskNotifyConfig? = nil, sessionContext: String? = nil) {
            self.inputInfo = inputInfo
            self.taskNotifyConfig = taskNotifyConfig
            self.sessionContext = sessionContext
        }

        enum CodingKeys: String, CodingKey {
            case inputInfo = "InputInfo"
            case taskNotifyConfig = "TaskNotifyConfig"
            case sessionContext = "SessionContext"
        }
    }

    /// WithdrawsWatermark返回参数结构体
    public struct WithdrawsWatermarkResponse: TCResponseModel {
        /// 任务 ID，可以通过该 ID 查询任务状态和结果。
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 提取盲水印
    ///
    /// 提取视频中的盲水印。
    @inlinable
    public func withdrawsWatermark(_ input: WithdrawsWatermarkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<WithdrawsWatermarkResponse> {
        self.client.execute(action: "WithdrawsWatermark", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 提取盲水印
    ///
    /// 提取视频中的盲水印。
    @inlinable
    public func withdrawsWatermark(_ input: WithdrawsWatermarkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> WithdrawsWatermarkResponse {
        try await self.client.execute(action: "WithdrawsWatermark", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 提取盲水印
    ///
    /// 提取视频中的盲水印。
    @inlinable
    public func withdrawsWatermark(inputInfo: MediaInputInfo, taskNotifyConfig: TaskNotifyConfig? = nil, sessionContext: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<WithdrawsWatermarkResponse> {
        self.withdrawsWatermark(.init(inputInfo: inputInfo, taskNotifyConfig: taskNotifyConfig, sessionContext: sessionContext), region: region, logger: logger, on: eventLoop)
    }

    /// 提取盲水印
    ///
    /// 提取视频中的盲水印。
    @inlinable
    public func withdrawsWatermark(inputInfo: MediaInputInfo, taskNotifyConfig: TaskNotifyConfig? = nil, sessionContext: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> WithdrawsWatermarkResponse {
        try await self.withdrawsWatermark(.init(inputInfo: inputInfo, taskNotifyConfig: taskNotifyConfig, sessionContext: sessionContext), region: region, logger: logger, on: eventLoop)
    }
}
