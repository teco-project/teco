//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcm {
    /// LinkPrometheus请求参数结构体
    public struct LinkPrometheusRequest: TCRequestModel {
        /// 网格ID
        public let meshID: String

        /// 配置
        public let prometheus: PrometheusConfig

        public init(meshID: String, prometheus: PrometheusConfig) {
            self.meshID = meshID
            self.prometheus = prometheus
        }

        enum CodingKeys: String, CodingKey {
            case meshID = "MeshID"
            case prometheus = "Prometheus"
        }
    }

    /// LinkPrometheus返回参数结构体
    public struct LinkPrometheusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 关联Prometheus
    @inlinable @discardableResult
    public func linkPrometheus(_ input: LinkPrometheusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<LinkPrometheusResponse> {
        self.client.execute(action: "LinkPrometheus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 关联Prometheus
    @inlinable @discardableResult
    public func linkPrometheus(_ input: LinkPrometheusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> LinkPrometheusResponse {
        try await self.client.execute(action: "LinkPrometheus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 关联Prometheus
    @inlinable @discardableResult
    public func linkPrometheus(meshID: String, prometheus: PrometheusConfig, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<LinkPrometheusResponse> {
        self.linkPrometheus(LinkPrometheusRequest(meshID: meshID, prometheus: prometheus), region: region, logger: logger, on: eventLoop)
    }

    /// 关联Prometheus
    @inlinable @discardableResult
    public func linkPrometheus(meshID: String, prometheus: PrometheusConfig, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> LinkPrometheusResponse {
        try await self.linkPrometheus(LinkPrometheusRequest(meshID: meshID, prometheus: prometheus), region: region, logger: logger, on: eventLoop)
    }
}
