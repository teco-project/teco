//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcm {
    /// ModifyMesh请求参数结构体
    public struct ModifyMeshRequest: TCRequest {
        /// 需要修改的网格Id
        public let meshId: String

        /// 修改的网格名称
        public let displayName: String?

        /// 修改的网格配置
        public let config: MeshConfig?

        /// 修改的集群配置
        public let clusterList: [Cluster]?

        public init(meshId: String, displayName: String? = nil, config: MeshConfig? = nil, clusterList: [Cluster]? = nil) {
            self.meshId = meshId
            self.displayName = displayName
            self.config = config
            self.clusterList = clusterList
        }

        enum CodingKeys: String, CodingKey {
            case meshId = "MeshId"
            case displayName = "DisplayName"
            case config = "Config"
            case clusterList = "ClusterList"
        }
    }

    /// ModifyMesh返回参数结构体
    public struct ModifyMeshResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改网格
    @inlinable @discardableResult
    public func modifyMesh(_ input: ModifyMeshRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMeshResponse> {
        self.client.execute(action: "ModifyMesh", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改网格
    @inlinable @discardableResult
    public func modifyMesh(_ input: ModifyMeshRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMeshResponse {
        try await self.client.execute(action: "ModifyMesh", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改网格
    @inlinable @discardableResult
    public func modifyMesh(meshId: String, displayName: String? = nil, config: MeshConfig? = nil, clusterList: [Cluster]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMeshResponse> {
        self.modifyMesh(.init(meshId: meshId, displayName: displayName, config: config, clusterList: clusterList), region: region, logger: logger, on: eventLoop)
    }

    /// 修改网格
    @inlinable @discardableResult
    public func modifyMesh(meshId: String, displayName: String? = nil, config: MeshConfig? = nil, clusterList: [Cluster]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMeshResponse {
        try await self.modifyMesh(.init(meshId: meshId, displayName: displayName, config: config, clusterList: clusterList), region: region, logger: logger, on: eventLoop)
    }
}
