//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcm {
    /// ModifyAccessLogConfig请求参数结构体
    public struct ModifyAccessLogConfigRequest: TCRequestModel {
        /// mesh ID
        public let meshId: String

        /// 选中的范围
        public let selectedRange: SelectedRange?

        /// 采用的模板，可选值：istio（默认）、trace、custom
        public let template: String?

        /// 是否启用
        public let enable: Bool?

        /// 腾讯云日志服务相关参数
        public let cls: CLS?

        /// 编码格式，可选值：TEXT、JSON
        public let encoding: String?

        /// 日志格式
        public let format: String?

        /// 是否启用标准输出
        public let enableStdout: Bool?

        /// 是否启动GRPC第三方服务器
        public let enableServer: Bool?

        /// GRPC第三方服务器地址
        public let address: String?

        public init(meshId: String, selectedRange: SelectedRange? = nil, template: String? = nil, enable: Bool? = nil, cls: CLS? = nil, encoding: String? = nil, format: String? = nil, enableStdout: Bool? = nil, enableServer: Bool? = nil, address: String? = nil) {
            self.meshId = meshId
            self.selectedRange = selectedRange
            self.template = template
            self.enable = enable
            self.cls = cls
            self.encoding = encoding
            self.format = format
            self.enableStdout = enableStdout
            self.enableServer = enableServer
            self.address = address
        }

        enum CodingKeys: String, CodingKey {
            case meshId = "MeshId"
            case selectedRange = "SelectedRange"
            case template = "Template"
            case enable = "Enable"
            case cls = "CLS"
            case encoding = "Encoding"
            case format = "Format"
            case enableStdout = "EnableStdout"
            case enableServer = "EnableServer"
            case address = "Address"
        }
    }

    /// ModifyAccessLogConfig返回参数结构体
    public struct ModifyAccessLogConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改访问日志配置
    @inlinable @discardableResult
    public func modifyAccessLogConfig(_ input: ModifyAccessLogConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAccessLogConfigResponse> {
        self.client.execute(action: "ModifyAccessLogConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改访问日志配置
    @inlinable @discardableResult
    public func modifyAccessLogConfig(_ input: ModifyAccessLogConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAccessLogConfigResponse {
        try await self.client.execute(action: "ModifyAccessLogConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改访问日志配置
    @inlinable @discardableResult
    public func modifyAccessLogConfig(meshId: String, selectedRange: SelectedRange? = nil, template: String? = nil, enable: Bool? = nil, cls: CLS? = nil, encoding: String? = nil, format: String? = nil, enableStdout: Bool? = nil, enableServer: Bool? = nil, address: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAccessLogConfigResponse> {
        self.modifyAccessLogConfig(.init(meshId: meshId, selectedRange: selectedRange, template: template, enable: enable, cls: cls, encoding: encoding, format: format, enableStdout: enableStdout, enableServer: enableServer, address: address), region: region, logger: logger, on: eventLoop)
    }

    /// 修改访问日志配置
    @inlinable @discardableResult
    public func modifyAccessLogConfig(meshId: String, selectedRange: SelectedRange? = nil, template: String? = nil, enable: Bool? = nil, cls: CLS? = nil, encoding: String? = nil, format: String? = nil, enableStdout: Bool? = nil, enableServer: Bool? = nil, address: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAccessLogConfigResponse {
        try await self.modifyAccessLogConfig(.init(meshId: meshId, selectedRange: selectedRange, template: template, enable: enable, cls: cls, encoding: encoding, format: format, enableStdout: enableStdout, enableServer: enableServer, address: address), region: region, logger: logger, on: eventLoop)
    }
}
