//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcm {
    /// LinkClusterList请求参数结构体
    public struct LinkClusterListRequest: TCRequestModel {
        /// 网格Id
        public let meshId: String

        /// 关联集群
        public let clusterList: [Cluster]

        public init(meshId: String, clusterList: [Cluster]) {
            self.meshId = meshId
            self.clusterList = clusterList
        }

        enum CodingKeys: String, CodingKey {
            case meshId = "MeshId"
            case clusterList = "ClusterList"
        }
    }

    /// LinkClusterList返回参数结构体
    public struct LinkClusterListResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 关联集群
    @inlinable @discardableResult
    public func linkClusterList(_ input: LinkClusterListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<LinkClusterListResponse> {
        self.client.execute(action: "LinkClusterList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 关联集群
    @inlinable @discardableResult
    public func linkClusterList(_ input: LinkClusterListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> LinkClusterListResponse {
        try await self.client.execute(action: "LinkClusterList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 关联集群
    @inlinable @discardableResult
    public func linkClusterList(meshId: String, clusterList: [Cluster], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<LinkClusterListResponse> {
        self.linkClusterList(.init(meshId: meshId, clusterList: clusterList), region: region, logger: logger, on: eventLoop)
    }

    /// 关联集群
    @inlinable @discardableResult
    public func linkClusterList(meshId: String, clusterList: [Cluster], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> LinkClusterListResponse {
        try await self.linkClusterList(.init(meshId: meshId, clusterList: clusterList), region: region, logger: logger, on: eventLoop)
    }
}
