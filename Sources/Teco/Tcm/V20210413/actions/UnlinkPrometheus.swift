//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcm {
    /// UnlinkPrometheus请求参数结构体
    public struct UnlinkPrometheusRequest: TCRequestModel {
        /// 网格ID
        public let meshID: String

        public init(meshID: String) {
            self.meshID = meshID
        }

        enum CodingKeys: String, CodingKey {
            case meshID = "MeshID"
        }
    }

    /// UnlinkPrometheus返回参数结构体
    public struct UnlinkPrometheusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 解除关联Prometheus
    @inlinable @discardableResult
    public func unlinkPrometheus(_ input: UnlinkPrometheusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UnlinkPrometheusResponse> {
        self.client.execute(action: "UnlinkPrometheus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 解除关联Prometheus
    @inlinable @discardableResult
    public func unlinkPrometheus(_ input: UnlinkPrometheusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UnlinkPrometheusResponse {
        try await self.client.execute(action: "UnlinkPrometheus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 解除关联Prometheus
    @inlinable @discardableResult
    public func unlinkPrometheus(meshID: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UnlinkPrometheusResponse> {
        self.unlinkPrometheus(UnlinkPrometheusRequest(meshID: meshID), region: region, logger: logger, on: eventLoop)
    }

    /// 解除关联Prometheus
    @inlinable @discardableResult
    public func unlinkPrometheus(meshID: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UnlinkPrometheusResponse {
        try await self.unlinkPrometheus(UnlinkPrometheusRequest(meshID: meshID), region: region, logger: logger, on: eventLoop)
    }
}
