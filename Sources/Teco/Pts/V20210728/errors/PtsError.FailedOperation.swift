//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCPtsError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case accessTagFail = "FailedOperation.AccessTagFail"
            case dbQueryFailed = "FailedOperation.DbQueryFailed"
            case dbRecordCreateFailed = "FailedOperation.DbRecordCreateFailed"
            case dbRecordUpdateFailed = "FailedOperation.DbRecordUpdateFailed"
            case jobStatusNotRunning = "FailedOperation.JobStatusNotRunning"
            case noTasksInJob = "FailedOperation.NoTasksInJob"
            case notSupportedInEnv = "FailedOperation.NotSupportedInEnv"
            case resourceNotFound = "FailedOperation.ResourceNotFound"
            case sendRequest = "FailedOperation.SendRequest"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var accessTagFail: FailedOperation {
            FailedOperation(.accessTagFail)
        }
        
        /// 数据库查询失败。
        public static var dbQueryFailed: FailedOperation {
            FailedOperation(.dbQueryFailed)
        }
        
        /// 数据库创建记录失败。
        public static var dbRecordCreateFailed: FailedOperation {
            FailedOperation(.dbRecordCreateFailed)
        }
        
        /// 数据库记录更新失败。
        public static var dbRecordUpdateFailed: FailedOperation {
            FailedOperation(.dbRecordUpdateFailed)
        }
        
        /// 任务状态不是运行中。
        public static var jobStatusNotRunning: FailedOperation {
            FailedOperation(.jobStatusNotRunning)
        }
        
        /// 任务中没有task。
        public static var noTasksInJob: FailedOperation {
            FailedOperation(.noTasksInJob)
        }
        
        /// 当前环境不支持。
        public static var notSupportedInEnv: FailedOperation {
            FailedOperation(.notSupportedInEnv)
        }
        
        /// 资源不存在。
        public static var resourceNotFound: FailedOperation {
            FailedOperation(.resourceNotFound)
        }
        
        /// 请求发送失败。
        ///
        /// 可能的原因：标签服务鉴权失败，等等。
        public static var sendRequest: FailedOperation {
            FailedOperation(.sendRequest)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCPtsError.FailedOperation: Equatable {
    public static func == (lhs: TCPtsError.FailedOperation, rhs: TCPtsError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCPtsError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCPtsError.FailedOperation {
    /// - Returns: ``TCPtsError`` that holds the same error and context.
    public func toPtsError() -> TCPtsError {
        guard let code = TCPtsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCPtsError(code, context: self.context)
    }
}

extension TCPtsError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
