//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Pts {
    /// DescribeJobs请求参数结构体
    public struct DescribeJobsRequest: TCPaginatedRequest {
        /// 场景ID数组
        public let scenarioIds: [String]

        /// 项目ID数组
        public let projectIds: [String]

        /// 分页起始位置
        public let offset: Int64?

        /// 每页最大数目
        public let limit: Int64?

        /// 任务ID数组
        public let jobIds: [String]?

        /// 按字段排序
        public let orderBy: String?

        /// 升序/降序
        public let ascend: Bool?

        /// 任务开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$startTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date?

        /// 任务结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$endTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date?

        /// 调试任务标记
        public let debug: Bool?

        /// 任务的状态
        public let status: [Int64]?

        public init(scenarioIds: [String], projectIds: [String], offset: Int64? = nil, limit: Int64? = nil, jobIds: [String]? = nil, orderBy: String? = nil, ascend: Bool? = nil, startTime: Date? = nil, endTime: Date? = nil, debug: Bool? = nil, status: [Int64]? = nil) {
            self.scenarioIds = scenarioIds
            self.projectIds = projectIds
            self.offset = offset
            self.limit = limit
            self.jobIds = jobIds
            self.orderBy = orderBy
            self.ascend = ascend
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.debug = debug
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case scenarioIds = "ScenarioIds"
            case projectIds = "ProjectIds"
            case offset = "Offset"
            case limit = "Limit"
            case jobIds = "JobIds"
            case orderBy = "OrderBy"
            case ascend = "Ascend"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case debug = "Debug"
            case status = "Status"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeJobsResponse) -> DescribeJobsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(scenarioIds: self.scenarioIds, projectIds: self.projectIds, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, jobIds: self.jobIds, orderBy: self.orderBy, ascend: self.ascend, startTime: self.startTime, endTime: self.endTime, debug: self.debug, status: self.status)
        }
    }

    /// DescribeJobs返回参数结构体
    public struct DescribeJobsResponse: TCPaginatedResponse {
        /// 任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobSet: [Job]?

        /// 任务数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case jobSet = "JobSet"
            case total = "Total"
            case requestId = "RequestId"
        }

        /// Extract the returned ``Job`` list from the paginated response.
        public func getItems() -> [Job] {
            self.jobSet ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 查询任务列表
    @inlinable
    public func describeJobs(_ input: DescribeJobsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeJobsResponse> {
        self.client.execute(action: "DescribeJobs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    @inlinable
    public func describeJobs(_ input: DescribeJobsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeJobsResponse {
        try await self.client.execute(action: "DescribeJobs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询任务列表
    @inlinable
    public func describeJobs(scenarioIds: [String], projectIds: [String], offset: Int64? = nil, limit: Int64? = nil, jobIds: [String]? = nil, orderBy: String? = nil, ascend: Bool? = nil, startTime: Date? = nil, endTime: Date? = nil, debug: Bool? = nil, status: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeJobsResponse> {
        self.describeJobs(.init(scenarioIds: scenarioIds, projectIds: projectIds, offset: offset, limit: limit, jobIds: jobIds, orderBy: orderBy, ascend: ascend, startTime: startTime, endTime: endTime, debug: debug, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    @inlinable
    public func describeJobs(scenarioIds: [String], projectIds: [String], offset: Int64? = nil, limit: Int64? = nil, jobIds: [String]? = nil, orderBy: String? = nil, ascend: Bool? = nil, startTime: Date? = nil, endTime: Date? = nil, debug: Bool? = nil, status: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeJobsResponse {
        try await self.describeJobs(.init(scenarioIds: scenarioIds, projectIds: projectIds, offset: offset, limit: limit, jobIds: jobIds, orderBy: orderBy, ascend: ascend, startTime: startTime, endTime: endTime, debug: debug, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    @inlinable
    public func describeJobsPaginated(_ input: DescribeJobsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [Job])> {
        self.client.paginate(input: input, region: region, command: self.describeJobs, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    @inlinable @discardableResult
    public func describeJobsPaginated(_ input: DescribeJobsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeJobsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeJobs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    ///
    /// - Returns: `AsyncSequence`s of ``Job`` and ``DescribeJobsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeJobsPaginator(_ input: DescribeJobsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeJobsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeJobs, logger: logger, on: eventLoop)
    }
}
