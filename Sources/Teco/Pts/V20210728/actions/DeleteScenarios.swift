//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Pts {
    /// DeleteScenarios请求参数结构体
    public struct DeleteScenariosRequest: TCRequest {
        /// 场景ID数组
        public let scenarioIds: [String]

        /// 项目ID
        public let projectId: String

        /// 是否删除场景相关的任务。默认为否。
        public let deleteJobs: Bool?

        public init(scenarioIds: [String], projectId: String, deleteJobs: Bool? = nil) {
            self.scenarioIds = scenarioIds
            self.projectId = projectId
            self.deleteJobs = deleteJobs
        }

        enum CodingKeys: String, CodingKey {
            case scenarioIds = "ScenarioIds"
            case projectId = "ProjectId"
            case deleteJobs = "DeleteJobs"
        }
    }

    /// DeleteScenarios返回参数结构体
    public struct DeleteScenariosResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除场景
    @inlinable @discardableResult
    public func deleteScenarios(_ input: DeleteScenariosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteScenariosResponse> {
        self.client.execute(action: "DeleteScenarios", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除场景
    @inlinable @discardableResult
    public func deleteScenarios(_ input: DeleteScenariosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteScenariosResponse {
        try await self.client.execute(action: "DeleteScenarios", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除场景
    @inlinable @discardableResult
    public func deleteScenarios(scenarioIds: [String], projectId: String, deleteJobs: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteScenariosResponse> {
        self.deleteScenarios(.init(scenarioIds: scenarioIds, projectId: projectId, deleteJobs: deleteJobs), region: region, logger: logger, on: eventLoop)
    }

    /// 删除场景
    @inlinable @discardableResult
    public func deleteScenarios(scenarioIds: [String], projectId: String, deleteJobs: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteScenariosResponse {
        try await self.deleteScenarios(.init(scenarioIds: scenarioIds, projectId: projectId, deleteJobs: deleteJobs), region: region, logger: logger, on: eventLoop)
    }
}
