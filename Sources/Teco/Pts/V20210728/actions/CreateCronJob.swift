//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Pts {
    /// 创建定时任务
    @inlinable
    public func createCronJob(_ input: CreateCronJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateCronJobResponse > {
        self.client.execute(action: "CreateCronJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建定时任务
    @inlinable
    public func createCronJob(_ input: CreateCronJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCronJobResponse {
        try await self.client.execute(action: "CreateCronJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateCronJob请求参数结构体
    public struct CreateCronJobRequest: TCRequestModel {
        /// 定时任务名字
        public let name: String
        
        /// 项目ID
        public let projectId: String
        
        /// 场景ID
        public let scenarioId: String
        
        /// 场景名称
        public let scenarioName: String
        
        /// 执行频率类型，1:只执行一次; 2:日粒度; 3:周粒度; 4:高级
        public let frequencyType: Int64
        
        /// cron表达式
        public let cronExpression: String
        
        /// 任务发起人
        public let jobOwner: String
        
        /// 结束时间
        public let endTime: Date?
        
        /// Notice ID
        public let noticeId: String?
        
        /// 备注
        public let note: String?
        
        public init (name: String, projectId: String, scenarioId: String, scenarioName: String, frequencyType: Int64, cronExpression: String, jobOwner: String, endTime: Date?, noticeId: String?, note: String?) {
            self.name = name
            self.projectId = projectId
            self.scenarioId = scenarioId
            self.scenarioName = scenarioName
            self.frequencyType = frequencyType
            self.cronExpression = cronExpression
            self.jobOwner = jobOwner
            self.endTime = endTime
            self.noticeId = noticeId
            self.note = note
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case projectId = "ProjectId"
            case scenarioId = "ScenarioId"
            case scenarioName = "ScenarioName"
            case frequencyType = "FrequencyType"
            case cronExpression = "CronExpression"
            case jobOwner = "JobOwner"
            case endTime = "EndTime"
            case noticeId = "NoticeId"
            case note = "Note"
        }
    }
    
    /// CreateCronJob返回参数结构体
    public struct CreateCronJobResponse: TCResponseModel {
        /// 定时任务ID
        public let cronJobId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case cronJobId = "CronJobId"
            case requestId = "RequestId"
        }
    }
}
