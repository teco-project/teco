//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// DescribeDeveloper请求参数结构体
    public struct DescribeDeveloperRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeDeveloper返回参数结构体
    public struct DescribeDeveloperResponse: TCResponseModel {
        /// 服务商ID
        public let developerId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case developerId = "DeveloperId"
            case requestId = "RequestId"
        }
    }

    /// 服务商信息获取
    @inlinable
    public func describeDeveloper(_ input: DescribeDeveloperRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeveloperResponse> {
        self.client.execute(action: "DescribeDeveloper", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 服务商信息获取
    @inlinable
    public func describeDeveloper(_ input: DescribeDeveloperRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeveloperResponse {
        try await self.client.execute(action: "DescribeDeveloper", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 服务商信息获取
    @inlinable
    public func describeDeveloper(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeveloperResponse> {
        self.describeDeveloper(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 服务商信息获取
    @inlinable
    public func describeDeveloper(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeveloperResponse {
        try await self.describeDeveloper(.init(), region: region, logger: logger, on: eventLoop)
    }
}
