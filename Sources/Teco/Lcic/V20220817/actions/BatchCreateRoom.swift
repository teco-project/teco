//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// BatchCreateRoom请求参数结构体
    public struct BatchCreateRoomRequest: TCRequestModel {
        /// 低代码平台的SdkAppId。
        public let sdkAppId: UInt64

        /// 创建房间ID列表
        public let roomInfos: [RoomInfo]

        public init(sdkAppId: UInt64, roomInfos: [RoomInfo]) {
            self.sdkAppId = sdkAppId
            self.roomInfos = roomInfos
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case roomInfos = "RoomInfos"
        }
    }

    /// BatchCreateRoom返回参数结构体
    public struct BatchCreateRoomResponse: TCResponseModel {
        /// 创建成功课堂ID，与传入课堂信息顺序一致
        public let roomIds: [UInt64]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case roomIds = "RoomIds"
            case requestId = "RequestId"
        }
    }

    /// 批量创建房间
    ///
    /// 批量创建房间接口
    @inlinable
    public func batchCreateRoom(_ input: BatchCreateRoomRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchCreateRoomResponse> {
        self.client.execute(action: "BatchCreateRoom", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量创建房间
    ///
    /// 批量创建房间接口
    @inlinable
    public func batchCreateRoom(_ input: BatchCreateRoomRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchCreateRoomResponse {
        try await self.client.execute(action: "BatchCreateRoom", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量创建房间
    ///
    /// 批量创建房间接口
    @inlinable
    public func batchCreateRoom(sdkAppId: UInt64, roomInfos: [RoomInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchCreateRoomResponse> {
        self.batchCreateRoom(.init(sdkAppId: sdkAppId, roomInfos: roomInfos), region: region, logger: logger, on: eventLoop)
    }

    /// 批量创建房间
    ///
    /// 批量创建房间接口
    @inlinable
    public func batchCreateRoom(sdkAppId: UInt64, roomInfos: [RoomInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchCreateRoomResponse {
        try await self.batchCreateRoom(.init(sdkAppId: sdkAppId, roomInfos: roomInfos), region: region, logger: logger, on: eventLoop)
    }
}
