//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// BatchDeleteRecord请求参数结构体
    public struct BatchDeleteRecordRequest: TCRequestModel {
        /// 房间ID列表
        public let roomIds: [Int64]

        /// 低代码互动课堂的SdkAppId。
        public let sdkAppId: UInt64

        public init(roomIds: [Int64], sdkAppId: UInt64) {
            self.roomIds = roomIds
            self.sdkAppId = sdkAppId
        }

        enum CodingKeys: String, CodingKey {
            case roomIds = "RoomIds"
            case sdkAppId = "SdkAppId"
        }
    }

    /// BatchDeleteRecord返回参数结构体
    public struct BatchDeleteRecordResponse: TCResponseModel {
        /// 本次操作删除成功的房间ID列表。如果入参列表中某个房间ID的录制文件已经删除，则出参列表中无对应的房间ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roomIds: [Int64]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case roomIds = "RoomIds"
            case requestId = "RequestId"
        }
    }

    /// 批量删除多个房间的录制文件
    @inlinable
    public func batchDeleteRecord(_ input: BatchDeleteRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeleteRecordResponse> {
        self.client.execute(action: "BatchDeleteRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量删除多个房间的录制文件
    @inlinable
    public func batchDeleteRecord(_ input: BatchDeleteRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeleteRecordResponse {
        try await self.client.execute(action: "BatchDeleteRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量删除多个房间的录制文件
    @inlinable
    public func batchDeleteRecord(roomIds: [Int64], sdkAppId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeleteRecordResponse> {
        self.batchDeleteRecord(.init(roomIds: roomIds, sdkAppId: sdkAppId), region: region, logger: logger, on: eventLoop)
    }

    /// 批量删除多个房间的录制文件
    @inlinable
    public func batchDeleteRecord(roomIds: [Int64], sdkAppId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeleteRecordResponse {
        try await self.batchDeleteRecord(.init(roomIds: roomIds, sdkAppId: sdkAppId), region: region, logger: logger, on: eventLoop)
    }
}
