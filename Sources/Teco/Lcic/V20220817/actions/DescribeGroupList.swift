//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// DescribeGroupList请求参数结构体
    public struct DescribeGroupListRequest: TCRequest {
        /// 低代码平台应用ID
        public let sdkAppId: UInt64

        /// 分页查询当前页数，默认从1开始递增。
        public let page: UInt64?

        /// 每页数据量，默认20，最大1000。
        public let limit: UInt64?

        /// 主讲人ID筛选群组，与MemberId有且只有一个,都传时以此字段获取
        public let teacherId: String?

        /// 成员ID刷选群组，与TeacherId有且只有一个
        public let memberId: String?

        public init(sdkAppId: UInt64, page: UInt64? = nil, limit: UInt64? = nil, teacherId: String? = nil, memberId: String? = nil) {
            self.sdkAppId = sdkAppId
            self.page = page
            self.limit = limit
            self.teacherId = teacherId
            self.memberId = memberId
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case page = "Page"
            case limit = "Limit"
            case teacherId = "TeacherId"
            case memberId = "MemberId"
        }
    }

    /// DescribeGroupList返回参数结构体
    public struct DescribeGroupListResponse: TCResponse {
        /// 记录总数。当前匹配群组总数。
        public let total: UInt64

        /// 群组信息列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupInfos: [GroupInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case groupInfos = "GroupInfos"
            case requestId = "RequestId"
        }
    }

    /// 获取群组列表
    @inlinable
    public func describeGroupList(_ input: DescribeGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGroupListResponse> {
        self.client.execute(action: "DescribeGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取群组列表
    @inlinable
    public func describeGroupList(_ input: DescribeGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGroupListResponse {
        try await self.client.execute(action: "DescribeGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取群组列表
    @inlinable
    public func describeGroupList(sdkAppId: UInt64, page: UInt64? = nil, limit: UInt64? = nil, teacherId: String? = nil, memberId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGroupListResponse> {
        self.describeGroupList(.init(sdkAppId: sdkAppId, page: page, limit: limit, teacherId: teacherId, memberId: memberId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取群组列表
    @inlinable
    public func describeGroupList(sdkAppId: UInt64, page: UInt64? = nil, limit: UInt64? = nil, teacherId: String? = nil, memberId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGroupListResponse {
        try await self.describeGroupList(.init(sdkAppId: sdkAppId, page: page, limit: limit, teacherId: teacherId, memberId: memberId), region: region, logger: logger, on: eventLoop)
    }
}
