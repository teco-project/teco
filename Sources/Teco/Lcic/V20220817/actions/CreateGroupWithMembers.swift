//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// CreateGroupWithMembers请求参数结构体
    public struct CreateGroupWithMembersRequest: TCRequestModel {
        /// 待创建群组名称
        public let groupName: String

        /// 低代码平台应用ID
        public let sdkAppId: UInt64

        /// 默认绑定主讲老师ID
        public let teacherId: String?

        /// 群组成员列表,一次性最多200个
        public let memberIds: [String]?

        public init(groupName: String, sdkAppId: UInt64, teacherId: String? = nil, memberIds: [String]? = nil) {
            self.groupName = groupName
            self.sdkAppId = sdkAppId
            self.teacherId = teacherId
            self.memberIds = memberIds
        }

        enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case sdkAppId = "SdkAppId"
            case teacherId = "TeacherId"
            case memberIds = "MemberIds"
        }
    }

    /// CreateGroupWithMembers返回参数结构体
    public struct CreateGroupWithMembersResponse: TCResponseModel {
        /// 创建成功群组ID
        public let groupId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case requestId = "RequestId"
        }
    }

    /// 创建群组
    ///
    /// 此接口根据成员列表创建群组
    @inlinable
    public func createGroupWithMembers(_ input: CreateGroupWithMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateGroupWithMembersResponse> {
        self.client.execute(action: "CreateGroupWithMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建群组
    ///
    /// 此接口根据成员列表创建群组
    @inlinable
    public func createGroupWithMembers(_ input: CreateGroupWithMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateGroupWithMembersResponse {
        try await self.client.execute(action: "CreateGroupWithMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建群组
    ///
    /// 此接口根据成员列表创建群组
    @inlinable
    public func createGroupWithMembers(groupName: String, sdkAppId: UInt64, teacherId: String? = nil, memberIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateGroupWithMembersResponse> {
        self.createGroupWithMembers(.init(groupName: groupName, sdkAppId: sdkAppId, teacherId: teacherId, memberIds: memberIds), region: region, logger: logger, on: eventLoop)
    }

    /// 创建群组
    ///
    /// 此接口根据成员列表创建群组
    @inlinable
    public func createGroupWithMembers(groupName: String, sdkAppId: UInt64, teacherId: String? = nil, memberIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateGroupWithMembersResponse {
        try await self.createGroupWithMembers(.init(groupName: groupName, sdkAppId: sdkAppId, teacherId: teacherId, memberIds: memberIds), region: region, logger: logger, on: eventLoop)
    }
}
