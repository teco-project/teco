//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Lcic {
    /// BatchRegister请求参数结构体
    public struct BatchRegisterRequest: TCRequestModel {
        /// 批量注册用户信息列表
        public let users: [BatchUserRequest]

        public init(users: [BatchUserRequest]) {
            self.users = users
        }

        enum CodingKeys: String, CodingKey {
            case users = "Users"
        }
    }

    /// BatchRegister返回参数结构体
    public struct BatchRegisterResponse: TCResponseModel {
        /// 注册成功的用户列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let users: [BatchUserInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case users = "Users"
            case requestId = "RequestId"
        }
    }

    /// 用户批量注册
    ///
    /// 如果批量注册的用户已存在，则会被覆盖。一次最多注册1000个用户。默认请求频率限制：10次/秒
    @inlinable
    public func batchRegister(_ input: BatchRegisterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchRegisterResponse> {
        self.client.execute(action: "BatchRegister", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 用户批量注册
    ///
    /// 如果批量注册的用户已存在，则会被覆盖。一次最多注册1000个用户。默认请求频率限制：10次/秒
    @inlinable
    public func batchRegister(_ input: BatchRegisterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchRegisterResponse {
        try await self.client.execute(action: "BatchRegister", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 用户批量注册
    ///
    /// 如果批量注册的用户已存在，则会被覆盖。一次最多注册1000个用户。默认请求频率限制：10次/秒
    @inlinable
    public func batchRegister(users: [BatchUserRequest], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchRegisterResponse> {
        self.batchRegister(.init(users: users), region: region, logger: logger, on: eventLoop)
    }

    /// 用户批量注册
    ///
    /// 如果批量注册的用户已存在，则会被覆盖。一次最多注册1000个用户。默认请求频率限制：10次/秒
    @inlinable
    public func batchRegister(users: [BatchUserRequest], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchRegisterResponse {
        try await self.batchRegister(.init(users: users), region: region, logger: logger, on: eventLoop)
    }
}
