//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// KickUserFromRoom请求参数结构体
    public struct KickUserFromRoomRequest: TCRequest {
        /// 房间Id。
        public let roomId: UInt64

        /// 低代码平台的SdkAppId。
        public let sdkAppId: UInt64

        /// 需要踢出成员Id
        public let userId: String

        /// 踢出类型：
        /// 1：临时踢出，可以使用Duration参数指定污点时间，污点时间间隔内用户无法进入房间。
        /// 2：永久踢出
        public let kickType: UInt64

        /// 污点时间(单位秒)，KickType = 1时生效，默认为0
        public let duration: UInt64

        public init(roomId: UInt64, sdkAppId: UInt64, userId: String, kickType: UInt64, duration: UInt64) {
            self.roomId = roomId
            self.sdkAppId = sdkAppId
            self.userId = userId
            self.kickType = kickType
            self.duration = duration
        }

        enum CodingKeys: String, CodingKey {
            case roomId = "RoomId"
            case sdkAppId = "SdkAppId"
            case userId = "UserId"
            case kickType = "KickType"
            case duration = "Duration"
        }
    }

    /// KickUserFromRoom返回参数结构体
    public struct KickUserFromRoomResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 踢出房间用户
    ///
    /// 从房间里面踢出用户
    @inlinable @discardableResult
    public func kickUserFromRoom(_ input: KickUserFromRoomRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<KickUserFromRoomResponse> {
        self.client.execute(action: "KickUserFromRoom", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 踢出房间用户
    ///
    /// 从房间里面踢出用户
    @inlinable @discardableResult
    public func kickUserFromRoom(_ input: KickUserFromRoomRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> KickUserFromRoomResponse {
        try await self.client.execute(action: "KickUserFromRoom", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 踢出房间用户
    ///
    /// 从房间里面踢出用户
    @inlinable @discardableResult
    public func kickUserFromRoom(roomId: UInt64, sdkAppId: UInt64, userId: String, kickType: UInt64, duration: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<KickUserFromRoomResponse> {
        self.kickUserFromRoom(.init(roomId: roomId, sdkAppId: sdkAppId, userId: userId, kickType: kickType, duration: duration), region: region, logger: logger, on: eventLoop)
    }

    /// 踢出房间用户
    ///
    /// 从房间里面踢出用户
    @inlinable @discardableResult
    public func kickUserFromRoom(roomId: UInt64, sdkAppId: UInt64, userId: String, kickType: UInt64, duration: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> KickUserFromRoomResponse {
        try await self.kickUserFromRoom(.init(roomId: roomId, sdkAppId: sdkAppId, userId: userId, kickType: kickType, duration: duration), region: region, logger: logger, on: eventLoop)
    }
}
