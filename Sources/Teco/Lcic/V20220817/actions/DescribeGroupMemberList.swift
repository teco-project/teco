//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// DescribeGroupMemberList请求参数结构体
    public struct DescribeGroupMemberListRequest: TCRequest {
        /// 群组ID
        public let groupId: String

        /// 低代码平台应用ID
        public let sdkAppId: UInt64

        /// 分页值，默认1
        public let page: UInt64?

        /// 每页数据量，默认20，最大1000
        public let limit: UInt64?

        public init(groupId: String, sdkAppId: UInt64, page: UInt64? = nil, limit: UInt64? = nil) {
            self.groupId = groupId
            self.sdkAppId = sdkAppId
            self.page = page
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case sdkAppId = "SdkAppId"
            case page = "Page"
            case limit = "Limit"
        }
    }

    /// DescribeGroupMemberList返回参数结构体
    public struct DescribeGroupMemberListResponse: TCResponse {
        /// 符合查询条件总条数
        public let total: UInt64

        /// 查询成员列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memberIds: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case memberIds = "MemberIds"
            case requestId = "RequestId"
        }
    }

    /// 获取群组成员列表
    ///
    /// 此接口用于获取群组成员列表
    @inlinable
    public func describeGroupMemberList(_ input: DescribeGroupMemberListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGroupMemberListResponse> {
        self.client.execute(action: "DescribeGroupMemberList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取群组成员列表
    ///
    /// 此接口用于获取群组成员列表
    @inlinable
    public func describeGroupMemberList(_ input: DescribeGroupMemberListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGroupMemberListResponse {
        try await self.client.execute(action: "DescribeGroupMemberList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取群组成员列表
    ///
    /// 此接口用于获取群组成员列表
    @inlinable
    public func describeGroupMemberList(groupId: String, sdkAppId: UInt64, page: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGroupMemberListResponse> {
        self.describeGroupMemberList(.init(groupId: groupId, sdkAppId: sdkAppId, page: page, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取群组成员列表
    ///
    /// 此接口用于获取群组成员列表
    @inlinable
    public func describeGroupMemberList(groupId: String, sdkAppId: UInt64, page: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGroupMemberListResponse {
        try await self.describeGroupMemberList(.init(groupId: groupId, sdkAppId: sdkAppId, page: page, limit: limit), region: region, logger: logger, on: eventLoop)
    }
}
