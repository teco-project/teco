//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// BatchCreateGroupWithMembers请求参数结构体
    public struct BatchCreateGroupWithMembersRequest: TCRequestModel {
        /// 低代码平台应用ID
        public let sdkAppId: UInt64

        /// 批量创建群组基础信息，最大长度限制256
        public let groupBaseInfos: [GroupBaseInfo]

        /// 群组绑定的成员列表，一次性最多200个
        public let memberIds: [String]?

        public init(sdkAppId: UInt64, groupBaseInfos: [GroupBaseInfo], memberIds: [String]? = nil) {
            self.sdkAppId = sdkAppId
            self.groupBaseInfos = groupBaseInfos
            self.memberIds = memberIds
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case groupBaseInfos = "GroupBaseInfos"
            case memberIds = "MemberIds"
        }
    }

    /// BatchCreateGroupWithMembers返回参数结构体
    public struct BatchCreateGroupWithMembersResponse: TCResponseModel {
        /// 新创建群组ID列表，与输入创建参数顺序一致
        public let groupIds: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case groupIds = "GroupIds"
            case requestId = "RequestId"
        }
    }

    /// 批量创建群组
    ///
    /// 此接口用于批量创建群组
    @inlinable
    public func batchCreateGroupWithMembers(_ input: BatchCreateGroupWithMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchCreateGroupWithMembersResponse> {
        self.client.execute(action: "BatchCreateGroupWithMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量创建群组
    ///
    /// 此接口用于批量创建群组
    @inlinable
    public func batchCreateGroupWithMembers(_ input: BatchCreateGroupWithMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchCreateGroupWithMembersResponse {
        try await self.client.execute(action: "BatchCreateGroupWithMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量创建群组
    ///
    /// 此接口用于批量创建群组
    @inlinable
    public func batchCreateGroupWithMembers(sdkAppId: UInt64, groupBaseInfos: [GroupBaseInfo], memberIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchCreateGroupWithMembersResponse> {
        self.batchCreateGroupWithMembers(.init(sdkAppId: sdkAppId, groupBaseInfos: groupBaseInfos, memberIds: memberIds), region: region, logger: logger, on: eventLoop)
    }

    /// 批量创建群组
    ///
    /// 此接口用于批量创建群组
    @inlinable
    public func batchCreateGroupWithMembers(sdkAppId: UInt64, groupBaseInfos: [GroupBaseInfo], memberIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchCreateGroupWithMembersResponse {
        try await self.batchCreateGroupWithMembers(.init(sdkAppId: sdkAppId, groupBaseInfos: groupBaseInfos, memberIds: memberIds), region: region, logger: logger, on: eventLoop)
    }
}
