//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// ModifyUserProfile请求参数结构体
    public struct ModifyUserProfileRequest: TCRequestModel {
        /// 待修改用户ID
        public let userId: String

        /// 待修改的用户名
        public let nickname: String?

        /// 待修改头像url
        public let avatar: String?

        public init(userId: String, nickname: String? = nil, avatar: String? = nil) {
            self.userId = userId
            self.nickname = nickname
            self.avatar = avatar
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case nickname = "Nickname"
            case avatar = "Avatar"
        }
    }

    /// ModifyUserProfile返回参数结构体
    public struct ModifyUserProfileResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改用户配置
    ///
    /// 此接口用于修改用户配置，如头像，昵称/用户名等。
    @inlinable @discardableResult
    public func modifyUserProfile(_ input: ModifyUserProfileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyUserProfileResponse> {
        self.client.execute(action: "ModifyUserProfile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改用户配置
    ///
    /// 此接口用于修改用户配置，如头像，昵称/用户名等。
    @inlinable @discardableResult
    public func modifyUserProfile(_ input: ModifyUserProfileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyUserProfileResponse {
        try await self.client.execute(action: "ModifyUserProfile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改用户配置
    ///
    /// 此接口用于修改用户配置，如头像，昵称/用户名等。
    @inlinable @discardableResult
    public func modifyUserProfile(userId: String, nickname: String? = nil, avatar: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyUserProfileResponse> {
        self.modifyUserProfile(.init(userId: userId, nickname: nickname, avatar: avatar), region: region, logger: logger, on: eventLoop)
    }

    /// 修改用户配置
    ///
    /// 此接口用于修改用户配置，如头像，昵称/用户名等。
    @inlinable @discardableResult
    public func modifyUserProfile(userId: String, nickname: String? = nil, avatar: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyUserProfileResponse {
        try await self.modifyUserProfile(.init(userId: userId, nickname: nickname, avatar: avatar), region: region, logger: logger, on: eventLoop)
    }
}
