//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// StartRoom请求参数结构体
    public struct StartRoomRequest: TCRequest {
        /// 房间ID。
        public let roomId: UInt64

        public init(roomId: UInt64) {
            self.roomId = roomId
        }

        enum CodingKeys: String, CodingKey {
            case roomId = "RoomId"
        }
    }

    /// StartRoom返回参数结构体
    public struct StartRoomResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 开始房间
    ///
    /// 开始房间的直播。 说明：开始房间接口调用之前需要有用户进入课堂初始化课堂信息。
    @inlinable @discardableResult
    public func startRoom(_ input: StartRoomRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartRoomResponse> {
        self.client.execute(action: "StartRoom", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开始房间
    ///
    /// 开始房间的直播。 说明：开始房间接口调用之前需要有用户进入课堂初始化课堂信息。
    @inlinable @discardableResult
    public func startRoom(_ input: StartRoomRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartRoomResponse {
        try await self.client.execute(action: "StartRoom", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开始房间
    ///
    /// 开始房间的直播。 说明：开始房间接口调用之前需要有用户进入课堂初始化课堂信息。
    @inlinable @discardableResult
    public func startRoom(roomId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartRoomResponse> {
        self.startRoom(.init(roomId: roomId), region: region, logger: logger, on: eventLoop)
    }

    /// 开始房间
    ///
    /// 开始房间的直播。 说明：开始房间接口调用之前需要有用户进入课堂初始化课堂信息。
    @inlinable @discardableResult
    public func startRoom(roomId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartRoomResponse {
        try await self.startRoom(.init(roomId: roomId), region: region, logger: logger, on: eventLoop)
    }
}
