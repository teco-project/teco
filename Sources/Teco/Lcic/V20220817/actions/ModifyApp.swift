//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// ModifyApp请求参数结构体
    public struct ModifyAppRequest: TCRequest {
        /// 低代码互动课堂的SdkAppId。
        public let sdkAppId: UInt64

        /// 回调地址。
        public let callback: String?

        /// 回调key。
        public let callbackKey: String?

        public init(sdkAppId: UInt64, callback: String? = nil, callbackKey: String? = nil) {
            self.sdkAppId = sdkAppId
            self.callback = callback
            self.callbackKey = callbackKey
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case callback = "Callback"
            case callbackKey = "CallbackKey"
        }
    }

    /// ModifyApp返回参数结构体
    public struct ModifyAppResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改应用
    @inlinable @discardableResult
    public func modifyApp(_ input: ModifyAppRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAppResponse> {
        self.client.execute(action: "ModifyApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改应用
    @inlinable @discardableResult
    public func modifyApp(_ input: ModifyAppRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAppResponse {
        try await self.client.execute(action: "ModifyApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改应用
    @inlinable @discardableResult
    public func modifyApp(sdkAppId: UInt64, callback: String? = nil, callbackKey: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAppResponse> {
        self.modifyApp(.init(sdkAppId: sdkAppId, callback: callback, callbackKey: callbackKey), region: region, logger: logger, on: eventLoop)
    }

    /// 修改应用
    @inlinable @discardableResult
    public func modifyApp(sdkAppId: UInt64, callback: String? = nil, callbackKey: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAppResponse {
        try await self.modifyApp(.init(sdkAppId: sdkAppId, callback: callback, callbackKey: callbackKey), region: region, logger: logger, on: eventLoop)
    }
}
