//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lcic {
    /// DeleteGroup请求参数结构体
    public struct DeleteGroupRequest: TCRequest {
        /// 待删除群组ID列表
        public let groupIds: [String]

        /// 低代码平台应用ID
        public let sdkAppId: UInt64

        public init(groupIds: [String], sdkAppId: UInt64) {
            self.groupIds = groupIds
            self.sdkAppId = sdkAppId
        }

        enum CodingKeys: String, CodingKey {
            case groupIds = "GroupIds"
            case sdkAppId = "SdkAppId"
        }
    }

    /// DeleteGroup返回参数结构体
    public struct DeleteGroupResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除群组
    ///
    /// 此接口用于删除指定群组，支持批量操作。
    @inlinable @discardableResult
    public func deleteGroup(_ input: DeleteGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteGroupResponse> {
        self.client.execute(action: "DeleteGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除群组
    ///
    /// 此接口用于删除指定群组，支持批量操作。
    @inlinable @discardableResult
    public func deleteGroup(_ input: DeleteGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteGroupResponse {
        try await self.client.execute(action: "DeleteGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除群组
    ///
    /// 此接口用于删除指定群组，支持批量操作。
    @inlinable @discardableResult
    public func deleteGroup(groupIds: [String], sdkAppId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteGroupResponse> {
        self.deleteGroup(.init(groupIds: groupIds, sdkAppId: sdkAppId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除群组
    ///
    /// 此接口用于删除指定群组，支持批量操作。
    @inlinable @discardableResult
    public func deleteGroup(groupIds: [String], sdkAppId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteGroupResponse {
        try await self.deleteGroup(.init(groupIds: groupIds, sdkAppId: sdkAppId), region: region, logger: logger, on: eventLoop)
    }
}
