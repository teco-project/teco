//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Lcic {
    /// ModifyGroup请求参数结构体
    public struct ModifyGroupRequest: TCRequestModel {
        /// 需要修改的群组ID
        public let groupId: String

        /// 低代码平台应用ID
        public let sdkAppId: UInt64

        /// 默认绑定主讲老师ID
        public let teacherId: String?

        /// 待修改的群组名称
        public let groupName: String?

        public init(groupId: String, sdkAppId: UInt64, teacherId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.sdkAppId = sdkAppId
            self.teacherId = teacherId
            self.groupName = groupName
        }

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case sdkAppId = "SdkAppId"
            case teacherId = "TeacherId"
            case groupName = "GroupName"
        }
    }

    /// ModifyGroup返回参数结构体
    public struct ModifyGroupResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改群组
    ///
    /// 此接口修改群组信息
    @inlinable @discardableResult
    public func modifyGroup(_ input: ModifyGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyGroupResponse> {
        self.client.execute(action: "ModifyGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改群组
    ///
    /// 此接口修改群组信息
    @inlinable @discardableResult
    public func modifyGroup(_ input: ModifyGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyGroupResponse {
        try await self.client.execute(action: "ModifyGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改群组
    ///
    /// 此接口修改群组信息
    @inlinable @discardableResult
    public func modifyGroup(groupId: String, sdkAppId: UInt64, teacherId: String? = nil, groupName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyGroupResponse> {
        self.modifyGroup(.init(groupId: groupId, sdkAppId: sdkAppId, teacherId: teacherId, groupName: groupName), region: region, logger: logger, on: eventLoop)
    }

    /// 修改群组
    ///
    /// 此接口修改群组信息
    @inlinable @discardableResult
    public func modifyGroup(groupId: String, sdkAppId: UInt64, teacherId: String? = nil, groupName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyGroupResponse {
        try await self.modifyGroup(.init(groupId: groupId, sdkAppId: sdkAppId, teacherId: teacherId, groupName: groupName), region: region, logger: logger, on: eventLoop)
    }
}
