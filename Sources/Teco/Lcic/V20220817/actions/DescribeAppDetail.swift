//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Lcic {
    /// DescribeAppDetail请求参数结构体
    public struct DescribeAppDetailRequest: TCRequestModel {
        /// 应用ID。低代码互动课堂的SdkAppId。
        public let applicationId: String

        /// 开发商ID
        public let developerId: String

        public init(applicationId: String, developerId: String) {
            self.applicationId = applicationId
            self.developerId = developerId
        }

        enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case developerId = "DeveloperId"
        }
    }

    /// DescribeAppDetail返回参数结构体
    public struct DescribeAppDetailResponse: TCResponseModel {
        /// SDK 对应的AppId
        public let sdkAppId: String

        /// 应用配置
        public let appConfig: AppConfig

        /// 场景配置
        public let sceneConfig: [SceneItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case appConfig = "AppConfig"
            case sceneConfig = "SceneConfig"
            case requestId = "RequestId"
        }
    }

    /// 获取应用详情
    @inlinable
    public func describeAppDetail(_ input: DescribeAppDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAppDetailResponse> {
        self.client.execute(action: "DescribeAppDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取应用详情
    @inlinable
    public func describeAppDetail(_ input: DescribeAppDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAppDetailResponse {
        try await self.client.execute(action: "DescribeAppDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取应用详情
    @inlinable
    public func describeAppDetail(applicationId: String, developerId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAppDetailResponse> {
        self.describeAppDetail(DescribeAppDetailRequest(applicationId: applicationId, developerId: developerId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取应用详情
    @inlinable
    public func describeAppDetail(applicationId: String, developerId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAppDetailResponse {
        try await self.describeAppDetail(DescribeAppDetailRequest(applicationId: applicationId, developerId: developerId), region: region, logger: logger, on: eventLoop)
    }
}
