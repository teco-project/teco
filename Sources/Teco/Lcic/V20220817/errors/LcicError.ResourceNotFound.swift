//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCLcicError {
    public struct ResourceNotFound: TCLcicErrorType {
        enum Code: String {
            case document = "ResourceNotFound.Document"
            case room = "ResourceNotFound.Room"
            case user = "ResourceNotFound.User"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var document: ResourceNotFound {
            ResourceNotFound(.document)
        }

        public static var room: ResourceNotFound {
            ResourceNotFound(.room)
        }

        public static var user: ResourceNotFound {
            ResourceNotFound(.user)
        }

        public func asLcicError() -> TCLcicError {
            let code: TCLcicError.Code
            switch self.error {
            case .document:
                code = .resourceNotFound_Document
            case .room:
                code = .resourceNotFound_Room
            case .user:
                code = .resourceNotFound_User
            }
            return TCLcicError(code, context: self.context)
        }
    }
}
