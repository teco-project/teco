//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotvideo {
    /// ModifyDeviceAction请求参数结构体
    public struct ModifyDeviceActionRequest: TCRequestModel {
        /// 设备TID
        public let tid: String

        /// 如果设备处于休眠状态，是否唤醒设备
        public let wakeup: Bool

        /// 物模型的分支路径
        public let branch: String

        /// 写入的物模型数据，如果是json需要转义成字符串
        public let value: String

        /// Value字段的类型是否为数值（float、int）
        public let isNum: Bool?

        public init(tid: String, wakeup: Bool, branch: String, value: String, isNum: Bool? = nil) {
            self.tid = tid
            self.wakeup = wakeup
            self.branch = branch
            self.value = value
            self.isNum = isNum
        }

        enum CodingKeys: String, CodingKey {
            case tid = "Tid"
            case wakeup = "Wakeup"
            case branch = "Branch"
            case value = "Value"
            case isNum = "IsNum"
        }
    }

    /// ModifyDeviceAction返回参数结构体
    public struct ModifyDeviceActionResponse: TCResponseModel {
        /// 设备端的响应结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: String?

        /// 任务ID
        /// 若设备端未能及时响应时，会返回此字段，用户可以通过DescribeModelDataRet获取设备的最终响应结果。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 修改设备物模型行为
    ///
    /// 本接口（ModifyDeviceAction）用于修改设备物模型的行为（Action）。
    ///
    /// 可对ctlVal数据属性进行写入,如:Action.takePhoto.ctlVal,设备在线且成功发送到设备才返回,物模型写入数据时,不需要传入时标信息,平台以当前时标作为数据的时标更新物模型中的时标信息。
    /// 注意:
    ///   1.若设备当前不在线,会直接返回错误
    ///   2.若设备网络出现异常时,消息发送可能超时,超时等待最长时间为3秒
    ///   3.value的内容必须与实际物模型的定义一致
    @inlinable
    public func modifyDeviceAction(_ input: ModifyDeviceActionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDeviceActionResponse> {
        self.client.execute(action: "ModifyDeviceAction", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改设备物模型行为
    ///
    /// 本接口（ModifyDeviceAction）用于修改设备物模型的行为（Action）。
    ///
    /// 可对ctlVal数据属性进行写入,如:Action.takePhoto.ctlVal,设备在线且成功发送到设备才返回,物模型写入数据时,不需要传入时标信息,平台以当前时标作为数据的时标更新物模型中的时标信息。
    /// 注意:
    ///   1.若设备当前不在线,会直接返回错误
    ///   2.若设备网络出现异常时,消息发送可能超时,超时等待最长时间为3秒
    ///   3.value的内容必须与实际物模型的定义一致
    @inlinable
    public func modifyDeviceAction(_ input: ModifyDeviceActionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDeviceActionResponse {
        try await self.client.execute(action: "ModifyDeviceAction", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改设备物模型行为
    ///
    /// 本接口（ModifyDeviceAction）用于修改设备物模型的行为（Action）。
    ///
    /// 可对ctlVal数据属性进行写入,如:Action.takePhoto.ctlVal,设备在线且成功发送到设备才返回,物模型写入数据时,不需要传入时标信息,平台以当前时标作为数据的时标更新物模型中的时标信息。
    /// 注意:
    ///   1.若设备当前不在线,会直接返回错误
    ///   2.若设备网络出现异常时,消息发送可能超时,超时等待最长时间为3秒
    ///   3.value的内容必须与实际物模型的定义一致
    @inlinable
    public func modifyDeviceAction(tid: String, wakeup: Bool, branch: String, value: String, isNum: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDeviceActionResponse> {
        self.modifyDeviceAction(.init(tid: tid, wakeup: wakeup, branch: branch, value: value, isNum: isNum), region: region, logger: logger, on: eventLoop)
    }

    /// 修改设备物模型行为
    ///
    /// 本接口（ModifyDeviceAction）用于修改设备物模型的行为（Action）。
    ///
    /// 可对ctlVal数据属性进行写入,如:Action.takePhoto.ctlVal,设备在线且成功发送到设备才返回,物模型写入数据时,不需要传入时标信息,平台以当前时标作为数据的时标更新物模型中的时标信息。
    /// 注意:
    ///   1.若设备当前不在线,会直接返回错误
    ///   2.若设备网络出现异常时,消息发送可能超时,超时等待最长时间为3秒
    ///   3.value的内容必须与实际物模型的定义一致
    @inlinable
    public func modifyDeviceAction(tid: String, wakeup: Bool, branch: String, value: String, isNum: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDeviceActionResponse {
        try await self.modifyDeviceAction(.init(tid: tid, wakeup: wakeup, branch: branch, value: value, isNum: isNum), region: region, logger: logger, on: eventLoop)
    }
}
