//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotvideo {
    /// 删除固件版本信息
    ///
    /// 本接口（DeleteOtaVersion）用于删除固件版本信息。
    @inlinable
    public func deleteOtaVersion(_ input: DeleteOtaVersionRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteOtaVersionResponse > {
        self.client.execute(action: "DeleteOtaVersion", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除固件版本信息
    ///
    /// 本接口（DeleteOtaVersion）用于删除固件版本信息。
    @inlinable
    public func deleteOtaVersion(_ input: DeleteOtaVersionRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteOtaVersionResponse {
        try await self.client.execute(action: "DeleteOtaVersion", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DeleteOtaVersion请求参数结构体
    public struct DeleteOtaVersionRequest: TCRequestModel {
        /// 产品ID
        public let productId: String
        
        /// 固件版本号，格式为x.y.z， x，y 范围0-63，z范围1~524288
        public let otaVersion: String
        
        /// 操作人
        public let `operator`: String?
        
        public init (productId: String, otaVersion: String, `operator`: String?) {
            self.productId = productId
            self.otaVersion = otaVersion
            self.`operator` = `operator`
        }
        
        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case otaVersion = "OtaVersion"
            case `operator` = "Operator"
        }
    }
    
    /// DeleteOtaVersion返回参数结构体
    public struct DeleteOtaVersionResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}