//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Iotvideo {
    /// ModifyDevice请求参数结构体
    public struct ModifyDeviceRequest: TCRequestModel {
        /// 设备ID
        public let tid: String

        /// 用户ID
        public let accessId: String

        /// 设备昵称，最多不超过64个字符
        public let nick: String

        public init(tid: String, accessId: String, nick: String) {
            self.tid = tid
            self.accessId = accessId
            self.nick = nick
        }

        enum CodingKeys: String, CodingKey {
            case tid = "Tid"
            case accessId = "AccessId"
            case nick = "Nick"
        }
    }

    /// ModifyDevice返回参数结构体
    public struct ModifyDeviceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(_ input: ModifyDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDeviceResponse> {
        self.client.execute(action: "ModifyDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(_ input: ModifyDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDeviceResponse {
        try await self.client.execute(action: "ModifyDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(tid: String, accessId: String, nick: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDeviceResponse> {
        self.modifyDevice(.init(tid: tid, accessId: accessId, nick: nick), region: region, logger: logger, on: eventLoop)
    }

    /// 修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(tid: String, accessId: String, nick: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDeviceResponse {
        try await self.modifyDevice(.init(tid: tid, accessId: accessId, nick: nick), region: region, logger: logger, on: eventLoop)
    }
}
