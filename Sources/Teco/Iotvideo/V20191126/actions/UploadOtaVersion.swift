//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotvideo {
    /// 接收上传到控制台的固件版本信息
    ///
    /// 本接口（UploadOtaVersion）接收上传到控制台的固件版本信息。
    @inlinable
    public func uploadOtaVersion(_ input: UploadOtaVersionRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UploadOtaVersionResponse > {
        self.client.execute(action: "UploadOtaVersion", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 接收上传到控制台的固件版本信息
    ///
    /// 本接口（UploadOtaVersion）接收上传到控制台的固件版本信息。
    @inlinable
    public func uploadOtaVersion(_ input: UploadOtaVersionRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UploadOtaVersionResponse {
        try await self.client.execute(action: "UploadOtaVersion", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// UploadOtaVersion请求参数结构体
    public struct UploadOtaVersionRequest: TCRequestModel {
        /// 产品ID
        public let productId: String
        
        /// 固件版本号，格式为x.y.z， x，y 范围0-63，z范围1~524288
        public let otaVersion: String
        
        /// 固件版本URL
        public let versionUrl: String
        
        /// 文件大小，单位：byte
        public let fileSize: UInt64?
        
        /// 文件md5校验码（32字符）
        public let md5: String?
        
        /// 操作人
        public let `operator`: String?
        
        /// 备注信息
        public let remark: String?
        
        /// 版本发布的描述信息，需要国际化，可以为空
        public let contents: Contents
        
        public init (productId: String, otaVersion: String, versionUrl: String, fileSize: UInt64?, md5: String?, `operator`: String?, remark: String?, contents: Contents) {
            self.productId = productId
            self.otaVersion = otaVersion
            self.versionUrl = versionUrl
            self.fileSize = fileSize
            self.md5 = md5
            self.`operator` = `operator`
            self.remark = remark
            self.contents = contents
        }
        
        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case otaVersion = "OtaVersion"
            case versionUrl = "VersionUrl"
            case fileSize = "FileSize"
            case md5 = "Md5"
            case `operator` = "Operator"
            case remark = "Remark"
            case contents = "Contents"
        }
    }
    
    /// UploadOtaVersion返回参数结构体
    public struct UploadOtaVersionResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}
