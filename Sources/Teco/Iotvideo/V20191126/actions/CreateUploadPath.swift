//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Iotvideo {
    /// CreateUploadPath请求参数结构体
    public struct CreateUploadPathRequest: TCRequestModel {
        /// 产品ID
        public let productId: String

        /// 固件文件名
        public let fileName: String

        public init(productId: String, fileName: String) {
            self.productId = productId
            self.fileName = fileName
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case fileName = "FileName"
        }
    }

    /// CreateUploadPath返回参数结构体
    public struct CreateUploadPathResponse: TCResponseModel {
        /// 固件上传地址URL，用户可将本地的固件文件通过该URL以PUT的请求方式上传。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取固件上传路径
    ///
    /// 本接口（CreateUploadPath）用于获取固件上传路径。
    @inlinable
    public func createUploadPath(_ input: CreateUploadPathRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUploadPathResponse> {
        self.client.execute(action: "CreateUploadPath", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取固件上传路径
    ///
    /// 本接口（CreateUploadPath）用于获取固件上传路径。
    @inlinable
    public func createUploadPath(_ input: CreateUploadPathRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUploadPathResponse {
        try await self.client.execute(action: "CreateUploadPath", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取固件上传路径
    ///
    /// 本接口（CreateUploadPath）用于获取固件上传路径。
    @inlinable
    public func createUploadPath(productId: String, fileName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUploadPathResponse> {
        self.createUploadPath(.init(productId: productId, fileName: fileName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取固件上传路径
    ///
    /// 本接口（CreateUploadPath）用于获取固件上传路径。
    @inlinable
    public func createUploadPath(productId: String, fileName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUploadPathResponse {
        try await self.createUploadPath(.init(productId: productId, fileName: fileName), region: region, logger: logger, on: eventLoop)
    }
}
