//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotvideo {
    /// DescribeDevices请求参数结构体
    public struct DescribeDevicesRequest: TCPaginatedRequest {
        /// 产品ID
        public let productId: String

        /// 是否返回全量数据
        /// 当该值为false时，返回值中的设备物模型、固件版本、在线状态、最后在线时间字段等字段，都将返回数据类型的零值。
        public let returnModel: Bool

        /// 分页数量,0<取值范围<=100
        public let limit: UInt64

        /// 分页偏移，取值＞0
        public let offset: UInt64

        /// 指定固件版本号，为空查询此产品下所有设备
        public let otaVersion: String?

        /// 设备名称，支持左前缀模糊匹配
        public let deviceName: String?

        public init(productId: String, returnModel: Bool, limit: UInt64, offset: UInt64, otaVersion: String? = nil, deviceName: String? = nil) {
            self.productId = productId
            self.returnModel = returnModel
            self.limit = limit
            self.offset = offset
            self.otaVersion = otaVersion
            self.deviceName = deviceName
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case returnModel = "ReturnModel"
            case limit = "Limit"
            case offset = "Offset"
            case otaVersion = "OtaVersion"
            case deviceName = "DeviceName"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDevicesResponse) -> DescribeDevicesRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(productId: self.productId, returnModel: self.returnModel, limit: self.limit, offset: self.offset + .init(response.getItems().count), otaVersion: self.otaVersion, deviceName: self.deviceName)
        }
    }

    /// DescribeDevices返回参数结构体
    public struct DescribeDevicesResponse: TCPaginatedResponse {
        /// 设备信息 列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [DevicesData]?

        /// 设备总数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DevicesData`` list from the paginated response.
        public func getItems() -> [DevicesData] {
            self.data ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取设备信息列表
    ///
    /// 本接口（DescribeDevices）用于获取设备信息列表。
    @inlinable
    public func describeDevices(_ input: DescribeDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDevicesResponse> {
        self.client.execute(action: "DescribeDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取设备信息列表
    ///
    /// 本接口（DescribeDevices）用于获取设备信息列表。
    @inlinable
    public func describeDevices(_ input: DescribeDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDevicesResponse {
        try await self.client.execute(action: "DescribeDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取设备信息列表
    ///
    /// 本接口（DescribeDevices）用于获取设备信息列表。
    @inlinable
    public func describeDevices(productId: String, returnModel: Bool, limit: UInt64, offset: UInt64, otaVersion: String? = nil, deviceName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDevicesResponse> {
        self.describeDevices(.init(productId: productId, returnModel: returnModel, limit: limit, offset: offset, otaVersion: otaVersion, deviceName: deviceName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取设备信息列表
    ///
    /// 本接口（DescribeDevices）用于获取设备信息列表。
    @inlinable
    public func describeDevices(productId: String, returnModel: Bool, limit: UInt64, offset: UInt64, otaVersion: String? = nil, deviceName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDevicesResponse {
        try await self.describeDevices(.init(productId: productId, returnModel: returnModel, limit: limit, offset: offset, otaVersion: otaVersion, deviceName: deviceName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取设备信息列表
    ///
    /// 本接口（DescribeDevices）用于获取设备信息列表。
    @inlinable
    public func describeDevicesPaginated(_ input: DescribeDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [DevicesData])> {
        self.client.paginate(input: input, region: region, command: self.describeDevices, logger: logger, on: eventLoop)
    }

    /// 获取设备信息列表
    ///
    /// 本接口（DescribeDevices）用于获取设备信息列表。
    @inlinable @discardableResult
    public func describeDevicesPaginated(_ input: DescribeDevicesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDevicesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDevices, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取设备信息列表
    ///
    /// 本接口（DescribeDevices）用于获取设备信息列表。
    ///
    /// - Returns: `AsyncSequence`s of ``DevicesData`` and ``DescribeDevicesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDevicesPaginator(_ input: DescribeDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDevicesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDevices, logger: logger, on: eventLoop)
    }
}
