//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCIotvideoError {
    public struct AuthFailure: TCIotvideoErrorType {
        enum Code: String {
            case signatureFailure = "AuthFailure.SignatureFailure"
            case tokenFailure = "AuthFailure.TokenFailure"
            case other = "AuthFailure"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 签名校验失败。
        public static var signatureFailure: AuthFailure {
            AuthFailure(.signatureFailure)
        }

        /// 获取token为空。
        public static var tokenFailure: AuthFailure {
            AuthFailure(.tokenFailure)
        }

        /// CAM签名/鉴权错误。
        public static var other: AuthFailure {
            AuthFailure(.other)
        }

        public func asIotvideoError() -> TCIotvideoError {
            let code: TCIotvideoError.Code
            switch self.error {
            case .signatureFailure:
                code = .authFailure_SignatureFailure
            case .tokenFailure:
                code = .authFailure_TokenFailure
            case .other:
                code = .authFailure
            }
            return TCIotvideoError(code, context: self.context)
        }
    }
}
