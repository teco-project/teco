//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotvideo {
    /// DescribeCloudStorageTime请求参数结构体
    public struct DescribeCloudStorageTimeRequest: TCRequestModel {
        /// 产品ID
        public let productId: String
        
        /// 设备名称
        public let deviceName: String
        
        /// 云存日期，例如"2020-01-05"
        public let date: String
        
        /// 开始时间，unix时间
        public let startTime: UInt64?
        
        /// 结束时间，unix时间
        public let endTime: UInt64?
        
        /// 用户ID
        public let userId: String?
        
        public init (productId: String, deviceName: String, date: String, startTime: UInt64? = nil, endTime: UInt64? = nil, userId: String? = nil) {
            self.productId = productId
            self.deviceName = deviceName
            self.date = date
            self.startTime = startTime
            self.endTime = endTime
            self.userId = userId
        }
        
        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case deviceName = "DeviceName"
            case date = "Date"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case userId = "UserId"
        }
    }
    
    /// DescribeCloudStorageTime返回参数结构体
    public struct DescribeCloudStorageTimeResponse: TCResponseModel {
        /// 接口返回数据
        public let data: CloudStorageTimeData
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }
    
    /// 获取某一天云存时间轴
    @inlinable
    public func describeCloudStorageTime(_ input: DescribeCloudStorageTimeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeCloudStorageTimeResponse > {
        self.client.execute(action: "DescribeCloudStorageTime", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取某一天云存时间轴
    @inlinable
    public func describeCloudStorageTime(_ input: DescribeCloudStorageTimeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudStorageTimeResponse {
        try await self.client.execute(action: "DescribeCloudStorageTime", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取某一天云存时间轴
    @inlinable
    public func describeCloudStorageTime(productId: String, deviceName: String, date: String, startTime: UInt64? = nil, endTime: UInt64? = nil, userId: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeCloudStorageTimeResponse > {
        self.describeCloudStorageTime(DescribeCloudStorageTimeRequest(productId: productId, deviceName: deviceName, date: date, startTime: startTime, endTime: endTime, userId: userId), logger: logger, on: eventLoop)
    }
    
    /// 获取某一天云存时间轴
    @inlinable
    public func describeCloudStorageTime(productId: String, deviceName: String, date: String, startTime: UInt64? = nil, endTime: UInt64? = nil, userId: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudStorageTimeResponse {
        try await self.describeCloudStorageTime(DescribeCloudStorageTimeRequest(productId: productId, deviceName: deviceName, date: date, startTime: startTime, endTime: endTime, userId: userId), logger: logger, on: eventLoop)
    }
}
