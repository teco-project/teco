//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotvideo {
    /// DescribeCloudStorageOrder请求参数结构体
    public struct DescribeCloudStorageOrderRequest: TCRequest {
        /// 订单id
        public let orderId: String

        public init(orderId: String) {
            self.orderId = orderId
        }

        enum CodingKeys: String, CodingKey {
            case orderId = "OrderId"
        }
    }

    /// DescribeCloudStorageOrder返回参数结构体
    public struct DescribeCloudStorageOrderResponse: TCResponse {
        /// 云存套餐开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: UInt64?

        /// 云存套餐过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: UInt64?

        /// 套餐id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageId: String?

        /// 套餐状态
        /// 0：等待生效
        /// 1: 已过期
        /// 2:生效
        public let status: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case expireTime = "ExpireTime"
            case packageId = "PackageId"
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 查询云存服务详情
    @inlinable
    public func describeCloudStorageOrder(_ input: DescribeCloudStorageOrderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudStorageOrderResponse> {
        self.client.execute(action: "DescribeCloudStorageOrder", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云存服务详情
    @inlinable
    public func describeCloudStorageOrder(_ input: DescribeCloudStorageOrderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudStorageOrderResponse {
        try await self.client.execute(action: "DescribeCloudStorageOrder", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云存服务详情
    @inlinable
    public func describeCloudStorageOrder(orderId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudStorageOrderResponse> {
        self.describeCloudStorageOrder(.init(orderId: orderId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云存服务详情
    @inlinable
    public func describeCloudStorageOrder(orderId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudStorageOrderResponse {
        try await self.describeCloudStorageOrder(.init(orderId: orderId), region: region, logger: logger, on: eventLoop)
    }
}
