//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iotvideo {
    /// DeleteCloudStorageEvent请求参数结构体
    public struct DeleteCloudStorageEventRequest: TCRequest {
        /// 产品ID
        public let productId: String

        /// 设备名称
        public let deviceName: String

        /// 事件id
        public let eventId: String

        /// 开始时间，unix时间
        public let startTime: UInt64

        /// 结束时间，unix时间
        public let endTime: UInt64

        /// 用户ID
        public let userId: String?

        public init(productId: String, deviceName: String, eventId: String, startTime: UInt64, endTime: UInt64, userId: String? = nil) {
            self.productId = productId
            self.deviceName = deviceName
            self.eventId = eventId
            self.startTime = startTime
            self.endTime = endTime
            self.userId = userId
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case deviceName = "DeviceName"
            case eventId = "EventId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case userId = "UserId"
        }
    }

    /// DeleteCloudStorageEvent返回参数结构体
    public struct DeleteCloudStorageEventResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除云存事件
    @inlinable @discardableResult
    public func deleteCloudStorageEvent(_ input: DeleteCloudStorageEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCloudStorageEventResponse> {
        self.client.execute(action: "DeleteCloudStorageEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除云存事件
    @inlinable @discardableResult
    public func deleteCloudStorageEvent(_ input: DeleteCloudStorageEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCloudStorageEventResponse {
        try await self.client.execute(action: "DeleteCloudStorageEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除云存事件
    @inlinable @discardableResult
    public func deleteCloudStorageEvent(productId: String, deviceName: String, eventId: String, startTime: UInt64, endTime: UInt64, userId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCloudStorageEventResponse> {
        self.deleteCloudStorageEvent(.init(productId: productId, deviceName: deviceName, eventId: eventId, startTime: startTime, endTime: endTime, userId: userId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除云存事件
    @inlinable @discardableResult
    public func deleteCloudStorageEvent(productId: String, deviceName: String, eventId: String, startTime: UInt64, endTime: UInt64, userId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCloudStorageEventResponse {
        try await self.deleteCloudStorageEvent(.init(productId: productId, deviceName: deviceName, eventId: eventId, startTime: startTime, endTime: endTime, userId: userId), region: region, logger: logger, on: eventLoop)
    }
}
