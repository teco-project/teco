//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Iotvideo {
    /// SetForwardAuth请求参数结构体
    public struct SetForwardAuthRequest: TCRequestModel {
        /// 控制台Skey
        public let skey: String

        /// 消息队列类型  0.CMQ 1.CKafka
        public let queueType: UInt64

        public init(skey: String, queueType: UInt64) {
            self.skey = skey
            self.queueType = queueType
        }

        enum CodingKeys: String, CodingKey {
            case skey = "Skey"
            case queueType = "QueueType"
        }
    }

    /// SetForwardAuth返回参数结构体
    public struct SetForwardAuthResponse: TCResponseModel {
        /// 腾讯云账号
        public let endpoint: String

        /// 结果
        public let result: UInt64

        /// 角色名
        public let roleName: String

        /// 角色ID
        public let roleID: UInt64

        /// 消息队列类型  0.CMQ 1.CKafka
        public let queueType: UInt64

        /// 错误消息
        public let errMsg: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
            case result = "Result"
            case roleName = "RoleName"
            case roleID = "RoleID"
            case queueType = "QueueType"
            case errMsg = "ErrMsg"
            case requestId = "RequestId"
        }
    }

    /// 设置转发权限
    @inlinable
    public func setForwardAuth(_ input: SetForwardAuthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SetForwardAuthResponse> {
        self.client.execute(action: "SetForwardAuth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置转发权限
    @inlinable
    public func setForwardAuth(_ input: SetForwardAuthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetForwardAuthResponse {
        try await self.client.execute(action: "SetForwardAuth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置转发权限
    @inlinable
    public func setForwardAuth(skey: String, queueType: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SetForwardAuthResponse> {
        self.setForwardAuth(.init(skey: skey, queueType: queueType), region: region, logger: logger, on: eventLoop)
    }

    /// 设置转发权限
    @inlinable
    public func setForwardAuth(skey: String, queueType: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetForwardAuthResponse {
        try await self.setForwardAuth(.init(skey: skey, queueType: queueType), region: region, logger: logger, on: eventLoop)
    }
}
