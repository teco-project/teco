//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotvideo {
    /// CallDeviceActionSync请求参数结构体
    public struct CallDeviceActionSyncRequest: TCRequestModel {
        /// 产品Id
        public let productId: String

        /// 设备名称
        public let deviceName: String

        /// 产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
        public let actionId: String

        /// 输入参数
        public let inputParams: String?

        public init(productId: String, deviceName: String, actionId: String, inputParams: String? = nil) {
            self.productId = productId
            self.deviceName = deviceName
            self.actionId = actionId
            self.inputParams = inputParams
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case deviceName = "DeviceName"
            case actionId = "ActionId"
            case inputParams = "InputParams"
        }
    }

    /// CallDeviceActionSync返回参数结构体
    public struct CallDeviceActionSyncResponse: TCResponseModel {
        /// 调用Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientToken: String?

        /// 输出参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let outputParams: String?

        /// 返回状态，当设备不在线等部分情况，会通过该 Status 返回。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case outputParams = "OutputParams"
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 同步调用设备行为
    @inlinable
    public func callDeviceActionSync(_ input: CallDeviceActionSyncRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CallDeviceActionSyncResponse> {
        self.client.execute(action: "CallDeviceActionSync", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 同步调用设备行为
    @inlinable
    public func callDeviceActionSync(_ input: CallDeviceActionSyncRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CallDeviceActionSyncResponse {
        try await self.client.execute(action: "CallDeviceActionSync", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 同步调用设备行为
    @inlinable
    public func callDeviceActionSync(productId: String, deviceName: String, actionId: String, inputParams: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CallDeviceActionSyncResponse> {
        let input = CallDeviceActionSyncRequest(productId: productId, deviceName: deviceName, actionId: actionId, inputParams: inputParams)
        return self.client.execute(action: "CallDeviceActionSync", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 同步调用设备行为
    @inlinable
    public func callDeviceActionSync(productId: String, deviceName: String, actionId: String, inputParams: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CallDeviceActionSyncResponse {
        let input = CallDeviceActionSyncRequest(productId: productId, deviceName: deviceName, actionId: actionId, inputParams: inputParams)
        return try await self.client.execute(action: "CallDeviceActionSync", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
