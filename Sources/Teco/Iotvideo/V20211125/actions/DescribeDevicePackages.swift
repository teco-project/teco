//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Iotvideo {
    /// DescribeDevicePackages请求参数结构体
    public struct DescribeDevicePackagesRequest: TCPaginatedRequest {
        /// 产品ID
        public let productId: String

        /// 设备名称
        public let deviceName: String

        /// 分页拉取数量
        public let limit: UInt64

        /// 分页拉取偏移
        public let offset: UInt64

        public init(productId: String, deviceName: String, limit: UInt64, offset: UInt64) {
            self.productId = productId
            self.deviceName = deviceName
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case deviceName = "DeviceName"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDevicePackagesResponse) -> DescribeDevicePackagesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeDevicePackagesRequest(productId: self.productId, deviceName: self.deviceName, limit: self.limit, offset: self.offset + .init(response.getItems().count))
        }
    }

    /// DescribeDevicePackages返回参数结构体
    public struct DescribeDevicePackagesResponse: TCPaginatedResponse {
        /// 有效云存套餐数量
        public let totalCount: UInt64

        /// 有效云存套餐列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packages: [PackageInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case packages = "Packages"
            case requestId = "RequestId"
        }

        /// Extract the returned ``PackageInfo`` list from the paginated response.
        public func getItems() -> [PackageInfo] {
            self.packages ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 拉取有效云存套餐列表
    ///
    /// 根据设备信息拉取有效套餐列表
    @inlinable
    public func describeDevicePackages(_ input: DescribeDevicePackagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDevicePackagesResponse> {
        self.client.execute(action: "DescribeDevicePackages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 拉取有效云存套餐列表
    ///
    /// 根据设备信息拉取有效套餐列表
    @inlinable
    public func describeDevicePackages(_ input: DescribeDevicePackagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDevicePackagesResponse {
        try await self.client.execute(action: "DescribeDevicePackages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 拉取有效云存套餐列表
    ///
    /// 根据设备信息拉取有效套餐列表
    @inlinable
    public func describeDevicePackages(productId: String, deviceName: String, limit: UInt64, offset: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDevicePackagesResponse> {
        self.describeDevicePackages(.init(productId: productId, deviceName: deviceName, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 拉取有效云存套餐列表
    ///
    /// 根据设备信息拉取有效套餐列表
    @inlinable
    public func describeDevicePackages(productId: String, deviceName: String, limit: UInt64, offset: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDevicePackagesResponse {
        try await self.describeDevicePackages(.init(productId: productId, deviceName: deviceName, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 拉取有效云存套餐列表
    ///
    /// 根据设备信息拉取有效套餐列表
    @inlinable
    public func describeDevicePackagesPaginated(_ input: DescribeDevicePackagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [PackageInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeDevicePackages, logger: logger, on: eventLoop)
    }

    /// 拉取有效云存套餐列表
    ///
    /// 根据设备信息拉取有效套餐列表
    @inlinable @discardableResult
    public func describeDevicePackagesPaginated(_ input: DescribeDevicePackagesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDevicePackagesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDevicePackages, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 拉取有效云存套餐列表
    ///
    /// 根据设备信息拉取有效套餐列表
    ///
    /// - Returns: `AsyncSequence`s of `PackageInfo` and `DescribeDevicePackagesResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDevicePackagesPaginator(_ input: DescribeDevicePackagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDevicePackagesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDevicePackages, logger: logger, on: eventLoop)
    }
}
