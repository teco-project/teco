//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCAaiError {
    public struct FailedOperation: TCAaiErrorType {
        enum Code: String {
            case errorRecognize = "FailedOperation.ErrorRecognize"
            case serviceIsolate = "FailedOperation.ServiceIsolate"
            case userHasNoFreeAmount = "FailedOperation.UserHasNoFreeAmount"
            case userNotRegistered = "FailedOperation.UserNotRegistered"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 识别错误。
        public static var errorRecognize: FailedOperation {
            FailedOperation(.errorRecognize)
        }

        /// 账号因为欠费停止服务，请在腾讯云账户充值。
        public static var serviceIsolate: FailedOperation {
            FailedOperation(.serviceIsolate)
        }

        /// 账号本月免费额度已用完。
        public static var userHasNoFreeAmount: FailedOperation {
            FailedOperation(.userHasNoFreeAmount)
        }

        /// 服务未开通，请在腾讯云官网语音识别控制台开通服务。
        public static var userNotRegistered: FailedOperation {
            FailedOperation(.userNotRegistered)
        }

        public func asAaiError() -> TCAaiError {
            let code: TCAaiError.Code
            switch self.error {
            case .errorRecognize:
                code = .failedOperation_ErrorRecognize
            case .serviceIsolate:
                code = .failedOperation_ServiceIsolate
            case .userHasNoFreeAmount:
                code = .failedOperation_UserHasNoFreeAmount
            case .userNotRegistered:
                code = .failedOperation_UserNotRegistered
            }
            return TCAaiError(code, context: self.context)
        }
    }
}
