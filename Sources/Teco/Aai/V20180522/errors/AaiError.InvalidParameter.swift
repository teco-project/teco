//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCAaiError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case errorChatText = "InvalidParameter.ErrorChatText"
            case errorChatUser = "InvalidParameter.ErrorChatUser"
            case errorContentlength = "InvalidParameter.ErrorContentlength"
            case errorNoBodydata = "InvalidParameter.ErrorNoBodydata"
            case errorParamsMissing = "InvalidParameter.ErrorParamsMissing"
            case errorParsequest = "InvalidParameter.ErrorParsequest"
            case invalidText = "InvalidParameter.InvalidText"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 错误的聊天输入文本。
        public static var errorChatText: InvalidParameter {
            InvalidParameter(.errorChatText)
        }
        
        /// 错误的User参数。
        public static var errorChatUser: InvalidParameter {
            InvalidParameter(.errorChatUser)
        }
        
        /// 请求数据长度无效。
        public static var errorContentlength: InvalidParameter {
            InvalidParameter(.errorContentlength)
        }
        
        /// 没有body数据。
        public static var errorNoBodydata: InvalidParameter {
            InvalidParameter(.errorNoBodydata)
        }
        
        /// 参数不全。
        public static var errorParamsMissing: InvalidParameter {
            InvalidParameter(.errorParamsMissing)
        }
        
        /// 解析请求数据失败。
        public static var errorParsequest: InvalidParameter {
            InvalidParameter(.errorParsequest)
        }
        
        /// 非法文本。
        public static var invalidText: InvalidParameter {
            InvalidParameter(.invalidText)
        }
    }
}

extension TCAaiError.InvalidParameter: Equatable {
    public static func == (lhs: TCAaiError.InvalidParameter, rhs: TCAaiError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCAaiError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCAaiError.InvalidParameter {
    /// - Returns: ``TCAaiError`` that holds the same error and context.
    public func toAaiError() -> TCAaiError {
        guard let code = TCAaiError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCAaiError(code, context: self.context)
    }
}

extension TCAaiError.InvalidParameter {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
