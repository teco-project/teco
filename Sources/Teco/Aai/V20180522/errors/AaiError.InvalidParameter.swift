//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCAaiError {
    public struct InvalidParameter: TCAaiErrorType {
        enum Code: String {
            case errorChatText = "InvalidParameter.ErrorChatText"
            case errorChatUser = "InvalidParameter.ErrorChatUser"
            case errorContentlength = "InvalidParameter.ErrorContentlength"
            case errorNoBodydata = "InvalidParameter.ErrorNoBodydata"
            case errorParamsMissing = "InvalidParameter.ErrorParamsMissing"
            case errorParsequest = "InvalidParameter.ErrorParsequest"
            case invalidText = "InvalidParameter.InvalidText"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 错误的聊天输入文本。
        public static var errorChatText: InvalidParameter {
            InvalidParameter(.errorChatText)
        }

        /// 错误的User参数。
        public static var errorChatUser: InvalidParameter {
            InvalidParameter(.errorChatUser)
        }

        /// 请求数据长度无效。
        public static var errorContentlength: InvalidParameter {
            InvalidParameter(.errorContentlength)
        }

        /// 没有body数据。
        public static var errorNoBodydata: InvalidParameter {
            InvalidParameter(.errorNoBodydata)
        }

        /// 参数不全。
        public static var errorParamsMissing: InvalidParameter {
            InvalidParameter(.errorParamsMissing)
        }

        /// 解析请求数据失败。
        public static var errorParsequest: InvalidParameter {
            InvalidParameter(.errorParsequest)
        }

        /// 非法文本。
        public static var invalidText: InvalidParameter {
            InvalidParameter(.invalidText)
        }

        public func asAaiError() -> TCAaiError {
            let code: TCAaiError.Code
            switch self.error {
            case .errorChatText:
                code = .invalidParameter_ErrorChatText
            case .errorChatUser:
                code = .invalidParameter_ErrorChatUser
            case .errorContentlength:
                code = .invalidParameter_ErrorContentlength
            case .errorNoBodydata:
                code = .invalidParameter_ErrorNoBodydata
            case .errorParamsMissing:
                code = .invalidParameter_ErrorParamsMissing
            case .errorParsequest:
                code = .invalidParameter_ErrorParsequest
            case .invalidText:
                code = .invalidParameter_InvalidText
            }
            return TCAaiError(code, context: self.context)
        }
    }
}
