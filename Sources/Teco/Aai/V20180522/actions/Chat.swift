//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Aai {
    /// Chat请求参数结构体
    public struct ChatRequest: TCRequestModel {
        /// 聊天输入文本
        public let text: String

        /// 腾讯云项目 ID，可填 0，总长度不超过 1024 字节。
        public let projectId: Int64

        /// json格式，比如 {"id":"test","gender":"male"}。记录当前与机器人交互的用户id，非必须但强烈建议传入，否则多轮聊天功能会受影响
        public let user: String?

        public init(text: String, projectId: Int64 = 0, user: String? = nil) {
            self.text = text
            self.projectId = projectId
            self.user = user
        }

        enum CodingKeys: String, CodingKey {
            case text = "Text"
            case projectId = "ProjectId"
            case user = "User"
        }
    }

    /// Chat返回参数结构体
    public struct ChatResponse: TCResponseModel {
        /// 聊天输出文本
        public let answer: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case answer = "Answer"
            case requestId = "RequestId"
        }
    }

    /// 智能闲聊
    ///
    /// 提供基于文本的基础聊天能力，可以让您的应用快速拥有具备深度语义理解的机器聊天功能。
    @inlinable
    public func chat(_ input: ChatRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChatResponse> {
        self.client.execute(action: "Chat", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 智能闲聊
    ///
    /// 提供基于文本的基础聊天能力，可以让您的应用快速拥有具备深度语义理解的机器聊天功能。
    @inlinable
    public func chat(_ input: ChatRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChatResponse {
        try await self.client.execute(action: "Chat", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 智能闲聊
    ///
    /// 提供基于文本的基础聊天能力，可以让您的应用快速拥有具备深度语义理解的机器聊天功能。
    @inlinable
    public func chat(text: String, projectId: Int64 = 0, user: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChatResponse> {
        self.chat(.init(text: text, projectId: projectId, user: user), region: region, logger: logger, on: eventLoop)
    }

    /// 智能闲聊
    ///
    /// 提供基于文本的基础聊天能力，可以让您的应用快速拥有具备深度语义理解的机器聊天功能。
    @inlinable
    public func chat(text: String, projectId: Int64 = 0, user: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChatResponse {
        try await self.chat(.init(text: text, projectId: projectId, user: user), region: region, logger: logger, on: eventLoop)
    }
}
