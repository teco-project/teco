//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSqlserverError {
    public struct ResourceNotFound: TCSqlserverErrorType {
        enum Code: String {
            case accountNotExist = "ResourceNotFound.AccountNotExist"
            case backupNotFound = "ResourceNotFound.BackupNotFound"
            case dbNotExit = "ResourceNotFound.DBNotExit"
            case dbNotFound = "ResourceNotFound.DBNotFound"
            case fullBackupMigrationNotExist = "ResourceNotFound.FullBackupMigrationNotExist"
            case increBackupMigrationNotExist = "ResourceNotFound.IncreBackupMigrationNotExist"
            case instanceNotFound = "ResourceNotFound.InstanceNotFound"
            case paramsNotFound = "ResourceNotFound.ParamsNotFound"
            case vpcNotExist = "ResourceNotFound.VpcNotExist"
            case other = "ResourceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 账号不存在。
        public static var accountNotExist: ResourceNotFound {
            ResourceNotFound(.accountNotExist)
        }

        /// 备份不存在。
        public static var backupNotFound: ResourceNotFound {
            ResourceNotFound(.backupNotFound)
        }

        /// 数据库不存在。
        public static var dbNotExit: ResourceNotFound {
            ResourceNotFound(.dbNotExit)
        }

        /// 数据库不存在。
        public static var dbNotFound: ResourceNotFound {
            ResourceNotFound(.dbNotFound)
        }

        /// 全量备份导入任务不存在。
        public static var fullBackupMigrationNotExist: ResourceNotFound {
            ResourceNotFound(.fullBackupMigrationNotExist)
        }

        /// 增量备份导入任务不存在。
        public static var increBackupMigrationNotExist: ResourceNotFound {
            ResourceNotFound(.increBackupMigrationNotExist)
        }

        /// 实例不存在。
        public static var instanceNotFound: ResourceNotFound {
            ResourceNotFound(.instanceNotFound)
        }

        /// 参数未找到。
        public static var paramsNotFound: ResourceNotFound {
            ResourceNotFound(.paramsNotFound)
        }

        /// VPC网络不存在。
        public static var vpcNotExist: ResourceNotFound {
            ResourceNotFound(.vpcNotExist)
        }

        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }

        public func asSqlserverError() -> TCSqlserverError {
            let code: TCSqlserverError.Code
            switch self.error {
            case .accountNotExist:
                code = .resourceNotFound_AccountNotExist
            case .backupNotFound:
                code = .resourceNotFound_BackupNotFound
            case .dbNotExit:
                code = .resourceNotFound_DBNotExit
            case .dbNotFound:
                code = .resourceNotFound_DBNotFound
            case .fullBackupMigrationNotExist:
                code = .resourceNotFound_FullBackupMigrationNotExist
            case .increBackupMigrationNotExist:
                code = .resourceNotFound_IncreBackupMigrationNotExist
            case .instanceNotFound:
                code = .resourceNotFound_InstanceNotFound
            case .paramsNotFound:
                code = .resourceNotFound_ParamsNotFound
            case .vpcNotExist:
                code = .resourceNotFound_VpcNotExist
            case .other:
                code = .resourceNotFound
            }
            return TCSqlserverError(code, context: self.context)
        }
    }
}
