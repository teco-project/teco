//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSqlserverError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case cosError = "FailedOperation.CosError"
            case cosPropertiesError = "FailedOperation.CosPropertiesError"
            case createOrderFailed = "FailedOperation.CreateOrderFailed"
            case dbError = "FailedOperation.DBError"
            case gcsError = "FailedOperation.GcsError"
            case getVpcFailed = "FailedOperation.GetVpcFailed"
            case migrationLockError = "FailedOperation.MigrationLockError"
            case queryOrderFailed = "FailedOperation.QueryOrderFailed"
            case queryPriceFailed = "FailedOperation.QueryPriceFailed"
            case securityGroupOperationError = "FailedOperation.SecurityGroupOperationError"
            case vpcError = "FailedOperation.VPCError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 查询对象存储失败。
        public static var cosError: FailedOperation {
            FailedOperation(.cosError)
        }
        
        /// 获取上传配置信息错误。
        public static var cosPropertiesError: FailedOperation {
            FailedOperation(.cosPropertiesError)
        }
        
        /// 创建订单失败。
        public static var createOrderFailed: FailedOperation {
            FailedOperation(.createOrderFailed)
        }
        
        /// 数据库错误。
        public static var dbError: FailedOperation {
            FailedOperation(.dbError)
        }
        
        /// 操作失败或者网络超时。
        public static var gcsError: FailedOperation {
            FailedOperation(.gcsError)
        }
        
        /// 获取VPC网络信息失败。
        public static var getVpcFailed: FailedOperation {
            FailedOperation(.getVpcFailed)
        }
        
        /// 备份导入任务锁定失败。
        public static var migrationLockError: FailedOperation {
            FailedOperation(.migrationLockError)
        }
        
        /// 查询订单失败。
        public static var queryOrderFailed: FailedOperation {
            FailedOperation(.queryOrderFailed)
        }
        
        /// 计费相关错误，查询价格失败。
        public static var queryPriceFailed: FailedOperation {
            FailedOperation(.queryPriceFailed)
        }
        
        /// 安全组操作失败。
        public static var securityGroupOperationError: FailedOperation {
            FailedOperation(.securityGroupOperationError)
        }
        
        /// 操作网络失败或者超时。
        public static var vpcError: FailedOperation {
            FailedOperation(.vpcError)
        }
    }
}

extension TCSqlserverError.FailedOperation: Equatable {
    public static func == (lhs: TCSqlserverError.FailedOperation, rhs: TCSqlserverError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCSqlserverError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCSqlserverError.FailedOperation {
    /// - Returns: ``TCSqlserverError`` that holds the same error and context.
    public func toSqlserverError() -> TCSqlserverError {
        guard let code = TCSqlserverError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCSqlserverError(code, context: self.context)
    }
}

extension TCSqlserverError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
