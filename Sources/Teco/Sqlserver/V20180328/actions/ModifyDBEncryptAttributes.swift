//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// ModifyDBEncryptAttributes请求参数结构体
    public struct ModifyDBEncryptAttributesRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 开启、关闭数据库TDE加密
        public let dbtdeEncrypt: [DBTDEEncrypt]

        public init(instanceId: String, dbtdeEncrypt: [DBTDEEncrypt]) {
            self.instanceId = instanceId
            self.dbtdeEncrypt = dbtdeEncrypt
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dbtdeEncrypt = "DBTDEEncrypt"
        }
    }

    /// ModifyDBEncryptAttributes返回参数结构体
    public struct ModifyDBEncryptAttributesResponse: TCResponseModel {
        /// 任务流ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 开启、关闭数据库的TDE加密功能
    ///
    /// 本接口（ModifyDBEncryptAttributes）用于开启、关闭数据库的TDE加密功能。
    @inlinable
    public func modifyDBEncryptAttributes(_ input: ModifyDBEncryptAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBEncryptAttributesResponse> {
        self.client.execute(action: "ModifyDBEncryptAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开启、关闭数据库的TDE加密功能
    ///
    /// 本接口（ModifyDBEncryptAttributes）用于开启、关闭数据库的TDE加密功能。
    @inlinable
    public func modifyDBEncryptAttributes(_ input: ModifyDBEncryptAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBEncryptAttributesResponse {
        try await self.client.execute(action: "ModifyDBEncryptAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开启、关闭数据库的TDE加密功能
    ///
    /// 本接口（ModifyDBEncryptAttributes）用于开启、关闭数据库的TDE加密功能。
    @inlinable
    public func modifyDBEncryptAttributes(instanceId: String, dbtdeEncrypt: [DBTDEEncrypt], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBEncryptAttributesResponse> {
        self.modifyDBEncryptAttributes(.init(instanceId: instanceId, dbtdeEncrypt: dbtdeEncrypt), region: region, logger: logger, on: eventLoop)
    }

    /// 开启、关闭数据库的TDE加密功能
    ///
    /// 本接口（ModifyDBEncryptAttributes）用于开启、关闭数据库的TDE加密功能。
    @inlinable
    public func modifyDBEncryptAttributes(instanceId: String, dbtdeEncrypt: [DBTDEEncrypt], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBEncryptAttributesResponse {
        try await self.modifyDBEncryptAttributes(.init(instanceId: instanceId, dbtdeEncrypt: dbtdeEncrypt), region: region, logger: logger, on: eventLoop)
    }
}
