//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// DescribeXEvents请求参数结构体
    public struct DescribeXEventsRequest: TCPaginatedRequest {
        /// 实例ID
        public let instanceId: String

        /// 事件类型，slow-慢SQL事件，blocked-阻塞事件，deadlock-死锁事件
        public let eventType: String

        /// 扩展文件生成开始时间(yyyy-MM-dd HH:mm:ss)
        public let startTime: String

        /// 扩展文件生成结束时间(yyyy-MM-dd HH:mm:ss)
        public let endTime: String

        /// 分页返回，页编号，默认值为第0页
        public let offset: Int64?

        /// 分页返回，每页返回的数目，取值为1~100，默认值为20
        public let limit: Int64?

        public init(instanceId: String, eventType: String, startTime: String, endTime: String, offset: Int64? = nil, limit: Int64? = nil) {
            self.instanceId = instanceId
            self.eventType = eventType
            self.startTime = startTime
            self.endTime = endTime
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case eventType = "EventType"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeXEventsResponse) -> DescribeXEventsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(instanceId: self.instanceId, eventType: self.eventType, startTime: self.startTime, endTime: self.endTime, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeXEvents返回参数结构体
    public struct DescribeXEventsResponse: TCPaginatedResponse {
        /// 扩展事件列表
        public let events: [Events]

        /// 扩展事件总数量
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case events = "Events"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``Events`` list from the paginated response.
        public func getItems() -> [Events] {
            self.events
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询扩展事件列表
    ///
    /// 本接口（DescribeXEvents）用于查询扩展事件列表。
    @inlinable
    public func describeXEvents(_ input: DescribeXEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeXEventsResponse> {
        self.client.execute(action: "DescribeXEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询扩展事件列表
    ///
    /// 本接口（DescribeXEvents）用于查询扩展事件列表。
    @inlinable
    public func describeXEvents(_ input: DescribeXEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeXEventsResponse {
        try await self.client.execute(action: "DescribeXEvents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询扩展事件列表
    ///
    /// 本接口（DescribeXEvents）用于查询扩展事件列表。
    @inlinable
    public func describeXEvents(instanceId: String, eventType: String, startTime: String, endTime: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeXEventsResponse> {
        self.describeXEvents(.init(instanceId: instanceId, eventType: eventType, startTime: startTime, endTime: endTime, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询扩展事件列表
    ///
    /// 本接口（DescribeXEvents）用于查询扩展事件列表。
    @inlinable
    public func describeXEvents(instanceId: String, eventType: String, startTime: String, endTime: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeXEventsResponse {
        try await self.describeXEvents(.init(instanceId: instanceId, eventType: eventType, startTime: startTime, endTime: endTime, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询扩展事件列表
    ///
    /// 本接口（DescribeXEvents）用于查询扩展事件列表。
    @inlinable
    public func describeXEventsPaginated(_ input: DescribeXEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [Events])> {
        self.client.paginate(input: input, region: region, command: self.describeXEvents, logger: logger, on: eventLoop)
    }

    /// 查询扩展事件列表
    ///
    /// 本接口（DescribeXEvents）用于查询扩展事件列表。
    @inlinable @discardableResult
    public func describeXEventsPaginated(_ input: DescribeXEventsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeXEventsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeXEvents, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询扩展事件列表
    ///
    /// 本接口（DescribeXEvents）用于查询扩展事件列表。
    ///
    /// - Returns: `AsyncSequence`s of ``Events`` and ``DescribeXEventsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeXEventsPaginator(_ input: DescribeXEventsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeXEventsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeXEvents, logger: logger, on: eventLoop)
    }
}
