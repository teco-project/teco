//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// DescribeDBInstancesAttribute请求参数结构体
    public struct DescribeDBInstancesAttributeRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeDBInstancesAttribute返回参数结构体
    public struct DescribeDBInstancesAttributeResponse: TCResponse {
        /// 实例ID
        public let instanceId: String

        /// 定期备份状态 enable-开启，disable-关闭
        public let regularBackupEnable: String

        /// 定期备份保留天数 [90 - 3650]天
        public let regularBackupSaveDays: UInt64

        /// 定期备份策略 years-每年，quarters-每季度，months-每月
        public let regularBackupStrategy: String

        /// 定期备份保留个数
        public let regularBackupCounts: UInt64

        /// 定期备份开始日期，格式-YYYY-MM-DD 默认当前日期
        public let regularBackupStartTime: String

        /// 阻塞进程阈值，单位毫秒
        public let blockedThreshold: Int64

        /// 慢SQL、阻塞、死锁扩展事件文件保留时长
        public let eventSaveDays: Int64

        /// TDE透明数据加密配置
        public let tdeConfig: TDEConfigAttribute

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case regularBackupEnable = "RegularBackupEnable"
            case regularBackupSaveDays = "RegularBackupSaveDays"
            case regularBackupStrategy = "RegularBackupStrategy"
            case regularBackupCounts = "RegularBackupCounts"
            case regularBackupStartTime = "RegularBackupStartTime"
            case blockedThreshold = "BlockedThreshold"
            case eventSaveDays = "EventSaveDays"
            case tdeConfig = "TDEConfig"
            case requestId = "RequestId"
        }
    }

    /// 查询实例附属属性
    ///
    /// 本接口（DescribeDBInstancesAttribute）用于查询实例附属属性
    @inlinable
    public func describeDBInstancesAttribute(_ input: DescribeDBInstancesAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBInstancesAttributeResponse> {
        self.client.execute(action: "DescribeDBInstancesAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例附属属性
    ///
    /// 本接口（DescribeDBInstancesAttribute）用于查询实例附属属性
    @inlinable
    public func describeDBInstancesAttribute(_ input: DescribeDBInstancesAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBInstancesAttributeResponse {
        try await self.client.execute(action: "DescribeDBInstancesAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例附属属性
    ///
    /// 本接口（DescribeDBInstancesAttribute）用于查询实例附属属性
    @inlinable
    public func describeDBInstancesAttribute(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBInstancesAttributeResponse> {
        self.describeDBInstancesAttribute(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例附属属性
    ///
    /// 本接口（DescribeDBInstancesAttribute）用于查询实例附属属性
    @inlinable
    public func describeDBInstancesAttribute(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBInstancesAttributeResponse {
        try await self.describeDBInstancesAttribute(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
