//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// DescribeBackupCommand请求参数结构体
    public struct DescribeBackupCommandRequest: TCRequestModel {
        /// 备份文件类型，FULL-全量备份，FULL_LOG-全量备份需要日志增量，FULL_DIFF-全量备份需要差异增量，LOG-日志备份，DIFF-差异备份
        public let backupFileType: String

        /// 数据库名称
        public let dataBaseName: String

        /// 是否需要恢复，NO-不需要，YES-需要
        public let isRecovery: String

        /// 备份文件保存的路径；如果不填则默认在D:\\
        public let localPath: String?

        public init(backupFileType: String, dataBaseName: String, isRecovery: String, localPath: String? = nil) {
            self.backupFileType = backupFileType
            self.dataBaseName = dataBaseName
            self.isRecovery = isRecovery
            self.localPath = localPath
        }

        enum CodingKeys: String, CodingKey {
            case backupFileType = "BackupFileType"
            case dataBaseName = "DataBaseName"
            case isRecovery = "IsRecovery"
            case localPath = "LocalPath"
        }
    }

    /// DescribeBackupCommand返回参数结构体
    public struct DescribeBackupCommandResponse: TCResponseModel {
        /// 创建备份命令
        public let command: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case command = "Command"
            case requestId = "RequestId"
        }
    }

    /// 查询创建备份命令
    ///
    /// 本接口（DescribeBackupCommand）用于查询以规范的格式创建备份的命令。
    @inlinable
    public func describeBackupCommand(_ input: DescribeBackupCommandRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupCommandResponse> {
        self.client.execute(action: "DescribeBackupCommand", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询创建备份命令
    ///
    /// 本接口（DescribeBackupCommand）用于查询以规范的格式创建备份的命令。
    @inlinable
    public func describeBackupCommand(_ input: DescribeBackupCommandRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupCommandResponse {
        try await self.client.execute(action: "DescribeBackupCommand", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询创建备份命令
    ///
    /// 本接口（DescribeBackupCommand）用于查询以规范的格式创建备份的命令。
    @inlinable
    public func describeBackupCommand(backupFileType: String, dataBaseName: String, isRecovery: String, localPath: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupCommandResponse> {
        self.describeBackupCommand(.init(backupFileType: backupFileType, dataBaseName: dataBaseName, isRecovery: isRecovery, localPath: localPath), region: region, logger: logger, on: eventLoop)
    }

    /// 查询创建备份命令
    ///
    /// 本接口（DescribeBackupCommand）用于查询以规范的格式创建备份的命令。
    @inlinable
    public func describeBackupCommand(backupFileType: String, dataBaseName: String, isRecovery: String, localPath: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupCommandResponse {
        try await self.describeBackupCommand(.init(backupFileType: backupFileType, dataBaseName: dataBaseName, isRecovery: isRecovery, localPath: localPath), region: region, logger: logger, on: eventLoop)
    }
}
