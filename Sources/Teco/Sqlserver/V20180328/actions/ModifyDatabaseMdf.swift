//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// ModifyDatabaseMdf请求参数结构体
    public struct ModifyDatabaseMdfRequest: TCRequest {
        /// 数据库名数组
        public let dbNames: [String]

        /// 实例ID
        public let instanceId: String

        public init(dbNames: [String], instanceId: String) {
            self.dbNames = dbNames
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case dbNames = "DBNames"
            case instanceId = "InstanceId"
        }
    }

    /// ModifyDatabaseMdf返回参数结构体
    public struct ModifyDatabaseMdfResponse: TCResponse {
        /// 流程ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 收缩数据库mdf
    ///
    /// 本接口(ModifyDatabaseMdf)用于收缩数据库mdf(Shrink mdf)
    @inlinable
    public func modifyDatabaseMdf(_ input: ModifyDatabaseMdfRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDatabaseMdfResponse> {
        self.client.execute(action: "ModifyDatabaseMdf", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 收缩数据库mdf
    ///
    /// 本接口(ModifyDatabaseMdf)用于收缩数据库mdf(Shrink mdf)
    @inlinable
    public func modifyDatabaseMdf(_ input: ModifyDatabaseMdfRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDatabaseMdfResponse {
        try await self.client.execute(action: "ModifyDatabaseMdf", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 收缩数据库mdf
    ///
    /// 本接口(ModifyDatabaseMdf)用于收缩数据库mdf(Shrink mdf)
    @inlinable
    public func modifyDatabaseMdf(dbNames: [String], instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDatabaseMdfResponse> {
        self.modifyDatabaseMdf(.init(dbNames: dbNames, instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 收缩数据库mdf
    ///
    /// 本接口(ModifyDatabaseMdf)用于收缩数据库mdf(Shrink mdf)
    @inlinable
    public func modifyDatabaseMdf(dbNames: [String], instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDatabaseMdfResponse {
        try await self.modifyDatabaseMdf(.init(dbNames: dbNames, instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
