//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// DescribeMigrationDatabases请求参数结构体
    public struct DescribeMigrationDatabasesRequest: TCRequestModel {
        /// 迁移源实例的ID，格式如：mssql-si2823jyl
        public let instanceId: String

        /// 迁移源实例用户名
        public let userName: String

        /// 迁移源实例密码
        public let password: String

        public init(instanceId: String, userName: String, password: String) {
            self.instanceId = instanceId
            self.userName = userName
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case userName = "UserName"
            case password = "Password"
        }
    }

    /// DescribeMigrationDatabases返回参数结构体
    public struct DescribeMigrationDatabasesResponse: TCResponseModel {
        /// 数据库数量
        public let amount: Int64

        /// 数据库名称数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let migrateDBSet: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case amount = "Amount"
            case migrateDBSet = "MigrateDBSet"
            case requestId = "RequestId"
        }
    }

    /// 查询迁移数据库列表
    ///
    /// 本接口（DescribeMigrationDatabases）的作用是查询待迁移数据库列表
    @inlinable
    public func describeMigrationDatabases(_ input: DescribeMigrationDatabasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMigrationDatabasesResponse> {
        self.client.execute(action: "DescribeMigrationDatabases", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询迁移数据库列表
    ///
    /// 本接口（DescribeMigrationDatabases）的作用是查询待迁移数据库列表
    @inlinable
    public func describeMigrationDatabases(_ input: DescribeMigrationDatabasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMigrationDatabasesResponse {
        try await self.client.execute(action: "DescribeMigrationDatabases", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询迁移数据库列表
    ///
    /// 本接口（DescribeMigrationDatabases）的作用是查询待迁移数据库列表
    @inlinable
    public func describeMigrationDatabases(instanceId: String, userName: String, password: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMigrationDatabasesResponse> {
        self.describeMigrationDatabases(.init(instanceId: instanceId, userName: userName, password: password), region: region, logger: logger, on: eventLoop)
    }

    /// 查询迁移数据库列表
    ///
    /// 本接口（DescribeMigrationDatabases）的作用是查询待迁移数据库列表
    @inlinable
    public func describeMigrationDatabases(instanceId: String, userName: String, password: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMigrationDatabasesResponse {
        try await self.describeMigrationDatabases(.init(instanceId: instanceId, userName: userName, password: password), region: region, logger: logger, on: eventLoop)
    }
}
