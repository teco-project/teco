//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Sqlserver {
    /// DescribeBackupByFlowId请求参数结构体
    public struct DescribeBackupByFlowIdRequest: TCRequestModel {
        /// 实例ID，格式如：mssql-3l3fgqn7
        public let instanceId: String

        /// 创建备份流程ID，可通过 [CreateBackup](https://cloud.tencent.com/document/product/238/19946) 接口获取
        public let flowId: String

        public init(instanceId: String, flowId: String) {
            self.instanceId = instanceId
            self.flowId = flowId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case flowId = "FlowId"
        }
    }

    /// DescribeBackupByFlowId返回参数结构体
    public struct DescribeBackupByFlowIdResponse: TCResponseModel {
        /// 备份文件唯一标识，RestoreInstance接口会用到该字段，对于单库备份文件只返回第一条记录的备份文件唯一标识；单库备份文件需要通过DescribeBackupFiles接口获取全部记录的可回档的ID
        public let id: UInt64

        /// 文件名，对于单库备份文件只返回第一条记录的文件名；单库备份文件需要通过DescribeBackupFiles接口获取全部记录的文件名
        public let fileName: String

        /// 备份任务名称，可自定义
        public let backupName: String

        /// 备份开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 备份结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 文件大小，单位 KB，对于单库备份文件只返回第一条记录的文件大小；单库备份文件需要通过DescribeBackupFiles接口获取全部记录的文件大小
        public let size: UInt64

        /// 备份策略，0-实例备份；1-多库备份；实例状态是0-创建中时，该字段为默认值0，无实际意义
        public let strategy: Int64

        /// 备份文件状态，0-创建中；1-成功；2-失败
        public let status: Int64

        /// 备份方式，0-定时备份；1-手动临时备份；实例状态是0-创建中时，该字段为默认值0，无实际意义
        public let backupWay: Int64

        /// DB列表，对于单库备份文件只返回第一条记录包含的库名；单库备份文件需要通过DescribeBackupFiles接口获取全部记录的库名。
        public let dBs: [String]

        /// 内网下载地址，对于单库备份文件只返回第一条记录的内网下载地址；单库备份文件需要通过DescribeBackupFiles接口获取全部记录的下载地址
        public let internalAddr: String

        /// 外网下载地址，对于单库备份文件只返回第一条记录的外网下载地址；单库备份文件需要通过DescribeBackupFiles接口获取全部记录的下载地址
        public let externalAddr: String

        /// 聚合Id，对于打包备份文件不返回此值。通过此值调用DescribeBackupFiles接口，获取单库备份文件的详细信息
        public let groupId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case fileName = "FileName"
            case backupName = "BackupName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case size = "Size"
            case strategy = "Strategy"
            case status = "Status"
            case backupWay = "BackupWay"
            case dBs = "DBs"
            case internalAddr = "InternalAddr"
            case externalAddr = "ExternalAddr"
            case groupId = "GroupId"
            case requestId = "RequestId"
        }
    }

    /// 根据流程ID查询备份信息
    ///
    /// 本接口(DescribeBackupByFlowId)用于通过备份创建流程的ID查询创建的备份详情，流程ID可从接口CreateBackup中获得。
    @inlinable
    public func describeBackupByFlowId(_ input: DescribeBackupByFlowIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupByFlowIdResponse> {
        self.client.execute(action: "DescribeBackupByFlowId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据流程ID查询备份信息
    ///
    /// 本接口(DescribeBackupByFlowId)用于通过备份创建流程的ID查询创建的备份详情，流程ID可从接口CreateBackup中获得。
    @inlinable
    public func describeBackupByFlowId(_ input: DescribeBackupByFlowIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupByFlowIdResponse {
        try await self.client.execute(action: "DescribeBackupByFlowId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据流程ID查询备份信息
    ///
    /// 本接口(DescribeBackupByFlowId)用于通过备份创建流程的ID查询创建的备份详情，流程ID可从接口CreateBackup中获得。
    @inlinable
    public func describeBackupByFlowId(instanceId: String, flowId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupByFlowIdResponse> {
        self.describeBackupByFlowId(.init(instanceId: instanceId, flowId: flowId), region: region, logger: logger, on: eventLoop)
    }

    /// 根据流程ID查询备份信息
    ///
    /// 本接口(DescribeBackupByFlowId)用于通过备份创建流程的ID查询创建的备份详情，流程ID可从接口CreateBackup中获得。
    @inlinable
    public func describeBackupByFlowId(instanceId: String, flowId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupByFlowIdResponse {
        try await self.describeBackupByFlowId(.init(instanceId: instanceId, flowId: flowId), region: region, logger: logger, on: eventLoop)
    }
}
