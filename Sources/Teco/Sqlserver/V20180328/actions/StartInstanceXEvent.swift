//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// StartInstanceXEvent请求参数结构体
    public struct StartInstanceXEventRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 开启、关闭扩展事件
        public let eventConfig: [EventConfig]

        public init(instanceId: String, eventConfig: [EventConfig]) {
            self.instanceId = instanceId
            self.eventConfig = eventConfig
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case eventConfig = "EventConfig"
        }
    }

    /// StartInstanceXEvent返回参数结构体
    public struct StartInstanceXEventResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 开启、关闭扩展事件
    ///
    /// 本接口（StartInstanceXEvent）用于开启、关闭扩展事件。
    @inlinable @discardableResult
    public func startInstanceXEvent(_ input: StartInstanceXEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartInstanceXEventResponse> {
        self.client.execute(action: "StartInstanceXEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开启、关闭扩展事件
    ///
    /// 本接口（StartInstanceXEvent）用于开启、关闭扩展事件。
    @inlinable @discardableResult
    public func startInstanceXEvent(_ input: StartInstanceXEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartInstanceXEventResponse {
        try await self.client.execute(action: "StartInstanceXEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开启、关闭扩展事件
    ///
    /// 本接口（StartInstanceXEvent）用于开启、关闭扩展事件。
    @inlinable @discardableResult
    public func startInstanceXEvent(instanceId: String, eventConfig: [EventConfig], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartInstanceXEventResponse> {
        self.startInstanceXEvent(.init(instanceId: instanceId, eventConfig: eventConfig), region: region, logger: logger, on: eventLoop)
    }

    /// 开启、关闭扩展事件
    ///
    /// 本接口（StartInstanceXEvent）用于开启、关闭扩展事件。
    @inlinable @discardableResult
    public func startInstanceXEvent(instanceId: String, eventConfig: [EventConfig], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartInstanceXEventResponse {
        try await self.startInstanceXEvent(.init(instanceId: instanceId, eventConfig: eventConfig), region: region, logger: logger, on: eventLoop)
    }
}
