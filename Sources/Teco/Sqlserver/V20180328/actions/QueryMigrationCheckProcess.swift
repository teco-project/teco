//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Sqlserver {
    /// QueryMigrationCheckProcess请求参数结构体
    public struct QueryMigrationCheckProcessRequest: TCRequestModel {
        /// 迁移任务ID
        public let migrateId: Int64

        public init(migrateId: Int64) {
            self.migrateId = migrateId
        }

        enum CodingKeys: String, CodingKey {
            case migrateId = "MigrateId"
        }
    }

    /// QueryMigrationCheckProcess返回参数结构体
    public struct QueryMigrationCheckProcessResponse: TCResponseModel {
        /// 总步骤数量
        public let totalStep: Int64

        /// 当前步骤编号，从1开始
        public let currentStep: Int64

        /// 所有步骤详情
        public let stepDetails: [StepDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalStep = "TotalStep"
            case currentStep = "CurrentStep"
            case stepDetails = "StepDetails"
            case requestId = "RequestId"
        }
    }

    /// 查询迁移校验任务进度
    ///
    /// 本接口（QueryMigrationCheckProcess）的作用是查询迁移检查任务的进度，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func queryMigrationCheckProcess(_ input: QueryMigrationCheckProcessRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryMigrationCheckProcessResponse> {
        self.client.execute(action: "QueryMigrationCheckProcess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询迁移校验任务进度
    ///
    /// 本接口（QueryMigrationCheckProcess）的作用是查询迁移检查任务的进度，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func queryMigrationCheckProcess(_ input: QueryMigrationCheckProcessRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryMigrationCheckProcessResponse {
        try await self.client.execute(action: "QueryMigrationCheckProcess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询迁移校验任务进度
    ///
    /// 本接口（QueryMigrationCheckProcess）的作用是查询迁移检查任务的进度，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func queryMigrationCheckProcess(migrateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryMigrationCheckProcessResponse> {
        let input = QueryMigrationCheckProcessRequest(migrateId: migrateId)
        return self.client.execute(action: "QueryMigrationCheckProcess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询迁移校验任务进度
    ///
    /// 本接口（QueryMigrationCheckProcess）的作用是查询迁移检查任务的进度，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func queryMigrationCheckProcess(migrateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryMigrationCheckProcessResponse {
        let input = QueryMigrationCheckProcessRequest(migrateId: migrateId)
        return try await self.client.execute(action: "QueryMigrationCheckProcess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
