//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// ModifyInstanceEncryptAttributes请求参数结构体
    public struct ModifyInstanceEncryptAttributesRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 证书归属。self-表示使用该账号自身的证书，others-表示引用其他账号的证书，默认取值self。
        public let certificateAttribution: String

        /// 引用的其他主账号ID，当CertificateAttribution 为others时必填。
        public let quoteUin: String?

        public init(instanceId: String, certificateAttribution: String, quoteUin: String? = nil) {
            self.instanceId = instanceId
            self.certificateAttribution = certificateAttribution
            self.quoteUin = quoteUin
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case certificateAttribution = "CertificateAttribution"
            case quoteUin = "QuoteUin"
        }
    }

    /// ModifyInstanceEncryptAttributes返回参数结构体
    public struct ModifyInstanceEncryptAttributesResponse: TCResponse {
        /// 任务流ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 开通实例的TDE加密功能
    ///
    /// 本接口（ModifyInstanceEncryptAttributes）用于开通实例的TDE加密功能。
    @inlinable
    public func modifyInstanceEncryptAttributes(_ input: ModifyInstanceEncryptAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceEncryptAttributesResponse> {
        self.client.execute(action: "ModifyInstanceEncryptAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开通实例的TDE加密功能
    ///
    /// 本接口（ModifyInstanceEncryptAttributes）用于开通实例的TDE加密功能。
    @inlinable
    public func modifyInstanceEncryptAttributes(_ input: ModifyInstanceEncryptAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceEncryptAttributesResponse {
        try await self.client.execute(action: "ModifyInstanceEncryptAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开通实例的TDE加密功能
    ///
    /// 本接口（ModifyInstanceEncryptAttributes）用于开通实例的TDE加密功能。
    @inlinable
    public func modifyInstanceEncryptAttributes(instanceId: String, certificateAttribution: String, quoteUin: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceEncryptAttributesResponse> {
        self.modifyInstanceEncryptAttributes(.init(instanceId: instanceId, certificateAttribution: certificateAttribution, quoteUin: quoteUin), region: region, logger: logger, on: eventLoop)
    }

    /// 开通实例的TDE加密功能
    ///
    /// 本接口（ModifyInstanceEncryptAttributes）用于开通实例的TDE加密功能。
    @inlinable
    public func modifyInstanceEncryptAttributes(instanceId: String, certificateAttribution: String, quoteUin: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceEncryptAttributesResponse {
        try await self.modifyInstanceEncryptAttributes(.init(instanceId: instanceId, certificateAttribution: certificateAttribution, quoteUin: quoteUin), region: region, logger: logger, on: eventLoop)
    }
}
