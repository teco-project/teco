//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// StartMigrationCheck请求参数结构体
    public struct StartMigrationCheckRequest: TCRequestModel {
        /// 迁移任务id
        public let migrateId: Int64

        public init(migrateId: Int64) {
            self.migrateId = migrateId
        }

        enum CodingKeys: String, CodingKey {
            case migrateId = "MigrateId"
        }
    }

    /// StartMigrationCheck返回参数结构体
    public struct StartMigrationCheckResponse: TCResponseModel {
        /// 迁移检查流程发起后，返回的流程id
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 启动迁移校验
    ///
    /// 本接口（StartMigrationCheck）的作用是启动一个迁移前的校验任务，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func startMigrationCheck(_ input: StartMigrationCheckRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartMigrationCheckResponse> {
        self.client.execute(action: "StartMigrationCheck", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 启动迁移校验
    ///
    /// 本接口（StartMigrationCheck）的作用是启动一个迁移前的校验任务，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func startMigrationCheck(_ input: StartMigrationCheckRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartMigrationCheckResponse {
        try await self.client.execute(action: "StartMigrationCheck", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 启动迁移校验
    ///
    /// 本接口（StartMigrationCheck）的作用是启动一个迁移前的校验任务，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func startMigrationCheck(migrateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartMigrationCheckResponse> {
        self.startMigrationCheck(.init(migrateId: migrateId), region: region, logger: logger, on: eventLoop)
    }

    /// 启动迁移校验
    ///
    /// 本接口（StartMigrationCheck）的作用是启动一个迁移前的校验任务，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
    @inlinable
    public func startMigrationCheck(migrateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartMigrationCheckResponse {
        try await self.startMigrationCheck(.init(migrateId: migrateId), region: region, logger: logger, on: eventLoop)
    }
}
