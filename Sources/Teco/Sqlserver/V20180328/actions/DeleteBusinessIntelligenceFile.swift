//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Sqlserver {
    /// DeleteBusinessIntelligenceFile请求参数结构体
    public struct DeleteBusinessIntelligenceFileRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 文件名称集合
        public let fileNameSet: [String]

        public init(instanceId: String, fileNameSet: [String]) {
            self.instanceId = instanceId
            self.fileNameSet = fileNameSet
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case fileNameSet = "FileNameSet"
        }
    }

    /// DeleteBusinessIntelligenceFile返回参数结构体
    public struct DeleteBusinessIntelligenceFileResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除商业智能文件
    ///
    /// 本接口（DeleteBusinessIntelligenceFile）用于删除商业智能文件。
    @inlinable @discardableResult
    public func deleteBusinessIntelligenceFile(_ input: DeleteBusinessIntelligenceFileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBusinessIntelligenceFileResponse> {
        self.client.execute(action: "DeleteBusinessIntelligenceFile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除商业智能文件
    ///
    /// 本接口（DeleteBusinessIntelligenceFile）用于删除商业智能文件。
    @inlinable @discardableResult
    public func deleteBusinessIntelligenceFile(_ input: DeleteBusinessIntelligenceFileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBusinessIntelligenceFileResponse {
        try await self.client.execute(action: "DeleteBusinessIntelligenceFile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除商业智能文件
    ///
    /// 本接口（DeleteBusinessIntelligenceFile）用于删除商业智能文件。
    @inlinable @discardableResult
    public func deleteBusinessIntelligenceFile(instanceId: String, fileNameSet: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBusinessIntelligenceFileResponse> {
        self.deleteBusinessIntelligenceFile(DeleteBusinessIntelligenceFileRequest(instanceId: instanceId, fileNameSet: fileNameSet), region: region, logger: logger, on: eventLoop)
    }

    /// 删除商业智能文件
    ///
    /// 本接口（DeleteBusinessIntelligenceFile）用于删除商业智能文件。
    @inlinable @discardableResult
    public func deleteBusinessIntelligenceFile(instanceId: String, fileNameSet: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBusinessIntelligenceFileResponse {
        try await self.deleteBusinessIntelligenceFile(DeleteBusinessIntelligenceFileRequest(instanceId: instanceId, fileNameSet: fileNameSet), region: region, logger: logger, on: eventLoop)
    }
}
