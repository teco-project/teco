//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Sqlserver {
    /// DescribeHASwitchLog请求参数结构体
    public struct DescribeHASwitchLogRequest: TCPaginatedRequest {
        /// 实例ID
        public let instanceId: String

        /// 开始时间(yyyy-MM-dd HH:mm:ss)
        public let startTime: String

        /// 结束时间(yyyy-MM-dd HH:mm:ss)
        public let endTime: String

        /// 切换模式 0-系统自动切换，1-手动切换，不填默认查全部。
        public let switchType: UInt64?

        /// 分页，页大小
        public let limit: UInt64?

        /// 分页,页数
        public let offset: UInt64?

        public init(instanceId: String, startTime: String, endTime: String, switchType: UInt64? = nil, limit: UInt64? = nil, offset: UInt64? = nil) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
            self.switchType = switchType
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case switchType = "SwitchType"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeHASwitchLogResponse) -> DescribeHASwitchLogRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(instanceId: self.instanceId, startTime: self.startTime, endTime: self.endTime, switchType: self.switchType, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribeHASwitchLog返回参数结构体
    public struct DescribeHASwitchLogResponse: TCPaginatedResponse {
        /// 日志总数量
        public let totalCount: UInt64?

        /// 主备切换日志
        public let switchLog: [SwitchLog]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case switchLog = "SwitchLog"
            case requestId = "RequestId"
        }

        /// Extract the returned ``SwitchLog`` list from the paginated response.
        public func getItems() -> [SwitchLog] {
            self.switchLog ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询主备切换日志
    ///
    /// 本接口(DescribeHASwitchLog)用于手动主备切换。
    @inlinable
    public func describeHASwitchLog(_ input: DescribeHASwitchLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHASwitchLogResponse> {
        self.client.execute(action: "DescribeHASwitchLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询主备切换日志
    ///
    /// 本接口(DescribeHASwitchLog)用于手动主备切换。
    @inlinable
    public func describeHASwitchLog(_ input: DescribeHASwitchLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHASwitchLogResponse {
        try await self.client.execute(action: "DescribeHASwitchLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询主备切换日志
    ///
    /// 本接口(DescribeHASwitchLog)用于手动主备切换。
    @inlinable
    public func describeHASwitchLog(instanceId: String, startTime: String, endTime: String, switchType: UInt64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHASwitchLogResponse> {
        self.describeHASwitchLog(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, switchType: switchType, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询主备切换日志
    ///
    /// 本接口(DescribeHASwitchLog)用于手动主备切换。
    @inlinable
    public func describeHASwitchLog(instanceId: String, startTime: String, endTime: String, switchType: UInt64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHASwitchLogResponse {
        try await self.describeHASwitchLog(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, switchType: switchType, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询主备切换日志
    ///
    /// 本接口(DescribeHASwitchLog)用于手动主备切换。
    @inlinable
    public func describeHASwitchLogPaginated(_ input: DescribeHASwitchLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [SwitchLog])> {
        self.client.paginate(input: input, region: region, command: self.describeHASwitchLog, logger: logger, on: eventLoop)
    }

    /// 查询主备切换日志
    ///
    /// 本接口(DescribeHASwitchLog)用于手动主备切换。
    @inlinable @discardableResult
    public func describeHASwitchLogPaginated(_ input: DescribeHASwitchLogRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeHASwitchLogResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeHASwitchLog, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询主备切换日志
    ///
    /// 本接口(DescribeHASwitchLog)用于手动主备切换。
    ///
    /// - Returns: `AsyncSequence`s of ``SwitchLog`` and ``DescribeHASwitchLogResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeHASwitchLogPaginator(_ input: DescribeHASwitchLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeHASwitchLogRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeHASwitchLog, logger: logger, on: eventLoop)
    }
}
