//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Sqlserver {
    /// 拉取实例账户列表
    ///
    /// 本接口（DescribeAccounts）用于拉取实例账户列表。
    @inlinable
    public func describeAccounts(_ input: DescribeAccountsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAccountsResponse > {
        self.client.execute(action: "DescribeAccounts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 拉取实例账户列表
    ///
    /// 本接口（DescribeAccounts）用于拉取实例账户列表。
    @inlinable
    public func describeAccounts(_ input: DescribeAccountsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccountsResponse {
        try await self.client.execute(action: "DescribeAccounts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeAccounts请求参数结构体
    public struct DescribeAccountsRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String
        
        /// 分页返回，每页返回的数目，取值为1-100，默认值为20
        public let limit: UInt64?
        
        /// 分页返回，页编号，默认值为第0页
        public let offset: UInt64?
        
        /// 账号名称
        public let name: String?
        
        /// createTime,updateTime,passTime" note:"排序字段，默认按照账号创建时间倒序
        public let orderBy: String?
        
        /// 排序规则（desc-降序，asc-升序），默认desc
        public let orderByType: String?
        
        public init (instanceId: String, limit: UInt64?, offset: UInt64?, name: String?, orderBy: String?, orderByType: String?) {
            self.instanceId = instanceId
            self.limit = limit
            self.offset = offset
            self.name = name
            self.orderBy = orderBy
            self.orderByType = orderByType
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case limit = "Limit"
            case offset = "Offset"
            case name = "Name"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
        }
    }
    
    /// DescribeAccounts返回参数结构体
    public struct DescribeAccountsResponse: TCResponseModel {
        /// 实例ID
        public let instanceId: String
        
        /// 账户信息列表
        public let accounts: [AccountDetail]
        
        /// 总数
        public let totalCount: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case accounts = "Accounts"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
}