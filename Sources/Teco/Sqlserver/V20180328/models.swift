//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Sqlserver {
    /// 账号创建信息
    public struct AccountCreateInfo: TCInputModel {
        /// 实例用户名
        public let userName: String

        /// 实例密码
        public let password: String

        /// DB权限列表
        public let dbPrivileges: [DBPrivilege]?

        /// 账号备注信息
        public let remark: String?

        /// 是否为管理员账户，默认为否
        public let isAdmin: Bool?

        /// win-windows鉴权,sql-sqlserver鉴权，不填默认值为sql-sqlserver鉴权
        public let authentication: String?

        public init(userName: String, password: String, dbPrivileges: [DBPrivilege]? = nil, remark: String? = nil, isAdmin: Bool? = nil, authentication: String? = nil) {
            self.userName = userName
            self.password = password
            self.dbPrivileges = dbPrivileges
            self.remark = remark
            self.isAdmin = isAdmin
            self.authentication = authentication
        }

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case password = "Password"
            case dbPrivileges = "DBPrivileges"
            case remark = "Remark"
            case isAdmin = "IsAdmin"
            case authentication = "Authentication"
        }
    }

    /// 账户信息详情
    public struct AccountDetail: TCOutputModel {
        /// 账户名
        public let name: String

        /// 账户备注
        public let remark: String

        /// 账户创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 账户状态，1-创建中，2-正常，3-修改中，4-密码重置中，-1-删除中
        public let status: Int64

        /// 账户更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 密码更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var passTime: Date

        /// 账户内部状态，正常为enable
        public let internalStatus: String

        /// 该账户对相关db的读写权限信息
        public let dbs: [DBPrivilege]

        /// 是否为管理员账户
        public let isAdmin: Bool

        /// win-windows鉴权,sql-sqlserver鉴权
        public let authentication: String

        /// win-windows鉴权账户需要host
        public let host: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case remark = "Remark"
            case createTime = "CreateTime"
            case status = "Status"
            case updateTime = "UpdateTime"
            case passTime = "PassTime"
            case internalStatus = "InternalStatus"
            case dbs = "Dbs"
            case isAdmin = "IsAdmin"
            case authentication = "Authentication"
            case host = "Host"
        }
    }

    /// 实例账号密码信息
    public struct AccountPassword: TCInputModel {
        /// 用户名
        public let userName: String

        /// 密码
        public let password: String

        public init(userName: String, password: String) {
            self.userName = userName
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case password = "Password"
        }
    }

    /// 数据库账号权限信息。创建数据库时设置
    public struct AccountPrivilege: TCInputModel {
        /// 数据库用户名
        public let userName: String

        /// 数据库权限。ReadWrite表示可读写，ReadOnly表示只读
        public let privilege: String

        public init(userName: String, privilege: String) {
            self.userName = userName
            self.privilege = privilege
        }

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case privilege = "Privilege"
        }
    }

    /// 数据库账号权限变更信息
    public struct AccountPrivilegeModifyInfo: TCInputModel {
        /// 数据库用户名
        public let userName: String

        /// 账号权限变更信息
        public let dbPrivileges: [DBPrivilegeModifyInfo]

        /// 是否为管理员账户
        public let isAdmin: Bool?

        public init(userName: String, dbPrivileges: [DBPrivilegeModifyInfo], isAdmin: Bool? = nil) {
            self.userName = userName
            self.dbPrivileges = dbPrivileges
            self.isAdmin = isAdmin
        }

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case dbPrivileges = "DBPrivileges"
            case isAdmin = "IsAdmin"
        }
    }

    /// 账户备注信息
    public struct AccountRemark: TCOutputModel {
        /// 账户名
        public let userName: String

        /// 对应账户新的备注信息
        public let remark: String

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case remark = "Remark"
        }
    }

    /// 备份文件详细信息
    public struct Backup: TCOutputModel {
        /// 文件名，对于单库备份文件不返回此值；单库备份文件通过DescribeBackupFiles接口获取文件名
        public let fileName: String

        /// 文件大小，单位 KB，对于单库备份文件不返回此值；单库备份文件通过DescribeBackupFiles接口获取文件大小
        public let size: Int64

        /// 备份开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 备份结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 内网下载地址，对于单库备份文件不返回此值；单库备份文件通过DescribeBackupFiles接口获取下载地址
        public let internalAddr: String

        /// 外网下载地址，对于单库备份文件不返回此值；单库备份文件通过DescribeBackupFiles接口获取下载地址
        public let externalAddr: String

        /// 备份文件唯一标识，RestoreInstance接口会用到该字段，对于单库备份文件不返回此值；单库备份文件通过DescribeBackupFiles接口获取可回档的ID
        public let id: UInt64

        /// 备份文件状态（0-创建中；1-成功；2-失败）
        public let status: UInt64

        /// 多库备份时的DB列表
        public let dBs: [String]

        /// 备份策略（0-实例备份；1-多库备份）
        public let strategy: Int64

        /// 备份方式，0-定时备份；1-手动临时备份；2-定期备份
        public let backupWay: Int64

        /// 备份任务名称，可自定义
        public let backupName: String

        /// 聚合Id，对于打包备份文件不返回此值。通过此值调用DescribeBackupFiles接口，获取单库备份文件的详细信息
        public let groupId: String

        /// 备份文件形式（pkg-打包备份文件，single-单库备份文件）
        public let backupFormat: String

        /// 实例当前地域Code
        public let region: String

        /// 跨地域备份的目的地域下载链接
        public let crossBackupAddr: [CrossBackupAddr]

        /// 跨地域备份的目标地域和备份状态
        public let crossBackupStatus: [CrossRegionStatus]

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case size = "Size"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case internalAddr = "InternalAddr"
            case externalAddr = "ExternalAddr"
            case id = "Id"
            case status = "Status"
            case dBs = "DBs"
            case strategy = "Strategy"
            case backupWay = "BackupWay"
            case backupName = "BackupName"
            case groupId = "GroupId"
            case backupFormat = "BackupFormat"
            case region = "Region"
            case crossBackupAddr = "CrossBackupAddr"
            case crossBackupStatus = "CrossBackupStatus"
        }
    }

    /// 在非打包上传备份模式下，每个库对应一个备份文件
    public struct BackupFile: TCOutputModel {
        /// 备份文件唯一标识
        public let id: UInt64

        /// 备份文件名称
        public let fileName: String

        /// 文件大小(K)
        public let size: UInt64

        /// 备份文件的库的名称
        public let dBs: [String]

        /// 下载地址
        public let downloadLink: String

        /// 当前实例地域码
        public let region: String

        /// 备份的跨地域region和所对应的下载地址
        public let crossBackupAddr: [CrossBackupAddr]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case fileName = "FileName"
            case size = "Size"
            case dBs = "DBs"
            case downloadLink = "DownloadLink"
            case region = "Region"
            case crossBackupAddr = "CrossBackupAddr"
        }
    }

    /// 商业智能服务文件类型
    public struct BusinessIntelligenceFile: TCOutputModel {
        /// 文件名称
        public let fileName: String

        /// 文件类型
        public let fileType: String

        /// 文件的COS_URL
        public let fileURL: String

        /// 文件在服务器上的路径
        public let filePath: String

        /// 文件大小，单位时Byte
        public let fileSize: Int64

        /// 文件md5值
        public let fileMd5: String

        /// 部署文件状态 1-初始化待部署 2-部署中 3-部署成功 4-部署失败
        public let status: Int64

        /// 备注信息
        public let remark: String

        /// 文件创建时间
        public let createTime: String

        /// 文件部署开始时间
        public let startTime: String

        /// 文件部署结束时间
        public let endTime: String

        /// 报错信息返回
        public let message: String

        /// 商业智能实例ID
        public let instanceId: String

        /// 动作相关信息
        public let action: FileAction

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case fileType = "FileType"
            case fileURL = "FileURL"
            case filePath = "FilePath"
            case fileSize = "FileSize"
            case fileMd5 = "FileMd5"
            case status = "Status"
            case remark = "Remark"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case message = "Message"
            case instanceId = "InstanceId"
            case action = "Action"
        }
    }

    /// 查询已经上传的备份文件大小。
    public struct CosUploadBackupFile: TCOutputModel {
        /// 备份名称
        public let fileName: String

        /// 备份大小
        public let size: Int64

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case size = "Size"
        }
    }

    /// 跨地域备份下载地址集合
    public struct CrossBackupAddr: TCOutputModel {
        /// 跨地域备份目标地域
        public let crossRegion: String

        /// 跨地域备份内网下载地址
        public let crossInternalAddr: String

        /// 跨地域备份外网下载地址
        public let crossExternalAddr: String

        enum CodingKeys: String, CodingKey {
            case crossRegion = "CrossRegion"
            case crossInternalAddr = "CrossInternalAddr"
            case crossExternalAddr = "CrossExternalAddr"
        }
    }

    /// 跨地域备份的目标地域和备份状态
    public struct CrossRegionStatus: TCOutputModel {
        /// 跨地域备份目标地域
        public let crossRegion: String

        /// 备份跨地域的同步状态 0-创建中；1-成功；2-失败；4-同步中
        public let crossStatus: Int64

        enum CodingKeys: String, CodingKey {
            case crossRegion = "CrossRegion"
            case crossStatus = "CrossStatus"
        }
    }

    /// 数据库创建信息
    public struct DBCreateInfo: TCInputModel {
        /// 数据库名
        public let dbName: String

        /// 字符集。可通过接口DescribeDBCharsets查到支持的字符集，不填默认为Chinese_PRC_CI_AS。
        public let charset: String?

        /// 数据库账号权限信息
        public let accounts: [AccountPrivilege]?

        /// 备注
        public let remark: String?

        public init(dbName: String, charset: String? = nil, accounts: [AccountPrivilege]? = nil, remark: String? = nil) {
            self.dbName = dbName
            self.charset = charset
            self.accounts = accounts
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DBName"
            case charset = "Charset"
            case accounts = "Accounts"
            case remark = "Remark"
        }
    }

    /// 数据库信息
    public struct DBDetail: TCOutputModel {
        /// 数据库名称
        public let name: String

        /// 字符集
        public let charset: String

        /// 备注
        public let remark: String

        /// 数据库创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 数据库状态。1--创建中， 2--运行中， 3--修改中，-1--删除中
        public let status: Int64

        /// 数据库账号权限信息
        public let accounts: [AccountPrivilege]

        /// 内部状态。ONLINE表示运行中
        public let internalStatus: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case charset = "Charset"
            case remark = "Remark"
            case createTime = "CreateTime"
            case status = "Status"
            case accounts = "Accounts"
            case internalStatus = "InternalStatus"
        }
    }

    /// 实例详细信息
    public struct DBInstance: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let name: String

        /// 实例所在项目ID
        public let projectId: Int64

        /// 实例所在地域ID
        public let regionId: Int64

        /// 实例所在可用区ID
        public let zoneId: Int64

        /// 实例所在私有网络ID，基础网络时为 0
        public let vpcId: Int64

        /// 实例所在私有网络子网ID，基础网络时为 0
        public let subnetId: Int64

        /// 实例状态。取值范围： <li>1：申请中</li> <li>2：运行中</li> <li>3：受限运行中 (主备切换中)</li> <li>4：已隔离</li> <li>5：回收中</li> <li>6：已回收</li> <li>7：任务执行中 (实例做备份、回档等操作)</li> <li>8：已下线</li> <li>9：实例扩容中</li> <li>10：实例迁移中</li> <li>11：只读</li> <li>12：重启中</li>  <li>13：实例修改中且待切换</li> <li>14：订阅发布创建中</li> <li>15：订阅发布修改中</li> <li>16：实例修改中且切换中</li> <li>17：创建RO副本中</li>
        public let status: Int64

        /// 实例访问IP
        public let vip: String

        /// 实例访问端口
        public let vport: Int64

        /// 实例创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 实例更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 实例计费开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 实例计费结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 实例隔离时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var isolateTime: Date

        /// 实例内存大小，单位G
        public let memory: Int64

        /// 实例已经使用存储空间大小，单位G
        public let usedStorage: Int64

        /// 实例存储空间大小，单位G
        public let storage: Int64

        /// 实例版本
        public let versionName: String

        /// 实例续费标记，0-正常续费，1-自动续费，2-到期不续费
        public let renewFlag: Int64

        /// 实例高可用， 1-双机高可用，2-单机，3-跨可用区，4-集群跨可用区，5-集群，9-自研机房
        public let model: Int64

        /// 实例所在地域名称，如 ap-guangzhou
        public let region: String

        /// 实例所在可用区名称，如 ap-guangzhou-1
        public let zone: String

        /// 备份时间点
        public let backupTime: String

        /// 实例付费模式， 0-按量计费，1-包年包月
        public let payMode: Int64

        /// 实例唯一UID
        public let uid: String

        /// 实例cpu核心数
        public let cpu: Int64

        /// 实例版本代号
        public let version: String

        /// 物理机代号
        public let type: String

        /// 计费ID
        public let pid: Int64

        /// 实例所属VPC的唯一字符串ID，格式如：vpc-xxx，基础网络时为空字符串
        public let uniqVpcId: String

        /// 实例所属子网的唯一字符串ID，格式如： subnet-xxx，基础网络时为空字符串
        public let uniqSubnetId: String

        /// 实例隔离操作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolateOperator: String?

        /// 发布订阅标识，SUB-订阅实例，PUB-发布实例，空值-没有发布订阅的普通实例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subFlag: String?

        /// 只读标识，RO-只读实例，MASTER-有RO实例的主实例，空值-没有只读组的非RO实例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roFlag: String?

        /// 容灾类型，MIRROR-镜像，ALWAYSON-AlwaysOn, SINGLE-单例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let haFlag: String?

        /// 实例绑定的标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceTags: [ResourceTag]?

        /// 备份模式，master_pkg-主节点打包备份(默认) ；master_no_pkg-主节点不打包备份；slave_pkg-从节点打包备份(always on集群有效)；slave_no_pkg-从节点不打包备份(always on集群有效)；只读副本对该值无效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupModel: String?

        /// 实例备份信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceNote: String?

        /// 备份周期
        public let backupCycle: [Int64]

        /// 备份周期类型，[daily、weekly、monthly]
        public let backupCycleType: String

        /// 数据(日志)备份保留时间
        public let backupSaveDays: Int64

        /// 实例类型 HA-高可用 RO-只读实例 SI-基础版 BI-商业智能服务
        public let instanceType: String

        /// 跨地域备份目的地域，如果为空，则表示未开启跨地域备份
        public let crossRegions: [String]

        /// 跨地域备份状态 enable-开启，disable-关闭
        public let crossBackupEnabled: String

        /// 跨地域备份保留天数，则默认7天
        public let crossBackupSaveDays: UInt64

        /// 外网地址域名
        public let dnsPodDomain: String

        /// 外网端口号
        public let tgwWanVPort: Int64

        /// 系统字符集排序规则，默认：Chinese_PRC_CI_AS
        public let collation: String

        /// 系统时区，默认：China Standard Time
        public let timeZone: String

        /// 是否跨AZ
        public let isDrZone: Bool

        /// 备可用区信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZones: SlaveZones?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case name = "Name"
            case projectId = "ProjectId"
            case regionId = "RegionId"
            case zoneId = "ZoneId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case vip = "Vip"
            case vport = "Vport"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case isolateTime = "IsolateTime"
            case memory = "Memory"
            case usedStorage = "UsedStorage"
            case storage = "Storage"
            case versionName = "VersionName"
            case renewFlag = "RenewFlag"
            case model = "Model"
            case region = "Region"
            case zone = "Zone"
            case backupTime = "BackupTime"
            case payMode = "PayMode"
            case uid = "Uid"
            case cpu = "Cpu"
            case version = "Version"
            case type = "Type"
            case pid = "Pid"
            case uniqVpcId = "UniqVpcId"
            case uniqSubnetId = "UniqSubnetId"
            case isolateOperator = "IsolateOperator"
            case subFlag = "SubFlag"
            case roFlag = "ROFlag"
            case haFlag = "HAFlag"
            case resourceTags = "ResourceTags"
            case backupModel = "BackupModel"
            case instanceNote = "InstanceNote"
            case backupCycle = "BackupCycle"
            case backupCycleType = "BackupCycleType"
            case backupSaveDays = "BackupSaveDays"
            case instanceType = "InstanceType"
            case crossRegions = "CrossRegions"
            case crossBackupEnabled = "CrossBackupEnabled"
            case crossBackupSaveDays = "CrossBackupSaveDays"
            case dnsPodDomain = "DnsPodDomain"
            case tgwWanVPort = "TgwWanVPort"
            case collation = "Collation"
            case timeZone = "TimeZone"
            case isDrZone = "IsDrZone"
            case slaveZones = "SlaveZones"
        }
    }

    /// 账号的数据库权限信息
    public struct DBPrivilege: TCInputModel {
        /// 数据库名
        public let dbName: String

        /// 数据库权限，ReadWrite表示可读写，ReadOnly表示只读
        public let privilege: String

        public init(dbName: String, privilege: String) {
            self.dbName = dbName
            self.privilege = privilege
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DBName"
            case privilege = "Privilege"
        }
    }

    /// 数据库权限变更信息
    public struct DBPrivilegeModifyInfo: TCInputModel {
        /// 数据库名
        public let dbName: String

        /// 权限变更信息。ReadWrite表示可读写，ReadOnly表示只读，Delete表示删除账号对该DB的权限
        public let privilege: String

        public init(dbName: String, privilege: String) {
            self.dbName = dbName
            self.privilege = privilege
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DBName"
            case privilege = "Privilege"
        }
    }

    /// 数据库备注信息
    public struct DBRemark: TCInputModel {
        /// 数据库名称
        public let name: String

        /// 备注信息
        public let remark: String

        public init(name: String, remark: String) {
            self.name = name
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case remark = "Remark"
        }
    }

    /// 该数据结构表示具有发布订阅关系的两个数据库。
    public struct DatabaseTuple: TCInputModel {
        /// 发布数据库名称
        public let publishDatabase: String

        /// 订阅数据库名称
        public let subscribeDatabase: String

        public init(publishDatabase: String, subscribeDatabase: String) {
            self.publishDatabase = publishDatabase
            self.subscribeDatabase = subscribeDatabase
        }

        enum CodingKeys: String, CodingKey {
            case publishDatabase = "PublishDatabase"
            case subscribeDatabase = "SubscribeDatabase"
        }
    }

    /// 该数据结构表示具有发布订阅关系的两个数据库，以及其之间发布订阅的状态信息。
    public struct DatabaseTupleStatus: TCOutputModel {
        /// 发布数据库名称
        public let publishDatabase: String

        /// 订阅数据库名称
        public let subscribeDatabase: String

        /// 最近一次同步时间
        public let lastSyncTime: String

        /// 数据库之间的发布订阅状态 running，success，fail，unknow
        public let status: String

        enum CodingKeys: String, CodingKey {
            case publishDatabase = "PublishDatabase"
            case subscribeDatabase = "SubscribeDatabase"
            case lastSyncTime = "LastSyncTime"
            case status = "Status"
        }
    }

    /// 数据库配置信息
    public struct DbNormalDetail: TCOutputModel {
        /// 是否已订阅 0：否 1：是
        public let isSubscribed: String

        /// 数据库排序规则
        public let collationName: String

        /// 开启CT之后是否自动清理 0：否 1：是
        public let isAutoCleanupOn: String

        /// 是否已启用代理  0：否 1：是
        public let isBrokerEnabled: String

        /// 是否已开启/关闭CDC 0：关闭 1：开启
        public let isCdcEnabled: String

        /// 是否已启用/ 禁用CT 0：禁用 1：启用
        public let isDbChainingOn: String

        /// 是否加密 0：否 1：是
        public let isEncrypted: String

        /// 是否全文启用 0：否 1：是
        public let isFulltextEnabled: String

        /// 是否是镜像 0：否 1：是
        public let isMirroring: String

        /// 是否已发布 0：否 1：是
        public let isPublished: String

        /// 是否开启快照 0：否 1：是
        public let isReadCommittedSnapshotOn: String

        /// 是否可信任 0：否 1：是
        public let isTrustworthyOn: String

        /// 镜像状态
        public let mirroringState: String

        /// 数据库名称
        public let name: String

        /// 恢复模式
        public let recoveryModelDesc: String

        /// 保留天数
        public let retentionPeriod: String

        /// 数据库状态
        public let stateDesc: String

        /// 用户类型
        public let userAccessDesc: String

        enum CodingKeys: String, CodingKey {
            case isSubscribed = "IsSubscribed"
            case collationName = "CollationName"
            case isAutoCleanupOn = "IsAutoCleanupOn"
            case isBrokerEnabled = "IsBrokerEnabled"
            case isCdcEnabled = "IsCdcEnabled"
            case isDbChainingOn = "IsDbChainingOn"
            case isEncrypted = "IsEncrypted"
            case isFulltextEnabled = "IsFulltextEnabled"
            case isMirroring = "IsMirroring"
            case isPublished = "IsPublished"
            case isReadCommittedSnapshotOn = "IsReadCommittedSnapshotOn"
            case isTrustworthyOn = "IsTrustworthyOn"
            case mirroringState = "MirroringState"
            case name = "Name"
            case recoveryModelDesc = "RecoveryModelDesc"
            case retentionPeriod = "RetentionPeriod"
            case stateDesc = "StateDesc"
            case userAccessDesc = "UserAccessDesc"
        }
    }

    /// 数据库可回档时间范围信息
    public struct DbRollbackTimeInfo: TCOutputModel {
        /// 数据库名称
        public let dbName: String

        /// 可回档开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 可回档结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        enum CodingKeys: String, CodingKey {
            case dbName = "DBName"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 订单信息
    public struct DealInfo: TCOutputModel {
        /// 订单名
        public let dealName: String

        /// 商品数量
        public let count: UInt64

        /// 关联的流程 ID，可用于查询流程执行状态
        public let flowId: Int64

        /// 只有创建实例的订单会填充该字段，表示该订单创建的实例的 ID。
        public let instanceIdSet: [String]

        /// 所属账号
        public let ownerUin: String

        /// 实例付费类型
        public let instanceChargeType: String

        enum CodingKeys: String, CodingKey {
            case dealName = "DealName"
            case count = "Count"
            case flowId = "FlowId"
            case instanceIdSet = "InstanceIdSet"
            case ownerUin = "OwnerUin"
            case instanceChargeType = "InstanceChargeType"
        }
    }

    /// 允许动作信息
    public struct FileAction: TCOutputModel {
        /// 支持的所有操作，值包括：view(查看列表) remark(修改备注)，deploy(部署)，delete(删除文件)
        public let allAction: [String]

        /// 当前状态允许的操作，AllAction的子集,为空表示禁止所有操作
        public let allowedAction: [String]

        enum CodingKeys: String, CodingKey {
            case allAction = "AllAction"
            case allowedAction = "AllowedAction"
        }
    }

    /// 实例的数据库信息
    public struct InstanceDBDetail: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 数据库信息列表
        public let dbDetails: [DBDetail]

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dbDetails = "DBDetails"
        }
    }

    /// 实例续费状态信息
    public struct InstanceRenewInfo: TCInputModel {
        /// 实例ID，形如mssql-j8kv137v
        public let instanceId: String

        /// 实例续费标记。0：正常续费，1：自动续费，2：到期不续
        public let renewFlag: Int64

        public init(instanceId: String, renewFlag: Int64) {
            self.instanceId = instanceId
            self.renewFlag = renewFlag
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case renewFlag = "RenewFlag"
        }
    }

    /// 互通组内实例信息详情
    public struct InterInstance: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例互通IP，用于加入互通组后访问
        public let interVip: String

        /// 实例互通端口，用于加入互通组后访问
        public let interPort: Int64

        /// 实例互通状态，1 -互通ipprot打开中 2 -互通ipprot已经打开 3 -已经打开互通ip的实例加入到互通组中 4 -已经打开互通ip的实例已加入到互通组 5 -互通ipprot回收中 6 -互通ipprot已回收 7 -已回收的实例从互通组中移除中 8 -已回收的实例从互通组中已经移除
        public let status: Int64

        /// 实例所在地域名称，如 ap-guangzhou
        public let region: String

        /// 实例所在可用区名称，如 ap-guangzhou-1
        public let zone: String

        /// 实例版本代号
        public let version: String

        /// 实例版本
        public let versionName: String

        /// 实例名称
        public let name: String

        /// 实例访问IP
        public let vip: String

        /// 实例访问端口
        public let vport: Int64

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case interVip = "InterVip"
            case interPort = "InterPort"
            case status = "Status"
            case region = "Region"
            case zone = "Zone"
            case version = "Version"
            case versionName = "VersionName"
            case name = "Name"
            case vip = "Vip"
            case vport = "Vport"
        }
    }

    /// 实例开通或者关闭互通组后的状态
    public struct InterInstanceFlow: TCOutputModel {
        /// 实例ID，例如：mssql-sdf32n1d
        public let instanceId: String

        /// 实例开通或者关闭互通组的流程ID，FlowId小于0-开通或者关闭失败，反之则成功。
        public let flowId: Int64

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case flowId = "FlowId"
        }
    }

    /// 需要迁移的DB列表
    public struct MigrateDB: TCInputModel, TCOutputModel {
        /// 迁移数据库的名称
        public let dbName: String?

        public init(dbName: String? = nil) {
            self.dbName = dbName
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DBName"
        }
    }

    /// 迁移的进度详情类型
    public struct MigrateDetail: TCOutputModel {
        /// 当前环节的名称
        public let stepName: String

        /// 当前环节的进度（单位是%）
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case stepName = "StepName"
            case progress = "Progress"
        }
    }

    /// 迁移任务的源类型
    public struct MigrateSource: TCInputModel, TCOutputModel {
        /// 迁移源实例的ID，MigrateType=1(TencentDB for SQLServers)时使用，格式如：mssql-si2823jyl
        public let instanceId: String?

        /// 迁移源Cvm的ID，MigrateType=2(云服务器自建SQLServer数据库)时使用
        public let cvmId: String?

        /// 迁移源Cvm的Vpc网络标识，MigrateType=2(云服务器自建SQLServer数据库)时使用，格式如：vpc-6ys9ont9
        public let vpcId: String?

        /// 迁移源Cvm的Vpc下的子网标识，MigrateType=2(云服务器自建SQLServer数据库)时使用，格式如：subnet-h9extioi
        public let subnetId: String?

        /// 用户名，MigrateType=1或MigrateType=2使用
        public let userName: String?

        /// 密码，MigrateType=1或MigrateType=2使用
        public let password: String?

        /// 迁移源Cvm自建库的内网IP，MigrateType=2(云服务器自建SQLServer数据库)时使用
        public let ip: String?

        /// 迁移源Cvm自建库的端口号，MigrateType=2(云服务器自建SQLServer数据库)时使用
        public let port: UInt64?

        /// 离线迁移的源备份地址，MigrateType=4或MigrateType=5使用
        public let url: [String]?

        /// 离线迁移的源备份密码，MigrateType=4或MigrateType=5使用
        public let urlPassword: String?

        public init(instanceId: String? = nil, cvmId: String? = nil, vpcId: String? = nil, subnetId: String? = nil, userName: String? = nil, password: String? = nil, ip: String? = nil, port: UInt64? = nil, url: [String]? = nil, urlPassword: String? = nil) {
            self.instanceId = instanceId
            self.cvmId = cvmId
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.userName = userName
            self.password = password
            self.ip = ip
            self.port = port
            self.url = url
            self.urlPassword = urlPassword
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case cvmId = "CvmId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case userName = "UserName"
            case password = "Password"
            case ip = "Ip"
            case port = "Port"
            case url = "Url"
            case urlPassword = "UrlPassword"
        }
    }

    /// 迁移任务的目标类型
    public struct MigrateTarget: TCInputModel, TCOutputModel {
        /// 迁移目标实例的ID，格式如：mssql-si2823jyl
        public let instanceId: String?

        /// 迁移目标实例的用户名
        public let userName: String?

        /// 迁移目标实例的密码
        public let password: String?

        public init(instanceId: String? = nil, userName: String? = nil, password: String? = nil) {
            self.instanceId = instanceId
            self.userName = userName
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case userName = "UserName"
            case password = "Password"
        }
    }

    /// 查询迁移任务列表类型
    public struct MigrateTask: TCOutputModel {
        /// 迁移任务ID
        public let migrateId: UInt64

        /// 迁移任务名称
        public let migrateName: String

        /// 迁移任务所属的用户ID
        public let appId: UInt64

        /// 迁移任务所属的地域
        public let region: String

        /// 迁移源的类型 1:TencentDB for SQLServer 2:云服务器自建SQLServer数据库 4:SQLServer备份还原 5:SQLServer备份还原（COS方式）
        public let sourceType: Int64

        /// 迁移任务的创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 迁移任务的开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 迁移任务的结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 迁移任务的状态（1:初始化,4:迁移中,5.迁移失败,6.迁移成功,7已中止,8已删除,9中止中,10完成中,11中止失败,12完成失败）
        public let status: UInt64

        /// 信息
        public let message: String

        /// 是否迁移任务经过检查（0:未校验,1:校验成功,2:校验失败,3:校验中）
        public let checkFlag: UInt64

        /// 迁移任务当前进度（单位%）
        public let progress: Int64

        /// 迁移任务进度细节
        public let migrateDetail: MigrateDetail

        enum CodingKeys: String, CodingKey {
            case migrateId = "MigrateId"
            case migrateName = "MigrateName"
            case appId = "AppId"
            case region = "Region"
            case sourceType = "SourceType"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case status = "Status"
            case message = "Message"
            case checkFlag = "CheckFlag"
            case progress = "Progress"
            case migrateDetail = "MigrateDetail"
        }
    }

    /// 冷备迁移导入
    public struct Migration: TCOutputModel {
        /// 备份导入任务ID 或 增量导入任务ID
        public let migrationId: String

        /// 备份导入名称，增量导入任务该字段为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let migrationName: String?

        /// 应用ID
        public let appId: UInt64

        /// 地域
        public let region: String

        /// 迁移目标实例ID
        public let instanceId: String

        /// 迁移任务恢复类型
        public let recoveryType: String

        /// 备份用户上传类型，COS_URL-备份放在用户的对象存储上，提供URL。COS_UPLOAD-备份放在业务的对象存储上，用户上传
        public let uploadType: String

        /// 备份文件列表，UploadType确定，COS_URL则保存URL，COS_UPLOAD则保存备份名称
        public let backupFiles: [String]

        /// 迁移任务状态，2-创建完成，7-全量导入中，8-等待增量，9-导入成功，10-导入失败，12-增量导入中
        public let status: Int64

        /// 迁移任务创建时间
        public let createTime: String

        /// 迁移任务开始时间
        public let startTime: String

        /// 迁移任务结束时间
        public let endTime: String

        /// 说明信息
        public let message: String

        /// 迁移细节
        public let detail: MigrationDetail

        /// 当前状态允许的操作
        public let action: MigrationAction

        /// 是否是最终恢复，全量导入任务该字段为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isRecovery: String?

        enum CodingKeys: String, CodingKey {
            case migrationId = "MigrationId"
            case migrationName = "MigrationName"
            case appId = "AppId"
            case region = "Region"
            case instanceId = "InstanceId"
            case recoveryType = "RecoveryType"
            case uploadType = "UploadType"
            case backupFiles = "BackupFiles"
            case status = "Status"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case message = "Message"
            case detail = "Detail"
            case action = "Action"
            case isRecovery = "IsRecovery"
        }
    }

    /// 冷备导入任务允许的操作
    public struct MigrationAction: TCOutputModel {
        /// 支持的所有操作，值包括：view(查看任务) ，modify(修改任务)， start(启动任务)，incremental(创建增量任务)，delete(删除任务)，upload(获取上传权限)。
        public let allAction: [String]

        /// 当前状态允许的操作，AllAction的子集,为空表示禁止所有操作
        public let allowedAction: [String]

        enum CodingKeys: String, CodingKey {
            case allAction = "AllAction"
            case allowedAction = "AllowedAction"
        }
    }

    /// 冷备导入任务迁移细节
    public struct MigrationDetail: TCOutputModel {
        /// 总步骤数
        public let stepAll: Int64

        /// 当前步骤
        public let stepNow: Int64

        /// 总进度,如："30"表示30%
        public let progress: Int64

        /// 步骤信息，null表示还未开始迁移
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepInfo: [MigrationStep]?

        enum CodingKeys: String, CodingKey {
            case stepAll = "StepAll"
            case stepNow = "StepNow"
            case progress = "Progress"
            case stepInfo = "StepInfo"
        }
    }

    /// 冷备导入任务迁移步骤细节
    public struct MigrationStep: TCOutputModel {
        /// 步骤序列
        public let stepNo: Int64

        /// 步骤展现名称
        public let stepName: String

        /// 英文ID标识
        public let stepId: String

        /// 步骤状态:0-默认值,1-成功,2-失败,3-执行中,4-未执行
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case stepNo = "StepNo"
            case stepName = "StepName"
            case stepId = "StepId"
            case status = "Status"
        }
    }

    /// 实例参数修改记录
    public struct ParamRecord: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 参数名称
        public let paramName: String

        /// 参数修改前的值
        public let oldValue: String

        /// 参数修改后的值
        public let newValue: String

        /// 参数修改状态，1-初始化等待被执行，2-执行成功，3-执行失败，4-参数修改中
        public let status: Int64

        /// 修改时间
        public let modifyTime: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case paramName = "ParamName"
            case oldValue = "OldValue"
            case newValue = "NewValue"
            case status = "Status"
            case modifyTime = "ModifyTime"
        }
    }

    /// 数据库实例参数
    public struct Parameter: TCInputModel {
        /// 参数名称
        public let name: String?

        /// 参数值
        public let currentValue: String?

        public init(name: String? = nil, currentValue: String? = nil) {
            self.name = name
            self.currentValue = currentValue
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case currentValue = "CurrentValue"
        }
    }

    /// 实例参数的详细描述
    public struct ParameterDetail: TCOutputModel {
        /// 参数名称
        public let name: String

        /// 参数类型，integer-整型，enum-枚举型
        public let paramType: String

        /// 参数默认值
        public let `default`: String

        /// 参数描述
        public let description: String

        /// 参数当前值
        public let currentValue: String

        /// 修改参数后，是否需要重启数据库以使参数生效，0-不需要重启，1-需要重启
        public let needReboot: Int64

        /// 参数允许的最大值
        public let max: Int64

        /// 参数允许的最小值
        public let min: Int64

        /// 参数允许的枚举类型
        public let enumValue: [String]

        /// 参数状态 0-状态正常 1-在修改中
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case paramType = "ParamType"
            case `default` = "Default"
            case description = "Description"
            case currentValue = "CurrentValue"
            case needReboot = "NeedReboot"
            case max = "Max"
            case min = "Min"
            case enumValue = "EnumValue"
            case status = "Status"
        }
    }

    /// 发布订阅对象
    public struct PublishSubscribe: TCOutputModel {
        /// 发布订阅ID
        public let id: UInt64

        /// 发布订阅名称
        public let name: String

        /// 发布实例ID
        public let publishInstanceId: String

        /// 发布实例名称
        public let publishInstanceName: String

        /// 发布实例IP
        public let publishInstanceIp: String

        /// 订阅实例ID
        public let subscribeInstanceId: String

        /// 订阅实例名称
        public let subscribeInstanceName: String

        /// 订阅实例IP
        public let subscribeInstanceIp: String

        /// 数据库的订阅发布关系集合
        public let databaseTupleSet: [DatabaseTupleStatus]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case publishInstanceId = "PublishInstanceId"
            case publishInstanceName = "PublishInstanceName"
            case publishInstanceIp = "PublishInstanceIp"
            case subscribeInstanceId = "SubscribeInstanceId"
            case subscribeInstanceName = "SubscribeInstanceName"
            case subscribeInstanceIp = "SubscribeInstanceIp"
            case databaseTupleSet = "DatabaseTupleSet"
        }
    }

    /// 只读组对象
    public struct ReadOnlyGroup: TCOutputModel {
        /// 只读组ID
        public let readOnlyGroupId: String

        /// 只读组名称
        public let readOnlyGroupName: String

        /// 只读组的地域ID，与主实例相同
        public let regionId: String

        /// 只读组的可用区ID，与主实例相同
        public let zoneId: String

        /// 是否启动超时剔除功能，0-不开启剔除功能，1-开启剔除功能
        public let isOfflineDelay: Int64

        /// 启动超时剔除功能后，使用的超时阈值
        public let readOnlyMaxDelayTime: Int64

        /// 启动超时剔除功能后，只读组至少保留的只读副本数
        public let minReadOnlyInGroup: Int64

        /// 只读组vip
        public let vip: String

        /// 只读组vport
        public let vport: Int64

        /// 只读组私有网络ID
        public let vpcId: String

        /// 只读组私有网络子网ID
        public let subnetId: String

        /// 只读组状态: 1-申请成功运行中，5-申请中
        public let status: Int64

        /// 主实例ID，形如mssql-sgeshe3th
        public let masterInstanceId: String

        /// 只读实例副本集合
        public let readOnlyInstanceSet: [ReadOnlyInstance]

        enum CodingKeys: String, CodingKey {
            case readOnlyGroupId = "ReadOnlyGroupId"
            case readOnlyGroupName = "ReadOnlyGroupName"
            case regionId = "RegionId"
            case zoneId = "ZoneId"
            case isOfflineDelay = "IsOfflineDelay"
            case readOnlyMaxDelayTime = "ReadOnlyMaxDelayTime"
            case minReadOnlyInGroup = "MinReadOnlyInGroup"
            case vip = "Vip"
            case vport = "Vport"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case masterInstanceId = "MasterInstanceId"
            case readOnlyInstanceSet = "ReadOnlyInstanceSet"
        }
    }

    /// 只读副本实例
    public struct ReadOnlyInstance: TCOutputModel {
        /// 只读副本ID，格式如：mssqlro-3l3fgqn7
        public let instanceId: String

        /// 只读副本名称
        public let name: String

        /// 只读副本唯一UID
        public let uid: String

        /// 只读副本所在项目ID
        public let projectId: Int64

        /// 只读副本状态。1：申请中 2：运行中 3：被延迟剔除 4：已隔离 5：回收中 6：已回收 7：任务执行中 8：已下线 9：实例扩容中 10：实例迁移中  12：重启中
        public let status: Int64

        /// 只读副本创建时间
        public let createTime: String

        /// 只读副本更新时间
        public let updateTime: String

        /// 只读副本内存大小，单位G
        public let memory: Int64

        /// 只读副本存储空间大小，单位G
        public let storage: Int64

        /// 只读副本cpu核心数
        public let cpu: Int64

        /// 只读副本版本代号
        public let version: String

        /// 宿主机代号
        public let type: String

        /// 只读副本模式，2-单机
        public let model: Int64

        /// 只读副本计费模式，1-包年包月，0-按量计费
        public let payMode: Int64

        /// 只读副本权重
        public let weight: Int64

        /// 只读副本延迟时间，单位秒
        public let delayTime: String

        /// 只读副本与主实例的同步状态。
        /// Init:初始化
        /// DeployReadOnlyInPorgress:部署副本进行中
        /// DeployReadOnlySuccess:部署副本成功
        /// DeployReadOnlyFail:部署副本失败
        /// DeployMasterDBInPorgress:主节点上加入副本数据库进行中
        /// DeployMasterDBSuccess:主节点上加入副本数据库成功
        /// DeployMasterDBFail:主节点上加入副本数据库进失败
        /// DeployReadOnlyDBInPorgress:副本还原加入数据库开始
        /// DeployReadOnlyDBSuccess:副本还原加入数据库成功
        /// DeployReadOnlyDBFail:副本还原加入数据库失败
        /// SyncDelay:同步延迟
        /// SyncFail:同步故障
        /// SyncExcluded:已剔除只读组
        /// SyncNormal:正常
        public let synStatus: String

        /// 只读副本与主实例没有同步的库
        public let databaseDifference: String

        /// 只读副本与主实例没有同步的账户
        public let accountDifference: String

        /// 只读副本计费开始时间
        public let startTime: String

        /// 只读副本计费结束时间
        public let endTime: String

        /// 只读副本隔离时间
        public let isolateTime: String

        /// 只读副本所在地域
        public let regionId: String

        /// 只读副本所在可用区
        public let zoneId: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case name = "Name"
            case uid = "Uid"
            case projectId = "ProjectId"
            case status = "Status"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case memory = "Memory"
            case storage = "Storage"
            case cpu = "Cpu"
            case version = "Version"
            case type = "Type"
            case model = "Model"
            case payMode = "PayMode"
            case weight = "Weight"
            case delayTime = "DelayTime"
            case synStatus = "SynStatus"
            case databaseDifference = "DatabaseDifference"
            case accountDifference = "AccountDifference"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case isolateTime = "IsolateTime"
            case regionId = "RegionId"
            case zoneId = "ZoneId"
        }
    }

    /// 只读实例与权重对应关系
    public struct ReadOnlyInstanceWeightPair: TCInputModel {
        /// 只读实例ID，格式如：mssqlro-3l3fgqn7
        public let readOnlyInstanceId: String

        /// 只读实例权重 ，范围是0-100
        public let readOnlyWeight: Int64

        public init(readOnlyInstanceId: String, readOnlyWeight: Int64) {
            self.readOnlyInstanceId = readOnlyInstanceId
            self.readOnlyWeight = readOnlyWeight
        }

        enum CodingKeys: String, CodingKey {
            case readOnlyInstanceId = "ReadOnlyInstanceId"
            case readOnlyWeight = "ReadOnlyWeight"
        }
    }

    /// 地域信息
    public struct RegionInfo: TCOutputModel {
        /// 地域英文ID，类似ap-guanghou
        public let region: String

        /// 地域中文名称
        public let regionName: String

        /// 地域数字ID
        public let regionId: Int64

        /// 该地域目前是否可以售卖，UNAVAILABLE-不可售卖；AVAILABLE-可售卖
        public let regionState: String

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionName = "RegionName"
            case regionId = "RegionId"
            case regionState = "RegionState"
        }
    }

    /// 用于RestoreInstance，RollbackInstance，CreateMigration、CloneDB 等接口；对恢复的库进行重命名，且支持选择要恢复的库。
    public struct RenameRestoreDatabase: TCInputModel {
        /// 库的名字，如果oldName不存在则返回失败。
        /// 在用于离线迁移任务时可不填。
        public let oldName: String?

        /// 库的新名字，在用于离线迁移时，不填则按照OldName命名，OldName和NewName不能同时不填。在用于克隆数据库时，OldName和NewName都必须填写，且不能重复
        public let newName: String?

        public init(oldName: String? = nil, newName: String? = nil) {
            self.oldName = oldName
            self.newName = newName
        }

        enum CodingKeys: String, CodingKey {
            case oldName = "OldName"
            case newName = "NewName"
        }
    }

    /// 实例绑定的标签信息
    public struct ResourceTag: TCOutputModel {
        /// 标签key
        public let tagKey: String

        /// 标签value
        public let tagValue: String

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 安全组
    public struct SecurityGroup: TCOutputModel {
        /// 项目ID
        public let projectId: Int64

        /// 创建时间，时间格式：yyyy-mm-dd hh:mm:ss
        public let createTime: String

        /// 入站规则
        public let inboundSet: [SecurityGroupPolicy]

        /// 出站规则
        public let outboundSet: [SecurityGroupPolicy]

        /// 安全组ID
        public let securityGroupId: String

        /// 安全组名称
        public let securityGroupName: String

        /// 安全组备注
        public let securityGroupRemark: String

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case createTime = "CreateTime"
            case inboundSet = "InboundSet"
            case outboundSet = "OutboundSet"
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupRemark = "SecurityGroupRemark"
        }
    }

    /// 安全组策略
    public struct SecurityGroupPolicy: TCOutputModel {
        /// 策略，ACCEPT 或者 DROP
        public let action: String

        /// 目的 IP 或 IP 段，例如172.16.0.0/12
        public let cidrIp: String

        /// 端口或者端口范围
        public let portRange: String

        /// 网络协议，支持 UDP、TCP等
        public let ipProtocol: String

        /// 规则限定的方向，OUTPUT-出战规则  INPUT-进站规则
        public let dir: String

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case cidrIp = "CidrIp"
            case portRange = "PortRange"
            case ipProtocol = "IpProtocol"
            case dir = "Dir"
        }
    }

    /// 备可用区信息
    public struct SlaveZones: TCOutputModel {
        /// 备可用区地域码
        public let slaveZone: String

        /// 备可用区
        public let slaveZoneName: String

        enum CodingKeys: String, CodingKey {
            case slaveZone = "SlaveZone"
            case slaveZoneName = "SlaveZoneName"
        }
    }

    /// 慢查询日志文件信息
    public struct SlowlogInfo: TCOutputModel {
        /// 慢查询日志文件唯一标识
        public let id: Int64

        /// 文件生成的开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 文件生成的结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 文件大小（KB）
        public let size: Int64

        /// 文件中log条数
        public let count: Int64

        /// 内网下载地址
        public let internalAddr: String

        /// 外网下载地址
        public let externalAddr: String

        /// 状态（1成功 2失败）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case size = "Size"
            case count = "Count"
            case internalAddr = "InternalAddr"
            case externalAddr = "ExternalAddr"
            case status = "Status"
        }
    }

    /// 实例可售卖的规格信息
    public struct SpecInfo: TCOutputModel {
        /// 实例规格ID，利用DescribeZones返回的SpecId，结合DescribeProductConfig返回的可售卖规格信息，可获悉某个可用区下可购买什么规格的实例
        public let specId: Int64

        /// 机型ID
        public let machineType: String

        /// 机型中文名称
        public let machineTypeName: String

        /// 数据库版本信息。取值为2008R2（表示SQL Server 2008 R2），2012SP3（表示SQL Server 2012），2016SP1（表示SQL Server 2016 SP1）
        public let version: String

        /// Version字段对应的版本名称
        public let versionName: String

        /// 内存大小，单位GB
        public let memory: Int64

        /// CPU核数
        public let cpu: Int64

        /// 此规格下最小的磁盘大小，单位GB
        public let minStorage: Int64

        /// 此规格下最大的磁盘大小，单位GB
        public let maxStorage: Int64

        /// 此规格对应的QPS大小
        public let qps: Int64

        /// 此规格的中文描述信息
        public let suitInfo: String

        /// 此规格对应的包年包月Pid
        public let pid: Int64

        /// 此规格对应的按量计费Pid列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let postPid: [Int64]?

        /// 此规格下支持的付费模式，POST-仅支持按量计费 PRE-仅支持包年包月 ALL-支持所有
        public let payModeStatus: String

        /// 产品类型，HA-高可用型(包括双机高可用，alwaysOn集群)，RO-只读副本型，SI-基础版本型
        public let instanceType: String

        /// 跨可用区类型，MultiZones-只支持跨可用区，SameZones-只支持同可用区，ALL-支持所有
        public let multiZonesStatus: String

        enum CodingKeys: String, CodingKey {
            case specId = "SpecId"
            case machineType = "MachineType"
            case machineTypeName = "MachineTypeName"
            case version = "Version"
            case versionName = "VersionName"
            case memory = "Memory"
            case cpu = "CPU"
            case minStorage = "MinStorage"
            case maxStorage = "MaxStorage"
            case qps = "QPS"
            case suitInfo = "SuitInfo"
            case pid = "Pid"
            case postPid = "PostPid"
            case payModeStatus = "PayModeStatus"
            case instanceType = "InstanceType"
            case multiZonesStatus = "MultiZonesStatus"
        }
    }

    /// 进度步骤详情
    public struct StepDetail: TCOutputModel {
        /// 具体步骤返回信息
        public let msg: String

        /// 当前步骤状态，0成功，-2未开始
        public let status: Int64

        /// 步骤名称
        public let name: String

        enum CodingKeys: String, CodingKey {
            case msg = "Msg"
            case status = "Status"
            case name = "Name"
        }
    }

    /// 可用区信息
    public struct ZoneInfo: TCOutputModel {
        /// 可用区英文ID，形如ap-guangzhou-1，表示广州一区
        public let zone: String

        /// 可用区中文名称
        public let zoneName: String

        /// 可用区数字ID
        public let zoneId: Int64

        /// 该可用区目前可售卖的规格ID，利用SpecId，结合接口DescribeProductConfig返回的数据，可获悉该可用区目前可售卖的规格大小
        public let specId: Int64

        /// 当前可用区与规格下，可售卖的数据库版本，形如2008R2（表示SQL Server 2008 R2）。其可选值有2008R2（表示SQL Server 2008 R2），2012SP3（表示SQL Server 2012），2016SP1（表示SQL Server 2016 SP1）
        public let version: String

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneName = "ZoneName"
            case zoneId = "ZoneId"
            case specId = "SpecId"
            case version = "Version"
        }
    }
}
