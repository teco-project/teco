//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCBillingError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case agentPayDealCannotDown = "FailedOperation.AgentPayDealCannotDown"
            case balanceInsufficient = "FailedOperation.BalanceInsufficient"
            case invalidAppId = "FailedOperation.InvalidAppId"
            case invalidDeal = "FailedOperation.InvalidDeal"
            case invalidVoucher = "FailedOperation.InvalidVoucher"
            case needPayTogeter = "FailedOperation.NeedPayTogeter"
            case needPayTogether = "FailedOperation.NeedPayTogether"
            case payPriceError = "FailedOperation.PayPriceError"
            case paySuccDeliverFailed = "FailedOperation.PaySuccDeliverFailed"
            case queryCountFailed = "FailedOperation.QueryCountFailed"
            case summaryDataNotReady = "FailedOperation.SummaryDataNotReady"
            case tagKeyNotExist = "FailedOperation.TagKeyNotExist"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 代理支付设备不能降配。
        public static var agentPayDealCannotDown: FailedOperation {
            FailedOperation(.agentPayDealCannotDown)
        }
        
        /// 账户余额不足。
        public static var balanceInsufficient: FailedOperation {
            FailedOperation(.balanceInsufficient)
        }
        
        /// appId不符。
        public static var invalidAppId: FailedOperation {
            FailedOperation(.invalidAppId)
        }
        
        /// 订单状态错误，只有未支付订单才能支付。
        public static var invalidDeal: FailedOperation {
            FailedOperation(.invalidDeal)
        }
        
        /// 代金券不可用。
        public static var invalidVoucher: FailedOperation {
            FailedOperation(.invalidVoucher)
        }
        
        /// 一起购买的订单必须同时支付。
        public static var needPayTogeter: FailedOperation {
            FailedOperation(.needPayTogeter)
        }
        
        /// 套餐订单需一起购买。
        public static var needPayTogether: FailedOperation {
            FailedOperation(.needPayTogether)
        }
        
        /// 支付失败，请联系腾讯云工作人员处理。
        public static var payPriceError: FailedOperation {
            FailedOperation(.payPriceError)
        }
        
        /// 支付成功但发货失败，请联系腾讯云工作人员处理。
        public static var paySuccDeliverFailed: FailedOperation {
            FailedOperation(.paySuccDeliverFailed)
        }
        
        /// 获取数据条数失败。
        ///
        /// 尝试将NeedRecordNum设置为默认值或0。
        public static var queryCountFailed: FailedOperation {
            FailedOperation(.queryCountFailed)
        }
        
        /// 汇总数据正在构建中，请稍后再试。
        public static var summaryDataNotReady: FailedOperation {
            FailedOperation(.summaryDataNotReady)
        }
        
        /// 不存在该分账标签键。
        public static var tagKeyNotExist: FailedOperation {
            FailedOperation(.tagKeyNotExist)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCBillingError.FailedOperation: Equatable {
    public static func == (lhs: TCBillingError.FailedOperation, rhs: TCBillingError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCBillingError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCBillingError.FailedOperation {
    /// - Returns: ``TCBillingError`` that holds the same error and context.
    public func toBillingError() -> TCBillingError {
        guard let code = TCBillingError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCBillingError(code, context: self.context)
    }
}

extension TCBillingError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
