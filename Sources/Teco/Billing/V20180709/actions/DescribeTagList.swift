//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Billing {
    /// DescribeTagList请求参数结构体
    public struct DescribeTagListRequest: TCPaginatedRequest {
        /// 分页偏移量，Offset=0表示第一页，如果Limit=100，则Offset=100表示第二页，Offset=200表示第三页，依次类推
        public let limit: UInt64

        /// 数量，最大值为1000
        public let offset: UInt64

        /// 分账标签键，用作模糊搜索
        public let tagKey: String?

        /// 标签类型，枚举值：0普通标签，1分账标签，用作筛选，不传获取全部标签键
        public let status: UInt64?

        /// 排序方式，枚举值：asc排升序，desc排降序
        public let orderType: String?

        public init(limit: UInt64, offset: UInt64, tagKey: String? = nil, status: UInt64? = nil, orderType: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.tagKey = tagKey
            self.status = status
            self.orderType = orderType
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case tagKey = "TagKey"
            case status = "Status"
            case orderType = "OrderType"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTagListResponse) -> DescribeTagListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), self.offset + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(limit: self.limit, offset: self.offset + .init(response.getItems().count), tagKey: self.tagKey, status: self.status, orderType: self.orderType)
        }
    }

    /// DescribeTagList返回参数结构体
    public struct DescribeTagListResponse: TCPaginatedResponse {
        /// 总记录数
        public let recordNum: UInt64

        /// 标签信息
        public let data: [TagDataInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case recordNum = "RecordNum"
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TagDataInfo`` list from the paginated response.
        public func getItems() -> [TagDataInfo] {
            self.data
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.recordNum
        }
    }

    /// 获取分账标签
    @inlinable
    public func describeTagList(_ input: DescribeTagListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTagListResponse> {
        self.client.execute(action: "DescribeTagList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取分账标签
    @inlinable
    public func describeTagList(_ input: DescribeTagListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTagListResponse {
        try await self.client.execute(action: "DescribeTagList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取分账标签
    @inlinable
    public func describeTagList(limit: UInt64, offset: UInt64, tagKey: String? = nil, status: UInt64? = nil, orderType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTagListResponse> {
        self.describeTagList(.init(limit: limit, offset: offset, tagKey: tagKey, status: status, orderType: orderType), region: region, logger: logger, on: eventLoop)
    }

    /// 获取分账标签
    @inlinable
    public func describeTagList(limit: UInt64, offset: UInt64, tagKey: String? = nil, status: UInt64? = nil, orderType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTagListResponse {
        try await self.describeTagList(.init(limit: limit, offset: offset, tagKey: tagKey, status: status, orderType: orderType), region: region, logger: logger, on: eventLoop)
    }

    /// 获取分账标签
    @inlinable
    public func describeTagListPaginated(_ input: DescribeTagListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [TagDataInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeTagList, logger: logger, on: eventLoop)
    }

    /// 获取分账标签
    @inlinable @discardableResult
    public func describeTagListPaginated(_ input: DescribeTagListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTagListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTagList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取分账标签
    ///
    /// - Returns: `AsyncSequence`s of ``TagDataInfo`` and ``DescribeTagListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTagListPaginator(_ input: DescribeTagListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTagListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTagList, logger: logger, on: eventLoop)
    }
}
