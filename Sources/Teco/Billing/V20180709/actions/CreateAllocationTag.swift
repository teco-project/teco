//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Billing {
    /// CreateAllocationTag请求参数结构体
    public struct CreateAllocationTagRequest: TCRequest {
        /// 用户分账标签键
        public let tagKey: [String]

        public init(tagKey: [String]) {
            self.tagKey = tagKey
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
        }
    }

    /// CreateAllocationTag返回参数结构体
    public struct CreateAllocationTagResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 批量设置分账标签
    @inlinable @discardableResult
    public func createAllocationTag(_ input: CreateAllocationTagRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAllocationTagResponse> {
        self.client.execute(action: "CreateAllocationTag", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量设置分账标签
    @inlinable @discardableResult
    public func createAllocationTag(_ input: CreateAllocationTagRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAllocationTagResponse {
        try await self.client.execute(action: "CreateAllocationTag", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量设置分账标签
    @inlinable @discardableResult
    public func createAllocationTag(tagKey: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAllocationTagResponse> {
        self.createAllocationTag(.init(tagKey: tagKey), region: region, logger: logger, on: eventLoop)
    }

    /// 批量设置分账标签
    @inlinable @discardableResult
    public func createAllocationTag(tagKey: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAllocationTagResponse {
        try await self.createAllocationTag(.init(tagKey: tagKey), region: region, logger: logger, on: eventLoop)
    }
}
