//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Billing {
    /// 按交易类型汇总消费详情
    public struct ActionSummaryOverviewItem: TCOutputModel {
        /// 交易类型编码
        public let actionType: String

        /// 交易类型：如包年包月新购、包年包月续费、按量计费扣费等类型
        public let actionTypeName: String

        /// 费用所占百分比，两位小数
        public let realTotalCostRatio: String

        /// 优惠后总价
        public let realTotalCost: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        /// 账单月份，格式2019-08
        public let billMonth: String

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        public let totalCost: String

        enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case actionTypeName = "ActionTypeName"
            case realTotalCostRatio = "RealTotalCostRatio"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case billMonth = "BillMonth"
            case totalCost = "TotalCost"
        }
    }

    /// 适用商品信息
    public struct ApplicableProducts: TCOutputModel {
        /// 适用商品名称，值为“全产品通用”或商品名称组成的string，以","分割。
        public let goodsName: String

        /// postPay后付费/prePay预付费/riPay预留实例/空字符串或者"*"表示全部模式。如GoodsName为多个商品名以","分割组成的string，而PayMode为"*"，表示每一件商品的模式都为"*"。
        public let payMode: String

        enum CodingKeys: String, CodingKey {
            case goodsName = "GoodsName"
            case payMode = "PayMode"
        }
    }

    /// 账单明细数据对象
    public struct BillDetail: TCOutputModel {
        /// 产品名称：用户所采购的各类云产品，例如：云服务器 CVM
        public let businessCodeName: String

        /// 子产品名称：用户采购的具体产品细分类型，例如：云服务器 CVM-标准型 S1
        public let productCodeName: String

        /// 计费模式：资源的计费模式，区分为包年包月和按量计费
        public let payModeName: String

        /// 项目名称：资源归属的项目，用户在控制台给资源自主分配项目，未分配则是默认项目
        public let projectName: String

        /// 地域：资源所属地域，如华南地区（广州）
        public let regionName: String

        /// 可用区：资源所属可用区，如广州三区
        public let zoneName: String

        /// 资源 ID：账单中出账对象 ID，不同产品因资源形态不同，资源内容不完全相同，如云服务器 CVM 为对应的实例 ID
        public let resourceId: String

        /// 资源别名：用户在控制台为资源设置的名称，如果未设置，则默认为空
        public let resourceName: String

        /// 交易类型，如包年包月新购、包年包月续费、按量计费扣费等类型
        public let actionTypeName: String

        /// 订单ID：包年包月计费模式下订购的订单号
        public let orderId: String

        /// 交易ID：结算扣费单号
        public let billId: String

        /// 扣费时间：结算扣费时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var payTime: Date

        /// 开始使用时间：产品服务开始使用时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var feeBeginTime: Date

        /// 结束使用时间：产品服务结束使用时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var feeEndTime: Date

        /// 组件列表
        public let componentSet: [BillDetailComponent]

        /// 支付者UIN：支付者的账号 ID，账号 ID 是用户在腾讯云的唯一账号标识
        public let payerUin: String

        /// 使用者UIN：实际使用资源的账号 ID
        public let ownerUin: String

        /// 操作者UIN：操作者账号 ID（预付费资源下单或后付费操作开通资源账号的 ID 或者角色 ID ）
        public let operateUin: String

        /// 标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [BillTagInfo]?

        /// 产品编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessCode: String?

        /// 子产品编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productCode: String?

        /// 交易类型编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let actionType: String?

        /// 地域ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: String?

        /// 项目ID
        public let projectId: Int64

        /// 价格属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let priceInfo: [String]?

        enum CodingKeys: String, CodingKey {
            case businessCodeName = "BusinessCodeName"
            case productCodeName = "ProductCodeName"
            case payModeName = "PayModeName"
            case projectName = "ProjectName"
            case regionName = "RegionName"
            case zoneName = "ZoneName"
            case resourceId = "ResourceId"
            case resourceName = "ResourceName"
            case actionTypeName = "ActionTypeName"
            case orderId = "OrderId"
            case billId = "BillId"
            case payTime = "PayTime"
            case feeBeginTime = "FeeBeginTime"
            case feeEndTime = "FeeEndTime"
            case componentSet = "ComponentSet"
            case payerUin = "PayerUin"
            case ownerUin = "OwnerUin"
            case operateUin = "OperateUin"
            case tags = "Tags"
            case businessCode = "BusinessCode"
            case productCode = "ProductCode"
            case actionType = "ActionType"
            case regionId = "RegionId"
            case projectId = "ProjectId"
            case priceInfo = "PriceInfo"
        }
    }

    /// 账单明细组件对象
    public struct BillDetailComponent: TCOutputModel {
        /// 组件类型：用户购买的产品或服务对应的组件大类，例如：云服务器 CVM 的组件：CPU、内存等
        public let componentCodeName: String

        /// 组件名称：用户购买的产品或服务，所包含的具体组件
        public let itemCodeName: String

        /// 组件刊例价：组件的官网原始单价（如果客户享受一口价/合同价则默认不展示）
        public let singlePrice: String

        /// 组件指定价（已废弃）
        @available(*, deprecated)
        public let specifiedPrice: String

        /// 组件价格单位：组件价格的单位，单位构成：元/用量单位/时长单位
        public let priceUnit: String

        /// 组件用量：该组件实际结算用量，组件用量 = 组件原始用量 - 抵扣用量（含资源包
        public let usedAmount: String

        /// 组件用量单位：组件用量对应的单位
        public let usedAmountUnit: String

        /// 原始用量/时长：组件被资源包抵扣前的原始用量/时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realTotalMeasure: String?

        /// 抵扣用量/时长（含资源包）：组件被资源包抵扣的用量/时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deductedMeasure: String?

        /// 使用时长：资源使用的时长
        public let timeSpan: String

        /// 时长单位：资源使用时长的单位
        public let timeUnitName: String

        /// 组件原价：原价 = 组件刊例价 * 组件用量 * 使用时长（如果客户享受一口价/合同价则默认不展示，退费类场景也默认不展示）
        public let cost: String

        /// 折扣率：本资源享受的折扣率（如果客户享受一口价/合同价则默认不展示，退费场景也默认不展示）
        public let discount: String

        /// 优惠类型
        public let reduceType: String

        /// 优惠后总价：优惠后总价=（原价 - 预留实例抵扣原价 - 节省计划抵扣原价）* 折扣率
        public let realCost: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        /// 组件类型编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let itemCode: String?

        /// 组件名称编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentCode: String?

        /// 组件单价：组件的折后单价，组件单价 = 刊例价 * 折扣
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contractPrice: String?

        /// 实例类型：购买的产品服务对应的实例类型，包括资源包、RI、SP、竞价实例。正常的实例展示默认为不展示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceType: String?

        /// 预留实例抵扣的使用时长：本产品或服务使用预留实例抵扣的使用时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riTimeSpan: String?

        /// 预留实例抵扣组件原价：本产品或服务使用预留实例抵扣的组件原价金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let originalCostWithRI: String?

        /// 节省计划抵扣率：节省计划可用余额额度范围内，节省计划对于此组件打的折扣率
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let spDeductionRate: String?

        /// 节省计划抵扣金额（已废弃）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let spDeduction: String?

        /// 节省计划抵扣组件原价：节省计划抵扣原价=节省计划包抵扣金额/节省计划抵扣率
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let originalCostWithSP: String?

        /// 混合折扣率：综合各类折扣抵扣信息后的最终折扣率，混合折扣率 = 优惠后总价 / 组件原价
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let blendedDiscount: String?

        enum CodingKeys: String, CodingKey {
            case componentCodeName = "ComponentCodeName"
            case itemCodeName = "ItemCodeName"
            case singlePrice = "SinglePrice"
            case specifiedPrice = "SpecifiedPrice"
            case priceUnit = "PriceUnit"
            case usedAmount = "UsedAmount"
            case usedAmountUnit = "UsedAmountUnit"
            case realTotalMeasure = "RealTotalMeasure"
            case deductedMeasure = "DeductedMeasure"
            case timeSpan = "TimeSpan"
            case timeUnitName = "TimeUnitName"
            case cost = "Cost"
            case discount = "Discount"
            case reduceType = "ReduceType"
            case realCost = "RealCost"
            case voucherPayAmount = "VoucherPayAmount"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case transferPayAmount = "TransferPayAmount"
            case itemCode = "ItemCode"
            case componentCode = "ComponentCode"
            case contractPrice = "ContractPrice"
            case instanceType = "InstanceType"
            case riTimeSpan = "RiTimeSpan"
            case originalCostWithRI = "OriginalCostWithRI"
            case spDeductionRate = "SPDeductionRate"
            case spDeduction = "SPDeduction"
            case originalCostWithSP = "OriginalCostWithSP"
            case blendedDiscount = "BlendedDiscount"
        }
    }

    /// 账单资源汇总数据对象
    public struct BillResourceSummary: TCOutputModel {
        /// 产品名称：用户所采购的各类云产品，例如：云服务器 CVM
        public let businessCodeName: String

        /// 子产品名称：用户采购的具体产品细分类型，例如：云服务器 CVM-标准型 S1
        public let productCodeName: String

        /// 计费模式：资源的计费模式，区分为包年包月和按量计费
        public let payModeName: String

        /// 项目名称：资源归属的项目，用户在控制台给资源自主分配项目，未分配则是默认项目
        public let projectName: String

        /// 地域：资源所属地域，如华南地区（广州）
        public let regionName: String

        /// 可用区：资源所属可用区，如广州三区
        public let zoneName: String

        /// 资源 ID：账单中出账对象 ID，不同产品因资源形态不同，资源内容不完全相同，如云服务器 CVM 为对应的实例 ID
        public let resourceId: String

        /// 资源别名：用户在控制台为资源设置的名称，如果未设置，则默认为空
        public let resourceName: String

        /// 交易类型：如包年包月新购、包年包月续费、按量计费扣费等类型
        public let actionTypeName: String

        /// 订单ID：包年包月计费模式下订购的订单号
        public let orderId: String

        /// 扣费时间：结算扣费时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var payTime: Date

        /// 开始使用时间：产品服务开始使用时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var feeBeginTime: Date

        /// 结束使用时间：产品服务结束使用时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var feeEndTime: Date

        /// 配置描述：该资源下的计费项名称和用量合并展示，仅在资源账单体现
        public let configDesc: String

        /// 扩展字段1：产品对应的扩展属性信息，仅在资源账单体现
        public let extendField1: String

        /// 扩展字段2：产品对应的扩展属性信息，仅在资源账单体现
        public let extendField2: String

        /// 原价：原价 = 组件刊例价 * 组件用量 * 使用时长（如果客户享受一口价/合同价则默认不展示，退费类场景也默认不展示）
        public let totalCost: String

        /// 折扣率：本资源享受的折扣率（如果客户享受一口价/合同价则默认不展示，退费场景也默认不展示）
        public let discount: String

        /// 优惠类型
        public let reduceType: String

        /// 优惠后总价
        public let realTotalCost: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        /// 扩展字段3：产品对应的扩展属性信息，仅在资源账单体现
        public let extendField3: String

        /// 扩展字段4：产品对应的扩展属性信息，仅在资源账单体现
        public let extendField4: String

        /// 扩展字段5：产品对应的扩展属性信息，仅在资源账单体现
        public let extendField5: String

        /// 标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [BillTagInfo]?

        /// 支付者UIN：支付者的账号 ID，账号 ID 是用户在腾讯云的唯一账号标识
        public let payerUin: String

        /// 使用者UIN：实际使用资源的账号 ID
        public let ownerUin: String

        /// 操作者UIN：操作者账号 ID（预付费资源下单或后付费操作开通资源账号的 ID 或者角色 ID ）
        public let operateUin: String

        /// 产品编码
        public let businessCode: String

        /// 子产品编码
        public let productCode: String

        /// 地域ID
        public let regionId: Int64

        /// 实例类型：购买的产品服务对应的实例类型，包括资源包、RI、SP、竞价实例。正常的实例展示默认为不展示
        public let instanceType: String

        /// 预留实例抵扣组件原价：本产品或服务使用预留实例抵扣的组件原价金额
        public let originalCostWithRI: String

        /// 节省计划抵扣金额（已废弃）
        @available(*, deprecated)
        public let spDeduction: String?

        /// 节省计划抵扣组件原价：节省计划抵扣原价=节省计划包抵扣金额/节省计划抵扣率
        public let originalCostWithSP: String

        enum CodingKeys: String, CodingKey {
            case businessCodeName = "BusinessCodeName"
            case productCodeName = "ProductCodeName"
            case payModeName = "PayModeName"
            case projectName = "ProjectName"
            case regionName = "RegionName"
            case zoneName = "ZoneName"
            case resourceId = "ResourceId"
            case resourceName = "ResourceName"
            case actionTypeName = "ActionTypeName"
            case orderId = "OrderId"
            case payTime = "PayTime"
            case feeBeginTime = "FeeBeginTime"
            case feeEndTime = "FeeEndTime"
            case configDesc = "ConfigDesc"
            case extendField1 = "ExtendField1"
            case extendField2 = "ExtendField2"
            case totalCost = "TotalCost"
            case discount = "Discount"
            case reduceType = "ReduceType"
            case realTotalCost = "RealTotalCost"
            case voucherPayAmount = "VoucherPayAmount"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case transferPayAmount = "TransferPayAmount"
            case extendField3 = "ExtendField3"
            case extendField4 = "ExtendField4"
            case extendField5 = "ExtendField5"
            case tags = "Tags"
            case payerUin = "PayerUin"
            case ownerUin = "OwnerUin"
            case operateUin = "OperateUin"
            case businessCode = "BusinessCode"
            case productCode = "ProductCode"
            case regionId = "RegionId"
            case instanceType = "InstanceType"
            case originalCostWithRI = "OriginalCostWithRI"
            case spDeduction = "SPDeduction"
            case originalCostWithSP = "OriginalCostWithSP"
        }
    }

    /// 账单 Tag 信息
    public struct BillTagInfo: TCOutputModel {
        /// 分账标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 收支明细的流水信息
    public struct BillTransactionInfo: TCOutputModel {
        /// 收支类型：deduct 扣费, recharge 充值, return 退费， block 冻结, unblock 解冻
        public let actionType: String

        /// 流水金额，单位（分）；正数表示入账，负数表示出账
        public let amount: Int64

        /// 可用余额，单位（分）；正数表示入账，负数表示出账
        public let balance: Int64

        /// 流水号，如20190131020000236005203583326401
        public let billId: String

        /// 描述信息
        public let operationInfo: String

        /// 操作时间"2019-01-31 23:35:10.000"
        public let operationTime: String

        /// 现金账户余额，单位（分）
        public let cash: Int64

        /// 赠送金余额，单位（分）
        public let incentive: Int64

        /// 冻结余额，单位（分）
        public let freezing: Int64

        /// 交易渠道
        public let payChannel: String

        /// 扣费模式：trade 包年包月(预付费)，hourh  按量-小时结，hourd 按量-日结，hourm 按量-月结，month 按量-月结
        public let deductMode: String

        enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case amount = "Amount"
            case balance = "Balance"
            case billId = "BillId"
            case operationInfo = "OperationInfo"
            case operationTime = "OperationTime"
            case cash = "Cash"
            case incentive = "Incentive"
            case freezing = "Freezing"
            case payChannel = "PayChannel"
            case deductMode = "DeductMode"
        }
    }

    /// 产品汇总信息
    public struct BusinessSummaryInfo: TCOutputModel {
        /// 产品编码
        public let businessCode: String?

        /// 产品名称：用户所采购的各类云产品，例如：云服务器 CVM
        public let businessCodeName: String?

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCost: String?

        /// 优惠后总价
        public let realTotalCost: String?

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String?

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String?

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String?

        /// 分成金账户支出：通过分成金账户支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        enum CodingKeys: String, CodingKey {
            case businessCode = "BusinessCode"
            case businessCodeName = "BusinessCodeName"
            case totalCost = "TotalCost"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
        }
    }

    /// 按产品汇总产品详情
    public struct BusinessSummaryOverviewItem: TCOutputModel {
        /// 产品编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessCode: String?

        /// 产品名称：用户所采购的各类云产品，例如：云服务器 CVM
        public let businessCodeName: String

        /// 费用所占百分比，两位小数
        public let realTotalCostRatio: String

        /// 优惠后总价
        public let realTotalCost: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        public let transferPayAmount: String

        /// 账单月份，格式2019-08
        public let billMonth: String

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        public let totalCost: String

        enum CodingKeys: String, CodingKey {
            case businessCode = "BusinessCode"
            case businessCodeName = "BusinessCodeName"
            case realTotalCostRatio = "RealTotalCostRatio"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case billMonth = "BillMonth"
            case totalCost = "TotalCost"
        }
    }

    /// 按产品汇总总费用
    public struct BusinessSummaryTotal: TCOutputModel {
        /// 优惠后总价
        public let realTotalCost: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        public let transferPayAmount: String

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        public let totalCost: String

        enum CodingKeys: String, CodingKey {
            case realTotalCost = "RealTotalCost"
            case voucherPayAmount = "VoucherPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case cashPayAmount = "CashPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case totalCost = "TotalCost"
        }
    }

    /// 产品过滤条件
    public struct ConditionBusiness: TCOutputModel {
        /// 产品名称代码
        public let businessCode: String

        /// 产品名称
        public let businessCodeName: String

        enum CodingKeys: String, CodingKey {
            case businessCode = "BusinessCode"
            case businessCodeName = "BusinessCodeName"
        }
    }

    /// 付费模式过滤条件
    public struct ConditionPayMode: TCOutputModel {
        /// 付费模式
        public let payMode: String

        /// 付费模式名称
        public let payModeName: String

        enum CodingKeys: String, CodingKey {
            case payMode = "PayMode"
            case payModeName = "PayModeName"
        }
    }

    /// 项目过滤条件
    public struct ConditionProject: TCOutputModel {
        /// 项目ID
        public let projectId: String

        /// 项目名称
        public let projectName: String

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case projectName = "ProjectName"
        }
    }

    /// 地域过滤条件
    public struct ConditionRegion: TCOutputModel {
        /// 地域ID
        public let regionId: String

        /// 地域名称
        public let regionName: String

        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case regionName = "RegionName"
        }
    }

    /// 账单筛选条件对象
    public struct Conditions: TCInputModel {
        /// 只支持6和12两个值
        public let timeRange: UInt64?

        /// 产品名称代码
        public let businessCode: String?

        /// 项目ID
        public let projectId: Int64?

        /// 地域ID
        public let regionId: Int64?

        /// 付费模式，可选prePay和postPay
        public let payMode: String?

        /// 资源关键字
        public let resourceKeyword: String?

        /// 产品名称代码
        public let businessCodes: [String]?

        /// 子产品名称代码
        public let productCodes: [String]?

        /// 地域ID
        public let regionIds: [Int64]?

        /// 项目ID
        public let projectIds: [Int64]?

        /// 付费模式，可选prePay和postPay
        public let payModes: [String]?

        /// 交易类型
        public let actionTypes: [String]?

        /// 是否隐藏0元流水
        public let hideFreeCost: Int64?

        /// 排序规则，可选desc和asc
        public let orderByCost: String?

        /// 交易ID
        public let billIds: [String]?

        /// 组件编码
        public let componentCodes: [String]?

        /// 文件ID
        public let fileIds: [String]?

        /// 文件类型
        public let fileTypes: [String]?

        /// 状态
        public let status: [UInt64]?

        public init(timeRange: UInt64? = nil, businessCode: String? = nil, projectId: Int64? = nil, regionId: Int64? = nil, payMode: String? = nil, resourceKeyword: String? = nil, businessCodes: [String]? = nil, productCodes: [String]? = nil, regionIds: [Int64]? = nil, projectIds: [Int64]? = nil, payModes: [String]? = nil, actionTypes: [String]? = nil, hideFreeCost: Int64? = nil, orderByCost: String? = nil, billIds: [String]? = nil, componentCodes: [String]? = nil, fileIds: [String]? = nil, fileTypes: [String]? = nil, status: [UInt64]? = nil) {
            self.timeRange = timeRange
            self.businessCode = businessCode
            self.projectId = projectId
            self.regionId = regionId
            self.payMode = payMode
            self.resourceKeyword = resourceKeyword
            self.businessCodes = businessCodes
            self.productCodes = productCodes
            self.regionIds = regionIds
            self.projectIds = projectIds
            self.payModes = payModes
            self.actionTypes = actionTypes
            self.hideFreeCost = hideFreeCost
            self.orderByCost = orderByCost
            self.billIds = billIds
            self.componentCodes = componentCodes
            self.fileIds = fileIds
            self.fileTypes = fileTypes
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case timeRange = "TimeRange"
            case businessCode = "BusinessCode"
            case projectId = "ProjectId"
            case regionId = "RegionId"
            case payMode = "PayMode"
            case resourceKeyword = "ResourceKeyword"
            case businessCodes = "BusinessCodes"
            case productCodes = "ProductCodes"
            case regionIds = "RegionIds"
            case projectIds = "ProjectIds"
            case payModes = "PayModes"
            case actionTypes = "ActionTypes"
            case hideFreeCost = "HideFreeCost"
            case orderByCost = "OrderByCost"
            case billIds = "BillIds"
            case componentCodes = "ComponentCodes"
            case fileIds = "FileIds"
            case fileTypes = "FileTypes"
            case status = "Status"
        }
    }

    /// 消耗按产品汇总详情
    public struct ConsumptionBusinessSummaryDataItem: TCOutputModel {
        /// 产品名称代码
        public let businessCode: String

        /// 产品名称
        public let businessCodeName: String

        /// 折后总价
        public let realTotalCost: String

        /// 费用趋势
        public let trend: ConsumptionSummaryTrend

        /// 现金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cashPayAmount: String?

        /// 赠送金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let incentivePayAmount: String?

        /// 代金券
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let voucherPayAmount: String?

        /// 分成金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        enum CodingKeys: String, CodingKey {
            case businessCode = "BusinessCode"
            case businessCodeName = "BusinessCodeName"
            case realTotalCost = "RealTotalCost"
            case trend = "Trend"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
        }
    }

    /// 消耗按项目汇总详情
    public struct ConsumptionProjectSummaryDataItem: TCOutputModel {
        /// 项目ID
        public let projectId: String

        /// 项目名称
        public let projectName: String

        /// 折后总价
        public let realTotalCost: String

        /// 趋势
        public let trend: ConsumptionSummaryTrend

        /// 产品消耗详情
        public let business: [ConsumptionBusinessSummaryDataItem]

        /// 现金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cashPayAmount: String?

        /// 赠送金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let incentivePayAmount: String?

        /// 代金券
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let voucherPayAmount: String?

        /// 分成金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case realTotalCost = "RealTotalCost"
            case trend = "Trend"
            case business = "Business"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
        }
    }

    /// 消耗按地域汇总详情
    public struct ConsumptionRegionSummaryDataItem: TCOutputModel {
        /// 地域ID
        public let regionId: String

        /// 地域名称
        public let regionName: String

        /// 折后总价
        public let realTotalCost: String

        /// 趋势
        public let trend: ConsumptionSummaryTrend

        /// 产品消费详情
        public let business: [ConsumptionBusinessSummaryDataItem]

        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case regionName = "RegionName"
            case realTotalCost = "RealTotalCost"
            case trend = "Trend"
            case business = "Business"
        }
    }

    /// 消耗按资源汇总过滤条件
    public struct ConsumptionResourceSummaryConditionValue: TCOutputModel {
        /// 产品列表
        public let business: [ConditionBusiness]

        /// 项目列表
        public let project: [ConditionProject]

        /// 地域列表
        public let region: [ConditionRegion]

        /// 付费模式列表
        public let payMode: [ConditionPayMode]

        enum CodingKeys: String, CodingKey {
            case business = "Business"
            case project = "Project"
            case region = "Region"
            case payMode = "PayMode"
        }
    }

    /// 消耗按资源汇总详情
    public struct ConsumptionResourceSummaryDataItem: TCOutputModel {
        /// 资源ID
        public let resourceId: String

        /// 资源名称
        public let resourceName: String

        /// 折后总价
        public let realTotalCost: String

        /// 现金花费
        public let cashPayAmount: String

        /// 项目ID
        public let projectId: String

        /// 项目名称
        public let projectName: String

        /// 地域ID
        public let regionId: String

        /// 地域名称
        public let regionName: String

        /// 付费模式
        public let payMode: String

        /// 付费模式名称
        public let payModeName: String

        /// 产品名称代码
        public let businessCode: String

        /// 产品名称
        public let businessCodeName: String

        /// 消耗类型
        public let consumptionTypeName: String

        /// 折前价
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realCost: String?

        /// 费用起始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let feeBeginTime: String?

        /// 费用结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let feeEndTime: String?

        /// 天数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dayDiff: String?

        /// 每日消耗
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dailyTotalCost: String?

        /// 订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orderId: String?

        /// 代金券
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let voucherPayAmount: String?

        /// 赠送金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let incentivePayAmount: String?

        /// 分成金
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceName = "ResourceName"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case regionId = "RegionId"
            case regionName = "RegionName"
            case payMode = "PayMode"
            case payModeName = "PayModeName"
            case businessCode = "BusinessCode"
            case businessCodeName = "BusinessCodeName"
            case consumptionTypeName = "ConsumptionTypeName"
            case realCost = "RealCost"
            case feeBeginTime = "FeeBeginTime"
            case feeEndTime = "FeeEndTime"
            case dayDiff = "DayDiff"
            case dailyTotalCost = "DailyTotalCost"
            case orderId = "OrderId"
            case voucherPayAmount = "VoucherPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case transferPayAmount = "TransferPayAmount"
        }
    }

    /// 消耗汇总详情
    public struct ConsumptionSummaryTotal: TCOutputModel {
        /// 折后总价
        public let realTotalCost: String

        enum CodingKeys: String, CodingKey {
            case realTotalCost = "RealTotalCost"
        }
    }

    /// 消耗费用趋势
    public struct ConsumptionSummaryTrend: TCOutputModel {
        /// 趋势类型，upward上升/downward下降/none无
        public let type: String

        /// 趋势值，Type为none是该字段值为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
        }
    }

    /// cos产品用量明细返回数据结构
    public struct CosDetailSets: TCOutputModel {
        /// 存储桶名称
        public let bucketName: String

        /// 用量开始时间
        public let dosageBeginTime: String

        /// 用量结束时间
        public let dosageEndTime: String

        /// 子产品名称
        public let subProductCodeName: String

        /// 计费项名称
        public let billingItemCodeName: String

        /// 用量
        public let dosageValue: String

        /// 单位
        public let unit: String

        enum CodingKeys: String, CodingKey {
            case bucketName = "BucketName"
            case dosageBeginTime = "DosageBeginTime"
            case dosageEndTime = "DosageEndTime"
            case subProductCodeName = "SubProductCodeName"
            case billingItemCodeName = "BillingItemCodeName"
            case dosageValue = "DosageValue"
            case unit = "Unit"
        }
    }

    /// 消耗组件明细
    public struct CostComponentSet: TCOutputModel {
        /// 组件类型名称
        public let componentCodeName: String

        /// 组件名称
        public let itemCodeName: String

        /// 刊例价
        public let singlePrice: String

        /// 刊例价单位
        public let priceUnit: String

        /// 用量
        public let usedAmount: String

        /// 用量单位
        public let usedAmountUnit: String

        /// 原价
        public let cost: String

        /// 折扣
        public let discount: String

        /// 折后价
        public let realCost: String

        /// 代金券支付金额
        public let voucherPayAmount: String

        /// 现金支付金额
        public let cashPayAmount: String

        /// 赠送金支付金额
        public let incentivePayAmount: String

        enum CodingKeys: String, CodingKey {
            case componentCodeName = "ComponentCodeName"
            case itemCodeName = "ItemCodeName"
            case singlePrice = "SinglePrice"
            case priceUnit = "PriceUnit"
            case usedAmount = "UsedAmount"
            case usedAmountUnit = "UsedAmountUnit"
            case cost = "Cost"
            case discount = "Discount"
            case realCost = "RealCost"
            case voucherPayAmount = "VoucherPayAmount"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
        }
    }

    /// 消耗明细数据类型
    public struct CostDetail: TCOutputModel {
        /// 支付者uin
        public let payerUin: String

        /// 产品名称
        public let businessCodeName: String

        /// 子产品名称
        public let productCodeName: String

        /// 计费模式名称
        public let payModeName: String

        /// 项目名称
        public let projectName: String

        /// 区域名称
        public let regionName: String

        /// 地区名称
        public let zoneName: String

        /// 资源id
        public let resourceId: String

        /// 资源名称
        public let resourceName: String

        /// 类型名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let actionTypeName: String?

        /// 订单id
        public let orderId: String

        /// 交易id
        public let billId: String

        /// 费用开始时间
        public let feeBeginTime: String

        /// 费用结束时间
        public let feeEndTime: String

        /// 组件明细
        public let componentSet: [CostComponentSet]

        /// 子产品名称代码
        public let productCode: String

        enum CodingKeys: String, CodingKey {
            case payerUin = "PayerUin"
            case businessCodeName = "BusinessCodeName"
            case productCodeName = "ProductCodeName"
            case payModeName = "PayModeName"
            case projectName = "ProjectName"
            case regionName = "RegionName"
            case zoneName = "ZoneName"
            case resourceId = "ResourceId"
            case resourceName = "ResourceName"
            case actionTypeName = "ActionTypeName"
            case orderId = "OrderId"
            case billId = "BillId"
            case feeBeginTime = "FeeBeginTime"
            case feeEndTime = "FeeEndTime"
            case componentSet = "ComponentSet"
            case productCode = "ProductCode"
        }
    }

    /// 订单数据对象
    public struct Deal: TCOutputModel {
        /// 订单号
        public let orderId: String

        /// 订单的状态 1：未支付 2：已支付3：发货中 4：已发货 5：发货失败 6：已退款 7：已关单 8：订单过期 9：订单已失效 10：产品已失效 11：代付拒绝 12：支付中
        public let status: Int64

        /// 支付者
        public let payer: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 创建人
        public let creator: String

        /// 实际支付金额（分）
        public let realTotalCost: Int64

        /// 代金券抵扣金额（分）
        public let voucherDecline: Int64

        /// 项目ID
        public let projectId: Int64

        /// 产品分类ID
        public let goodsCategoryId: Int64

        /// 产品详情
        public let productInfo: [ProductInfo]

        /// 时长
        public let timeSpan: Float

        /// 时间单位
        public let timeUnit: String

        /// 货币单位
        public let currency: String

        /// 折扣率
        public let policy: Float

        /// 单价（分）
        public let price: Float

        /// 原价（分）
        public let totalCost: Float

        /// 产品编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productCode: String?

        /// 子产品编码
        public let subProductCode: String

        /// 大订单号
        public let bigDealId: String

        /// 退费公式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let formula: String?

        /// 退费涉及订单信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let refReturnDeals: String?

        /// 付费模式：prePay 预付费 postPay后付费 riPay预留实例
        public let payMode: String

        /// 交易类型
        /// modifyNetworkMode 调整带宽模式
        /// modifyNetworkSize 调整带宽大小
        /// refund 退款
        /// downgrade 降配
        /// upgrade 升配
        /// renew 续费
        /// purchase 购买
        /// preMoveOut 包年包月迁出资源
        /// preMoveIn 包年包月迁入资源
        /// preToPost 预付费转后付费
        /// postMoveOut 按量计费迁出资源
        /// postMoveIn 按量计费迁入资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let action: String?

        /// 产品编码中文名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productName: String?

        /// 子产品编码中文名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subProductName: String?

        /// 订单对应的资源id, 查询参数Limit超过200，将返回null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceId: [String]?

        enum CodingKeys: String, CodingKey {
            case orderId = "OrderId"
            case status = "Status"
            case payer = "Payer"
            case createTime = "CreateTime"
            case creator = "Creator"
            case realTotalCost = "RealTotalCost"
            case voucherDecline = "VoucherDecline"
            case projectId = "ProjectId"
            case goodsCategoryId = "GoodsCategoryId"
            case productInfo = "ProductInfo"
            case timeSpan = "TimeSpan"
            case timeUnit = "TimeUnit"
            case currency = "Currency"
            case policy = "Policy"
            case price = "Price"
            case totalCost = "TotalCost"
            case productCode = "ProductCode"
            case subProductCode = "SubProductCode"
            case bigDealId = "BigDealId"
            case formula = "Formula"
            case refReturnDeals = "RefReturnDeals"
            case payMode = "PayMode"
            case action = "Action"
            case productName = "ProductName"
            case subProductName = "SubProductName"
            case resourceId = "ResourceId"
        }
    }

    /// 由时间和值组成的数据结构
    public struct DetailPoint: TCOutputModel {
        /// 时间
        public let time: String

        /// 值
        public let value: String

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case value = "Value"
        }
    }

    /// 由域名和使用明细组成的数据结构
    public struct DetailSet: TCOutputModel {
        /// 域名
        public let domain: String

        /// 使用数据明细
        public let detailPoints: [DetailPoint]

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceID: String?

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case detailPoints = "DetailPoints"
            case instanceID = "InstanceID"
        }
    }

    /// 不适用商品信息
    public struct ExcludedProducts: TCOutputModel {
        /// 不适用商品名称
        public let goodsName: String

        /// postPay后付费/prePay预付费/riPay预留实例/空字符串或者"*"表示全部模式。
        public let payMode: String

        enum CodingKeys: String, CodingKey {
            case goodsName = "GoodsName"
            case payMode = "PayMode"
        }
    }

    /// 按计费模式汇总消费详情
    public struct PayModeSummaryOverviewItem: TCOutputModel {
        /// 计费模式编码
        public let payMode: String

        /// 计费模式：区分为包年包月和按量计费
        public let payModeName: String

        /// 费用所占百分比，两位小数
        public let realTotalCostRatio: String

        /// 优惠后总价
        public let realTotalCost: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        public let transferPayAmount: String

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        public let totalCost: String

        /// 按交易类型汇总消费详情
        public let detail: [ActionSummaryOverviewItem]

        enum CodingKeys: String, CodingKey {
            case payMode = "PayMode"
            case payModeName = "PayModeName"
            case realTotalCostRatio = "RealTotalCostRatio"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case totalCost = "TotalCost"
            case detail = "Detail"
        }
    }

    /// 商品详细信息
    public struct ProductInfo: TCInputModel, TCOutputModel {
        /// 商品详情名称标识
        public let name: String

        /// 商品详情
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 按项目汇总消费详情
    public struct ProjectSummaryOverviewItem: TCOutputModel {
        /// 项目ID
        public let projectId: String

        /// 项目名称：资源归属的项目，用户在控制台给资源自主分配项目，未分配则是默认项目
        public let projectName: String

        /// 费用所占百分比，两位小数
        public let realTotalCostRatio: String

        /// 优惠后总价
        public let realTotalCost: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        public let transferPayAmount: String

        /// 账单月份，格式2019-08
        public let billMonth: String

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        public let totalCost: String

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case realTotalCostRatio = "RealTotalCostRatio"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case billMonth = "BillMonth"
            case totalCost = "TotalCost"
        }
    }

    /// 按地域汇总消费详情
    public struct RegionSummaryOverviewItem: TCOutputModel {
        /// 地域ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: String?

        /// 地域名称：资源所属地域，例如华南地区（广州）
        public let regionName: String

        /// 费用所占百分比，两位小数
        public let realTotalCostRatio: String

        /// 优惠后总价
        public let realTotalCost: String

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String

        /// 分成金账户支出：通过分成金账户支付的金额
        public let transferPayAmount: String

        /// 账单月份，格式2019-08
        public let billMonth: String

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        public let totalCost: String

        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case regionName = "RegionName"
            case realTotalCostRatio = "RealTotalCostRatio"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case billMonth = "BillMonth"
            case totalCost = "TotalCost"
        }
    }

    /// 账单多维度汇总消费详情
    public struct SummaryDetail: TCOutputModel {
        /// 账单维度编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupKey: String?

        /// 账单维度值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupValue: String?

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        public let totalCost: String?

        /// 优惠后总价
        public let realTotalCost: String?

        /// 现金账户支出：通过现金账户支付的金额
        public let cashPayAmount: String?

        /// 赠送账户支出：使用赠送金支付的金额
        public let incentivePayAmount: String?

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        public let voucherPayAmount: String?

        /// 分成金账户支出：通过分成金账户支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        /// 产品汇总信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let business: [BusinessSummaryInfo]?

        enum CodingKeys: String, CodingKey {
            case groupKey = "GroupKey"
            case groupValue = "GroupValue"
            case totalCost = "TotalCost"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case business = "Business"
        }
    }

    /// 总数
    public struct SummaryTotal: TCOutputModel {
        /// 优惠后总价
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realTotalCost: String?

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCost: String?

        enum CodingKeys: String, CodingKey {
            case realTotalCost = "RealTotalCost"
            case totalCost = "TotalCost"
        }
    }

    /// 按标签汇总消费详情
    public struct TagSummaryOverviewItem: TCOutputModel {
        /// 标签值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagValue: String?

        /// 费用所占百分比，两位小数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realTotalCostRatio: String?

        /// 优惠后总价
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realTotalCost: String?

        /// 现金账户支出：通过现金账户支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cashPayAmount: String?

        /// 赠送账户支出：使用赠送金支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let incentivePayAmount: String?

        /// 优惠券支出：使用各类优惠券（如代金券、现金券等）支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let voucherPayAmount: String?

        /// 分成金账户支出：通过分成金账户支付的金额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transferPayAmount: String?

        /// 原价，单位为元。TotalCost字段自账单3.0（即2021-05）之后开始生效，账单3.0之前返回"-"。合同价的情况下，TotalCost字段与官网价格存在差异，也返回“-”。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCost: String?

        enum CodingKeys: String, CodingKey {
            case tagValue = "TagValue"
            case realTotalCostRatio = "RealTotalCostRatio"
            case realTotalCost = "RealTotalCost"
            case cashPayAmount = "CashPayAmount"
            case incentivePayAmount = "IncentivePayAmount"
            case voucherPayAmount = "VoucherPayAmount"
            case transferPayAmount = "TransferPayAmount"
            case totalCost = "TotalCost"
        }
    }

    /// 购买商品信息
    public struct UsageDetails: TCOutputModel {
        /// 商品名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productName: String?

        /// 商品细节
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subProductName: String?

        enum CodingKeys: String, CodingKey {
            case productName = "ProductName"
            case subProductName = "SubProductName"
        }
    }

    /// 使用记录
    public struct UsageRecords: TCOutputModel {
        /// 使用金额（微分）
        public let usedAmount: Int64

        /// 使用时间
        public let usedTime: String

        /// 使用记录细节
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usageDetails: [UsageDetails]?

        enum CodingKeys: String, CodingKey {
            case usedAmount = "UsedAmount"
            case usedTime = "UsedTime"
            case usageDetails = "UsageDetails"
        }
    }

    /// 代金券相关信息
    public struct VoucherInfos: TCOutputModel {
        /// 代金券拥有者
        public let ownerUin: String

        /// 券状态：待使用：unUsed，已使用： used，已发货：delivered，已作废： cancel，已过期：overdue
        public let status: String

        /// 代金券面额（微分）
        public let nominalValue: Int64

        /// 剩余金额（微分）
        public let balance: Int64

        /// 代金券id
        public let voucherId: String

        /// postPay后付费/prePay预付费/riPay预留实例/空字符串或者'*'表示全部模式
        public let payMode: String

        /// 付费场景PayMode=postPay时：spotpay-竞价实例,"settle account"-普通后付费PayMode=prePay时：purchase-包年包月新购，renew-包年包月续费（自动续费），modify-包年包月配置变更(变配）PayMode=riPay时：oneOffFee-预留实例预付，hourlyFee-预留实例每小时扣费，*-支持全部付费场景
        public let payScene: String

        /// 有效期生效时间
        public let beginTime: String

        /// 有效期截止时间
        public let endTime: String

        /// 适用商品信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let applicableProducts: ApplicableProducts?

        /// 不适用商品信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let excludedProducts: [ExcludedProducts]?

        enum CodingKeys: String, CodingKey {
            case ownerUin = "OwnerUin"
            case status = "Status"
            case nominalValue = "NominalValue"
            case balance = "Balance"
            case voucherId = "VoucherId"
            case payMode = "PayMode"
            case payScene = "PayScene"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case applicableProducts = "ApplicableProducts"
            case excludedProducts = "ExcludedProducts"
        }
    }
}
