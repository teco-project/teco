//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCCiamError {
    public struct UnsupportedOperation: TCCiamErrorType {
        enum Code: String {
            case enabledAuthSourceCanNotBeDeleted = "UnsupportedOperation.EnabledAuthSourceCanNotBeDeleted"
            case enabledAuthSourceCanNotBeUpdated = "UnsupportedOperation.EnabledAuthSourceCanNotBeUpdated"
            case internalUserProperty = "UnsupportedOperation.InternalUserProperty"
            case linkedAppUserPropertyCanNotBeDeleted = "UnsupportedOperation.LinkedAppUserPropertyCanNotBeDeleted"
            case linkedAuthSourceCanNotBeClosed = "UnsupportedOperation.LinkedAuthSourceCanNotBeClosed"
            case linkedAuthSourceCanNotBeDeleted = "UnsupportedOperation.LinkedAuthSourceCanNotBeDeleted"
            case linkedAuthSourceUserPropertyCanNotBeDeleted = "UnsupportedOperation.LinkedAuthSourceUserPropertyCanNotBeDeleted"
            case linkedUserPropertyCanNotBeDeleted = "UnsupportedOperation.LinkedUserPropertyCanNotBeDeleted"
            case platformDomainSuffixCanNotBeUsed = "UnsupportedOperation.PlatformDomainSuffixCanNotBeUsed"
            case whenUserExistUserPropertyCanNotBeDeleted = "UnsupportedOperation.WhenUserExistUserPropertyCanNotBeDeleted"
            case other = "UnsupportedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 认证源已启用，不允许删除。
        public static var enabledAuthSourceCanNotBeDeleted: UnsupportedOperation {
            UnsupportedOperation(.enabledAuthSourceCanNotBeDeleted)
        }

        /// 认证源已启用，不允许更新。
        public static var enabledAuthSourceCanNotBeUpdated: UnsupportedOperation {
            UnsupportedOperation(.enabledAuthSourceCanNotBeUpdated)
        }

        /// 内置属性不支持该操作。
        public static var internalUserProperty: UnsupportedOperation {
            UnsupportedOperation(.internalUserProperty)
        }

        /// 属性被应用关联，不允许删除。
        public static var linkedAppUserPropertyCanNotBeDeleted: UnsupportedOperation {
            UnsupportedOperation(.linkedAppUserPropertyCanNotBeDeleted)
        }

        /// 认证源被应用关联，不允许关闭。
        public static var linkedAuthSourceCanNotBeClosed: UnsupportedOperation {
            UnsupportedOperation(.linkedAuthSourceCanNotBeClosed)
        }

        /// 认证源被应用关联，不允许删除。
        public static var linkedAuthSourceCanNotBeDeleted: UnsupportedOperation {
            UnsupportedOperation(.linkedAuthSourceCanNotBeDeleted)
        }

        /// 属性被认证源关联，不允许删除。
        public static var linkedAuthSourceUserPropertyCanNotBeDeleted: UnsupportedOperation {
            UnsupportedOperation(.linkedAuthSourceUserPropertyCanNotBeDeleted)
        }

        /// 属性被其它模块关联，不允许删除。
        public static var linkedUserPropertyCanNotBeDeleted: UnsupportedOperation {
            UnsupportedOperation(.linkedUserPropertyCanNotBeDeleted)
        }

        /// 不允许使用平台域名后缀作为自有域名后缀。
        public static var platformDomainSuffixCanNotBeUsed: UnsupportedOperation {
            UnsupportedOperation(.platformDomainSuffixCanNotBeUsed)
        }

        /// 用户池下已存在用户，用户属性不允许被删除。
        public static var whenUserExistUserPropertyCanNotBeDeleted: UnsupportedOperation {
            UnsupportedOperation(.whenUserExistUserPropertyCanNotBeDeleted)
        }

        /// 操作不支持。
        public static var other: UnsupportedOperation {
            UnsupportedOperation(.other)
        }

        public func asCiamError() -> TCCiamError {
            let code: TCCiamError.Code
            switch self.error {
            case .enabledAuthSourceCanNotBeDeleted:
                code = .unsupportedOperation_EnabledAuthSourceCanNotBeDeleted
            case .enabledAuthSourceCanNotBeUpdated:
                code = .unsupportedOperation_EnabledAuthSourceCanNotBeUpdated
            case .internalUserProperty:
                code = .unsupportedOperation_InternalUserProperty
            case .linkedAppUserPropertyCanNotBeDeleted:
                code = .unsupportedOperation_LinkedAppUserPropertyCanNotBeDeleted
            case .linkedAuthSourceCanNotBeClosed:
                code = .unsupportedOperation_LinkedAuthSourceCanNotBeClosed
            case .linkedAuthSourceCanNotBeDeleted:
                code = .unsupportedOperation_LinkedAuthSourceCanNotBeDeleted
            case .linkedAuthSourceUserPropertyCanNotBeDeleted:
                code = .unsupportedOperation_LinkedAuthSourceUserPropertyCanNotBeDeleted
            case .linkedUserPropertyCanNotBeDeleted:
                code = .unsupportedOperation_LinkedUserPropertyCanNotBeDeleted
            case .platformDomainSuffixCanNotBeUsed:
                code = .unsupportedOperation_PlatformDomainSuffixCanNotBeUsed
            case .whenUserExistUserPropertyCanNotBeDeleted:
                code = .unsupportedOperation_WhenUserExistUserPropertyCanNotBeDeleted
            case .other:
                code = .unsupportedOperation
            }
            return TCCiamError(code, context: self.context)
        }
    }
}
