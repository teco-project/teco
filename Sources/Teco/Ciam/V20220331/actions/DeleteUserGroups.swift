//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ciam {
    /// DeleteUserGroups请求参数结构体
    public struct DeleteUserGroupsRequest: TCRequest {
        /// 用户组ID数组
        public let userGroupIds: [String]

        /// 用户目录ID
        public let userStoreId: String

        public init(userGroupIds: [String], userStoreId: String) {
            self.userGroupIds = userGroupIds
            self.userStoreId = userStoreId
        }

        enum CodingKeys: String, CodingKey {
            case userGroupIds = "UserGroupIds"
            case userStoreId = "UserStoreId"
        }
    }

    /// DeleteUserGroups返回参数结构体
    public struct DeleteUserGroupsResponse: TCResponse {
        /// 删除的用户组关联的应用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userGroupDeletedInfo: UserGroupDeleteResp?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case userGroupDeletedInfo = "UserGroupDeletedInfo"
            case requestId = "RequestId"
        }
    }

    /// 批量删除用户组
    @inlinable
    public func deleteUserGroups(_ input: DeleteUserGroupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteUserGroupsResponse> {
        self.client.execute(action: "DeleteUserGroups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量删除用户组
    @inlinable
    public func deleteUserGroups(_ input: DeleteUserGroupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteUserGroupsResponse {
        try await self.client.execute(action: "DeleteUserGroups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量删除用户组
    @inlinable
    public func deleteUserGroups(userGroupIds: [String], userStoreId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteUserGroupsResponse> {
        self.deleteUserGroups(.init(userGroupIds: userGroupIds, userStoreId: userStoreId), region: region, logger: logger, on: eventLoop)
    }

    /// 批量删除用户组
    @inlinable
    public func deleteUserGroups(userGroupIds: [String], userStoreId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteUserGroupsResponse {
        try await self.deleteUserGroups(.init(userGroupIds: userGroupIds, userStoreId: userStoreId), region: region, logger: logger, on: eventLoop)
    }
}
