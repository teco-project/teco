//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ciam {
    /// UpdateUserStore请求参数结构体
    public struct UpdateUserStoreRequest: TCRequestModel {
        /// 用户池ID
        public let userPoolId: String

        /// 用户池名字
        public let userPoolName: String?

        /// 用户池描述
        public let userPoolDesc: String?

        /// 用户池logo
        public let userPoolLogo: String?

        public init(userPoolId: String, userPoolName: String? = nil, userPoolDesc: String? = nil, userPoolLogo: String? = nil) {
            self.userPoolId = userPoolId
            self.userPoolName = userPoolName
            self.userPoolDesc = userPoolDesc
            self.userPoolLogo = userPoolLogo
        }

        enum CodingKeys: String, CodingKey {
            case userPoolId = "UserPoolId"
            case userPoolName = "UserPoolName"
            case userPoolDesc = "UserPoolDesc"
            case userPoolLogo = "UserPoolLogo"
        }
    }

    /// UpdateUserStore返回参数结构体
    public struct UpdateUserStoreResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新用户目录
    @inlinable @discardableResult
    public func updateUserStore(_ input: UpdateUserStoreRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateUserStoreResponse> {
        self.client.execute(action: "UpdateUserStore", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新用户目录
    @inlinable @discardableResult
    public func updateUserStore(_ input: UpdateUserStoreRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateUserStoreResponse {
        try await self.client.execute(action: "UpdateUserStore", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新用户目录
    @inlinable @discardableResult
    public func updateUserStore(userPoolId: String, userPoolName: String? = nil, userPoolDesc: String? = nil, userPoolLogo: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateUserStoreResponse> {
        self.updateUserStore(.init(userPoolId: userPoolId, userPoolName: userPoolName, userPoolDesc: userPoolDesc, userPoolLogo: userPoolLogo), region: region, logger: logger, on: eventLoop)
    }

    /// 更新用户目录
    @inlinable @discardableResult
    public func updateUserStore(userPoolId: String, userPoolName: String? = nil, userPoolDesc: String? = nil, userPoolLogo: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateUserStoreResponse {
        try await self.updateUserStore(.init(userPoolId: userPoolId, userPoolName: userPoolName, userPoolDesc: userPoolDesc, userPoolLogo: userPoolLogo), region: region, logger: logger, on: eventLoop)
    }
}
