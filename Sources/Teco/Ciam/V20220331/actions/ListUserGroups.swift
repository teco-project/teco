//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ciam {
    /// ListUserGroups请求参数结构体
    public struct ListUserGroupsRequest: TCRequestModel {
        /// 用户目录ID
        public let userStoreId: String

        /// 分页数据
        public let pageable: Pageable

        /// Key可选值为condition
        /// - **condition** 	Values = 查询条件，用户组ID或用户组名称
        public let filters: [Filter]?

        public init(userStoreId: String, pageable: Pageable, filters: [Filter]? = nil) {
            self.userStoreId = userStoreId
            self.pageable = pageable
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case userStoreId = "UserStoreId"
            case pageable = "Pageable"
            case filters = "Filters"
        }
    }

    /// ListUserGroups返回参数结构体
    public struct ListUserGroupsResponse: TCResponseModel {
        /// 用户组列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let content: [UserGroup]?

        /// 总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 分页
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageable: Pageable?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case content = "Content"
            case total = "Total"
            case pageable = "Pageable"
            case requestId = "RequestId"
        }
    }

    /// 查询用户组列表
    @inlinable
    public func listUserGroups(_ input: ListUserGroupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListUserGroupsResponse> {
        self.client.execute(action: "ListUserGroups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询用户组列表
    @inlinable
    public func listUserGroups(_ input: ListUserGroupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListUserGroupsResponse {
        try await self.client.execute(action: "ListUserGroups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询用户组列表
    @inlinable
    public func listUserGroups(userStoreId: String, pageable: Pageable, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListUserGroupsResponse> {
        self.listUserGroups(.init(userStoreId: userStoreId, pageable: pageable, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户组列表
    @inlinable
    public func listUserGroups(userStoreId: String, pageable: Pageable, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListUserGroupsResponse {
        try await self.listUserGroups(.init(userStoreId: userStoreId, pageable: pageable, filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
