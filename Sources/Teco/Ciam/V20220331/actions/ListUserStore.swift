//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ciam {
    /// ListUserStore请求参数结构体
    public struct ListUserStoreRequest: TCRequest {
        public init() {
        }
    }

    /// ListUserStore返回参数结构体
    public struct ListUserStoreResponse: TCResponse {
        /// 用户目录列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userStoreSet: [UserStore]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case userStoreSet = "UserStoreSet"
            case requestId = "RequestId"
        }
    }

    /// 查询用户目录列表
    @inlinable
    public func listUserStore(_ input: ListUserStoreRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListUserStoreResponse> {
        self.client.execute(action: "ListUserStore", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询用户目录列表
    @inlinable
    public func listUserStore(_ input: ListUserStoreRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListUserStoreResponse {
        try await self.client.execute(action: "ListUserStore", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询用户目录列表
    @inlinable
    public func listUserStore(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListUserStoreResponse> {
        self.listUserStore(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户目录列表
    @inlinable
    public func listUserStore(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListUserStoreResponse {
        try await self.listUserStore(.init(), region: region, logger: logger, on: eventLoop)
    }
}
