//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ciam {
    /// CreateUserGroup请求参数结构体
    public struct CreateUserGroupRequest: TCRequest {
        /// 用户组名称
        public let displayName: String

        /// 用户目录ID
        public let userStoreId: String

        /// 用户组描述
        public let description: String?

        public init(displayName: String, userStoreId: String, description: String? = nil) {
            self.displayName = displayName
            self.userStoreId = userStoreId
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case userStoreId = "UserStoreId"
            case description = "Description"
        }
    }

    /// CreateUserGroup返回参数结构体
    public struct CreateUserGroupResponse: TCResponse {
        /// 用户组ID
        public let userGroupId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case userGroupId = "UserGroupId"
            case requestId = "RequestId"
        }
    }

    /// 创建用户组
    @inlinable
    public func createUserGroup(_ input: CreateUserGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserGroupResponse> {
        self.client.execute(action: "CreateUserGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建用户组
    @inlinable
    public func createUserGroup(_ input: CreateUserGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserGroupResponse {
        try await self.client.execute(action: "CreateUserGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建用户组
    @inlinable
    public func createUserGroup(displayName: String, userStoreId: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserGroupResponse> {
        self.createUserGroup(.init(displayName: displayName, userStoreId: userStoreId, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 创建用户组
    @inlinable
    public func createUserGroup(displayName: String, userStoreId: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserGroupResponse {
        try await self.createUserGroup(.init(displayName: displayName, userStoreId: userStoreId, description: description), region: region, logger: logger, on: eventLoop)
    }
}
