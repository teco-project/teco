//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Partners {
    /// DescribeRebateInfos请求参数结构体
    public struct DescribeRebateInfosRequest: TCPaginatedRequest {
        /// 返佣月份，如2018-02
        public let rebateMonth: String?

        /// 偏移量
        public let offset: UInt64?

        /// 限制数目
        public let limit: UInt64?

        public init(rebateMonth: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.rebateMonth = rebateMonth
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case rebateMonth = "RebateMonth"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRebateInfosResponse) -> DescribeRebateInfosRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeRebateInfosRequest(rebateMonth: self.rebateMonth, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeRebateInfos返回参数结构体
    public struct DescribeRebateInfosResponse: TCPaginatedResponse {
        /// 返佣信息列表
        public let rebateInfoSet: [RebateInfoElem]

        /// 符合查询条件返佣信息数目
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case rebateInfoSet = "RebateInfoSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RebateInfoElem`` list from the paginated response.
        public func getItems() -> [RebateInfoElem] {
            self.rebateInfoSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 【已切换至DescribeRebateInfosNew】查询代理商返佣信息
    ///
    /// 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
    @inlinable
    public func describeRebateInfos(_ input: DescribeRebateInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRebateInfosResponse> {
        self.client.execute(action: "DescribeRebateInfos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 【已切换至DescribeRebateInfosNew】查询代理商返佣信息
    ///
    /// 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
    @inlinable
    public func describeRebateInfos(_ input: DescribeRebateInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRebateInfosResponse {
        try await self.client.execute(action: "DescribeRebateInfos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 【已切换至DescribeRebateInfosNew】查询代理商返佣信息
    ///
    /// 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
    @inlinable
    public func describeRebateInfos(rebateMonth: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRebateInfosResponse> {
        self.describeRebateInfos(.init(rebateMonth: rebateMonth, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 【已切换至DescribeRebateInfosNew】查询代理商返佣信息
    ///
    /// 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
    @inlinable
    public func describeRebateInfos(rebateMonth: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRebateInfosResponse {
        try await self.describeRebateInfos(.init(rebateMonth: rebateMonth, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 【已切换至DescribeRebateInfosNew】查询代理商返佣信息
    ///
    /// 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
    @inlinable
    public func describeRebateInfosPaginated(_ input: DescribeRebateInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [RebateInfoElem])> {
        self.client.paginate(input: input, region: region, command: self.describeRebateInfos, logger: logger, on: eventLoop)
    }

    /// 【已切换至DescribeRebateInfosNew】查询代理商返佣信息
    ///
    /// 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
    @inlinable @discardableResult
    public func describeRebateInfosPaginated(_ input: DescribeRebateInfosRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRebateInfosResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRebateInfos, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 【已切换至DescribeRebateInfosNew】查询代理商返佣信息
    ///
    /// 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
    ///
    /// - Returns: `AsyncSequence`s of ``RebateInfoElem`` and ``DescribeRebateInfosResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRebateInfosPaginator(_ input: DescribeRebateInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRebateInfosRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRebateInfos, logger: logger, on: eventLoop)
    }
}
