//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Partners {
    /// AssignClientsToSales请求参数结构体
    public struct AssignClientsToSalesRequest: TCRequestModel {
        /// 代客/申请中代客uin列表，最大50条
        public let clientUins: [String]

        /// 业务员uin
        public let salesUin: String

        /// 代客类型:normal-代客 apply-申请中代客
        public let assignClientStatus: String

        /// 操作类型:assign-执行分派 cancel-取消分派
        public let assignActionType: String

        public init(clientUins: [String], salesUin: String, assignClientStatus: String, assignActionType: String) {
            self.clientUins = clientUins
            self.salesUin = salesUin
            self.assignClientStatus = assignClientStatus
            self.assignActionType = assignActionType
        }

        enum CodingKeys: String, CodingKey {
            case clientUins = "ClientUins"
            case salesUin = "SalesUin"
            case assignClientStatus = "AssignClientStatus"
            case assignActionType = "AssignActionType"
        }
    }

    /// AssignClientsToSales返回参数结构体
    public struct AssignClientsToSalesResponse: TCResponseModel {
        /// 处理成功的代客uin列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let succeedUins: [String]?

        /// 处理失败的代客uin列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedUins: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case succeedUins = "SucceedUins"
            case failedUins = "FailedUins"
            case requestId = "RequestId"
        }
    }

    /// 为代客（or申请中代客）分派业务员
    ///
    /// 为代客or申请中代客分派跟进人（业务员），入参可从以下API获取
    /// - 代客列表获取API： [DescribeAgentAuditedClients](https://cloud.tencent.com/document/product/563/19184)
    /// - 申请中代客列表获取API：[DescribeAgentClients](https://cloud.tencent.com/document/product/563/16046)
    /// - 业务员列表获取API：[DescribeSalesmans](https://cloud.tencent.com/document/product/563/35196) <br><br>
    @inlinable
    public func assignClientsToSales(_ input: AssignClientsToSalesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssignClientsToSalesResponse> {
        self.client.execute(action: "AssignClientsToSales", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 为代客（or申请中代客）分派业务员
    ///
    /// 为代客or申请中代客分派跟进人（业务员），入参可从以下API获取
    /// - 代客列表获取API： [DescribeAgentAuditedClients](https://cloud.tencent.com/document/product/563/19184)
    /// - 申请中代客列表获取API：[DescribeAgentClients](https://cloud.tencent.com/document/product/563/16046)
    /// - 业务员列表获取API：[DescribeSalesmans](https://cloud.tencent.com/document/product/563/35196) <br><br>
    @inlinable
    public func assignClientsToSales(_ input: AssignClientsToSalesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssignClientsToSalesResponse {
        try await self.client.execute(action: "AssignClientsToSales", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 为代客（or申请中代客）分派业务员
    ///
    /// 为代客or申请中代客分派跟进人（业务员），入参可从以下API获取
    /// - 代客列表获取API： [DescribeAgentAuditedClients](https://cloud.tencent.com/document/product/563/19184)
    /// - 申请中代客列表获取API：[DescribeAgentClients](https://cloud.tencent.com/document/product/563/16046)
    /// - 业务员列表获取API：[DescribeSalesmans](https://cloud.tencent.com/document/product/563/35196) <br><br>
    @inlinable
    public func assignClientsToSales(clientUins: [String], salesUin: String, assignClientStatus: String, assignActionType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssignClientsToSalesResponse> {
        self.assignClientsToSales(.init(clientUins: clientUins, salesUin: salesUin, assignClientStatus: assignClientStatus, assignActionType: assignActionType), region: region, logger: logger, on: eventLoop)
    }

    /// 为代客（or申请中代客）分派业务员
    ///
    /// 为代客or申请中代客分派跟进人（业务员），入参可从以下API获取
    /// - 代客列表获取API： [DescribeAgentAuditedClients](https://cloud.tencent.com/document/product/563/19184)
    /// - 申请中代客列表获取API：[DescribeAgentClients](https://cloud.tencent.com/document/product/563/16046)
    /// - 业务员列表获取API：[DescribeSalesmans](https://cloud.tencent.com/document/product/563/35196) <br><br>
    @inlinable
    public func assignClientsToSales(clientUins: [String], salesUin: String, assignClientStatus: String, assignActionType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssignClientsToSalesResponse {
        try await self.assignClientsToSales(.init(clientUins: clientUins, salesUin: salesUin, assignClientStatus: assignClientStatus, assignActionType: assignActionType), region: region, logger: logger, on: eventLoop)
    }
}
