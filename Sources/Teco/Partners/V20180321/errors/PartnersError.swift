//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

/// Service error type returned by `Partners`.
public protocol TCPartnersErrorType: TCPlatformErrorType {
    /// Get the service error as ``TCPartnersError``.
    ///
    /// - Returns: ``TCPartnersError`` that holds the same error code and context.
    func asPartnersError() -> TCPartnersError
}

public struct TCPartnersError: TCPartnersErrorType {
    enum Code: String {
        case failedOperation = "FailedOperation"
        case internalError = "InternalError"
        case invalidParameter = "InvalidParameter"
        case unauthorizedOperation = "UnauthorizedOperation"
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 操作失败。
    public static var failedOperation: TCPartnersError {
        TCPartnersError(.failedOperation)
    }

    /// 内部错误。
    public static var internalError: TCPartnersError {
        TCPartnersError(.internalError)
    }

    /// 参数错误。
    public static var invalidParameter: TCPartnersError {
        TCPartnersError(.invalidParameter)
    }

    /// 未授权操作。
    public static var unauthorizedOperation: TCPartnersError {
        TCPartnersError(.unauthorizedOperation)
    }

    public func asPartnersError() -> TCPartnersError {
        return self
    }
}
