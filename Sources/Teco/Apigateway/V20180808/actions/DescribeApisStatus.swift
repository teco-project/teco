//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Apigateway {
    /// DescribeApisStatus请求参数结构体
    public struct DescribeApisStatusRequest: TCPaginatedRequest {
        /// API 所在的服务唯一 ID。
        public let serviceId: String

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 返回数量，默认为 20，最大值为 100
        public let limit: Int64?

        /// API过滤条件。支持ApiId、ApiName、ApiPath、ApiType、AuthRelationApiId、AuthType、ApiBuniessType、NotUsagePlanId、 Environment、Tags (values为 $tag_key:tag_value的列表)、TagKeys （values 为 tag key的列表），其中NotUsagePlanId和Environment必须同时使用，不能单独使用一个。
        public let filters: [Filter]?

        public init(serviceId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil) {
            self.serviceId = serviceId
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeApisStatusResponse) -> DescribeApisStatusRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeApisStatusRequest(serviceId: self.serviceId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeApisStatus返回参数结构体
    public struct DescribeApisStatusResponse: TCPaginatedResponse {
        /// API 详情列表。
        public let result: DescribeApisStatusResultInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [DescribeApisStatusResultApiIdStatusSetInfo] {
            self.result.apiIdStatusSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.result.totalCount
        }
    }

    /// 查询 API 接口列表
    ///
    /// 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
    @inlinable
    public func describeApisStatus(_ input: DescribeApisStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeApisStatusResponse> {
        self.client.execute(action: "DescribeApisStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询 API 接口列表
    ///
    /// 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
    @inlinable
    public func describeApisStatus(_ input: DescribeApisStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApisStatusResponse {
        try await self.client.execute(action: "DescribeApisStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询 API 接口列表
    ///
    /// 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
    @inlinable
    public func describeApisStatus(serviceId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeApisStatusResponse> {
        self.describeApisStatus(.init(serviceId: serviceId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询 API 接口列表
    ///
    /// 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
    @inlinable
    public func describeApisStatus(serviceId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApisStatusResponse {
        try await self.describeApisStatus(.init(serviceId: serviceId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询 API 接口列表
    ///
    /// 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
    @inlinable
    public func describeApisStatusPaginated(_ input: DescribeApisStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [DescribeApisStatusResultApiIdStatusSetInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeApisStatus, logger: logger, on: eventLoop)
    }

    /// 查询 API 接口列表
    ///
    /// 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
    @inlinable @discardableResult
    public func describeApisStatusPaginated(_ input: DescribeApisStatusRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeApisStatusResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeApisStatus, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询 API 接口列表
    ///
    /// 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
    ///
    /// - Returns: `AsyncSequence`s of `DescribeApisStatusResultApiIdStatusSetInfo` and `DescribeApisStatusResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeApisStatusPaginator(_ input: DescribeApisStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeApisStatusRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeApisStatus, logger: logger, on: eventLoop)
    }
}
