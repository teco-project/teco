//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apigateway {
    /// DescribeServiceEnvironmentStrategy请求参数结构体
    public struct DescribeServiceEnvironmentStrategyRequest: TCRequestModel {
        /// 服务唯一ID。
        public let serviceId: String
        
        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?
        
        /// 偏移量，默认为 0。
        public let offset: Int64?
        
        public init (serviceId: String, limit: Int64? = nil, offset: Int64? = nil) {
            self.serviceId = serviceId
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeServiceEnvironmentStrategy返回参数结构体
    public struct DescribeServiceEnvironmentStrategyResponse: TCResponseModel {
        /// 限流策略列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: ServiceEnvironmentStrategyStatus?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 展示服务限流策略
    ///
    /// 本接口（DescribeServiceEnvironmentStrategy）用于展示服务限流策略。
    @inlinable
    public func describeServiceEnvironmentStrategy(_ input: DescribeServiceEnvironmentStrategyRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeServiceEnvironmentStrategyResponse > {
        self.client.execute(action: "DescribeServiceEnvironmentStrategy", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 展示服务限流策略
    ///
    /// 本接口（DescribeServiceEnvironmentStrategy）用于展示服务限流策略。
    @inlinable
    public func describeServiceEnvironmentStrategy(_ input: DescribeServiceEnvironmentStrategyRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeServiceEnvironmentStrategyResponse {
        try await self.client.execute(action: "DescribeServiceEnvironmentStrategy", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
