//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apigateway {
    /// UpdateService请求参数结构体
    public struct UpdateServiceRequest: TCRequestModel {
        /// 待切换服务的唯一 Id。
        public let serviceId: String
        
        /// 待切换的环境名称，当前支持三个环境，test（测试环境）、prepub（预发布环境）和 release（发布环境）。
        public let environmentName: String
        
        /// 切换的版本号。
        public let versionName: String
        
        /// 本次的切换描述。
        public let updateDesc: String?
        
        public init (serviceId: String, environmentName: String, versionName: String, updateDesc: String? = nil) {
            self.serviceId = serviceId
            self.environmentName = environmentName
            self.versionName = versionName
            self.updateDesc = updateDesc
        }
        
        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
            case environmentName = "EnvironmentName"
            case versionName = "VersionName"
            case updateDesc = "UpdateDesc"
        }
    }
    
    /// UpdateService返回参数结构体
    public struct UpdateServiceResponse: TCResponseModel {
        /// 切换版本操作是否成功。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 更新服务版本
    ///
    /// 本接口（UpdateService）用于从服务发布的环境中运行版本切换到特定版本。用户在使用 API 网关创建服务并发布服务到某个环境后，多因为开发过程会产生多个版本，此时可调用本接口。
    @inlinable
    public func updateService(_ input: UpdateServiceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UpdateServiceResponse > {
        self.client.execute(action: "UpdateService", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 更新服务版本
    ///
    /// 本接口（UpdateService）用于从服务发布的环境中运行版本切换到特定版本。用户在使用 API 网关创建服务并发布服务到某个环境后，多因为开发过程会产生多个版本，此时可调用本接口。
    @inlinable
    public func updateService(_ input: UpdateServiceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateServiceResponse {
        try await self.client.execute(action: "UpdateService", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 更新服务版本
    ///
    /// 本接口（UpdateService）用于从服务发布的环境中运行版本切换到特定版本。用户在使用 API 网关创建服务并发布服务到某个环境后，多因为开发过程会产生多个版本，此时可调用本接口。
    @inlinable
    public func updateService(serviceId: String, environmentName: String, versionName: String, updateDesc: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UpdateServiceResponse > {
        self.updateService(UpdateServiceRequest(serviceId: serviceId, environmentName: environmentName, versionName: versionName, updateDesc: updateDesc), logger: logger, on: eventLoop)
    }
    
    /// 更新服务版本
    ///
    /// 本接口（UpdateService）用于从服务发布的环境中运行版本切换到特定版本。用户在使用 API 网关创建服务并发布服务到某个环境后，多因为开发过程会产生多个版本，此时可调用本接口。
    @inlinable
    public func updateService(serviceId: String, environmentName: String, versionName: String, updateDesc: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateServiceResponse {
        try await self.updateService(UpdateServiceRequest(serviceId: serviceId, environmentName: environmentName, versionName: versionName, updateDesc: updateDesc), logger: logger, on: eventLoop)
    }
}
