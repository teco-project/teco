//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apigateway {
    /// DescribeUsagePlansStatus请求参数结构体
    public struct DescribeUsagePlansStatusRequest: TCRequestModel {
        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 使用计划过滤条件。支持UsagePlanId、UsagePlanName、NotServiceId、NotApiId、Environment。
        public let filters: [Filter]?

        public init(limit: Int64? = nil, offset: Int64? = nil, filters: [Filter]? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }
    }

    /// DescribeUsagePlansStatus返回参数结构体
    public struct DescribeUsagePlansStatusResponse: TCResponseModel {
        /// 使用计划列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: UsagePlansStatus?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 查询使用计划列表
    ///
    /// 本接口（DescribeUsagePlanStatus）用于查询使用计划的列表。
    @inlinable
    public func describeUsagePlansStatus(_ input: DescribeUsagePlansStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUsagePlansStatusResponse> {
        self.client.execute(action: "DescribeUsagePlansStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询使用计划列表
    ///
    /// 本接口（DescribeUsagePlanStatus）用于查询使用计划的列表。
    @inlinable
    public func describeUsagePlansStatus(_ input: DescribeUsagePlansStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUsagePlansStatusResponse {
        try await self.client.execute(action: "DescribeUsagePlansStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询使用计划列表
    ///
    /// 本接口（DescribeUsagePlanStatus）用于查询使用计划的列表。
    @inlinable
    public func describeUsagePlansStatus(limit: Int64? = nil, offset: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUsagePlansStatusResponse> {
        let input = DescribeUsagePlansStatusRequest(limit: limit, offset: offset, filters: filters)
        return self.client.execute(action: "DescribeUsagePlansStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询使用计划列表
    ///
    /// 本接口（DescribeUsagePlanStatus）用于查询使用计划的列表。
    @inlinable
    public func describeUsagePlansStatus(limit: Int64? = nil, offset: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUsagePlansStatusResponse {
        let input = DescribeUsagePlansStatusRequest(limit: limit, offset: offset, filters: filters)
        return try await self.client.execute(action: "DescribeUsagePlansStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
