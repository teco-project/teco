//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Apigateway {
    /// EnableApiKey请求参数结构体
    public struct EnableApiKeyRequest: TCRequestModel {
        /// 待启用的密钥 ID。
        public let accessKeyId: String

        public init(accessKeyId: String) {
            self.accessKeyId = accessKeyId
        }

        enum CodingKeys: String, CodingKey {
            case accessKeyId = "AccessKeyId"
        }
    }

    /// EnableApiKey返回参数结构体
    public struct EnableApiKeyResponse: TCResponseModel {
        /// 启动密钥操作是否成功。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 启用密钥
    ///
    /// 本接口（EnableApiKey）用于启动一对被禁用的 API 密钥。
    @inlinable
    public func enableApiKey(_ input: EnableApiKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableApiKeyResponse> {
        self.client.execute(action: "EnableApiKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 启用密钥
    ///
    /// 本接口（EnableApiKey）用于启动一对被禁用的 API 密钥。
    @inlinable
    public func enableApiKey(_ input: EnableApiKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableApiKeyResponse {
        try await self.client.execute(action: "EnableApiKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 启用密钥
    ///
    /// 本接口（EnableApiKey）用于启动一对被禁用的 API 密钥。
    @inlinable
    public func enableApiKey(accessKeyId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableApiKeyResponse> {
        self.enableApiKey(.init(accessKeyId: accessKeyId), region: region, logger: logger, on: eventLoop)
    }

    /// 启用密钥
    ///
    /// 本接口（EnableApiKey）用于启动一对被禁用的 API 密钥。
    @inlinable
    public func enableApiKey(accessKeyId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableApiKeyResponse {
        try await self.enableApiKey(.init(accessKeyId: accessKeyId), region: region, logger: logger, on: eventLoop)
    }
}
