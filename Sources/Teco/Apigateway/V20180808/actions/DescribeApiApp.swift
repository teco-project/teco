//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apigateway {
    /// DescribeApiApp请求参数结构体
    public struct DescribeApiAppRequest: TCRequestModel {
        /// 应用ID。
        public let apiAppId: String

        public init(apiAppId: String) {
            self.apiAppId = apiAppId
        }

        enum CodingKeys: String, CodingKey {
            case apiAppId = "ApiAppId"
        }
    }

    /// DescribeApiApp返回参数结构体
    public struct DescribeApiAppResponse: TCResponseModel {
        /// 应用详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: ApiAppInfos?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 搜索应用
    ///
    /// 本接口（DescribeApiApp）用于根据应用ID搜索应用。
    @inlinable
    public func describeApiApp(_ input: DescribeApiAppRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeApiAppResponse> {
        self.client.execute(action: "DescribeApiApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 搜索应用
    ///
    /// 本接口（DescribeApiApp）用于根据应用ID搜索应用。
    @inlinable
    public func describeApiApp(_ input: DescribeApiAppRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApiAppResponse {
        try await self.client.execute(action: "DescribeApiApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 搜索应用
    ///
    /// 本接口（DescribeApiApp）用于根据应用ID搜索应用。
    @inlinable
    public func describeApiApp(apiAppId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeApiAppResponse> {
        let input = DescribeApiAppRequest(apiAppId: apiAppId)
        return self.client.execute(action: "DescribeApiApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 搜索应用
    ///
    /// 本接口（DescribeApiApp）用于根据应用ID搜索应用。
    @inlinable
    public func describeApiApp(apiAppId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApiAppResponse {
        let input = DescribeApiAppRequest(apiAppId: apiAppId)
        return try await self.client.execute(action: "DescribeApiApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
