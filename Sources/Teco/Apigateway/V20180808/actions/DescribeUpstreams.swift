//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apigateway {
    /// DescribeUpstreams请求参数结构体
    public struct DescribeUpstreamsRequest: TCRequestModel {
        /// 分页大小
        public let limit: UInt64
        
        /// 分页起始位置
        public let offset: UInt64
        
        /// 过滤条件，支持后端通道ID（UpstreamId）、后端通道名字（UpstreamName）过滤查询
        public let filters: [Filter]?
        
        public init (limit: UInt64, offset: UInt64, filters: [Filter]? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }
        
        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }
    }
    
    /// DescribeUpstreams返回参数结构体
    public struct DescribeUpstreamsResponse: TCResponseModel {
        /// 查询结果
        public let result: DescribeUpstreamInfo
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 查询后端通道列表详情
    @inlinable
    public func describeUpstreams(_ input: DescribeUpstreamsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeUpstreamsResponse > {
        self.client.execute(action: "DescribeUpstreams", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询后端通道列表详情
    @inlinable
    public func describeUpstreams(_ input: DescribeUpstreamsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUpstreamsResponse {
        try await self.client.execute(action: "DescribeUpstreams", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询后端通道列表详情
    @inlinable
    public func describeUpstreams(limit: UInt64, offset: UInt64, filters: [Filter]? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeUpstreamsResponse > {
        self.describeUpstreams(DescribeUpstreamsRequest(limit: limit, offset: offset, filters: filters), logger: logger, on: eventLoop)
    }
    
    /// 查询后端通道列表详情
    @inlinable
    public func describeUpstreams(limit: UInt64, offset: UInt64, filters: [Filter]? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUpstreamsResponse {
        try await self.describeUpstreams(DescribeUpstreamsRequest(limit: limit, offset: offset, filters: filters), logger: logger, on: eventLoop)
    }
}
