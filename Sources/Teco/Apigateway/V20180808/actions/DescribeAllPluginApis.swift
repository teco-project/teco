//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apigateway {
    /// DescribeAllPluginApis请求参数结构体
    public struct DescribeAllPluginApisRequest: TCRequestModel {
        /// 要查询的服务ID。
        public let serviceId: String

        /// 要查询的插件ID。
        public let pluginId: String

        /// 环境信息。
        public let environmentName: String

        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        public init(serviceId: String, pluginId: String, environmentName: String, limit: Int64? = nil, offset: Int64? = nil) {
            self.serviceId = serviceId
            self.pluginId = pluginId
            self.environmentName = environmentName
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
            case pluginId = "PluginId"
            case environmentName = "EnvironmentName"
            case limit = "Limit"
            case offset = "Offset"
        }
    }

    /// DescribeAllPluginApis返回参数结构体
    public struct DescribeAllPluginApisResponse: TCResponseModel {
        /// 插件相关API的列表。
        public let result: ApiInfoSummary

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 展示插件相关的API列表
    ///
    /// 展示插件相关的API列表，包括已绑定的和未绑定的API信息。
    @inlinable
    public func describeAllPluginApis(_ input: DescribeAllPluginApisRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAllPluginApisResponse> {
        self.client.execute(action: "DescribeAllPluginApis", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 展示插件相关的API列表
    ///
    /// 展示插件相关的API列表，包括已绑定的和未绑定的API信息。
    @inlinable
    public func describeAllPluginApis(_ input: DescribeAllPluginApisRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAllPluginApisResponse {
        try await self.client.execute(action: "DescribeAllPluginApis", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 展示插件相关的API列表
    ///
    /// 展示插件相关的API列表，包括已绑定的和未绑定的API信息。
    @inlinable
    public func describeAllPluginApis(serviceId: String, pluginId: String, environmentName: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAllPluginApisResponse> {
        self.describeAllPluginApis(DescribeAllPluginApisRequest(serviceId: serviceId, pluginId: pluginId, environmentName: environmentName, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 展示插件相关的API列表
    ///
    /// 展示插件相关的API列表，包括已绑定的和未绑定的API信息。
    @inlinable
    public func describeAllPluginApis(serviceId: String, pluginId: String, environmentName: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAllPluginApisResponse {
        try await self.describeAllPluginApis(DescribeAllPluginApisRequest(serviceId: serviceId, pluginId: pluginId, environmentName: environmentName, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }
}
