//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apigateway {
    /// 插件绑定API
    ///
    /// 绑定插件到API上。
    @inlinable
    public func attachPlugin(_ input: AttachPluginRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < AttachPluginResponse > {
        self.client.execute(action: "AttachPlugin", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 插件绑定API
    ///
    /// 绑定插件到API上。
    @inlinable
    public func attachPlugin(_ input: AttachPluginRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachPluginResponse {
        try await self.client.execute(action: "AttachPlugin", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// AttachPlugin请求参数结构体
    public struct AttachPluginRequest: TCRequestModel {
        /// 绑定的API网关插件ID。
        public let pluginId: String
        
        /// 要操作的服务ID。
        public let serviceId: String
        
        /// 要操作API的环境。
        public let environmentName: String
        
        /// 要绑定的API列表。
        public let apiIds: [String]
        
        public init (pluginId: String, serviceId: String, environmentName: String, apiIds: [String]) {
            self.pluginId = pluginId
            self.serviceId = serviceId
            self.environmentName = environmentName
            self.apiIds = apiIds
        }
        
        enum CodingKeys: String, CodingKey {
            case pluginId = "PluginId"
            case serviceId = "ServiceId"
            case environmentName = "EnvironmentName"
            case apiIds = "ApiIds"
        }
    }
    
    /// AttachPlugin返回参数结构体
    public struct AttachPluginResponse: TCResponseModel {
        /// 绑定操作是否成功。
        public let result: Bool
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}