//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCEmrError {
    public struct ResourceNotFound: TCEmrErrorType {
        enum Code: String {
            case cdbInfoNotFound = "ResourceNotFound.CDBInfoNotFound"
            case clusterNotFound = "ResourceNotFound.ClusterNotFound"
            case hardwareInfoNotFound = "ResourceNotFound.HardwareInfoNotFound"
            case instanceNotFound = "ResourceNotFound.InstanceNotFound"
            case resourceNotFound = "ResourceNotFound.ResourceNotFound"
            case subnetNotFound = "ResourceNotFound.SubnetNotFound"
            case tagsNotFound = "ResourceNotFound.TagsNotFound"
            case tkePreconditionNotFound = "ResourceNotFound.TKEPreconditionNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 资源不存在。
        public static var cdbInfoNotFound: ResourceNotFound {
            ResourceNotFound(.cdbInfoNotFound)
        }

        /// 无法找到该实例。
        public static var clusterNotFound: ResourceNotFound {
            ResourceNotFound(.clusterNotFound)
        }

        /// 无法找到硬件信息。
        public static var hardwareInfoNotFound: ResourceNotFound {
            ResourceNotFound(.hardwareInfoNotFound)
        }

        /// 无法找到该实例。
        public static var instanceNotFound: ResourceNotFound {
            ResourceNotFound(.instanceNotFound)
        }

        /// 无法找到监控元数据。
        public static var resourceNotFound: ResourceNotFound {
            ResourceNotFound(.resourceNotFound)
        }

        /// 找不到对应的子网。
        public static var subnetNotFound: ResourceNotFound {
            ResourceNotFound(.subnetNotFound)
        }

        /// 没有查找到指定标签。
        public static var tagsNotFound: ResourceNotFound {
            ResourceNotFound(.tagsNotFound)
        }

        /// tke集群前置组件未部署。
        public static var tkePreconditionNotFound: ResourceNotFound {
            ResourceNotFound(.tkePreconditionNotFound)
        }

        public func asEmrError() -> TCEmrError {
            let code: TCEmrError.Code
            switch self.error {
            case .cdbInfoNotFound:
                code = .resourceNotFound_CDBInfoNotFound
            case .clusterNotFound:
                code = .resourceNotFound_ClusterNotFound
            case .hardwareInfoNotFound:
                code = .resourceNotFound_HardwareInfoNotFound
            case .instanceNotFound:
                code = .resourceNotFound_InstanceNotFound
            case .resourceNotFound:
                code = .resourceNotFound_ResourceNotFound
            case .subnetNotFound:
                code = .resourceNotFound_SubnetNotFound
            case .tagsNotFound:
                code = .resourceNotFound_TagsNotFound
            case .tkePreconditionNotFound:
                code = .resourceNotFound_TKEPreconditionNotFound
            }
            return TCEmrError(code, context: self.context)
        }
    }
}
