//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEmrError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case cdbInfoNotFound = "ResourceNotFound.CDBInfoNotFound"
            case clusterNotFound = "ResourceNotFound.ClusterNotFound"
            case hardwareInfoNotFound = "ResourceNotFound.HardwareInfoNotFound"
            case instanceNotFound = "ResourceNotFound.InstanceNotFound"
            case resourceNotFound = "ResourceNotFound.ResourceNotFound"
            case subnetNotFound = "ResourceNotFound.SubnetNotFound"
            case tagsNotFound = "ResourceNotFound.TagsNotFound"
            case tkePreconditionNotFound = "ResourceNotFound.TKEPreconditionNotFound"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 资源不存在。
        public static var cdbInfoNotFound: ResourceNotFound {
            ResourceNotFound(.cdbInfoNotFound)
        }
        
        /// 无法找到该实例。
        public static var clusterNotFound: ResourceNotFound {
            ResourceNotFound(.clusterNotFound)
        }
        
        /// 无法找到硬件信息。
        public static var hardwareInfoNotFound: ResourceNotFound {
            ResourceNotFound(.hardwareInfoNotFound)
        }
        
        /// 无法找到该实例。
        public static var instanceNotFound: ResourceNotFound {
            ResourceNotFound(.instanceNotFound)
        }
        
        /// 无法找到监控元数据。
        public static var resourceNotFound: ResourceNotFound {
            ResourceNotFound(.resourceNotFound)
        }
        
        /// 找不到对应的子网。
        public static var subnetNotFound: ResourceNotFound {
            ResourceNotFound(.subnetNotFound)
        }
        
        /// 没有查找到指定标签。
        public static var tagsNotFound: ResourceNotFound {
            ResourceNotFound(.tagsNotFound)
        }
        
        /// tke集群前置组件未部署。
        public static var tkePreconditionNotFound: ResourceNotFound {
            ResourceNotFound(.tkePreconditionNotFound)
        }
    }
}

extension TCEmrError.ResourceNotFound: Equatable {
    public static func == (lhs: TCEmrError.ResourceNotFound, rhs: TCEmrError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEmrError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEmrError.ResourceNotFound {
    public func toEmrError() -> TCEmrError {
        guard let code = TCEmrError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEmrError(code, context: self.context)
    }
}