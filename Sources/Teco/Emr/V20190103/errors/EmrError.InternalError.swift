//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEmrError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case accountCgwError = "InternalError.AccountCgwError"
            case camCgwError = "InternalError.CamCgwError"
            case camError = "InternalError.CamError"
            case cbsCgwError = "InternalError.CbsCgwError"
            case cbsError = "InternalError.CbsError"
            case cdbCgwError = "InternalError.CdbCgwError"
            case cdbError = "InternalError.CdbError"
            case checkQuotaErr = "InternalError.CheckQuotaErr"
            case configCgwError = "InternalError.ConfigCgwError"
            case cvmError = "InternalError.CvmError"
            case eksError = "InternalError.EKSError"
            case kmsError = "InternalError.KmsError"
            case projectCgwError = "InternalError.ProjectCgwError"
            case sgError = "InternalError.SgError"
            case tagError = "InternalError.TagError"
            case tkeError = "InternalError.TKEError"
            case tradeCgwError = "InternalError.TradeCgwError"
            case vpcCgwError = "InternalError.VpcCgwError"
            case vpcError = "InternalError.VpcError"
            case woodServerError = "InternalError.WoodServerError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 内部服务调用异常。
        public static var accountCgwError: InternalError {
            InternalError(.accountCgwError)
        }
        
        /// 内部服务调用异常。
        public static var camCgwError: InternalError {
            InternalError(.camCgwError)
        }
        
        /// 内部服务调用异常。
        public static var camError: InternalError {
            InternalError(.camError)
        }
        
        /// 内部服务调用异常。
        public static var cbsCgwError: InternalError {
            InternalError(.cbsCgwError)
        }
        
        /// 内部服务调用异常。
        public static var cbsError: InternalError {
            InternalError(.cbsError)
        }
        
        /// 内部服务调用异常。
        public static var cdbCgwError: InternalError {
            InternalError(.cdbCgwError)
        }
        
        /// 内部服务调用异常。
        public static var cdbError: InternalError {
            InternalError(.cdbError)
        }
        
        /// cvm或cbs资源不够或软件不合法。
        public static var checkQuotaErr: InternalError {
            InternalError(.checkQuotaErr)
        }
        
        /// 内部服务调用异常。
        public static var configCgwError: InternalError {
            InternalError(.configCgwError)
        }
        
        /// 内部服务调用异常。
        public static var cvmError: InternalError {
            InternalError(.cvmError)
        }
        
        /// 调用EKS报错。
        public static var eksError: InternalError {
            InternalError(.eksError)
        }
        
        /// 内部服务调用异常。
        public static var kmsError: InternalError {
            InternalError(.kmsError)
        }
        
        /// 内部服务调用异常。
        public static var projectCgwError: InternalError {
            InternalError(.projectCgwError)
        }
        
        /// 安全组接口调用异常。
        public static var sgError: InternalError {
            InternalError(.sgError)
        }
        
        /// 内部服务调用异常。
        public static var tagError: InternalError {
            InternalError(.tagError)
        }
        
        /// TKE调用出错。
        public static var tkeError: InternalError {
            InternalError(.tkeError)
        }
        
        /// 内部服务调用异常。
        public static var tradeCgwError: InternalError {
            InternalError(.tradeCgwError)
        }
        
        /// 内部服务调用异常。
        public static var vpcCgwError: InternalError {
            InternalError(.vpcCgwError)
        }
        
        /// 内部服务调用异常。
        public static var vpcError: InternalError {
            InternalError(.vpcError)
        }
        
        /// 内部服务调用异常。
        public static var woodServerError: InternalError {
            InternalError(.woodServerError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCEmrError.InternalError: Equatable {
    public static func == (lhs: TCEmrError.InternalError, rhs: TCEmrError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEmrError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEmrError.InternalError {
    public func toEmrError() -> TCEmrError {
        guard let code = TCEmrError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEmrError(code, context: self.context)
    }
}