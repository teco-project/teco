//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Emr {
    /// ModifyResourcesTags请求参数结构体
    public struct ModifyResourcesTagsRequest: TCRequest {
        /// 标签类型，取值Cluster或者Node
        public let modifyType: String

        /// 标签信息
        public let modifyResourceTagsInfoList: [ModifyResourceTags]

        public init(modifyType: String, modifyResourceTagsInfoList: [ModifyResourceTags]) {
            self.modifyType = modifyType
            self.modifyResourceTagsInfoList = modifyResourceTagsInfoList
        }

        enum CodingKeys: String, CodingKey {
            case modifyType = "ModifyType"
            case modifyResourceTagsInfoList = "ModifyResourceTagsInfoList"
        }
    }

    /// ModifyResourcesTags返回参数结构体
    public struct ModifyResourcesTagsResponse: TCResponse {
        /// 成功的资源id列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let successList: [String]?

        /// 失败的资源id列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failList: [String]?

        /// 部分成功的资源id列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let partSuccessList: [String]?

        /// 集群id与流程id的映射列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterToFlowIdList: [ClusterIDToFlowID]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case successList = "SuccessList"
            case failList = "FailList"
            case partSuccessList = "PartSuccessList"
            case clusterToFlowIdList = "ClusterToFlowIdList"
            case requestId = "RequestId"
        }
    }

    /// 强制修改标签
    @inlinable
    public func modifyResourcesTags(_ input: ModifyResourcesTagsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyResourcesTagsResponse> {
        self.client.execute(action: "ModifyResourcesTags", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 强制修改标签
    @inlinable
    public func modifyResourcesTags(_ input: ModifyResourcesTagsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyResourcesTagsResponse {
        try await self.client.execute(action: "ModifyResourcesTags", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 强制修改标签
    @inlinable
    public func modifyResourcesTags(modifyType: String, modifyResourceTagsInfoList: [ModifyResourceTags], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyResourcesTagsResponse> {
        self.modifyResourcesTags(.init(modifyType: modifyType, modifyResourceTagsInfoList: modifyResourceTagsInfoList), region: region, logger: logger, on: eventLoop)
    }

    /// 强制修改标签
    @inlinable
    public func modifyResourcesTags(modifyType: String, modifyResourceTagsInfoList: [ModifyResourceTags], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyResourcesTagsResponse {
        try await self.modifyResourcesTags(.init(modifyType: modifyType, modifyResourceTagsInfoList: modifyResourceTagsInfoList), region: region, logger: logger, on: eventLoop)
    }
}
