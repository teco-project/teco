//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Emr {
    /// DescribeEmrApplicationStatics请求参数结构体
    public struct DescribeEmrApplicationStaticsRequest: TCRequest {
        /// 集群id
        public let instanceId: String

        /// 起始时间，时间戳（秒）
        public let startTime: Int64?

        /// 结束时间，时间戳（秒）
        public let endTime: Int64?

        /// 过滤的队列名
        public let queues: [String]?

        /// 过滤的用户名
        public let users: [String]?

        /// 过滤的作业类型
        public let applicationTypes: [String]?

        /// 分组字段，可选：queue, user, applicationType
        public let groupBy: [String]?

        /// 排序字段，可选：sumMemorySeconds, sumVCoreSeconds, sumHDFSBytesWritten, sumHDFSBytesRead
        public let orderBy: String?

        /// 是否顺序排序，0-逆序，1-正序
        public let isAsc: Int64?

        /// 页号
        public let offset: Int64?

        /// 页容量
        public let limit: Int64?

        public init(instanceId: String, startTime: Int64? = nil, endTime: Int64? = nil, queues: [String]? = nil, users: [String]? = nil, applicationTypes: [String]? = nil, groupBy: [String]? = nil, orderBy: String? = nil, isAsc: Int64? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
            self.queues = queues
            self.users = users
            self.applicationTypes = applicationTypes
            self.groupBy = groupBy
            self.orderBy = orderBy
            self.isAsc = isAsc
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case queues = "Queues"
            case users = "Users"
            case applicationTypes = "ApplicationTypes"
            case groupBy = "GroupBy"
            case orderBy = "OrderBy"
            case isAsc = "IsAsc"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// DescribeEmrApplicationStatics返回参数结构体
    public struct DescribeEmrApplicationStaticsResponse: TCResponse {
        /// 作业统计信息
        public let statics: [ApplicationStatics]

        /// 总数
        public let totalCount: Int64

        /// 可选择的队列名
        public let queues: [String]

        /// 可选择的用户名
        public let users: [String]

        /// 可选择的作业类型
        public let applicationTypes: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case statics = "Statics"
            case totalCount = "TotalCount"
            case queues = "Queues"
            case users = "Users"
            case applicationTypes = "ApplicationTypes"
            case requestId = "RequestId"
        }
    }

    /// 查询YARN的任务统计信息
    ///
    /// yarn application 统计接口查询
    @inlinable
    public func describeEmrApplicationStatics(_ input: DescribeEmrApplicationStaticsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEmrApplicationStaticsResponse> {
        self.client.execute(action: "DescribeEmrApplicationStatics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询YARN的任务统计信息
    ///
    /// yarn application 统计接口查询
    @inlinable
    public func describeEmrApplicationStatics(_ input: DescribeEmrApplicationStaticsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEmrApplicationStaticsResponse {
        try await self.client.execute(action: "DescribeEmrApplicationStatics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询YARN的任务统计信息
    ///
    /// yarn application 统计接口查询
    @inlinable
    public func describeEmrApplicationStatics(instanceId: String, startTime: Int64? = nil, endTime: Int64? = nil, queues: [String]? = nil, users: [String]? = nil, applicationTypes: [String]? = nil, groupBy: [String]? = nil, orderBy: String? = nil, isAsc: Int64? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEmrApplicationStaticsResponse> {
        self.describeEmrApplicationStatics(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, queues: queues, users: users, applicationTypes: applicationTypes, groupBy: groupBy, orderBy: orderBy, isAsc: isAsc, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询YARN的任务统计信息
    ///
    /// yarn application 统计接口查询
    @inlinable
    public func describeEmrApplicationStatics(instanceId: String, startTime: Int64? = nil, endTime: Int64? = nil, queues: [String]? = nil, users: [String]? = nil, applicationTypes: [String]? = nil, groupBy: [String]? = nil, orderBy: String? = nil, isAsc: Int64? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEmrApplicationStaticsResponse {
        try await self.describeEmrApplicationStatics(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, queues: queues, users: users, applicationTypes: applicationTypes, groupBy: groupBy, orderBy: orderBy, isAsc: isAsc, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }
}
