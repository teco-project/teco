//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Emr {
    /// TerminateClusterNodes请求参数结构体
    public struct TerminateClusterNodesRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 销毁资源列表
        public let cvmInstanceIds: [String]

        /// 销毁节点类型取值范围：
        /// - MASTER
        /// - TASK
        /// - CORE
        /// - ROUTER
        public let nodeFlag: String

        /// 优雅缩容开关
        /// - true:开启
        /// - false:不开启
        public let graceDownFlag: Bool?

        /// 优雅缩容等待时间,时间范围60到1800  单位秒
        public let graceDownTime: Int64?

        public init(instanceId: String, cvmInstanceIds: [String], nodeFlag: String, graceDownFlag: Bool? = nil, graceDownTime: Int64? = nil) {
            self.instanceId = instanceId
            self.cvmInstanceIds = cvmInstanceIds
            self.nodeFlag = nodeFlag
            self.graceDownFlag = graceDownFlag
            self.graceDownTime = graceDownTime
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case cvmInstanceIds = "CvmInstanceIds"
            case nodeFlag = "NodeFlag"
            case graceDownFlag = "GraceDownFlag"
            case graceDownTime = "GraceDownTime"
        }
    }

    /// TerminateClusterNodes返回参数结构体
    public struct TerminateClusterNodesResponse: TCResponse {
        /// 缩容流程ID。
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 销毁集群节点
    @inlinable
    public func terminateClusterNodes(_ input: TerminateClusterNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TerminateClusterNodesResponse> {
        self.client.execute(action: "TerminateClusterNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 销毁集群节点
    @inlinable
    public func terminateClusterNodes(_ input: TerminateClusterNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TerminateClusterNodesResponse {
        try await self.client.execute(action: "TerminateClusterNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 销毁集群节点
    @inlinable
    public func terminateClusterNodes(instanceId: String, cvmInstanceIds: [String], nodeFlag: String, graceDownFlag: Bool? = nil, graceDownTime: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TerminateClusterNodesResponse> {
        self.terminateClusterNodes(.init(instanceId: instanceId, cvmInstanceIds: cvmInstanceIds, nodeFlag: nodeFlag, graceDownFlag: graceDownFlag, graceDownTime: graceDownTime), region: region, logger: logger, on: eventLoop)
    }

    /// 销毁集群节点
    @inlinable
    public func terminateClusterNodes(instanceId: String, cvmInstanceIds: [String], nodeFlag: String, graceDownFlag: Bool? = nil, graceDownTime: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TerminateClusterNodesResponse {
        try await self.terminateClusterNodes(.init(instanceId: instanceId, cvmInstanceIds: cvmInstanceIds, nodeFlag: nodeFlag, graceDownFlag: graceDownFlag, graceDownTime: graceDownTime), region: region, logger: logger, on: eventLoop)
    }
}
