//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Emr {
    /// StartStopServiceOrMonitor请求参数结构体
    public struct StartStopServiceOrMonitorRequest: TCRequestModel {
        /// 集群ID
        public let instanceId: String

        /// 操作类型，当前支持
        /// <li>StartService：启动服务</li>
        /// <li>StopService：停止服务</li>
        /// <li>StartMonitor：退出维护</li>
        /// <li>StopMonitor：进入维护</li>
        /// <li>RestartService：重启服务 如果操作类型选择重启服务 StrategyConfig操作策略则是必填项</li>
        public let opType: String

        /// 操作范围
        public let opScope: OpScope

        /// 操作策略
        public let strategyConfig: StrategyConfig?

        public init(instanceId: String, opType: String, opScope: OpScope, strategyConfig: StrategyConfig? = nil) {
            self.instanceId = instanceId
            self.opType = opType
            self.opScope = opScope
            self.strategyConfig = strategyConfig
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case opType = "OpType"
            case opScope = "OpScope"
            case strategyConfig = "StrategyConfig"
        }
    }

    /// StartStopServiceOrMonitor返回参数结构体
    public struct StartStopServiceOrMonitorResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 执行服务操作
    ///
    /// 用于启停服务 重启服务等功能
    @inlinable @discardableResult
    public func startStopServiceOrMonitor(_ input: StartStopServiceOrMonitorRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartStopServiceOrMonitorResponse> {
        self.client.execute(action: "StartStopServiceOrMonitor", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 执行服务操作
    ///
    /// 用于启停服务 重启服务等功能
    @inlinable @discardableResult
    public func startStopServiceOrMonitor(_ input: StartStopServiceOrMonitorRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartStopServiceOrMonitorResponse {
        try await self.client.execute(action: "StartStopServiceOrMonitor", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 执行服务操作
    ///
    /// 用于启停服务 重启服务等功能
    @inlinable @discardableResult
    public func startStopServiceOrMonitor(instanceId: String, opType: String, opScope: OpScope, strategyConfig: StrategyConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartStopServiceOrMonitorResponse> {
        self.startStopServiceOrMonitor(.init(instanceId: instanceId, opType: opType, opScope: opScope, strategyConfig: strategyConfig), region: region, logger: logger, on: eventLoop)
    }

    /// 执行服务操作
    ///
    /// 用于启停服务 重启服务等功能
    @inlinable @discardableResult
    public func startStopServiceOrMonitor(instanceId: String, opType: String, opScope: OpScope, strategyConfig: StrategyConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartStopServiceOrMonitorResponse {
        try await self.startStopServiceOrMonitor(.init(instanceId: instanceId, opType: opType, opScope: opScope, strategyConfig: strategyConfig), region: region, logger: logger, on: eventLoop)
    }
}
