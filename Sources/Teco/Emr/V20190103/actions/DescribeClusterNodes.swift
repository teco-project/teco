//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Emr {
    /// DescribeClusterNodes请求参数结构体
    public struct DescribeClusterNodesRequest: TCRequestModel {
        /// 集群实例ID,实例ID形如: emr-xxxxxxxx
        public let instanceId: String

        /// 节点标识，取值为：
        /// - all：表示获取全部类型节点，cdb信息除外。
        /// - master：表示获取master节点信息。
        /// - core：表示获取core节点信息。
        /// - task：表示获取task节点信息。
        /// - common：表示获取common节点信息。
        /// - router：表示获取router节点信息。
        /// - db：表示获取正常状态的cdb信息。
        /// - recyle：表示获取回收站隔离中的节点信息，包括cdb信息。
        /// - renew：表示获取所有待续费的节点信息，包括cdb信息，自动续费节点不会返回。
        ///
        /// 注意：现在只支持以上取值，输入其他值会导致错误。
        public let nodeFlag: String

        /// 页编号，默认值为0，表示第一页。
        public let offset: Int64?

        /// 每页返回数量，默认值为100，最大值为100。
        public let limit: Int64?

        /// 资源类型:支持all/host/pod，默认为all
        public let hardwareResourceType: String?

        /// 支持搜索的字段
        public let searchFields: [SearchItem]?

        public let orderField: String?

        public let asc: Int64?

        public init(instanceId: String, nodeFlag: String, offset: Int64? = nil, limit: Int64? = nil, hardwareResourceType: String? = nil, searchFields: [SearchItem]? = nil, orderField: String? = nil, asc: Int64? = nil) {
            self.instanceId = instanceId
            self.nodeFlag = nodeFlag
            self.offset = offset
            self.limit = limit
            self.hardwareResourceType = hardwareResourceType
            self.searchFields = searchFields
            self.orderField = orderField
            self.asc = asc
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case nodeFlag = "NodeFlag"
            case offset = "Offset"
            case limit = "Limit"
            case hardwareResourceType = "HardwareResourceType"
            case searchFields = "SearchFields"
            case orderField = "OrderField"
            case asc = "Asc"
        }
    }

    /// DescribeClusterNodes返回参数结构体
    public struct DescribeClusterNodesResponse: TCResponseModel {
        /// 查询到的节点总数
        public let totalCnt: Int64

        /// 节点详细信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeList: [NodeHardwareInfo]?

        /// 用户所有的标签键列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagKeys: [String]?

        /// 资源类型列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hardwareResourceTypeList: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCnt = "TotalCnt"
            case nodeList = "NodeList"
            case tagKeys = "TagKeys"
            case hardwareResourceTypeList = "HardwareResourceTypeList"
            case requestId = "RequestId"
        }
    }

    /// 查询集群节点信息
    @inlinable
    public func describeClusterNodes(_ input: DescribeClusterNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterNodesResponse> {
        self.client.execute(action: "DescribeClusterNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询集群节点信息
    @inlinable
    public func describeClusterNodes(_ input: DescribeClusterNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterNodesResponse {
        try await self.client.execute(action: "DescribeClusterNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询集群节点信息
    @inlinable
    public func describeClusterNodes(instanceId: String, nodeFlag: String, offset: Int64? = nil, limit: Int64? = nil, hardwareResourceType: String? = nil, searchFields: [SearchItem]? = nil, orderField: String? = nil, asc: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterNodesResponse> {
        self.describeClusterNodes(.init(instanceId: instanceId, nodeFlag: nodeFlag, offset: offset, limit: limit, hardwareResourceType: hardwareResourceType, searchFields: searchFields, orderField: orderField, asc: asc), region: region, logger: logger, on: eventLoop)
    }

    /// 查询集群节点信息
    @inlinable
    public func describeClusterNodes(instanceId: String, nodeFlag: String, offset: Int64? = nil, limit: Int64? = nil, hardwareResourceType: String? = nil, searchFields: [SearchItem]? = nil, orderField: String? = nil, asc: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterNodesResponse {
        try await self.describeClusterNodes(.init(instanceId: instanceId, nodeFlag: nodeFlag, offset: offset, limit: limit, hardwareResourceType: hardwareResourceType, searchFields: searchFields, orderField: orderField, asc: asc), region: region, logger: logger, on: eventLoop)
    }
}
