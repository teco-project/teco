//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Emr {
    /// ModifyResourcePools请求参数结构体
    public struct ModifyResourcePoolsRequest: TCRequestModel {
        /// emr集群id
        public let instanceId: String

        /// 取值范围：
        /// <li>fair:代表公平调度标识</li>
        /// <li>capacity:代表容量调度标识</li>
        public let key: String

        public init(instanceId: String, key: String) {
            self.instanceId = instanceId
            self.key = key
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case key = "Key"
        }
    }

    /// ModifyResourcePools返回参数结构体
    public struct ModifyResourcePoolsResponse: TCResponseModel {
        /// false表示不是草稿，提交刷新请求成功
        public let isDraft: Bool

        /// 扩展字段，暂时没用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case isDraft = "IsDraft"
            case errorMsg = "ErrorMsg"
            case requestId = "RequestId"
        }
    }

    /// 刷新YARN的动态资源池
    @inlinable
    public func modifyResourcePools(_ input: ModifyResourcePoolsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyResourcePoolsResponse> {
        self.client.execute(action: "ModifyResourcePools", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 刷新YARN的动态资源池
    @inlinable
    public func modifyResourcePools(_ input: ModifyResourcePoolsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyResourcePoolsResponse {
        try await self.client.execute(action: "ModifyResourcePools", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 刷新YARN的动态资源池
    @inlinable
    public func modifyResourcePools(instanceId: String, key: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyResourcePoolsResponse> {
        let input = ModifyResourcePoolsRequest(instanceId: instanceId, key: key)
        return self.client.execute(action: "ModifyResourcePools", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 刷新YARN的动态资源池
    @inlinable
    public func modifyResourcePools(instanceId: String, key: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyResourcePoolsResponse {
        let input = ModifyResourcePoolsRequest(instanceId: instanceId, key: key)
        return try await self.client.execute(action: "ModifyResourcePools", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
