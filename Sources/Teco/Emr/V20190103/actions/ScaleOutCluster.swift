//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Emr {
    /// ScaleOutCluster请求参数结构体
    public struct ScaleOutClusterRequest: TCRequestModel {
        /// 节点计费模式。取值范围：
        /// <li>PREPAID：预付费，即包年包月。</li>
        /// <li>POSTPAID_BY_HOUR：按小时后付费。</li>
        /// <li>SPOTPAID：竞价付费（仅支持TASK节点）。</li>
        public let instanceChargeType: String

        /// 集群实例ID。
        public let instanceId: String

        /// 扩容节点类型以及数量
        public let scaleOutNodeConfig: ScaleOutNodeConfig

        /// 唯一随机标识，时效5分钟，需要调用者指定 防止客户端重新创建资源，例如 a9a90aa6-751a-41b6-aad6-fae36063280
        public let clientToken: String?

        /// 即包年包月相关参数设置。通过该参数可以指定包年包月实例的购买时长、是否设置自动续费等属性。若指定实例的付费模式为预付费则该参数必传。
        public let instanceChargePrepaid: InstanceChargePrepaid?

        /// [引导操作](https://cloud.tencent.com/document/product/589/35656)脚本设置。
        public let scriptBootstrapActionConfig: [ScriptBootstrapActionConfig]?

        /// 扩容部署服务，新增节点将默认继承当前节点类型中所部署服务，部署服务含默认可选服务，该参数仅支持可选服务填写，如：存量task节点已部署HDFS、YARN、impala；使用api扩容task节不部署impala时，此参数仅填写HDFS、YARN
        public let softDeployInfo: [Int64]?

        /// 部署进程，默认部署扩容服务的全部进程，支持修改部署进程，如：当前task节点部署服务为：HDFS、YARN、impala，默认部署服务为：DataNode,NodeManager,ImpalaServer，若用户需修改部署进程信息，此参数信息可填写：	DataNode,NodeManager,ImpalaServerCoordinator或DataNode,NodeManager,ImpalaServerExecutor
        public let serviceNodeInfo: [Int64]?

        /// 分散置放群组ID列表，当前只支持指定一个。
        /// 该参数可以通过调用 [DescribeDisasterRecoverGroups](https://cloud.tencent.com/document/product/213/17810)的返回值中的DisasterRecoverGroupId字段来获取。
        public let disasterRecoverGroupIds: [String]?

        /// 扩容节点绑定标签列表。
        public let tags: [Tag]?

        /// 扩容所选资源类型，可选范围为"host","pod"，host为普通的CVM资源，Pod为TKE集群或EKS集群提供的资源
        public let hardwareSourceType: String?

        /// Pod相关资源信息
        public let podSpecInfo: PodSpecInfo?

        /// 使用clickhouse集群扩容时，选择的机器分组名称
        public let clickHouseClusterName: String?

        /// 使用clickhouse集群扩容时，选择的机器分组类型。new为新增，old为选择旧分组
        public let clickHouseClusterType: String?

        /// 扩容指定 Yarn Node Label
        public let yarnNodeLabel: String?

        /// 扩容后是否启动服务，默认取值否
        /// <li>true：是</li>
        /// <li>false：否</li>
        public let enableStartServiceFlag: Bool?

        /// 规格设置
        public let resourceSpec: NodeResourceSpec?

        /// 实例所属的可用区，例如ap-guangzhou-1。该参数也可以通过调用[DescribeZones](https://cloud.tencent.com/document/product/213/15707) 的返回值中的Zone字段来获取。
        public let zone: String?

        /// 子网，默认是集群创建时的子网
        public let subnetId: String?

        public init(instanceChargeType: String, instanceId: String, scaleOutNodeConfig: ScaleOutNodeConfig, clientToken: String? = nil, instanceChargePrepaid: InstanceChargePrepaid? = nil, scriptBootstrapActionConfig: [ScriptBootstrapActionConfig]? = nil, softDeployInfo: [Int64]? = nil, serviceNodeInfo: [Int64]? = nil, disasterRecoverGroupIds: [String]? = nil, tags: [Tag]? = nil, hardwareSourceType: String? = nil, podSpecInfo: PodSpecInfo? = nil, clickHouseClusterName: String? = nil, clickHouseClusterType: String? = nil, yarnNodeLabel: String? = nil, enableStartServiceFlag: Bool? = nil, resourceSpec: NodeResourceSpec? = nil, zone: String? = nil, subnetId: String? = nil) {
            self.instanceChargeType = instanceChargeType
            self.instanceId = instanceId
            self.scaleOutNodeConfig = scaleOutNodeConfig
            self.clientToken = clientToken
            self.instanceChargePrepaid = instanceChargePrepaid
            self.scriptBootstrapActionConfig = scriptBootstrapActionConfig
            self.softDeployInfo = softDeployInfo
            self.serviceNodeInfo = serviceNodeInfo
            self.disasterRecoverGroupIds = disasterRecoverGroupIds
            self.tags = tags
            self.hardwareSourceType = hardwareSourceType
            self.podSpecInfo = podSpecInfo
            self.clickHouseClusterName = clickHouseClusterName
            self.clickHouseClusterType = clickHouseClusterType
            self.yarnNodeLabel = yarnNodeLabel
            self.enableStartServiceFlag = enableStartServiceFlag
            self.resourceSpec = resourceSpec
            self.zone = zone
            self.subnetId = subnetId
        }

        enum CodingKeys: String, CodingKey {
            case instanceChargeType = "InstanceChargeType"
            case instanceId = "InstanceId"
            case scaleOutNodeConfig = "ScaleOutNodeConfig"
            case clientToken = "ClientToken"
            case instanceChargePrepaid = "InstanceChargePrepaid"
            case scriptBootstrapActionConfig = "ScriptBootstrapActionConfig"
            case softDeployInfo = "SoftDeployInfo"
            case serviceNodeInfo = "ServiceNodeInfo"
            case disasterRecoverGroupIds = "DisasterRecoverGroupIds"
            case tags = "Tags"
            case hardwareSourceType = "HardwareSourceType"
            case podSpecInfo = "PodSpecInfo"
            case clickHouseClusterName = "ClickHouseClusterName"
            case clickHouseClusterType = "ClickHouseClusterType"
            case yarnNodeLabel = "YarnNodeLabel"
            case enableStartServiceFlag = "EnableStartServiceFlag"
            case resourceSpec = "ResourceSpec"
            case zone = "Zone"
            case subnetId = "SubnetId"
        }
    }

    /// ScaleOutCluster返回参数结构体
    public struct ScaleOutClusterResponse: TCResponseModel {
        /// 实例ID。
        public let instanceId: String

        /// 客户端Token。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientToken: String?

        /// 扩容流程ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowId: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case clientToken = "ClientToken"
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 扩容集群节点
    @inlinable
    public func scaleOutCluster(_ input: ScaleOutClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleOutClusterResponse> {
        self.client.execute(action: "ScaleOutCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 扩容集群节点
    @inlinable
    public func scaleOutCluster(_ input: ScaleOutClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleOutClusterResponse {
        try await self.client.execute(action: "ScaleOutCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 扩容集群节点
    @inlinable
    public func scaleOutCluster(instanceChargeType: String, instanceId: String, scaleOutNodeConfig: ScaleOutNodeConfig, clientToken: String? = nil, instanceChargePrepaid: InstanceChargePrepaid? = nil, scriptBootstrapActionConfig: [ScriptBootstrapActionConfig]? = nil, softDeployInfo: [Int64]? = nil, serviceNodeInfo: [Int64]? = nil, disasterRecoverGroupIds: [String]? = nil, tags: [Tag]? = nil, hardwareSourceType: String? = nil, podSpecInfo: PodSpecInfo? = nil, clickHouseClusterName: String? = nil, clickHouseClusterType: String? = nil, yarnNodeLabel: String? = nil, enableStartServiceFlag: Bool? = nil, resourceSpec: NodeResourceSpec? = nil, zone: String? = nil, subnetId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleOutClusterResponse> {
        self.scaleOutCluster(ScaleOutClusterRequest(instanceChargeType: instanceChargeType, instanceId: instanceId, scaleOutNodeConfig: scaleOutNodeConfig, clientToken: clientToken, instanceChargePrepaid: instanceChargePrepaid, scriptBootstrapActionConfig: scriptBootstrapActionConfig, softDeployInfo: softDeployInfo, serviceNodeInfo: serviceNodeInfo, disasterRecoverGroupIds: disasterRecoverGroupIds, tags: tags, hardwareSourceType: hardwareSourceType, podSpecInfo: podSpecInfo, clickHouseClusterName: clickHouseClusterName, clickHouseClusterType: clickHouseClusterType, yarnNodeLabel: yarnNodeLabel, enableStartServiceFlag: enableStartServiceFlag, resourceSpec: resourceSpec, zone: zone, subnetId: subnetId), region: region, logger: logger, on: eventLoop)
    }

    /// 扩容集群节点
    @inlinable
    public func scaleOutCluster(instanceChargeType: String, instanceId: String, scaleOutNodeConfig: ScaleOutNodeConfig, clientToken: String? = nil, instanceChargePrepaid: InstanceChargePrepaid? = nil, scriptBootstrapActionConfig: [ScriptBootstrapActionConfig]? = nil, softDeployInfo: [Int64]? = nil, serviceNodeInfo: [Int64]? = nil, disasterRecoverGroupIds: [String]? = nil, tags: [Tag]? = nil, hardwareSourceType: String? = nil, podSpecInfo: PodSpecInfo? = nil, clickHouseClusterName: String? = nil, clickHouseClusterType: String? = nil, yarnNodeLabel: String? = nil, enableStartServiceFlag: Bool? = nil, resourceSpec: NodeResourceSpec? = nil, zone: String? = nil, subnetId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleOutClusterResponse {
        try await self.scaleOutCluster(ScaleOutClusterRequest(instanceChargeType: instanceChargeType, instanceId: instanceId, scaleOutNodeConfig: scaleOutNodeConfig, clientToken: clientToken, instanceChargePrepaid: instanceChargePrepaid, scriptBootstrapActionConfig: scriptBootstrapActionConfig, softDeployInfo: softDeployInfo, serviceNodeInfo: serviceNodeInfo, disasterRecoverGroupIds: disasterRecoverGroupIds, tags: tags, hardwareSourceType: hardwareSourceType, podSpecInfo: podSpecInfo, clickHouseClusterName: clickHouseClusterName, clickHouseClusterType: clickHouseClusterType, yarnNodeLabel: yarnNodeLabel, enableStartServiceFlag: enableStartServiceFlag, resourceSpec: resourceSpec, zone: zone, subnetId: subnetId), region: region, logger: logger, on: eventLoop)
    }
}
