//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

/// Service error type returned by `Aiart`.
public protocol TCAiartErrorType: TCServiceErrorType {
    /// Get the service error as ``TCAiartError``.
    ///
    /// - Returns: ``TCAiartError`` that holds the same error code and context.
    func asAiartError() -> TCAiartError
}

public struct TCAiartError: TCAiartErrorType {
    enum Code: String {
        case authFailure_UnauthorizedOperation = "AuthFailure.UnauthorizedOperation"
        case failedOperation_ConsoleServerError = "FailedOperation.ConsoleServerError"
        case failedOperation_GenerateImageFailed = "FailedOperation.GenerateImageFailed"
        case failedOperation_ImageDecodeFailed = "FailedOperation.ImageDecodeFailed"
        case failedOperation_ImageDownloadError = "FailedOperation.ImageDownloadError"
        case failedOperation_ImageResolutionExceed = "FailedOperation.ImageResolutionExceed"
        case failedOperation_ImageSizeExceed = "FailedOperation.ImageSizeExceed"
        case failedOperation_RequestEntityTooLarge = "FailedOperation.RequestEntityTooLarge"
        case failedOperation_RequestTimeout = "FailedOperation.RequestTimeout"
        case failedOperation_RpcFail = "FailedOperation.RpcFail"
        case failedOperation_ServerError = "FailedOperation.ServerError"
        case failedOperation_Unknown = "FailedOperation.Unknown"
        case invalidParameterValue_ImageEmpty = "InvalidParameterValue.ImageEmpty"
        case invalidParameterValue_ParameterValueError = "InvalidParameterValue.ParameterValueError"
        case invalidParameterValue_StyleConflict = "InvalidParameterValue.StyleConflict"
        case invalidParameterValue_TextLengthExceed = "InvalidParameterValue.TextLengthExceed"
        case invalidParameterValue_UrlIllegal = "InvalidParameterValue.UrlIllegal"
        case invalidParameter_InvalidParameter = "InvalidParameter.InvalidParameter"
        case operationDenied_ImageIllegalDetected = "OperationDenied.ImageIllegalDetected"
        case operationDenied_TextIllegalDetected = "OperationDenied.TextIllegalDetected"
        case requestLimitExceeded = "RequestLimitExceeded"
        case resourceUnavailable_Delivering = "ResourceUnavailable.Delivering"
        case resourceUnavailable_InArrears = "ResourceUnavailable.InArrears"
        case resourceUnavailable_LowBalance = "ResourceUnavailable.LowBalance"
        case resourceUnavailable_NotExist = "ResourceUnavailable.NotExist"
        case resourceUnavailable_StopUsing = "ResourceUnavailable.StopUsing"
        case resourcesSoldOut_ChargeStatusException = "ResourcesSoldOut.ChargeStatusException"
    }

    /// Error domains affliated to ``TCAiartError``.
    public static var domains: [TCErrorType.Type] {
        [AuthFailure.self, FailedOperation.self, InvalidParameter.self, InvalidParameterValue.self, OperationDenied.self, ResourceUnavailable.self, ResourcesSoldOut.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 检查当前子账号是否拥有AI绘画的CAM策略
    public static var authFailure_UnauthorizedOperation: TCAiartError {
        TCAiartError(.authFailure_UnauthorizedOperation)
    }

    /// 控制台服务异常。
    public static var failedOperation_ConsoleServerError: TCAiartError {
        TCAiartError(.failedOperation_ConsoleServerError)
    }

    /// 生成图片审核不通过，请重试。
    public static var failedOperation_GenerateImageFailed: TCAiartError {
        TCAiartError(.failedOperation_GenerateImageFailed)
    }

    /// 图片解码失败。
    public static var failedOperation_ImageDecodeFailed: TCAiartError {
        TCAiartError(.failedOperation_ImageDecodeFailed)
    }

    /// 图片下载错误。
    public static var failedOperation_ImageDownloadError: TCAiartError {
        TCAiartError(.failedOperation_ImageDownloadError)
    }

    /// 图片分辨率过大，超过2000*2000。
    public static var failedOperation_ImageResolutionExceed: TCAiartError {
        TCAiartError(.failedOperation_ImageResolutionExceed)
    }

    /// base64编码后的图片数据大小不超过10M。
    public static var failedOperation_ImageSizeExceed: TCAiartError {
        TCAiartError(.failedOperation_ImageSizeExceed)
    }

    /// 整个请求体太大（通常主要是图片）。
    public static var failedOperation_RequestEntityTooLarge: TCAiartError {
        TCAiartError(.failedOperation_RequestEntityTooLarge)
    }

    /// 后端服务超时。
    public static var failedOperation_RequestTimeout: TCAiartError {
        TCAiartError(.failedOperation_RequestTimeout)
    }

    /// RPC请求失败，一般为算法微服务故障。
    public static var failedOperation_RpcFail: TCAiartError {
        TCAiartError(.failedOperation_RpcFail)
    }

    /// 服务内部错误。
    public static var failedOperation_ServerError: TCAiartError {
        TCAiartError(.failedOperation_ServerError)
    }

    /// 未知错误。
    public static var failedOperation_Unknown: TCAiartError {
        TCAiartError(.failedOperation_Unknown)
    }

    /// 图片为空。
    public static var invalidParameterValue_ImageEmpty: TCAiartError {
        TCAiartError(.invalidParameterValue_ImageEmpty)
    }

    /// 参数字段或者值有误
    public static var invalidParameterValue_ParameterValueError: TCAiartError {
        TCAiartError(.invalidParameterValue_ParameterValueError)
    }

    /// 1xx和其他风格不可混合使用。
    ///
    /// 1xx开头的风格与其他风格不兼容，若需要叠加请使用1xx内的风格或其他风格中任选几个
    public static var invalidParameterValue_StyleConflict: TCAiartError {
        TCAiartError(.invalidParameterValue_StyleConflict)
    }

    /// 输入文本过长，请更换短一点的文本后重试。
    ///
    /// 请更换更短的文本重试
    public static var invalidParameterValue_TextLengthExceed: TCAiartError {
        TCAiartError(.invalidParameterValue_TextLengthExceed)
    }

    /// URL格式不合法。
    public static var invalidParameterValue_UrlIllegal: TCAiartError {
        TCAiartError(.invalidParameterValue_UrlIllegal)
    }

    /// 参数不合法。
    public static var invalidParameter_InvalidParameter: TCAiartError {
        TCAiartError(.invalidParameter_InvalidParameter)
    }

    /// 图片包含非法信息，审核不通过。
    public static var operationDenied_ImageIllegalDetected: TCAiartError {
        TCAiartError(.operationDenied_ImageIllegalDetected)
    }

    /// 文本包含非法信息，审核不通过。
    public static var operationDenied_TextIllegalDetected: TCAiartError {
        TCAiartError(.operationDenied_TextIllegalDetected)
    }

    /// 请求的次数超过了频率限制。
    public static var requestLimitExceeded: TCAiartError {
        TCAiartError(.requestLimitExceeded)
    }

    /// 资源正在发货中。
    public static var resourceUnavailable_Delivering: TCAiartError {
        TCAiartError(.resourceUnavailable_Delivering)
    }

    /// 帐号已欠费。
    public static var resourceUnavailable_InArrears: TCAiartError {
        TCAiartError(.resourceUnavailable_InArrears)
    }

    /// 余额不足。
    public static var resourceUnavailable_LowBalance: TCAiartError {
        TCAiartError(.resourceUnavailable_LowBalance)
    }

    /// 计费状态未知，请确认是否已在控制台开通服务。
    public static var resourceUnavailable_NotExist: TCAiartError {
        TCAiartError(.resourceUnavailable_NotExist)
    }

    /// 帐号已停服。
    ///
    /// 请确认服务是否开通
    public static var resourceUnavailable_StopUsing: TCAiartError {
        TCAiartError(.resourceUnavailable_StopUsing)
    }

    /// 计费状态异常。
    public static var resourcesSoldOut_ChargeStatusException: TCAiartError {
        TCAiartError(.resourcesSoldOut_ChargeStatusException)
    }

    public func asAiartError() -> TCAiartError {
        return self
    }
}
