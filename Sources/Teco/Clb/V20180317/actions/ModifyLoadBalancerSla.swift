//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Clb {
    /// ModifyLoadBalancerSla请求参数结构体
    public struct ModifyLoadBalancerSlaRequest: TCRequestModel {
        /// 负载均衡实例信息
        public let loadBalancerSla: [SlaUpdateParam]
        
        public init (loadBalancerSla: [SlaUpdateParam]) {
            self.loadBalancerSla = loadBalancerSla
        }
        
        enum CodingKeys: String, CodingKey {
            case loadBalancerSla = "LoadBalancerSla"
        }
    }
    
    /// ModifyLoadBalancerSla返回参数结构体
    public struct ModifyLoadBalancerSlaResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 性能容量型变配
    ///
    /// 支持共享型clb升级到性能容量型clb（不支持性能保障降级到共享型）。
    @inlinable
    public func modifyLoadBalancerSla(_ input: ModifyLoadBalancerSlaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyLoadBalancerSlaResponse > {
        self.client.execute(action: "ModifyLoadBalancerSla", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 性能容量型变配
    ///
    /// 支持共享型clb升级到性能容量型clb（不支持性能保障降级到共享型）。
    @inlinable
    public func modifyLoadBalancerSla(_ input: ModifyLoadBalancerSlaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLoadBalancerSlaResponse {
        try await self.client.execute(action: "ModifyLoadBalancerSla", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 性能容量型变配
    ///
    /// 支持共享型clb升级到性能容量型clb（不支持性能保障降级到共享型）。
    @inlinable
    public func modifyLoadBalancerSla(loadBalancerSla: [SlaUpdateParam], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyLoadBalancerSlaResponse > {
        self.modifyLoadBalancerSla(ModifyLoadBalancerSlaRequest(loadBalancerSla: loadBalancerSla), logger: logger, on: eventLoop)
    }
    
    /// 性能容量型变配
    ///
    /// 支持共享型clb升级到性能容量型clb（不支持性能保障降级到共享型）。
    @inlinable
    public func modifyLoadBalancerSla(loadBalancerSla: [SlaUpdateParam], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLoadBalancerSlaResponse {
        try await self.modifyLoadBalancerSla(ModifyLoadBalancerSlaRequest(loadBalancerSla: loadBalancerSla), logger: logger, on: eventLoop)
    }
}
