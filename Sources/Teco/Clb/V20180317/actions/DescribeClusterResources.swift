//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Clb {
    /// DescribeClusterResources请求参数结构体
    public struct DescribeClusterResourcesRequest: TCRequestModel {
        /// 返回集群中资源列表数目，默认为20，最大值为100。
        public let limit: UInt64?

        /// 返回集群中资源列表起始偏移量，默认为0。
        public let offset: UInt64?

        /// 查询集群中资源列表条件，详细的过滤条件如下：
        /// <li> cluster-id - String - 是否必填：否 - （过滤条件）按照 集群 的唯一ID过滤，如 ："tgw-12345678","stgw-12345678","vpcgw-12345678"。</li>
        /// <li> vip - String - 是否必填：否 - （过滤条件）按照vip过滤。</li>
        /// <li> loadblancer-id - String - 是否必填：否 - （过滤条件）按照负载均衡唯一ID过滤。</li>
        /// <li> idle - String 是否必填：否 - （过滤条件）按照是否闲置过滤，如"True","False"。</li>
        public let filters: [Filter]?

        public init(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }
    }

    /// DescribeClusterResources返回参数结构体
    public struct DescribeClusterResourcesResponse: TCResponseModel {
        /// 集群中资源列表。
        public let clusterResourceSet: [ClusterResource]

        /// 集群中资源总数。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clusterResourceSet = "ClusterResourceSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询集群中资源列表
    ///
    /// 查询独占集群中的资源列表，支持按集群ID、VIP、负载均衡ID、是否闲置为过滤条件检索。
    @inlinable
    public func describeClusterResources(_ input: DescribeClusterResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterResourcesResponse> {
        self.client.execute(action: "DescribeClusterResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询集群中资源列表
    ///
    /// 查询独占集群中的资源列表，支持按集群ID、VIP、负载均衡ID、是否闲置为过滤条件检索。
    @inlinable
    public func describeClusterResources(_ input: DescribeClusterResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterResourcesResponse {
        try await self.client.execute(action: "DescribeClusterResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询集群中资源列表
    ///
    /// 查询独占集群中的资源列表，支持按集群ID、VIP、负载均衡ID、是否闲置为过滤条件检索。
    @inlinable
    public func describeClusterResources(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterResourcesResponse> {
        let input = DescribeClusterResourcesRequest(limit: limit, offset: offset, filters: filters)
        return self.client.execute(action: "DescribeClusterResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询集群中资源列表
    ///
    /// 查询独占集群中的资源列表，支持按集群ID、VIP、负载均衡ID、是否闲置为过滤条件检索。
    @inlinable
    public func describeClusterResources(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterResourcesResponse {
        let input = DescribeClusterResourcesRequest(limit: limit, offset: offset, filters: filters)
        return try await self.client.execute(action: "DescribeClusterResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
