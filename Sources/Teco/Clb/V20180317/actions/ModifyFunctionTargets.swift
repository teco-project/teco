//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Clb {
    /// ModifyFunctionTargets请求参数结构体
    public struct ModifyFunctionTargetsRequest: TCRequestModel {
        /// 负载均衡实例ID。
        public let loadBalancerId: String

        /// 负载均衡监听器ID。
        public let listenerId: String

        /// 要修改的后端云函数服务列表。
        public let functionTargets: [FunctionTarget]

        /// 转发规则的ID，当绑定机器到七层转发规则时，必须提供此参数或Domain+Url两者之一。
        public let locationId: String?

        /// 目标规则的域名，提供LocationId参数时本参数不生效。
        public let domain: String?

        /// 目标规则的URL，提供LocationId参数时本参数不生效。
        public let url: String?

        public init(loadBalancerId: String, listenerId: String, functionTargets: [FunctionTarget], locationId: String? = nil, domain: String? = nil, url: String? = nil) {
            self.loadBalancerId = loadBalancerId
            self.listenerId = listenerId
            self.functionTargets = functionTargets
            self.locationId = locationId
            self.domain = domain
            self.url = url
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case listenerId = "ListenerId"
            case functionTargets = "FunctionTargets"
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
        }
    }

    /// ModifyFunctionTargets返回参数结构体
    public struct ModifyFunctionTargetsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改转发规则绑定的云函数
    ///
    /// 修改负载均衡转发规则上所绑定的云函数。
    @inlinable @discardableResult
    public func modifyFunctionTargets(_ input: ModifyFunctionTargetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyFunctionTargetsResponse> {
        self.client.execute(action: "ModifyFunctionTargets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改转发规则绑定的云函数
    ///
    /// 修改负载均衡转发规则上所绑定的云函数。
    @inlinable @discardableResult
    public func modifyFunctionTargets(_ input: ModifyFunctionTargetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyFunctionTargetsResponse {
        try await self.client.execute(action: "ModifyFunctionTargets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改转发规则绑定的云函数
    ///
    /// 修改负载均衡转发规则上所绑定的云函数。
    @inlinable @discardableResult
    public func modifyFunctionTargets(loadBalancerId: String, listenerId: String, functionTargets: [FunctionTarget], locationId: String? = nil, domain: String? = nil, url: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyFunctionTargetsResponse> {
        self.modifyFunctionTargets(.init(loadBalancerId: loadBalancerId, listenerId: listenerId, functionTargets: functionTargets, locationId: locationId, domain: domain, url: url), region: region, logger: logger, on: eventLoop)
    }

    /// 修改转发规则绑定的云函数
    ///
    /// 修改负载均衡转发规则上所绑定的云函数。
    @inlinable @discardableResult
    public func modifyFunctionTargets(loadBalancerId: String, listenerId: String, functionTargets: [FunctionTarget], locationId: String? = nil, domain: String? = nil, url: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyFunctionTargetsResponse {
        try await self.modifyFunctionTargets(.init(loadBalancerId: loadBalancerId, listenerId: listenerId, functionTargets: functionTargets, locationId: locationId, domain: domain, url: url), region: region, logger: logger, on: eventLoop)
    }
}
