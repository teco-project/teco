//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Clb {
    /// DescribeResources请求参数结构体
    public struct DescribeResourcesRequest: TCPaginatedRequest {
        /// 返回可用区资源列表数目，默认20，最大值100。
        public let limit: UInt64?

        /// 返回可用区资源列表起始偏移量，默认0。
        public let offset: UInt64?

        /// 查询可用区资源列表条件，详细的过滤条件如下：
        /// - zone - String - 是否必填：否 - （过滤条件）按照 可用区 过滤，如："ap-guangzhou-1"（广州一区）。
        /// - isp -- String - 是否必填：否 - （过滤条件）按照 Isp 类型过滤，如："BGP","CMCC","CUCC","CTCC"。
        public let filters: [Filter]?

        public init(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeResourcesResponse) -> DescribeResourcesRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters)
        }
    }

    /// DescribeResources返回参数结构体
    public struct DescribeResourcesResponse: TCPaginatedResponse {
        /// 可用区支持的资源列表。
        public let zoneResourceSet: [ZoneResource]

        /// 可用区资源列表数目。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case zoneResourceSet = "ZoneResourceSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ZoneResource`` list from the paginated response.
        public func getItems() -> [ZoneResource] {
            self.zoneResourceSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询用户在当前地域支持可用区列表和资源列表
    ///
    /// 查询用户在当前地域支持可用区列表和资源列表。
    @inlinable
    public func describeResources(_ input: DescribeResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourcesResponse> {
        self.client.execute(action: "DescribeResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询用户在当前地域支持可用区列表和资源列表
    ///
    /// 查询用户在当前地域支持可用区列表和资源列表。
    @inlinable
    public func describeResources(_ input: DescribeResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourcesResponse {
        try await self.client.execute(action: "DescribeResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询用户在当前地域支持可用区列表和资源列表
    ///
    /// 查询用户在当前地域支持可用区列表和资源列表。
    @inlinable
    public func describeResources(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourcesResponse> {
        self.describeResources(.init(limit: limit, offset: offset, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户在当前地域支持可用区列表和资源列表
    ///
    /// 查询用户在当前地域支持可用区列表和资源列表。
    @inlinable
    public func describeResources(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourcesResponse {
        try await self.describeResources(.init(limit: limit, offset: offset, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户在当前地域支持可用区列表和资源列表
    ///
    /// 查询用户在当前地域支持可用区列表和资源列表。
    @inlinable
    public func describeResourcesPaginated(_ input: DescribeResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [ZoneResource])> {
        self.client.paginate(input: input, region: region, command: self.describeResources, logger: logger, on: eventLoop)
    }

    /// 查询用户在当前地域支持可用区列表和资源列表
    ///
    /// 查询用户在当前地域支持可用区列表和资源列表。
    @inlinable @discardableResult
    public func describeResourcesPaginated(_ input: DescribeResourcesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeResourcesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeResources, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询用户在当前地域支持可用区列表和资源列表
    ///
    /// 查询用户在当前地域支持可用区列表和资源列表。
    ///
    /// - Returns: `AsyncSequence`s of ``ZoneResource`` and ``DescribeResourcesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeResourcesPaginator(_ input: DescribeResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeResourcesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeResources, logger: logger, on: eventLoop)
    }
}
