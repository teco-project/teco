//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Clb {
    /// DeregisterFunctionTargets请求参数结构体
    public struct DeregisterFunctionTargetsRequest: TCRequestModel {
        /// 负载均衡实例 ID。
        public let loadBalancerId: String

        /// 负载均衡监听器 ID。
        public let listenerId: String

        /// 待解绑的云函数列表。
        public let functionTargets: [FunctionTarget]

        /// 目标转发规则的 ID，当将云函数从七层转发规则上解绑时，必须输入此参数或 Domain+Url 参数。
        public let locationId: String?

        /// 目标转发规则的域名，若已经输入 LocationId 参数，则本参数不生效。
        public let domain: String?

        /// 目标转发规则的 URL，若已经输入 LocationId 参数，则本参数不生效。
        public let url: String?

        public init(loadBalancerId: String, listenerId: String, functionTargets: [FunctionTarget], locationId: String? = nil, domain: String? = nil, url: String? = nil) {
            self.loadBalancerId = loadBalancerId
            self.listenerId = listenerId
            self.functionTargets = functionTargets
            self.locationId = locationId
            self.domain = domain
            self.url = url
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case listenerId = "ListenerId"
            case functionTargets = "FunctionTargets"
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
        }
    }

    /// DeregisterFunctionTargets返回参数结构体
    public struct DeregisterFunctionTargetsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 将云函数从转发规则上解绑
    ///
    /// DeregisterFunctionTargets 接口用来将一个云函数从负载均衡的转发规则上解绑，对于七层监听器，还需通过 LocationId 或 Domain+Url 指定转发规则。
    /// 本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 [DescribeTaskStatus](https://cloud.tencent.com/document/product/214/30683) 接口查询本次任务是否成功。
    /// <br/>限制说明：
    ///
    /// - 仅广州、深圳金融、上海、上海金融、北京、成都、中国香港、新加坡、孟买、东京、硅谷地域支持绑定 SCF。
    /// - 仅标准账户类型支持绑定 SCF，传统账户类型不支持。建议升级为标准账户类型，详情可参见 [账户类型升级说明](https://cloud.tencent.com/document/product/1199/49090)。
    /// - 传统型负载均衡不支持绑定 SCF。
    /// - 基础网络类型不支持绑定 SCF。
    /// - CLB 默认支持绑定同地域下的所有 SCF，可支持跨 VPC 绑定 SCF，不支持跨地域绑定。
    /// - 目前仅 IPv4、IPv6 NAT64 版本的负载均衡支持绑定 SCF，IPv6 版本的暂不支持。
    /// - 仅七层（HTTP、HTTPS）监听器支持绑定 SCF，四层（TCP、UDP、TCP SSL）监听器和七层 QUIC 监听器不支持。
    /// - CLB 绑定 SCF 仅支持绑定“Event 函数”类型的云函数。
    @inlinable @discardableResult
    public func deregisterFunctionTargets(_ input: DeregisterFunctionTargetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeregisterFunctionTargetsResponse> {
        self.client.execute(action: "DeregisterFunctionTargets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 将云函数从转发规则上解绑
    ///
    /// DeregisterFunctionTargets 接口用来将一个云函数从负载均衡的转发规则上解绑，对于七层监听器，还需通过 LocationId 或 Domain+Url 指定转发规则。
    /// 本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 [DescribeTaskStatus](https://cloud.tencent.com/document/product/214/30683) 接口查询本次任务是否成功。
    /// <br/>限制说明：
    ///
    /// - 仅广州、深圳金融、上海、上海金融、北京、成都、中国香港、新加坡、孟买、东京、硅谷地域支持绑定 SCF。
    /// - 仅标准账户类型支持绑定 SCF，传统账户类型不支持。建议升级为标准账户类型，详情可参见 [账户类型升级说明](https://cloud.tencent.com/document/product/1199/49090)。
    /// - 传统型负载均衡不支持绑定 SCF。
    /// - 基础网络类型不支持绑定 SCF。
    /// - CLB 默认支持绑定同地域下的所有 SCF，可支持跨 VPC 绑定 SCF，不支持跨地域绑定。
    /// - 目前仅 IPv4、IPv6 NAT64 版本的负载均衡支持绑定 SCF，IPv6 版本的暂不支持。
    /// - 仅七层（HTTP、HTTPS）监听器支持绑定 SCF，四层（TCP、UDP、TCP SSL）监听器和七层 QUIC 监听器不支持。
    /// - CLB 绑定 SCF 仅支持绑定“Event 函数”类型的云函数。
    @inlinable @discardableResult
    public func deregisterFunctionTargets(_ input: DeregisterFunctionTargetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeregisterFunctionTargetsResponse {
        try await self.client.execute(action: "DeregisterFunctionTargets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 将云函数从转发规则上解绑
    ///
    /// DeregisterFunctionTargets 接口用来将一个云函数从负载均衡的转发规则上解绑，对于七层监听器，还需通过 LocationId 或 Domain+Url 指定转发规则。
    /// 本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 [DescribeTaskStatus](https://cloud.tencent.com/document/product/214/30683) 接口查询本次任务是否成功。
    /// <br/>限制说明：
    ///
    /// - 仅广州、深圳金融、上海、上海金融、北京、成都、中国香港、新加坡、孟买、东京、硅谷地域支持绑定 SCF。
    /// - 仅标准账户类型支持绑定 SCF，传统账户类型不支持。建议升级为标准账户类型，详情可参见 [账户类型升级说明](https://cloud.tencent.com/document/product/1199/49090)。
    /// - 传统型负载均衡不支持绑定 SCF。
    /// - 基础网络类型不支持绑定 SCF。
    /// - CLB 默认支持绑定同地域下的所有 SCF，可支持跨 VPC 绑定 SCF，不支持跨地域绑定。
    /// - 目前仅 IPv4、IPv6 NAT64 版本的负载均衡支持绑定 SCF，IPv6 版本的暂不支持。
    /// - 仅七层（HTTP、HTTPS）监听器支持绑定 SCF，四层（TCP、UDP、TCP SSL）监听器和七层 QUIC 监听器不支持。
    /// - CLB 绑定 SCF 仅支持绑定“Event 函数”类型的云函数。
    @inlinable @discardableResult
    public func deregisterFunctionTargets(loadBalancerId: String, listenerId: String, functionTargets: [FunctionTarget], locationId: String? = nil, domain: String? = nil, url: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeregisterFunctionTargetsResponse> {
        self.deregisterFunctionTargets(.init(loadBalancerId: loadBalancerId, listenerId: listenerId, functionTargets: functionTargets, locationId: locationId, domain: domain, url: url), region: region, logger: logger, on: eventLoop)
    }

    /// 将云函数从转发规则上解绑
    ///
    /// DeregisterFunctionTargets 接口用来将一个云函数从负载均衡的转发规则上解绑，对于七层监听器，还需通过 LocationId 或 Domain+Url 指定转发规则。
    /// 本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 [DescribeTaskStatus](https://cloud.tencent.com/document/product/214/30683) 接口查询本次任务是否成功。
    /// <br/>限制说明：
    ///
    /// - 仅广州、深圳金融、上海、上海金融、北京、成都、中国香港、新加坡、孟买、东京、硅谷地域支持绑定 SCF。
    /// - 仅标准账户类型支持绑定 SCF，传统账户类型不支持。建议升级为标准账户类型，详情可参见 [账户类型升级说明](https://cloud.tencent.com/document/product/1199/49090)。
    /// - 传统型负载均衡不支持绑定 SCF。
    /// - 基础网络类型不支持绑定 SCF。
    /// - CLB 默认支持绑定同地域下的所有 SCF，可支持跨 VPC 绑定 SCF，不支持跨地域绑定。
    /// - 目前仅 IPv4、IPv6 NAT64 版本的负载均衡支持绑定 SCF，IPv6 版本的暂不支持。
    /// - 仅七层（HTTP、HTTPS）监听器支持绑定 SCF，四层（TCP、UDP、TCP SSL）监听器和七层 QUIC 监听器不支持。
    /// - CLB 绑定 SCF 仅支持绑定“Event 函数”类型的云函数。
    @inlinable @discardableResult
    public func deregisterFunctionTargets(loadBalancerId: String, listenerId: String, functionTargets: [FunctionTarget], locationId: String? = nil, domain: String? = nil, url: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeregisterFunctionTargetsResponse {
        try await self.deregisterFunctionTargets(.init(loadBalancerId: loadBalancerId, listenerId: listenerId, functionTargets: functionTargets, locationId: locationId, domain: domain, url: url), region: region, logger: logger, on: eventLoop)
    }
}
