//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Clb {
    /// RegisterTargetsWithClassicalLB请求参数结构体
    public struct RegisterTargetsWithClassicalLBRequest: TCRequestModel {
        /// 负载均衡实例ID。
        public let loadBalancerId: String

        /// 后端服务信息。
        public let targets: [ClassicalTargetInfo]

        public init(loadBalancerId: String, targets: [ClassicalTargetInfo]) {
            self.loadBalancerId = loadBalancerId
            self.targets = targets
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case targets = "Targets"
        }
    }

    /// RegisterTargetsWithClassicalLB返回参数结构体
    public struct RegisterTargetsWithClassicalLBResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 绑定后端服务到传统型负载均衡
    ///
    /// RegisterTargetsWithClassicalLB 接口用于绑定后端服务到传统型负载均衡。本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
    @inlinable @discardableResult
    public func registerTargetsWithClassicalLB(_ input: RegisterTargetsWithClassicalLBRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RegisterTargetsWithClassicalLBResponse> {
        self.client.execute(action: "RegisterTargetsWithClassicalLB", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定后端服务到传统型负载均衡
    ///
    /// RegisterTargetsWithClassicalLB 接口用于绑定后端服务到传统型负载均衡。本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
    @inlinable @discardableResult
    public func registerTargetsWithClassicalLB(_ input: RegisterTargetsWithClassicalLBRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RegisterTargetsWithClassicalLBResponse {
        try await self.client.execute(action: "RegisterTargetsWithClassicalLB", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 绑定后端服务到传统型负载均衡
    ///
    /// RegisterTargetsWithClassicalLB 接口用于绑定后端服务到传统型负载均衡。本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
    @inlinable @discardableResult
    public func registerTargetsWithClassicalLB(loadBalancerId: String, targets: [ClassicalTargetInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RegisterTargetsWithClassicalLBResponse> {
        self.registerTargetsWithClassicalLB(.init(loadBalancerId: loadBalancerId, targets: targets), region: region, logger: logger, on: eventLoop)
    }

    /// 绑定后端服务到传统型负载均衡
    ///
    /// RegisterTargetsWithClassicalLB 接口用于绑定后端服务到传统型负载均衡。本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
    @inlinable @discardableResult
    public func registerTargetsWithClassicalLB(loadBalancerId: String, targets: [ClassicalTargetInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RegisterTargetsWithClassicalLBResponse {
        try await self.registerTargetsWithClassicalLB(.init(loadBalancerId: loadBalancerId, targets: targets), region: region, logger: logger, on: eventLoop)
    }
}
