//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Clb {
    /// InquiryPriceRefundLoadBalancer请求参数结构体
    public struct InquiryPriceRefundLoadBalancerRequest: TCRequest {
        /// 负载均衡实例ID
        public let loadBalancerId: String

        public init(loadBalancerId: String) {
            self.loadBalancerId = loadBalancerId
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
        }
    }

    /// InquiryPriceRefundLoadBalancer返回参数结构体
    public struct InquiryPriceRefundLoadBalancerResponse: TCResponse {
        /// 该参数表示对应的价格。
        public let price: Price

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case price = "Price"
            case requestId = "RequestId"
        }
    }

    /// 退还负载均衡实例询价
    ///
    /// InquiryPriceRefundLoadBalancer接口查询负载均衡退费价格。
    @inlinable
    public func inquiryPriceRefundLoadBalancer(_ input: InquiryPriceRefundLoadBalancerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InquiryPriceRefundLoadBalancerResponse> {
        self.client.execute(action: "InquiryPriceRefundLoadBalancer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 退还负载均衡实例询价
    ///
    /// InquiryPriceRefundLoadBalancer接口查询负载均衡退费价格。
    @inlinable
    public func inquiryPriceRefundLoadBalancer(_ input: InquiryPriceRefundLoadBalancerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InquiryPriceRefundLoadBalancerResponse {
        try await self.client.execute(action: "InquiryPriceRefundLoadBalancer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 退还负载均衡实例询价
    ///
    /// InquiryPriceRefundLoadBalancer接口查询负载均衡退费价格。
    @inlinable
    public func inquiryPriceRefundLoadBalancer(loadBalancerId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InquiryPriceRefundLoadBalancerResponse> {
        self.inquiryPriceRefundLoadBalancer(.init(loadBalancerId: loadBalancerId), region: region, logger: logger, on: eventLoop)
    }

    /// 退还负载均衡实例询价
    ///
    /// InquiryPriceRefundLoadBalancer接口查询负载均衡退费价格。
    @inlinable
    public func inquiryPriceRefundLoadBalancer(loadBalancerId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InquiryPriceRefundLoadBalancerResponse {
        try await self.inquiryPriceRefundLoadBalancer(.init(loadBalancerId: loadBalancerId), region: region, logger: logger, on: eventLoop)
    }
}
