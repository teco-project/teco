//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Clb {
    /// InquiryPriceModifyLoadBalancer请求参数结构体
    public struct InquiryPriceModifyLoadBalancerRequest: TCRequest {
        /// 负载均衡实例ID
        public let loadBalancerId: String

        /// 修改后的网络带宽信息
        public let internetAccessible: InternetAccessible

        public init(loadBalancerId: String, internetAccessible: InternetAccessible) {
            self.loadBalancerId = loadBalancerId
            self.internetAccessible = internetAccessible
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case internetAccessible = "InternetAccessible"
        }
    }

    /// InquiryPriceModifyLoadBalancer返回参数结构体
    public struct InquiryPriceModifyLoadBalancerResponse: TCResponse {
        /// 描述价格信息
        public let price: Price

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case price = "Price"
            case requestId = "RequestId"
        }
    }

    /// 修改负载均衡配置询价
    ///
    /// InquiryPriceModifyLoadBalancer接口修改负载均衡配置询价。
    @inlinable
    public func inquiryPriceModifyLoadBalancer(_ input: InquiryPriceModifyLoadBalancerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InquiryPriceModifyLoadBalancerResponse> {
        self.client.execute(action: "InquiryPriceModifyLoadBalancer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改负载均衡配置询价
    ///
    /// InquiryPriceModifyLoadBalancer接口修改负载均衡配置询价。
    @inlinable
    public func inquiryPriceModifyLoadBalancer(_ input: InquiryPriceModifyLoadBalancerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InquiryPriceModifyLoadBalancerResponse {
        try await self.client.execute(action: "InquiryPriceModifyLoadBalancer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改负载均衡配置询价
    ///
    /// InquiryPriceModifyLoadBalancer接口修改负载均衡配置询价。
    @inlinable
    public func inquiryPriceModifyLoadBalancer(loadBalancerId: String, internetAccessible: InternetAccessible, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InquiryPriceModifyLoadBalancerResponse> {
        self.inquiryPriceModifyLoadBalancer(.init(loadBalancerId: loadBalancerId, internetAccessible: internetAccessible), region: region, logger: logger, on: eventLoop)
    }

    /// 修改负载均衡配置询价
    ///
    /// InquiryPriceModifyLoadBalancer接口修改负载均衡配置询价。
    @inlinable
    public func inquiryPriceModifyLoadBalancer(loadBalancerId: String, internetAccessible: InternetAccessible, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InquiryPriceModifyLoadBalancerResponse {
        try await self.inquiryPriceModifyLoadBalancer(.init(loadBalancerId: loadBalancerId, internetAccessible: internetAccessible), region: region, logger: logger, on: eventLoop)
    }
}
