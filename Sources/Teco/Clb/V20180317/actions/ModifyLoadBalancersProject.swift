//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Clb {
    /// ModifyLoadBalancersProject请求参数结构体
    public struct ModifyLoadBalancersProjectRequest: TCRequest {
        /// 一个或多个待操作的负载均衡实例ID。
        public let loadBalancerIds: [String]

        /// 项目ID。
        public let projectId: UInt64

        public init(loadBalancerIds: [String], projectId: UInt64) {
            self.loadBalancerIds = loadBalancerIds
            self.projectId = projectId
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerIds = "LoadBalancerIds"
            case projectId = "ProjectId"
        }
    }

    /// ModifyLoadBalancersProject返回参数结构体
    public struct ModifyLoadBalancersProjectResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改负载均衡所属项目
    ///
    /// 修改一个或多个负载均衡实例所属项目。
    @inlinable @discardableResult
    public func modifyLoadBalancersProject(_ input: ModifyLoadBalancersProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLoadBalancersProjectResponse> {
        self.client.execute(action: "ModifyLoadBalancersProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改负载均衡所属项目
    ///
    /// 修改一个或多个负载均衡实例所属项目。
    @inlinable @discardableResult
    public func modifyLoadBalancersProject(_ input: ModifyLoadBalancersProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLoadBalancersProjectResponse {
        try await self.client.execute(action: "ModifyLoadBalancersProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改负载均衡所属项目
    ///
    /// 修改一个或多个负载均衡实例所属项目。
    @inlinable @discardableResult
    public func modifyLoadBalancersProject(loadBalancerIds: [String], projectId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLoadBalancersProjectResponse> {
        self.modifyLoadBalancersProject(.init(loadBalancerIds: loadBalancerIds, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }

    /// 修改负载均衡所属项目
    ///
    /// 修改一个或多个负载均衡实例所属项目。
    @inlinable @discardableResult
    public func modifyLoadBalancersProject(loadBalancerIds: [String], projectId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLoadBalancersProjectResponse {
        try await self.modifyLoadBalancersProject(.init(loadBalancerIds: loadBalancerIds, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }
}
