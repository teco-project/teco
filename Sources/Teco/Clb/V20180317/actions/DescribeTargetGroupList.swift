//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Clb {
    /// DescribeTargetGroupList请求参数结构体
    public struct DescribeTargetGroupListRequest: TCPaginatedRequest {
        /// 目标组ID数组。
        public let targetGroupIds: [String]?

        /// 过滤条件数组，支持TargetGroupVpcId和TargetGroupName。与TargetGroupIds互斥，优先使用目标组ID。
        public let filters: [Filter]?

        /// 显示的偏移起始量。
        public let offset: UInt64?

        /// 显示条数限制，默认为20。
        public let limit: UInt64?

        public init(targetGroupIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.targetGroupIds = targetGroupIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case targetGroupIds = "TargetGroupIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTargetGroupListResponse) -> DescribeTargetGroupListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeTargetGroupListRequest(targetGroupIds: self.targetGroupIds, filters: self.filters, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeTargetGroupList返回参数结构体
    public struct DescribeTargetGroupListResponse: TCPaginatedResponse {
        /// 显示的结果数量。
        public let totalCount: UInt64

        /// 显示的目标组信息集合。
        public let targetGroupSet: [TargetGroupInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case targetGroupSet = "TargetGroupSet"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [TargetGroupInfo] {
            self.targetGroupSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取目标组列表
    @inlinable
    public func describeTargetGroupList(_ input: DescribeTargetGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTargetGroupListResponse> {
        self.client.execute(action: "DescribeTargetGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取目标组列表
    @inlinable
    public func describeTargetGroupList(_ input: DescribeTargetGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTargetGroupListResponse {
        try await self.client.execute(action: "DescribeTargetGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取目标组列表
    @inlinable
    public func describeTargetGroupList(targetGroupIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTargetGroupListResponse> {
        self.describeTargetGroupList(.init(targetGroupIds: targetGroupIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取目标组列表
    @inlinable
    public func describeTargetGroupList(targetGroupIds: [String]? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTargetGroupListResponse {
        try await self.describeTargetGroupList(.init(targetGroupIds: targetGroupIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取目标组列表
    @inlinable
    public func describeTargetGroupListPaginated(_ input: DescribeTargetGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [TargetGroupInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeTargetGroupList, logger: logger, on: eventLoop)
    }

    /// 获取目标组列表
    @inlinable @discardableResult
    public func describeTargetGroupListPaginated(_ input: DescribeTargetGroupListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTargetGroupListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTargetGroupList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取目标组列表
    ///
    /// - Returns: `AsyncSequence`s of `TargetGroupInfo` and `DescribeTargetGroupListResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTargetGroupListPaginator(_ input: DescribeTargetGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTargetGroupListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTargetGroupList, logger: logger, on: eventLoop)
    }
}
