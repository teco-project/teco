//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Clb {
    /// DescribeCrossTargets请求参数结构体
    public struct DescribeCrossTargetsRequest: TCRequestModel {
        /// 返回后端服务列表数目，默认20，最大值100。
        public let limit: UInt64?
        
        /// 返回后端服务列表起始偏移量，默认0。
        public let offset: UInt64?
        
        /// 查询跨域2.0版本云联网后端子机和网卡服务列表条件，详细的过滤条件如下：
        /// <li> vpc-id - String - 是否必填：否 - （过滤条件）按照 本地私有网络ID，即负载均衡的VpcId 过滤，如："vpc-12345678"。</li>
        /// <li> ip - String - 是否必填：否 - （过滤条件）按照 后端服务ip 过滤，如："192.168.0.1"。</li>
        /// <li> listener-id - String - 是否必填：否 - （过滤条件）按照 监听器ID 过滤，如："lbl-12345678"。</li>
        /// <li> location-id - String - 是否必填：否 - （过滤条件）按照 七层监听器规则ID 过滤，如："loc-12345678"。</li>
        public let filters: [Filter]?
        
        public init (limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }
        
        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }
    }
    
    /// DescribeCrossTargets返回参数结构体
    public struct DescribeCrossTargetsResponse: TCResponseModel {
        /// 后端服务列表总数。
        public let totalCount: UInt64
        
        /// 后端服务列表。
        public let crossTargetSet: [CrossTargets]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case crossTargetSet = "CrossTargetSet"
            case requestId = "RequestId"
        }
    }
    
    /// 查询跨域2.0版本云联网后端子机和网卡信息
    ///
    /// 查询跨域2.0版本云联网后端子机和网卡信息。
    @inlinable
    public func describeCrossTargets(_ input: DescribeCrossTargetsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeCrossTargetsResponse > {
        self.client.execute(action: "DescribeCrossTargets", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询跨域2.0版本云联网后端子机和网卡信息
    ///
    /// 查询跨域2.0版本云联网后端子机和网卡信息。
    @inlinable
    public func describeCrossTargets(_ input: DescribeCrossTargetsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCrossTargetsResponse {
        try await self.client.execute(action: "DescribeCrossTargets", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
