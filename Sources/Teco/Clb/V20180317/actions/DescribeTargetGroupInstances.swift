//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Clb {
    /// DescribeTargetGroupInstances请求参数结构体
    public struct DescribeTargetGroupInstancesRequest: TCPaginatedRequest {
        /// 过滤条件，当前仅支持TargetGroupId，BindIP，InstanceId过滤。
        public let filters: [Filter]

        /// 显示数量限制，默认20。
        public let limit: UInt64?

        /// 显示的偏移量，默认为0。
        public let offset: UInt64?

        public init(filters: [Filter], limit: UInt64? = nil, offset: UInt64? = nil) {
            self.filters = filters
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTargetGroupInstancesResponse) -> DescribeTargetGroupInstancesRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(filters: self.filters, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribeTargetGroupInstances返回参数结构体
    public struct DescribeTargetGroupInstancesResponse: TCPaginatedResponse {
        /// 本次查询的结果数量。
        public let totalCount: UInt64

        /// 绑定的服务器信息。
        public let targetGroupInstanceSet: [TargetGroupBackend]

        /// 实际统计数量，不受Limit、Offset、CAM的影响。
        public let realCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case targetGroupInstanceSet = "TargetGroupInstanceSet"
            case realCount = "RealCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TargetGroupBackend`` list from the paginated response.
        public func getItems() -> [TargetGroupBackend] {
            self.targetGroupInstanceSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取目标组绑定的服务器
    ///
    /// 获取目标组绑定的服务器信息
    @inlinable
    public func describeTargetGroupInstances(_ input: DescribeTargetGroupInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTargetGroupInstancesResponse> {
        self.client.execute(action: "DescribeTargetGroupInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取目标组绑定的服务器
    ///
    /// 获取目标组绑定的服务器信息
    @inlinable
    public func describeTargetGroupInstances(_ input: DescribeTargetGroupInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTargetGroupInstancesResponse {
        try await self.client.execute(action: "DescribeTargetGroupInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取目标组绑定的服务器
    ///
    /// 获取目标组绑定的服务器信息
    @inlinable
    public func describeTargetGroupInstances(filters: [Filter], limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTargetGroupInstancesResponse> {
        self.describeTargetGroupInstances(.init(filters: filters, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 获取目标组绑定的服务器
    ///
    /// 获取目标组绑定的服务器信息
    @inlinable
    public func describeTargetGroupInstances(filters: [Filter], limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTargetGroupInstancesResponse {
        try await self.describeTargetGroupInstances(.init(filters: filters, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 获取目标组绑定的服务器
    ///
    /// 获取目标组绑定的服务器信息
    @inlinable
    public func describeTargetGroupInstancesPaginated(_ input: DescribeTargetGroupInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [TargetGroupBackend])> {
        self.client.paginate(input: input, region: region, command: self.describeTargetGroupInstances, logger: logger, on: eventLoop)
    }

    /// 获取目标组绑定的服务器
    ///
    /// 获取目标组绑定的服务器信息
    @inlinable @discardableResult
    public func describeTargetGroupInstancesPaginated(_ input: DescribeTargetGroupInstancesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTargetGroupInstancesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTargetGroupInstances, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取目标组绑定的服务器
    ///
    /// 获取目标组绑定的服务器信息
    ///
    /// - Returns: `AsyncSequence`s of ``TargetGroupBackend`` and ``DescribeTargetGroupInstancesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTargetGroupInstancesPaginator(_ input: DescribeTargetGroupInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTargetGroupInstancesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTargetGroupInstances, logger: logger, on: eventLoop)
    }
}
