//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Clb {
    /// 目标组关联到的规则
    public struct AssociationItem: TCOutputModel {
        /// 关联到的负载均衡ID
        public let loadBalancerId: String

        /// 关联到的监听器ID
        public let listenerId: String

        /// 关联到的转发规则ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let locationId: String?

        /// 关联到的监听器协议类型，如HTTP,TCP,
        public let `protocol`: String

        /// 关联到的监听器端口
        public let port: UInt64

        /// 关联到的转发规则域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 关联到的转发规则URL
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 负载均衡名称
        public let loadBalancerName: String

        /// 监听器名称
        public let listenerName: String

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case listenerId = "ListenerId"
            case locationId = "LocationId"
            case `protocol` = "Protocol"
            case port = "Port"
            case domain = "Domain"
            case url = "Url"
            case loadBalancerName = "LoadBalancerName"
            case listenerName = "ListenerName"
        }
    }

    /// 监听器绑定的后端服务的详细信息
    public struct Backend: TCOutputModel {
        /// 后端服务的类型，可取：CVM、ENI
        public let type: String

        /// 后端服务的唯一 ID，如 ins-abcd1234
        public let instanceId: String

        /// 后端服务的监听端口
        public let port: Int64

        /// 后端服务的转发权重，取值范围：[0, 100]，默认为 10。
        public let weight: Int64

        /// 后端服务的外网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpAddresses: [String]?

        /// 后端服务的内网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIpAddresses: [String]?

        /// 后端服务的实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 后端服务被绑定的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registeredTime: String?

        /// 弹性网卡唯一ID，如 eni-1234abcd
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eniId: String?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case instanceId = "InstanceId"
            case port = "Port"
            case weight = "Weight"
            case publicIpAddresses = "PublicIpAddresses"
            case privateIpAddresses = "PrivateIpAddresses"
            case instanceName = "InstanceName"
            case registeredTime = "RegisteredTime"
            case eniId = "EniId"
        }
    }

    /// 监听器或者转发规则绑定的目标组基本信息
    public struct BasicTargetGroupInfo: TCOutputModel {
        /// 目标组ID
        public let targetGroupId: String

        /// 目标组名称
        public let targetGroupName: String

        enum CodingKeys: String, CodingKey {
            case targetGroupId = "TargetGroupId"
            case targetGroupName = "TargetGroupName"
        }
    }

    /// 批量绑定类型
    public struct BatchTarget: TCInputModel {
        /// 监听器 ID。
        public let listenerId: String

        /// 绑定端口。
        public let port: Int64

        /// 子机 ID。表示绑定主网卡主 IP。
        public let instanceId: String?

        /// 绑定 IP 时需要传入此参数，支持弹性网卡的 IP 和其他内网 IP，如果是弹性网卡则必须先绑定至CVM，然后才能绑定到负载均衡实例。
        /// 注意：参数 InstanceId、EniIp 只能传入一个且必须传入一个。如果绑定双栈IPV6子机，必须传该参数。
        public let eniIp: String?

        /// 子机权重，范围[0, 100]。绑定时如果不存在，则默认为10。
        public let weight: Int64?

        /// 七层规则 ID。
        public let locationId: String?

        public init(listenerId: String, port: Int64, instanceId: String? = nil, eniIp: String? = nil, weight: Int64? = nil, locationId: String? = nil) {
            self.listenerId = listenerId
            self.port = port
            self.instanceId = instanceId
            self.eniIp = eniIp
            self.weight = weight
            self.locationId = locationId
        }

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case port = "Port"
            case instanceId = "InstanceId"
            case eniIp = "EniIp"
            case weight = "Weight"
            case locationId = "LocationId"
        }
    }

    /// 绑定关系，包含监听器名字、协议、url、vport。
    public struct BindDetailItem: TCOutputModel {
        /// 配置绑定的CLB ID
        public let loadBalancerId: String

        /// 配置绑定的监听器ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerId: String?

        /// 配置绑定的域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 配置绑定的规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let locationId: String?

        /// 监听器名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerName: String?

        /// 监听器协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 监听器端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vport: Int64?

        /// location的url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 配置ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uconfigId: String?

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case listenerId = "ListenerId"
            case domain = "Domain"
            case locationId = "LocationId"
            case listenerName = "ListenerName"
            case `protocol` = "Protocol"
            case vport = "Vport"
            case url = "Url"
            case uconfigId = "UconfigId"
        }
    }

    /// 加入了12306黑名单的IP
    public struct BlockedIP: TCOutputModel {
        /// 黑名单IP
        public let ip: String

        /// 加入黑名单的时间
        public let createTime: String

        /// 过期时间
        public let expireTime: String

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case createTime = "CreateTime"
            case expireTime = "ExpireTime"
        }
    }

    /// 证书ID，以及与该证书ID关联的负载均衡实例列表
    public struct CertIdRelatedWithLoadBalancers: TCOutputModel {
        /// 证书ID
        public let certId: String

        /// 与证书关联的负载均衡实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancers: [LoadBalancer]?

        enum CodingKeys: String, CodingKey {
            case certId = "CertId"
            case loadBalancers = "LoadBalancers"
        }
    }

    /// 证书信息
    public struct CertInfo: TCInputModel {
        /// 证书 ID，如果不填写此项则必须上传证书内容，包括CertName, CertContent，若为服务端证书必须包含CertKey。
        public let certId: String?

        /// 上传证书的名称，如果没有 CertId，则此项必传。
        public let certName: String?

        /// 上传证书的公钥；如果没有 CertId，则此项必传。
        public let certContent: String?

        /// 上传服务端证书的私钥；如果没有 CertId，则此项必传。
        public let certKey: String?

        public init(certId: String? = nil, certName: String? = nil, certContent: String? = nil, certKey: String? = nil) {
            self.certId = certId
            self.certName = certName
            self.certContent = certContent
            self.certKey = certKey
        }

        enum CodingKeys: String, CodingKey {
            case certId = "CertId"
            case certName = "CertName"
            case certContent = "CertContent"
            case certKey = "CertKey"
        }
    }

    /// 证书信息
    public struct CertificateInput: TCInputModel, TCOutputModel {
        /// 认证类型，UNIDIRECTIONAL：单向认证，MUTUAL：双向认证
        public let sslMode: String?

        /// 服务端证书的 ID，如果不填写此项则必须上传证书，包括 CertContent，CertKey，CertName。
        public let certId: String?

        /// 客户端证书的 ID，当监听器采用双向认证，即 SSLMode=MUTUAL 时，如果不填写此项则必须上传客户端证书，包括 CertCaContent，CertCaName。
        public let certCaId: String?

        /// 上传服务端证书的名称，如果没有 CertId，则此项必传。
        public let certName: String?

        /// 上传服务端证书的 key，如果没有 CertId，则此项必传。
        public let certKey: String?

        /// 上传服务端证书的内容，如果没有 CertId，则此项必传。
        public let certContent: String?

        /// 上传客户端 CA 证书的名称，如果 SSLMode=mutual，如果没有 CertCaId，则此项必传。
        public let certCaName: String?

        /// 上传客户端证书的内容，如果 SSLMode=mutual，如果没有 CertCaId，则此项必传。
        public let certCaContent: String?

        public init(sslMode: String? = nil, certId: String? = nil, certCaId: String? = nil, certName: String? = nil, certKey: String? = nil, certContent: String? = nil, certCaName: String? = nil, certCaContent: String? = nil) {
            self.sslMode = sslMode
            self.certId = certId
            self.certCaId = certCaId
            self.certName = certName
            self.certKey = certKey
            self.certContent = certContent
            self.certCaName = certCaName
            self.certCaContent = certCaContent
        }

        enum CodingKeys: String, CodingKey {
            case sslMode = "SSLMode"
            case certId = "CertId"
            case certCaId = "CertCaId"
            case certName = "CertName"
            case certKey = "CertKey"
            case certContent = "CertContent"
            case certCaName = "CertCaName"
            case certCaContent = "CertCaContent"
        }
    }

    /// 证书相关信息
    public struct CertificateOutput: TCOutputModel {
        /// 认证类型，UNIDIRECTIONAL：单向认证，MUTUAL：双向认证
        public let sslMode: String

        /// 服务端证书的ID。
        public let certId: String

        /// 客户端证书的 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certCaId: String?

        /// 多本服务器证书场景扩展的服务器证书ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extCertIds: [String]?

        enum CodingKeys: String, CodingKey {
            case sslMode = "SSLMode"
            case certId = "CertId"
            case certCaId = "CertCaId"
            case extCertIds = "ExtCertIds"
        }
    }

    /// 传统型负载均衡后端服务的健康状态
    public struct ClassicalHealth: TCOutputModel {
        /// 后端服务的内网 IP
        public let ip: String

        /// 后端服务的端口
        public let port: Int64

        /// 负载均衡的监听端口
        public let listenerPort: Int64

        /// 转发协议
        public let `protocol`: String

        /// 健康检查结果，1 表示健康，0 表示不健康
        public let healthStatus: Int64

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case port = "Port"
            case listenerPort = "ListenerPort"
            case `protocol` = "Protocol"
            case healthStatus = "HealthStatus"
        }
    }

    /// 传统型负载均衡监听器信息
    public struct ClassicalListener: TCOutputModel {
        /// 负载均衡监听器ID
        public let listenerId: String

        /// 负载均衡监听器端口
        public let listenerPort: Int64

        /// 监听器后端转发端口
        public let instancePort: Int64

        /// 监听器名称
        public let listenerName: String

        /// 监听器协议类型
        public let `protocol`: String

        /// 会话保持时间
        public let sessionExpire: Int64

        /// 是否开启了健康检查：1（开启）、0（关闭）
        public let healthSwitch: Int64

        /// 响应超时时间
        public let timeOut: Int64

        /// 检查间隔
        public let intervalTime: Int64

        /// 健康阈值
        public let healthNum: Int64

        /// 不健康阈值
        public let unhealthNum: Int64

        /// 传统型公网负载均衡的 HTTP、HTTPS 监听器的请求均衡方法。wrr 表示按权重轮询，ip_hash 表示根据访问的源 IP 进行一致性哈希方式来分发
        public let httpHash: String

        /// 传统型公网负载均衡的 HTTP、HTTPS 监听器的健康检查返回码。具体可参考创建监听器中对该字段的解释
        public let httpCode: Int64

        /// 传统型公网负载均衡的 HTTP、HTTPS 监听器的健康检查路径
        public let httpCheckPath: String

        /// 传统型公网负载均衡的 HTTPS 监听器的认证方式
        public let sslMode: String

        /// 传统型公网负载均衡的 HTTPS 监听器的服务端证书 ID
        public let certId: String

        /// 传统型公网负载均衡的 HTTPS 监听器的客户端证书 ID
        public let certCaId: String

        /// 监听器的状态，0 表示创建中，1 表示运行中
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerPort = "ListenerPort"
            case instancePort = "InstancePort"
            case listenerName = "ListenerName"
            case `protocol` = "Protocol"
            case sessionExpire = "SessionExpire"
            case healthSwitch = "HealthSwitch"
            case timeOut = "TimeOut"
            case intervalTime = "IntervalTime"
            case healthNum = "HealthNum"
            case unhealthNum = "UnhealthNum"
            case httpHash = "HttpHash"
            case httpCode = "HttpCode"
            case httpCheckPath = "HttpCheckPath"
            case sslMode = "SSLMode"
            case certId = "CertId"
            case certCaId = "CertCaId"
            case status = "Status"
        }
    }

    /// 负载均衡信息
    public struct ClassicalLoadBalancerInfo: TCOutputModel {
        /// 后端实例ID
        public let instanceId: String

        /// 负载均衡实例ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerIds: [String]?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case loadBalancerIds = "LoadBalancerIds"
        }
    }

    /// 传统型负载均衡的后端服务相关信息
    public struct ClassicalTarget: TCOutputModel {
        /// 后端服务的类型，可取值：CVM、ENI（即将支持）
        public let type: String

        /// 后端服务的唯一 ID，可通过 DescribeInstances 接口返回字段中的 unInstanceId 字段获取
        public let instanceId: String

        /// 后端服务的转发权重，取值范围：[0, 100]，默认为 10。
        public let weight: Int64

        /// 后端服务的外网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpAddresses: [String]?

        /// 后端服务的内网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIpAddresses: [String]?

        /// 后端服务的实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 后端服务的状态
        /// 1：故障，2：运行中，3：创建中，4：已关机，5：已退还，6：退还中， 7：重启中，8：开机中，9：关机中，10：密码重置中，11：格式化中，12：镜像制作中，13：带宽设置中，14：重装系统中，19：升级中，21：热迁移中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runFlag: Int64?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case instanceId = "InstanceId"
            case weight = "Weight"
            case publicIpAddresses = "PublicIpAddresses"
            case privateIpAddresses = "PrivateIpAddresses"
            case instanceName = "InstanceName"
            case runFlag = "RunFlag"
        }
    }

    /// 传统型负载均衡的后端信息
    public struct ClassicalTargetInfo: TCInputModel {
        /// 后端实例ID
        public let instanceId: String

        /// 权重，取值范围 [0, 100]
        public let weight: Int64?

        public init(instanceId: String, weight: Int64? = nil) {
            self.instanceId = instanceId
            self.weight = weight
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case weight = "Weight"
        }
    }

    /// 集群的详细信息，如集群ID，名称，类型，可用区，标签等
    public struct Cluster: TCOutputModel {
        /// 集群唯一ID
        public let clusterId: String

        /// 集群名称
        public let clusterName: String

        /// 集群类型，如TGW，STGW，VPCGW
        public let clusterType: String

        /// 集群标签，只有STGW集群有标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterTag: String?

        /// 集群所在可用区，如ap-guangzhou-1
        public let zone: String

        /// 集群网络类型，如Public，Private
        public let network: String

        /// 最大连接数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxConn: Int64?

        /// 最大入带宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxInFlow: Int64?

        /// 最大入包量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxInPkg: Int64?

        /// 最大出带宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxOutFlow: Int64?

        /// 最大出包量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxOutPkg: Int64?

        /// 最大新建连接数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxNewConn: Int64?

        /// http最大新建连接数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpMaxNewConn: Int64?

        /// https最大新建连接数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpsMaxNewConn: Int64?

        /// http QPS
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpQps: Int64?

        /// https QPS
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpsQps: Int64?

        /// 集群内资源总数目
        public let resourceCount: Int64

        /// 集群内空闲资源数目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let idleResourceCount: Int64?

        /// 集群内转发机的数目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalanceDirectorCount: Int64?

        /// 集群的Isp属性，如："BGP","CMCC","CUCC","CTCC","INTERNAL"。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isp: String?

        /// 集群所在的可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clustersZone: ClustersZone?

        /// 集群版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clustersVersion: String?

        /// 集群容灾类型，如SINGLE-ZONE，DISASTER-RECOVERY，MUTUAL-DISASTER-RECOVERY
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let disasterRecoveryType: String?

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case clusterType = "ClusterType"
            case clusterTag = "ClusterTag"
            case zone = "Zone"
            case network = "Network"
            case maxConn = "MaxConn"
            case maxInFlow = "MaxInFlow"
            case maxInPkg = "MaxInPkg"
            case maxOutFlow = "MaxOutFlow"
            case maxOutPkg = "MaxOutPkg"
            case maxNewConn = "MaxNewConn"
            case httpMaxNewConn = "HTTPMaxNewConn"
            case httpsMaxNewConn = "HTTPSMaxNewConn"
            case httpQps = "HTTPQps"
            case httpsQps = "HTTPSQps"
            case resourceCount = "ResourceCount"
            case idleResourceCount = "IdleResourceCount"
            case loadBalanceDirectorCount = "LoadBalanceDirectorCount"
            case isp = "Isp"
            case clustersZone = "ClustersZone"
            case clustersVersion = "ClustersVersion"
            case disasterRecoveryType = "DisasterRecoveryType"
        }
    }

    /// 独占集群信息
    public struct ClusterItem: TCInputModel, TCOutputModel {
        /// 集群唯一ID
        public let clusterId: String

        /// 集群名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        /// 集群所在可用区，如ap-guangzhou-1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        public init(clusterId: String, clusterName: String? = nil, zone: String? = nil) {
            self.clusterId = clusterId
            self.clusterName = clusterName
            self.zone = zone
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case zone = "Zone"
        }
    }

    /// 集群内资源类型
    public struct ClusterResource: TCOutputModel {
        /// 集群唯一ID，如tgw-12345678。
        public let clusterId: String

        /// ip地址。
        public let vip: String

        /// 负载均衡唯一ID，如lb-12345678。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerId: String?

        /// 资源是否闲置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let idle: String?

        /// 集群名称。
        public let clusterName: String

        /// 集群的Isp属性，如："BGP","CMCC","CUCC","CTCC","INTERNAL"。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isp: String?

        /// 集群所在的可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clustersZone: ClustersZone?

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case vip = "Vip"
            case loadBalancerId = "LoadBalancerId"
            case idle = "Idle"
            case clusterName = "ClusterName"
            case isp = "Isp"
            case clustersZone = "ClustersZone"
        }
    }

    /// 集群所在的可用区。
    public struct ClustersZone: TCOutputModel {
        /// 集群所在的主可用区。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterZone: [String]?

        /// 集群所在的备可用区。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZone: [String]?

        enum CodingKeys: String, CodingKey {
            case masterZone = "MasterZone"
            case slaveZone = "SlaveZone"
        }
    }

    /// 配置内容
    public struct ConfigListItem: TCOutputModel {
        /// 配置ID
        public let uconfigId: String

        /// 配置类型
        public let configType: String

        /// 配置名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configName: String?

        /// 配置内容
        public let configContent: String

        /// 增加配置时间
        public let createTimestamp: String

        /// 修改配置时间
        public let updateTimestamp: String

        enum CodingKeys: String, CodingKey {
            case uconfigId = "UconfigId"
            case configType = "ConfigType"
            case configName = "ConfigName"
            case configContent = "ConfigContent"
            case createTimestamp = "CreateTimestamp"
            case updateTimestamp = "UpdateTimestamp"
        }
    }

    /// 跨域2.0云联网下子机和网卡信息
    public struct CrossTargets: TCOutputModel {
        /// 本地私有网络ID，即负载均衡的VpcId。
        public let localVpcId: String

        /// 子机或网卡所属的私有网络ID。
        public let vpcId: String

        /// 子机或网卡的IP地址
        public let ip: String

        /// 子机或网卡所属的私有网络名称。
        public let vpcName: String

        /// 子机的网卡ID。
        public let eniId: String

        /// 子机实例ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 子机实例名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 子机或者网卡所属的地域。
        public let region: String

        enum CodingKeys: String, CodingKey {
            case localVpcId = "LocalVpcId"
            case vpcId = "VpcId"
            case ip = "IP"
            case vpcName = "VpcName"
            case eniId = "EniId"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case region = "Region"
        }
    }

    /// 独占集群
    public struct ExclusiveCluster: TCInputModel, TCOutputModel {
        /// 4层独占集群列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let l4Clusters: [ClusterItem]?

        /// 7层独占集群列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let l7Clusters: [ClusterItem]?

        /// vpcgw集群
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classicalCluster: ClusterItem?

        public init(l4Clusters: [ClusterItem]? = nil, l7Clusters: [ClusterItem]? = nil, classicalCluster: ClusterItem? = nil) {
            self.l4Clusters = l4Clusters
            self.l7Clusters = l7Clusters
            self.classicalCluster = classicalCluster
        }

        enum CodingKeys: String, CodingKey {
            case l4Clusters = "L4Clusters"
            case l7Clusters = "L7Clusters"
            case classicalCluster = "ClassicalCluster"
        }
    }

    /// 暂做保留，一般用户无需关注。
    public struct ExtraInfo: TCOutputModel {
        /// 是否开通VIP直通
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zhiTong: Bool?

        /// TgwGroup名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tgwGroupName: String?

        enum CodingKeys: String, CodingKey {
            case zhiTong = "ZhiTong"
            case tgwGroupName = "TgwGroupName"
        }
    }

    /// 过滤器条件
    public struct Filter: TCInputModel {
        /// 过滤器的名称
        public let name: String

        /// 过滤器的值数组
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// SCF云函数（Serverless Cloud Function）相关信息。
    public struct FunctionInfo: TCInputModel, TCOutputModel {
        /// 函数命名空间
        public let functionNamespace: String

        /// 函数名称
        public let functionName: String

        /// 函数的版本名称或别名
        public let functionQualifier: String

        /// 标识 FunctionQualifier 参数的类型，可取值： VERSION（版本）、ALIAS（别名）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let functionQualifierType: String?

        public init(functionNamespace: String, functionName: String, functionQualifier: String, functionQualifierType: String? = nil) {
            self.functionNamespace = functionNamespace
            self.functionName = functionName
            self.functionQualifier = functionQualifier
            self.functionQualifierType = functionQualifierType
        }

        enum CodingKeys: String, CodingKey {
            case functionNamespace = "FunctionNamespace"
            case functionName = "FunctionName"
            case functionQualifier = "FunctionQualifier"
            case functionQualifierType = "FunctionQualifierType"
        }
    }

    /// SCF云函数（Serverless Cloud Function）作为后端服务
    public struct FunctionTarget: TCInputModel, TCOutputModel {
        /// 云函数相关信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let function: FunctionInfo?

        /// 权重
        public let weight: UInt64?

        public init(function: FunctionInfo, weight: UInt64? = nil) {
            self.function = function
            self.weight = weight
        }

        enum CodingKeys: String, CodingKey {
            case function = "Function"
            case weight = "Weight"
        }
    }

    /// 健康检查信息。
    /// 注意，自定义探测相关参数 目前只有少量区域灰度支持。
    public struct HealthCheck: TCInputModel, TCOutputModel {
        /// 是否开启健康检查：1（开启）、0（关闭）。
        public let healthSwitch: Int64?

        /// 健康检查的响应超时时间（仅适用于四层监听器），可选值：2~60，默认值：2，单位：秒。响应超时时间要小于检查间隔时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeOut: Int64?

        /// 健康检查探测间隔时间，默认值：5，可选值：5~300，单位：秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intervalTime: Int64?

        /// 健康阈值，默认值：3，表示当连续探测三次健康则表示该转发正常，可选值：2~10，单位：次。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthNum: Int64?

        /// 不健康阈值，默认值：3，表示当连续探测三次不健康则表示该转发异常，可选值：2~10，单位：次。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unHealthNum: Int64?

        /// 健康检查状态码（仅适用于HTTP/HTTPS转发规则、TCP监听器的HTTP健康检查方式）。可选值：1~31，默认 31。
        /// 1 表示探测后返回值 1xx 代表健康，2 表示返回 2xx 代表健康，4 表示返回 3xx 代表健康，8 表示返回 4xx 代表健康，16 表示返回 5xx 代表健康。若希望多种返回码都可代表健康，则将相应的值相加。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpCode: Int64?

        /// 健康检查路径（仅适用于HTTP/HTTPS转发规则、TCP监听器的HTTP健康检查方式）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpCheckPath: String?

        /// 健康检查域名（仅适用于HTTP/HTTPS转发规则、TCP监听器的HTTP健康检查方式，当监听器是TCP类型时，该参数为必填项）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpCheckDomain: String?

        /// 健康检查方法（仅适用于HTTP/HTTPS转发规则、TCP监听器的HTTP健康检查方式），默认值：HEAD，可选值HEAD或GET。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpCheckMethod: String?

        /// 自定义探测相关参数。健康检查端口，默认为后端服务的端口，除非您希望指定特定端口，否则建议留空。（仅适用于TCP/UDP监听器）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkPort: Int64?

        /// 自定义探测相关参数。健康检查协议CheckType的值取CUSTOM时，必填此字段，代表健康检查的输入格式，可取值：HEX或TEXT；取值为HEX时，SendContext和RecvContext的字符只能在0123456789ABCDEF中选取且长度必须是偶数位。（仅适用于TCP/UDP监听器）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contextType: String?

        /// 自定义探测相关参数。健康检查协议CheckType的值取CUSTOM时，必填此字段，代表健康检查发送的请求内容，只允许ASCII可见字符，最大长度限制500。（仅适用于TCP/UDP监听器）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sendContext: String?

        /// 自定义探测相关参数。健康检查协议CheckType的值取CUSTOM时，必填此字段，代表健康检查返回的结果，只允许ASCII可见字符，最大长度限制500。（仅适用于TCP/UDP监听器）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recvContext: String?

        /// 自定义探测相关参数。健康检查使用的协议：TCP | HTTP | CUSTOM（仅适用于TCP/UDP监听器，其中UDP监听器只支持CUSTOM；如果使用自定义健康检查功能，则必传）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkType: String?

        /// 自定义探测相关参数。健康检查协议CheckType的值取HTTP时，必传此字段，代表后端服务的HTTP版本：HTTP/1.0、HTTP/1.1；（仅适用于TCP监听器）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpVersion: String?

        /// 自定义探测相关参数。健康检查源IP类型：0（使用LB的VIP作为源IP），1（使用100.64网段IP作为源IP），默认值：0
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceIpType: Int64?

        /// GRPC健康检查状态码（仅适用于后端转发协议为GRPC的规则）。默认值为 12，可输入值为数值、多个数值、或者范围，例如 20 或 20,25 或 0-99
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extendedCode: String?

        public init(healthSwitch: Int64? = nil, timeOut: Int64? = nil, intervalTime: Int64? = nil, healthNum: Int64? = nil, unHealthNum: Int64? = nil, httpCode: Int64? = nil, httpCheckPath: String? = nil, httpCheckDomain: String? = nil, httpCheckMethod: String? = nil, checkPort: Int64? = nil, contextType: String? = nil, sendContext: String? = nil, recvContext: String? = nil, checkType: String? = nil, httpVersion: String? = nil, sourceIpType: Int64? = nil, extendedCode: String? = nil) {
            self.healthSwitch = healthSwitch
            self.timeOut = timeOut
            self.intervalTime = intervalTime
            self.healthNum = healthNum
            self.unHealthNum = unHealthNum
            self.httpCode = httpCode
            self.httpCheckPath = httpCheckPath
            self.httpCheckDomain = httpCheckDomain
            self.httpCheckMethod = httpCheckMethod
            self.checkPort = checkPort
            self.contextType = contextType
            self.sendContext = sendContext
            self.recvContext = recvContext
            self.checkType = checkType
            self.httpVersion = httpVersion
            self.sourceIpType = sourceIpType
            self.extendedCode = extendedCode
        }

        enum CodingKeys: String, CodingKey {
            case healthSwitch = "HealthSwitch"
            case timeOut = "TimeOut"
            case intervalTime = "IntervalTime"
            case healthNum = "HealthNum"
            case unHealthNum = "UnHealthNum"
            case httpCode = "HttpCode"
            case httpCheckPath = "HttpCheckPath"
            case httpCheckDomain = "HttpCheckDomain"
            case httpCheckMethod = "HttpCheckMethod"
            case checkPort = "CheckPort"
            case contextType = "ContextType"
            case sendContext = "SendContext"
            case recvContext = "RecvContext"
            case checkType = "CheckType"
            case httpVersion = "HttpVersion"
            case sourceIpType = "SourceIpType"
            case extendedCode = "ExtendedCode"
        }
    }

    /// 闲置实例。
    public struct IdleLoadBalancer: TCOutputModel {
        /// 负载均衡ID
        public let loadBalancerId: String

        /// 负载均衡名字
        public let loadBalancerName: String

        /// 负载均衡所在地域
        public let region: String

        /// 负载均衡的vip
        public let vip: String

        /// 闲置原因。NO_RULES：没有规则，NO_RS：有规则没有绑定子机。
        public let idleReason: String

        /// 负载均衡实例的状态，包括
        /// 0：创建中，1：正常运行。
        public let status: UInt64

        /// 负载均衡类型标识，1：负载均衡，0：传统型负载均衡。
        public let forward: UInt64

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case region = "Region"
            case vip = "Vip"
            case idleReason = "IdleReason"
            case status = "Status"
            case forward = "Forward"
        }
    }

    /// 网络计费模式，最大出带宽
    public struct InternetAccessible: TCInputModel, TCOutputModel {
        /// TRAFFIC_POSTPAID_BY_HOUR 按流量按小时后计费 ; BANDWIDTH_POSTPAID_BY_HOUR 按带宽按小时后计费;
        /// BANDWIDTH_PACKAGE 按带宽包计费;
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetChargeType: String?

        /// 最大出带宽，单位Mbps，范围支持0到2048，仅对公网属性的LB生效，默认值 10
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetMaxBandwidthOut: Int64?

        /// 带宽包的类型，如SINGLEISP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bandwidthpkgSubType: String?

        public init(internetChargeType: String? = nil, internetMaxBandwidthOut: Int64? = nil, bandwidthpkgSubType: String? = nil) {
            self.internetChargeType = internetChargeType
            self.internetMaxBandwidthOut = internetMaxBandwidthOut
            self.bandwidthpkgSubType = bandwidthpkgSubType
        }

        enum CodingKeys: String, CodingKey {
            case internetChargeType = "InternetChargeType"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case bandwidthpkgSubType = "BandwidthpkgSubType"
        }
    }

    /// lb实例包年包月相关配置属性
    public struct LBChargePrepaid: TCInputModel, TCOutputModel {
        /// 续费类型：AUTO_RENEW 自动续费，  MANUAL_RENEW 手动续费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: String?

        /// 购买时长，单位：月
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let period: Int64?

        public init(renewFlag: String? = nil, period: Int64? = nil) {
            self.renewFlag = renewFlag
            self.period = period
        }

        enum CodingKeys: String, CodingKey {
            case renewFlag = "RenewFlag"
            case period = "Period"
        }
    }

    /// 反查Lb绑定关系。
    public struct LBItem: TCOutputModel {
        /// lb的字符串id
        public let loadBalancerId: String

        /// lb的vip
        public let vip: String

        /// 监听器规则
        public let listeners: [ListenerItem]

        /// LB所在地域
        public let region: String

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case vip = "Vip"
            case listeners = "Listeners"
            case region = "Region"
        }
    }

    /// 查询类型
    public struct LbRsItem: TCInputModel {
        /// vpc的字符串id，只支持字符串id。
        public let vpcId: String

        /// 需要查询后端的内网ip，可以是cvm和弹性网卡。
        public let privateIp: String

        public init(vpcId: String, privateIp: String) {
            self.vpcId = vpcId
            self.privateIp = privateIp
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case privateIp = "PrivateIp"
        }
    }

    /// 反查结果数据类型。
    public struct LbRsTargets: TCOutputModel {
        /// 内网ip类型。“cvm”或“eni”
        public let type: String

        /// 后端实例的内网ip。
        public let privateIp: String

        /// 绑定后端实例的端口。
        public let port: Int64

        /// rs的vpcId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: Int64?

        /// rs的权重
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weight: Int64?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case privateIp = "PrivateIp"
            case port = "Port"
            case vpcId = "VpcId"
            case weight = "Weight"
        }
    }

    /// 监听器的信息
    public struct Listener: TCOutputModel {
        /// 负载均衡监听器 ID
        public let listenerId: String

        /// 监听器协议
        public let `protocol`: String

        /// 监听器端口
        public let port: Int64

        /// 监听器绑定的证书信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificate: CertificateOutput?

        /// 监听器的健康检查信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthCheck: HealthCheck?

        /// 请求的调度方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scheduler: String?

        /// 会话保持时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionExpireTime: Int64?

        /// 是否开启SNI特性（本参数仅对于HTTPS监听器有意义）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sniSwitch: Int64?

        /// 监听器下的全部转发规则（本参数仅对于HTTP/HTTPS监听器有意义）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rules: [RuleOutput]?

        /// 监听器的名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerName: String?

        /// 监听器的创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 端口段结束端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endPort: Int64?

        /// 后端服务器类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetType: String?

        /// 绑定的目标组基本信息；当监听器绑定目标组时，会返回该字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetGroup: BasicTargetGroupInfo?

        /// 会话保持类型。NORMAL表示默认会话保持类型。QUIC_CID 表示根据Quic Connection ID做会话保持。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionType: String?

        /// 是否开启长连接，1开启，0关闭，（本参数仅对于HTTP/HTTPS监听器有意义）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keepaliveEnable: Int64?

        /// 仅支持Nat64 CLB TCP监听器
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let toa: Bool?

        /// 解绑后端目标时，是否发RST给客户端，（此参数仅对于TCP监听器有意义）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deregisterTargetRst: Bool?

        /// 监听器的属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let attrFlags: [String]?

        /// 绑定的目标组列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetGroupList: [BasicTargetGroupInfo]?

        /// 监听器最大连接数，-1表示监听器维度不限速。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxConn: Int64?

        /// 监听器最大新增连接数，-1表示监听器维度不限速。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxCps: Int64?

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case `protocol` = "Protocol"
            case port = "Port"
            case certificate = "Certificate"
            case healthCheck = "HealthCheck"
            case scheduler = "Scheduler"
            case sessionExpireTime = "SessionExpireTime"
            case sniSwitch = "SniSwitch"
            case rules = "Rules"
            case listenerName = "ListenerName"
            case createTime = "CreateTime"
            case endPort = "EndPort"
            case targetType = "TargetType"
            case targetGroup = "TargetGroup"
            case sessionType = "SessionType"
            case keepaliveEnable = "KeepaliveEnable"
            case toa = "Toa"
            case deregisterTargetRst = "DeregisterTargetRst"
            case attrFlags = "AttrFlags"
            case targetGroupList = "TargetGroupList"
            case maxConn = "MaxConn"
            case maxCps = "MaxCps"
        }
    }

    /// 监听器上绑定的后端服务的信息
    public struct ListenerBackend: TCOutputModel {
        /// 监听器 ID
        public let listenerId: String

        /// 监听器的协议
        public let `protocol`: String

        /// 监听器的端口
        public let port: Int64

        /// 监听器下的规则信息（仅适用于HTTP/HTTPS监听器）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rules: [RuleTargets]?

        /// 监听器上绑定的后端服务列表（仅适用于TCP/UDP/TCP_SSL监听器）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: [Backend]?

        /// 若支持端口段，则为端口段结束端口；若不支持端口段，则为0
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endPort: Int64?

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case `protocol` = "Protocol"
            case port = "Port"
            case rules = "Rules"
            case targets = "Targets"
            case endPort = "EndPort"
        }
    }

    /// 监听器的健康检查信息
    public struct ListenerHealth: TCOutputModel {
        /// 监听器ID
        public let listenerId: String

        /// 监听器名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerName: String?

        /// 监听器的协议
        public let `protocol`: String

        /// 监听器的端口
        public let port: Int64

        /// 监听器的转发规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rules: [RuleHealth]?

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case `protocol` = "Protocol"
            case port = "Port"
            case rules = "Rules"
        }
    }

    /// 反查监听器类型
    public struct ListenerItem: TCOutputModel {
        /// 监听器ID
        public let listenerId: String

        /// 监听器协议
        public let `protocol`: String

        /// 监听器端口
        public let port: Int64

        /// 绑定规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rules: [RulesItems]?

        /// 四层绑定对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: [LbRsTargets]?

        /// 端口段监听器的结束端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endPort: Int64?

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case `protocol` = "Protocol"
            case port = "Port"
            case rules = "Rules"
            case targets = "Targets"
            case endPort = "EndPort"
        }
    }

    /// 负载均衡实例的信息
    public struct LoadBalancer: TCInputModel, TCOutputModel {
        /// 负载均衡实例 ID。
        public let loadBalancerId: String?

        /// 负载均衡实例的名称。
        public let loadBalancerName: String?

        /// 负载均衡实例的网络类型：
        /// OPEN：公网属性， INTERNAL：内网属性。
        public let loadBalancerType: String?

        /// 负载均衡类型标识，1：负载均衡，0：传统型负载均衡。
        public let forward: UInt64?

        /// 负载均衡实例的域名，仅公网传统型负载均衡实例才提供该字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 负载均衡实例的 VIP 列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerVips: [String]?

        /// 负载均衡实例的状态，包括
        /// 0：创建中，1：正常运行。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// 负载均衡实例的创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 负载均衡实例的上次状态转换时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusTime: String?

        /// 负载均衡实例所属的项目 ID， 0 表示默认项目。
        public let projectId: UInt64?

        /// 私有网络的 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 高防 LB 的标识，1：高防负载均衡 0：非高防负载均衡。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let openBgp: UInt64?

        /// 在 2016 年 12 月份之前的传统型内网负载均衡都是开启了 snat 的。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snat: Bool?

        /// 0：表示未被隔离，1：表示被隔离。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolation: UInt64?

        /// 用户开启日志的信息，日志只有公网属性创建了 HTTP 、HTTPS 监听器的负载均衡才会有日志。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let log: String?

        /// 负载均衡实例所在的子网（仅对内网VPC型LB有意义）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 负载均衡实例的标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [TagInfo]?

        /// 负载均衡实例的安全组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let secureGroups: [String]?

        /// 负载均衡实例绑定的后端设备的基本信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetRegionInfo: TargetRegionInfo?

        /// anycast负载均衡的发布域，对于非anycast的负载均衡，此字段返回为空字符串
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let anycastZone: String?

        /// IP版本，ipv4 | ipv6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressIPVersion: String?

        /// 数值形式的私有网络 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numericalVpcId: UInt64?

        /// 负载均衡IP地址所属的ISP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vipIsp: String?

        /// 主可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterZone: ZoneInfo?

        /// 备可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupZoneSet: [ZoneInfo]?

        /// 负载均衡实例被隔离的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolatedTime: String?

        /// 负载均衡实例的过期时间，仅对预付费负载均衡生效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 负载均衡实例的计费类型，PREPAID：包年包月，POSTPAID_BY_HOUR：按量计费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chargeType: String?

        /// 负载均衡实例的网络属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkAttributes: InternetAccessible?

        /// 负载均衡实例的预付费相关属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let prepaidAttributes: LBChargePrepaid?

        /// 负载均衡日志服务(CLS)的日志集ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logSetId: String?

        /// 负载均衡日志服务(CLS)的日志主题ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logTopicId: String?

        /// 负载均衡实例的IPv6地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressIPv6: String?

        /// 暂做保留，一般用户无需关注。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraInfo: ExtraInfo?

        /// 是否可绑定高防包
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDDos: Bool?

        /// 负载均衡维度的个性化配置ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configId: String?

        /// 后端服务是否放通来自LB的流量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerPassToTarget: Bool?

        /// 内网独占集群
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exclusiveCluster: ExclusiveCluster?

        /// IP地址版本为ipv6时此字段有意义， IPv6Nat64 | IPv6FullChain
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let iPv6Mode: String?

        /// 是否开启SnatPro。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snatPro: Bool?

        /// 开启SnatPro负载均衡后，SnatIp列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snatIps: [SnatIp]?

        /// 性能容量型规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaType: String?

        /// vip是否被封堵
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isBlock: Bool?

        /// 封堵或解封时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isBlockTime: String?

        /// IP类型是否是本地BGP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let localBgp: Bool?

        /// 7层独占标签。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterTag: String?

        /// 开启IPv6FullChain负载均衡7层监听器支持混绑IPv4/IPv6目标功能。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mixIpTarget: Bool?

        /// 私有网络内网负载均衡，就近接入模式下规则所落在的可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zones: [String]?

        /// CLB是否为NFV，空：不是，l7nfv：七层是NFV。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nfvInfo: String?

        /// 负载均衡日志服务(CLS)的健康检查日志集ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthLogSetId: String?

        /// 负载均衡日志服务(CLS)的健康检查日志主题ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthLogTopicId: String?

        /// 集群ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterIds: [String]?

        /// 负载均衡的属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let attributeFlags: [String]?

        public init(loadBalancerId: String? = nil, loadBalancerName: String? = nil, loadBalancerType: String? = nil, forward: UInt64? = nil, domain: String? = nil, loadBalancerVips: [String]? = nil, status: UInt64? = nil, createTime: String? = nil, statusTime: String? = nil, projectId: UInt64? = nil, vpcId: String? = nil, openBgp: UInt64? = nil, snat: Bool? = nil, isolation: UInt64? = nil, log: String? = nil, subnetId: String? = nil, tags: [TagInfo]? = nil, secureGroups: [String]? = nil, targetRegionInfo: TargetRegionInfo? = nil, anycastZone: String? = nil, addressIPVersion: String? = nil, numericalVpcId: UInt64? = nil, vipIsp: String? = nil, masterZone: ZoneInfo? = nil, backupZoneSet: [ZoneInfo]? = nil, isolatedTime: String? = nil, expireTime: String? = nil, chargeType: String? = nil, networkAttributes: InternetAccessible? = nil, prepaidAttributes: LBChargePrepaid? = nil, logSetId: String? = nil, logTopicId: String? = nil, addressIPv6: String? = nil, extraInfo: ExtraInfo? = nil, isDDos: Bool? = nil, configId: String? = nil, loadBalancerPassToTarget: Bool? = nil, exclusiveCluster: ExclusiveCluster? = nil, iPv6Mode: String? = nil, snatPro: Bool? = nil, snatIps: [SnatIp]? = nil, slaType: String? = nil, isBlock: Bool? = nil, isBlockTime: String? = nil, localBgp: Bool? = nil, clusterTag: String? = nil, mixIpTarget: Bool? = nil, zones: [String]? = nil, nfvInfo: String? = nil, healthLogSetId: String? = nil, healthLogTopicId: String? = nil, clusterIds: [String]? = nil, attributeFlags: [String]? = nil) {
            self.loadBalancerId = loadBalancerId
            self.loadBalancerName = loadBalancerName
            self.loadBalancerType = loadBalancerType
            self.forward = forward
            self.domain = domain
            self.loadBalancerVips = loadBalancerVips
            self.status = status
            self.createTime = createTime
            self.statusTime = statusTime
            self.projectId = projectId
            self.vpcId = vpcId
            self.openBgp = openBgp
            self.snat = snat
            self.isolation = isolation
            self.log = log
            self.subnetId = subnetId
            self.tags = tags
            self.secureGroups = secureGroups
            self.targetRegionInfo = targetRegionInfo
            self.anycastZone = anycastZone
            self.addressIPVersion = addressIPVersion
            self.numericalVpcId = numericalVpcId
            self.vipIsp = vipIsp
            self.masterZone = masterZone
            self.backupZoneSet = backupZoneSet
            self.isolatedTime = isolatedTime
            self.expireTime = expireTime
            self.chargeType = chargeType
            self.networkAttributes = networkAttributes
            self.prepaidAttributes = prepaidAttributes
            self.logSetId = logSetId
            self.logTopicId = logTopicId
            self.addressIPv6 = addressIPv6
            self.extraInfo = extraInfo
            self.isDDos = isDDos
            self.configId = configId
            self.loadBalancerPassToTarget = loadBalancerPassToTarget
            self.exclusiveCluster = exclusiveCluster
            self.iPv6Mode = iPv6Mode
            self.snatPro = snatPro
            self.snatIps = snatIps
            self.slaType = slaType
            self.isBlock = isBlock
            self.isBlockTime = isBlockTime
            self.localBgp = localBgp
            self.clusterTag = clusterTag
            self.mixIpTarget = mixIpTarget
            self.zones = zones
            self.nfvInfo = nfvInfo
            self.healthLogSetId = healthLogSetId
            self.healthLogTopicId = healthLogTopicId
            self.clusterIds = clusterIds
            self.attributeFlags = attributeFlags
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case loadBalancerType = "LoadBalancerType"
            case forward = "Forward"
            case domain = "Domain"
            case loadBalancerVips = "LoadBalancerVips"
            case status = "Status"
            case createTime = "CreateTime"
            case statusTime = "StatusTime"
            case projectId = "ProjectId"
            case vpcId = "VpcId"
            case openBgp = "OpenBgp"
            case snat = "Snat"
            case isolation = "Isolation"
            case log = "Log"
            case subnetId = "SubnetId"
            case tags = "Tags"
            case secureGroups = "SecureGroups"
            case targetRegionInfo = "TargetRegionInfo"
            case anycastZone = "AnycastZone"
            case addressIPVersion = "AddressIPVersion"
            case numericalVpcId = "NumericalVpcId"
            case vipIsp = "VipIsp"
            case masterZone = "MasterZone"
            case backupZoneSet = "BackupZoneSet"
            case isolatedTime = "IsolatedTime"
            case expireTime = "ExpireTime"
            case chargeType = "ChargeType"
            case networkAttributes = "NetworkAttributes"
            case prepaidAttributes = "PrepaidAttributes"
            case logSetId = "LogSetId"
            case logTopicId = "LogTopicId"
            case addressIPv6 = "AddressIPv6"
            case extraInfo = "ExtraInfo"
            case isDDos = "IsDDos"
            case configId = "ConfigId"
            case loadBalancerPassToTarget = "LoadBalancerPassToTarget"
            case exclusiveCluster = "ExclusiveCluster"
            case iPv6Mode = "IPv6Mode"
            case snatPro = "SnatPro"
            case snatIps = "SnatIps"
            case slaType = "SlaType"
            case isBlock = "IsBlock"
            case isBlockTime = "IsBlockTime"
            case localBgp = "LocalBgp"
            case clusterTag = "ClusterTag"
            case mixIpTarget = "MixIpTarget"
            case zones = "Zones"
            case nfvInfo = "NfvInfo"
            case healthLogSetId = "HealthLogSetId"
            case healthLogTopicId = "HealthLogTopicId"
            case clusterIds = "ClusterIds"
            case attributeFlags = "AttributeFlags"
        }
    }

    /// 负载均衡详细信息
    public struct LoadBalancerDetail: TCOutputModel {
        /// 负载均衡实例 ID。
        public let loadBalancerId: String

        /// 负载均衡实例的名称。
        public let loadBalancerName: String

        /// 负载均衡实例的网络类型：
        /// Public：公网属性， Private：内网属性。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerType: String?

        /// 负载均衡实例的状态，包括
        /// 0：创建中，1：正常运行。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// 负载均衡实例的 VIP 。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let address: String?

        /// 负载均衡实例 VIP 的IPv6地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressIPv6: String?

        /// 负载均衡实例IP版本，IPv4 | IPv6。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressIPVersion: String?

        /// 负载均衡实例IPv6地址类型，IPv6Nat64 | IPv6FullChain。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let iPv6Mode: String?

        /// 负载均衡实例所在可用区。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 负载均衡实例IP地址所属的ISP。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressIsp: String?

        /// 负载均衡实例所属私有网络的 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 负载均衡实例所属的项目 ID， 0 表示默认项目。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: UInt64?

        /// 负载均衡实例的创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 负载均衡实例的计费类型。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chargeType: String?

        /// 负载均衡实例的网络属性。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkAttributes: InternetAccessible?

        /// 负载均衡实例的预付费相关属性。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let prepaidAttributes: LBChargePrepaid?

        /// 暂做保留，一般用户无需关注。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraInfo: ExtraInfo?

        /// 负载均衡维度的个性化配置ID，多个配置用逗号隔开。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configId: String?

        /// 负载均衡实例的标签信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [TagInfo]?

        /// 负载均衡监听器 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerId: String?

        /// 监听器协议。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 监听器端口。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: UInt64?

        /// 转发规则的 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let locationId: String?

        /// 转发规则的域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 转发规则的路径。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 后端目标ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetId: String?

        /// 后端目标的IP地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetAddress: String?

        /// 后端目标监听端口。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetPort: UInt64?

        /// 后端目标转发权重。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetWeight: UInt64?

        /// 0：表示未被隔离，1：表示被隔离。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolation: UInt64?

        /// 负载均衡绑定的安全组列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityGroup: [String]?

        /// 负载均衡安全组上移特性是否开启标识。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerPassToTarget: UInt64?

        /// 后端目标健康状态。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetHealth: String?

        /// 转发规则的域名列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domains: String?

        /// 多可用区负载均衡实例所选备区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZone: [String]?

        /// 内网负载均衡实例所在可用区，由白名单CLB_Internal_Zone控制
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zones: [String]?

        /// 是否开启SNI特性（本参数仅对于HTTPS监听器有意义）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sniSwitch: Int64?

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case loadBalancerType = "LoadBalancerType"
            case status = "Status"
            case address = "Address"
            case addressIPv6 = "AddressIPv6"
            case addressIPVersion = "AddressIPVersion"
            case iPv6Mode = "IPv6Mode"
            case zone = "Zone"
            case addressIsp = "AddressIsp"
            case vpcId = "VpcId"
            case projectId = "ProjectId"
            case createTime = "CreateTime"
            case chargeType = "ChargeType"
            case networkAttributes = "NetworkAttributes"
            case prepaidAttributes = "PrepaidAttributes"
            case extraInfo = "ExtraInfo"
            case configId = "ConfigId"
            case tags = "Tags"
            case listenerId = "ListenerId"
            case `protocol` = "Protocol"
            case port = "Port"
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
            case targetId = "TargetId"
            case targetAddress = "TargetAddress"
            case targetPort = "TargetPort"
            case targetWeight = "TargetWeight"
            case isolation = "Isolation"
            case securityGroup = "SecurityGroup"
            case loadBalancerPassToTarget = "LoadBalancerPassToTarget"
            case targetHealth = "TargetHealth"
            case domains = "Domains"
            case slaveZone = "SlaveZone"
            case zones = "Zones"
            case sniSwitch = "SniSwitch"
        }
    }

    /// 负载均衡实例的健康检查状态
    public struct LoadBalancerHealth: TCOutputModel {
        /// 负载均衡实例ID
        public let loadBalancerId: String

        /// 负载均衡实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerName: String?

        /// 监听器列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listeners: [ListenerHealth]?

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case listeners = "Listeners"
        }
    }

    /// 负载均衡流量数据。
    public struct LoadBalancerTraffic: TCOutputModel {
        /// 负载均衡ID
        public let loadBalancerId: String

        /// 负载均衡名字
        public let loadBalancerName: String

        /// 负载均衡所在地域
        public let region: String

        /// 负载均衡的vip
        public let vip: String

        /// 最大出带宽，单位：Mbps
        public let outBandwidth: Float

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case region = "Region"
            case vip = "Vip"
            case outBandwidth = "OutBandwidth"
        }
    }

    /// CLB监听器或规则绑定的多证书信息
    public struct MultiCertInfo: TCInputModel {
        /// 认证类型，UNIDIRECTIONAL：单向认证，MUTUAL：双向认证
        public let sslMode: String

        /// 监听器或规则证书列表，单双向认证，多本服务端证书算法类型不能重复;若SSLMode为双向认证，证书列表必须包含一本ca证书。
        public let certList: [CertInfo]

        public init(sslMode: String, certList: [CertInfo]) {
            self.sslMode = sslMode
            self.certList = certList
        }

        enum CodingKeys: String, CodingKey {
            case sslMode = "SSLMode"
            case certList = "CertList"
        }
    }

    /// 描述配额信息，所有配额均指当前地域下的配额。
    public struct Quota: TCOutputModel {
        /// 配额名称，取值范围：
        /// <li> TOTAL_OPEN_CLB_QUOTA：用户当前地域下的公网CLB配额 </li>
        /// <li> TOTAL_INTERNAL_CLB_QUOTA：用户当前地域下的内网CLB配额 </li>
        /// <li> TOTAL_LISTENER_QUOTA：一个CLB下的监听器配额 </li>
        /// <li> TOTAL_LISTENER_RULE_QUOTA：一个监听器下的转发规则配额 </li>
        /// <li> TOTAL_TARGET_BIND_QUOTA：一条转发规则下可绑定设备的配额 </li>
        /// <li> TOTAL_SNAP_IP_QUOTA： 一个CLB实例下跨地域2.0的SNAT IP配额 </li>
        /// <li>TOTAL_ISP_CLB_QUOTA：用户当前地域下的三网CLB配额 </li>
        public let quotaId: String

        /// 当前使用数量，为 null 时表示无意义。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quotaCurrent: Int64?

        /// 配额数量。
        public let quotaLimit: Int64

        enum CodingKeys: String, CodingKey {
            case quotaId = "QuotaId"
            case quotaCurrent = "QuotaCurrent"
            case quotaLimit = "QuotaLimit"
        }
    }

    /// 资源详细信息
    public struct Resource: TCOutputModel {
        /// 运营商内具体资源信息，如"CMCC", "CUCC", "CTCC", "BGP", "INTERNAL"。
        public let type: [String]

        /// 运营商信息，如"CMCC", "CUCC", "CTCC", "BGP", "INTERNAL"。
        public let isp: String

        /// 可用资源。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let availabilitySet: [ResourceAvailability]?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case isp = "Isp"
            case availabilitySet = "AvailabilitySet"
        }
    }

    /// 资源可用性
    public struct ResourceAvailability: TCOutputModel {
        /// 运营商内具体资源信息，如"CMCC", "CUCC", "CTCC", "BGP"。
        public let type: String

        /// 资源可用性，"Available"：可用，"Unavailable"：不可用
        public let availability: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case availability = "Availability"
        }
    }

    /// 转发规则之间的重定向关系
    public struct RewriteLocationMap: TCInputModel {
        /// 源转发规则ID
        public let sourceLocationId: String

        /// 重定向至的目标转发规则ID
        public let targetLocationId: String

        /// 重定向状态码，可取值301,302,307
        public let rewriteCode: Int64?

        /// 重定向是否携带匹配的url，配置RewriteCode时必填
        public let takeUrl: Bool?

        /// 源转发的域名，必须是SourceLocationId对应的域名，配置RewriteCode时必填
        public let sourceDomain: String?

        public init(sourceLocationId: String, targetLocationId: String, rewriteCode: Int64? = nil, takeUrl: Bool? = nil, sourceDomain: String? = nil) {
            self.sourceLocationId = sourceLocationId
            self.targetLocationId = targetLocationId
            self.rewriteCode = rewriteCode
            self.takeUrl = takeUrl
            self.sourceDomain = sourceDomain
        }

        enum CodingKeys: String, CodingKey {
            case sourceLocationId = "SourceLocationId"
            case targetLocationId = "TargetLocationId"
            case rewriteCode = "RewriteCode"
            case takeUrl = "TakeUrl"
            case sourceDomain = "SourceDomain"
        }
    }

    /// 重定向目标的信息
    public struct RewriteTarget: TCOutputModel {
        /// 重定向目标的监听器ID
        /// 注意：此字段可能返回 null，表示无重定向。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetListenerId: String?

        /// 重定向目标的转发规则ID
        /// 注意：此字段可能返回 null，表示无重定向。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetLocationId: String?

        /// 重定向状态码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rewriteCode: Int64?

        /// 重定向是否携带匹配的url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let takeUrl: Bool?

        /// 重定向类型，Manual: 手动重定向，Auto:  自动重定向
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rewriteType: String?

        enum CodingKeys: String, CodingKey {
            case targetListenerId = "TargetListenerId"
            case targetLocationId = "TargetLocationId"
            case rewriteCode = "RewriteCode"
            case takeUrl = "TakeUrl"
            case rewriteType = "RewriteType"
        }
    }

    /// 修改节点权重的数据类型
    public struct RsWeightRule: TCInputModel {
        /// 负载均衡监听器 ID。
        public let listenerId: String

        /// 要修改权重的后端机器列表。
        public let targets: [Target]

        /// 转发规则的ID，七层规则时需要此参数，4层规则不需要。
        public let locationId: String?

        /// 目标规则的域名，提供LocationId参数时本参数不生效。
        public let domain: String?

        /// 目标规则的URL，提供LocationId参数时本参数不生效。
        public let url: String?

        /// 后端服务修改后的转发权重，取值范围：[0，100]。此参数的优先级低于前述[Target](https://cloud.tencent.com/document/api/214/30694#Target)中的Weight参数，即最终的权重值以Target中的Weight参数值为准，仅当Target中的Weight参数为空时，才以RsWeightRule中的Weight参数为准。
        public let weight: Int64?

        public init(listenerId: String, targets: [Target], locationId: String? = nil, domain: String? = nil, url: String? = nil, weight: Int64? = nil) {
            self.listenerId = listenerId
            self.targets = targets
            self.locationId = locationId
            self.domain = domain
            self.url = url
            self.weight = weight
        }

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case targets = "Targets"
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
            case weight = "Weight"
        }
    }

    /// 一条转发规则的健康检查状态
    public struct RuleHealth: TCOutputModel {
        /// 转发规则ID
        public let locationId: String

        /// 转发规则的域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 转发规则的Url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 本规则上绑定的后端服务的健康检查状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: [TargetHealth]?

        enum CodingKeys: String, CodingKey {
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
            case targets = "Targets"
        }
    }

    /// HTTP/HTTPS转发规则（输入）
    public struct RuleInput: TCInputModel {
        /// 转发规则的路径。长度限制为：1~200。
        public let url: String

        /// 转发规则的域名。长度限制为：1~80。Domain和Domains只需要传一个，单域名规则传Domain，多域名规则传Domains。
        public let domain: String?

        /// 会话保持时间。设置为0表示关闭会话保持，开启会话保持可取值30~3600，单位：秒。
        public let sessionExpireTime: Int64?

        /// 健康检查信息。详情请参见：[健康检查](https://cloud.tencent.com/document/product/214/6097)
        public let healthCheck: HealthCheck?

        /// 证书信息；此参数和MultiCertInfo不能同时传入。
        public let certificate: CertificateInput?

        /// 规则的请求转发方式，可选值：WRR、LEAST_CONN、IP_HASH
        /// 分别表示按权重轮询、最小连接数、按IP哈希， 默认为 WRR。
        public let scheduler: String?

        /// 负载均衡与后端服务之间的转发协议，目前支持 HTTP/HTTPS/TRPC
        public let forwardType: String?

        /// 是否将该域名设为默认域名，注意，一个监听器下只能设置一个默认域名。
        public let defaultServer: Bool?

        /// 是否开启Http2，注意，只有HTTPS域名才能开启Http2。
        public let http2: Bool?

        /// 后端目标类型，NODE表示绑定普通节点，TARGETGROUP表示绑定目标组
        public let targetType: String?

        /// TRPC被调服务器路由，ForwardType为TRPC时必填
        public let trpcCallee: String?

        /// TRPC调用服务接口，ForwardType为TRPC时必填
        public let trpcFunc: String?

        /// 是否开启QUIC，注意，只有HTTPS域名才能开启QUIC
        public let quic: Bool?

        /// 转发规则的域名列表。每个域名的长度限制为：1~80。Domain和Domains只需要传一个，单域名规则传Domain，多域名规则传Domains。
        public let domains: [String]?

        /// 证书信息，支持同时传入不同算法类型的多本服务端证书；此参数和Certificate不能同时传入。
        public let multiCertInfo: MultiCertInfo?

        public init(url: String, domain: String? = nil, sessionExpireTime: Int64? = nil, healthCheck: HealthCheck? = nil, certificate: CertificateInput? = nil, scheduler: String? = nil, forwardType: String? = nil, defaultServer: Bool? = nil, http2: Bool? = nil, targetType: String? = nil, trpcCallee: String? = nil, trpcFunc: String? = nil, quic: Bool? = nil, domains: [String]? = nil, multiCertInfo: MultiCertInfo? = nil) {
            self.url = url
            self.domain = domain
            self.sessionExpireTime = sessionExpireTime
            self.healthCheck = healthCheck
            self.certificate = certificate
            self.scheduler = scheduler
            self.forwardType = forwardType
            self.defaultServer = defaultServer
            self.http2 = http2
            self.targetType = targetType
            self.trpcCallee = trpcCallee
            self.trpcFunc = trpcFunc
            self.quic = quic
            self.domains = domains
            self.multiCertInfo = multiCertInfo
        }

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case domain = "Domain"
            case sessionExpireTime = "SessionExpireTime"
            case healthCheck = "HealthCheck"
            case certificate = "Certificate"
            case scheduler = "Scheduler"
            case forwardType = "ForwardType"
            case defaultServer = "DefaultServer"
            case http2 = "Http2"
            case targetType = "TargetType"
            case trpcCallee = "TrpcCallee"
            case trpcFunc = "TrpcFunc"
            case quic = "Quic"
            case domains = "Domains"
            case multiCertInfo = "MultiCertInfo"
        }
    }

    /// HTTP/HTTPS监听器的转发规则（输出）
    public struct RuleOutput: TCOutputModel {
        /// 转发规则的 ID
        public let locationId: String?

        /// 转发规则的域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 转发规则的路径。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 会话保持时间
        public let sessionExpireTime: Int64?

        /// 健康检查信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthCheck: HealthCheck?

        /// 证书信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificate: CertificateOutput?

        /// 规则的请求转发方式
        public let scheduler: String?

        /// 转发规则所属的监听器 ID
        public let listenerId: String

        /// 转发规则的重定向目标信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rewriteTarget: RewriteTarget?

        /// 是否开启gzip
        public let httpGzip: Bool

        /// 转发规则是否为自动创建
        public let beAutoCreated: Bool

        /// 是否作为默认域名
        public let defaultServer: Bool

        /// 是否开启Http2
        public let http2: Bool

        /// 负载均衡与后端服务之间的转发协议
        public let forwardType: String

        /// 转发规则的创建时间
        public let createTime: String

        /// 后端服务器类型
        public let targetType: String

        /// 绑定的目标组基本信息；当规则绑定目标组时，会返回该字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetGroup: BasicTargetGroupInfo?

        /// WAF实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wafDomainId: String?

        /// TRPC被调服务器路由，ForwardType为TRPC时有效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trpcCallee: String?

        /// TRPC调用服务接口，ForwardType为TRPC时有效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trpcFunc: String?

        /// QUIC状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quicStatus: String?

        /// 转发规则的域名列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domains: [String]?

        /// 绑定的目标组列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetGroupList: [BasicTargetGroupInfo]?

        enum CodingKeys: String, CodingKey {
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
            case sessionExpireTime = "SessionExpireTime"
            case healthCheck = "HealthCheck"
            case certificate = "Certificate"
            case scheduler = "Scheduler"
            case listenerId = "ListenerId"
            case rewriteTarget = "RewriteTarget"
            case httpGzip = "HttpGzip"
            case beAutoCreated = "BeAutoCreated"
            case defaultServer = "DefaultServer"
            case http2 = "Http2"
            case forwardType = "ForwardType"
            case createTime = "CreateTime"
            case targetType = "TargetType"
            case targetGroup = "TargetGroup"
            case wafDomainId = "WafDomainId"
            case trpcCallee = "TrpcCallee"
            case trpcFunc = "TrpcFunc"
            case quicStatus = "QuicStatus"
            case domains = "Domains"
            case targetGroupList = "TargetGroupList"
        }
    }

    /// HTTP/HTTPS监听器下的转发规则绑定的后端服务信息
    public struct RuleTargets: TCOutputModel {
        /// 转发规则的 ID
        public let locationId: String

        /// 转发规则的域名
        public let domain: String

        /// 转发规则的路径。
        public let url: String

        /// 后端服务的信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: [Backend]?

        enum CodingKeys: String, CodingKey {
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
            case targets = "Targets"
        }
    }

    /// 七层规则对象
    public struct RulesItems: TCOutputModel {
        /// 规则id
        public let locationId: String

        /// 域名
        public let domain: String

        /// uri
        public let url: String

        /// 绑定的后端对象
        public let targets: [LbRsTargets]

        enum CodingKeys: String, CodingKey {
            case locationId = "LocationId"
            case domain = "Domain"
            case url = "Url"
            case targets = "Targets"
        }
    }

    /// 升级为性能容量型参数
    public struct SlaUpdateParam: TCInputModel {
        /// lb的字符串ID
        public let loadBalancerId: String

        /// 升级为性能容量型，固定取值为SLA。SLA表示升级为默认规格的性能容量型实例。
        /// <ul><li>当您开通了普通规格的性能容量型时，SLA对应超强型1规格。普通规格的性能容量型正在内测中，请提交 [内测申请](https://cloud.tencent.com/apply/p/hf45esx99lf)。</li>
        /// <li>当您开通了超大型规格的性能容量型时，SLA对应超强型4规格。超大型规格的性能容量型正在内测中，请提交 [工单申请](https://console.cloud.tencent.com/workorder/category)。</li></ul>
        public let slaType: String

        public init(loadBalancerId: String, slaType: String) {
            self.loadBalancerId = loadBalancerId
            self.slaType = slaType
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case slaType = "SlaType"
        }
    }

    /// SnatIp的信息结构
    public struct SnatIp: TCInputModel, TCOutputModel {
        /// 私有网络子网的唯一性id，如subnet-12345678
        public let subnetId: String

        /// IP地址，如192.168.0.1
        public let ip: String?

        public init(subnetId: String, ip: String? = nil) {
            self.subnetId = subnetId
            self.ip = ip
        }

        enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case ip = "Ip"
        }
    }

    /// 负载均衡的标签信息
    public struct TagInfo: TCOutputModel {
        /// 标签的键
        public let tagKey: String

        /// 标签的值
        public let tagValue: String

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 转发目标，即绑定在负载均衡上的后端服务
    public struct Target: TCInputModel, TCOutputModel {
        /// 后端服务的监听端口。
        /// 注意：绑定CVM（云服务器）或ENI（弹性网卡）时必传此参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 后端服务的类型，可取：CVM（云服务器）、ENI（弹性网卡）；作为入参时，目前本参数暂不生效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 绑定CVM时需要传入此参数，代表CVM的唯一 ID，可通过 DescribeInstances 接口返回字段中的 InstanceId 字段获取。表示绑定主网卡主IP。
        /// 注意：参数 InstanceId、EniIp 有且只能传入其中一个参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 后端服务修改后的转发权重，取值范围：[0, 100]，默认为 10。此参数的优先级高于[RsWeightRule](https://cloud.tencent.com/document/api/214/30694#RsWeightRule)中的Weight参数，即最终的权重值以此Weight参数值为准，仅当此Weight参数为空时，才以RsWeightRule中的Weight参数为准。
        public let weight: Int64?

        /// 绑定IP时需要传入此参数，支持弹性网卡的IP和其他内网IP，如果是弹性网卡则必须先绑定至CVM，然后才能绑定到负载均衡实例。
        /// 注意：参数 InstanceId、EniIp 有且只能传入其中一个参数。如果绑定双栈IPV6子机，则必须传该参数。如果是跨地域绑定，则必须传该参数，不支持传InstanceId参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eniIp: String?

        public init(port: Int64, type: String? = nil, instanceId: String? = nil, weight: Int64? = nil, eniIp: String? = nil) {
            self.port = port
            self.type = type
            self.instanceId = instanceId
            self.weight = weight
            self.eniIp = eniIp
        }

        enum CodingKeys: String, CodingKey {
            case port = "Port"
            case type = "Type"
            case instanceId = "InstanceId"
            case weight = "Weight"
            case eniIp = "EniIp"
        }
    }

    /// 规则与目标组的关联关系
    public struct TargetGroupAssociation: TCInputModel {
        /// 负载均衡ID
        public let loadBalancerId: String

        /// 监听器ID
        public let listenerId: String

        /// 目标组ID
        public let targetGroupId: String

        /// 转发规则ID
        public let locationId: String?

        public init(loadBalancerId: String, listenerId: String, targetGroupId: String, locationId: String? = nil) {
            self.loadBalancerId = loadBalancerId
            self.listenerId = listenerId
            self.targetGroupId = targetGroupId
            self.locationId = locationId
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case listenerId = "ListenerId"
            case targetGroupId = "TargetGroupId"
            case locationId = "LocationId"
        }
    }

    /// 目标组绑定的后端服务器
    public struct TargetGroupBackend: TCOutputModel {
        /// 目标组ID
        public let targetGroupId: String

        /// 后端服务的类型，可取：CVM、ENI（即将支持）
        public let type: String

        /// 后端服务的唯一 ID
        public let instanceId: String

        /// 后端服务的监听端口
        public let port: UInt64

        /// 后端服务的转发权重，取值范围：[0, 100]，默认为 10。
        public let weight: UInt64

        /// 后端服务的外网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpAddresses: [String]?

        /// 后端服务的内网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIpAddresses: [String]?

        /// 后端服务的实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 后端服务被绑定的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var registeredTime: Date?

        /// 弹性网卡唯一ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eniId: String?

        /// 后端服务的可用区ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: UInt64?

        enum CodingKeys: String, CodingKey {
            case targetGroupId = "TargetGroupId"
            case type = "Type"
            case instanceId = "InstanceId"
            case port = "Port"
            case weight = "Weight"
            case publicIpAddresses = "PublicIpAddresses"
            case privateIpAddresses = "PrivateIpAddresses"
            case instanceName = "InstanceName"
            case registeredTime = "RegisteredTime"
            case eniId = "EniId"
            case zoneId = "ZoneId"
        }
    }

    /// 目标组信息
    public struct TargetGroupInfo: TCOutputModel {
        /// 目标组ID
        public let targetGroupId: String

        /// 目标组的vpcid
        public let vpcId: String

        /// 目标组的名字
        public let targetGroupName: String

        /// 目标组的默认端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: UInt64?

        /// 目标组的创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createdTime: Date

        /// 目标组的修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updatedTime: Date

        /// 关联到的规则数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let associatedRule: [AssociationItem]?

        enum CodingKeys: String, CodingKey {
            case targetGroupId = "TargetGroupId"
            case vpcId = "VpcId"
            case targetGroupName = "TargetGroupName"
            case port = "Port"
            case createdTime = "CreatedTime"
            case updatedTime = "UpdatedTime"
            case associatedRule = "AssociatedRule"
        }
    }

    /// 目标组实例
    public struct TargetGroupInstance: TCInputModel {
        /// 目标组实例的内网IP
        public let bindIP: String

        /// 目标组实例的端口
        public let port: UInt64

        /// 目标组实例的权重
        public let weight: UInt64?

        /// 目标组实例的新端口
        public let newPort: UInt64?

        public init(bindIP: String, port: UInt64, weight: UInt64? = nil, newPort: UInt64? = nil) {
            self.bindIP = bindIP
            self.port = port
            self.weight = weight
            self.newPort = newPort
        }

        enum CodingKeys: String, CodingKey {
            case bindIP = "BindIP"
            case port = "Port"
            case weight = "Weight"
            case newPort = "NewPort"
        }
    }

    /// 描述一个Target的健康信息
    public struct TargetHealth: TCOutputModel {
        /// Target的内网IP
        public let ip: String

        /// Target绑定的端口
        public let port: Int64

        /// 当前健康状态，true：健康，false：不健康（包括尚未开始探测、探测中、状态异常等几种状态）。只有处于健康状态（且权重大于0），负载均衡才会向其转发流量。
        public let healthStatus: Bool

        /// Target的实例ID，如 ins-12345678
        public let targetId: String

        /// 当前健康状态的详细信息。如：Alive、Dead、Unknown。Alive状态为健康，Dead状态为异常，Unknown状态包括尚未开始探测、探测中、状态未知。
        public let healthStatusDetail: String

        /// 当前健康状态的详细信息。如：Alive、Dead、Unknown。Alive状态为健康，Dead状态为异常，Unknown状态包括尚未开始探测、探测中、状态未知。(该参数对象即将下线，不推荐使用，请使用HealthStatusDetail获取健康详情)
        public let healthStatusDetial: String

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case port = "Port"
            case healthStatus = "HealthStatus"
            case targetId = "TargetId"
            case healthStatusDetail = "HealthStatusDetail"
            case healthStatusDetial = "HealthStatusDetial"
        }
    }

    /// 负载均衡实例所绑定的后端服务的信息，包括所属地域、所属网络。
    public struct TargetRegionInfo: TCInputModel, TCOutputModel {
        /// Target所属地域，如 ap-guangzhou
        public let region: String

        /// Target所属网络，私有网络格式如 vpc-abcd1234，如果是基础网络，则为"0"
        public let vpcId: String

        public init(region: String, vpcId: String) {
            self.region = region
            self.vpcId = vpcId
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case vpcId = "VpcId"
        }
    }

    /// 可用区相关信息
    public struct ZoneInfo: TCOutputModel {
        /// 可用区数值形式的唯一ID，如：100001
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneId: UInt64?

        /// 可用区字符串形式的唯一ID，如：ap-guangzhou-1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 可用区名称，如：广州一区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneName: String?

        /// 可用区所属地域，如：ap-guangzhou
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneRegion: String?

        /// 可用区是否是LocalZone可用区，如：false
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let localZone: Bool?

        /// 可用区是否是EdgeZone可用区，如：false
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let edgeZone: Bool?

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case zone = "Zone"
            case zoneName = "ZoneName"
            case zoneRegion = "ZoneRegion"
            case localZone = "LocalZone"
            case edgeZone = "EdgeZone"
        }
    }

    /// 可用区资源列表
    public struct ZoneResource: TCOutputModel {
        /// 主可用区，如"ap-guangzhou-1"。
        public let masterZone: String

        /// 资源列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceSet: [Resource]?

        /// 备可用区，如"ap-guangzhou-2"，单可用区时，备可用区为null。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZone: String?

        /// IP版本，如IPv4，IPv6，IPv6_Nat。
        public let ipVersion: String

        /// 可用区所属地域，如：ap-guangzhou
        public let zoneRegion: String

        /// 可用区是否是LocalZone可用区，如：false
        public let localZone: Bool

        /// 可用区资源的类型，SHARED表示共享资源，EXCLUSIVE表示独占资源。
        public let zoneResourceType: String

        /// 可用区是否是EdgeZone可用区，如：false
        public let edgeZone: Bool

        enum CodingKeys: String, CodingKey {
            case masterZone = "MasterZone"
            case resourceSet = "ResourceSet"
            case slaveZone = "SlaveZone"
            case ipVersion = "IPVersion"
            case zoneRegion = "ZoneRegion"
            case localZone = "LocalZone"
            case zoneResourceType = "ZoneResourceType"
            case edgeZone = "EdgeZone"
        }
    }
}
