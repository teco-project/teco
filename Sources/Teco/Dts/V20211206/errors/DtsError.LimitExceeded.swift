//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCDtsError {
    public struct LimitExceeded: TCDtsErrorType {
        enum Code: String {
            case limitExceededError = "LimitExceeded.LimitExceededError"
            case maxUnusedJobs = "LimitExceeded.MaxUnusedJobs"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 数量超出限制。
        public static var limitExceededError: LimitExceeded {
            LimitExceeded(.limitExceededError)
        }

        /// 闲置迁移任务数目超过限制。
        public static var maxUnusedJobs: LimitExceeded {
            LimitExceeded(.maxUnusedJobs)
        }

        public func asDtsError() -> TCDtsError {
            let code: TCDtsError.Code
            switch self.error {
            case .limitExceededError:
                code = .limitExceeded_LimitExceededError
            case .maxUnusedJobs:
                code = .limitExceeded_MaxUnusedJobs
            }
            return TCDtsError(code, context: self.context)
        }
    }
}
