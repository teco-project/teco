//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDtsError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case addTaskError = "InternalError.AddTaskError"
            case celeryError = "InternalError.CeleryError"
            case cgwSystemError = "InternalError.CgwSystemError"
            case databaseError = "InternalError.DatabaseError"
            case duplicateJob = "InternalError.DuplicateJob"
            case internalErrorError = "InternalError.InternalErrorError"
            case internalHttpServerError = "InternalError.InternalHttpServerError"
            case internalInnerCommonError = "InternalError.InternalInnerCommonError"
            case internalTradeError = "InternalError.InternalTradeError"
            case lockError = "InternalError.LockError"
            case notEnoughMoneyError = "InternalError.NotEnoughMoneyError"
            case protocolError = "InternalError.ProtocolError"
            case undefinedError = "InternalError.UndefinedError"
            case unknownError = "InternalError.UnknownError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 添加异步任务失败。
        public static var addTaskError: InternalError {
            InternalError(.addTaskError)
        }
        
        /// 内部调度系统错误。
        public static var celeryError: InternalError {
            InternalError(.celeryError)
        }
        
        /// cgw系统错误。
        public static var cgwSystemError: InternalError {
            InternalError(.cgwSystemError)
        }
        
        /// 迁移平台数据库访问失败。
        public static var databaseError: InternalError {
            InternalError(.databaseError)
        }
        
        /// 迁移任务冲突。
        public static var duplicateJob: InternalError {
            InternalError(.duplicateJob)
        }
        
        public static var internalErrorError: InternalError {
            InternalError(.internalErrorError)
        }
        
        /// http请求访问出错。
        public static var internalHttpServerError: InternalError {
            InternalError(.internalHttpServerError)
        }
        
        /// 内部组件访问错误。
        public static var internalInnerCommonError: InternalError {
            InternalError(.internalInnerCommonError)
        }
        
        /// 调用计费服务失败。
        public static var internalTradeError: InternalError {
            InternalError(.internalTradeError)
        }
        
        /// 锁冲突。
        public static var lockError: InternalError {
            InternalError(.lockError)
        }
        
        /// 用户余额不足。
        public static var notEnoughMoneyError: InternalError {
            InternalError(.notEnoughMoneyError)
        }
        
        /// 通信协议错误。
        public static var protocolError: InternalError {
            InternalError(.protocolError)
        }
        
        /// 内部错误。
        public static var undefinedError: InternalError {
            InternalError(.undefinedError)
        }
        
        /// 未知的内部错误。
        public static var unknownError: InternalError {
            InternalError(.unknownError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCDtsError.InternalError: Equatable {
    public static func == (lhs: TCDtsError.InternalError, rhs: TCDtsError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCDtsError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCDtsError.InternalError {
    public func toDtsError() -> TCDtsError {
        guard let code = TCDtsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCDtsError(code, context: self.context)
    }
}