//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Dts {
    /// DescribeCheckSyncJobResult请求参数结构体
    public struct DescribeCheckSyncJobResultRequest: TCRequestModel {
        /// 同步实例id（即标识一个同步作业），形如sync-werwfs23，此值必填
        public let jobId: String?

        public init(jobId: String? = nil) {
            self.jobId = jobId
        }

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    /// DescribeCheckSyncJobResult返回参数结构体
    public struct DescribeCheckSyncJobResultResponse: TCResponseModel {
        /// 校验任务执行状态，如：notStarted(未开始)、running(校验中)、failed(校验任务失败)、success(任务成功)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 步骤总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepCount: UInt64?

        /// 当前所在步骤
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepCur: UInt64?

        /// 总体进度，范围为[0,100]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progress: UInt64?

        /// 步骤信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepInfos: [StepInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case stepCount = "StepCount"
            case stepCur = "StepCur"
            case progress = "Progress"
            case stepInfos = "StepInfos"
            case requestId = "RequestId"
        }
    }

    /// 查询同步校验任务结果
    ///
    /// 查询同步校验任务结果，检查必要参数和周边配置
    @inlinable
    public func describeCheckSyncJobResult(_ input: DescribeCheckSyncJobResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCheckSyncJobResultResponse> {
        self.client.execute(action: "DescribeCheckSyncJobResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询同步校验任务结果
    ///
    /// 查询同步校验任务结果，检查必要参数和周边配置
    @inlinable
    public func describeCheckSyncJobResult(_ input: DescribeCheckSyncJobResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCheckSyncJobResultResponse {
        try await self.client.execute(action: "DescribeCheckSyncJobResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询同步校验任务结果
    ///
    /// 查询同步校验任务结果，检查必要参数和周边配置
    @inlinable
    public func describeCheckSyncJobResult(jobId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCheckSyncJobResultResponse> {
        self.describeCheckSyncJobResult(.init(jobId: jobId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询同步校验任务结果
    ///
    /// 查询同步校验任务结果，检查必要参数和周边配置
    @inlinable
    public func describeCheckSyncJobResult(jobId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCheckSyncJobResultResponse {
        try await self.describeCheckSyncJobResult(.init(jobId: jobId), region: region, logger: logger, on: eventLoop)
    }
}
