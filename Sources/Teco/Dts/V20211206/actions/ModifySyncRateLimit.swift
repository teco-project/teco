//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dts {
    /// ModifySyncRateLimit请求参数结构体
    public struct ModifySyncRateLimitRequest: TCRequest {
        /// 迁移任务ID
        public let jobId: String

        /// 同步任务全量导出线程数、有效值为 1-16
        public let dumpThread: Int64?

        /// 同步任务全量导出的 Rps 限制、需要大于 0
        public let dumpRps: Int64?

        /// 同步任务全量导入线程数、有效值为 1-16
        public let loadThread: Int64?

        /// 同步任务增量导入线程数、有效值为 1-128
        public let sinkerThread: Int64?

        /// 同步任务全量导入的Rps
        public let loadRps: Int64?

        public init(jobId: String, dumpThread: Int64? = nil, dumpRps: Int64? = nil, loadThread: Int64? = nil, sinkerThread: Int64? = nil, loadRps: Int64? = nil) {
            self.jobId = jobId
            self.dumpThread = dumpThread
            self.dumpRps = dumpRps
            self.loadThread = loadThread
            self.sinkerThread = sinkerThread
            self.loadRps = loadRps
        }

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case dumpThread = "DumpThread"
            case dumpRps = "DumpRps"
            case loadThread = "LoadThread"
            case sinkerThread = "SinkerThread"
            case loadRps = "LoadRps"
        }
    }

    /// ModifySyncRateLimit返回参数结构体
    public struct ModifySyncRateLimitResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改同步任务的传输速率
    ///
    /// 用户在发现同步任务对用户的数据库的负载影响较大时、可通过该接口限制任务的传输速率
    @inlinable @discardableResult
    public func modifySyncRateLimit(_ input: ModifySyncRateLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifySyncRateLimitResponse> {
        self.client.execute(action: "ModifySyncRateLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改同步任务的传输速率
    ///
    /// 用户在发现同步任务对用户的数据库的负载影响较大时、可通过该接口限制任务的传输速率
    @inlinable @discardableResult
    public func modifySyncRateLimit(_ input: ModifySyncRateLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifySyncRateLimitResponse {
        try await self.client.execute(action: "ModifySyncRateLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改同步任务的传输速率
    ///
    /// 用户在发现同步任务对用户的数据库的负载影响较大时、可通过该接口限制任务的传输速率
    @inlinable @discardableResult
    public func modifySyncRateLimit(jobId: String, dumpThread: Int64? = nil, dumpRps: Int64? = nil, loadThread: Int64? = nil, sinkerThread: Int64? = nil, loadRps: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifySyncRateLimitResponse> {
        self.modifySyncRateLimit(.init(jobId: jobId, dumpThread: dumpThread, dumpRps: dumpRps, loadThread: loadThread, sinkerThread: sinkerThread, loadRps: loadRps), region: region, logger: logger, on: eventLoop)
    }

    /// 修改同步任务的传输速率
    ///
    /// 用户在发现同步任务对用户的数据库的负载影响较大时、可通过该接口限制任务的传输速率
    @inlinable @discardableResult
    public func modifySyncRateLimit(jobId: String, dumpThread: Int64? = nil, dumpRps: Int64? = nil, loadThread: Int64? = nil, sinkerThread: Int64? = nil, loadRps: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifySyncRateLimitResponse {
        try await self.modifySyncRateLimit(.init(jobId: jobId, dumpThread: dumpThread, dumpRps: dumpRps, loadThread: loadThread, sinkerThread: sinkerThread, loadRps: loadRps), region: region, logger: logger, on: eventLoop)
    }
}
