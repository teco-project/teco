//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dts {
    /// RecoverSyncJob请求参数结构体
    public struct RecoverSyncJobRequest: TCRequestModel {
        /// 同步实例id（即标识一个同步作业），形如sync-werwfs23
        public let jobId: String
        
        public init (jobId: String) {
            self.jobId = jobId
        }
        
        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }
    
    /// RecoverSyncJob返回参数结构体
    public struct RecoverSyncJobResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 解除隔离同步任务
    ///
    /// 解除隔离同步任务，任务在已隔离状态下可调用该接口解除隔离状态任务，同时可通过查询同步任务信息接口DescribeSyncJobs，获取操作后状态。
    @inlinable
    public func recoverSyncJob(_ input: RecoverSyncJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < RecoverSyncJobResponse > {
        self.client.execute(action: "RecoverSyncJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 解除隔离同步任务
    ///
    /// 解除隔离同步任务，任务在已隔离状态下可调用该接口解除隔离状态任务，同时可通过查询同步任务信息接口DescribeSyncJobs，获取操作后状态。
    @inlinable
    public func recoverSyncJob(_ input: RecoverSyncJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverSyncJobResponse {
        try await self.client.execute(action: "RecoverSyncJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 解除隔离同步任务
    ///
    /// 解除隔离同步任务，任务在已隔离状态下可调用该接口解除隔离状态任务，同时可通过查询同步任务信息接口DescribeSyncJobs，获取操作后状态。
    @inlinable
    public func recoverSyncJob(jobId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < RecoverSyncJobResponse > {
        self.recoverSyncJob(RecoverSyncJobRequest(jobId: jobId), logger: logger, on: eventLoop)
    }
    
    /// 解除隔离同步任务
    ///
    /// 解除隔离同步任务，任务在已隔离状态下可调用该接口解除隔离状态任务，同时可通过查询同步任务信息接口DescribeSyncJobs，获取操作后状态。
    @inlinable
    public func recoverSyncJob(jobId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverSyncJobResponse {
        try await self.recoverSyncJob(RecoverSyncJobRequest(jobId: jobId), logger: logger, on: eventLoop)
    }
}
