//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dts {
    /// 查询可迁移的实例列表
    ///
    /// 本接口用于查询支持迁移的云数据库实例
    @inlinable
    public func describeMigrateDBInstances(_ input: DescribeMigrateDBInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeMigrateDBInstancesResponse > {
        self.client.execute(action: "DescribeMigrateDBInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询可迁移的实例列表
    ///
    /// 本接口用于查询支持迁移的云数据库实例
    @inlinable
    public func describeMigrateDBInstances(_ input: DescribeMigrateDBInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMigrateDBInstancesResponse {
        try await self.client.execute(action: "DescribeMigrateDBInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeMigrateDBInstances请求参数结构体
    public struct DescribeMigrateDBInstancesRequest: TCRequestModel {
        /// 数据库类型，如mysql
        public let databaseType: String
        
        /// 实例作为迁移的源还是目标,src(表示源)，dst(表示目标)
        public let migrateRole: String?
        
        /// 云数据库实例ID
        public let instanceId: String?
        
        /// 云数据库名称
        public let instanceName: String?
        
        /// 返回数量限制
        public let limit: Int64?
        
        /// 偏移量
        public let offset: Int64?
        
        /// 资源所属账号 为空值或self(表示本账号内资源)、other(表示其他账户资源)
        public let accountMode: String?
        
        /// 临时密钥Id，若为跨账号资源此项必填
        public let tmpSecretId: String?
        
        /// 临时密钥Key，若为跨账号资源此项必填
        public let tmpSecretKey: String?
        
        /// 临时密钥Token，若为跨账号资源此项必填
        public let tmpToken: String?
        
        public init (databaseType: String, migrateRole: String?, instanceId: String?, instanceName: String?, limit: Int64?, offset: Int64?, accountMode: String?, tmpSecretId: String?, tmpSecretKey: String?, tmpToken: String?) {
            self.databaseType = databaseType
            self.migrateRole = migrateRole
            self.instanceId = instanceId
            self.instanceName = instanceName
            self.limit = limit
            self.offset = offset
            self.accountMode = accountMode
            self.tmpSecretId = tmpSecretId
            self.tmpSecretKey = tmpSecretKey
            self.tmpToken = tmpToken
        }
        
        enum CodingKeys: String, CodingKey {
            case databaseType = "DatabaseType"
            case migrateRole = "MigrateRole"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case limit = "Limit"
            case offset = "Offset"
            case accountMode = "AccountMode"
            case tmpSecretId = "TmpSecretId"
            case tmpSecretKey = "TmpSecretKey"
            case tmpToken = "TmpToken"
        }
    }
    
    /// DescribeMigrateDBInstances返回参数结构体
    public struct DescribeMigrateDBInstancesResponse: TCResponseModel {
        /// 符合筛选条件的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?
        
        /// 实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instances: [MigrateDBItem]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case instances = "Instances"
            case requestId = "RequestId"
        }
    }
}