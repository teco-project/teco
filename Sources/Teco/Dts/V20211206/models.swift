//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Dts {
    /// 检查步骤
    public struct CheckStep: TCOutputModel {
        /// 步骤编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepNo: UInt64?

        /// 步骤Id， 如：ConnectDBCheck、VersionCheck、SrcPrivilegeCheck等，具体校验项和源目标实例相关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepId: String?

        /// 步骤名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepName: String?

        /// 此检查步骤的结果，pass(校验通过)、failed(校验失败)、notStarted(校验还未开始进行)、blocked(检验阻塞)、warning(校验有告警，但仍通过)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepStatus: String?

        /// 此检查步骤的错误消息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepMessage: String?

        /// 每个检查步骤里的具体检查项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detailCheckItems: [DetailCheckItem]?

        /// 是否已跳过
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasSkipped: Bool?

        enum CodingKeys: String, CodingKey {
            case stepNo = "StepNo"
            case stepId = "StepId"
            case stepName = "StepName"
            case stepStatus = "StepStatus"
            case stepMessage = "StepMessage"
            case detailCheckItems = "DetailCheckItems"
            case hasSkipped = "HasSkipped"
        }
    }

    /// 校验任务运行详情
    public struct CheckStepInfo: TCOutputModel {
        /// 任务开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startAt: String?

        /// 任务结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endAt: String?

        /// 任务步骤信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progress: ProcessProgress?

        enum CodingKeys: String, CodingKey {
            case startAt = "StartAt"
            case endAt = "EndAt"
            case progress = "Progress"
        }
    }

    /// 一致性校验摘要信息
    public struct CompareAbstractInfo: TCOutputModel {
        /// 校验配置参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let options: CompareOptions?

        /// 一致性校验对比对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objects: CompareObject?

        /// 对比结论: same,different
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conclusion: String?

        /// 任务状态: success,failed
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 总的表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalTables: UInt64?

        /// 已校验的表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkedTables: UInt64?

        /// 不一致的表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let differentTables: UInt64?

        /// 跳过校验的表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let skippedTables: UInt64?

        /// 预估表总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nearlyTableCount: UInt64?

        /// 不一致的数据行数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let differentRows: UInt64?

        /// 源库行数，当对比类型为**行数对比**时此项有意义
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcSampleRows: UInt64?

        /// 目标库行数，当对比类型为**行数对比**时此项有意义
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstSampleRows: UInt64?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startedAt: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let finishedAt: String?

        enum CodingKeys: String, CodingKey {
            case options = "Options"
            case objects = "Objects"
            case conclusion = "Conclusion"
            case status = "Status"
            case totalTables = "TotalTables"
            case checkedTables = "CheckedTables"
            case differentTables = "DifferentTables"
            case skippedTables = "SkippedTables"
            case nearlyTableCount = "NearlyTableCount"
            case differentRows = "DifferentRows"
            case srcSampleRows = "SrcSampleRows"
            case dstSampleRows = "DstSampleRows"
            case startedAt = "StartedAt"
            case finishedAt = "FinishedAt"
        }
    }

    /// 一致性校验详细信息
    public struct CompareDetailInfo: TCOutputModel {
        /// 数据不一致的表详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let difference: DifferenceDetail?

        /// 跳过校验的表详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let skipped: SkippedDetail?

        enum CodingKeys: String, CodingKey {
            case difference = "Difference"
            case skipped = "Skipped"
        }
    }

    /// 一致性对比对象配置
    public struct CompareObject: TCInputModel, TCOutputModel {
        /// 对象模式 整实例-all,部分对象-partial
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objectMode: String?

        /// 对象列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objectItems: [CompareObjectItem]?

        /// 高级对象类型，如account(账号),index(索引),shardkey(片建，后面可能会调整),schema(库表结构)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advancedObjects: [String]?

        public init(objectMode: String, objectItems: [CompareObjectItem]? = nil, advancedObjects: [String]? = nil) {
            self.objectMode = objectMode
            self.objectItems = objectItems
            self.advancedObjects = advancedObjects
        }

        enum CodingKeys: String, CodingKey {
            case objectMode = "ObjectMode"
            case objectItems = "ObjectItems"
            case advancedObjects = "AdvancedObjects"
        }
    }

    /// 一致性校验库表对象
    public struct CompareObjectItem: TCInputModel, TCOutputModel {
        /// 数据库名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbName: String?

        /// 数据库选择模式: all 为当前对象下的所有对象,partial 为部分对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMode: String?

        /// schema名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let schemaName: String?

        /// 表选择模式: all 为当前对象下的所有表对象,partial 为部分表对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableMode: String?

        /// 用于一致性校验的表配置，当 TableMode 为 partial 时，需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tables: [CompareTableItem]?

        /// 视图选择模式: all 为当前对象下的所有视图对象,partial 为部分视图对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewMode: String?

        /// 用于一致性校验的视图配置，当 ViewMode 为 partial 时， 需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let views: [CompareViewItem]?

        public init(dbName: String, dbMode: String, schemaName: String? = nil, tableMode: String? = nil, tables: [CompareTableItem]? = nil, viewMode: String? = nil, views: [CompareViewItem]? = nil) {
            self.dbName = dbName
            self.dbMode = dbMode
            self.schemaName = schemaName
            self.tableMode = tableMode
            self.tables = tables
            self.viewMode = viewMode
            self.views = views
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
            case dbMode = "DbMode"
            case schemaName = "SchemaName"
            case tableMode = "TableMode"
            case tables = "Tables"
            case viewMode = "ViewMode"
            case views = "Views"
        }
    }

    /// 一致性校验选项
    public struct CompareOptions: TCInputModel, TCOutputModel {
        /// 对比类型：dataCheck(完整数据对比)、sampleDataCheck(抽样数据对比)、rowsCount(行数对比)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let method: String?

        /// 抽样比例;范围0,100
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sampleRate: Int64?

        /// 线程数，取值1-5，默认为1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let threadCount: Int64?

        public init(method: String? = nil, sampleRate: Int64? = nil, threadCount: Int64? = nil) {
            self.method = method
            self.sampleRate = sampleRate
            self.threadCount = threadCount
        }

        enum CodingKeys: String, CodingKey {
            case method = "Method"
            case sampleRate = "SampleRate"
            case threadCount = "ThreadCount"
        }
    }

    /// 用于一致性校验的表配置
    public struct CompareTableItem: TCInputModel, TCOutputModel {
        /// 表名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableName: String?

        public init(tableName: String? = nil) {
            self.tableName = tableName
        }

        enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    /// 数据一致性校验结果
    public struct CompareTaskInfo: TCOutputModel {
        /// 一致性校验任务Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compareTaskId: String?

        /// 一致性校验结果，包括：unstart(未启动)、running(校验中)、canceled(已终止)、failed(校验任务失败)、inconsistent(不一致)、consistent(一致)、notexist(不存在校验任务)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        enum CodingKeys: String, CodingKey {
            case compareTaskId = "CompareTaskId"
            case status = "Status"
        }
    }

    /// 一致性校验对象信息
    public struct CompareTaskItem: TCOutputModel {
        /// 任务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobId: String?

        /// 对比任务 Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compareTaskId: String?

        /// 对比任务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskName: String?

        /// 对比任务状态, 可能的值：created - 创建完成；readyRun - 等待运行；running - 运行中；success - 成功；stopping - 结束中；failed - 失败；canceled - 已终止
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 对比任务配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let config: CompareObject?

        /// 对比任务校验详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkProcess: ProcessProgress?

        /// 对比任务运行详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compareProcess: ProcessProgress?

        /// 对比结果, 可能的值：same - 一致；different - 不一致；skipAll - 跳过
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conclusion: String?

        /// 任务创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdAt: String?

        /// 任务启动时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startedAt: String?

        /// 对比结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let finishedAt: String?

        /// 对比类型，dataCheck(完整数据对比)、sampleDataCheck(抽样数据对比)、rowsCount(行数对比)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let method: String?

        /// 对比配置信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let options: CompareOptions?

        /// 一致性校验提示信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case compareTaskId = "CompareTaskId"
            case taskName = "TaskName"
            case status = "Status"
            case config = "Config"
            case checkProcess = "CheckProcess"
            case compareProcess = "CompareProcess"
            case conclusion = "Conclusion"
            case createdAt = "CreatedAt"
            case startedAt = "StartedAt"
            case finishedAt = "FinishedAt"
            case method = "Method"
            case options = "Options"
            case message = "Message"
        }
    }

    /// 用于一致性校验的视图配置
    public struct CompareViewItem: TCInputModel, TCOutputModel {
        /// 视图名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewName: String?

        public init(viewName: String? = nil) {
            self.viewName = viewName
        }

        enum CodingKeys: String, CodingKey {
            case viewName = "ViewName"
        }
    }

    /// 冲突处理里的详细描述
    public struct ConflictHandleOption: TCInputModel, TCOutputModel {
        /// 条件覆盖的列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionColumn: String?

        /// 条件覆盖操作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionOperator: String?

        /// 条件覆盖优先级处理
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditionOrderInSrcAndDst: String?

        public init(conditionColumn: String? = nil, conditionOperator: String? = nil, conditionOrderInSrcAndDst: String? = nil) {
            self.conditionColumn = conditionColumn
            self.conditionOperator = conditionOperator
            self.conditionOrderInSrcAndDst = conditionOrderInSrcAndDst
        }

        enum CodingKeys: String, CodingKey {
            case conditionColumn = "ConditionColumn"
            case conditionOperator = "ConditionOperator"
            case conditionOrderInSrcAndDst = "ConditionOrderInSrcAndDst"
        }
    }

    /// 数据一致性校验选项， 默认为不开启一致性校验
    public struct ConsistencyOption: TCInputModel, TCOutputModel {
        /// 一致性检测类型: full(全量检测迁移对象)、noCheck(不检测)、notConfigured(未配置)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mode: String?

        public init(mode: String? = nil) {
            self.mode = mode
        }

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
        }
    }

    /// 实例信息
    public struct DBEndpointInfo: TCInputModel, TCOutputModel {
        /// 实例所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 实例网络接入类型，如：extranet(外网)、ipv6(公网ipv6)、cvm(云主机自建)、dcg(专线接入)、vpncloud(vpn接入的实例)、cdb(云数据库)、ccn(云联网)、intranet(自研上云)、vpc(私有网络)等，注意具体可选值依赖当前链路
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessType: String?

        /// 实例数据库类型，如：mysql,redis,mongodb,postgresql,mariadb,percona 等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseType: String?

        /// 节点类型，为空或者"simple":表示普通节点，"cluster": 集群节点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeType: String?

        /// 数据库信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let info: [DBInfo]?

        /// 实例服务提供商，如:"aliyun","others"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supplier: String?

        /// MongoDB可定义如下的参数: 	['AuthDatabase':'admin',
        /// 'AuthFlag': "1",	'AuthMechanism':"SCRAM-SHA-1"]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraAttr: [KeyValuePairOption]?

        /// 数据库所属网络环境，AccessType为云联网(ccn)时必填， UserIDC表示用户IDC、TencentVPC表示腾讯云VPC；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseNetEnv: String?

        public init(region: String, accessType: String, databaseType: String, nodeType: String, info: [DBInfo], supplier: String? = nil, extraAttr: [KeyValuePairOption]? = nil, databaseNetEnv: String? = nil) {
            self.region = region
            self.accessType = accessType
            self.databaseType = databaseType
            self.nodeType = nodeType
            self.info = info
            self.supplier = supplier
            self.extraAttr = extraAttr
            self.databaseNetEnv = databaseNetEnv
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case accessType = "AccessType"
            case databaseType = "DatabaseType"
            case nodeType = "NodeType"
            case info = "Info"
            case supplier = "Supplier"
            case extraAttr = "ExtraAttr"
            case databaseNetEnv = "DatabaseNetEnv"
        }
    }

    /// 数据库信息
    public struct DBInfo: TCInputModel, TCOutputModel {
        /// 表示节点角色，针对分布式数据库，如mongodb中的mongos节点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let role: String?

        /// 内核版本，针对mariadb的不同内核版本等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbKernel: String?

        /// 实例的IP地址，对于公网、专线、VPN、云联网、自研上云、VPC等接入方式此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let host: String?

        /// 实例的端口，对于公网、云主机自建、专线、VPN、云联网、自研上云、VPC等接入方式此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: UInt64?

        /// 实例的用户名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let user: String?

        /// 实例的密码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let password: String?

        /// CVM实例短ID，格式如：ins-olgl39y8；与云服务器控制台页面显示的实例ID相同；如果接入类型为云主机自建的方式，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvmInstanceId: String?

        /// VPN网关ID，格式如：vpngw-9ghexg7q；如果接入类型为vpncloud的方式，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqVpnGwId: String?

        /// 专线网关ID，格式如：dcg-0rxtqqxb；如果接入类型为专线接入的方式，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqDcgId: String?

        /// 数据库实例ID，格式如：cdb-powiqx8q；如果接入类型为云数据库的方式，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 云联网ID，如：ccn-afp6kltc 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ccnGwId: String?

        /// 私有网络ID，格式如：vpc-92jblxto；如果接入类型为vpc、vpncloud、ccn、dcg的方式，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 私有网络下的子网ID，格式如：subnet-3paxmkdz；如果接入类型为vpc、vpncloud、ccn、dcg的方式，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 数据库版本，当实例为RDS实例时才有效，格式如：5.6或者5.7，默认为5.6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineVersion: String?

        /// 实例所属账号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let account: String?

        /// 跨账号迁移时的角色,只允许[a-zA-Z0-9\-\_]+
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accountRole: String?

        /// 资源所属账号 为空或self(表示本账号内资源)、other(表示其他账户资源)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accountMode: String?

        /// 临时密钥Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpSecretId: String?

        /// 临时密钥Key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpSecretKey: String?

        /// 临时Token
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpToken: String?

        public init(role: String? = nil, dbKernel: String? = nil, host: String? = nil, port: UInt64? = nil, user: String? = nil, password: String? = nil, cvmInstanceId: String? = nil, uniqVpnGwId: String? = nil, uniqDcgId: String? = nil, instanceId: String? = nil, ccnGwId: String? = nil, vpcId: String? = nil, subnetId: String? = nil, engineVersion: String? = nil, account: String? = nil, accountRole: String? = nil, accountMode: String? = nil, tmpSecretId: String? = nil, tmpSecretKey: String? = nil, tmpToken: String? = nil) {
            self.role = role
            self.dbKernel = dbKernel
            self.host = host
            self.port = port
            self.user = user
            self.password = password
            self.cvmInstanceId = cvmInstanceId
            self.uniqVpnGwId = uniqVpnGwId
            self.uniqDcgId = uniqDcgId
            self.instanceId = instanceId
            self.ccnGwId = ccnGwId
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.engineVersion = engineVersion
            self.account = account
            self.accountRole = accountRole
            self.accountMode = accountMode
            self.tmpSecretId = tmpSecretId
            self.tmpSecretKey = tmpSecretKey
            self.tmpToken = tmpToken
        }

        enum CodingKeys: String, CodingKey {
            case role = "Role"
            case dbKernel = "DbKernel"
            case host = "Host"
            case port = "Port"
            case user = "User"
            case password = "Password"
            case cvmInstanceId = "CvmInstanceId"
            case uniqVpnGwId = "UniqVpnGwId"
            case uniqDcgId = "UniqDcgId"
            case instanceId = "InstanceId"
            case ccnGwId = "CcnGwId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case engineVersion = "EngineVersion"
            case account = "Account"
            case accountRole = "AccountRole"
            case accountMode = "AccountMode"
            case tmpSecretId = "TmpSecretId"
            case tmpSecretKey = "TmpSecretKey"
            case tmpToken = "TmpToken"
        }
    }

    /// 迁移对象信息，在配置库表视图等对象信息时大小写敏感
    public struct DBItem: TCInputModel, TCOutputModel {
        /// 需要迁移或同步的库名，当ObjectMode为partial时，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbName: String?

        /// 迁移或同步后的库名，默认与源库相同
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newDbName: String?

        /// 迁移或同步的 schema
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let schemaName: String?

        /// 迁移或同步后的 schema name
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newSchemaName: String?

        /// DB选择模式: all(为当前对象下的所有对象)，partial(部分对象)，当ObjectMode为partial时，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMode: String?

        /// schema选择模式: all(为当前对象下的所有对象)，partial(部分对象)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let schemaMode: String?

        /// 表选择模式: all(为当前对象下的所有对象)，partial(部分对象)，当DBMode为partial时此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableMode: String?

        /// 表图对象集合，当 TableMode 为 partial 时，此项需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tables: [TableItem]?

        /// 视图选择模式: all 为当前对象下的所有视图对象,partial 为部分视图对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewMode: String?

        /// 视图对象集合，当 ViewMode 为 partial 时， 此项需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let views: [ViewItem]?

        /// postgresql独有参数，角色选择模式: all 为当前对象下的所有角色对象,partial 为部分角色对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleMode: String?

        /// postgresql独有参数，当 RoleMode 为 partial 时， 此项需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roles: [RoleItem]?

        /// 选择要同步的模式，partial为部分，all为整选
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let functionMode: String?

        /// 选择要同步的模式，partial为部分，all为整选
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let triggerMode: String?

        /// 选择要同步的模式，partial为部分，all为整选
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventMode: String?

        /// 选择要同步的模式，partial为部分，all为整选
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let procedureMode: String?

        /// FunctionMode取值为partial时需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let functions: [String]?

        /// ProcedureMode取值为partial时需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let procedures: [String]?

        /// EventMode取值为partial时需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let events: [String]?

        /// TriggerMode取值为partial时需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let triggers: [String]?

        public init(dbName: String? = nil, newDbName: String? = nil, schemaName: String? = nil, newSchemaName: String? = nil, dbMode: String? = nil, schemaMode: String? = nil, tableMode: String? = nil, tables: [TableItem]? = nil, viewMode: String? = nil, views: [ViewItem]? = nil, roleMode: String? = nil, roles: [RoleItem]? = nil, functionMode: String? = nil, triggerMode: String? = nil, eventMode: String? = nil, procedureMode: String? = nil, functions: [String]? = nil, procedures: [String]? = nil, events: [String]? = nil, triggers: [String]? = nil) {
            self.dbName = dbName
            self.newDbName = newDbName
            self.schemaName = schemaName
            self.newSchemaName = newSchemaName
            self.dbMode = dbMode
            self.schemaMode = schemaMode
            self.tableMode = tableMode
            self.tables = tables
            self.viewMode = viewMode
            self.views = views
            self.roleMode = roleMode
            self.roles = roles
            self.functionMode = functionMode
            self.triggerMode = triggerMode
            self.eventMode = eventMode
            self.procedureMode = procedureMode
            self.functions = functions
            self.procedures = procedures
            self.events = events
            self.triggers = triggers
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
            case newDbName = "NewDbName"
            case schemaName = "SchemaName"
            case newSchemaName = "NewSchemaName"
            case dbMode = "DBMode"
            case schemaMode = "SchemaMode"
            case tableMode = "TableMode"
            case tables = "Tables"
            case viewMode = "ViewMode"
            case views = "Views"
            case roleMode = "RoleMode"
            case roles = "Roles"
            case functionMode = "FunctionMode"
            case triggerMode = "TriggerMode"
            case eventMode = "EventMode"
            case procedureMode = "ProcedureMode"
            case functions = "Functions"
            case procedures = "Procedures"
            case events = "Events"
            case triggers = "Triggers"
        }
    }

    /// 需要同步的库表对象
    public struct Database: TCInputModel, TCOutputModel {
        /// 需要迁移或同步的库名，当ObjectMode为Partial时，此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbName: String?

        /// 迁移或同步后的库名，默认与源库相同
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newDbName: String?

        /// DB选择模式: All(为当前对象下的所有对象)，Partial(部分对象)，当Mode为Partial时，此项必填。注意，高级对象的同步不依赖此值，如果整库同步此处应该为All。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMode: String?

        /// 迁移或同步的 schema
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let schemaName: String?

        /// 迁移或同步后的 schema name
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newSchemaName: String?

        /// 表选择模式: All(为当前对象下的所有对象)，Partial(部分对象)，当DBMode为Partial时此项必填，如果整库同步此处应该为All。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableMode: String?

        /// 表图对象集合，当 TableMode 为 Partial 时，此项需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tables: [Table]?

        /// 视图选择模式: All 为当前对象下的所有视图对象,Partial 为部分视图对象，如果整库同步此处应该为All。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewMode: String?

        /// 视图对象集合，当 ViewMode 为 Partial 时， 此项需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let views: [View]?

        /// 选择要同步的模式，Partial为部分，All为整选，如果整库同步此处应该为All。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let functionMode: String?

        /// FunctionMode取值为Partial时需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let functions: [String]?

        /// 选择要同步的模式，Partial为部分，All为整选，如果整库同步此处应该为All。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let procedureMode: String?

        /// ProcedureMode取值为Partial时需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let procedures: [String]?

        /// 触发器迁移模式，All(为当前对象下的所有对象)，Partial(部分对象)，如果整库同步此处应该为All。数据同步暂不支持此高级对象。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let triggerMode: String?

        /// 当TriggerMode为partial，指定要迁移的触发器名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let triggers: [String]?

        /// 事件迁移模式，All(为当前对象下的所有对象)，Partial(部分对象)，如果整库同步此处应该为All。数据同步暂不支持此高级对象。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventMode: String?

        /// 当EventMode为partial，指定要迁移的事件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let events: [String]?

        public init(dbName: String? = nil, newDbName: String? = nil, dbMode: String? = nil, schemaName: String? = nil, newSchemaName: String? = nil, tableMode: String? = nil, tables: [Table]? = nil, viewMode: String? = nil, views: [View]? = nil, functionMode: String? = nil, functions: [String]? = nil, procedureMode: String? = nil, procedures: [String]? = nil, triggerMode: String? = nil, triggers: [String]? = nil, eventMode: String? = nil, events: [String]? = nil) {
            self.dbName = dbName
            self.newDbName = newDbName
            self.dbMode = dbMode
            self.schemaName = schemaName
            self.newSchemaName = newSchemaName
            self.tableMode = tableMode
            self.tables = tables
            self.viewMode = viewMode
            self.views = views
            self.functionMode = functionMode
            self.functions = functions
            self.procedureMode = procedureMode
            self.procedures = procedures
            self.triggerMode = triggerMode
            self.triggers = triggers
            self.eventMode = eventMode
            self.events = events
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
            case newDbName = "NewDbName"
            case dbMode = "DbMode"
            case schemaName = "SchemaName"
            case newSchemaName = "NewSchemaName"
            case tableMode = "TableMode"
            case tables = "Tables"
            case viewMode = "ViewMode"
            case views = "Views"
            case functionMode = "FunctionMode"
            case functions = "Functions"
            case procedureMode = "ProcedureMode"
            case procedures = "Procedures"
            case triggerMode = "TriggerMode"
            case triggers = "Triggers"
            case eventMode = "EventMode"
            case events = "Events"
        }
    }

    /// 迁移对象选项，需要告知迁移服务迁移哪些库表对象
    public struct DatabaseTableObject: TCInputModel, TCOutputModel {
        /// 迁移对象类型 all(全实例)，partial(部分对象)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objectMode: String?

        /// 迁移对象，当 ObjectMode 为 partial 时，不为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databases: [DBItem]?

        /// 高级对象类型，如trigger、function、procedure、event
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advancedObjects: [String]?

        public init(objectMode: String, databases: [DBItem]? = nil, advancedObjects: [String]? = nil) {
            self.objectMode = objectMode
            self.databases = databases
            self.advancedObjects = advancedObjects
        }

        enum CodingKeys: String, CodingKey {
            case objectMode = "ObjectMode"
            case databases = "Databases"
            case advancedObjects = "AdvancedObjects"
        }
    }

    /// 数据同步中的ddl同步处理
    public struct DdlOption: TCInputModel, TCOutputModel {
        /// ddl类型，如Database,Table,View,Index等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ddlObject: String?

        /// ddl具体值，对于Database可取值[Create,Drop,Alter]<br>对于Table可取值[Create,Drop,Alter,Truncate,Rename]<br/>对于View可取值[Create,Drop]<br/>对于Index可取值[Create,Drop]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ddlValue: [String]?

        public init(ddlObject: String? = nil, ddlValue: [String]? = nil) {
            self.ddlObject = ddlObject
            self.ddlValue = ddlValue
        }

        enum CodingKeys: String, CodingKey {
            case ddlObject = "DdlObject"
            case ddlValue = "DdlValue"
        }
    }

    /// 每个检查步骤里的具体检查项
    public struct DetailCheckItem: TCOutputModel {
        /// 检查项的名称，如：源实例权限检查
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkItemName: String?

        /// 检查项详细内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// pass(通过)，failed(失败), warning(校验有警告，但仍通过)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkResult: String?

        /// 检查项失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failureReason: String?

        /// 解决方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let solution: String?

        /// 运行报错日志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorLog: [String]?

        /// 详细帮助的文档链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let helpDoc: [String]?

        /// 跳过风险文案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let skipInfo: String?

        enum CodingKeys: String, CodingKey {
            case checkItemName = "CheckItemName"
            case description = "Description"
            case checkResult = "CheckResult"
            case failureReason = "FailureReason"
            case solution = "Solution"
            case errorLog = "ErrorLog"
            case helpDoc = "HelpDoc"
            case skipInfo = "SkipInfo"
        }
    }

    /// 数据不一致的表详情
    public struct DifferenceDetail: TCOutputModel {
        /// 数据不一致的表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 校验不一致的表详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [DifferenceItem]?

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
        }
    }

    /// 校验不一致的表详情
    public struct DifferenceItem: TCOutputModel {
        /// 数据库名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let db: String?

        /// 表名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let table: String?

        /// 分块号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chunk: Int64?

        /// 源库数值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcItem: String?

        /// 目标库数值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstItem: String?

        /// 索引名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexName: String?

        /// 索引下边界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lowerBoundary: String?

        /// 索引上边界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upperBoundary: String?

        /// 对比消耗时间,单位为 ms
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let costTime: Float?

        /// 完成时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let finishedAt: String?

        enum CodingKeys: String, CodingKey {
            case db = "Db"
            case table = "Table"
            case chunk = "Chunk"
            case srcItem = "SrcItem"
            case dstItem = "DstItem"
            case indexName = "IndexName"
            case lowerBoundary = "LowerBoundary"
            case upperBoundary = "UpperBoundary"
            case costTime = "CostTime"
            case finishedAt = "FinishedAt"
        }
    }

    /// 数据同步中的选项
    public struct DynamicOptions: TCInputModel, TCOutputModel {
        /// 所要同步的DML和DDL的选项，Insert(插入操作)、Update(更新操作)、Delete(删除操作)、DDL(结构同步)，PartialDDL(自定义,和DdlOptions一起起作用 )；必填、dts会用该值覆盖原有的值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let opTypes: [String]?

        /// DDL同步选项，具体描述要同步那些DDL; 当OpTypes取值PartialDDL时、字段不能为空；必填、dts会用该值覆盖原有的值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ddlOptions: [DdlOption]?

        /// 冲突处理选项，ReportError(报错)、Ignore(忽略)、Cover(覆盖)、ConditionCover(条件覆盖); 目前目标端为kafka的链路不支持修改该配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conflictHandleType: String?

        /// 冲突处理的详细选项，如条件覆盖中的条件行和条件操作；不能部分更新该选项的内部字段；有更新时、需要全量更新该字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conflictHandleOption: ConflictHandleOption?

        public init(opTypes: [String], ddlOptions: [DdlOption], conflictHandleType: String? = nil, conflictHandleOption: ConflictHandleOption? = nil) {
            self.opTypes = opTypes
            self.ddlOptions = ddlOptions
            self.conflictHandleType = conflictHandleType
            self.conflictHandleOption = conflictHandleOption
        }

        enum CodingKeys: String, CodingKey {
            case opTypes = "OpTypes"
            case ddlOptions = "DdlOptions"
            case conflictHandleType = "ConflictHandleType"
            case conflictHandleOption = "ConflictHandleOption"
        }
    }

    /// 数据同步中的描述源端和目的端的信息
    public struct Endpoint: TCInputModel, TCOutputModel {
        /// 地域英文名，如：ap-guangzhou
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// tdsql mysql版的节点类型，枚举值为proxy、set
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let role: String?

        /// 数据库内核类型，tdsql中用于区分不同内核：percona,mariadb,mysql
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbKernel: String?

        /// 数据库实例ID，格式如：cdb-powiqx8q
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 实例的IP地址，接入类型为非cdb时此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// 实例端口，接入类型为非cdb时此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: UInt64?

        /// 用户名，对于访问需要用户名密码认证的实例必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let user: String?

        /// 密码，对于访问需要用户名密码认证的实例必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let password: String?

        /// 数据库名，数据库为cdwpg时，需要提供
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbName: String?

        /// 私有网络ID，对于私有网络、专线、VPN的接入方式此项必填，格式如：vpc-92jblxto
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 私有网络下的子网ID，对于私有网络、专线、VPN的接入方式此项必填，格式如：subnet-3paxmkdz
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// CVM实例短ID，格式如：ins-olgl39y8，与云服务器控制台页面显示的实例ID相同。如果是CVM自建实例，需要传递此字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvmInstanceId: String?

        /// 专线网关ID，对于专线接入类型此项必填，格式如：dcg-0rxtqqxb
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqDcgId: String?

        /// VPN网关ID，对于vpn接入类型此项必填，格式如：vpngw-9ghexg7q
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqVpnGwId: String?

        /// 云联网ID，对于云联网接入类型此项必填，如：ccn-afp6kltc
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ccnId: String?

        /// 云厂商类型，当实例为RDS实例时，填写为aliyun, 其他情况均填写others，默认为others
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supplier: String?

        /// 数据库版本，当实例为RDS实例时才有效，其他实例忽略，格式如：5.6或者5.7，默认为5.6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineVersion: String?

        /// 实例所属账号，如果为跨账号实例此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let account: String?

        /// 资源所属账号 为空或self(表示本账号内资源)、other(表示跨账号资源)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accountMode: String?

        /// 跨账号同步时的角色，只允许[a-zA-Z0-9\-\_]+，如果为跨账号实例此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accountRole: String?

        /// 外部角色id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleExternalId: String?

        /// 临时密钥Id，如果为跨账号实例此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpSecretId: String?

        /// 临时密钥Key，如果为跨账号实例此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpSecretKey: String?

        /// 临时Token，如果为跨账号实例此项必填
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpToken: String?

        /// 是否走加密传输、UnEncrypted表示不走加密传输，Encrypted表示走加密传输，默认UnEncrypted
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let encryptConn: String?

        /// 数据库所属网络环境，AccessType为云联网(ccn)时必填， UserIDC表示用户IDC、TencentVPC表示腾讯云VPC；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseNetEnv: String?

        public init(region: String? = nil, role: String? = nil, dbKernel: String? = nil, instanceId: String? = nil, ip: String? = nil, port: UInt64? = nil, user: String? = nil, password: String? = nil, dbName: String? = nil, vpcId: String? = nil, subnetId: String? = nil, cvmInstanceId: String? = nil, uniqDcgId: String? = nil, uniqVpnGwId: String? = nil, ccnId: String? = nil, supplier: String? = nil, engineVersion: String? = nil, account: String? = nil, accountMode: String? = nil, accountRole: String? = nil, roleExternalId: String? = nil, tmpSecretId: String? = nil, tmpSecretKey: String? = nil, tmpToken: String? = nil, encryptConn: String? = nil, databaseNetEnv: String? = nil) {
            self.region = region
            self.role = role
            self.dbKernel = dbKernel
            self.instanceId = instanceId
            self.ip = ip
            self.port = port
            self.user = user
            self.password = password
            self.dbName = dbName
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.cvmInstanceId = cvmInstanceId
            self.uniqDcgId = uniqDcgId
            self.uniqVpnGwId = uniqVpnGwId
            self.ccnId = ccnId
            self.supplier = supplier
            self.engineVersion = engineVersion
            self.account = account
            self.accountMode = accountMode
            self.accountRole = accountRole
            self.roleExternalId = roleExternalId
            self.tmpSecretId = tmpSecretId
            self.tmpSecretKey = tmpSecretKey
            self.tmpToken = tmpToken
            self.encryptConn = encryptConn
            self.databaseNetEnv = databaseNetEnv
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case role = "Role"
            case dbKernel = "DbKernel"
            case instanceId = "InstanceId"
            case ip = "Ip"
            case port = "Port"
            case user = "User"
            case password = "Password"
            case dbName = "DbName"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case cvmInstanceId = "CvmInstanceId"
            case uniqDcgId = "UniqDcgId"
            case uniqVpnGwId = "UniqVpnGwId"
            case ccnId = "CcnId"
            case supplier = "Supplier"
            case engineVersion = "EngineVersion"
            case account = "Account"
            case accountMode = "AccountMode"
            case accountRole = "AccountRole"
            case roleExternalId = "RoleExternalId"
            case tmpSecretId = "TmpSecretId"
            case tmpSecretKey = "TmpSecretKey"
            case tmpToken = "TmpToken"
            case encryptConn = "EncryptConn"
            case databaseNetEnv = "DatabaseNetEnv"
        }
    }

    /// 任务错误信息
    public struct ErrorInfoItem: TCOutputModel {
        /// 错误码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let code: String?

        /// 解决方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let solution: String?

        /// 错误日志信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorLog: String?

        /// 文档提示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let helpDoc: String?

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case solution = "Solution"
            case errorLog = "ErrorLog"
            case helpDoc = "HelpDoc"
        }
    }

    /// 迁移任务列表
    public struct JobItem: TCOutputModel {
        /// 数据迁移任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobId: String?

        /// 数据迁移任务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobName: String?

        /// 任务创建(提交)时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 任务更新时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 任务开始执行时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 任务执行结束时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 迁移任务错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let briefMsg: String?

        /// 任务状态，取值为：creating(创建中)、created(创建完成)、checking(校验中)、checkPass(校验通过)、checkNotPass(校验不通过)、readyRun(准备运行)、running(任务运行)、readyComplete(准备完成)、success(任务成功)、failed(任务失败)、stopping(中止中)、completing(完成中)、
        /// pausing(暂停中)、
        /// manualPaused(已暂停)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 任务运行模式，值包括：immediate(立即运行)，timed(定时运行)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runMode: String?

        /// 期待启动时间，当RunMode取值为timed时，此值必填，形如：2022-07-11 16:20:49
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expectRunTime: String?

        /// 任务操作信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let action: MigrateAction?

        /// 迁移执行过程信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepInfo: MigrateDetailInfo?

        /// 源实例信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcInfo: DBEndpointInfo?

        /// 目标端信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstInfo: DBEndpointInfo?

        /// 数据一致性校验结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compareTask: CompareTaskInfo?

        /// 计费状态信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tradeInfo: TradeInfo?

        /// 标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [TagItem]?

        /// 自动重试时间段信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRetryTimeRangeMinutes: Int64?

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case jobName = "JobName"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case briefMsg = "BriefMsg"
            case status = "Status"
            case runMode = "RunMode"
            case expectRunTime = "ExpectRunTime"
            case action = "Action"
            case stepInfo = "StepInfo"
            case srcInfo = "SrcInfo"
            case dstInfo = "DstInfo"
            case compareTask = "CompareTask"
            case tradeInfo = "TradeInfo"
            case tags = "Tags"
            case autoRetryTimeRangeMinutes = "AutoRetryTimeRangeMinutes"
        }
    }

    /// 目标端为kakfa时添加的同步选项字段
    public struct KafkaOption: TCInputModel, TCOutputModel {
        /// 投递到kafka的数据类型，如Avro,Json
        public let dataType: String?

        /// 同步topic策略，如Single（集中投递到单topic）,Multi (自定义topic名称)
        public let topicType: String?

        /// 用于存储ddl的topic
        public let ddlTopicName: String?

        /// 单topic和自定义topic的描述
        public let topicRules: [TopicRule]?

        public init(dataType: String? = nil, topicType: String? = nil, ddlTopicName: String? = nil, topicRules: [TopicRule]? = nil) {
            self.dataType = dataType
            self.topicType = topicType
            self.ddlTopicName = ddlTopicName
            self.topicRules = topicRules
        }

        enum CodingKeys: String, CodingKey {
            case dataType = "DataType"
            case topicType = "TopicType"
            case ddlTopicName = "DDLTopicName"
            case topicRules = "TopicRules"
        }
    }

    /// 存放配置时的额外信息
    public struct KeyValuePairOption: TCInputModel, TCOutputModel {
        /// 选项key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 选项value
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 任务操作信息，包含迁移任务的所有操作列表，及迁移任务在当前状态下允许的操作列表
    public struct MigrateAction: TCOutputModel {
        /// 任务的所有操作列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let allAction: [String]?

        /// 任务在当前状态下允许的操作列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let allowedAction: [String]?

        enum CodingKeys: String, CodingKey {
            case allAction = "AllAction"
            case allowedAction = "AllowedAction"
        }
    }

    /// 查询迁移实例列表的实例对象
    public struct MigrateDBItem: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 实例Vip
        public let vip: String

        /// 实例Vport
        public let vport: Int64

        /// 是否可以作为迁移对象，1-可以，0-不可以
        public let usable: Int64

        /// 不可以作为迁移对象的原因
        public let hint: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case vip = "Vip"
            case vport = "Vport"
            case usable = "Usable"
            case hint = "Hint"
        }
    }

    /// 迁移执行过程信息
    public struct MigrateDetailInfo: TCOutputModel {
        /// 总步骤数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepAll: UInt64?

        /// 当前步骤
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepNow: UInt64?

        /// 主从差距，MB；只在任务正常，迁移或者同步的最后一步（追Binlog的阶段才有校），如果是非法值，返回-1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterSlaveDistance: Int64?

        /// 主从差距，秒；只在任务正常，迁移或者同步的最后一步（追Binlog的阶段才有校），如果是非法值，返回-1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let secondsBehindMaster: Int64?

        /// 步骤信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepInfo: [StepDetailInfo]?

        enum CodingKeys: String, CodingKey {
            case stepAll = "StepAll"
            case stepNow = "StepNow"
            case masterSlaveDistance = "MasterSlaveDistance"
            case secondsBehindMaster = "SecondsBehindMaster"
            case stepInfo = "StepInfo"
        }
    }

    /// 迁移选项，描述任务如何执行迁移等一系列配置信息
    public struct MigrateOption: TCInputModel, TCOutputModel {
        /// 迁移对象选项，需要告知迁移服务迁移哪些库表对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseTable: DatabaseTableObject?

        /// 迁移类型，full(全量迁移)，structure(结构迁移)，fullAndIncrement(全量加增量迁移)， 默认为fullAndIncrement
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let migrateType: String?

        /// 数据一致性校验选项， 默认为不开启一致性校验
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let consistency: ConsistencyOption?

        /// 是否迁移账号，yes(迁移账号)，no(不迁移账号)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isMigrateAccount: Bool?

        /// 是否用源库Root账户覆盖目标库，值包括：false-不覆盖，true-覆盖，选择库表或者结构迁移时应该为false，注意只对旧版迁移有效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOverrideRoot: Bool?

        /// 是否在迁移时设置目标库只读(仅对mysql有效)，true(设置只读)、false(不设置只读，默认此值)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDstReadOnly: Bool?

        /// 其他附加信息，对于特定库可设置额外参数，Redis可定义如下的参数:
        /// ["DstWriteMode":normal, 	目标库写入模式,可取值clearData(清空目标实例数据)、overwrite(以覆盖写的方式执行任务)、normal(跟正常流程一样，不做额外动作) 	"IsDstReadOnly":true, 	是否在迁移时设置目标库只读,true(设置只读)、false(不设置只读) 	"ClientOutputBufferHardLimit":512, 	从机缓冲区的硬性容量限制(MB) 	"ClientOutputBufferSoftLimit":512, 	从机缓冲区的软性容量限制(MB) 	"ClientOutputBufferPersistTime":60, 从机缓冲区的软性限制持续时间(秒) 	"ReplBacklogSize":512, 	环形缓冲区容量限制(MB) 	"ReplTimeout":120，		复制超时时间(秒) ]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extraAttr: [KeyValuePairOption]?

        public init(databaseTable: DatabaseTableObject, migrateType: String? = nil, consistency: ConsistencyOption? = nil, isMigrateAccount: Bool? = nil, isOverrideRoot: Bool? = nil, isDstReadOnly: Bool? = nil, extraAttr: [KeyValuePairOption]? = nil) {
            self.databaseTable = databaseTable
            self.migrateType = migrateType
            self.consistency = consistency
            self.isMigrateAccount = isMigrateAccount
            self.isOverrideRoot = isOverrideRoot
            self.isDstReadOnly = isDstReadOnly
            self.extraAttr = extraAttr
        }

        enum CodingKeys: String, CodingKey {
            case databaseTable = "DatabaseTable"
            case migrateType = "MigrateType"
            case consistency = "Consistency"
            case isMigrateAccount = "IsMigrateAccount"
            case isOverrideRoot = "IsOverrideRoot"
            case isDstReadOnly = "IsDstReadOnly"
            case extraAttr = "ExtraAttr"
        }
    }

    /// 同步的数据库对对象描述
    public struct Objects: TCInputModel, TCOutputModel {
        /// 同步对象类型 Partial(部分对象)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mode: String?

        /// 同步对象，当 Mode 为 Partial 时，不为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databases: [Database]?

        /// 高级对象类型，如function、procedure，当需要同步高级对象时，初始化类型必须包含结构初始化类型，即任务的Options.InitType字段值为Structure或Full
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advancedObjects: [String]?

        /// OnlineDDL类型，冗余字段不做配置用途
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let onlineDDL: OnlineDDL?

        public init(mode: String? = nil, databases: [Database]? = nil, advancedObjects: [String]? = nil, onlineDDL: OnlineDDL? = nil) {
            self.mode = mode
            self.databases = databases
            self.advancedObjects = advancedObjects
            self.onlineDDL = onlineDDL
        }

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case databases = "Databases"
            case advancedObjects = "AdvancedObjects"
            case onlineDDL = "OnlineDDL"
        }
    }

    /// OnlineDDL类型
    public struct OnlineDDL: TCOutputModel {
        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    /// 数据同步中的选项
    public struct Options: TCInputModel, TCOutputModel {
        /// 同步初始化选项，Data(全量数据初始化)、Structure(结构初始化)、Full(全量数据且结构初始化，默认)、None(仅增量)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let initType: String?

        /// 同名表的处理，ReportErrorAfterCheck(前置校验并报错，默认)、InitializeAfterDelete(删除并重新初始化)、ExecuteAfterIgnore(忽略并继续执行)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dealOfExistSameTable: String?

        /// 冲突处理选项，ReportError(报错，默认为该值)、Ignore(忽略)、Cover(覆盖)、ConditionCover(条件覆盖)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conflictHandleType: String?

        /// 是否添加附加列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addAdditionalColumn: Bool?

        /// 所要同步的DML和DDL的选项，Insert(插入操作)、Update(更新操作)、Delete(删除操作)、DDL(结构同步)， 不填（不选），PartialDDL(自定义,和DdlOptions一起起作用 )
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let opTypes: [String]?

        /// 冲突处理的详细选项，如条件覆盖中的条件行和条件操作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conflictHandleOption: ConflictHandleOption?

        /// DDL同步选项，具体描述要同步那些DDL
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ddlOptions: [DdlOption]?

        /// kafka同步选项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kafkaOption: KafkaOption?

        public init(initType: String? = nil, dealOfExistSameTable: String? = nil, conflictHandleType: String? = nil, addAdditionalColumn: Bool? = nil, opTypes: [String]? = nil, conflictHandleOption: ConflictHandleOption? = nil, ddlOptions: [DdlOption]? = nil, kafkaOption: KafkaOption? = nil) {
            self.initType = initType
            self.dealOfExistSameTable = dealOfExistSameTable
            self.conflictHandleType = conflictHandleType
            self.addAdditionalColumn = addAdditionalColumn
            self.opTypes = opTypes
            self.conflictHandleOption = conflictHandleOption
            self.ddlOptions = ddlOptions
            self.kafkaOption = kafkaOption
        }

        enum CodingKeys: String, CodingKey {
            case initType = "InitType"
            case dealOfExistSameTable = "DealOfExistSameTable"
            case conflictHandleType = "ConflictHandleType"
            case addAdditionalColumn = "AddAdditionalColumn"
            case opTypes = "OpTypes"
            case conflictHandleOption = "ConflictHandleOption"
            case ddlOptions = "DdlOptions"
            case kafkaOption = "KafkaOption"
        }
    }

    /// 任务步骤信息
    public struct ProcessProgress: TCOutputModel {
        /// 步骤的状态， 包括：notStarted(未开始)、running(运行中)、success(成功)、failed(失败)等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 进度信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let percent: UInt64?

        /// 总的步骤数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepAll: UInt64?

        /// 当前进行的步骤
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepNow: UInt64?

        /// 当前步骤输出提示信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 步骤信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let steps: [StepDetailInfo]?

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case percent = "Percent"
            case stepAll = "StepAll"
            case stepNow = "StepNow"
            case message = "Message"
            case steps = "Steps"
        }
    }

    /// 错误信息及告警信息对象
    public struct ProcessStepTip: TCOutputModel {
        /// 提示信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 解决方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let solution: String?

        /// 文档提示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let helpDoc: String?

        enum CodingKeys: String, CodingKey {
            case message = "Message"
            case solution = "Solution"
            case helpDoc = "HelpDoc"
        }
    }

    /// 角色对象，postgresql独有参数
    public struct RoleItem: TCInputModel, TCOutputModel {
        /// 角色名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleName: String?

        /// 迁移后的角色名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newRoleName: String?

        public init(roleName: String? = nil, newRoleName: String? = nil) {
            self.roleName = roleName
            self.newRoleName = newRoleName
        }

        enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
            case newRoleName = "NewRoleName"
        }
    }

    /// 跳过校验的表详情
    public struct SkippedDetail: TCOutputModel {
        /// 跳过的表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 跳过校验的表详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [SkippedItem]?

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
        }
    }

    /// 跳过校验的表详情
    public struct SkippedItem: TCOutputModel {
        /// 数据库名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let db: String?

        /// 表名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let table: String?

        /// 未发起检查的原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reason: String?

        enum CodingKeys: String, CodingKey {
            case db = "Db"
            case table = "Table"
            case reason = "Reason"
        }
    }

    /// 步骤信息
    public struct StepDetailInfo: TCOutputModel {
        /// 步骤序列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepNo: UInt64?

        /// 步骤展现名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepName: String?

        /// 步骤英文标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepId: String?

        /// 步骤状态:success(成功)、failed(失败)、running(执行中)、notStarted(未执行)、默认为notStarted
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 当前步骤开始的时间，格式为"yyyy-mm-dd hh:mm:ss"，该字段不存在或者为空是无意义 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 步骤错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepMessage: String?

        /// 执行进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let percent: UInt64?

        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errors: [ProcessStepTip]?

        /// 告警提示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warnings: [ProcessStepTip]?

        enum CodingKeys: String, CodingKey {
            case stepNo = "StepNo"
            case stepName = "StepName"
            case stepId = "StepId"
            case status = "Status"
            case startTime = "StartTime"
            case stepMessage = "StepMessage"
            case percent = "Percent"
            case errors = "Errors"
            case warnings = "Warnings"
        }
    }

    /// 单个步骤的详细信息
    public struct StepInfo: TCInputModel, TCOutputModel {
        /// 步骤编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepNo: UInt64?

        /// 步骤名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepName: String?

        /// 步骤标号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepId: String?

        /// 当前步骤状态,可能返回有 notStarted(未开始)、running(校验中)、failed(校验任务失败)、finished(完成)、skipped(跳过)、paused(暂停)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 步骤开始时间，可能为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errors: [StepTip]?

        /// 警告信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warnings: [StepTip]?

        /// 当前步骤进度，范围为[0-100]，若为-1表示当前步骤不支持查看进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progress: Int64?

        public init(stepNo: UInt64? = nil, stepName: String? = nil, stepId: String? = nil, status: String? = nil, startTime: String? = nil, errors: [StepTip]? = nil, warnings: [StepTip]? = nil, progress: Int64? = nil) {
            self.stepNo = stepNo
            self.stepName = stepName
            self.stepId = stepId
            self.status = status
            self.startTime = startTime
            self.errors = errors
            self.warnings = warnings
            self.progress = progress
        }

        enum CodingKeys: String, CodingKey {
            case stepNo = "StepNo"
            case stepName = "StepName"
            case stepId = "StepId"
            case status = "Status"
            case startTime = "StartTime"
            case errors = "Errors"
            case warnings = "Warnings"
            case progress = "Progress"
        }
    }

    /// 当前步骤错误信息或者警告信息
    public struct StepTip: TCInputModel, TCOutputModel {
        /// 错误码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let code: String?

        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 解决方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let solution: String?

        /// 帮助文档
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let helpDoc: String?

        /// 当前步骤跳过信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let skipInfo: String?

        public init(code: String? = nil, message: String? = nil, solution: String? = nil, helpDoc: String? = nil, skipInfo: String? = nil) {
            self.code = code
            self.message = message
            self.solution = solution
            self.helpDoc = helpDoc
            self.skipInfo = skipInfo
        }

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
            case solution = "Solution"
            case helpDoc = "HelpDoc"
            case skipInfo = "SkipInfo"
        }
    }

    /// 数据同步配置多节点数据库的节点信息。多节点数据库，如tdsqlmysql使用该结构；单节点数据库，如mysql使用Endpoint。
    public struct SyncDBEndpointInfos: TCInputModel, TCOutputModel {
        /// 数据库所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 实例网络接入类型，如：extranet(外网)、ipv6(公网ipv6)、cvm(云主机自建)、dcg(专线接入)、vpncloud(vpn接入的实例)、cdb(云数据库)、ccn(云联网)、intranet(自研上云)、vpc(私有网络)等，注意具体可选值依赖当前链路
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessType: String?

        /// 实例数据库类型，如：mysql,redis,mongodb,postgresql,mariadb,percona 等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let databaseType: String?

        /// 数据库信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let info: [Endpoint]?

        public init(region: String, accessType: String, databaseType: String, info: [Endpoint]) {
            self.region = region
            self.accessType = accessType
            self.databaseType = databaseType
            self.info = info
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case accessType = "AccessType"
            case databaseType = "DatabaseType"
            case info = "Info"
        }
    }

    /// 同步任务的步骤信息
    public struct SyncDetailInfo: TCOutputModel {
        /// 总步骤数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepAll: UInt64?

        /// 当前步骤
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepNow: UInt64?

        /// 总体进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progress: Int64?

        /// 当前步骤进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentStepProgress: Int64?

        /// 同步两端数据量差距
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterSlaveDistance: Int64?

        /// 同步两端时间差距
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let secondsBehindMaster: Int64?

        /// 总体描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 详细步骤信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stepInfos: [StepInfo]?

        /// 不能发起一致性校验的原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let causeOfCompareDisable: String?

        enum CodingKeys: String, CodingKey {
            case stepAll = "StepAll"
            case stepNow = "StepNow"
            case progress = "Progress"
            case currentStepProgress = "CurrentStepProgress"
            case masterSlaveDistance = "MasterSlaveDistance"
            case secondsBehindMaster = "SecondsBehindMaster"
            case message = "Message"
            case stepInfos = "StepInfos"
            case causeOfCompareDisable = "CauseOfCompareDisable"
        }
    }

    /// 同步任务信息
    public struct SyncJobInfo: TCOutputModel {
        /// 同步任务id，如：sync-btso140
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobId: String?

        /// 同步任务名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobName: String?

        /// 付款方式，PostPay(按量付费)、PrePay(包年包月)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: String?

        /// 运行模式，Immediate(表示立即运行，默认为此项值)、Timed(表示定时运行)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runMode: String?

        /// 期待运行时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expectRunTime: String?

        /// 支持的所有操作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let allActions: [String]?

        /// 当前状态能进行的操作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let actions: [String]?

        /// 同步选项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let options: Options?

        /// 同步库表对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objects: Objects?

        /// 任务规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specification: String?

        /// 过期时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 源端地域，如：ap-guangzhou等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcRegion: String?

        /// 源端数据库类型，mysql,cynosdbmysql,tdapg,tdpg,tdsqlmysql等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcDatabaseType: String?

        /// 源端接入类型，cdb(云数据库)、cvm(云主机自建)、vpc(私有网络)、extranet(外网)、vpncloud(vpn接入)、dcg(专线接入)、ccn(云联网)、intranet(自研上云)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcAccessType: String?

        /// 源端信息，单节点数据库使用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcInfo: Endpoint?

        /// 目标端地域，如：ap-guangzhou等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstRegion: String?

        /// 目标端数据库类型，mysql,cynosdbmysql,tdapg,tdpg,tdsqlmysql等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstDatabaseType: String?

        /// 目标端接入类型，cdb(云数据库)、cvm(云主机自建)、vpc(私有网络)、extranet(外网)、vpncloud(vpn接入)、dcg(专线接入)、ccn(云联网)、intranet(自研上云)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstAccessType: String?

        /// 目标端信息，单节点数据库使用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstInfo: Endpoint?

        /// 创建时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 开始时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 任务状态，UnInitialized(未初始化)、Initialized(已初始化)、Checking(校验中)、CheckPass(校验通过)、CheckNotPass(校验不通过)、ReadyRunning(准备运行)、Running(运行中)、Pausing(暂停中)、Paused(已暂停)、Stopping(停止中)、Stopped(已结束)、ResumableErr(任务错误)、Resuming(恢复中)、Failed(失败)、Released(已释放)、Resetting(重置中)、Unknown(未知)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 结束时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 标签相关信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [TagItem]?

        /// 同步任务运行步骤信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: SyncDetailInfo?

        /// 用于计费的状态，可能取值有：Normal(正常状态)、Resizing(变配中)、Renewing(续费中)、Isolating(隔离中)、Isolated(已隔离)、Offlining(下线中)、Offlined(已下线)、NotBilled(未计费)、Recovering(解隔离)、PostPay2Prepaying(按量计费转包年包月中)、PrePay2Postpaying(包年包月转按量计费中)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tradeStatus: String?

        /// 同步链路规格，如micro,small,medium,large
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceClass: String?

        /// 自动续费标识，当PayMode值为PrePay则此项配置有意义，取值为：1（表示自动续费）、0（不自动续费）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenew: UInt64?

        /// 下线时间，格式为 yyyy-mm-dd hh:mm:ss
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let offlineTime: String?

        /// 自动重试时间段设置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRetryTimeRangeMinutes: Int64?

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case jobName = "JobName"
            case payMode = "PayMode"
            case runMode = "RunMode"
            case expectRunTime = "ExpectRunTime"
            case allActions = "AllActions"
            case actions = "Actions"
            case options = "Options"
            case objects = "Objects"
            case specification = "Specification"
            case expireTime = "ExpireTime"
            case srcRegion = "SrcRegion"
            case srcDatabaseType = "SrcDatabaseType"
            case srcAccessType = "SrcAccessType"
            case srcInfo = "SrcInfo"
            case dstRegion = "DstRegion"
            case dstDatabaseType = "DstDatabaseType"
            case dstAccessType = "DstAccessType"
            case dstInfo = "DstInfo"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case status = "Status"
            case endTime = "EndTime"
            case tags = "Tags"
            case detail = "Detail"
            case tradeStatus = "TradeStatus"
            case instanceClass = "InstanceClass"
            case autoRenew = "AutoRenew"
            case offlineTime = "OfflineTime"
            case autoRetryTimeRangeMinutes = "AutoRetryTimeRangeMinutes"
        }
    }

    /// 数据同步库表信息描述
    public struct Table: TCInputModel, TCOutputModel {
        /// 表名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableName: String?

        /// 新表名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newTableName: String?

        /// 过滤条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let filterCondition: String?

        /// 同步临时表，注意此配置与NewTableName互斥，只能使用其中一种。当配置的同步对象为表级别且TableEditMode为pt时此项有意义，针对pt-osc等工具在同步过程中产生的临时表进行同步，需要提前将可能的临时表配置在这里，否则不会同步任何临时表。示例，如要对t1进行pt-osc操作，此项配置应该为["\_t1\_new","\_t1\_old"]；如要对t1进行gh-ost操作，此项配置应该为["\_t1\_ghc","\_t1\_gho","\_t1\_del"]，pt-osc与gh-ost产生的临时表可同时配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpTables: [String]?

        /// 编辑表类型，rename(表映射)，pt(同步附加表)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableEditMode: String?

        public init(tableName: String? = nil, newTableName: String? = nil, filterCondition: String? = nil, tmpTables: [String]? = nil, tableEditMode: String? = nil) {
            self.tableName = tableName
            self.newTableName = newTableName
            self.filterCondition = filterCondition
            self.tmpTables = tmpTables
            self.tableEditMode = tableEditMode
        }

        enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
            case newTableName = "NewTableName"
            case filterCondition = "FilterCondition"
            case tmpTables = "TmpTables"
            case tableEditMode = "TableEditMode"
        }
    }

    /// 表对象集合，当 TableMode 为 partial 时，此项需要填写
    public struct TableItem: TCInputModel, TCOutputModel {
        /// 迁移的表名，大小写敏感
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableName: String?

        /// 迁移后的表名，当TableEditMode为rename时此项必填，注意此配置与TmpTables互斥，只能使用其中一种
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newTableName: String?

        /// 迁移临时表，注意此配置与NewTableName互斥，只能使用其中一种。当配置的同步对象为表级别且TableEditMode为pt时此项有意义，针对pt-osc等工具在迁移过程中产生的临时表进行同步，需要提前将可能的临时表配置在这里，否则不会同步任何临时表。示例，如要对t1进行pt-osc操作，此项配置应该为["\_t1\_new","\_t1\_old"]；如要对t1进行gh-ost操作，此项配置应该为["\_t1\_ghc","\_t1\_gho","\_t1\_del"]，pt-osc与gh-ost产生的临时表可同时配置。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tmpTables: [String]?

        /// 编辑表类型，rename(表映射)，pt(同步附加表)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableEditMode: String?

        public init(tableName: String? = nil, newTableName: String? = nil, tmpTables: [String]? = nil, tableEditMode: String? = nil) {
            self.tableName = tableName
            self.newTableName = newTableName
            self.tmpTables = tmpTables
            self.tableEditMode = tableEditMode
        }

        enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
            case newTableName = "NewTableName"
            case tmpTables = "TmpTables"
            case tableEditMode = "TableEditMode"
        }
    }

    /// 标签过滤
    public struct TagFilter: TCInputModel {
        /// 标签键值
        public let tagKey: String

        /// 标签值
        public let tagValue: [String]?

        public init(tagKey: String, tagValue: [String]? = nil) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 标签
    public struct TagItem: TCInputModel, TCOutputModel {
        /// 标签键
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagKey: String?

        /// 标签值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagValue: String?

        public init(tagKey: String? = nil, tagValue: String? = nil) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 单topic和自定义topic的描述
    public struct TopicRule: TCInputModel, TCOutputModel {
        /// topic名
        public let topicName: String?

        /// topic分区策略，如 自定义topic：Random（随机投递），集中投递到单Topic：AllInPartitionZero（全部投递至partition0）、PartitionByTable(按表名分区)、PartitionByTableAndKey(按表名加主键分区)
        public let partitionType: String?

        /// 库名匹配规则，仅“自定义topic”生效，如Regular（正则匹配）, Default(不符合匹配规则的剩余库)，数组中必须有一项为‘Default’
        public let dbMatchMode: String?

        /// 库名，仅“自定义topic”时，DbMatchMode=Regular生效
        public let dbName: String?

        /// 表名匹配规则，仅“自定义topic”生效，如Regular（正则匹配）, Default(不符合匹配规则的剩余表)，数组中必须有一项为‘Default’
        public let tableMatchMode: String?

        /// 表名，仅“自定义topic”时，TableMatchMode=Regular生效
        public let tableName: String?

        public init(topicName: String? = nil, partitionType: String? = nil, dbMatchMode: String? = nil, dbName: String? = nil, tableMatchMode: String? = nil, tableName: String? = nil) {
            self.topicName = topicName
            self.partitionType = partitionType
            self.dbMatchMode = dbMatchMode
            self.dbName = dbName
            self.tableMatchMode = tableMatchMode
            self.tableName = tableName
        }

        enum CodingKeys: String, CodingKey {
            case topicName = "TopicName"
            case partitionType = "PartitionType"
            case dbMatchMode = "DbMatchMode"
            case dbName = "DbName"
            case tableMatchMode = "TableMatchMode"
            case tableName = "TableName"
        }
    }

    /// 计费状态信息
    public struct TradeInfo: TCOutputModel {
        /// 交易订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dealName: String?

        /// 上一次交易订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastDealName: String?

        /// 实例规格，包括：micro、small、medium、large、xlarge、2xlarge等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceClass: String?

        /// 计费任务状态， normal(计费或待计费)、resizing(变配中)、reversing(冲正中，比较短暂的状态)、isolating(隔离中，比较短暂的状态)、isolated(已隔离)、offlining(下线中)、offlined(已下线)、notBilled(未计费)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tradeStatus: String?

        /// 到期时间，格式为"yyyy-mm-dd hh:mm:ss"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 下线时间，格式为"yyyy-mm-dd hh:mm:ss"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let offlineTime: String?

        /// 隔离时间，格式为"yyyy-mm-dd hh:mm:ss"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolateTime: String?

        /// 下线原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let offlineReason: String?

        /// 隔离原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolateReason: String?

        /// 付费类型，包括：postpay(后付费)、prepay(预付费)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payType: String?

        /// 任务计费类型，包括：billing(计费)、notBilling(不计费)、 promotions(促销活动中)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingType: String?

        enum CodingKeys: String, CodingKey {
            case dealName = "DealName"
            case lastDealName = "LastDealName"
            case instanceClass = "InstanceClass"
            case tradeStatus = "TradeStatus"
            case expireTime = "ExpireTime"
            case offlineTime = "OfflineTime"
            case isolateTime = "IsolateTime"
            case offlineReason = "OfflineReason"
            case isolateReason = "IsolateReason"
            case payType = "PayType"
            case billingType = "BillingType"
        }
    }

    /// 数据同步view的描述
    public struct View: TCInputModel, TCOutputModel {
        /// view名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewName: String?

        /// 预留字段、目前暂时不支持view的重命名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newViewName: String?

        public init(viewName: String? = nil, newViewName: String? = nil) {
            self.viewName = viewName
            self.newViewName = newViewName
        }

        enum CodingKeys: String, CodingKey {
            case viewName = "ViewName"
            case newViewName = "NewViewName"
        }
    }

    /// 视图对象
    public struct ViewItem: TCInputModel, TCOutputModel {
        /// 视图名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let viewName: String?

        /// 迁移后的视图名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newViewName: String?

        public init(viewName: String? = nil, newViewName: String? = nil) {
            self.viewName = viewName
            self.newViewName = newViewName
        }

        enum CodingKeys: String, CodingKey {
            case viewName = "ViewName"
            case newViewName = "NewViewName"
        }
    }
}
