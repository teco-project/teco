//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dts {
    /// CreateMigrateCheckJob请求参数结构体
    public struct CreateMigrateCheckJobRequest: TCRequestModel {
        /// 数据迁移任务ID
        public let jobId: String
        
        public init (jobId: String) {
            self.jobId = jobId
        }
        
        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }
    
    /// CreateMigrateCheckJob返回参数结构体
    public struct CreateMigrateCheckJobResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 创建校验迁移任务
    ///
    /// 创建校验迁移任务
    /// 在开始迁移前, 必须调用本接口创建校验, 且校验成功后才能开始迁移. 校验的结果可以通过DescribeMigrateCheckJob查看.
    /// 校验成功后,迁移任务若有修改, 则必须重新创建校验并通过后, 才能开始迁移.
    /// 如果是金融区链路, 请使用域名: https://dts.ap-shenzhen-fsi.tencentcloudapi.com
    @inlinable
    public func createMigrateCheckJob(_ input: CreateMigrateCheckJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateMigrateCheckJobResponse > {
        self.client.execute(action: "CreateMigrateCheckJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建校验迁移任务
    ///
    /// 创建校验迁移任务
    /// 在开始迁移前, 必须调用本接口创建校验, 且校验成功后才能开始迁移. 校验的结果可以通过DescribeMigrateCheckJob查看.
    /// 校验成功后,迁移任务若有修改, 则必须重新创建校验并通过后, 才能开始迁移.
    /// 如果是金融区链路, 请使用域名: https://dts.ap-shenzhen-fsi.tencentcloudapi.com
    @inlinable
    public func createMigrateCheckJob(_ input: CreateMigrateCheckJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateMigrateCheckJobResponse {
        try await self.client.execute(action: "CreateMigrateCheckJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
