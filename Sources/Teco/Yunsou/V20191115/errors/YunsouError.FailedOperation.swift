//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCYunsouError {
    public struct FailedOperation: TCYunsouErrorType {
        enum Code: String {
            case accountInfo = "FailedOperation.AccountInfo"
            case appInfo = "FailedOperation.AppInfo"
            case search = "FailedOperation.Search"
            case uploadDataApiFail = "FailedOperation.UploadDataApiFail"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 查询用户信息失败。
        public static var accountInfo: FailedOperation {
            FailedOperation(.accountInfo)
        }

        /// 查询应用信息失败。
        public static var appInfo: FailedOperation {
            FailedOperation(.appInfo)
        }

        /// 搜索接口异常。
        public static var search: FailedOperation {
            FailedOperation(.search)
        }

        /// 数据上传异常。
        public static var uploadDataApiFail: FailedOperation {
            FailedOperation(.uploadDataApiFail)
        }

        public func asYunsouError() -> TCYunsouError {
            let code: TCYunsouError.Code
            switch self.error {
            case .accountInfo:
                code = .failedOperation_AccountInfo
            case .appInfo:
                code = .failedOperation_AppInfo
            case .search:
                code = .failedOperation_Search
            case .uploadDataApiFail:
                code = .failedOperation_UploadDataApiFail
            }
            return TCYunsouError(code, context: self.context)
        }
    }
}
