//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCSmhError {
    public struct InternalError: TCSmhErrorType {
        enum Code: String {
            case balanceLess = "InternalError.BalanceLess"
            case modifyResourceStatusFail = "InternalError.ModifyResourceStatusFail"
            case postpaidFail = "InternalError.PostpaidFail"
            case sendSms = "InternalError.SendSms"
            case other = "InternalError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var balanceLess: InternalError {
            InternalError(.balanceLess)
        }

        public static var modifyResourceStatusFail: InternalError {
            InternalError(.modifyResourceStatusFail)
        }

        public static var postpaidFail: InternalError {
            InternalError(.postpaidFail)
        }

        /// 发送短信验证码时发生错误。
        public static var sendSms: InternalError {
            InternalError(.sendSms)
        }

        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }

        public func asSmhError() -> TCSmhError {
            let code: TCSmhError.Code
            switch self.error {
            case .balanceLess:
                code = .internalError_BalanceLess
            case .modifyResourceStatusFail:
                code = .internalError_ModifyResourceStatusFail
            case .postpaidFail:
                code = .internalError_PostpaidFail
            case .sendSms:
                code = .internalError_SendSms
            case .other:
                code = .internalError
            }
            return TCSmhError(code, context: self.context)
        }
    }
}
