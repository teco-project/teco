//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSmhError {
    public struct UnauthorizedOperation: TCErrorType {
        enum Code: String {
            case createMediaBucket = "UnauthorizedOperation.CreateMediaBucket"
            case passRole = "UnauthorizedOperation.PassRole"
            case serviceLinkedRole = "UnauthorizedOperation.ServiceLinkedRole"
            case smsCode = "UnauthorizedOperation.SmsCode"
            case smsCodeExceeded = "UnauthorizedOperation.SmsCodeExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var createMediaBucket: UnauthorizedOperation {
            UnauthorizedOperation(.createMediaBucket)
        }
        
        /// 未授予 cam:PassRole 权限。
        public static var passRole: UnauthorizedOperation {
            UnauthorizedOperation(.passRole)
        }
        
        /// 未授予 SMH 服务相关角色。
        public static var serviceLinkedRole: UnauthorizedOperation {
            UnauthorizedOperation(.serviceLinkedRole)
        }
        
        /// 短信验证码错误或已过期。
        public static var smsCode: UnauthorizedOperation {
            UnauthorizedOperation(.smsCode)
        }
        
        /// 短信验证码验证次数超限，请重新发送短信验证码。
        public static var smsCodeExceeded: UnauthorizedOperation {
            UnauthorizedOperation(.smsCodeExceeded)
        }
    }
}

extension TCSmhError.UnauthorizedOperation: Equatable {
    public static func == (lhs: TCSmhError.UnauthorizedOperation, rhs: TCSmhError.UnauthorizedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCSmhError.UnauthorizedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCSmhError.UnauthorizedOperation {
    /// - Returns: ``TCSmhError`` that holds the same error and context.
    public func toSmhError() -> TCSmhError {
        guard let code = TCSmhError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCSmhError(code, context: self.context)
    }
}

extension TCSmhError.UnauthorizedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
