//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSmhError {
    public struct ResourceInUse: TCSmhErrorType {
        enum Code: String {
            case multiSpace = "ResourceInUse.MultiSpace"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 多租户空间媒体库中存在正在使用的租户空间。
        ///
        /// 在删除多租户空间媒体库时，需首先删除该媒体库下的全部租户空间。
        public static var multiSpace: ResourceInUse {
            ResourceInUse(.multiSpace)
        }

        public func asSmhError() -> TCSmhError {
            let code: TCSmhError.Code
            switch self.error {
            case .multiSpace:
                code = .resourceInUse_MultiSpace
            }
            return TCSmhError(code, context: self.context)
        }
    }
}
