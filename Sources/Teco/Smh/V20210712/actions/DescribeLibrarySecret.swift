//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Smh {
    /// DescribeLibrarySecret请求参数结构体
    public struct DescribeLibrarySecretRequest: TCRequestModel {
        /// 媒体库 ID
        public let libraryId: String

        public init(libraryId: String) {
            self.libraryId = libraryId
        }

        enum CodingKeys: String, CodingKey {
            case libraryId = "LibraryId"
        }
    }

    /// DescribeLibrarySecret返回参数结构体
    public struct DescribeLibrarySecretResponse: TCResponseModel {
        /// 查询的媒体库 ID
        public let libraryId: String

        /// 查询到的媒体库密钥
        public let librarySecret: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case libraryId = "LibraryId"
            case librarySecret = "LibrarySecret"
            case requestId = "RequestId"
        }
    }

    /// 查询媒体库密钥
    ///
    /// 查询 PaaS 服务媒体库密钥
    @inlinable
    public func describeLibrarySecret(_ input: DescribeLibrarySecretRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLibrarySecretResponse> {
        self.client.execute(action: "DescribeLibrarySecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询媒体库密钥
    ///
    /// 查询 PaaS 服务媒体库密钥
    @inlinable
    public func describeLibrarySecret(_ input: DescribeLibrarySecretRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLibrarySecretResponse {
        try await self.client.execute(action: "DescribeLibrarySecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询媒体库密钥
    ///
    /// 查询 PaaS 服务媒体库密钥
    @inlinable
    public func describeLibrarySecret(libraryId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLibrarySecretResponse> {
        let input = DescribeLibrarySecretRequest(libraryId: libraryId)
        return self.client.execute(action: "DescribeLibrarySecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询媒体库密钥
    ///
    /// 查询 PaaS 服务媒体库密钥
    @inlinable
    public func describeLibrarySecret(libraryId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLibrarySecretResponse {
        let input = DescribeLibrarySecretRequest(libraryId: libraryId)
        return try await self.client.execute(action: "DescribeLibrarySecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
