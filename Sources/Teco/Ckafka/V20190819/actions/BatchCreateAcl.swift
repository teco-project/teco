//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ckafka {
    /// BatchCreateAcl请求参数结构体
    public struct BatchCreateAclRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// Acl资源类型，(2:TOPIC）
        public let resourceType: Int64

        /// 资源列表数组
        public let resourceNames: [String]

        /// 设置的ACL规则列表
        public let ruleList: [AclRuleInfo]

        public init(instanceId: String, resourceType: Int64, resourceNames: [String], ruleList: [AclRuleInfo]) {
            self.instanceId = instanceId
            self.resourceType = resourceType
            self.resourceNames = resourceNames
            self.ruleList = ruleList
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case resourceType = "ResourceType"
            case resourceNames = "ResourceNames"
            case ruleList = "RuleList"
        }
    }

    /// BatchCreateAcl返回参数结构体
    public struct BatchCreateAclResponse: TCResponseModel {
        /// 状态码
        public let result: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 批量添加 ACL 策略
    ///
    /// 批量添加ACL策略
    @inlinable
    public func batchCreateAcl(_ input: BatchCreateAclRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchCreateAclResponse> {
        self.client.execute(action: "BatchCreateAcl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量添加 ACL 策略
    ///
    /// 批量添加ACL策略
    @inlinable
    public func batchCreateAcl(_ input: BatchCreateAclRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchCreateAclResponse {
        try await self.client.execute(action: "BatchCreateAcl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量添加 ACL 策略
    ///
    /// 批量添加ACL策略
    @inlinable
    public func batchCreateAcl(instanceId: String, resourceType: Int64, resourceNames: [String], ruleList: [AclRuleInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchCreateAclResponse> {
        self.batchCreateAcl(.init(instanceId: instanceId, resourceType: resourceType, resourceNames: resourceNames, ruleList: ruleList), region: region, logger: logger, on: eventLoop)
    }

    /// 批量添加 ACL 策略
    ///
    /// 批量添加ACL策略
    @inlinable
    public func batchCreateAcl(instanceId: String, resourceType: Int64, resourceNames: [String], ruleList: [AclRuleInfo], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchCreateAclResponse {
        try await self.batchCreateAcl(.init(instanceId: instanceId, resourceType: resourceType, resourceNames: resourceNames, ruleList: ruleList), region: region, logger: logger, on: eventLoop)
    }
}
