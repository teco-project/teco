//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ckafka {
    /// DescribeTopicProduceConnection请求参数结构体
    public struct DescribeTopicProduceConnectionRequest: TCRequestModel {
        /// 实例id
        public let instanceId: String

        /// topic名称
        public let topicName: String

        public init(instanceId: String, topicName: String) {
            self.instanceId = instanceId
            self.topicName = topicName
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case topicName = "TopicName"
        }
    }

    /// DescribeTopicProduceConnection返回参数结构体
    public struct DescribeTopicProduceConnectionResponse: TCResponseModel {
        /// 链接信息返回结果集
        public let result: [DescribeConnectInfoResultDTO]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 查询topic生产端连接信息
    ///
    /// 查询topic 生产端连接信息
    @inlinable
    public func describeTopicProduceConnection(_ input: DescribeTopicProduceConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTopicProduceConnectionResponse> {
        self.client.execute(action: "DescribeTopicProduceConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询topic生产端连接信息
    ///
    /// 查询topic 生产端连接信息
    @inlinable
    public func describeTopicProduceConnection(_ input: DescribeTopicProduceConnectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTopicProduceConnectionResponse {
        try await self.client.execute(action: "DescribeTopicProduceConnection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询topic生产端连接信息
    ///
    /// 查询topic 生产端连接信息
    @inlinable
    public func describeTopicProduceConnection(instanceId: String, topicName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTopicProduceConnectionResponse> {
        self.describeTopicProduceConnection(.init(instanceId: instanceId, topicName: topicName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询topic生产端连接信息
    ///
    /// 查询topic 生产端连接信息
    @inlinable
    public func describeTopicProduceConnection(instanceId: String, topicName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTopicProduceConnectionResponse {
        try await self.describeTopicProduceConnection(.init(instanceId: instanceId, topicName: topicName), region: region, logger: logger, on: eventLoop)
    }
}
