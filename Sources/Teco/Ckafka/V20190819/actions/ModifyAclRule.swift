//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ckafka {
    /// ModifyAclRule请求参数结构体
    public struct ModifyAclRuleRequest: TCRequest {
        /// 实例Id
        public let instanceId: String

        /// ACL策略名
        public let ruleName: String

        /// 是否应用到新增的Topic
        public let isApplied: Int64

        public init(instanceId: String, ruleName: String, isApplied: Int64) {
            self.instanceId = instanceId
            self.ruleName = ruleName
            self.isApplied = isApplied
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case ruleName = "RuleName"
            case isApplied = "IsApplied"
        }
    }

    /// ModifyAclRule返回参数结构体
    public struct ModifyAclRuleResponse: TCResponse {
        /// 规则的唯一表示Key
        public let result: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 修改Acl策略
    ///
    /// 修改AC策略，目前只支持预设规则的是否应用到新增topic这一项的修改
    @inlinable
    public func modifyAclRule(_ input: ModifyAclRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAclRuleResponse> {
        self.client.execute(action: "ModifyAclRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改Acl策略
    ///
    /// 修改AC策略，目前只支持预设规则的是否应用到新增topic这一项的修改
    @inlinable
    public func modifyAclRule(_ input: ModifyAclRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAclRuleResponse {
        try await self.client.execute(action: "ModifyAclRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改Acl策略
    ///
    /// 修改AC策略，目前只支持预设规则的是否应用到新增topic这一项的修改
    @inlinable
    public func modifyAclRule(instanceId: String, ruleName: String, isApplied: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAclRuleResponse> {
        self.modifyAclRule(.init(instanceId: instanceId, ruleName: ruleName, isApplied: isApplied), region: region, logger: logger, on: eventLoop)
    }

    /// 修改Acl策略
    ///
    /// 修改AC策略，目前只支持预设规则的是否应用到新增topic这一项的修改
    @inlinable
    public func modifyAclRule(instanceId: String, ruleName: String, isApplied: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAclRuleResponse {
        try await self.modifyAclRule(.init(instanceId: instanceId, ruleName: ruleName, isApplied: isApplied), region: region, logger: logger, on: eventLoop)
    }
}
