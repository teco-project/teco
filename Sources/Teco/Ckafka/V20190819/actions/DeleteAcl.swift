//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ckafka {
    /// 删除ACL
    @inlinable
    public func deleteAcl(_ input: DeleteAclRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteAclResponse > {
        self.client.execute(action: "DeleteAcl", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除ACL
    @inlinable
    public func deleteAcl(_ input: DeleteAclRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAclResponse {
        try await self.client.execute(action: "DeleteAcl", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DeleteAcl请求参数结构体
    public struct DeleteAclRequest: TCRequestModel {
        /// 实例id信息
        public let instanceId: String
        
        /// Acl资源类型，(2:TOPIC，3:GROUP，4:CLUSTER)
        public let resourceType: Int64
        
        /// 资源名称，和resourceType相关，如当resourceType为TOPIC时，则该字段表示topic名称，当resourceType为GROUP时，该字段表示group名称，当resourceType为CLUSTER时，该字段可为空。
        public let resourceName: String
        
        /// Acl操作方式，(2:ALL，3:READ，4:WRITE，5:CREATE，6:DELETE，7:ALTER，8:DESCRIBE，9:CLUSTER_ACTION，10:DESCRIBE_CONFIGS，11:ALTER_CONFIGS，12:IDEMPOTENT_WRITE)
        public let operation: Int64
        
        /// 权限类型，(2:DENY，3:ALLOW)，当前ckakfa支持ALLOW(相当于白名单)，其它用于后续兼容开源kafka的acl时使用
        public let permissionType: Int64
        
        /// 默认为\*，表示任何host都可以访问，当前ckafka不支持host为\*，但是后面开源kafka的产品化会直接支持
        public let host: String?
        
        /// 用户列表，默认为*，表示任何user都可以访问，当前用户只能是用户列表中包含的用户
        public let principal: String?
        
        public init (instanceId: String, resourceType: Int64, resourceName: String, operation: Int64, permissionType: Int64, host: String?, principal: String?) {
            self.instanceId = instanceId
            self.resourceType = resourceType
            self.resourceName = resourceName
            self.operation = operation
            self.permissionType = permissionType
            self.host = host
            self.principal = principal
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case resourceType = "ResourceType"
            case resourceName = "ResourceName"
            case operation = "Operation"
            case permissionType = "PermissionType"
            case host = "Host"
            case principal = "Principal"
        }
    }
    
    /// DeleteAcl返回参数结构体
    public struct DeleteAclResponse: TCResponseModel {
        /// 返回结果
        public let result: JgwOperateResponse
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
