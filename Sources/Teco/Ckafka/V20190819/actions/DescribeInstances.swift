//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ckafka {
    /// 获取实例列表信息
    ///
    /// 本接口（DescribeInstance）用于在用户账户下获取消息队列 CKafka 实例列表
    @inlinable
    public func describeInstances(_ input: DescribeInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeInstancesResponse > {
        self.client.execute(action: "DescribeInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取实例列表信息
    ///
    /// 本接口（DescribeInstance）用于在用户账户下获取消息队列 CKafka 实例列表
    @inlinable
    public func describeInstances(_ input: DescribeInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstancesResponse {
        try await self.client.execute(action: "DescribeInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeInstances请求参数结构体
    public struct DescribeInstancesRequest: TCRequestModel {
        /// （过滤条件）按照实例ID过滤
        public let instanceId: String?
        
        /// （过滤条件）按照实例名称过滤，支持模糊查询
        public let searchWord: String?
        
        /// （过滤条件）实例的状态。0：创建中，1：运行中，2：删除中，不填默认返回全部
        public let status: [Int64]?
        
        /// 偏移量，不填默认为0
        public let offset: Int64?
        
        /// 返回数量，不填则默认10，最大值100
        public let limit: Int64?
        
        /// 已废弃。匹配标签key值。
        public let tagKey: String?
        
        /// 私有网络Id
        public let vpcId: String?
        
        public init (instanceId: String?, searchWord: String?, status: [Int64]?, offset: Int64?, limit: Int64?, tagKey: String?, vpcId: String?) {
            self.instanceId = instanceId
            self.searchWord = searchWord
            self.status = status
            self.offset = offset
            self.limit = limit
            self.tagKey = tagKey
            self.vpcId = vpcId
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case searchWord = "SearchWord"
            case status = "Status"
            case offset = "Offset"
            case limit = "Limit"
            case tagKey = "TagKey"
            case vpcId = "VpcId"
        }
    }
    
    /// DescribeInstances返回参数结构体
    public struct DescribeInstancesResponse: TCResponseModel {
        /// 返回的结果
        public let result: InstanceResponse
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
