//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ckafka {
    /// 创建实例(预付费包年包月)
    ///
    /// 创建实例(预付费包年包月)
    @inlinable
    public func createInstancePre(_ input: CreateInstancePreRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateInstancePreResponse > {
        self.client.execute(action: "CreateInstancePre", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建实例(预付费包年包月)
    ///
    /// 创建实例(预付费包年包月)
    @inlinable
    public func createInstancePre(_ input: CreateInstancePreRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInstancePreResponse {
        try await self.client.execute(action: "CreateInstancePre", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateInstancePre请求参数结构体
    public struct CreateInstancePreRequest: TCRequestModel {
        /// 实例名称，是一个不超过 64 个字符的字符串，必须以字母为首字符，剩余部分可以包含字母、数字和横划线(-)
        public let instanceName: String
        
        /// 可用区，购买多可用区实例时，填写ZoneIds.N字段中的任意一个值
        public let zoneId: Int64
        
        /// 预付费购买时长，例如 "1m",就是一个月
        public let period: String
        
        /// 实例规格说明 专业版实例[所有规格]填写1.
        /// 标准版实例 ([入门型]填写1，[标准型]填写2，[进阶型]填写3，[容量型]填写4，[高阶型1]填写5，[高阶性2]填写6,[高阶型3]填写7,[高阶型4]填写8，[独占型]填写9。
        public let instanceType: Int64
        
        /// vpcId，不填默认基础网络
        public let vpcId: String?
        
        /// 子网id，vpc网络需要传该参数，基础网络可以不传
        public let subnetId: String?
        
        /// 可选。实例日志的最长保留时间，单位分钟，默认为10080（7天），最大30天，不填默认0，代表不开启日志保留时间回收策略
        public let msgRetentionTime: Int64?
        
        /// 创建实例时可以选择集群Id, 该入参表示集群Id
        public let clusterId: Int64?
        
        /// 预付费自动续费标记，0表示默认状态(用户未设置，即初始状态)， 1表示自动续费，2表示明确不自动续费(用户设置)
        public let renewFlag: Int64?
        
        /// CKafka版本号[0.10.2、1.1.1、2.4.1], 默认是1.1.1
        public let kafkaVersion: String?
        
        /// 实例类型: [标准版实例]填写 standard(默认), [专业版实例]填写 profession
        public let specificationsType: String?
        
        /// 磁盘大小,专业版不填写默认最小磁盘,填写后根据磁盘带宽分区数弹性计算
        public let diskSize: Int64?
        
        /// 带宽,专业版不填写默认最小带宽,填写后根据磁盘带宽分区数弹性计算
        public let bandWidth: Int64?
        
        /// 分区大小,专业版不填写默认最小分区数,填写后根据磁盘带宽分区数弹性计算
        public let partition: Int64?
        
        /// 标签
        public let tags: [Tag]?
        
        /// 磁盘类型（ssd填写CLOUD_SSD，sata填写CLOUD_BASIC）
        public let diskType: String?
        
        /// 跨可用区，zoneIds必填
        public let multiZoneFlag: Bool?
        
        /// 可用区列表，购买多可用区实例时为必填项
        public let zoneIds: [Int64]?
        
        public init (instanceName: String, zoneId: Int64, period: String, instanceType: Int64, vpcId: String?, subnetId: String?, msgRetentionTime: Int64?, clusterId: Int64?, renewFlag: Int64?, kafkaVersion: String?, specificationsType: String?, diskSize: Int64?, bandWidth: Int64?, partition: Int64?, tags: [Tag]?, diskType: String?, multiZoneFlag: Bool?, zoneIds: [Int64]?) {
            self.instanceName = instanceName
            self.zoneId = zoneId
            self.period = period
            self.instanceType = instanceType
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.msgRetentionTime = msgRetentionTime
            self.clusterId = clusterId
            self.renewFlag = renewFlag
            self.kafkaVersion = kafkaVersion
            self.specificationsType = specificationsType
            self.diskSize = diskSize
            self.bandWidth = bandWidth
            self.partition = partition
            self.tags = tags
            self.diskType = diskType
            self.multiZoneFlag = multiZoneFlag
            self.zoneIds = zoneIds
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceName = "InstanceName"
            case zoneId = "ZoneId"
            case period = "Period"
            case instanceType = "InstanceType"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case msgRetentionTime = "MsgRetentionTime"
            case clusterId = "ClusterId"
            case renewFlag = "RenewFlag"
            case kafkaVersion = "KafkaVersion"
            case specificationsType = "SpecificationsType"
            case diskSize = "DiskSize"
            case bandWidth = "BandWidth"
            case partition = "Partition"
            case tags = "Tags"
            case diskType = "DiskType"
            case multiZoneFlag = "MultiZoneFlag"
            case zoneIds = "ZoneIds"
        }
    }
    
    /// CreateInstancePre返回参数结构体
    public struct CreateInstancePreResponse: TCResponseModel {
        /// 返回结果
        public let result: CreateInstancePreResp
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}