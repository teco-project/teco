//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ckafka {
    /// SendMessage请求参数结构体
    public struct SendMessageRequest: TCRequestModel {
        /// DataHub接入ID
        public let dataHubId: String

        /// 发送消息内容(单次请求最多500条)
        public let message: [BatchContent]

        public init(dataHubId: String, message: [BatchContent]) {
            self.dataHubId = dataHubId
            self.message = message
        }

        enum CodingKeys: String, CodingKey {
            case dataHubId = "DataHubId"
            case message = "Message"
        }
    }

    /// SendMessage返回参数结构体
    public struct SendMessageResponse: TCResponseModel {
        /// 消息ID列表
        public let messageId: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case messageId = "MessageId"
            case requestId = "RequestId"
        }
    }

    /// HTTP发送消息
    ///
    /// 通过HTTP接入层发送消息
    @inlinable
    public func sendMessage(_ input: SendMessageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendMessageResponse> {
        self.client.execute(action: "SendMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// HTTP发送消息
    ///
    /// 通过HTTP接入层发送消息
    @inlinable
    public func sendMessage(_ input: SendMessageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendMessageResponse {
        try await self.client.execute(action: "SendMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// HTTP发送消息
    ///
    /// 通过HTTP接入层发送消息
    @inlinable
    public func sendMessage(dataHubId: String, message: [BatchContent], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendMessageResponse> {
        let input = SendMessageRequest(dataHubId: dataHubId, message: message)
        return self.client.execute(action: "SendMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// HTTP发送消息
    ///
    /// 通过HTTP接入层发送消息
    @inlinable
    public func sendMessage(dataHubId: String, message: [BatchContent], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendMessageResponse {
        let input = SendMessageRequest(dataHubId: dataHubId, message: message)
        return try await self.client.execute(action: "SendMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
