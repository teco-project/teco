//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ckafka {
    /// RenewCkafkaInstance请求参数结构体
    public struct RenewCkafkaInstanceRequest: TCRequestModel {
        /// 实例id
        public let instanceId: String

        /// 续费时长, 默认为1, 单位是月
        public let timeSpan: Int64?

        public init(instanceId: String, timeSpan: Int64? = nil) {
            self.instanceId = instanceId
            self.timeSpan = timeSpan
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case timeSpan = "TimeSpan"
        }
    }

    /// RenewCkafkaInstance接口出参bigDealIds
    public struct RenewCkafkaInstanceResponse: TCResponseModel {
        /// 订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bigDealId: String?

        /// 子订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dealName: String?

        enum CodingKeys: String, CodingKey {
            case bigDealId = "BigDealId"
            case dealName = "DealName"
        }
    }

    /// 续费Ckafka实例
    ///
    /// 续费Ckafka实例, 目前只支持国内站包年包月实例续费
    @inlinable
    public func renewCkafkaInstance(_ input: RenewCkafkaInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewCkafkaInstanceResponse> {
        self.client.execute(action: "RenewCkafkaInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 续费Ckafka实例
    ///
    /// 续费Ckafka实例, 目前只支持国内站包年包月实例续费
    @inlinable
    public func renewCkafkaInstance(_ input: RenewCkafkaInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewCkafkaInstanceResponse {
        try await self.client.execute(action: "RenewCkafkaInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 续费Ckafka实例
    ///
    /// 续费Ckafka实例, 目前只支持国内站包年包月实例续费
    @inlinable
    public func renewCkafkaInstance(instanceId: String, timeSpan: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewCkafkaInstanceResponse> {
        self.renewCkafkaInstance(.init(instanceId: instanceId, timeSpan: timeSpan), region: region, logger: logger, on: eventLoop)
    }

    /// 续费Ckafka实例
    ///
    /// 续费Ckafka实例, 目前只支持国内站包年包月实例续费
    @inlinable
    public func renewCkafkaInstance(instanceId: String, timeSpan: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewCkafkaInstanceResponse {
        try await self.renewCkafkaInstance(.init(instanceId: instanceId, timeSpan: timeSpan), region: region, logger: logger, on: eventLoop)
    }
}
