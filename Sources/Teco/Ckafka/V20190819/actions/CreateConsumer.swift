//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ckafka {
    /// 创建消费者组
    ///
    /// 创建消费者组
    @inlinable
    public func createConsumer(_ input: CreateConsumerRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateConsumerResponse > {
        self.client.execute(action: "CreateConsumer", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建消费者组
    ///
    /// 创建消费者组
    @inlinable
    public func createConsumer(_ input: CreateConsumerRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConsumerResponse {
        try await self.client.execute(action: "CreateConsumer", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateConsumer请求参数结构体
    public struct CreateConsumerRequest: TCRequestModel {
        /// 实例id
        public let instanceId: String
        
        /// group名称
        public let groupName: String
        
        /// topic名称，TopicName、TopicNameList 需要显示指定一个存在的topic名称
        public let topicName: String?
        
        /// topic名称数组
        public let topicNameList: [String]?
        
        public init (instanceId: String, groupName: String, topicName: String?, topicNameList: [String]?) {
            self.instanceId = instanceId
            self.groupName = groupName
            self.topicName = topicName
            self.topicNameList = topicNameList
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case groupName = "GroupName"
            case topicName = "TopicName"
            case topicNameList = "TopicNameList"
        }
    }
    
    /// CreateConsumer返回参数结构体
    public struct CreateConsumerResponse: TCResponseModel {
        /// 创建group描述
        public let result: JgwOperateResponse
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}