//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ckafka {
    /// InstanceScalingDown请求参数结构体
    public struct InstanceScalingDownRequest: TCRequest {
        /// 实例id
        public let instanceId: String

        /// 缩容模式  1:稳定变配
        /// 2.高速变配
        public let upgradeStrategy: Int64

        /// 磁盘大小 单位 GB
        public let diskSize: Int64?

        /// 峰值带宽 单位 MB/s
        public let bandWidth: Int64?

        /// 分区上限
        public let partition: Int64?

        public init(instanceId: String, upgradeStrategy: Int64, diskSize: Int64? = nil, bandWidth: Int64? = nil, partition: Int64? = nil) {
            self.instanceId = instanceId
            self.upgradeStrategy = upgradeStrategy
            self.diskSize = diskSize
            self.bandWidth = bandWidth
            self.partition = partition
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case upgradeStrategy = "UpgradeStrategy"
            case diskSize = "DiskSize"
            case bandWidth = "BandWidth"
            case partition = "Partition"
        }
    }

    /// InstanceScalingDown返回参数结构体
    public struct InstanceScalingDownResponse: TCResponse {
        /// 缩容应答
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: ScalingDownResp?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 按量实例缩容
    @inlinable
    public func instanceScalingDown(_ input: InstanceScalingDownRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InstanceScalingDownResponse> {
        self.client.execute(action: "InstanceScalingDown", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 按量实例缩容
    @inlinable
    public func instanceScalingDown(_ input: InstanceScalingDownRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InstanceScalingDownResponse {
        try await self.client.execute(action: "InstanceScalingDown", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 按量实例缩容
    @inlinable
    public func instanceScalingDown(instanceId: String, upgradeStrategy: Int64, diskSize: Int64? = nil, bandWidth: Int64? = nil, partition: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InstanceScalingDownResponse> {
        self.instanceScalingDown(.init(instanceId: instanceId, upgradeStrategy: upgradeStrategy, diskSize: diskSize, bandWidth: bandWidth, partition: partition), region: region, logger: logger, on: eventLoop)
    }

    /// 按量实例缩容
    @inlinable
    public func instanceScalingDown(instanceId: String, upgradeStrategy: Int64, diskSize: Int64? = nil, bandWidth: Int64? = nil, partition: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InstanceScalingDownResponse {
        try await self.instanceScalingDown(.init(instanceId: instanceId, upgradeStrategy: upgradeStrategy, diskSize: diskSize, bandWidth: bandWidth, partition: partition), region: region, logger: logger, on: eventLoop)
    }
}
