//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCkafkaError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case instanceNotExist = "InvalidParameterValue.InstanceNotExist"
            case notAllowedEmpty = "InvalidParameterValue.NotAllowedEmpty"
            case repetitionValue = "InvalidParameterValue.RepetitionValue"
            case subnetIdInvalid = "InvalidParameterValue.SubnetIdInvalid"
            case subnetNotBelongToZone = "InvalidParameterValue.SubnetNotBelongToZone"
            case vpcIdInvalid = "InvalidParameterValue.VpcIdInvalid"
            case wrongAction = "InvalidParameterValue.WrongAction"
            case zoneNotSupport = "InvalidParameterValue.ZoneNotSupport"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 实例不存在。
        public static var instanceNotExist: InvalidParameterValue {
            InvalidParameterValue(.instanceNotExist)
        }
        
        /// 参数不允许为空。
        public static var notAllowedEmpty: InvalidParameterValue {
            InvalidParameterValue(.notAllowedEmpty)
        }
        
        /// 已存在相同参数。
        public static var repetitionValue: InvalidParameterValue {
            InvalidParameterValue(.repetitionValue)
        }
        
        /// 无效的子网id。
        public static var subnetIdInvalid: InvalidParameterValue {
            InvalidParameterValue(.subnetIdInvalid)
        }
        
        /// 子网不属于zone。
        public static var subnetNotBelongToZone: InvalidParameterValue {
            InvalidParameterValue(.subnetNotBelongToZone)
        }
        
        /// 无效的 Vpc Id。
        public static var vpcIdInvalid: InvalidParameterValue {
            InvalidParameterValue(.vpcIdInvalid)
        }
        
        /// Action参数取值错误。
        public static var wrongAction: InvalidParameterValue {
            InvalidParameterValue(.wrongAction)
        }
        
        /// zone不支持。
        public static var zoneNotSupport: InvalidParameterValue {
            InvalidParameterValue(.zoneNotSupport)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCCkafkaError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCCkafkaError.InvalidParameterValue, rhs: TCCkafkaError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCkafkaError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCkafkaError.InvalidParameterValue {
    public func toCkafkaError() -> TCCkafkaError {
        guard let code = TCCkafkaError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCkafkaError(code, context: self.context)
    }
}