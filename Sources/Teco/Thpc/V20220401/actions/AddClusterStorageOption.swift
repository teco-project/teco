//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Thpc {
    /// AddClusterStorageOption请求参数结构体
    public struct AddClusterStorageOptionRequest: TCRequestModel {
        /// 集群ID。
        public let clusterId: String

        /// 集群存储选项。
        public let storageOption: StorageOption

        public init(clusterId: String, storageOption: StorageOption) {
            self.clusterId = clusterId
            self.storageOption = storageOption
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case storageOption = "StorageOption"
        }
    }

    /// AddClusterStorageOption返回参数结构体
    public struct AddClusterStorageOptionResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 添加集群存储选项
    ///
    /// 本接口（AddClusterStorageOption）用于添加集群存储选项信息。
    @inlinable @discardableResult
    public func addClusterStorageOption(_ input: AddClusterStorageOptionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddClusterStorageOptionResponse> {
        self.client.execute(action: "AddClusterStorageOption", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加集群存储选项
    ///
    /// 本接口（AddClusterStorageOption）用于添加集群存储选项信息。
    @inlinable @discardableResult
    public func addClusterStorageOption(_ input: AddClusterStorageOptionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddClusterStorageOptionResponse {
        try await self.client.execute(action: "AddClusterStorageOption", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加集群存储选项
    ///
    /// 本接口（AddClusterStorageOption）用于添加集群存储选项信息。
    @inlinable @discardableResult
    public func addClusterStorageOption(clusterId: String, storageOption: StorageOption, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddClusterStorageOptionResponse> {
        self.addClusterStorageOption(AddClusterStorageOptionRequest(clusterId: clusterId, storageOption: storageOption), region: region, logger: logger, on: eventLoop)
    }

    /// 添加集群存储选项
    ///
    /// 本接口（AddClusterStorageOption）用于添加集群存储选项信息。
    @inlinable @discardableResult
    public func addClusterStorageOption(clusterId: String, storageOption: StorageOption, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddClusterStorageOptionResponse {
        try await self.addClusterStorageOption(AddClusterStorageOptionRequest(clusterId: clusterId, storageOption: storageOption), region: region, logger: logger, on: eventLoop)
    }
}
