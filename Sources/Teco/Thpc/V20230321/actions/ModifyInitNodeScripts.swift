//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Thpc {
    /// ModifyInitNodeScripts请求参数结构体
    public struct ModifyInitNodeScriptsRequest: TCRequest {
        /// 集群ID。
        public let clusterId: String

        /// 节点初始化脚本信息列表。
        public let initNodeScripts: [NodeScript]?

        public init(clusterId: String, initNodeScripts: [NodeScript]? = nil) {
            self.clusterId = clusterId
            self.initNodeScripts = initNodeScripts
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case initNodeScripts = "InitNodeScripts"
        }
    }

    /// ModifyInitNodeScripts返回参数结构体
    public struct ModifyInitNodeScriptsResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改节点初始化脚本
    ///
    /// 本接口 (ModifyInitNodeScripts) 用于修改节点初始化脚本。
    @inlinable @discardableResult
    public func modifyInitNodeScripts(_ input: ModifyInitNodeScriptsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInitNodeScriptsResponse> {
        self.client.execute(action: "ModifyInitNodeScripts", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改节点初始化脚本
    ///
    /// 本接口 (ModifyInitNodeScripts) 用于修改节点初始化脚本。
    @inlinable @discardableResult
    public func modifyInitNodeScripts(_ input: ModifyInitNodeScriptsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInitNodeScriptsResponse {
        try await self.client.execute(action: "ModifyInitNodeScripts", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改节点初始化脚本
    ///
    /// 本接口 (ModifyInitNodeScripts) 用于修改节点初始化脚本。
    @inlinable @discardableResult
    public func modifyInitNodeScripts(clusterId: String, initNodeScripts: [NodeScript]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInitNodeScriptsResponse> {
        self.modifyInitNodeScripts(.init(clusterId: clusterId, initNodeScripts: initNodeScripts), region: region, logger: logger, on: eventLoop)
    }

    /// 修改节点初始化脚本
    ///
    /// 本接口 (ModifyInitNodeScripts) 用于修改节点初始化脚本。
    @inlinable @discardableResult
    public func modifyInitNodeScripts(clusterId: String, initNodeScripts: [NodeScript]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInitNodeScriptsResponse {
        try await self.modifyInitNodeScripts(.init(clusterId: clusterId, initNodeScripts: initNodeScripts), region: region, logger: logger, on: eventLoop)
    }
}
