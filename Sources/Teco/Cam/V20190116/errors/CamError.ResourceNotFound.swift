//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCamError {
    public struct ResourceNotFound: TCCamErrorType {
        enum Code: String {
            case groupNotExist = "ResourceNotFound.GroupNotExist"
            case identityNotExist = "ResourceNotFound.IdentityNotExist"
            case notFound = "ResourceNotFound.NotFound"
            case policyIdNotFound = "ResourceNotFound.PolicyIdNotFound"
            case secretNotExist = "ResourceNotFound.SecretNotExist"
            case userNotExist = "ResourceNotFound.UserNotExist"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 用户组不存在。
        public static var groupNotExist: ResourceNotFound {
            ResourceNotFound(.groupNotExist)
        }

        /// 身份提供商不存在。
        public static var identityNotExist: ResourceNotFound {
            ResourceNotFound(.identityNotExist)
        }

        /// 资源不存在。
        public static var notFound: ResourceNotFound {
            ResourceNotFound(.notFound)
        }

        /// PolicyId指定的资源不存在。
        public static var policyIdNotFound: ResourceNotFound {
            ResourceNotFound(.policyIdNotFound)
        }

        /// 密钥不存在。
        public static var secretNotExist: ResourceNotFound {
            ResourceNotFound(.secretNotExist)
        }

        /// 用户不存在。
        public static var userNotExist: ResourceNotFound {
            ResourceNotFound(.userNotExist)
        }

        public func asCamError() -> TCCamError {
            let code: TCCamError.Code
            switch self.error {
            case .groupNotExist:
                code = .resourceNotFound_GroupNotExist
            case .identityNotExist:
                code = .resourceNotFound_IdentityNotExist
            case .notFound:
                code = .resourceNotFound_NotFound
            case .policyIdNotFound:
                code = .resourceNotFound_PolicyIdNotFound
            case .secretNotExist:
                code = .resourceNotFound_SecretNotExist
            case .userNotExist:
                code = .resourceNotFound_UserNotExist
            }
            return TCCamError(code, context: self.context)
        }
    }
}
