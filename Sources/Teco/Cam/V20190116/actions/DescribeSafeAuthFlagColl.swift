//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// 查询安全设置
    ///
    /// 查询安全设置
    @inlinable
    public func describeSafeAuthFlagColl(_ input: DescribeSafeAuthFlagCollRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeSafeAuthFlagCollResponse > {
        self.client.execute(action: "DescribeSafeAuthFlagColl", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询安全设置
    ///
    /// 查询安全设置
    @inlinable
    public func describeSafeAuthFlagColl(_ input: DescribeSafeAuthFlagCollRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSafeAuthFlagCollResponse {
        try await self.client.execute(action: "DescribeSafeAuthFlagColl", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeSafeAuthFlagColl请求参数结构体
    public struct DescribeSafeAuthFlagCollRequest: TCRequestModel {
        /// 子账号
        public let subUin: UInt64
        
        public init (subUin: UInt64) {
            self.subUin = subUin
        }
        
        enum CodingKeys: String, CodingKey {
            case subUin = "SubUin"
        }
    }
    
    /// DescribeSafeAuthFlagColl返回参数结构体
    public struct DescribeSafeAuthFlagCollResponse: TCResponseModel {
        /// 登录保护设置
        public let loginFlag: LoginActionFlag
        
        /// 敏感操作保护设置
        public let actionFlag: LoginActionFlag
        
        /// 异地登录保护设置
        public let offsiteFlag: OffsiteFlag
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case loginFlag = "LoginFlag"
            case actionFlag = "ActionFlag"
            case offsiteFlag = "OffsiteFlag"
            case requestId = "RequestId"
        }
    }
}