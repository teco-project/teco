//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// UpdateSAMLProvider请求参数结构体
    public struct UpdateSAMLProviderRequest: TCRequestModel {
        /// SAML身份提供商名称
        public let name: String

        /// SAML身份提供商描述
        public let description: String?

        /// SAML身份提供商Base64编码的元数据文档
        public let samlMetadataDocument: String?

        public init(name: String, description: String? = nil, samlMetadataDocument: String? = nil) {
            self.name = name
            self.description = description
            self.samlMetadataDocument = samlMetadataDocument
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case samlMetadataDocument = "SAMLMetadataDocument"
        }
    }

    /// UpdateSAMLProvider返回参数结构体
    public struct UpdateSAMLProviderResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新SAML身份提供商信息
    @inlinable @discardableResult
    public func updateSAMLProvider(_ input: UpdateSAMLProviderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateSAMLProviderResponse> {
        self.client.execute(action: "UpdateSAMLProvider", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新SAML身份提供商信息
    @inlinable @discardableResult
    public func updateSAMLProvider(_ input: UpdateSAMLProviderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateSAMLProviderResponse {
        try await self.client.execute(action: "UpdateSAMLProvider", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新SAML身份提供商信息
    @inlinable @discardableResult
    public func updateSAMLProvider(name: String, description: String? = nil, samlMetadataDocument: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateSAMLProviderResponse> {
        let input = UpdateSAMLProviderRequest(name: name, description: description, samlMetadataDocument: samlMetadataDocument)
        return self.client.execute(action: "UpdateSAMLProvider", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新SAML身份提供商信息
    @inlinable @discardableResult
    public func updateSAMLProvider(name: String, description: String? = nil, samlMetadataDocument: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateSAMLProviderResponse {
        let input = UpdateSAMLProviderRequest(name: name, description: description, samlMetadataDocument: samlMetadataDocument)
        return try await self.client.execute(action: "UpdateSAMLProvider", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
