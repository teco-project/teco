//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// ListAttachedRolePolicies请求参数结构体
    public struct ListAttachedRolePoliciesRequest: TCRequestModel {
        /// 页码，从 1 开始
        public let page: UInt64

        /// 每页行数，不能大于200
        public let rp: UInt64

        /// 角色 ID。用于指定角色，入参 RoleId 与 RoleName 二选一
        public let roleId: String?

        /// 角色名。用于指定角色，入参 RoleId 与 RoleName 二选一
        public let roleName: String?

        /// 按策略类型过滤，User表示仅查询自定义策略，QCS表示仅查询预设策略
        public let policyType: String?

        /// 搜索关键字
        public let keyword: String?

        public init(page: UInt64, rp: UInt64, roleId: String? = nil, roleName: String? = nil, policyType: String? = nil, keyword: String? = nil) {
            self.page = page
            self.rp = rp
            self.roleId = roleId
            self.roleName = roleName
            self.policyType = policyType
            self.keyword = keyword
        }

        enum CodingKeys: String, CodingKey {
            case page = "Page"
            case rp = "Rp"
            case roleId = "RoleId"
            case roleName = "RoleName"
            case policyType = "PolicyType"
            case keyword = "Keyword"
        }
    }

    /// ListAttachedRolePolicies返回参数结构体
    public struct ListAttachedRolePoliciesResponse: TCResponseModel {
        /// 角色关联的策略列表
        public let list: [AttachedPolicyOfRole]

        /// 角色关联的策略总数
        public let totalNum: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case totalNum = "TotalNum"
            case requestId = "RequestId"
        }
    }

    /// 获取角色绑定的策略列表
    ///
    /// 本接口（ListAttachedRolePolicies）用于获取角色绑定的策略列表。
    @inlinable
    public func listAttachedRolePolicies(_ input: ListAttachedRolePoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListAttachedRolePoliciesResponse> {
        self.client.execute(action: "ListAttachedRolePolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取角色绑定的策略列表
    ///
    /// 本接口（ListAttachedRolePolicies）用于获取角色绑定的策略列表。
    @inlinable
    public func listAttachedRolePolicies(_ input: ListAttachedRolePoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAttachedRolePoliciesResponse {
        try await self.client.execute(action: "ListAttachedRolePolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取角色绑定的策略列表
    ///
    /// 本接口（ListAttachedRolePolicies）用于获取角色绑定的策略列表。
    @inlinable
    public func listAttachedRolePolicies(page: UInt64, rp: UInt64, roleId: String? = nil, roleName: String? = nil, policyType: String? = nil, keyword: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListAttachedRolePoliciesResponse> {
        let input = ListAttachedRolePoliciesRequest(page: page, rp: rp, roleId: roleId, roleName: roleName, policyType: policyType, keyword: keyword)
        return self.client.execute(action: "ListAttachedRolePolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取角色绑定的策略列表
    ///
    /// 本接口（ListAttachedRolePolicies）用于获取角色绑定的策略列表。
    @inlinable
    public func listAttachedRolePolicies(page: UInt64, rp: UInt64, roleId: String? = nil, roleName: String? = nil, policyType: String? = nil, keyword: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAttachedRolePoliciesResponse {
        let input = ListAttachedRolePoliciesRequest(page: page, rp: rp, roleId: roleId, roleName: roleName, policyType: policyType, keyword: keyword)
        return try await self.client.execute(action: "ListAttachedRolePolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
