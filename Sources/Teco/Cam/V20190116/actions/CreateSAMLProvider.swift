//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// CreateSAMLProvider请求参数结构体
    public struct CreateSAMLProviderRequest: TCRequestModel {
        /// SAML身份提供商名称
        public let name: String
        
        /// SAML身份提供商描述
        public let description: String
        
        /// SAML身份提供商Base64编码的元数据文档
        public let samlMetadataDocument: String
        
        public init (name: String, description: String, samlMetadataDocument: String) {
            self.name = name
            self.description = description
            self.samlMetadataDocument = samlMetadataDocument
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case samlMetadataDocument = "SAMLMetadataDocument"
        }
    }
    
    /// CreateSAMLProvider返回参数结构体
    public struct CreateSAMLProviderResponse: TCResponseModel {
        /// SAML身份提供商资源描述符
        public let providerArn: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case providerArn = "ProviderArn"
            case requestId = "RequestId"
        }
    }
    
    /// 创建SAML身份提供商
    @inlinable
    public func createSAMLProvider(_ input: CreateSAMLProviderRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateSAMLProviderResponse > {
        self.client.execute(action: "CreateSAMLProvider", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建SAML身份提供商
    @inlinable
    public func createSAMLProvider(_ input: CreateSAMLProviderRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSAMLProviderResponse {
        try await self.client.execute(action: "CreateSAMLProvider", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 创建SAML身份提供商
    @inlinable
    public func createSAMLProvider(name: String, description: String, samlMetadataDocument: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateSAMLProviderResponse > {
        self.createSAMLProvider(CreateSAMLProviderRequest(name: name, description: description, samlMetadataDocument: samlMetadataDocument), logger: logger, on: eventLoop)
    }
    
    /// 创建SAML身份提供商
    @inlinable
    public func createSAMLProvider(name: String, description: String, samlMetadataDocument: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSAMLProviderResponse {
        try await self.createSAMLProvider(CreateSAMLProviderRequest(name: name, description: description, samlMetadataDocument: samlMetadataDocument), logger: logger, on: eventLoop)
    }
}
