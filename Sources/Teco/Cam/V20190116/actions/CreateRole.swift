//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// CreateRole请求参数结构体
    public struct CreateRoleRequest: TCRequestModel {
        /// 角色名称
        public let roleName: String

        /// 策略文档，示例：{"version":"2.0","statement":[{"action":"name/sts:AssumeRole","effect":"allow","principal":{"service":["cloudaudit.cloud.tencent.com","cls.cloud.tencent.com"]}}]}，principal用于指定角色的授权对象。获取该参数可参阅 获取角色详情（https://cloud.tencent.com/document/product/598/36221） 输出参数RoleInfo
        public let policyDocument: String

        /// 角色描述
        public let description: String?

        /// 是否允许登录 1 为允许 0 为不允许
        public let consoleLogin: UInt64?

        /// 申请角色临时密钥的最长有效期限制(范围：0~43200)
        public let sessionDuration: UInt64?

        /// 角色绑定标签
        public let tags: [RoleTags]?

        public init(roleName: String, policyDocument: String, description: String? = nil, consoleLogin: UInt64? = nil, sessionDuration: UInt64? = nil, tags: [RoleTags]? = nil) {
            self.roleName = roleName
            self.policyDocument = policyDocument
            self.description = description
            self.consoleLogin = consoleLogin
            self.sessionDuration = sessionDuration
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case roleName = "RoleName"
            case policyDocument = "PolicyDocument"
            case description = "Description"
            case consoleLogin = "ConsoleLogin"
            case sessionDuration = "SessionDuration"
            case tags = "Tags"
        }
    }

    /// CreateRole返回参数结构体
    public struct CreateRoleResponse: TCResponseModel {
        /// 角色ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case roleId = "RoleId"
            case requestId = "RequestId"
        }
    }

    /// 创建角色
    ///
    /// 本接口（CreateRole）用于创建角色。
    @inlinable
    public func createRole(_ input: CreateRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRoleResponse> {
        self.client.execute(action: "CreateRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建角色
    ///
    /// 本接口（CreateRole）用于创建角色。
    @inlinable
    public func createRole(_ input: CreateRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRoleResponse {
        try await self.client.execute(action: "CreateRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建角色
    ///
    /// 本接口（CreateRole）用于创建角色。
    @inlinable
    public func createRole(roleName: String, policyDocument: String, description: String? = nil, consoleLogin: UInt64? = nil, sessionDuration: UInt64? = nil, tags: [RoleTags]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRoleResponse> {
        self.createRole(CreateRoleRequest(roleName: roleName, policyDocument: policyDocument, description: description, consoleLogin: consoleLogin, sessionDuration: sessionDuration, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 创建角色
    ///
    /// 本接口（CreateRole）用于创建角色。
    @inlinable
    public func createRole(roleName: String, policyDocument: String, description: String? = nil, consoleLogin: UInt64? = nil, sessionDuration: UInt64? = nil, tags: [RoleTags]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRoleResponse {
        try await self.createRole(CreateRoleRequest(roleName: roleName, policyDocument: policyDocument, description: description, consoleLogin: consoleLogin, sessionDuration: sessionDuration, tags: tags), region: region, logger: logger, on: eventLoop)
    }
}
