//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// UpdateOIDCConfig请求参数结构体
    public struct UpdateOIDCConfigRequest: TCRequestModel {
        /// 身份提供商URL
        public let identityUrl: String

        /// 签名公钥，需要base64
        public let identityKey: String

        /// 客户端ID
        public let clientId: [String]

        /// 名称
        public let name: String

        /// 描述
        public let description: String?

        public init(identityUrl: String, identityKey: String, clientId: [String], name: String, description: String? = nil) {
            self.identityUrl = identityUrl
            self.identityKey = identityKey
            self.clientId = clientId
            self.name = name
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case identityUrl = "IdentityUrl"
            case identityKey = "IdentityKey"
            case clientId = "ClientId"
            case name = "Name"
            case description = "Description"
        }
    }

    /// UpdateOIDCConfig返回参数结构体
    public struct UpdateOIDCConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改角色OIDC配置
    @inlinable @discardableResult
    public func updateOIDCConfig(_ input: UpdateOIDCConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateOIDCConfigResponse> {
        self.client.execute(action: "UpdateOIDCConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改角色OIDC配置
    @inlinable @discardableResult
    public func updateOIDCConfig(_ input: UpdateOIDCConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateOIDCConfigResponse {
        try await self.client.execute(action: "UpdateOIDCConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改角色OIDC配置
    @inlinable @discardableResult
    public func updateOIDCConfig(identityUrl: String, identityKey: String, clientId: [String], name: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateOIDCConfigResponse> {
        self.updateOIDCConfig(UpdateOIDCConfigRequest(identityUrl: identityUrl, identityKey: identityKey, clientId: clientId, name: name, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 修改角色OIDC配置
    @inlinable @discardableResult
    public func updateOIDCConfig(identityUrl: String, identityKey: String, clientId: [String], name: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateOIDCConfigResponse {
        try await self.updateOIDCConfig(UpdateOIDCConfigRequest(identityUrl: identityUrl, identityKey: identityKey, clientId: clientId, name: name, description: description), region: region, logger: logger, on: eventLoop)
    }
}
