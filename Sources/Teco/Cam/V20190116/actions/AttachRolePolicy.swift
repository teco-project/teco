//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// AttachRolePolicy请求参数结构体
    public struct AttachRolePolicyRequest: TCRequestModel {
        /// 策略ID，入参PolicyId与PolicyName二选一
        public let policyId: UInt64?
        
        /// 角色ID，用于指定角色，入参 AttachRoleId 与 AttachRoleName 二选一
        public let attachRoleId: String?
        
        /// 角色名称，用于指定角色，入参 AttachRoleId 与 AttachRoleName 二选一
        public let attachRoleName: String?
        
        /// 策略名，入参PolicyId与PolicyName二选一
        public let policyName: String?
        
        public init (policyId: UInt64? = nil, attachRoleId: String? = nil, attachRoleName: String? = nil, policyName: String? = nil) {
            self.policyId = policyId
            self.attachRoleId = attachRoleId
            self.attachRoleName = attachRoleName
            self.policyName = policyName
        }
        
        enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case attachRoleId = "AttachRoleId"
            case attachRoleName = "AttachRoleName"
            case policyName = "PolicyName"
        }
    }
    
    /// AttachRolePolicy返回参数结构体
    public struct AttachRolePolicyResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 绑定权限策略到角色
    ///
    /// 本接口（AttachRolePolicy）用于绑定策略到角色。
    @inlinable
    public func attachRolePolicy(_ input: AttachRolePolicyRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < AttachRolePolicyResponse > {
        self.client.execute(action: "AttachRolePolicy", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 绑定权限策略到角色
    ///
    /// 本接口（AttachRolePolicy）用于绑定策略到角色。
    @inlinable
    public func attachRolePolicy(_ input: AttachRolePolicyRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachRolePolicyResponse {
        try await self.client.execute(action: "AttachRolePolicy", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 绑定权限策略到角色
    ///
    /// 本接口（AttachRolePolicy）用于绑定策略到角色。
    @inlinable
    public func attachRolePolicy(policyId: UInt64? = nil, attachRoleId: String? = nil, attachRoleName: String? = nil, policyName: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < AttachRolePolicyResponse > {
        self.attachRolePolicy(AttachRolePolicyRequest(policyId: policyId, attachRoleId: attachRoleId, attachRoleName: attachRoleName, policyName: policyName), logger: logger, on: eventLoop)
    }
    
    /// 绑定权限策略到角色
    ///
    /// 本接口（AttachRolePolicy）用于绑定策略到角色。
    @inlinable
    public func attachRolePolicy(policyId: UInt64? = nil, attachRoleId: String? = nil, attachRoleName: String? = nil, policyName: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachRolePolicyResponse {
        try await self.attachRolePolicy(AttachRolePolicyRequest(policyId: policyId, attachRoleId: attachRoleId, attachRoleName: attachRoleName, policyName: policyName), logger: logger, on: eventLoop)
    }
}
