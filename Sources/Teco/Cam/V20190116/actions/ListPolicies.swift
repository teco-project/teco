//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cam {
    /// ListPolicies请求参数结构体
    public struct ListPoliciesRequest: TCRequestModel {
        /// 每页数量，默认值是 20，必须大于 0 且小于或等于 200
        public let rp: UInt64?

        /// 页码，默认值是 1，从 1开始，不能大于 200
        public let page: UInt64?

        /// 可取值 'All'、'QCS' 和 'Local'，'All' 获取所有策略，'QCS' 只获取预设策略，'Local' 只获取自定义策略，默认取 'All'
        public let scope: String?

        /// 按策略名匹配
        public let keyword: String?

        public init(rp: UInt64? = nil, page: UInt64? = nil, scope: String? = nil, keyword: String? = nil) {
            self.rp = rp
            self.page = page
            self.scope = scope
            self.keyword = keyword
        }

        enum CodingKeys: String, CodingKey {
            case rp = "Rp"
            case page = "Page"
            case scope = "Scope"
            case keyword = "Keyword"
        }
    }

    /// ListPolicies返回参数结构体
    public struct ListPoliciesResponse: TCResponseModel {
        /// 策略总数
        public let totalNum: UInt64

        /// 策略数组，数组每个成员包括 policyId、policyName、addTime、type、description、 createMode 字段。其中：
        /// policyId：策略 id
        /// policyName：策略名
        /// addTime：策略创建时间
        /// type：1 表示自定义策略，2 表示预设策略
        /// description：策略描述
        /// createMode：1 表示按业务权限创建的策略，其他值表示可以查看策略语法和通过策略语法更新策略
        /// Attachments: 关联的用户数
        /// ServiceType: 策略关联的产品
        /// IsAttached: 当需要查询标记实体是否已经关联策略时不为null。0表示未关联策略，1表示已关联策略
        public let list: [StrategyInfo]

        /// 保留字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceTypeList: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalNum = "TotalNum"
            case list = "List"
            case serviceTypeList = "ServiceTypeList"
            case requestId = "RequestId"
        }
    }

    /// 查询策略列表
    ///
    /// 本接口（ListPolicies）可用于查询策略列表。
    @inlinable
    public func listPolicies(_ input: ListPoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListPoliciesResponse> {
        self.client.execute(action: "ListPolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询策略列表
    ///
    /// 本接口（ListPolicies）可用于查询策略列表。
    @inlinable
    public func listPolicies(_ input: ListPoliciesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListPoliciesResponse {
        try await self.client.execute(action: "ListPolicies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询策略列表
    ///
    /// 本接口（ListPolicies）可用于查询策略列表。
    @inlinable
    public func listPolicies(rp: UInt64? = nil, page: UInt64? = nil, scope: String? = nil, keyword: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListPoliciesResponse> {
        self.listPolicies(.init(rp: rp, page: page, scope: scope, keyword: keyword), region: region, logger: logger, on: eventLoop)
    }

    /// 查询策略列表
    ///
    /// 本接口（ListPolicies）可用于查询策略列表。
    @inlinable
    public func listPolicies(rp: UInt64? = nil, page: UInt64? = nil, scope: String? = nil, keyword: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListPoliciesResponse {
        try await self.listPolicies(.init(rp: rp, page: page, scope: scope, keyword: keyword), region: region, logger: logger, on: eventLoop)
    }
}
