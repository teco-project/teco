//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cam {
    /// DisableUserSSO请求参数结构体
    public struct DisableUserSSORequest: TCRequest {
        public init() {
        }
    }

    /// DisableUserSSO返回参数结构体
    public struct DisableUserSSOResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 禁用用户SSO
    @inlinable @discardableResult
    public func disableUserSSO(_ input: DisableUserSSORequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableUserSSOResponse> {
        self.client.execute(action: "DisableUserSSO", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 禁用用户SSO
    @inlinable @discardableResult
    public func disableUserSSO(_ input: DisableUserSSORequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableUserSSOResponse {
        try await self.client.execute(action: "DisableUserSSO", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 禁用用户SSO
    @inlinable @discardableResult
    public func disableUserSSO(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableUserSSOResponse> {
        self.disableUserSSO(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 禁用用户SSO
    @inlinable @discardableResult
    public func disableUserSSO(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableUserSSOResponse {
        try await self.disableUserSSO(.init(), region: region, logger: logger, on: eventLoop)
    }
}
