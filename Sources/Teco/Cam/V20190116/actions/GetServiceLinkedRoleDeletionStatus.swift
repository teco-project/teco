//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cam {
    /// GetServiceLinkedRoleDeletionStatus请求参数结构体
    public struct GetServiceLinkedRoleDeletionStatusRequest: TCRequestModel {
        /// 删除任务ID
        public let deletionTaskId: String

        public init(deletionTaskId: String) {
            self.deletionTaskId = deletionTaskId
        }

        enum CodingKeys: String, CodingKey {
            case deletionTaskId = "DeletionTaskId"
        }
    }

    /// GetServiceLinkedRoleDeletionStatus返回参数结构体
    public struct GetServiceLinkedRoleDeletionStatusResponse: TCResponseModel {
        /// 状态：NOT_STARTED，IN_PROGRESS，SUCCEEDED，FAILED
        public let status: String

        /// 失败原因
        public let reason: String

        /// 服务类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceType: String?

        /// 服务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceName: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case reason = "Reason"
            case serviceType = "ServiceType"
            case serviceName = "ServiceName"
            case requestId = "RequestId"
        }
    }

    /// 获取服务相关角色删除状态
    ///
    /// 根据删除TaskId获取服务相关角色删除状态
    @inlinable
    public func getServiceLinkedRoleDeletionStatus(_ input: GetServiceLinkedRoleDeletionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetServiceLinkedRoleDeletionStatusResponse> {
        self.client.execute(action: "GetServiceLinkedRoleDeletionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取服务相关角色删除状态
    ///
    /// 根据删除TaskId获取服务相关角色删除状态
    @inlinable
    public func getServiceLinkedRoleDeletionStatus(_ input: GetServiceLinkedRoleDeletionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetServiceLinkedRoleDeletionStatusResponse {
        try await self.client.execute(action: "GetServiceLinkedRoleDeletionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取服务相关角色删除状态
    ///
    /// 根据删除TaskId获取服务相关角色删除状态
    @inlinable
    public func getServiceLinkedRoleDeletionStatus(deletionTaskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetServiceLinkedRoleDeletionStatusResponse> {
        self.getServiceLinkedRoleDeletionStatus(GetServiceLinkedRoleDeletionStatusRequest(deletionTaskId: deletionTaskId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取服务相关角色删除状态
    ///
    /// 根据删除TaskId获取服务相关角色删除状态
    @inlinable
    public func getServiceLinkedRoleDeletionStatus(deletionTaskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetServiceLinkedRoleDeletionStatusResponse {
        try await self.getServiceLinkedRoleDeletionStatus(GetServiceLinkedRoleDeletionStatusRequest(deletionTaskId: deletionTaskId), region: region, logger: logger, on: eventLoop)
    }
}
