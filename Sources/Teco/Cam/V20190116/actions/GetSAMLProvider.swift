//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Cam {
    /// GetSAMLProvider请求参数结构体
    public struct GetSAMLProviderRequest: TCRequestModel {
        /// SAML身份提供商名称
        public let name: String
        
        public init (name: String) {
            self.name = name
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }
    
    /// GetSAMLProvider返回参数结构体
    public struct GetSAMLProviderResponse: TCResponseModel {
        /// SAML身份提供商名称
        public let name: String
        
        /// SAML身份提供商描述
        public let description: String
        
        /// SAML身份提供商创建时间
        // FIXME: Codable support not implemented for datetime yet.
        public let createTime: Date
        
        /// SAML身份提供商上次修改时间
        // FIXME: Codable support not implemented for datetime yet.
        public let modifyTime: Date
        
        /// SAML身份提供商元数据文档
        public let samlMetadata: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
            case samlMetadata = "SAMLMetadata"
            case requestId = "RequestId"
        }
    }
    
    /// 查询SAML身份提供商详情
    @inlinable
    public func getSAMLProvider(_ input: GetSAMLProviderRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetSAMLProviderResponse > {
        self.client.execute(action: "GetSAMLProvider", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询SAML身份提供商详情
    @inlinable
    public func getSAMLProvider(_ input: GetSAMLProviderRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSAMLProviderResponse {
        try await self.client.execute(action: "GetSAMLProvider", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询SAML身份提供商详情
    @inlinable
    public func getSAMLProvider(name: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetSAMLProviderResponse > {
        self.getSAMLProvider(GetSAMLProviderRequest(name: name), logger: logger, on: eventLoop)
    }
    
    /// 查询SAML身份提供商详情
    @inlinable
    public func getSAMLProvider(name: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSAMLProviderResponse {
        try await self.getSAMLProvider(GetSAMLProviderRequest(name: name), logger: logger, on: eventLoop)
    }
}
