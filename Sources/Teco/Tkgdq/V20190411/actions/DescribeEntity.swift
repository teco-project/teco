//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tkgdq {
    /// DescribeEntity请求参数结构体
    public struct DescribeEntityRequest: TCRequest {
        /// 实体名称
        public let entityName: String

        public init(entityName: String) {
            self.entityName = entityName
        }

        enum CodingKeys: String, CodingKey {
            case entityName = "EntityName"
        }
    }

    /// DescribeEntity返回参数结构体
    public struct DescribeEntityResponse: TCResponse {
        /// 返回查询实体相关信息
        public let content: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case content = "Content"
            case requestId = "RequestId"
        }
    }

    /// 实体信息查询
    ///
    /// 输入实体名称，返回实体相关的信息如实体别名、实体英文名、实体详细信息、相关实体等
    @inlinable
    public func describeEntity(_ input: DescribeEntityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEntityResponse> {
        self.client.execute(action: "DescribeEntity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 实体信息查询
    ///
    /// 输入实体名称，返回实体相关的信息如实体别名、实体英文名、实体详细信息、相关实体等
    @inlinable
    public func describeEntity(_ input: DescribeEntityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEntityResponse {
        try await self.client.execute(action: "DescribeEntity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 实体信息查询
    ///
    /// 输入实体名称，返回实体相关的信息如实体别名、实体英文名、实体详细信息、相关实体等
    @inlinable
    public func describeEntity(entityName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEntityResponse> {
        self.describeEntity(.init(entityName: entityName), region: region, logger: logger, on: eventLoop)
    }

    /// 实体信息查询
    ///
    /// 输入实体名称，返回实体相关的信息如实体别名、实体英文名、实体详细信息、相关实体等
    @inlinable
    public func describeEntity(entityName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEntityResponse {
        try await self.describeEntity(.init(entityName: entityName), region: region, logger: logger, on: eventLoop)
    }
}
