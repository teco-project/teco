//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tkgdq {
    /// 返回的实体关系查询结果详细内容
    public struct EntityRelationContent: TCInputModel {
        /// 实体关系查询返回关系的object
        public let object: [EntityRelationObject]?
        
        /// 实体关系查询返回关系的subject
        public let subject: [EntityRelationSubject]?
        
        /// 实体关系查询返回的关系名称
        public let relation: String?
        
        public init (object: [EntityRelationObject]?, subject: [EntityRelationSubject]?, relation: String?) {
            self.object = object
            self.subject = subject
            self.relation = relation
        }
        
        enum CodingKeys: String, CodingKey {
            case object = "Object"
            case subject = "Subject"
            case relation = "Relation"
        }
    }
    
    /// 实体关系查询返回的Object类型
    public struct EntityRelationObject: TCInputModel {
        /// object对应id
        public let id: [String]?
        
        /// object对应name
        public let name: [String]?
        
        /// object对应popular值
        public let popular: [Int64]?
        
        public init (id: [String]?, name: [String]?, popular: [Int64]?) {
            self.id = id
            self.name = name
            self.popular = popular
        }
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case popular = "Popular"
        }
    }
    
    /// 实体关系查询返回Subject
    public struct EntityRelationSubject: TCInputModel {
        /// Subject对应id
        public let id: [String]?
        
        /// Subject对应name
        public let name: [String]?
        
        /// Subject对应popular
        public let popular: [Int64]?
        
        public init (id: [String]?, name: [String]?, popular: [Int64]?) {
            self.id = id
            self.name = name
            self.popular = popular
        }
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case popular = "Popular"
        }
    }
    
    /// 三元组查询返回的元记录
    public struct TripleContent: TCInputModel {
        /// 实体id
        public let id: String?
        
        /// 实体名称
        public let name: String?
        
        /// 实体order
        public let order: Int64?
        
        /// 实体流行度
        public let popular: Int64?
        
        public init (id: String?, name: String?, order: Int64?, popular: Int64?) {
            self.id = id
            self.name = name
            self.order = order
            self.popular = popular
        }
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case order = "Order"
            case popular = "Popular"
        }
    }
}