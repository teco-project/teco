//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tat {
    /// DescribeRegisterInstances请求参数结构体
    public struct DescribeRegisterInstancesRequest: TCPaginatedRequest {
        /// 实例id。
        public let instanceIds: [String]?

        /// 过滤器列表。
        ///
        /// - instance-name
        ///
        /// 按照【实例名称】进行过滤。
        /// 类型：String
        /// 必选：否
        ///
        /// - instance-id
        ///
        /// 按照【实例ID】进行过滤。
        /// 类型：String
        /// 必选：否
        ///
        /// - register-code-id
        ///
        /// 按照【注册码ID】进行过滤。
        /// 类型：String
        /// 必选：否
        public let filters: [Filter]?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        public init(instanceIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.instanceIds = instanceIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRegisterInstancesResponse) -> DescribeRegisterInstancesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(instanceIds: self.instanceIds, filters: self.filters, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeRegisterInstances返回参数结构体
    public struct DescribeRegisterInstancesResponse: TCPaginatedResponse {
        /// 该实例注册过的注册码总数。
        public let totalCount: Int64

        /// 被托管的实例信息的列表。
        public let registerInstanceSet: [RegisterInstanceInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case registerInstanceSet = "RegisterInstanceSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RegisterInstanceInfo`` list from the paginated response.
        public func getItems() -> [RegisterInstanceInfo] {
            self.registerInstanceSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询托管实例
    ///
    /// 接口用于查询被托管的实例信息。
    @inlinable
    public func describeRegisterInstances(_ input: DescribeRegisterInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRegisterInstancesResponse> {
        self.client.execute(action: "DescribeRegisterInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询托管实例
    ///
    /// 接口用于查询被托管的实例信息。
    @inlinable
    public func describeRegisterInstances(_ input: DescribeRegisterInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRegisterInstancesResponse {
        try await self.client.execute(action: "DescribeRegisterInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询托管实例
    ///
    /// 接口用于查询被托管的实例信息。
    @inlinable
    public func describeRegisterInstances(instanceIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRegisterInstancesResponse> {
        self.describeRegisterInstances(.init(instanceIds: instanceIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询托管实例
    ///
    /// 接口用于查询被托管的实例信息。
    @inlinable
    public func describeRegisterInstances(instanceIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRegisterInstancesResponse {
        try await self.describeRegisterInstances(.init(instanceIds: instanceIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询托管实例
    ///
    /// 接口用于查询被托管的实例信息。
    @inlinable
    public func describeRegisterInstancesPaginated(_ input: DescribeRegisterInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RegisterInstanceInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeRegisterInstances, logger: logger, on: eventLoop)
    }

    /// 查询托管实例
    ///
    /// 接口用于查询被托管的实例信息。
    @inlinable @discardableResult
    public func describeRegisterInstancesPaginated(_ input: DescribeRegisterInstancesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRegisterInstancesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRegisterInstances, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询托管实例
    ///
    /// 接口用于查询被托管的实例信息。
    ///
    /// - Returns: `AsyncSequence`s of ``RegisterInstanceInfo`` and ``DescribeRegisterInstancesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRegisterInstancesPaginator(_ input: DescribeRegisterInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRegisterInstancesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRegisterInstances, logger: logger, on: eventLoop)
    }
}
