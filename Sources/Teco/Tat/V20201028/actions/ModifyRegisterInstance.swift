//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tat {
    /// ModifyRegisterInstance请求参数结构体
    public struct ModifyRegisterInstanceRequest: TCRequest {
        /// 实例ID。
        public let instanceId: String

        /// 实例名。
        public let instanceName: String

        public init(instanceId: String, instanceName: String) {
            self.instanceId = instanceId
            self.instanceName = instanceName
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
        }
    }

    /// ModifyRegisterInstance返回参数结构体
    public struct ModifyRegisterInstanceResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改托管实例
    ///
    /// 接口用于修改托管实例信息。
    @inlinable @discardableResult
    public func modifyRegisterInstance(_ input: ModifyRegisterInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRegisterInstanceResponse> {
        self.client.execute(action: "ModifyRegisterInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改托管实例
    ///
    /// 接口用于修改托管实例信息。
    @inlinable @discardableResult
    public func modifyRegisterInstance(_ input: ModifyRegisterInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRegisterInstanceResponse {
        try await self.client.execute(action: "ModifyRegisterInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改托管实例
    ///
    /// 接口用于修改托管实例信息。
    @inlinable @discardableResult
    public func modifyRegisterInstance(instanceId: String, instanceName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRegisterInstanceResponse> {
        self.modifyRegisterInstance(.init(instanceId: instanceId, instanceName: instanceName), region: region, logger: logger, on: eventLoop)
    }

    /// 修改托管实例
    ///
    /// 接口用于修改托管实例信息。
    @inlinable @discardableResult
    public func modifyRegisterInstance(instanceId: String, instanceName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRegisterInstanceResponse {
        try await self.modifyRegisterInstance(.init(instanceId: instanceId, instanceName: instanceName), region: region, logger: logger, on: eventLoop)
    }
}
