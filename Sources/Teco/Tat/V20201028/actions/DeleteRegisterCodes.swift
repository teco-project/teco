//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tat {
    /// DeleteRegisterCodes请求参数结构体
    public struct DeleteRegisterCodesRequest: TCRequest {
        /// 注册码ID列表。限制输入的注册码ID数量大于0小于100。
        public let registerCodeIds: [String]

        public init(registerCodeIds: [String]) {
            self.registerCodeIds = registerCodeIds
        }

        enum CodingKeys: String, CodingKey {
            case registerCodeIds = "RegisterCodeIds"
        }
    }

    /// DeleteRegisterCodes返回参数结构体
    public struct DeleteRegisterCodesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 批量删除注册码
    ///
    /// 此接口用于批量删除注册码。
    @inlinable @discardableResult
    public func deleteRegisterCodes(_ input: DeleteRegisterCodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRegisterCodesResponse> {
        self.client.execute(action: "DeleteRegisterCodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量删除注册码
    ///
    /// 此接口用于批量删除注册码。
    @inlinable @discardableResult
    public func deleteRegisterCodes(_ input: DeleteRegisterCodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRegisterCodesResponse {
        try await self.client.execute(action: "DeleteRegisterCodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量删除注册码
    ///
    /// 此接口用于批量删除注册码。
    @inlinable @discardableResult
    public func deleteRegisterCodes(registerCodeIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRegisterCodesResponse> {
        self.deleteRegisterCodes(.init(registerCodeIds: registerCodeIds), region: region, logger: logger, on: eventLoop)
    }

    /// 批量删除注册码
    ///
    /// 此接口用于批量删除注册码。
    @inlinable @discardableResult
    public func deleteRegisterCodes(registerCodeIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRegisterCodesResponse {
        try await self.deleteRegisterCodes(.init(registerCodeIds: registerCodeIds), region: region, logger: logger, on: eventLoop)
    }
}
