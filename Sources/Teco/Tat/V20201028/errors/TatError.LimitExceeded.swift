//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTatError {
    public struct LimitExceeded: TCTatErrorType {
        enum Code: String {
            case filterValueExceeded = "LimitExceeded.FilterValueExceeded"
            case other = "LimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var filterValueExceeded: LimitExceeded {
            LimitExceeded(.filterValueExceeded)
        }
        
        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }
        
        public func asTatError() -> TCTatError {
            let code: TCTatError.Code
            switch self.error {
            case .filterValueExceeded: 
                code = .limitExceeded_FilterValueExceeded
            case .other: 
                code = .limitExceeded
            }
            return TCTatError(code, context: self.context)
        }
    }
}
