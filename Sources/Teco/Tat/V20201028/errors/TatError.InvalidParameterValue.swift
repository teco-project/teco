//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTatError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case agentUnsupportedCommandType = "InvalidParameterValue.AgentUnsupportedCommandType"
            case commandContentInvalid = "InvalidParameterValue.CommandContentInvalid"
            case commandNameDuplicated = "InvalidParameterValue.CommandNameDuplicated"
            case inconsistentInstance = "InvalidParameterValue.InconsistentInstance"
            case instanceIsNotRelatedToInvocation = "InvalidParameterValue.InstanceIsNotRelatedToInvocation"
            case invalidCommandId = "InvalidParameterValue.InvalidCommandId"
            case invalidCommandName = "InvalidParameterValue.InvalidCommandName"
            case invalidContent = "InvalidParameterValue.InvalidContent"
            case invalidCronExpression = "InvalidParameterValue.InvalidCronExpression"
            case invalidFilter = "InvalidParameterValue.InvalidFilter"
            case invalidInstanceId = "InvalidParameterValue.InvalidInstanceId"
            case invalidInvocationId = "InvalidParameterValue.InvalidInvocationId"
            case invalidInvocationTaskId = "InvalidParameterValue.InvalidInvocationTaskId"
            case invalidInvokerId = "InvalidParameterValue.InvalidInvokerId"
            case invalidOutputCOSBucketUrl = "InvalidParameterValue.InvalidOutputCOSBucketUrl"
            case invalidOutputCOSKeyPrefix = "InvalidParameterValue.InvalidOutputCOSKeyPrefix"
            case invalidUsername = "InvalidParameterValue.InvalidUsername"
            case invalidWorkingDirectory = "InvalidParameterValue.InvalidWorkingDirectory"
            case lackOfParameterInfo = "InvalidParameterValue.LackOfParameterInfo"
            case lackOfParameters = "InvalidParameterValue.LackOfParameters"
            case limitExceeded = "InvalidParameterValue.LimitExceeded"
            case parameterDisabled = "InvalidParameterValue.ParameterDisabled"
            case parameterInvalidJsonFormat = "InvalidParameterValue.ParameterInvalidJsonFormat"
            case parameterKeyContainsInvalidChar = "InvalidParameterValue.ParameterKeyContainsInvalidChar"
            case parameterKeyDuplicated = "InvalidParameterValue.ParameterKeyDuplicated"
            case parameterKeyLenExceeded = "InvalidParameterValue.ParameterKeyLenExceeded"
            case parameterNumberExceeded = "InvalidParameterValue.ParameterNumberExceeded"
            case parameterValueNotString = "InvalidParameterValue.ParameterValueNotString"
            case range = "InvalidParameterValue.Range"
            case supportParametersOnlyIfEnableParameter = "InvalidParameterValue.SupportParametersOnlyIfEnableParameter"
            case tooLong = "InvalidParameterValue.TooLong"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// Agent不支持此命令类型。
        public static var agentUnsupportedCommandType: InvalidParameterValue {
            InvalidParameterValue(.agentUnsupportedCommandType)
        }
        
        /// Command 内容无效。
        public static var commandContentInvalid: InvalidParameterValue {
            InvalidParameterValue(.commandContentInvalid)
        }
        
        /// Command 名称重复。
        public static var commandNameDuplicated: InvalidParameterValue {
            InvalidParameterValue(.commandNameDuplicated)
        }
        
        /// 实例类型不一致。
        public static var inconsistentInstance: InvalidParameterValue {
            InvalidParameterValue(.inconsistentInstance)
        }
        
        /// 实例ID与执行活动无关。
        public static var instanceIsNotRelatedToInvocation: InvalidParameterValue {
            InvalidParameterValue(.instanceIsNotRelatedToInvocation)
        }
        
        /// CommandId 无效。
        public static var invalidCommandId: InvalidParameterValue {
            InvalidParameterValue(.invalidCommandId)
        }
        
        /// Command 名称无效。
        public static var invalidCommandName: InvalidParameterValue {
            InvalidParameterValue(.invalidCommandName)
        }
        
        /// 命令内容无效。
        public static var invalidContent: InvalidParameterValue {
            InvalidParameterValue(.invalidContent)
        }
        
        /// Crontab 表达式无效。
        public static var invalidCronExpression: InvalidParameterValue {
            InvalidParameterValue(.invalidCronExpression)
        }
        
        /// Filter 无效。
        public static var invalidFilter: InvalidParameterValue {
            InvalidParameterValue(.invalidFilter)
        }
        
        /// 实例ID无效。
        public static var invalidInstanceId: InvalidParameterValue {
            InvalidParameterValue(.invalidInstanceId)
        }
        
        /// 不合法的执行活动ID。
        public static var invalidInvocationId: InvalidParameterValue {
            InvalidParameterValue(.invalidInvocationId)
        }
        
        /// 不合法的执行任务ID。
        public static var invalidInvocationTaskId: InvalidParameterValue {
            InvalidParameterValue(.invalidInvocationTaskId)
        }
        
        /// InvokerId 无效。
        public static var invalidInvokerId: InvalidParameterValue {
            InvalidParameterValue(.invalidInvokerId)
        }
        
        /// OutputCOSBucketUrl 无效。
        public static var invalidOutputCOSBucketUrl: InvalidParameterValue {
            InvalidParameterValue(.invalidOutputCOSBucketUrl)
        }
        
        /// OutputCOSKeyPrefix 无效。
        public static var invalidOutputCOSKeyPrefix: InvalidParameterValue {
            InvalidParameterValue(.invalidOutputCOSKeyPrefix)
        }
        
        public static var invalidUsername: InvalidParameterValue {
            InvalidParameterValue(.invalidUsername)
        }
        
        /// 命令执行路径不合法。
        public static var invalidWorkingDirectory: InvalidParameterValue {
            InvalidParameterValue(.invalidWorkingDirectory)
        }
        
        /// 已启用自定义参数功能，但缺失自定义参数信息。
        public static var lackOfParameterInfo: InvalidParameterValue {
            InvalidParameterValue(.lackOfParameterInfo)
        }
        
        /// 未提供 Parameters 信息。
        public static var lackOfParameters: InvalidParameterValue {
            InvalidParameterValue(.lackOfParameters)
        }
        
        /// 超过参数限制。
        public static var limitExceeded: InvalidParameterValue {
            InvalidParameterValue(.limitExceeded)
        }
        
        /// 未启用自定义参数功能。
        public static var parameterDisabled: InvalidParameterValue {
            InvalidParameterValue(.parameterDisabled)
        }
        
        /// 参数为非法 json string 格式。
        public static var parameterInvalidJsonFormat: InvalidParameterValue {
            InvalidParameterValue(.parameterInvalidJsonFormat)
        }
        
        /// 参数 Key 包含非法字符。
        public static var parameterKeyContainsInvalidChar: InvalidParameterValue {
            InvalidParameterValue(.parameterKeyContainsInvalidChar)
        }
        
        /// 参数 Key 重复。
        public static var parameterKeyDuplicated: InvalidParameterValue {
            InvalidParameterValue(.parameterKeyDuplicated)
        }
        
        /// 参数 Key 过长。
        public static var parameterKeyLenExceeded: InvalidParameterValue {
            InvalidParameterValue(.parameterKeyLenExceeded)
        }
        
        /// 参数数目过多。
        public static var parameterNumberExceeded: InvalidParameterValue {
            InvalidParameterValue(.parameterNumberExceeded)
        }
        
        /// 参数 Value 非 string 类型。
        public static var parameterValueNotString: InvalidParameterValue {
            InvalidParameterValue(.parameterValueNotString)
        }
        
        /// 参数取值范围不合法。
        public static var range: InvalidParameterValue {
            InvalidParameterValue(.range)
        }
        
        /// 未启用自定义参数功能。
        public static var supportParametersOnlyIfEnableParameter: InvalidParameterValue {
            InvalidParameterValue(.supportParametersOnlyIfEnableParameter)
        }
        
        /// 长度超过限制。
        public static var tooLong: InvalidParameterValue {
            InvalidParameterValue(.tooLong)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCTatError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCTatError.InvalidParameterValue, rhs: TCTatError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTatError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTatError.InvalidParameterValue {
    public func toTatError() -> TCTatError {
        guard let code = TCTatError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTatError(code, context: self.context)
    }
}