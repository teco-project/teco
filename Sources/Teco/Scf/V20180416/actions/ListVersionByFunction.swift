//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Scf {
    /// 查询函数版本
    ///
    /// 该接口根据传入的参数查询函数的版本。
    @inlinable
    public func listVersionByFunction(_ input: ListVersionByFunctionRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ListVersionByFunctionResponse > {
        self.client.execute(action: "ListVersionByFunction", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询函数版本
    ///
    /// 该接口根据传入的参数查询函数的版本。
    @inlinable
    public func listVersionByFunction(_ input: ListVersionByFunctionRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListVersionByFunctionResponse {
        try await self.client.execute(action: "ListVersionByFunction", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ListVersionByFunction请求参数结构体
    public struct ListVersionByFunctionRequest: TCRequestModel {
        /// 函数名
        public let functionName: String
        
        /// 函数所在命名空间
        public let namespace: String?
        
        /// 数据偏移量，默认值为 0
        public let offset: UInt64?
        
        /// 返回数据长度，默认值为 20
        public let limit: UInt64?
        
        /// 以升序还是降序的方式返回结果，可选值 ASC 和 DESC
        public let order: String?
        
        /// 根据哪个字段进行返回结果排序,支持以下字段：AddTime, ModTime
        public let orderBy: String?
        
        public init (functionName: String, namespace: String?, offset: UInt64?, limit: UInt64?, order: String?, orderBy: String?) {
            self.functionName = functionName
            self.namespace = namespace
            self.offset = offset
            self.limit = limit
            self.order = order
            self.orderBy = orderBy
        }
        
        enum CodingKeys: String, CodingKey {
            case functionName = "FunctionName"
            case namespace = "Namespace"
            case offset = "Offset"
            case limit = "Limit"
            case order = "Order"
            case orderBy = "OrderBy"
        }
    }
    
    /// ListVersionByFunction返回参数结构体
    public struct ListVersionByFunctionResponse: TCResponseModel {
        /// 函数版本。
        public let functionVersion: [String]
        
        /// 函数版本列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versions: [FunctionVersion]?
        
        /// 函数版本总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case functionVersion = "FunctionVersion"
            case versions = "Versions"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
}