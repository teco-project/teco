//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Scf {
    /// GetAsyncEventStatus请求参数结构体
    public struct GetAsyncEventStatusRequest: TCRequestModel {
        /// 异步执行请求 id
        public let invokeRequestId: String

        public init(invokeRequestId: String) {
            self.invokeRequestId = invokeRequestId
        }

        enum CodingKeys: String, CodingKey {
            case invokeRequestId = "InvokeRequestId"
        }
    }

    /// GetAsyncEventStatus返回参数结构体
    public struct GetAsyncEventStatusResponse: TCResponseModel {
        /// 异步事件状态
        public let result: AsyncEventStatus

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 获取函数异步事件状态
    ///
    /// 获取函数异步执行事件状态，事件状态保留 3 * 24 小时（从事件完成开始计时）。
    @inlinable
    public func getAsyncEventStatus(_ input: GetAsyncEventStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAsyncEventStatusResponse> {
        self.client.execute(action: "GetAsyncEventStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取函数异步事件状态
    ///
    /// 获取函数异步执行事件状态，事件状态保留 3 * 24 小时（从事件完成开始计时）。
    @inlinable
    public func getAsyncEventStatus(_ input: GetAsyncEventStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAsyncEventStatusResponse {
        try await self.client.execute(action: "GetAsyncEventStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取函数异步事件状态
    ///
    /// 获取函数异步执行事件状态，事件状态保留 3 * 24 小时（从事件完成开始计时）。
    @inlinable
    public func getAsyncEventStatus(invokeRequestId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAsyncEventStatusResponse> {
        let input = GetAsyncEventStatusRequest(invokeRequestId: invokeRequestId)
        return self.client.execute(action: "GetAsyncEventStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取函数异步事件状态
    ///
    /// 获取函数异步执行事件状态，事件状态保留 3 * 24 小时（从事件完成开始计时）。
    @inlinable
    public func getAsyncEventStatus(invokeRequestId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAsyncEventStatusResponse {
        let input = GetAsyncEventStatusRequest(invokeRequestId: invokeRequestId)
        return try await self.client.execute(action: "GetAsyncEventStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
