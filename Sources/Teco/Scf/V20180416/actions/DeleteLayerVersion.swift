//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Scf {
    /// DeleteLayerVersion请求参数结构体
    public struct DeleteLayerVersionRequest: TCRequestModel {
        /// 层名称
        public let layerName: String

        /// 版本号
        public let layerVersion: Int64

        public init(layerName: String, layerVersion: Int64) {
            self.layerName = layerName
            self.layerVersion = layerVersion
        }

        enum CodingKeys: String, CodingKey {
            case layerName = "LayerName"
            case layerVersion = "LayerVersion"
        }
    }

    /// DeleteLayerVersion返回参数结构体
    public struct DeleteLayerVersionResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除层版本
    ///
    /// 删除指定层的指定版本，被删除的版本无法再关联到函数上，但不会影响正在引用这个层的函数。
    @inlinable @discardableResult
    public func deleteLayerVersion(_ input: DeleteLayerVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLayerVersionResponse> {
        self.client.execute(action: "DeleteLayerVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除层版本
    ///
    /// 删除指定层的指定版本，被删除的版本无法再关联到函数上，但不会影响正在引用这个层的函数。
    @inlinable @discardableResult
    public func deleteLayerVersion(_ input: DeleteLayerVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLayerVersionResponse {
        try await self.client.execute(action: "DeleteLayerVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除层版本
    ///
    /// 删除指定层的指定版本，被删除的版本无法再关联到函数上，但不会影响正在引用这个层的函数。
    @inlinable @discardableResult
    public func deleteLayerVersion(layerName: String, layerVersion: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLayerVersionResponse> {
        self.deleteLayerVersion(DeleteLayerVersionRequest(layerName: layerName, layerVersion: layerVersion), region: region, logger: logger, on: eventLoop)
    }

    /// 删除层版本
    ///
    /// 删除指定层的指定版本，被删除的版本无法再关联到函数上，但不会影响正在引用这个层的函数。
    @inlinable @discardableResult
    public func deleteLayerVersion(layerName: String, layerVersion: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLayerVersionResponse {
        try await self.deleteLayerVersion(DeleteLayerVersionRequest(layerName: layerName, layerVersion: layerVersion), region: region, logger: logger, on: eventLoop)
    }
}
