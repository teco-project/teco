//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Scf {
    /// UpdateTriggerStatus请求参数结构体
    public struct UpdateTriggerStatusRequest: TCRequestModel {
        /// 触发器的初始是能状态OPEN表示开启 CLOSE表示关闭
        public let enable: String

        /// 函数名称
        public let functionName: String

        /// 触发器名称
        public let triggerName: String

        /// 触发器类型
        public let type: String

        /// 函数的版本，默认为 $LATEST，建议填写 [$DEFAULT](https://cloud.tencent.com/document/product/583/36149#.E9.BB.98.E8.AE.A4.E5.88.AB.E5.90.8D)方便后续进行版本的灰度发布。
        public let qualifier: String?

        /// 函数的命名空间
        public let namespace: String?

        /// 如果更新的触发器类型为 COS 触发器，该字段为必填值，存放 JSON 格式的数据 {"event":"cos:ObjectCreated:*"}，数据内容和 SetTrigger 接口中该字段的格式相同；如果更新的触发器类型为定时触发器或 CMQ 触发器，可以不指定该字段
        public let triggerDesc: String?

        public init(enable: String, functionName: String, triggerName: String, type: String, qualifier: String? = nil, namespace: String? = nil, triggerDesc: String? = nil) {
            self.enable = enable
            self.functionName = functionName
            self.triggerName = triggerName
            self.type = type
            self.qualifier = qualifier
            self.namespace = namespace
            self.triggerDesc = triggerDesc
        }

        enum CodingKeys: String, CodingKey {
            case enable = "Enable"
            case functionName = "FunctionName"
            case triggerName = "TriggerName"
            case type = "Type"
            case qualifier = "Qualifier"
            case namespace = "Namespace"
            case triggerDesc = "TriggerDesc"
        }
    }

    /// UpdateTriggerStatus返回参数结构体
    public struct UpdateTriggerStatusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新触发器状态
    ///
    /// 更新触发器状态的值
    @inlinable @discardableResult
    public func updateTriggerStatus(_ input: UpdateTriggerStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateTriggerStatusResponse> {
        self.client.execute(action: "UpdateTriggerStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新触发器状态
    ///
    /// 更新触发器状态的值
    @inlinable @discardableResult
    public func updateTriggerStatus(_ input: UpdateTriggerStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateTriggerStatusResponse {
        try await self.client.execute(action: "UpdateTriggerStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新触发器状态
    ///
    /// 更新触发器状态的值
    @inlinable @discardableResult
    public func updateTriggerStatus(enable: String, functionName: String, triggerName: String, type: String, qualifier: String? = nil, namespace: String? = nil, triggerDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateTriggerStatusResponse> {
        self.updateTriggerStatus(.init(enable: enable, functionName: functionName, triggerName: triggerName, type: type, qualifier: qualifier, namespace: namespace, triggerDesc: triggerDesc), region: region, logger: logger, on: eventLoop)
    }

    /// 更新触发器状态
    ///
    /// 更新触发器状态的值
    @inlinable @discardableResult
    public func updateTriggerStatus(enable: String, functionName: String, triggerName: String, type: String, qualifier: String? = nil, namespace: String? = nil, triggerDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateTriggerStatusResponse {
        try await self.updateTriggerStatus(.init(enable: enable, functionName: functionName, triggerName: triggerName, type: type, qualifier: qualifier, namespace: namespace, triggerDesc: triggerDesc), region: region, logger: logger, on: eventLoop)
    }
}
