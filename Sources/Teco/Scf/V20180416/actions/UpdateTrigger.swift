//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Scf {
    /// UpdateTrigger请求参数结构体
    public struct UpdateTriggerRequest: TCRequest {
        /// 函数名称
        public let functionName: String

        /// 触发器名称
        public let triggerName: String

        /// 触发器类型
        public let type: String

        /// 触发器开启或关闭，传参为OPEN为开启，CLOSE为关闭
        public let enable: String?

        /// 函数的版本，默认为 $LATEST，建议填写 [$DEFAULT](https://cloud.tencent.com/document/product/583/36149#.E9.BB.98.E8.AE.A4.E5.88.AB.E5.90.8D)方便后续进行版本的灰度发布。
        public let qualifier: String?

        /// 函数的命名空间
        public let namespace: String?

        /// TriggerDesc参数
        public let triggerDesc: String?

        /// 触发器描述
        public let description: String?

        /// 用户附加信息
        public let customArgument: String?

        public init(functionName: String, triggerName: String, type: String, enable: String? = nil, qualifier: String? = nil, namespace: String? = nil, triggerDesc: String? = nil, description: String? = nil, customArgument: String? = nil) {
            self.functionName = functionName
            self.triggerName = triggerName
            self.type = type
            self.enable = enable
            self.qualifier = qualifier
            self.namespace = namespace
            self.triggerDesc = triggerDesc
            self.description = description
            self.customArgument = customArgument
        }

        enum CodingKeys: String, CodingKey {
            case functionName = "FunctionName"
            case triggerName = "TriggerName"
            case type = "Type"
            case enable = "Enable"
            case qualifier = "Qualifier"
            case namespace = "Namespace"
            case triggerDesc = "TriggerDesc"
            case description = "Description"
            case customArgument = "CustomArgument"
        }
    }

    /// UpdateTrigger返回参数结构体
    public struct UpdateTriggerResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新触发器
    ///
    /// 支持触发器配置更新。
    /// 默认接口请求频率限制：20次/秒
    ///
    /// 注意：目前只支持timer触发器和ckafka触发器更新！
    ///
    /// timer触发器和ckafka触发器支持更新字段有：Enable、TriggerDesc、Description、CustomArgument。
    ///
    /// timer触发器TriggerDesc支持5段式和7段式的更新。
    ///
    /// ckafka触发器TriggerDesc支持Retry、MaxMsgNum、TimeOut参数更新，不传值表示原值不变，传值不能为空。
    ///
    /// Enable 触发器开启或关闭，传参为OPEN为开启，CLOSE为关闭。不传值表示原值不变，传值不能为空。
    ///
    /// Description 触发器描述，不传值保持原值不变，传值为空则为空。
    ///
    /// CustomArgument 触发器用户附加信息（注意：只有timer触发器展示），不传值保持原值不变，传值为空则为空。
    @inlinable @discardableResult
    public func updateTrigger(_ input: UpdateTriggerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateTriggerResponse> {
        self.client.execute(action: "UpdateTrigger", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新触发器
    ///
    /// 支持触发器配置更新。
    /// 默认接口请求频率限制：20次/秒
    ///
    /// 注意：目前只支持timer触发器和ckafka触发器更新！
    ///
    /// timer触发器和ckafka触发器支持更新字段有：Enable、TriggerDesc、Description、CustomArgument。
    ///
    /// timer触发器TriggerDesc支持5段式和7段式的更新。
    ///
    /// ckafka触发器TriggerDesc支持Retry、MaxMsgNum、TimeOut参数更新，不传值表示原值不变，传值不能为空。
    ///
    /// Enable 触发器开启或关闭，传参为OPEN为开启，CLOSE为关闭。不传值表示原值不变，传值不能为空。
    ///
    /// Description 触发器描述，不传值保持原值不变，传值为空则为空。
    ///
    /// CustomArgument 触发器用户附加信息（注意：只有timer触发器展示），不传值保持原值不变，传值为空则为空。
    @inlinable @discardableResult
    public func updateTrigger(_ input: UpdateTriggerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateTriggerResponse {
        try await self.client.execute(action: "UpdateTrigger", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新触发器
    ///
    /// 支持触发器配置更新。
    /// 默认接口请求频率限制：20次/秒
    ///
    /// 注意：目前只支持timer触发器和ckafka触发器更新！
    ///
    /// timer触发器和ckafka触发器支持更新字段有：Enable、TriggerDesc、Description、CustomArgument。
    ///
    /// timer触发器TriggerDesc支持5段式和7段式的更新。
    ///
    /// ckafka触发器TriggerDesc支持Retry、MaxMsgNum、TimeOut参数更新，不传值表示原值不变，传值不能为空。
    ///
    /// Enable 触发器开启或关闭，传参为OPEN为开启，CLOSE为关闭。不传值表示原值不变，传值不能为空。
    ///
    /// Description 触发器描述，不传值保持原值不变，传值为空则为空。
    ///
    /// CustomArgument 触发器用户附加信息（注意：只有timer触发器展示），不传值保持原值不变，传值为空则为空。
    @inlinable @discardableResult
    public func updateTrigger(functionName: String, triggerName: String, type: String, enable: String? = nil, qualifier: String? = nil, namespace: String? = nil, triggerDesc: String? = nil, description: String? = nil, customArgument: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateTriggerResponse> {
        self.updateTrigger(.init(functionName: functionName, triggerName: triggerName, type: type, enable: enable, qualifier: qualifier, namespace: namespace, triggerDesc: triggerDesc, description: description, customArgument: customArgument), region: region, logger: logger, on: eventLoop)
    }

    /// 更新触发器
    ///
    /// 支持触发器配置更新。
    /// 默认接口请求频率限制：20次/秒
    ///
    /// 注意：目前只支持timer触发器和ckafka触发器更新！
    ///
    /// timer触发器和ckafka触发器支持更新字段有：Enable、TriggerDesc、Description、CustomArgument。
    ///
    /// timer触发器TriggerDesc支持5段式和7段式的更新。
    ///
    /// ckafka触发器TriggerDesc支持Retry、MaxMsgNum、TimeOut参数更新，不传值表示原值不变，传值不能为空。
    ///
    /// Enable 触发器开启或关闭，传参为OPEN为开启，CLOSE为关闭。不传值表示原值不变，传值不能为空。
    ///
    /// Description 触发器描述，不传值保持原值不变，传值为空则为空。
    ///
    /// CustomArgument 触发器用户附加信息（注意：只有timer触发器展示），不传值保持原值不变，传值为空则为空。
    @inlinable @discardableResult
    public func updateTrigger(functionName: String, triggerName: String, type: String, enable: String? = nil, qualifier: String? = nil, namespace: String? = nil, triggerDesc: String? = nil, description: String? = nil, customArgument: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateTriggerResponse {
        try await self.updateTrigger(.init(functionName: functionName, triggerName: triggerName, type: type, enable: enable, qualifier: qualifier, namespace: namespace, triggerDesc: triggerDesc, description: description, customArgument: customArgument), region: region, logger: logger, on: eventLoop)
    }
}
