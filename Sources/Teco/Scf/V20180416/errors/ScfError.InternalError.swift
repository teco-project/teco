//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCScfError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case apiGateway = "InternalError.ApiGateway"
            case ckafka = "InternalError.Ckafka"
            case cmq = "InternalError.Cmq"
            case cos = "InternalError.Cos"
            case es = "InternalError.ES"
            case exception = "InternalError.Exception"
            case getRoleError = "InternalError.GetRoleError"
            case system = "InternalError.System"
            case systemError = "InternalError.SystemError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 创建apigw触发器内部错误。
        public static var apiGateway: InternalError {
            InternalError(.apiGateway)
        }
        
        /// ckafka接口失败。
        public static var ckafka: InternalError {
            InternalError(.ckafka)
        }
        
        /// 删除cmq触发器失败。
        public static var cmq: InternalError {
            InternalError(.cmq)
        }
        
        /// 更新触发器失败。
        public static var cos: InternalError {
            InternalError(.cos)
        }
        
        /// ES错误。
        public static var es: InternalError {
            InternalError(.es)
        }
        
        /// 内部服务异常。
        public static var exception: InternalError {
            InternalError(.exception)
        }
        
        /// 内部服务错误。
        public static var getRoleError: InternalError {
            InternalError(.getRoleError)
        }
        
        /// 内部系统错误。
        public static var system: InternalError {
            InternalError(.system)
        }
        
        /// 内部服务错误。
        public static var systemError: InternalError {
            InternalError(.systemError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCScfError.InternalError: Equatable {
    public static func == (lhs: TCScfError.InternalError, rhs: TCScfError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCScfError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCScfError.InternalError {
    /// - Returns: ``TCScfError`` that holds the same error and context.
    public func toScfError() -> TCScfError {
        guard let code = TCScfError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCScfError(code, context: self.context)
    }
}

extension TCScfError.InternalError {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
