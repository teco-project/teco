//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCScfError {
    public struct InternalError: TCScfErrorType {
        enum Code: String {
            case apiGateway = "InternalError.ApiGateway"
            case ckafka = "InternalError.Ckafka"
            case cmq = "InternalError.Cmq"
            case cos = "InternalError.Cos"
            case es = "InternalError.ES"
            case exception = "InternalError.Exception"
            case getRoleError = "InternalError.GetRoleError"
            case system = "InternalError.System"
            case systemError = "InternalError.SystemError"
            case other = "InternalError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 创建apigw触发器内部错误。
        public static var apiGateway: InternalError {
            InternalError(.apiGateway)
        }

        /// ckafka接口失败。
        public static var ckafka: InternalError {
            InternalError(.ckafka)
        }

        /// 删除cmq触发器失败。
        public static var cmq: InternalError {
            InternalError(.cmq)
        }

        /// 更新触发器失败。
        public static var cos: InternalError {
            InternalError(.cos)
        }

        /// ES错误。
        public static var es: InternalError {
            InternalError(.es)
        }

        /// 内部服务异常。
        public static var exception: InternalError {
            InternalError(.exception)
        }

        /// 内部服务错误。
        public static var getRoleError: InternalError {
            InternalError(.getRoleError)
        }

        /// 内部系统错误。
        public static var system: InternalError {
            InternalError(.system)
        }

        /// 内部服务错误。
        public static var systemError: InternalError {
            InternalError(.systemError)
        }

        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }

        public func asScfError() -> TCScfError {
            let code: TCScfError.Code
            switch self.error {
            case .apiGateway:
                code = .internalError_ApiGateway
            case .ckafka:
                code = .internalError_Ckafka
            case .cmq:
                code = .internalError_Cmq
            case .cos:
                code = .internalError_Cos
            case .es:
                code = .internalError_ES
            case .exception:
                code = .internalError_Exception
            case .getRoleError:
                code = .internalError_GetRoleError
            case .system:
                code = .internalError_System
            case .systemError:
                code = .internalError_SystemError
            case .other:
                code = .internalError
            }
            return TCScfError(code, context: self.context)
        }
    }
}
