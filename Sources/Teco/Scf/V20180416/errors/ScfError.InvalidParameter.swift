//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCScfError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case cls = "InvalidParameter.Cls"
            case functionName = "InvalidParameter.FunctionName"
            case paramError = "InvalidParameter.ParamError"
            case payload = "InvalidParameter.Payload"
            case requestTooLarge = "InvalidParameter.RequestTooLarge"
            case roleCheck = "InvalidParameter.RoleCheck"
            case routingConfig = "InvalidParameter.RoutingConfig"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 请传递有效的日志相关参数。
        public static var cls: InvalidParameter {
            InvalidParameter(.cls)
        }
        
        /// FunctionName取值与规范不符，请修正后再试。可参考：https://tencentcs.com/5jXKFnBW。
        public static var functionName: InvalidParameter {
            InvalidParameter(.functionName)
        }
        
        /// 创建函数传参异常。
        public static var paramError: InvalidParameter {
            InvalidParameter(.paramError)
        }
        
        /// 请求参数不合法。
        public static var payload: InvalidParameter {
            InvalidParameter(.payload)
        }
        
        /// 请求大小超限，请参照官方文档
        public static var requestTooLarge: InvalidParameter {
            InvalidParameter(.requestTooLarge)
        }
        
        /// RoleCheck 传参有误。
        public static var roleCheck: InvalidParameter {
            InvalidParameter(.roleCheck)
        }
        
        /// RoutingConfig参数传入错误。
        public static var routingConfig: InvalidParameter {
            InvalidParameter(.routingConfig)
        }
    }
}

extension TCScfError.InvalidParameter: Equatable {
    public static func == (lhs: TCScfError.InvalidParameter, rhs: TCScfError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCScfError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCScfError.InvalidParameter {
    /// - Returns: ``TCScfError`` that holds the same error and context.
    public func toScfError() -> TCScfError {
        guard let code = TCScfError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCScfError(code, context: self.context)
    }
}

extension TCScfError.InvalidParameter {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
