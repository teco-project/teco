//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCScfError {
    public struct UnauthorizedOperation: TCErrorType {
        enum Code: String {
            case cam = "UnauthorizedOperation.CAM"
            case codeSecret = "UnauthorizedOperation.CodeSecret"
            case createTrigger = "UnauthorizedOperation.CreateTrigger"
            case deleteFunction = "UnauthorizedOperation.DeleteFunction"
            case deleteTrigger = "UnauthorizedOperation.DeleteTrigger"
            case notMC = "UnauthorizedOperation.NotMC"
            case region = "UnauthorizedOperation.Region"
            case role = "UnauthorizedOperation.Role"
            case tempCosAppid = "UnauthorizedOperation.TempCosAppid"
            case updateFunctionCode = "UnauthorizedOperation.UpdateFunctionCode"
            case other = "UnauthorizedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// CAM鉴权失败。
        public static var cam: UnauthorizedOperation {
            UnauthorizedOperation(.cam)
        }
        
        /// 无访问代码权限。
        public static var codeSecret: UnauthorizedOperation {
            UnauthorizedOperation(.codeSecret)
        }
        
        /// 没有权限。
        public static var createTrigger: UnauthorizedOperation {
            UnauthorizedOperation(.createTrigger)
        }
        
        /// 没有权限的操作。
        public static var deleteFunction: UnauthorizedOperation {
            UnauthorizedOperation(.deleteFunction)
        }
        
        /// 没有权限。
        public static var deleteTrigger: UnauthorizedOperation {
            UnauthorizedOperation(.deleteTrigger)
        }
        
        /// 不是从控制台调用的该接口。
        public static var notMC: UnauthorizedOperation {
            UnauthorizedOperation(.notMC)
        }
        
        /// Region错误。
        public static var region: UnauthorizedOperation {
            UnauthorizedOperation(.region)
        }
        
        /// 没有权限访问您的Cos资源。
        public static var role: UnauthorizedOperation {
            UnauthorizedOperation(.role)
        }
        
        /// TempCos的Appid和请求账户的APPID不一致。
        public static var tempCosAppid: UnauthorizedOperation {
            UnauthorizedOperation(.tempCosAppid)
        }
        
        /// 无法进行此操作。
        public static var updateFunctionCode: UnauthorizedOperation {
            UnauthorizedOperation(.updateFunctionCode)
        }
        
        /// 未授权操作。
        public static var other: UnauthorizedOperation {
            UnauthorizedOperation(.other)
        }
    }
}

extension TCScfError.UnauthorizedOperation: Equatable {
    public static func == (lhs: TCScfError.UnauthorizedOperation, rhs: TCScfError.UnauthorizedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCScfError.UnauthorizedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCScfError.UnauthorizedOperation {
    /// - Returns: ``TCScfError`` that holds the same error and context.
    public func toScfError() -> TCScfError {
        guard let code = TCScfError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCScfError(code, context: self.context)
    }
}

extension TCScfError.UnauthorizedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
