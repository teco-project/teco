//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCScfError {
    public struct ResourceInsufficient: TCScfErrorType {
        enum Code: String {
            case cos = "ResourceInsufficient.COS"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// COS资源不足。
        public static var cos: ResourceInsufficient {
            ResourceInsufficient(.cos)
        }
        
        public func asScfError() -> TCScfError {
            let code: TCScfError.Code
            switch self.error {
            case .cos: 
                code = .resourceInsufficient_COS
            }
            return TCScfError(code, context: self.context)
        }
    }
}
