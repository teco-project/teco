//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCScfError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case apiGateway = "FailedOperation.ApiGateway"
            case apigw = "FailedOperation.Apigw"
            case apmConfigInstanceId = "FailedOperation.ApmConfigInstanceId"
            case asyncEventStatus = "FailedOperation.AsyncEventStatus"
            case authFailure = "FailedOperation.AuthFailure"
            case callRoleFailed = "FailedOperation.CallRoleFailed"
            case copyAsyncRun = "FailedOperation.CopyAsyncRun"
            case copyFailed = "FailedOperation.CopyFailed"
            case copyFunction = "FailedOperation.CopyFunction"
            case cos = "FailedOperation.Cos"
            case createAlias = "FailedOperation.CreateAlias"
            case createFunction = "FailedOperation.CreateFunction"
            case createNamespace = "FailedOperation.CreateNamespace"
            case createTrigger = "FailedOperation.CreateTrigger"
            case debugModeStatus = "FailedOperation.DebugModeStatus"
            case debugModeUpdateTimeOutFail = "FailedOperation.DebugModeUpdateTimeOutFail"
            case deleteAlias = "FailedOperation.DeleteAlias"
            case deleteFunction = "FailedOperation.DeleteFunction"
            case deleteLayerVersion = "FailedOperation.DeleteLayerVersion"
            case deleteNamespace = "FailedOperation.DeleteNamespace"
            case deleteTrigger = "FailedOperation.DeleteTrigger"
            case functionNameStatusError = "FailedOperation.FunctionNameStatusError"
            case functionStatusError = "FailedOperation.FunctionStatusError"
            case functionVersionStatusNotActive = "FailedOperation.FunctionVersionStatusNotActive"
            case getAlias = "FailedOperation.GetAlias"
            case getFunctionAddress = "FailedOperation.GetFunctionAddress"
            case instanceNotFound = "FailedOperation.InstanceNotFound"
            case insufficientBalance = "FailedOperation.InsufficientBalance"
            case invokeFunction = "FailedOperation.InvokeFunction"
            case namespace = "FailedOperation.Namespace"
            case openService = "FailedOperation.OpenService"
            case operationConflict = "FailedOperation.OperationConflict"
            case provisionCreateTimer = "FailedOperation.ProvisionCreateTimer"
            case provisionDeleteTimer = "FailedOperation.ProvisionDeleteTimer"
            case provisionedExceedAvailable = "FailedOperation.ProvisionedExceedAvailable"
            case provisionedExceedReserved = "FailedOperation.ProvisionedExceedReserved"
            case provisionedInProgress = "FailedOperation.ProvisionedInProgress"
            case publishLayerVersion = "FailedOperation.PublishLayerVersion"
            case publishVersion = "FailedOperation.PublishVersion"
            case qcsRoleNotFound = "FailedOperation.QcsRoleNotFound"
            case reservedExceedTotal = "FailedOperation.ReservedExceedTotal"
            case reservedInProgress = "FailedOperation.ReservedInProgress"
            case serviceClosed = "FailedOperation.ServiceClosed"
            case topicNotExist = "FailedOperation.TopicNotExist"
            case totalConcurrencyMemoryInProgress = "FailedOperation.TotalConcurrencyMemoryInProgress"
            case unOpenedService = "FailedOperation.UnOpenedService"
            case updateAlias = "FailedOperation.UpdateAlias"
            case updateFunctionCode = "FailedOperation.UpdateFunctionCode"
            case updateFunctionConfiguration = "FailedOperation.UpdateFunctionConfiguration"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// API网关触发器创建失败。
        public static var apiGateway: FailedOperation {
            FailedOperation(.apiGateway)
        }
        
        /// 创建触发器失败。
        public static var apigw: FailedOperation {
            FailedOperation(.apigw)
        }
        
        /// 获取Apm InstanceId失败。
        public static var apmConfigInstanceId: FailedOperation {
            FailedOperation(.apmConfigInstanceId)
        }
        
        /// 当前异步事件状态不支持此操作，请稍后重试。
        public static var asyncEventStatus: FailedOperation {
            FailedOperation(.asyncEventStatus)
        }
        
        /// 登录信息验证失败，token 验证失败。
        public static var authFailure: FailedOperation {
            FailedOperation(.authFailure)
        }
        
        /// 请求role信息失败。
        public static var callRoleFailed: FailedOperation {
            FailedOperation(.callRoleFailed)
        }
        
        /// CopyAsyncRun 传参异常。
        public static var copyAsyncRun: FailedOperation {
            FailedOperation(.copyAsyncRun)
        }
        
        /// 复制函数失败。
        public static var copyFailed: FailedOperation {
            FailedOperation(.copyFailed)
        }
        
        /// 不支持复制到该地域。
        public static var copyFunction: FailedOperation {
            FailedOperation(.copyFunction)
        }
        
        /// 操作COS资源失败。
        public static var cos: FailedOperation {
            FailedOperation(.cos)
        }
        
        /// 创建别名失败。
        public static var createAlias: FailedOperation {
            FailedOperation(.createAlias)
        }
        
        /// 操作失败。
        public static var createFunction: FailedOperation {
            FailedOperation(.createFunction)
        }
        
        /// 创建命名空间失败。
        public static var createNamespace: FailedOperation {
            FailedOperation(.createNamespace)
        }
        
        /// 当前函数状态无法进行此操作。
        public static var createTrigger: FailedOperation {
            FailedOperation(.createTrigger)
        }
        
        /// 当前调试状态无法执行此操作。
        public static var debugModeStatus: FailedOperation {
            FailedOperation(.debugModeStatus)
        }
        
        /// 调试状态下无法更新执行超时时间。
        public static var debugModeUpdateTimeOutFail: FailedOperation {
            FailedOperation(.debugModeUpdateTimeOutFail)
        }
        
        /// 删除别名失败。
        public static var deleteAlias: FailedOperation {
            FailedOperation(.deleteAlias)
        }
        
        /// 当前函数状态无法进行此操作，请在函数状态正常时重试。
        public static var deleteFunction: FailedOperation {
            FailedOperation(.deleteFunction)
        }
        
        /// 删除layer版本失败。
        public static var deleteLayerVersion: FailedOperation {
            FailedOperation(.deleteLayerVersion)
        }
        
        /// 无法删除默认Namespace。
        public static var deleteNamespace: FailedOperation {
            FailedOperation(.deleteNamespace)
        }
        
        /// 删除触发器失败。
        public static var deleteTrigger: FailedOperation {
            FailedOperation(.deleteTrigger)
        }
        
        /// 当前函数状态无法更新代码，请在状态为正常时更新。
        public static var functionNameStatusError: FailedOperation {
            FailedOperation(.functionNameStatusError)
        }
        
        /// 函数在部署中,无法做此操作。
        public static var functionStatusError: FailedOperation {
            FailedOperation(.functionStatusError)
        }
        
        /// 当前函数版本状态无法进行此操作，请在版本状态为正常时重试。
        public static var functionVersionStatusNotActive: FailedOperation {
            FailedOperation(.functionVersionStatusNotActive)
        }
        
        /// 获取别名信息失败。
        public static var getAlias: FailedOperation {
            FailedOperation(.getAlias)
        }
        
        /// 获取函数代码地址失败。
        public static var getFunctionAddress: FailedOperation {
            FailedOperation(.getFunctionAddress)
        }
        
        /// InstanceNotFound 实例不存在。
        public static var instanceNotFound: FailedOperation {
            FailedOperation(.instanceNotFound)
        }
        
        /// 当前账号或命名空间处于欠费状态，请在可用时重试。
        public static var insufficientBalance: FailedOperation {
            FailedOperation(.insufficientBalance)
        }
        
        /// 调用函数失败。
        public static var invokeFunction: FailedOperation {
            FailedOperation(.invokeFunction)
        }
        
        /// 命名空间已存在，请勿重复创建。
        public static var namespace: FailedOperation {
            FailedOperation(.namespace)
        }
        
        /// 服务开通失败。
        public static var openService: FailedOperation {
            FailedOperation(.openService)
        }
        
        /// 操作冲突。
        public static var operationConflict: FailedOperation {
            FailedOperation(.operationConflict)
        }
        
        /// 创建定时预置任务失败。
        public static var provisionCreateTimer: FailedOperation {
            FailedOperation(.provisionCreateTimer)
        }
        
        /// 删除定时预置任务失败。
        public static var provisionDeleteTimer: FailedOperation {
            FailedOperation(.provisionDeleteTimer)
        }
        
        /// 预置超过可用。
        public static var provisionedExceedAvailable: FailedOperation {
            FailedOperation(.provisionedExceedAvailable)
        }
        
        /// 预置超限。
        public static var provisionedExceedReserved: FailedOperation {
            FailedOperation(.provisionedExceedReserved)
        }
        
        /// 当前函数版本已有预置任务处于进行中，请稍后重试。
        public static var provisionedInProgress: FailedOperation {
            FailedOperation(.provisionedInProgress)
        }
        
        /// 发布layer版本失败。
        public static var publishLayerVersion: FailedOperation {
            FailedOperation(.publishLayerVersion)
        }
        
        /// 当前函数状态无法发布版本，请在状态为正常时发布。
        public static var publishVersion: FailedOperation {
            FailedOperation(.publishVersion)
        }
        
        /// 角色不存在。
        public static var qcsRoleNotFound: FailedOperation {
            FailedOperation(.qcsRoleNotFound)
        }
        
        /// ReservedExceedTotal 总保留超限。
        public static var reservedExceedTotal: FailedOperation {
            FailedOperation(.reservedExceedTotal)
        }
        
        /// 当前函数已有保留并发设置任务处于进行中，请稍后重试。
        public static var reservedInProgress: FailedOperation {
            FailedOperation(.reservedInProgress)
        }
        
        /// ServiceClosed 请确认后再操作。
        public static var serviceClosed: FailedOperation {
            FailedOperation(.serviceClosed)
        }
        
        /// Topic不存在。
        public static var topicNotExist: FailedOperation {
            FailedOperation(.topicNotExist)
        }
        
        /// 用户并发内存配额设置任务处于进行中，请稍后重试。
        public static var totalConcurrencyMemoryInProgress: FailedOperation {
            FailedOperation(.totalConcurrencyMemoryInProgress)
        }
        
        /// 指定的服务未开通，可以提交工单申请开通服务。
        public static var unOpenedService: FailedOperation {
            FailedOperation(.unOpenedService)
        }
        
        /// 更新别名失败。
        public static var updateAlias: FailedOperation {
            FailedOperation(.updateAlias)
        }
        
        /// 当前函数状态无法更新代码，请在状态为正常时更新。
        public static var updateFunctionCode: FailedOperation {
            FailedOperation(.updateFunctionCode)
        }
        
        /// UpdateFunctionConfiguration操作失败。
        public static var updateFunctionConfiguration: FailedOperation {
            FailedOperation(.updateFunctionConfiguration)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCScfError.FailedOperation: Equatable {
    public static func == (lhs: TCScfError.FailedOperation, rhs: TCScfError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCScfError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCScfError.FailedOperation {
    public func toScfError() -> TCScfError {
        guard let code = TCScfError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCScfError(code, context: self.context)
    }
}