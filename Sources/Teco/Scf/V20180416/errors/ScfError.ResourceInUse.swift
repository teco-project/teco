//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCScfError {
    public struct ResourceInUse: TCErrorType {
        enum Code: String {
            case alias = "ResourceInUse.Alias"
            case cdn = "ResourceInUse.Cdn"
            case cmq = "ResourceInUse.Cmq"
            case cos = "ResourceInUse.Cos"
            case function = "ResourceInUse.Function"
            case functionName = "ResourceInUse.FunctionName"
            case layerVersion = "ResourceInUse.LayerVersion"
            case namespace = "ResourceInUse.Namespace"
            case trigger = "ResourceInUse.Trigger"
            case triggerName = "ResourceInUse.TriggerName"
            case other = "ResourceInUse"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// Alias已被占用。
        public static var alias: ResourceInUse {
            ResourceInUse(.alias)
        }
        
        /// Cdn已被占用。
        public static var cdn: ResourceInUse {
            ResourceInUse(.cdn)
        }
        
        /// Cmq已被占用。
        public static var cmq: ResourceInUse {
            ResourceInUse(.cmq)
        }
        
        /// Cos已被占用。
        public static var cos: ResourceInUse {
            ResourceInUse(.cos)
        }
        
        /// 函数已存在。
        public static var function: ResourceInUse {
            ResourceInUse(.function)
        }
        
        /// FunctionName已存在。
        public static var functionName: ResourceInUse {
            ResourceInUse(.functionName)
        }
        
        /// Layer版本正在使用中。
        public static var layerVersion: ResourceInUse {
            ResourceInUse(.layerVersion)
        }
        
        /// Namespace已存在。
        public static var namespace: ResourceInUse {
            ResourceInUse(.namespace)
        }
        
        /// TriggerName已存在。
        public static var trigger: ResourceInUse {
            ResourceInUse(.trigger)
        }
        
        /// TriggerName已存在。
        public static var triggerName: ResourceInUse {
            ResourceInUse(.triggerName)
        }
        
        /// 资源被占用。
        public static var other: ResourceInUse {
            ResourceInUse(.other)
        }
    }
}

extension TCScfError.ResourceInUse: Equatable {
    public static func == (lhs: TCScfError.ResourceInUse, rhs: TCScfError.ResourceInUse) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCScfError.ResourceInUse: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCScfError.ResourceInUse {
    public func toScfError() -> TCScfError {
        guard let code = TCScfError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCScfError(code, context: self.context)
    }
}