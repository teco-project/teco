//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Ecm {
    /// 描述 EIP 信息
    public struct Address: TCOutputModel {
        /// EIP的ID，是EIP的唯一标识。
        public let addressId: String

        /// EIP名称。
        public let addressName: String

        /// EIP状态，包含'CREATING'(创建中),'BINDING'(绑定中),'BIND'(已绑定),'UNBINDING'(解绑中),'UNBIND'(已解绑),'OFFLINING'(释放中),'BIND_ENI'(绑定悬空弹性网卡)
        public let addressStatus: String

        /// 外网IP地址
        public let addressIp: String

        /// 绑定的资源实例ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 创建时间。ISO 8601 格式：YYYY-MM-DDTHH:mm:ss.sssZ
        public let createdTime: String

        /// 绑定的弹性网卡ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkInterfaceId: String?

        /// 绑定的资源内网ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateAddressIp: String?

        /// 资源隔离状态。true表示eip处于隔离状态，false表示资源处于未隔离状态
        public let isArrears: Bool

        /// 资源封堵状态。true表示eip处于封堵状态，false表示eip处于未封堵状态
        public let isBlocked: Bool

        /// eip是否支持直通模式。true表示eip支持直通模式，false表示资源不支持直通模式
        public let isEipDirectConnection: Bool

        /// eip资源类型，包括"CalcIP","WanIP","EIP","AnycastEIP"。其中"CalcIP"表示设备ip，“WanIP”表示普通公网ip，“EIP”表示弹性公网ip，“AnycastEip”表示加速EIP
        public let addressType: String

        /// eip是否在解绑后自动释放。true表示eip将会在解绑后自动释放，false表示eip在解绑后不会自动释放
        public let cascadeRelease: Bool

        /// 运营商，CTCC电信，CUCC联通，CMCC移动
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetServiceProvider: String?

        /// 带宽上限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bandwidth: UInt64?

        /// 计费模式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: String?

        enum CodingKeys: String, CodingKey {
            case addressId = "AddressId"
            case addressName = "AddressName"
            case addressStatus = "AddressStatus"
            case addressIp = "AddressIp"
            case instanceId = "InstanceId"
            case createdTime = "CreatedTime"
            case networkInterfaceId = "NetworkInterfaceId"
            case privateAddressIp = "PrivateAddressIp"
            case isArrears = "IsArrears"
            case isBlocked = "IsBlocked"
            case isEipDirectConnection = "IsEipDirectConnection"
            case addressType = "AddressType"
            case cascadeRelease = "CascadeRelease"
            case internetServiceProvider = "InternetServiceProvider"
            case bandwidth = "Bandwidth"
            case payMode = "PayMode"
        }
    }

    /// ip地址相关信息结构体。
    public struct AddressInfo: TCOutputModel {
        /// 实例的外网ip相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIPAddressInfo: PublicIPAddressInfo?

        /// 实例的内网ip相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIPAddressInfo: PrivateIPAddressInfo?

        /// 实例的外网ipv6相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIPv6AddressInfo: PublicIPAddressInfo?

        enum CodingKeys: String, CodingKey {
            case publicIPAddressInfo = "PublicIPAddressInfo"
            case privateIPAddressInfo = "PrivateIPAddressInfo"
            case publicIPv6AddressInfo = "PublicIPv6AddressInfo"
        }
    }

    /// IP地址模板
    public struct AddressTemplateSpecification: TCInputModel, TCOutputModel {
        /// IP地址ID，例如：eipm-2uw6ujo6。
        public let addressId: String

        /// IP地址组ID，例如：eipmg-2uw6ujo6。
        public let addressGroupId: String

        public init(addressId: String, addressGroupId: String) {
            self.addressId = addressId
            self.addressGroupId = addressGroupId
        }

        enum CodingKeys: String, CodingKey {
            case addressId = "AddressId"
            case addressGroupId = "AddressGroupId"
        }
    }

    /// 区域信息
    public struct Area: TCOutputModel {
        /// 区域ID
        public let areaId: String

        /// 区域名称
        public let areaName: String

        enum CodingKeys: String, CodingKey {
            case areaId = "AreaId"
            case areaName = "AreaName"
        }
    }

    /// VPC辅助CIDR信息。
    public struct AssistantCidr: TCOutputModel {
        /// VPC实例ID。形如：vpc-6v2ht8q5
        public let vpcId: String

        /// 辅助CIDR。形如：172.16.0.0/16
        public let cidrBlock: String

        /// 辅助CIDR类型（0：普通辅助CIDR，1：容器辅助CIDR），默认都是0。
        public let assistantType: UInt64

        /// 辅助CIDR拆分的子网。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetSet: [Subnet]?

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case cidrBlock = "CidrBlock"
            case assistantType = "AssistantType"
            case subnetSet = "SubnetSet"
        }
    }

    /// 负责均衡后端信息
    public struct Backend: TCOutputModel {
        /// 后端服务的唯一 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 后端服务的监听端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 后端服务的转发权重，取值范围：[0, 100]，默认为 10。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weight: Int64?

        /// 后端服务的内网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIpAddresses: [String]?

        /// 后端服务被绑定的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var registeredTime: Date?

        /// 弹性网卡唯一ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eniId: String?

        /// 后端服务的外网 IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpAddresses: [String]?

        /// 后端服务的实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case port = "Port"
            case weight = "Weight"
            case privateIpAddresses = "PrivateIpAddresses"
            case registeredTime = "RegisteredTime"
            case eniId = "EniId"
            case publicIpAddresses = "PublicIpAddresses"
            case instanceName = "InstanceName"
        }
    }

    /// 负责均衡批量目标项
    public struct BatchTarget: TCInputModel {
        /// 监听器ID
        public let listenerId: String?

        /// 绑定端口
        public let port: Int64?

        /// 子机ID
        public let instanceId: String?

        /// 弹性网卡ip
        public let eniIp: String?

        /// 子机权重，范围[0, 100]。绑定时如果不存在，则默认为10。
        public let weight: Int64?

        public init(listenerId: String? = nil, port: Int64? = nil, instanceId: String? = nil, eniIp: String? = nil, weight: Int64? = nil) {
            self.listenerId = listenerId
            self.port = port
            self.instanceId = instanceId
            self.eniIp = eniIp
            self.weight = weight
        }

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case port = "Port"
            case instanceId = "InstanceId"
            case eniIp = "EniIp"
            case weight = "Weight"
        }
    }

    /// 城市信息
    public struct City: TCOutputModel {
        /// 城市ID
        public let cityId: String

        /// 城市名称
        public let cityName: String

        enum CodingKeys: String, CodingKey {
            case cityId = "CityId"
            case cityName = "CityName"
        }
    }

    /// 国家信息
    public struct Country: TCOutputModel {
        /// 国家ID
        public let countryId: String

        /// 国家名称
        public let countryName: String

        enum CodingKeys: String, CodingKey {
            case countryId = "CountryId"
            case countryName = "CountryName"
        }
    }

    /// 描述了数据盘的信息
    public struct DataDisk: TCInputModel, TCOutputModel {
        /// 数据盘大小。单位GB。
        public let diskSize: Int64

        /// 数据盘类型，取值范围：
        /// - LOCAL_BASIC：本地硬盘
        /// - CLOUD_PREMIUM：高性能云硬盘
        ///
        /// 默认取值： LOCAL_BASIC。
        public let diskType: String?

        public init(diskSize: Int64, diskType: String? = nil) {
            self.diskSize = diskSize
            self.diskType = diskType
        }

        enum CodingKeys: String, CodingKey {
            case diskSize = "DiskSize"
            case diskType = "DiskType"
        }
    }

    /// 描述了云硬盘的详细信息
    public struct Disk: TCOutputModel {
        /// 云盘是否与挂载的实例一起销毁。
        /// - true:销毁实例时会同时销毁云盘，只支持按小时后付费云盘。
        /// - false：销毁实例时不销毁云盘。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deleteWithInstance: Bool?

        /// 自动续费标识。取值范围：
        /// - NOTIFY_AND_AUTO_RENEW：通知过期且自动续费
        /// - NOTIFY_AND_MANUAL_RENEW：通知过期不自动续费
        /// - DISABLE_NOTIFY_AND_MANUAL_RENEW：不通知过期不自动续费。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: String?

        /// 硬盘介质类型。取值范围：
        /// - CLOUD_BASIC：表示普通云硬盘
        /// - CLOUD_PREMIUM：表示高性能云硬盘
        /// - CLOUD_SSD：表示SSD云硬盘
        /// - CLOUD_HSSD：表示增强型SSD云硬盘
        /// - CLOUD_TSSD：表示极速型SSD云硬盘。
        public let diskType: String?

        /// 云盘状态。取值范围：
        /// - UNATTACHED：未挂载
        /// - ATTACHING：挂载中
        /// - ATTACHED：已挂载
        /// - DETACHING：解挂中
        /// - EXPANDING：扩容中
        /// - ROLLBACKING：回滚中
        /// - TORECYCLE：待回收
        /// - DUMPING：拷贝硬盘中。
        public let diskState: String?

        /// 云盘拥有的快照总数。
        public let snapshotCount: Int64

        /// 云盘已挂载到子机，且子机与云盘都是包年包月。
        /// - true：子机设置了自动续费标识，但云盘未设置
        /// - false：云盘自动续费标识正常。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenewFlagError: Bool?

        /// 云盘是否处于快照回滚状态。取值范围：
        /// - false:表示不处于快照回滚状态
        /// - true:表示处于快照回滚状态。
        public let rollbacking: Bool?

        /// 对于非共享型云盘，该参数为空数组。对于共享型云盘，则表示该云盘当前被挂载到的CVM实例InstanceId
        public let instanceIdList: [String]

        /// 云盘是否为加密盘。取值范围：
        /// - false:表示非加密盘
        /// - true:表示加密盘。
        public let encrypt: Bool?

        /// 云硬盘名称。
        public let diskName: String?

        /// 云硬盘因欠费销毁或者到期销毁时， 是否使用快照备份数据的标识。true表示销毁时创建快照进行数据备份。false表示直接销毁，不进行数据备份。
        public let backupDisk: Bool

        /// 与云盘绑定的标签，云盘未绑定标签则取值为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 云硬盘挂载的云主机ID。
        public let instanceId: String?

        /// 云盘关联的定期快照ID。只有在调用DescribeDisks接口时，入参ReturnBindAutoSnapshotPolicy取值为TRUE才会返回该参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoSnapshotPolicyIds: [String]?

        /// 云硬盘额外性能值，单位MB/s。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let throughputPerformance: UInt64?

        /// 云盘是否处于类型变更中。取值范围：
        /// - false:表示云盘不处于类型变更中
        /// - true:表示云盘已发起类型变更，正处于迁移中。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let migrating: Bool?

        /// 云硬盘ID。
        public let diskId: String?

        /// 云盘拥有的快照总容量，单位为MB。
        public let snapshotSize: UInt64

        /// 云硬盘所在的位置。
        public let placement: Placement?

        /// 判断预付费的云盘是否支持主动退还。
        /// - true:支持主动退还
        /// - false:不支持主动退还。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isReturnable: Bool?

        /// 云盘是否挂载到云主机上。取值范围：
        /// - false:表示未挂载
        /// - true:表示已挂载。
        public let attached: Bool?

        /// 云硬盘大小，单位GB。
        public let diskSize: UInt64?

        /// 云盘类型变更的迁移进度，取值0到100。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let migratePercent: UInt64?

        /// 云硬盘类型。取值范围：
        /// - SYSTEM_DISK：系统盘
        /// - DATA_DISK：数据盘。
        public let diskUsage: String?

        /// 付费模式。取值范围：
        /// - PREPAID：预付费，即包年包月
        /// - POSTPAID_BY_HOUR：后付费，即按量计费。
        public let diskChargeType: String?

        /// 是否为弹性云盘，false表示非弹性云盘，true表示弹性云盘。
        public let portable: Bool?

        /// 云盘是否具备创建快照的能力。取值范围：
        /// - false表示不具备
        /// - true表示具备。
        public let snapshotAbility: Bool?

        /// 在云盘已挂载到实例，且实例与云盘都是包年包月的条件下，此字段才有意义。
        /// - true:云盘到期时间早于实例。
        /// - false：云盘到期时间晚于实例。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadlineError: Bool?

        /// 云盘快照回滚的进度。
        public let rollbackPercent: UInt64?

        /// 当前时间距离盘到期的天数（仅对预付费盘有意义）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let differDaysOfDeadline: Int64?

        /// 预付费云盘在不支持主动退还的情况下，该参数表明不支持主动退还的具体原因。取值范围：
        /// - 1：云硬盘已经退还
        /// - 2：云硬盘已过期
        /// - 3：云盘不支持退还
        /// - 8：超过可退还数量的限制。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let returnFailCode: Int64?

        /// 云盘是否为共享型云盘。
        public let shareable: Bool

        /// 云硬盘的创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date?

        /// 云硬盘的到期时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var deadlineTime: Date

        /// 云盘的挂载类型。取值范围：
        /// - PF: PF挂载
        /// - VF: VF挂载
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let attachMode: String?

        enum CodingKeys: String, CodingKey {
            case deleteWithInstance = "DeleteWithInstance"
            case renewFlag = "RenewFlag"
            case diskType = "DiskType"
            case diskState = "DiskState"
            case snapshotCount = "SnapshotCount"
            case autoRenewFlagError = "AutoRenewFlagError"
            case rollbacking = "Rollbacking"
            case instanceIdList = "InstanceIdList"
            case encrypt = "Encrypt"
            case diskName = "DiskName"
            case backupDisk = "BackupDisk"
            case tags = "Tags"
            case instanceId = "InstanceId"
            case autoSnapshotPolicyIds = "AutoSnapshotPolicyIds"
            case throughputPerformance = "ThroughputPerformance"
            case migrating = "Migrating"
            case diskId = "DiskId"
            case snapshotSize = "SnapshotSize"
            case placement = "Placement"
            case isReturnable = "IsReturnable"
            case attached = "Attached"
            case diskSize = "DiskSize"
            case migratePercent = "MigratePercent"
            case diskUsage = "DiskUsage"
            case diskChargeType = "DiskChargeType"
            case portable = "Portable"
            case snapshotAbility = "SnapshotAbility"
            case deadlineError = "DeadlineError"
            case rollbackPercent = "RollbackPercent"
            case differDaysOfDeadline = "DifferDaysOfDeadline"
            case returnFailCode = "ReturnFailCode"
            case shareable = "Shareable"
            case createTime = "CreateTime"
            case deadlineTime = "DeadlineTime"
            case attachMode = "AttachMode"
        }
    }

    /// 描述了实例的计费模式
    public struct DiskChargePrepaid: TCInputModel {
        /// 购买云盘的时长，默认单位为月，取值范围：1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36。
        public let period: UInt64

        /// 自动续费标识。取值范围：
        /// - NOTIFY_AND_AUTO_RENEW：通知过期且自动续费
        /// - NOTIFY_AND_MANUAL_RENEW：通知过期不自动续费
        /// - DISABLE_NOTIFY_AND_MANUAL_RENEW：不通知过期不自动续费
        ///
        /// 默认取值：NOTIFY_AND_MANUAL_RENEW：通知过期不自动续费。
        public let renewFlag: String?

        /// 需要将云盘的到期时间与挂载的子机对齐时，可传入该参数。该参数表示子机当前的到期时间，此时Period如果传入，则表示子机需要续费的时长，云盘会自动按对齐到子机续费后的到期时间续费，示例取值：2018-03-30 20:15:03。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var curInstanceDeadline: Date?

        public init(period: UInt64, renewFlag: String? = nil, curInstanceDeadline: Date? = nil) {
            self.period = period
            self.renewFlag = renewFlag
            self._curInstanceDeadline = .init(wrappedValue: curInstanceDeadline)
        }

        enum CodingKeys: String, CodingKey {
            case period = "Period"
            case renewFlag = "RenewFlag"
            case curInstanceDeadline = "CurInstanceDeadline"
        }
    }

    /// 磁盘信息
    public struct DiskInfo: TCOutputModel {
        /// 磁盘类型：LOCAL_BASIC
        public let diskType: String

        /// 磁盘ID
        public let diskId: String

        /// 磁盘大小（GB）
        public let diskSize: Int64

        /// 是否随实例删除。
        public let deleteWithInstance: Bool

        /// 快照ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshotId: String?

        enum CodingKeys: String, CodingKey {
            case diskType = "DiskType"
            case diskId = "DiskId"
            case diskSize = "DiskSize"
            case deleteWithInstance = "DeleteWithInstance"
            case snapshotId = "SnapshotId"
        }
    }

    /// 描述EIP配额信息
    public struct EipQuota: TCOutputModel {
        /// 配额名称，取值范围：
        /// TOTAL_EIP_QUOTA：用户当前地域下EIP的配额数；
        /// DAILY_EIP_APPLY：用户当前地域下今日申购次数；
        /// DAILY_PUBLIC_IP_ASSIGN：用户当前地域下，重新分配公网 IP次数。
        public let quotaId: String

        /// 当前数量
        public let quotaCurrent: UInt64

        /// 配额数量
        public let quotaLimit: UInt64

        enum CodingKeys: String, CodingKey {
            case quotaId = "QuotaId"
            case quotaCurrent = "QuotaCurrent"
            case quotaLimit = "QuotaLimit"
        }
    }

    /// 增强服务
    public struct EnhancedService: TCInputModel {
        /// 是否开启云镜服务。
        public let securityService: RunSecurityServiceEnabled?

        /// 是否开启云监控服务。
        public let monitorService: RunMonitorServiceEnabled?

        /// 是否开通IP直通。若不指定该参数，则Linux镜像默认开通，windows镜像暂不支持IP直通。
        public let eipDirectService: RunEIPDirectServiceEnabled?

        public init(securityService: RunSecurityServiceEnabled? = nil, monitorService: RunMonitorServiceEnabled? = nil, eipDirectService: RunEIPDirectServiceEnabled? = nil) {
            self.securityService = securityService
            self.monitorService = monitorService
            self.eipDirectService = eipDirectService
        }

        enum CodingKeys: String, CodingKey {
            case securityService = "SecurityService"
            case monitorService = "MonitorService"
            case eipDirectService = "EIPDirectService"
        }
    }

    /// 描述键值对过滤器，用于条件过滤查询。
    public struct Filter: TCInputModel {
        /// 一个或者多个过滤值。
        public let values: [String]

        /// 过滤键的名称。
        public let name: String

        public init(values: [String], name: String) {
            self.values = values
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    /// HAVIP对象。
    public struct HaVip: TCOutputModel {
        /// HAVIP的ID，是HAVIP的唯一标识。
        public let haVipId: String

        /// HAVIP名称。
        public let haVipName: String

        /// 虚拟IP地址。
        public let vip: String

        /// HAVIP所在私有网络ID。
        public let vpcId: String

        /// HAVIP所在子网ID。
        public let subnetId: String

        /// HAVIP关联弹性网卡ID。
        public let networkInterfaceId: String

        /// 被绑定的实例ID。
        public let instanceId: String

        /// 绑定EIP。
        public let addressIp: String

        /// 状态：
        /// AVAILABLE：运行中。
        /// UNBIND：未绑定。
        public let state: String

        /// 创建时间。
        public let createdTime: String

        /// 使用havip的业务标识。
        public let business: String

        enum CodingKeys: String, CodingKey {
            case haVipId = "HaVipId"
            case haVipName = "HaVipName"
            case vip = "Vip"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case networkInterfaceId = "NetworkInterfaceId"
            case instanceId = "InstanceId"
            case addressIp = "AddressIp"
            case state = "State"
            case createdTime = "CreatedTime"
            case business = "Business"
        }
    }

    /// 负载均衡健康检查
    public struct HealthCheck: TCInputModel, TCOutputModel {
        /// 是否开启健康检查：1（开启）、0（关闭）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthSwitch: Int64?

        /// 健康检查的响应超时时间，可选值：2~60，默认值：2，单位：秒。响应超时时间要小于检查间隔时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeOut: Int64?

        /// 健康检查探测间隔时间，默认值：5，可选值：5~300，单位：秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intervalTime: Int64?

        /// 健康阈值，默认值：3，表示当连续探测三次健康则表示该转发正常，可选值：2~10，单位：次。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthNum: Int64?

        /// 不健康阈值，默认值：3，表示当连续探测三次不健康则表示该转发异常，可选值：2~10，单位：次。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unHealthyNum: Int64?

        /// 自定义探测相关参数。健康检查端口，默认为后端服务的端口，除非您希望指定特定端口，否则建议留空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkPort: Int64?

        /// 自定义探测相关参数。健康检查协议CheckType的值取CUSTOM时，必填此字段，代表健康检查的输入格式，可取值：HEX或TEXT；取值为HEX时，SendContext和RecvContext的字符只能在0123456789ABCDEF中选取且长度必须是偶数位。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contextType: String?

        /// 自定义探测相关参数。健康检查协议CheckType的值取CUSTOM时，必填此字段，代表健康检查发送的请求内容，只允许ASCII可见字符，最大长度限制500。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sendContext: String?

        /// 自定义探测相关参数。健康检查协议CheckType的值取CUSTOM时，必填此字段，代表健康检查返回的结果，只允许ASCII可见字符，最大长度限制500。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recvContext: String?

        /// 自定义探测相关参数。健康检查使用的协议：TCP | CUSTOM（UDP监听器只支持CUSTOM；如果使用自定义健康检查功能，则必传）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkType: String?

        public init(healthSwitch: Int64? = nil, timeOut: Int64? = nil, intervalTime: Int64? = nil, healthNum: Int64? = nil, unHealthyNum: Int64? = nil, checkPort: Int64? = nil, contextType: String? = nil, sendContext: String? = nil, recvContext: String? = nil, checkType: String? = nil) {
            self.healthSwitch = healthSwitch
            self.timeOut = timeOut
            self.intervalTime = intervalTime
            self.healthNum = healthNum
            self.unHealthyNum = unHealthyNum
            self.checkPort = checkPort
            self.contextType = contextType
            self.sendContext = sendContext
            self.recvContext = recvContext
            self.checkType = checkType
        }

        enum CodingKeys: String, CodingKey {
            case healthSwitch = "HealthSwitch"
            case timeOut = "TimeOut"
            case intervalTime = "IntervalTime"
            case healthNum = "HealthNum"
            case unHealthyNum = "UnHealthyNum"
            case checkPort = "CheckPort"
            case contextType = "ContextType"
            case sendContext = "SendContext"
            case recvContext = "RecvContext"
            case checkType = "CheckType"
        }
    }

    /// 运营商信息
    public struct ISP: TCOutputModel {
        /// 运营商ID
        public let ispId: String

        /// 运营商名称
        public let ispName: String

        enum CodingKeys: String, CodingKey {
            case ispId = "ISPId"
            case ispName = "ISPName"
        }
    }

    /// 运行商统计信息
    public struct ISPCounter: TCOutputModel {
        /// 运营商名称
        public let providerName: String

        /// 节点数量
        public let providerNodeNum: Int64

        /// 实例数量
        public let provederInstanceNum: Int64

        /// Zone实例信息结构体数组
        public let zoneInstanceInfoSet: [ZoneInstanceInfo]

        enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case providerNodeNum = "ProviderNodeNum"
            case provederInstanceNum = "ProvederInstanceNum"
            case zoneInstanceInfoSet = "ZoneInstanceInfoSet"
        }
    }

    /// 多运营商IPv6 Cidr Block
    public struct ISPIPv6CidrBlock: TCOutputModel {
        /// IPv6 CIdr Block。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let iPv6CidrBlock: String?

        /// 网络运营商类型 取值范围:'CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ispType: String?

        enum CodingKeys: String, CodingKey {
            case iPv6CidrBlock = "IPv6CidrBlock"
            case ispType = "ISPType"
        }
    }

    /// 申请ipv6 cidr block的信息
    public struct ISPTypeItem: TCInputModel {
        /// IPv6 Cidr所属运营商类型，支持的类型有 'CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调。作为入参数时为必选。
        public let ispType: String?

        /// 申请IPv6 Cidr Block的个数。作为入参数时为必选。
        public let count: UInt64?

        public init(ispType: String? = nil, count: UInt64? = nil) {
            self.ispType = ispType
            self.count = count
        }

        enum CodingKeys: String, CodingKey {
            case ispType = "ISPType"
            case count = "Count"
        }
    }

    /// 镜像信息
    public struct Image: TCOutputModel {
        /// 镜像ID
        public let imageId: String

        /// 镜像名称
        public let imageName: String

        /// 镜像状态
        public let imageState: String

        /// 镜像类型
        public let imageType: String

        /// 操作系统名称
        public let imageOsName: String

        /// 镜像描述
        public let imageDescription: String

        /// 镜像导入时间
        public let imageCreateTime: String

        /// 操作系统位数
        public let architecture: String

        /// 操作系统类型
        public let osType: String

        /// 操作系统版本
        public let osVersion: String

        /// 操作系统平台
        public let platform: String

        /// 镜像所有者
        public let imageOwner: Int64

        /// 镜像大小。单位：GB
        public let imageSize: Int64

        /// 镜像来源信息
        public let srcImage: SrcImage

        /// 镜像来源类型
        public let imageSource: String

        /// 中间态和失败时候的任务ID
        public let taskId: String

        /// 是否支持CloudInit
        public let isSupportCloudInit: Bool

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case imageName = "ImageName"
            case imageState = "ImageState"
            case imageType = "ImageType"
            case imageOsName = "ImageOsName"
            case imageDescription = "ImageDescription"
            case imageCreateTime = "ImageCreateTime"
            case architecture = "Architecture"
            case osType = "OsType"
            case osVersion = "OsVersion"
            case platform = "Platform"
            case imageOwner = "ImageOwner"
            case imageSize = "ImageSize"
            case srcImage = "SrcImage"
            case imageSource = "ImageSource"
            case taskId = "TaskId"
            case isSupportCloudInit = "IsSupportCloudInit"
        }
    }

    /// 镜像限制配置
    public struct ImageLimitConfig: TCOutputModel {
        /// 支持的最大镜像大小，包括可导入的自定义镜像大小，中心云镜像大小，单位为GB。
        public let maxImageSize: Int64

        enum CodingKeys: String, CodingKey {
            case maxImageSize = "MaxImageSize"
        }
    }

    /// 支持的操作系统类型，根据windows和Linux分类。
    public struct ImageOsList: TCOutputModel {
        /// 支持的windows操作系统
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let windows: [String]?

        /// 支持的linux操作系统
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let linux: [String]?

        enum CodingKeys: String, CodingKey {
            case windows = "Windows"
            case linux = "Linux"
        }
    }

    /// 镜像任务
    public struct ImageTask: TCOutputModel {
        /// 镜像导入状态， PENDING, PROCESSING, SUCCESS, FAILED
        public let state: String

        /// 导入失败(FAILED)时， 说明失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 镜像名称
        public let imageName: String

        /// 创建时间
        public let createTime: String

        enum CodingKeys: String, CodingKey {
            case state = "State"
            case message = "Message"
            case imageName = "ImageName"
            case createTime = "CreateTime"
        }
    }

    /// 镜像文件信息
    public struct ImageUrl: TCInputModel {
        /// 镜像文件COS链接，如设置私有读写，需授权腾讯云ECM运营账号访问权限。
        public let imageFile: String

        public init(imageFile: String) {
            self.imageFile = imageFile
        }

        enum CodingKeys: String, CodingKey {
            case imageFile = "ImageFile"
        }
    }

    /// 用于描述实例相关的信息。
    public struct Instance: TCOutputModel {
        /// 实例ID。
        public let instanceId: String

        /// 实例名称，如ens-34241f3s。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 实例状态。取值范围：
        /// PENDING：表示创建中
        /// LAUNCH_FAILED：表示创建失败
        /// RUNNING：表示运行中
        /// STOPPED：表示关机
        /// STARTING：表示开机中
        /// STOPPING：表示关机中
        /// REBOOTING：表示重启中
        /// SHUTDOWN：表示停止待销毁
        /// TERMINATING：表示销毁中。
        public let instanceState: String

        /// 实例当前使用的镜像的信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let image: Image?

        /// 实例当前所属的模块简要信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let simpleModule: SimpleModule?

        /// 实例所在的位置相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let position: Position?

        /// 实例的网络相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internet: Internet?

        /// 实例的配置相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceTypeConfig: InstanceTypeConfig?

        /// 实例的创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 实例的标签信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [Tag]?

        /// 实例最后一次操作。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestOperation: String?

        /// 实例最后一次操作结果。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestOperationState: String?

        /// 实例业务状态。取值范围：
        /// NORMAL：表示正常状态的实例
        /// EXPIRED：表示过期的实例
        /// PROTECTIVELY_ISOLATED：表示被安全隔离的实例。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let restrictState: String?

        /// 系统盘大小，单位GB。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let systemDiskSize: Int64?

        /// 数据盘大小，单位GB。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataDiskSize: Int64?

        /// 实例UUID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uuid: String?

        /// 付费方式。
        ///     0为后付费。
        ///     1为预付费。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: Int64?

        /// 过期时间。格式为yyyy-mm-dd HH:mm:ss。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 隔离时间。格式为yyyy-mm-dd HH:mm:ss。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolatedTime: String?

        /// 是否自动续费。
        ///       0为不自动续费。
        ///       1为自动续费。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: Int64?

        /// 过期状态。
        ///     NORMAL 表示机器运行正常。
        ///     WILL_EXPIRE 表示即将过期。
        ///     EXPIRED 表示已过期。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireState: String?

        /// 系统盘信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let systemDisk: DiskInfo?

        /// 数据盘信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataDisks: [DiskInfo]?

        /// 新实例标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newFlag: Int64?

        /// 实例所属安全组。该参数可以通过调用 DescribeSecurityGroups 的返回值中的sgId字段来获取。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityGroupIds: [String]?

        /// VPC属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let virtualPrivateCloud: VirtualPrivateCloud?

        /// 实例运营商字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isp: String?

        /// 物理位置信息。注意该字段目前为保留字段，均为空值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let physicalPosition: PhysicalPosition?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceState = "InstanceState"
            case image = "Image"
            case simpleModule = "SimpleModule"
            case position = "Position"
            case internet = "Internet"
            case instanceTypeConfig = "InstanceTypeConfig"
            case createTime = "CreateTime"
            case tagSet = "TagSet"
            case latestOperation = "LatestOperation"
            case latestOperationState = "LatestOperationState"
            case restrictState = "RestrictState"
            case systemDiskSize = "SystemDiskSize"
            case dataDiskSize = "DataDiskSize"
            case uuid = "UUID"
            case payMode = "PayMode"
            case expireTime = "ExpireTime"
            case isolatedTime = "IsolatedTime"
            case renewFlag = "RenewFlag"
            case expireState = "ExpireState"
            case systemDisk = "SystemDisk"
            case dataDisks = "DataDisks"
            case newFlag = "NewFlag"
            case securityGroupIds = "SecurityGroupIds"
            case virtualPrivateCloud = "VirtualPrivateCloud"
            case isp = "ISP"
            case physicalPosition = "PhysicalPosition"
        }
    }

    /// 机型族配置
    public struct InstanceFamilyConfig: TCOutputModel {
        /// 机型名称
        public let instanceFamilyName: String

        /// 机型ID
        public let instanceFamily: String

        enum CodingKeys: String, CodingKey {
            case instanceFamilyName = "InstanceFamilyName"
            case instanceFamily = "InstanceFamily"
        }
    }

    /// 实例系列类型配置
    public struct InstanceFamilyTypeConfig: TCOutputModel {
        /// 实例机型系列类型Id
        public let instanceFamilyType: String

        /// 实例机型系列类型名称
        public let instanceFamilyTypeName: String

        enum CodingKeys: String, CodingKey {
            case instanceFamilyType = "InstanceFamilyType"
            case instanceFamilyTypeName = "InstanceFamilyTypeName"
        }
    }

    /// 实例网卡ip网络信息数组
    public struct InstanceNetworkInfo: TCOutputModel {
        /// 实例内外网ip相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressInfoSet: [AddressInfo]?

        /// 网卡ID。
        public let networkInterfaceId: String

        /// 网卡名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkInterfaceName: String?

        /// 主网卡属性。true为主网卡，false为辅助网卡。
        public let primary: Bool

        enum CodingKeys: String, CodingKey {
            case addressInfoSet = "AddressInfoSet"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkInterfaceName = "NetworkInterfaceName"
            case primary = "Primary"
        }
    }

    /// 机器网络资源限制
    public struct InstanceNetworkLimitConfig: TCOutputModel {
        /// cpu核数
        public let cpuNum: Int64

        /// 网卡数量限制
        public let networkInterfaceLimit: Int64

        /// 每张网卡内网ip数量限制
        public let innerIpPerNetworkInterface: Int64

        /// 每个实例的外网ip限制
        public let publicIpPerInstance: Int64

        enum CodingKeys: String, CodingKey {
            case cpuNum = "CpuNum"
            case networkInterfaceLimit = "NetworkInterfaceLimit"
            case innerIpPerNetworkInterface = "InnerIpPerNetworkInterface"
            case publicIpPerInstance = "PublicIpPerInstance"
        }
    }

    /// 实例可执行操作
    public struct InstanceOperator: TCOutputModel {
        /// 实例id
        public let instanceId: String

        /// 实例禁止的操作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deniedActions: [OperatorAction]?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case deniedActions = "DeniedActions"
        }
    }

    /// 描述实例的价格相关
    public struct InstancePricesPartDetail: TCInputModel, TCOutputModel {
        /// cpu的价格信息
        public let cpuPrice: PriceDetail

        /// 内存价格信息
        public let memPrice: PriceDetail

        /// 磁盘价格信息
        public let disksPrice: PriceDetail

        public init(cpuPrice: PriceDetail, memPrice: PriceDetail, disksPrice: PriceDetail) {
            self.cpuPrice = cpuPrice
            self.memPrice = memPrice
            self.disksPrice = disksPrice
        }

        enum CodingKeys: String, CodingKey {
            case cpuPrice = "CpuPrice"
            case memPrice = "MemPrice"
            case disksPrice = "DisksPrice"
        }
    }

    /// 用于描述实例的统计信息
    public struct InstanceStatistic: TCOutputModel {
        /// 实例的类型
        public let instanceType: String

        /// 实例的个数
        public let instanceCount: Int64

        enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case instanceCount = "InstanceCount"
        }
    }

    /// 机型配置
    public struct InstanceTypeConfig: TCOutputModel {
        /// 机型族配置信息
        public let instanceFamilyConfig: InstanceFamilyConfig

        /// 机型
        public let instanceType: String

        /// CPU核数
        public let vcpu: Int64

        /// 内存大小
        public let memory: Int64

        /// 主频
        public let frequency: String

        /// 处理器型号
        public let cpuModelName: String

        /// 机型族类别配置信息
        public let instanceFamilyTypeConfig: InstanceFamilyTypeConfig

        /// 机型额外信息 是一个json字符串，如果存在则表示特殊机型，格式如下：{"dataDiskSize":3200,"systemDiskSize":60, "systemDiskSizeShow":"系统盘默认60G","dataDiskSizeShow":"本地NVMe SSD 硬盘3200 GB"}
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extInfo: String?

        /// GPU卡数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vgpu: Float?

        /// GPU型号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuModelName: String?

        enum CodingKeys: String, CodingKey {
            case instanceFamilyConfig = "InstanceFamilyConfig"
            case instanceType = "InstanceType"
            case vcpu = "Vcpu"
            case memory = "Memory"
            case frequency = "Frequency"
            case cpuModelName = "CpuModelName"
            case instanceFamilyTypeConfig = "InstanceFamilyTypeConfig"
            case extInfo = "ExtInfo"
            case vgpu = "Vgpu"
            case gpuModelName = "GpuModelName"
        }
    }

    /// 实例价格信息
    public struct InstancesPrice: TCInputModel, TCOutputModel {
        /// 分部描述实例子维度的价格
        public let instancePricesPartDetail: InstancePricesPartDetail

        /// 实例总价折扣
        public let discount: UInt64

        /// 折扣后价格
        public let discountPrice: UInt64

        /// 折扣前价格，原始总价
        public let originalPrice: UInt64

        public init(instancePricesPartDetail: InstancePricesPartDetail, discount: UInt64, discountPrice: UInt64, originalPrice: UInt64) {
            self.instancePricesPartDetail = instancePricesPartDetail
            self.discount = discount
            self.discountPrice = discountPrice
            self.originalPrice = originalPrice
        }

        enum CodingKeys: String, CodingKey {
            case instancePricesPartDetail = "InstancePricesPartDetail"
            case discount = "Discount"
            case discountPrice = "DiscountPrice"
            case originalPrice = "OriginalPrice"
        }
    }

    /// 实例的网络相关信息。
    public struct Internet: TCOutputModel {
        /// 实例的内网相关信息列表。顺序为主网卡在前，辅助网卡按绑定先后顺序排列。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIPAddressSet: [PrivateIPAddressInfo]?

        /// 实例的公网相关信息列表。顺序为主网卡在前，辅助网卡按绑定先后顺序排列。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIPAddressSet: [PublicIPAddressInfo]?

        /// 实例网络相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceNetworkInfoSet: [InstanceNetworkInfo]?

        enum CodingKeys: String, CodingKey {
            case privateIPAddressSet = "PrivateIPAddressSet"
            case publicIPAddressSet = "PublicIPAddressSet"
            case instanceNetworkInfoSet = "InstanceNetworkInfoSet"
        }
    }

    /// IPv6地址信息。
    public struct Ipv6Address: TCInputModel, TCOutputModel {
        /// IPv6地址，形如：3402:4e00:20:100:0:8cd9:2a67:71f3
        public let address: String

        /// 是否是主IP。
        public let primary: Bool?

        /// EIP实例ID，形如：eip-hxlqja90。
        public let addressId: String?

        /// 描述信息。
        public let description: String?

        /// 公网IP是否被封堵。
        public let isWanIpBlocked: Bool?

        /// IPv6地址状态：
        /// PENDING：生产中
        /// MIGRATING：迁移中
        /// DELETING：删除中
        /// AVAILABLE：可用的
        public let state: String?

        public init(address: String, primary: Bool? = nil, addressId: String? = nil, description: String? = nil, isWanIpBlocked: Bool? = nil, state: String? = nil) {
            self.address = address
            self.primary = primary
            self.addressId = addressId
            self.description = description
            self.isWanIpBlocked = isWanIpBlocked
            self.state = state
        }

        enum CodingKeys: String, CodingKey {
            case address = "Address"
            case primary = "Primary"
            case addressId = "AddressId"
            case description = "Description"
            case isWanIpBlocked = "IsWanIpBlocked"
            case state = "State"
        }
    }

    /// IPv6子网段对象。
    public struct Ipv6SubnetCidrBlock: TCInputModel, TCOutputModel {
        /// 子网实例`ID`。形如：`subnet-pxir56ns`。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// `IPv6`子网段。形如：`3402:4e00:20:1001::/64`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6CidrBlock: String?

        public init(subnetId: String? = nil, ipv6CidrBlock: String? = nil) {
            self.subnetId = subnetId
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case ipv6CidrBlock = "Ipv6CidrBlock"
        }
    }

    /// 描述密钥对信息
    public struct KeyPair: TCOutputModel {
        /// 密钥对的ID，是密钥对的唯一标识。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyId: String?

        /// 密钥对名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyName: String?

        /// 密钥对所属的项目ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: Int64?

        /// 密钥对描述信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 密钥对的纯文本公钥。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicKey: String?

        /// 钥对的纯文本私钥。腾讯云不会保管私钥，请用户自行妥善保存。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateKey: String?

        /// 钥关联的实例ID列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let associatedInstanceIds: [String]?

        /// 创建时间。按照ISO8601标准表示，并且使用UTC时间。格式为：YYYY-MM-DDThh:mm:ssZ。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdTime: Date?

        enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case keyName = "KeyName"
            case projectId = "ProjectId"
            case description = "Description"
            case publicKey = "PublicKey"
            case privateKey = "PrivateKey"
            case associatedInstanceIds = "AssociatedInstanceIds"
            case createdTime = "CreatedTime"
        }
    }

    /// 负载均衡监听器
    public struct Listener: TCOutputModel {
        /// 负载均衡监听器 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerId: String?

        /// 监听器协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 监听器端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 监听器的健康检查信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthCheck: HealthCheck?

        /// 请求的调度方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scheduler: String?

        /// 会话保持时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionExpireTime: Int64?

        /// 监听器的名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerName: String?

        /// 监听器的创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 监听器的会话类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionType: String?

        /// 端口段结束端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endPort: Int64?

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case `protocol` = "Protocol"
            case port = "Port"
            case healthCheck = "HealthCheck"
            case scheduler = "Scheduler"
            case sessionExpireTime = "SessionExpireTime"
            case listenerName = "ListenerName"
            case createTime = "CreateTime"
            case sessionType = "SessionType"
            case endPort = "EndPort"
        }
    }

    /// 监听器后端
    public struct ListenerBackend: TCOutputModel {
        /// 监听器 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerId: String?

        /// 监听器的协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 监听器的端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 监听器上绑定的后端服务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: [Backend]?

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case `protocol` = "Protocol"
            case port = "Port"
            case targets = "Targets"
        }
    }

    /// 监听器健康状态
    public struct ListenerHealth: TCOutputModel {
        /// 监听器ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerId: String?

        /// 监听器名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerName: String?

        /// 监听器的协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 监听器的端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 监听器的转发规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rules: [RuleHealth]?

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case `protocol` = "Protocol"
            case port = "Port"
            case rules = "Rules"
        }
    }

    /// 负载均衡实例信息
    public struct LoadBalancer: TCOutputModel {
        /// 区域。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 位置信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let position: Position?

        /// 负载均衡实例 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerId: String?

        /// 负载均衡实例的名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerName: String?

        /// 负载均衡实例的网络类型：OPEN：公网属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerType: String?

        /// 负载均衡实例的 VIP 列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerVips: [String]?

        /// 负载均衡实例的状态，包括
        ///  0：创建中，1：正常运行。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 负载均衡实例的创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date?

        /// 负载均衡实例的上次状态转换时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var statusTime: Date?

        /// 私有网络的 ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 负载均衡实例的标签信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [TagInfo]?

        /// 负载均衡IP地址所属的ISP。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vipIsp: String?

        /// 负载均衡实例的网络属性。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkAttributes: LoadBalancerInternetAccessible?

        /// 安全组。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let secureGroups: [String]?

        /// 后端机器是否放通来自ELB的流量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerPassToTarget: Bool?

        /// 负载均衡实例的IPv6地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressIPv6: String?

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case position = "Position"
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case loadBalancerType = "LoadBalancerType"
            case loadBalancerVips = "LoadBalancerVips"
            case status = "Status"
            case createTime = "CreateTime"
            case statusTime = "StatusTime"
            case vpcId = "VpcId"
            case tags = "Tags"
            case vipIsp = "VipIsp"
            case networkAttributes = "NetworkAttributes"
            case secureGroups = "SecureGroups"
            case loadBalancerPassToTarget = "LoadBalancerPassToTarget"
            case addressIPv6 = "AddressIPv6"
        }
    }

    /// 负载均衡器健康状态
    public struct LoadBalancerHealth: TCOutputModel {
        /// 负载均衡实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerId: String?

        /// 负载均衡实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerName: String?

        /// 监听器列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listeners: [ListenerHealth]?

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case listeners = "Listeners"
        }
    }

    /// 负载均衡的带宽限制等信息。
    public struct LoadBalancerInternetAccessible: TCInputModel, TCOutputModel {
        /// 最大出带宽，单位Mbps。默认值10
        public let internetMaxBandwidthOut: Int64?

        public init(internetMaxBandwidthOut: Int64? = nil) {
            self.internetMaxBandwidthOut = internetMaxBandwidthOut
        }

        enum CodingKeys: String, CodingKey {
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
        }
    }

    /// 模块信息
    public struct Module: TCOutputModel {
        /// 模块Id。
        public let moduleId: String

        /// 模块名称。
        public let moduleName: String

        /// 模块状态：
        /// NORMAL：正常。
        /// DELETING：删除中
        /// DELETEFAILED：删除失败。
        public let moduleState: String

        /// 默认系统盘大小。
        public let defaultSystemDiskSize: Int64

        /// 默认数据盘大小。
        public let defaultDataDiskSize: Int64

        /// 默认机型。
        public let instanceTypeConfig: InstanceTypeConfig

        /// 默认镜像。
        public let defaultImage: Image

        /// 创建时间。
        public let createTime: String

        /// 默认出带宽。
        public let defaultBandwidth: Int64

        /// 标签集合。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [Tag]?

        /// 是否关闭IP直通。
        public let closeIpDirect: Int64

        /// 默认安全组id列表。
        public let securityGroupIds: [String]

        /// 默认入带宽。
        public let defaultBandwidthIn: Int64

        /// 自定义脚本数据
        public let userData: String

        /// 系统盘信息。
        public let systemDisk: SystemDisk

        /// 数据盘信息。
        public let dataDisks: [DataDisk]

        /// 是否禁止外网ip
        public let disableWanIp: Int64?

        enum CodingKeys: String, CodingKey {
            case moduleId = "ModuleId"
            case moduleName = "ModuleName"
            case moduleState = "ModuleState"
            case defaultSystemDiskSize = "DefaultSystemDiskSize"
            case defaultDataDiskSize = "DefaultDataDiskSize"
            case instanceTypeConfig = "InstanceTypeConfig"
            case defaultImage = "DefaultImage"
            case createTime = "CreateTime"
            case defaultBandwidth = "DefaultBandwidth"
            case tagSet = "TagSet"
            case closeIpDirect = "CloseIpDirect"
            case securityGroupIds = "SecurityGroupIds"
            case defaultBandwidthIn = "DefaultBandwidthIn"
            case userData = "UserData"
            case systemDisk = "SystemDisk"
            case dataDisks = "DataDisks"
            case disableWanIp = "DisableWanIp"
        }
    }

    /// 节点统计数据
    public struct ModuleCounter: TCOutputModel {
        /// 运营商统计信息列表
        public let ispCounterSet: [ISPCounter]

        /// 省份数量
        public let provinceNum: Int64

        /// 城市数量
        public let cityNum: Int64

        /// 节点数量
        public let nodeNum: Int64

        /// 实例数量
        public let instanceNum: Int64

        enum CodingKeys: String, CodingKey {
            case ispCounterSet = "ISPCounterSet"
            case provinceNum = "ProvinceNum"
            case cityNum = "CityNum"
            case nodeNum = "NodeNum"
            case instanceNum = "InstanceNum"
        }
    }

    /// 模块列表Item信息
    public struct ModuleItem: TCOutputModel {
        /// 节点实例统计信息
        public let nodeInstanceNum: NodeInstanceNum

        /// 模块信息
        public let module: Module

        enum CodingKeys: String, CodingKey {
            case nodeInstanceNum = "NodeInstanceNum"
            case module = "Module"
        }
    }

    /// 客户对应月份的带宽信息
    public struct MonthNetwork: TCOutputModel {
        /// 节点zone信息
        public let zoneInfo: ZoneInfo

        /// 带宽月份 示例"202103"
        public let month: String

        /// 带宽包id 格式如"bwp-xxxxxxxx"
        public let bandwidthPkgId: String

        /// 运营商简称 取值范围"CUCC;CTCC;CMCC"
        public let isp: String

        /// 入网带宽包峰值,取值范围0.0-xxx.xxx
        public let trafficMaxIn: Float

        /// 出网带宽包峰值,取值范围0.0-xxx.xxx
        public let trafficMaxOut: Float

        /// 计费带宽,取值范围0.0-xxx.xxx
        public let feeTraffic: Float

        /// 月计费带宽起始时间 格式"yyyy-mm-dd HH:mm:ss"
        public let startTime: String

        /// 月计费带宽结束时间 格式"yyyy-mm-dd HH:mm:ss"
        public let endTime: String

        /// 月计费带宽实际有效天数 整形必须大于等于0
        public let effectiveDays: Int64

        /// 指定月份的实际天数 实例 30
        public let monthDays: Int64

        /// 有效天占比 保留小数点后四位0.2134
        public let effectiveDaysRate: Float

        /// 计费带宽包类型 实例"Address","LoadBalance","AddressIpv6"
        public let bandwidthPkgType: String

        enum CodingKeys: String, CodingKey {
            case zoneInfo = "ZoneInfo"
            case month = "Month"
            case bandwidthPkgId = "BandwidthPkgId"
            case isp = "Isp"
            case trafficMaxIn = "TrafficMaxIn"
            case trafficMaxOut = "TrafficMaxOut"
            case feeTraffic = "FeeTraffic"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case effectiveDays = "EffectiveDays"
            case monthDays = "MonthDays"
            case effectiveDaysRate = "EffectiveDaysRate"
            case bandwidthPkgType = "BandwidthPkgType"
        }
    }

    /// 弹性网卡
    public struct NetworkInterface: TCOutputModel {
        /// 弹性网卡实例ID，例如：eni-f1xjkw1b。
        public let networkInterfaceId: String

        /// 弹性网卡名称。
        public let networkInterfaceName: String

        /// 弹性网卡描述。
        public let networkInterfaceDescription: String

        /// 子网实例ID。
        public let subnetId: String

        /// VPC实例ID。
        public let vpcId: String

        /// 绑定的安全组。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupSet: [String]?

        /// 是否是主网卡。
        public let primary: Bool

        /// MAC地址。
        public let macAddress: String

        /// 弹性网卡状态：
        /// PENDING：创建中
        /// AVAILABLE：可用的
        /// ATTACHING：绑定中
        /// DETACHING：解绑中
        /// DELETING：删除中
        public let state: String

        /// 内网IP信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIpAddressSet: [PrivateIpAddressSpecification]?

        /// 绑定的云服务器对象。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let attachment: NetworkInterfaceAttachment?

        /// 可用区。
        public let zone: String

        /// 创建时间。
        public let createdTime: String

        /// IPv6地址列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6AddressSet: [Ipv6Address]?

        /// 标签键值对。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [Tag]?

        /// 网卡类型。0 - 弹性网卡；1 - evm弹性网卡。
        public let eniType: UInt64

        /// EcmRegion ecm区域
        public let ecmRegion: String

        /// 网卡绑定的子机类型：cvm，eks。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let business: String?

        enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "NetworkInterfaceId"
            case networkInterfaceName = "NetworkInterfaceName"
            case networkInterfaceDescription = "NetworkInterfaceDescription"
            case subnetId = "SubnetId"
            case vpcId = "VpcId"
            case groupSet = "GroupSet"
            case primary = "Primary"
            case macAddress = "MacAddress"
            case state = "State"
            case privateIpAddressSet = "PrivateIpAddressSet"
            case attachment = "Attachment"
            case zone = "Zone"
            case createdTime = "CreatedTime"
            case ipv6AddressSet = "Ipv6AddressSet"
            case tagSet = "TagSet"
            case eniType = "EniType"
            case ecmRegion = "EcmRegion"
            case business = "Business"
        }
    }

    /// 弹性网卡绑定关系
    public struct NetworkInterfaceAttachment: TCOutputModel {
        /// 云主机实例ID。
        public let instanceId: String

        /// 网卡在云主机实例内的序号。
        public let deviceIndex: UInt64

        /// 云主机所有者账户信息。
        public let instanceAccountId: String

        /// 绑定时间。
        public let attachTime: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case deviceIndex = "DeviceIndex"
            case instanceAccountId = "InstanceAccountId"
            case attachTime = "AttachTime"
        }
    }

    /// 网络硬盘上下限数据
    public struct NetworkStorageRange: TCOutputModel {
        /// 网络带宽上限
        public let maxBandwidth: Int64

        /// 数据盘上限
        public let maxSystemDiskSize: Int64

        /// 网络带宽下限
        public let minBandwidth: Int64

        /// 数据盘下限
        public let minSystemDiskSize: Int64

        /// 最大数据盘大小
        public let maxDataDiskSize: Int64

        /// 最小数据盘大小
        public let minDataDiskSize: Int64

        /// 建议带宽
        public let suggestBandwidth: Int64

        /// 建议硬盘大小
        public let suggestDataDiskSize: Int64

        /// 建议系统盘大小
        public let suggestSystemDiskSize: Int64

        /// Cpu核数峰值
        public let maxVcpu: Int64

        /// Cpu核最小值
        public let minVcpu: Int64

        /// 单次请求最大cpu核数
        public let maxVcpuPerReq: Int64

        /// 带宽步长
        public let perBandwidth: Int64

        /// 数据盘步长
        public let perDataDisk: Int64

        /// 总模块数量
        public let maxModuleNum: Int64

        enum CodingKeys: String, CodingKey {
            case maxBandwidth = "MaxBandwidth"
            case maxSystemDiskSize = "MaxSystemDiskSize"
            case minBandwidth = "MinBandwidth"
            case minSystemDiskSize = "MinSystemDiskSize"
            case maxDataDiskSize = "MaxDataDiskSize"
            case minDataDiskSize = "MinDataDiskSize"
            case suggestBandwidth = "SuggestBandwidth"
            case suggestDataDiskSize = "SuggestDataDiskSize"
            case suggestSystemDiskSize = "SuggestSystemDiskSize"
            case maxVcpu = "MaxVcpu"
            case minVcpu = "MinVcpu"
            case maxVcpuPerReq = "MaxVcpuPerReq"
            case perBandwidth = "PerBandwidth"
            case perDataDisk = "PerDataDisk"
            case maxModuleNum = "MaxModuleNum"
        }
    }

    /// 节点信息
    public struct Node: TCOutputModel {
        /// zone信息。
        public let zoneInfo: ZoneInfo

        /// 国家信息。
        public let country: Country

        /// 区域信息。
        public let area: Area

        /// 省份信息。
        public let province: Province

        /// 城市信息。
        public let city: City

        /// Region信息。
        public let regionInfo: RegionInfo

        /// 运营商列表。
        public let ispSet: [ISP]

        /// 运营商数量。
        public let ispNum: Int64

        /// 节点是否支持LB
        public let lbSupported: Bool?

        enum CodingKeys: String, CodingKey {
            case zoneInfo = "ZoneInfo"
            case country = "Country"
            case area = "Area"
            case province = "Province"
            case city = "City"
            case regionInfo = "RegionInfo"
            case ispSet = "ISPSet"
            case ispNum = "ISPNum"
            case lbSupported = "LBSupported"
        }
    }

    /// 节点实例数量信息
    public struct NodeInstanceNum: TCOutputModel {
        /// 节点数量
        public let nodeNum: Int64

        /// 实例数量
        public let instanceNum: Int64

        enum CodingKeys: String, CodingKey {
            case nodeNum = "NodeNum"
            case instanceNum = "InstanceNum"
        }
    }

    /// 操作Action
    public struct OperatorAction: TCOutputModel {
        /// 可执行操作
        public let action: String

        /// 编码Code
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let code: String?

        /// 具体信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case code = "Code"
            case message = "Message"
        }
    }

    /// 操作系统支持的类型。
    public struct OsVersion: TCOutputModel {
        /// 操作系统类型
        public let osName: String

        /// 支持的操作系统版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let osVersions: [String]?

        /// 支持的操作系统架构
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let architecture: [String]?

        enum CodingKeys: String, CodingKey {
            case osName = "OsName"
            case osVersions = "OsVersions"
            case architecture = "Architecture"
        }
    }

    /// 一组相互关联的装箱配额，以实例类型的优先级排序，优先级高的在前
    public struct PackingQuotaGroup: TCOutputModel {
        /// 可用区
        public let zone: String

        /// 可用区id
        public let zoneId: Int64

        /// ISP id
        public let ispId: String

        /// 一组相互关联的装箱配额
        public let packingQuotaInfos: [PackingQuotaInfo]

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneId = "ZoneId"
            case ispId = "ISPId"
            case packingQuotaInfos = "PackingQuotaInfos"
        }
    }

    /// 一组相关联的装箱配额信息
    public struct PackingQuotaInfo: TCOutputModel {
        /// 实例类型
        public let instanceType: String

        /// 装箱配额
        public let packingQuota: Int64

        enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case packingQuota = "PackingQuota"
        }
    }

    /// 峰值信息
    public struct PeakBase: TCOutputModel {
        /// CPU峰值
        public let peakCpuNum: Int64

        /// 内存峰值
        public let peakMemoryNum: Int64

        /// 硬盘峰值
        public let peakStorageNum: Int64

        /// 记录时间
        public let recordTime: String

        enum CodingKeys: String, CodingKey {
            case peakCpuNum = "PeakCpuNum"
            case peakMemoryNum = "PeakMemoryNum"
            case peakStorageNum = "PeakStorageNum"
            case recordTime = "RecordTime"
        }
    }

    /// PeakFamilyInfo 按机型类别分类的cpu等数据的峰值信息
    public struct PeakFamilyInfo: TCOutputModel {
        /// 机型类别信息。
        public let instanceFamily: InstanceFamilyTypeConfig

        /// 基础数据峰值信息。
        public let peakBaseSet: [PeakBase]

        enum CodingKeys: String, CodingKey {
            case instanceFamily = "InstanceFamily"
            case peakBaseSet = "PeakBaseSet"
        }
    }

    /// 峰值网络数据
    public struct PeakNetwork: TCOutputModel {
        /// 记录时间。
        public let recordTime: String

        /// 入带宽数据。
        public let peakInNetwork: String

        /// 出带宽数据。
        public let peakOutNetwork: String

        /// 计费带宽。单位bps
        public let chargeNetwork: String

        enum CodingKeys: String, CodingKey {
            case recordTime = "RecordTime"
            case peakInNetwork = "PeakInNetwork"
            case peakOutNetwork = "PeakOutNetwork"
            case chargeNetwork = "ChargeNetwork"
        }
    }

    /// region维度的网络峰值信息
    public struct PeakNetworkRegionInfo: TCOutputModel {
        /// region信息
        public let region: String

        /// 网络峰值集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let peakNetworkSet: [PeakNetwork]?

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case peakNetworkSet = "PeakNetworkSet"
        }
    }

    /// 物理位置信息
    public struct PhysicalPosition: TCOutputModel {
        /// 机位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let posId: String?

        /// 机架
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rackId: String?

        /// 交换机
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let switchId: String?

        enum CodingKeys: String, CodingKey {
            case posId = "PosId"
            case rackId = "RackId"
            case switchId = "SwitchId"
        }
    }

    /// 描述了实例的抽象位置，包括其所在的可用区，所属的项目，以及所属的独享集群的ID和名字。
    public struct Placement: TCInputModel, TCOutputModel {
        /// 云硬盘所属的[可用区](/document/product/213/15753#ZoneInfo)。该参数也可以通过调用  [DescribeZones](/document/product/213/15707) 的返回值中的Zone字段来获取。
        public let zone: String

        /// 围笼Id。作为入参时，表示对指定的CageId的资源进行操作，可为空。 作为出参时，表示资源所属围笼ID，可为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cageId: String?

        /// 实例所属项目ID。该参数可以通过调用 [DescribeProject](/document/api/378/4400) 的返回值中的 projectId 字段来获取。不填为默认项目。
        public let projectId: UInt64?

        /// 独享集群名字。作为入参时，忽略。作为出参时，表示云硬盘所属的独享集群名，可为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcName: String?

        /// 实例所属的独享集群ID。作为入参时，表示对指定的CdcId独享集群的资源进行操作，可为空。 作为出参时，表示资源所属的独享集群的ID，可为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcId: String?

        public init(zone: String, cageId: String? = nil, projectId: UInt64? = nil, cdcName: String? = nil, cdcId: String? = nil) {
            self.zone = zone
            self.cageId = cageId
            self.projectId = projectId
            self.cdcName = cdcName
            self.cdcId = cdcId
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case cageId = "CageId"
            case projectId = "ProjectId"
            case cdcName = "CdcName"
            case cdcId = "CdcId"
        }
    }

    /// 描述实例的位置相关信息。
    public struct Position: TCOutputModel {
        /// 实例所在的Zone的信息。
        public let zoneInfo: ZoneInfo

        /// 实例所在的国家的信息。
        public let country: Country

        /// 实例所在的Area的信息。
        public let area: Area

        /// 实例所在的省份的信息。
        public let province: Province

        /// 实例所在的城市的信息。
        public let city: City

        /// 实例所在的Region的信息。
        public let regionInfo: RegionInfo

        enum CodingKeys: String, CodingKey {
            case zoneInfo = "ZoneInfo"
            case country = "Country"
            case area = "Area"
            case province = "Province"
            case city = "City"
            case regionInfo = "RegionInfo"
        }
    }

    /// 描述cpu,内存等维度的价格
    public struct PriceDetail: TCInputModel, TCOutputModel {
        /// 表示折扣，20 表示20%，打2折
        public let discount: UInt64

        /// 打折后价格，单位分
        public let discountPrice: UInt64

        /// 折扣前价格，单位分
        public let originalPrice: UInt64

        public init(discount: UInt64, discountPrice: UInt64, originalPrice: UInt64) {
            self.discount = discount
            self.discountPrice = discountPrice
            self.originalPrice = originalPrice
        }

        enum CodingKeys: String, CodingKey {
            case discount = "Discount"
            case discountPrice = "DiscountPrice"
            case originalPrice = "OriginalPrice"
        }
    }

    /// 实例的内网ip相关信息。
    public struct PrivateIPAddressInfo: TCOutputModel {
        /// 实例的内网ip。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIPAddress: String?

        enum CodingKeys: String, CodingKey {
            case privateIPAddress = "PrivateIPAddress"
        }
    }

    /// 内网IP信息
    public struct PrivateIpAddressSpecification: TCInputModel, TCOutputModel {
        /// 内网IP地址。
        public let privateIpAddress: String

        /// 是否是主IP。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let primary: Bool?

        /// 公网IP地址。
        public let publicIpAddress: String?

        /// EIP实例ID，例如：eip-11112222。
        public let addressId: String?

        /// 内网IP描述信息。
        public let description: String?

        /// 公网IP是否被封堵。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isWanIpBlocked: Bool?

        /// IP状态：
        /// PENDING：生产中
        /// MIGRATING：迁移中
        /// DELETING：删除中
        /// AVAILABLE：可用的
        public let state: String?

        public init(privateIpAddress: String, primary: Bool? = nil, publicIpAddress: String? = nil, addressId: String? = nil, description: String? = nil, isWanIpBlocked: Bool? = nil, state: String? = nil) {
            self.privateIpAddress = privateIpAddress
            self.primary = primary
            self.publicIpAddress = publicIpAddress
            self.addressId = addressId
            self.description = description
            self.isWanIpBlocked = isWanIpBlocked
            self.state = state
        }

        enum CodingKeys: String, CodingKey {
            case privateIpAddress = "PrivateIpAddress"
            case primary = "Primary"
            case publicIpAddress = "PublicIpAddress"
            case addressId = "AddressId"
            case description = "Description"
            case isWanIpBlocked = "IsWanIpBlocked"
            case state = "State"
        }
    }

    /// 省份信息
    public struct Province: TCOutputModel {
        /// 省份Id
        public let provinceId: String

        /// 省份名称
        public let provinceName: String

        enum CodingKeys: String, CodingKey {
            case provinceId = "ProvinceId"
            case provinceName = "ProvinceName"
        }
    }

    /// 实例的公网ip相关信息。
    public struct PublicIPAddressInfo: TCOutputModel {
        /// 计费模式。
        public let chargeMode: String

        /// 实例的公网ip。
        public let publicIPAddress: String

        /// 实例的公网ip所属的运营商。
        public let isp: ISP

        /// 实例的最大出带宽上限，单位为Mbps。
        public let maxBandwidthOut: Int64

        /// 实例的最大入带宽上限，单位为Mbps。
        public let maxBandwidthIn: Int64

        enum CodingKeys: String, CodingKey {
            case chargeMode = "ChargeMode"
            case publicIPAddress = "PublicIPAddress"
            case isp = "ISP"
            case maxBandwidthOut = "MaxBandwidthOut"
            case maxBandwidthIn = "MaxBandwidthIn"
        }
    }

    /// Region和RegionName
    public struct RegionInfo: TCOutputModel {
        /// Region
        public let region: String

        /// Region名称
        public let regionName: String

        /// RegionID
        public let regionId: Int64

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionName = "RegionName"
            case regionId = "RegionId"
        }
    }

    /// 路由策略
    public struct Route: TCInputModel, TCOutputModel {
        /// 目的IPv4网段
        public let destinationCidrBlock: String?

        /// 下一跳类型
        /// NORMAL_CVM：普通云服务器；
        public let gatewayType: String?

        /// 下一跳地址
        /// 这里只需要指定不同下一跳类型的网关ID，系统会自动匹配到下一跳地址
        /// 当 GatewayType 为 EIP 时，GatewayId 固定值 '0'
        public let gatewayId: String?

        /// 路由策略唯一ID
        public let routeItemId: String?

        /// 路由策略描述
        public let routeDescription: String?

        /// 是否启用
        public let enabled: Bool?

        /// 路由类型，目前我们支持的类型有：
        /// USER：用户路由；
        /// NETD：网络探测路由，创建网络探测实例时，系统默认下发，不可编辑与删除；
        /// CCN：云联网路由，系统默认下发，不可编辑与删除。
        /// 用户只能添加和操作 USER 类型的路由。
        public let routeType: String?

        /// 路由策略ID。IPv4路由策略ID是有意义的值，IPv6路由策略是无意义的值0。后续建议完全使用字符串唯一ID `RouteItemId`操作路由策略
        public let routeId: UInt64?

        /// 路由表实例ID，例如：rtb-azd4dt1c。
        public let routeTableId: String?

        public init(destinationCidrBlock: String? = nil, gatewayType: String? = nil, gatewayId: String? = nil, routeItemId: String? = nil, routeDescription: String? = nil, enabled: Bool? = nil, routeType: String? = nil, routeId: UInt64? = nil, routeTableId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.gatewayType = gatewayType
            self.gatewayId = gatewayId
            self.routeItemId = routeItemId
            self.routeDescription = routeDescription
            self.enabled = enabled
            self.routeType = routeType
            self.routeId = routeId
            self.routeTableId = routeTableId
        }

        enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case gatewayType = "GatewayType"
            case gatewayId = "GatewayId"
            case routeItemId = "RouteItemId"
            case routeDescription = "RouteDescription"
            case enabled = "Enabled"
            case routeType = "RouteType"
            case routeId = "RouteId"
            case routeTableId = "RouteTableId"
        }
    }

    /// 路由冲突对象
    public struct RouteConflict: TCOutputModel {
        /// 路由表实例ID
        public let routeTableId: String?

        /// 要检查的与之冲突的目的端
        public let destinationCidrBlock: String

        /// 冲突的路由策略列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conflictSet: [Route]?

        enum CodingKeys: String, CodingKey {
            case routeTableId = "RouteTableId"
            case destinationCidrBlock = "DestinationCidrBlock"
            case conflictSet = "ConflictSet"
        }
    }

    /// 路由表
    public struct RouteTable: TCInputModel, TCOutputModel {
        /// VPC实例ID
        public let vpcId: String?

        /// 路由表实例ID
        public let routeTableId: String?

        /// 路由表名称
        public let routeTableName: String?

        /// 路由表关联关系
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let associationSet: [RouteTableAssociation]?

        /// IPv4路由策略集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let routeSet: [Route]?

        /// 是否默认路由表
        public let main: Bool?

        /// 创建时间
        public let createdTime: String?

        public init(vpcId: String? = nil, routeTableId: String? = nil, routeTableName: String? = nil, associationSet: [RouteTableAssociation]? = nil, routeSet: [Route]? = nil, main: Bool? = nil, createdTime: String? = nil) {
            self.vpcId = vpcId
            self.routeTableId = routeTableId
            self.routeTableName = routeTableName
            self.associationSet = associationSet
            self.routeSet = routeSet
            self.main = main
            self.createdTime = createdTime
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case routeTableId = "RouteTableId"
            case routeTableName = "RouteTableName"
            case associationSet = "AssociationSet"
            case routeSet = "RouteSet"
            case main = "Main"
            case createdTime = "CreatedTime"
        }
    }

    /// 路由表关联关系
    public struct RouteTableAssociation: TCInputModel, TCOutputModel {
        /// 子网实例ID
        public let subnetId: String?

        /// 路由表实例ID
        public let routeTableId: String?

        public init(subnetId: String? = nil, routeTableId: String? = nil) {
            self.subnetId = subnetId
            self.routeTableId = routeTableId
        }

        enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case routeTableId = "RouteTableId"
        }
    }

    /// 转发规则及健康状态列表
    public struct RuleHealth: TCOutputModel {
        /// 本规则上绑定的后端的健康检查状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targets: [TargetHealth]?

        enum CodingKeys: String, CodingKey {
            case targets = "Targets"
        }
    }

    /// IP直通相关的信息
    public struct RunEIPDirectServiceEnabled: TCInputModel {
        /// 是否开通IP直通。取值范围：
        /// TRUE：表示开通IP直通
        /// FALSE：表示不开通IP直通
        /// 默认取值：TRUE。
        /// windows镜像目前不支持IP直通。
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    /// 云监控服务
    public struct RunMonitorServiceEnabled: TCInputModel {
        /// 是否开启。
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    /// 云镜服务；
    public struct RunSecurityServiceEnabled: TCInputModel {
        /// 是否开启。
        public let enabled: Bool?

        /// 云镜版本：0 基础版，1 专业版。目前仅支持基础版
        public let version: Int64?

        public init(enabled: Bool? = nil, version: Int64? = nil) {
            self.enabled = enabled
            self.version = version
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case version = "Version"
        }
    }

    /// 安全组对象
    public struct SecurityGroup: TCInputModel, TCOutputModel {
        /// 安全组实例ID，例如：esg-ohuuioma。
        public let securityGroupId: String

        /// 安全组名称，可任意命名，但不得超过60个字符。
        public let securityGroupName: String

        /// 安全组备注，最多100个字符。
        public let securityGroupDesc: String

        /// 是否是默认安全组，默认安全组不支持删除。
        public let isDefault: Bool?

        /// 安全组创建时间。
        public let createdTime: String?

        /// 标签键值对。
        public let tagSet: [Tag]?

        public init(securityGroupId: String, securityGroupName: String, securityGroupDesc: String, isDefault: Bool? = nil, createdTime: String? = nil, tagSet: [Tag]? = nil) {
            self.securityGroupId = securityGroupId
            self.securityGroupName = securityGroupName
            self.securityGroupDesc = securityGroupDesc
            self.isDefault = isDefault
            self.createdTime = createdTime
            self.tagSet = tagSet
        }

        enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupDesc = "SecurityGroupDesc"
            case isDefault = "IsDefault"
            case createdTime = "CreatedTime"
            case tagSet = "TagSet"
        }
    }

    /// 安全组关联的资源统计
    public struct SecurityGroupAssociationStatistics: TCOutputModel {
        /// 安全组实例ID。
        public let securityGroupId: String

        /// ECM实例数。
        public let ecm: Int64

        /// ECM模块数。
        public let module: Int64

        /// 弹性网卡实例数。
        public let eni: Int64

        /// 被安全组引用数。
        public let sg: Int64

        /// 负载均衡实例数。
        public let clb: Int64

        /// 全量实例的绑定统计。
        public let instanceStatistics: [InstanceStatistic]

        /// 所有资源的总计数（不包含被安全组引用数）。
        public let totalCount: Int64

        enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
            case ecm = "ECM"
            case module = "Module"
            case eni = "ENI"
            case sg = "SG"
            case clb = "CLB"
            case instanceStatistics = "InstanceStatistics"
            case totalCount = "TotalCount"
        }
    }

    /// 用户安全组配额限制
    public struct SecurityGroupLimitSet: TCOutputModel {
        /// 可创建安全组总数
        public let securityGroupLimit: Int64

        /// 安全组下的最大规则数
        public let securityGroupPolicyLimit: Int64

        /// 安全组下嵌套安全组规则数
        public let referedSecurityGroupLimit: Int64

        /// 单安全组关联实例数
        public let securityGroupInstanceLimit: Int64

        /// 实例关联安全组数
        public let instanceSecurityGroupLimit: Int64

        /// 单安全组关联的模块数
        public let securityGroupModuleLimit: Int64

        /// 模块关联的安全组数
        public let moduleSecurityGroupLimit: Int64

        enum CodingKeys: String, CodingKey {
            case securityGroupLimit = "SecurityGroupLimit"
            case securityGroupPolicyLimit = "SecurityGroupPolicyLimit"
            case referedSecurityGroupLimit = "ReferedSecurityGroupLimit"
            case securityGroupInstanceLimit = "SecurityGroupInstanceLimit"
            case instanceSecurityGroupLimit = "InstanceSecurityGroupLimit"
            case securityGroupModuleLimit = "SecurityGroupModuleLimit"
            case moduleSecurityGroupLimit = "ModuleSecurityGroupLimit"
        }
    }

    /// 安全组规则对象
    public struct SecurityGroupPolicy: TCInputModel, TCOutputModel {
        /// 安全组规则索引号
        public let policyIndex: Int64?

        /// 协议, 取值: TCP,UDP, ICMP。
        public let `protocol`: String?

        /// 端口(all, 离散port, range)。
        public let port: String?

        /// 协议端口ID或者协议端口组ID。ServiceTemplate和Protocol+Port互斥。
        public let serviceTemplate: ServiceTemplateSpecification?

        /// 网段或IP(互斥)。
        public let cidrBlock: String?

        /// 安全组实例ID，例如：esg-ohuuioma。
        public let securityGroupId: String?

        /// IP地址ID或者ID地址组ID。
        public let addressTemplate: AddressTemplateSpecification?

        /// ACCEPT 或 DROP。
        public let action: String?

        /// 安全组规则描述。
        public let policyDescription: String?

        /// 修改时间，例如 2020-07-22 19：27：23
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifyTime: String?

        /// 网段或IPv6(互斥)。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6CidrBlock: String?

        public init(policyIndex: Int64? = nil, protocol: String? = nil, port: String? = nil, serviceTemplate: ServiceTemplateSpecification? = nil, cidrBlock: String? = nil, securityGroupId: String? = nil, addressTemplate: AddressTemplateSpecification? = nil, action: String? = nil, policyDescription: String? = nil, modifyTime: String? = nil, ipv6CidrBlock: String? = nil) {
            self.policyIndex = policyIndex
            self.protocol = `protocol`
            self.port = port
            self.serviceTemplate = serviceTemplate
            self.cidrBlock = cidrBlock
            self.securityGroupId = securityGroupId
            self.addressTemplate = addressTemplate
            self.action = action
            self.policyDescription = policyDescription
            self.modifyTime = modifyTime
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        enum CodingKeys: String, CodingKey {
            case policyIndex = "PolicyIndex"
            case `protocol` = "Protocol"
            case port = "Port"
            case serviceTemplate = "ServiceTemplate"
            case cidrBlock = "CidrBlock"
            case securityGroupId = "SecurityGroupId"
            case addressTemplate = "AddressTemplate"
            case action = "Action"
            case policyDescription = "PolicyDescription"
            case modifyTime = "ModifyTime"
            case ipv6CidrBlock = "Ipv6CidrBlock"
        }
    }

    /// 安全组规则集合
    public struct SecurityGroupPolicySet: TCInputModel, TCOutputModel {
        /// 安全组规则当前版本。用户每次更新安全规则版本会自动加1，防止更新的路由规则已过期，不填不考虑冲突。
        public let version: String?

        /// 出站规则。其中出站规则和入站规则必须选一个。
        public let egress: [SecurityGroupPolicy]?

        /// 入站规则。其中出站规则和入站规则必须选一个。
        public let ingress: [SecurityGroupPolicy]?

        public init(version: String? = nil, egress: [SecurityGroupPolicy]? = nil, ingress: [SecurityGroupPolicy]? = nil) {
            self.version = version
            self.egress = egress
            self.ingress = ingress
        }

        enum CodingKeys: String, CodingKey {
            case version = "Version"
            case egress = "Egress"
            case ingress = "Ingress"
        }
    }

    /// 协议端口模板
    public struct ServiceTemplateSpecification: TCInputModel, TCOutputModel {
        /// 协议端口ID，例如：eppm-f5n1f8da。
        public let serviceId: String

        /// 协议端口组ID，例如：eppmg-f5n1f8da。
        public let serviceGroupId: String

        public init(serviceId: String, serviceGroupId: String) {
            self.serviceId = serviceId
            self.serviceGroupId = serviceGroupId
        }

        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
            case serviceGroupId = "ServiceGroupId"
        }
    }

    /// Module的简要信息
    public struct SimpleModule: TCOutputModel {
        /// 模块ID
        public let moduleId: String

        /// 模块名称
        public let moduleName: String

        enum CodingKeys: String, CodingKey {
            case moduleId = "ModuleId"
            case moduleName = "ModuleName"
        }
    }

    /// 描述了快照的详细信息
    public struct Snapshot: TCOutputModel {
        /// 快照所在的位置。
        public let placement: Placement?

        /// 是否为跨地域复制的快照。取值范围：
        /// - true：表示为跨地域复制的快照。
        /// - false:本地域的快照。
        public let copyFromRemote: Bool

        /// 是否为永久快照。取值范围：
        /// - true：永久快照
        /// - false：非永久快照。
        public let isPermanent: Bool?

        /// 快照名称，用户自定义的快照别名。调用[ModifySnapshotAttribute](/document/product/362/15650)可修改此字段。
        public let snapshotName: String?

        /// 快照创建进度百分比，快照创建成功后此字段恒为100。
        public let percent: UInt64?

        /// 快照关联的镜像列表。
        public let images: [Image]

        /// 快照当前被共享数。
        public let shareReference: UInt64

        /// 快照类型，目前该项取值可以为PRIVATE_SNAPSHOT或者SHARED_SNAPSHOT
        public let snapshotType: String

        /// 创建此快照的云硬盘大小，单位GB。
        public let diskSize: UInt64?

        /// 创建此快照的云硬盘ID。
        public let diskId: String?

        /// 快照正在跨地域复制的目的地域，默认取值为[]。
        public let copyingToRegions: [String]

        /// 快照ID。
        public let snapshotId: String?

        /// 创建此快照的云硬盘类型。取值范围：
        /// - SYSTEM_DISK：系统盘
        /// - DATA_DISK：数据盘。
        public let diskUsage: String?

        /// 是否为加密盘创建的快照。取值范围：
        /// - true：该快照为加密盘创建的
        /// - false:非加密盘创建的快照。
        public let encrypt: Bool?

        /// 快照的创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date?

        /// 快照关联的镜像个数。
        public let imageCount: UInt64

        /// 快照的状态。取值范围：
        /// - NORMAL：正常
        /// - CREATING：创建中
        /// - ROLLBACKING：回滚中
        /// - COPYING_FROM_REMOTE：跨地域复制中
        /// - CHECKING_COPIED：复制校验中
        /// - TORECYCLE：待回收。
        public let snapshotState: String?

        /// 快照的到期时间。
        public let deadlineTime: String

        /// 快照开始共享的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeStartShare: String?

        enum CodingKeys: String, CodingKey {
            case placement = "Placement"
            case copyFromRemote = "CopyFromRemote"
            case isPermanent = "IsPermanent"
            case snapshotName = "SnapshotName"
            case percent = "Percent"
            case images = "Images"
            case shareReference = "ShareReference"
            case snapshotType = "SnapshotType"
            case diskSize = "DiskSize"
            case diskId = "DiskId"
            case copyingToRegions = "CopyingToRegions"
            case snapshotId = "SnapshotId"
            case diskUsage = "DiskUsage"
            case encrypt = "Encrypt"
            case createTime = "CreateTime"
            case imageCount = "ImageCount"
            case snapshotState = "SnapshotState"
            case deadlineTime = "DeadlineTime"
            case timeStartShare = "TimeStartShare"
        }
    }

    /// 镜像来源信息
    public struct SrcImage: TCOutputModel {
        /// 镜像id
        public let imageId: String

        /// 镜像名称
        public let imageName: String

        /// 系统名称
        public let imageOsName: String

        /// 镜像描述
        public let imageDescription: String

        /// 区域
        public let region: String

        /// 区域ID
        public let regionID: Int64

        /// 区域名称
        public let regionName: String

        /// 来源实例名称
        public let instanceName: String

        /// 来源实例ID
        public let instanceId: String

        /// 来源镜像类型
        public let imageType: String

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case imageName = "ImageName"
            case imageOsName = "ImageOsName"
            case imageDescription = "ImageDescription"
            case region = "Region"
            case regionID = "RegionID"
            case regionName = "RegionName"
            case instanceName = "InstanceName"
            case instanceId = "InstanceId"
            case imageType = "ImageType"
        }
    }

    /// 子网对象
    public struct Subnet: TCOutputModel {
        /// VPC实例ID。
        public let vpcId: String

        /// 子网实例ID，例如：subnet-bthucmmy。
        public let subnetId: String

        /// 子网名称。
        public let subnetName: String

        /// 子网的 IPv4 CIDR。
        public let cidrBlock: String

        /// 是否默认子网。
        public let isDefault: Bool

        /// 是否开启广播。
        public let enableBroadcast: Bool

        /// 路由表实例ID，例如：rtb-l2h8d7c2。
        public let routeTableId: String

        /// 创建时间。
        public let createdTime: String

        /// 可用IP数。
        public let availableIpAddressCount: UInt64

        /// 子网的 IPv6 CIDR。
        public let ipv6CidrBlock: String

        /// 关联ACLID
        public let networkAclId: String

        /// 是否为 SNAT 地址池子网。
        public let isRemoteVpcSnat: Bool

        /// 标签键值对。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [Tag]?

        /// 所在区域
        public let zone: String

        /// 可用区名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneName: String?

        /// 实例数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceCount: UInt64?

        /// VPC的 IPv4 CIDR。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcCidrBlock: String?

        /// VPC的 IPv6 CIDR。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcIpv6CidrBlock: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 运营商类型。'CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ispType: String?

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case subnetName = "SubnetName"
            case cidrBlock = "CidrBlock"
            case isDefault = "IsDefault"
            case enableBroadcast = "EnableBroadcast"
            case routeTableId = "RouteTableId"
            case createdTime = "CreatedTime"
            case availableIpAddressCount = "AvailableIpAddressCount"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case networkAclId = "NetworkAclId"
            case isRemoteVpcSnat = "IsRemoteVpcSnat"
            case tagSet = "TagSet"
            case zone = "Zone"
            case zoneName = "ZoneName"
            case instanceCount = "InstanceCount"
            case vpcCidrBlock = "VpcCidrBlock"
            case vpcIpv6CidrBlock = "VpcIpv6CidrBlock"
            case region = "Region"
            case ispType = "ISPType"
        }
    }

    /// 用于描述系统盘。
    public struct SystemDisk: TCInputModel, TCOutputModel {
        /// 硬盘类型。取值范围：
        /// - LOCAL_BASIC：本地硬盘；
        /// - CLOUD_PREMIUM：高性能云硬盘；
        /// 默认取值：CLOUD_BASIC。
        public let diskType: String?

        /// 硬盘ID。此参数暂不可用。
        public let diskId: String?

        /// 硬盘容量大小。单位GB。
        public let diskSize: Int64?

        public init(diskType: String? = nil, diskId: String? = nil, diskSize: Int64? = nil) {
            self.diskType = diskType
            self.diskId = diskId
            self.diskSize = diskSize
        }

        enum CodingKeys: String, CodingKey {
            case diskType = "DiskType"
            case diskId = "DiskId"
            case diskSize = "DiskSize"
        }
    }

    /// 标签信息。
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签健。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 标签值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 标签信息。
    public struct TagInfo: TCInputModel {
        /// 标签的键。
        public let tagKey: String?

        /// 标签的值。
        public let tagValue: String?

        public init(tagKey: String? = nil, tagValue: String? = nil) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 资源类型的Tag
    public struct TagSpecification: TCInputModel {
        /// 资源类型，目前仅支持"instance"、"module"
        public let resourceType: String

        /// 标签列表
        public let tags: [Tag]

        public init(resourceType: String, tags: [Tag]) {
            self.resourceType = resourceType
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case tags = "Tags"
        }
    }

    /// 负责均衡后端目标
    public struct Target: TCInputModel {
        /// 后端服务的监听端口
        public let port: Int64?

        /// 子机ID
        public let instanceId: String?

        /// 后端服务的转发权重，取值范围：[0, 100]，默认为 10。
        public let weight: Int64?

        /// 绑定弹性网卡时需要传入此参数，代表弹性网卡的IP，弹性网卡必须先绑定至子机，然后才能绑定到负载均衡实例。注意：参数 InstanceId 和 EniIp 只能传入一个且必须传入一个。
        public let eniIp: String?

        public init(port: Int64? = nil, instanceId: String? = nil, weight: Int64? = nil, eniIp: String? = nil) {
            self.port = port
            self.instanceId = instanceId
            self.weight = weight
            self.eniIp = eniIp
        }

        enum CodingKeys: String, CodingKey {
            case port = "Port"
            case instanceId = "InstanceId"
            case weight = "Weight"
            case eniIp = "EniIp"
        }
    }

    /// 后端的健康检查状态
    public struct TargetHealth: TCOutputModel {
        /// Target的内网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// Target绑定的端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 当前健康状态，true：健康，false：不健康（包括尚未开始探测、探测中、状态异常等几种状态）。只有处于健康状态（且权重大于0），负载均衡才会向其转发流量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthStatus: Bool?

        /// Target的实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetId: String?

        /// 当前健康状态的详细信息。如：Alive、Dead、Unknown、Close。Alive状态为健康，Dead状态为异常，Unknown状态包括尚未开始探测、探测中、状态未知，Close为未配置健康检查。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthStatusDetail: String?

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case port = "Port"
            case healthStatus = "HealthStatus"
            case targetId = "TargetId"
            case healthStatusDetail = "HealthStatusDetail"
        }
    }

    /// 目标和权重的描述信息
    public struct TargetsWeightRule: TCInputModel {
        /// 负载均衡监听器 ID
        public let listenerId: String?

        /// 要修改权重的后端机器列表
        public let targets: [Target]?

        /// 后端服务新的转发权重，取值范围：0~100。
        public let weight: Int64?

        public init(listenerId: String? = nil, targets: [Target]? = nil, weight: Int64? = nil) {
            self.listenerId = listenerId
            self.targets = targets
            self.weight = weight
        }

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case targets = "Targets"
            case weight = "Weight"
        }
    }

    /// 任务查询
    public struct TaskInput: TCInputModel {
        /// 操作名，即API名称，比如：CreateImage
        public let operation: String

        /// 任务id
        public let taskId: String

        public init(operation: String, taskId: String) {
            self.operation = operation
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case operation = "Operation"
            case taskId = "TaskId"
        }
    }

    /// 任务查询出参
    public struct TaskOutput: TCOutputModel {
        /// 任务id
        public let taskId: String

        /// 状态描述
        public let message: String

        /// 状态值，SUCCESS/FAILED/OPERATING
        public let status: String

        /// 任务提交时间
        public let addTime: String

        /// 任务结束时间
        public let endTime: String

        /// 操作名
        public let operation: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case message = "Message"
            case status = "Status"
            case addTime = "AddTime"
            case endTime = "EndTime"
            case operation = "Operation"
        }
    }

    /// 私有网络相关信息配置。
    public struct VirtualPrivateCloud: TCInputModel, TCOutputModel {
        /// 私有网络ID，形如vpc-xxx。
        public let vpcId: String

        /// 私有网络子网ID，形如subnet-xxx。
        public let subnetId: String

        /// 是否用作公网网关。公网网关只有在实例拥有公网IP以及处于私有网络下时才能正常使用。取值范围：
        /// TRUE：表示用作公网网关
        /// FALSE：表示不用作公网网关
        ///
        /// 默认取值：FALSE。
        public let asVpcGateway: Bool?

        /// 私有网络子网 IP 数组，在创建实例、修改实例vpc属性操作中可使用此参数。
        public let privateIpAddresses: [String]?

        /// 为弹性网卡指定随机生成的 IPv6 地址数量。
        public let ipv6AddressCount: Int64?

        public init(vpcId: String, subnetId: String, asVpcGateway: Bool? = nil, privateIpAddresses: [String]? = nil, ipv6AddressCount: Int64? = nil) {
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.asVpcGateway = asVpcGateway
            self.privateIpAddresses = privateIpAddresses
            self.ipv6AddressCount = ipv6AddressCount
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case asVpcGateway = "AsVpcGateway"
            case privateIpAddresses = "PrivateIpAddresses"
            case ipv6AddressCount = "Ipv6AddressCount"
        }
    }

    /// 私有网络(VPC) 对象。
    public struct VpcInfo: TCOutputModel {
        /// VPC名称。
        public let vpcName: String

        /// VPC实例ID，例如：vpc-azd4dt1c。
        public let vpcId: String

        /// VPC的IPv4 CIDR。
        public let cidrBlock: String

        /// 是否默认VPC。
        public let isDefault: Bool

        /// 是否开启组播。
        public let enableMulticast: Bool

        /// 创建时间。
        public let createdTime: String

        /// DNS列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dnsServerSet: [String]?

        /// DHCP域名选项值。
        public let domainName: String

        /// DHCP选项集ID。
        public let dhcpOptionsId: String

        /// 是否开启DHCP。
        public let enableDhcp: Bool

        /// VPC的IPv6 CIDR。
        public let ipv6CidrBlock: String

        /// 标签键值对
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [Tag]?

        /// 辅助CIDR
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assistantCidrSet: [AssistantCidr]?

        /// 地域
        public let region: String

        /// 描述
        public let description: String

        /// 地域中文名
        public let regionName: String

        /// 包含子网数量
        public let subnetCount: UInt64

        /// 包含实例数量
        public let instanceCount: UInt64

        /// ipv6运营商
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6ISP: String?

        /// 多运营商IPv6 Cidr Block。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6CidrBlockSet: [ISPIPv6CidrBlock]?

        enum CodingKeys: String, CodingKey {
            case vpcName = "VpcName"
            case vpcId = "VpcId"
            case cidrBlock = "CidrBlock"
            case isDefault = "IsDefault"
            case enableMulticast = "EnableMulticast"
            case createdTime = "CreatedTime"
            case dnsServerSet = "DnsServerSet"
            case domainName = "DomainName"
            case dhcpOptionsId = "DhcpOptionsId"
            case enableDhcp = "EnableDhcp"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case tagSet = "TagSet"
            case assistantCidrSet = "AssistantCidrSet"
            case region = "Region"
            case description = "Description"
            case regionName = "RegionName"
            case subnetCount = "SubnetCount"
            case instanceCount = "InstanceCount"
            case ipv6ISP = "Ipv6ISP"
            case ipv6CidrBlockSet = "Ipv6CidrBlockSet"
        }
    }

    /// Zone信息
    public struct ZoneInfo: TCOutputModel {
        /// ZoneId
        public let zoneId: Int64

        /// ZoneName
        public let zoneName: String

        /// Zone
        public let zone: String

        enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case zone = "Zone"
        }
    }

    /// 实例可用区及对应的实例创建数目及运营商的组合；
    public struct ZoneInstanceCountISP: TCInputModel {
        /// 创建实例的可用区。
        public let zone: String

        /// 在当前可用区创建的实例数目。
        public let instanceCount: Int64

        /// 运营商如下：
        /// CTCC：中国电信
        /// CUCC：中国联通
        /// CMCC：中国移动
        /// 多个运营商用英文分号连接";"，例如："CMCC;CUCC;CTCC"。多运营商需要开通白名单，请直接联系腾讯云客服。
        public let isp: String

        /// 指定私有网络编号，SubnetId与VpcId必须同时指定或不指定
        public let vpcId: String?

        /// 指定子网编号，SubnetId与VpcId必须同时指定或不指定
        public let subnetId: String?

        /// 指定主网卡内网IP。条件：SubnetId与VpcId必须同时指定，并且IP数量与InstanceCount相同，多IP主机副网卡内网IP在相同子网内通过DHCP获取。
        public let privateIpAddresses: [String]?

        /// 为弹性网卡指定随机生成的IPv6地址数量，目前数量不能大于1。
        public let ipv6AddressCount: Int64?

        public init(zone: String, instanceCount: Int64, isp: String, vpcId: String? = nil, subnetId: String? = nil, privateIpAddresses: [String]? = nil, ipv6AddressCount: Int64? = nil) {
            self.zone = zone
            self.instanceCount = instanceCount
            self.isp = isp
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.privateIpAddresses = privateIpAddresses
            self.ipv6AddressCount = ipv6AddressCount
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case instanceCount = "InstanceCount"
            case isp = "ISP"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case privateIpAddresses = "PrivateIpAddresses"
            case ipv6AddressCount = "Ipv6AddressCount"
        }
    }

    /// Zone的实例信息
    public struct ZoneInstanceInfo: TCOutputModel {
        /// Zone名称
        public let zoneName: String

        /// 实例数量
        public let instanceNum: Int64

        enum CodingKeys: String, CodingKey {
            case zoneName = "ZoneName"
            case instanceNum = "InstanceNum"
        }
    }
}
