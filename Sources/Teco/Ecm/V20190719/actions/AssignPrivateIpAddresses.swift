//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ecm {
    /// AssignPrivateIpAddresses请求参数结构体
    public struct AssignPrivateIpAddressesRequest: TCRequestModel {
        /// 弹性网卡实例ID，例如：eni-m6dyj72l。
        public let networkInterfaceId: String

        /// ECM 地域，形如ap-xian-ecm。
        public let ecmRegion: String

        /// 指定的内网IP信息，单次最多指定10个。与SecondaryPrivateIpAddressCount至少提供一个。
        public let privateIpAddresses: [PrivateIpAddressSpecification]?

        /// 新申请的内网IP地址个数，与PrivateIpAddresses至少提供一个。内网IP地址个数总和不能超过配额数
        public let secondaryPrivateIpAddressCount: UInt64?

        public init(networkInterfaceId: String, ecmRegion: String, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: UInt64? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.ecmRegion = ecmRegion
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "NetworkInterfaceId"
            case ecmRegion = "EcmRegion"
            case privateIpAddresses = "PrivateIpAddresses"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
        }
    }

    /// AssignPrivateIpAddresses返回参数结构体
    public struct AssignPrivateIpAddressesResponse: TCResponseModel {
        /// 内网IP详细信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIpAddressSet: [PrivateIpAddressSpecification]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case privateIpAddressSet = "PrivateIpAddressSet"
            case requestId = "RequestId"
        }
    }

    /// 弹性网卡申请内网 IP
    @inlinable
    public func assignPrivateIpAddresses(_ input: AssignPrivateIpAddressesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssignPrivateIpAddressesResponse> {
        self.client.execute(action: "AssignPrivateIpAddresses", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 弹性网卡申请内网 IP
    @inlinable
    public func assignPrivateIpAddresses(_ input: AssignPrivateIpAddressesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssignPrivateIpAddressesResponse {
        try await self.client.execute(action: "AssignPrivateIpAddresses", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 弹性网卡申请内网 IP
    @inlinable
    public func assignPrivateIpAddresses(networkInterfaceId: String, ecmRegion: String, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssignPrivateIpAddressesResponse> {
        self.assignPrivateIpAddresses(.init(networkInterfaceId: networkInterfaceId, ecmRegion: ecmRegion, privateIpAddresses: privateIpAddresses, secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount), region: region, logger: logger, on: eventLoop)
    }

    /// 弹性网卡申请内网 IP
    @inlinable
    public func assignPrivateIpAddresses(networkInterfaceId: String, ecmRegion: String, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssignPrivateIpAddressesResponse {
        try await self.assignPrivateIpAddresses(.init(networkInterfaceId: networkInterfaceId, ecmRegion: ecmRegion, privateIpAddresses: privateIpAddresses, secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount), region: region, logger: logger, on: eventLoop)
    }
}
