//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecm {
    /// DescribeSubnets请求参数结构体
    public struct DescribeSubnetsRequest: TCRequestModel {
        /// 子网实例ID查询。形如：subnet-pxir56ns。每次请求的实例的上限为100。参数不支持同时指定SubnetIds和Filters。
        public let subnetIds: [String]?

        /// 过滤条件，参数不支持同时指定SubnetIds和Filters。
        /// subnet-id - String - Subnet实例名称。
        /// subnet-name - String - 子网名称。只支持单值的模糊查询。
        /// cidr-block - String - 子网网段，形如: 192.168.1.0 。只支持单值的模糊查询。
        /// vpc-id - String - VPC实例ID，形如：vpc-f49l6u0z。
        /// vpc-cidr-block  - String - vpc网段，形如: 192.168.1.0 。只支持单值的模糊查询。
        /// region - String - ECM地域
        /// zone - String - 可用区。
        /// tag-key - String -是否必填：否- 按照标签键进行过滤。
        /// tag:tag-key - String - 是否必填：否 - 按照标签键值对进行过滤。
        public let filters: [Filter]?

        /// 偏移量
        public let offset: String?

        /// 返回数量
        public let limit: String?

        /// ECM 地域
        public let ecmRegion: String?

        /// 排序方式：time时间倒序, default按照网络规划排序
        public let sort: String?

        public init(subnetIds: [String]? = nil, filters: [Filter]? = nil, offset: String? = nil, limit: String? = nil, ecmRegion: String? = nil, sort: String? = nil) {
            self.subnetIds = subnetIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.ecmRegion = ecmRegion
            self.sort = sort
        }

        enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
            case ecmRegion = "EcmRegion"
            case sort = "Sort"
        }
    }

    /// DescribeSubnets返回参数结构体
    public struct DescribeSubnetsResponse: TCResponseModel {
        /// 符合条件的实例数量。
        public let totalCount: UInt64

        /// 子网对象。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetSet: [Subnet]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case subnetSet = "SubnetSet"
            case requestId = "RequestId"
        }
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnets(_ input: DescribeSubnetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSubnetsResponse> {
        self.client.execute(action: "DescribeSubnets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnets(_ input: DescribeSubnetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSubnetsResponse {
        try await self.client.execute(action: "DescribeSubnets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnets(subnetIds: [String]? = nil, filters: [Filter]? = nil, offset: String? = nil, limit: String? = nil, ecmRegion: String? = nil, sort: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSubnetsResponse> {
        self.describeSubnets(DescribeSubnetsRequest(subnetIds: subnetIds, filters: filters, offset: offset, limit: limit, ecmRegion: ecmRegion, sort: sort), region: region, logger: logger, on: eventLoop)
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnets(subnetIds: [String]? = nil, filters: [Filter]? = nil, offset: String? = nil, limit: String? = nil, ecmRegion: String? = nil, sort: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSubnetsResponse {
        try await self.describeSubnets(DescribeSubnetsRequest(subnetIds: subnetIds, filters: filters, offset: offset, limit: limit, ecmRegion: ecmRegion, sort: sort), region: region, logger: logger, on: eventLoop)
    }
}
