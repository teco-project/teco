//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ecm {
    /// ResetInstances请求参数结构体
    public struct ResetInstancesRequest: TCRequestModel {
        /// 待重装的实例ID列表。
        public let instanceIdSet: [String]

        /// 重装使用的镜像ID，若未指定，则使用各个实例当前的镜像进行重装。
        public let imageId: String?

        /// 密码设置，若未指定，则后续将以站内信的形式通知密码。
        public let password: String?

        /// 是否开启云监控和云镜服务，未指定时默认开启。
        public let enhancedService: EnhancedService?

        /// 是否保留数据盘数据，取值"true"/"false"。默认为"true"
        public let keepData: String?

        /// 保持镜像的原始设置。该参数与Password或KeyIds.N不能同时指定。只有使用自定义镜像、共享镜像或外部导入镜像创建实例时才能指定该参数为TRUE。取值范围：
        /// TRUE：表示保持镜像的登录设置
        /// FALSE：表示不保持镜像的登录设置
        ///
        /// 默认取值：FALSE。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keepImageLogin: String?

        public init(instanceIdSet: [String], imageId: String? = nil, password: String? = nil, enhancedService: EnhancedService? = nil, keepData: String? = nil, keepImageLogin: String? = nil) {
            self.instanceIdSet = instanceIdSet
            self.imageId = imageId
            self.password = password
            self.enhancedService = enhancedService
            self.keepData = keepData
            self.keepImageLogin = keepImageLogin
        }

        enum CodingKeys: String, CodingKey {
            case instanceIdSet = "InstanceIdSet"
            case imageId = "ImageId"
            case password = "Password"
            case enhancedService = "EnhancedService"
            case keepData = "KeepData"
            case keepImageLogin = "KeepImageLogin"
        }
    }

    /// ResetInstances返回参数结构体
    public struct ResetInstancesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 重装实例
    ///
    /// 重装实例，若指定了ImageId参数，则使用指定的镜像重装；否则按照当前实例使用的镜像进行重装；若未指定密码，则密码通过站内信形式随后发送。
    @inlinable @discardableResult
    public func resetInstances(_ input: ResetInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ResetInstancesResponse> {
        self.client.execute(action: "ResetInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 重装实例
    ///
    /// 重装实例，若指定了ImageId参数，则使用指定的镜像重装；否则按照当前实例使用的镜像进行重装；若未指定密码，则密码通过站内信形式随后发送。
    @inlinable @discardableResult
    public func resetInstances(_ input: ResetInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ResetInstancesResponse {
        try await self.client.execute(action: "ResetInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 重装实例
    ///
    /// 重装实例，若指定了ImageId参数，则使用指定的镜像重装；否则按照当前实例使用的镜像进行重装；若未指定密码，则密码通过站内信形式随后发送。
    @inlinable @discardableResult
    public func resetInstances(instanceIdSet: [String], imageId: String? = nil, password: String? = nil, enhancedService: EnhancedService? = nil, keepData: String? = nil, keepImageLogin: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ResetInstancesResponse> {
        self.resetInstances(.init(instanceIdSet: instanceIdSet, imageId: imageId, password: password, enhancedService: enhancedService, keepData: keepData, keepImageLogin: keepImageLogin), region: region, logger: logger, on: eventLoop)
    }

    /// 重装实例
    ///
    /// 重装实例，若指定了ImageId参数，则使用指定的镜像重装；否则按照当前实例使用的镜像进行重装；若未指定密码，则密码通过站内信形式随后发送。
    @inlinable @discardableResult
    public func resetInstances(instanceIdSet: [String], imageId: String? = nil, password: String? = nil, enhancedService: EnhancedService? = nil, keepData: String? = nil, keepImageLogin: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ResetInstancesResponse {
        try await self.resetInstances(.init(instanceIdSet: instanceIdSet, imageId: imageId, password: password, enhancedService: enhancedService, keepData: keepData, keepImageLogin: keepImageLogin), region: region, logger: logger, on: eventLoop)
    }
}
