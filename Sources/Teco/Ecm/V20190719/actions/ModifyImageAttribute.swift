//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecm {
    /// ModifyImageAttribute请求参数结构体
    public struct ModifyImageAttributeRequest: TCRequestModel {
        /// 镜像ID，形如img-gvbnzy6f
        public let imageId: String

        /// 设置新的镜像名称；必须满足下列限制：
        /// 不得超过20个字符。
        /// - 镜像名称不能与已有镜像重复。
        public let imageName: String?

        /// 设置新的镜像描述；必须满足下列限制：
        /// - 不得超过60个字符。
        public let imageDescription: String?

        public init(imageId: String, imageName: String? = nil, imageDescription: String? = nil) {
            self.imageId = imageId
            self.imageName = imageName
            self.imageDescription = imageDescription
        }

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case imageName = "ImageName"
            case imageDescription = "ImageDescription"
        }
    }

    /// ModifyImageAttribute返回参数结构体
    public struct ModifyImageAttributeResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改镜像属性
    ///
    /// 本接口（ModifyImageAttribute）用于修改镜像属性。
    @inlinable
    public func modifyImageAttribute(_ input: ModifyImageAttributeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyImageAttributeResponse> {
        self.client.execute(action: "ModifyImageAttribute", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改镜像属性
    ///
    /// 本接口（ModifyImageAttribute）用于修改镜像属性。
    @inlinable
    public func modifyImageAttribute(_ input: ModifyImageAttributeRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyImageAttributeResponse {
        try await self.client.execute(action: "ModifyImageAttribute", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改镜像属性
    ///
    /// 本接口（ModifyImageAttribute）用于修改镜像属性。
    @inlinable
    public func modifyImageAttribute(imageId: String, imageName: String? = nil, imageDescription: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyImageAttributeResponse> {
        self.modifyImageAttribute(ModifyImageAttributeRequest(imageId: imageId, imageName: imageName, imageDescription: imageDescription), logger: logger, on: eventLoop)
    }

    /// 修改镜像属性
    ///
    /// 本接口（ModifyImageAttribute）用于修改镜像属性。
    @inlinable
    public func modifyImageAttribute(imageId: String, imageName: String? = nil, imageDescription: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyImageAttributeResponse {
        try await self.modifyImageAttribute(ModifyImageAttributeRequest(imageId: imageId, imageName: imageName, imageDescription: imageDescription), logger: logger, on: eventLoop)
    }
}
