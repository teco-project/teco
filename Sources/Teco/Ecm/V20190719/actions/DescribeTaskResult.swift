//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecm {
    /// 查询异步任务执行结果
    ///
    /// 查询EIP异步任务执行结果
    @inlinable
    public func describeTaskResult(_ input: DescribeTaskResultRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeTaskResultResponse > {
        self.client.execute(action: "DescribeTaskResult", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询异步任务执行结果
    ///
    /// 查询EIP异步任务执行结果
    @inlinable
    public func describeTaskResult(_ input: DescribeTaskResultRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskResultResponse {
        try await self.client.execute(action: "DescribeTaskResult", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeTaskResult请求参数结构体
    public struct DescribeTaskResultRequest: TCRequestModel {
        /// ECM 地域
        public let ecmRegion: String
        
        /// 异步任务ID。
        public let taskId: String
        
        public init (ecmRegion: String, taskId: String) {
            self.ecmRegion = ecmRegion
            self.taskId = taskId
        }
        
        enum CodingKeys: String, CodingKey {
            case ecmRegion = "EcmRegion"
            case taskId = "TaskId"
        }
    }
    
    /// DescribeTaskResult返回参数结构体
    public struct DescribeTaskResultResponse: TCResponseModel {
        /// 异步任务ID。
        public let taskId: String
        
        /// 执行结果，包括"SUCCESS", "FAILED", "RUNNING"
        public let result: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}