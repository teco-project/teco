//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecm {
    /// ImportCustomImage请求参数结构体
    public struct ImportCustomImageRequest: TCRequestModel {
        /// 镜像名称
        public let imageName: String

        /// 导入镜像的操作系统架构，x86_64 或 i386
        public let architecture: String

        /// 导入镜像的操作系统类型，通过DescribeImportImageOs获取
        public let osType: String

        /// 导入镜像的操作系统版本，通过DescribeImportImageOs获取
        public let osVersion: String

        /// 镜像描述
        public let imageDescription: String?

        /// 镜像启动方式，cloudinit或nbd， 默认cloudinit
        public let initFlag: String?

        /// 镜像文件描述，多层镜像按顺序传入
        public let imageUrls: [ImageUrl]?

        public init(imageName: String, architecture: String, osType: String, osVersion: String, imageDescription: String? = nil, initFlag: String? = nil, imageUrls: [ImageUrl]? = nil) {
            self.imageName = imageName
            self.architecture = architecture
            self.osType = osType
            self.osVersion = osVersion
            self.imageDescription = imageDescription
            self.initFlag = initFlag
            self.imageUrls = imageUrls
        }

        enum CodingKeys: String, CodingKey {
            case imageName = "ImageName"
            case architecture = "Architecture"
            case osType = "OsType"
            case osVersion = "OsVersion"
            case imageDescription = "ImageDescription"
            case initFlag = "InitFlag"
            case imageUrls = "ImageUrls"
        }
    }

    /// ImportCustomImage返回参数结构体
    public struct ImportCustomImageResponse: TCResponseModel {
        /// 镜像ID
        public let imageId: String

        /// 异步任务ID，可根据DescribeCustomImageTask查询任务信息
        public let taskId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 导入自定义镜像
    ///
    /// 导入自定义镜像，支持 RAW、VHD、QCOW2、VMDK 镜像格式
    @inlinable
    public func importCustomImage(_ input: ImportCustomImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ImportCustomImageResponse> {
        self.client.execute(action: "ImportCustomImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导入自定义镜像
    ///
    /// 导入自定义镜像，支持 RAW、VHD、QCOW2、VMDK 镜像格式
    @inlinable
    public func importCustomImage(_ input: ImportCustomImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ImportCustomImageResponse {
        try await self.client.execute(action: "ImportCustomImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导入自定义镜像
    ///
    /// 导入自定义镜像，支持 RAW、VHD、QCOW2、VMDK 镜像格式
    @inlinable
    public func importCustomImage(imageName: String, architecture: String, osType: String, osVersion: String, imageDescription: String? = nil, initFlag: String? = nil, imageUrls: [ImageUrl]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ImportCustomImageResponse> {
        let input = ImportCustomImageRequest(imageName: imageName, architecture: architecture, osType: osType, osVersion: osVersion, imageDescription: imageDescription, initFlag: initFlag, imageUrls: imageUrls)
        return self.client.execute(action: "ImportCustomImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导入自定义镜像
    ///
    /// 导入自定义镜像，支持 RAW、VHD、QCOW2、VMDK 镜像格式
    @inlinable
    public func importCustomImage(imageName: String, architecture: String, osType: String, osVersion: String, imageDescription: String? = nil, initFlag: String? = nil, imageUrls: [ImageUrl]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ImportCustomImageResponse {
        let input = ImportCustomImageRequest(imageName: imageName, architecture: architecture, osType: osType, osVersion: osVersion, imageDescription: imageDescription, initFlag: initFlag, imageUrls: imageUrls)
        return try await self.client.execute(action: "ImportCustomImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
