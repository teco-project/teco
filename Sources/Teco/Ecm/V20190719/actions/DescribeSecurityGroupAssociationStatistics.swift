//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ecm {
    /// DescribeSecurityGroupAssociationStatistics请求参数结构体
    public struct DescribeSecurityGroupAssociationStatisticsRequest: TCRequestModel {
        /// 安全实例ID，例如esg-33ocnj9n，可通过[DescribeSecurityGroups](https://cloud.tencent.com/document/product/1108/47697)获取。
        public let securityGroupIds: [String]

        public init(securityGroupIds: [String]) {
            self.securityGroupIds = securityGroupIds
        }

        enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    /// DescribeSecurityGroupAssociationStatistics返回参数结构体
    public struct DescribeSecurityGroupAssociationStatisticsResponse: TCResponseModel {
        /// 安全组关联实例统计。
        public let securityGroupAssociationStatisticsSet: [SecurityGroupAssociationStatistics]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case securityGroupAssociationStatisticsSet = "SecurityGroupAssociationStatisticsSet"
            case requestId = "RequestId"
        }
    }

    /// 查询安全组关联统计
    ///
    /// 查询安全组关联实例统计
    @inlinable
    public func describeSecurityGroupAssociationStatistics(_ input: DescribeSecurityGroupAssociationStatisticsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecurityGroupAssociationStatisticsResponse> {
        self.client.execute(action: "DescribeSecurityGroupAssociationStatistics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询安全组关联统计
    ///
    /// 查询安全组关联实例统计
    @inlinable
    public func describeSecurityGroupAssociationStatistics(_ input: DescribeSecurityGroupAssociationStatisticsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecurityGroupAssociationStatisticsResponse {
        try await self.client.execute(action: "DescribeSecurityGroupAssociationStatistics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询安全组关联统计
    ///
    /// 查询安全组关联实例统计
    @inlinable
    public func describeSecurityGroupAssociationStatistics(securityGroupIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecurityGroupAssociationStatisticsResponse> {
        self.describeSecurityGroupAssociationStatistics(.init(securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }

    /// 查询安全组关联统计
    ///
    /// 查询安全组关联实例统计
    @inlinable
    public func describeSecurityGroupAssociationStatistics(securityGroupIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecurityGroupAssociationStatisticsResponse {
        try await self.describeSecurityGroupAssociationStatistics(.init(securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }
}
