//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ecm {
    /// MigrateNetworkInterface请求参数结构体
    public struct MigrateNetworkInterfaceRequest: TCRequestModel {
        /// ECM 地域，形如ap-xian-ecm。
        public let ecmRegion: String

        /// 弹性网卡实例ID，例如：eni-m6dyj72l。
        public let networkInterfaceId: String

        /// 弹性网卡当前绑定的ECM实例ID。形如：ein-r8hr2upy。
        public let sourceInstanceId: String

        /// 待迁移的目的ECM实例ID。
        public let destinationInstanceId: String

        public init(ecmRegion: String, networkInterfaceId: String, sourceInstanceId: String, destinationInstanceId: String) {
            self.ecmRegion = ecmRegion
            self.networkInterfaceId = networkInterfaceId
            self.sourceInstanceId = sourceInstanceId
            self.destinationInstanceId = destinationInstanceId
        }

        enum CodingKeys: String, CodingKey {
            case ecmRegion = "EcmRegion"
            case networkInterfaceId = "NetworkInterfaceId"
            case sourceInstanceId = "SourceInstanceId"
            case destinationInstanceId = "DestinationInstanceId"
        }
    }

    /// MigrateNetworkInterface返回参数结构体
    public struct MigrateNetworkInterfaceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 弹性网卡迁移
    @inlinable @discardableResult
    public func migrateNetworkInterface(_ input: MigrateNetworkInterfaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<MigrateNetworkInterfaceResponse> {
        self.client.execute(action: "MigrateNetworkInterface", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 弹性网卡迁移
    @inlinable @discardableResult
    public func migrateNetworkInterface(_ input: MigrateNetworkInterfaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> MigrateNetworkInterfaceResponse {
        try await self.client.execute(action: "MigrateNetworkInterface", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 弹性网卡迁移
    @inlinable @discardableResult
    public func migrateNetworkInterface(ecmRegion: String, networkInterfaceId: String, sourceInstanceId: String, destinationInstanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<MigrateNetworkInterfaceResponse> {
        self.migrateNetworkInterface(.init(ecmRegion: ecmRegion, networkInterfaceId: networkInterfaceId, sourceInstanceId: sourceInstanceId, destinationInstanceId: destinationInstanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 弹性网卡迁移
    @inlinable @discardableResult
    public func migrateNetworkInterface(ecmRegion: String, networkInterfaceId: String, sourceInstanceId: String, destinationInstanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> MigrateNetworkInterfaceResponse {
        try await self.migrateNetworkInterface(.init(ecmRegion: ecmRegion, networkInterfaceId: networkInterfaceId, sourceInstanceId: sourceInstanceId, destinationInstanceId: destinationInstanceId), region: region, logger: logger, on: eventLoop)
    }
}
