//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecm {
    /// DescribeCustomImageTask请求参数结构体
    public struct DescribeCustomImageTaskRequest: TCRequestModel {
        /// 支持key,value查询
        /// task-id: 异步任务ID
        /// image-id: 镜像ID
        /// image-name: 镜像名称
        public let filters: [Filter]

        public init(filters: [Filter]) {
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
        }
    }

    /// DescribeCustomImageTask返回参数结构体
    public struct DescribeCustomImageTaskResponse: TCResponseModel {
        /// 导入任务详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageTaskSet: [ImageTask]?

        /// 总数
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case imageTaskSet = "ImageTaskSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询导入镜像任务
    @inlinable
    public func describeCustomImageTask(_ input: DescribeCustomImageTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomImageTaskResponse> {
        self.client.execute(action: "DescribeCustomImageTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询导入镜像任务
    @inlinable
    public func describeCustomImageTask(_ input: DescribeCustomImageTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomImageTaskResponse {
        try await self.client.execute(action: "DescribeCustomImageTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询导入镜像任务
    @inlinable
    public func describeCustomImageTask(filters: [Filter], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomImageTaskResponse> {
        self.describeCustomImageTask(DescribeCustomImageTaskRequest(filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询导入镜像任务
    @inlinable
    public func describeCustomImageTask(filters: [Filter], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomImageTaskResponse {
        try await self.describeCustomImageTask(DescribeCustomImageTaskRequest(filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
