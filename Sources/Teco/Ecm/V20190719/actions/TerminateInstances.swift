//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecm {
    /// 销毁实例
    @inlinable
    public func terminateInstances(_ input: TerminateInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < TerminateInstancesResponse > {
        self.client.execute(action: "TerminateInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 销毁实例
    @inlinable
    public func terminateInstances(_ input: TerminateInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TerminateInstancesResponse {
        try await self.client.execute(action: "TerminateInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// TerminateInstances请求参数结构体
    public struct TerminateInstancesRequest: TCRequestModel {
        /// 待销毁的实例ID列表。
        public let instanceIdSet: [String]
        
        /// 是否定时销毁，默认为否。
        public let terminateDelay: Bool?
        
        /// 定时销毁的时间，格式形如："2019-08-05 12:01:30"，若非定时销毁，则此参数被忽略。
        public let terminateTime: String?
        
        /// 是否关联删除已绑定的弹性网卡和弹性IP，默认为true。
        /// 当为true时，一并删除弹性网卡和弹性IP；
        /// 当为false时，只销毁主机，保留弹性网卡和弹性IP。
        public let associatedResourceDestroy: Bool?
        
        public init (instanceIdSet: [String], terminateDelay: Bool?, terminateTime: String?, associatedResourceDestroy: Bool?) {
            self.instanceIdSet = instanceIdSet
            self.terminateDelay = terminateDelay
            self.terminateTime = terminateTime
            self.associatedResourceDestroy = associatedResourceDestroy
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceIdSet = "InstanceIdSet"
            case terminateDelay = "TerminateDelay"
            case terminateTime = "TerminateTime"
            case associatedResourceDestroy = "AssociatedResourceDestroy"
        }
    }
    
    /// TerminateInstances返回参数结构体
    public struct TerminateInstancesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}
