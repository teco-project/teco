//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ecm {
    /// ModifyIpv6AddressesBandwidth请求参数结构体
    public struct ModifyIpv6AddressesBandwidthRequest: TCRequest {
        /// ECM 地域
        public let ecmRegion: String

        /// 修改的目标带宽，单位Mbps
        public let internetMaxBandwidthOut: Int64

        /// IPV6地址。Ipv6Addresses和Ipv6AddressId必须且只能传一个
        public let ipv6Addresses: [Ipv6Address]?

        /// IPV6地址对应的唯一ID，形如eip-xxxxxxxx。Ipv6Addresses和Ipv6AddressId必须且只能传一个
        public let ipv6AddressIds: [String]?

        public init(ecmRegion: String, internetMaxBandwidthOut: Int64, ipv6Addresses: [Ipv6Address]? = nil, ipv6AddressIds: [String]? = nil) {
            self.ecmRegion = ecmRegion
            self.internetMaxBandwidthOut = internetMaxBandwidthOut
            self.ipv6Addresses = ipv6Addresses
            self.ipv6AddressIds = ipv6AddressIds
        }

        enum CodingKeys: String, CodingKey {
            case ecmRegion = "EcmRegion"
            case internetMaxBandwidthOut = "InternetMaxBandwidthOut"
            case ipv6Addresses = "Ipv6Addresses"
            case ipv6AddressIds = "Ipv6AddressIds"
        }
    }

    /// ModifyIpv6AddressesBandwidth返回参数结构体
    public struct ModifyIpv6AddressesBandwidthResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改IPV6访问internet的带宽
    ///
    /// 该接口(ModifyIpv6AddressesBandwidth)用于修改IPV6地址访问internet的带宽
    @inlinable @discardableResult
    public func modifyIpv6AddressesBandwidth(_ input: ModifyIpv6AddressesBandwidthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyIpv6AddressesBandwidthResponse> {
        self.client.execute(action: "ModifyIpv6AddressesBandwidth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改IPV6访问internet的带宽
    ///
    /// 该接口(ModifyIpv6AddressesBandwidth)用于修改IPV6地址访问internet的带宽
    @inlinable @discardableResult
    public func modifyIpv6AddressesBandwidth(_ input: ModifyIpv6AddressesBandwidthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyIpv6AddressesBandwidthResponse {
        try await self.client.execute(action: "ModifyIpv6AddressesBandwidth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改IPV6访问internet的带宽
    ///
    /// 该接口(ModifyIpv6AddressesBandwidth)用于修改IPV6地址访问internet的带宽
    @inlinable @discardableResult
    public func modifyIpv6AddressesBandwidth(ecmRegion: String, internetMaxBandwidthOut: Int64, ipv6Addresses: [Ipv6Address]? = nil, ipv6AddressIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyIpv6AddressesBandwidthResponse> {
        self.modifyIpv6AddressesBandwidth(.init(ecmRegion: ecmRegion, internetMaxBandwidthOut: internetMaxBandwidthOut, ipv6Addresses: ipv6Addresses, ipv6AddressIds: ipv6AddressIds), region: region, logger: logger, on: eventLoop)
    }

    /// 修改IPV6访问internet的带宽
    ///
    /// 该接口(ModifyIpv6AddressesBandwidth)用于修改IPV6地址访问internet的带宽
    @inlinable @discardableResult
    public func modifyIpv6AddressesBandwidth(ecmRegion: String, internetMaxBandwidthOut: Int64, ipv6Addresses: [Ipv6Address]? = nil, ipv6AddressIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyIpv6AddressesBandwidthResponse {
        try await self.modifyIpv6AddressesBandwidth(.init(ecmRegion: ecmRegion, internetMaxBandwidthOut: internetMaxBandwidthOut, ipv6Addresses: ipv6Addresses, ipv6AddressIds: ipv6AddressIds), region: region, logger: logger, on: eventLoop)
    }
}
