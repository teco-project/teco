//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ecm {
    /// AssignIpv6CidrBlocks请求参数结构体
    public struct AssignIpv6CidrBlocksRequest: TCRequestModel {
        /// `VPC`实例`ID`，形如：`vpc-f49l6u0z`。
        public let vpcId: String

        /// 网络运营商类型 取值范围:'CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调
        public let ispTypes: [ISPTypeItem]

        /// ECM地域。
        public let ecmRegion: String?

        public init(vpcId: String, ispTypes: [ISPTypeItem], ecmRegion: String? = nil) {
            self.vpcId = vpcId
            self.ispTypes = ispTypes
            self.ecmRegion = ecmRegion
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case ispTypes = "ISPTypes"
            case ecmRegion = "EcmRegion"
        }
    }

    /// AssignIpv6CidrBlocks返回参数结构体
    public struct AssignIpv6CidrBlocksResponse: TCResponseModel {
        /// IPv6网段和所属运营商。
        public let iPv6CidrBlockSet: [ISPIPv6CidrBlock]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case iPv6CidrBlockSet = "IPv6CidrBlockSet"
            case requestId = "RequestId"
        }
    }

    /// 分配不同类型的IPv6网段
    ///
    /// 本接口（AssignIpv6CidrBlocks）用于分配IPv6网段。
    ///
    /// 使用本接口前，您需要已有VPC实例，如果没有可通过接口CreateVpc创建。
    /// 每个VPC 可以同时支持运营商网络('CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调)。本接口可以同时申请不同类型的IPv6网段
    @inlinable
    public func assignIpv6CidrBlocks(_ input: AssignIpv6CidrBlocksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssignIpv6CidrBlocksResponse> {
        self.client.execute(action: "AssignIpv6CidrBlocks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 分配不同类型的IPv6网段
    ///
    /// 本接口（AssignIpv6CidrBlocks）用于分配IPv6网段。
    ///
    /// 使用本接口前，您需要已有VPC实例，如果没有可通过接口CreateVpc创建。
    /// 每个VPC 可以同时支持运营商网络('CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调)。本接口可以同时申请不同类型的IPv6网段
    @inlinable
    public func assignIpv6CidrBlocks(_ input: AssignIpv6CidrBlocksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssignIpv6CidrBlocksResponse {
        try await self.client.execute(action: "AssignIpv6CidrBlocks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 分配不同类型的IPv6网段
    ///
    /// 本接口（AssignIpv6CidrBlocks）用于分配IPv6网段。
    ///
    /// 使用本接口前，您需要已有VPC实例，如果没有可通过接口CreateVpc创建。
    /// 每个VPC 可以同时支持运营商网络('CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调)。本接口可以同时申请不同类型的IPv6网段
    @inlinable
    public func assignIpv6CidrBlocks(vpcId: String, ispTypes: [ISPTypeItem], ecmRegion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssignIpv6CidrBlocksResponse> {
        self.assignIpv6CidrBlocks(.init(vpcId: vpcId, ispTypes: ispTypes, ecmRegion: ecmRegion), region: region, logger: logger, on: eventLoop)
    }

    /// 分配不同类型的IPv6网段
    ///
    /// 本接口（AssignIpv6CidrBlocks）用于分配IPv6网段。
    ///
    /// 使用本接口前，您需要已有VPC实例，如果没有可通过接口CreateVpc创建。
    /// 每个VPC 可以同时支持运营商网络('CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调)。本接口可以同时申请不同类型的IPv6网段
    @inlinable
    public func assignIpv6CidrBlocks(vpcId: String, ispTypes: [ISPTypeItem], ecmRegion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssignIpv6CidrBlocksResponse {
        try await self.assignIpv6CidrBlocks(.init(vpcId: vpcId, ispTypes: ispTypes, ecmRegion: ecmRegion), region: region, logger: logger, on: eventLoop)
    }
}
