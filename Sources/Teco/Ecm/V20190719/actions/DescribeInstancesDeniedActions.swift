//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecm {
    /// DescribeInstancesDeniedActions请求参数结构体
    public struct DescribeInstancesDeniedActionsRequest: TCRequestModel {
        /// 无
        public let instanceIdSet: [String]
        
        public init (instanceIdSet: [String]) {
            self.instanceIdSet = instanceIdSet
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceIdSet = "InstanceIdSet"
        }
    }
    
    /// DescribeInstancesDeniedActions返回参数结构体
    public struct DescribeInstancesDeniedActionsResponse: TCResponseModel {
        /// 实例对应的禁止操作
        public let instanceOperatorSet: [InstanceOperator]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case instanceOperatorSet = "InstanceOperatorSet"
            case requestId = "RequestId"
        }
    }
    
    /// 获取禁止的操作列表
    ///
    /// 通过实例id获取当前禁止的操作
    @inlinable
    public func describeInstancesDeniedActions(_ input: DescribeInstancesDeniedActionsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeInstancesDeniedActionsResponse > {
        self.client.execute(action: "DescribeInstancesDeniedActions", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取禁止的操作列表
    ///
    /// 通过实例id获取当前禁止的操作
    @inlinable
    public func describeInstancesDeniedActions(_ input: DescribeInstancesDeniedActionsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstancesDeniedActionsResponse {
        try await self.client.execute(action: "DescribeInstancesDeniedActions", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
