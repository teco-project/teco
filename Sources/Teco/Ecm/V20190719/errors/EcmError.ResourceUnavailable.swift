//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEcmError {
    public struct ResourceUnavailable: TCEcmErrorType {
        enum Code: String {
            case attached = "ResourceUnavailable.Attached"
            case expire = "ResourceUnavailable.Expire"
            case instanceNotRunning = "ResourceUnavailable.InstanceNotRunning"
            case notPortable = "ResourceUnavailable.NotPortable"
            case notSupported = "ResourceUnavailable.NotSupported"
            case repeatRefund = "ResourceUnavailable.RepeatRefund"
            case typeError = "ResourceUnavailable.TypeError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// ResourceUnavailable.Attached
        public static var attached: ResourceUnavailable {
            ResourceUnavailable(.attached)
        }

        /// ResourceUnavailable.Expire
        public static var expire: ResourceUnavailable {
            ResourceUnavailable(.expire)
        }

        /// 实例未运行。
        public static var instanceNotRunning: ResourceUnavailable {
            ResourceUnavailable(.instanceNotRunning)
        }

        /// ResourceUnavailable.NotPortable
        public static var notPortable: ResourceUnavailable {
            ResourceUnavailable(.notPortable)
        }

        /// ResourceUnavailable.NotSupported
        public static var notSupported: ResourceUnavailable {
            ResourceUnavailable(.notSupported)
        }

        /// ResourceUnavailable.RepeatRefund
        public static var repeatRefund: ResourceUnavailable {
            ResourceUnavailable(.repeatRefund)
        }

        /// ResourceUnavailable.TypeError
        public static var typeError: ResourceUnavailable {
            ResourceUnavailable(.typeError)
        }

        public func asEcmError() -> TCEcmError {
            let code: TCEcmError.Code
            switch self.error {
            case .attached:
                code = .resourceUnavailable_Attached
            case .expire:
                code = .resourceUnavailable_Expire
            case .instanceNotRunning:
                code = .resourceUnavailable_InstanceNotRunning
            case .notPortable:
                code = .resourceUnavailable_NotPortable
            case .notSupported:
                code = .resourceUnavailable_NotSupported
            case .repeatRefund:
                code = .resourceUnavailable_RepeatRefund
            case .typeError:
                code = .resourceUnavailable_TypeError
            }
            return TCEcmError(code, context: self.context)
        }
    }
}
