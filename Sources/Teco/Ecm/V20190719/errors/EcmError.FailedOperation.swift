//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEcmError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case blockBalance = "FailedOperation.BlockBalance"
            case dataOperationFailed = "FailedOperation.DataOperationFailed"
            case diskAttached = "FailedOperation.DiskAttached"
            case imageInUse = "FailedOperation.ImageInUse"
            case instanceInModule = "FailedOperation.InstanceInModule"
            case instanceNotAllStopped = "FailedOperation.InstanceNotAllStopped"
            case instanceOwnerCheckFailed = "FailedOperation.InstanceOwnerCheckFailed"
            case internalOperationFailure = "FailedOperation.InternalOperationFailure"
            case invalidStatus = "FailedOperation.InvalidStatus"
            case operationConflict = "FailedOperation.OperationConflict"
            case operationNotAllow = "FailedOperation.OperationNotAllow"
            case privateIpAddressBinded = "FailedOperation.PrivateIpAddressBinded"
            case privateIpAddressUnavailable = "FailedOperation.PrivateIpAddressUnavailable"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 余额不足。
        public static var blockBalance: FailedOperation {
            FailedOperation(.blockBalance)
        }
        
        /// 数据操作失败。
        public static var dataOperationFailed: FailedOperation {
            FailedOperation(.dataOperationFailed)
        }
        
        /// FailedOperation.DiskAttached
        public static var diskAttached: FailedOperation {
            FailedOperation(.diskAttached)
        }
        
        /// 镜像正在使用中。
        public static var imageInUse: FailedOperation {
            FailedOperation(.imageInUse)
        }
        
        /// 模块下存在实例。
        public static var instanceInModule: FailedOperation {
            FailedOperation(.instanceInModule)
        }
        
        /// 实例没有全部关机。
        public static var instanceNotAllStopped: FailedOperation {
            FailedOperation(.instanceNotAllStopped)
        }
        
        /// 实例不属于当前模块。
        public static var instanceOwnerCheckFailed: FailedOperation {
            FailedOperation(.instanceOwnerCheckFailed)
        }
        
        /// 内部操作错误。
        public static var internalOperationFailure: FailedOperation {
            FailedOperation(.internalOperationFailure)
        }
        
        /// 当前状态无法执行该操作。
        public static var invalidStatus: FailedOperation {
            FailedOperation(.invalidStatus)
        }
        
        /// 其他操作正在运行，无法进行当前操作。
        public static var operationConflict: FailedOperation {
            FailedOperation(.operationConflict)
        }
        
        /// 不允许执行当前操作。
        public static var operationNotAllow: FailedOperation {
            FailedOperation(.operationNotAllow)
        }
        
        /// 该内网IP已经绑定了弹性IP。
        public static var privateIpAddressBinded: FailedOperation {
            FailedOperation(.privateIpAddressBinded)
        }
        
        /// 内网IP状态非可用状态。
        public static var privateIpAddressUnavailable: FailedOperation {
            FailedOperation(.privateIpAddressUnavailable)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCEcmError.FailedOperation: Equatable {
    public static func == (lhs: TCEcmError.FailedOperation, rhs: TCEcmError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEcmError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEcmError.FailedOperation {
    public func toEcmError() -> TCEcmError {
        guard let code = TCEcmError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEcmError(code, context: self.context)
    }
}