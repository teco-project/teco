//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEcmError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case addressQuotaLimitExceeded = "LimitExceeded.AddressQuotaLimitExceeded"
            case addressQuotaLimitExceededDailyAllocate = "LimitExceeded.AddressQuotaLimitExceededDailyAllocate"
            case attachedDiskLimitExceeded = "LimitExceeded.AttachedDiskLimitExceeded"
            case cidrBlock = "LimitExceeded.CidrBlock"
            case eniQuotaLimitExceeded = "LimitExceeded.EniQuotaLimitExceeded"
            case instanceSecurityGroupLimitExceeded = "LimitExceeded.InstanceSecurityGroupLimitExceeded"
            case lbLimitExceeded = "LimitExceeded.LBLimitExceeded"
            case moduleSecurityGroupLimitExceeded = "LimitExceeded.ModuleSecurityGroupLimitExceeded"
            case nicOrIPLimitExceeded = "LimitExceeded.NicOrIPLimitExceeded"
            case privateIPQuotaLimitExceeded = "LimitExceeded.PrivateIPQuotaLimitExceeded"
            case securityGroupInstanceLimitExceeded = "LimitExceeded.SecurityGroupInstanceLimitExceeded"
            case securityGroupModuleLimitExceeded = "LimitExceeded.SecurityGroupModuleLimitExceeded"
            case securityGroupPolicySet = "LimitExceeded.SecurityGroupPolicySet"
            case vcpuLimitExceeded = "LimitExceeded.VcpuLimitExceeded"
            case other = "LimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 申请数量超限。
        public static var addressQuotaLimitExceeded: LimitExceeded {
            LimitExceeded(.addressQuotaLimitExceeded)
        }
        
        /// 申购次数不足，每个腾讯云账户每个地域每天申购次数为配额数*2 次。
        public static var addressQuotaLimitExceededDailyAllocate: LimitExceeded {
            LimitExceeded(.addressQuotaLimitExceededDailyAllocate)
        }
        
        /// LimitExceeded.AttachedDiskLimitExceeded
        public static var attachedDiskLimitExceeded: LimitExceeded {
            LimitExceeded(.attachedDiskLimitExceeded)
        }
        
        /// 分配IPv6网段数量达到上限。
        public static var cidrBlock: LimitExceeded {
            LimitExceeded(.cidrBlock)
        }
        
        /// 网卡配额不足。
        public static var eniQuotaLimitExceeded: LimitExceeded {
            LimitExceeded(.eniQuotaLimitExceeded)
        }
        
        /// 实例绑定的安全组超出限制。
        public static var instanceSecurityGroupLimitExceeded: LimitExceeded {
            LimitExceeded(.instanceSecurityGroupLimitExceeded)
        }
        
        /// 申请的clb超过限制。
        public static var lbLimitExceeded: LimitExceeded {
            LimitExceeded(.lbLimitExceeded)
        }
        
        /// 模块默认安全组数目限制。
        public static var moduleSecurityGroupLimitExceeded: LimitExceeded {
            LimitExceeded(.moduleSecurityGroupLimitExceeded)
        }
        
        /// 弹性网卡或公网IP数超过CPU规定的限额。
        public static var nicOrIPLimitExceeded: LimitExceeded {
            LimitExceeded(.nicOrIPLimitExceeded)
        }
        
        /// 内网IP超出限制。
        public static var privateIPQuotaLimitExceeded: LimitExceeded {
            LimitExceeded(.privateIPQuotaLimitExceeded)
        }
        
        /// 安全组绑定的实例数超限。
        public static var securityGroupInstanceLimitExceeded: LimitExceeded {
            LimitExceeded(.securityGroupInstanceLimitExceeded)
        }
        
        /// 安全组可关联模块数目限制。
        public static var securityGroupModuleLimitExceeded: LimitExceeded {
            LimitExceeded(.securityGroupModuleLimitExceeded)
        }
        
        /// 安全组规则数量超过上限。
        public static var securityGroupPolicySet: LimitExceeded {
            LimitExceeded(.securityGroupPolicySet)
        }
        
        /// 申请的cpu核数超限。
        public static var vcpuLimitExceeded: LimitExceeded {
            LimitExceeded(.vcpuLimitExceeded)
        }
        
        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }
    }
}

extension TCEcmError.LimitExceeded: Equatable {
    public static func == (lhs: TCEcmError.LimitExceeded, rhs: TCEcmError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEcmError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEcmError.LimitExceeded {
    /// - Returns: ``TCEcmError`` that holds the same error and context.
    public func toEcmError() -> TCEcmError {
        guard let code = TCEcmError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEcmError(code, context: self.context)
    }
}

extension TCEcmError.LimitExceeded {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
