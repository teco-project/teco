//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

/// Service error type returned by `Weilingwith`.
public protocol TCWeilingwithErrorType: TCServiceErrorType {
    /// Get the service error as ``TCWeilingwithError``.
    ///
    /// - Returns: ``TCWeilingwithError`` that holds the same error code and context.
    func asWeilingwithError() -> TCWeilingwithError
}

public struct TCWeilingwithError: TCWeilingwithErrorType {
    enum Code: String {
        case authFailure_ApiAuthorizationNotFound = "AuthFailure.ApiAuthorizationNotFound"
        case internalError = "InternalError"
        case internalError_AppApiNoSpacePermission = "InternalError.AppApiNoSpacePermission"
        case internalError_UnknownError = "InternalError.UnknownError"
        case invalidParameter = "InvalidParameter"
        case invalidParameterValue = "InvalidParameterValue"
        case invalidParameterValue_InvalidApplicationId = "InvalidParameterValue.InvalidApplicationId"
        case invalidParameterValue_InvalidWorkspaceId = "InvalidParameterValue.InvalidWorkspaceId"
    }

    /// Error domains affliated to ``TCWeilingwithError``.
    public static var domains: [TCErrorType.Type] {
        [AuthFailure.self, InternalError.self, InvalidParameterValue.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    public static var authFailure_ApiAuthorizationNotFound: TCWeilingwithError {
        TCWeilingwithError(.authFailure_ApiAuthorizationNotFound)
    }

    /// 内部错误。
    public static var internalError: TCWeilingwithError {
        TCWeilingwithError(.internalError)
    }

    public static var internalError_AppApiNoSpacePermission: TCWeilingwithError {
        TCWeilingwithError(.internalError_AppApiNoSpacePermission)
    }

    public static var internalError_UnknownError: TCWeilingwithError {
        TCWeilingwithError(.internalError_UnknownError)
    }

    /// 参数错误。
    public static var invalidParameter: TCWeilingwithError {
        TCWeilingwithError(.invalidParameter)
    }

    /// 参数取值错误。
    public static var invalidParameterValue: TCWeilingwithError {
        TCWeilingwithError(.invalidParameterValue)
    }

    /// 检查应用id是否传递正确
    public static var invalidParameterValue_InvalidApplicationId: TCWeilingwithError {
        TCWeilingwithError(.invalidParameterValue_InvalidApplicationId)
    }

    public static var invalidParameterValue_InvalidWorkspaceId: TCWeilingwithError {
        TCWeilingwithError(.invalidParameterValue_InvalidWorkspaceId)
    }

    public func asWeilingwithError() -> TCWeilingwithError {
        return self
    }
}
