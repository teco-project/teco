//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Weilingwith {
    /// DescribeWorkspaceUserList请求参数结构体
    public struct DescribeWorkspaceUserListRequest: TCPaginatedRequest {
        /// 翻页页码
        public let offset: UInt64

        /// 翻页大小
        public let limit: UInt64

        /// 工作空间ID
        public let workspaceId: String

        /// token
        public let applicationToken: String

        /// 租户ID
        public let tenantId: String?

        /// 更新时间戳，单位秒
        public let updateAt: Int64?

        public init(offset: UInt64, limit: UInt64, workspaceId: String, applicationToken: String, tenantId: String? = nil, updateAt: Int64? = nil) {
            self.offset = offset
            self.limit = limit
            self.workspaceId = workspaceId
            self.applicationToken = applicationToken
            self.tenantId = tenantId
            self.updateAt = updateAt
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case workspaceId = "WorkspaceId"
            case applicationToken = "ApplicationToken"
            case tenantId = "TenantId"
            case updateAt = "UpdateAt"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeWorkspaceUserListResponse) -> DescribeWorkspaceUserListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(offset: self.offset + .init(response.getItems().count), limit: self.limit, workspaceId: self.workspaceId, applicationToken: self.applicationToken, tenantId: self.tenantId, updateAt: self.updateAt)
        }
    }

    /// DescribeWorkspaceUserList返回参数结构体
    public struct DescribeWorkspaceUserListResponse: TCPaginatedResponse {
        /// 返回数据
        public let result: SsoTeamUserResult?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }

        /// Extract the returned ``SsoTeamUser`` list from the paginated response.
        public func getItems() -> [SsoTeamUser] {
            self.result?.users ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.result?.total
        }
    }

    /// 查询项目空间人员列表
    @inlinable
    public func describeWorkspaceUserList(_ input: DescribeWorkspaceUserListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkspaceUserListResponse> {
        self.client.execute(action: "DescribeWorkspaceUserList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询项目空间人员列表
    @inlinable
    public func describeWorkspaceUserList(_ input: DescribeWorkspaceUserListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkspaceUserListResponse {
        try await self.client.execute(action: "DescribeWorkspaceUserList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询项目空间人员列表
    @inlinable
    public func describeWorkspaceUserList(offset: UInt64, limit: UInt64, workspaceId: String, applicationToken: String, tenantId: String? = nil, updateAt: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkspaceUserListResponse> {
        self.describeWorkspaceUserList(.init(offset: offset, limit: limit, workspaceId: workspaceId, applicationToken: applicationToken, tenantId: tenantId, updateAt: updateAt), region: region, logger: logger, on: eventLoop)
    }

    /// 查询项目空间人员列表
    @inlinable
    public func describeWorkspaceUserList(offset: UInt64, limit: UInt64, workspaceId: String, applicationToken: String, tenantId: String? = nil, updateAt: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkspaceUserListResponse {
        try await self.describeWorkspaceUserList(.init(offset: offset, limit: limit, workspaceId: workspaceId, applicationToken: applicationToken, tenantId: tenantId, updateAt: updateAt), region: region, logger: logger, on: eventLoop)
    }

    /// 查询项目空间人员列表
    @inlinable
    public func describeWorkspaceUserListPaginated(_ input: DescribeWorkspaceUserListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [SsoTeamUser])> {
        self.client.paginate(input: input, region: region, command: self.describeWorkspaceUserList, logger: logger, on: eventLoop)
    }

    /// 查询项目空间人员列表
    @inlinable @discardableResult
    public func describeWorkspaceUserListPaginated(_ input: DescribeWorkspaceUserListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeWorkspaceUserListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeWorkspaceUserList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询项目空间人员列表
    ///
    /// - Returns: `AsyncSequence`s of ``SsoTeamUser`` and ``DescribeWorkspaceUserListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeWorkspaceUserListPaginator(_ input: DescribeWorkspaceUserListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeWorkspaceUserListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeWorkspaceUserList, logger: logger, on: eventLoop)
    }
}
