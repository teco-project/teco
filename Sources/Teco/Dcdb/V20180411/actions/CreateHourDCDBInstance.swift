//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dcdb {
    /// CreateHourDCDBInstance请求参数结构体
    public struct CreateHourDCDBInstanceRequest: TCRequest {
        /// 分片内存大小，单位：GB，可以通过 DescribeShardSpec
        ///  查询实例规格获得。
        public let shardMemory: Int64

        /// 分片存储空间大小，单位：GB，可以通过 DescribeShardSpec
        ///  查询实例规格获得。
        public let shardStorage: Int64

        /// 单个分片节点个数，可以通过 DescribeShardSpec
        ///  查询实例规格获得。
        public let shardNodeCount: Int64

        /// 实例分片个数，可选范围2-8，可以通过升级实例进行新增分片到最多64个分片。
        public let shardCount: Int64

        /// 欲购买实例的数量
        public let count: Int64?

        /// 项目 ID，可以通过查看项目列表获取，不传则关联到默认项目
        public let projectId: Int64?

        /// 虚拟私有网络 ID，不传或传空表示创建为基础网络
        public let vpcId: String?

        /// 虚拟私有网络子网 ID，VpcId不为空时必填
        public let subnetId: String?

        /// 分片cpu大小，单位：核，可以通过 DescribeShardSpec
        ///  查询实例规格获得。
        public let shardCpu: Int64?

        /// 数据库引擎版本，当前可选：8.0，5.7，10.1，10.0。
        public let dbVersionId: String?

        /// 分片节点可用区分布，最多可填两个可用区。当分片规格为一主两从时，其中两个节点在第一个可用区。
        public let zones: [String]?

        /// 安全组id
        public let securityGroupId: String?

        /// 实例名称， 可以通过该字段自主的设置实例的名字
        public let instanceName: String?

        /// 是否支持IPv6，0:不支持，1:支持
        public let ipv6Flag: Int64?

        /// 标签键值对数组
        public let resourceTags: [ResourceTag]?

        /// DCN源地域
        public let dcnRegion: String?

        /// DCN源实例ID
        public let dcnInstanceId: String?

        /// 参数列表。本接口的可选值为：character_set_server（字符集，必传），lower_case_table_names（表名大小写敏感，必传，0 - 敏感；1-不敏感），innodb_page_size（innodb数据页，默认16K），sync_mode（同步模式：0 - 异步； 1 - 强同步；2 - 强同步可退化。默认为强同步可退化）。
        public let initParams: [DBParamValue]?

        /// 需要回档的源实例ID
        public let rollbackInstanceId: String?

        /// 回档时间，例如“2021-11-22 00:00:00”
        public let rollbackTime: String?

        /// 安全组ids，安全组可以传数组形式，兼容之前SecurityGroupId参数
        public let securityGroupIds: [String]?

        public init(shardMemory: Int64, shardStorage: Int64, shardNodeCount: Int64, shardCount: Int64, count: Int64? = nil, projectId: Int64? = nil, vpcId: String? = nil, subnetId: String? = nil, shardCpu: Int64? = nil, dbVersionId: String? = nil, zones: [String]? = nil, securityGroupId: String? = nil, instanceName: String? = nil, ipv6Flag: Int64? = nil, resourceTags: [ResourceTag]? = nil, dcnRegion: String? = nil, dcnInstanceId: String? = nil, initParams: [DBParamValue]? = nil, rollbackInstanceId: String? = nil, rollbackTime: String? = nil, securityGroupIds: [String]? = nil) {
            self.shardMemory = shardMemory
            self.shardStorage = shardStorage
            self.shardNodeCount = shardNodeCount
            self.shardCount = shardCount
            self.count = count
            self.projectId = projectId
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.shardCpu = shardCpu
            self.dbVersionId = dbVersionId
            self.zones = zones
            self.securityGroupId = securityGroupId
            self.instanceName = instanceName
            self.ipv6Flag = ipv6Flag
            self.resourceTags = resourceTags
            self.dcnRegion = dcnRegion
            self.dcnInstanceId = dcnInstanceId
            self.initParams = initParams
            self.rollbackInstanceId = rollbackInstanceId
            self.rollbackTime = rollbackTime
            self.securityGroupIds = securityGroupIds
        }

        enum CodingKeys: String, CodingKey {
            case shardMemory = "ShardMemory"
            case shardStorage = "ShardStorage"
            case shardNodeCount = "ShardNodeCount"
            case shardCount = "ShardCount"
            case count = "Count"
            case projectId = "ProjectId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case shardCpu = "ShardCpu"
            case dbVersionId = "DbVersionId"
            case zones = "Zones"
            case securityGroupId = "SecurityGroupId"
            case instanceName = "InstanceName"
            case ipv6Flag = "Ipv6Flag"
            case resourceTags = "ResourceTags"
            case dcnRegion = "DcnRegion"
            case dcnInstanceId = "DcnInstanceId"
            case initParams = "InitParams"
            case rollbackInstanceId = "RollbackInstanceId"
            case rollbackTime = "RollbackTime"
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    /// CreateHourDCDBInstance返回参数结构体
    public struct CreateHourDCDBInstanceResponse: TCResponse {
        /// 订单对应的实例 ID 列表，如果此处没有返回实例 ID，可以通过订单查询接口获取。还可通过实例查询接口查询实例是否创建完成。
        public let instanceIds: [String]

        /// 流程id，可以根据流程id查询创建进度
        public let flowId: Int64

        /// 订单号。可以据此调用 DescribeOrders
        ///  查询订单详细信息，或在支付失败时调用用户账号相关接口进行支付。
        public let dealName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case flowId = "FlowId"
            case dealName = "DealName"
            case requestId = "RequestId"
        }
    }

    /// 创建TDSQL按量计费实例
    @inlinable
    public func createHourDCDBInstance(_ input: CreateHourDCDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateHourDCDBInstanceResponse> {
        self.client.execute(action: "CreateHourDCDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建TDSQL按量计费实例
    @inlinable
    public func createHourDCDBInstance(_ input: CreateHourDCDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateHourDCDBInstanceResponse {
        try await self.client.execute(action: "CreateHourDCDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建TDSQL按量计费实例
    @inlinable
    public func createHourDCDBInstance(shardMemory: Int64, shardStorage: Int64, shardNodeCount: Int64, shardCount: Int64, count: Int64? = nil, projectId: Int64? = nil, vpcId: String? = nil, subnetId: String? = nil, shardCpu: Int64? = nil, dbVersionId: String? = nil, zones: [String]? = nil, securityGroupId: String? = nil, instanceName: String? = nil, ipv6Flag: Int64? = nil, resourceTags: [ResourceTag]? = nil, dcnRegion: String? = nil, dcnInstanceId: String? = nil, initParams: [DBParamValue]? = nil, rollbackInstanceId: String? = nil, rollbackTime: String? = nil, securityGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateHourDCDBInstanceResponse> {
        self.createHourDCDBInstance(.init(shardMemory: shardMemory, shardStorage: shardStorage, shardNodeCount: shardNodeCount, shardCount: shardCount, count: count, projectId: projectId, vpcId: vpcId, subnetId: subnetId, shardCpu: shardCpu, dbVersionId: dbVersionId, zones: zones, securityGroupId: securityGroupId, instanceName: instanceName, ipv6Flag: ipv6Flag, resourceTags: resourceTags, dcnRegion: dcnRegion, dcnInstanceId: dcnInstanceId, initParams: initParams, rollbackInstanceId: rollbackInstanceId, rollbackTime: rollbackTime, securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }

    /// 创建TDSQL按量计费实例
    @inlinable
    public func createHourDCDBInstance(shardMemory: Int64, shardStorage: Int64, shardNodeCount: Int64, shardCount: Int64, count: Int64? = nil, projectId: Int64? = nil, vpcId: String? = nil, subnetId: String? = nil, shardCpu: Int64? = nil, dbVersionId: String? = nil, zones: [String]? = nil, securityGroupId: String? = nil, instanceName: String? = nil, ipv6Flag: Int64? = nil, resourceTags: [ResourceTag]? = nil, dcnRegion: String? = nil, dcnInstanceId: String? = nil, initParams: [DBParamValue]? = nil, rollbackInstanceId: String? = nil, rollbackTime: String? = nil, securityGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateHourDCDBInstanceResponse {
        try await self.createHourDCDBInstance(.init(shardMemory: shardMemory, shardStorage: shardStorage, shardNodeCount: shardNodeCount, shardCount: shardCount, count: count, projectId: projectId, vpcId: vpcId, subnetId: subnetId, shardCpu: shardCpu, dbVersionId: dbVersionId, zones: zones, securityGroupId: securityGroupId, instanceName: instanceName, ipv6Flag: ipv6Flag, resourceTags: resourceTags, dcnRegion: dcnRegion, dcnInstanceId: dcnInstanceId, initParams: initParams, rollbackInstanceId: rollbackInstanceId, rollbackTime: rollbackTime, securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }
}
