//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Dcdb {
    /// UpgradeHourDCDBInstance请求参数结构体
    public struct UpgradeHourDCDBInstanceRequest: TCRequestModel {
        /// 待升级的实例ID。形如：dcdbt-ow728lmc，可以通过 DescribeDCDBInstances 查询实例详情获得。
        public let instanceId: String

        /// 升级类型，取值范围:
        /// <li> ADD: 新增分片 </li>
        ///  <li> EXPAND: 升级实例中的已有分片 </li>
        ///  <li> SPLIT: 将已有分片中的数据切分到新增分片上</li>
        public let upgradeType: String

        /// 新增分片配置，当UpgradeType为ADD时生效。
        public let addShardConfig: AddShardConfig?

        /// 扩容分片配置，当UpgradeType为EXPAND时生效。
        public let expandShardConfig: ExpandShardConfig?

        /// 切分分片配置，当UpgradeType为SPLIT时生效。
        public let splitShardConfig: SplitShardConfig?

        /// 切换开始时间，格式如: "2019-12-12 07:00:00"。开始时间必须在当前时间一个小时以后，3天以内。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var switchStartTime: Date?

        /// 切换结束时间,  格式如: "2019-12-12 07:15:00"，结束时间必须大于开始时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var switchEndTime: Date?

        /// 是否自动重试。 0：不自动重试  1：自动重试
        public let switchAutoRetry: Int64?

        /// 变更部署时指定的新可用区列表，第1个为主可用区，其余为从可用区
        public let zones: [String]?

        public init(instanceId: String, upgradeType: String, addShardConfig: AddShardConfig? = nil, expandShardConfig: ExpandShardConfig? = nil, splitShardConfig: SplitShardConfig? = nil, switchStartTime: Date? = nil, switchEndTime: Date? = nil, switchAutoRetry: Int64? = nil, zones: [String]? = nil) {
            self.instanceId = instanceId
            self.upgradeType = upgradeType
            self.addShardConfig = addShardConfig
            self.expandShardConfig = expandShardConfig
            self.splitShardConfig = splitShardConfig
            self._switchStartTime = .init(wrappedValue: switchStartTime)
            self._switchEndTime = .init(wrappedValue: switchEndTime)
            self.switchAutoRetry = switchAutoRetry
            self.zones = zones
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case upgradeType = "UpgradeType"
            case addShardConfig = "AddShardConfig"
            case expandShardConfig = "ExpandShardConfig"
            case splitShardConfig = "SplitShardConfig"
            case switchStartTime = "SwitchStartTime"
            case switchEndTime = "SwitchEndTime"
            case switchAutoRetry = "SwitchAutoRetry"
            case zones = "Zones"
        }
    }

    /// UpgradeHourDCDBInstance返回参数结构体
    public struct UpgradeHourDCDBInstanceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 升级DCDB后付费实例
    ///
    /// 本接口（UpgradeHourDCDBInstance）用于升级后付费分布式数据库实例。
    @inlinable @discardableResult
    public func upgradeHourDCDBInstance(_ input: UpgradeHourDCDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeHourDCDBInstanceResponse> {
        self.client.execute(action: "UpgradeHourDCDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 升级DCDB后付费实例
    ///
    /// 本接口（UpgradeHourDCDBInstance）用于升级后付费分布式数据库实例。
    @inlinable @discardableResult
    public func upgradeHourDCDBInstance(_ input: UpgradeHourDCDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeHourDCDBInstanceResponse {
        try await self.client.execute(action: "UpgradeHourDCDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 升级DCDB后付费实例
    ///
    /// 本接口（UpgradeHourDCDBInstance）用于升级后付费分布式数据库实例。
    @inlinable @discardableResult
    public func upgradeHourDCDBInstance(instanceId: String, upgradeType: String, addShardConfig: AddShardConfig? = nil, expandShardConfig: ExpandShardConfig? = nil, splitShardConfig: SplitShardConfig? = nil, switchStartTime: Date? = nil, switchEndTime: Date? = nil, switchAutoRetry: Int64? = nil, zones: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeHourDCDBInstanceResponse> {
        self.upgradeHourDCDBInstance(UpgradeHourDCDBInstanceRequest(instanceId: instanceId, upgradeType: upgradeType, addShardConfig: addShardConfig, expandShardConfig: expandShardConfig, splitShardConfig: splitShardConfig, switchStartTime: switchStartTime, switchEndTime: switchEndTime, switchAutoRetry: switchAutoRetry, zones: zones), region: region, logger: logger, on: eventLoop)
    }

    /// 升级DCDB后付费实例
    ///
    /// 本接口（UpgradeHourDCDBInstance）用于升级后付费分布式数据库实例。
    @inlinable @discardableResult
    public func upgradeHourDCDBInstance(instanceId: String, upgradeType: String, addShardConfig: AddShardConfig? = nil, expandShardConfig: ExpandShardConfig? = nil, splitShardConfig: SplitShardConfig? = nil, switchStartTime: Date? = nil, switchEndTime: Date? = nil, switchAutoRetry: Int64? = nil, zones: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeHourDCDBInstanceResponse {
        try await self.upgradeHourDCDBInstance(UpgradeHourDCDBInstanceRequest(instanceId: instanceId, upgradeType: upgradeType, addShardConfig: addShardConfig, expandShardConfig: expandShardConfig, splitShardConfig: splitShardConfig, switchStartTime: switchStartTime, switchEndTime: switchEndTime, switchAutoRetry: switchAutoRetry, zones: zones), region: region, logger: logger, on: eventLoop)
    }
}
