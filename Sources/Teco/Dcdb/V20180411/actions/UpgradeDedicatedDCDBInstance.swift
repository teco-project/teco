//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dcdb {
    /// UpgradeDedicatedDCDBInstance请求参数结构体
    public struct UpgradeDedicatedDCDBInstanceRequest: TCRequest {
        /// 升级类型，取值为ADD，SPLIT和EXPAND。ADD-添加分片；SPLIT-切分某个分片；EXPAND-垂直扩容某个分片
        public let upgradeType: String

        /// 实例ID，形如 dcdbt-mlfjm74h
        public let instanceId: String

        /// 当UpgradeType取值为ADD时，添加分片的配置参数
        public let addShardConfig: AddShardConfig?

        /// 当UpgradeType取值为EXPAND时，垂直扩容分片的配置参数
        public let expandShardConfig: ExpandShardConfig?

        /// 当UpgradeType取值为SPLIT时，切分分片的配置参数
        public let splitShardConfig: SplitShardConfig?

        /// 错过切换时间窗口时，是否自动重试一次，0-否，1-是
        public let switchAutoRetry: Int64?

        /// 切换时间窗口开始时间
        public let switchStartTime: String?

        /// 切换时间窗口结束时间
        public let switchEndTime: String?

        public init(upgradeType: String, instanceId: String, addShardConfig: AddShardConfig? = nil, expandShardConfig: ExpandShardConfig? = nil, splitShardConfig: SplitShardConfig? = nil, switchAutoRetry: Int64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil) {
            self.upgradeType = upgradeType
            self.instanceId = instanceId
            self.addShardConfig = addShardConfig
            self.expandShardConfig = expandShardConfig
            self.splitShardConfig = splitShardConfig
            self.switchAutoRetry = switchAutoRetry
            self.switchStartTime = switchStartTime
            self.switchEndTime = switchEndTime
        }

        enum CodingKeys: String, CodingKey {
            case upgradeType = "UpgradeType"
            case instanceId = "InstanceId"
            case addShardConfig = "AddShardConfig"
            case expandShardConfig = "ExpandShardConfig"
            case splitShardConfig = "SplitShardConfig"
            case switchAutoRetry = "SwitchAutoRetry"
            case switchStartTime = "SwitchStartTime"
            case switchEndTime = "SwitchEndTime"
        }
    }

    /// UpgradeDedicatedDCDBInstance返回参数结构体
    public struct UpgradeDedicatedDCDBInstanceResponse: TCResponse {
        /// 异步任务流程ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 升级TDSQL独享集群实例
    ///
    /// 本接口（UpgradeDedicatedDCDBInstance）用于升级TDSQL独享集群实例
    @inlinable
    public func upgradeDedicatedDCDBInstance(_ input: UpgradeDedicatedDCDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeDedicatedDCDBInstanceResponse> {
        self.client.execute(action: "UpgradeDedicatedDCDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 升级TDSQL独享集群实例
    ///
    /// 本接口（UpgradeDedicatedDCDBInstance）用于升级TDSQL独享集群实例
    @inlinable
    public func upgradeDedicatedDCDBInstance(_ input: UpgradeDedicatedDCDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeDedicatedDCDBInstanceResponse {
        try await self.client.execute(action: "UpgradeDedicatedDCDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 升级TDSQL独享集群实例
    ///
    /// 本接口（UpgradeDedicatedDCDBInstance）用于升级TDSQL独享集群实例
    @inlinable
    public func upgradeDedicatedDCDBInstance(upgradeType: String, instanceId: String, addShardConfig: AddShardConfig? = nil, expandShardConfig: ExpandShardConfig? = nil, splitShardConfig: SplitShardConfig? = nil, switchAutoRetry: Int64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeDedicatedDCDBInstanceResponse> {
        self.upgradeDedicatedDCDBInstance(.init(upgradeType: upgradeType, instanceId: instanceId, addShardConfig: addShardConfig, expandShardConfig: expandShardConfig, splitShardConfig: splitShardConfig, switchAutoRetry: switchAutoRetry, switchStartTime: switchStartTime, switchEndTime: switchEndTime), region: region, logger: logger, on: eventLoop)
    }

    /// 升级TDSQL独享集群实例
    ///
    /// 本接口（UpgradeDedicatedDCDBInstance）用于升级TDSQL独享集群实例
    @inlinable
    public func upgradeDedicatedDCDBInstance(upgradeType: String, instanceId: String, addShardConfig: AddShardConfig? = nil, expandShardConfig: ExpandShardConfig? = nil, splitShardConfig: SplitShardConfig? = nil, switchAutoRetry: Int64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeDedicatedDCDBInstanceResponse {
        try await self.upgradeDedicatedDCDBInstance(.init(upgradeType: upgradeType, instanceId: instanceId, addShardConfig: addShardConfig, expandShardConfig: expandShardConfig, splitShardConfig: splitShardConfig, switchAutoRetry: switchAutoRetry, switchStartTime: switchStartTime, switchEndTime: switchEndTime), region: region, logger: logger, on: eventLoop)
    }
}
