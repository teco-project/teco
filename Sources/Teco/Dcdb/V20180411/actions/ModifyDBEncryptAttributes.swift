//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Dcdb {
    /// ModifyDBEncryptAttributes请求参数结构体
    public struct ModifyDBEncryptAttributesRequest: TCRequestModel {
        /// 实例Id，形如：tdsqlshard-ow728lmc。
        public let instanceId: String

        /// 是否启用数据加密，开启后暂不支持关闭。本接口的可选值为：1-开启数据加密。
        public let encryptEnabled: Int64

        public init(instanceId: String, encryptEnabled: Int64) {
            self.instanceId = instanceId
            self.encryptEnabled = encryptEnabled
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case encryptEnabled = "EncryptEnabled"
        }
    }

    /// ModifyDBEncryptAttributes返回参数结构体
    public struct ModifyDBEncryptAttributesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改实例数据加密属性
    ///
    /// 本接口(ModifyDBEncryptAttributes)用于修改实例数据加密。
    @inlinable @discardableResult
    public func modifyDBEncryptAttributes(_ input: ModifyDBEncryptAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBEncryptAttributesResponse> {
        self.client.execute(action: "ModifyDBEncryptAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例数据加密属性
    ///
    /// 本接口(ModifyDBEncryptAttributes)用于修改实例数据加密。
    @inlinable @discardableResult
    public func modifyDBEncryptAttributes(_ input: ModifyDBEncryptAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBEncryptAttributesResponse {
        try await self.client.execute(action: "ModifyDBEncryptAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例数据加密属性
    ///
    /// 本接口(ModifyDBEncryptAttributes)用于修改实例数据加密。
    @inlinable @discardableResult
    public func modifyDBEncryptAttributes(instanceId: String, encryptEnabled: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBEncryptAttributesResponse> {
        self.modifyDBEncryptAttributes(.init(instanceId: instanceId, encryptEnabled: encryptEnabled), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实例数据加密属性
    ///
    /// 本接口(ModifyDBEncryptAttributes)用于修改实例数据加密。
    @inlinable @discardableResult
    public func modifyDBEncryptAttributes(instanceId: String, encryptEnabled: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBEncryptAttributesResponse {
        try await self.modifyDBEncryptAttributes(.init(instanceId: instanceId, encryptEnabled: encryptEnabled), region: region, logger: logger, on: eventLoop)
    }
}
