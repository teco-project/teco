//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dcdb {
    /// DescribeShardSpec请求参数结构体
    public struct DescribeShardSpecRequest: TCRequestModel {
        public init () {
        }
    }
    
    /// DescribeShardSpec返回参数结构体
    public struct DescribeShardSpecResponse: TCResponseModel {
        /// 按机型分类的可售卖规格列表
        public let specConfig: [SpecConfig]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case specConfig = "SpecConfig"
            case requestId = "RequestId"
        }
    }
    
    /// 查询分布式数据库可售卖分片规格
    ///
    /// 查询可创建的分布式数据库可售卖的分片规格配置。
    @inlinable
    public func describeShardSpec(_ input: DescribeShardSpecRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeShardSpecResponse > {
        self.client.execute(action: "DescribeShardSpec", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询分布式数据库可售卖分片规格
    ///
    /// 查询可创建的分布式数据库可售卖的分片规格配置。
    @inlinable
    public func describeShardSpec(_ input: DescribeShardSpecRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeShardSpecResponse {
        try await self.client.execute(action: "DescribeShardSpec", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
