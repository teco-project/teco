//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDcdbError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case addInstanceInfoFailed = "FailedOperation.AddInstanceInfoFailed"
            case applyVipFailed = "FailedOperation.ApplyVipFailed"
            case associateSecurityGroupsFailed = "FailedOperation.AssociateSecurityGroupsFailed"
            case authNoStrategy = "FailedOperation.AuthNoStrategy"
            case clearInstanceInfoFailed = "FailedOperation.ClearInstanceInfoFailed"
            case copyRightError = "FailedOperation.CopyRightError"
            case createFlowFailed = "FailedOperation.CreateFlowFailed"
            case createOrderFailed = "FailedOperation.CreateOrderFailed"
            case createUserFailed = "FailedOperation.CreateUserFailed"
            case deleteUserFailed = "FailedOperation.DeleteUserFailed"
            case disassociateSecurityGroupsFailed = "FailedOperation.DisassociateSecurityGroupsFailed"
            case getSecurityGroupDetailFailed = "FailedOperation.GetSecurityGroupDetailFailed"
            case modifyRightFailed = "FailedOperation.ModifyRightFailed"
            case msgQueueOperationFailed = "FailedOperation.MsgQueueOperationFailed"
            case ossIsolateInstanceFailed = "FailedOperation.OssIsolateInstanceFailed"
            case ossOperationFailed = "FailedOperation.OssOperationFailed"
            case payFailed = "FailedOperation.PayFailed"
            case resetPasswordFailed = "FailedOperation.ResetPasswordFailed"
            case setRuleLocationFailed = "FailedOperation.SetRuleLocationFailed"
            case setSvcLocationFailed = "FailedOperation.SetSvcLocationFailed"
            case sgChangeVip = "FailedOperation.SGChangeVip"
            case tagDryRunError = "FailedOperation.TagDryRunError"
            case updateInstanceInfoFailed = "FailedOperation.UpdateInstanceInfoFailed"
            case userNotAuthed = "FailedOperation.UserNotAuthed"
            case vipNotChange = "FailedOperation.VipNotChange"
            case vpcAddServiceFailed = "FailedOperation.VpcAddServiceFailed"
            case vpcUpdateRouteFailed = "FailedOperation.VpcUpdateRouteFailed"
            case wanStatusAbnormal = "FailedOperation.WanStatusAbnormal"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 实例安全组信息添加失败。
        public static var addInstanceInfoFailed: FailedOperation {
            FailedOperation(.addInstanceInfoFailed)
        }
        
        /// 申请VIP失败。
        public static var applyVipFailed: FailedOperation {
            FailedOperation(.applyVipFailed)
        }
        
        /// 绑定安全组失败。
        public static var associateSecurityGroupsFailed: FailedOperation {
            FailedOperation(.associateSecurityGroupsFailed)
        }
        
        /// 鉴权失败。
        public static var authNoStrategy: FailedOperation {
            FailedOperation(.authNoStrategy)
        }
        
        /// 实例安全组信息清除失败。
        public static var clearInstanceInfoFailed: FailedOperation {
            FailedOperation(.clearInstanceInfoFailed)
        }
        
        /// 复制账号权限出错。
        public static var copyRightError: FailedOperation {
            FailedOperation(.copyRightError)
        }
        
        /// 创建流程失败。
        public static var createFlowFailed: FailedOperation {
            FailedOperation(.createFlowFailed)
        }
        
        /// 创建订单失败。
        public static var createOrderFailed: FailedOperation {
            FailedOperation(.createOrderFailed)
        }
        
        /// 创建账号失败。
        public static var createUserFailed: FailedOperation {
            FailedOperation(.createUserFailed)
        }
        
        /// 删除账号失败。
        public static var deleteUserFailed: FailedOperation {
            FailedOperation(.deleteUserFailed)
        }
        
        /// 解绑安全组失败。
        public static var disassociateSecurityGroupsFailed: FailedOperation {
            FailedOperation(.disassociateSecurityGroupsFailed)
        }
        
        public static var getSecurityGroupDetailFailed: FailedOperation {
            FailedOperation(.getSecurityGroupDetailFailed)
        }
        
        /// 修改账号权限失败。
        public static var modifyRightFailed: FailedOperation {
            FailedOperation(.modifyRightFailed)
        }
        
        /// 消息队列操作失败。
        public static var msgQueueOperationFailed: FailedOperation {
            FailedOperation(.msgQueueOperationFailed)
        }
        
        public static var ossIsolateInstanceFailed: FailedOperation {
            FailedOperation(.ossIsolateInstanceFailed)
        }
        
        /// 请求后端接口失败。
        public static var ossOperationFailed: FailedOperation {
            FailedOperation(.ossOperationFailed)
        }
        
        /// 支付订单失败。
        public static var payFailed: FailedOperation {
            FailedOperation(.payFailed)
        }
        
        /// 重置账号密码失败。
        public static var resetPasswordFailed: FailedOperation {
            FailedOperation(.resetPasswordFailed)
        }
        
        /// 设置规则失败。
        public static var setRuleLocationFailed: FailedOperation {
            FailedOperation(.setRuleLocationFailed)
        }
        
        public static var setSvcLocationFailed: FailedOperation {
            FailedOperation(.setSvcLocationFailed)
        }
        
        /// 更新安全组失败。
        public static var sgChangeVip: FailedOperation {
            FailedOperation(.sgChangeVip)
        }
        
        /// 标签键值校验或鉴权失败。
        public static var tagDryRunError: FailedOperation {
            FailedOperation(.tagDryRunError)
        }
        
        /// 实例安全组信息更新失败。
        public static var updateInstanceInfoFailed: FailedOperation {
            FailedOperation(.updateInstanceInfoFailed)
        }
        
        /// 用户未实名认证。
        public static var userNotAuthed: FailedOperation {
            FailedOperation(.userNotAuthed)
        }
        
        /// VIP不能与之前一样。
        public static var vipNotChange: FailedOperation {
            FailedOperation(.vipNotChange)
        }
        
        /// VPC添加服务失败。
        public static var vpcAddServiceFailed: FailedOperation {
            FailedOperation(.vpcAddServiceFailed)
        }
        
        /// VPC更新路由失败。
        public static var vpcUpdateRouteFailed: FailedOperation {
            FailedOperation(.vpcUpdateRouteFailed)
        }
        
        /// 外网状态异常。
        public static var wanStatusAbnormal: FailedOperation {
            FailedOperation(.wanStatusAbnormal)
        }
    }
}

extension TCDcdbError.FailedOperation: Equatable {
    public static func == (lhs: TCDcdbError.FailedOperation, rhs: TCDcdbError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCDcdbError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCDcdbError.FailedOperation {
    /// - Returns: ``TCDcdbError`` that holds the same error and context.
    public func toDcdbError() -> TCDcdbError {
        guard let code = TCDcdbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCDcdbError(code, context: self.context)
    }
}

extension TCDcdbError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
