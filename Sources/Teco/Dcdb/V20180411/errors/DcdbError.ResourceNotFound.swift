//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCDcdbError {
    public struct ResourceNotFound: TCDcdbErrorType {
        enum Code: String {
            case accountDoesNotExist = "ResourceNotFound.AccountDoesNotExist"
            case instanceNotFound = "ResourceNotFound.InstanceNotFound"
            case noInstanceFound = "ResourceNotFound.NoInstanceFound"
            case productConfigNotExistedError = "ResourceNotFound.ProductConfigNotExistedError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 指定的账号不存在。
        public static var accountDoesNotExist: ResourceNotFound {
            ResourceNotFound(.accountDoesNotExist)
        }

        /// 实例不存在。
        public static var instanceNotFound: ResourceNotFound {
            ResourceNotFound(.instanceNotFound)
        }

        /// 找不到指定的数据库实例。
        public static var noInstanceFound: ResourceNotFound {
            ResourceNotFound(.noInstanceFound)
        }

        /// 接入安全组产品配置不存在。
        public static var productConfigNotExistedError: ResourceNotFound {
            ResourceNotFound(.productConfigNotExistedError)
        }

        public func asDcdbError() -> TCDcdbError {
            let code: TCDcdbError.Code
            switch self.error {
            case .accountDoesNotExist:
                code = .resourceNotFound_AccountDoesNotExist
            case .instanceNotFound:
                code = .resourceNotFound_InstanceNotFound
            case .noInstanceFound:
                code = .resourceNotFound_NoInstanceFound
            case .productConfigNotExistedError:
                code = .resourceNotFound_ProductConfigNotExistedError
            }
            return TCDcdbError(code, context: self.context)
        }
    }
}
