//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Dcdb {
    /// 数据库账号信息
    public struct Account: TCInputModel {
        /// 账户的名称
        public let user: String

        /// 账户的域名
        public let host: String

        public init(user: String, host: String) {
            self.user = user
            self.host = host
        }

        enum CodingKeys: String, CodingKey {
            case user = "User"
            case host = "Host"
        }
    }

    /// 升级实例 -- 新增分片类型
    public struct AddShardConfig: TCInputModel {
        /// 新增分片的数量
        public let shardCount: Int64

        /// 分片内存大小，单位 GB
        public let shardMemory: Int64

        /// 分片存储大小，单位 GB
        public let shardStorage: Int64

        public init(shardCount: Int64, shardMemory: Int64, shardStorage: Int64) {
            self.shardCount = shardCount
            self.shardMemory = shardMemory
            self.shardStorage = shardStorage
        }

        enum CodingKeys: String, CodingKey {
            case shardCount = "ShardCount"
            case shardMemory = "ShardMemory"
            case shardStorage = "ShardStorage"
        }
    }

    /// 描述分片DB节点信息
    public struct BriefNodeInfo: TCOutputModel {
        /// DB节点ID
        public let nodeId: String

        /// DB节点角色，取值为master或者slave
        public let role: String

        /// 节点所属分片的分片ID
        public let shardId: String

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case role = "Role"
            case shardId = "ShardId"
        }
    }

    /// 列权限信息
    public struct ColumnPrivilege: TCInputModel {
        /// 数据库名
        public let database: String

        /// 数据库表名
        public let table: String

        /// 数据库列名
        public let column: String

        /// 权限信息
        public let privileges: [String]

        public init(database: String, table: String, column: String, privileges: [String]) {
            self.database = database
            self.table = table
            self.column = column
            self.privileges = privileges
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case table = "Table"
            case column = "Column"
            case privileges = "Privileges"
        }
    }

    /// 约束类型值的范围
    public struct ConstraintRange: TCOutputModel {
        /// 约束类型为section时的最小值
        public let min: String

        /// 约束类型为section时的最大值
        public let max: String

        enum CodingKeys: String, CodingKey {
            case min = "Min"
            case max = "Max"
        }
    }

    /// 云数据库账号信息
    public struct DBAccount: TCOutputModel {
        /// 用户名
        public let userName: String

        /// 用户可以从哪台主机登录（对应 MySQL 用户的 host 字段，UserName + Host 唯一标识一个用户，IP形式，IP段以%结尾；支持填入%；为空默认等于%）
        public let host: String

        /// 用户备注信息
        public let description: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 最后更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 只读标记，0：否， 1：该账号的sql请求优先选择备机执行，备机不可用时选择主机执行，2：优先选择备机执行，备机不可用时操作失败。
        public let readOnly: Int64

        /// 如果备机延迟超过本参数设置值，系统将认为备机发生故障
        /// 建议该参数值大于10。当ReadOnly选择1、2时该参数生效。
        public let delayThresh: Int64

        /// 针对只读账号，设置策略是否固定备机，0：不固定备机，即备机不满足条件与客户端不断开连接，Proxy选择其他可用备机，1：备机不满足条件断开连接，确保一个连接固定备机。
        public let slaveConst: Int64

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case host = "Host"
            case description = "Description"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case readOnly = "ReadOnly"
            case delayThresh = "DelayThresh"
            case slaveConst = "SlaveConst"
        }
    }

    /// 云数据库参数信息。
    public struct DBParamValue: TCInputModel {
        /// 参数名称
        public let param: String

        /// 参数值
        public let value: String

        public init(param: String, value: String) {
            self.param = param
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case param = "Param"
            case value = "Value"
        }
    }

    /// 分布式数据库实例信息
    public struct DCDBInstanceInfo: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 应用ID
        public let appId: Int64

        /// 项目ID
        public let projectId: Int64

        /// 地域
        public let region: String

        /// 可用区
        public let zone: String

        /// VPC数字ID
        public let vpcId: Int64

        /// Subnet数字ID
        public let subnetId: Int64

        /// 状态中文描述
        public let statusDesc: String

        /// 实例状态：0 创建中，1 流程处理中， 2 运行中，3 实例未初始化，-1 实例已隔离，4 实例初始化中，5 实例删除中，6 实例重启中，7 数据迁移中
        public let status: Int64

        /// 内网IP
        public let vip: String

        /// 内网端口
        public let vport: Int64

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 自动续费标志
        public let autoRenewFlag: Int64

        /// 内存大小，单位 GB
        public let memory: Int64

        /// 存储大小，单位 GB
        public let storage: Int64

        /// 分片个数
        public let shardCount: Int64

        /// 到期时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var periodEndTime: Date

        /// 隔离时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var isolatedTimestamp: Date

        /// 账号ID
        public let uin: String

        /// 分片详情
        public let shardDetail: [ShardInfo]

        /// 节点数，2 为一主一从， 3 为一主二从
        public let nodeCount: Int64

        /// 临时实例标记，0 为非临时实例
        public let isTmp: Int64

        /// 独享集群ID，为空表示非独享集群实例
        public let exclusterId: String

        /// 字符串型的私有网络ID
        public let uniqueVpcId: String

        /// 字符串型的私有网络子网ID
        public let uniqueSubnetId: String

        /// 数字实例ID（过时字段，请勿依赖该值）
        public let id: UInt64

        /// 外网访问的域名，公网可解析
        public let wanDomain: String

        /// 外网 IP 地址，公网可访问
        public let wanVip: String

        /// 外网端口
        public let wanPort: Int64

        /// 产品类型 ID（过时字段，请勿依赖该值）
        public let pid: Int64

        /// 实例最后更新时间，格式为 2006-01-02 15:04:05
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 数据库引擎
        public let dbEngine: String

        /// 数据库引擎版本
        public let dbVersion: String

        /// 付费模式
        public let paymode: String

        /// 实例处于异步任务状态时，表示异步任务流程ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let locker: Int64?

        /// 外网状态，0-未开通；1-已开通；2-关闭；3-开通中
        public let wanStatus: Int64

        /// 该实例是否支持审计。1-支持；0-不支持
        public let isAuditSupported: UInt64

        /// Cpu核数
        public let cpu: UInt64

        /// 实例IPv6标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6Flag: UInt64?

        /// 内网IPv6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vipv6: String?

        /// 外网IPv6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanVipv6: String?

        /// 外网IPv6端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanPortIpv6: UInt64?

        /// 外网IPv6状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanStatusIpv6: UInt64?

        /// DCN标志，0-无，1-主实例，2-灾备实例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dcnFlag: Int64?

        /// DCN状态，0-无，1-创建中，2-同步中，3-已断开
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dcnStatus: Int64?

        /// DCN灾备实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dcnDstNum: Int64?

        /// 1： 主实例（独享型）, 2: 主实例, 3： 灾备实例, 4： 灾备实例（独享型）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceType: Int64?

        /// 实例标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceTags: [ResourceTag]?

        /// 数据库引擎版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbVersionId: String?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case appId = "AppId"
            case projectId = "ProjectId"
            case region = "Region"
            case zone = "Zone"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case statusDesc = "StatusDesc"
            case status = "Status"
            case vip = "Vip"
            case vport = "Vport"
            case createTime = "CreateTime"
            case autoRenewFlag = "AutoRenewFlag"
            case memory = "Memory"
            case storage = "Storage"
            case shardCount = "ShardCount"
            case periodEndTime = "PeriodEndTime"
            case isolatedTimestamp = "IsolatedTimestamp"
            case uin = "Uin"
            case shardDetail = "ShardDetail"
            case nodeCount = "NodeCount"
            case isTmp = "IsTmp"
            case exclusterId = "ExclusterId"
            case uniqueVpcId = "UniqueVpcId"
            case uniqueSubnetId = "UniqueSubnetId"
            case id = "Id"
            case wanDomain = "WanDomain"
            case wanVip = "WanVip"
            case wanPort = "WanPort"
            case pid = "Pid"
            case updateTime = "UpdateTime"
            case dbEngine = "DbEngine"
            case dbVersion = "DbVersion"
            case paymode = "Paymode"
            case locker = "Locker"
            case wanStatus = "WanStatus"
            case isAuditSupported = "IsAuditSupported"
            case cpu = "Cpu"
            case ipv6Flag = "Ipv6Flag"
            case vipv6 = "Vipv6"
            case wanVipv6 = "WanVipv6"
            case wanPortIpv6 = "WanPortIpv6"
            case wanStatusIpv6 = "WanStatusIpv6"
            case dcnFlag = "DcnFlag"
            case dcnStatus = "DcnStatus"
            case dcnDstNum = "DcnDstNum"
            case instanceType = "InstanceType"
            case resourceTags = "ResourceTags"
            case dbVersionId = "DbVersionId"
        }
    }

    /// 描述分布式数据库分片信息。
    public struct DCDBShardInfo: TCOutputModel {
        /// 所属实例Id
        public let instanceId: String

        /// 分片SQL透传Id，用于将sql透传到指定分片执行
        public let shardSerialId: String

        /// 全局唯一的分片Id
        public let shardInstanceId: String

        /// 状态：0 创建中，1 流程处理中， 2 运行中，3 分片未初始化
        public let status: Int64

        /// 状态中文描述
        public let statusDesc: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 字符串格式的私有网络Id
        public let vpcId: String

        /// 字符串格式的私有网络子网Id
        public let subnetId: String

        /// 项目ID
        public let projectId: Int64

        /// 地域
        public let region: String

        /// 可用区
        public let zone: String

        /// 内存大小，单位 GB
        public let memory: Int64

        /// 存储大小，单位 GB
        public let storage: Int64

        /// 到期时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var periodEndTime: Date

        /// 节点数，2 为一主一从， 3 为一主二从
        public let nodeCount: Int64

        /// 存储使用率，单位为 %
        public let storageUsage: Float

        /// 内存使用率，单位为 %
        public let memoryUsage: Float

        /// 数字分片Id（过时字段，请勿依赖该值）
        public let shardId: Int64

        /// 产品ProductID
        public let pid: Int64

        /// Proxy版本
        public let proxyVersion: String

        /// 付费模型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paymode: String?

        /// 分片的主可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let shardMasterZone: String?

        /// 分片的从可用区列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let shardSlaveZones: [String]?

        /// CPU核数
        public let cpu: Int64

        /// 分片ShardKey的范围（总共64个哈希值），例如： 0-31，32-63
        public let range: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case shardSerialId = "ShardSerialId"
            case shardInstanceId = "ShardInstanceId"
            case status = "Status"
            case statusDesc = "StatusDesc"
            case createTime = "CreateTime"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case projectId = "ProjectId"
            case region = "Region"
            case zone = "Zone"
            case memory = "Memory"
            case storage = "Storage"
            case periodEndTime = "PeriodEndTime"
            case nodeCount = "NodeCount"
            case storageUsage = "StorageUsage"
            case memoryUsage = "MemoryUsage"
            case shardId = "ShardId"
            case pid = "Pid"
            case proxyVersion = "ProxyVersion"
            case paymode = "Paymode"
            case shardMasterZone = "ShardMasterZone"
            case shardSlaveZones = "ShardSlaveZones"
            case cpu = "Cpu"
            case range = "Range"
        }
    }

    /// 数据库信息
    public struct Database: TCOutputModel {
        /// 数据库名称
        public let dbName: String

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
        }
    }

    /// 数据库函数信息
    public struct DatabaseFunction: TCOutputModel {
        /// 函数名称
        public let `func`: String

        enum CodingKeys: String, CodingKey {
            case `func` = "Func"
        }
    }

    /// 数据库权限
    public struct DatabasePrivilege: TCInputModel {
        /// 权限信息
        public let privileges: [String]

        /// 数据库名
        public let database: String

        public init(privileges: [String], database: String) {
            self.privileges = privileges
            self.database = database
        }

        enum CodingKeys: String, CodingKey {
            case privileges = "Privileges"
            case database = "Database"
        }
    }

    /// 数据库存储过程信息
    public struct DatabaseProcedure: TCOutputModel {
        /// 存储过程名称
        public let proc: String

        enum CodingKeys: String, CodingKey {
            case proc = "Proc"
        }
    }

    /// 数据库表信息
    public struct DatabaseTable: TCOutputModel {
        /// 表名
        public let table: String

        enum CodingKeys: String, CodingKey {
            case table = "Table"
        }
    }

    /// 数据库视图信息
    public struct DatabaseView: TCOutputModel {
        /// 视图名称
        public let view: String

        enum CodingKeys: String, CodingKey {
            case view = "View"
        }
    }

    /// DCN详情条目
    public struct DcnDetailItem: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 实例地域
        public let region: String

        /// 实例可用区
        public let zone: String

        /// 实例IP地址
        public let vip: String

        /// 实例IPv6地址
        public let vipv6: String

        /// 实例端口
        public let vport: Int64

        /// 实例状态
        public let status: Int64

        /// 实例状态描述
        public let statusDesc: String

        /// 实例DCN标志，1-主，2-备
        public let dcnFlag: Int64

        /// 实例DCN状态，0-无，1-创建中，2-同步中，3-已断开
        public let dcnStatus: Int64

        /// 实例CPU核数
        public let cpu: Int64

        /// 实例内存大小，单位 GB
        public let memory: Int64

        /// 实例存储大小，单位 GB
        public let storage: Int64

        /// 付费模式
        public let payMode: Int64

        /// 实例创建时间，格式为 2006-01-02 15:04:05
        public let createTime: String

        /// 实例到期时间，格式为 2006-01-02 15:04:05
        public let periodEndTime: String

        /// 1： 主实例（独享型）, 2: 主实例, 3： 灾备实例, 4： 灾备实例（独享型）
        public let instanceType: Int64

        /// 是否开启了 kms
        public let encryptStatus: Int64

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case region = "Region"
            case zone = "Zone"
            case vip = "Vip"
            case vipv6 = "Vipv6"
            case vport = "Vport"
            case status = "Status"
            case statusDesc = "StatusDesc"
            case dcnFlag = "DcnFlag"
            case dcnStatus = "DcnStatus"
            case cpu = "Cpu"
            case memory = "Memory"
            case storage = "Storage"
            case payMode = "PayMode"
            case createTime = "CreateTime"
            case periodEndTime = "PeriodEndTime"
            case instanceType = "InstanceType"
            case encryptStatus = "EncryptStatus"
        }
    }

    /// 订单信息
    public struct Deal: TCOutputModel {
        /// 订单号
        public let dealName: String

        /// 所属账号
        public let ownerUin: String

        /// 商品数量
        public let count: Int64

        /// 关联的流程 Id，可用于查询流程执行状态
        public let flowId: Int64

        /// 只有创建实例且已完成发货的订单会填充该字段，表示该订单创建的实例的 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceIds: [String]?

        /// 付费模式，0后付费/1预付费
        public let payMode: Int64

        enum CodingKeys: String, CodingKey {
            case dealName = "DealName"
            case ownerUin = "OwnerUin"
            case count = "Count"
            case flowId = "FlowId"
            case instanceIds = "InstanceIds"
            case payMode = "PayMode"
        }
    }

    /// 升级实例 -- 扩容分片类型
    public struct ExpandShardConfig: TCInputModel {
        /// 分片ID数组
        public let shardInstanceIds: [String]

        /// 分片内存大小，单位 GB
        public let shardMemory: Int64

        /// 分片存储大小，单位 GB
        public let shardStorage: Int64

        /// 分片节点数
        public let shardNodeCount: Int64?

        public init(shardInstanceIds: [String], shardMemory: Int64, shardStorage: Int64, shardNodeCount: Int64? = nil) {
            self.shardInstanceIds = shardInstanceIds
            self.shardMemory = shardMemory
            self.shardStorage = shardStorage
            self.shardNodeCount = shardNodeCount
        }

        enum CodingKeys: String, CodingKey {
            case shardInstanceIds = "ShardInstanceIds"
            case shardMemory = "ShardMemory"
            case shardStorage = "ShardStorage"
            case shardNodeCount = "ShardNodeCount"
        }
    }

    /// 实例备份文件信息
    public struct InstanceBackupFileItem: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 实例状态
        public let instanceStatus: Int64

        /// 分片ID
        public let shardId: String

        /// 文件路径
        public let filePath: String

        /// 文件名
        public let fileName: String

        /// 文件大小
        public let fileSize: Int64

        /// 备份类型，Data:数据备份，Binlog:Binlog备份，Errlog:错误日志，Slowlog:慢日志
        public let backupType: String

        /// 手动备份，0:否，1:是
        public let manualBackup: Int64

        /// 备份开始时间
        public let startTime: String

        /// 备份结束时间
        public let endTime: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceStatus = "InstanceStatus"
            case shardId = "ShardId"
            case filePath = "FilePath"
            case fileName = "FileName"
            case fileSize = "FileSize"
            case backupType = "BackupType"
            case manualBackup = "ManualBackup"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 拉取的日志信息
    public struct LogFileInfo: TCOutputModel {
        /// Log最后修改时间
        public let mtime: UInt64

        /// 文件长度
        public let length: UInt64

        /// 下载Log时用到的统一资源标识符
        public let uri: String

        /// 文件名
        public let fileName: String

        enum CodingKeys: String, CodingKey {
            case mtime = "Mtime"
            case length = "Length"
            case uri = "Uri"
            case fileName = "FileName"
        }
    }

    /// 描述DB节点信息
    public struct NodeInfo: TCOutputModel {
        /// DB节点ID
        public let nodeId: String

        /// DB节点角色，取值为master或者slave
        public let role: String

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case role = "Role"
        }
    }

    /// 参数约束
    public struct ParamConstraint: TCOutputModel {
        /// 约束类型,如枚举enum，区间section
        public let type: String

        /// 约束类型为enum时的可选值列表
        public let `enum`: String

        /// 约束类型为section时的范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let range: ConstraintRange?

        /// 约束类型为string时的可选值列表
        public let string: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case `enum` = "Enum"
            case range = "Range"
            case string = "String"
        }
    }

    /// DB参数描述
    public struct ParamDesc: TCOutputModel {
        /// 参数名字
        public let param: String

        /// 当前参数值
        public let value: String

        /// 设置过的值，参数生效后，该值和value一样。未设置过就不返回该字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let setValue: String?

        /// 系统默认值
        public let `default`: String

        /// 参数限制
        public let constraint: ParamConstraint

        /// 是否有设置过值，false:没有设置过值，true:有设置过值。
        public let haveSetValue: Bool

        /// 是否需要重启生效，false:不需要重启，
        /// true:需要重启
        public let needRestart: Bool

        enum CodingKeys: String, CodingKey {
            case param = "Param"
            case value = "Value"
            case setValue = "SetValue"
            case `default` = "Default"
            case constraint = "Constraint"
            case haveSetValue = "HaveSetValue"
            case needRestart = "NeedRestart"
        }
    }

    /// 修改参数结果
    public struct ParamModifyResult: TCOutputModel {
        /// 修改参数名字
        public let param: String

        /// 参数修改结果。0表示修改成功；-1表示修改失败；-2表示该参数值非法
        public let code: Int64

        enum CodingKeys: String, CodingKey {
            case param = "Param"
            case code = "Code"
        }
    }

    /// 项目信息描述
    public struct Project: TCOutputModel {
        /// 项目ID
        public let projectId: Int64

        /// 资源拥有者（主账号）uin
        public let ownerUin: Int64

        /// 应用Id
        public let appId: Int64

        /// 项目名称
        public let name: String

        /// 创建者uin
        public let creatorUin: Int64

        /// 来源平台
        public let srcPlat: String

        /// 来源AppId
        public let srcAppId: Int64

        /// 项目状态,0正常，-1关闭。默认项目为3
        public let status: Int64

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 是否默认项目，1 是，0 不是
        public let isDefault: Int64

        /// 描述信息
        public let info: String

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case ownerUin = "OwnerUin"
            case appId = "AppId"
            case name = "Name"
            case creatorUin = "CreatorUin"
            case srcPlat = "SrcPlat"
            case srcAppId = "SrcAppId"
            case status = "Status"
            case createTime = "CreateTime"
            case isDefault = "IsDefault"
            case info = "Info"
        }
    }

    /// 售卖可用区信息
    public struct RegionInfo: TCOutputModel {
        /// 地域英文ID
        public let region: String

        /// 地域数字ID
        public let regionId: Int64

        /// 地域中文名
        public let regionName: String

        /// 可用区列表
        public let zoneList: [ZonesInfo]

        /// 可选择的主可用区和从可用区
        public let availableChoice: [ShardZoneChooseInfo]

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionId = "RegionId"
            case regionName = "RegionName"
            case zoneList = "ZoneList"
            case availableChoice = "AvailableChoice"
        }
    }

    /// 标签对象，包含tagKey & tagValue
    public struct ResourceTag: TCInputModel, TCOutputModel {
        /// 标签键key
        public let tagKey: String

        /// 标签值value
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 安全组详情
    public struct SecurityGroup: TCOutputModel {
        /// 项目ID
        public let projectId: Int64

        /// 创建时间，时间格式：yyyy-mm-dd hh:mm:ss
        public let createTime: String

        /// 安全组ID
        public let securityGroupId: String

        /// 安全组名称
        public let securityGroupName: String

        /// 安全组备注
        public let securityGroupRemark: String

        /// 入站规则
        public let inbound: [SecurityGroupBound]

        /// 出站规则
        public let outbound: [SecurityGroupBound]

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case createTime = "CreateTime"
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupRemark = "SecurityGroupRemark"
            case inbound = "Inbound"
            case outbound = "Outbound"
        }
    }

    /// 安全出入口规则
    public struct SecurityGroupBound: TCOutputModel {
        /// 来源 IP 或 IP 段，例如192.168.0.0/16
        public let cidrIp: String

        /// 策略，ACCEPT 或者 DROP
        public let action: String

        /// 端口
        public let portRange: String

        /// 网络协议，支持 UDP、TCP 等
        public let ipProtocol: String

        enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case action = "Action"
            case portRange = "PortRange"
            case ipProtocol = "IpProtocol"
        }
    }

    /// DCDB分片信息
    public struct ShardBriefInfo: TCOutputModel {
        /// 分片SerialId
        public let shardSerialId: String

        /// 分片ID，形如shard-7vg1o339
        public let shardInstanceId: String

        /// 分片运行状态
        public let status: Int64

        /// 分片运行状态描述
        public let statusDesc: String

        /// 分片创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 分片内存大小，单位GB
        public let memory: Int64

        /// 分片磁盘大小，单位GB
        public let storage: Int64

        /// 分片日志磁盘空间大小，单位GB
        public let logDisk: Int64

        /// 分片节点个数
        public let nodeCount: Int64

        /// 分片磁盘空间使用率
        public let storageUsage: Float

        /// 分片Proxy版本信息
        public let proxyVersion: String

        /// 分片主DB可用区
        public let shardMasterZone: String

        /// 分片从DB可用区
        public let shardSlaveZones: [String]

        /// 分片Cpu核数
        public let cpu: Int64

        /// DB节点信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodesInfo: [NodeInfo]?

        enum CodingKeys: String, CodingKey {
            case shardSerialId = "ShardSerialId"
            case shardInstanceId = "ShardInstanceId"
            case status = "Status"
            case statusDesc = "StatusDesc"
            case createTime = "CreateTime"
            case memory = "Memory"
            case storage = "Storage"
            case logDisk = "LogDisk"
            case nodeCount = "NodeCount"
            case storageUsage = "StorageUsage"
            case proxyVersion = "ProxyVersion"
            case shardMasterZone = "ShardMasterZone"
            case shardSlaveZones = "ShardSlaveZones"
            case cpu = "Cpu"
            case nodesInfo = "NodesInfo"
        }
    }

    /// 分片信息
    public struct ShardInfo: TCOutputModel {
        /// 分片ID
        public let shardInstanceId: String

        /// 分片Set ID
        public let shardSerialId: String

        /// 状态：0 创建中，1 流程处理中， 2 运行中，3 分片未初始化，-2 分片已删除
        public let status: Int64

        /// 创建时间
        public let createtime: String

        /// 内存大小，单位 GB
        public let memory: Int64

        /// 存储大小，单位 GB
        public let storage: Int64

        /// 分片数字ID
        public let shardId: Int64

        /// 节点数，2 为一主一从， 3 为一主二从
        public let nodeCount: Int64

        /// 产品类型 Id（过时字段，请勿依赖该值）
        public let pid: Int64

        /// Cpu核数
        public let cpu: UInt64

        enum CodingKeys: String, CodingKey {
            case shardInstanceId = "ShardInstanceId"
            case shardSerialId = "ShardSerialId"
            case status = "Status"
            case createtime = "Createtime"
            case memory = "Memory"
            case storage = "Storage"
            case shardId = "ShardId"
            case nodeCount = "NodeCount"
            case pid = "Pid"
            case cpu = "Cpu"
        }
    }

    /// 分片节点可用区选择
    public struct ShardZoneChooseInfo: TCOutputModel {
        /// 主可用区
        public let masterZone: ZonesInfo

        /// 可选的从可用区
        public let slaveZones: [ZonesInfo]

        enum CodingKeys: String, CodingKey {
            case masterZone = "MasterZone"
            case slaveZones = "SlaveZones"
        }
    }

    /// 慢查询条目信息
    public struct SlowLogData: TCOutputModel {
        /// 语句校验和，用于查询详情
        public let checkSum: String

        /// 数据库名称
        public let db: String

        /// 抽象的SQL语句
        public let fingerPrint: String

        /// 平均的锁时间
        public let lockTimeAvg: String

        /// 最大锁时间
        public let lockTimeMax: String

        /// 最小锁时间
        public let lockTimeMin: String

        /// 锁时间总和
        public let lockTimeSum: String

        /// 查询次数
        public let queryCount: String

        /// 平均查询时间
        public let queryTimeAvg: String

        /// 最大查询时间
        public let queryTimeMax: String

        /// 最小查询时间
        public let queryTimeMin: String

        /// 查询时间总和
        public let queryTimeSum: String

        /// 扫描行数
        public let rowsExaminedSum: String

        /// 发送行数
        public let rowsSentSum: String

        /// 最后执行时间
        public let tsMax: String

        /// 首次执行时间
        public let tsMin: String

        /// 帐号
        public let user: String

        /// 样例Sql
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exampleSql: String?

        /// 账户的域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let host: String?

        enum CodingKeys: String, CodingKey {
            case checkSum = "CheckSum"
            case db = "Db"
            case fingerPrint = "FingerPrint"
            case lockTimeAvg = "LockTimeAvg"
            case lockTimeMax = "LockTimeMax"
            case lockTimeMin = "LockTimeMin"
            case lockTimeSum = "LockTimeSum"
            case queryCount = "QueryCount"
            case queryTimeAvg = "QueryTimeAvg"
            case queryTimeMax = "QueryTimeMax"
            case queryTimeMin = "QueryTimeMin"
            case queryTimeSum = "QueryTimeSum"
            case rowsExaminedSum = "RowsExaminedSum"
            case rowsSentSum = "RowsSentSum"
            case tsMax = "TsMax"
            case tsMin = "TsMin"
            case user = "User"
            case exampleSql = "ExampleSql"
            case host = "Host"
        }
    }

    /// 按机型分类的规格配置
    public struct SpecConfig: TCOutputModel {
        /// 规格机型
        public let machine: String

        /// 规格列表
        public let specConfigInfos: [SpecConfigInfo]

        enum CodingKeys: String, CodingKey {
            case machine = "Machine"
            case specConfigInfos = "SpecConfigInfos"
        }
    }

    /// 实例可售卖规格详细信息，创建实例和扩容实例时 NodeCount、Memory 确定售卖规格，硬盘大小可用区间为[MinStorage,MaxStorage]
    public struct SpecConfigInfo: TCOutputModel {
        /// 节点个数，2 表示一主一从，3 表示一主二从
        public let nodeCount: UInt64

        /// 内存大小，单位 GB
        public let memory: Int64

        /// 数据盘规格最小值，单位 GB
        public let minStorage: Int64

        /// 数据盘规格最大值，单位 GB
        public let maxStorage: Int64

        /// 推荐的使用场景
        public let suitInfo: String

        /// 产品类型 Id
        public let pid: Int64

        /// 最大 Qps 值
        public let qps: Int64

        /// CPU核数
        public let cpu: Int64

        enum CodingKeys: String, CodingKey {
            case nodeCount = "NodeCount"
            case memory = "Memory"
            case minStorage = "MinStorage"
            case maxStorage = "MaxStorage"
            case suitInfo = "SuitInfo"
            case pid = "Pid"
            case qps = "Qps"
            case cpu = "Cpu"
        }
    }

    /// 升级实例 -- 切分分片类型
    public struct SplitShardConfig: TCInputModel {
        /// 分片ID数组
        public let shardInstanceIds: [String]

        /// 数据切分比例，固定50%
        public let splitRate: Int64

        /// 分片内存大小，单位 GB
        public let shardMemory: Int64

        /// 分片存储大小，单位 GB
        public let shardStorage: Int64

        public init(shardInstanceIds: [String], splitRate: Int64, shardMemory: Int64, shardStorage: Int64) {
            self.shardInstanceIds = shardInstanceIds
            self.splitRate = splitRate
            self.shardMemory = shardMemory
            self.shardStorage = shardStorage
        }

        enum CodingKeys: String, CodingKey {
            case shardInstanceIds = "ShardInstanceIds"
            case splitRate = "SplitRate"
            case shardMemory = "ShardMemory"
            case shardStorage = "ShardStorage"
        }
    }

    /// 描述一条sql日志的详细信息。
    public struct SqlLogItem: TCOutputModel {
        /// 本条日志在消息队列中的偏移量。
        public let offset: UInt64

        /// 执行本条sql的用户。
        public let user: String

        /// 执行本条sql的客户端IP+端口。
        public let client: String

        /// 数据库名称。
        public let dbName: String

        /// 执行的sql语句。
        public let sql: String

        /// 返回的数据行数。
        public let selectRowNum: UInt64

        /// 影响行数。
        public let affectRowNum: UInt64

        /// Sql执行时间戳。
        public let timestamp: UInt64

        /// Sql耗时，单位为毫秒。
        public let timeCostMs: UInt64

        /// Sql返回码，0为成功。
        public let resultCode: UInt64

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case user = "User"
            case client = "Client"
            case dbName = "DbName"
            case sql = "Sql"
            case selectRowNum = "SelectRowNum"
            case affectRowNum = "AffectRowNum"
            case timestamp = "Timestamp"
            case timeCostMs = "TimeCostMs"
            case resultCode = "ResultCode"
        }
    }

    /// 数据库列信息
    public struct TableColumn: TCOutputModel {
        /// 列名称
        public let col: String

        /// 列类型
        public let type: String

        enum CodingKeys: String, CodingKey {
            case col = "Col"
            case type = "Type"
        }
    }

    /// 数据库表权限
    public struct TablePrivilege: TCInputModel {
        /// 数据库名
        public let database: String

        /// 数据库表名
        public let table: String

        /// 权限信息
        public let privileges: [String]

        public init(database: String, table: String, privileges: [String]) {
            self.database = database
            self.table = table
            self.privileges = privileges
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case table = "Table"
            case privileges = "Privileges"
        }
    }

    /// 用户任务信息
    public struct UserTaskInfo: TCOutputModel {
        /// 任务ID
        public let id: Int64

        /// 用户账户ID
        public let appId: Int64

        /// 任务状态，0-任务初始化中；1-任务运行中；2-任务成功；3-任务失败
        public let status: Int64

        /// 任务类型，0-实例回档；1-实例创建；2-实例扩容；3-实例迁移；4-实例删除；5-实例重启
        public let userTaskType: Int64

        /// 任务创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 任务结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 任务错误信息
        public let errMsg: String

        /// 客户端参数
        public let inputData: String

        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 地域ID
        public let regionId: Int64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case appId = "AppId"
            case status = "Status"
            case userTaskType = "UserTaskType"
            case createTime = "CreateTime"
            case endTime = "EndTime"
            case errMsg = "ErrMsg"
            case inputData = "InputData"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case regionId = "RegionId"
        }
    }

    /// 视图权限信息
    public struct ViewPrivileges: TCInputModel {
        /// 数据库名
        public let database: String

        /// 数据库视图名
        public let view: String

        /// 权限信息
        public let privileges: [String]

        public init(database: String, view: String, privileges: [String]) {
            self.database = database
            self.view = view
            self.privileges = privileges
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case view = "View"
            case privileges = "Privileges"
        }
    }

    /// 可用区信息
    public struct ZonesInfo: TCOutputModel {
        /// 可用区英文ID
        public let zone: String

        /// 可用区数字ID
        public let zoneId: Int64

        /// 可用区中文名
        public let zoneName: String

        /// 是否在售
        public let onSale: Bool

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case onSale = "OnSale"
        }
    }
}
