//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ams {
    /// CreateAudioModerationTask请求参数结构体
    public struct CreateAudioModerationTaskRequest: TCRequestModel {
        /// 该字段表示输入的音频审核任务信息，具体输入内容请参见TaskInput数据结构的详细描述。<br> 备注：最多同时可创建**10个任务**。
        public let tasks: [TaskInput]

        /// 该字段表示策略的具体编号，用于接口调度，在内容安全控制台中可配置。若不传入Biztype参数（留空），则代表采用默认的识别策略；传入则会在审核时根据业务场景采取不同的审核策略。<br>备注：Biztype仅为数字、字母与下划线的组合，长度为3-32个字符；不同Biztype关联不同的业务场景与识别能力策略，调用前请确认正确的Biztype。
        public let bizType: String?

        /// 该字段表示输入的音频审核类型，取值为：**AUDIO**（点播音频）和 **LIVE_AUDIO**（直播音频），默认值为AUDIO。
        public let type: String?

        /// 可选参数，该字段表示回调签名的key信息，用于保证数据的安全性。 签名方法为在返回的HTTP头部添加 X-Signature 的字段，值为： seed + body 的 SHA256 编码和Hex字符串，在收到回调数据后，可以根据返回的body，用 **sha256(seed + body)**, 计算出 `X-Signature` 进行验证。<br>具体使用实例可参考 [回调签名示例](https://cloud.tencent.com/document/product/1219/53263)。
        public let seed: String?

        /// 可选参数，该字段表示接受审核信息回调的地址，格式为URL链接默认格式。配置成功后，审核过程中产生的违规音频片段将通过此接口发送。回调返回内容格式请参考 [回调签名示例](https://cloud.tencent.com/document/product/1219/53257#.E7.A4.BA.E4.BE.8B2-.E5.9B.9E.E8.B0.83.E7.AD.BE.E5.90.8D.E7.A4.BA.E4.BE.8B)
        public let callbackUrl: String?

        public init(tasks: [TaskInput], bizType: String? = nil, type: String? = nil, seed: String? = nil, callbackUrl: String? = nil) {
            self.tasks = tasks
            self.bizType = bizType
            self.type = type
            self.seed = seed
            self.callbackUrl = callbackUrl
        }

        enum CodingKeys: String, CodingKey {
            case tasks = "Tasks"
            case bizType = "BizType"
            case type = "Type"
            case seed = "Seed"
            case callbackUrl = "CallbackUrl"
        }
    }

    /// CreateAudioModerationTask返回参数结构体
    public struct CreateAudioModerationTaskResponse: TCResponseModel {
        /// 该字段用于返回任务创建的结果，具体输出内容请参见TaskResult数据结构的详细描述。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let results: [TaskResult]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case results = "Results"
            case requestId = "RequestId"
        }
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您使用腾讯云主账号登录控制台[开通音频内容安全服务](https://console.cloud.tencent.com/cms/audio/package)并调整好对应的业务配置。<br>
    ///
    /// ### 功能使用说明：
    /// - 前往“[内容安全控制台-音频内容安全](https://console.cloud.tencent.com/cms/audio/package)”开启使用音频内容安全服务，首次开通可获得**10小时**免费调用时长，有效期为1个月。
    /// - 默认接口请求频率限制：**20次/秒**；对于异步审核任务（点播音频），超出频率限制的请求会自动排入待审核队列，对于同步审核任务（直播音频），超出频率限制将会报错。
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果（对于已在审核的任务，最长回调时间为用户配置的**切片时长 + 2s**），或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、广告等场景；
    /// - 支持批量提交检测任务，检测任务列表**最多支持10个**。
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：**文件 < 500M**；
    /// - 音频文件时长支持：**< 1小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - （**当输入为视频文件时**）支持分离视频文件音轨，并对音频内容进行独立审核。
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：**< 3小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - （**当输入为视频流时**）支持提取视频流音轨，并对音频内容进行独立审核。
    ///
    /// ### 直播断流处理说明：
    /// - 请确认已对接[取消任务](https://cloud.tencent.com/document/product/1219/53258)。
    /// - 如果直播任务取消/结束，则终止直播拉流并退出审核。
    /// - 如果直播任务没有取消/结束，直播视频推流因故中断，产品将在将在10分钟内持续拉流重试。如果10分钟检测到音频切片数据，则恢复正常审核，反之，则终止拉流并退出审核。在拉流终止后，用户如有审核需求，需重新送审。
    ///
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func createAudioModerationTask(_ input: CreateAudioModerationTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAudioModerationTaskResponse> {
        self.client.execute(action: "CreateAudioModerationTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您使用腾讯云主账号登录控制台[开通音频内容安全服务](https://console.cloud.tencent.com/cms/audio/package)并调整好对应的业务配置。<br>
    ///
    /// ### 功能使用说明：
    /// - 前往“[内容安全控制台-音频内容安全](https://console.cloud.tencent.com/cms/audio/package)”开启使用音频内容安全服务，首次开通可获得**10小时**免费调用时长，有效期为1个月。
    /// - 默认接口请求频率限制：**20次/秒**；对于异步审核任务（点播音频），超出频率限制的请求会自动排入待审核队列，对于同步审核任务（直播音频），超出频率限制将会报错。
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果（对于已在审核的任务，最长回调时间为用户配置的**切片时长 + 2s**），或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、广告等场景；
    /// - 支持批量提交检测任务，检测任务列表**最多支持10个**。
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：**文件 < 500M**；
    /// - 音频文件时长支持：**< 1小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - （**当输入为视频文件时**）支持分离视频文件音轨，并对音频内容进行独立审核。
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：**< 3小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - （**当输入为视频流时**）支持提取视频流音轨，并对音频内容进行独立审核。
    ///
    /// ### 直播断流处理说明：
    /// - 请确认已对接[取消任务](https://cloud.tencent.com/document/product/1219/53258)。
    /// - 如果直播任务取消/结束，则终止直播拉流并退出审核。
    /// - 如果直播任务没有取消/结束，直播视频推流因故中断，产品将在将在10分钟内持续拉流重试。如果10分钟检测到音频切片数据，则恢复正常审核，反之，则终止拉流并退出审核。在拉流终止后，用户如有审核需求，需重新送审。
    ///
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func createAudioModerationTask(_ input: CreateAudioModerationTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAudioModerationTaskResponse {
        try await self.client.execute(action: "CreateAudioModerationTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您使用腾讯云主账号登录控制台[开通音频内容安全服务](https://console.cloud.tencent.com/cms/audio/package)并调整好对应的业务配置。<br>
    ///
    /// ### 功能使用说明：
    /// - 前往“[内容安全控制台-音频内容安全](https://console.cloud.tencent.com/cms/audio/package)”开启使用音频内容安全服务，首次开通可获得**10小时**免费调用时长，有效期为1个月。
    /// - 默认接口请求频率限制：**20次/秒**；对于异步审核任务（点播音频），超出频率限制的请求会自动排入待审核队列，对于同步审核任务（直播音频），超出频率限制将会报错。
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果（对于已在审核的任务，最长回调时间为用户配置的**切片时长 + 2s**），或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、广告等场景；
    /// - 支持批量提交检测任务，检测任务列表**最多支持10个**。
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：**文件 < 500M**；
    /// - 音频文件时长支持：**< 1小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - （**当输入为视频文件时**）支持分离视频文件音轨，并对音频内容进行独立审核。
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：**< 3小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - （**当输入为视频流时**）支持提取视频流音轨，并对音频内容进行独立审核。
    ///
    /// ### 直播断流处理说明：
    /// - 请确认已对接[取消任务](https://cloud.tencent.com/document/product/1219/53258)。
    /// - 如果直播任务取消/结束，则终止直播拉流并退出审核。
    /// - 如果直播任务没有取消/结束，直播视频推流因故中断，产品将在将在10分钟内持续拉流重试。如果10分钟检测到音频切片数据，则恢复正常审核，反之，则终止拉流并退出审核。在拉流终止后，用户如有审核需求，需重新送审。
    ///
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func createAudioModerationTask(tasks: [TaskInput], bizType: String? = nil, type: String? = nil, seed: String? = nil, callbackUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAudioModerationTaskResponse> {
        self.createAudioModerationTask(.init(tasks: tasks, bizType: bizType, type: type, seed: seed, callbackUrl: callbackUrl), region: region, logger: logger, on: eventLoop)
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您使用腾讯云主账号登录控制台[开通音频内容安全服务](https://console.cloud.tencent.com/cms/audio/package)并调整好对应的业务配置。<br>
    ///
    /// ### 功能使用说明：
    /// - 前往“[内容安全控制台-音频内容安全](https://console.cloud.tencent.com/cms/audio/package)”开启使用音频内容安全服务，首次开通可获得**10小时**免费调用时长，有效期为1个月。
    /// - 默认接口请求频率限制：**20次/秒**；对于异步审核任务（点播音频），超出频率限制的请求会自动排入待审核队列，对于同步审核任务（直播音频），超出频率限制将会报错。
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果（对于已在审核的任务，最长回调时间为用户配置的**切片时长 + 2s**），或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、广告等场景；
    /// - 支持批量提交检测任务，检测任务列表**最多支持10个**。
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：**文件 < 500M**；
    /// - 音频文件时长支持：**< 1小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - （**当输入为视频文件时**）支持分离视频文件音轨，并对音频内容进行独立审核。
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：**< 3小时**；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - （**当输入为视频流时**）支持提取视频流音轨，并对音频内容进行独立审核。
    ///
    /// ### 直播断流处理说明：
    /// - 请确认已对接[取消任务](https://cloud.tencent.com/document/product/1219/53258)。
    /// - 如果直播任务取消/结束，则终止直播拉流并退出审核。
    /// - 如果直播任务没有取消/结束，直播视频推流因故中断，产品将在将在10分钟内持续拉流重试。如果10分钟检测到音频切片数据，则恢复正常审核，反之，则终止拉流并退出审核。在拉流终止后，用户如有审核需求，需重新送审。
    ///
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func createAudioModerationTask(tasks: [TaskInput], bizType: String? = nil, type: String? = nil, seed: String? = nil, callbackUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAudioModerationTaskResponse {
        try await self.createAudioModerationTask(.init(tasks: tasks, bizType: bizType, type: type, seed: seed, callbackUrl: callbackUrl), region: region, logger: logger, on: eventLoop)
    }
}
