//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ams {
    /// CreateAudioModerationTask请求参数结构体
    public struct CreateAudioModerationTaskRequest: TCRequestModel {
        /// 业务类型, 定义 模版策略，输出存储配置。如果没有BizType，可以先参考 【创建业务配置】接口进行创建
        public let bizType: String?

        /// 审核类型，这里可选：AUDIO (点播音频)和 LIVE_AUDIO（直播音频）
        public let type: String?

        /// 回调签名key，具体可以查看签名文档。
        public let seed: String?

        /// 接收审核信息回调地址，如果设置，则审核过程中产生的违规音频片段和画面截帧发送此接口
        public let callbackUrl: String?

        /// 输入的任务信息，最多可以同时创建10个任务
        public let tasks: [TaskInput]?

        public init(bizType: String? = nil, type: String? = nil, seed: String? = nil, callbackUrl: String? = nil, tasks: [TaskInput]? = nil) {
            self.bizType = bizType
            self.type = type
            self.seed = seed
            self.callbackUrl = callbackUrl
            self.tasks = tasks
        }

        enum CodingKeys: String, CodingKey {
            case bizType = "BizType"
            case type = "Type"
            case seed = "Seed"
            case callbackUrl = "CallbackUrl"
            case tasks = "Tasks"
        }
    }

    /// CreateAudioModerationTask返回参数结构体
    public struct CreateAudioModerationTaskResponse: TCResponseModel {
        /// 任务创建结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let results: [TaskResult]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case results = "Results"
            case requestId = "RequestId"
        }
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您登陆控制台开通音频内容安全服务。
    ///
    /// ### 功能使用说明：
    /// - 前往“内容安全控制台-音频内容安全”开启使用音频内容安全服务，首次开通可获得20小时免费调用时长
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果，或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、涉政、广告等场景；
    /// - 支持批量提交检测任务。检测任务列表最多支持10个；
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：文件 < 500M；
    /// - 音频文件时长支持：< 1小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - 支持音视频文件分离并对音频文件进行独立识别；
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：< 3小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - 支持音视频流分离并对音频流进行独立识别；
    @inlinable
    public func createAudioModerationTask(_ input: CreateAudioModerationTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAudioModerationTaskResponse> {
        self.client.execute(action: "CreateAudioModerationTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您登陆控制台开通音频内容安全服务。
    ///
    /// ### 功能使用说明：
    /// - 前往“内容安全控制台-音频内容安全”开启使用音频内容安全服务，首次开通可获得20小时免费调用时长
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果，或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、涉政、广告等场景；
    /// - 支持批量提交检测任务。检测任务列表最多支持10个；
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：文件 < 500M；
    /// - 音频文件时长支持：< 1小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - 支持音视频文件分离并对音频文件进行独立识别；
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：< 3小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - 支持音视频流分离并对音频流进行独立识别；
    @inlinable
    public func createAudioModerationTask(_ input: CreateAudioModerationTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAudioModerationTaskResponse {
        try await self.client.execute(action: "CreateAudioModerationTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您登陆控制台开通音频内容安全服务。
    ///
    /// ### 功能使用说明：
    /// - 前往“内容安全控制台-音频内容安全”开启使用音频内容安全服务，首次开通可获得20小时免费调用时长
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果，或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、涉政、广告等场景；
    /// - 支持批量提交检测任务。检测任务列表最多支持10个；
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：文件 < 500M；
    /// - 音频文件时长支持：< 1小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - 支持音视频文件分离并对音频文件进行独立识别；
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：< 3小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - 支持音视频流分离并对音频流进行独立识别；
    @inlinable
    public func createAudioModerationTask(bizType: String? = nil, type: String? = nil, seed: String? = nil, callbackUrl: String? = nil, tasks: [TaskInput]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAudioModerationTaskResponse> {
        self.createAudioModerationTask(.init(bizType: bizType, type: type, seed: seed, callbackUrl: callbackUrl, tasks: tasks), region: region, logger: logger, on: eventLoop)
    }

    /// 创建音频审核任务
    ///
    /// 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您登陆控制台开通音频内容安全服务。
    ///
    /// ### 功能使用说明：
    /// - 前往“内容安全控制台-音频内容安全”开启使用音频内容安全服务，首次开通可获得20小时免费调用时长
    ///
    /// ### 接口功能说明：
    /// - 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
    /// - 支持设置回调地址 Callback 获取检测结果，或通过接口(查询音频检测结果)主动轮询获取检测结果；
    /// - 支持识别违规内容，包括：低俗、谩骂、色情、涉政、广告等场景；
    /// - 支持批量提交检测任务。检测任务列表最多支持10个；
    ///
    /// ### 音频文件调用说明：
    /// - 音频文件大小支持：文件 < 500M；
    /// - 音频文件时长支持：< 1小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
    /// - 支持音视频文件分离并对音频文件进行独立识别；
    ///
    /// ### 音频流调用说明：
    /// - 音频流时长支持：< 3小时；
    /// - 音频码率类型支持：128 Kbps - 256 Kbps ；
    /// - 音频流支持的传输协议：RTMP、HTTP、HTTPS；
    /// - 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
    /// - 支持音视频流分离并对音频流进行独立识别；
    @inlinable
    public func createAudioModerationTask(bizType: String? = nil, type: String? = nil, seed: String? = nil, callbackUrl: String? = nil, tasks: [TaskInput]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAudioModerationTaskResponse {
        try await self.createAudioModerationTask(.init(bizType: bizType, type: type, seed: seed, callbackUrl: callbackUrl, tasks: tasks), region: region, logger: logger, on: eventLoop)
    }
}
