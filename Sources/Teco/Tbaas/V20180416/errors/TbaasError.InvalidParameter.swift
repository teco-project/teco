//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTbaasError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case accountParamError = "InvalidParameter.AccountParamError"
            case agencyInvalid = "InvalidParameter.AgencyInvalid"
            case agencyNetParamInvalid = "InvalidParameter.AgencyNetParamInvalid"
            case allianceIdOfNetEmpty = "InvalidParameter.AllianceIdOfNetEmpty"
            case contractIdInvalid = "InvalidParameter.ContractIdInvalid"
            case dataHadExist = "InvalidParameter.DataHadExist"
            case emptyParam = "InvalidParameter.EmptyParam"
            case expireTimeInvalid = "InvalidParameter.ExpireTimeInvalid"
            case frontConnFail = "InvalidParameter.FrontConnFail"
            case frontIpInvalid = "InvalidParameter.FrontIpInvalid"
            case frontParamError = "InvalidParameter.FrontParamError"
            case frontRequestFail = "InvalidParameter.FrontRequestFail"
            case inputDataViolation = "InvalidParameter.InputDataViolation"
            case invalidContractArg = "InvalidParameter.InvalidContractArg"
            case netIdInvalid = "InvalidParameter.NetIdInvalid"
            case netParamError = "InvalidParameter.NetParamError"
            case newKeyUserParamError = "InvalidParameter.NewKeyUserParamError"
            case noInfoToDelete = "InvalidParameter.NoInfoToDelete"
            case notFoundValidFront = "InvalidParameter.NotFoundValidFront"
            case reDeployedContract = "InvalidParameter.ReDeployedContract"
            case reDeployingContract = "InvalidParameter.ReDeployingContract"
            case roleInvalid = "InvalidParameter.RoleInvalid"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// Bcos账号参数错误。
        public static var accountParamError: InvalidParameter {
            InvalidParameter(.accountParamError)
        }
        
        /// Bcos无效的机构信息。
        public static var agencyInvalid: InvalidParameter {
            InvalidParameter(.agencyInvalid)
        }
        
        /// Bcos新增机构网络关联信息入参错误。
        public static var agencyNetParamInvalid: InvalidParameter {
            InvalidParameter(.agencyNetParamInvalid)
        }
        
        /// Bcos所属联盟编号不能为空。
        public static var allianceIdOfNetEmpty: InvalidParameter {
            InvalidParameter(.allianceIdOfNetEmpty)
        }
        
        /// Bcos无效的合约编号。
        public static var contractIdInvalid: InvalidParameter {
            InvalidParameter(.contractIdInvalid)
        }
        
        /// Bcos数据已存在，请勿重复添加。
        public static var dataHadExist: InvalidParameter {
            InvalidParameter(.dataHadExist)
        }
        
        /// Bcos无效参数。
        public static var emptyParam: InvalidParameter {
            InvalidParameter(.emptyParam)
        }
        
        /// Bcos无效的失效时间。
        public static var expireTimeInvalid: InvalidParameter {
            InvalidParameter(.expireTimeInvalid)
        }
        
        /// Bcos前置的IP或端口无效。
        public static var frontConnFail: InvalidParameter {
            InvalidParameter(.frontConnFail)
        }
        
        /// Bcos IP格式错误。
        public static var frontIpInvalid: InvalidParameter {
            InvalidParameter(.frontIpInvalid)
        }
        
        /// Bcos新增前置服务参数错误。
        public static var frontParamError: InvalidParameter {
            InvalidParameter(.frontParamError)
        }
        
        /// Bcos前置服务调用失败。
        public static var frontRequestFail: InvalidParameter {
            InvalidParameter(.frontRequestFail)
        }
        
        /// 输入参数存在违规内容。
        public static var inputDataViolation: InvalidParameter {
            InvalidParameter(.inputDataViolation)
        }
        
        /// Bcos无效的合约参数。
        public static var invalidContractArg: InvalidParameter {
            InvalidParameter(.invalidContractArg)
        }
        
        /// Bcos无效的网络编号。
        public static var netIdInvalid: InvalidParameter {
            InvalidParameter(.netIdInvalid)
        }
        
        /// Bcos网络参数错误。
        public static var netParamError: InvalidParameter {
            InvalidParameter(.netParamError)
        }
        
        /// Bcos新增私钥用户参数错误。
        public static var newKeyUserParamError: InvalidParameter {
            InvalidParameter(.newKeyUserParamError)
        }
        
        /// Bcos无可删信息,请确认后重试。
        public static var noInfoToDelete: InvalidParameter {
            InvalidParameter(.noInfoToDelete)
        }
        
        /// Bcos没有有效的前置服务信息。
        public static var notFoundValidFront: InvalidParameter {
            InvalidParameter(.notFoundValidFront)
        }
        
        /// Bcos不能重复部署合约。
        public static var reDeployedContract: InvalidParameter {
            InvalidParameter(.reDeployedContract)
        }
        
        /// Bcos合约正在部署中，请勿重复操作。
        public static var reDeployingContract: InvalidParameter {
            InvalidParameter(.reDeployingContract)
        }
        
        /// Bcos无效的角色。
        public static var roleInvalid: InvalidParameter {
            InvalidParameter(.roleInvalid)
        }
    }
}

extension TCTbaasError.InvalidParameter: Equatable {
    public static func == (lhs: TCTbaasError.InvalidParameter, rhs: TCTbaasError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTbaasError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTbaasError.InvalidParameter {
    /// - Returns: ``TCTbaasError`` that holds the same error and context.
    public func toTbaasError() -> TCTbaasError {
        guard let code = TCTbaasError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTbaasError(code, context: self.context)
    }
}

extension TCTbaasError.InvalidParameter {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
