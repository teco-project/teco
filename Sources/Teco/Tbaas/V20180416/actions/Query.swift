//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tbaas {
    /// 查询交易
    @inlinable
    public func query(_ input: QueryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < QueryResponse > {
        self.client.execute(action: "Query", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询交易
    @inlinable
    public func query(_ input: QueryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryResponse {
        try await self.client.execute(action: "Query", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// Query请求参数结构体
    public struct QueryRequest: TCRequestModel {
        /// 模块名，固定字段：transaction
        public let module: String
        
        /// 操作名，固定字段：query
        public let operation: String
        
        /// 区块链网络ID，可在区块链网络详情或列表中获取
        public let clusterId: String
        
        /// 业务所属智能合约名称，可在智能合约详情或列表中获取
        public let chaincodeName: String
        
        /// 业务所属通道名称，可在通道详情或列表中获取
        public let channelName: String
        
        /// 执行该查询交易的节点列表（包括节点名称和节点所属组织名称，详见数据结构一节），可以在通道详情中获取该通道上的节点名称及其所属组织名称
        public let peers: [PeerSet]
        
        /// 该笔交易查询需要调用的智能合约中的函数名称
        public let funcName: String
        
        /// 调用合约的组织名称，可以在组织管理列表中获取当前组织的名称
        public let groupName: String
        
        /// 被调用的函数参数列表
        public let args: [String]?
        
        public init (module: String, operation: String, clusterId: String, chaincodeName: String, channelName: String, peers: [PeerSet], funcName: String, groupName: String, args: [String]?) {
            self.module = module
            self.operation = operation
            self.clusterId = clusterId
            self.chaincodeName = chaincodeName
            self.channelName = channelName
            self.peers = peers
            self.funcName = funcName
            self.groupName = groupName
            self.args = args
        }
        
        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
            case clusterId = "ClusterId"
            case chaincodeName = "ChaincodeName"
            case channelName = "ChannelName"
            case peers = "Peers"
            case funcName = "FuncName"
            case groupName = "GroupName"
            case args = "Args"
        }
    }
    
    /// Query返回参数结构体
    public struct QueryResponse: TCResponseModel {
        /// 查询结果数据
        public let data: [String]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }
}
