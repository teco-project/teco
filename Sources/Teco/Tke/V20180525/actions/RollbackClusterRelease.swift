//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// RollbackClusterRelease请求参数结构体
    public struct RollbackClusterReleaseRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String
        
        /// 应用名称
        public let name: String
        
        /// 应用命名空间
        public let namespace: String
        
        /// 回滚版本号
        public let revision: Int64
        
        /// 集群类型
        public let clusterType: String?
        
        public init (clusterId: String, name: String, namespace: String, revision: Int64, clusterType: String? = nil) {
            self.clusterId = clusterId
            self.name = name
            self.namespace = namespace
            self.revision = revision
            self.clusterType = clusterType
        }
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case name = "Name"
            case namespace = "Namespace"
            case revision = "Revision"
            case clusterType = "ClusterType"
        }
    }
    
    /// RollbackClusterRelease返回参数结构体
    public struct RollbackClusterReleaseResponse: TCResponseModel {
        /// 应用详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let release: PendingRelease?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case release = "Release"
            case requestId = "RequestId"
        }
    }
    
    /// 集群回滚应用版本
    ///
    /// 在应用市场中集群回滚应用至某个历史版本
    @inlinable
    public func rollbackClusterRelease(_ input: RollbackClusterReleaseRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < RollbackClusterReleaseResponse > {
        self.client.execute(action: "RollbackClusterRelease", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 集群回滚应用版本
    ///
    /// 在应用市场中集群回滚应用至某个历史版本
    @inlinable
    public func rollbackClusterRelease(_ input: RollbackClusterReleaseRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RollbackClusterReleaseResponse {
        try await self.client.execute(action: "RollbackClusterRelease", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
