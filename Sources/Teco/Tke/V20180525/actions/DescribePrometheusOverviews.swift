//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// 获取实例列表
    ///
    /// 获取实例列表
    @inlinable
    public func describePrometheusOverviews(_ input: DescribePrometheusOverviewsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePrometheusOverviewsResponse > {
        self.client.execute(action: "DescribePrometheusOverviews", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取实例列表
    ///
    /// 获取实例列表
    @inlinable
    public func describePrometheusOverviews(_ input: DescribePrometheusOverviewsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePrometheusOverviewsResponse {
        try await self.client.execute(action: "DescribePrometheusOverviews", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribePrometheusOverviews请求参数结构体
    public struct DescribePrometheusOverviewsRequest: TCRequestModel {
        /// 用于分页
        public let offset: UInt64?
        
        /// 用于分页
        public let limit: UInt64?
        
        /// 过滤实例，目前支持：
        /// ID: 通过实例ID来过滤 
        /// Name: 通过实例名称来过滤
        public let filters: [Filter]?
        
        public init (offset: UInt64?, limit: UInt64?, filters: [Filter]?) {
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }
        
        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }
    }
    
    /// DescribePrometheusOverviews返回参数结构体
    public struct DescribePrometheusOverviewsResponse: TCResponseModel {
        /// 实例列表
        public let instances: [PrometheusInstanceOverview]
        
        /// 实例总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case total = "Total"
            case requestId = "RequestId"
        }
    }
}