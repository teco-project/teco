//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribeAddon请求参数结构体
    public struct DescribeAddonRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// addon名称（不传时会返回集群下全部的addon）
        public let addonName: String?

        public init(clusterId: String, addonName: String? = nil) {
            self.clusterId = clusterId
            self.addonName = addonName
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case addonName = "AddonName"
        }
    }

    /// DescribeAddon返回参数结构体
    public struct DescribeAddonResponse: TCResponseModel {
        /// addon列表
        public let addons: [Addon]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case addons = "Addons"
            case requestId = "RequestId"
        }
    }

    /// 获取addon列表
    @inlinable
    public func describeAddon(_ input: DescribeAddonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddonResponse> {
        self.client.execute(action: "DescribeAddon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取addon列表
    @inlinable
    public func describeAddon(_ input: DescribeAddonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddonResponse {
        try await self.client.execute(action: "DescribeAddon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取addon列表
    @inlinable
    public func describeAddon(clusterId: String, addonName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddonResponse> {
        self.describeAddon(.init(clusterId: clusterId, addonName: addonName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取addon列表
    @inlinable
    public func describeAddon(clusterId: String, addonName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddonResponse {
        try await self.describeAddon(.init(clusterId: clusterId, addonName: addonName), region: region, logger: logger, on: eventLoop)
    }
}
