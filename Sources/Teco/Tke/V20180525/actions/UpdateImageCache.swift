//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tke {
    /// UpdateImageCache请求参数结构体
    public struct UpdateImageCacheRequest: TCRequestModel {
        /// 镜像缓存Id
        public let imageCacheId: String

        /// 镜像缓存名称
        public let imageCacheName: String?

        /// 镜像仓库凭证数组
        public let imageRegistryCredentials: [ImageRegistryCredential]?

        /// 用于制作镜像缓存的容器镜像列表
        public let images: [String]?

        /// 镜像缓存的大小。默认为20 GiB。取值范围参考[云硬盘类型](https://cloud.tencent.com/document/product/362/2353)中的高性能云盘类型的大小限制。
        public let imageCacheSize: UInt64?

        /// 镜像缓存保留时间天数，过期将会自动清理，默认为0，永不过期。
        public let retentionDays: UInt64?

        /// 安全组Id
        public let securityGroupIds: [String]?

        public init(imageCacheId: String, imageCacheName: String? = nil, imageRegistryCredentials: [ImageRegistryCredential]? = nil, images: [String]? = nil, imageCacheSize: UInt64? = nil, retentionDays: UInt64? = nil, securityGroupIds: [String]? = nil) {
            self.imageCacheId = imageCacheId
            self.imageCacheName = imageCacheName
            self.imageRegistryCredentials = imageRegistryCredentials
            self.images = images
            self.imageCacheSize = imageCacheSize
            self.retentionDays = retentionDays
            self.securityGroupIds = securityGroupIds
        }

        enum CodingKeys: String, CodingKey {
            case imageCacheId = "ImageCacheId"
            case imageCacheName = "ImageCacheName"
            case imageRegistryCredentials = "ImageRegistryCredentials"
            case images = "Images"
            case imageCacheSize = "ImageCacheSize"
            case retentionDays = "RetentionDays"
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    /// UpdateImageCache返回参数结构体
    public struct UpdateImageCacheResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新镜像缓存
    ///
    /// 更新镜像缓存接口
    @inlinable @discardableResult
    public func updateImageCache(_ input: UpdateImageCacheRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateImageCacheResponse> {
        self.client.execute(action: "UpdateImageCache", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新镜像缓存
    ///
    /// 更新镜像缓存接口
    @inlinable @discardableResult
    public func updateImageCache(_ input: UpdateImageCacheRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateImageCacheResponse {
        try await self.client.execute(action: "UpdateImageCache", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新镜像缓存
    ///
    /// 更新镜像缓存接口
    @inlinable @discardableResult
    public func updateImageCache(imageCacheId: String, imageCacheName: String? = nil, imageRegistryCredentials: [ImageRegistryCredential]? = nil, images: [String]? = nil, imageCacheSize: UInt64? = nil, retentionDays: UInt64? = nil, securityGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateImageCacheResponse> {
        self.updateImageCache(.init(imageCacheId: imageCacheId, imageCacheName: imageCacheName, imageRegistryCredentials: imageRegistryCredentials, images: images, imageCacheSize: imageCacheSize, retentionDays: retentionDays, securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }

    /// 更新镜像缓存
    ///
    /// 更新镜像缓存接口
    @inlinable @discardableResult
    public func updateImageCache(imageCacheId: String, imageCacheName: String? = nil, imageRegistryCredentials: [ImageRegistryCredential]? = nil, images: [String]? = nil, imageCacheSize: UInt64? = nil, retentionDays: UInt64? = nil, securityGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateImageCacheResponse {
        try await self.updateImageCache(.init(imageCacheId: imageCacheId, imageCacheName: imageCacheName, imageRegistryCredentials: imageRegistryCredentials, images: images, imageCacheSize: imageCacheSize, retentionDays: retentionDays, securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }
}
