//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// RenewReservedInstances请求参数结构体
    public struct RenewReservedInstancesRequest: TCRequest {
        /// 预留券实例ID，每次请求实例的上限为100。
        public let reservedInstanceIds: [String]

        /// 预付费模式，即包年包月相关参数设置。通过该参数可以指定包年包月实例的续费时长、是否设置自动续费等属性。
        public let instanceChargePrepaid: InstanceChargePrepaid

        /// 用于保证请求幂等性的字符串。该字符串由客户生成，需保证不同请求之间唯一，最大值不超过64个ASCII字符。若不指定该参数，则无法保证请求的幂等性。
        public let clientToken: String?

        public init(reservedInstanceIds: [String], instanceChargePrepaid: InstanceChargePrepaid, clientToken: String? = nil) {
            self.reservedInstanceIds = reservedInstanceIds
            self.instanceChargePrepaid = instanceChargePrepaid
            self.clientToken = clientToken
        }

        enum CodingKeys: String, CodingKey {
            case reservedInstanceIds = "ReservedInstanceIds"
            case instanceChargePrepaid = "InstanceChargePrepaid"
            case clientToken = "ClientToken"
        }
    }

    /// RenewReservedInstances返回参数结构体
    public struct RenewReservedInstancesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 续费预留券实例
    ///
    /// 续费时请确保账户余额充足。
    @inlinable @discardableResult
    public func renewReservedInstances(_ input: RenewReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewReservedInstancesResponse> {
        self.client.execute(action: "RenewReservedInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 续费预留券实例
    ///
    /// 续费时请确保账户余额充足。
    @inlinable @discardableResult
    public func renewReservedInstances(_ input: RenewReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewReservedInstancesResponse {
        try await self.client.execute(action: "RenewReservedInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 续费预留券实例
    ///
    /// 续费时请确保账户余额充足。
    @inlinable @discardableResult
    public func renewReservedInstances(reservedInstanceIds: [String], instanceChargePrepaid: InstanceChargePrepaid, clientToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewReservedInstancesResponse> {
        self.renewReservedInstances(.init(reservedInstanceIds: reservedInstanceIds, instanceChargePrepaid: instanceChargePrepaid, clientToken: clientToken), region: region, logger: logger, on: eventLoop)
    }

    /// 续费预留券实例
    ///
    /// 续费时请确保账户余额充足。
    @inlinable @discardableResult
    public func renewReservedInstances(reservedInstanceIds: [String], instanceChargePrepaid: InstanceChargePrepaid, clientToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewReservedInstancesResponse {
        try await self.renewReservedInstances(.init(reservedInstanceIds: reservedInstanceIds, instanceChargePrepaid: instanceChargePrepaid, clientToken: clientToken), region: region, logger: logger, on: eventLoop)
    }
}
