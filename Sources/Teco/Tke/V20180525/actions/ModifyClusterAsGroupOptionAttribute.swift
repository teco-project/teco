//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tke {
    /// ModifyClusterAsGroupOptionAttribute请求参数结构体
    public struct ModifyClusterAsGroupOptionAttributeRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 集群弹性伸缩属性
        public let clusterAsGroupOption: ClusterAsGroupOption

        public init(clusterId: String, clusterAsGroupOption: ClusterAsGroupOption) {
            self.clusterId = clusterId
            self.clusterAsGroupOption = clusterAsGroupOption
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterAsGroupOption = "ClusterAsGroupOption"
        }
    }

    /// ModifyClusterAsGroupOptionAttribute返回参数结构体
    public struct ModifyClusterAsGroupOptionAttributeResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改集群弹性伸缩属性
    @inlinable @discardableResult
    public func modifyClusterAsGroupOptionAttribute(_ input: ModifyClusterAsGroupOptionAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyClusterAsGroupOptionAttributeResponse> {
        self.client.execute(action: "ModifyClusterAsGroupOptionAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改集群弹性伸缩属性
    @inlinable @discardableResult
    public func modifyClusterAsGroupOptionAttribute(_ input: ModifyClusterAsGroupOptionAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyClusterAsGroupOptionAttributeResponse {
        try await self.client.execute(action: "ModifyClusterAsGroupOptionAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改集群弹性伸缩属性
    @inlinable @discardableResult
    public func modifyClusterAsGroupOptionAttribute(clusterId: String, clusterAsGroupOption: ClusterAsGroupOption, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyClusterAsGroupOptionAttributeResponse> {
        self.modifyClusterAsGroupOptionAttribute(.init(clusterId: clusterId, clusterAsGroupOption: clusterAsGroupOption), region: region, logger: logger, on: eventLoop)
    }

    /// 修改集群弹性伸缩属性
    @inlinable @discardableResult
    public func modifyClusterAsGroupOptionAttribute(clusterId: String, clusterAsGroupOption: ClusterAsGroupOption, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyClusterAsGroupOptionAttributeResponse {
        try await self.modifyClusterAsGroupOptionAttribute(.init(clusterId: clusterId, clusterAsGroupOption: clusterAsGroupOption), region: region, logger: logger, on: eventLoop)
    }
}
