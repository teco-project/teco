//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribeAddonValues请求参数结构体
    public struct DescribeAddonValuesRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// addon名称
        public let addonName: String

        public init(clusterId: String, addonName: String) {
            self.clusterId = clusterId
            self.addonName = addonName
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case addonName = "AddonName"
        }
    }

    /// DescribeAddonValues返回参数结构体
    public struct DescribeAddonValuesResponse: TCResponseModel {
        /// 参数列表，如果addon已安装，会使用已设置的的参数做渲染，是一个json格式的字符串
        public let values: String

        /// addon支持的参数列表，使用默认值，是一个json格式的字符串
        public let defaultValues: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case values = "Values"
            case defaultValues = "DefaultValues"
            case requestId = "RequestId"
        }
    }

    /// 获取addon的参数
    ///
    /// 获取一个addon的参数
    @inlinable
    public func describeAddonValues(_ input: DescribeAddonValuesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddonValuesResponse> {
        self.client.execute(action: "DescribeAddonValues", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取addon的参数
    ///
    /// 获取一个addon的参数
    @inlinable
    public func describeAddonValues(_ input: DescribeAddonValuesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddonValuesResponse {
        try await self.client.execute(action: "DescribeAddonValues", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取addon的参数
    ///
    /// 获取一个addon的参数
    @inlinable
    public func describeAddonValues(clusterId: String, addonName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddonValuesResponse> {
        self.describeAddonValues(.init(clusterId: clusterId, addonName: addonName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取addon的参数
    ///
    /// 获取一个addon的参数
    @inlinable
    public func describeAddonValues(clusterId: String, addonName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddonValuesResponse {
        try await self.describeAddonValues(.init(clusterId: clusterId, addonName: addonName), region: region, logger: logger, on: eventLoop)
    }
}
