//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// CreateBackupStorageLocation请求参数结构体
    public struct CreateBackupStorageLocationRequest: TCRequestModel {
        /// 存储仓库所属地域，比如COS广州(ap-guangzhou)
        public let storageRegion: String

        /// 对象存储桶名称，如果是COS必须是tke-backup前缀开头
        public let bucket: String

        /// 备份仓库名称
        public let name: String

        /// 存储服务提供方，默认腾讯云
        public let provider: String?

        /// 对象存储桶路径
        public let path: String?

        public init(storageRegion: String, bucket: String, name: String, provider: String? = nil, path: String? = nil) {
            self.storageRegion = storageRegion
            self.bucket = bucket
            self.name = name
            self.provider = provider
            self.path = path
        }

        enum CodingKeys: String, CodingKey {
            case storageRegion = "StorageRegion"
            case bucket = "Bucket"
            case name = "Name"
            case provider = "Provider"
            case path = "Path"
        }
    }

    /// CreateBackupStorageLocation返回参数结构体
    public struct CreateBackupStorageLocationResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建备份仓库
    ///
    /// 创建备份仓库，指定了存储仓库类型（如COS）、COS桶地区、名称等信息，当前最多允许创建100个仓库， 注意此接口当前是全局接口，多个地域的TKE集群如果要备份到相同的备份仓库中，不需要重复创建备份仓库
    @inlinable @discardableResult
    public func createBackupStorageLocation(_ input: CreateBackupStorageLocationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBackupStorageLocationResponse> {
        self.client.execute(action: "CreateBackupStorageLocation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建备份仓库
    ///
    /// 创建备份仓库，指定了存储仓库类型（如COS）、COS桶地区、名称等信息，当前最多允许创建100个仓库， 注意此接口当前是全局接口，多个地域的TKE集群如果要备份到相同的备份仓库中，不需要重复创建备份仓库
    @inlinable @discardableResult
    public func createBackupStorageLocation(_ input: CreateBackupStorageLocationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBackupStorageLocationResponse {
        try await self.client.execute(action: "CreateBackupStorageLocation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建备份仓库
    ///
    /// 创建备份仓库，指定了存储仓库类型（如COS）、COS桶地区、名称等信息，当前最多允许创建100个仓库， 注意此接口当前是全局接口，多个地域的TKE集群如果要备份到相同的备份仓库中，不需要重复创建备份仓库
    @inlinable @discardableResult
    public func createBackupStorageLocation(storageRegion: String, bucket: String, name: String, provider: String? = nil, path: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBackupStorageLocationResponse> {
        self.createBackupStorageLocation(.init(storageRegion: storageRegion, bucket: bucket, name: name, provider: provider, path: path), region: region, logger: logger, on: eventLoop)
    }

    /// 创建备份仓库
    ///
    /// 创建备份仓库，指定了存储仓库类型（如COS）、COS桶地区、名称等信息，当前最多允许创建100个仓库， 注意此接口当前是全局接口，多个地域的TKE集群如果要备份到相同的备份仓库中，不需要重复创建备份仓库
    @inlinable @discardableResult
    public func createBackupStorageLocation(storageRegion: String, bucket: String, name: String, provider: String? = nil, path: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBackupStorageLocationResponse {
        try await self.createBackupStorageLocation(.init(storageRegion: storageRegion, bucket: bucket, name: name, provider: provider, path: path), region: region, logger: logger, on: eventLoop)
    }
}
