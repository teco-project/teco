//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// EnableEncryptionProtection请求参数结构体
    public struct EnableEncryptionProtectionRequest: TCRequest {
        /// 集群ID
        public let clusterId: String

        /// kms加密配置
        public let kmsConfiguration: KMSConfiguration

        public init(clusterId: String, kmsConfiguration: KMSConfiguration) {
            self.clusterId = clusterId
            self.kmsConfiguration = kmsConfiguration
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case kmsConfiguration = "KMSConfiguration"
        }
    }

    /// EnableEncryptionProtection返回参数结构体
    public struct EnableEncryptionProtectionResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 开启加密数据保护
    @inlinable @discardableResult
    public func enableEncryptionProtection(_ input: EnableEncryptionProtectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableEncryptionProtectionResponse> {
        self.client.execute(action: "EnableEncryptionProtection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开启加密数据保护
    @inlinable @discardableResult
    public func enableEncryptionProtection(_ input: EnableEncryptionProtectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableEncryptionProtectionResponse {
        try await self.client.execute(action: "EnableEncryptionProtection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开启加密数据保护
    @inlinable @discardableResult
    public func enableEncryptionProtection(clusterId: String, kmsConfiguration: KMSConfiguration, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableEncryptionProtectionResponse> {
        self.enableEncryptionProtection(.init(clusterId: clusterId, kmsConfiguration: kmsConfiguration), region: region, logger: logger, on: eventLoop)
    }

    /// 开启加密数据保护
    @inlinable @discardableResult
    public func enableEncryptionProtection(clusterId: String, kmsConfiguration: KMSConfiguration, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableEncryptionProtectionResponse {
        try await self.enableEncryptionProtection(.init(clusterId: clusterId, kmsConfiguration: kmsConfiguration), region: region, logger: logger, on: eventLoop)
    }
}
