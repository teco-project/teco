//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribeEdgeClusterUpgradeInfo请求参数结构体
    public struct DescribeEdgeClusterUpgradeInfoRequest: TCRequest {
        /// 集群ID
        public let clusterId: String

        /// 要升级到的TKEEdge版本
        public let edgeVersion: String

        public init(clusterId: String, edgeVersion: String) {
            self.clusterId = clusterId
            self.edgeVersion = edgeVersion
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case edgeVersion = "EdgeVersion"
        }
    }

    /// DescribeEdgeClusterUpgradeInfo返回参数结构体
    public struct DescribeEdgeClusterUpgradeInfoResponse: TCResponse {
        /// 可升级的集群组件和
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentVersion: String?

        /// 边缘集群当前版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let edgeVersionCurrent: String?

        /// 边缘组件镜像仓库地址前缀，包含域名和命名空间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registryPrefix: String?

        /// 集群升级状态，可能值：running、updating、failed
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterUpgradeStatus: String?

        /// 集群升级中状态或者失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterUpgradeStatusReason: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case componentVersion = "ComponentVersion"
            case edgeVersionCurrent = "EdgeVersionCurrent"
            case registryPrefix = "RegistryPrefix"
            case clusterUpgradeStatus = "ClusterUpgradeStatus"
            case clusterUpgradeStatusReason = "ClusterUpgradeStatusReason"
            case requestId = "RequestId"
        }
    }

    /// 查询边缘集群升级信息
    ///
    /// 可以查询边缘集群升级信息，包含可以升级的组件，当前升级状态和升级错误信息
    @inlinable
    public func describeEdgeClusterUpgradeInfo(_ input: DescribeEdgeClusterUpgradeInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeClusterUpgradeInfoResponse> {
        self.client.execute(action: "DescribeEdgeClusterUpgradeInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询边缘集群升级信息
    ///
    /// 可以查询边缘集群升级信息，包含可以升级的组件，当前升级状态和升级错误信息
    @inlinable
    public func describeEdgeClusterUpgradeInfo(_ input: DescribeEdgeClusterUpgradeInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeClusterUpgradeInfoResponse {
        try await self.client.execute(action: "DescribeEdgeClusterUpgradeInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询边缘集群升级信息
    ///
    /// 可以查询边缘集群升级信息，包含可以升级的组件，当前升级状态和升级错误信息
    @inlinable
    public func describeEdgeClusterUpgradeInfo(clusterId: String, edgeVersion: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeClusterUpgradeInfoResponse> {
        self.describeEdgeClusterUpgradeInfo(.init(clusterId: clusterId, edgeVersion: edgeVersion), region: region, logger: logger, on: eventLoop)
    }

    /// 查询边缘集群升级信息
    ///
    /// 可以查询边缘集群升级信息，包含可以升级的组件，当前升级状态和升级错误信息
    @inlinable
    public func describeEdgeClusterUpgradeInfo(clusterId: String, edgeVersion: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeClusterUpgradeInfoResponse {
        try await self.describeEdgeClusterUpgradeInfo(.init(clusterId: clusterId, edgeVersion: edgeVersion), region: region, logger: logger, on: eventLoop)
    }
}
