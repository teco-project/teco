//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribeClusterInspectionResultsOverview请求参数结构体
    public struct DescribeClusterInspectionResultsOverviewRequest: TCRequestModel {
        /// Array of String	目标集群列表，为空查询用户所有集群
        public let clusterIds: [String]?

        /// 聚合字段信息，概览结果按照 GroupBy 信息聚合后返回，可选参数：
        /// catalogue.first：按一级分类聚合
        /// catalogue.second：按二级分类聚合
        public let groupBy: [String]?

        public init(clusterIds: [String]? = nil, groupBy: [String]? = nil) {
            self.clusterIds = clusterIds
            self.groupBy = groupBy
        }

        enum CodingKeys: String, CodingKey {
            case clusterIds = "ClusterIds"
            case groupBy = "GroupBy"
        }
    }

    /// DescribeClusterInspectionResultsOverview返回参数结构体
    public struct DescribeClusterInspectionResultsOverviewResponse: TCResponseModel {
        /// 诊断结果统计
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statistics: [KubeJarvisStateStatistic]?

        /// 诊断结果概览
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let diagnostics: [KubeJarvisStateDiagnosticOverview]?

        /// 集群诊断结果概览
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inspectionOverview: [KubeJarvisStateInspectionOverview]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case statistics = "Statistics"
            case diagnostics = "Diagnostics"
            case inspectionOverview = "InspectionOverview"
            case requestId = "RequestId"
        }
    }

    /// 查询集群巡检结果概览信息
    ///
    /// 查询用户单个Region下的所有集群巡检结果概览信息
    @inlinable
    public func describeClusterInspectionResultsOverview(_ input: DescribeClusterInspectionResultsOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterInspectionResultsOverviewResponse> {
        self.client.execute(action: "DescribeClusterInspectionResultsOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询集群巡检结果概览信息
    ///
    /// 查询用户单个Region下的所有集群巡检结果概览信息
    @inlinable
    public func describeClusterInspectionResultsOverview(_ input: DescribeClusterInspectionResultsOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterInspectionResultsOverviewResponse {
        try await self.client.execute(action: "DescribeClusterInspectionResultsOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询集群巡检结果概览信息
    ///
    /// 查询用户单个Region下的所有集群巡检结果概览信息
    @inlinable
    public func describeClusterInspectionResultsOverview(clusterIds: [String]? = nil, groupBy: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterInspectionResultsOverviewResponse> {
        self.describeClusterInspectionResultsOverview(.init(clusterIds: clusterIds, groupBy: groupBy), region: region, logger: logger, on: eventLoop)
    }

    /// 查询集群巡检结果概览信息
    ///
    /// 查询用户单个Region下的所有集群巡检结果概览信息
    @inlinable
    public func describeClusterInspectionResultsOverview(clusterIds: [String]? = nil, groupBy: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterInspectionResultsOverviewResponse {
        try await self.describeClusterInspectionResultsOverview(.init(clusterIds: clusterIds, groupBy: groupBy), region: region, logger: logger, on: eventLoop)
    }
}
