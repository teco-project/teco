//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tke {
    /// CreateEKSCluster请求参数结构体
    public struct CreateEKSClusterRequest: TCRequestModel {
        /// k8s版本号。可为1.18.4 1.20.6。
        public let k8sVersion: String

        /// vpc 的Id
        public let vpcId: String

        /// 集群名称
        public let clusterName: String

        /// 子网Id 列表
        public let subnetIds: [String]

        /// 集群描述信息
        public let clusterDesc: String?

        /// Service CIDR 或 Serivce 所在子网Id
        public let serviceSubnetId: String?

        /// 集群自定义的Dns服务器信息
        public let dnsServers: [DnsServerConf]?

        /// 扩展参数。须是map[string]string 的json 格式。
        public let extraParam: String?

        /// 是否在用户集群内开启Dns。默认为true
        public let enableVpcCoreDNS: Bool?

        /// 标签描述列表。通过指定该参数可以同时绑定标签到相应的资源实例，当前仅支持绑定标签到集群实例。
        public let tagSpecification: [TagSpecification]?

        /// 子网信息列表
        public let subnetInfos: [SubnetInfos]?

        public init(k8sVersion: String, vpcId: String, clusterName: String, subnetIds: [String], clusterDesc: String? = nil, serviceSubnetId: String? = nil, dnsServers: [DnsServerConf]? = nil, extraParam: String? = nil, enableVpcCoreDNS: Bool? = nil, tagSpecification: [TagSpecification]? = nil, subnetInfos: [SubnetInfos]? = nil) {
            self.k8sVersion = k8sVersion
            self.vpcId = vpcId
            self.clusterName = clusterName
            self.subnetIds = subnetIds
            self.clusterDesc = clusterDesc
            self.serviceSubnetId = serviceSubnetId
            self.dnsServers = dnsServers
            self.extraParam = extraParam
            self.enableVpcCoreDNS = enableVpcCoreDNS
            self.tagSpecification = tagSpecification
            self.subnetInfos = subnetInfos
        }

        enum CodingKeys: String, CodingKey {
            case k8sVersion = "K8SVersion"
            case vpcId = "VpcId"
            case clusterName = "ClusterName"
            case subnetIds = "SubnetIds"
            case clusterDesc = "ClusterDesc"
            case serviceSubnetId = "ServiceSubnetId"
            case dnsServers = "DnsServers"
            case extraParam = "ExtraParam"
            case enableVpcCoreDNS = "EnableVpcCoreDNS"
            case tagSpecification = "TagSpecification"
            case subnetInfos = "SubnetInfos"
        }
    }

    /// CreateEKSCluster返回参数结构体
    public struct CreateEKSClusterResponse: TCResponseModel {
        /// 弹性集群Id
        public let clusterId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case requestId = "RequestId"
        }
    }

    /// 创建弹性集群
    @inlinable
    public func createEKSCluster(_ input: CreateEKSClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEKSClusterResponse> {
        self.client.execute(action: "CreateEKSCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建弹性集群
    @inlinable
    public func createEKSCluster(_ input: CreateEKSClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEKSClusterResponse {
        try await self.client.execute(action: "CreateEKSCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建弹性集群
    @inlinable
    public func createEKSCluster(k8sVersion: String, vpcId: String, clusterName: String, subnetIds: [String], clusterDesc: String? = nil, serviceSubnetId: String? = nil, dnsServers: [DnsServerConf]? = nil, extraParam: String? = nil, enableVpcCoreDNS: Bool? = nil, tagSpecification: [TagSpecification]? = nil, subnetInfos: [SubnetInfos]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEKSClusterResponse> {
        self.createEKSCluster(.init(k8sVersion: k8sVersion, vpcId: vpcId, clusterName: clusterName, subnetIds: subnetIds, clusterDesc: clusterDesc, serviceSubnetId: serviceSubnetId, dnsServers: dnsServers, extraParam: extraParam, enableVpcCoreDNS: enableVpcCoreDNS, tagSpecification: tagSpecification, subnetInfos: subnetInfos), region: region, logger: logger, on: eventLoop)
    }

    /// 创建弹性集群
    @inlinable
    public func createEKSCluster(k8sVersion: String, vpcId: String, clusterName: String, subnetIds: [String], clusterDesc: String? = nil, serviceSubnetId: String? = nil, dnsServers: [DnsServerConf]? = nil, extraParam: String? = nil, enableVpcCoreDNS: Bool? = nil, tagSpecification: [TagSpecification]? = nil, subnetInfos: [SubnetInfos]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEKSClusterResponse {
        try await self.createEKSCluster(.init(k8sVersion: k8sVersion, vpcId: vpcId, clusterName: clusterName, subnetIds: subnetIds, clusterDesc: clusterDesc, serviceSubnetId: serviceSubnetId, dnsServers: dnsServers, extraParam: extraParam, enableVpcCoreDNS: enableVpcCoreDNS, tagSpecification: tagSpecification, subnetInfos: subnetInfos), region: region, logger: logger, on: eventLoop)
    }
}
