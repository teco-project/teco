//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// 获取告警历史
    @inlinable
    public func describePrometheusAlertHistory(_ input: DescribePrometheusAlertHistoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePrometheusAlertHistoryResponse > {
        self.client.execute(action: "DescribePrometheusAlertHistory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取告警历史
    @inlinable
    public func describePrometheusAlertHistory(_ input: DescribePrometheusAlertHistoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePrometheusAlertHistoryResponse {
        try await self.client.execute(action: "DescribePrometheusAlertHistory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribePrometheusAlertHistory请求参数结构体
    public struct DescribePrometheusAlertHistoryRequest: TCRequestModel {
        /// 实例id
        public let instanceId: String
        
        /// 告警名称
        public let ruleName: String?
        
        /// 开始时间
        public let startTime: String?
        
        /// 结束时间
        public let endTime: String?
        
        /// label集合
        public let labels: String?
        
        /// 分片
        public let offset: UInt64?
        
        /// 分片
        public let limit: UInt64?
        
        public init (instanceId: String, ruleName: String?, startTime: String?, endTime: String?, labels: String?, offset: UInt64?, limit: UInt64?) {
            self.instanceId = instanceId
            self.ruleName = ruleName
            self.startTime = startTime
            self.endTime = endTime
            self.labels = labels
            self.offset = offset
            self.limit = limit
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case ruleName = "RuleName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case labels = "Labels"
            case offset = "Offset"
            case limit = "Limit"
        }
    }
    
    /// DescribePrometheusAlertHistory返回参数结构体
    public struct DescribePrometheusAlertHistoryResponse: TCResponseModel {
        /// 告警历史
        public let items: [PrometheusAlertHistoryItem]
        
        /// 总数
        public let total: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case total = "Total"
            case requestId = "RequestId"
        }
    }
}
