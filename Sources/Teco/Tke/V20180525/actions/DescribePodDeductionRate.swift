//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribePodDeductionRate请求参数结构体
    public struct DescribePodDeductionRateRequest: TCRequest {
        /// 可用区
        public let zone: String?

        /// 集群 ID
        public let clusterId: String?

        /// 节点名称
        public let nodeName: String?

        public init(zone: String? = nil, clusterId: String? = nil, nodeName: String? = nil) {
            self.zone = zone
            self.clusterId = clusterId
            self.nodeName = nodeName
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case clusterId = "ClusterId"
            case nodeName = "NodeName"
        }
    }

    /// DescribePodDeductionRate返回参数结构体
    public struct DescribePodDeductionRateResponse: TCResponse {
        /// 各个规格的 可被预留券抵扣的Pod 抵扣率
        public let podDeductionRateSet: [PodDeductionRate]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case podDeductionRateSet = "PodDeductionRateSet"
            case requestId = "RequestId"
        }
    }

    /// 查询Pod 抵扣率
    ///
    /// 查询各个规格的 Pod 的抵扣率
    @inlinable
    public func describePodDeductionRate(_ input: DescribePodDeductionRateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePodDeductionRateResponse> {
        self.client.execute(action: "DescribePodDeductionRate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询Pod 抵扣率
    ///
    /// 查询各个规格的 Pod 的抵扣率
    @inlinable
    public func describePodDeductionRate(_ input: DescribePodDeductionRateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePodDeductionRateResponse {
        try await self.client.execute(action: "DescribePodDeductionRate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询Pod 抵扣率
    ///
    /// 查询各个规格的 Pod 的抵扣率
    @inlinable
    public func describePodDeductionRate(zone: String? = nil, clusterId: String? = nil, nodeName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePodDeductionRateResponse> {
        self.describePodDeductionRate(.init(zone: zone, clusterId: clusterId, nodeName: nodeName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询Pod 抵扣率
    ///
    /// 查询各个规格的 Pod 的抵扣率
    @inlinable
    public func describePodDeductionRate(zone: String? = nil, clusterId: String? = nil, nodeName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePodDeductionRateResponse {
        try await self.describePodDeductionRate(.init(zone: zone, clusterId: clusterId, nodeName: nodeName), region: region, logger: logger, on: eventLoop)
    }
}
