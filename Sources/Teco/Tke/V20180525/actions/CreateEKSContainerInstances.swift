//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// 创建容器实例
    @inlinable
    public func createEKSContainerInstances(_ input: CreateEKSContainerInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateEKSContainerInstancesResponse > {
        self.client.execute(action: "CreateEKSContainerInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建容器实例
    @inlinable
    public func createEKSContainerInstances(_ input: CreateEKSContainerInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEKSContainerInstancesResponse {
        try await self.client.execute(action: "CreateEKSContainerInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateEKSContainerInstances请求参数结构体
    public struct CreateEKSContainerInstancesRequest: TCRequestModel {
        /// 容器组
        public let containers: [Container]
        
        /// EKS Container Instance容器实例名称
        public let eksCiName: String
        
        /// 指定新创建实例所属于的安全组Id
        public let securityGroupIds: [String]
        
        /// 实例所属子网Id
        public let subnetId: String
        
        /// 实例所属VPC的Id
        public let vpcId: String
        
        /// 内存，单位：GiB。可参考[资源规格](https://cloud.tencent.com/document/product/457/39808)文档
        public let memory: Float
        
        /// CPU，单位：核。可参考[资源规格](https://cloud.tencent.com/document/product/457/39808)文档
        public let cpu: Float
        
        /// 实例重启策略： Always(总是重启)、Never(从不重启)、OnFailure(失败时重启)，默认：Always。
        public let restartPolicy: String?
        
        /// 镜像仓库凭证数组
        public let imageRegistryCredentials: [ImageRegistryCredential]?
        
        /// 数据卷，包含NfsVolume数组和CbsVolume数组
        public let eksCiVolume: EksCiVolume
        
        /// 实例副本数，默认为1
        public let replicas: Int64?
        
        /// Init 容器
        public let initContainers: [Container]?
        
        /// 自定义DNS配置
        public let dnsConfig: DNSConfig
        
        /// 用来绑定容器实例的已有EIP的列表。如传值，需要保证数值和Replicas相等。
        /// 另外此参数和AutoCreateEipAttribute互斥。
        public let existedEipIds: [String]?
        
        /// 自动创建EIP的可选参数。若传此参数，则会自动创建EIP。
        /// 另外此参数和ExistedEipIds互斥
        public let autoCreateEipAttribute: EipAttribute
        
        /// 是否为容器实例自动创建EIP，默认为false。若传true，则此参数和ExistedEipIds互斥
        public let autoCreateEip: Bool?
        
        /// Pod 所需的 CPU 资源型号，如果不填写则默认不强制指定 CPU 类型。目前支持型号如下：
        /// intel
        /// amd
        /// - 支持优先级顺序写法，如 “amd,intel” 表示优先创建 amd 资源 Pod，如果所选地域可用区 amd 资源不足，则会创建 intel 资源 Pod。
        public let cpuType: String?
        
        /// 容器实例所需的 GPU 资源型号，目前支持型号如下：
        /// 1/4\*V100
        /// 1/2\*V100
        /// V100
        /// 1/4\*T4
        /// 1/2\*T4
        /// T4
        public let gpuType: String?
        
        /// Pod 所需的 GPU 数量，如填写，请确保为支持的规格。默认单位为卡，无需再次注明。
        public let gpuCount: UInt64?
        
        /// 为容器实例关联 CAM 角色，value 填写 CAM 角色名称，容器实例可获取该 CAM 角色包含的权限策略，方便 容器实例 内的程序进行如购买资源、读写存储等云资源操作。
        public let camRoleName: String?
        
        public init (containers: [Container], eksCiName: String, securityGroupIds: [String], subnetId: String, vpcId: String, memory: Float, cpu: Float, restartPolicy: String?, imageRegistryCredentials: [ImageRegistryCredential]?, eksCiVolume: EksCiVolume, replicas: Int64?, initContainers: [Container]?, dnsConfig: DNSConfig, existedEipIds: [String]?, autoCreateEipAttribute: EipAttribute, autoCreateEip: Bool?, cpuType: String?, gpuType: String?, gpuCount: UInt64?, camRoleName: String?) {
            self.containers = containers
            self.eksCiName = eksCiName
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.vpcId = vpcId
            self.memory = memory
            self.cpu = cpu
            self.restartPolicy = restartPolicy
            self.imageRegistryCredentials = imageRegistryCredentials
            self.eksCiVolume = eksCiVolume
            self.replicas = replicas
            self.initContainers = initContainers
            self.dnsConfig = dnsConfig
            self.existedEipIds = existedEipIds
            self.autoCreateEipAttribute = autoCreateEipAttribute
            self.autoCreateEip = autoCreateEip
            self.cpuType = cpuType
            self.gpuType = gpuType
            self.gpuCount = gpuCount
            self.camRoleName = camRoleName
        }
        
        enum CodingKeys: String, CodingKey {
            case containers = "Containers"
            case eksCiName = "EksCiName"
            case securityGroupIds = "SecurityGroupIds"
            case subnetId = "SubnetId"
            case vpcId = "VpcId"
            case memory = "Memory"
            case cpu = "Cpu"
            case restartPolicy = "RestartPolicy"
            case imageRegistryCredentials = "ImageRegistryCredentials"
            case eksCiVolume = "EksCiVolume"
            case replicas = "Replicas"
            case initContainers = "InitContainers"
            case dnsConfig = "DnsConfig"
            case existedEipIds = "ExistedEipIds"
            case autoCreateEipAttribute = "AutoCreateEipAttribute"
            case autoCreateEip = "AutoCreateEip"
            case cpuType = "CpuType"
            case gpuType = "GpuType"
            case gpuCount = "GpuCount"
            case camRoleName = "CamRoleName"
        }
    }
    
    /// CreateEKSContainerInstances返回参数结构体
    public struct CreateEKSContainerInstancesResponse: TCResponseModel {
        /// EKS Container Instance Id集合，格式为eksci-xxx，是容器实例的唯一标识。
        public let eksCiIds: [String]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case eksCiIds = "EksCiIds"
            case requestId = "RequestId"
        }
    }
}
