//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribePodsBySpec请求参数结构体
    public struct DescribePodsBySpecRequest: TCPaginatedRequest {
        /// 核数
        public let cpu: Float

        /// 内存
        public let memory: Float

        /// 卡数，有0.25、0.5、1、2、4等
        public let gpuNum: String?

        /// 可用区
        public let zone: String?

        /// 集群 ID
        public let clusterId: String?

        /// 节点名称
        public let nodeName: String?

        /// 偏移量，默认0。
        public let offset: UInt64?

        /// 返回数量，默认为20，最大值为100。
        public let limit: UInt64?

        /// pod-type
        /// 按照**【Pod 类型**】进行过滤。资源类型：intel、amd、v100、t4、a10\*gnv4、a10\*gnv4v等。
        /// 类型：String
        /// 必选：否
        ///
        /// pod-deduct
        /// 按照**【上个周期抵扣的Pod**】进行过滤。Values可不设置。
        /// 必选：否
        ///
        /// pod-not-deduct
        /// 按照**【上个周期未抵扣的Pod**】进行过滤。Values可不设置。
        /// 必选：否
        public let filters: [Filter]?

        public init(cpu: Float, memory: Float, gpuNum: String? = nil, zone: String? = nil, clusterId: String? = nil, nodeName: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil) {
            self.cpu = cpu
            self.memory = memory
            self.gpuNum = gpuNum
            self.zone = zone
            self.clusterId = clusterId
            self.nodeName = nodeName
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case cpu = "Cpu"
            case memory = "Memory"
            case gpuNum = "GpuNum"
            case zone = "Zone"
            case clusterId = "ClusterId"
            case nodeName = "NodeName"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribePodsBySpecResponse) -> DescribePodsBySpecRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(cpu: self.cpu, memory: self.memory, gpuNum: self.gpuNum, zone: self.zone, clusterId: self.clusterId, nodeName: self.nodeName, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribePodsBySpec返回参数结构体
    public struct DescribePodsBySpecResponse: TCPaginatedResponse {
        /// Pod 总数
        public let totalCount: UInt64

        /// Pod 节点信息
        public let podSet: [PodNodeInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case podSet = "PodSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``PodNodeInfo`` list from the paginated response.
        public func getItems() -> [PodNodeInfo] {
            self.podSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 根据规格查询 Pod 信息
    ///
    /// 查询可以用预留券抵扣的 Pod 信息。
    @inlinable
    public func describePodsBySpec(_ input: DescribePodsBySpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePodsBySpecResponse> {
        self.client.execute(action: "DescribePodsBySpec", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据规格查询 Pod 信息
    ///
    /// 查询可以用预留券抵扣的 Pod 信息。
    @inlinable
    public func describePodsBySpec(_ input: DescribePodsBySpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePodsBySpecResponse {
        try await self.client.execute(action: "DescribePodsBySpec", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据规格查询 Pod 信息
    ///
    /// 查询可以用预留券抵扣的 Pod 信息。
    @inlinable
    public func describePodsBySpec(cpu: Float, memory: Float, gpuNum: String? = nil, zone: String? = nil, clusterId: String? = nil, nodeName: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePodsBySpecResponse> {
        self.describePodsBySpec(.init(cpu: cpu, memory: memory, gpuNum: gpuNum, zone: zone, clusterId: clusterId, nodeName: nodeName, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 根据规格查询 Pod 信息
    ///
    /// 查询可以用预留券抵扣的 Pod 信息。
    @inlinable
    public func describePodsBySpec(cpu: Float, memory: Float, gpuNum: String? = nil, zone: String? = nil, clusterId: String? = nil, nodeName: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePodsBySpecResponse {
        try await self.describePodsBySpec(.init(cpu: cpu, memory: memory, gpuNum: gpuNum, zone: zone, clusterId: clusterId, nodeName: nodeName, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 根据规格查询 Pod 信息
    ///
    /// 查询可以用预留券抵扣的 Pod 信息。
    @inlinable
    public func describePodsBySpecPaginated(_ input: DescribePodsBySpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [PodNodeInfo])> {
        self.client.paginate(input: input, region: region, command: self.describePodsBySpec, logger: logger, on: eventLoop)
    }

    /// 根据规格查询 Pod 信息
    ///
    /// 查询可以用预留券抵扣的 Pod 信息。
    @inlinable @discardableResult
    public func describePodsBySpecPaginated(_ input: DescribePodsBySpecRequest, region: TCRegion? = nil, onResponse: @escaping (DescribePodsBySpecResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describePodsBySpec, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 根据规格查询 Pod 信息
    ///
    /// 查询可以用预留券抵扣的 Pod 信息。
    ///
    /// - Returns: `AsyncSequence`s of ``PodNodeInfo`` and ``DescribePodsBySpecResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describePodsBySpecPaginator(_ input: DescribePodsBySpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribePodsBySpecRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describePodsBySpec, logger: logger, on: eventLoop)
    }
}
