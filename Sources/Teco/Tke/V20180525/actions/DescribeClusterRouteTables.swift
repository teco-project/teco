//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribeClusterRouteTables请求参数结构体
    public struct DescribeClusterRouteTablesRequest: TCRequest {
        public init() {
        }
    }

    /// DescribeClusterRouteTables返回参数结构体
    public struct DescribeClusterRouteTablesResponse: TCResponse {
        /// 符合条件的实例数量。
        public let totalCount: Int64

        /// 集群路由表对象。
        public let routeTableSet: [RouteTableInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case routeTableSet = "RouteTableSet"
            case requestId = "RequestId"
        }
    }

    /// 查询集群路由表
    @inlinable
    public func describeClusterRouteTables(_ input: DescribeClusterRouteTablesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterRouteTablesResponse> {
        self.client.execute(action: "DescribeClusterRouteTables", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询集群路由表
    @inlinable
    public func describeClusterRouteTables(_ input: DescribeClusterRouteTablesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterRouteTablesResponse {
        try await self.client.execute(action: "DescribeClusterRouteTables", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询集群路由表
    @inlinable
    public func describeClusterRouteTables(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterRouteTablesResponse> {
        self.describeClusterRouteTables(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询集群路由表
    @inlinable
    public func describeClusterRouteTables(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterRouteTablesResponse {
        try await self.describeClusterRouteTables(.init(), region: region, logger: logger, on: eventLoop)
    }
}
