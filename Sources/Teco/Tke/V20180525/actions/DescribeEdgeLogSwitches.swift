//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// DescribeEdgeLogSwitches请求参数结构体
    public struct DescribeEdgeLogSwitchesRequest: TCRequestModel {
        /// 集群ID列表
        public let clusterIds: [String]

        public init(clusterIds: [String]) {
            self.clusterIds = clusterIds
        }

        enum CodingKeys: String, CodingKey {
            case clusterIds = "ClusterIds"
        }
    }

    /// DescribeEdgeLogSwitches返回参数结构体
    public struct DescribeEdgeLogSwitchesResponse: TCResponseModel {
        /// 集群日志开关集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let switchSet: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case switchSet = "SwitchSet"
            case requestId = "RequestId"
        }
    }

    /// 查询边缘集群日志开关列表
    ///
    /// 获取事件、审计和日志的状态接口
    @inlinable
    public func describeEdgeLogSwitches(_ input: DescribeEdgeLogSwitchesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeLogSwitchesResponse> {
        self.client.execute(action: "DescribeEdgeLogSwitches", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询边缘集群日志开关列表
    ///
    /// 获取事件、审计和日志的状态接口
    @inlinable
    public func describeEdgeLogSwitches(_ input: DescribeEdgeLogSwitchesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeLogSwitchesResponse {
        try await self.client.execute(action: "DescribeEdgeLogSwitches", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询边缘集群日志开关列表
    ///
    /// 获取事件、审计和日志的状态接口
    @inlinable
    public func describeEdgeLogSwitches(clusterIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeLogSwitchesResponse> {
        let input = DescribeEdgeLogSwitchesRequest(clusterIds: clusterIds)
        return self.client.execute(action: "DescribeEdgeLogSwitches", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询边缘集群日志开关列表
    ///
    /// 获取事件、审计和日志的状态接口
    @inlinable
    public func describeEdgeLogSwitches(clusterIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeLogSwitchesResponse {
        let input = DescribeEdgeLogSwitchesRequest(clusterIds: clusterIds)
        return try await self.client.execute(action: "DescribeEdgeLogSwitches", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
