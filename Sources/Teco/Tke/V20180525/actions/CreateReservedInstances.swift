//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// CreateReservedInstances请求参数结构体
    public struct CreateReservedInstancesRequest: TCRequest {
        /// 预留券实例规格。
        public let reservedInstanceSpec: ReservedInstanceSpec

        /// 购买实例数量，一次最大购买数量为300。
        public let instanceCount: UInt64

        /// 预付费模式，即包年包月相关参数设置。通过该参数可以指定包年包月实例的购买时长、是否设置自动续费等属性。
        public let instanceChargePrepaid: InstanceChargePrepaid

        /// 预留券名称。
        public let instanceName: String?

        /// 用于保证请求幂等性的字符串。该字符串由客户生成，需保证不同请求之间唯一，最大值不超过64个ASCII字符。若不指定该参数，则无法保证请求的幂等性。
        public let clientToken: String?

        public init(reservedInstanceSpec: ReservedInstanceSpec, instanceCount: UInt64, instanceChargePrepaid: InstanceChargePrepaid, instanceName: String? = nil, clientToken: String? = nil) {
            self.reservedInstanceSpec = reservedInstanceSpec
            self.instanceCount = instanceCount
            self.instanceChargePrepaid = instanceChargePrepaid
            self.instanceName = instanceName
            self.clientToken = clientToken
        }

        enum CodingKeys: String, CodingKey {
            case reservedInstanceSpec = "ReservedInstanceSpec"
            case instanceCount = "InstanceCount"
            case instanceChargePrepaid = "InstanceChargePrepaid"
            case instanceName = "InstanceName"
            case clientToken = "ClientToken"
        }
    }

    /// CreateReservedInstances返回参数结构体
    public struct CreateReservedInstancesResponse: TCResponse {
        /// 预留券实例 ID。
        public let reservedInstanceIds: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case reservedInstanceIds = "ReservedInstanceIds"
            case requestId = "RequestId"
        }
    }

    /// 购买预留券实例
    ///
    /// 预留券实例的购买会预先扣除本次实例购买所需金额，在调用本接口前请确保账户余额充足。
    @inlinable
    public func createReservedInstances(_ input: CreateReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateReservedInstancesResponse> {
        self.client.execute(action: "CreateReservedInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 购买预留券实例
    ///
    /// 预留券实例的购买会预先扣除本次实例购买所需金额，在调用本接口前请确保账户余额充足。
    @inlinable
    public func createReservedInstances(_ input: CreateReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateReservedInstancesResponse {
        try await self.client.execute(action: "CreateReservedInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 购买预留券实例
    ///
    /// 预留券实例的购买会预先扣除本次实例购买所需金额，在调用本接口前请确保账户余额充足。
    @inlinable
    public func createReservedInstances(reservedInstanceSpec: ReservedInstanceSpec, instanceCount: UInt64, instanceChargePrepaid: InstanceChargePrepaid, instanceName: String? = nil, clientToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateReservedInstancesResponse> {
        self.createReservedInstances(.init(reservedInstanceSpec: reservedInstanceSpec, instanceCount: instanceCount, instanceChargePrepaid: instanceChargePrepaid, instanceName: instanceName, clientToken: clientToken), region: region, logger: logger, on: eventLoop)
    }

    /// 购买预留券实例
    ///
    /// 预留券实例的购买会预先扣除本次实例购买所需金额，在调用本接口前请确保账户余额充足。
    @inlinable
    public func createReservedInstances(reservedInstanceSpec: ReservedInstanceSpec, instanceCount: UInt64, instanceChargePrepaid: InstanceChargePrepaid, instanceName: String? = nil, clientToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateReservedInstancesResponse {
        try await self.createReservedInstances(.init(reservedInstanceSpec: reservedInstanceSpec, instanceCount: instanceCount, instanceChargePrepaid: instanceChargePrepaid, instanceName: instanceName, clientToken: clientToken), region: region, logger: logger, on: eventLoop)
    }
}
