//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribeResourceUsage请求参数结构体
    public struct DescribeResourceUsageRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    /// DescribeResourceUsage返回参数结构体
    public struct DescribeResourceUsageResponse: TCResponseModel {
        /// CRD使用量
        public let crdUsage: ResourceUsage

        /// Pod使用量
        public let podUsage: UInt64

        /// ConfigMap使用量
        public let configMapUsage: UInt64

        /// 其他资源使用量
        public let otherUsage: ResourceUsage

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case crdUsage = "CRDUsage"
            case podUsage = "PodUsage"
            case configMapUsage = "ConfigMapUsage"
            case otherUsage = "OtherUsage"
            case requestId = "RequestId"
        }
    }

    /// 获取集群资源使用量
    @inlinable
    public func describeResourceUsage(_ input: DescribeResourceUsageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceUsageResponse> {
        self.client.execute(action: "DescribeResourceUsage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取集群资源使用量
    @inlinable
    public func describeResourceUsage(_ input: DescribeResourceUsageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceUsageResponse {
        try await self.client.execute(action: "DescribeResourceUsage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取集群资源使用量
    @inlinable
    public func describeResourceUsage(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceUsageResponse> {
        self.describeResourceUsage(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取集群资源使用量
    @inlinable
    public func describeResourceUsage(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceUsageResponse {
        try await self.describeResourceUsage(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
