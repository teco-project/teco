//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// UpdateAddon请求参数结构体
    public struct UpdateAddonRequest: TCRequest {
        /// 集群ID
        public let clusterId: String

        /// addon名称
        public let addonName: String

        /// addon版本（不传默认不更新）
        public let addonVersion: String?

        /// addon的参数，是一个json格式的base64转码后的字符串（addon参数由DescribeAddonValues获取）
        public let rawValues: String?

        public init(clusterId: String, addonName: String, addonVersion: String? = nil, rawValues: String? = nil) {
            self.clusterId = clusterId
            self.addonName = addonName
            self.addonVersion = addonVersion
            self.rawValues = rawValues
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case addonName = "AddonName"
            case addonVersion = "AddonVersion"
            case rawValues = "RawValues"
        }
    }

    /// UpdateAddon返回参数结构体
    public struct UpdateAddonResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新addon
    ///
    /// 更新一个addon的参数和版本
    @inlinable @discardableResult
    public func updateAddon(_ input: UpdateAddonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateAddonResponse> {
        self.client.execute(action: "UpdateAddon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新addon
    ///
    /// 更新一个addon的参数和版本
    @inlinable @discardableResult
    public func updateAddon(_ input: UpdateAddonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateAddonResponse {
        try await self.client.execute(action: "UpdateAddon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新addon
    ///
    /// 更新一个addon的参数和版本
    @inlinable @discardableResult
    public func updateAddon(clusterId: String, addonName: String, addonVersion: String? = nil, rawValues: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateAddonResponse> {
        self.updateAddon(.init(clusterId: clusterId, addonName: addonName, addonVersion: addonVersion, rawValues: rawValues), region: region, logger: logger, on: eventLoop)
    }

    /// 更新addon
    ///
    /// 更新一个addon的参数和版本
    @inlinable @discardableResult
    public func updateAddon(clusterId: String, addonName: String, addonVersion: String? = nil, rawValues: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateAddonResponse {
        try await self.updateAddon(.init(clusterId: clusterId, addonName: addonName, addonVersion: addonVersion, rawValues: rawValues), region: region, logger: logger, on: eventLoop)
    }
}
