//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// ListClusterInspectionResultsItems请求参数结构体
    public struct ListClusterInspectionResultsItemsRequest: TCRequestModel {
        /// 目标集群ID
        public let clusterId: String

        /// 查询历史结果的开始时间，Unix时间戳
        public let startTime: String?

        /// 查询历史结果的结束时间，默认当前距离开始时间3天，Unix时间戳
        public let endTime: String?

        public init(clusterId: String, startTime: String? = nil, endTime: String? = nil) {
            self.clusterId = clusterId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// ListClusterInspectionResultsItems返回参数结构体
    public struct ListClusterInspectionResultsItemsResponse: TCResponseModel {
        /// 巡检结果历史列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inspectionResultsItems: [KubeJarvisStateInspectionResultsItem]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case inspectionResultsItems = "InspectionResultsItems"
            case requestId = "RequestId"
        }
    }

    /// 查询集群巡检结果历史列表
    @inlinable
    public func listClusterInspectionResultsItems(_ input: ListClusterInspectionResultsItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListClusterInspectionResultsItemsResponse> {
        self.client.execute(action: "ListClusterInspectionResultsItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询集群巡检结果历史列表
    @inlinable
    public func listClusterInspectionResultsItems(_ input: ListClusterInspectionResultsItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListClusterInspectionResultsItemsResponse {
        try await self.client.execute(action: "ListClusterInspectionResultsItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询集群巡检结果历史列表
    @inlinable
    public func listClusterInspectionResultsItems(clusterId: String, startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListClusterInspectionResultsItemsResponse> {
        self.listClusterInspectionResultsItems(.init(clusterId: clusterId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 查询集群巡检结果历史列表
    @inlinable
    public func listClusterInspectionResultsItems(clusterId: String, startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListClusterInspectionResultsItemsResponse {
        try await self.listClusterInspectionResultsItems(.init(clusterId: clusterId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
