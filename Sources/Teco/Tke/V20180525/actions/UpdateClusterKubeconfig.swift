//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// UpdateClusterKubeconfig请求参数结构体
    public struct UpdateClusterKubeconfigRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 子账户Uin列表，传空默认为调用此接口的SubUin
        public let subAccounts: [String]?

        public init(clusterId: String, subAccounts: [String]? = nil) {
            self.clusterId = clusterId
            self.subAccounts = subAccounts
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case subAccounts = "SubAccounts"
        }
    }

    /// UpdateClusterKubeconfig返回参数结构体
    public struct UpdateClusterKubeconfigResponse: TCResponseModel {
        /// 已更新的子账户Uin列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedSubAccounts: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case updatedSubAccounts = "UpdatedSubAccounts"
            case requestId = "RequestId"
        }
    }

    /// 更新集群的kubeconfig信息
    ///
    /// 对集群的Kubeconfig信息进行更新
    @inlinable
    public func updateClusterKubeconfig(_ input: UpdateClusterKubeconfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateClusterKubeconfigResponse> {
        self.client.execute(action: "UpdateClusterKubeconfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新集群的kubeconfig信息
    ///
    /// 对集群的Kubeconfig信息进行更新
    @inlinable
    public func updateClusterKubeconfig(_ input: UpdateClusterKubeconfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateClusterKubeconfigResponse {
        try await self.client.execute(action: "UpdateClusterKubeconfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新集群的kubeconfig信息
    ///
    /// 对集群的Kubeconfig信息进行更新
    @inlinable
    public func updateClusterKubeconfig(clusterId: String, subAccounts: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateClusterKubeconfigResponse> {
        self.updateClusterKubeconfig(.init(clusterId: clusterId, subAccounts: subAccounts), region: region, logger: logger, on: eventLoop)
    }

    /// 更新集群的kubeconfig信息
    ///
    /// 对集群的Kubeconfig信息进行更新
    @inlinable
    public func updateClusterKubeconfig(clusterId: String, subAccounts: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateClusterKubeconfigResponse {
        try await self.updateClusterKubeconfig(.init(clusterId: clusterId, subAccounts: subAccounts), region: region, logger: logger, on: eventLoop)
    }
}
