//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// DescribeVersions请求参数结构体
    public struct DescribeVersionsRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeVersions返回参数结构体
    public struct DescribeVersionsResponse: TCResponseModel {
        /// 版本数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 版本列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionInstanceSet: [VersionInstance]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case versionInstanceSet = "VersionInstanceSet"
            case requestId = "RequestId"
        }
    }

    /// 集群版本信息
    ///
    /// 获取集群版本信息
    @inlinable
    public func describeVersions(_ input: DescribeVersionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVersionsResponse> {
        self.client.execute(action: "DescribeVersions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 集群版本信息
    ///
    /// 获取集群版本信息
    @inlinable
    public func describeVersions(_ input: DescribeVersionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVersionsResponse {
        try await self.client.execute(action: "DescribeVersions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 集群版本信息
    ///
    /// 获取集群版本信息
    @inlinable
    public func describeVersions(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVersionsResponse> {
        let input = DescribeVersionsRequest()
        return self.client.execute(action: "DescribeVersions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 集群版本信息
    ///
    /// 获取集群版本信息
    @inlinable
    public func describeVersions(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVersionsResponse {
        let input = DescribeVersionsRequest()
        return try await self.client.execute(action: "DescribeVersions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
