//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// SyncPrometheusTemp请求参数结构体
    public struct SyncPrometheusTempRequest: TCRequestModel {
        /// 实例id
        public let templateId: String
        
        /// 同步目标
        public let targets: [PrometheusTemplateSyncTarget]
        
        public init (templateId: String, targets: [PrometheusTemplateSyncTarget]) {
            self.templateId = templateId
            self.targets = targets
        }
        
        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case targets = "Targets"
        }
    }
    
    /// SyncPrometheusTemp返回参数结构体
    public struct SyncPrometheusTempResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 同步模板
    ///
    /// 同步模板到实例或者集群，针对V2版本实例
    @inlinable
    public func syncPrometheusTemp(_ input: SyncPrometheusTempRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < SyncPrometheusTempResponse > {
        self.client.execute(action: "SyncPrometheusTemp", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 同步模板
    ///
    /// 同步模板到实例或者集群，针对V2版本实例
    @inlinable
    public func syncPrometheusTemp(_ input: SyncPrometheusTempRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncPrometheusTempResponse {
        try await self.client.execute(action: "SyncPrometheusTemp", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 同步模板
    ///
    /// 同步模板到实例或者集群，针对V2版本实例
    @inlinable
    public func syncPrometheusTemp(templateId: String, targets: [PrometheusTemplateSyncTarget], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < SyncPrometheusTempResponse > {
        self.syncPrometheusTemp(SyncPrometheusTempRequest(templateId: templateId, targets: targets), logger: logger, on: eventLoop)
    }
    
    /// 同步模板
    ///
    /// 同步模板到实例或者集群，针对V2版本实例
    @inlinable
    public func syncPrometheusTemp(templateId: String, targets: [PrometheusTemplateSyncTarget], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncPrometheusTempResponse {
        try await self.syncPrometheusTemp(SyncPrometheusTempRequest(templateId: templateId, targets: targets), logger: logger, on: eventLoop)
    }
}
