//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DeleteClusterVirtualNodePool请求参数结构体
    public struct DeleteClusterVirtualNodePoolRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 虚拟节点池ID列表
        public let nodePoolIds: [String]

        /// 是否强制删除，在虚拟节点上有pod的情况下，如果选择非强制删除，则删除会失败
        public let force: Bool?

        public init(clusterId: String, nodePoolIds: [String], force: Bool? = nil) {
            self.clusterId = clusterId
            self.nodePoolIds = nodePoolIds
            self.force = force
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case nodePoolIds = "NodePoolIds"
            case force = "Force"
        }
    }

    /// DeleteClusterVirtualNodePool返回参数结构体
    public struct DeleteClusterVirtualNodePoolResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除虚拟节点池
    @inlinable @discardableResult
    public func deleteClusterVirtualNodePool(_ input: DeleteClusterVirtualNodePoolRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteClusterVirtualNodePoolResponse> {
        self.client.execute(action: "DeleteClusterVirtualNodePool", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除虚拟节点池
    @inlinable @discardableResult
    public func deleteClusterVirtualNodePool(_ input: DeleteClusterVirtualNodePoolRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteClusterVirtualNodePoolResponse {
        try await self.client.execute(action: "DeleteClusterVirtualNodePool", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除虚拟节点池
    @inlinable @discardableResult
    public func deleteClusterVirtualNodePool(clusterId: String, nodePoolIds: [String], force: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteClusterVirtualNodePoolResponse> {
        self.deleteClusterVirtualNodePool(.init(clusterId: clusterId, nodePoolIds: nodePoolIds, force: force), region: region, logger: logger, on: eventLoop)
    }

    /// 删除虚拟节点池
    @inlinable @discardableResult
    public func deleteClusterVirtualNodePool(clusterId: String, nodePoolIds: [String], force: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteClusterVirtualNodePoolResponse {
        try await self.deleteClusterVirtualNodePool(.init(clusterId: clusterId, nodePoolIds: nodePoolIds, force: force), region: region, logger: logger, on: eventLoop)
    }
}
