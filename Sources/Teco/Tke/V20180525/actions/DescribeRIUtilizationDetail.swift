//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DescribeRIUtilizationDetail请求参数结构体
    public struct DescribeRIUtilizationDetailRequest: TCPaginatedRequest {
        /// 偏移量，默认0。
        public let offset: UInt64?

        /// 返回数量，默认为20，最大值为100。
        public let limit: UInt64?

        /// reserved-instance-id
        /// 按照**【预留实例ID**】进行过滤。预留实例ID形如：eksri-xxxxxxxx。
        /// 类型：String
        /// 必选：否
        ///
        /// begin-time
        /// 按照**【抵扣开始时间**】进行过滤。形如：2023-06-28 15:27:40。
        /// 类型：String
        /// 必选：否
        ///
        /// end-time
        /// 按照**【抵扣结束时间**】进行过滤。形如：2023-06-28 15:27:40。
        /// 类型：String
        /// 必选：否
        public let filters: [Filter]?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil) {
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRIUtilizationDetailResponse) -> DescribeRIUtilizationDetailRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeRIUtilizationDetail返回参数结构体
    public struct DescribeRIUtilizationDetailResponse: TCPaginatedResponse {
        /// 总数。
        public let totalCount: UInt64

        /// 详情。
        public let riUtilizationDetailSet: [RIUtilizationDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case riUtilizationDetailSet = "RIUtilizationDetailSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RIUtilizationDetail`` list from the paginated response.
        public func getItems() -> [RIUtilizationDetail] {
            self.riUtilizationDetailSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 预留实例用量查询
    @inlinable
    public func describeRIUtilizationDetail(_ input: DescribeRIUtilizationDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRIUtilizationDetailResponse> {
        self.client.execute(action: "DescribeRIUtilizationDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 预留实例用量查询
    @inlinable
    public func describeRIUtilizationDetail(_ input: DescribeRIUtilizationDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRIUtilizationDetailResponse {
        try await self.client.execute(action: "DescribeRIUtilizationDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 预留实例用量查询
    @inlinable
    public func describeRIUtilizationDetail(offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRIUtilizationDetailResponse> {
        self.describeRIUtilizationDetail(.init(offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 预留实例用量查询
    @inlinable
    public func describeRIUtilizationDetail(offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRIUtilizationDetailResponse {
        try await self.describeRIUtilizationDetail(.init(offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 预留实例用量查询
    @inlinable
    public func describeRIUtilizationDetailPaginated(_ input: DescribeRIUtilizationDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [RIUtilizationDetail])> {
        self.client.paginate(input: input, region: region, command: self.describeRIUtilizationDetail, logger: logger, on: eventLoop)
    }

    /// 预留实例用量查询
    @inlinable @discardableResult
    public func describeRIUtilizationDetailPaginated(_ input: DescribeRIUtilizationDetailRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRIUtilizationDetailResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRIUtilizationDetail, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 预留实例用量查询
    ///
    /// - Returns: `AsyncSequence`s of ``RIUtilizationDetail`` and ``DescribeRIUtilizationDetailResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRIUtilizationDetailPaginator(_ input: DescribeRIUtilizationDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRIUtilizationDetailRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRIUtilizationDetail, logger: logger, on: eventLoop)
    }
}
