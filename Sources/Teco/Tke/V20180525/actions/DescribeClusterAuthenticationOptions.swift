//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// DescribeClusterAuthenticationOptions请求参数结构体
    public struct DescribeClusterAuthenticationOptionsRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    /// DescribeClusterAuthenticationOptions返回参数结构体
    public struct DescribeClusterAuthenticationOptionsResponse: TCResponseModel {
        /// ServiceAccount认证配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceAccounts: ServiceAccountAuthenticationOptions?

        /// 最近一次修改操作结果，返回值可能为：Updating，Success，Failed，TimeOut
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestOperationState: String?

        /// OIDC认证配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let oidcConfig: OIDCConfigAuthenticationOptions?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case serviceAccounts = "ServiceAccounts"
            case latestOperationState = "LatestOperationState"
            case oidcConfig = "OIDCConfig"
            case requestId = "RequestId"
        }
    }

    /// 查看集群认证配置
    @inlinable
    public func describeClusterAuthenticationOptions(_ input: DescribeClusterAuthenticationOptionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterAuthenticationOptionsResponse> {
        self.client.execute(action: "DescribeClusterAuthenticationOptions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看集群认证配置
    @inlinable
    public func describeClusterAuthenticationOptions(_ input: DescribeClusterAuthenticationOptionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterAuthenticationOptionsResponse {
        try await self.client.execute(action: "DescribeClusterAuthenticationOptions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看集群认证配置
    @inlinable
    public func describeClusterAuthenticationOptions(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterAuthenticationOptionsResponse> {
        self.describeClusterAuthenticationOptions(DescribeClusterAuthenticationOptionsRequest(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 查看集群认证配置
    @inlinable
    public func describeClusterAuthenticationOptions(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterAuthenticationOptionsResponse {
        try await self.describeClusterAuthenticationOptions(DescribeClusterAuthenticationOptionsRequest(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
