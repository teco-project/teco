//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tke {
    /// DeleteAddon请求参数结构体
    public struct DeleteAddonRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// addon名称
        public let addonName: String

        public init(clusterId: String, addonName: String) {
            self.clusterId = clusterId
            self.addonName = addonName
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case addonName = "AddonName"
        }
    }

    /// DeleteAddon返回参数结构体
    public struct DeleteAddonResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除addon
    ///
    /// 删除一个addon
    @inlinable @discardableResult
    public func deleteAddon(_ input: DeleteAddonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAddonResponse> {
        self.client.execute(action: "DeleteAddon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除addon
    ///
    /// 删除一个addon
    @inlinable @discardableResult
    public func deleteAddon(_ input: DeleteAddonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAddonResponse {
        try await self.client.execute(action: "DeleteAddon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除addon
    ///
    /// 删除一个addon
    @inlinable @discardableResult
    public func deleteAddon(clusterId: String, addonName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAddonResponse> {
        self.deleteAddon(.init(clusterId: clusterId, addonName: addonName), region: region, logger: logger, on: eventLoop)
    }

    /// 删除addon
    ///
    /// 删除一个addon
    @inlinable @discardableResult
    public func deleteAddon(clusterId: String, addonName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAddonResponse {
        try await self.deleteAddon(.init(clusterId: clusterId, addonName: addonName), region: region, logger: logger, on: eventLoop)
    }
}
