//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tke {
    /// DeleteClusterInstances请求参数结构体
    public struct DeleteClusterInstancesRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 主机InstanceId列表
        public let instanceIds: [String]

        /// 集群实例删除时的策略：terminate（销毁实例，仅支持按量计费云主机实例） retain （仅移除，保留实例）
        public let instanceDeleteMode: String?

        /// 是否强制删除(当节点在初始化时，可以指定参数为TRUE)
        public let forceDelete: Bool?

        public init(clusterId: String, instanceIds: [String], instanceDeleteMode: String? = nil, forceDelete: Bool? = nil) {
            self.clusterId = clusterId
            self.instanceIds = instanceIds
            self.instanceDeleteMode = instanceDeleteMode
            self.forceDelete = forceDelete
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceIds = "InstanceIds"
            case instanceDeleteMode = "InstanceDeleteMode"
            case forceDelete = "ForceDelete"
        }
    }

    /// DeleteClusterInstances返回参数结构体
    public struct DeleteClusterInstancesResponse: TCResponseModel {
        /// 删除成功的实例ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let succInstanceIds: [String]?

        /// 删除失败的实例ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedInstanceIds: [String]?

        /// 未匹配到的实例ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let notFoundInstanceIds: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case succInstanceIds = "SuccInstanceIds"
            case failedInstanceIds = "FailedInstanceIds"
            case notFoundInstanceIds = "NotFoundInstanceIds"
            case requestId = "RequestId"
        }
    }

    /// 删除集群中的节点
    ///
    /// 删除集群中的实例
    @inlinable
    public func deleteClusterInstances(_ input: DeleteClusterInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteClusterInstancesResponse> {
        self.client.execute(action: "DeleteClusterInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除集群中的节点
    ///
    /// 删除集群中的实例
    @inlinable
    public func deleteClusterInstances(_ input: DeleteClusterInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteClusterInstancesResponse {
        try await self.client.execute(action: "DeleteClusterInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除集群中的节点
    ///
    /// 删除集群中的实例
    @inlinable
    public func deleteClusterInstances(clusterId: String, instanceIds: [String], instanceDeleteMode: String? = nil, forceDelete: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteClusterInstancesResponse> {
        self.deleteClusterInstances(DeleteClusterInstancesRequest(clusterId: clusterId, instanceIds: instanceIds, instanceDeleteMode: instanceDeleteMode, forceDelete: forceDelete), region: region, logger: logger, on: eventLoop)
    }

    /// 删除集群中的节点
    ///
    /// 删除集群中的实例
    @inlinable
    public func deleteClusterInstances(clusterId: String, instanceIds: [String], instanceDeleteMode: String? = nil, forceDelete: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteClusterInstancesResponse {
        try await self.deleteClusterInstances(DeleteClusterInstancesRequest(clusterId: clusterId, instanceIds: instanceIds, instanceDeleteMode: instanceDeleteMode, forceDelete: forceDelete), region: region, logger: logger, on: eventLoop)
    }
}
