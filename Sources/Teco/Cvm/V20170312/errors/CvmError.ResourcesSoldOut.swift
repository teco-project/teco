//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCvmError {
    public struct ResourcesSoldOut: TCCvmErrorType {
        enum Code: String {
            case availableZone = "ResourcesSoldOut.AvailableZone"
            case eipInsufficient = "ResourcesSoldOut.EipInsufficient"
            case specifiedInstanceType = "ResourcesSoldOut.SpecifiedInstanceType"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 该可用区已售罄
        public static var availableZone: ResourcesSoldOut {
            ResourcesSoldOut(.availableZone)
        }

        /// 公网IP已售罄。
        ///
        /// 1. 同网络同学确认当前地域的公网IP是否已售罄
        /// 2. 确认当前用户的公网IP的使用数量是否已达到配额上线
        public static var eipInsufficient: ResourcesSoldOut {
            ResourcesSoldOut(.eipInsufficient)
        }

        /// 指定的实例类型已售罄。
        public static var specifiedInstanceType: ResourcesSoldOut {
            ResourcesSoldOut(.specifiedInstanceType)
        }

        public func asCvmError() -> TCCvmError {
            let code: TCCvmError.Code
            switch self.error {
            case .availableZone:
                code = .resourcesSoldOut_AvailableZone
            case .eipInsufficient:
                code = .resourcesSoldOut_EipInsufficient
            case .specifiedInstanceType:
                code = .resourcesSoldOut_SpecifiedInstanceType
            }
            return TCCvmError(code, context: self.context)
        }
    }
}
