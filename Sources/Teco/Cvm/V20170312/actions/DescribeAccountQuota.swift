//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cvm {
    /// DescribeAccountQuota请求参数结构体
    public struct DescribeAccountQuotaRequest: TCRequestModel {
        /// - **zone**
        /// <p style="padding-left: 30px;">按照【**可用区**】进行过滤。可用区形如：ap-guangzhou-1。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：<a href="https://cloud.tencent.com/document/product/213/6091">可用区列表</a></p>
        /// - **quota-type**
        /// <p style="padding-left: 30px;">按照【**配额类型**】进行过滤。配额类型形如：PostPaidQuotaSet。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：PostPaidQuotaSet,DisasterRecoverGroupQuotaSet,PrePaidQuotaSet,SpotPaidQuotaSet</p>
        public let filters: [Filter]?

        public init(filters: [Filter]? = nil) {
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
        }
    }

    /// DescribeAccountQuota返回参数结构体
    public struct DescribeAccountQuotaResponse: TCResponseModel {
        /// 用户appid
        public let appId: UInt64

        /// 配额数据
        public let accountQuotaOverview: AccountQuotaOverview

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case accountQuotaOverview = "AccountQuotaOverview"
            case requestId = "RequestId"
        }
    }

    /// 查询用户配额详情
    ///
    /// 本接口(DescribeAccountQuota)用于查询用户配额详情。
    @inlinable
    public func describeAccountQuota(_ input: DescribeAccountQuotaRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccountQuotaResponse> {
        self.client.execute(action: "DescribeAccountQuota", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询用户配额详情
    ///
    /// 本接口(DescribeAccountQuota)用于查询用户配额详情。
    @inlinable
    public func describeAccountQuota(_ input: DescribeAccountQuotaRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccountQuotaResponse {
        try await self.client.execute(action: "DescribeAccountQuota", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询用户配额详情
    ///
    /// 本接口(DescribeAccountQuota)用于查询用户配额详情。
    @inlinable
    public func describeAccountQuota(filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccountQuotaResponse> {
        self.describeAccountQuota(.init(filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户配额详情
    ///
    /// 本接口(DescribeAccountQuota)用于查询用户配额详情。
    @inlinable
    public func describeAccountQuota(filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccountQuotaResponse {
        try await self.describeAccountQuota(.init(filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
