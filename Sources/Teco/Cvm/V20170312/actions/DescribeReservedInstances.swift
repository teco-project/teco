//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Cvm {
    /// DescribeReservedInstances请求参数结构体
    public struct DescribeReservedInstancesRequest: TCPaginatedRequest {
        /// 试运行。默认为 false。
        public let dryRun: Bool?

        /// 偏移量，默认为0。关于`Offset`的更进一步介绍请参考 API [简介](https://cloud.tencent.com/document/api/213/15688)中的相关小节。
        public let offset: Int64?

        /// 返回数量，默认为20，最大值为100。关于`Limit`的更进一步介绍请参考 API [简介](https://cloud.tencent.com/document/api/213/15688)中的相关小节。
        public let limit: Int64?

        /// - **zone**
        /// <p style="padding-left: 30px;">按照预留实例计费可购买的【**可用区**】进行过滤。形如：ap-guangzhou-1。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：[可用区列表](https://cloud.tencent.com/document/product/213/6091)</p>
        /// - **duration**
        /// <p style="padding-left: 30px;">按照预留实例计费【**有效期**】即预留实例计费购买时长进行过滤。形如：31536000。</p><p style="padding-left: 30px;">类型：Integer</p><p style="padding-left: 30px;">计量单位：秒</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：31536000 (1年) | 94608000（3年）</p>
        /// - **instance-type**
        /// <p style="padding-left: 30px;">按照【**预留实例规格**】进行过滤。形如：S3.MEDIUM4。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：[预留实例规格列表](https://cloud.tencent.com/document/product/213/11518)</p>
        /// - **instance-family**
        /// <p style="padding-left: 30px;">按照【**预留实例类型**】进行过滤。形如：S3。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：[预留实例类型列表](https://cloud.tencent.com/document/product/213/11518)</p>
        /// - **offering-type**
        /// - **offering-type**
        /// <p style="padding-left: 30px;">按照【**付款类型**】进行过滤。形如：All Upfront (全预付)。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：All Upfront (全预付) | Partial Upfront (部分预付) | No Upfront (零预付)</p>
        /// - **product-description**
        /// <p style="padding-left: 30px;">按照预留实例计费的【**平台描述**】（即操作系统）进行过滤。形如：linux。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：linux</p>
        /// - **reserved-instances-id**
        /// <p style="padding-left: 30px;">按照已购买【**预留实例计费ID**】进行过滤。形如：650c138f-ae7e-4750-952a-96841d6e9fc1。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p>
        /// - **state**
        /// <p style="padding-left: 30px;">按照已购买【**预留实例计费状态**】进行过滤。形如：active。</p><p style="padding-left: 30px;">类型：String</p><p style="padding-left: 30px;">必选：否</p><p style="padding-left: 30px;">可选项：active (已创建) | pending (等待被创建) | retired (过期)</p>
        /// 每次请求的`Filters`的上限为10，`Filter.Values`的上限为5。
        public let filters: [Filter]?

        public init(dryRun: Bool? = nil, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil) {
            self.dryRun = dryRun
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeReservedInstancesResponse) -> DescribeReservedInstancesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeReservedInstancesRequest(dryRun: self.dryRun, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeReservedInstances返回参数结构体
    public struct DescribeReservedInstancesResponse: TCPaginatedResponse {
        /// 符合条件的预留实例计费数量。
        public let totalCount: Int64

        /// 符合条件的预留实例计费列表。
        public let reservedInstancesSet: [ReservedInstances]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case reservedInstancesSet = "ReservedInstancesSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ReservedInstances`` list from the paginated response.
        public func getItems() -> [ReservedInstances] {
            self.reservedInstancesSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 列出已购买的预留实例
    ///
    /// 本接口(DescribeReservedInstances)可提供列出用户已购买的预留实例
    @inlinable
    public func describeReservedInstances(_ input: DescribeReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeReservedInstancesResponse> {
        self.client.execute(action: "DescribeReservedInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 列出已购买的预留实例
    ///
    /// 本接口(DescribeReservedInstances)可提供列出用户已购买的预留实例
    @inlinable
    public func describeReservedInstances(_ input: DescribeReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeReservedInstancesResponse {
        try await self.client.execute(action: "DescribeReservedInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 列出已购买的预留实例
    ///
    /// 本接口(DescribeReservedInstances)可提供列出用户已购买的预留实例
    @inlinable
    public func describeReservedInstances(dryRun: Bool? = nil, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeReservedInstancesResponse> {
        self.describeReservedInstances(.init(dryRun: dryRun, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 列出已购买的预留实例
    ///
    /// 本接口(DescribeReservedInstances)可提供列出用户已购买的预留实例
    @inlinable
    public func describeReservedInstances(dryRun: Bool? = nil, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeReservedInstancesResponse {
        try await self.describeReservedInstances(.init(dryRun: dryRun, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 列出已购买的预留实例
    ///
    /// 本接口(DescribeReservedInstances)可提供列出用户已购买的预留实例
    @inlinable
    public func describeReservedInstancesPaginated(_ input: DescribeReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [ReservedInstances])> {
        self.client.paginate(input: input, region: region, command: self.describeReservedInstances, logger: logger, on: eventLoop)
    }

    /// 列出已购买的预留实例
    ///
    /// 本接口(DescribeReservedInstances)可提供列出用户已购买的预留实例
    @inlinable @discardableResult
    public func describeReservedInstancesPaginated(_ input: DescribeReservedInstancesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeReservedInstancesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeReservedInstances, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 列出已购买的预留实例
    ///
    /// 本接口(DescribeReservedInstances)可提供列出用户已购买的预留实例
    ///
    /// - Returns: `AsyncSequence`s of ``ReservedInstances`` and ``DescribeReservedInstancesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeReservedInstancesPaginator(_ input: DescribeReservedInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeReservedInstancesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeReservedInstances, logger: logger, on: eventLoop)
    }
}
