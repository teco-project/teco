//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cvm {
    /// ExportImages请求参数结构体
    public struct ExportImagesRequest: TCRequestModel {
        /// COS存储桶名称
        public let bucketName: String

        /// 镜像ID列表
        public let imageIds: [String]?

        /// 镜像文件导出格式。取值范围：RAW，QCOW2，VHD，VMDK。默认为RAW
        public let exportFormat: String?

        /// 导出文件的名称前缀列表
        public let fileNamePrefixList: [String]?

        /// 是否只导出系统盘
        public let onlyExportRootDisk: Bool?

        /// 检测镜像是否支持导出
        public let dryRun: Bool?

        /// 角色名称。默认为CVM_QcsRole，发起请求前请确认是否存在该角色，以及是否已正确配置COS写入权限。
        public let roleName: String?

        public init(bucketName: String, imageIds: [String]? = nil, exportFormat: String? = nil, fileNamePrefixList: [String]? = nil, onlyExportRootDisk: Bool? = nil, dryRun: Bool? = nil, roleName: String? = nil) {
            self.bucketName = bucketName
            self.imageIds = imageIds
            self.exportFormat = exportFormat
            self.fileNamePrefixList = fileNamePrefixList
            self.onlyExportRootDisk = onlyExportRootDisk
            self.dryRun = dryRun
            self.roleName = roleName
        }

        enum CodingKeys: String, CodingKey {
            case bucketName = "BucketName"
            case imageIds = "ImageIds"
            case exportFormat = "ExportFormat"
            case fileNamePrefixList = "FileNamePrefixList"
            case onlyExportRootDisk = "OnlyExportRootDisk"
            case dryRun = "DryRun"
            case roleName = "RoleName"
        }
    }

    /// ExportImages返回参数结构体
    public struct ExportImagesResponse: TCResponseModel {
        /// 导出镜像任务ID
        public let taskId: UInt64

        /// 导出镜像的COS文件名列表
        public let cosPaths: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case cosPaths = "CosPaths"
            case requestId = "RequestId"
        }
    }

    /// 导出自定义镜像
    ///
    /// 提供导出自定义镜像到指定COS存储桶的能力
    @inlinable
    public func exportImages(_ input: ExportImagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportImagesResponse> {
        self.client.execute(action: "ExportImages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导出自定义镜像
    ///
    /// 提供导出自定义镜像到指定COS存储桶的能力
    @inlinable
    public func exportImages(_ input: ExportImagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportImagesResponse {
        try await self.client.execute(action: "ExportImages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导出自定义镜像
    ///
    /// 提供导出自定义镜像到指定COS存储桶的能力
    @inlinable
    public func exportImages(bucketName: String, imageIds: [String]? = nil, exportFormat: String? = nil, fileNamePrefixList: [String]? = nil, onlyExportRootDisk: Bool? = nil, dryRun: Bool? = nil, roleName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportImagesResponse> {
        self.exportImages(.init(bucketName: bucketName, imageIds: imageIds, exportFormat: exportFormat, fileNamePrefixList: fileNamePrefixList, onlyExportRootDisk: onlyExportRootDisk, dryRun: dryRun, roleName: roleName), region: region, logger: logger, on: eventLoop)
    }

    /// 导出自定义镜像
    ///
    /// 提供导出自定义镜像到指定COS存储桶的能力
    @inlinable
    public func exportImages(bucketName: String, imageIds: [String]? = nil, exportFormat: String? = nil, fileNamePrefixList: [String]? = nil, onlyExportRootDisk: Bool? = nil, dryRun: Bool? = nil, roleName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportImagesResponse {
        try await self.exportImages(.init(bucketName: bucketName, imageIds: imageIds, exportFormat: exportFormat, fileNamePrefixList: fileNamePrefixList, onlyExportRootDisk: onlyExportRootDisk, dryRun: dryRun, roleName: roleName), region: region, logger: logger, on: eventLoop)
    }
}
