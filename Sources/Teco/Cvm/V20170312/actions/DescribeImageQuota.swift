//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cvm {
    /// DescribeImageQuota请求参数结构体
    public struct DescribeImageQuotaRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeImageQuota返回参数结构体
    public struct DescribeImageQuotaResponse: TCResponseModel {
        /// 账户的镜像配额
        public let imageNumQuota: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case imageNumQuota = "ImageNumQuota"
            case requestId = "RequestId"
        }
    }

    /// 查询镜像配额上限
    ///
    /// 本接口(DescribeImageQuota)用于查询用户帐号的镜像配额。
    @inlinable
    public func describeImageQuota(_ input: DescribeImageQuotaRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageQuotaResponse> {
        self.client.execute(action: "DescribeImageQuota", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询镜像配额上限
    ///
    /// 本接口(DescribeImageQuota)用于查询用户帐号的镜像配额。
    @inlinable
    public func describeImageQuota(_ input: DescribeImageQuotaRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageQuotaResponse {
        try await self.client.execute(action: "DescribeImageQuota", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询镜像配额上限
    ///
    /// 本接口(DescribeImageQuota)用于查询用户帐号的镜像配额。
    @inlinable
    public func describeImageQuota(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageQuotaResponse> {
        let input = DescribeImageQuotaRequest()
        return self.client.execute(action: "DescribeImageQuota", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询镜像配额上限
    ///
    /// 本接口(DescribeImageQuota)用于查询用户帐号的镜像配额。
    @inlinable
    public func describeImageQuota(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageQuotaResponse {
        let input = DescribeImageQuotaRequest()
        return try await self.client.execute(action: "DescribeImageQuota", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
