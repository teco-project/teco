//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cvm {
    /// DeleteHpcClusters请求参数结构体
    public struct DeleteHpcClustersRequest: TCRequestModel {
        /// 高性能计算集群ID列表。
        public let hpcClusterIds: [String]
        
        public init (hpcClusterIds: [String]) {
            self.hpcClusterIds = hpcClusterIds
        }
        
        enum CodingKeys: String, CodingKey {
            case hpcClusterIds = "HpcClusterIds"
        }
    }
    
    /// DeleteHpcClusters返回参数结构体
    public struct DeleteHpcClustersResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 删除高性能计算集群
    ///
    /// 当高性能计算集群为空, 即集群内没有任何设备时候, 可以删除该集群。
    @inlinable
    public func deleteHpcClusters(_ input: DeleteHpcClustersRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteHpcClustersResponse > {
        self.client.execute(action: "DeleteHpcClusters", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除高性能计算集群
    ///
    /// 当高性能计算集群为空, 即集群内没有任何设备时候, 可以删除该集群。
    @inlinable
    public func deleteHpcClusters(_ input: DeleteHpcClustersRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteHpcClustersResponse {
        try await self.client.execute(action: "DeleteHpcClusters", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
