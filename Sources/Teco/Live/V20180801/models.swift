//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Live {
    /// 带宽信息
    public struct BandwidthInfo: TCOutputModel {
        /// 返回格式：
        /// yyyy-mm-dd HH:MM:SS
        /// 根据粒度会有不同程度的缩减。
        public let time: String
        
        /// 带宽。
        public let bandwidth: Float
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case bandwidth = "Bandwidth"
        }
    }
    
    /// 批量操作域名相关接口，若其中个别域名操作失败将会跳过，相应的域名错误信息将统一汇总在此类型中
    public struct BatchDomainOperateErrors: TCOutputModel {
        /// 操作失败的域名。
        public let domainName: String
        
        /// API3.0错误码。
        public let code: String
        
        /// API3.0错误信息。
        public let message: String
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case code = "Code"
            case message = "Message"
        }
    }
    
    /// 海外分区直播带宽出参，分区信息
    public struct BillAreaInfo: TCOutputModel {
        /// 大区名称。
        public let name: String
        
        /// 国家或地区明细数据。
        public let countrys: [BillCountryInfo]
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case countrys = "Countrys"
        }
    }
    
    /// 海外分区直播带宽出参国家带宽信息
    public struct BillCountryInfo: TCOutputModel {
        /// 国家名称
        public let name: String
        
        /// 带宽明细数据信息。
        public let bandInfoList: [BillDataInfo]
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case bandInfoList = "BandInfoList"
        }
    }
    
    /// 带宽和流量信息。
    public struct BillDataInfo: TCOutputModel {
        /// 时间点，格式: yyyy-mm-dd HH:MM:SS。
        public let time: String
        
        /// 带宽，单位是 Mbps。
        public let bandwidth: Float
        
        /// 流量，单位是 MB。
        public let flux: Float
        
        /// 峰值时间点，格式: yyyy-mm-dd HH:MM:SS，原始数据为5分钟粒度，如果查询小时和天粒度数据，则返回对应粒度内的带宽峰值时间点。
        public let peakTime: String
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case bandwidth = "Bandwidth"
            case flux = "Flux"
            case peakTime = "PeakTime"
        }
    }
    
    /// 规则信息
    public struct CallBackRuleInfo: TCOutputModel {
        /// 规则创建时间。
        public let createTime: String
        
        /// 规则更新时间。
        public let updateTime: String
        
        /// 模板 ID。
        public let templateId: Int64
        
        /// 推流域名。
        public let domainName: String
        
        /// 推流路径。
        public let appName: String
        
        enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case templateId = "TemplateId"
            case domainName = "DomainName"
            case appName = "AppName"
        }
    }
    
    /// 回调模板信息。
    public struct CallBackTemplateInfo: TCOutputModel {
        /// 模板 ID。
        public let templateId: Int64
        
        /// 模板名称。
        public let templateName: String
        
        /// 描述信息。
        public let description: String
        
        /// 开播回调 URL。
        public let streamBeginNotifyUrl: String
        
        /// 混流回调 URL。(参数已弃用)。
        public let streamMixNotifyUrl: String
        
        /// 断流回调 URL。
        public let streamEndNotifyUrl: String
        
        /// 录制回调 URL。
        public let recordNotifyUrl: String
        
        /// 截图回调 URL。
        public let snapshotNotifyUrl: String
        
        /// 鉴黄回调 URL。
        public let pornCensorshipNotifyUrl: String
        
        /// 回调的鉴权 key。
        public let callbackKey: String
        
        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case description = "Description"
            case streamBeginNotifyUrl = "StreamBeginNotifyUrl"
            case streamMixNotifyUrl = "StreamMixNotifyUrl"
            case streamEndNotifyUrl = "StreamEndNotifyUrl"
            case recordNotifyUrl = "RecordNotifyUrl"
            case snapshotNotifyUrl = "SnapshotNotifyUrl"
            case pornCensorshipNotifyUrl = "PornCensorshipNotifyUrl"
            case callbackKey = "CallbackKey"
        }
    }
    
    /// 回调事件信息
    public struct CallbackEventInfo: TCOutputModel {
        /// 事件时间
        public let eventTime: String
        
        /// 事件类型
        public let eventType: UInt64
        
        /// 回调请求
        public let request: String
        
        /// 回调响应
        public let response: String
        
        /// 客户接口响应时间
        public let responseTime: String
        
        /// 回调结果
        public let resultCode: UInt64
        
        /// 流名称
        public let streamId: String
        
        enum CodingKeys: String, CodingKey {
            case eventTime = "EventTime"
            case eventType = "EventType"
            case request = "Request"
            case response = "Response"
            case responseTime = "ResponseTime"
            case resultCode = "ResultCode"
            case streamId = "StreamId"
        }
    }
    
    /// 下行播放统计指标
    public struct CdnPlayStatData: TCOutputModel {
        /// 时间点，格式: yyyy-mm-dd HH:MM:SS。
        public let time: String
        
        /// 带宽，单位: Mbps。
        public let bandwidth: Float
        
        /// 流量，单位: MB。
        public let flux: Float
        
        /// 新增请求数。
        public let request: UInt64
        
        /// 并发连接数。
        public let online: UInt64
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case bandwidth = "Bandwidth"
            case flux = "Flux"
            case request = "Request"
            case online = "Online"
        }
    }
    
    /// 证书信息。
    public struct CertInfo: TCOutputModel {
        /// 证书 ID。
        public let certId: Int64
        
        /// 证书名称。
        public let certName: String
        
        /// 描述信息。
        public let description: String
        
        /// 创建时间，UTC 格式。
        public let createTime: String
        
        /// 证书内容。
        public let httpsCrt: String
        
        /// 证书类型。
        /// 0：用户添加证书，
        /// 1：腾讯云托管证书。
        public let certType: Int64
        
        /// 证书过期时间，UTC 格式。
        public let certExpireTime: String
        
        /// 使用此证书的域名列表。
        public let domainList: [String]
        
        enum CodingKeys: String, CodingKey {
            case certId = "CertId"
            case certName = "CertName"
            case description = "Description"
            case createTime = "CreateTime"
            case httpsCrt = "HttpsCrt"
            case certType = "CertType"
            case certExpireTime = "CertExpireTime"
            case domainList = "DomainList"
        }
    }
    
    /// 客户端ip播放汇总信息。
    public struct ClientIpPlaySumInfo: TCOutputModel {
        /// 客户端 IP，点分型。
        public let clientIp: String
        
        /// 客户端所在省份。
        public let province: String
        
        /// 总流量。
        public let totalFlux: Float
        
        /// 总请求数。
        public let totalRequest: UInt64
        
        /// 总失败请求数。
        public let totalFailedRequest: UInt64
        
        /// 客户端所在国家。
        public let countryArea: String
        
        enum CodingKeys: String, CodingKey {
            case clientIp = "ClientIp"
            case province = "Province"
            case totalFlux = "TotalFlux"
            case totalRequest = "TotalRequest"
            case totalFailedRequest = "TotalFailedRequest"
            case countryArea = "CountryArea"
        }
    }
    
    /// 通用混流控制参数
    public struct CommonMixControlParams: TCInputModel {
        /// 取值范围[0,1]。
        /// 填1时，当参数中图层分辨率参数与视频实际分辨率不一致时，自动从视频中按图层设置的分辨率比例进行裁剪。
        public let useMixCropCenter: Int64?
        
        /// 取值范围[0,1]
        /// 填1时，当InputStreamList中个数为1时，且OutputParams.OutputStreamType为1时，不执行取消操作，执行拷贝流操作
        public let allowCopy: Int64?
        
        /// 取值范围[0,1]
        /// 填1时，透传原始流的sei
        public let passInputSei: Int64?
        
        public init (useMixCropCenter: Int64?, allowCopy: Int64?, passInputSei: Int64?) {
            self.useMixCropCenter = useMixCropCenter
            self.allowCopy = allowCopy
            self.passInputSei = passInputSei
        }
        
        enum CodingKeys: String, CodingKey {
            case useMixCropCenter = "UseMixCropCenter"
            case allowCopy = "AllowCopy"
            case passInputSei = "PassInputSei"
        }
    }
    
    /// 通用混流输入裁剪参数。
    public struct CommonMixCropParams: TCInputModel {
        /// 裁剪的宽度。取值范围[0，2000]。
        public let cropWidth: Float?
        
        /// 裁剪的高度。取值范围[0，2000]。
        public let cropHeight: Float?
        
        /// 裁剪的起始X坐标。取值范围[0，2000]。
        public let cropStartLocationX: Float?
        
        /// 裁剪的起始Y坐标。取值范围[0，2000]。
        public let cropStartLocationY: Float?
        
        public init (cropWidth: Float?, cropHeight: Float?, cropStartLocationX: Float?, cropStartLocationY: Float?) {
            self.cropWidth = cropWidth
            self.cropHeight = cropHeight
            self.cropStartLocationX = cropStartLocationX
            self.cropStartLocationY = cropStartLocationY
        }
        
        enum CodingKeys: String, CodingKey {
            case cropWidth = "CropWidth"
            case cropHeight = "CropHeight"
            case cropStartLocationX = "CropStartLocationX"
            case cropStartLocationY = "CropStartLocationY"
        }
    }
    
    /// 通用混流输入参数。
    public struct CommonMixInputParam: TCInputModel {
        /// 输入流名称。80字节以内，仅含字母、数字以及下划线的字符串。
        /// 当LayoutParams.InputType=0(音视频)/4(纯音频)/5(纯视频)时，该值为需要混流的流名称。
        /// 当LayoutParams.InputType=2(图片)/3(画布)时，该值仅用作标识输入，可用类似Canvas1、Pictrue1的名称。
        public let inputStreamName: String
        
        /// 输入流布局参数。
        public let layoutParams: CommonMixLayoutParams
        
        /// 输入流裁剪参数。
        public let cropParams: CommonMixCropParams
        
        public init (inputStreamName: String, layoutParams: CommonMixLayoutParams, cropParams: CommonMixCropParams) {
            self.inputStreamName = inputStreamName
            self.layoutParams = layoutParams
            self.cropParams = cropParams
        }
        
        enum CodingKeys: String, CodingKey {
            case inputStreamName = "InputStreamName"
            case layoutParams = "LayoutParams"
            case cropParams = "CropParams"
        }
    }
    
    /// 通用混流布局参数。
    public struct CommonMixLayoutParams: TCInputModel {
        /// 输入图层。取值范围[1，16]。
        /// 1)背景流（即大主播画面或画布）的 image_layer 填1。
        /// 2)纯音频混流，该参数也需填。
        /// 注意：不同输入，该值不可重复
        public let imageLayer: Int64
        
        /// 输入类型。取值范围[0，5]。
        /// 不填默认为0。
        /// 0表示输入流为音视频。
        /// 2表示输入流为图片。
        /// 3表示输入流为画布。 
        /// 4表示输入流为音频。
        /// 5表示输入流为纯视频。
        public let inputType: Int64?
        
        /// 输入画面在输出时的高度。取值范围：
        /// 像素：[0，2000]
        /// 百分比：[0.01，0.99]
        /// 不填默认为输入流的高度。
        /// 使用百分比时，期望输出为（百分比 * 背景高）。
        public let imageHeight: Float?
        
        /// 输入画面在输出时的宽度。取值范围：
        /// 像素：[0，2000]
        /// 百分比：[0.01，0.99]
        /// 不填默认为输入流的宽度。
        /// 使用百分比时，期望输出为（百分比 * 背景宽）。
        public let imageWidth: Float?
        
        /// 输入在输出画面的X偏移。取值范围：
        /// 像素：[0，2000]
        /// 百分比：[0.01，0.99]
        /// 不填默认为0。
        /// 相对于大主播背景画面左上角的横向偏移。 
        /// 使用百分比时，期望输出为（百分比 * 背景宽）。
        public let locationX: Float?
        
        /// 输入在输出画面的Y偏移。取值范围：
        /// 像素：[0，2000]
        /// 百分比：[0.01，0.99]
        /// 不填默认为0。
        /// 相对于大主播背景画面左上角的纵向偏移。 
        /// 使用百分比时，期望输出为（百分比 * 背景宽）
        public let locationY: Float?
        
        /// 当InputType为3(画布)时，该值表示画布的颜色。
        /// 常用的颜色有：
        /// 红色：0xcc0033。
        /// 黄色：0xcc9900。
        /// 绿色：0xcccc33。
        /// 蓝色：0x99CCFF。
        /// 黑色：0x000000。
        /// 白色：0xFFFFFF。
        /// 灰色：0x999999。
        public let color: String?
        
        /// 当InputType为2(图片)时，该值是水印ID。
        public let watermarkId: Int64?
        
        public init (imageLayer: Int64, inputType: Int64?, imageHeight: Float?, imageWidth: Float?, locationX: Float?, locationY: Float?, color: String?, watermarkId: Int64?) {
            self.imageLayer = imageLayer
            self.inputType = inputType
            self.imageHeight = imageHeight
            self.imageWidth = imageWidth
            self.locationX = locationX
            self.locationY = locationY
            self.color = color
            self.watermarkId = watermarkId
        }
        
        enum CodingKeys: String, CodingKey {
            case imageLayer = "ImageLayer"
            case inputType = "InputType"
            case imageHeight = "ImageHeight"
            case imageWidth = "ImageWidth"
            case locationX = "LocationX"
            case locationY = "LocationY"
            case color = "Color"
            case watermarkId = "WatermarkId"
        }
    }
    
    /// 通用混流输出参数。
    public struct CommonMixOutputParams: TCInputModel {
        /// 输出流名称。
        public let outputStreamName: String
        
        /// 输出流类型，取值范围[0,1]。
        /// 不填默认为0。
        /// 当输出流为输入流 list 中的一条时，填写0。
        /// 当期望生成的混流结果成为一条新流时，该值填为1。
        /// 该值为1时，output_stream_id 不能出现在 input_stram_list 中，且直播后台中，不能存在相同 ID 的流。
        public let outputStreamType: Int64?
        
        /// 输出流比特率。取值范围[1，50000]。
        /// 不填的情况下，系统会自动判断。
        public let outputStreamBitRate: Int64?
        
        /// 输出流GOP大小。取值范围[1,10]。
        /// 不填的情况下，系统会自动判断。
        public let outputStreamGop: Int64?
        
        /// 输出流帧率大小。取值范围[1,60]。
        /// 不填的情况下，系统会自动判断。
        public let outputStreamFrameRate: Int64?
        
        /// 输出流音频比特率。取值范围[1,500]
        /// 不填的情况下，系统会自动判断。
        public let outputAudioBitRate: Int64?
        
        /// 输出流音频采样率。取值范围[96000, 88200, 64000, 48000, 44100, 32000,24000, 22050, 16000, 12000, 11025, 8000]。
        /// 不填的情况下，系统会自动判断。
        public let outputAudioSampleRate: Int64?
        
        /// 输出流音频声道数。取值范围[1,2]。
        /// 不填的情况下，系统会自动判断。
        public let outputAudioChannels: Int64?
        
        /// 输出流中的sei信息。如果无特殊需要，不填。
        public let mixSei: String?
        
        public init (outputStreamName: String, outputStreamType: Int64?, outputStreamBitRate: Int64?, outputStreamGop: Int64?, outputStreamFrameRate: Int64?, outputAudioBitRate: Int64?, outputAudioSampleRate: Int64?, outputAudioChannels: Int64?, mixSei: String?) {
            self.outputStreamName = outputStreamName
            self.outputStreamType = outputStreamType
            self.outputStreamBitRate = outputStreamBitRate
            self.outputStreamGop = outputStreamGop
            self.outputStreamFrameRate = outputStreamFrameRate
            self.outputAudioBitRate = outputAudioBitRate
            self.outputAudioSampleRate = outputAudioSampleRate
            self.outputAudioChannels = outputAudioChannels
            self.mixSei = mixSei
        }
        
        enum CodingKeys: String, CodingKey {
            case outputStreamName = "OutputStreamName"
            case outputStreamType = "OutputStreamType"
            case outputStreamBitRate = "OutputStreamBitRate"
            case outputStreamGop = "OutputStreamGop"
            case outputStreamFrameRate = "OutputStreamFrameRate"
            case outputAudioBitRate = "OutputAudioBitRate"
            case outputAudioSampleRate = "OutputAudioSampleRate"
            case outputAudioChannels = "OutputAudioChannels"
            case mixSei = "MixSei"
        }
    }
    
    /// 并发录制路数
    public struct ConcurrentRecordStreamNum: TCOutputModel {
        /// 时间点。
        public let time: String
        
        /// 路数。
        public let num: UInt64
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case num = "Num"
        }
    }
    
    /// 流播放信息
    public struct DayStreamPlayInfo: TCOutputModel {
        /// 数据时间点，格式：yyyy-mm-dd HH:MM:SS。
        public let time: String
        
        /// 带宽（单位Mbps）。
        public let bandwidth: Float
        
        /// 流量 （单位MB）。
        public let flux: Float
        
        /// 请求数。
        public let request: UInt64
        
        /// 在线人数。
        public let online: UInt64
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case bandwidth = "Bandwidth"
            case flux = "Flux"
            case request = "Request"
            case online = "Online"
        }
    }
    
    /// 延播信息。
    public struct DelayInfo: TCOutputModel {
        /// 推流域名。
        public let domainName: String
        
        /// 推流路径，与推流和播放地址中的 
        ///  AppName 保持一致，默认为 live。
        public let appName: String
        
        /// 流名称。
        public let streamName: String
        
        /// 延播时间，单位：秒。
        public let delayInterval: UInt64
        
        /// 创建时间，UTC 时间。
        /// 注意：UTC时间和北京时间相差8小时。
        /// 例如：2019-06-18T12:00:00Z（为北京时间 2019 年 6 月 18 日 20 点 0 分 0 秒）。
        public let createTime: String
        
        /// 过期时间，UTC 时间。
        /// 注意：UTC时间和北京时间相差8小时。
        /// 例如：2019-06-18T12:00:00Z（为北京时间 2019 年 6 月 18 日 20 点 0 分 0 秒）。
        public let expireTime: String
        
        /// 当前状态:
        /// -1：已过期。
        /// 1： 生效中。
        public let status: Int64
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
            case delayInterval = "DelayInterval"
            case createTime = "CreateTime"
            case expireTime = "ExpireTime"
            case status = "Status"
        }
    }
    
    /// 域名证书信息
    public struct DomainCertInfo: TCOutputModel {
        /// 证书Id。
        public let certId: Int64
        
        /// 证书名称。
        public let certName: String
        
        /// 描述信息。
        public let description: String
        
        /// 创建时间，UTC格式。
        public let createTime: String
        
        /// 证书内容。
        public let httpsCrt: String
        
        /// 证书类型。
        /// 0：用户添加证书，
        /// 1：腾讯云托管证书。
        public let certType: Int64
        
        /// 证书过期时间，UTC格式。
        public let certExpireTime: String
        
        /// 使用此证书的域名名称。
        public let domainName: String
        
        /// 证书状态。
        public let status: Int64
        
        /// 证书本身标识的域名列表。
        /// 比如: ["*.x.com"]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certDomains: [String]?
        
        /// 腾讯云ssl的证书Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cloudCertId: String?
        
        enum CodingKeys: String, CodingKey {
            case certId = "CertId"
            case certName = "CertName"
            case description = "Description"
            case createTime = "CreateTime"
            case httpsCrt = "HttpsCrt"
            case certType = "CertType"
            case certExpireTime = "CertExpireTime"
            case domainName = "DomainName"
            case status = "Status"
            case certDomains = "CertDomains"
            case cloudCertId = "CloudCertId"
        }
    }
    
    /// 每个域名的统计信息。
    public struct DomainDetailInfo: TCOutputModel {
        /// 国内还是国外:
        /// Mainland: 表示国内数据。
        /// Oversea: 表示国外数据。
        public let mainlandOrOversea: String
        
        /// 带宽，单位: Mbps。
        public let bandwidth: Float
        
        /// 流量，单位: MB。
        public let flux: Float
        
        /// 人数。
        public let online: UInt64
        
        /// 请求数。
        public let request: UInt64
        
        enum CodingKeys: String, CodingKey {
            case mainlandOrOversea = "MainlandOrOversea"
            case bandwidth = "Bandwidth"
            case flux = "Flux"
            case online = "Online"
            case request = "Request"
        }
    }
    
    /// 直播域名信息
    public struct DomainInfo: TCOutputModel {
        /// 直播域名。
        public let name: String
        
        /// 域名类型:
        /// 0: 推流。
        /// 1: 播放。
        public let type: UInt64
        
        /// 域名状态:
        /// 0: 停用。
        /// 1: 启用。
        public let status: UInt64
        
        /// 添加时间。
        public let createTime: String
        
        /// 是否有 CName 到固定规则域名:
        /// 0: 否。
        /// 1: 是。
        public let bcName: UInt64
        
        /// cname 对应的域名。
        public let targetDomain: String
        
        /// 播放区域，只在 Type=1 时该参数有意义。
        /// 1: 国内。
        /// 2: 全球。
        /// 3: 海外。
        public let playType: Int64
        
        /// 是否慢直播:
        /// 0: 普通直播。
        /// 1: 慢直播。
        public let isDelayLive: Int64
        
        /// 当前客户使用的 cname 信息。
        public let currentCName: String
        
        /// 失效参数，可忽略。
        public let rentTag: Int64
        
        /// 失效参数，可忽略。
        public let rentExpireTime: String
        
        /// 0: 标准直播。
        /// 1: 小程序直播。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isMiniProgramLive: Int64?
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case status = "Status"
            case createTime = "CreateTime"
            case bcName = "BCName"
            case targetDomain = "TargetDomain"
            case playType = "PlayType"
            case isDelayLive = "IsDelayLive"
            case currentCName = "CurrentCName"
            case rentTag = "RentTag"
            case rentExpireTime = "RentExpireTime"
            case isMiniProgramLive = "IsMiniProgramLive"
        }
    }
    
    /// 多个域名信息列表
    public struct DomainInfoList: TCOutputModel {
        /// 域名。
        public let domain: String
        
        /// 明细信息。
        public let detailInfoList: [DomainDetailInfo]
        
        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case detailInfoList = "DetailInfoList"
        }
    }
    
    /// flv格式特殊配置
    public struct FlvSpecialParam: TCInputModel, TCOutputModel {
        /// 是否开启边录边传，仅flv格式有效。
        public let uploadInRecording: Bool?
        
        public init (uploadInRecording: Bool?) {
            self.uploadInRecording = uploadInRecording
        }
        
        enum CodingKeys: String, CodingKey {
            case uploadInRecording = "UploadInRecording"
        }
    }
    
    /// 禁推流列表
    public struct ForbidStreamInfo: TCOutputModel {
        /// 流名称。
        public let streamName: String
        
        /// 创建时间。
        public let createTime: String
        
        /// 禁推过期时间。
        public let expireTime: String
        
        /// 推流路径。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appName: String?
        
        /// 推流域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domainName: String?
        
        enum CodingKeys: String, CodingKey {
            case streamName = "StreamName"
            case createTime = "CreateTime"
            case expireTime = "ExpireTime"
            case appName = "AppName"
            case domainName = "DomainName"
        }
    }
    
    /// 某省份某运营商在某段时间内的带宽，流量，请求数和并发数
    public struct GroupProIspDataInfo: TCOutputModel {
        /// 省份。
        public let provinceName: String
        
        /// 运营商。
        public let ispName: String
        
        /// 分钟维度的明细数据。
        public let detailInfoList: [CdnPlayStatData]
        
        enum CodingKeys: String, CodingKey {
            case provinceName = "ProvinceName"
            case ispName = "IspName"
            case detailInfoList = "DetailInfoList"
        }
    }
    
    /// HLS专属录制参数
    public struct HlsSpecialParam: TCInputModel {
        /// HLS续流超时时间。
        /// 取值范围[0，1800]。
        public let flowContinueDuration: UInt64?
        
        public init (flowContinueDuration: UInt64?) {
            self.flowContinueDuration = flowContinueDuration
        }
        
        enum CodingKeys: String, CodingKey {
            case flowContinueDuration = "FlowContinueDuration"
        }
    }
    
    /// HTTP返回码和统计数据
    public struct HttpCodeInfo: TCOutputModel {
        /// HTTP协议返回码。
        /// 例："2xx", "3xx", "4xx", "5xx"。
        public let httpCode: String
        
        /// 统计信息，对于无数据的时间点，会补0。
        public let valueList: [HttpCodeValue]
        
        enum CodingKeys: String, CodingKey {
            case httpCode = "HttpCode"
            case valueList = "ValueList"
        }
    }
    
    /// HTTP返回码数据信息
    public struct HttpCodeValue: TCOutputModel {
        /// 时间，格式：yyyy-mm-dd HH:MM:SS。
        public let time: String
        
        /// 次数。
        public let numbers: UInt64
        
        /// 占比。
        public let percentage: Float
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case numbers = "Numbers"
            case percentage = "Percentage"
        }
    }
    
    /// 播放错误码信息
    public struct HttpStatusData: TCOutputModel {
        /// 数据时间点，
        /// 格式：yyyy-mm-dd HH:MM:SS。
        public let time: String
        
        /// 播放状态码详细信息。
        public let httpStatusInfoList: [HttpStatusInfo]
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case httpStatusInfoList = "HttpStatusInfoList"
        }
    }
    
    /// 播放错误码信息
    public struct HttpStatusInfo: TCOutputModel {
        /// 播放HTTP状态码。
        public let httpStatus: String
        
        /// 个数。
        public let num: UInt64
        
        enum CodingKeys: String, CodingKey {
            case httpStatus = "HttpStatus"
            case num = "Num"
        }
    }
    
    /// 用作批量绑定域名和证书。
    public struct LiveCertDomainInfo: TCInputModel {
        /// 域名。
        public let domainName: String
        
        /// 是否启用域名的https规则。
        /// 1：启用
        /// 0：禁用
        /// -1：保持不变
        public let status: Int64
        
        public init (domainName: String, status: Int64) {
            self.domainName = domainName
            self.status = status
        }
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case status = "Status"
        }
    }
    
    /// DescribeLiveDomainCertBindings, DescribeLiveDomainCertBindingsGray接口返回的域名证书信息
    public struct LiveDomainCertBindings: TCOutputModel {
        /// 域名。
        public let domainName: String
        
        /// 证书备注。与CertName同义。
        public let certificateAlias: String
        
        /// 证书类型。
        /// 0：自有证书
        /// 1：腾讯云ssl托管证书
        public let certType: Int64
        
        /// https状态。
        /// 1：已开启。
        /// 0：已关闭。
        public let status: Int64
        
        /// 证书过期时间。
        // FIXME: Codable support not implemented for datetime yet.
        public let certExpireTime: Date
        
        /// 证书Id。
        public let certId: Int64
        
        /// 腾讯云ssl的证书Id。
        public let cloudCertId: String
        
        /// 规则最后更新时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Date?
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case certificateAlias = "CertificateAlias"
            case certType = "CertType"
            case status = "Status"
            case certExpireTime = "CertExpireTime"
            case certId = "CertId"
            case cloudCertId = "CloudCertId"
            case updateTime = "UpdateTime"
        }
    }
    
    /// 直播包信息。
    public struct LivePackageInfo: TCOutputModel {
        /// 包 ID。
        public let id: String
        
        /// 总量。
        /// 注意：当为流量包时单位为字节。
        /// 当为转码包时单位为分钟。
        public let total: Int64
        
        /// 使用量。
        /// 注意：当为流量包时单位为字节。
        /// 当为转码包时单位为分钟。
        /// 当为连麦包时单位为小时。
        public let used: Int64
        
        /// 剩余量。
        /// 注意：当为流量包时单位为字节。
        /// 当为转码包时单位为分钟。
        /// 当为连麦包时单位为小时。
        public let left: Int64
        
        /// 购买时间。
        public let buyTime: String
        
        /// 过期时间。
        public let expireTime: String
        
        /// 包类型，可选值:
        /// 0: 流量包。
        /// 1: 普通转码包。
        /// 2: 极速高清包。
        /// 3: 连麦包。
        public let type: Int64
        
        /// 包状态，可选值:
        /// 0: 未使用。
        /// 1: 使用中。
        /// 2: 已过期。
        /// 3: 已冻结。
        /// 4: 已耗尽。
        /// 5: 已退款
        public let status: Int64
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case total = "Total"
            case used = "Used"
            case left = "Left"
            case buyTime = "BuyTime"
            case expireTime = "ExpireTime"
            case type = "Type"
            case status = "Status"
        }
    }
    
    /// 日志url信息。
    public struct LogInfo: TCOutputModel {
        /// 日志名称。
        public let logName: String
        
        /// 日志 URL。
        public let logUrl: String
        
        /// 日志生成时间。
        public let logTime: String
        
        /// 文件大小。
        public let fileSize: Int64
        
        enum CodingKeys: String, CodingKey {
            case logName = "LogName"
            case logUrl = "LogUrl"
            case logTime = "LogTime"
            case fileSize = "FileSize"
        }
    }
    
    /// 监控播放数据
    public struct MonitorStreamPlayInfo: TCOutputModel {
        /// 播放域名。
        public let playDomain: String
        
        /// 流id。
        public let streamName: String
        
        /// 播放码率，0表示原始码率。
        public let rate: UInt64
        
        /// 播放协议，可选值包括 Unknown，Flv，Hls，Rtmp，Huyap2p。
        public let `protocol`: String
        
        /// 带宽，单位是Mbps。
        public let bandwidth: Float
        
        /// 在线人数，1分钟采样一个点，统计采样点的tcp链接数目。
        public let online: UInt64
        
        /// 请求数。
        public let request: UInt64
        
        enum CodingKeys: String, CodingKey {
            case playDomain = "PlayDomain"
            case streamName = "StreamName"
            case rate = "Rate"
            case `protocol` = "Protocol"
            case bandwidth = "Bandwidth"
            case online = "Online"
            case request = "Request"
        }
    }
    
    /// 播放鉴权key信息。
    public struct PlayAuthKeyInfo: TCOutputModel {
        /// 域名。
        public let domainName: String
        
        /// 是否启用:
        /// 0: 关闭。
        /// 1: 启用。
        public let enable: Int64
        
        /// 鉴权 Key。
        public let authKey: String
        
        /// 有效时间，单位：秒。
        public let authDelta: UInt64
        
        /// 鉴权 BackKey。
        public let authBackKey: String
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case enable = "Enable"
            case authKey = "AuthKey"
            case authDelta = "AuthDelta"
            case authBackKey = "AuthBackKey"
        }
    }
    
    /// 各状态码的总次数，支持大多数的 HTTP 协议返回码。
    public struct PlayCodeTotalInfo: TCOutputModel {
        /// HTTP code，可选值包括:
        /// 400，403，404，500，502，503，504。
        public let code: String
        
        /// 总次数。
        public let num: UInt64
        
        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case num = "Num"
        }
    }
    
    /// 流维度的播放信息。
    public struct PlayDataInfoByStream: TCOutputModel {
        /// 流名称。
        public let streamName: String
        
        /// 总流量，单位: MB。
        public let totalFlux: Float
        
        enum CodingKeys: String, CodingKey {
            case streamName = "StreamName"
            case totalFlux = "TotalFlux"
        }
    }
    
    /// 按省份运营商查询的播放信息。
    public struct PlayStatInfo: TCOutputModel {
        /// 数据时间点。
        public let time: String
        
        /// 带宽/流量/请求数/并发连接数/下载速度的值，若没数据返回时该值为0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: Float?
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case value = "Value"
        }
    }
    
    /// 播放汇总统计信息。
    public struct PlaySumStatInfo: TCOutputModel {
        /// 域名或流 ID。
        public let name: String
        
        /// 平均下载速度，
        /// 单位: MB/s。
        /// 计算公式: 每分钟的下载速度求平均值。
        public let avgFluxPerSecond: Float
        
        /// 总流量，单位: MB。
        public let totalFlux: Float
        
        /// 总请求数。
        public let totalRequest: UInt64
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case avgFluxPerSecond = "AvgFluxPerSecond"
            case totalFlux = "TotalFlux"
            case totalRequest = "TotalRequest"
        }
    }
    
    /// 播放错误码信息
    public struct ProIspPlayCodeDataInfo: TCOutputModel {
        /// 国家或地区。
        public let countryAreaName: String
        
        /// 省份。
        public let provinceName: String
        
        /// 运营商。
        public let ispName: String
        
        /// 错误码为2开头的次数。
        public let code2xx: UInt64
        
        /// 错误码为3开头的次数。
        public let code3xx: UInt64
        
        /// 错误码为4开头的次数。
        public let code4xx: UInt64
        
        /// 错误码为5开头的次数。
        public let code5xx: UInt64
        
        enum CodingKeys: String, CodingKey {
            case countryAreaName = "CountryAreaName"
            case provinceName = "ProvinceName"
            case ispName = "IspName"
            case code2xx = "Code2xx"
            case code3xx = "Code3xx"
            case code4xx = "Code4xx"
            case code5xx = "Code5xx"
        }
    }
    
    /// 获取省份/运营商的播放信息。
    public struct ProIspPlaySumInfo: TCOutputModel {
        /// 省份/运营商/国家或地区。
        public let name: String
        
        /// 总流量，单位: MB。
        public let totalFlux: Float
        
        /// 总请求数。
        public let totalRequest: UInt64
        
        /// 平均下载流量，单位: MB/s。
        public let avgFluxPerSecond: Float
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case totalFlux = "TotalFlux"
            case totalRequest = "TotalRequest"
            case avgFluxPerSecond = "AvgFluxPerSecond"
        }
    }
    
    /// 推流时间。
    public struct PublishTime: TCOutputModel {
        /// 推流时间。
        /// UTC 格式，例如：2018-06-29T19:00:00Z。
        public let publishTime: String
        
        enum CodingKeys: String, CodingKey {
            case publishTime = "PublishTime"
        }
    }
    
    /// 云转推水印信息。
    public struct PullPushWatermarkInfo: TCInputModel, TCOutputModel {
        /// 水印图片 URL。
        /// URL中禁止包含的字符：
        /// ;(){}$>`#"'|
        public let pictureUrl: String
        
        /// 显示位置，X轴偏移，单位是百分比，默认 0。
        public let xPosition: Int64
        
        /// 显示位置，Y轴偏移，单位是百分比，默认 0。
        public let yPosition: Int64
        
        /// 水印宽度，占直播原始画面宽度百分比，建议高宽只设置一项，另外一项会自适应缩放，避免变形。默认原始宽度。
        public let width: Int64
        
        /// 水印高度，占直播原始画面高度百分比，建议高宽只设置一项，另外一项会自适应缩放，避免变形。默认原始高度。
        public let height: Int64
        
        /// 水印位置，默认 0。
        /// 0：左上角。
        /// 1：右上角。
        /// 2：右下角。
        /// 3：左下角。
        public let location: Int64
        
        public init (pictureUrl: String, xPosition: Int64, yPosition: Int64, width: Int64, height: Int64, location: Int64) {
            self.pictureUrl = pictureUrl
            self.xPosition = xPosition
            self.yPosition = yPosition
            self.width = width
            self.height = height
            self.location = location
        }
        
        enum CodingKeys: String, CodingKey {
            case pictureUrl = "PictureUrl"
            case xPosition = "XPosition"
            case yPosition = "YPosition"
            case width = "Width"
            case height = "Height"
            case location = "Location"
        }
    }
    
    /// 拉流配置。
    public struct PullStreamConfig: TCOutputModel {
        /// 拉流配置 ID。
        public let configId: String
        
        /// 源 URL。
        public let fromUrl: String
        
        /// 目的 URL。
        public let toUrl: String
        
        /// 区域名。
        public let areaName: String
        
        /// 运营商名。
        public let ispName: String
        
        /// 开始时间。
        /// UTC格式时间，例如: 2019-01-08T10:00:00Z。
        /// 注意：北京时间值为 UTC 时间值 + 8 小时，格式按照 ISO 8601 标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let startTime: String
        
        /// 结束时间。
        /// UTC格式时间，例如：2019-01-08T10:00:00Z。
        /// 注意：北京时间值为 UTC 时间值 + 8 小时，格式按照 ISO 8601 标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let endTime: String
        
        /// 状态:
        /// 0: 无效。
        /// 1: 初始状态。
        /// 2: 正在运行。
        /// 3: 拉起失败。
        /// 4: 暂停。
        public let status: String
        
        enum CodingKeys: String, CodingKey {
            case configId = "ConfigId"
            case fromUrl = "FromUrl"
            case toUrl = "ToUrl"
            case areaName = "AreaName"
            case ispName = "IspName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case status = "Status"
        }
    }
    
    /// 直播拉流任务信息。
    public struct PullStreamTaskInfo: TCOutputModel {
        /// 拉流任务Id。
        public let taskId: String
        
        /// 拉流源的类型：
        /// PullLivePushLive -直播，
        /// PullVodPushLive -点播，
        /// PullPicPushLive -图片。
        public let sourceType: String
        
        /// 拉流源url列表。
        /// SourceType为直播（PullLiveToLive）只可以填1个，
        /// SourceType为点播（PullVodToLive）可以填多个，上限10个。
        public let sourceUrls: [String]
        
        /// 推流域名。
        /// 将拉到的源推到该域名。
        public let domainName: String
        
        /// 推流路径。
        /// 将拉到的源推到该路径。
        public let appName: String
        
        /// 流名称。
        /// 将拉到的源推到该流名称。
        public let streamName: String
        
        /// 推流参数。
        /// 推流携带的自定义参数。
        public let pushArgs: String
        
        /// 开始时间。
        /// 使用UTC格式时间，
        /// 例如：2019-01-08T10:00:00Z。
        /// 注意：北京时间值为 UTC 时间值 + 8 小时，格式按照 ISO 8601 标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let startTime: String
        
        /// 结束时间，注意：
        /// 1. 结束时间必须大于开始时间；
        /// 2. 结束时间和开始时间必须大于当前时间；
        /// 3. 结束时间 和 开始时间 间隔必须小于七天。
        /// 使用UTC格式时间，
        /// 例如：2019-01-08T10:00:00Z。
        /// 注意：北京时间值为 UTC 时间值 + 8 小时，格式按照 ISO 8601 标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let endTime: String
        
        /// 任务创建所在地域：
        /// ap-beijing - 华北地区(北京)，
        /// ap-shanghai -华东地区(上海)，
        /// ap-guangzhou -华南地区(广州)，
        /// ap-mumbai - 印度，
        /// ap-hongkong - 香港，
        /// eu-frankfurt - 德国，
        /// ap-seoul - 韩国，
        /// ap-bangkok - 泰国，
        /// ap-singapore - 新加坡，
        /// na-siliconvalley - 美西，
        /// na-ashburn - 美东，
        /// ap-tokyo - 日本。
        public let region: String
        
        /// 点播拉流转推循环次数。
        /// -1：无限循环，直到任务结束。
        /// 0：不循环。
        /// >0：具体循环次数。次数和时间以先结束的为准。
        /// 注意：拉流源为点播，该配置生效。
        public let vodLoopTimes: Int64
        
        /// 点播更新SourceUrls后的播放方式：
        /// ImmediateNewSource：立即从更新的拉流源开始播放；
        /// ContinueBreakPoint：从上次断流url源的断点处继续，结束后再使用新的拉流源。
        /// 注意：拉流源为点播，该配置生效。
        public let vodRefreshType: String
        
        /// 任务创建时间。
        /// 使用UTC格式时间，
        /// 例如：2019-01-08T10:00:00Z。
        /// 注意：北京时间值为 UTC 时间值 + 8 小时，格式按照 ISO 8601 标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String
        
        /// 任务更新时间。
        /// 使用UTC格式时间，
        /// 例如：2019-01-08T10:00:00Z。
        /// 注意：北京时间值为 UTC 时间值 + 8 小时，格式按照 ISO 8601 标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String
        
        /// 创建任务的操作者。
        public let createBy: String
        
        /// 最后更新任务的操作者。
        public let updateBy: String
        
        /// 回调地址。
        public let callbackUrl: String
        
        /// 选择需要回调的事件：
        /// TaskStart：任务启动回调，
        /// TaskExit：任务停止回调，
        /// VodSourceFileStart：从点播源文件开始拉流回调，
        /// VodSourceFileFinish：从点播源文件拉流结束回调，
        /// ResetTaskConfig：任务更新回调。
        public let callbackEvents: [String]
        
        /// 注意：该信息暂不返回。
        /// 最后一次回调信息。
        public let callbackInfo: String
        
        /// 注意：该信息暂不返回。
        /// 错误信息。
        public let errorInfo: String
        
        /// 状态。
        /// enable：生效中。
        /// pause：暂停中。
        public let status: String
        
        /// 注意：该信息仅在查询单个任务时返回。
        /// 任务最新拉流信息。
        /// 包含：源 url，偏移时间，上报时间。
        public let recentPullInfo: RecentPullInfo
        
        /// 任务备注信息。
        public let comment: String
        
        /// 备源类型：
        /// PullLivePushLive -直播，
        /// PullVodPushLive -点播。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupSourceType: String?
        
        /// 备源URL。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupSourceUrl: String?
        
        /// 水印信息列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let watermarkList: [PullPushWatermarkInfo]?
        
        /// 点播源是否启用本地推流模式，默认0，不启用。
        /// 0 - 不启用。
        /// 1 - 启用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vodLocalMode: Int64?
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case sourceType = "SourceType"
            case sourceUrls = "SourceUrls"
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
            case pushArgs = "PushArgs"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case region = "Region"
            case vodLoopTimes = "VodLoopTimes"
            case vodRefreshType = "VodRefreshType"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case createBy = "CreateBy"
            case updateBy = "UpdateBy"
            case callbackUrl = "CallbackUrl"
            case callbackEvents = "CallbackEvents"
            case callbackInfo = "CallbackInfo"
            case errorInfo = "ErrorInfo"
            case status = "Status"
            case recentPullInfo = "RecentPullInfo"
            case comment = "Comment"
            case backupSourceType = "BackupSourceType"
            case backupSourceUrl = "BackupSourceUrl"
            case watermarkList = "WatermarkList"
            case vodLocalMode = "VodLocalMode"
        }
    }
    
    /// 推流鉴权key信息。
    public struct PushAuthKeyInfo: TCOutputModel {
        /// 域名。
        public let domainName: String
        
        /// 是否启用，0：关闭，1：启用。
        public let enable: Int64
        
        /// 主鉴权 Key。
        public let masterAuthKey: String
        
        /// 备鉴权 Key。
        public let backupAuthKey: String
        
        /// 有效时间，单位：秒。
        public let authDelta: UInt64
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case enable = "Enable"
            case masterAuthKey = "MasterAuthKey"
            case backupAuthKey = "BackupAuthKey"
            case authDelta = "AuthDelta"
        }
    }
    
    /// 推流数据信息
    public struct PushDataInfo: TCOutputModel {
        /// 流名称。
        public let streamName: String
        
        /// 推流路径。
        public let appName: String
        
        /// 推流客户端 IP。
        public let clientIp: String
        
        /// 接流服务器 IP。
        public let serverIp: String
        
        /// 推流视频帧率，单位: Hz。
        public let videoFps: UInt64
        
        /// 推流视频码率，单位: bps。
        public let videoSpeed: UInt64
        
        /// 推流音频帧率，单位: Hz。
        public let audioFps: UInt64
        
        /// 推流音频码率，单位: bps。
        public let audioSpeed: UInt64
        
        /// 推流域名。
        public let pushDomain: String
        
        /// 推流开始时间。
        public let beginPushTime: String
        
        /// 音频编码格式，
        /// 例："AAC"。
        public let acodec: String
        
        /// 视频编码格式，
        /// 例："H264"。
        public let vcodec: String
        
        /// 分辨率。
        public let resolution: String
        
        /// 采样率。
        public let asampleRate: UInt64
        
        /// metadata 中的音频码率，单位: bps。
        public let metaAudioSpeed: UInt64
        
        /// metadata 中的视频码率，单位: bps。
        public let metaVideoSpeed: UInt64
        
        /// metadata 中的帧率。
        public let metaFps: UInt64
        
        enum CodingKeys: String, CodingKey {
            case streamName = "StreamName"
            case appName = "AppName"
            case clientIp = "ClientIp"
            case serverIp = "ServerIp"
            case videoFps = "VideoFps"
            case videoSpeed = "VideoSpeed"
            case audioFps = "AudioFps"
            case audioSpeed = "AudioSpeed"
            case pushDomain = "PushDomain"
            case beginPushTime = "BeginPushTime"
            case acodec = "Acodec"
            case vcodec = "Vcodec"
            case resolution = "Resolution"
            case asampleRate = "AsampleRate"
            case metaAudioSpeed = "MetaAudioSpeed"
            case metaVideoSpeed = "MetaVideoSpeed"
            case metaFps = "MetaFps"
        }
    }
    
    /// 某条流的推流质量详情数据。
    public struct PushQualityData: TCOutputModel {
        /// 数据时间，格式: %Y-%m-%d %H:%M:%S.%ms，精确到毫秒级。
        public let time: String
        
        /// 推流域名。
        public let pushDomain: String
        
        /// 推流路径。
        public let appName: String
        
        /// 推流客户端 IP。
        public let clientIp: String
        
        /// 开始推流时间，格式: %Y-%m-%d %H:%M:%S.%ms，精确到毫秒级。
        public let beginPushTime: String
        
        /// 分辨率信息。
        public let resolution: String
        
        /// 视频编码格式。
        public let vCodec: String
        
        /// 音频编码格式。
        public let aCodec: String
        
        /// 推流序列号，用来唯一的标志一次推流。
        public let sequence: String
        
        /// 视频帧率。
        public let videoFps: UInt64
        
        /// 视频码率，单位: bps。
        public let videoRate: UInt64
        
        /// 音频帧率。
        public let audioFps: UInt64
        
        /// 音频码率，单位: bps。
        public let audioRate: UInt64
        
        /// 本地流逝时间，单位: ms，音视频流逝时间与本地流逝时间的差距越大表示推流质量越差，上行卡顿越严重。
        public let localTs: UInt64
        
        /// 视频流逝时间，单位: ms。
        public let videoTs: UInt64
        
        /// 音频流逝时间，单位: ms。
        public let audioTs: UInt64
        
        /// metadata 中的视频码率，单位: kbps。
        public let metaVideoRate: UInt64
        
        /// metadata 中的音频码率，单位: kbps。
        public let metaAudioRate: UInt64
        
        /// metadata 中的帧率。
        public let mateFps: UInt64
        
        /// 推流参数
        public let streamParam: String
        
        /// 带宽，单位Mbps。
        public let bandwidth: Float
        
        /// 流量，单位MB。
        public let flux: Float
        
        /// 推流服务端 IP。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverIp: String?
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case pushDomain = "PushDomain"
            case appName = "AppName"
            case clientIp = "ClientIp"
            case beginPushTime = "BeginPushTime"
            case resolution = "Resolution"
            case vCodec = "VCodec"
            case aCodec = "ACodec"
            case sequence = "Sequence"
            case videoFps = "VideoFps"
            case videoRate = "VideoRate"
            case audioFps = "AudioFps"
            case audioRate = "AudioRate"
            case localTs = "LocalTs"
            case videoTs = "VideoTs"
            case audioTs = "AudioTs"
            case metaVideoRate = "MetaVideoRate"
            case metaAudioRate = "MetaAudioRate"
            case mateFps = "MateFps"
            case streamParam = "StreamParam"
            case bandwidth = "Bandwidth"
            case flux = "Flux"
            case serverIp = "ServerIp"
        }
    }
    
    /// 直播拉流当前正在拉的文件信息。
    public struct RecentPullInfo: TCOutputModel {
        /// 当前正在拉的文件地址。
        public let fileUrl: String
        
        /// 当前正在拉的文件偏移，单位：秒。
        public let offsetTime: UInt64
        
        /// 最新上报偏移信息时间。UTC格式。
        /// 如：2020-07-23T03:20:39Z。
        /// 注意：与北京时间相差八小时。
        public let reportTime: String
        
        /// 已经轮播的次数。
        public let loopedTimes: Int64
        
        enum CodingKeys: String, CodingKey {
            case fileUrl = "FileUrl"
            case offsetTime = "OffsetTime"
            case reportTime = "ReportTime"
            case loopedTimes = "LoopedTimes"
        }
    }
    
    /// 录制模板参数。
    public struct RecordParam: TCInputModel, TCOutputModel {
        /// 录制间隔。
        /// 单位秒，默认：1800。
        /// 取值范围：30-7200。
        /// 此参数对 HLS 无效，当录制 HLS 时从推流到断流生成一个文件。
        public let recordInterval: Int64?
        
        /// 录制存储时长。
        /// 单位秒，取值范围： 0 - 1500天。
        /// 0：表示永久存储。
        public let storageTime: Int64?
        
        /// 是否开启当前格式录制，默认值为0，0：否， 1：是。
        public let enable: Int64?
        
        /// 点播子应用 ID。
        public let vodSubAppId: Int64?
        
        /// 录制文件名。
        /// 支持的特殊占位符有：
        /// {StreamID}: 流ID
        /// {StartYear}: 开始时间-年
        /// {StartMonth}: 开始时间-月
        /// {StartDay}: 开始时间-日
        /// {StartHour}: 开始时间-小时
        /// {StartMinute}: 开始时间-分钟
        /// {StartSecond}: 开始时间-秒
        /// {StartMillisecond}: 开始时间-毫秒
        /// {EndYear}: 结束时间-年
        /// {EndMonth}: 结束时间-月
        /// {EndDay}: 结束时间-日
        /// {EndHour}: 结束时间-小时
        /// {EndMinute}: 结束时间-分钟
        /// {EndSecond}: 结束时间-秒
        /// {EndMillisecond}: 结束时间-毫秒
        /// 若未设置默认录制文件名为{StreamID}_{StartYear}-{StartMonth}-{StartDay}-{StartHour}-{StartMinute}-{StartSecond}_{EndYear}-{EndMonth}-{EndDay}-{EndHour}-{EndMinute}-{EndSecond}
        public let vodFileName: String?
        
        /// 任务流
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let procedure: String?
        
        /// 视频存储策略。
        /// normal：标准存储。
        /// cold：低频存储。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageMode: String?
        
        /// 点播应用分类
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classId: Int64?
        
        public init (recordInterval: Int64?, storageTime: Int64?, enable: Int64?, vodSubAppId: Int64?, vodFileName: String?, procedure: String?, storageMode: String?, classId: Int64?) {
            self.recordInterval = recordInterval
            self.storageTime = storageTime
            self.enable = enable
            self.vodSubAppId = vodSubAppId
            self.vodFileName = vodFileName
            self.procedure = procedure
            self.storageMode = storageMode
            self.classId = classId
        }
        
        enum CodingKeys: String, CodingKey {
            case recordInterval = "RecordInterval"
            case storageTime = "StorageTime"
            case enable = "Enable"
            case vodSubAppId = "VodSubAppId"
            case vodFileName = "VodFileName"
            case procedure = "Procedure"
            case storageMode = "StorageMode"
            case classId = "ClassId"
        }
    }
    
    /// 录制任务
    public struct RecordTask: TCOutputModel {
        /// 录制任务ID。
        public let taskId: String
        
        /// 推流域名。
        public let domainName: String
        
        /// 推流路径。
        public let appName: String
        
        /// 流名称。
        public let streamName: String
        
        /// 任务开始时间，Unix时间戳。
        public let startTime: UInt64
        
        /// 任务结束时间，Unix时间戳。
        public let endTime: UInt64
        
        /// 录制模板ID。
        public let templateId: UInt64
        
        /// 调用 StopRecordTask 停止任务时间，Unix时间戳。值为0表示未曾调用接口停止任务。
        public let stopped: UInt64
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case templateId = "TemplateId"
            case stopped = "Stopped"
        }
    }
    
    /// 录制模板信息
    public struct RecordTemplateInfo: TCOutputModel {
        /// 模板 ID。
        public let templateId: Int64
        
        /// 模板名称。
        public let templateName: String
        
        /// 描述信息。
        public let description: String
        
        /// FLV 录制参数。
        public let flvParam: RecordParam
        
        /// HLS 录制参数。
        public let hlsParam: RecordParam
        
        /// MP4 录制参数。
        public let mp4Param: RecordParam
        
        /// AAC 录制参数。
        public let aacParam: RecordParam
        
        /// 0：普通直播，
        /// 1：慢直播。
        public let isDelayLive: Int64
        
        /// HLS 录制定制参数。
        public let hlsSpecialParam: HlsSpecialParam
        
        /// MP3 录制参数。
        public let mp3Param: RecordParam
        
        /// 是否去除水印。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let removeWatermark: Bool?
        
        /// FLV 录制定制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flvSpecialParam: FlvSpecialParam
        
        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case description = "Description"
            case flvParam = "FlvParam"
            case hlsParam = "HlsParam"
            case mp4Param = "Mp4Param"
            case aacParam = "AacParam"
            case isDelayLive = "IsDelayLive"
            case hlsSpecialParam = "HlsSpecialParam"
            case mp3Param = "Mp3Param"
            case removeWatermark = "RemoveWatermark"
            case flvSpecialParam = "FlvSpecialParam"
        }
    }
    
    /// 直播域名Referer黑白名单配置
    public struct RefererAuthConfig: TCOutputModel {
        /// 域名。
        public let domainName: String
        
        /// 是否启用，0：关闭，1：启用。
        public let enable: Int64
        
        /// 名单类型，0：黑名单，1：白名单。
        public let type: Int64
        
        /// 是否允许空Referer，0：不允许，1：允许。
        public let allowEmpty: Int64
        
        /// 名单列表，以分号(;)分隔。
        public let rules: String
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case enable = "Enable"
            case type = "Type"
            case allowEmpty = "AllowEmpty"
            case rules = "Rules"
        }
    }
    
    /// 规则信息。
    public struct RuleInfo: TCOutputModel {
        /// 规则创建时间。
        public let createTime: String
        
        /// 规则更新时间。
        public let updateTime: String
        
        /// 模板 ID。
        public let templateId: Int64
        
        /// 推流域名。
        public let domainName: String
        
        /// 推流路径。
        public let appName: String
        
        /// 流名称。
        public let streamName: String
        
        enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case templateId = "TemplateId"
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
        }
    }
    
    /// 截图任务
    public struct ScreenshotTask: TCOutputModel {
        /// 截图任务ID。
        public let taskId: String
        
        /// 推流域名。
        public let domainName: String
        
        /// 推流路径。
        public let appName: String
        
        /// 流名称。
        public let streamName: String
        
        /// 任务开始时间，Unix时间戳。
        public let startTime: UInt64
        
        /// 任务结束时间，Unix时间戳。
        public let endTime: UInt64
        
        /// 截图模板ID。
        public let templateId: UInt64
        
        /// 调用 StopScreenshotTask 停止任务时间，Unix时间戳。值为0表示未曾调用接口停止任务。
        public let stopped: UInt64
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case templateId = "TemplateId"
            case stopped = "Stopped"
        }
    }
    
    /// 截图模板信息。
    public struct SnapshotTemplateInfo: TCOutputModel {
        /// 模板 ID。
        public let templateId: Int64
        
        /// 模板名称。
        public let templateName: String
        
        /// 截图时间间隔，5-300秒。
        public let snapshotInterval: Int64
        
        /// 截图宽度，范围：0-3000。 
        /// 0：原始宽度并适配原始比例。
        public let width: Int64
        
        /// 截图高度，范围：0-2000。
        /// 0：原始高度并适配原始比例。
        public let height: Int64
        
        /// 是否开启鉴黄，0：不开启，1：开启。
        public let pornFlag: Int64
        
        /// Cos 应用 ID。
        public let cosAppId: Int64
        
        /// Cos Bucket名称。
        public let cosBucket: String
        
        /// Cos 地域。
        public let cosRegion: String
        
        /// 模板描述。
        public let description: String
        
        /// Cos Bucket文件夹前缀。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosPrefix: String?
        
        /// Cos 文件名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosFileName: String?
        
        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case snapshotInterval = "SnapshotInterval"
            case width = "Width"
            case height = "Height"
            case pornFlag = "PornFlag"
            case cosAppId = "CosAppId"
            case cosBucket = "CosBucket"
            case cosRegion = "CosRegion"
            case description = "Description"
            case cosPrefix = "CosPrefix"
            case cosFileName = "CosFileName"
        }
    }
    
    /// 推断流事件信息。
    public struct StreamEventInfo: TCOutputModel {
        /// 应用名称。
        public let appName: String
        
        /// 推流域名。
        public let domainName: String
        
        /// 流名称。
        public let streamName: String
        
        /// 推流开始时间。
        /// UTC 格式时间，例如：2019-01-07T12:00:00Z。
        public let streamStartTime: String
        
        /// 推流结束时间。
        /// UTC 格式时间，例如：2019-01-07T15:00:00Z。
        public let streamEndTime: String
        
        /// 停止原因。
        public let stopReason: String
        
        /// 推流持续时长，单位：秒。
        public let duration: UInt64
        
        /// 主播 IP。
        public let clientIp: String
        
        /// 分辨率。
        public let resolution: String
        
        enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case domainName = "DomainName"
            case streamName = "StreamName"
            case streamStartTime = "StreamStartTime"
            case streamEndTime = "StreamEndTime"
            case stopReason = "StopReason"
            case duration = "Duration"
            case clientIp = "ClientIp"
            case resolution = "Resolution"
        }
    }
    
    /// 流名称列表。
    public struct StreamName: TCOutputModel {
        /// 流名称。
        public let streamName: String
        
        /// 应用名称。
        public let appName: String
        
        /// 推流域名。
        public let domainName: String
        
        /// 推流开始时间。
        /// UTC格式时间，例如：2019-01-07T12:00:00Z。
        public let streamStartTime: String
        
        /// 推流结束时间。
        /// UTC格式时间，例如：2019-01-07T15:00:00Z。
        public let streamEndTime: String
        
        /// 停止原因。
        public let stopReason: String
        
        /// 推流持续时长，单位：秒。
        public let duration: UInt64
        
        /// 主播 IP。
        public let clientIp: String
        
        /// 分辨率。
        public let resolution: String
        
        enum CodingKeys: String, CodingKey {
            case streamName = "StreamName"
            case appName = "AppName"
            case domainName = "DomainName"
            case streamStartTime = "StreamStartTime"
            case streamEndTime = "StreamEndTime"
            case stopReason = "StopReason"
            case duration = "Duration"
            case clientIp = "ClientIp"
            case resolution = "Resolution"
        }
    }
    
    /// 查询当前正在推流的信息
    public struct StreamOnlineInfo: TCOutputModel {
        /// 流名称。
        public let streamName: String
        
        /// 推流时间列表
        public let publishTimeList: [PublishTime]
        
        /// 应用名称。
        public let appName: String
        
        /// 推流域名。
        public let domainName: String
        
        enum CodingKeys: String, CodingKey {
            case streamName = "StreamName"
            case publishTimeList = "PublishTimeList"
            case appName = "AppName"
            case domainName = "DomainName"
        }
    }
    
    /// 转码模板信息。
    public struct TemplateInfo: TCOutputModel {
        /// 视频编码：h264/h265/origin，默认h264。
        /// origin: 保持原始编码格式
        public let vcodec: String
        
        /// 视频码率。范围：0kbps - 8000kbps。
        /// 0为保持原始码率。
        /// 注: 转码模板有码率唯一要求，最终保存的码率可能与输入码率有所差别。
        public let videoBitrate: Int64
        
        /// 音频编码：aac，默认aac。
        /// 注意：当前该参数未生效，待后续支持！
        public let acodec: String
        
        /// 音频码率。取值范围：0kbps - 500kbps。
        /// 默认0。
        public let audioBitrate: Int64
        
        /// 宽，默认0。
        /// 范围[0-3000]
        /// 数值必须是2的倍数，0是原始宽度
        public let width: Int64
        
        /// 高，默认0。
        /// 范围[0-3000]
        /// 数值必须是2的倍数，0是原始宽度
        public let height: Int64
        
        /// 帧率，默认0。
        /// 范围0-60fps
        public let fps: Int64
        
        /// 关键帧间隔，单位：秒。
        /// 默认原始的间隔
        /// 范围2-6
        public let gop: Int64
        
        /// 旋转角度，默认0。
        /// 可取值：0，90，180，270
        public let rotate: Int64
        
        /// 编码质量：
        /// baseline/main/high。默认baseline
        public let profile: String
        
        /// 当设置的码率>原始码率时，是否以原始码率为准。
        /// 0：否， 1：是
        /// 默认 0。
        public let bitrateToOrig: Int64
        
        /// 当设置的高度>原始高度时，是否以原始高度为准。
        /// 0：否， 1：是
        /// 默认 0。
        public let heightToOrig: Int64
        
        /// 当设置的帧率>原始帧率时，是否以原始帧率为准。
        /// 0：否， 1：是
        /// 默认 0。
        public let fpsToOrig: Int64
        
        /// 是否保留视频。0：否，1：是。
        public let needVideo: Int64
        
        /// 是否保留音频。0：否，1：是。
        public let needAudio: Int64
        
        /// 模板 ID。
        public let templateId: Int64
        
        /// 模板名称。
        public let templateName: String
        
        /// 模板描述。
        public let description: String
        
        /// 是否是极速高清模板，0：否，1：是。默认0。
        public let aiTransCode: Int64
        
        /// 极速高清视频码率压缩比。
        /// 极速高清目标码率=VideoBitrate * (1-AdaptBitratePercent)
        /// 取值范围：0.0到0.5
        public let adaptBitratePercent: Float
        
        /// 是否以短边作为高度，0：否，1：是。默认0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let shortEdgeAsHeight: Int64?
        
        /// DRM 加密类型，可选值：fairplay、normalaes、widevine。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let drmType: String?
        
        /// DRM 加密项，多个用|分割，可选值：AUDIO、SD、HD、UHD1、UHD2，后四个为一组，同组中的内容只能选一个。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let drmTracks: String?
        
        enum CodingKeys: String, CodingKey {
            case vcodec = "Vcodec"
            case videoBitrate = "VideoBitrate"
            case acodec = "Acodec"
            case audioBitrate = "AudioBitrate"
            case width = "Width"
            case height = "Height"
            case fps = "Fps"
            case gop = "Gop"
            case rotate = "Rotate"
            case profile = "Profile"
            case bitrateToOrig = "BitrateToOrig"
            case heightToOrig = "HeightToOrig"
            case fpsToOrig = "FpsToOrig"
            case needVideo = "NeedVideo"
            case needAudio = "NeedAudio"
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case description = "Description"
            case aiTransCode = "AiTransCode"
            case adaptBitratePercent = "AdaptBitratePercent"
            case shortEdgeAsHeight = "ShortEdgeAsHeight"
            case drmType = "DRMType"
            case drmTracks = "DRMTracks"
        }
    }
    
    /// 时移计费明细数据。
    public struct TimeShiftBillData: TCOutputModel {
        /// 推流域名。
        public let domain: String
        
        /// 时移文件时长，单位分钟。
        public let duration: Float
        
        /// 时移配置天数，单位天。
        public let storagePeriod: Float
        
        /// 时间点，格式: yyyy-mm-ddTHH:MM:SSZ。
        public let time: String
        
        /// 时移总时长，单位分钟。
        public let totalDuration: Float
        
        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case duration = "Duration"
            case storagePeriod = "StoragePeriod"
            case time = "Time"
            case totalDuration = "TotalDuration"
        }
    }
    
    /// 某个时间点的指标的数值是多少。
    public struct TimeValue: TCOutputModel {
        /// UTC 时间，时间格式：yyyy-mm-ddTHH:MM:SSZ。
        public let time: String
        
        /// 数值。
        public let num: UInt64
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case num = "Num"
        }
    }
    
    /// 转码详细信息。
    public struct TranscodeDetailInfo: TCOutputModel {
        /// 流名称。
        public let streamName: String
        
        /// 开始时间（北京时间），格式：yyyy-mm-dd HH:MM。
        public let startTime: String
        
        /// 结束时间（北京时间），格式：yyyy-mm-dd HH:MM。
        public let endTime: String
        
        /// 转码时长，单位：分钟。
        /// 注意：因推流过程中可能有中断重推情况，此处时长为真实转码时长累加值，并非结束时间和开始时间的间隔。
        public let duration: UInt64
        
        /// 编码方式，带模块，
        /// 示例：
        /// liveprocessor_H264：直播转码-H264，
        /// liveprocessor_H265： 直播转码-H265，
        /// topspeed_H264：极速高清-H264，
        /// topspeed_H265：极速高清-H265。
        public let moduleCodec: String
        
        /// 码率。
        public let bitrate: UInt64
        
        /// 类型，包含：转码（Transcode），混流（MixStream），水印（WaterMark），快直播（Webrtc）。
        public let type: String
        
        /// 推流域名。
        public let pushDomain: String
        
        /// 分辨率。
        public let resolution: String
        
        /// 地域：
        /// Mainland：国内。
        /// Overseas：海外。
        public let mainlandOrOversea: String
        
        enum CodingKeys: String, CodingKey {
            case streamName = "StreamName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case duration = "Duration"
            case moduleCodec = "ModuleCodec"
            case bitrate = "Bitrate"
            case type = "Type"
            case pushDomain = "PushDomain"
            case resolution = "Resolution"
            case mainlandOrOversea = "MainlandOrOversea"
        }
    }
    
    /// 转码任务数。
    public struct TranscodeTaskNum: TCOutputModel {
        /// 时间点。
        public let time: String
        
        /// 码率。
        public let codeRate: UInt64
        
        /// 任务数。
        public let num: UInt64
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case codeRate = "CodeRate"
            case num = "Num"
        }
    }
    
    /// 转码总量数据
    public struct TranscodeTotalInfo: TCOutputModel {
        /// 时间点，北京时间，
        /// 示例：2019-03-01 00:00:00。
        public let time: String
        
        /// 转码时长，单位：分钟。
        public let duration: UInt64
        
        /// 编码方式，带模块，
        /// 示例：
        /// liveprocessor_H264 =》直播转码-H264，
        /// liveprocessor_H265 =》 直播转码-H265，
        /// topspeed_H264 =》极速高清-H264，
        /// topspeed_H265 =》极速高清-H265。
        public let moduleCodec: String
        
        /// 分辨率，
        /// 示例：540*480。
        public let resolution: String
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case duration = "Duration"
            case moduleCodec = "ModuleCodec"
            case resolution = "Resolution"
        }
    }
    
    /// 水印信息。
    public struct WatermarkInfo: TCOutputModel {
        /// 水印 ID。
        public let watermarkId: Int64
        
        /// 水印图片 URL。
        public let pictureUrl: String
        
        /// 显示位置，X 轴偏移。
        public let xPosition: Int64
        
        /// 显示位置，Y 轴偏移。
        public let yPosition: Int64
        
        /// 水印名称。
        public let watermarkName: String
        
        /// 当前状态。0：未使用，1:使用中。
        public let status: Int64
        
        /// 添加时间。
        public let createTime: String
        
        /// 水印宽。
        public let width: Int64
        
        /// 水印高。
        public let height: Int64
        
        enum CodingKeys: String, CodingKey {
            case watermarkId = "WatermarkId"
            case pictureUrl = "PictureUrl"
            case xPosition = "XPosition"
            case yPosition = "YPosition"
            case watermarkName = "WatermarkName"
            case status = "Status"
            case createTime = "CreateTime"
            case width = "Width"
            case height = "Height"
        }
    }
}
