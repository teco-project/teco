//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCLiveError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case cdnLogEmpty = "ResourceNotFound.CdnLogEmpty"
            case cdnThemeEmpty = "ResourceNotFound.CdnThemeEmpty"
            case channelNotExist = "ResourceNotFound.ChannelNotExist"
            case crtDateNotFound = "ResourceNotFound.CrtDateNotFound"
            case crtDomainNotFound = "ResourceNotFound.CrtDomainNotFound"
            case domainNoRecord = "ResourceNotFound.DomainNoRecord"
            case domainNotExist = "ResourceNotFound.DomainNotExist"
            case forbidService = "ResourceNotFound.ForbidService"
            case freezeService = "ResourceNotFound.FreezeService"
            case invalidUser = "ResourceNotFound.InvalidUser"
            case playDomainNoRecord = "ResourceNotFound.PlayDomainNoRecord"
            case pushDomainNoRecord = "ResourceNotFound.PushDomainNoRecord"
            case stopService = "ResourceNotFound.StopService"
            case taskId = "ResourceNotFound.TaskId"
            case userDisableService = "ResourceNotFound.UserDisableService"
            case userNotExist = "ResourceNotFound.UserNotExist"
            case userNotFount = "ResourceNotFound.UserNotFount"
            case watermarkNotExist = "ResourceNotFound.WatermarkNotExist"
            case other = "ResourceNotFound"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 日志下载 URL 不存在。
        public static var cdnLogEmpty: ResourceNotFound {
            ResourceNotFound(.cdnLogEmpty)
        }
        
        /// 日志主题不存在。
        public static var cdnThemeEmpty: ResourceNotFound {
            ResourceNotFound(.cdnThemeEmpty)
        }
        
        /// 频道不存在。
        public static var channelNotExist: ResourceNotFound {
            ResourceNotFound(.channelNotExist)
        }
        
        /// 证书不存在。
        public static var crtDateNotFound: ResourceNotFound {
            ResourceNotFound(.crtDateNotFound)
        }
        
        /// 未找到证书信息。
        public static var crtDomainNotFound: ResourceNotFound {
            ResourceNotFound(.crtDomainNotFound)
        }
        
        /// 域名没有备案。
        public static var domainNoRecord: ResourceNotFound {
            ResourceNotFound(.domainNoRecord)
        }
        
        /// 域名不存在或不匹配。
        public static var domainNotExist: ResourceNotFound {
            ResourceNotFound(.domainNotExist)
        }
        
        /// 请确认您在使用服务过程中是否有违规内容。
        public static var forbidService: ResourceNotFound {
            ResourceNotFound(.forbidService)
        }
        
        /// 用户长时间未使用，服务已被冻结，请提工单恢复。
        public static var freezeService: ResourceNotFound {
            ResourceNotFound(.freezeService)
        }
        
        /// 用户不支持此接口。
        public static var invalidUser: ResourceNotFound {
            ResourceNotFound(.invalidUser)
        }
        
        /// 播放域名不存在。
        public static var playDomainNoRecord: ResourceNotFound {
            ResourceNotFound(.playDomainNoRecord)
        }
        
        /// 推流域名不存在。
        public static var pushDomainNoRecord: ResourceNotFound {
            ResourceNotFound(.pushDomainNoRecord)
        }
        
        /// 账号停服，请先冲正开通服务后再操作。
        public static var stopService: ResourceNotFound {
            ResourceNotFound(.stopService)
        }
        
        /// TaskId 不存在。
        public static var taskId: ResourceNotFound {
            ResourceNotFound(.taskId)
        }
        
        /// 用户主动停服，可重新开通。
        public static var userDisableService: ResourceNotFound {
            ResourceNotFound(.userDisableService)
        }
        
        /// 用户未注册直播。
        public static var userNotExist: ResourceNotFound {
            ResourceNotFound(.userNotExist)
        }
        
        /// 用户不存在。
        public static var userNotFount: ResourceNotFound {
            ResourceNotFound(.userNotFount)
        }
        
        /// 水印不存在。
        public static var watermarkNotExist: ResourceNotFound {
            ResourceNotFound(.watermarkNotExist)
        }
        
        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }
    }
}

extension TCLiveError.ResourceNotFound: Equatable {
    public static func == (lhs: TCLiveError.ResourceNotFound, rhs: TCLiveError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCLiveError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCLiveError.ResourceNotFound {
    /// - Returns: ``TCLiveError`` that holds the same error and context.
    public func toLiveError() -> TCLiveError {
        guard let code = TCLiveError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCLiveError(code, context: self.context)
    }
}

extension TCLiveError.ResourceNotFound {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
