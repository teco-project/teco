//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCLiveError {
    public struct ResourceNotFound: TCLiveErrorType {
        enum Code: String {
            case cdnLogEmpty = "ResourceNotFound.CdnLogEmpty"
            case cdnThemeEmpty = "ResourceNotFound.CdnThemeEmpty"
            case channelNotExist = "ResourceNotFound.ChannelNotExist"
            case crtDateNotFound = "ResourceNotFound.CrtDateNotFound"
            case crtDomainNotFound = "ResourceNotFound.CrtDomainNotFound"
            case domainNoRecord = "ResourceNotFound.DomainNoRecord"
            case domainNotExist = "ResourceNotFound.DomainNotExist"
            case emptyData = "ResourceNotFound.EmptyData"
            case forbidService = "ResourceNotFound.ForbidService"
            case freezeService = "ResourceNotFound.FreezeService"
            case invalidUser = "ResourceNotFound.InvalidUser"
            case playDomainNoRecord = "ResourceNotFound.PlayDomainNoRecord"
            case pushDomainNoRecord = "ResourceNotFound.PushDomainNoRecord"
            case stopService = "ResourceNotFound.StopService"
            case taskId = "ResourceNotFound.TaskId"
            case userDisableService = "ResourceNotFound.UserDisableService"
            case userNotExist = "ResourceNotFound.UserNotExist"
            case userNotFount = "ResourceNotFound.UserNotFount"
            case watermarkNotExist = "ResourceNotFound.WatermarkNotExist"
            case other = "ResourceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 日志下载 URL 不存在。
        public static var cdnLogEmpty: ResourceNotFound {
            ResourceNotFound(.cdnLogEmpty)
        }

        /// 日志主题不存在。
        public static var cdnThemeEmpty: ResourceNotFound {
            ResourceNotFound(.cdnThemeEmpty)
        }

        /// 频道不存在。
        public static var channelNotExist: ResourceNotFound {
            ResourceNotFound(.channelNotExist)
        }

        /// 证书不存在。
        public static var crtDateNotFound: ResourceNotFound {
            ResourceNotFound(.crtDateNotFound)
        }

        /// 未找到证书信息。
        public static var crtDomainNotFound: ResourceNotFound {
            ResourceNotFound(.crtDomainNotFound)
        }

        /// 域名没有备案。
        public static var domainNoRecord: ResourceNotFound {
            ResourceNotFound(.domainNoRecord)
        }

        /// 域名不存在或不匹配。
        public static var domainNotExist: ResourceNotFound {
            ResourceNotFound(.domainNotExist)
        }

        /// 资源为空，没有找到对应域名。
        public static var emptyData: ResourceNotFound {
            ResourceNotFound(.emptyData)
        }

        /// 用户被禁用。
        ///
        /// 请确认您在使用服务过程中是否有违规内容。
        public static var forbidService: ResourceNotFound {
            ResourceNotFound(.forbidService)
        }

        /// 用户服务被冻结。
        ///
        /// 用户长时间未使用，服务已被冻结，请提工单恢复。
        public static var freezeService: ResourceNotFound {
            ResourceNotFound(.freezeService)
        }

        /// 用户不支持此接口。
        public static var invalidUser: ResourceNotFound {
            ResourceNotFound(.invalidUser)
        }

        /// 播放域名不存在。
        public static var playDomainNoRecord: ResourceNotFound {
            ResourceNotFound(.playDomainNoRecord)
        }

        /// 推流域名不存在。
        public static var pushDomainNoRecord: ResourceNotFound {
            ResourceNotFound(.pushDomainNoRecord)
        }

        /// 账号停服，请先冲正开通服务后再操作。
        public static var stopService: ResourceNotFound {
            ResourceNotFound(.stopService)
        }

        /// TaskId 不存在。
        public static var taskId: ResourceNotFound {
            ResourceNotFound(.taskId)
        }

        /// 用户主动停服。
        ///
        /// 用户主动停服，可重新开通。
        public static var userDisableService: ResourceNotFound {
            ResourceNotFound(.userDisableService)
        }

        /// 用户未注册直播。
        public static var userNotExist: ResourceNotFound {
            ResourceNotFound(.userNotExist)
        }

        /// 用户不存在。
        public static var userNotFount: ResourceNotFound {
            ResourceNotFound(.userNotFount)
        }

        /// 水印不存在。
        public static var watermarkNotExist: ResourceNotFound {
            ResourceNotFound(.watermarkNotExist)
        }

        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }

        public func asLiveError() -> TCLiveError {
            let code: TCLiveError.Code
            switch self.error {
            case .cdnLogEmpty:
                code = .resourceNotFound_CdnLogEmpty
            case .cdnThemeEmpty:
                code = .resourceNotFound_CdnThemeEmpty
            case .channelNotExist:
                code = .resourceNotFound_ChannelNotExist
            case .crtDateNotFound:
                code = .resourceNotFound_CrtDateNotFound
            case .crtDomainNotFound:
                code = .resourceNotFound_CrtDomainNotFound
            case .domainNoRecord:
                code = .resourceNotFound_DomainNoRecord
            case .domainNotExist:
                code = .resourceNotFound_DomainNotExist
            case .emptyData:
                code = .resourceNotFound_EmptyData
            case .forbidService:
                code = .resourceNotFound_ForbidService
            case .freezeService:
                code = .resourceNotFound_FreezeService
            case .invalidUser:
                code = .resourceNotFound_InvalidUser
            case .playDomainNoRecord:
                code = .resourceNotFound_PlayDomainNoRecord
            case .pushDomainNoRecord:
                code = .resourceNotFound_PushDomainNoRecord
            case .stopService:
                code = .resourceNotFound_StopService
            case .taskId:
                code = .resourceNotFound_TaskId
            case .userDisableService:
                code = .resourceNotFound_UserDisableService
            case .userNotExist:
                code = .resourceNotFound_UserNotExist
            case .userNotFount:
                code = .resourceNotFound_UserNotFount
            case .watermarkNotExist:
                code = .resourceNotFound_WatermarkNotExist
            case .other:
                code = .resourceNotFound
            }
            return TCLiveError(code, context: self.context)
        }
    }
}
