//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Live {
    /// DescribePlayErrorCodeDetailInfoList请求参数结构体
    public struct DescribePlayErrorCodeDetailInfoListRequest: TCRequestModel {
        /// 起始时间，北京时间，
        /// 格式：yyyy-mm-dd HH:MM:SS。
        public let startTime: String

        /// 结束时间，北京时间，
        /// 格式：yyyy-mm-dd HH:MM:SS。
        /// 注：EndTime 和 StartTime 只支持最近1天的数据查询。
        public let endTime: String

        /// 查询粒度：
        /// 1-1分钟粒度。
        public let granularity: UInt64

        /// 是，可选值包括”4xx”,”5xx”，支持”4xx,5xx”等这种混合模式。
        public let statType: String

        /// 播放域名列表。
        public let playDomains: [String]?

        /// 地域，可选值：Mainland，Oversea，China，Foreign，Global（默认值）；如果为空，查询总的数据；如果为“Mainland”，查询中国大陆的数据；如果为“Oversea”，则查询中国大陆以外的数据；如果为China，查询中国的数据（包括港澳台）；如果为Foreign，查询国外的数据（不包括港澳台）。
        public let mainlandOrOversea: String?

        public init(startTime: String, endTime: String, granularity: UInt64, statType: String, playDomains: [String]? = nil, mainlandOrOversea: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.granularity = granularity
            self.statType = statType
            self.playDomains = playDomains
            self.mainlandOrOversea = mainlandOrOversea
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case granularity = "Granularity"
            case statType = "StatType"
            case playDomains = "PlayDomains"
            case mainlandOrOversea = "MainlandOrOversea"
        }
    }

    /// DescribePlayErrorCodeDetailInfoList返回参数结构体
    public struct DescribePlayErrorCodeDetailInfoListResponse: TCResponseModel {
        /// 统计信息列表。
        public let httpCodeList: [HttpCodeInfo]

        /// 统计类型。
        public let statType: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case httpCodeList = "HttpCodeList"
            case statType = "StatType"
            case requestId = "RequestId"
        }
    }

    /// 查询播放http错误码实时数据
    ///
    /// 查询下行播放错误码信息，某段时间内1分钟粒度的各http错误码出现的次数，包括4xx，5xx。
    @inlinable
    public func describePlayErrorCodeDetailInfoList(_ input: DescribePlayErrorCodeDetailInfoListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePlayErrorCodeDetailInfoListResponse> {
        self.client.execute(action: "DescribePlayErrorCodeDetailInfoList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询播放http错误码实时数据
    ///
    /// 查询下行播放错误码信息，某段时间内1分钟粒度的各http错误码出现的次数，包括4xx，5xx。
    @inlinable
    public func describePlayErrorCodeDetailInfoList(_ input: DescribePlayErrorCodeDetailInfoListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePlayErrorCodeDetailInfoListResponse {
        try await self.client.execute(action: "DescribePlayErrorCodeDetailInfoList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询播放http错误码实时数据
    ///
    /// 查询下行播放错误码信息，某段时间内1分钟粒度的各http错误码出现的次数，包括4xx，5xx。
    @inlinable
    public func describePlayErrorCodeDetailInfoList(startTime: String, endTime: String, granularity: UInt64, statType: String, playDomains: [String]? = nil, mainlandOrOversea: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePlayErrorCodeDetailInfoListResponse> {
        self.describePlayErrorCodeDetailInfoList(DescribePlayErrorCodeDetailInfoListRequest(startTime: startTime, endTime: endTime, granularity: granularity, statType: statType, playDomains: playDomains, mainlandOrOversea: mainlandOrOversea), region: region, logger: logger, on: eventLoop)
    }

    /// 查询播放http错误码实时数据
    ///
    /// 查询下行播放错误码信息，某段时间内1分钟粒度的各http错误码出现的次数，包括4xx，5xx。
    @inlinable
    public func describePlayErrorCodeDetailInfoList(startTime: String, endTime: String, granularity: UInt64, statType: String, playDomains: [String]? = nil, mainlandOrOversea: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePlayErrorCodeDetailInfoListResponse {
        try await self.describePlayErrorCodeDetailInfoList(DescribePlayErrorCodeDetailInfoListRequest(startTime: startTime, endTime: endTime, granularity: granularity, statType: statType, playDomains: playDomains, mainlandOrOversea: mainlandOrOversea), region: region, logger: logger, on: eventLoop)
    }
}
