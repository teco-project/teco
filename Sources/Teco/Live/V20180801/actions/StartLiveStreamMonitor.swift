//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// StartLiveStreamMonitor请求参数结构体
    public struct StartLiveStreamMonitorRequest: TCRequestModel {
        /// 监播ID。
        public let monitorId: String

        /// 监播画面声音InputIndex,支持多个输入声音。
        /// 取值范围 InputIndex必须已经存在。
        /// 不填默认无声音输出。
        public let audibleInputIndexList: [UInt64]?

        public init(monitorId: String, audibleInputIndexList: [UInt64]? = nil) {
            self.monitorId = monitorId
            self.audibleInputIndexList = audibleInputIndexList
        }

        enum CodingKeys: String, CodingKey {
            case monitorId = "MonitorId"
            case audibleInputIndexList = "AudibleInputIndexList"
        }
    }

    /// StartLiveStreamMonitor返回参数结构体
    public struct StartLiveStreamMonitorResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 启动直播流监播任务
    ///
    /// 该接口用来启动直播流监播任务。
    @inlinable @discardableResult
    public func startLiveStreamMonitor(_ input: StartLiveStreamMonitorRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartLiveStreamMonitorResponse> {
        self.client.execute(action: "StartLiveStreamMonitor", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 启动直播流监播任务
    ///
    /// 该接口用来启动直播流监播任务。
    @inlinable @discardableResult
    public func startLiveStreamMonitor(_ input: StartLiveStreamMonitorRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartLiveStreamMonitorResponse {
        try await self.client.execute(action: "StartLiveStreamMonitor", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 启动直播流监播任务
    ///
    /// 该接口用来启动直播流监播任务。
    @inlinable @discardableResult
    public func startLiveStreamMonitor(monitorId: String, audibleInputIndexList: [UInt64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartLiveStreamMonitorResponse> {
        self.startLiveStreamMonitor(.init(monitorId: monitorId, audibleInputIndexList: audibleInputIndexList), region: region, logger: logger, on: eventLoop)
    }

    /// 启动直播流监播任务
    ///
    /// 该接口用来启动直播流监播任务。
    @inlinable @discardableResult
    public func startLiveStreamMonitor(monitorId: String, audibleInputIndexList: [UInt64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartLiveStreamMonitorResponse {
        try await self.startLiveStreamMonitor(.init(monitorId: monitorId, audibleInputIndexList: audibleInputIndexList), region: region, logger: logger, on: eventLoop)
    }
}
