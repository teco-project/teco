//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Live {
    /// DeleteLiveRecordRule请求参数结构体
    public struct DeleteLiveRecordRuleRequest: TCRequestModel {
        /// 推流域名。
        /// 域名+AppName+StreamName唯一标识单个转码规则，如需删除需要强匹配，例如AppName为空也需要传空字符串进行强匹配。
        public let domainName: String
        
        /// 推流路径，与推流和播放地址中的AppName保持一致，默认为 live。
        /// 域名+AppName+StreamName唯一标识单个转码规则，如需删除需要强匹配，例如AppName为空也需要传空字符串进行强匹配。
        public let appName: String?
        
        /// 流名称。
        /// 域名+AppName+StreamName唯一标识单个转码规则，如需删除需要强匹配，例如AppName为空也需要传空字符串进行强匹配。
        public let streamName: String?
        
        public init (domainName: String, appName: String? = nil, streamName: String? = nil) {
            self.domainName = domainName
            self.appName = appName
            self.streamName = streamName
        }
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
        }
    }
    
    /// DeleteLiveRecordRule返回参数结构体
    public struct DeleteLiveRecordRuleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 删除录制规则
    ///
    /// 删除录制规则。
    @inlinable
    public func deleteLiveRecordRule(_ input: DeleteLiveRecordRuleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteLiveRecordRuleResponse > {
        self.client.execute(action: "DeleteLiveRecordRule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除录制规则
    ///
    /// 删除录制规则。
    @inlinable
    public func deleteLiveRecordRule(_ input: DeleteLiveRecordRuleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLiveRecordRuleResponse {
        try await self.client.execute(action: "DeleteLiveRecordRule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
