//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Live {
    /// 获取禁推流列表
    ///
    /// 获取禁推流列表。
    /// 注意：该接口仅作为直播辅助查询接口，重要业务场景不可强依赖该接口。
    @inlinable
    public func describeLiveForbidStreamList(_ input: DescribeLiveForbidStreamListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeLiveForbidStreamListResponse > {
        self.client.execute(action: "DescribeLiveForbidStreamList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取禁推流列表
    ///
    /// 获取禁推流列表。
    /// 注意：该接口仅作为直播辅助查询接口，重要业务场景不可强依赖该接口。
    @inlinable
    public func describeLiveForbidStreamList(_ input: DescribeLiveForbidStreamListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveForbidStreamListResponse {
        try await self.client.execute(action: "DescribeLiveForbidStreamList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeLiveForbidStreamList请求参数结构体
    public struct DescribeLiveForbidStreamListRequest: TCRequestModel {
        /// 取得第几页，默认1。
        public let pageNum: Int64?
        
        /// 每页大小，最大100。 
        /// 取值：1~100之前的任意整数。
        /// 默认值：10。
        public let pageSize: Int64?
        
        /// 按流名称查询。
        public let streamName: String?
        
        public init (pageNum: Int64?, pageSize: Int64?, streamName: String?) {
            self.pageNum = pageNum
            self.pageSize = pageSize
            self.streamName = streamName
        }
        
        enum CodingKeys: String, CodingKey {
            case pageNum = "PageNum"
            case pageSize = "PageSize"
            case streamName = "StreamName"
        }
    }
    
    /// DescribeLiveForbidStreamList返回参数结构体
    public struct DescribeLiveForbidStreamListResponse: TCResponseModel {
        /// 符合条件的总个数。
        public let totalNum: Int64
        
        /// 总页数。
        public let totalPage: Int64
        
        /// 分页的页码。
        public let pageNum: Int64
        
        /// 每页显示的条数。
        public let pageSize: Int64
        
        /// 禁推流列表。
        public let forbidStreamList: [ForbidStreamInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalNum = "TotalNum"
            case totalPage = "TotalPage"
            case pageNum = "PageNum"
            case pageSize = "PageSize"
            case forbidStreamList = "ForbidStreamList"
            case requestId = "RequestId"
        }
    }
}
