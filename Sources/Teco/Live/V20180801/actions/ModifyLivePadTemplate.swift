//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// ModifyLivePadTemplate请求参数结构体
    public struct ModifyLivePadTemplateRequest: TCRequestModel {
        /// 模板id。
        public let templateId: UInt64

        /// 垫片内容。
        public let url: String

        /// 断流等待时间。
        /// 取值范围：0-30000。
        /// 单位：ms。
        public let waitDuration: UInt64

        /// 最大垫片时长。
        /// 取值范围：0 - 正无穷。
        /// 单位：ms。
        public let maxDuration: UInt64

        /// 模板名称。
        /// 长度上限：255字节。
        /// 仅支持中文、英文、数字、_、-。
        public let templateName: String

        /// 描述信息。
        /// 长度上限：1024字节。
        /// 仅支持中文、英文、数字、_、-。
        public let description: String?

        /// 垫片内容类型： 1：图片，2：视频。 默认值：1。
        public let type: UInt64?

        public init(templateId: UInt64, url: String, waitDuration: UInt64, maxDuration: UInt64, templateName: String, description: String? = nil, type: UInt64? = nil) {
            self.templateId = templateId
            self.url = url
            self.waitDuration = waitDuration
            self.maxDuration = maxDuration
            self.templateName = templateName
            self.description = description
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case url = "Url"
            case waitDuration = "WaitDuration"
            case maxDuration = "MaxDuration"
            case templateName = "TemplateName"
            case description = "Description"
            case type = "Type"
        }
    }

    /// ModifyLivePadTemplate返回参数结构体
    public struct ModifyLivePadTemplateResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改直播垫片模板
    ///
    /// 修改直播垫片模板。
    @inlinable @discardableResult
    public func modifyLivePadTemplate(_ input: ModifyLivePadTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLivePadTemplateResponse> {
        self.client.execute(action: "ModifyLivePadTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改直播垫片模板
    ///
    /// 修改直播垫片模板。
    @inlinable @discardableResult
    public func modifyLivePadTemplate(_ input: ModifyLivePadTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLivePadTemplateResponse {
        try await self.client.execute(action: "ModifyLivePadTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改直播垫片模板
    ///
    /// 修改直播垫片模板。
    @inlinable @discardableResult
    public func modifyLivePadTemplate(templateId: UInt64, url: String, waitDuration: UInt64, maxDuration: UInt64, templateName: String, description: String? = nil, type: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLivePadTemplateResponse> {
        self.modifyLivePadTemplate(.init(templateId: templateId, url: url, waitDuration: waitDuration, maxDuration: maxDuration, templateName: templateName, description: description, type: type), region: region, logger: logger, on: eventLoop)
    }

    /// 修改直播垫片模板
    ///
    /// 修改直播垫片模板。
    @inlinable @discardableResult
    public func modifyLivePadTemplate(templateId: UInt64, url: String, waitDuration: UInt64, maxDuration: UInt64, templateName: String, description: String? = nil, type: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLivePadTemplateResponse {
        try await self.modifyLivePadTemplate(.init(templateId: templateId, url: url, waitDuration: waitDuration, maxDuration: maxDuration, templateName: templateName, description: description, type: type), region: region, logger: logger, on: eventLoop)
    }
}
