//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// DescribeLiveStreamMonitorList请求参数结构体
    public struct DescribeLiveStreamMonitorListRequest: TCRequestModel {
        /// 查询列表时的起始偏移。
        public let index: UInt64

        /// 本次查询的记录个数。最小值为1。
        public let count: UInt64

        public init(index: UInt64, count: UInt64) {
            self.index = index
            self.count = count
        }

        enum CodingKeys: String, CodingKey {
            case index = "Index"
            case count = "Count"
        }
    }

    /// DescribeLiveStreamMonitorList返回参数结构体
    public struct DescribeLiveStreamMonitorListResponse: TCResponseModel {
        /// 账号下的直播流监播任务个数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalNum: UInt64?

        /// 直播流监播任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let liveStreamMonitors: [LiveStreamMonitorInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalNum = "TotalNum"
            case liveStreamMonitors = "LiveStreamMonitors"
            case requestId = "RequestId"
        }
    }

    /// 查询直播流监播任务配置列表
    ///
    /// 该接口用来查询直播流监播任务配置的列表信息。
    @inlinable
    public func describeLiveStreamMonitorList(_ input: DescribeLiveStreamMonitorListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveStreamMonitorListResponse> {
        self.client.execute(action: "DescribeLiveStreamMonitorList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询直播流监播任务配置列表
    ///
    /// 该接口用来查询直播流监播任务配置的列表信息。
    @inlinable
    public func describeLiveStreamMonitorList(_ input: DescribeLiveStreamMonitorListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveStreamMonitorListResponse {
        try await self.client.execute(action: "DescribeLiveStreamMonitorList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询直播流监播任务配置列表
    ///
    /// 该接口用来查询直播流监播任务配置的列表信息。
    @inlinable
    public func describeLiveStreamMonitorList(index: UInt64, count: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveStreamMonitorListResponse> {
        self.describeLiveStreamMonitorList(.init(index: index, count: count), region: region, logger: logger, on: eventLoop)
    }

    /// 查询直播流监播任务配置列表
    ///
    /// 该接口用来查询直播流监播任务配置的列表信息。
    @inlinable
    public func describeLiveStreamMonitorList(index: UInt64, count: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveStreamMonitorListResponse {
        try await self.describeLiveStreamMonitorList(.init(index: index, count: count), region: region, logger: logger, on: eventLoop)
    }
}
