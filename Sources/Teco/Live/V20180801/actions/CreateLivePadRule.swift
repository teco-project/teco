//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// CreateLivePadRule请求参数结构体
    public struct CreateLivePadRuleRequest: TCRequestModel {
        /// 推流域名。
        public let domainName: String

        /// 模板 ID。
        public let templateId: Int64

        /// 推流路径，与推流和播放地址中的AppName保持一致，默认为 live。
        public let appName: String?

        /// 流名称。
        /// 注：如果本参数设置为非空字符串，规则将只对此推流起作用。
        public let streamName: String?

        public init(domainName: String, templateId: Int64, appName: String? = nil, streamName: String? = nil) {
            self.domainName = domainName
            self.templateId = templateId
            self.appName = appName
            self.streamName = streamName
        }

        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case templateId = "TemplateId"
            case appName = "AppName"
            case streamName = "StreamName"
        }
    }

    /// CreateLivePadRule返回参数结构体
    public struct CreateLivePadRuleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建直播垫片规则
    ///
    /// 创建直播垫片规则。
    @inlinable @discardableResult
    public func createLivePadRule(_ input: CreateLivePadRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLivePadRuleResponse> {
        self.client.execute(action: "CreateLivePadRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建直播垫片规则
    ///
    /// 创建直播垫片规则。
    @inlinable @discardableResult
    public func createLivePadRule(_ input: CreateLivePadRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLivePadRuleResponse {
        try await self.client.execute(action: "CreateLivePadRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建直播垫片规则
    ///
    /// 创建直播垫片规则。
    @inlinable @discardableResult
    public func createLivePadRule(domainName: String, templateId: Int64, appName: String? = nil, streamName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLivePadRuleResponse> {
        self.createLivePadRule(.init(domainName: domainName, templateId: templateId, appName: appName, streamName: streamName), region: region, logger: logger, on: eventLoop)
    }

    /// 创建直播垫片规则
    ///
    /// 创建直播垫片规则。
    @inlinable @discardableResult
    public func createLivePadRule(domainName: String, templateId: Int64, appName: String? = nil, streamName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLivePadRuleResponse {
        try await self.createLivePadRule(.init(domainName: domainName, templateId: templateId, appName: appName, streamName: streamName), region: region, logger: logger, on: eventLoop)
    }
}
