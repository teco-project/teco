//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// DescribeStreamPlayInfoList请求参数结构体
    public struct DescribeStreamPlayInfoListRequest: TCRequest {
        /// 起始时间点，接口查询支持两种时间格式：
        /// 1）YYYY-MM-DDThh:mm:ssZ：UTC时间格式，详见IOS日期格式说明文档: https://cloud.tencent.com/document/product/266/11732#I
        /// 2）yyyy-MM-dd HH:mm:ss：使用此格式时，默认代表北京时间。
        /// 开始时间和结束时间的格式需要保持一致。
        public let startTime: String

        /// 结束时间点，接口查询支持两种时间格式：
        /// 1）YYYY-MM-DDThh:mm:ssZ：UTC时间格式，详见IOS日期格式说明文档: https://cloud.tencent.com/document/product/266/11732#I
        /// 2）yyyy-MM-dd HH:mm:ss：使用此格式时，默认代表北京时间。
        /// 开始时间和结束时间的格式需要保持一致。结束时间和开始时间跨度不支持超过24小时，支持距当前时间一个月内的数据查询。
        public let endTime: String

        /// 播放域名，
        /// 若不填，则为查询所有播放域名的在线流数据。
        public let playDomain: String?

        /// 流名称，精确匹配。
        /// 若不填，则为查询总体播放数据。
        public let streamName: String?

        /// 推流路径，与播放地址中的AppName保持一致，会精确匹配，在同时传递了StreamName时生效。
        /// 若不填，则为查询总体播放数据。
        public let appName: String?

        /// 服务名称，可选值包括LVB(标准直播)，LEB(快直播)，不填则查LVB+LEB总值。
        public let serviceName: String?

        public init(startTime: String, endTime: String, playDomain: String? = nil, streamName: String? = nil, appName: String? = nil, serviceName: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.playDomain = playDomain
            self.streamName = streamName
            self.appName = appName
            self.serviceName = serviceName
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case playDomain = "PlayDomain"
            case streamName = "StreamName"
            case appName = "AppName"
            case serviceName = "ServiceName"
        }
    }

    /// DescribeStreamPlayInfoList返回参数结构体
    public struct DescribeStreamPlayInfoListResponse: TCResponse {
        /// 统计信息列表，时间粒度是1分钟。
        public let dataInfoList: [DayStreamPlayInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dataInfoList = "DataInfoList"
            case requestId = "RequestId"
        }
    }

    /// 查询流的播放信息列表
    ///
    /// 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
    /// 查询播放数据，支持按流名称查询详细播放数据，也可按播放域名查询详细总数据，数据延迟4分钟左右。
    @inlinable
    public func describeStreamPlayInfoList(_ input: DescribeStreamPlayInfoListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStreamPlayInfoListResponse> {
        self.client.execute(action: "DescribeStreamPlayInfoList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询流的播放信息列表
    ///
    /// 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
    /// 查询播放数据，支持按流名称查询详细播放数据，也可按播放域名查询详细总数据，数据延迟4分钟左右。
    @inlinable
    public func describeStreamPlayInfoList(_ input: DescribeStreamPlayInfoListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStreamPlayInfoListResponse {
        try await self.client.execute(action: "DescribeStreamPlayInfoList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询流的播放信息列表
    ///
    /// 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
    /// 查询播放数据，支持按流名称查询详细播放数据，也可按播放域名查询详细总数据，数据延迟4分钟左右。
    @inlinable
    public func describeStreamPlayInfoList(startTime: String, endTime: String, playDomain: String? = nil, streamName: String? = nil, appName: String? = nil, serviceName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStreamPlayInfoListResponse> {
        self.describeStreamPlayInfoList(.init(startTime: startTime, endTime: endTime, playDomain: playDomain, streamName: streamName, appName: appName, serviceName: serviceName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询流的播放信息列表
    ///
    /// 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
    /// 查询播放数据，支持按流名称查询详细播放数据，也可按播放域名查询详细总数据，数据延迟4分钟左右。
    @inlinable
    public func describeStreamPlayInfoList(startTime: String, endTime: String, playDomain: String? = nil, streamName: String? = nil, appName: String? = nil, serviceName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStreamPlayInfoListResponse {
        try await self.describeStreamPlayInfoList(.init(startTime: startTime, endTime: endTime, playDomain: playDomain, streamName: streamName, appName: appName, serviceName: serviceName), region: region, logger: logger, on: eventLoop)
    }
}
