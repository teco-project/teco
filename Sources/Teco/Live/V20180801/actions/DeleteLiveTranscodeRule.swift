//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Live {
    /// 删除转码规则
    ///
    /// 删除转码规则。
    /// DomainName+AppName+StreamName+TemplateId唯一标识单个转码规则，如需删除需要强匹配。其中TemplateId必填，其余参数为空时也需要传空字符串进行强匹配。
    @inlinable
    public func deleteLiveTranscodeRule(_ input: DeleteLiveTranscodeRuleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteLiveTranscodeRuleResponse > {
        self.client.execute(action: "DeleteLiveTranscodeRule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除转码规则
    ///
    /// 删除转码规则。
    /// DomainName+AppName+StreamName+TemplateId唯一标识单个转码规则，如需删除需要强匹配。其中TemplateId必填，其余参数为空时也需要传空字符串进行强匹配。
    @inlinable
    public func deleteLiveTranscodeRule(_ input: DeleteLiveTranscodeRuleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLiveTranscodeRuleResponse {
        try await self.client.execute(action: "DeleteLiveTranscodeRule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DeleteLiveTranscodeRule请求参数结构体
    public struct DeleteLiveTranscodeRuleRequest: TCRequestModel {
        /// 播放域名。
        public let domainName: String
        
        /// 推流路径，与推流和播放地址中的AppName保持一致，默认为 live。
        public let appName: String
        
        /// 流名称。
        public let streamName: String
        
        /// 模板ID。
        public let templateId: Int64
        
        public init (domainName: String, appName: String, streamName: String, templateId: Int64) {
            self.domainName = domainName
            self.appName = appName
            self.streamName = streamName
            self.templateId = templateId
        }
        
        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
            case templateId = "TemplateId"
        }
    }
    
    /// DeleteLiveTranscodeRule返回参数结构体
    public struct DeleteLiveTranscodeRuleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}