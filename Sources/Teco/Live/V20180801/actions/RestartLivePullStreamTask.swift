//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// RestartLivePullStreamTask请求参数结构体
    public struct RestartLivePullStreamTaskRequest: TCRequest {
        /// 任务 Id。
        public let taskId: String

        /// 操作人备注名称。
        public let `operator`: String

        public init(taskId: String, operator: String) {
            self.taskId = taskId
            self.operator = `operator`
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case `operator` = "Operator"
        }
    }

    /// RestartLivePullStreamTask返回参数结构体
    public struct RestartLivePullStreamTaskResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 重启直播拉流任务
    ///
    /// 将正在运行的拉流转推任务进行重启。
    /// 注意：
    /// 1. 重启任务会造成推流中断。
    /// 2. 点播源任务的重启，会根据VodRefreshType决定是续播还是从头开始播。
    @inlinable @discardableResult
    public func restartLivePullStreamTask(_ input: RestartLivePullStreamTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RestartLivePullStreamTaskResponse> {
        self.client.execute(action: "RestartLivePullStreamTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 重启直播拉流任务
    ///
    /// 将正在运行的拉流转推任务进行重启。
    /// 注意：
    /// 1. 重启任务会造成推流中断。
    /// 2. 点播源任务的重启，会根据VodRefreshType决定是续播还是从头开始播。
    @inlinable @discardableResult
    public func restartLivePullStreamTask(_ input: RestartLivePullStreamTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RestartLivePullStreamTaskResponse {
        try await self.client.execute(action: "RestartLivePullStreamTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 重启直播拉流任务
    ///
    /// 将正在运行的拉流转推任务进行重启。
    /// 注意：
    /// 1. 重启任务会造成推流中断。
    /// 2. 点播源任务的重启，会根据VodRefreshType决定是续播还是从头开始播。
    @inlinable @discardableResult
    public func restartLivePullStreamTask(taskId: String, operator: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RestartLivePullStreamTaskResponse> {
        self.restartLivePullStreamTask(.init(taskId: taskId, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }

    /// 重启直播拉流任务
    ///
    /// 将正在运行的拉流转推任务进行重启。
    /// 注意：
    /// 1. 重启任务会造成推流中断。
    /// 2. 点播源任务的重启，会根据VodRefreshType决定是续播还是从头开始播。
    @inlinable @discardableResult
    public func restartLivePullStreamTask(taskId: String, operator: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RestartLivePullStreamTaskResponse {
        try await self.restartLivePullStreamTask(.init(taskId: taskId, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }
}
