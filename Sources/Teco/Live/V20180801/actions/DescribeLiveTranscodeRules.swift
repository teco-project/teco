//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Live {
    /// DescribeLiveTranscodeRules请求参数结构体
    public struct DescribeLiveTranscodeRulesRequest: TCRequestModel {
        /// 要筛选的模板ID数组。
        public let templateIds: [Int64]?

        /// 要筛选的域名数组。
        public let domainNames: [String]?

        public init(templateIds: [Int64]? = nil, domainNames: [String]? = nil) {
            self.templateIds = templateIds
            self.domainNames = domainNames
        }

        enum CodingKeys: String, CodingKey {
            case templateIds = "TemplateIds"
            case domainNames = "DomainNames"
        }
    }

    /// DescribeLiveTranscodeRules返回参数结构体
    public struct DescribeLiveTranscodeRulesResponse: TCResponseModel {
        /// 转码规则列表。
        public let rules: [RuleInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case requestId = "RequestId"
        }
    }

    /// 获取转码规则列表
    @inlinable
    public func describeLiveTranscodeRules(_ input: DescribeLiveTranscodeRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveTranscodeRulesResponse> {
        self.client.execute(action: "DescribeLiveTranscodeRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取转码规则列表
    @inlinable
    public func describeLiveTranscodeRules(_ input: DescribeLiveTranscodeRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveTranscodeRulesResponse {
        try await self.client.execute(action: "DescribeLiveTranscodeRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取转码规则列表
    @inlinable
    public func describeLiveTranscodeRules(templateIds: [Int64]? = nil, domainNames: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLiveTranscodeRulesResponse> {
        self.describeLiveTranscodeRules(.init(templateIds: templateIds, domainNames: domainNames), region: region, logger: logger, on: eventLoop)
    }

    /// 获取转码规则列表
    @inlinable
    public func describeLiveTranscodeRules(templateIds: [Int64]? = nil, domainNames: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveTranscodeRulesResponse {
        try await self.describeLiveTranscodeRules(.init(templateIds: templateIds, domainNames: domainNames), region: region, logger: logger, on: eventLoop)
    }
}
