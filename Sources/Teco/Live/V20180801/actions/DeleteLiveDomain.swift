//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// DeleteLiveDomain请求参数结构体
    public struct DeleteLiveDomainRequest: TCRequestModel {
        /// 要删除的域名
        public let domainName: String

        /// 类型。0-推流，1-播放
        public let domainType: UInt64

        public init(domainName: String, domainType: UInt64) {
            self.domainName = domainName
            self.domainType = domainType
        }

        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case domainType = "DomainType"
        }
    }

    /// DeleteLiveDomain返回参数结构体
    public struct DeleteLiveDomainResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除域名
    ///
    /// 删除已添加的直播域名
    @inlinable @discardableResult
    public func deleteLiveDomain(_ input: DeleteLiveDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLiveDomainResponse> {
        self.client.execute(action: "DeleteLiveDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除域名
    ///
    /// 删除已添加的直播域名
    @inlinable @discardableResult
    public func deleteLiveDomain(_ input: DeleteLiveDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLiveDomainResponse {
        try await self.client.execute(action: "DeleteLiveDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除域名
    ///
    /// 删除已添加的直播域名
    @inlinable @discardableResult
    public func deleteLiveDomain(domainName: String, domainType: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLiveDomainResponse> {
        self.deleteLiveDomain(.init(domainName: domainName, domainType: domainType), region: region, logger: logger, on: eventLoop)
    }

    /// 删除域名
    ///
    /// 删除已添加的直播域名
    @inlinable @discardableResult
    public func deleteLiveDomain(domainName: String, domainType: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLiveDomainResponse {
        try await self.deleteLiveDomain(.init(domainName: domainName, domainType: domainType), region: region, logger: logger, on: eventLoop)
    }
}
