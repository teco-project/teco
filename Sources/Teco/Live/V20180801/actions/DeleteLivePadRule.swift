//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Live {
    /// DeleteLivePadRule请求参数结构体
    public struct DeleteLivePadRuleRequest: TCRequestModel {
        /// 推流域名。
        /// 域名+AppName+StreamName唯一标识单个转码规则，如需删除需要强匹配，例如AppName为空也需要传空字符串进行强匹配。
        public let domainName: String

        /// 推流路径，与推流和播放地址中的AppName保持一致，默认为 live。
        /// 域名+AppName+StreamName唯一标识单个转码规则，如需删除需要强匹配，例如AppName为空也需要传空字符串进行强匹配。
        public let appName: String

        /// 流名称。
        /// 域名+AppName+StreamName唯一标识单个转码规则，如需删除需要强匹配，例如AppName为空也需要传空字符串进行强匹配。
        public let streamName: String

        /// 直播垫片模板id。
        public let templateId: UInt64

        public init(domainName: String, appName: String, streamName: String, templateId: UInt64) {
            self.domainName = domainName
            self.appName = appName
            self.streamName = streamName
            self.templateId = templateId
        }

        enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case appName = "AppName"
            case streamName = "StreamName"
            case templateId = "TemplateId"
        }
    }

    /// DeleteLivePadRule返回参数结构体
    public struct DeleteLivePadRuleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除直播垫片规则
    ///
    /// 删除直播垫片规则。
    @inlinable @discardableResult
    public func deleteLivePadRule(_ input: DeleteLivePadRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLivePadRuleResponse> {
        self.client.execute(action: "DeleteLivePadRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除直播垫片规则
    ///
    /// 删除直播垫片规则。
    @inlinable @discardableResult
    public func deleteLivePadRule(_ input: DeleteLivePadRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLivePadRuleResponse {
        try await self.client.execute(action: "DeleteLivePadRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除直播垫片规则
    ///
    /// 删除直播垫片规则。
    @inlinable @discardableResult
    public func deleteLivePadRule(domainName: String, appName: String, streamName: String, templateId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteLivePadRuleResponse> {
        self.deleteLivePadRule(.init(domainName: domainName, appName: appName, streamName: streamName, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除直播垫片规则
    ///
    /// 删除直播垫片规则。
    @inlinable @discardableResult
    public func deleteLivePadRule(domainName: String, appName: String, streamName: String, templateId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteLivePadRuleResponse {
        try await self.deleteLivePadRule(.init(domainName: domainName, appName: appName, streamName: streamName, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }
}
