//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Live {
    /// DescribeLiveRecordTemplates请求参数结构体
    public struct DescribeLiveRecordTemplatesRequest: TCRequestModel {
        /// 是否属于慢直播模板，默认：0。
        /// 0： 标准直播。
        /// 1：慢直播。
        public let isDelayLive: Int64?
        
        public init (isDelayLive: Int64? = nil) {
            self.isDelayLive = isDelayLive
        }
        
        enum CodingKeys: String, CodingKey {
            case isDelayLive = "IsDelayLive"
        }
    }
    
    /// DescribeLiveRecordTemplates返回参数结构体
    public struct DescribeLiveRecordTemplatesResponse: TCResponseModel {
        /// 录制模板信息列表。
        public let templates: [RecordTemplateInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case templates = "Templates"
            case requestId = "RequestId"
        }
    }
    
    /// 获取录制模板列表
    ///
    /// 获取录制模板列表。
    @inlinable
    public func describeLiveRecordTemplates(_ input: DescribeLiveRecordTemplatesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeLiveRecordTemplatesResponse > {
        self.client.execute(action: "DescribeLiveRecordTemplates", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取录制模板列表
    ///
    /// 获取录制模板列表。
    @inlinable
    public func describeLiveRecordTemplates(_ input: DescribeLiveRecordTemplatesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLiveRecordTemplatesResponse {
        try await self.client.execute(action: "DescribeLiveRecordTemplates", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
