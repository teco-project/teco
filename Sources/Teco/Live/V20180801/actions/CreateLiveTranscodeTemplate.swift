//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Live {
    /// CreateLiveTranscodeTemplate请求参数结构体
    public struct CreateLiveTranscodeTemplateRequest: TCRequestModel {
        /// 模板名称，例： 900p 仅支持字母和数字的组合。
        /// 长度限制：
        ///   标准转码：1-10个字符
        ///   极速高清转码：3-10个字符
        public let templateName: String

        /// 视频码率。范围：0kbps - 8000kbps。
        /// 0为保持原始码率。
        /// 注: 转码模板有码率唯一要求，最终保存的码率可能与输入码率有所差别。
        public let videoBitrate: Int64

        /// 音频编码：aac，默认aac。
        /// 注意：当前该参数未生效，待后续支持！
        public let acodec: String?

        /// 音频码率，默认0。
        /// 范围：0-500。
        public let audioBitrate: Int64?

        /// 视频编码：h264/h265/origin，默认origin。
        ///
        /// origin: 保持原始编码格式
        public let vcodec: String?

        /// 模板描述。
        public let description: String?

        /// 是否保留视频，0：否，1：是。默认1。
        public let needVideo: Int64?

        /// 宽，默认0。
        /// 范围[0-3000]
        /// 数值必须是2的倍数，0是原始宽度
        public let width: Int64?

        /// 是否保留音频，0：否，1：是。默认1。
        public let needAudio: Int64?

        /// 高，默认0。
        /// 范围[0-3000]
        /// 数值必须是2的倍数，0是原始高度。
        /// 极速高清模板（AiTransCode = 1 的时候）必须传。
        public let height: Int64?

        /// 帧率，默认0。
        /// 范围0-60fps
        public let fps: Int64?

        /// 关键帧间隔，单位：秒。
        /// 默认原始的间隔
        /// 范围2-6
        public let gop: Int64?

        /// 旋转角度，默认0。
        /// 可取值：0，90，180，270
        public let rotate: Int64?

        /// 编码质量：
        /// baseline/main/high。默认baseline
        public let profile: String?

        /// 当设置的码率>原始码率时，是否以原始码率为准。
        /// 0：否， 1：是
        /// 默认 0。
        public let bitrateToOrig: Int64?

        /// 当设置的高度>原始高度时，是否以原始高度为准。
        /// 0：否， 1：是
        /// 默认 0。
        public let heightToOrig: Int64?

        /// 当设置的帧率>原始帧率时，是否以原始帧率为准。
        /// 0：否， 1：是
        /// 默认 0。
        public let fpsToOrig: Int64?

        /// 是否是极速高清模板，0：否，1：是。默认0。
        public let aiTransCode: Int64?

        /// 极速高清视频码率压缩比。
        /// 极速高清目标码率=VideoBitrate * (1-AdaptBitratePercent)
        ///
        /// 取值范围：0.0到0.5
        public let adaptBitratePercent: Float?

        /// 是否以短边作为高度，0：否，1：是。默认0。
        public let shortEdgeAsHeight: Int64?

        /// DRM 加密类型，可选值：fairplay、normalaes、widevine。
        /// 不传递或着为空字符串，清空之前的DRM配置。
        public let drmType: String?

        /// DRM 加密项，可选值：AUDIO、SD、HD、UHD1、UHD2，后四个为一组，同组中的内容只能选一个。
        /// 不传递或着为空字符串，清空之前的DRM配置。
        public let drmTracks: String?

        public init(templateName: String, videoBitrate: Int64, acodec: String? = nil, audioBitrate: Int64? = nil, vcodec: String? = nil, description: String? = nil, needVideo: Int64? = nil, width: Int64? = nil, needAudio: Int64? = nil, height: Int64? = nil, fps: Int64? = nil, gop: Int64? = nil, rotate: Int64? = nil, profile: String? = nil, bitrateToOrig: Int64? = nil, heightToOrig: Int64? = nil, fpsToOrig: Int64? = nil, aiTransCode: Int64? = nil, adaptBitratePercent: Float? = nil, shortEdgeAsHeight: Int64? = nil, drmType: String? = nil, drmTracks: String? = nil) {
            self.templateName = templateName
            self.videoBitrate = videoBitrate
            self.acodec = acodec
            self.audioBitrate = audioBitrate
            self.vcodec = vcodec
            self.description = description
            self.needVideo = needVideo
            self.width = width
            self.needAudio = needAudio
            self.height = height
            self.fps = fps
            self.gop = gop
            self.rotate = rotate
            self.profile = profile
            self.bitrateToOrig = bitrateToOrig
            self.heightToOrig = heightToOrig
            self.fpsToOrig = fpsToOrig
            self.aiTransCode = aiTransCode
            self.adaptBitratePercent = adaptBitratePercent
            self.shortEdgeAsHeight = shortEdgeAsHeight
            self.drmType = drmType
            self.drmTracks = drmTracks
        }

        enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case videoBitrate = "VideoBitrate"
            case acodec = "Acodec"
            case audioBitrate = "AudioBitrate"
            case vcodec = "Vcodec"
            case description = "Description"
            case needVideo = "NeedVideo"
            case width = "Width"
            case needAudio = "NeedAudio"
            case height = "Height"
            case fps = "Fps"
            case gop = "Gop"
            case rotate = "Rotate"
            case profile = "Profile"
            case bitrateToOrig = "BitrateToOrig"
            case heightToOrig = "HeightToOrig"
            case fpsToOrig = "FpsToOrig"
            case aiTransCode = "AiTransCode"
            case adaptBitratePercent = "AdaptBitratePercent"
            case shortEdgeAsHeight = "ShortEdgeAsHeight"
            case drmType = "DRMType"
            case drmTracks = "DRMTracks"
        }
    }

    /// CreateLiveTranscodeTemplate返回参数结构体
    public struct CreateLiveTranscodeTemplateResponse: TCResponseModel {
        /// 模板Id。
        public let templateId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case requestId = "RequestId"
        }
    }

    /// 创建转码模板
    ///
    /// 创建转码模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveTranscodeRule](/document/product/267/32647)接口，将返回的模板id绑定到流使用。
    /// <br>转码相关文档：[直播转封装及转码](/document/product/267/32736)。
    @inlinable
    public func createLiveTranscodeTemplate(_ input: CreateLiveTranscodeTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLiveTranscodeTemplateResponse> {
        self.client.execute(action: "CreateLiveTranscodeTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建转码模板
    ///
    /// 创建转码模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveTranscodeRule](/document/product/267/32647)接口，将返回的模板id绑定到流使用。
    /// <br>转码相关文档：[直播转封装及转码](/document/product/267/32736)。
    @inlinable
    public func createLiveTranscodeTemplate(_ input: CreateLiveTranscodeTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLiveTranscodeTemplateResponse {
        try await self.client.execute(action: "CreateLiveTranscodeTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建转码模板
    ///
    /// 创建转码模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveTranscodeRule](/document/product/267/32647)接口，将返回的模板id绑定到流使用。
    /// <br>转码相关文档：[直播转封装及转码](/document/product/267/32736)。
    @inlinable
    public func createLiveTranscodeTemplate(templateName: String, videoBitrate: Int64, acodec: String? = nil, audioBitrate: Int64? = nil, vcodec: String? = nil, description: String? = nil, needVideo: Int64? = nil, width: Int64? = nil, needAudio: Int64? = nil, height: Int64? = nil, fps: Int64? = nil, gop: Int64? = nil, rotate: Int64? = nil, profile: String? = nil, bitrateToOrig: Int64? = nil, heightToOrig: Int64? = nil, fpsToOrig: Int64? = nil, aiTransCode: Int64? = nil, adaptBitratePercent: Float? = nil, shortEdgeAsHeight: Int64? = nil, drmType: String? = nil, drmTracks: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLiveTranscodeTemplateResponse> {
        self.createLiveTranscodeTemplate(.init(templateName: templateName, videoBitrate: videoBitrate, acodec: acodec, audioBitrate: audioBitrate, vcodec: vcodec, description: description, needVideo: needVideo, width: width, needAudio: needAudio, height: height, fps: fps, gop: gop, rotate: rotate, profile: profile, bitrateToOrig: bitrateToOrig, heightToOrig: heightToOrig, fpsToOrig: fpsToOrig, aiTransCode: aiTransCode, adaptBitratePercent: adaptBitratePercent, shortEdgeAsHeight: shortEdgeAsHeight, drmType: drmType, drmTracks: drmTracks), region: region, logger: logger, on: eventLoop)
    }

    /// 创建转码模板
    ///
    /// 创建转码模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveTranscodeRule](/document/product/267/32647)接口，将返回的模板id绑定到流使用。
    /// <br>转码相关文档：[直播转封装及转码](/document/product/267/32736)。
    @inlinable
    public func createLiveTranscodeTemplate(templateName: String, videoBitrate: Int64, acodec: String? = nil, audioBitrate: Int64? = nil, vcodec: String? = nil, description: String? = nil, needVideo: Int64? = nil, width: Int64? = nil, needAudio: Int64? = nil, height: Int64? = nil, fps: Int64? = nil, gop: Int64? = nil, rotate: Int64? = nil, profile: String? = nil, bitrateToOrig: Int64? = nil, heightToOrig: Int64? = nil, fpsToOrig: Int64? = nil, aiTransCode: Int64? = nil, adaptBitratePercent: Float? = nil, shortEdgeAsHeight: Int64? = nil, drmType: String? = nil, drmTracks: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLiveTranscodeTemplateResponse {
        try await self.createLiveTranscodeTemplate(.init(templateName: templateName, videoBitrate: videoBitrate, acodec: acodec, audioBitrate: audioBitrate, vcodec: vcodec, description: description, needVideo: needVideo, width: width, needAudio: needAudio, height: height, fps: fps, gop: gop, rotate: rotate, profile: profile, bitrateToOrig: bitrateToOrig, heightToOrig: heightToOrig, fpsToOrig: fpsToOrig, aiTransCode: aiTransCode, adaptBitratePercent: adaptBitratePercent, shortEdgeAsHeight: shortEdgeAsHeight, drmType: drmType, drmTracks: drmTracks), region: region, logger: logger, on: eventLoop)
    }
}
