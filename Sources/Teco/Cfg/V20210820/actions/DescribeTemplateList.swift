//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cfg {
    /// 查询经验库列表
    @inlinable
    public func describeTemplateList(_ input: DescribeTemplateListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeTemplateListResponse > {
        self.client.execute(action: "DescribeTemplateList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询经验库列表
    @inlinable
    public func describeTemplateList(_ input: DescribeTemplateListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTemplateListResponse {
        try await self.client.execute(action: "DescribeTemplateList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeTemplateList请求参数结构体
    public struct DescribeTemplateListRequest: TCRequestModel {
        /// 分页Limit, 最大值100
        public let limit: Int64
        
        /// 分页Offset
        public let offset: Int64
        
        /// 演练名称
        public let title: String?
        
        /// 标签键
        public let tag: [String]?
        
        /// 状态，1---使用中， 2---停用
        public let isUsed: Int64?
        
        /// 标签对
        public let tags: [TagWithDescribe]?
        
        public init (limit: Int64, offset: Int64, title: String?, tag: [String]?, isUsed: Int64?, tags: [TagWithDescribe]?) {
            self.limit = limit
            self.offset = offset
            self.title = title
            self.tag = tag
            self.isUsed = isUsed
            self.tags = tags
        }
        
        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case title = "Title"
            case tag = "Tag"
            case isUsed = "IsUsed"
            case tags = "Tags"
        }
    }
    
    /// DescribeTemplateList返回参数结构体
    public struct DescribeTemplateListResponse: TCResponseModel {
        /// 经验库列表
        public let templateList: [TemplateListItem]
        
        /// 列表数量
        public let total: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case templateList = "TemplateList"
            case total = "Total"
            case requestId = "RequestId"
        }
    }
}
