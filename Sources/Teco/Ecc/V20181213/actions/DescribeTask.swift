//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ecc {
    /// 查询异步任务结果
    ///
    /// 异步任务结果查询接口
    @inlinable
    public func describeTask(_ input: DescribeTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeTaskResponse > {
        self.client.execute(action: "DescribeTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询异步任务结果
    ///
    /// 异步任务结果查询接口
    @inlinable
    public func describeTask(_ input: DescribeTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskResponse {
        try await self.client.execute(action: "DescribeTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeTask请求参数结构体
    public struct DescribeTaskRequest: TCRequestModel {
        /// 任务 ID
        public let taskId: String
        
        /// 业务应用ID，与账号应用APPID无关，是用来方便客户管理服务的参数（暂时无需传入）。
        public let eccAppid: String?
        
        public init (taskId: String, eccAppid: String?) {
            self.taskId = taskId
            self.eccAppid = eccAppid
        }
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case eccAppid = "EccAppid"
        }
    }
    
    /// DescribeTask返回参数结构体
    public struct DescribeTaskResponse: TCResponseModel {
        /// 作文识别文本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let content: String?
        
        /// 整体的批改结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let correctData: CorrectData
        
        /// 任务状态，“Progressing”: 处理中（此时无结果返回）、“Finished”: 处理完成
        public let status: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case content = "Content"
            case correctData = "CorrectData"
            case status = "Status"
            case requestId = "RequestId"
        }
    }
}