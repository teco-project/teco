//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Youmall {
    /// DescribeShopInfo请求参数结构体
    public struct DescribeShopInfoRequest: TCPaginatedRequest {
        /// 偏移量：分页控制参数，第一页传0，第n页Offset=(n-1)*Limit
        public let offset: UInt64

        /// Limit:每页的数据项，最大100，超过100会被强制指定为100
        public let limit: UInt64

        public init(offset: UInt64, limit: UInt64) {
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeShopInfoResponse) -> DescribeShopInfoRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeShopInfoRequest(offset: self.offset + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeShopInfo返回参数结构体
    public struct DescribeShopInfoResponse: TCPaginatedResponse {
        /// 门店总数
        public let totalCount: UInt64

        /// 门店列表信息
        public let shopInfoSet: [ShopInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case shopInfoSet = "ShopInfoSet"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [ShopInfo] {
            self.shopInfoSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取客户所属门店列表
    ///
    /// 根据客户身份标识获取客户下所有的门店信息列表
    @inlinable
    public func describeShopInfo(_ input: DescribeShopInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeShopInfoResponse> {
        self.client.execute(action: "DescribeShopInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取客户所属门店列表
    ///
    /// 根据客户身份标识获取客户下所有的门店信息列表
    @inlinable
    public func describeShopInfo(_ input: DescribeShopInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeShopInfoResponse {
        try await self.client.execute(action: "DescribeShopInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取客户所属门店列表
    ///
    /// 根据客户身份标识获取客户下所有的门店信息列表
    @inlinable
    public func describeShopInfo(offset: UInt64, limit: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeShopInfoResponse> {
        self.describeShopInfo(.init(offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取客户所属门店列表
    ///
    /// 根据客户身份标识获取客户下所有的门店信息列表
    @inlinable
    public func describeShopInfo(offset: UInt64, limit: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeShopInfoResponse {
        try await self.describeShopInfo(.init(offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取客户所属门店列表
    ///
    /// 根据客户身份标识获取客户下所有的门店信息列表
    @inlinable
    public func describeShopInfoPaginated(_ input: DescribeShopInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [ShopInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeShopInfo, logger: logger, on: eventLoop)
    }

    /// 获取客户所属门店列表
    ///
    /// 根据客户身份标识获取客户下所有的门店信息列表
    @inlinable @discardableResult
    public func describeShopInfoPaginated(_ input: DescribeShopInfoRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeShopInfoResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeShopInfo, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取客户所属门店列表
    ///
    /// 根据客户身份标识获取客户下所有的门店信息列表
    ///
    /// - Returns: `AsyncSequence`s of `ShopInfo` and `DescribeShopInfoResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeShopInfoPaginator(_ input: DescribeShopInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeShopInfoRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeShopInfo, logger: logger, on: eventLoop)
    }
}
