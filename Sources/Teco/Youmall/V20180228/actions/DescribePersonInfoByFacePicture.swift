//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Youmall {
    /// DescribePersonInfoByFacePicture请求参数结构体
    public struct DescribePersonInfoByFacePictureRequest: TCRequestModel {
        /// 优mall集团id，通过"指定身份标识获取客户门店列表"接口获取
        public let companyId: String
        
        /// 优mall店铺id，通过"指定身份标识获取客户门店列表"接口获取
        public let shopId: Int64
        
        /// 人脸图片BASE编码
        public let picture: String
        
        public init (companyId: String, shopId: Int64, picture: String) {
            self.companyId = companyId
            self.shopId = shopId
            self.picture = picture
        }
        
        enum CodingKeys: String, CodingKey {
            case companyId = "CompanyId"
            case shopId = "ShopId"
            case picture = "Picture"
        }
    }
    
    /// DescribePersonInfoByFacePicture返回参数结构体
    public struct DescribePersonInfoByFacePictureResponse: TCResponseModel {
        /// 集团id
        public let companyId: String
        
        /// 店铺id
        public let shopId: Int64
        
        /// 顾客face id
        public let personId: Int64
        
        /// 顾客底图url
        public let pictureUrl: String
        
        /// 顾客类型（0表示普通顾客，1 白名单，2 表示黑名单，101表示集团白名单，102表示集团黑名单）
        public let personType: Int64
        
        /// 顾客首次进店时间
        // FIXME: Codable support not implemented for datetime yet.
        public let firstVisitTime: Date
        
        /// 顾客历史到访次数
        public let visitTimes: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case companyId = "CompanyId"
            case shopId = "ShopId"
            case personId = "PersonId"
            case pictureUrl = "PictureUrl"
            case personType = "PersonType"
            case firstVisitTime = "FirstVisitTime"
            case visitTimes = "VisitTimes"
            case requestId = "RequestId"
        }
    }
    
    /// 图片检索身份接口
    ///
    /// 通过上传人脸图片检索系统face id、顾客身份信息及底图
    @inlinable
    public func describePersonInfoByFacePicture(_ input: DescribePersonInfoByFacePictureRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePersonInfoByFacePictureResponse > {
        self.client.execute(action: "DescribePersonInfoByFacePicture", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 图片检索身份接口
    ///
    /// 通过上传人脸图片检索系统face id、顾客身份信息及底图
    @inlinable
    public func describePersonInfoByFacePicture(_ input: DescribePersonInfoByFacePictureRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePersonInfoByFacePictureResponse {
        try await self.client.execute(action: "DescribePersonInfoByFacePicture", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
