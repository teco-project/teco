//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case application = "ResourceNotFound.Application"
            case authActiveOrganization = "ResourceNotFound.AuthActiveOrganization"
            case document = "ResourceNotFound.Document"
            case errNotExistRole = "ResourceNotFound.ErrNotExistRole"
            case flow = "ResourceNotFound.Flow"
            case flowApprover = "ResourceNotFound.FlowApprover"
            case notExistDocument = "ResourceNotFound.NotExistDocument"
            case notExistFlow = "ResourceNotFound.NotExistFlow"
            case notExistResource = "ResourceNotFound.NotExistResource"
            case notExistTemplate = "ResourceNotFound.NotExistTemplate"
            case organization = "ResourceNotFound.Organization"
            case qrInfo = "ResourceNotFound.QrInfo"
            case resource = "ResourceNotFound.Resource"
            case superAdmin = "ResourceNotFound.SuperAdmin"
            case template = "ResourceNotFound.Template"
            case url = "ResourceNotFound.Url"
            case user = "ResourceNotFound.User"
            case verifyUser = "ResourceNotFound.VerifyUser"
            case other = "ResourceNotFound"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 应用号不存在或已删除。
        public static var application: ResourceNotFound {
            ResourceNotFound(.application)
        }
        
        public static var authActiveOrganization: ResourceNotFound {
            ResourceNotFound(.authActiveOrganization)
        }
        
        public static var document: ResourceNotFound {
            ResourceNotFound(.document)
        }
        
        public static var errNotExistRole: ResourceNotFound {
            ResourceNotFound(.errNotExistRole)
        }
        
        /// 流程不存在。
        public static var flow: ResourceNotFound {
            ResourceNotFound(.flow)
        }
        
        public static var flowApprover: ResourceNotFound {
            ResourceNotFound(.flowApprover)
        }
        
        /// 电子文档不存在。
        public static var notExistDocument: ResourceNotFound {
            ResourceNotFound(.notExistDocument)
        }
        
        /// 流程不存在。
        public static var notExistFlow: ResourceNotFound {
            ResourceNotFound(.notExistFlow)
        }
        
        /// 指定的资源不存在。
        public static var notExistResource: ResourceNotFound {
            ResourceNotFound(.notExistResource)
        }
        
        /// 模板不存在。
        public static var notExistTemplate: ResourceNotFound {
            ResourceNotFound(.notExistTemplate)
        }
        
        public static var organization: ResourceNotFound {
            ResourceNotFound(.organization)
        }
        
        public static var qrInfo: ResourceNotFound {
            ResourceNotFound(.qrInfo)
        }
        
        /// 资源不存在。
        public static var resource: ResourceNotFound {
            ResourceNotFound(.resource)
        }
        
        public static var superAdmin: ResourceNotFound {
            ResourceNotFound(.superAdmin)
        }
        
        /// 模板不存在。
        public static var template: ResourceNotFound {
            ResourceNotFound(.template)
        }
        
        /// 确认查询条件是否可以匹配到 Url
        public static var url: ResourceNotFound {
            ResourceNotFound(.url)
        }
        
        public static var user: ResourceNotFound {
            ResourceNotFound(.user)
        }
        
        public static var verifyUser: ResourceNotFound {
            ResourceNotFound(.verifyUser)
        }
        
        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }
    }
}

extension TCEssError.ResourceNotFound: Equatable {
    public static func == (lhs: TCEssError.ResourceNotFound, rhs: TCEssError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEssError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEssError.ResourceNotFound {
    /// - Returns: ``TCEssError`` that holds the same error and context.
    public func toEssError() -> TCEssError {
        guard let code = TCEssError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEssError(code, context: self.context)
    }
}

extension TCEssError.ResourceNotFound {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
