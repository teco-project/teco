//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case accountVerifyFail = "FailedOperation.AccountVerifyFail"
            case ageNotAchieveNormalLegal = "FailedOperation.AgeNotAchieveNormalLegal"
            case flowHasDocument = "FailedOperation.FlowHasDocument"
            case flowHasNoDocument = "FailedOperation.FlowHasNoDocument"
            case noSignReviewPass = "FailedOperation.NoSignReviewPass"
            case organizationExperienceChange = "FailedOperation.OrganizationExperienceChange"
            case organizationNameChanged = "FailedOperation.OrganizationNameChanged"
            case organizationNameNeedChange = "FailedOperation.OrganizationNameNeedChange"
            case preViewUrlFail = "FailedOperation.PreViewUrlFail"
            case qrCodeCreatorSignComponents = "FailedOperation.QrCodeCreatorSignComponents"
            case qrCodeSignUsers = "FailedOperation.QrCodeSignUsers"
            case qrCodeTemplateId = "FailedOperation.QrCodeTemplateId"
            case requestLimitExceeded = "FailedOperation.RequestLimitExceeded"
            case templateHasNoResource = "FailedOperation.TemplateHasNoResource"
            case userInfoNoMatch = "FailedOperation.UserInfoNoMatch"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 实名认证失败。
        public static var accountVerifyFail: FailedOperation {
            FailedOperation(.accountVerifyFail)
        }
        
        /// 16岁以下不提供电子签服务。
        public static var ageNotAchieveNormalLegal: FailedOperation {
            FailedOperation(.ageNotAchieveNormalLegal)
        }
        
        /// 流程已关联文档。
        public static var flowHasDocument: FailedOperation {
            FailedOperation(.flowHasDocument)
        }
        
        public static var flowHasNoDocument: FailedOperation {
            FailedOperation(.flowHasNoDocument)
        }
        
        public static var noSignReviewPass: FailedOperation {
            FailedOperation(.noSignReviewPass)
        }
        
        public static var organizationExperienceChange: FailedOperation {
            FailedOperation(.organizationExperienceChange)
        }
        
        public static var organizationNameChanged: FailedOperation {
            FailedOperation(.organizationNameChanged)
        }
        
        public static var organizationNameNeedChange: FailedOperation {
            FailedOperation(.organizationNameNeedChange)
        }
        
        public static var preViewUrlFail: FailedOperation {
            FailedOperation(.preViewUrlFail)
        }
        
        public static var qrCodeCreatorSignComponents: FailedOperation {
            FailedOperation(.qrCodeCreatorSignComponents)
        }
        
        public static var qrCodeSignUsers: FailedOperation {
            FailedOperation(.qrCodeSignUsers)
        }
        
        public static var qrCodeTemplateId: FailedOperation {
            FailedOperation(.qrCodeTemplateId)
        }
        
        /// 短信发送频率超出限制。
        public static var requestLimitExceeded: FailedOperation {
            FailedOperation(.requestLimitExceeded)
        }
        
        /// 模板无资源信息。
        public static var templateHasNoResource: FailedOperation {
            FailedOperation(.templateHasNoResource)
        }
        
        public static var userInfoNoMatch: FailedOperation {
            FailedOperation(.userInfoNoMatch)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCEssError.FailedOperation: Equatable {
    public static func == (lhs: TCEssError.FailedOperation, rhs: TCEssError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEssError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEssError.FailedOperation {
    public func toEssError() -> TCEssError {
        guard let code = TCEssError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEssError(code, context: self.context)
    }
}