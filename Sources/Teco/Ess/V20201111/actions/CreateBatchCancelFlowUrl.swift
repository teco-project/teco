//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateBatchCancelFlowUrl请求参数结构体
    public struct CreateBatchCancelFlowUrlRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        ///
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。
        public let `operator`: UserInfo

        /// 需要执行撤回的流程(合同)的编号列表，最多100个.
        ///
        /// 列表中的流程(合同)编号不要重复.
        public let flowIds: [String]

        /// 代理企业和员工的信息。
        ///
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, flowIds: [String], agent: Agent? = nil) {
            self.operator = `operator`
            self.flowIds = flowIds
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case flowIds = "FlowIds"
            case agent = "Agent"
        }
    }

    /// CreateBatchCancelFlowUrl返回参数结构体
    public struct CreateBatchCancelFlowUrlResponse: TCResponse {
        /// 批量撤回签署流程链接
        public let batchCancelFlowUrl: String

        /// 签署流程撤回失败信息
        /// 数组里边的错误原因与传进来的FlowIds一一对应,如果是空字符串则标识没有出错
        public let failMessages: [String]

        /// 签署连接过期时间字符串：年月日-时分秒
        ///
        /// 例如:2023-07-28 17:25:59
        public let urlExpireOn: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case batchCancelFlowUrl = "BatchCancelFlowUrl"
            case failMessages = "FailMessages"
            case urlExpireOn = "UrlExpireOn"
            case requestId = "RequestId"
        }
    }

    /// 批量撤销签署流程
    ///
    /// 注：此接口将会废弃，请使用撤销单个签署流程（CancelFlow）接口。
    /// 指定需要批量撤回的签署流程Id，获取批量撤销链接。
    /// 客户指定需要撤回的签署流程Id，最多100个，超过100不处理；接口调用成功返回批量撤回合同的链接，通过链接跳转到电子签小程序完成批量撤回。
    @inlinable
    public func createBatchCancelFlowUrl(_ input: CreateBatchCancelFlowUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBatchCancelFlowUrlResponse> {
        self.client.execute(action: "CreateBatchCancelFlowUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量撤销签署流程
    ///
    /// 注：此接口将会废弃，请使用撤销单个签署流程（CancelFlow）接口。
    /// 指定需要批量撤回的签署流程Id，获取批量撤销链接。
    /// 客户指定需要撤回的签署流程Id，最多100个，超过100不处理；接口调用成功返回批量撤回合同的链接，通过链接跳转到电子签小程序完成批量撤回。
    @inlinable
    public func createBatchCancelFlowUrl(_ input: CreateBatchCancelFlowUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBatchCancelFlowUrlResponse {
        try await self.client.execute(action: "CreateBatchCancelFlowUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量撤销签署流程
    ///
    /// 注：此接口将会废弃，请使用撤销单个签署流程（CancelFlow）接口。
    /// 指定需要批量撤回的签署流程Id，获取批量撤销链接。
    /// 客户指定需要撤回的签署流程Id，最多100个，超过100不处理；接口调用成功返回批量撤回合同的链接，通过链接跳转到电子签小程序完成批量撤回。
    @inlinable
    public func createBatchCancelFlowUrl(operator: UserInfo, flowIds: [String], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBatchCancelFlowUrlResponse> {
        self.createBatchCancelFlowUrl(.init(operator: `operator`, flowIds: flowIds, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 批量撤销签署流程
    ///
    /// 注：此接口将会废弃，请使用撤销单个签署流程（CancelFlow）接口。
    /// 指定需要批量撤回的签署流程Id，获取批量撤销链接。
    /// 客户指定需要撤回的签署流程Id，最多100个，超过100不处理；接口调用成功返回批量撤回合同的链接，通过链接跳转到电子签小程序完成批量撤回。
    @inlinable
    public func createBatchCancelFlowUrl(operator: UserInfo, flowIds: [String], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBatchCancelFlowUrlResponse {
        try await self.createBatchCancelFlowUrl(.init(operator: `operator`, flowIds: flowIds, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
