//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateConvertTaskApi请求参数结构体
    public struct CreateConvertTaskApiRequest: TCRequest {
        /// 需要进行转换的资源文件类型
        /// 支持的文件类型如下：
        ///
        /// - doc
        /// - docx
        /// - xls
        /// - xlsx
        /// - jpg
        /// - jpeg
        /// - png
        /// - bmp
        /// - txt
        public let resourceType: String

        /// 需要进行转换操作的文件资源名称，带资源后缀名。
        ///
        /// 注:  `资源名称长度限制为256个字符`
        public let resourceName: String

        /// 需要进行转换操作的文件资源Id，通过[UploadFiles](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)接口获取文件资源Id。
        ///
        /// 注:  `目前，此接口仅支持单个文件进行转换。`
        public let resourceId: String

        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。
        public let `operator`: UserInfo?

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        /// 暂未开放
        @available(*, deprecated)
        public let organization: OrganizationInfo? = nil

        public init(resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, agent: Agent? = nil) {
            self.resourceType = resourceType
            self.resourceName = resourceName
            self.resourceId = resourceId
            self.operator = `operator`
            self.agent = agent
        }

        @available(*, deprecated, renamed: "init(resourceType:resourceName:resourceId:operator:agent:)", message: "'organization' is deprecated in 'CreateConvertTaskApiRequest'. Setting this parameter has no effect.")
        public init(resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil) {
            self.resourceType = resourceType
            self.resourceName = resourceName
            self.resourceId = resourceId
            self.operator = `operator`
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceName = "ResourceName"
            case resourceId = "ResourceId"
            case `operator` = "Operator"
            case agent = "Agent"
            case organization = "Organization"
        }
    }

    /// CreateConvertTaskApi返回参数结构体
    public struct CreateConvertTaskApiResponse: TCResponse {
        /// 接口返回的文件转换任务Id，可以调用接口[查询转换任务状态](https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi)获取转换任务的状态和转换后的文件资源Id。
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 创建文件转换任务
    ///
    /// 此接口（CreateConvertTaskApi）用来将word、excel、图片、txt类型文件转换为PDF文件。
    ///
    /// 前提条件：源文件已经通过 [文件上传接口](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)完成上传，并得到了源文件的资源Id。
    ///
    /// 适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
    /// 适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同
    ///
    /// 转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过[查询转换任务状态](https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi)接口获取任务状态。
    ///
    /// 注:
    /// 1. `支持的文件类型有doc、docx、xls、xlsx、jpg、jpeg、png、bmp、txt`
    /// 2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
    @inlinable
    public func createConvertTaskApi(_ input: CreateConvertTaskApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateConvertTaskApiResponse> {
        self.client.execute(action: "CreateConvertTaskApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建文件转换任务
    ///
    /// 此接口（CreateConvertTaskApi）用来将word、excel、图片、txt类型文件转换为PDF文件。
    ///
    /// 前提条件：源文件已经通过 [文件上传接口](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)完成上传，并得到了源文件的资源Id。
    ///
    /// 适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
    /// 适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同
    ///
    /// 转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过[查询转换任务状态](https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi)接口获取任务状态。
    ///
    /// 注:
    /// 1. `支持的文件类型有doc、docx、xls、xlsx、jpg、jpeg、png、bmp、txt`
    /// 2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
    @inlinable
    public func createConvertTaskApi(_ input: CreateConvertTaskApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConvertTaskApiResponse {
        try await self.client.execute(action: "CreateConvertTaskApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建文件转换任务
    ///
    /// 此接口（CreateConvertTaskApi）用来将word、excel、图片、txt类型文件转换为PDF文件。
    ///
    /// 前提条件：源文件已经通过 [文件上传接口](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)完成上传，并得到了源文件的资源Id。
    ///
    /// 适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
    /// 适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同
    ///
    /// 转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过[查询转换任务状态](https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi)接口获取任务状态。
    ///
    /// 注:
    /// 1. `支持的文件类型有doc、docx、xls、xlsx、jpg、jpeg、png、bmp、txt`
    /// 2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
    @inlinable
    public func createConvertTaskApi(resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateConvertTaskApiResponse> {
        self.createConvertTaskApi(.init(resourceType: resourceType, resourceName: resourceName, resourceId: resourceId, operator: `operator`, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 创建文件转换任务
    ///
    /// 此接口（CreateConvertTaskApi）用来将word、excel、图片、txt类型文件转换为PDF文件。
    ///
    /// 前提条件：源文件已经通过 [文件上传接口](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)完成上传，并得到了源文件的资源Id。
    ///
    /// 适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
    /// 适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同
    ///
    /// 转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过[查询转换任务状态](https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi)接口获取任务状态。
    ///
    /// 注:
    /// 1. `支持的文件类型有doc、docx、xls、xlsx、jpg、jpeg、png、bmp、txt`
    /// 2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
    @available(*, deprecated, renamed: "createConvertTaskApi(resourceType:resourceName:resourceId:operator:agent:region:logger:on:)", message: "'organization' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func createConvertTaskApi(resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateConvertTaskApiResponse> {
        self.createConvertTaskApi(.init(resourceType: resourceType, resourceName: resourceName, resourceId: resourceId, operator: `operator`, agent: agent, organization: organization), region: region, logger: logger, on: eventLoop)
    }

    /// 创建文件转换任务
    ///
    /// 此接口（CreateConvertTaskApi）用来将word、excel、图片、txt类型文件转换为PDF文件。
    ///
    /// 前提条件：源文件已经通过 [文件上传接口](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)完成上传，并得到了源文件的资源Id。
    ///
    /// 适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
    /// 适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同
    ///
    /// 转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过[查询转换任务状态](https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi)接口获取任务状态。
    ///
    /// 注:
    /// 1. `支持的文件类型有doc、docx、xls、xlsx、jpg、jpeg、png、bmp、txt`
    /// 2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
    @inlinable
    public func createConvertTaskApi(resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConvertTaskApiResponse {
        try await self.createConvertTaskApi(.init(resourceType: resourceType, resourceName: resourceName, resourceId: resourceId, operator: `operator`, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 创建文件转换任务
    ///
    /// 此接口（CreateConvertTaskApi）用来将word、excel、图片、txt类型文件转换为PDF文件。
    ///
    /// 前提条件：源文件已经通过 [文件上传接口](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)完成上传，并得到了源文件的资源Id。
    ///
    /// 适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
    /// 适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同
    ///
    /// 转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过[查询转换任务状态](https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi)接口获取任务状态。
    ///
    /// 注:
    /// 1. `支持的文件类型有doc、docx、xls、xlsx、jpg、jpeg、png、bmp、txt`
    /// 2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
    @available(*, deprecated, renamed: "createConvertTaskApi(resourceType:resourceName:resourceId:operator:agent:region:logger:on:)", message: "'organization' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func createConvertTaskApi(resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConvertTaskApiResponse {
        try await self.createConvertTaskApi(.init(resourceType: resourceType, resourceName: resourceName, resourceId: resourceId, operator: `operator`, agent: agent, organization: organization), region: region, logger: logger, on: eventLoop)
    }
}
