//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// ModifyApplicationCallbackInfo请求参数结构体
    public struct ModifyApplicationCallbackInfoRequest: TCRequestModel {
        /// 调用方用户信息，userId 必填
        public let `operator`: UserInfo

        /// 操作类型：1-新增，2-删除
        public let operateType: Int64

        /// 回调信息
        public let callbackInfo: CallbackInfo

        public init(operator: UserInfo, operateType: Int64, callbackInfo: CallbackInfo) {
            self.operator = `operator`
            self.operateType = operateType
            self.callbackInfo = callbackInfo
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case operateType = "OperateType"
            case callbackInfo = "CallbackInfo"
        }
    }

    /// ModifyApplicationCallbackInfo返回参数结构体
    public struct ModifyApplicationCallbackInfoResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改应用callbackinfo
    ///
    /// 新增/删除应用callbackinfo
    /// callbackinfo包含： 回调地址和签名key
    /// 操作：新增/删除
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(_ input: ModifyApplicationCallbackInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyApplicationCallbackInfoResponse> {
        self.client.execute(action: "ModifyApplicationCallbackInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改应用callbackinfo
    ///
    /// 新增/删除应用callbackinfo
    /// callbackinfo包含： 回调地址和签名key
    /// 操作：新增/删除
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(_ input: ModifyApplicationCallbackInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyApplicationCallbackInfoResponse {
        try await self.client.execute(action: "ModifyApplicationCallbackInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改应用callbackinfo
    ///
    /// 新增/删除应用callbackinfo
    /// callbackinfo包含： 回调地址和签名key
    /// 操作：新增/删除
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(operator: UserInfo, operateType: Int64, callbackInfo: CallbackInfo, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyApplicationCallbackInfoResponse> {
        self.modifyApplicationCallbackInfo(.init(operator: `operator`, operateType: operateType, callbackInfo: callbackInfo), region: region, logger: logger, on: eventLoop)
    }

    /// 修改应用callbackinfo
    ///
    /// 新增/删除应用callbackinfo
    /// callbackinfo包含： 回调地址和签名key
    /// 操作：新增/删除
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(operator: UserInfo, operateType: Int64, callbackInfo: CallbackInfo, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyApplicationCallbackInfoResponse {
        try await self.modifyApplicationCallbackInfo(.init(operator: `operator`, operateType: operateType, callbackInfo: callbackInfo), region: region, logger: logger, on: eventLoop)
    }
}
