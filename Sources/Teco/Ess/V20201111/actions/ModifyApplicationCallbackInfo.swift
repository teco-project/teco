//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// ModifyApplicationCallbackInfo请求参数结构体
    public struct ModifyApplicationCallbackInfoRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 操作类型：
        /// 1-新增
        /// 2-删除
        public let operateType: Int64

        /// 企业应用回调信息
        public let callbackInfo: CallbackInfo

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, operateType: Int64, callbackInfo: CallbackInfo, agent: Agent? = nil) {
            self.operator = `operator`
            self.operateType = operateType
            self.callbackInfo = callbackInfo
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case operateType = "OperateType"
            case callbackInfo = "CallbackInfo"
            case agent = "Agent"
        }
    }

    /// ModifyApplicationCallbackInfo返回参数结构体
    public struct ModifyApplicationCallbackInfoResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改企业回调配置
    ///
    /// 新增/删除企业应用集成中的回调配置。
    /// 新增回调配置只会增加不存在的CallbackUrl；删除操作将针对找到的相同CallbackUrl的配置进行删除。
    /// 请确保回调地址能够接收并处理 HTTP POST 请求，并返回状态码 200 以表示处理正常。
    /// 更多回调相关的说明参考文档[回调通知能力](https://qian.tencent.com/developers/company/callback_types_v2)
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(_ input: ModifyApplicationCallbackInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyApplicationCallbackInfoResponse> {
        self.client.execute(action: "ModifyApplicationCallbackInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改企业回调配置
    ///
    /// 新增/删除企业应用集成中的回调配置。
    /// 新增回调配置只会增加不存在的CallbackUrl；删除操作将针对找到的相同CallbackUrl的配置进行删除。
    /// 请确保回调地址能够接收并处理 HTTP POST 请求，并返回状态码 200 以表示处理正常。
    /// 更多回调相关的说明参考文档[回调通知能力](https://qian.tencent.com/developers/company/callback_types_v2)
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(_ input: ModifyApplicationCallbackInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyApplicationCallbackInfoResponse {
        try await self.client.execute(action: "ModifyApplicationCallbackInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改企业回调配置
    ///
    /// 新增/删除企业应用集成中的回调配置。
    /// 新增回调配置只会增加不存在的CallbackUrl；删除操作将针对找到的相同CallbackUrl的配置进行删除。
    /// 请确保回调地址能够接收并处理 HTTP POST 请求，并返回状态码 200 以表示处理正常。
    /// 更多回调相关的说明参考文档[回调通知能力](https://qian.tencent.com/developers/company/callback_types_v2)
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(operator: UserInfo, operateType: Int64, callbackInfo: CallbackInfo, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyApplicationCallbackInfoResponse> {
        self.modifyApplicationCallbackInfo(.init(operator: `operator`, operateType: operateType, callbackInfo: callbackInfo, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 修改企业回调配置
    ///
    /// 新增/删除企业应用集成中的回调配置。
    /// 新增回调配置只会增加不存在的CallbackUrl；删除操作将针对找到的相同CallbackUrl的配置进行删除。
    /// 请确保回调地址能够接收并处理 HTTP POST 请求，并返回状态码 200 以表示处理正常。
    /// 更多回调相关的说明参考文档[回调通知能力](https://qian.tencent.com/developers/company/callback_types_v2)
    @inlinable @discardableResult
    public func modifyApplicationCallbackInfo(operator: UserInfo, operateType: Int64, callbackInfo: CallbackInfo, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyApplicationCallbackInfoResponse {
        try await self.modifyApplicationCallbackInfo(.init(operator: `operator`, operateType: operateType, callbackInfo: callbackInfo, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
