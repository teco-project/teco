//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateOrganizationInfoChangeUrl请求参数结构体
    public struct CreateOrganizationInfoChangeUrlRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 企业信息变更类型，可选类型如下：
        ///
        /// - **1**：企业超管变更
        /// - **2**：企业基础信息变更
        public let changeType: UInt64

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, changeType: UInt64, agent: Agent? = nil) {
            self.operator = `operator`
            self.changeType = changeType
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case changeType = "ChangeType"
            case agent = "Agent"
        }
    }

    /// CreateOrganizationInfoChangeUrl返回参数结构体
    public struct CreateOrganizationInfoChangeUrlResponse: TCResponse {
        /// 创建的企业信息变更链接。
        public let url: String?

        /// 链接过期时间。链接7天有效。
        public let expiredTime: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case expiredTime = "ExpiredTime"
            case requestId = "RequestId"
        }
    }

    /// 创建企业信息变更链接
    ///
    /// 此接口（CreateOrganizationInfoChangeUrl）用于创建企业信息变更链接，支持创建企业超管变更链接或企业基础信息变更链接，通过入参ChangeType指定。
    @inlinable
    public func createOrganizationInfoChangeUrl(_ input: CreateOrganizationInfoChangeUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationInfoChangeUrlResponse> {
        self.client.execute(action: "CreateOrganizationInfoChangeUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建企业信息变更链接
    ///
    /// 此接口（CreateOrganizationInfoChangeUrl）用于创建企业信息变更链接，支持创建企业超管变更链接或企业基础信息变更链接，通过入参ChangeType指定。
    @inlinable
    public func createOrganizationInfoChangeUrl(_ input: CreateOrganizationInfoChangeUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationInfoChangeUrlResponse {
        try await self.client.execute(action: "CreateOrganizationInfoChangeUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建企业信息变更链接
    ///
    /// 此接口（CreateOrganizationInfoChangeUrl）用于创建企业信息变更链接，支持创建企业超管变更链接或企业基础信息变更链接，通过入参ChangeType指定。
    @inlinable
    public func createOrganizationInfoChangeUrl(operator: UserInfo, changeType: UInt64, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationInfoChangeUrlResponse> {
        self.createOrganizationInfoChangeUrl(.init(operator: `operator`, changeType: changeType, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 创建企业信息变更链接
    ///
    /// 此接口（CreateOrganizationInfoChangeUrl）用于创建企业信息变更链接，支持创建企业超管变更链接或企业基础信息变更链接，通过入参ChangeType指定。
    @inlinable
    public func createOrganizationInfoChangeUrl(operator: UserInfo, changeType: UInt64, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationInfoChangeUrlResponse {
        try await self.createOrganizationInfoChangeUrl(.init(operator: `operator`, changeType: changeType, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
