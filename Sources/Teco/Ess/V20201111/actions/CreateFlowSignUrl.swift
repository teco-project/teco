//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateFlowSignUrl请求参数结构体
    public struct CreateFlowSignUrlRequest: TCRequest {
        /// 合同流程ID，为32位字符串。
        /// 建议开发者妥善保存此流程ID，以便于顺利进行后续操作。
        /// 可登录腾讯电子签控制台，在 "合同"->"合同中心" 中查看某个合同的FlowId(在页面中展示为合同ID)。
        public let flowId: String

        /// 流程签署人列表，其中结构体的ApproverName，ApproverMobile和ApproverType必传，其他可不传，
        ///
        /// 注:
        /// `1. ApproverType目前只支持个人类型的签署人。`
        /// `2. 签署人只能有手写签名和时间类型的签署控件，其他类型的填写控件和签署控件暂时都未支持。`
        public let flowApproverInfos: [FlowCreateApprover]

        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo?

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        /// 机构信息，暂未开放
        @available(*, deprecated)
        public let organization: OrganizationInfo? = nil

        /// 签署完之后的H5页面的跳转链接，此链接及支持http://和https://，最大长度1000个字符。(建议https协议)
        public let jumpUrl: String?

        public init(flowId: String, flowApproverInfos: [FlowCreateApprover], operator: UserInfo? = nil, agent: Agent? = nil, jumpUrl: String? = nil) {
            self.flowId = flowId
            self.flowApproverInfos = flowApproverInfos
            self.operator = `operator`
            self.agent = agent
            self.jumpUrl = jumpUrl
        }

        @available(*, deprecated, renamed: "init(flowId:flowApproverInfos:operator:agent:jumpUrl:)", message: "'organization' is deprecated in 'CreateFlowSignUrlRequest'. Setting this parameter has no effect.")
        public init(flowId: String, flowApproverInfos: [FlowCreateApprover], operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil, jumpUrl: String? = nil) {
            self.flowId = flowId
            self.flowApproverInfos = flowApproverInfos
            self.operator = `operator`
            self.agent = agent
            self.jumpUrl = jumpUrl
        }

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case flowApproverInfos = "FlowApproverInfos"
            case `operator` = "Operator"
            case agent = "Agent"
            case organization = "Organization"
            case jumpUrl = "JumpUrl"
        }
    }

    /// CreateFlowSignUrl返回参数结构体
    public struct CreateFlowSignUrlResponse: TCResponse {
        /// 签署人签署链接信息
        public let flowApproverUrlInfos: [FlowApproverUrlInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowApproverUrlInfos = "FlowApproverUrlInfos"
            case requestId = "RequestId"
        }
    }

    /// 获取个人用户H5签署链接
    ///
    /// 该接口用于发起合同后，生成个人用户的签署链接, 暂时不支持企业端签署
    ///
    /// `注意：`
    ///
    /// `1. 该接口目前仅支持签署人类型是个人签署方的场景（PERSON）。`
    ///
    /// `2. 该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件，不支持填写控件 。`
    ///
    /// `3. 该签署链接有效期为30分钟，过期后将失效，如需签署可重新创建签署链接 。`
    ///
    /// `4. 该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入`。
    ///
    /// 跳转到小程序的实现，参考微信官方文档（分为[全屏](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)、[半屏](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)两种方式），如何配置也可以请参考: [跳转电子签小程序配置](https://qian.tencent.com/developers/company/openwxminiprogram)
    @inlinable
    public func createFlowSignUrl(_ input: CreateFlowSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowSignUrlResponse> {
        self.client.execute(action: "CreateFlowSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取个人用户H5签署链接
    ///
    /// 该接口用于发起合同后，生成个人用户的签署链接, 暂时不支持企业端签署
    ///
    /// `注意：`
    ///
    /// `1. 该接口目前仅支持签署人类型是个人签署方的场景（PERSON）。`
    ///
    /// `2. 该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件，不支持填写控件 。`
    ///
    /// `3. 该签署链接有效期为30分钟，过期后将失效，如需签署可重新创建签署链接 。`
    ///
    /// `4. 该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入`。
    ///
    /// 跳转到小程序的实现，参考微信官方文档（分为[全屏](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)、[半屏](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)两种方式），如何配置也可以请参考: [跳转电子签小程序配置](https://qian.tencent.com/developers/company/openwxminiprogram)
    @inlinable
    public func createFlowSignUrl(_ input: CreateFlowSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowSignUrlResponse {
        try await self.client.execute(action: "CreateFlowSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取个人用户H5签署链接
    ///
    /// 该接口用于发起合同后，生成个人用户的签署链接, 暂时不支持企业端签署
    ///
    /// `注意：`
    ///
    /// `1. 该接口目前仅支持签署人类型是个人签署方的场景（PERSON）。`
    ///
    /// `2. 该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件，不支持填写控件 。`
    ///
    /// `3. 该签署链接有效期为30分钟，过期后将失效，如需签署可重新创建签署链接 。`
    ///
    /// `4. 该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入`。
    ///
    /// 跳转到小程序的实现，参考微信官方文档（分为[全屏](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)、[半屏](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)两种方式），如何配置也可以请参考: [跳转电子签小程序配置](https://qian.tencent.com/developers/company/openwxminiprogram)
    @inlinable
    public func createFlowSignUrl(flowId: String, flowApproverInfos: [FlowCreateApprover], operator: UserInfo? = nil, agent: Agent? = nil, jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowSignUrlResponse> {
        self.createFlowSignUrl(.init(flowId: flowId, flowApproverInfos: flowApproverInfos, operator: `operator`, agent: agent, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }

    /// 获取个人用户H5签署链接
    ///
    /// 该接口用于发起合同后，生成个人用户的签署链接, 暂时不支持企业端签署
    ///
    /// `注意：`
    ///
    /// `1. 该接口目前仅支持签署人类型是个人签署方的场景（PERSON）。`
    ///
    /// `2. 该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件，不支持填写控件 。`
    ///
    /// `3. 该签署链接有效期为30分钟，过期后将失效，如需签署可重新创建签署链接 。`
    ///
    /// `4. 该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入`。
    ///
    /// 跳转到小程序的实现，参考微信官方文档（分为[全屏](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)、[半屏](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)两种方式），如何配置也可以请参考: [跳转电子签小程序配置](https://qian.tencent.com/developers/company/openwxminiprogram)
    @available(*, deprecated, renamed: "createFlowSignUrl(flowId:flowApproverInfos:operator:agent:jumpUrl:region:logger:on:)", message: "'organization' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func createFlowSignUrl(flowId: String, flowApproverInfos: [FlowCreateApprover], operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil, jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowSignUrlResponse> {
        self.createFlowSignUrl(.init(flowId: flowId, flowApproverInfos: flowApproverInfos, operator: `operator`, agent: agent, organization: organization, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }

    /// 获取个人用户H5签署链接
    ///
    /// 该接口用于发起合同后，生成个人用户的签署链接, 暂时不支持企业端签署
    ///
    /// `注意：`
    ///
    /// `1. 该接口目前仅支持签署人类型是个人签署方的场景（PERSON）。`
    ///
    /// `2. 该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件，不支持填写控件 。`
    ///
    /// `3. 该签署链接有效期为30分钟，过期后将失效，如需签署可重新创建签署链接 。`
    ///
    /// `4. 该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入`。
    ///
    /// 跳转到小程序的实现，参考微信官方文档（分为[全屏](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)、[半屏](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)两种方式），如何配置也可以请参考: [跳转电子签小程序配置](https://qian.tencent.com/developers/company/openwxminiprogram)
    @inlinable
    public func createFlowSignUrl(flowId: String, flowApproverInfos: [FlowCreateApprover], operator: UserInfo? = nil, agent: Agent? = nil, jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowSignUrlResponse {
        try await self.createFlowSignUrl(.init(flowId: flowId, flowApproverInfos: flowApproverInfos, operator: `operator`, agent: agent, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }

    /// 获取个人用户H5签署链接
    ///
    /// 该接口用于发起合同后，生成个人用户的签署链接, 暂时不支持企业端签署
    ///
    /// `注意：`
    ///
    /// `1. 该接口目前仅支持签署人类型是个人签署方的场景（PERSON）。`
    ///
    /// `2. 该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件，不支持填写控件 。`
    ///
    /// `3. 该签署链接有效期为30分钟，过期后将失效，如需签署可重新创建签署链接 。`
    ///
    /// `4. 该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入`。
    ///
    /// 跳转到小程序的实现，参考微信官方文档（分为[全屏](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)、[半屏](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)两种方式），如何配置也可以请参考: [跳转电子签小程序配置](https://qian.tencent.com/developers/company/openwxminiprogram)
    @available(*, deprecated, renamed: "createFlowSignUrl(flowId:flowApproverInfos:operator:agent:jumpUrl:region:logger:on:)", message: "'organization' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func createFlowSignUrl(flowId: String, flowApproverInfos: [FlowCreateApprover], operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil, jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowSignUrlResponse {
        try await self.createFlowSignUrl(.init(flowId: flowId, flowApproverInfos: flowApproverInfos, operator: `operator`, agent: agent, organization: organization, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }
}
