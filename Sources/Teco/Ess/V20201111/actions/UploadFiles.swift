//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// UploadFiles请求参数结构体
    public struct UploadFilesRequest: TCRequest {
        /// 文件对应业务类型
        /// 1. TEMPLATE - 模板； 文件类型：.pdf/.doc/.docx/.html
        /// 2. DOCUMENT - 签署过程及签署后的合同文档/图片控件 文件类型：.pdf/.doc/.docx/.jpg/.png/.xls.xlsx/.html
        /// 3. SEAL - 印章； 文件类型：.jpg/.jpeg/.png
        public let businessType: String

        /// 调用方信息，其中OperatorId为必填字段，即用户的UserId
        public let caller: Caller?

        /// 上传文件内容数组，最多支持20个文件
        public let fileInfos: [UploadFile]?

        /// 文件类型， 默认通过文件内容解析得到文件类型，客户可以显示的说明上传文件的类型。
        /// 如：PDF 表示上传的文件 xxx.pdf的文件类型是 PDF
        public let fileType: String?

        /// 此参数只对 PDF 文件有效。是否将pdf灰色矩阵置白
        /// true--是，处理置白
        /// 默认为false--否，不处理
        public let coverRect: Bool?

        /// 用户自定义ID数组，与上传文件一一对应
        public let customIds: [String]?

        /// 不再使用，上传文件链接数组，最多支持20个URL
        @available(*, deprecated)
        public let fileUrls: String? = nil

        public init(businessType: String, caller: Caller? = nil, fileInfos: [UploadFile]? = nil, fileType: String? = nil, coverRect: Bool? = nil, customIds: [String]? = nil) {
            self.businessType = businessType
            self.caller = caller
            self.fileInfos = fileInfos
            self.fileType = fileType
            self.coverRect = coverRect
            self.customIds = customIds
        }

        @available(*, deprecated, renamed: "init(businessType:caller:fileInfos:fileType:coverRect:customIds:)", message: "'fileUrls' is deprecated in 'UploadFilesRequest'. Setting this parameter has no effect.")
        public init(businessType: String, caller: Caller? = nil, fileInfos: [UploadFile]? = nil, fileType: String? = nil, coverRect: Bool? = nil, customIds: [String]? = nil, fileUrls: String? = nil) {
            self.businessType = businessType
            self.caller = caller
            self.fileInfos = fileInfos
            self.fileType = fileType
            self.coverRect = coverRect
            self.customIds = customIds
        }

        enum CodingKeys: String, CodingKey {
            case businessType = "BusinessType"
            case caller = "Caller"
            case fileInfos = "FileInfos"
            case fileType = "FileType"
            case coverRect = "CoverRect"
            case customIds = "CustomIds"
            case fileUrls = "FileUrls"
        }
    }

    /// UploadFiles返回参数结构体
    public struct UploadFilesResponse: TCResponse {
        /// 文件id数组
        public let fileIds: [String]

        /// 上传成功文件数量
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case fileIds = "FileIds"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 多文件上传
    ///
    /// 此接口（UploadFiles）用于文件上传。
    ///
    /// 适用场景：用于生成pdf资源编号（FileIds）来配合“用PDF创建流程”接口使用，使用场景可详见“用PDF创建流程”接口说明。
    ///
    /// 其中上传的文件，图片类型(png/jpg/jpeg)大小限制为5M，其他大小限制为60M。
    ///
    /// 调用时需要设置Domain/接口请求域名为 file.ess.tencent.cn,代码示例：
    ///
    /// HttpProfile httpProfile = new HttpProfile();
    ///
    /// httpProfile.setEndpoint("file.test.ess.tencent.cn");
    @inlinable
    public func uploadFiles(_ input: UploadFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UploadFilesResponse> {
        self.client.execute(action: "UploadFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 多文件上传
    ///
    /// 此接口（UploadFiles）用于文件上传。
    ///
    /// 适用场景：用于生成pdf资源编号（FileIds）来配合“用PDF创建流程”接口使用，使用场景可详见“用PDF创建流程”接口说明。
    ///
    /// 其中上传的文件，图片类型(png/jpg/jpeg)大小限制为5M，其他大小限制为60M。
    ///
    /// 调用时需要设置Domain/接口请求域名为 file.ess.tencent.cn,代码示例：
    ///
    /// HttpProfile httpProfile = new HttpProfile();
    ///
    /// httpProfile.setEndpoint("file.test.ess.tencent.cn");
    @inlinable
    public func uploadFiles(_ input: UploadFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UploadFilesResponse {
        try await self.client.execute(action: "UploadFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 多文件上传
    ///
    /// 此接口（UploadFiles）用于文件上传。
    ///
    /// 适用场景：用于生成pdf资源编号（FileIds）来配合“用PDF创建流程”接口使用，使用场景可详见“用PDF创建流程”接口说明。
    ///
    /// 其中上传的文件，图片类型(png/jpg/jpeg)大小限制为5M，其他大小限制为60M。
    ///
    /// 调用时需要设置Domain/接口请求域名为 file.ess.tencent.cn,代码示例：
    ///
    /// HttpProfile httpProfile = new HttpProfile();
    ///
    /// httpProfile.setEndpoint("file.test.ess.tencent.cn");
    @inlinable
    public func uploadFiles(businessType: String, caller: Caller? = nil, fileInfos: [UploadFile]? = nil, fileType: String? = nil, coverRect: Bool? = nil, customIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UploadFilesResponse> {
        self.uploadFiles(.init(businessType: businessType, caller: caller, fileInfos: fileInfos, fileType: fileType, coverRect: coverRect, customIds: customIds), region: region, logger: logger, on: eventLoop)
    }

    /// 多文件上传
    ///
    /// 此接口（UploadFiles）用于文件上传。
    ///
    /// 适用场景：用于生成pdf资源编号（FileIds）来配合“用PDF创建流程”接口使用，使用场景可详见“用PDF创建流程”接口说明。
    ///
    /// 其中上传的文件，图片类型(png/jpg/jpeg)大小限制为5M，其他大小限制为60M。
    ///
    /// 调用时需要设置Domain/接口请求域名为 file.ess.tencent.cn,代码示例：
    ///
    /// HttpProfile httpProfile = new HttpProfile();
    ///
    /// httpProfile.setEndpoint("file.test.ess.tencent.cn");
    @available(*, deprecated, renamed: "uploadFiles(businessType:caller:fileInfos:fileType:coverRect:customIds:region:logger:on:)", message: "'fileUrls' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func uploadFiles(businessType: String, caller: Caller? = nil, fileInfos: [UploadFile]? = nil, fileType: String? = nil, coverRect: Bool? = nil, customIds: [String]? = nil, fileUrls: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UploadFilesResponse> {
        self.uploadFiles(.init(businessType: businessType, caller: caller, fileInfos: fileInfos, fileType: fileType, coverRect: coverRect, customIds: customIds, fileUrls: fileUrls), region: region, logger: logger, on: eventLoop)
    }

    /// 多文件上传
    ///
    /// 此接口（UploadFiles）用于文件上传。
    ///
    /// 适用场景：用于生成pdf资源编号（FileIds）来配合“用PDF创建流程”接口使用，使用场景可详见“用PDF创建流程”接口说明。
    ///
    /// 其中上传的文件，图片类型(png/jpg/jpeg)大小限制为5M，其他大小限制为60M。
    ///
    /// 调用时需要设置Domain/接口请求域名为 file.ess.tencent.cn,代码示例：
    ///
    /// HttpProfile httpProfile = new HttpProfile();
    ///
    /// httpProfile.setEndpoint("file.test.ess.tencent.cn");
    @inlinable
    public func uploadFiles(businessType: String, caller: Caller? = nil, fileInfos: [UploadFile]? = nil, fileType: String? = nil, coverRect: Bool? = nil, customIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UploadFilesResponse {
        try await self.uploadFiles(.init(businessType: businessType, caller: caller, fileInfos: fileInfos, fileType: fileType, coverRect: coverRect, customIds: customIds), region: region, logger: logger, on: eventLoop)
    }

    /// 多文件上传
    ///
    /// 此接口（UploadFiles）用于文件上传。
    ///
    /// 适用场景：用于生成pdf资源编号（FileIds）来配合“用PDF创建流程”接口使用，使用场景可详见“用PDF创建流程”接口说明。
    ///
    /// 其中上传的文件，图片类型(png/jpg/jpeg)大小限制为5M，其他大小限制为60M。
    ///
    /// 调用时需要设置Domain/接口请求域名为 file.ess.tencent.cn,代码示例：
    ///
    /// HttpProfile httpProfile = new HttpProfile();
    ///
    /// httpProfile.setEndpoint("file.test.ess.tencent.cn");
    @available(*, deprecated, renamed: "uploadFiles(businessType:caller:fileInfos:fileType:coverRect:customIds:region:logger:on:)", message: "'fileUrls' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func uploadFiles(businessType: String, caller: Caller? = nil, fileInfos: [UploadFile]? = nil, fileType: String? = nil, coverRect: Bool? = nil, customIds: [String]? = nil, fileUrls: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UploadFilesResponse {
        try await self.uploadFiles(.init(businessType: businessType, caller: caller, fileInfos: fileInfos, fileType: fileType, coverRect: coverRect, customIds: customIds, fileUrls: fileUrls), region: region, logger: logger, on: eventLoop)
    }
}
