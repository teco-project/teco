//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// DeleteIntegrationEmployees请求参数结构体
    public struct DeleteIntegrationEmployeesRequest: TCRequestModel {
        /// 操作人信息，userId必填
        public let `operator`: UserInfo

        /// 待移除员工的信息，userId和openId二选一，必填一个
        public let employees: [Staff]

        /// 代理信息
        public let agent: Agent?

        public init(operator: UserInfo, employees: [Staff], agent: Agent? = nil) {
            self.operator = `operator`
            self.employees = employees
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case employees = "Employees"
            case agent = "Agent"
        }
    }

    /// DeleteIntegrationEmployees返回参数结构体
    public struct DeleteIntegrationEmployeesResponse: TCResponseModel {
        /// 员工删除数据
        public let deleteEmployeeResult: DeleteStaffsResult

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case deleteEmployeeResult = "DeleteEmployeeResult"
            case requestId = "RequestId"
        }
    }

    /// 移除员工
    @inlinable
    public func deleteIntegrationEmployees(_ input: DeleteIntegrationEmployeesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteIntegrationEmployeesResponse> {
        self.client.execute(action: "DeleteIntegrationEmployees", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 移除员工
    @inlinable
    public func deleteIntegrationEmployees(_ input: DeleteIntegrationEmployeesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteIntegrationEmployeesResponse {
        try await self.client.execute(action: "DeleteIntegrationEmployees", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 移除员工
    @inlinable
    public func deleteIntegrationEmployees(operator: UserInfo, employees: [Staff], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteIntegrationEmployeesResponse> {
        self.deleteIntegrationEmployees(.init(operator: `operator`, employees: employees, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 移除员工
    @inlinable
    public func deleteIntegrationEmployees(operator: UserInfo, employees: [Staff], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteIntegrationEmployeesResponse {
        try await self.deleteIntegrationEmployees(.init(operator: `operator`, employees: employees, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
