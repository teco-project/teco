//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ess {
    /// DescribeFlowTemplates请求参数结构体
    public struct DescribeFlowTemplatesRequest: TCRequestModel {
        /// 调用方用户信息，userId 必填
        public let `operator`: UserInfo

        /// 企业组织相关信息
        public let organization: OrganizationInfo?

        /// 应用相关信息
        public let agent: Agent?

        /// 查询偏移位置，默认0
        public let offset: UInt64?

        /// 查询个数，默认20，最大200
        public let limit: UInt64?

        /// 搜索条件，具体参考Filter结构体。本接口取值：template-id：按照【 **模板唯一标识** 】进行过滤
        public let filters: [Filter]?

        /// 这个参数跟下面的IsChannel参数配合使用。
        /// IsChannel=false时，ApplicationId参数不起任何作用。
        /// IsChannel=true时，ApplicationId为空，查询所有渠道模板列表；ApplicationId不为空，查询指定渠道下的模板列表
        /// ApplicationId为空，查询渠道模板列表
        public let applicationId: String?

        /// 默认为false，查询SaaS模板库列表；
        /// 为true，查询渠道模板库管理列表
        public let isChannel: Bool?

        /// 暂未开放
        public let generateSource: UInt64?

        /// 查询内容：0-模板列表及详情（默认），1-仅模板列表
        public let contentType: Int64?

        public init(operator: UserInfo, organization: OrganizationInfo? = nil, agent: Agent? = nil, offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, applicationId: String? = nil, isChannel: Bool? = nil, generateSource: UInt64? = nil, contentType: Int64? = nil) {
            self.operator = `operator`
            self.organization = organization
            self.agent = agent
            self.offset = offset
            self.limit = limit
            self.filters = filters
            self.applicationId = applicationId
            self.isChannel = isChannel
            self.generateSource = generateSource
            self.contentType = contentType
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case organization = "Organization"
            case agent = "Agent"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
            case applicationId = "ApplicationId"
            case isChannel = "IsChannel"
            case generateSource = "GenerateSource"
            case contentType = "ContentType"
        }
    }

    /// DescribeFlowTemplates返回参数结构体
    public struct DescribeFlowTemplatesResponse: TCResponseModel {
        /// 模板详情列表
        public let templates: [TemplateInfo]

        /// 查询到的总个数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templates = "Templates"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询模板
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。该接口常用来配合“创建电子文档”接口作为前置的接口使用。
    @inlinable
    public func describeFlowTemplates(_ input: DescribeFlowTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowTemplatesResponse> {
        self.client.execute(action: "DescribeFlowTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。该接口常用来配合“创建电子文档”接口作为前置的接口使用。
    @inlinable
    public func describeFlowTemplates(_ input: DescribeFlowTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowTemplatesResponse {
        try await self.client.execute(action: "DescribeFlowTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询模板
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。该接口常用来配合“创建电子文档”接口作为前置的接口使用。
    @inlinable
    public func describeFlowTemplates(operator: UserInfo, organization: OrganizationInfo? = nil, agent: Agent? = nil, offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, applicationId: String? = nil, isChannel: Bool? = nil, generateSource: UInt64? = nil, contentType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowTemplatesResponse> {
        self.describeFlowTemplates(DescribeFlowTemplatesRequest(operator: `operator`, organization: organization, agent: agent, offset: offset, limit: limit, filters: filters, applicationId: applicationId, isChannel: isChannel, generateSource: generateSource, contentType: contentType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。该接口常用来配合“创建电子文档”接口作为前置的接口使用。
    @inlinable
    public func describeFlowTemplates(operator: UserInfo, organization: OrganizationInfo? = nil, agent: Agent? = nil, offset: UInt64? = nil, limit: UInt64? = nil, filters: [Filter]? = nil, applicationId: String? = nil, isChannel: Bool? = nil, generateSource: UInt64? = nil, contentType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowTemplatesResponse {
        try await self.describeFlowTemplates(DescribeFlowTemplatesRequest(operator: `operator`, organization: organization, agent: agent, offset: offset, limit: limit, filters: filters, applicationId: applicationId, isChannel: isChannel, generateSource: generateSource, contentType: contentType), region: region, logger: logger, on: eventLoop)
    }
}
