//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Ess {
    /// DescribeFlowTemplates请求参数结构体
    public struct DescribeFlowTemplatesRequest: TCPaginatedRequest {
        /// 调用方员工/经办人信息
        /// UserId 必填，在企业控制台组织架构中可以查到员工的UserId
        /// 注：请保证员工有相关的角色权限
        public let `operator`: UserInfo

        /// 代理相关应用信息
        /// 如集团主企业代子企业操作的场景中ProxyOrganizationId必填
        public let agent: Agent?

        /// 查询内容类型
        /// 0-模板列表及详情（默认）
        /// 1-仅模板列表
        public let contentType: Int64?

        /// 搜索条件，本字段用于指定模板Id进行查询。
        /// Key：template-id
        /// Values：需要查询的模板Id列表
        public let filters: [Filter]?

        /// 查询结果分页返回，此处指定第几页，如果不传默从第一页返回。页码从0开始，即首页为0。
        public let offset: UInt64?

        /// 指定每页多少条数据，如果不传默认为20，单页最大200。
        public let limit: UInt64?

        /// 用于查询指定应用号下单模板列表。
        /// ApplicationId不为空，查询指定应用下的模板列表
        /// ApplicationId为空，查询所有应用下的模板列表
        public let applicationId: String?

        /// 默认为false，查询SaaS模板库列表；
        /// 为true，查询第三方应用集成平台企业模板库管理列表
        @available(*, deprecated)
        public let isChannel: Bool? = nil

        /// 暂未开放
        @available(*, deprecated)
        public let organization: OrganizationInfo? = nil

        /// 暂未开放
        @available(*, deprecated)
        public let generateSource: UInt64? = nil

        public init(operator: UserInfo, agent: Agent? = nil, contentType: Int64? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, applicationId: String? = nil) {
            self.operator = `operator`
            self.agent = agent
            self.contentType = contentType
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.applicationId = applicationId
        }

        @available(*, deprecated, renamed: "init(operator:agent:contentType:filters:offset:limit:applicationId:)", message: "'isChannel', 'organization' and 'generateSource' are deprecated in 'DescribeFlowTemplatesRequest'. Setting these parameters has no effect.")
        public init(operator: UserInfo, agent: Agent? = nil, contentType: Int64? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, applicationId: String? = nil, isChannel: Bool? = nil, organization: OrganizationInfo? = nil, generateSource: UInt64? = nil) {
            self.operator = `operator`
            self.agent = agent
            self.contentType = contentType
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.applicationId = applicationId
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case agent = "Agent"
            case contentType = "ContentType"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
            case applicationId = "ApplicationId"
            case isChannel = "IsChannel"
            case organization = "Organization"
            case generateSource = "GenerateSource"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeFlowTemplatesResponse) -> DescribeFlowTemplatesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(operator: self.operator, agent: self.agent, contentType: self.contentType, filters: self.filters, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, applicationId: self.applicationId)
        }
    }

    /// DescribeFlowTemplates返回参数结构体
    public struct DescribeFlowTemplatesResponse: TCPaginatedResponse {
        /// 模板详情列表
        public let templates: [TemplateInfo]

        /// 查询到的总数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templates = "Templates"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TemplateInfo`` list from the paginated response.
        public func getItems() -> [TemplateInfo] {
            self.templates
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @inlinable
    public func describeFlowTemplates(_ input: DescribeFlowTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowTemplatesResponse> {
        self.client.execute(action: "DescribeFlowTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @inlinable
    public func describeFlowTemplates(_ input: DescribeFlowTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowTemplatesResponse {
        try await self.client.execute(action: "DescribeFlowTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @inlinable
    public func describeFlowTemplates(operator: UserInfo, agent: Agent? = nil, contentType: Int64? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, applicationId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowTemplatesResponse> {
        self.describeFlowTemplates(.init(operator: `operator`, agent: agent, contentType: contentType, filters: filters, offset: offset, limit: limit, applicationId: applicationId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @available(*, deprecated, renamed: "describeFlowTemplates(operator:agent:contentType:filters:offset:limit:applicationId:region:logger:on:)", message: "'isChannel', 'organization' and 'generateSource' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func describeFlowTemplates(operator: UserInfo, agent: Agent? = nil, contentType: Int64? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, applicationId: String? = nil, isChannel: Bool? = nil, organization: OrganizationInfo? = nil, generateSource: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowTemplatesResponse> {
        self.describeFlowTemplates(.init(operator: `operator`, agent: agent, contentType: contentType, filters: filters, offset: offset, limit: limit, applicationId: applicationId, isChannel: isChannel, organization: organization, generateSource: generateSource), region: region, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @inlinable
    public func describeFlowTemplates(operator: UserInfo, agent: Agent? = nil, contentType: Int64? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, applicationId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowTemplatesResponse {
        try await self.describeFlowTemplates(.init(operator: `operator`, agent: agent, contentType: contentType, filters: filters, offset: offset, limit: limit, applicationId: applicationId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @available(*, deprecated, renamed: "describeFlowTemplates(operator:agent:contentType:filters:offset:limit:applicationId:region:logger:on:)", message: "'isChannel', 'organization' and 'generateSource' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func describeFlowTemplates(operator: UserInfo, agent: Agent? = nil, contentType: Int64? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, applicationId: String? = nil, isChannel: Bool? = nil, organization: OrganizationInfo? = nil, generateSource: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowTemplatesResponse {
        try await self.describeFlowTemplates(.init(operator: `operator`, agent: agent, contentType: contentType, filters: filters, offset: offset, limit: limit, applicationId: applicationId, isChannel: isChannel, organization: organization, generateSource: generateSource), region: region, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @inlinable
    public func describeFlowTemplatesPaginated(_ input: DescribeFlowTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [TemplateInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeFlowTemplates, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    @inlinable @discardableResult
    public func describeFlowTemplatesPaginated(_ input: DescribeFlowTemplatesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeFlowTemplatesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeFlowTemplates, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询模板
    ///
    /// 本接口用于查询本企业模板列表。
    ///
    /// 当模板较多或模板中的控件较多时，可以通过查询模板接口更方便的获取模板列表，以及每个模板内的控件信息。
    ///
    /// > **适用场景**
    /// >
    /// >  该接口常用来配合“模板发起合同-创建电子文档”接口作为前置的接口使用。
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    ///
    /// - Returns: `AsyncSequence`s of ``TemplateInfo`` and ``DescribeFlowTemplatesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeFlowTemplatesPaginator(_ input: DescribeFlowTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeFlowTemplatesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeFlowTemplates, logger: logger, on: eventLoop)
    }
}
