//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// UpdateIntegrationEmployees请求参数结构体
    public struct UpdateIntegrationEmployeesRequest: TCRequest {
        /// 执行本接口操作的员工信息,UserId必填。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 员工信息，不超过100个。
        /// 根据UserId或OpenId更新员工，必填一个，优先UserId。
        /// 可更新Mobile、DisplayName、Email和Department.DepartmentId字段，其他字段暂不支持
        public let employees: [Staff]

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, employees: [Staff], agent: Agent? = nil) {
            self.operator = `operator`
            self.employees = employees
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case employees = "Employees"
            case agent = "Agent"
        }
    }

    /// UpdateIntegrationEmployees返回参数结构体
    public struct UpdateIntegrationEmployeesResponse: TCResponse {
        /// 更新成功的用户列表
        public let successEmployeeData: [SuccessUpdateStaffData]

        /// 更新失败的用户列表
        public let failedEmployeeData: [FailedUpdateStaffData]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case successEmployeeData = "SuccessEmployeeData"
            case failedEmployeeData = "FailedEmployeeData"
            case requestId = "RequestId"
        }
    }

    /// 更新企业员工信息
    ///
    /// 更新员工信息(姓名，手机号，邮件、部门)，用户实名后无法更改姓名与手机号。
    /// 可进行批量操作，Employees中的userID与openID二选一必填
    @inlinable
    public func updateIntegrationEmployees(_ input: UpdateIntegrationEmployeesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateIntegrationEmployeesResponse> {
        self.client.execute(action: "UpdateIntegrationEmployees", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新企业员工信息
    ///
    /// 更新员工信息(姓名，手机号，邮件、部门)，用户实名后无法更改姓名与手机号。
    /// 可进行批量操作，Employees中的userID与openID二选一必填
    @inlinable
    public func updateIntegrationEmployees(_ input: UpdateIntegrationEmployeesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateIntegrationEmployeesResponse {
        try await self.client.execute(action: "UpdateIntegrationEmployees", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新企业员工信息
    ///
    /// 更新员工信息(姓名，手机号，邮件、部门)，用户实名后无法更改姓名与手机号。
    /// 可进行批量操作，Employees中的userID与openID二选一必填
    @inlinable
    public func updateIntegrationEmployees(operator: UserInfo, employees: [Staff], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateIntegrationEmployeesResponse> {
        self.updateIntegrationEmployees(.init(operator: `operator`, employees: employees, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 更新企业员工信息
    ///
    /// 更新员工信息(姓名，手机号，邮件、部门)，用户实名后无法更改姓名与手机号。
    /// 可进行批量操作，Employees中的userID与openID二选一必填
    @inlinable
    public func updateIntegrationEmployees(operator: UserInfo, employees: [Staff], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateIntegrationEmployeesResponse {
        try await self.updateIntegrationEmployees(.init(operator: `operator`, employees: employees, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
