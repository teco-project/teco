//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// UpdateIntegrationEmployees请求参数结构体
    public struct UpdateIntegrationEmployeesRequest: TCRequestModel {
        /// 操作人信息
        public let `operator`: UserInfo

        /// 代理信息
        public let agent: Agent

        /// 员工信息
        public let employees: [Staff]

        public init(operator: UserInfo, agent: Agent, employees: [Staff]) {
            self.operator = `operator`
            self.agent = agent
            self.employees = employees
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case agent = "Agent"
            case employees = "Employees"
        }
    }

    /// UpdateIntegrationEmployees返回参数结构体
    public struct UpdateIntegrationEmployeesResponse: TCResponseModel {
        /// 更新成功的用户列表
        public let successEmployeeData: [SuccessUpdateStaffData]

        /// 更新失败的用户列表
        public let failedEmployeeData: [FailedUpdateStaffData]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case successEmployeeData = "SuccessEmployeeData"
            case failedEmployeeData = "FailedEmployeeData"
            case requestId = "RequestId"
        }
    }

    /// 更新集成版员工信息
    ///
    /// 更新集成版员工信息(姓名，手机号，邮件)，用户实名后无法更改姓名与手机号
    @inlinable
    public func updateIntegrationEmployees(_ input: UpdateIntegrationEmployeesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateIntegrationEmployeesResponse> {
        self.client.execute(action: "UpdateIntegrationEmployees", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新集成版员工信息
    ///
    /// 更新集成版员工信息(姓名，手机号，邮件)，用户实名后无法更改姓名与手机号
    @inlinable
    public func updateIntegrationEmployees(_ input: UpdateIntegrationEmployeesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateIntegrationEmployeesResponse {
        try await self.client.execute(action: "UpdateIntegrationEmployees", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新集成版员工信息
    ///
    /// 更新集成版员工信息(姓名，手机号，邮件)，用户实名后无法更改姓名与手机号
    @inlinable
    public func updateIntegrationEmployees(operator: UserInfo, agent: Agent, employees: [Staff], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateIntegrationEmployeesResponse> {
        self.updateIntegrationEmployees(.init(operator: `operator`, agent: agent, employees: employees), region: region, logger: logger, on: eventLoop)
    }

    /// 更新集成版员工信息
    ///
    /// 更新集成版员工信息(姓名，手机号，邮件)，用户实名后无法更改姓名与手机号
    @inlinable
    public func updateIntegrationEmployees(operator: UserInfo, agent: Agent, employees: [Staff], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateIntegrationEmployeesResponse {
        try await self.updateIntegrationEmployees(.init(operator: `operator`, agent: agent, employees: employees), region: region, logger: logger, on: eventLoop)
    }
}
