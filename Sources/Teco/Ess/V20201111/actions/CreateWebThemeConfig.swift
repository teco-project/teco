//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateWebThemeConfig请求参数结构体
    public struct CreateWebThemeConfigRequest: TCRequest {
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 主题类型，取值如下：
        ///
        /// - **EMBED_WEB_THEME**：嵌入式主题（默认），web页面嵌入的主题风格配置
        public let themeType: String

        /// 电子签logo是否展示，主体颜色等配置项
        public let webThemeConfig: WebThemeConfig

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, themeType: String, webThemeConfig: WebThemeConfig, agent: Agent? = nil) {
            self.operator = `operator`
            self.themeType = themeType
            self.webThemeConfig = webThemeConfig
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case themeType = "ThemeType"
            case webThemeConfig = "WebThemeConfig"
            case agent = "Agent"
        }
    }

    /// CreateWebThemeConfig返回参数结构体
    public struct CreateWebThemeConfigResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置本企业嵌入式页面主题配置
    ///
    /// 用来设置本企业嵌入式页面个性化主题配置（例如是否展示电子签logo、定义主题色等），设置后获取的web签署界面都会使用此配置进行展示。
    ///
    /// 如果多次调用，会以最后一次的配置为准
    @inlinable @discardableResult
    public func createWebThemeConfig(_ input: CreateWebThemeConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWebThemeConfigResponse> {
        self.client.execute(action: "CreateWebThemeConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置本企业嵌入式页面主题配置
    ///
    /// 用来设置本企业嵌入式页面个性化主题配置（例如是否展示电子签logo、定义主题色等），设置后获取的web签署界面都会使用此配置进行展示。
    ///
    /// 如果多次调用，会以最后一次的配置为准
    @inlinable @discardableResult
    public func createWebThemeConfig(_ input: CreateWebThemeConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWebThemeConfigResponse {
        try await self.client.execute(action: "CreateWebThemeConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置本企业嵌入式页面主题配置
    ///
    /// 用来设置本企业嵌入式页面个性化主题配置（例如是否展示电子签logo、定义主题色等），设置后获取的web签署界面都会使用此配置进行展示。
    ///
    /// 如果多次调用，会以最后一次的配置为准
    @inlinable @discardableResult
    public func createWebThemeConfig(operator: UserInfo, themeType: String, webThemeConfig: WebThemeConfig, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWebThemeConfigResponse> {
        self.createWebThemeConfig(.init(operator: `operator`, themeType: themeType, webThemeConfig: webThemeConfig, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 设置本企业嵌入式页面主题配置
    ///
    /// 用来设置本企业嵌入式页面个性化主题配置（例如是否展示电子签logo、定义主题色等），设置后获取的web签署界面都会使用此配置进行展示。
    ///
    /// 如果多次调用，会以最后一次的配置为准
    @inlinable @discardableResult
    public func createWebThemeConfig(operator: UserInfo, themeType: String, webThemeConfig: WebThemeConfig, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWebThemeConfigResponse {
        try await self.createWebThemeConfig(.init(operator: `operator`, themeType: themeType, webThemeConfig: webThemeConfig, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
