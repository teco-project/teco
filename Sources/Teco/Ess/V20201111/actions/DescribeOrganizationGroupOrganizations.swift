//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Ess {
    /// DescribeOrganizationGroupOrganizations请求参数结构体
    public struct DescribeOrganizationGroupOrganizationsRequest: TCPaginatedRequest {
        /// 操作人信息，userId必填
        public let `operator`: UserInfo

        /// 指定每页多少条数据，单页最大1000
        public let limit: UInt64

        /// 查询结果分页返回，此处指定第几页，如果不传默认从第一页返回。页码从 0 开始，即首页为 0
        public let offset: UInt64

        /// 查询成员企业的企业名，模糊匹配
        public let name: String?

        /// 成员企业加入集团的当前状态:1-待授权;2-已授权待激活;3-拒绝授权;4-已解除;5-已加入
        public let status: UInt64?

        /// 是否导出当前成员企业数据
        public let export: Bool?

        /// 成员企业机构 ID，在PC控制台 集团管理可获取
        public let id: String?

        public init(operator: UserInfo, limit: UInt64, offset: UInt64, name: String? = nil, status: UInt64? = nil, export: Bool? = nil, id: String? = nil) {
            self.operator = `operator`
            self.limit = limit
            self.offset = offset
            self.name = name
            self.status = status
            self.export = export
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case limit = "Limit"
            case offset = "Offset"
            case name = "Name"
            case status = "Status"
            case export = "Export"
            case id = "Id"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeOrganizationGroupOrganizationsResponse) -> DescribeOrganizationGroupOrganizationsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(operator: self.operator, limit: self.limit, offset: self.offset + .init(response.getItems().count), name: self.name, status: self.status, export: self.export, id: self.id)
        }
    }

    /// DescribeOrganizationGroupOrganizations返回参数结构体
    public struct DescribeOrganizationGroupOrganizationsResponse: TCPaginatedResponse {
        /// 查询到的符合条件的成员企业总数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?

        /// 已授权待激活的企业数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let joinedTotal: UInt64?

        /// 已加入的企业数量(废弃,请使用ActivatedTotal)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let activedTotal: UInt64?

        /// 如果入参Export为 true 时使用，表示导出Excel的url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exportUrl: String?

        /// 成员企业信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [GroupOrganization]?

        /// 已加入的企业数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let activatedTotal: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case joinedTotal = "JoinedTotal"
            case activedTotal = "ActivedTotal"
            case exportUrl = "ExportUrl"
            case list = "List"
            case activatedTotal = "ActivatedTotal"
            case requestId = "RequestId"
        }

        /// Extract the returned ``GroupOrganization`` list from the paginated response.
        public func getItems() -> [GroupOrganization] {
            self.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 查询集团企业列表
    ///
    /// 此API接口用户查询加入集团的成员企业
    @inlinable
    public func describeOrganizationGroupOrganizations(_ input: DescribeOrganizationGroupOrganizationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationGroupOrganizationsResponse> {
        self.client.execute(action: "DescribeOrganizationGroupOrganizations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询集团企业列表
    ///
    /// 此API接口用户查询加入集团的成员企业
    @inlinable
    public func describeOrganizationGroupOrganizations(_ input: DescribeOrganizationGroupOrganizationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationGroupOrganizationsResponse {
        try await self.client.execute(action: "DescribeOrganizationGroupOrganizations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询集团企业列表
    ///
    /// 此API接口用户查询加入集团的成员企业
    @inlinable
    public func describeOrganizationGroupOrganizations(operator: UserInfo, limit: UInt64, offset: UInt64, name: String? = nil, status: UInt64? = nil, export: Bool? = nil, id: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationGroupOrganizationsResponse> {
        self.describeOrganizationGroupOrganizations(.init(operator: `operator`, limit: limit, offset: offset, name: name, status: status, export: export, id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 查询集团企业列表
    ///
    /// 此API接口用户查询加入集团的成员企业
    @inlinable
    public func describeOrganizationGroupOrganizations(operator: UserInfo, limit: UInt64, offset: UInt64, name: String? = nil, status: UInt64? = nil, export: Bool? = nil, id: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationGroupOrganizationsResponse {
        try await self.describeOrganizationGroupOrganizations(.init(operator: `operator`, limit: limit, offset: offset, name: name, status: status, export: export, id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 查询集团企业列表
    ///
    /// 此API接口用户查询加入集团的成员企业
    @inlinable
    public func describeOrganizationGroupOrganizationsPaginated(_ input: DescribeOrganizationGroupOrganizationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [GroupOrganization])> {
        self.client.paginate(input: input, region: region, command: self.describeOrganizationGroupOrganizations, logger: logger, on: eventLoop)
    }

    /// 查询集团企业列表
    ///
    /// 此API接口用户查询加入集团的成员企业
    @inlinable @discardableResult
    public func describeOrganizationGroupOrganizationsPaginated(_ input: DescribeOrganizationGroupOrganizationsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeOrganizationGroupOrganizationsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeOrganizationGroupOrganizations, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询集团企业列表
    ///
    /// 此API接口用户查询加入集团的成员企业
    ///
    /// - Returns: `AsyncSequence`s of ``GroupOrganization`` and ``DescribeOrganizationGroupOrganizationsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeOrganizationGroupOrganizationsPaginator(_ input: DescribeOrganizationGroupOrganizationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeOrganizationGroupOrganizationsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeOrganizationGroupOrganizations, logger: logger, on: eventLoop)
    }
}
