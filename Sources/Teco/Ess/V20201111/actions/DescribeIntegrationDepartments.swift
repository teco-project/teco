//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// DescribeIntegrationDepartments请求参数结构体
    public struct DescribeIntegrationDepartmentsRequest: TCRequestModel {
        /// 操作人信息，UserId必填且需拥有组织架构管理权限
        public let `operator`: UserInfo

        /// 查询类型 0-查询单个部门节点 1-单个部门节点及一级子节点部门列表
        public let queryType: UInt64

        /// 部门ID,与DeptOpenId二选一,优先DeptId,都为空时获取根节点数据
        public let deptId: String?

        /// 客户系统部门ID,与DeptId二选一,优先DeptId,都为空时获取根节点数据
        public let deptOpenId: String?

        public init(operator: UserInfo, queryType: UInt64, deptId: String? = nil, deptOpenId: String? = nil) {
            self.operator = `operator`
            self.queryType = queryType
            self.deptId = deptId
            self.deptOpenId = deptOpenId
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case queryType = "QueryType"
            case deptId = "DeptId"
            case deptOpenId = "DeptOpenId"
        }
    }

    /// DescribeIntegrationDepartments返回参数结构体
    public struct DescribeIntegrationDepartmentsResponse: TCResponseModel {
        /// 部门列表
        public let departments: [IntegrationDepartment]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case departments = "Departments"
            case requestId = "RequestId"
        }
    }

    /// 获取企业部门列表
    ///
    /// 通过此接口，查询企业的部门，支持查询单个部门节点或单个部门节点及一级子节点部门列表。
    @inlinable
    public func describeIntegrationDepartments(_ input: DescribeIntegrationDepartmentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIntegrationDepartmentsResponse> {
        self.client.execute(action: "DescribeIntegrationDepartments", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取企业部门列表
    ///
    /// 通过此接口，查询企业的部门，支持查询单个部门节点或单个部门节点及一级子节点部门列表。
    @inlinable
    public func describeIntegrationDepartments(_ input: DescribeIntegrationDepartmentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIntegrationDepartmentsResponse {
        try await self.client.execute(action: "DescribeIntegrationDepartments", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取企业部门列表
    ///
    /// 通过此接口，查询企业的部门，支持查询单个部门节点或单个部门节点及一级子节点部门列表。
    @inlinable
    public func describeIntegrationDepartments(operator: UserInfo, queryType: UInt64, deptId: String? = nil, deptOpenId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIntegrationDepartmentsResponse> {
        self.describeIntegrationDepartments(.init(operator: `operator`, queryType: queryType, deptId: deptId, deptOpenId: deptOpenId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取企业部门列表
    ///
    /// 通过此接口，查询企业的部门，支持查询单个部门节点或单个部门节点及一级子节点部门列表。
    @inlinable
    public func describeIntegrationDepartments(operator: UserInfo, queryType: UInt64, deptId: String? = nil, deptOpenId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIntegrationDepartmentsResponse {
        try await self.describeIntegrationDepartments(.init(operator: `operator`, queryType: queryType, deptId: deptId, deptOpenId: deptOpenId), region: region, logger: logger, on: eventLoop)
    }
}
