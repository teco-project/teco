//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Ess {
    /// DescribeIntegrationRoles请求参数结构体
    public struct DescribeIntegrationRolesRequest: TCPaginatedRequest {
        /// 操作人信息，UserId必填
        public let `operator`: UserInfo

        /// 返回最大数量，最大为200
        public let limit: UInt64

        /// 代理相关应用信息，如集团主企业代子企业操作的场景中ProxyOrganizationId必填
        public let agent: Agent?

        /// 查询的关键字段:
        /// Key:"RoleType",Values:["1"]查询系统角色，Values:["2"]查询自定义角色
        /// Key:"RoleStatus",Values:["1"]查询启用角色，Values:["2"]查询禁用角色
        /// Key:"IsGroupRole"，Values:["0"],查询非集团角色，Values:["1"]表示查询集团角色
        public let filters: [Filter]?

        /// 偏移量，默认为0，最大为2000
        public let offset: UInt64?

        public init(operator: UserInfo, limit: UInt64, agent: Agent? = nil, filters: [Filter]? = nil, offset: UInt64? = nil) {
            self.operator = `operator`
            self.limit = limit
            self.agent = agent
            self.filters = filters
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case limit = "Limit"
            case agent = "Agent"
            case filters = "Filters"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeIntegrationRolesResponse) -> DescribeIntegrationRolesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeIntegrationRolesRequest(operator: self.operator, limit: self.limit, agent: self.agent, filters: self.filters, offset: (self.offset ?? 0) + response.limit)
        }
    }

    /// DescribeIntegrationRoles返回参数结构体
    public struct DescribeIntegrationRolesResponse: TCPaginatedResponse {
        /// 偏移量，默认为0，最大为2000
        public let offset: UInt64

        /// 返回最大数量，最大为200
        public let limit: UInt64

        /// 符合查询条件的总的角色数
        public let totalCount: UInt64

        /// 企业角色信息列表
        public let integrateRoles: [IntegrateRole]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case totalCount = "TotalCount"
            case integrateRoles = "IntegrateRoles"
            case requestId = "RequestId"
        }

        /// Extract the returned ``IntegrateRole`` list from the paginated response.
        public func getItems() -> [IntegrateRole] {
            self.integrateRoles
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询企业角色列表
    @inlinable
    public func describeIntegrationRoles(_ input: DescribeIntegrationRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIntegrationRolesResponse> {
        self.client.execute(action: "DescribeIntegrationRoles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询企业角色列表
    @inlinable
    public func describeIntegrationRoles(_ input: DescribeIntegrationRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIntegrationRolesResponse {
        try await self.client.execute(action: "DescribeIntegrationRoles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询企业角色列表
    @inlinable
    public func describeIntegrationRoles(operator: UserInfo, limit: UInt64, agent: Agent? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIntegrationRolesResponse> {
        self.describeIntegrationRoles(.init(operator: `operator`, limit: limit, agent: agent, filters: filters, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询企业角色列表
    @inlinable
    public func describeIntegrationRoles(operator: UserInfo, limit: UInt64, agent: Agent? = nil, filters: [Filter]? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIntegrationRolesResponse {
        try await self.describeIntegrationRoles(.init(operator: `operator`, limit: limit, agent: agent, filters: filters, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询企业角色列表
    @inlinable
    public func describeIntegrationRolesPaginated(_ input: DescribeIntegrationRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [IntegrateRole])> {
        self.client.paginate(input: input, region: region, command: self.describeIntegrationRoles, logger: logger, on: eventLoop)
    }

    /// 查询企业角色列表
    @inlinable @discardableResult
    public func describeIntegrationRolesPaginated(_ input: DescribeIntegrationRolesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeIntegrationRolesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeIntegrationRoles, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询企业角色列表
    ///
    /// - Returns: `AsyncSequence`s of ``IntegrateRole`` and ``DescribeIntegrationRolesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeIntegrationRolesPaginator(_ input: DescribeIntegrationRolesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeIntegrationRolesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeIntegrationRoles, logger: logger, on: eventLoop)
    }
}
