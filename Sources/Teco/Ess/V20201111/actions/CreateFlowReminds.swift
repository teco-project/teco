//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateFlowReminds请求参数结构体
    public struct CreateFlowRemindsRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 需执行催办的签署流程ID数组，最多包含100个。
        public let flowIds: [String]

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, flowIds: [String], agent: Agent? = nil) {
            self.operator = `operator`
            self.flowIds = flowIds
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case flowIds = "FlowIds"
            case agent = "Agent"
        }
    }

    /// CreateFlowReminds返回参数结构体
    public struct CreateFlowRemindsResponse: TCResponse {
        /// 合同催办结果的详细信息列表。
        public let remindFlowRecords: [RemindFlowRecords]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case remindFlowRecords = "RemindFlowRecords"
            case requestId = "RequestId"
        }
    }

    /// 合同催办
    ///
    /// 指定需要批量催办的签署流程ID，批量催办合同，最多100个。需要符合以下条件的合同才可被催办：
    ///
    /// 1. 发起合同时，签署人的NotifyType需设置为sms
    /// 2. 合同中当前状态为“待签署”的签署人是催办的对象
    /// 3. 每个合同只能催办一次
    ///
    /// 注意：该接口无法直接调用，请联系客户经理申请使用。
    @inlinable
    public func createFlowReminds(_ input: CreateFlowRemindsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowRemindsResponse> {
        self.client.execute(action: "CreateFlowReminds", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 合同催办
    ///
    /// 指定需要批量催办的签署流程ID，批量催办合同，最多100个。需要符合以下条件的合同才可被催办：
    ///
    /// 1. 发起合同时，签署人的NotifyType需设置为sms
    /// 2. 合同中当前状态为“待签署”的签署人是催办的对象
    /// 3. 每个合同只能催办一次
    ///
    /// 注意：该接口无法直接调用，请联系客户经理申请使用。
    @inlinable
    public func createFlowReminds(_ input: CreateFlowRemindsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowRemindsResponse {
        try await self.client.execute(action: "CreateFlowReminds", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 合同催办
    ///
    /// 指定需要批量催办的签署流程ID，批量催办合同，最多100个。需要符合以下条件的合同才可被催办：
    ///
    /// 1. 发起合同时，签署人的NotifyType需设置为sms
    /// 2. 合同中当前状态为“待签署”的签署人是催办的对象
    /// 3. 每个合同只能催办一次
    ///
    /// 注意：该接口无法直接调用，请联系客户经理申请使用。
    @inlinable
    public func createFlowReminds(operator: UserInfo, flowIds: [String], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowRemindsResponse> {
        self.createFlowReminds(.init(operator: `operator`, flowIds: flowIds, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 合同催办
    ///
    /// 指定需要批量催办的签署流程ID，批量催办合同，最多100个。需要符合以下条件的合同才可被催办：
    ///
    /// 1. 发起合同时，签署人的NotifyType需设置为sms
    /// 2. 合同中当前状态为“待签署”的签署人是催办的对象
    /// 3. 每个合同只能催办一次
    ///
    /// 注意：该接口无法直接调用，请联系客户经理申请使用。
    @inlinable
    public func createFlowReminds(operator: UserInfo, flowIds: [String], agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowRemindsResponse {
        try await self.createFlowReminds(.init(operator: `operator`, flowIds: flowIds, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
