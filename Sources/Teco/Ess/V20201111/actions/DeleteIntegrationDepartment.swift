//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// DeleteIntegrationDepartment请求参数结构体
    public struct DeleteIntegrationDepartmentRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得组织架构管理权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 电子签中的部门ID，通过[DescribeIntegrationDepartments](https://qian.tencent.com/developers/companyApis/organizations/DescribeIntegrationDepartments)接口可获得。
        public let deptId: String

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        /// 交接部门ID。
        /// 待删除部门中的合同、印章和模板数据，将会被交接至该部门ID下；若未填写则交接至公司根部门。
        public let receiveDeptId: String?

        public init(operator: UserInfo, deptId: String, agent: Agent? = nil, receiveDeptId: String? = nil) {
            self.operator = `operator`
            self.deptId = deptId
            self.agent = agent
            self.receiveDeptId = receiveDeptId
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case deptId = "DeptId"
            case agent = "Agent"
            case receiveDeptId = "ReceiveDeptId"
        }
    }

    /// DeleteIntegrationDepartment返回参数结构体
    public struct DeleteIntegrationDepartmentResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除企业部门
    ///
    /// 此接口（DeleteIntegrationDepartment）用于删除企业的部门信息。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(_ input: DeleteIntegrationDepartmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteIntegrationDepartmentResponse> {
        self.client.execute(action: "DeleteIntegrationDepartment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除企业部门
    ///
    /// 此接口（DeleteIntegrationDepartment）用于删除企业的部门信息。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(_ input: DeleteIntegrationDepartmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteIntegrationDepartmentResponse {
        try await self.client.execute(action: "DeleteIntegrationDepartment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除企业部门
    ///
    /// 此接口（DeleteIntegrationDepartment）用于删除企业的部门信息。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(operator: UserInfo, deptId: String, agent: Agent? = nil, receiveDeptId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteIntegrationDepartmentResponse> {
        self.deleteIntegrationDepartment(.init(operator: `operator`, deptId: deptId, agent: agent, receiveDeptId: receiveDeptId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除企业部门
    ///
    /// 此接口（DeleteIntegrationDepartment）用于删除企业的部门信息。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(operator: UserInfo, deptId: String, agent: Agent? = nil, receiveDeptId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteIntegrationDepartmentResponse {
        try await self.deleteIntegrationDepartment(.init(operator: `operator`, deptId: deptId, agent: agent, receiveDeptId: receiveDeptId), region: region, logger: logger, on: eventLoop)
    }
}
