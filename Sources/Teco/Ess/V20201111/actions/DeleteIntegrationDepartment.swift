//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// DeleteIntegrationDepartment请求参数结构体
    public struct DeleteIntegrationDepartmentRequest: TCRequestModel {
        /// 操作人信息，UserId必填且需拥有组织架构管理权限
        public let `operator`: UserInfo

        /// 电子签中的部门id
        public let deptId: String

        /// 交接部门ID。待删除部门中的合同、印章和模板数据，交接至该部门ID下，未填写交接至公司根部门。
        public let receiveDeptId: String?

        public init(operator: UserInfo, deptId: String, receiveDeptId: String? = nil) {
            self.operator = `operator`
            self.deptId = deptId
            self.receiveDeptId = receiveDeptId
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case deptId = "DeptId"
            case receiveDeptId = "ReceiveDeptId"
        }
    }

    /// DeleteIntegrationDepartment返回参数结构体
    public struct DeleteIntegrationDepartmentResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除企业部门
    ///
    /// 通过此接口，删除企业的部门。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(_ input: DeleteIntegrationDepartmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteIntegrationDepartmentResponse> {
        self.client.execute(action: "DeleteIntegrationDepartment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除企业部门
    ///
    /// 通过此接口，删除企业的部门。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(_ input: DeleteIntegrationDepartmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteIntegrationDepartmentResponse {
        try await self.client.execute(action: "DeleteIntegrationDepartment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除企业部门
    ///
    /// 通过此接口，删除企业的部门。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(operator: UserInfo, deptId: String, receiveDeptId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteIntegrationDepartmentResponse> {
        self.deleteIntegrationDepartment(.init(operator: `operator`, deptId: deptId, receiveDeptId: receiveDeptId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除企业部门
    ///
    /// 通过此接口，删除企业的部门。
    @inlinable @discardableResult
    public func deleteIntegrationDepartment(operator: UserInfo, deptId: String, receiveDeptId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteIntegrationDepartmentResponse {
        try await self.deleteIntegrationDepartment(.init(operator: `operator`, deptId: deptId, receiveDeptId: receiveDeptId), region: region, logger: logger, on: eventLoop)
    }
}
