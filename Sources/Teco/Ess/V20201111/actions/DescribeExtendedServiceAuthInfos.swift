//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// DescribeExtendedServiceAuthInfos请求参数结构体
    public struct DescribeExtendedServiceAuthInfosRequest: TCRequestModel {
        /// 操作人信息
        public let `operator`: UserInfo

        /// 代理相关应用信息，如集团主企业代子企业操作
        public let agent: Agent?

        /// 扩展服务类型，默认为空，查询目前支持的所有扩展服务信息，单个指定则查询单个扩展服务开通信息，取值：
        /// OPEN_SERVER_SIGN：开通企业静默签署
        /// OVERSEA_SIGN：企业与港澳台居民签署合同
        /// MOBILE_CHECK_APPROVER：使用手机号验证签署方身份
        /// PAGING_SEAL：骑缝章
        /// BATCH_SIGN：批量签署
        public let extendServiceType: String?

        public init(operator: UserInfo, agent: Agent? = nil, extendServiceType: String? = nil) {
            self.operator = `operator`
            self.agent = agent
            self.extendServiceType = extendServiceType
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case agent = "Agent"
            case extendServiceType = "ExtendServiceType"
        }
    }

    /// DescribeExtendedServiceAuthInfos返回参数结构体
    public struct DescribeExtendedServiceAuthInfosResponse: TCResponseModel {
        /// 授权服务信息列表
        public let authInfoList: [ExtendAuthInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case authInfoList = "AuthInfoList"
            case requestId = "RequestId"
        }
    }

    /// 查询企业扩展服务授权信息
    ///
    /// 查询企业扩展服务授权信息，目前支持查询：企业静默签，企业与港澳台居民签署合同，使用手机号验证签署方身份，骑缝章，批量签署能力是否已经开通
    @inlinable
    public func describeExtendedServiceAuthInfos(_ input: DescribeExtendedServiceAuthInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExtendedServiceAuthInfosResponse> {
        self.client.execute(action: "DescribeExtendedServiceAuthInfos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询企业扩展服务授权信息
    ///
    /// 查询企业扩展服务授权信息，目前支持查询：企业静默签，企业与港澳台居民签署合同，使用手机号验证签署方身份，骑缝章，批量签署能力是否已经开通
    @inlinable
    public func describeExtendedServiceAuthInfos(_ input: DescribeExtendedServiceAuthInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExtendedServiceAuthInfosResponse {
        try await self.client.execute(action: "DescribeExtendedServiceAuthInfos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询企业扩展服务授权信息
    ///
    /// 查询企业扩展服务授权信息，目前支持查询：企业静默签，企业与港澳台居民签署合同，使用手机号验证签署方身份，骑缝章，批量签署能力是否已经开通
    @inlinable
    public func describeExtendedServiceAuthInfos(operator: UserInfo, agent: Agent? = nil, extendServiceType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExtendedServiceAuthInfosResponse> {
        self.describeExtendedServiceAuthInfos(.init(operator: `operator`, agent: agent, extendServiceType: extendServiceType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询企业扩展服务授权信息
    ///
    /// 查询企业扩展服务授权信息，目前支持查询：企业静默签，企业与港澳台居民签署合同，使用手机号验证签署方身份，骑缝章，批量签署能力是否已经开通
    @inlinable
    public func describeExtendedServiceAuthInfos(operator: UserInfo, agent: Agent? = nil, extendServiceType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExtendedServiceAuthInfosResponse {
        try await self.describeExtendedServiceAuthInfos(.init(operator: `operator`, agent: agent, extendServiceType: extendServiceType), region: region, logger: logger, on: eventLoop)
    }
}
