//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ess {
    /// 发起流程
    ///
    /// 此接口用于发起流程
    /// 适用场景：见创建签署流程接口。
    /// 注：该接口是“创建电子文档”接口的后置接口，用于激活包含完整合同信息（模板及内容信息）的流程。激活后的流程就是一份待签署的电子合同。
    @inlinable
    public func startFlow(_ input: StartFlowRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < StartFlowResponse > {
        self.client.execute(action: "StartFlow", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 发起流程
    ///
    /// 此接口用于发起流程
    /// 适用场景：见创建签署流程接口。
    /// 注：该接口是“创建电子文档”接口的后置接口，用于激活包含完整合同信息（模板及内容信息）的流程。激活后的流程就是一份待签署的电子合同。
    @inlinable
    public func startFlow(_ input: StartFlowRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartFlowResponse {
        try await self.client.execute(action: "StartFlow", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// StartFlow请求参数结构体
    public struct StartFlowRequest: TCRequestModel {
        /// 调用方用户信息，userId 必填
        public let `operator`: UserInfo
        
        /// 签署流程编号，由CreateFlow接口返回
        public let flowId: String
        
        /// 客户端Token，保持接口幂等性,最大长度64个字符
        public let clientToken: String?
        
        /// 应用相关信息
        public let agent: Agent
        
        public init (`operator`: UserInfo, flowId: String, clientToken: String?, agent: Agent) {
            self.`operator` = `operator`
            self.flowId = flowId
            self.clientToken = clientToken
            self.agent = agent
        }
        
        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case flowId = "FlowId"
            case clientToken = "ClientToken"
            case agent = "Agent"
        }
    }
    
    /// StartFlow返回参数结构体
    public struct StartFlowResponse: TCResponseModel {
        /// 返回描述，START-发起成功， REVIEW-提交审核成功，EXECUTING-已提交发起任务
        public let status: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }
}