//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// BindEmployeeUserIdWithClientOpenId请求参数结构体
    public struct BindEmployeeUserIdWithClientOpenIdRequest: TCRequestModel {
        /// 用户信息，OpenId与UserId二选一必填一个，OpenId是第三方客户ID，userId是用户实名后的电子签生成的ID,当传入客户系统openId，传入的openId需与电子签员工userId绑定，且参数Channel必填，Channel值为INTEGRATE；当传入参数UserId，Channel无需指定。（参数参考示例）
        public let `operator`: UserInfo

        /// 电子签系统员工UserId
        public let userId: String

        /// 客户系统OpenId
        public let openId: String

        /// 代理相关应用信息，如集团主企业代子企业操作的场景中ProxyOrganizationId必填
        public let agent: Agent?

        public init(operator: UserInfo, userId: String, openId: String, agent: Agent? = nil) {
            self.operator = `operator`
            self.userId = userId
            self.openId = openId
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case userId = "UserId"
            case openId = "OpenId"
            case agent = "Agent"
        }
    }

    /// BindEmployeeUserIdWithClientOpenId返回参数结构体
    public struct BindEmployeeUserIdWithClientOpenIdResponse: TCResponseModel {
        /// 绑定是否成功，1表示成功，0表示失败
        public let status: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 员工userid与客户系统openid绑定
    ///
    /// 将电子签系统员工userId与客户系统员工openId进行绑定
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(_ input: BindEmployeeUserIdWithClientOpenIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindEmployeeUserIdWithClientOpenIdResponse> {
        self.client.execute(action: "BindEmployeeUserIdWithClientOpenId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 员工userid与客户系统openid绑定
    ///
    /// 将电子签系统员工userId与客户系统员工openId进行绑定
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(_ input: BindEmployeeUserIdWithClientOpenIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindEmployeeUserIdWithClientOpenIdResponse {
        try await self.client.execute(action: "BindEmployeeUserIdWithClientOpenId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 员工userid与客户系统openid绑定
    ///
    /// 将电子签系统员工userId与客户系统员工openId进行绑定
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(operator: UserInfo, userId: String, openId: String, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindEmployeeUserIdWithClientOpenIdResponse> {
        self.bindEmployeeUserIdWithClientOpenId(.init(operator: `operator`, userId: userId, openId: openId, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 员工userid与客户系统openid绑定
    ///
    /// 将电子签系统员工userId与客户系统员工openId进行绑定
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(operator: UserInfo, userId: String, openId: String, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindEmployeeUserIdWithClientOpenIdResponse {
        try await self.bindEmployeeUserIdWithClientOpenId(.init(operator: `operator`, userId: userId, openId: openId, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
