//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// BindEmployeeUserIdWithClientOpenId请求参数结构体
    public struct BindEmployeeUserIdWithClientOpenIdRequest: TCRequest {
        /// 执行本接口操作的员工信息。使用此接口时，必须填写UserId。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 员工在腾讯电子签平台的唯一身份标识，为32位字符串。
        /// 可登录腾讯电子签控制台，在 "更多能力"->"组织管理" 中查看某位员工的UserId(在页面中展示为用户ID)；或者通过[DescribeIntegrationEmployees](https://qian.tencent.com/developers/companyApis/staffs/DescribeIntegrationEmployees)接口获取。
        public let userId: String

        /// 员工在贵司业务系统中的唯一身份标识，用于与腾讯电子签账号进行映射，确保在同一企业内不会出现重复。 该标识最大长度为64位字符串，仅支持包含26个英文字母和数字0-9的字符。
        public let openId: String

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, userId: String, openId: String, agent: Agent? = nil) {
            self.operator = `operator`
            self.userId = userId
            self.openId = openId
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case userId = "UserId"
            case openId = "OpenId"
            case agent = "Agent"
        }
    }

    /// BindEmployeeUserIdWithClientOpenId返回参数结构体
    public struct BindEmployeeUserIdWithClientOpenIdResponse: TCResponse {
        /// 绑定是否成功。
        ///
        /// - **0**：失败
        /// - **1**：成功
        public let status: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 员工Userid与客户系统Openid绑定
    ///
    /// 此接口（BindEmployeeUserIdWithClientOpenId）用于将电子签系统员工UserId与客户系统员工OpenId进行绑定。
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(_ input: BindEmployeeUserIdWithClientOpenIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindEmployeeUserIdWithClientOpenIdResponse> {
        self.client.execute(action: "BindEmployeeUserIdWithClientOpenId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 员工Userid与客户系统Openid绑定
    ///
    /// 此接口（BindEmployeeUserIdWithClientOpenId）用于将电子签系统员工UserId与客户系统员工OpenId进行绑定。
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(_ input: BindEmployeeUserIdWithClientOpenIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindEmployeeUserIdWithClientOpenIdResponse {
        try await self.client.execute(action: "BindEmployeeUserIdWithClientOpenId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 员工Userid与客户系统Openid绑定
    ///
    /// 此接口（BindEmployeeUserIdWithClientOpenId）用于将电子签系统员工UserId与客户系统员工OpenId进行绑定。
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(operator: UserInfo, userId: String, openId: String, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindEmployeeUserIdWithClientOpenIdResponse> {
        self.bindEmployeeUserIdWithClientOpenId(.init(operator: `operator`, userId: userId, openId: openId, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 员工Userid与客户系统Openid绑定
    ///
    /// 此接口（BindEmployeeUserIdWithClientOpenId）用于将电子签系统员工UserId与客户系统员工OpenId进行绑定。
    @inlinable
    public func bindEmployeeUserIdWithClientOpenId(operator: UserInfo, userId: String, openId: String, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindEmployeeUserIdWithClientOpenIdResponse {
        try await self.bindEmployeeUserIdWithClientOpenId(.init(operator: `operator`, userId: userId, openId: openId, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
