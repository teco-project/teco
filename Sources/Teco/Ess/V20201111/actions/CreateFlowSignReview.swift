//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateFlowSignReview请求参数结构体
    public struct CreateFlowSignReviewRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 合同流程ID，为32位字符串。
        /// 建议开发者妥善保存此流程ID，以便于顺利进行后续操作。
        /// 可登录腾讯电子签控制台，在 "合同"->"合同中心" 中查看某个合同的FlowId(在页面中展示为合同ID)。
        public let flowId: String

        /// 企业审核结果
        ///
        /// - PASS: 通过
        /// - REJECT: 拒绝
        public let reviewType: String

        /// 审核结果原因，
        /// 字符串长度不超过200
        /// 当ReviewType 是拒绝（REJECT） 时此字段必填。
        public let reviewMessage: String?

        /// 代理相关应用信息，如集团主企业代子企业操作的场景中ProxyOrganizationId必填
        public let agent: Agent?

        /// 审核签署节点人标识，
        /// 用来标识审核的签署方。
        /// 如果签署审核节点是个人， 此参数必填。
        public let recipientId: String?

        /// 操作类型：（接口通过该字段区分不同的操作类型）
        ///
        /// - SignReview: 签署审核（默认）
        /// - CreateReview: 创建审核
        ///
        /// 如果审核节点是个人，则操作类型只能为SignReview。
        public let operateType: String?

        public init(operator: UserInfo, flowId: String, reviewType: String, reviewMessage: String? = nil, agent: Agent? = nil, recipientId: String? = nil, operateType: String? = nil) {
            self.operator = `operator`
            self.flowId = flowId
            self.reviewType = reviewType
            self.reviewMessage = reviewMessage
            self.agent = agent
            self.recipientId = recipientId
            self.operateType = operateType
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case flowId = "FlowId"
            case reviewType = "ReviewType"
            case reviewMessage = "ReviewMessage"
            case agent = "Agent"
            case recipientId = "RecipientId"
            case operateType = "OperateType"
        }
    }

    /// CreateFlowSignReview返回参数结构体
    public struct CreateFlowSignReviewResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 提交签署流程审批结果
    ///
    /// 提交签署流程审批结果的适用场景包括：
    /// 1. 在使用模板（CreateFlow）或文件（CreateFlowByFiles）创建签署流程时，若指定了参数NeedSignReview为true，且发起方企业作为签署方参与了流程签署，则可以调用此接口提交企业内部签署审批结果。自动签署也需要进行审核通过才会进行签署。
    /// 2. 若签署流程状态正常，同一签署流程可以多次提交签署审批结果，签署时的最后一个“审批结果”有效。
    @inlinable @discardableResult
    public func createFlowSignReview(_ input: CreateFlowSignReviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowSignReviewResponse> {
        self.client.execute(action: "CreateFlowSignReview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 提交签署流程审批结果
    ///
    /// 提交签署流程审批结果的适用场景包括：
    /// 1. 在使用模板（CreateFlow）或文件（CreateFlowByFiles）创建签署流程时，若指定了参数NeedSignReview为true，且发起方企业作为签署方参与了流程签署，则可以调用此接口提交企业内部签署审批结果。自动签署也需要进行审核通过才会进行签署。
    /// 2. 若签署流程状态正常，同一签署流程可以多次提交签署审批结果，签署时的最后一个“审批结果”有效。
    @inlinable @discardableResult
    public func createFlowSignReview(_ input: CreateFlowSignReviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowSignReviewResponse {
        try await self.client.execute(action: "CreateFlowSignReview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 提交签署流程审批结果
    ///
    /// 提交签署流程审批结果的适用场景包括：
    /// 1. 在使用模板（CreateFlow）或文件（CreateFlowByFiles）创建签署流程时，若指定了参数NeedSignReview为true，且发起方企业作为签署方参与了流程签署，则可以调用此接口提交企业内部签署审批结果。自动签署也需要进行审核通过才会进行签署。
    /// 2. 若签署流程状态正常，同一签署流程可以多次提交签署审批结果，签署时的最后一个“审批结果”有效。
    @inlinable @discardableResult
    public func createFlowSignReview(operator: UserInfo, flowId: String, reviewType: String, reviewMessage: String? = nil, agent: Agent? = nil, recipientId: String? = nil, operateType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowSignReviewResponse> {
        self.createFlowSignReview(.init(operator: `operator`, flowId: flowId, reviewType: reviewType, reviewMessage: reviewMessage, agent: agent, recipientId: recipientId, operateType: operateType), region: region, logger: logger, on: eventLoop)
    }

    /// 提交签署流程审批结果
    ///
    /// 提交签署流程审批结果的适用场景包括：
    /// 1. 在使用模板（CreateFlow）或文件（CreateFlowByFiles）创建签署流程时，若指定了参数NeedSignReview为true，且发起方企业作为签署方参与了流程签署，则可以调用此接口提交企业内部签署审批结果。自动签署也需要进行审核通过才会进行签署。
    /// 2. 若签署流程状态正常，同一签署流程可以多次提交签署审批结果，签署时的最后一个“审批结果”有效。
    @inlinable @discardableResult
    public func createFlowSignReview(operator: UserInfo, flowId: String, reviewType: String, reviewMessage: String? = nil, agent: Agent? = nil, recipientId: String? = nil, operateType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowSignReviewResponse {
        try await self.createFlowSignReview(.init(operator: `operator`, flowId: flowId, reviewType: reviewType, reviewMessage: reviewMessage, agent: agent, recipientId: recipientId, operateType: operateType), region: region, logger: logger, on: eventLoop)
    }
}
