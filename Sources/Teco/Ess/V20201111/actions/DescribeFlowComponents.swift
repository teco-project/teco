//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// DescribeFlowComponents请求参数结构体
    public struct DescribeFlowComponentsRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 合同流程ID，为32位字符串。
        /// 建议开发者妥善保存此流程ID，以便于顺利进行后续操作。
        /// 可登录腾讯电子签控制台，在 "合同"->"合同中心" 中查看某个合同的FlowId(在页面中展示为合同ID)。
        public let flowId: String

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, flowId: String, agent: Agent? = nil) {
            self.operator = `operator`
            self.flowId = flowId
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case flowId = "FlowId"
            case agent = "Agent"
        }
    }

    /// DescribeFlowComponents返回参数结构体
    public struct DescribeFlowComponentsResponse: TCResponse {
        /// 合同流程关联的填写控件信息，按照参与方进行分类返回。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recipientComponentInfos: [RecipientComponentInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case recipientComponentInfos = "RecipientComponentInfos"
            case requestId = "RequestId"
        }
    }

    /// 查询流程填写控件内容
    ///
    /// 查询流程填写控件内容，可以根据合同流程ID查询该合同流程相关联的填写控件信息和填写内容。
    @inlinable
    public func describeFlowComponents(_ input: DescribeFlowComponentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowComponentsResponse> {
        self.client.execute(action: "DescribeFlowComponents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询流程填写控件内容
    ///
    /// 查询流程填写控件内容，可以根据合同流程ID查询该合同流程相关联的填写控件信息和填写内容。
    @inlinable
    public func describeFlowComponents(_ input: DescribeFlowComponentsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowComponentsResponse {
        try await self.client.execute(action: "DescribeFlowComponents", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询流程填写控件内容
    ///
    /// 查询流程填写控件内容，可以根据合同流程ID查询该合同流程相关联的填写控件信息和填写内容。
    @inlinable
    public func describeFlowComponents(operator: UserInfo, flowId: String, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowComponentsResponse> {
        self.describeFlowComponents(.init(operator: `operator`, flowId: flowId, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 查询流程填写控件内容
    ///
    /// 查询流程填写控件内容，可以根据合同流程ID查询该合同流程相关联的填写控件信息和填写内容。
    @inlinable
    public func describeFlowComponents(operator: UserInfo, flowId: String, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowComponentsResponse {
        try await self.describeFlowComponents(.init(operator: `operator`, flowId: flowId, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
