//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateFlowApprovers请求参数结构体
    public struct CreateFlowApproversRequest: TCRequest {
        /// 调用方用户信息，userId 必填
        public let `operator`: UserInfo

        /// 签署流程编号
        public let flowId: String

        /// 补充签署人信息
        public let approvers: [FillApproverInfo]

        /// 企微消息中的发起人
        public let initiator: String?

        /// 代理相关应用信息，如集团主企业代子企业操作
        public let agent: Agent?

        public init(operator: UserInfo, flowId: String, approvers: [FillApproverInfo], initiator: String? = nil, agent: Agent? = nil) {
            self.operator = `operator`
            self.flowId = flowId
            self.approvers = approvers
            self.initiator = initiator
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case flowId = "FlowId"
            case approvers = "Approvers"
            case initiator = "Initiator"
            case agent = "Agent"
        }
    }

    /// CreateFlowApprovers返回参数结构体
    public struct CreateFlowApproversResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 补充签署流程企业签署人信息
    ///
    /// ### 适用场景
    /// 在通过模板或者文件发起合同时，若未指定企业签署人信息，则流程发起后，可以调用此接口补充或签签署人。
    /// 同一签署人可以补充多个员工作为或签签署人,最终实际签署人取决于谁先领取合同完成签署。
    /// ### 限制条件
    /// -  本企业(发起方企业)支持通过企业微信UserId 或者 姓名+手机号补充
    /// - 他方企业仅支持通过姓名+手机号补充
    @inlinable @discardableResult
    public func createFlowApprovers(_ input: CreateFlowApproversRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowApproversResponse> {
        self.client.execute(action: "CreateFlowApprovers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 补充签署流程企业签署人信息
    ///
    /// ### 适用场景
    /// 在通过模板或者文件发起合同时，若未指定企业签署人信息，则流程发起后，可以调用此接口补充或签签署人。
    /// 同一签署人可以补充多个员工作为或签签署人,最终实际签署人取决于谁先领取合同完成签署。
    /// ### 限制条件
    /// -  本企业(发起方企业)支持通过企业微信UserId 或者 姓名+手机号补充
    /// - 他方企业仅支持通过姓名+手机号补充
    @inlinable @discardableResult
    public func createFlowApprovers(_ input: CreateFlowApproversRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowApproversResponse {
        try await self.client.execute(action: "CreateFlowApprovers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 补充签署流程企业签署人信息
    ///
    /// ### 适用场景
    /// 在通过模板或者文件发起合同时，若未指定企业签署人信息，则流程发起后，可以调用此接口补充或签签署人。
    /// 同一签署人可以补充多个员工作为或签签署人,最终实际签署人取决于谁先领取合同完成签署。
    /// ### 限制条件
    /// -  本企业(发起方企业)支持通过企业微信UserId 或者 姓名+手机号补充
    /// - 他方企业仅支持通过姓名+手机号补充
    @inlinable @discardableResult
    public func createFlowApprovers(operator: UserInfo, flowId: String, approvers: [FillApproverInfo], initiator: String? = nil, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowApproversResponse> {
        self.createFlowApprovers(.init(operator: `operator`, flowId: flowId, approvers: approvers, initiator: initiator, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 补充签署流程企业签署人信息
    ///
    /// ### 适用场景
    /// 在通过模板或者文件发起合同时，若未指定企业签署人信息，则流程发起后，可以调用此接口补充或签签署人。
    /// 同一签署人可以补充多个员工作为或签签署人,最终实际签署人取决于谁先领取合同完成签署。
    /// ### 限制条件
    /// -  本企业(发起方企业)支持通过企业微信UserId 或者 姓名+手机号补充
    /// - 他方企业仅支持通过姓名+手机号补充
    @inlinable @discardableResult
    public func createFlowApprovers(operator: UserInfo, flowId: String, approvers: [FillApproverInfo], initiator: String? = nil, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowApproversResponse {
        try await self.createFlowApprovers(.init(operator: `operator`, flowId: flowId, approvers: approvers, initiator: initiator, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
