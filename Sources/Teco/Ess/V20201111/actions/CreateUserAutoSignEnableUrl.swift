//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateUserAutoSignEnableUrl请求参数结构体
    public struct CreateUserAutoSignEnableUrlRequest: TCRequestModel {
        /// 操作人信息
        public let `operator`: UserInfo

        /// 自动签场景:
        /// E_PRESCRIPTION_AUTO_SIGN 电子处方
        public let sceneKey: String

        /// 自动签开通，签署相关配置
        public let autoSignConfig: AutoSignConfig

        /// 链接类型，空-默认小程序端链接，H5SIGN-h5端链接
        public let urlType: String?

        public init(operator: UserInfo, sceneKey: String, autoSignConfig: AutoSignConfig, urlType: String? = nil) {
            self.operator = `operator`
            self.sceneKey = sceneKey
            self.autoSignConfig = autoSignConfig
            self.urlType = urlType
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case sceneKey = "SceneKey"
            case autoSignConfig = "AutoSignConfig"
            case urlType = "UrlType"
        }
    }

    /// CreateUserAutoSignEnableUrl返回参数结构体
    public struct CreateUserAutoSignEnableUrlResponse: TCResponseModel {
        /// 跳转短链
        public let url: String

        /// 小程序AppId
        public let appId: String

        /// 小程序 原始 Id
        public let appOriginalId: String

        /// 跳转路径
        public let path: String

        /// base64格式跳转二维码
        public let qrCode: String

        /// 链接类型，空-默认小程序端链接，H5SIGN-h5端链接
        public let urlType: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case appId = "AppId"
            case appOriginalId = "AppOriginalId"
            case path = "Path"
            case qrCode = "QrCode"
            case urlType = "UrlType"
            case requestId = "RequestId"
        }
    }

    /// 获取个人用户自动签开启链接
    ///
    /// 企业方可以通过此接口获取个人用户开启自动签的跳转链接
    @inlinable
    public func createUserAutoSignEnableUrl(_ input: CreateUserAutoSignEnableUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserAutoSignEnableUrlResponse> {
        self.client.execute(action: "CreateUserAutoSignEnableUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取个人用户自动签开启链接
    ///
    /// 企业方可以通过此接口获取个人用户开启自动签的跳转链接
    @inlinable
    public func createUserAutoSignEnableUrl(_ input: CreateUserAutoSignEnableUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserAutoSignEnableUrlResponse {
        try await self.client.execute(action: "CreateUserAutoSignEnableUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取个人用户自动签开启链接
    ///
    /// 企业方可以通过此接口获取个人用户开启自动签的跳转链接
    @inlinable
    public func createUserAutoSignEnableUrl(operator: UserInfo, sceneKey: String, autoSignConfig: AutoSignConfig, urlType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserAutoSignEnableUrlResponse> {
        self.createUserAutoSignEnableUrl(.init(operator: `operator`, sceneKey: sceneKey, autoSignConfig: autoSignConfig, urlType: urlType), region: region, logger: logger, on: eventLoop)
    }

    /// 获取个人用户自动签开启链接
    ///
    /// 企业方可以通过此接口获取个人用户开启自动签的跳转链接
    @inlinable
    public func createUserAutoSignEnableUrl(operator: UserInfo, sceneKey: String, autoSignConfig: AutoSignConfig, urlType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserAutoSignEnableUrlResponse {
        try await self.createUserAutoSignEnableUrl(.init(operator: `operator`, sceneKey: sceneKey, autoSignConfig: autoSignConfig, urlType: urlType), region: region, logger: logger, on: eventLoop)
    }
}
