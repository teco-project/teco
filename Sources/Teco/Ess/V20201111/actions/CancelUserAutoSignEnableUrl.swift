//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CancelUserAutoSignEnableUrl请求参数结构体
    public struct CancelUserAutoSignEnableUrlRequest: TCRequest {
        /// 执行本接口操作的员工信息。
        /// 注: `在调用此接口时，请确保指定的员工已获得所需的接口调用权限，并具备接口传入的相应资源的数据权限。`
        public let `operator`: UserInfo

        /// 自动签使用的场景值, 可以选择的场景值如下:
        ///
        /// - **E_PRESCRIPTION_AUTO_SIGN** :  电子处方场景
        ///
        /// 注: `现在仅支持电子处方场景`
        public let sceneKey: String

        /// 预撤销链接的用户信息，包含姓名、证件类型、证件号码等信息。
        public let userInfo: UserThreeFactor

        /// 代理企业和员工的信息。
        /// 在集团企业代理子企业操作的场景中，需设置此参数。在此情境下，ProxyOrganizationId（子企业的组织ID）为必填项。
        public let agent: Agent?

        public init(operator: UserInfo, sceneKey: String, userInfo: UserThreeFactor, agent: Agent? = nil) {
            self.operator = `operator`
            self.sceneKey = sceneKey
            self.userInfo = userInfo
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case sceneKey = "SceneKey"
            case userInfo = "UserInfo"
            case agent = "Agent"
        }
    }

    /// CancelUserAutoSignEnableUrl返回参数结构体
    public struct CancelUserAutoSignEnableUrlResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 撤销个人用户自动签的开通链接
    ///
    /// 用来撤销[获取个人用户自动签的开通状态](https://qian.tencent.com/developers/companyApis/users/CreateUserAutoSignEnableUrl)生成的开通链接，撤销生成的链接失效。
    ///
    /// 注:
    ///
    /// - 若个人用户已经用生成的完成自动签署的开通，撤销链接无效不会对开通结果产生影响(此情况接口会报错)。
    /// - 处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(_ input: CancelUserAutoSignEnableUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CancelUserAutoSignEnableUrlResponse> {
        self.client.execute(action: "CancelUserAutoSignEnableUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 撤销个人用户自动签的开通链接
    ///
    /// 用来撤销[获取个人用户自动签的开通状态](https://qian.tencent.com/developers/companyApis/users/CreateUserAutoSignEnableUrl)生成的开通链接，撤销生成的链接失效。
    ///
    /// 注:
    ///
    /// - 若个人用户已经用生成的完成自动签署的开通，撤销链接无效不会对开通结果产生影响(此情况接口会报错)。
    /// - 处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(_ input: CancelUserAutoSignEnableUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CancelUserAutoSignEnableUrlResponse {
        try await self.client.execute(action: "CancelUserAutoSignEnableUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 撤销个人用户自动签的开通链接
    ///
    /// 用来撤销[获取个人用户自动签的开通状态](https://qian.tencent.com/developers/companyApis/users/CreateUserAutoSignEnableUrl)生成的开通链接，撤销生成的链接失效。
    ///
    /// 注:
    ///
    /// - 若个人用户已经用生成的完成自动签署的开通，撤销链接无效不会对开通结果产生影响(此情况接口会报错)。
    /// - 处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(operator: UserInfo, sceneKey: String, userInfo: UserThreeFactor, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CancelUserAutoSignEnableUrlResponse> {
        self.cancelUserAutoSignEnableUrl(.init(operator: `operator`, sceneKey: sceneKey, userInfo: userInfo, agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 撤销个人用户自动签的开通链接
    ///
    /// 用来撤销[获取个人用户自动签的开通状态](https://qian.tencent.com/developers/companyApis/users/CreateUserAutoSignEnableUrl)生成的开通链接，撤销生成的链接失效。
    ///
    /// 注:
    ///
    /// - 若个人用户已经用生成的完成自动签署的开通，撤销链接无效不会对开通结果产生影响(此情况接口会报错)。
    /// - 处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(operator: UserInfo, sceneKey: String, userInfo: UserThreeFactor, agent: Agent? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CancelUserAutoSignEnableUrlResponse {
        try await self.cancelUserAutoSignEnableUrl(.init(operator: `operator`, sceneKey: sceneKey, userInfo: userInfo, agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
