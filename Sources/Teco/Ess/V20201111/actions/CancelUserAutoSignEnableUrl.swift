//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CancelUserAutoSignEnableUrl请求参数结构体
    public struct CancelUserAutoSignEnableUrlRequest: TCRequest {
        /// 操作人信息，UseId必填
        public let `operator`: UserInfo

        /// 自动签场景: E_PRESCRIPTION_AUTO_SIGN 电子处方
        public let sceneKey: String

        /// 指定撤销链接的用户指定撤销链接的用户信息，包含姓名、证件类型、证件号码。
        public let userInfo: UserThreeFactor

        public init(operator: UserInfo, sceneKey: String, userInfo: UserThreeFactor) {
            self.operator = `operator`
            self.sceneKey = sceneKey
            self.userInfo = userInfo
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case sceneKey = "SceneKey"
            case userInfo = "UserInfo"
        }
    }

    /// CancelUserAutoSignEnableUrl返回参数结构体
    public struct CancelUserAutoSignEnableUrlResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 撤销自动签开通链接
    ///
    /// 此接口（CancelUserAutoSignEnableUrl）用来撤销发送给个人用户的自动签开通链接，撤销后对应的个人用户开通链接失效。若个人用户已经完成开通，将无法撤销。（处方单场景专用，使用此接口请与客户经理确认）
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(_ input: CancelUserAutoSignEnableUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CancelUserAutoSignEnableUrlResponse> {
        self.client.execute(action: "CancelUserAutoSignEnableUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 撤销自动签开通链接
    ///
    /// 此接口（CancelUserAutoSignEnableUrl）用来撤销发送给个人用户的自动签开通链接，撤销后对应的个人用户开通链接失效。若个人用户已经完成开通，将无法撤销。（处方单场景专用，使用此接口请与客户经理确认）
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(_ input: CancelUserAutoSignEnableUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CancelUserAutoSignEnableUrlResponse {
        try await self.client.execute(action: "CancelUserAutoSignEnableUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 撤销自动签开通链接
    ///
    /// 此接口（CancelUserAutoSignEnableUrl）用来撤销发送给个人用户的自动签开通链接，撤销后对应的个人用户开通链接失效。若个人用户已经完成开通，将无法撤销。（处方单场景专用，使用此接口请与客户经理确认）
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(operator: UserInfo, sceneKey: String, userInfo: UserThreeFactor, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CancelUserAutoSignEnableUrlResponse> {
        self.cancelUserAutoSignEnableUrl(.init(operator: `operator`, sceneKey: sceneKey, userInfo: userInfo), region: region, logger: logger, on: eventLoop)
    }

    /// 撤销自动签开通链接
    ///
    /// 此接口（CancelUserAutoSignEnableUrl）用来撤销发送给个人用户的自动签开通链接，撤销后对应的个人用户开通链接失效。若个人用户已经完成开通，将无法撤销。（处方单场景专用，使用此接口请与客户经理确认）
    @inlinable @discardableResult
    public func cancelUserAutoSignEnableUrl(operator: UserInfo, sceneKey: String, userInfo: UserThreeFactor, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CancelUserAutoSignEnableUrlResponse {
        try await self.cancelUserAutoSignEnableUrl(.init(operator: `operator`, sceneKey: sceneKey, userInfo: userInfo), region: region, logger: logger, on: eventLoop)
    }
}
