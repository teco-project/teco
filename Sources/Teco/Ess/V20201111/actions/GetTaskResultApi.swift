//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// GetTaskResultApi请求参数结构体
    public struct GetTaskResultApiRequest: TCRequest {
        /// 任务Id，通过接口CreateConvertTaskApi或CreateMergeFileTask得到的返回任务id
        public let taskId: String

        /// 操作人信息,UserId必填
        public let `operator`: UserInfo?

        /// 应用号信息
        @available(*, deprecated)
        public let agent: Agent? = nil

        /// 暂未开放
        @available(*, deprecated)
        public let organization: OrganizationInfo? = nil

        public init(taskId: String, operator: UserInfo? = nil) {
            self.taskId = taskId
            self.operator = `operator`
        }

        @available(*, deprecated, renamed: "init(taskId:operator:)", message: "'agent' and 'organization' are deprecated in 'GetTaskResultApiRequest'. Setting these parameters has no effect.")
        public init(taskId: String, operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil) {
            self.taskId = taskId
            self.operator = `operator`
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case `operator` = "Operator"
            case agent = "Agent"
            case organization = "Organization"
        }
    }

    /// GetTaskResultApi返回参数结构体
    public struct GetTaskResultApiResponse: TCResponse {
        /// 任务Id
        public let taskId: String

        /// 任务状态，需要关注的状态
        /// 0  :NeedTranform   - 任务已提交
        /// 4  :Processing     - 文档转换中
        /// 8  :TaskEnd        - 任务处理完成
        /// -2 :DownloadFailed - 下载失败
        /// -6 :ProcessFailed  - 转换失败
        /// -13:ProcessTimeout - 转换文件超时
        public let taskStatus: Int64

        /// 状态描述，需要关注的状态
        /// NeedTranform   - 任务已提交
        /// Processing     - 文档转换中
        /// TaskEnd        - 任务处理完成
        /// DownloadFailed - 下载失败
        /// ProcessFailed  - 转换失败
        /// ProcessTimeout - 转换文件超时
        public let taskMessage: String

        /// 资源Id，也是FileId，用于文件发起时使用
        public let resourceId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskStatus = "TaskStatus"
            case taskMessage = "TaskMessage"
            case resourceId = "ResourceId"
            case requestId = "RequestId"
        }
    }

    /// 查询转换任务状态
    ///
    /// 查询转换任务的状态。转换任务Id通过发起转换任务接口（CreateConvertTaskApi）获取。
    /// 注意：大文件转换所需的时间可能会比较长。
    @inlinable
    public func getTaskResultApi(_ input: GetTaskResultApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTaskResultApiResponse> {
        self.client.execute(action: "GetTaskResultApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询转换任务状态
    ///
    /// 查询转换任务的状态。转换任务Id通过发起转换任务接口（CreateConvertTaskApi）获取。
    /// 注意：大文件转换所需的时间可能会比较长。
    @inlinable
    public func getTaskResultApi(_ input: GetTaskResultApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTaskResultApiResponse {
        try await self.client.execute(action: "GetTaskResultApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询转换任务状态
    ///
    /// 查询转换任务的状态。转换任务Id通过发起转换任务接口（CreateConvertTaskApi）获取。
    /// 注意：大文件转换所需的时间可能会比较长。
    @inlinable
    public func getTaskResultApi(taskId: String, operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTaskResultApiResponse> {
        self.getTaskResultApi(.init(taskId: taskId, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }

    /// 查询转换任务状态
    ///
    /// 查询转换任务的状态。转换任务Id通过发起转换任务接口（CreateConvertTaskApi）获取。
    /// 注意：大文件转换所需的时间可能会比较长。
    @available(*, deprecated, renamed: "getTaskResultApi(taskId:operator:region:logger:on:)", message: "'agent' and 'organization' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func getTaskResultApi(taskId: String, operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTaskResultApiResponse> {
        self.getTaskResultApi(.init(taskId: taskId, operator: `operator`, agent: agent, organization: organization), region: region, logger: logger, on: eventLoop)
    }

    /// 查询转换任务状态
    ///
    /// 查询转换任务的状态。转换任务Id通过发起转换任务接口（CreateConvertTaskApi）获取。
    /// 注意：大文件转换所需的时间可能会比较长。
    @inlinable
    public func getTaskResultApi(taskId: String, operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTaskResultApiResponse {
        try await self.getTaskResultApi(.init(taskId: taskId, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }

    /// 查询转换任务状态
    ///
    /// 查询转换任务的状态。转换任务Id通过发起转换任务接口（CreateConvertTaskApi）获取。
    /// 注意：大文件转换所需的时间可能会比较长。
    @available(*, deprecated, renamed: "getTaskResultApi(taskId:operator:region:logger:on:)", message: "'agent' and 'organization' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func getTaskResultApi(taskId: String, operator: UserInfo? = nil, agent: Agent? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTaskResultApiResponse {
        try await self.getTaskResultApi(.init(taskId: taskId, operator: `operator`, agent: agent, organization: organization), region: region, logger: logger, on: eventLoop)
    }
}
