//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ess {
    /// CreateOrganizationBatchSignUrl请求参数结构体
    public struct CreateOrganizationBatchSignUrlRequest: TCRequestModel {
        /// 调用方用户信息，UserId 必填，支持填入集团子公司经办人UserId。
        public let `operator`: UserInfo

        /// 指定需要进行批量签署的流程id，数量1-100，填写后用户将通过链接对这些合同进行批量签署。
        public let flowIds: [String]

        /// 代理相关应用信息，如集团主企业代子企业操作的场景中ProxyOrganizationId必填。
        public let agent: Agent?

        /// 员工的UserId，该UserId对应的员工必须已经加入企业并实名，Name和Mobile为空时该字段不能为空。（优先使用UserId对应的员工）
        public let userId: String?

        /// 员工姓名，该字段需要与Mobile组合使用，UserId为空时该字段不能为空。（UserId为空时，使用Name和Mbile对应的员工）
        public let name: String?

        /// 员工手机号码，该字段需要与Name组合使用，UserId为空时该字段不能为空。（UserId为空时，使用Name和Mbile对应的员工）
        public let mobile: String?

        public init(operator: UserInfo, flowIds: [String], agent: Agent? = nil, userId: String? = nil, name: String? = nil, mobile: String? = nil) {
            self.operator = `operator`
            self.flowIds = flowIds
            self.agent = agent
            self.userId = userId
            self.name = name
            self.mobile = mobile
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case flowIds = "FlowIds"
            case agent = "Agent"
            case userId = "UserId"
            case name = "Name"
            case mobile = "Mobile"
        }
    }

    /// CreateOrganizationBatchSignUrl返回参数结构体
    public struct CreateOrganizationBatchSignUrlResponse: TCResponseModel {
        /// 批量签署入口链接
        public let signUrl: String

        /// 链接过期时间戳
        public let expiredTime: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case signUrl = "SignUrl"
            case expiredTime = "ExpiredTime"
            case requestId = "RequestId"
        }
    }

    /// 获取企业签署合同web页面
    ///
    /// 通过此接口，创建企业批量签署链接，企业员工点击链接即可跳转控制台进行批量签署。
    /// 如果没有UserId，Name和Mobile必填，对应的员工必须在企业下已经实名，且该员工为批量签署合同中的签署方。
    @inlinable
    public func createOrganizationBatchSignUrl(_ input: CreateOrganizationBatchSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationBatchSignUrlResponse> {
        self.client.execute(action: "CreateOrganizationBatchSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取企业签署合同web页面
    ///
    /// 通过此接口，创建企业批量签署链接，企业员工点击链接即可跳转控制台进行批量签署。
    /// 如果没有UserId，Name和Mobile必填，对应的员工必须在企业下已经实名，且该员工为批量签署合同中的签署方。
    @inlinable
    public func createOrganizationBatchSignUrl(_ input: CreateOrganizationBatchSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationBatchSignUrlResponse {
        try await self.client.execute(action: "CreateOrganizationBatchSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取企业签署合同web页面
    ///
    /// 通过此接口，创建企业批量签署链接，企业员工点击链接即可跳转控制台进行批量签署。
    /// 如果没有UserId，Name和Mobile必填，对应的员工必须在企业下已经实名，且该员工为批量签署合同中的签署方。
    @inlinable
    public func createOrganizationBatchSignUrl(operator: UserInfo, flowIds: [String], agent: Agent? = nil, userId: String? = nil, name: String? = nil, mobile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationBatchSignUrlResponse> {
        self.createOrganizationBatchSignUrl(.init(operator: `operator`, flowIds: flowIds, agent: agent, userId: userId, name: name, mobile: mobile), region: region, logger: logger, on: eventLoop)
    }

    /// 获取企业签署合同web页面
    ///
    /// 通过此接口，创建企业批量签署链接，企业员工点击链接即可跳转控制台进行批量签署。
    /// 如果没有UserId，Name和Mobile必填，对应的员工必须在企业下已经实名，且该员工为批量签署合同中的签署方。
    @inlinable
    public func createOrganizationBatchSignUrl(operator: UserInfo, flowIds: [String], agent: Agent? = nil, userId: String? = nil, name: String? = nil, mobile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationBatchSignUrlResponse {
        try await self.createOrganizationBatchSignUrl(.init(operator: `operator`, flowIds: flowIds, agent: agent, userId: userId, name: name, mobile: mobile), region: region, logger: logger, on: eventLoop)
    }
}
