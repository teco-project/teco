//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ess {
    /// 企业超管信息
    public struct Admin: TCOutputModel {
        /// 超管名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 超管手机号，打码显示
        /// 示例值：138****1569
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mobile: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mobile = "Mobile"
        }
    }

    /// 代理相关应用信息，如集团主企业代子企业操作
    public struct Agent: TCInputModel {
        /// 代理机构的应用编号,32位字符串，一般不用传
        @available(*, deprecated)
        public let appId: String? = nil

        /// 被代理机构的应用号，一般不用传
        @available(*, deprecated)
        public let proxyAppId: String? = nil

        /// 被代理机构在电子签平台的机构编号，集团代理下场景必传
        public let proxyOrganizationId: String?

        /// 被代理机构的经办人，一般不用传
        @available(*, deprecated)
        public let proxyOperator: String? = nil

        public init(proxyOrganizationId: String? = nil) {
            self.proxyOrganizationId = proxyOrganizationId
        }

        @available(*, deprecated, renamed: "init(proxyOrganizationId:)", message: "'appId', 'proxyAppId' and 'proxyOperator' are deprecated in 'Agent'. Setting these parameters has no effect.")
        public init(appId: String? = nil, proxyAppId: String? = nil, proxyOrganizationId: String? = nil, proxyOperator: String? = nil) {
            self.proxyOrganizationId = proxyOrganizationId
        }

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case proxyAppId = "ProxyAppId"
            case proxyOrganizationId = "ProxyOrganizationId"
            case proxyOperator = "ProxyOperator"
        }
    }

    /// 签署方在使用个人印章签署控件（SIGN_SIGNATURE） 时可使用的签署方式
    public struct ApproverComponentLimitType: TCInputModel {
        /// 签署方经办人在模板中配置的参与方ID，与控件绑定，是控件的归属方，ID为32位字符串。
        public let recipientId: String

        /// 签署方经办人控件类型是个人印章签署控件（SIGN_SIGNATURE） 时，可选的签名方式，可多选
        ///
        /// 签名方式：
        ///
        /// - HANDWRITE-手写签名
        /// - ESIGN-个人印章类型
        /// - OCR_ESIGN-AI智能识别手写签名
        /// - SYSTEM_ESIGN-系统签名
        public let values: [String]

        public init(recipientId: String, values: [String]) {
            self.recipientId = recipientId
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case recipientId = "RecipientId"
            case values = "Values"
        }
    }

    /// 参与者信息。
    public struct ApproverInfo: TCInputModel {
        /// 在指定签署方时，可选择企业B端或个人C端等不同的参与者类型，可选类型如下:
        /// **0**：企业
        /// **1**：个人
        /// **3**：企业静默签署
        /// 注：`类型为3（企业静默签署）时，此接口会默认完成该签署方的签署。静默签署仅进行盖章操作，不能自动签名。`
        /// **7**: 个人自动签署，适用于个人自动签场景。
        /// 注: `个人自动签场景为白名单功能，使用前请联系对接的客户经理沟通。`
        public let approverType: Int64

        /// 签署方经办人的姓名。
        /// 经办人的姓名将用于身份认证和电子签名，请确保填写的姓名为签署方的真实姓名，而非昵称等代名。
        public let approverName: String

        /// 签署方经办人手机号码， 支持国内手机号11位数字(无需加+86前缀或其他字符)。
        /// 请确认手机号所有方为此合同签署方。
        public let approverMobile: String

        /// 组织机构名称。
        /// 请确认该名称与企业营业执照中注册的名称一致。
        /// 如果名称中包含英文括号()，请使用中文括号（）代替。
        /// 如果签署方是企业签署方(approverType = 0 或者 approverType = 3)， 则企业名称必填。
        public let organizationName: String?

        /// 合同中的签署控件列表，列表中可支持下列多种签署控件,控件的详细定义参考开发者中心的Component结构体
        ///
        /// - 个人签名/印章
        /// - 企业印章
        /// - 骑缝章等签署控件
        public let signComponents: [Component]?

        /// 签署方经办人的证件类型，支持以下类型
        ///
        /// - ID_CARD 居民身份证  (默认值)
        /// - HONGKONG_AND_MACAO 港澳居民来往内地通行证
        /// - HONGKONG_MACAO_AND_TAIWAN 港澳台居民居住证(格式同居民身份证)
        /// - OTHER_CARD_TYPE 其他证件
        ///
        /// 注: `其他证件类型为白名单功能，使用前请联系对接的客户经理沟通。`
        public let approverIdCardType: String?

        /// 签署方经办人的证件号码，应符合以下规则
        ///
        /// - 居民身份证号码应为18位字符串，由数字和大写字母X组成（如存在X，请大写）。
        /// - 港澳居民来往内地通行证号码应为9位字符串，第1位为“C”，第2位为英文字母（但“I”、“O”除外），后7位为阿拉伯数字。
        /// - 港澳台居民居住证号码编码规则与中国大陆身份证相同，应为18位字符串。
        public let approverIdCardNumber: String?

        /// 通知签署方经办人的方式,  有以下途径:
        ///
        /// - **sms**  :  (默认)短信
        /// - **none**   : 不通知
        public let notifyType: String?

        /// 收据场景设置签署人角色类型, 可以设置如下****类型****:
        ///
        /// - **1**  :收款人
        /// - **2**   :开具人
        /// - **3** :见证人
        /// 注: `收据场景为白名单功能，使用前请联系对接的客户经理沟通。`
        public let approverRole: Int64?

        /// 自定义签署人角色名：收款人、开具人、见证人
        public let approverRoleName: String?

        /// 签署意愿确认渠道，默认为WEIXINAPP:人脸识别
        ///
        /// 注: 将要废弃, 用ApproverSignTypes签署人签署合同时的认证方式代替, 新客户可请用ApproverSignTypes来设置
        public let verifyChannel: [String]?

        /// 签署方在签署合同之前，需要强制阅读合同的时长，可指定为3秒至300秒之间的任意值。
        ///
        /// 若未指定阅读时间，则会按照合同页数大小计算阅读时间，计算规则如下：
        ///
        /// - 合同页数少于等于2页，阅读时间为3秒；
        /// - 合同页数为3到5页，阅读时间为5秒；
        /// - 合同页数大于等于6页，阅读时间为10秒。
        public let preReadTime: Int64?

        /// 签署人userId，仅支持本企业的员工userid， 可在控制台组织管理处获得
        ///
        /// 注: `若传此字段 则以userid的信息为主，会覆盖传递过来的签署人基本信息， 包括姓名，手机号，证件类型等信息`
        public let userId: String?

        /// 在企微场景下使用，需设置参数为**WEWORKAPP**，以表明合同来源于企微。
        public let approverSource: String?

        /// 在企业微信场景下，表明该合同流程为或签，其最大长度为64位字符串。
        /// 所有参与或签的人员均需具备该标识。
        /// 注意，在合同中，不同的或签参与人必须保证其CustomApproverTag唯一。
        /// 如果或签签署人为本方企业微信参与人，则需要指定ApproverSource参数为WEWORKAPP。
        public let customApproverTag: String?

        /// 可以控制签署方在签署合同时能否进行某些操作，例如拒签、转交他人等。
        /// 详细操作可以参考开发者中心的ApproverOption结构体。
        public let approverOption: ApproverOption?

        /// 指定个人签署方查看合同的校验方式,可以传值如下:
        ///
        /// - **1**   : （默认）人脸识别,人脸识别后才能合同内容
        /// - **2**  : 手机号验证, 用户手机号和参与方手机号(ApproverMobile)相同即可查看合同内容（当手写签名方式为OCR_ESIGN时，该校验方式无效，因为这种签名方式依赖实名认证）
        /// 注:
        ///
        /// - 如果合同流程设置ApproverVerifyType查看合同的校验方式,    则忽略此签署人的查看合同的校验方式
        /// - 此字段不可传多个校验方式
        public let approverVerifyTypes: [Int64]?

        /// 您可以指定签署方签署合同的认证校验方式，可传递以下值：
        ///
        /// - **1**：人脸认证，需进行人脸识别成功后才能签署合同；
        /// - **2**：签署密码，需输入与用户在腾讯电子签设置的密码一致才能校验成功进行合同签署；
        /// - **3**：运营商三要素，需到运营商处比对手机号实名信息（名字、手机号、证件号）校验一致才能成功进行合同签署。
        /// 注：
        ///
        /// - 默认情况下，认证校验方式为人脸认证和签署密码两种形式；
        /// - 您可以传递多种值，表示可用多种认证校验方式。
        public let approverSignTypes: [Int64]?

        /// 发起方企业的签署人进行签署操作前，是否需要企业内部走审批流程，取值如下：
        ///
        /// - **false**：（默认）不需要审批，直接签署。
        /// - **true**：需要走审批流程。当到对应参与人签署时，会阻塞其签署操作，等待企业内部审批完成。
        /// 企业可以通过CreateFlowSignReview审批接口通知腾讯电子签平台企业内部审批结果
        ///
        /// - 如果企业通知腾讯电子签平台审核通过，签署方可继续签署动作。
        /// - 如果企业通知腾讯电子签平台审核未通过，平台将继续阻塞签署方的签署动作，直到企业通知平台审核通过。
        ///
        /// 注：`此功能可用于与企业内部的审批流程进行关联，支持手动、静默签署合同`
        public let approverNeedSignReview: Bool?

        /// [用PDF文件创建签署流程](https://qian.tencent.com/developers/companyApis/startFlows/CreateFlowByFiles)时,如果设置了外层参数SignBeanTag=1(允许签署过程中添加签署控件),则可通过此参数明确规定合同所使用的签署控件类型（骑缝章、普通章法人章等）和具体的印章（印章ID）或签名方式。
        ///
        /// 注：`限制印章控件或骑缝章控件情况下,仅本企业签署方可以指定具体印章（通过传递ComponentValue,支持多个），他方企业或个人只支持限制控件类型。`
        public let addSignComponentsLimits: [ComponentLimit]?

        public init(approverType: Int64, approverName: String, approverMobile: String, organizationName: String? = nil, signComponents: [Component]? = nil, approverIdCardType: String? = nil, approverIdCardNumber: String? = nil, notifyType: String? = nil, approverRole: Int64? = nil, approverRoleName: String? = nil, verifyChannel: [String]? = nil, preReadTime: Int64? = nil, userId: String? = nil, approverSource: String? = nil, customApproverTag: String? = nil, approverOption: ApproverOption? = nil, approverVerifyTypes: [Int64]? = nil, approverSignTypes: [Int64]? = nil, approverNeedSignReview: Bool? = nil, addSignComponentsLimits: [ComponentLimit]? = nil) {
            self.approverType = approverType
            self.approverName = approverName
            self.approverMobile = approverMobile
            self.organizationName = organizationName
            self.signComponents = signComponents
            self.approverIdCardType = approverIdCardType
            self.approverIdCardNumber = approverIdCardNumber
            self.notifyType = notifyType
            self.approverRole = approverRole
            self.approverRoleName = approverRoleName
            self.verifyChannel = verifyChannel
            self.preReadTime = preReadTime
            self.userId = userId
            self.approverSource = approverSource
            self.customApproverTag = customApproverTag
            self.approverOption = approverOption
            self.approverVerifyTypes = approverVerifyTypes
            self.approverSignTypes = approverSignTypes
            self.approverNeedSignReview = approverNeedSignReview
            self.addSignComponentsLimits = addSignComponentsLimits
        }

        enum CodingKeys: String, CodingKey {
            case approverType = "ApproverType"
            case approverName = "ApproverName"
            case approverMobile = "ApproverMobile"
            case organizationName = "OrganizationName"
            case signComponents = "SignComponents"
            case approverIdCardType = "ApproverIdCardType"
            case approverIdCardNumber = "ApproverIdCardNumber"
            case notifyType = "NotifyType"
            case approverRole = "ApproverRole"
            case approverRoleName = "ApproverRoleName"
            case verifyChannel = "VerifyChannel"
            case preReadTime = "PreReadTime"
            case userId = "UserId"
            case approverSource = "ApproverSource"
            case customApproverTag = "CustomApproverTag"
            case approverOption = "ApproverOption"
            case approverVerifyTypes = "ApproverVerifyTypes"
            case approverSignTypes = "ApproverSignTypes"
            case approverNeedSignReview = "ApproverNeedSignReview"
            case addSignComponentsLimits = "AddSignComponentsLimits"
        }
    }

    /// 签署方信息，发起合同后可获取到对应的签署方信息，如角色ID，角色名称
    public struct ApproverItem: TCOutputModel {
        /// 签署方唯一编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signId: String?

        /// 签署方角色编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recipientId: String?

        /// 签署方角色名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approverRoleName: String?

        enum CodingKeys: String, CodingKey {
            case signId = "SignId"
            case recipientId = "RecipientId"
            case approverRoleName = "ApproverRoleName"
        }
    }

    /// 签署人个性化能力信息
    public struct ApproverOption: TCInputModel {
        /// 签署方是否可以拒签
        ///
        /// - **false** : ( 默认)可以拒签
        /// - **true** :不可以拒签
        public let noRefuse: Bool?

        /// 签署方是否可以转他人处理
        ///
        /// - **false** : ( 默认)可以转他人处理
        /// - **true** :不可以转他人处理
        public let noTransfer: Bool?

        /// 签署人信息补充类型，默认无需补充。
        ///
        /// - **1** : ( 动态签署人（可发起合同后再补充签署人信息）
        public let fillType: Int64?

        public init(noRefuse: Bool? = nil, noTransfer: Bool? = nil, fillType: Int64? = nil) {
            self.noRefuse = noRefuse
            self.noTransfer = noTransfer
            self.fillType = fillType
        }

        enum CodingKeys: String, CodingKey {
            case noRefuse = "NoRefuse"
            case noTransfer = "NoTransfer"
            case fillType = "FillType"
        }
    }

    /// 指定签署人限制项
    public struct ApproverRestriction: TCInputModel {
        /// 指定签署人名字
        public let name: String?

        /// 指定签署人手机号，11位数字
        public let mobile: String?

        /// 指定签署人证件类型，ID_CARD-身份证
        public let idCardType: String?

        /// 指定签署人证件号码，字母大写
        public let idCardNumber: String?

        public init(name: String? = nil, mobile: String? = nil, idCardType: String? = nil, idCardNumber: String? = nil) {
            self.name = name
            self.mobile = mobile
            self.idCardType = idCardType
            self.idCardNumber = idCardNumber
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mobile = "Mobile"
            case idCardType = "IdCardType"
            case idCardNumber = "IdCardNumber"
        }
    }

    /// 授权用户
    public struct AuthorizedUser: TCOutputModel {
        /// 电子签系统中的用户id
        public let userId: String

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
        }
    }

    /// 自动签开启、签署相关配置
    public struct AutoSignConfig: TCInputModel {
        /// 自动签开通个人用户信息, 包括名字,身份证等
        public let userInfo: UserThreeFactor

        /// 是否回调证书信息:
        ///
        /// - **false**: 不需要(默认)
        /// - **true**:需要
        public let certInfoCallback: Bool?

        /// 是否支持用户自定义签名印章:
        ///
        /// - **false**: 不能自己定义(默认)
        /// - **true**: 可以自己定义
        public let userDefineSeal: Bool?

        /// 回调中是否需要自动签将要使用的印章(签名) 图片的 base64:
        ///
        /// - **false**: 不需要(默认)
        /// - **true**: 需要
        public let sealImgCallback: Bool?

        /// 执行结果的回调URL，该URL仅支持HTTP或HTTPS协议，建议采用HTTPS协议以保证数据传输的安全性。
        /// 腾讯电子签服务器将通过POST方式，application/json格式通知执行结果，请确保外网可以正常访问该URL。
        /// 回调的相关说明可参考开发者中心的[回调通知](https://qian.tencent.com/developers/company/callback_types_v2)模块。
        @available(*, deprecated)
        public let callbackUrl: String? = nil

        /// 开通时候的身份验证方式, 取值为：
        ///
        /// - **WEIXINAPP** : 微信人脸识别
        /// - **INSIGHT** : 慧眼人脸认别
        /// - **TELECOM** : 运营商三要素验证
        /// 注：
        ///
        /// - 如果是小程序开通链接，支持传 WEIXINAPP / TELECOM。为空默认 WEIXINAPP
        /// - 如果是 H5 开通链接，支持传 INSIGHT / TELECOM。为空默认 INSIGHT
        public let verifyChannels: [String]?

        /// 设置用户开通自动签时是否绑定个人自动签账号许可。
        ///
        /// - **0**: (默认) 使用个人自动签账号许可进行开通，个人自动签账号许可有效期1年，注: `不可解绑释放更换他人`
        public let licenseType: Int64?

        public init(userInfo: UserThreeFactor, certInfoCallback: Bool? = nil, userDefineSeal: Bool? = nil, sealImgCallback: Bool? = nil, verifyChannels: [String]? = nil, licenseType: Int64? = nil) {
            self.userInfo = userInfo
            self.certInfoCallback = certInfoCallback
            self.userDefineSeal = userDefineSeal
            self.sealImgCallback = sealImgCallback
            self.verifyChannels = verifyChannels
            self.licenseType = licenseType
        }

        @available(*, deprecated, renamed: "init(userInfo:certInfoCallback:userDefineSeal:sealImgCallback:verifyChannels:licenseType:)", message: "'callbackUrl' is deprecated in 'AutoSignConfig'. Setting this parameter has no effect.")
        public init(userInfo: UserThreeFactor, certInfoCallback: Bool? = nil, userDefineSeal: Bool? = nil, sealImgCallback: Bool? = nil, callbackUrl: String? = nil, verifyChannels: [String]? = nil, licenseType: Int64? = nil) {
            self.userInfo = userInfo
            self.certInfoCallback = certInfoCallback
            self.userDefineSeal = userDefineSeal
            self.sealImgCallback = sealImgCallback
            self.verifyChannels = verifyChannels
            self.licenseType = licenseType
        }

        enum CodingKeys: String, CodingKey {
            case userInfo = "UserInfo"
            case certInfoCallback = "CertInfoCallback"
            case userDefineSeal = "UserDefineSeal"
            case sealImgCallback = "SealImgCallback"
            case callbackUrl = "CallbackUrl"
            case verifyChannels = "VerifyChannels"
            case licenseType = "LicenseType"
        }
    }

    /// 企业应用回调信息
    public struct CallbackInfo: TCInputModel {
        /// 回调url,。请确保回调地址能够接收并处理 HTTP POST 请求，并返回状态码 200 以表示处理正常。
        public let callbackUrl: String

        /// 回调加密key，已废弃
        @available(*, deprecated)
        public let token: String? = nil

        /// 回调加密key，用于回调消息加解密。
        public let callbackKey: String?

        /// 回调验签token，用于回调通知校验。
        public let callbackToken: String?

        public init(callbackUrl: String, callbackKey: String? = nil, callbackToken: String? = nil) {
            self.callbackUrl = callbackUrl
            self.callbackKey = callbackKey
            self.callbackToken = callbackToken
        }

        @available(*, deprecated, renamed: "init(callbackUrl:callbackKey:callbackToken:)", message: "'token' is deprecated in 'CallbackInfo'. Setting this parameter has no effect.")
        public init(callbackUrl: String, token: String? = nil, callbackKey: String? = nil, callbackToken: String? = nil) {
            self.callbackUrl = callbackUrl
            self.callbackKey = callbackKey
            self.callbackToken = callbackToken
        }

        enum CodingKeys: String, CodingKey {
            case callbackUrl = "CallbackUrl"
            case token = "Token"
            case callbackKey = "CallbackKey"
            case callbackToken = "CallbackToken"
        }
    }

    /// 此结构体 (Caller) 用于描述调用方属性。
    public struct Caller: TCInputModel {
        /// 应用号
        @available(*, deprecated)
        public let applicationId: String? = nil

        /// 主机构ID
        @available(*, deprecated)
        public let organizationId: String? = nil

        /// 经办人的用户ID，同UserId
        public let operatorId: String?

        /// 下属机构ID
        @available(*, deprecated)
        public let subOrganizationId: String? = nil

        public init(operatorId: String? = nil) {
            self.operatorId = operatorId
        }

        @available(*, deprecated, renamed: "init(operatorId:)", message: "'applicationId', 'organizationId' and 'subOrganizationId' are deprecated in 'Caller'. Setting these parameters has no effect.")
        public init(applicationId: String? = nil, organizationId: String? = nil, operatorId: String? = nil, subOrganizationId: String? = nil) {
            self.operatorId = operatorId
        }

        enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case organizationId = "OrganizationId"
            case operatorId = "OperatorId"
            case subOrganizationId = "SubOrganizationId"
        }
    }

    /// 抄送信息
    public struct CcInfo: TCInputModel {
        /// 被抄送方手机号码， 支持国内手机号11位数字(无需加+86前缀或其他字符)。
        /// 请确认手机号所有方为此业务通知方。
        public let mobile: String?

        /// 被抄送方姓名。
        /// 抄送方的姓名将用于身份认证，请确保填写的姓名为抄送方的真实姓名，而非昵称等代名。
        public let name: String?

        /// 被抄送方类型, 可设置以下类型:
        ///
        /// - **0** :个人抄送方
        /// - **1** :企业员工抄送方
        public let ccType: Int64?

        /// 被抄送方权限, 可设置如下权限:
        ///
        /// - **0** :可查看合同内容
        /// - **1** :可查看合同内容也可下载原文
        public let ccPermission: Int64?

        /// 通知签署方经办人的方式,  有以下途径:
        ///
        /// - **sms** :  (默认)短信
        /// - **none** : 不通知
        public let notifyType: String?

        public init(mobile: String? = nil, name: String? = nil, ccType: Int64? = nil, ccPermission: Int64? = nil, notifyType: String? = nil) {
            self.mobile = mobile
            self.name = name
            self.ccType = ccType
            self.ccPermission = ccPermission
            self.notifyType = notifyType
        }

        enum CodingKeys: String, CodingKey {
            case mobile = "Mobile"
            case name = "Name"
            case ccType = "CcType"
            case ccPermission = "CcPermission"
            case notifyType = "NotifyType"
        }
    }

    /// 模板/流程中控件信息，可以是填充控件或签署控件
    public struct Component: TCInputModel, TCOutputModel {
        /// 如果是Component填写控件类型，则可选的字段为：
        /// TEXT - 普通文本控件，输入文本字符串；
        /// MULTI_LINE_TEXT - 多行文本控件，输入文本字符串；
        /// CHECK_BOX - 勾选框控件，若选中填写ComponentValue 填写 true或者 false 字符串；
        /// FILL_IMAGE - 图片控件，ComponentValue 填写图片的资源 ID；
        /// DYNAMIC_TABLE - 动态表格控件；
        /// ATTACHMENT - 附件控件,ComponentValue 填写附件图片的资源 ID列表，以逗号分隔；
        /// SELECTOR - 选择器控件，ComponentValue填写选择的字符串内容；
        /// DATE - 日期控件；默认是格式化为xxxx年xx月xx日字符串；
        /// DISTRICT - 省市区行政区控件，ComponentValue填写省市区行政区字符串内容；
        ///
        /// 如果是SignComponent签署控件类型，则可选的字段为
        /// SIGN_SEAL - 签署印章控件；
        /// SIGN_DATE - 签署日期控件；
        /// SIGN_SIGNATURE - 用户签名控件；
        /// SIGN_PERSONAL_SEAL - 个人签署印章控件（使用文件发起暂不支持此类型）；
        /// SIGN_PAGING_SEAL - 骑缝章；若文件发起，需要对应填充ComponentPosY、ComponentWidth、ComponentHeight
        /// SIGN_OPINION - 签署意见控件，用户需要根据配置的签署意见内容，完成对意见内容的确认；
        /// SIGN_LEGAL_PERSON_SEAL - 企业法定代表人控件。
        ///
        /// 表单域的控件不能作为印章和签名控件
        public let componentType: String

        /// 控件所属文件的序号（取值为：0-N）。
        /// 目前单文件的情况下，值是0
        public let fileIndex: Int64

        /// 参数控件高度，单位pt
        public let componentHeight: Float

        /// 参数控件宽度，单位pt
        public let componentWidth: Float

        /// 参数控件所在页码，取值为：1-N
        public let componentPage: Int64

        /// 参数控件X位置，单位pt
        public let componentPosX: Float

        /// 参数控件Y位置，单位pt
        public let componentPosY: Float

        /// 控件唯一ID。
        /// 或使用文件发起合同时用于GenerateMode==KEYWORD 指定关键字
        public let componentId: String?

        /// 控件名。
        /// 或使用文件发起合同时用于GenerateMode==FIELD 指定表单域名称
        public let componentName: String?

        /// 是否必选，默认为false-非必选
        public let componentRequired: Bool?

        /// 控件关联的参与方ID，对应Recipient结构体中的RecipientId
        public let componentRecipientId: String?

        /// 扩展参数：
        /// 为JSON格式。
        ///
        /// ComponentType为FILL_IMAGE时，支持以下参数：
        /// NotMakeImageCenter：bool。是否设置图片居中。false：居中（默认）。 true: 不居中
        /// FillMethod: int. 填充方式。0-铺满（默认）；1-等比例缩放
        ///
        /// ComponentType为SIGN_SIGNATURE类型可以控制签署方式
        /// {“ComponentTypeLimit”: [“xxx”]}
        /// xxx可以为：
        /// HANDWRITE – 手写签名
        /// OCR_ESIGN -- AI智能识别手写签名
        /// ESIGN -- 个人印章类型
        /// SYSTEM_ESIGN -- 系统签名（该类型可以在用户签署时根据用户姓名一键生成一个签名来进行签署）
        /// 如：{“ComponentTypeLimit”: [“SYSTEM_ESIGN”]}
        ///
        /// ComponentType为SIGN_DATE时，支持以下参数：
        /// 1 Font：字符串类型目前只支持"黑体"、"宋体"，如果不填默认为"黑体"
        /// 2 FontSize： 数字类型，范围6-72，默认值为12
        /// 3 FontAlign： 字符串类型，可取Left/Right/Center，对应左对齐/居中/右对齐
        /// 4 Format： 字符串类型，日期格式，必须是以下五种之一 “yyyy m d”，”yyyy年m月d日”，”yyyy/m/d”，”yyyy-m-d”，”yyyy.m.d”。
        /// 5 Gaps:： 字符串类型，仅在Format为“yyyy m d”时起作用，格式为用逗号分开的两个整数，例如”2,2”，两个数字分别是日期格式的前后两个空隙中的空格个数
        /// 如果extra参数为空，默认为”yyyy年m月d日”格式的居中日期
        /// 特别地，如果extra中Format字段为空或无法被识别，则extra参数会被当作默认值处理（Font，FontSize，Gaps和FontAlign都不会起效）
        /// 参数样例：    "ComponentExtra": "{\"Format\":“yyyy m d”,\"FontSize\":12,\"Gaps\":\"2,2\", \"FontAlign\":\"Right\"}"
        ///
        /// ComponentType为SIGN_SEAL类型时，支持以下参数：
        /// 1.PageRanges：PageRange的数组，通过PageRanges属性设置该印章在PDF所有页面上盖章（适用于标书在所有页面盖章的情况）
        /// 参数样例："ComponentExtra":"{\"PageRanges\":[{\"BeginPage\":1,\"EndPage\":-1}]}"
        public let componentExtra: String?

        /// 是否是表单域类型，默认false-不是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isFormType: Bool?

        /// 控件填充vaule，ComponentType和传入值类型对应关系：
        /// TEXT - 文本内容
        /// MULTI_LINE_TEXT - 文本内容
        /// CHECK_BOX - true/false
        /// FILL_IMAGE、ATTACHMENT - 附件的FileId，需要通过UploadFiles接口上传获取
        /// SELECTOR - 选项值
        /// DYNAMIC_TABLE - 传入json格式的表格内容，具体见数据结构FlowInfo：https://cloud.tencent.com/document/api/1420/61525#FlowInfo
        /// DATE - 默认是格式化为xxxx年xx月xx日
        /// SIGN_SEAL - 印章ID，于控制台查询获取
        /// SIGN_PAGING_SEAL - 可以指定印章ID，于控制台查询获取
        ///
        /// 控件值约束说明：
        /// 企业全称控件：
        ///   约束：企业名称中文字符中文括号
        ///   检查正则表达式：/^[\u3400-\u4dbf\u4e00-\u9fa5（）]+$/
        ///
        /// 统一社会信用代码控件：
        ///   检查正则表达式：/^[A-Z0-9]{1,18}$/
        ///
        /// 法人名称控件：
        ///   约束：最大50个字符，2到25个汉字或者1到50个字母
        ///   检查正则表达式：/^([\u3400-\u4dbf\u4e00-\u9fa5.·]{2,25}|[a-zA-Z·,\s-]{1,50})$/
        ///
        /// 签署意见控件：
        ///   约束：签署意见最大长度为50字符
        ///
        /// 签署人手机号控件：
        ///   约束：国内手机号 13,14,15,16,17,18,19号段长度11位
        ///
        /// 签署人身份证控件：
        ///   约束：合法的身份证号码检查
        ///
        /// 控件名称：
        ///   约束：控件名称最大长度为20字符
        ///
        /// 单行文本控件：
        ///   约束：只允许输入中文，英文，数字，中英文标点符号
        ///
        /// 多行文本控件：
        ///   约束：只允许输入中文，英文，数字，中英文标点符号
        ///
        /// 勾选框控件：
        ///   约束：选择填字符串true，不选填字符串false
        ///
        /// 选择器控件：
        ///   约束：同单行文本控件约束，填写选择值中的字符串
        ///
        /// 数字控件：
        ///   约束：请输入有效的数字(可带小数点)
        ///   检查正则表达式：/^(-|\+)?\d+(\.\d+)?$/
        ///
        /// 日期控件：
        ///   约束：格式：yyyy年mm月dd日
        ///
        /// 附件控件：
        ///   约束：JPG或PNG图片，上传数量限制，1到6个，最大6个附件
        ///
        /// 图片控件：
        ///   约束：JPG或PNG图片，填写上传的图片资源ID
        ///
        /// 邮箱控件：
        ///   约束：请输入有效的邮箱地址, w3c标准
        ///   检查正则表达式：/^([A-Za-z0-9_\-.!#$%&])+@([A-Za-z0-9_\-.])+\.([A-Za-z]{2,4})$/
        ///   参考：https://emailregex.com/
        ///
        /// 地址控件：
        ///   同单行文本控件约束
        ///
        /// 省市区控件：
        ///   同单行文本控件约束
        ///
        /// 性别控件：
        ///   同单行文本控件约束，填写选择值中的字符串
        ///
        /// 学历控件：
        ///   同单行文本控件约束，填写选择值中的字符串
        public let componentValue: String?

        /// NORMAL 正常模式，使用坐标制定签署控件位置
        /// FIELD 表单域，需使用ComponentName指定表单域名称
        /// KEYWORD 关键字，使用ComponentId指定关键字
        public let generateMode: String?

        /// 日期签署控件的字号，默认为 12
        public let componentDateFontSize: Int64?

        /// 第三方应用集成平台模板控件 ID 标识
        public let channelComponentId: String?

        /// 指定关键字时横坐标偏移量，单位pt
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let offsetX: Float?

        /// 指定关键字时纵坐标偏移量，单位pt
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let offsetY: Float?

        /// 第三方应用集成中子客企业控件来源。
        /// 0-平台指定；
        /// 1-用户自定义
        public let channelComponentSource: UInt64?

        /// 指定关键字排序规则，Positive-正序，Reverse-倒序。
        /// 传入Positive时会根据关键字在PDF文件内的顺序进行排列。在指定KeywordIndexes时，0代表在PDF内查找内容时，查找到的第一个关键字。
        /// 传入Reverse时会根据关键字在PDF文件内的反序进行排列。在指定KeywordIndexes时，0代表在PDF内查找内容时，查找到的最后一个关键字。
        public let keywordOrder: String?

        /// 指定关键字页码。
        /// 指定页码后，将只在指定的页码内查找关键字，非该页码的关键字将不会查询出来
        public let keywordPage: Int64?

        /// 关键字位置模式，
        /// Middle-居中，
        /// Below-正下方，
        /// Right-正右方，
        /// LowerRight-右上角，
        /// UpperRight-右下角。
        /// 示例：如果设置Middle的关键字盖章，则印章的中心会和关键字的中心重合，如果设置Below，则印章在关键字的正下方
        public let relativeLocation: String?

        /// 关键字索引。
        /// 如果一个关键字在PDF文件中存在多个，可以通过关键字索引指定使用第几个关键字作为最后的结果，可指定多个索引。
        /// 示例：[0,2]，说明使用PDF文件内第1个和第3个关键字位置。
        public let keywordIndexes: [Int64]?

        /// 是否锁定控件值不允许编辑（嵌入式发起使用）
        ///
        /// 默认false：不锁定控件值，允许在页面编辑控件值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lockComponentValue: Bool?

        /// 是否禁止移动和删除控件
        ///
        /// 默认false，不禁止移动和删除控件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let forbidMoveAndDelete: Bool?

        public init(componentType: String, fileIndex: Int64, componentHeight: Float, componentWidth: Float, componentPage: Int64, componentPosX: Float, componentPosY: Float, componentId: String? = nil, componentName: String? = nil, componentRequired: Bool? = nil, componentRecipientId: String? = nil, componentExtra: String? = nil, isFormType: Bool? = nil, componentValue: String? = nil, generateMode: String? = nil, componentDateFontSize: Int64? = nil, channelComponentId: String? = nil, offsetX: Float? = nil, offsetY: Float? = nil, channelComponentSource: UInt64? = nil, keywordOrder: String? = nil, keywordPage: Int64? = nil, relativeLocation: String? = nil, keywordIndexes: [Int64]? = nil, lockComponentValue: Bool? = nil, forbidMoveAndDelete: Bool? = nil) {
            self.componentType = componentType
            self.fileIndex = fileIndex
            self.componentHeight = componentHeight
            self.componentWidth = componentWidth
            self.componentPage = componentPage
            self.componentPosX = componentPosX
            self.componentPosY = componentPosY
            self.componentId = componentId
            self.componentName = componentName
            self.componentRequired = componentRequired
            self.componentRecipientId = componentRecipientId
            self.componentExtra = componentExtra
            self.isFormType = isFormType
            self.componentValue = componentValue
            self.generateMode = generateMode
            self.componentDateFontSize = componentDateFontSize
            self.channelComponentId = channelComponentId
            self.offsetX = offsetX
            self.offsetY = offsetY
            self.channelComponentSource = channelComponentSource
            self.keywordOrder = keywordOrder
            self.keywordPage = keywordPage
            self.relativeLocation = relativeLocation
            self.keywordIndexes = keywordIndexes
            self.lockComponentValue = lockComponentValue
            self.forbidMoveAndDelete = forbidMoveAndDelete
        }

        enum CodingKeys: String, CodingKey {
            case componentType = "ComponentType"
            case fileIndex = "FileIndex"
            case componentHeight = "ComponentHeight"
            case componentWidth = "ComponentWidth"
            case componentPage = "ComponentPage"
            case componentPosX = "ComponentPosX"
            case componentPosY = "ComponentPosY"
            case componentId = "ComponentId"
            case componentName = "ComponentName"
            case componentRequired = "ComponentRequired"
            case componentRecipientId = "ComponentRecipientId"
            case componentExtra = "ComponentExtra"
            case isFormType = "IsFormType"
            case componentValue = "ComponentValue"
            case generateMode = "GenerateMode"
            case componentDateFontSize = "ComponentDateFontSize"
            case channelComponentId = "ChannelComponentId"
            case offsetX = "OffsetX"
            case offsetY = "OffsetY"
            case channelComponentSource = "ChannelComponentSource"
            case keywordOrder = "KeywordOrder"
            case keywordPage = "KeywordPage"
            case relativeLocation = "RelativeLocation"
            case keywordIndexes = "KeywordIndexes"
            case lockComponentValue = "LockComponentValue"
            case forbidMoveAndDelete = "ForbidMoveAndDelete"
        }
    }

    /// 签署控件的类型和范围限制条件，用于控制文件发起后签署人拖拽签署区时可使用的控件类型和具体的印章或签名方式。
    public struct ComponentLimit: TCInputModel {
        /// 控件类型，支持以下类型
        ///
        /// - SIGN_SEAL : 印章控件
        /// - SIGN_PAGING_SEAL : 骑缝章控件
        /// - SIGN_LEGAL_PERSON_SEAL : 企业法定代表人控件
        /// - SIGN_SIGNATURE : 用户签名控件
        public let componentType: String

        /// 签署控件类型的值(可选)，用与限制签署时印章或者签名的选择范围
        ///
        /// 1.当ComponentType 是 SIGN_SEAL 或者 SIGN_PAGING_SEAL 时可传入企业印章Id（支持多个）
        ///
        /// 2.当ComponentType 是 SIGN_SIGNATURE 时可传入以下类型（支持多个）
        ///
        /// - HANDWRITE : 手写签名
        /// - OCR_ESIGN : OCR印章（智慧手写签名）
        /// - ESIGN : 个人印章
        /// - SYSTEM_ESIGN : 系统印章
        ///
        /// 3.当ComponentType 是 SIGN_LEGAL_PERSON_SEAL 时无需传递此参数。
        public let componentValue: [String]?

        public init(componentType: String, componentValue: [String]? = nil) {
            self.componentType = componentType
            self.componentValue = componentValue
        }

        enum CodingKeys: String, CodingKey {
            case componentType = "ComponentType"
            case componentValue = "ComponentValue"
        }
    }

    /// 创建合同个性化参数
    public struct CreateFlowOption: TCInputModel {
        /// 是否允许修改发起合同时确认弹窗的合同信息（合同名称、合同类型、签署截止时间），若不允许编辑，则表单字段将被禁止输入。
        ///
        /// true：允许编辑
        ///
        /// false：不允许编辑（默认值）
        public let canEditFlow: Bool?

        /// 是否允许编辑模板控件
        ///
        /// true:允许编辑模板控件信息
        ///
        /// false:不允许编辑模板控件信息（默认值）
        public let canEditFormField: Bool?

        /// 发起页面隐藏合同名称展示
        ///
        /// true:发起页面隐藏合同名称展示
        ///
        /// false:发起页面不隐藏合同名称展示（默认值）
        public let hideShowFlowName: Bool?

        /// 发起页面隐藏合同类型展示
        ///
        /// true:发起页面隐藏合同类型展示
        ///
        /// false:发起页面不隐藏合同类型展示（默认值）
        public let hideShowFlowType: Bool?

        /// 发起页面隐藏合同截止日期展示
        ///
        /// true:发起页面隐藏合同截止日期展示
        ///
        /// false:发起页面不隐藏合同截止日期展示（默认值）
        public let hideShowDeadline: Bool?

        /// 发起页面允许跳过添加签署人环节
        ///
        /// true:发起页面允许跳过添加签署人环节
        ///
        /// false:发起页面不允许跳过添加签署人环节（默认值）
        public let canSkipAddApprover: Bool?

        /// 文件发起页面跳过文件上传步骤
        ///
        /// true:文件发起页面跳过文件上传步骤
        ///
        /// false:文件发起页面不跳过文件上传步骤（默认值）
        public let skipUploadFile: Bool?

        /// 禁止编辑填写控件
        ///
        /// true:禁止编辑填写控件
        ///
        /// false:允许编辑填写控件（默认值）
        public let forbidEditFillComponent: Bool?

        /// 定制化发起合同弹窗的描述信息，描述信息最长500字符
        public let customCreateFlowDescription: String?

        public init(canEditFlow: Bool? = nil, canEditFormField: Bool? = nil, hideShowFlowName: Bool? = nil, hideShowFlowType: Bool? = nil, hideShowDeadline: Bool? = nil, canSkipAddApprover: Bool? = nil, skipUploadFile: Bool? = nil, forbidEditFillComponent: Bool? = nil, customCreateFlowDescription: String? = nil) {
            self.canEditFlow = canEditFlow
            self.canEditFormField = canEditFormField
            self.hideShowFlowName = hideShowFlowName
            self.hideShowFlowType = hideShowFlowType
            self.hideShowDeadline = hideShowDeadline
            self.canSkipAddApprover = canSkipAddApprover
            self.skipUploadFile = skipUploadFile
            self.forbidEditFillComponent = forbidEditFillComponent
            self.customCreateFlowDescription = customCreateFlowDescription
        }

        enum CodingKeys: String, CodingKey {
            case canEditFlow = "CanEditFlow"
            case canEditFormField = "CanEditFormField"
            case hideShowFlowName = "HideShowFlowName"
            case hideShowFlowType = "HideShowFlowType"
            case hideShowDeadline = "HideShowDeadline"
            case canSkipAddApprover = "CanSkipAddApprover"
            case skipUploadFile = "SkipUploadFile"
            case forbidEditFillComponent = "ForbidEditFillComponent"
            case customCreateFlowDescription = "CustomCreateFlowDescription"
        }
    }

    /// 创建员工的结果
    public struct CreateStaffResult: TCOutputModel {
        /// 创建员工的成功列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let successEmployeeData: [SuccessCreateStaffData]?

        /// 创建员工的失败列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedEmployeeData: [FailedCreateStaffData]?

        enum CodingKeys: String, CodingKey {
            case successEmployeeData = "SuccessEmployeeData"
            case failedEmployeeData = "FailedEmployeeData"
        }
    }

    /// 删除员工结果
    public struct DeleteStaffsResult: TCOutputModel {
        /// 删除员工的成功数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let successEmployeeData: [SuccessDeleteStaffData]?

        /// 删除员工的失败数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedEmployeeData: [FailedDeleteStaffData]?

        enum CodingKeys: String, CodingKey {
            case successEmployeeData = "SuccessEmployeeData"
            case failedEmployeeData = "FailedEmployeeData"
        }
    }

    /// 集成版员工部门信息。
    public struct Department: TCInputModel, TCOutputModel {
        /// 部门ID。
        public let departmentId: String?

        /// 部门名称。
        public let departmentName: String?

        public init(departmentId: String? = nil, departmentName: String? = nil) {
            self.departmentId = departmentId
            self.departmentName = departmentName
        }

        enum CodingKeys: String, CodingKey {
            case departmentId = "DepartmentId"
            case departmentName = "DepartmentName"
        }
    }

    /// 个性化参数
    public struct EmbedUrlOption: TCInputModel {
        /// 合同详情预览，允许展示控件信息
        ///
        /// true：允许在合同详情页展示控件
        ///
        /// false：不允许在合同详情页展示控件
        ///
        /// 默认false，合同详情页不展示控件
        public let showFlowDetailComponent: Bool?

        /// 模板预览，允许展示模板控件信息
        ///
        /// true：允许在模板预览页展示控件
        ///
        /// false：不允许在模板预览页展示控件
        ///
        /// 默认false，模板预览页不展示控件
        public let showTemplateComponent: Bool?

        public init(showFlowDetailComponent: Bool? = nil, showTemplateComponent: Bool? = nil) {
            self.showFlowDetailComponent = showFlowDetailComponent
            self.showTemplateComponent = showTemplateComponent
        }

        enum CodingKeys: String, CodingKey {
            case showFlowDetailComponent = "ShowFlowDetailComponent"
            case showTemplateComponent = "ShowTemplateComponent"
        }
    }

    /// 扩展服务开通和授权的详细信息
    public struct ExtendAuthInfo: TCInputModel, TCOutputModel {
        /// 扩展服务的类型，可能是以下值：
        ///
        /// - OPEN_SERVER_SIGN：企业静默签署
        /// - OVERSEA_SIGN：企业与港澳台居民签署合同
        /// - MOBILE_CHECK_APPROVER：使用手机号验证签署方身份
        /// - PAGING_SEAL：骑缝章
        /// - BATCH_SIGN：批量签署
        public let type: String?

        /// 扩展服务的名称
        public let name: String?

        /// 扩展服务的开通状态：
        /// ENABLE：开通
        /// DISABLE：未开通
        public let status: String?

        /// 操作扩展服务的操作人UserId，员工在腾讯电子签平台的唯一身份标识，为32位字符串。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operatorUserId: String?

        /// 扩展服务的操作时间，格式为Unix标准时间戳（秒）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operateOn: Int64?

        /// 该扩展服务若可以授权，此参数对应授权人员的列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasAuthUserList: [HasAuthUser]?

        public init(type: String? = nil, name: String? = nil, status: String? = nil, operatorUserId: String? = nil, operateOn: Int64? = nil, hasAuthUserList: [HasAuthUser]? = nil) {
            self.type = type
            self.name = name
            self.status = status
            self.operatorUserId = operatorUserId
            self.operateOn = operateOn
            self.hasAuthUserList = hasAuthUserList
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case name = "Name"
            case status = "Status"
            case operatorUserId = "OperatorUserId"
            case operateOn = "OperateOn"
            case hasAuthUserList = "HasAuthUserList"
        }
    }

    /// 绑定角色失败信息
    public struct FailedCreateRoleData: TCOutputModel {
        /// 用户userId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        /// 角色id列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleIds: [String]?

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case roleIds = "RoleIds"
        }
    }

    /// 创建员工的失败数据
    public struct FailedCreateStaffData: TCOutputModel {
        /// 员工名
        public let displayName: String

        /// 员工手机号
        public let mobile: String

        /// 传入的企微账号id
        public let weworkOpenId: String?

        /// 失败原因
        public let reason: String

        enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case mobile = "Mobile"
            case weworkOpenId = "WeworkOpenId"
            case reason = "Reason"
        }
    }

    /// 删除员工失败数据
    public struct FailedDeleteStaffData: TCOutputModel {
        /// 员工在电子签的userId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        /// 员工在第三方平台的openId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let openId: String?

        /// 失败原因
        public let reason: String

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case openId = "OpenId"
            case reason = "Reason"
        }
    }

    /// 更新员工信息失败返回的数据信息
    public struct FailedUpdateStaffData: TCOutputModel {
        /// 用户传入的名称
        public let displayName: String

        /// 用户传入的手机号，明文展示
        public let mobile: String

        /// 失败原因
        public let reason: String

        /// 员工在腾讯电子签平台的唯一身份标识，为32位字符串。
        /// 可登录腾讯电子签控制台，在 "更多能力"->"组织管理" 中查看某位员工的UserId(在页面中展示为用户ID)。
        public let userId: String

        /// 员工在第三方平台的openId
        public let openId: String

        enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case mobile = "Mobile"
            case reason = "Reason"
            case userId = "UserId"
            case openId = "OpenId"
        }
    }

    /// 模板中文件的信息结构
    public struct FileInfo: TCInputModel, TCOutputModel {
        /// 文件ID
        public let fileId: String?

        /// 文件名
        public let fileName: String?

        /// 文件大小，单位为Byte
        public let fileSize: Int64?

        /// 文件上传时间，格式为Unix标准时间戳（秒）
        public let createdOn: Int64?

        public init(fileId: String? = nil, fileName: String? = nil, fileSize: Int64? = nil, createdOn: Int64? = nil) {
            self.fileId = fileId
            self.fileName = fileName
            self.fileSize = fileSize
            self.createdOn = createdOn
        }

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case fileName = "FileName"
            case fileSize = "FileSize"
            case createdOn = "CreatedOn"
        }
    }

    /// 下载文件的URL信息
    public struct FileUrl: TCOutputModel {
        /// 下载文件的URL，有效期为输入的UrlTtl，默认5分钟
        public let url: String

        /// 下载文件的附加信息。如果是pdf文件，会返回pdf文件每页的有效高宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let option: String?

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case option = "Option"
        }
    }

    /// 补充签署人信息
    /// - RecipientId 必须指定
    /// -  通过企业微信自定义账号ID补充签署人时，ApproverSource 和 CustomUserId 必填，ApproverSource取值：WEWORKAPP
    /// - 通过二要素（姓名/手机号）补充签署人时，ApproverName 和 ApproverMobile 必填，ApproverSource设置为空
    public struct FillApproverInfo: TCInputModel {
        /// 签署方经办人在模板中配置的参与方ID，与控件绑定，是控件的归属方，ID为32位字符串。
        /// 模板发起合同时，该参数为必填项。
        /// 文件发起合同是，该参数无需传值。
        /// 如果开发者后序用合同模板发起合同，建议保存此值，在用合同模板发起合同中需此值绑定对应的签署经办人 。
        public let recipientId: String

        /// 签署人来源
        /// WEWORKAPP: 企业微信
        ///
        /// 仅【企微或签】时指定WEWORKAPP
        public let approverSource: String?

        /// 企业微信UserId
        ///
        /// 当ApproverSource为WEWORKAPP的企微或签场景下，必须指企业自有应用获取企业微信的UserId
        public let customUserId: String?

        /// 补充企业签署人员工姓名
        public let approverName: String?

        /// 补充企业签署人员工手机号
        public let approverMobile: String?

        /// 补充企业动态签署人时，需要指定对应企业名称
        public let organizationName: String?

        public init(recipientId: String, approverSource: String? = nil, customUserId: String? = nil, approverName: String? = nil, approverMobile: String? = nil, organizationName: String? = nil) {
            self.recipientId = recipientId
            self.approverSource = approverSource
            self.customUserId = customUserId
            self.approverName = approverName
            self.approverMobile = approverMobile
            self.organizationName = organizationName
        }

        enum CodingKeys: String, CodingKey {
            case recipientId = "RecipientId"
            case approverSource = "ApproverSource"
            case customUserId = "CustomUserId"
            case approverName = "ApproverName"
            case approverMobile = "ApproverMobile"
            case organizationName = "OrganizationName"
        }
    }

    /// 文档内的填充控件返回结构体，返回控件的基本信息和填写内容值
    public struct FilledComponent: TCOutputModel {
        /// 控件Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentId: String?

        /// 控件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentName: String?

        /// 控件填写状态；0-未填写；1-已填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentFillStatus: String?

        /// 控件填写内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentValue: String?

        /// 控件所属参与方Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentRecipientId: String?

        /// 图片填充控件下载链接，如果是图片填充控件时，这里返回图片的下载链接。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageUrl: String?

        enum CodingKeys: String, CodingKey {
            case componentId = "ComponentId"
            case componentName = "ComponentName"
            case componentFillStatus = "ComponentFillStatus"
            case componentValue = "ComponentValue"
            case componentRecipientId = "ComponentRecipientId"
            case imageUrl = "ImageUrl"
        }
    }

    /// 查询过滤条件
    public struct Filter: TCInputModel, TCOutputModel {
        /// 查询过滤条件的Key
        public let key: String

        /// 查询过滤条件的Value列表
        public let values: [String]

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    /// 签署人详情信息
    public struct FlowApproverDetail: TCOutputModel {
        /// 签署时的相关信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approveMessage: String?

        /// 签署方姓名
        public let approveName: String

        /// 签署方的签署状态
        /// 0：还没有发起
        /// 1：流程中 没有开始处理
        /// 2：待签署
        /// 3：已签署
        /// 4：已拒绝
        /// 5：已过期
        /// 6：已撤销
        /// 7：还没有预发起
        /// 8：待填写
        /// 9：因为各种原因而终止
        /// 10：填写完成
        /// 15：已解除
        /// 19：转他人处理
        public let approveStatus: Int64

        /// 模板配置中的参与方ID,与控件绑定
        public let receiptId: String

        /// 客户自定义的用户ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customUserId: String?

        /// 签署人手机号
        public let mobile: String

        /// 签署顺序，如果是有序签署，签署顺序从小到大
        public let signOrder: Int64

        /// 签署人签署时间，时间戳，单位秒
        public let approveTime: Int64

        /// 签署方类型，ORGANIZATION-企业员工，PERSON-个人，ENTERPRISESERVER-企业静默签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approveType: String?

        /// 签署方侧用户来源，如WEWORKAPP-企业微信等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approverSource: String?

        /// 客户自定义签署方标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customApproverTag: String?

        /// 签署方企业Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let organizationId: String?

        /// 签署方企业名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let organizationName: String?

        /// 签署参与人在本流程中的编号ID（每个流程不同），可用此ID来定位签署参与人在本流程的签署节点，也可用于后续创建签署链接等操作。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signId: String?

        /// 自定义签署人角色
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approverRoleName: String?

        enum CodingKeys: String, CodingKey {
            case approveMessage = "ApproveMessage"
            case approveName = "ApproveName"
            case approveStatus = "ApproveStatus"
            case receiptId = "ReceiptId"
            case customUserId = "CustomUserId"
            case mobile = "Mobile"
            case signOrder = "SignOrder"
            case approveTime = "ApproveTime"
            case approveType = "ApproveType"
            case approverSource = "ApproverSource"
            case customApproverTag = "CustomApproverTag"
            case organizationId = "OrganizationId"
            case organizationName = "OrganizationName"
            case signId = "SignId"
            case approverRoleName = "ApproverRoleName"
        }
    }

    /// 签署链接信息
    public struct FlowApproverUrlInfo: TCOutputModel {
        /// 签署链接(短链形式呈现)。请注意保密，不要将其外泄给无关用户。
        /// 注: `注意该链接有效期为30分钟`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signUrl: String?

        /// 签署参与人类型
        ///
        /// - **1** :个人参与方
        ///
        /// 注: `现在仅支持个人参与方`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approverType: Int64?

        /// 签署人姓名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approverName: String?

        /// 签署人手机号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approverMobile: String?

        /// 签署链接(长链形式呈现)。请注意保密，不要将其外泄给无关用户。
        /// 注: `注意该链接有效期为30分钟`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let longUrl: String?

        enum CodingKeys: String, CodingKey {
            case signUrl = "SignUrl"
            case approverType = "ApproverType"
            case approverName = "ApproverName"
            case approverMobile = "ApproverMobile"
            case longUrl = "LongUrl"
        }
    }

    /// 合同流程的基础信息
    public struct FlowBrief: TCOutputModel {
        /// 合同流程ID，为32位字符串。
        public let flowId: String

        /// 合同流程的名称。
        public let flowName: String

        /// 合同流程描述信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowDescription: String?

        /// 合同流程的类别分类（如销售合同/入职合同等）。
        public let flowType: String

        /// 合同流程当前的签署状态, 会存在下列的状态值
        ///
        /// - **0** : 未开启流程(合同中不存在填写环节)
        /// - **1** : 待签署
        /// - **2** : 部分签署
        /// - **3** : 已拒签
        /// - **4** : 已签署
        /// - **5** : 已过期
        /// - **6** : 已撤销
        /// - **7** : 未开启流程(合同中存在填写环节)
        /// - **8** : 等待填写
        /// - **9** : 部分填写
        /// - **10** : 已拒填
        /// - **21** : 已解除
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowStatus: Int64?

        /// 合同流程创建时间，格式为Unix标准时间戳（秒）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdOn: Int64?

        /// 当合同流程状态为已拒签（即 FlowStatus=3）或已撤销（即 FlowStatus=6）时，此字段 FlowMessage 为拒签或撤销原因。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowMessage: String?

        /// 合同流程发起方的员工编号, 即员工在腾讯电子签平台的唯一身份标识。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let creator: String?

        /// 合同流程的签署截止时间，格式为Unix标准时间戳（秒）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadline: Int64?

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case flowName = "FlowName"
            case flowDescription = "FlowDescription"
            case flowType = "FlowType"
            case flowStatus = "FlowStatus"
            case createdOn = "CreatedOn"
            case flowMessage = "FlowMessage"
            case creator = "Creator"
            case deadline = "Deadline"
        }
    }

    /// 创建流程的签署方信息
    public struct FlowCreateApprover: TCInputModel {
        /// 在指定签署方时，可选择企业B端或个人C端等不同的参与者类型，可选类型如下:
        /// 0：企业
        /// 1：个人
        /// 3：企业静默签署
        /// 注：类型为3（企业静默签署）时，此接口会默认完成该签署方的签署。静默签署仅进行盖章操作，不能自动签名。
        /// 7: 个人自动签署，适用于个人自动签场景。
        /// 注: 个人自动签场景为白名单功能，使用前请联系对接的客户经理沟通。
        public let approverType: Int64

        /// 组织机构名称。
        /// 请确认该名称与企业营业执照中注册的名称一致。
        /// 如果名称中包含英文括号()，请使用中文括号（）代替。
        ///
        /// 注: `当approverType=0(企业签署方) 或 approverType=3(企业静默签署)时，必须指定`
        public let organizationName: String?

        /// 签署方经办人的姓名。
        /// 经办人的姓名将用于身份认证和电子签名，请确保填写的姓名为签署方的真实姓名，而非昵称等代名。
        ///
        /// 在未指定签署人电子签UserId情况下，为必填参数
        public let approverName: String?

        /// 签署方经办人手机号码， 支持国内手机号11位数字(无需加+86前缀或其他字符)。
        /// 请确认手机号所有方为此合同签署方。
        ///
        /// 在未指定签署人电子签UserId情况下，为必填参数
        public let approverMobile: String?

        /// 证件类型，支持以下类型
        ///
        /// - ID_CARD : 居民身份证 (默认值)
        /// - HONGKONG_AND_MACAO : 港澳居民来往内地通行证
        /// - HONGKONG_MACAO_AND_TAIWAN : 港澳台居民居住证(格式同居民身份证)
        public let approverIdCardType: String?

        /// 证件号码，应符合以下规则
        ///
        /// - 居民身份证号码应为18位字符串，由数字和大写字母X组成（如存在X，请大写）。
        /// - 港澳居民来往内地通行证号码应为9位字符串，第1位为“C”，第2位为英文字母（但“I”、“O”除外），后7位为阿拉伯数字。
        /// - 港澳台居民居住证号码编码规则与中国大陆身份证相同，应为18位字符串。
        public let approverIdCardNumber: String?

        /// 签署方经办人在模板中配置的参与方ID，与控件绑定，是控件的归属方，ID为32位字符串。
        /// 模板发起合同时，该参数为必填项。
        /// 文件发起合同是，该参数无需传值。
        /// 如果开发者后续用合同模板发起合同，建议保存此值，在用合同模板发起合同中需此值绑定对应的签署经办人 。
        public let recipientId: String?

        /// 签署意愿确认渠道，默认为WEIXINAPP:人脸识别
        ///
        /// 注: 将要废弃, 用ApproverSignTypes签署人签署合同时的认证方式代替, 新客户可请用ApproverSignTypes来设置
        public let verifyChannel: [String]?

        /// 通知签署方经办人的方式,  有以下途径:
        ///
        /// - **sms**  :  (默认)短信
        /// - **none**   : 不通知
        ///
        /// 注: `发起方也是签署方时不给此签署方发送短信`
        public let notifyType: String?

        /// 合同强制需要阅读全文，无需传此参数
        public let isFullText: Bool?

        /// 合同的强制预览时间：3~300s，未指定则按合同页数计算
        public let preReadTime: UInt64?

        /// 签署人userId，仅支持本企业的员工userid， 可在控制台组织管理处获得
        ///
        /// 注: `若传此字段 则以userid的信息为主，会覆盖传递过来的签署人基本信息， 包括姓名，手机号，证件类型等信息`
        public let userId: String?

        /// 字段已经废弃，当前只支持true，默认为true
        public let required: Bool?

        /// 在企微场景下使用，需设置参数为**WEWORKAPP**，以表明合同来源于企微。
        public let approverSource: String?

        /// 在企业微信场景下，表明该合同流程为或签，其最大长度为64位字符串。
        /// 所有参与或签的人员均需具备该标识。
        /// 注意，在合同中，不同的或签参与人必须保证其CustomApproverTag唯一。
        /// 如果或签签署人为本方企业微信参与人，则需要指定ApproverSource参数为WEWORKAPP。
        public let customApproverTag: String?

        /// 已经废弃, 快速注册相关信息
        public let registerInfo: RegisterInfo?

        /// 签署人个性化能力值，如是否可以转发他人处理、是否可以拒签等功能开关。
        public let approverOption: ApproverOption?

        /// 签署完前端跳转的url，暂未使用
        @available(*, deprecated)
        public let jumpUrl: String? = nil

        /// 签署ID
        /// - 发起流程时系统自动补充
        /// - 创建签署链接时，可以通过查询详情接口获得签署人的SignId，然后可传入此值为该签署人创建签署链接，无需再传姓名、手机号、证件号等其他信息
        public let signId: String?

        /// 发起方企业的签署人进行签署操作前，是否需要企业内部走审批流程，取值如下：
        ///
        /// - **false**：（默认）不需要审批，直接签署。
        /// - **true**：需要走审批流程。当到对应参与人签署时，会阻塞其签署操作，等待企业内部审批完成。
        /// 企业可以通过CreateFlowSignReview审批接口通知腾讯电子签平台企业内部审批结果
        ///
        /// - 如果企业通知腾讯电子签平台审核通过，签署方可继续签署动作。
        /// - 如果企业通知腾讯电子签平台审核未通过，平台将继续阻塞签署方的签署动作，直到企业通知平台审核通过。
        ///
        /// 注：`此功能可用于与企业内部的审批流程进行关联，支持手动、静默签署合同`
        public let approverNeedSignReview: Bool?

        /// 签署人签署控件， 此参数仅针对文件发起（CreateFlowByFiles）生效
        ///
        /// 合同中的签署控件列表，列表中可支持下列多种签署控件,控件的详细定义参考开发者中心的Component结构体
        ///
        /// - 个人签名/印章
        /// - 企业印章
        /// - 骑缝章等签署控件
        ///
        /// `此参数仅针对文件发起设置生效,模板发起合同签署流程, 请以模板配置为主`
        public let signComponents: [Component]?

        /// 签署人填写控件 此参数仅针对文件发起（CreateFlowByFiles）生效
        ///
        /// 合同中的填写控件列表，列表中可支持下列多种填写控件，控件的详细定义参考开发者中心的Component结构体
        ///
        /// - 单行文本控件
        /// - 多行文本控件
        /// - 勾选框控件
        /// - 数字控件
        /// - 图片控件
        /// - 动态表格等填写控件
        ///
        /// `此参数仅针对文件发起设置生效,模板发起合同签署流程, 请以模板配置为主`
        public let components: [Component]?

        /// 签署方控件类型为 SIGN_SIGNATURE时，可以指定签署方签名方式
        /// 	HANDWRITE – 手写签名
        /// 	OCR_ESIGN -- AI智能识别手写签名
        /// 	ESIGN -- 个人印章类型
        /// 	SYSTEM_ESIGN -- 系统签名（该类型可以在用户签署时根据用户姓名一键生成一个签名来进行签署）
        public let componentLimitType: [String]?

        /// 指定个人签署方查看合同的校验方式,可以传值如下:
        ///
        /// - **1**   : （默认）人脸识别,人脸识别后才能合同内容
        /// - **2**  : 手机号验证, 用户手机号和参与方手机号(ApproverMobile)相同即可查看合同内容（当手写签名方式为OCR_ESIGN时，该校验方式无效，因为这种签名方式依赖实名认证）
        /// 注:
        ///
        /// - 如果合同流程设置ApproverVerifyType查看合同的校验方式,    则忽略此签署人的查看合同的校验方式
        /// - 此字段不可传多个校验方式
        ///
        /// `此参数仅针对文件发起设置生效,模板发起合同签署流程, 请以模板配置为主`
        ///
        /// .
        public let approverVerifyTypes: [Int64]?

        /// 您可以指定签署方签署合同的认证校验方式，可传递以下值：
        ///
        /// - **1**：人脸认证，需进行人脸识别成功后才能签署合同；
        /// - **2**：签署密码，需输入与用户在腾讯电子签设置的密码一致才能校验成功进行合同签署；
        /// - **3**：运营商三要素，需到运营商处比对手机号实名信息（名字、手机号、证件号）校验一致才能成功进行合同签署。
        /// 注：
        ///
        /// - 默认情况下，认证校验方式为人脸认证和签署密码两种形式；
        /// - 您可以传递多种值，表示可用多种认证校验方式。
        ///
        /// 注:
        /// `此参数仅针对文件发起设置生效,模板发起合同签署流程, 请以模板配置为主`
        public let approverSignTypes: [UInt64]?

        public init(approverType: Int64, organizationName: String? = nil, approverName: String? = nil, approverMobile: String? = nil, approverIdCardType: String? = nil, approverIdCardNumber: String? = nil, recipientId: String? = nil, verifyChannel: [String]? = nil, notifyType: String? = nil, isFullText: Bool? = nil, preReadTime: UInt64? = nil, userId: String? = nil, required: Bool? = nil, approverSource: String? = nil, customApproverTag: String? = nil, registerInfo: RegisterInfo? = nil, approverOption: ApproverOption? = nil, signId: String? = nil, approverNeedSignReview: Bool? = nil, signComponents: [Component]? = nil, components: [Component]? = nil, componentLimitType: [String]? = nil, approverVerifyTypes: [Int64]? = nil, approverSignTypes: [UInt64]? = nil) {
            self.approverType = approverType
            self.organizationName = organizationName
            self.approverName = approverName
            self.approverMobile = approverMobile
            self.approverIdCardType = approverIdCardType
            self.approverIdCardNumber = approverIdCardNumber
            self.recipientId = recipientId
            self.verifyChannel = verifyChannel
            self.notifyType = notifyType
            self.isFullText = isFullText
            self.preReadTime = preReadTime
            self.userId = userId
            self.required = required
            self.approverSource = approverSource
            self.customApproverTag = customApproverTag
            self.registerInfo = registerInfo
            self.approverOption = approverOption
            self.signId = signId
            self.approverNeedSignReview = approverNeedSignReview
            self.signComponents = signComponents
            self.components = components
            self.componentLimitType = componentLimitType
            self.approverVerifyTypes = approverVerifyTypes
            self.approverSignTypes = approverSignTypes
        }

        @available(*, deprecated, renamed: "init(approverType:organizationName:approverName:approverMobile:approverIdCardType:approverIdCardNumber:recipientId:verifyChannel:notifyType:isFullText:preReadTime:userId:required:approverSource:customApproverTag:registerInfo:approverOption:signId:approverNeedSignReview:signComponents:components:componentLimitType:approverVerifyTypes:approverSignTypes:)", message: "'jumpUrl' is deprecated in 'FlowCreateApprover'. Setting this parameter has no effect.")
        public init(approverType: Int64, organizationName: String? = nil, approverName: String? = nil, approverMobile: String? = nil, approverIdCardType: String? = nil, approverIdCardNumber: String? = nil, recipientId: String? = nil, verifyChannel: [String]? = nil, notifyType: String? = nil, isFullText: Bool? = nil, preReadTime: UInt64? = nil, userId: String? = nil, required: Bool? = nil, approverSource: String? = nil, customApproverTag: String? = nil, registerInfo: RegisterInfo? = nil, approverOption: ApproverOption? = nil, jumpUrl: String? = nil, signId: String? = nil, approverNeedSignReview: Bool? = nil, signComponents: [Component]? = nil, components: [Component]? = nil, componentLimitType: [String]? = nil, approverVerifyTypes: [Int64]? = nil, approverSignTypes: [UInt64]? = nil) {
            self.approverType = approverType
            self.organizationName = organizationName
            self.approverName = approverName
            self.approverMobile = approverMobile
            self.approverIdCardType = approverIdCardType
            self.approverIdCardNumber = approverIdCardNumber
            self.recipientId = recipientId
            self.verifyChannel = verifyChannel
            self.notifyType = notifyType
            self.isFullText = isFullText
            self.preReadTime = preReadTime
            self.userId = userId
            self.required = required
            self.approverSource = approverSource
            self.customApproverTag = customApproverTag
            self.registerInfo = registerInfo
            self.approverOption = approverOption
            self.signId = signId
            self.approverNeedSignReview = approverNeedSignReview
            self.signComponents = signComponents
            self.components = components
            self.componentLimitType = componentLimitType
            self.approverVerifyTypes = approverVerifyTypes
            self.approverSignTypes = approverSignTypes
        }

        enum CodingKeys: String, CodingKey {
            case approverType = "ApproverType"
            case organizationName = "OrganizationName"
            case approverName = "ApproverName"
            case approverMobile = "ApproverMobile"
            case approverIdCardType = "ApproverIdCardType"
            case approverIdCardNumber = "ApproverIdCardNumber"
            case recipientId = "RecipientId"
            case verifyChannel = "VerifyChannel"
            case notifyType = "NotifyType"
            case isFullText = "IsFullText"
            case preReadTime = "PreReadTime"
            case userId = "UserId"
            case required = "Required"
            case approverSource = "ApproverSource"
            case customApproverTag = "CustomApproverTag"
            case registerInfo = "RegisterInfo"
            case approverOption = "ApproverOption"
            case jumpUrl = "JumpUrl"
            case signId = "SignId"
            case approverNeedSignReview = "ApproverNeedSignReview"
            case signComponents = "SignComponents"
            case components = "Components"
            case componentLimitType = "ComponentLimitType"
            case approverVerifyTypes = "ApproverVerifyTypes"
            case approverSignTypes = "ApproverSignTypes"
        }
    }

    /// 此结构体(FlowDetailInfo)描述的是合同(流程)的详细信息
    public struct FlowDetailInfo: TCOutputModel {
        /// 合同流程ID，为32位字符串。
        public let flowId: String

        /// 合同流程的名称（可自定义此名称），长度不能超过200，只能由中文、字母、数字和下划线组成。
        public let flowName: String

        /// 合同流程的类别分类（如销售合同/入职合同等）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowType: String?

        /// 合同流程当前的签署状态, 会存在下列的状态值
        /// - **0** : 未开启流程(合同中不存在填写环节)
        /// - **1** : 待签署
        /// - **2** : 部分签署
        /// - **3** : 已拒签
        /// - **4** : 已签署
        /// - **5** : 已过期
        /// - **6** : 已撤销
        /// - **7** : 未开启流程(合同中存在填写环节)
        /// - **8** : 等待填写
        /// - **9** : 部分填写
        /// - **10** : 已拒填
        /// - **21** : 已解除
        public let flowStatus: Int64

        /// 当合同流程状态为已拒签（即 FlowStatus=3）或已撤销（即 FlowStatus=6）时，此字段 FlowMessage 为拒签或撤销原因。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowMessage: String?

        /// 合同流程描述信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowDescription: String?

        /// 合同流程的创建时间戳，格式为Unix标准时间戳（秒）。
        public let createdOn: Int64

        /// 合同流程的签署方数组
        public let flowApproverInfos: [FlowApproverDetail]

        /// 合同流程的关注方信息数组
        public let ccInfos: [FlowApproverDetail]

        /// 合同流程发起方的员工编号, 即员工在腾讯电子签平台的唯一身份标识。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let creator: String?

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case flowName = "FlowName"
            case flowType = "FlowType"
            case flowStatus = "FlowStatus"
            case flowMessage = "FlowMessage"
            case flowDescription = "FlowDescription"
            case createdOn = "CreatedOn"
            case flowApproverInfos = "FlowApproverInfos"
            case ccInfos = "CcInfos"
            case creator = "Creator"
        }
    }

    /// 此结构体(FlowGroupInfo)描述的是合同组(流程组)的单个合同(流程)信息
    public struct FlowGroupInfo: TCInputModel {
        /// 合同流程的名称（可自定义此名称），长度不能超过200，只能由中文、字母、数字和下划线组成。
        /// 该名称还将用于合同签署完成后的下载文件名。
        public let flowName: String

        /// 签署流程参与者信息，最大限制50方
        /// 注意 approver中的顺序需要和模板中的顺序保持一致， 否则会导致模板中配置的信息无效。
        public let approvers: [ApproverInfo]

        /// 文件资源ID，通过多文件上传[UploadFiles](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)接口获得，为32位字符串。
        /// 建议开发者保存此资源ID，后续创建合同或创建合同流程需此资源ID。
        public let fileIds: [String]?

        /// 合同模板ID，为32位字符串。
        /// 建议开发者保存此模板ID，后续用此模板发起合同流程需要此参数。
        /// 可登录腾讯电子签控制台，在 "模板"->"模板中心"->"列表展示设置"选中模板 ID 中查看某个模板的TemplateId(在页面中展示为模板ID)。
        public let templateId: String?

        /// 签署流程的类型(如销售合同/入职合同等)，最大长度200个字符
        /// 示例值：劳务合同
        public let flowType: String?

        /// 签署流程描述,最大长度1000个字符
        public let flowDescription: String?

        /// 签署流程的签署截止时间。
        ///
        /// 值为unix时间戳,精确到秒,不传默认为当前时间一年后
        /// 示例值：1604912664
        public let deadline: Int64?

        /// 合同（流程）的回调地址
        @available(*, deprecated)
        public let callbackUrl: String? = nil

        /// 调用方自定义的个性化字段(可自定义此字段的值)，并以base64方式编码，支持的最大数据大小为 20480长度。
        /// 在合同状态变更的回调信息等场景中，该字段的信息将原封不动地透传给贵方。
        /// 回调的相关说明可参考开发者中心的[回调通知](https://qian.tencent.com/developers/company/callback_types_v2)模块。
        public let userData: String?

        /// 发送类型：
        /// true：无序签
        /// false：有序签
        /// 注：默认为false（有序签），请和模板中的配置保持一致
        /// 示例值：true
        public let unordered: Bool?

        /// 模板或者合同中的填写控件列表，列表中可支持下列多种填写控件，控件的详细定义参考开发者中心的Component结构体
        ///
        /// - 单行文本控件
        /// - 多行文本控件
        /// - 勾选框控件
        /// - 数字控件
        /// - 图片控件
        /// - 动态表格等填写控件
        public let components: [Component]?

        /// 发起方企业的签署人进行签署操作是否需要企业内部审批。使用此功能需要发起方企业有参与签署。
        /// 若设置为true，审核结果需通过接口 [CreateFlowSignReview](https://qian.tencent.com/developers/companyApis/operateFlows/CreateFlowSignReview) 通知电子签，审核通过后，发起方企业签署人方可进行签署操作，否则会阻塞其签署操作。
        ///
        /// 注：企业可以通过此功能与企业内部的审批流程进行关联，支持手动、静默签署合同。
        /// 示例值：true
        public let needSignReview: Bool?

        /// 个人自动签场景。发起自动签署时，需设置对应自动签署场景，目前仅支持场景：处方单-E_PRESCRIPTION_AUTO_SIGN
        /// 示例值：E_PRESCRIPTION_AUTO_SIGN
        public let autoSignScene: String?

        public init(flowName: String, approvers: [ApproverInfo], fileIds: [String]? = nil, templateId: String? = nil, flowType: String? = nil, flowDescription: String? = nil, deadline: Int64? = nil, userData: String? = nil, unordered: Bool? = nil, components: [Component]? = nil, needSignReview: Bool? = nil, autoSignScene: String? = nil) {
            self.flowName = flowName
            self.approvers = approvers
            self.fileIds = fileIds
            self.templateId = templateId
            self.flowType = flowType
            self.flowDescription = flowDescription
            self.deadline = deadline
            self.userData = userData
            self.unordered = unordered
            self.components = components
            self.needSignReview = needSignReview
            self.autoSignScene = autoSignScene
        }

        @available(*, deprecated, renamed: "init(flowName:approvers:fileIds:templateId:flowType:flowDescription:deadline:userData:unordered:components:needSignReview:autoSignScene:)", message: "'callbackUrl' is deprecated in 'FlowGroupInfo'. Setting this parameter has no effect.")
        public init(flowName: String, approvers: [ApproverInfo], fileIds: [String]? = nil, templateId: String? = nil, flowType: String? = nil, flowDescription: String? = nil, deadline: Int64? = nil, callbackUrl: String? = nil, userData: String? = nil, unordered: Bool? = nil, components: [Component]? = nil, needSignReview: Bool? = nil, autoSignScene: String? = nil) {
            self.flowName = flowName
            self.approvers = approvers
            self.fileIds = fileIds
            self.templateId = templateId
            self.flowType = flowType
            self.flowDescription = flowDescription
            self.deadline = deadline
            self.userData = userData
            self.unordered = unordered
            self.components = components
            self.needSignReview = needSignReview
            self.autoSignScene = autoSignScene
        }

        enum CodingKeys: String, CodingKey {
            case flowName = "FlowName"
            case approvers = "Approvers"
            case fileIds = "FileIds"
            case templateId = "TemplateId"
            case flowType = "FlowType"
            case flowDescription = "FlowDescription"
            case deadline = "Deadline"
            case callbackUrl = "CallbackUrl"
            case userData = "UserData"
            case unordered = "Unordered"
            case components = "Components"
            case needSignReview = "NeedSignReview"
            case autoSignScene = "AutoSignScene"
        }
    }

    /// 此结构体(FlowGroupOptions)描述的是合同组的个性化配置，支持控制是否发送短信、未实名个人签署方查看合同组时是否需要实名认证（仅在合同组文件发起配置时生效）
    public struct FlowGroupOptions: TCInputModel {
        /// 签署人校验方式,支持以下类型
        ///
        /// - VerifyCheck : 人脸识别 (默认值)
        /// - MobileCheck : 手机号验证
        /// 参数说明：此参数仅在合同组文件发起有效，可选人脸识别或手机号验证两种方式，若选择后者，未实名个人签署方在签署合同时，无需经过实名认证和意愿确认两次人脸识别，该能力仅适用于个人签署方。
        public let approverVerifyType: String?

        /// 发起合同（流程）组本方企业经办人通知方式
        /// 签署通知类型，支持以下类型
        ///
        /// - sms : 短信 (默认值)
        /// - none : 不通知
        public let selfOrganizationApproverNotifyType: String?

        /// 发起合同（流程）组他方经办人通知方式
        /// 签署通知类型，支持以下类型
        ///
        /// - sms : 短信 (默认值)
        /// - none : 不通知
        public let otherApproverNotifyType: String?

        public init(approverVerifyType: String? = nil, selfOrganizationApproverNotifyType: String? = nil, otherApproverNotifyType: String? = nil) {
            self.approverVerifyType = approverVerifyType
            self.selfOrganizationApproverNotifyType = selfOrganizationApproverNotifyType
            self.otherApproverNotifyType = otherApproverNotifyType
        }

        enum CodingKeys: String, CodingKey {
            case approverVerifyType = "ApproverVerifyType"
            case selfOrganizationApproverNotifyType = "SelfOrganizationApproverNotifyType"
            case otherApproverNotifyType = "OtherApproverNotifyType"
        }
    }

    /// 电子文档的控件填充信息。按照控件类型进行相应的填充。
    ///
    /// 当控件的 ComponentType='TEXT'时，FormField.ComponentValue填入文本内容
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "文本内容"
    /// }
    /// ```
    /// 当控件的 ComponentType='MULTI_LINE_TEXT'时，FormField.ComponentValue填入文本内容，支持自动换行。
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "多行文本内容"
    /// }
    /// ```
    /// 当控件的 ComponentType='CHECK_BOX'时，FormField.ComponentValue填入true或false文本
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "true"
    /// }
    /// ```
    /// 当控件的 ComponentType='FILL_IMAGE'时，FormField.ComponentValue填入图片的资源ID
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "yDwhsxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    /// }
    /// ```
    /// 当控件的 ComponentType='ATTACHMENT'时，FormField.ComponentValue填入附件图片的资源ID列表，以逗号分隔，单个附件控件最多支持6个资源ID；
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "yDwhsxxxxxxxxxxxxxxxxxxxxxxxxxx1,yDwhsxxxxxxxxxxxxxxxxxxxxxxxxxx2,yDwhsxxxxxxxxxxxxxxxxxxxxxxxxxx3"
    /// }
    /// ```
    /// 当控件的 ComponentType='SELECTOR'时，FormField.ComponentValue填入选择的选项内容；
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "选择的内容"
    /// }
    /// ```
    /// 当控件的 ComponentType='DATE'时，FormField.ComponentValue填入日期内容；
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "2023年01月01日"
    /// }
    /// ```
    /// 当控件的 ComponentType='DISTRICT'时，FormField.ComponentValue填入省市区内容；
    /// ```
    /// FormFiled输入示例：
    /// {
    ///     "ComponentId": "componentId1",
    ///     "ComponentValue": "广东省深圳市福田区"
    /// }
    /// ```
    /// 【数据表格传参说明】
    /// 当控件的 ComponentType='DYNAMIC_TABLE'时，FormField.ComponentValue需要传递json格式的字符串参数，用于确定表头&填充数据表格（支持内容的单元格合并）
    /// 输入示例1：
    ///
    /// ```
    /// {
    ///     "headers":[
    ///         {
    ///             "content":"head1"
    ///         },
    ///         {
    ///             "content":"head2"
    ///         },
    ///         {
    ///             "content":"head3"
    ///         }
    ///     ],
    ///     "rowCount":3,
    ///     "body":{
    ///         "cells":[
    ///             {
    ///                 "rowStart":1,
    ///                 "rowEnd":1,
    ///                 "columnStart":1,
    ///                 "columnEnd":1,
    ///                 "content":"123"
    ///             },
    ///             {
    ///                 "rowStart":2,
    ///                 "rowEnd":3,
    ///                 "columnStart":1,
    ///                 "columnEnd":2,
    ///                 "content":"456"
    ///             },
    ///             {
    ///                 "rowStart":3,
    ///                 "rowEnd":3,
    ///                 "columnStart":3,
    ///                 "columnEnd":3,
    ///                 "content":"789"
    ///             }
    ///         ]
    ///     }
    /// }
    ///
    /// ```
    ///
    /// 输入示例2（表格表头宽度比例配置）：
    ///
    /// ```
    /// {
    ///     "headers":[
    ///         {
    ///             "content":"head1",
    ///             "widthPercent": 30
    ///         },
    ///         {
    ///             "content":"head2",
    ///             "widthPercent": 30
    ///         },
    ///         {
    ///             "content":"head3",
    ///             "widthPercent": 40
    ///         }
    ///     ],
    ///     "rowCount":3,
    ///     "body":{
    ///         "cells":[
    ///             {
    ///                 "rowStart":1,
    ///                 "rowEnd":1,
    ///                 "columnStart":1,
    ///                 "columnEnd":1,
    ///                 "content":"123"
    ///             },
    ///             {
    ///                 "rowStart":2,
    ///                 "rowEnd":3,
    ///                 "columnStart":1,
    ///                 "columnEnd":2,
    ///                 "content":"456"
    ///             },
    ///             {
    ///                 "rowStart":3,
    ///                 "rowEnd":3,
    ///                 "columnStart":3,
    ///                 "columnEnd":3,
    ///                 "content":"789"
    ///             }
    ///         ]
    ///     }
    /// }
    ///
    /// ```
    /// 表格参数说明
    ///
    /// | 名称                | 类型    | 描述                                              |
    /// | ------------------- | ------- | ------------------------------------------------- |
    /// | headers             | Array   | 表头：不超过10列，不支持单元格合并，字数不超过100 |
    /// | rowCount            | Integer | 表格内容最大行数                                  |
    /// | cells.N.rowStart    | Integer | 单元格坐标：行起始index                           |
    /// | cells.N.rowEnd      | Integer | 单元格坐标：行结束index                           |
    /// | cells.N.columnStart | Integer | 单元格坐标：列起始index                           |
    /// | cells.N.columnEnd   | Integer | 单元格坐标：列结束index                           |
    /// | cells.N.content     | String  | 单元格内容，字数不超过100                         |
    ///
    /// 表格参数headers说明
    /// widthPercent Integer 表头单元格列占总表头的比例，例如1：30表示 此列占表头的30%，不填写时列宽度平均拆分；例如2：总2列，某一列填写40，剩余列可以为空，按照60计算。；例如3：总3列，某一列填写30，剩余2列可以为空，分别为(100-30)/2=35
    /// content String 表头单元格内容，字数不超过100
    public struct FormField: TCInputModel, TCOutputModel {
        /// 控件填充vaule，ComponentType和传入值类型对应关系：
        /// TEXT - 文本内容
        /// MULTI_LINE_TEXT - 文本内容
        /// CHECK_BOX - true/false
        /// FILL_IMAGE、ATTACHMENT - 附件的FileId，需要通过UploadFiles接口上传获取
        /// SELECTOR - 选项值
        /// DYNAMIC_TABLE - 传入json格式的表格内容，具体见数据结构FlowInfo：https://cloud.tencent.com/document/api/1420/61525#FlowInfo
        public let componentValue: String

        /// 控件id，和ComponentName选择一项传入即可
        public let componentId: String?

        /// 控件名字，最大长度不超过30字符，和ComponentId选择一项传入即可
        public let componentName: String?

        public init(componentValue: String, componentId: String? = nil, componentName: String? = nil) {
            self.componentValue = componentValue
            self.componentId = componentId
            self.componentName = componentName
        }

        enum CodingKeys: String, CodingKey {
            case componentValue = "ComponentValue"
            case componentId = "ComponentId"
            case componentName = "ComponentName"
        }
    }

    /// 成员企业信息
    public struct GroupOrganization: TCOutputModel {
        /// 成员企业名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 成员企业别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alias: String?

        /// 成员企业id，为 32 位字符串，可在电子签PC 控制台，企业设置->企业电子签账号 获取
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let organizationId: String?

        /// 记录更新时间， unix时间戳，单位秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: UInt64?

        /// 成员企业加入集团的当前状态
        ///
        /// - **1**：待授权
        /// - **2**：已授权待激活
        /// - **3**：拒绝授权
        /// - **4**：已解除
        /// - **5**：已加入
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// 是否为集团主企业
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isMainOrganization: Bool?

        /// 企业社会信用代码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let idCardNumber: String?

        /// 企业超管信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let adminInfo: Admin?

        /// 企业许可证Id，此字段暂时不需要关注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let license: String?

        /// 企业许可证过期时间，unix时间戳，单位秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let licenseExpireTime: UInt64?

        /// 成员企业加入集团时间，unix时间戳，单位秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let joinTime: UInt64?

        /// 是否使用自建审批流引擎（即不是企微审批流引擎）
        ///
        /// - **true**：是
        /// - **false**：否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowEngineEnable: Bool?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case alias = "Alias"
            case organizationId = "OrganizationId"
            case updateTime = "UpdateTime"
            case status = "Status"
            case isMainOrganization = "IsMainOrganization"
            case idCardNumber = "IdCardNumber"
            case adminInfo = "AdminInfo"
            case license = "License"
            case licenseExpireTime = "LicenseExpireTime"
            case joinTime = "JoinTime"
            case flowEngineEnable = "FlowEngineEnable"
        }
    }

    /// 被授权的用户信息
    public struct HasAuthUser: TCInputModel, TCOutputModel {
        /// 员工在腾讯电子签平台的唯一身份标识，为32位字符串。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        /// 当前员工的归属情况，可能值是：
        /// MainOrg：在集团企业的场景下，返回此值代表是归属主企业
        /// CurrentOrg：在普通企业场景下返回此值；或者在集团企业的场景下，返回此值代表归属子企业
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let belongTo: String?

        public init(userId: String? = nil, belongTo: String? = nil) {
            self.userId = userId
            self.belongTo = belongTo
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case belongTo = "BelongTo"
        }
    }

    /// 企业角色数据信息
    public struct IntegrateRole: TCOutputModel {
        /// 角色id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleId: String?

        /// 角色名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleName: String?

        /// 角色状态，1-启用，2-禁用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleStatus: UInt64?

        /// 是否是集团角色，true-是，false-否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isGroupRole: Bool?

        /// 管辖的子企业列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subOrgIdList: [String]?

        /// 权限树
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let permissionGroups: [PermissionGroup]?

        enum CodingKeys: String, CodingKey {
            case roleId = "RoleId"
            case roleName = "RoleName"
            case roleStatus = "RoleStatus"
            case isGroupRole = "IsGroupRole"
            case subOrgIdList = "SubOrgIdList"
            case permissionGroups = "PermissionGroups"
        }
    }

    /// 部门信息
    public struct IntegrationDepartment: TCOutputModel {
        /// 部门ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deptId: String?

        /// 部门名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deptName: String?

        /// 父部门ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let parentDeptId: String?

        /// 客户系统部门ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deptOpenId: String?

        /// 序列号。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orderNo: UInt64?

        enum CodingKeys: String, CodingKey {
            case deptId = "DeptId"
            case deptName = "DeptName"
            case parentDeptId = "ParentDeptId"
            case deptOpenId = "DeptOpenId"
            case orderNo = "OrderNo"
        }
    }

    /// 持有的电子印章信息
    public struct OccupiedSeal: TCOutputModel {
        /// 电子印章编号
        public let sealId: String

        /// 电子印章名称
        public let sealName: String

        /// 电子印章授权时间戳，单位秒
        public let createOn: Int64

        /// 电子印章授权人的UserId
        public let creator: String

        /// 电子印章策略Id
        public let sealPolicyId: String

        /// 印章状态，有以下六种：CHECKING（审核中）SUCCESS（已启用）FAIL（审核拒绝）CHECKING-SADM（待超管审核）DISABLE（已停用）STOPPED（已终止）
        public let sealStatus: String

        /// 审核失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failReason: String?

        /// 印章图片url，5分钟内有效
        public let url: String

        /// 印章类型,OFFICIAL-企业公章, CONTRACT-合同专用章,ORGANIZATIONSEAL-企业印章(本地上传印章类型),LEGAL_PERSON_SEAL-法人印章
        public let sealType: String

        /// 用印申请是否为永久授权，true-是，false-否
        public let isAllTime: Bool

        /// 授权人列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let authorizedUsers: [AuthorizedUser]?

        enum CodingKeys: String, CodingKey {
            case sealId = "SealId"
            case sealName = "SealName"
            case createOn = "CreateOn"
            case creator = "Creator"
            case sealPolicyId = "SealPolicyId"
            case sealStatus = "SealStatus"
            case failReason = "FailReason"
            case url = "Url"
            case sealType = "SealType"
            case isAllTime = "IsAllTime"
            case authorizedUsers = "AuthorizedUsers"
        }
    }

    /// 机构信息
    public struct OrganizationInfo: TCInputModel, TCOutputModel {
        /// 机构在平台的编号，内部字段，暂未开放
        @available(*, deprecated)
        public let organizationId: String? = nil

        /// 用户渠道，内部字段，暂未开放
        @available(*, deprecated)
        public let channel: String? = nil

        /// 用户在渠道的机构编号，内部字段，暂未开放
        @available(*, deprecated)
        public let organizationOpenId: String? = nil

        /// 用户真实的IP，内部字段，暂未开放
        @available(*, deprecated)
        public let clientIp: String? = nil

        /// 机构的代理IP，内部字段，暂未开放
        @available(*, deprecated)
        public let proxyIp: String? = nil

        public init() {
        }

        @available(*, deprecated, renamed: "init()", message: "'organizationId', 'channel', 'organizationOpenId', 'clientIp' and 'proxyIp' are deprecated in 'OrganizationInfo'. Setting these parameters has no effect.")
        public init(organizationId: String? = nil, channel: String? = nil, organizationOpenId: String? = nil, clientIp: String? = nil, proxyIp: String? = nil) {
        }

        enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case channel = "Channel"
            case organizationOpenId = "OrganizationOpenId"
            case clientIp = "ClientIp"
            case proxyIp = "ProxyIp"
        }
    }

    /// 合同文件验签单个结果结构体
    public struct PdfVerifyResult: TCOutputModel {
        /// 验签结果。0-签名域未签名；1-验签成功； 3-验签失败；4-未找到签名域：文件内没有签名域；5-签名值格式不正确。
        public let verifyResult: Int64

        /// 签署平台，如果文件是在腾讯电子签平台签署，则返回腾讯电子签，如果文件不在腾讯电子签平台签署，则返回其他平台。
        public let signPlatform: String

        /// 签署人名称
        public let signerName: String

        /// 签署时间戳，单位秒
        public let signTime: Int64

        /// 签名算法
        public let signAlgorithm: String

        /// 签名证书序列号
        public let certSn: String

        /// 证书起始时间戳，单位毫秒
        public let certNotBefore: Int64

        /// 证书过期时间戳，单位毫秒
        public let certNotAfter: Int64

        /// 签名域横坐标，单位pt
        public let componentPosX: Float

        /// 签名域纵坐标，单位pt
        public let componentPosY: Float

        /// 签名域宽度，单位pt
        public let componentWidth: Float

        /// 签名域高度，单位pt
        public let componentHeight: Float

        /// 签名域所在页码，1～N
        public let componentPage: Int64

        enum CodingKeys: String, CodingKey {
            case verifyResult = "VerifyResult"
            case signPlatform = "SignPlatform"
            case signerName = "SignerName"
            case signTime = "SignTime"
            case signAlgorithm = "SignAlgorithm"
            case certSn = "CertSn"
            case certNotBefore = "CertNotBefore"
            case certNotAfter = "CertNotAfter"
            case componentPosX = "ComponentPosX"
            case componentPosY = "ComponentPosY"
            case componentWidth = "ComponentWidth"
            case componentHeight = "ComponentHeight"
            case componentPage = "ComponentPage"
        }
    }

    /// 权限树节点权限
    public struct Permission: TCInputModel, TCOutputModel {
        /// 权限名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 权限key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 权限类型 1前端，2后端
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 是否隐藏
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hide: Int64?

        /// 数据权限标签 1:表示根节点，2:表示叶子结点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataLabel: Int64?

        /// 数据权限独有，1:关联其他模块鉴权，2:表示关联自己模块鉴权
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataType: Int64?

        /// 数据权限独有，表示数据范围，1：全公司，2:部门及下级部门，3:自己
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataRange: Int64?

        /// 关联权限, 表示这个功能权限要受哪个数据权限管控
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataTo: String?

        /// 父级权限key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let parentKey: String?

        /// 是否选中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isChecked: Bool?

        /// 子权限集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let children: [Permission]?

        public init(name: String? = nil, key: String? = nil, type: Int64? = nil, hide: Int64? = nil, dataLabel: Int64? = nil, dataType: Int64? = nil, dataRange: Int64? = nil, dataTo: String? = nil, parentKey: String? = nil, isChecked: Bool? = nil, children: [Permission]? = nil) {
            self.name = name
            self.key = key
            self.type = type
            self.hide = hide
            self.dataLabel = dataLabel
            self.dataType = dataType
            self.dataRange = dataRange
            self.dataTo = dataTo
            self.parentKey = parentKey
            self.isChecked = isChecked
            self.children = children
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case key = "Key"
            case type = "Type"
            case hide = "Hide"
            case dataLabel = "DataLabel"
            case dataType = "DataType"
            case dataRange = "DataRange"
            case dataTo = "DataTo"
            case parentKey = "ParentKey"
            case isChecked = "IsChecked"
            case children = "Children"
        }
    }

    /// 权限树中的权限组
    public struct PermissionGroup: TCInputModel, TCOutputModel {
        /// 权限组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?

        /// 权限组key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupKey: String?

        /// 是否隐藏分组，0否1是
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hide: Int64?

        /// 权限集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let permissions: [Permission]?

        public init(groupName: String? = nil, groupKey: String? = nil, hide: Int64? = nil, permissions: [Permission]? = nil) {
            self.groupName = groupName
            self.groupKey = groupKey
            self.hide = hide
            self.permissions = permissions
        }

        enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case groupKey = "GroupKey"
            case hide = "Hide"
            case permissions = "Permissions"
        }
    }

    /// 流程中参与方的信息结构
    public struct Recipient: TCInputModel, TCOutputModel {
        /// 签署参与者ID，唯一标识
        public let recipientId: String?

        /// 参与者类型。
        /// 默认为空。
        /// ENTERPRISE-企业；
        /// INDIVIDUAL-个人；
        /// PROMOTER-发起方
        public let recipientType: String?

        /// 描述信息
        public let description: String?

        /// 角色名称
        public let roleName: String?

        /// 是否需要验证，
        /// 默认为false-不需要验证
        public let requireValidation: Bool?

        /// 是否需要签署，
        /// 默认为true-需要签署
        public let requireSign: Bool?

        /// 此参与方添加的顺序，从0～N
        public let routingOrder: Int64?

        /// 是否需要发送，
        /// 默认为true-需要发送
        public let requireDelivery: Bool?

        /// 邮箱地址
        public let email: String?

        /// 电话号码
        public let mobile: String?

        /// 关联的用户ID，电子签系统的用户ID
        public let userId: String?

        /// 发送方式，默认为EMAIL。
        /// EMAIL-邮件；
        /// MOBILE-手机短信；
        /// WECHAT-微信通知
        public let deliveryMethod: String?

        /// 参与方的一些附属信息，json格式
        public let recipientExtra: String?

        public init(recipientId: String? = nil, recipientType: String? = nil, description: String? = nil, roleName: String? = nil, requireValidation: Bool? = nil, requireSign: Bool? = nil, routingOrder: Int64? = nil, requireDelivery: Bool? = nil, email: String? = nil, mobile: String? = nil, userId: String? = nil, deliveryMethod: String? = nil, recipientExtra: String? = nil) {
            self.recipientId = recipientId
            self.recipientType = recipientType
            self.description = description
            self.roleName = roleName
            self.requireValidation = requireValidation
            self.requireSign = requireSign
            self.routingOrder = routingOrder
            self.requireDelivery = requireDelivery
            self.email = email
            self.mobile = mobile
            self.userId = userId
            self.deliveryMethod = deliveryMethod
            self.recipientExtra = recipientExtra
        }

        enum CodingKeys: String, CodingKey {
            case recipientId = "RecipientId"
            case recipientType = "RecipientType"
            case description = "Description"
            case roleName = "RoleName"
            case requireValidation = "RequireValidation"
            case requireSign = "RequireSign"
            case routingOrder = "RoutingOrder"
            case requireDelivery = "RequireDelivery"
            case email = "Email"
            case mobile = "Mobile"
            case userId = "UserId"
            case deliveryMethod = "DeliveryMethod"
            case recipientExtra = "RecipientExtra"
        }
    }

    /// 参与方填写控件信息
    public struct RecipientComponentInfo: TCOutputModel {
        /// 参与方Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recipientId: String?

        /// 参与方填写状态
        ///
        /// - 0-未填写
        /// - 1-已填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recipientFillStatus: String?

        /// 是否为发起方
        ///
        /// - true-发起方
        /// - false-参与方
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isPromoter: Bool?

        /// 填写控件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let components: [FilledComponent]?

        enum CodingKeys: String, CodingKey {
            case recipientId = "RecipientId"
            case recipientFillStatus = "RecipientFillStatus"
            case isPromoter = "IsPromoter"
            case components = "Components"
        }
    }

    /// 发起流程快速注册相关信息
    public struct RegisterInfo: TCInputModel {
        /// 法人姓名
        public let legalName: String

        /// 社会统一信用代码
        @available(*, deprecated)
        public let uscc: String? = nil

        /// 社会统一信用代码
        public let unifiedSocialCreditCode: String?

        public init(legalName: String, unifiedSocialCreditCode: String? = nil) {
            self.legalName = legalName
            self.unifiedSocialCreditCode = unifiedSocialCreditCode
        }

        @available(*, deprecated, renamed: "init(legalName:unifiedSocialCreditCode:)", message: "'uscc' is deprecated in 'RegisterInfo'. Setting this parameter has no effect.")
        public init(legalName: String, uscc: String? = nil, unifiedSocialCreditCode: String? = nil) {
            self.legalName = legalName
            self.unifiedSocialCreditCode = unifiedSocialCreditCode
        }

        enum CodingKeys: String, CodingKey {
            case legalName = "LegalName"
            case uscc = "Uscc"
            case unifiedSocialCreditCode = "UnifiedSocialCreditCode"
        }
    }

    /// 解除协议的签署人，如不指定，默认使用原流程中的签署人。
    ///
    /// `注意：不支持更换C端（个人身份类型）签署人，如果原流程中含有C端签署人，默认使用原流程中的该C端签署人。`
    ///
    /// `注意：目前不支持替换C端（个人身份类型）签署人，但是可以指定C端签署人的签署方自定义控件别名，具体见参数ApproverSignRole描述。`
    ///
    /// `注意：当指定C端签署人的签署方自定义控件别名不空时，除RelievedApproverReceiptId参数外，可以只参数ApproverSignRole。`
    public struct ReleasedApprover: TCInputModel {
        /// 签署人姓名，最大长度50个字。
        public let name: String

        /// 签署人手机号。
        public let mobile: String

        /// 要更换的原合同参与人RecipientId编号。(可通过接口[DescribeFlowInfo](https://qian.tencent.com/developers/companyApis/queryFlows/DescribeFlowInfo/)查询签署人的RecipientId编号)
        public let relievedApproverReceiptId: String

        /// 指定签署人类型，目前仅支持
        ///
        /// - **ORGANIZATION**：企业（默认值）
        /// - **ENTERPRISESERVER**：企业静默签
        public let approverType: String?

        /// 签署控件类型，支持自定义企业签署方的签署控件类型
        ///
        /// - **SIGN_SEAL**：默认为印章控件类型（默认值）
        /// - **SIGN_SIGNATURE**：手写签名控件类型
        public let approverSignComponentType: String?

        /// 参与方在合同中的角色是按照创建合同的时候来排序的，解除协议默认会将第一个参与人叫`甲方`,第二个叫`乙方`,  第三个叫`丙方`，以此类推。
        ///
        /// 如果需改动此参与人的角色名字，可用此字段指定，由汉字,英文字符,数字组成，最大20个字。
        public let approverSignRole: String?

        public init(name: String, mobile: String, relievedApproverReceiptId: String, approverType: String? = nil, approverSignComponentType: String? = nil, approverSignRole: String? = nil) {
            self.name = name
            self.mobile = mobile
            self.relievedApproverReceiptId = relievedApproverReceiptId
            self.approverType = approverType
            self.approverSignComponentType = approverSignComponentType
            self.approverSignRole = approverSignRole
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mobile = "Mobile"
            case relievedApproverReceiptId = "RelievedApproverReceiptId"
            case approverType = "ApproverType"
            case approverSignComponentType = "ApproverSignComponentType"
            case approverSignRole = "ApproverSignRole"
        }
    }

    /// 解除协议文档中内容信息，包括但不限于：解除理由、解除后仍然有效的条款-保留条款、原合同事项处理-费用结算、原合同事项处理-其他事项、其他约定等。
    public struct RelieveInfo: TCInputModel {
        /// 解除理由，长度不能超过200，只能由中文、字母、数字、中文标点和英文标点组成(不支持表情)。
        public let reason: String

        /// 解除后仍然有效的条款，保留条款，长度不能超过200，只能由中文、字母、数字、中文标点和英文标点组成(不支持表情)。
        public let remainInForceItem: String?

        /// 原合同事项处理-费用结算，长度不能超过200，只能由中文、字母、数字、中文标点和英文标点组成(不支持表情)。
        public let originalExpenseSettlement: String?

        /// 原合同事项处理-其他事项，长度不能超过200，只能由中文、字母、数字、中文标点和英文标点组成(不支持表情)。
        public let originalOtherSettlement: String?

        /// 其他约定，长度不能超过200，只能由中文、字母、数字、中文标点和英文标点组成(不支持表情)。
        public let otherDeals: String?

        public init(reason: String, remainInForceItem: String? = nil, originalExpenseSettlement: String? = nil, originalOtherSettlement: String? = nil, otherDeals: String? = nil) {
            self.reason = reason
            self.remainInForceItem = remainInForceItem
            self.originalExpenseSettlement = originalExpenseSettlement
            self.originalOtherSettlement = originalOtherSettlement
            self.otherDeals = otherDeals
        }

        enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case remainInForceItem = "RemainInForceItem"
            case originalExpenseSettlement = "OriginalExpenseSettlement"
            case originalOtherSettlement = "OriginalOtherSettlement"
            case otherDeals = "OtherDeals"
        }
    }

    /// 催办接口返回的详细信息。
    public struct RemindFlowRecords: TCOutputModel {
        /// 合同流程是否可以催办：
        /// true - 可以，false - 不可以。
        /// 若无法催办，将返回RemindMessage以解释原因。
        public let canRemind: Bool

        /// 合同流程ID，为32位字符串。
        public let flowId: String

        /// 在合同流程无法催办的情况下，系统将返回RemindMessage以阐述原因。
        public let remindMessage: String

        enum CodingKeys: String, CodingKey {
            case canRemind = "CanRemind"
            case flowId = "FlowId"
            case remindMessage = "RemindMessage"
        }
    }

    /// 关注方信息
    public struct ReviewerInfo: TCInputModel {
        /// 姓名
        public let name: String?

        /// 手机号
        public let mobile: String?

        public init(name: String? = nil, mobile: String? = nil) {
            self.name = name
            self.mobile = mobile
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mobile = "Mobile"
        }
    }

    /// 模板中指定的印章信息
    public struct SealInfo: TCOutputModel {
        /// 印章ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sealId: String?

        /// 印章类型。LEGAL_PERSON_SEAL: 法定代表人章；
        /// ORGANIZATIONSEAL：企业印章；
        /// OFFICIAL：企业公章；
        /// CONTRACT：合同专用章
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sealType: String?

        /// 印章名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sealName: String?

        enum CodingKeys: String, CodingKey {
            case sealId = "SealId"
            case sealType = "SealType"
            case sealName = "SealName"
        }
    }

    /// 签署二维码的基本信息，用于创建二维码，用户可扫描该二维码进行签署操作。
    public struct SignQrCode: TCOutputModel {
        /// 二维码ID，为32位字符串。
        public let qrCodeId: String

        /// 二维码URL，可通过转换二维码的工具或代码组件将此URL转化为二维码，以便用户扫描进行流程签署。
        public let qrCodeUrl: String

        /// 二维码的有截止时间，格式为Unix标准时间戳（秒）。
        /// 一旦超过二维码的有效期限，该二维码将自动失效。
        public let expiredTime: Int64

        enum CodingKeys: String, CodingKey {
            case qrCodeId = "QrCodeId"
            case qrCodeUrl = "QrCodeUrl"
            case expiredTime = "ExpiredTime"
        }
    }

    /// 流程签署二维码的签署信息，适用于客户系统整合二维码功能。
    /// 通过链接，用户可直接访问电子签名小程序并签署合同。
    public struct SignUrl: TCOutputModel {
        /// 跳转至电子签名小程序签署的链接地址。
        /// 适用于客户端APP及小程序直接唤起电子签名小程序。
        public let appSignUrl: String

        /// 签署链接有效时间，格式类似"2022-08-05 15:55:01"
        public let effectiveTime: String

        /// 跳转至电子签名小程序签署的链接地址，格式类似于https://essurl.cn/xxx。
        /// 打开此链接将会展示H5中间页面，随后唤起电子签名小程序以进行合同签署。
        public let httpSignUrl: String

        enum CodingKeys: String, CodingKey {
            case appSignUrl = "AppSignUrl"
            case effectiveTime = "EffectiveTime"
            case httpSignUrl = "HttpSignUrl"
        }
    }

    /// 企业员工信息。
    public struct Staff: TCInputModel, TCOutputModel {
        /// 员工在腾讯电子签平台的唯一身份标识，为32位字符串。
        /// 注：`创建和更新场景无需填写。`
        public let userId: String?

        /// 显示的用户名/昵称。
        public let displayName: String?

        /// 用户手机号码， 支持国内手机号11位数字(无需加+86前缀或其他字符)。
        public let mobile: String?

        /// 用户邮箱。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let email: String?

        /// 用户在第三方平台ID。
        /// 注：`如需在此接口提醒员工实名，该参数不传。`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let openId: String?

        /// 员工角色信息。
        /// 注：`创建和更新场景无需填写。`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roles: [StaffRole]?

        /// 员工部门信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let department: Department?

        /// 员工是否实名。
        /// 注：`创建和更新场景无需填写。`
        public let verified: Bool?

        /// 员工创建时间戳，单位秒。
        /// 注：`创建和更新场景无需填写。`
        public let createdOn: Int64?

        /// 员工实名时间戳，单位秒。
        /// 注：`创建和更新场景无需填写。`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let verifiedOn: Int64?

        /// 员工是否离职：
        ///
        /// - **0**：未离职
        /// - **1**：离职
        /// 注：`创建和更新场景无需填写。`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quiteJob: Int64?

        /// 员工离职交接人用户ID。
        /// 注：`创建和更新场景无需填写。`
        public let receiveUserId: String?

        /// 员工离职交接人用户OpenId。
        /// 注：`创建和更新场景无需填写。`
        public let receiveOpenId: String?

        /// 企业微信用户账号ID。
        /// 注：`仅企微类型的企业创建员工接口支持该字段。`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weworkOpenId: String?

        public init(userId: String? = nil, displayName: String? = nil, mobile: String? = nil, email: String? = nil, openId: String? = nil, roles: [StaffRole]? = nil, department: Department? = nil, verified: Bool? = nil, createdOn: Int64? = nil, verifiedOn: Int64? = nil, quiteJob: Int64? = nil, receiveUserId: String? = nil, receiveOpenId: String? = nil, weworkOpenId: String? = nil) {
            self.userId = userId
            self.displayName = displayName
            self.mobile = mobile
            self.email = email
            self.openId = openId
            self.roles = roles
            self.department = department
            self.verified = verified
            self.createdOn = createdOn
            self.verifiedOn = verifiedOn
            self.quiteJob = quiteJob
            self.receiveUserId = receiveUserId
            self.receiveOpenId = receiveOpenId
            self.weworkOpenId = weworkOpenId
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case displayName = "DisplayName"
            case mobile = "Mobile"
            case email = "Email"
            case openId = "OpenId"
            case roles = "Roles"
            case department = "Department"
            case verified = "Verified"
            case createdOn = "CreatedOn"
            case verifiedOn = "VerifiedOn"
            case quiteJob = "QuiteJob"
            case receiveUserId = "ReceiveUserId"
            case receiveOpenId = "ReceiveOpenId"
            case weworkOpenId = "WeworkOpenId"
        }
    }

    /// 集成版企业角色信息。
    public struct StaffRole: TCInputModel, TCOutputModel {
        /// 角色ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleId: String?

        /// 角色名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleName: String?

        public init(roleId: String? = nil, roleName: String? = nil) {
            self.roleId = roleId
            self.roleName = roleName
        }

        enum CodingKeys: String, CodingKey {
            case roleId = "RoleId"
            case roleName = "RoleName"
        }
    }

    /// 创建员工的成功数据
    public struct SuccessCreateStaffData: TCOutputModel {
        /// 员工名
        public let displayName: String

        /// 员工手机号
        public let mobile: String

        /// 员工在电子签平台的id
        public let userId: String

        /// 提示，当创建已存在未实名用户时，该字段有值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let note: String?

        /// 传入的企微账号id
        public let weworkOpenId: String?

        enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case mobile = "Mobile"
            case userId = "UserId"
            case note = "Note"
            case weworkOpenId = "WeworkOpenId"
        }
    }

    /// 删除员工的成功数据
    public struct SuccessDeleteStaffData: TCOutputModel {
        /// 员工名
        public let displayName: String

        /// 员工手机号
        public let mobile: String

        /// 员工在电子签平台的id
        public let userId: String

        enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case mobile = "Mobile"
            case userId = "UserId"
        }
    }

    /// 更新员工信息成功返回的数据信息
    public struct SuccessUpdateStaffData: TCOutputModel {
        /// 传入的用户名称
        public let displayName: String

        /// 传入的手机号，没有打码
        public let mobile: String

        /// 员工在腾讯电子签平台的唯一身份标识，为32位字符串。
        /// 可登录腾讯电子签控制台，在 "更多能力"->"组织管理" 中查看某位员工的UserId(在页面中展示为用户ID)。
        public let userId: String

        enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case mobile = "Mobile"
            case userId = "UserId"
        }
    }

    /// 此结构体 (TemplateInfo) 用于描述模板的信息。
    ///
    /// > **模板组成**
    /// >
    /// >  一个模板通常会包含以下结构信息
    /// >- 模板基本信息
    /// >- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
    /// >- 填写控件 Components
    /// >- 签署控件 SignComponents
    /// >- 生成模板的文件基础信息 FileInfos
    public struct TemplateInfo: TCInputModel, TCOutputModel {
        /// 模板ID，模板的唯一标识
        public let templateId: String?

        /// 模板名
        public let templateName: String?

        /// 模板描述信息
        public let description: String?

        /// 模板关联的资源ID列表
        public let documentResourceIds: [String]?

        /// 生成模板的文件基础信息
        public let fileInfos: [FileInfo]?

        /// 附件关联的资源ID
        public let attachmentResourceIds: [String]?

        /// 签署顺序
        /// 无序 -1
        /// 有序为序列数字 0,1,2
        public let signOrder: [Int64]?

        /// 模板中的签署参与方列表
        public let recipients: [Recipient]?

        /// 模板的填充控件列表
        public let components: [Component]?

        /// 模板中的签署控件列表
        public let signComponents: [Component]?

        /// 模板状态
        /// -1:不可用
        /// 0:草稿态
        /// 1:正式态，可以正常使用
        public let status: Int64?

        /// 模板的创建者信息，电子签系统用户ID
        public let creator: String?

        /// 模板创建的时间戳，格式为Unix标准时间戳（秒）
        public let createdOn: Int64?

        /// 发起方参与信息Promoter
        public let promoter: Recipient?

        /// 模板类型：
        /// 1  静默签,
        /// 3  普通模板
        public let templateType: Int64?

        /// 模板可用状态：
        /// 1 启用（默认）
        /// 2 停用
        public let available: Int64?

        /// 创建模板的企业ID，电子签的机构ID
        public let organizationId: String?

        /// 模板预览链接，有效时间5分钟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let previewUrl: String?

        /// 模板版本。默认为空时，全数字字符，初始版本为yyyyMMdd001。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateVersion: String?

        /// 模板是否已发布：
        /// true-已发布
        /// false-未发布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let published: Bool?

        /// 模板内部指定的印章列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateSeals: [SealInfo]?

        /// 模板内部指定的印章列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        @available(*, deprecated)
        public let seals: [SealInfo]? = nil

        public init(templateId: String? = nil, templateName: String? = nil, description: String? = nil, documentResourceIds: [String]? = nil, fileInfos: [FileInfo]? = nil, attachmentResourceIds: [String]? = nil, signOrder: [Int64]? = nil, recipients: [Recipient]? = nil, components: [Component]? = nil, signComponents: [Component]? = nil, status: Int64? = nil, creator: String? = nil, createdOn: Int64? = nil, promoter: Recipient? = nil, templateType: Int64? = nil, available: Int64? = nil, organizationId: String? = nil, previewUrl: String? = nil, templateVersion: String? = nil, published: Bool? = nil, templateSeals: [SealInfo]? = nil) {
            self.templateId = templateId
            self.templateName = templateName
            self.description = description
            self.documentResourceIds = documentResourceIds
            self.fileInfos = fileInfos
            self.attachmentResourceIds = attachmentResourceIds
            self.signOrder = signOrder
            self.recipients = recipients
            self.components = components
            self.signComponents = signComponents
            self.status = status
            self.creator = creator
            self.createdOn = createdOn
            self.promoter = promoter
            self.templateType = templateType
            self.available = available
            self.organizationId = organizationId
            self.previewUrl = previewUrl
            self.templateVersion = templateVersion
            self.published = published
            self.templateSeals = templateSeals
        }

        @available(*, deprecated, renamed: "init(templateId:templateName:description:documentResourceIds:fileInfos:attachmentResourceIds:signOrder:recipients:components:signComponents:status:creator:createdOn:promoter:templateType:available:organizationId:previewUrl:templateVersion:published:templateSeals:)", message: "'seals' is deprecated in 'TemplateInfo'. Setting this parameter has no effect.")
        public init(templateId: String? = nil, templateName: String? = nil, description: String? = nil, documentResourceIds: [String]? = nil, fileInfos: [FileInfo]? = nil, attachmentResourceIds: [String]? = nil, signOrder: [Int64]? = nil, recipients: [Recipient]? = nil, components: [Component]? = nil, signComponents: [Component]? = nil, status: Int64? = nil, creator: String? = nil, createdOn: Int64? = nil, promoter: Recipient? = nil, templateType: Int64? = nil, available: Int64? = nil, organizationId: String? = nil, previewUrl: String? = nil, templateVersion: String? = nil, published: Bool? = nil, templateSeals: [SealInfo]? = nil, seals: [SealInfo]? = nil) {
            self.templateId = templateId
            self.templateName = templateName
            self.description = description
            self.documentResourceIds = documentResourceIds
            self.fileInfos = fileInfos
            self.attachmentResourceIds = attachmentResourceIds
            self.signOrder = signOrder
            self.recipients = recipients
            self.components = components
            self.signComponents = signComponents
            self.status = status
            self.creator = creator
            self.createdOn = createdOn
            self.promoter = promoter
            self.templateType = templateType
            self.available = available
            self.organizationId = organizationId
            self.previewUrl = previewUrl
            self.templateVersion = templateVersion
            self.published = published
            self.templateSeals = templateSeals
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case description = "Description"
            case documentResourceIds = "DocumentResourceIds"
            case fileInfos = "FileInfos"
            case attachmentResourceIds = "AttachmentResourceIds"
            case signOrder = "SignOrder"
            case recipients = "Recipients"
            case components = "Components"
            case signComponents = "SignComponents"
            case status = "Status"
            case creator = "Creator"
            case createdOn = "CreatedOn"
            case promoter = "Promoter"
            case templateType = "TemplateType"
            case available = "Available"
            case organizationId = "OrganizationId"
            case previewUrl = "PreviewUrl"
            case templateVersion = "TemplateVersion"
            case published = "Published"
            case templateSeals = "TemplateSeals"
            case seals = "Seals"
        }
    }

    /// 此结构体 (UploadFile) 用于描述多文件上传的文件信息。
    public struct UploadFile: TCInputModel {
        /// Base64编码后的文件内容
        public let fileBody: String

        /// 文件名，最大长度不超过200字符
        public let fileName: String?

        public init(fileBody: String, fileName: String? = nil) {
            self.fileBody = fileBody
            self.fileName = fileName
        }

        enum CodingKeys: String, CodingKey {
            case fileBody = "FileBody"
            case fileName = "FileName"
        }
    }

    /// 用户信息
    public struct UserInfo: TCInputModel, TCOutputModel {
        /// 用户在平台的编号
        public let userId: String?

        /// 用户的来源渠道，一般不用传，特定场景根据接口说明传值
        @available(*, deprecated)
        public let channel: String? = nil

        /// 用户在渠道的编号，一般不用传，特定场景根据接口说明传值
        @available(*, deprecated)
        public let openId: String? = nil

        /// 用户真实IP，内部字段，暂未开放
        @available(*, deprecated)
        public let clientIp: String? = nil

        /// 用户代理IP，内部字段，暂未开放
        @available(*, deprecated)
        public let proxyIp: String? = nil

        public init(userId: String? = nil) {
            self.userId = userId
        }

        @available(*, deprecated, renamed: "init(userId:)", message: "'channel', 'openId', 'clientIp' and 'proxyIp' are deprecated in 'UserInfo'. Setting these parameters has no effect.")
        public init(userId: String? = nil, channel: String? = nil, openId: String? = nil, clientIp: String? = nil, proxyIp: String? = nil) {
            self.userId = userId
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case channel = "Channel"
            case openId = "OpenId"
            case clientIp = "ClientIp"
            case proxyIp = "ProxyIp"
        }
    }

    /// 用户的三要素：姓名，证件号，证件类型
    public struct UserThreeFactor: TCInputModel {
        /// 签署方经办人的姓名。
        /// 经办人的姓名将用于身份认证和电子签名，请确保填写的姓名为签署方的真实姓名，而非昵称等代名。
        public let name: String

        /// 证件类型，支持以下类型
        ///
        /// - ID_CARD : 居民身份证 (默认值)
        /// - HONGKONG_AND_MACAO : 港澳居民来往内地通行证
        /// - HONGKONG_MACAO_AND_TAIWAN : 港澳台居民居住证(格式同居民身份证)
        public let idCardType: String

        /// 证件号码，应符合以下规则
        ///
        /// - 居民身份证号码应为18位字符串，由数字和大写字母X组成（如存在X，请大写）。
        /// - 港澳居民来往内地通行证号码应为9位字符串，第1位为“C”，第2位为英文字母（但“I”、“O”除外），后7位为阿拉伯数字。
        /// - 港澳台居民居住证号码编码规则与中国大陆身份证相同，应为18位字符串。
        public let idCardNumber: String

        public init(name: String, idCardType: String, idCardNumber: String) {
            self.name = name
            self.idCardType = idCardType
            self.idCardNumber = idCardNumber
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case idCardType = "IdCardType"
            case idCardNumber = "IdCardNumber"
        }
    }

    /// 页面主题配置
    public struct WebThemeConfig: TCInputModel {
        /// 是否显示页面底部电子签logo，取值如下：
        ///
        /// - **true**：页面底部显示电子签logo
        /// - **false**：页面底部不显示电子签logo（默认）
        public let displaySignBrandLogo: Bool?

        /// 主题颜色：
        /// 支持十六进制颜色值以及RGB格式颜色值，例如：#D54941，rgb(213, 73, 65)
        public let webEmbedThemeColor: String?

        public init(displaySignBrandLogo: Bool? = nil, webEmbedThemeColor: String? = nil) {
            self.displaySignBrandLogo = displaySignBrandLogo
            self.webEmbedThemeColor = webEmbedThemeColor
        }

        enum CodingKeys: String, CodingKey {
            case displaySignBrandLogo = "DisplaySignBrandLogo"
            case webEmbedThemeColor = "WebEmbedThemeColor"
        }
    }
}
