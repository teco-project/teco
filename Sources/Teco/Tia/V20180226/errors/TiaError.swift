//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

/// Service error type returned by `Tia`.
public protocol TCTiaErrorType: TCServiceErrorType {
    /// Get the service error as ``TCTiaError``.
    ///
    /// - Returns: ``TCTiaError`` that holds the same error code and context.
    func asTiaError() -> TCTiaError
}

public struct TCTiaError: TCTiaErrorType {
    enum Code: String {
        case failedOperation_TimeOut = "FailedOperation.TimeOut"
        case internalError = "InternalError"
        case invalidParameter = "InvalidParameter"
        case invalidParameterValue = "InvalidParameterValue"
        case invalidParameterValue_Order = "InvalidParameterValue.Order"
        case invalidParameterValue_Orderby = "InvalidParameterValue.Orderby"
        case resourceNotFound = "ResourceNotFound"
        case resourceUnavailable = "ResourceUnavailable"
        case unauthorizedOperation = "UnauthorizedOperation"
        case unauthorizedOperation_CAM = "UnauthorizedOperation.CAM"
        case unauthorizedOperation_Region = "UnauthorizedOperation.Region"
        case unsupportedOperation_UnsupportedVersion = "UnsupportedOperation.UnsupportedVersion"
    }

    /// Error domains affliated to ``TCTiaError``.
    public static var domains: [TCErrorType.Type] {
        [FailedOperation.self, InvalidParameterValue.self, UnauthorizedOperation.self, UnsupportedOperation.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 操作超时。
    public static var failedOperation_TimeOut: TCTiaError {
        TCTiaError(.failedOperation_TimeOut)
    }

    /// 内部错误。
    public static var internalError: TCTiaError {
        TCTiaError(.internalError)
    }

    /// 参数错误。
    public static var invalidParameter: TCTiaError {
        TCTiaError(.invalidParameter)
    }

    /// 参数取值错误。
    public static var invalidParameterValue: TCTiaError {
        TCTiaError(.invalidParameterValue)
    }

    /// Order传入错误。
    public static var invalidParameterValue_Order: TCTiaError {
        TCTiaError(.invalidParameterValue_Order)
    }

    /// Orderby传入错误。
    public static var invalidParameterValue_Orderby: TCTiaError {
        TCTiaError(.invalidParameterValue_Orderby)
    }

    /// 资源不存在。
    public static var resourceNotFound: TCTiaError {
        TCTiaError(.resourceNotFound)
    }

    /// 资源不可用。
    public static var resourceUnavailable: TCTiaError {
        TCTiaError(.resourceUnavailable)
    }

    /// 未授权操作。
    public static var unauthorizedOperation: TCTiaError {
        TCTiaError(.unauthorizedOperation)
    }

    /// CAM鉴权失败。
    public static var unauthorizedOperation_CAM: TCTiaError {
        TCTiaError(.unauthorizedOperation_CAM)
    }

    /// Region错误。
    public static var unauthorizedOperation_Region: TCTiaError {
        TCTiaError(.unauthorizedOperation_Region)
    }

    /// 集群版本过低。
    public static var unsupportedOperation_UnsupportedVersion: TCTiaError {
        TCTiaError(.unsupportedOperation_UnsupportedVersion)
    }

    public func asTiaError() -> TCTiaError {
        return self
    }
}
