//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mrs {
    /// TurnPDFToObject请求参数结构体
    public struct TurnPDFToObjectRequest: TCRequest {
        /// 体检报告PDF文件信息, 目前只支持传PDF文件的Base64编码字符(PDF文件不能超过10MB，如果超过建议先压缩PDF，再转成base64)
        public let pdfInfo: PdfInfo

        public init(pdfInfo: PdfInfo) {
            self.pdfInfo = pdfInfo
        }

        enum CodingKeys: String, CodingKey {
            case pdfInfo = "PdfInfo"
        }
    }

    /// TurnPDFToObject返回参数结构体
    public struct TurnPDFToObjectResponse: TCResponse {
        /// 报告结构化结果
        public let template: Template?

        /// 多级分类结果
        public let textTypeList: [TextType]?

        /// 报告结构化结果(体检报告PDF结构化接口返回的 json 内容非常多，建议通过本地代码调用)
        public let block: Block?

        /// 是否使用Block字段
        public let isBlock: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case template = "Template"
            case textTypeList = "TextTypeList"
            case block = "Block"
            case isBlock = "IsBlock"
            case requestId = "RequestId"
        }
    }

    /// 体检报告PDF文件结构化
    ///
    /// 将PDF格式的体检报告文件结构化，解析关键信息。
    /// 注意：该接口是按照体检报告 PDF 页面数量统计次数，不是按照 PDF 文件数量统计次数。通过该接口传入的报告必须是体检报告，非体检报告可能无法正确解析。
    @inlinable
    public func turnPDFToObject(_ input: TurnPDFToObjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TurnPDFToObjectResponse> {
        self.client.execute(action: "TurnPDFToObject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 体检报告PDF文件结构化
    ///
    /// 将PDF格式的体检报告文件结构化，解析关键信息。
    /// 注意：该接口是按照体检报告 PDF 页面数量统计次数，不是按照 PDF 文件数量统计次数。通过该接口传入的报告必须是体检报告，非体检报告可能无法正确解析。
    @inlinable
    public func turnPDFToObject(_ input: TurnPDFToObjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TurnPDFToObjectResponse {
        try await self.client.execute(action: "TurnPDFToObject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 体检报告PDF文件结构化
    ///
    /// 将PDF格式的体检报告文件结构化，解析关键信息。
    /// 注意：该接口是按照体检报告 PDF 页面数量统计次数，不是按照 PDF 文件数量统计次数。通过该接口传入的报告必须是体检报告，非体检报告可能无法正确解析。
    @inlinable
    public func turnPDFToObject(pdfInfo: PdfInfo, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TurnPDFToObjectResponse> {
        self.turnPDFToObject(.init(pdfInfo: pdfInfo), region: region, logger: logger, on: eventLoop)
    }

    /// 体检报告PDF文件结构化
    ///
    /// 将PDF格式的体检报告文件结构化，解析关键信息。
    /// 注意：该接口是按照体检报告 PDF 页面数量统计次数，不是按照 PDF 文件数量统计次数。通过该接口传入的报告必须是体检报告，非体检报告可能无法正确解析。
    @inlinable
    public func turnPDFToObject(pdfInfo: PdfInfo, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TurnPDFToObjectResponse {
        try await self.turnPDFToObject(.init(pdfInfo: pdfInfo), region: region, logger: logger, on: eventLoop)
    }
}
