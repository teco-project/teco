//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mrs {
    /// ImageToClass请求参数结构体
    public struct ImageToClassRequest: TCRequestModel {
        /// 图片列表，允许传入多张图片，支持传入图片的base64编码，暂不支持图片url
        public let imageInfoList: [ImageInfo]

        /// 图片处理参数
        public let handleParam: HandleParam

        /// 不填，默认为0
        public let type: UInt64

        /// 后付费的用户类型，新客户传1，老客户可不传或传 0。2022 年 12 月 15 新增了计费项，在此时间之前已经通过商务指定优惠价格的大客户，请不传这个字段或传 0，如果传 1 会导致以前获得的折扣价格失效。在 2022 年 12 月 15 日之后，通过商务指定优惠价格的大客户请传 1。
        public let userType: UInt64?

        public init(imageInfoList: [ImageInfo], handleParam: HandleParam, type: UInt64, userType: UInt64? = nil) {
            self.imageInfoList = imageInfoList
            self.handleParam = handleParam
            self.type = type
            self.userType = userType
        }

        enum CodingKeys: String, CodingKey {
            case imageInfoList = "ImageInfoList"
            case handleParam = "HandleParam"
            case type = "Type"
            case userType = "UserType"
        }
    }

    /// ImageToClass返回参数结构体
    public struct ImageToClassResponse: TCResponseModel {
        /// 分类结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let textTypeList: [TextType]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case textTypeList = "TextTypeList"
            case requestId = "RequestId"
        }
    }

    /// 图片分类接口
    ///
    /// 图片分类
    @inlinable
    public func imageToClass(_ input: ImageToClassRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ImageToClassResponse> {
        self.client.execute(action: "ImageToClass", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 图片分类接口
    ///
    /// 图片分类
    @inlinable
    public func imageToClass(_ input: ImageToClassRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ImageToClassResponse {
        try await self.client.execute(action: "ImageToClass", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 图片分类接口
    ///
    /// 图片分类
    @inlinable
    public func imageToClass(imageInfoList: [ImageInfo], handleParam: HandleParam, type: UInt64, userType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ImageToClassResponse> {
        self.imageToClass(.init(imageInfoList: imageInfoList, handleParam: handleParam, type: type, userType: userType), region: region, logger: logger, on: eventLoop)
    }

    /// 图片分类接口
    ///
    /// 图片分类
    @inlinable
    public func imageToClass(imageInfoList: [ImageInfo], handleParam: HandleParam, type: UInt64, userType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ImageToClassResponse {
        try await self.imageToClass(.init(imageInfoList: imageInfoList, handleParam: handleParam, type: type, userType: userType), region: region, logger: logger, on: eventLoop)
    }
}
