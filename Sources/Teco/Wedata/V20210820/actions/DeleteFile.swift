//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DeleteFile请求参数结构体
    public struct DeleteFileRequest: TCRequest {
        /// 项目id
        public let projectId: String

        /// 资源id
        public let resourceId: String

        public init(projectId: String, resourceId: String) {
            self.projectId = projectId
            self.resourceId = resourceId
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case resourceId = "ResourceId"
        }
    }

    /// DeleteFile返回参数结构体
    public struct DeleteFileResponse: TCResponse {
        /// 删除结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 开发空间-删除文件
    ///
    /// 删除文件
    @inlinable
    public func deleteFile(_ input: DeleteFileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteFileResponse> {
        self.client.execute(action: "DeleteFile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开发空间-删除文件
    ///
    /// 删除文件
    @inlinable
    public func deleteFile(_ input: DeleteFileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteFileResponse {
        try await self.client.execute(action: "DeleteFile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开发空间-删除文件
    ///
    /// 删除文件
    @inlinable
    public func deleteFile(projectId: String, resourceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteFileResponse> {
        self.deleteFile(.init(projectId: projectId, resourceId: resourceId), region: region, logger: logger, on: eventLoop)
    }

    /// 开发空间-删除文件
    ///
    /// 删除文件
    @inlinable
    public func deleteFile(projectId: String, resourceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteFileResponse {
        try await self.deleteFile(.init(projectId: projectId, resourceId: resourceId), region: region, logger: logger, on: eventLoop)
    }
}
