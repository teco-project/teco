//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// DescribeInLongAgentList请求参数结构体
    public struct DescribeInLongAgentListRequest: TCRequestModel {
        /// WeData项目ID
        public let projectId: String

        /// 采集器ID
        public let agentId: String?

        /// Agent Name
        public let agentName: String?

        /// 集群类型，1：TKE Agent，2：BOSS SDK，默认：1，3：CVM，4：自建服务器 【传多个用逗号分割】
        public let agentType: UInt64?

        /// Agent状态(running运行中，initializing 操作中，failed心跳异常)
        public let status: String?

        /// Vpc Id
        public let vpcId: String?

        /// 分页页码，从1开始，默认：1
        public let pageIndex: UInt64?

        /// 分页每页记录数，默认10
        public let pageSize: UInt64?

        /// 名称搜索是否开启模糊匹配，1：开启，0：不开启（精确匹配）
        public let like: UInt64?

        /// agent类型【多个用逗号分隔】
        public let agentTypes: String?

        public init(projectId: String, agentId: String? = nil, agentName: String? = nil, agentType: UInt64? = nil, status: String? = nil, vpcId: String? = nil, pageIndex: UInt64? = nil, pageSize: UInt64? = nil, like: UInt64? = nil, agentTypes: String? = nil) {
            self.projectId = projectId
            self.agentId = agentId
            self.agentName = agentName
            self.agentType = agentType
            self.status = status
            self.vpcId = vpcId
            self.pageIndex = pageIndex
            self.pageSize = pageSize
            self.like = like
            self.agentTypes = agentTypes
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case agentId = "AgentId"
            case agentName = "AgentName"
            case agentType = "AgentType"
            case status = "Status"
            case vpcId = "VpcId"
            case pageIndex = "PageIndex"
            case pageSize = "PageSize"
            case like = "Like"
            case agentTypes = "AgentTypes"
        }
    }

    /// DescribeInLongAgentList返回参数结构体
    public struct DescribeInLongAgentListResponse: TCResponseModel {
        /// 采集器信息列表
        public let items: [InLongAgentDetail]

        /// 页码
        public let pageIndex: UInt64

        /// 每页记录数
        public let pageSize: UInt64

        /// 总记录数
        public let totalCount: UInt64

        /// 总页数
        public let totalPage: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case pageIndex = "PageIndex"
            case pageSize = "PageSize"
            case totalCount = "TotalCount"
            case totalPage = "TotalPage"
            case requestId = "RequestId"
        }
    }

    /// 获取采集器列表
    @inlinable
    public func describeInLongAgentList(_ input: DescribeInLongAgentListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInLongAgentListResponse> {
        self.client.execute(action: "DescribeInLongAgentList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取采集器列表
    @inlinable
    public func describeInLongAgentList(_ input: DescribeInLongAgentListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInLongAgentListResponse {
        try await self.client.execute(action: "DescribeInLongAgentList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取采集器列表
    @inlinable
    public func describeInLongAgentList(projectId: String, agentId: String? = nil, agentName: String? = nil, agentType: UInt64? = nil, status: String? = nil, vpcId: String? = nil, pageIndex: UInt64? = nil, pageSize: UInt64? = nil, like: UInt64? = nil, agentTypes: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInLongAgentListResponse> {
        let input = DescribeInLongAgentListRequest(projectId: projectId, agentId: agentId, agentName: agentName, agentType: agentType, status: status, vpcId: vpcId, pageIndex: pageIndex, pageSize: pageSize, like: like, agentTypes: agentTypes)
        return self.client.execute(action: "DescribeInLongAgentList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取采集器列表
    @inlinable
    public func describeInLongAgentList(projectId: String, agentId: String? = nil, agentName: String? = nil, agentType: UInt64? = nil, status: String? = nil, vpcId: String? = nil, pageIndex: UInt64? = nil, pageSize: UInt64? = nil, like: UInt64? = nil, agentTypes: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInLongAgentListResponse {
        let input = DescribeInLongAgentListRequest(projectId: projectId, agentId: agentId, agentName: agentName, agentType: agentType, status: status, vpcId: vpcId, pageIndex: pageIndex, pageSize: pageSize, like: like, agentTypes: agentTypes)
        return try await self.client.execute(action: "DescribeInLongAgentList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
