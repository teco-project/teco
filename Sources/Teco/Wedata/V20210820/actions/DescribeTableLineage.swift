//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeTableLineage请求参数结构体
    public struct DescribeTableLineageRequest: TCRequest {
        /// 查询方向，INPUT,OUTPUT,BOTH枚举值
        public let direction: String

        /// 表信息
        public let data: TableLineageInfo

        /// 单次查询入度,默认 1
        public let inputDepth: Int64?

        /// 单次查询出度,默认 1
        public let outputDepth: Int64?

        /// 额外参数（传递调用方信息）
        public let extParams: [LineageParamRecord]?

        /// 是否过滤临时表,默认true
        public let ignoreTemp: Bool?

        /// 是否递归查询二级节点数目，默认为true
        public let recursiveSecond: Bool?

        public init(direction: String, data: TableLineageInfo, inputDepth: Int64? = nil, outputDepth: Int64? = nil, extParams: [LineageParamRecord]? = nil, ignoreTemp: Bool? = nil, recursiveSecond: Bool? = nil) {
            self.direction = direction
            self.data = data
            self.inputDepth = inputDepth
            self.outputDepth = outputDepth
            self.extParams = extParams
            self.ignoreTemp = ignoreTemp
            self.recursiveSecond = recursiveSecond
        }

        enum CodingKeys: String, CodingKey {
            case direction = "Direction"
            case data = "Data"
            case inputDepth = "InputDepth"
            case outputDepth = "OutputDepth"
            case extParams = "ExtParams"
            case ignoreTemp = "IgnoreTemp"
            case recursiveSecond = "RecursiveSecond"
        }
    }

    /// DescribeTableLineage返回参数结构体
    public struct DescribeTableLineageResponse: TCResponse {
        /// 表血缘信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableLineage: TableLineageInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case tableLineage = "TableLineage"
            case requestId = "RequestId"
        }
    }

    /// 列出表血缘信息
    @inlinable
    public func describeTableLineage(_ input: DescribeTableLineageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTableLineageResponse> {
        self.client.execute(action: "DescribeTableLineage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 列出表血缘信息
    @inlinable
    public func describeTableLineage(_ input: DescribeTableLineageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTableLineageResponse {
        try await self.client.execute(action: "DescribeTableLineage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 列出表血缘信息
    @inlinable
    public func describeTableLineage(direction: String, data: TableLineageInfo, inputDepth: Int64? = nil, outputDepth: Int64? = nil, extParams: [LineageParamRecord]? = nil, ignoreTemp: Bool? = nil, recursiveSecond: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTableLineageResponse> {
        self.describeTableLineage(.init(direction: direction, data: data, inputDepth: inputDepth, outputDepth: outputDepth, extParams: extParams, ignoreTemp: ignoreTemp, recursiveSecond: recursiveSecond), region: region, logger: logger, on: eventLoop)
    }

    /// 列出表血缘信息
    @inlinable
    public func describeTableLineage(direction: String, data: TableLineageInfo, inputDepth: Int64? = nil, outputDepth: Int64? = nil, extParams: [LineageParamRecord]? = nil, ignoreTemp: Bool? = nil, recursiveSecond: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTableLineageResponse {
        try await self.describeTableLineage(.init(direction: direction, data: data, inputDepth: inputDepth, outputDepth: outputDepth, extParams: extParams, ignoreTemp: ignoreTemp, recursiveSecond: recursiveSecond), region: region, logger: logger, on: eventLoop)
    }
}
