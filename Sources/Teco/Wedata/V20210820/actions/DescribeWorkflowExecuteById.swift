//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Wedata {
    /// DescribeWorkflowExecuteById请求参数结构体
    public struct DescribeWorkflowExecuteByIdRequest: TCPaginatedRequest {
        /// 项目ID
        public let projectId: String

        /// 工作流ID
        public let workFlowIdList: String?

        /// 分页大小
        public let pageNumber: UInt64?

        /// 分页索引
        public let pageSize: UInt64?

        public init(projectId: String, workFlowIdList: String? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil) {
            self.projectId = projectId
            self.workFlowIdList = workFlowIdList
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case workFlowIdList = "WorkFlowIdList"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeWorkflowExecuteByIdResponse) -> DescribeWorkflowExecuteByIdRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(projectId: self.projectId, workFlowIdList: self.workFlowIdList, pageNumber: (self.pageNumber ?? 0) + 1, pageSize: self.pageSize)
        }
    }

    /// DescribeWorkflowExecuteById返回参数结构体
    public struct DescribeWorkflowExecuteByIdResponse: TCPaginatedResponse {
        /// 工作流运行时间信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: WorkFlowExecuteDtoByPage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``WorkFlowExecuteDto`` list from the paginated response.
        public func getItems() -> [WorkFlowExecuteDto] {
            self.data?.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.data?.totalCount
        }
    }

    /// 查询工作流画布运行起止时间
    @inlinable
    public func describeWorkflowExecuteById(_ input: DescribeWorkflowExecuteByIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkflowExecuteByIdResponse> {
        self.client.execute(action: "DescribeWorkflowExecuteById", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询工作流画布运行起止时间
    @inlinable
    public func describeWorkflowExecuteById(_ input: DescribeWorkflowExecuteByIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkflowExecuteByIdResponse {
        try await self.client.execute(action: "DescribeWorkflowExecuteById", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询工作流画布运行起止时间
    @inlinable
    public func describeWorkflowExecuteById(projectId: String, workFlowIdList: String? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkflowExecuteByIdResponse> {
        self.describeWorkflowExecuteById(.init(projectId: projectId, workFlowIdList: workFlowIdList, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 查询工作流画布运行起止时间
    @inlinable
    public func describeWorkflowExecuteById(projectId: String, workFlowIdList: String? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkflowExecuteByIdResponse {
        try await self.describeWorkflowExecuteById(.init(projectId: projectId, workFlowIdList: workFlowIdList, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 查询工作流画布运行起止时间
    @inlinable
    public func describeWorkflowExecuteByIdPaginated(_ input: DescribeWorkflowExecuteByIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [WorkFlowExecuteDto])> {
        self.client.paginate(input: input, region: region, command: self.describeWorkflowExecuteById, logger: logger, on: eventLoop)
    }

    /// 查询工作流画布运行起止时间
    @inlinable @discardableResult
    public func describeWorkflowExecuteByIdPaginated(_ input: DescribeWorkflowExecuteByIdRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeWorkflowExecuteByIdResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeWorkflowExecuteById, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询工作流画布运行起止时间
    ///
    /// - Returns: `AsyncSequence`s of ``WorkFlowExecuteDto`` and ``DescribeWorkflowExecuteByIdResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeWorkflowExecuteByIdPaginator(_ input: DescribeWorkflowExecuteByIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeWorkflowExecuteByIdRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeWorkflowExecuteById, logger: logger, on: eventLoop)
    }
}
