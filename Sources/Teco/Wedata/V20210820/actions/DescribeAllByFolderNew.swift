//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Wedata {
    /// DescribeAllByFolderNew请求参数结构体
    public struct DescribeAllByFolderNewRequest: TCPaginatedRequest {
        /// 文件夹属性
        public let folder: FolderOpsDto?

        /// 工作流列表
        public let workflows: [WorkflowCanvasOpsDto]?

        /// 目标文件id
        public let targetFolderId: String?

        /// 关键字
        public let keyWords: String?

        /// 父文件id
        public let parentsFolderId: String?

        /// 拉取文件夹列表
        public let isAddWorkflow: String?

        /// 任务状态
        public let taskStates: [String]?

        /// 搜索类型
        public let findType: String?

        /// 访问类型
        public let optType: String?

        /// 操作者名称
        public let operatorName: String?

        /// 操作者id
        public let operatorId: String?

        /// 项目id
        public let projectId: String?

        /// 项目标志
        public let projectIdent: String?

        /// 项目名称
        public let projectName: String?

        /// 索引页码
        public let pageIndex: Int64?

        /// 页面大小
        public let pageSize: Int64?

        /// 数据总数
        public let count: Int64?

        /// 基础请求信息
        public let requestBaseInfo: ProjectBaseInfoOpsRequest?

        /// 是否计算总数
        public let isCount: Bool?

        public init(folder: FolderOpsDto? = nil, workflows: [WorkflowCanvasOpsDto]? = nil, targetFolderId: String? = nil, keyWords: String? = nil, parentsFolderId: String? = nil, isAddWorkflow: String? = nil, taskStates: [String]? = nil, findType: String? = nil, optType: String? = nil, operatorName: String? = nil, operatorId: String? = nil, projectId: String? = nil, projectIdent: String? = nil, projectName: String? = nil, pageIndex: Int64? = nil, pageSize: Int64? = nil, count: Int64? = nil, requestBaseInfo: ProjectBaseInfoOpsRequest? = nil, isCount: Bool? = nil) {
            self.folder = folder
            self.workflows = workflows
            self.targetFolderId = targetFolderId
            self.keyWords = keyWords
            self.parentsFolderId = parentsFolderId
            self.isAddWorkflow = isAddWorkflow
            self.taskStates = taskStates
            self.findType = findType
            self.optType = optType
            self.operatorName = operatorName
            self.operatorId = operatorId
            self.projectId = projectId
            self.projectIdent = projectIdent
            self.projectName = projectName
            self.pageIndex = pageIndex
            self.pageSize = pageSize
            self.count = count
            self.requestBaseInfo = requestBaseInfo
            self.isCount = isCount
        }

        enum CodingKeys: String, CodingKey {
            case folder = "Folder"
            case workflows = "Workflows"
            case targetFolderId = "TargetFolderId"
            case keyWords = "KeyWords"
            case parentsFolderId = "ParentsFolderId"
            case isAddWorkflow = "IsAddWorkflow"
            case taskStates = "TaskStates"
            case findType = "FindType"
            case optType = "OptType"
            case operatorName = "OperatorName"
            case operatorId = "OperatorId"
            case projectId = "ProjectId"
            case projectIdent = "ProjectIdent"
            case projectName = "ProjectName"
            case pageIndex = "PageIndex"
            case pageSize = "PageSize"
            case count = "Count"
            case requestBaseInfo = "RequestBaseInfo"
            case isCount = "IsCount"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAllByFolderNewResponse) -> DescribeAllByFolderNewRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeAllByFolderNewRequest(folder: self.folder, workflows: self.workflows, targetFolderId: self.targetFolderId, keyWords: self.keyWords, parentsFolderId: self.parentsFolderId, isAddWorkflow: self.isAddWorkflow, taskStates: self.taskStates, findType: self.findType, optType: self.optType, operatorName: self.operatorName, operatorId: self.operatorId, projectId: self.projectId, projectIdent: self.projectIdent, projectName: self.projectName, pageIndex: (self.pageIndex ?? 0) + 1, pageSize: self.pageSize, count: self.count, requestBaseInfo: self.requestBaseInfo, isCount: self.isCount)
        }
    }

    /// DescribeAllByFolderNew返回参数结构体
    public struct DescribeAllByFolderNewResponse: TCPaginatedResponse {
        /// 结果集
        public let data: CollectionFolderOpsDto

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``FolderOpsDto`` list from the paginated response.
        public func getItems() -> [FolderOpsDto] {
            self.data.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data.totalCount
        }
    }

    /// 查询父目录下所有子文件夹+工作流
    @inlinable
    public func describeAllByFolderNew(_ input: DescribeAllByFolderNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAllByFolderNewResponse> {
        self.client.execute(action: "DescribeAllByFolderNew", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询父目录下所有子文件夹+工作流
    @inlinable
    public func describeAllByFolderNew(_ input: DescribeAllByFolderNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAllByFolderNewResponse {
        try await self.client.execute(action: "DescribeAllByFolderNew", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询父目录下所有子文件夹+工作流
    @inlinable
    public func describeAllByFolderNew(folder: FolderOpsDto? = nil, workflows: [WorkflowCanvasOpsDto]? = nil, targetFolderId: String? = nil, keyWords: String? = nil, parentsFolderId: String? = nil, isAddWorkflow: String? = nil, taskStates: [String]? = nil, findType: String? = nil, optType: String? = nil, operatorName: String? = nil, operatorId: String? = nil, projectId: String? = nil, projectIdent: String? = nil, projectName: String? = nil, pageIndex: Int64? = nil, pageSize: Int64? = nil, count: Int64? = nil, requestBaseInfo: ProjectBaseInfoOpsRequest? = nil, isCount: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAllByFolderNewResponse> {
        self.describeAllByFolderNew(.init(folder: folder, workflows: workflows, targetFolderId: targetFolderId, keyWords: keyWords, parentsFolderId: parentsFolderId, isAddWorkflow: isAddWorkflow, taskStates: taskStates, findType: findType, optType: optType, operatorName: operatorName, operatorId: operatorId, projectId: projectId, projectIdent: projectIdent, projectName: projectName, pageIndex: pageIndex, pageSize: pageSize, count: count, requestBaseInfo: requestBaseInfo, isCount: isCount), region: region, logger: logger, on: eventLoop)
    }

    /// 查询父目录下所有子文件夹+工作流
    @inlinable
    public func describeAllByFolderNew(folder: FolderOpsDto? = nil, workflows: [WorkflowCanvasOpsDto]? = nil, targetFolderId: String? = nil, keyWords: String? = nil, parentsFolderId: String? = nil, isAddWorkflow: String? = nil, taskStates: [String]? = nil, findType: String? = nil, optType: String? = nil, operatorName: String? = nil, operatorId: String? = nil, projectId: String? = nil, projectIdent: String? = nil, projectName: String? = nil, pageIndex: Int64? = nil, pageSize: Int64? = nil, count: Int64? = nil, requestBaseInfo: ProjectBaseInfoOpsRequest? = nil, isCount: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAllByFolderNewResponse {
        try await self.describeAllByFolderNew(.init(folder: folder, workflows: workflows, targetFolderId: targetFolderId, keyWords: keyWords, parentsFolderId: parentsFolderId, isAddWorkflow: isAddWorkflow, taskStates: taskStates, findType: findType, optType: optType, operatorName: operatorName, operatorId: operatorId, projectId: projectId, projectIdent: projectIdent, projectName: projectName, pageIndex: pageIndex, pageSize: pageSize, count: count, requestBaseInfo: requestBaseInfo, isCount: isCount), region: region, logger: logger, on: eventLoop)
    }

    /// 查询父目录下所有子文件夹+工作流
    @inlinable
    public func describeAllByFolderNewPaginated(_ input: DescribeAllByFolderNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [FolderOpsDto])> {
        self.client.paginate(input: input, region: region, command: self.describeAllByFolderNew, logger: logger, on: eventLoop)
    }

    /// 查询父目录下所有子文件夹+工作流
    @inlinable @discardableResult
    public func describeAllByFolderNewPaginated(_ input: DescribeAllByFolderNewRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAllByFolderNewResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAllByFolderNew, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询父目录下所有子文件夹+工作流
    ///
    /// - Returns: `AsyncSequence`s of ``FolderOpsDto`` and ``DescribeAllByFolderNewResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAllByFolderNewPaginator(_ input: DescribeAllByFolderNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAllByFolderNewRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAllByFolderNew, logger: logger, on: eventLoop)
    }
}
