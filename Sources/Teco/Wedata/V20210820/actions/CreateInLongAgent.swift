//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// CreateInLongAgent请求参数结构体
    public struct CreateInLongAgentRequest: TCRequestModel {
        /// 采集器类型，1：TKE Agent，2：BOSS SDK，默认：1
        public let agentType: UInt64

        /// 采集器名称
        public let agentName: String

        /// 集成资源组id
        public let executorGroupId: String

        /// WeData项目ID
        public let projectId: String

        /// TKE集群的地域
        public let tkeRegion: String

        /// 当AgentType为1时，必填。当AgentType为2时，不用填
        public let clusterId: String?

        public init(agentType: UInt64, agentName: String, executorGroupId: String, projectId: String, tkeRegion: String, clusterId: String? = nil) {
            self.agentType = agentType
            self.agentName = agentName
            self.executorGroupId = executorGroupId
            self.projectId = projectId
            self.tkeRegion = tkeRegion
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case agentType = "AgentType"
            case agentName = "AgentName"
            case executorGroupId = "ExecutorGroupId"
            case projectId = "ProjectId"
            case tkeRegion = "TkeRegion"
            case clusterId = "ClusterId"
        }
    }

    /// CreateInLongAgent返回参数结构体
    public struct CreateInLongAgentResponse: TCResponseModel {
        /// 采集器ID
        public let agentId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case agentId = "AgentId"
            case requestId = "RequestId"
        }
    }

    /// 注册采集器
    @inlinable
    public func createInLongAgent(_ input: CreateInLongAgentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInLongAgentResponse> {
        self.client.execute(action: "CreateInLongAgent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 注册采集器
    @inlinable
    public func createInLongAgent(_ input: CreateInLongAgentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInLongAgentResponse {
        try await self.client.execute(action: "CreateInLongAgent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 注册采集器
    @inlinable
    public func createInLongAgent(agentType: UInt64, agentName: String, executorGroupId: String, projectId: String, tkeRegion: String, clusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInLongAgentResponse> {
        self.createInLongAgent(CreateInLongAgentRequest(agentType: agentType, agentName: agentName, executorGroupId: executorGroupId, projectId: projectId, tkeRegion: tkeRegion, clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 注册采集器
    @inlinable
    public func createInLongAgent(agentType: UInt64, agentName: String, executorGroupId: String, projectId: String, tkeRegion: String, clusterId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInLongAgentResponse {
        try await self.createInLongAgent(CreateInLongAgentRequest(agentType: agentType, agentName: agentName, executorGroupId: executorGroupId, projectId: projectId, tkeRegion: tkeRegion, clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
