//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// BatchRunOpsTask请求参数结构体
    public struct BatchRunOpsTaskRequest: TCRequest {
        /// 项目id
        public let projectId: String

        /// 是否补录中间实例,0不补录;1补录
        public let enableMakeUp: Int64

        /// 任务id列表
        public let tasks: [String]

        public init(projectId: String, enableMakeUp: Int64, tasks: [String]) {
            self.projectId = projectId
            self.enableMakeUp = enableMakeUp
            self.tasks = tasks
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case enableMakeUp = "EnableMakeUp"
            case tasks = "Tasks"
        }
    }

    /// BatchRunOpsTask返回参数结构体
    public struct BatchRunOpsTaskResponse: TCResponse {
        /// 操作结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 批量运行任务
    ///
    /// 任务运维-任务列表 批量运行
    @inlinable
    public func batchRunOpsTask(_ input: BatchRunOpsTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchRunOpsTaskResponse> {
        self.client.execute(action: "BatchRunOpsTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量运行任务
    ///
    /// 任务运维-任务列表 批量运行
    @inlinable
    public func batchRunOpsTask(_ input: BatchRunOpsTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchRunOpsTaskResponse {
        try await self.client.execute(action: "BatchRunOpsTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量运行任务
    ///
    /// 任务运维-任务列表 批量运行
    @inlinable
    public func batchRunOpsTask(projectId: String, enableMakeUp: Int64, tasks: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchRunOpsTaskResponse> {
        self.batchRunOpsTask(.init(projectId: projectId, enableMakeUp: enableMakeUp, tasks: tasks), region: region, logger: logger, on: eventLoop)
    }

    /// 批量运行任务
    ///
    /// 任务运维-任务列表 批量运行
    @inlinable
    public func batchRunOpsTask(projectId: String, enableMakeUp: Int64, tasks: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchRunOpsTaskResponse {
        try await self.batchRunOpsTask(.init(projectId: projectId, enableMakeUp: enableMakeUp, tasks: tasks), region: region, logger: logger, on: eventLoop)
    }
}
