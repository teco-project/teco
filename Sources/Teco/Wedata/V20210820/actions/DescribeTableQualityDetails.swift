//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// DescribeTableQualityDetails请求参数结构体
    public struct DescribeTableQualityDetailsRequest: TCRequestModel {
        /// 统计日期
        public let statisticsDate: Int64

        /// 项目id
        public let projectId: String

        /// 分页序号
        public let pageNumber: Int64

        /// 分页大小
        public let pageSize: Int64

        /// 过滤参数TableName、DatabaseId 、DatabaseName、OwnerUserName
        public let filters: [Filter]?

        /// 排序参数 排序方式 DESC 或者 ASC，表得分排序 TableScore
        public let orderFields: [OrderField]?

        /// 数据来源id
        public let datasourceId: String?

        public init(statisticsDate: Int64, projectId: String, pageNumber: Int64, pageSize: Int64, filters: [Filter]? = nil, orderFields: [OrderField]? = nil, datasourceId: String? = nil) {
            self.statisticsDate = statisticsDate
            self.projectId = projectId
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.filters = filters
            self.orderFields = orderFields
            self.datasourceId = datasourceId
        }

        enum CodingKeys: String, CodingKey {
            case statisticsDate = "StatisticsDate"
            case projectId = "ProjectId"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case filters = "Filters"
            case orderFields = "OrderFields"
            case datasourceId = "DatasourceId"
        }
    }

    /// DescribeTableQualityDetails返回参数结构体
    public struct DescribeTableQualityDetailsResponse: TCResponseModel {
        /// 表质量分详情结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: TableQualityDetailPage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询表质量详情
    ///
    /// 质量报告-查询表质量详情
    @inlinable
    public func describeTableQualityDetails(_ input: DescribeTableQualityDetailsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTableQualityDetailsResponse> {
        self.client.execute(action: "DescribeTableQualityDetails", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询表质量详情
    ///
    /// 质量报告-查询表质量详情
    @inlinable
    public func describeTableQualityDetails(_ input: DescribeTableQualityDetailsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTableQualityDetailsResponse {
        try await self.client.execute(action: "DescribeTableQualityDetails", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询表质量详情
    ///
    /// 质量报告-查询表质量详情
    @inlinable
    public func describeTableQualityDetails(statisticsDate: Int64, projectId: String, pageNumber: Int64, pageSize: Int64, filters: [Filter]? = nil, orderFields: [OrderField]? = nil, datasourceId: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTableQualityDetailsResponse> {
        self.describeTableQualityDetails(DescribeTableQualityDetailsRequest(statisticsDate: statisticsDate, projectId: projectId, pageNumber: pageNumber, pageSize: pageSize, filters: filters, orderFields: orderFields, datasourceId: datasourceId), logger: logger, on: eventLoop)
    }

    /// 查询表质量详情
    ///
    /// 质量报告-查询表质量详情
    @inlinable
    public func describeTableQualityDetails(statisticsDate: Int64, projectId: String, pageNumber: Int64, pageSize: Int64, filters: [Filter]? = nil, orderFields: [OrderField]? = nil, datasourceId: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTableQualityDetailsResponse {
        try await self.describeTableQualityDetails(DescribeTableQualityDetailsRequest(statisticsDate: statisticsDate, projectId: projectId, pageNumber: pageNumber, pageSize: pageSize, filters: filters, orderFields: orderFields, datasourceId: datasourceId), logger: logger, on: eventLoop)
    }
}
