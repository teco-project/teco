//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// DescribeTasksByPage请求参数结构体
    public struct DescribeTasksByPageRequest: TCRequestModel {
        /// 项目Id
        public let projectId: String
        
        /// 工作流ID
        public let workflowId: String
        
        /// 页码，默认1
        public let pageNumber: Int64?
        
        /// 页大小，默认10
        public let pageSize: Int64?
        
        public init (projectId: String, workflowId: String, pageNumber: Int64? = nil, pageSize: Int64? = nil) {
            self.projectId = projectId
            self.workflowId = workflowId
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }
        
        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case workflowId = "WorkflowId"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }
    }
    
    /// DescribeTasksByPage返回参数结构体
    public struct DescribeTasksByPageResponse: TCResponseModel {
        /// 无1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: TaskInfoDataPage?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }
    
    /// 根据工作流分页查询任务【Beta版本】
    ///
    /// <p style="color:red;">[注意：该Beta版本只满足广州区部分白名单客户使用]</p>
    /// 根据工作流分页查询任务
    @inlinable
    public func describeTasksByPage(_ input: DescribeTasksByPageRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeTasksByPageResponse > {
        self.client.execute(action: "DescribeTasksByPage", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 根据工作流分页查询任务【Beta版本】
    ///
    /// <p style="color:red;">[注意：该Beta版本只满足广州区部分白名单客户使用]</p>
    /// 根据工作流分页查询任务
    @inlinable
    public func describeTasksByPage(_ input: DescribeTasksByPageRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTasksByPageResponse {
        try await self.client.execute(action: "DescribeTasksByPage", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
