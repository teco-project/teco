//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// FreezeTasksByWorkflowIds请求参数结构体
    public struct FreezeTasksByWorkflowIdsRequest: TCRequestModel {
        /// 工作流id列表
        public let workflowIds: [String]

        /// 项目id
        public let projectId: String

        public init(workflowIds: [String], projectId: String) {
            self.workflowIds = workflowIds
            self.projectId = projectId
        }

        enum CodingKeys: String, CodingKey {
            case workflowIds = "WorkflowIds"
            case projectId = "ProjectId"
        }
    }

    /// FreezeTasksByWorkflowIds返回参数结构体
    public struct FreezeTasksByWorkflowIdsResponse: TCResponseModel {
        /// 操作返回结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: OperationOpsDto?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 暂停工作流下的所有任务
    @inlinable
    public func freezeTasksByWorkflowIds(_ input: FreezeTasksByWorkflowIdsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<FreezeTasksByWorkflowIdsResponse> {
        self.client.execute(action: "FreezeTasksByWorkflowIds", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 暂停工作流下的所有任务
    @inlinable
    public func freezeTasksByWorkflowIds(_ input: FreezeTasksByWorkflowIdsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> FreezeTasksByWorkflowIdsResponse {
        try await self.client.execute(action: "FreezeTasksByWorkflowIds", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 暂停工作流下的所有任务
    @inlinable
    public func freezeTasksByWorkflowIds(workflowIds: [String], projectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<FreezeTasksByWorkflowIdsResponse> {
        self.freezeTasksByWorkflowIds(.init(workflowIds: workflowIds, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }

    /// 暂停工作流下的所有任务
    @inlinable
    public func freezeTasksByWorkflowIds(workflowIds: [String], projectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> FreezeTasksByWorkflowIdsResponse {
        try await self.freezeTasksByWorkflowIds(.init(workflowIds: workflowIds, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }
}
