//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeRules请求参数结构体
    public struct DescribeRulesRequest: TCRequestModel {
        /// 项目id
        public let projectId: String?

        /// 规则组id
        public let ruleGroupId: UInt64?

        /// 该规则运行的执行引擎，不传时会请求该数据源下默认的执行引擎
        public let engineType: String?

        public init(projectId: String? = nil, ruleGroupId: UInt64? = nil, engineType: String? = nil) {
            self.projectId = projectId
            self.ruleGroupId = ruleGroupId
            self.engineType = engineType
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case ruleGroupId = "RuleGroupId"
            case engineType = "EngineType"
        }
    }

    /// DescribeRules返回参数结构体
    public struct DescribeRulesResponse: TCResponseModel {
        /// 规则列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [Rule]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询质量规则列表
    @inlinable
    public func describeRules(_ input: DescribeRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRulesResponse> {
        self.client.execute(action: "DescribeRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询质量规则列表
    @inlinable
    public func describeRules(_ input: DescribeRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRulesResponse {
        try await self.client.execute(action: "DescribeRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询质量规则列表
    @inlinable
    public func describeRules(projectId: String? = nil, ruleGroupId: UInt64? = nil, engineType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRulesResponse> {
        self.describeRules(.init(projectId: projectId, ruleGroupId: ruleGroupId, engineType: engineType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询质量规则列表
    @inlinable
    public func describeRules(projectId: String? = nil, ruleGroupId: UInt64? = nil, engineType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRulesResponse {
        try await self.describeRules(.init(projectId: projectId, ruleGroupId: ruleGroupId, engineType: engineType), region: region, logger: logger, on: eventLoop)
    }
}
