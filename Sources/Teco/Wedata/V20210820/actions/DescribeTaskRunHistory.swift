//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeTaskRunHistory请求参数结构体
    public struct DescribeTaskRunHistoryRequest: TCRequestModel {
        /// 项目id
        public let projectId: String

        /// 检索条件
        public let searchCondition: InstanceSearchCondition

        /// 分页大小
        public let pageSize: UInt64

        /// 分页页码
        public let pageNumber: String

        public init(projectId: String, searchCondition: InstanceSearchCondition, pageSize: UInt64, pageNumber: String) {
            self.projectId = projectId
            self.searchCondition = searchCondition
            self.pageSize = pageSize
            self.pageNumber = pageNumber
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case searchCondition = "SearchCondition"
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
        }
    }

    /// DescribeTaskRunHistory返回参数结构体
    public struct DescribeTaskRunHistoryResponse: TCResponseModel {
        /// 分页查询任务运行历史结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: InstanceOpsInfoPage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 分页查询任务运行历史
    @inlinable
    public func describeTaskRunHistory(_ input: DescribeTaskRunHistoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskRunHistoryResponse> {
        self.client.execute(action: "DescribeTaskRunHistory", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 分页查询任务运行历史
    @inlinable
    public func describeTaskRunHistory(_ input: DescribeTaskRunHistoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskRunHistoryResponse {
        try await self.client.execute(action: "DescribeTaskRunHistory", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 分页查询任务运行历史
    @inlinable
    public func describeTaskRunHistory(projectId: String, searchCondition: InstanceSearchCondition, pageSize: UInt64, pageNumber: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskRunHistoryResponse> {
        self.describeTaskRunHistory(.init(projectId: projectId, searchCondition: searchCondition, pageSize: pageSize, pageNumber: pageNumber), region: region, logger: logger, on: eventLoop)
    }

    /// 分页查询任务运行历史
    @inlinable
    public func describeTaskRunHistory(projectId: String, searchCondition: InstanceSearchCondition, pageSize: UInt64, pageNumber: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskRunHistoryResponse {
        try await self.describeTaskRunHistory(.init(projectId: projectId, searchCondition: searchCondition, pageSize: pageSize, pageNumber: pageNumber), region: region, logger: logger, on: eventLoop)
    }
}
