//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Wedata {
    /// DescribeOpsWorkflows请求参数结构体
    public struct DescribeOpsWorkflowsRequest: TCPaginatedRequest {
        /// 项目id
        public let projectId: String

        /// 任务产品类型名称列表，以 ',' 号分割
        public let productNameList: String?

        /// 文件id列表，以 ',' 号分割
        public let folderIdList: String?

        /// 工作流id，以 ',' 号分割
        public let workFlowIdList: String?

        /// 工作流名称列表，以 ',' 号分割
        public let workFlowNameList: String?

        /// 任务名称列表，以 ',' 号分割
        public let taskNameList: String?

        /// 任务id列表，以 ',' 号分割
        public let taskIdList: String?

        /// 状态列表，以 ',' 号分割
        public let statusList: String?

        /// 负责人列表，以 ',' 号分割
        public let inChargeList: String?

        /// 分页页码
        public let pageNumber: UInt64?

        /// 分页大小
        public let pageSize: UInt64?

        /// 排序项
        public let sortItem: String?

        /// 排序方式，DESC或ASC
        public let sortType: String?

        public init(projectId: String, productNameList: String? = nil, folderIdList: String? = nil, workFlowIdList: String? = nil, workFlowNameList: String? = nil, taskNameList: String? = nil, taskIdList: String? = nil, statusList: String? = nil, inChargeList: String? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil, sortItem: String? = nil, sortType: String? = nil) {
            self.projectId = projectId
            self.productNameList = productNameList
            self.folderIdList = folderIdList
            self.workFlowIdList = workFlowIdList
            self.workFlowNameList = workFlowNameList
            self.taskNameList = taskNameList
            self.taskIdList = taskIdList
            self.statusList = statusList
            self.inChargeList = inChargeList
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.sortItem = sortItem
            self.sortType = sortType
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case productNameList = "ProductNameList"
            case folderIdList = "FolderIdList"
            case workFlowIdList = "WorkFlowIdList"
            case workFlowNameList = "WorkFlowNameList"
            case taskNameList = "TaskNameList"
            case taskIdList = "TaskIdList"
            case statusList = "StatusList"
            case inChargeList = "InChargeList"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case sortItem = "SortItem"
            case sortType = "SortType"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeOpsWorkflowsResponse) -> DescribeOpsWorkflowsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeOpsWorkflowsRequest(projectId: self.projectId, productNameList: self.productNameList, folderIdList: self.folderIdList, workFlowIdList: self.workFlowIdList, workFlowNameList: self.workFlowNameList, taskNameList: self.taskNameList, taskIdList: self.taskIdList, statusList: self.statusList, inChargeList: self.inChargeList, pageNumber: (self.pageNumber ?? 0) + 1, pageSize: self.pageSize, sortItem: self.sortItem, sortType: self.sortType)
        }
    }

    /// DescribeOpsWorkflows返回参数结构体
    public struct DescribeOpsWorkflowsResponse: TCPaginatedResponse {
        /// 工作流列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: WorkflowExtOpsDtoPage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [WorkflowExtOpsDto] {
            self.data?.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.data?.totalCount
        }
    }

    /// 查询用户生产工作流列表
    @inlinable
    public func describeOpsWorkflows(_ input: DescribeOpsWorkflowsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOpsWorkflowsResponse> {
        self.client.execute(action: "DescribeOpsWorkflows", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询用户生产工作流列表
    @inlinable
    public func describeOpsWorkflows(_ input: DescribeOpsWorkflowsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOpsWorkflowsResponse {
        try await self.client.execute(action: "DescribeOpsWorkflows", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询用户生产工作流列表
    @inlinable
    public func describeOpsWorkflows(projectId: String, productNameList: String? = nil, folderIdList: String? = nil, workFlowIdList: String? = nil, workFlowNameList: String? = nil, taskNameList: String? = nil, taskIdList: String? = nil, statusList: String? = nil, inChargeList: String? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil, sortItem: String? = nil, sortType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOpsWorkflowsResponse> {
        self.describeOpsWorkflows(.init(projectId: projectId, productNameList: productNameList, folderIdList: folderIdList, workFlowIdList: workFlowIdList, workFlowNameList: workFlowNameList, taskNameList: taskNameList, taskIdList: taskIdList, statusList: statusList, inChargeList: inChargeList, pageNumber: pageNumber, pageSize: pageSize, sortItem: sortItem, sortType: sortType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户生产工作流列表
    @inlinable
    public func describeOpsWorkflows(projectId: String, productNameList: String? = nil, folderIdList: String? = nil, workFlowIdList: String? = nil, workFlowNameList: String? = nil, taskNameList: String? = nil, taskIdList: String? = nil, statusList: String? = nil, inChargeList: String? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil, sortItem: String? = nil, sortType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOpsWorkflowsResponse {
        try await self.describeOpsWorkflows(.init(projectId: projectId, productNameList: productNameList, folderIdList: folderIdList, workFlowIdList: workFlowIdList, workFlowNameList: workFlowNameList, taskNameList: taskNameList, taskIdList: taskIdList, statusList: statusList, inChargeList: inChargeList, pageNumber: pageNumber, pageSize: pageSize, sortItem: sortItem, sortType: sortType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询用户生产工作流列表
    @inlinable
    public func describeOpsWorkflowsPaginated(_ input: DescribeOpsWorkflowsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [WorkflowExtOpsDto])> {
        self.client.paginate(input: input, region: region, command: self.describeOpsWorkflows, logger: logger, on: eventLoop)
    }

    /// 查询用户生产工作流列表
    @inlinable @discardableResult
    public func describeOpsWorkflowsPaginated(_ input: DescribeOpsWorkflowsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeOpsWorkflowsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeOpsWorkflows, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询用户生产工作流列表
    ///
    /// - Returns: `AsyncSequence`s of `WorkflowExtOpsDto` and `DescribeOpsWorkflowsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeOpsWorkflowsPaginator(_ input: DescribeOpsWorkflowsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeOpsWorkflowsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeOpsWorkflows, logger: logger, on: eventLoop)
    }
}
