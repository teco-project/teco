//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeOperateOpsTaskDatasourceType请求参数结构体
    public struct DescribeOperateOpsTaskDatasourceTypeRequest: TCRequest {
        /// 项目ID
        public let projectId: String

        /// 任务类型ID
        public let taskType: Int64

        /// 数据源来源/去向
        public let serviceKind: String?

        public init(projectId: String, taskType: Int64, serviceKind: String? = nil) {
            self.projectId = projectId
            self.taskType = taskType
            self.serviceKind = serviceKind
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case taskType = "TaskType"
            case serviceKind = "ServiceKind"
        }
    }

    /// DescribeOperateOpsTaskDatasourceType返回参数结构体
    public struct DescribeOperateOpsTaskDatasourceTypeResponse: TCResponse {
        /// 数据源信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [DatasourceTypeByTaskType]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询生产态任务数据源类型列表
    ///
    /// 任务运维-查询生产态任务数据源类型列表
    @inlinable
    public func describeOperateOpsTaskDatasourceType(_ input: DescribeOperateOpsTaskDatasourceTypeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOperateOpsTaskDatasourceTypeResponse> {
        self.client.execute(action: "DescribeOperateOpsTaskDatasourceType", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询生产态任务数据源类型列表
    ///
    /// 任务运维-查询生产态任务数据源类型列表
    @inlinable
    public func describeOperateOpsTaskDatasourceType(_ input: DescribeOperateOpsTaskDatasourceTypeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOperateOpsTaskDatasourceTypeResponse {
        try await self.client.execute(action: "DescribeOperateOpsTaskDatasourceType", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询生产态任务数据源类型列表
    ///
    /// 任务运维-查询生产态任务数据源类型列表
    @inlinable
    public func describeOperateOpsTaskDatasourceType(projectId: String, taskType: Int64, serviceKind: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOperateOpsTaskDatasourceTypeResponse> {
        self.describeOperateOpsTaskDatasourceType(.init(projectId: projectId, taskType: taskType, serviceKind: serviceKind), region: region, logger: logger, on: eventLoop)
    }

    /// 查询生产态任务数据源类型列表
    ///
    /// 任务运维-查询生产态任务数据源类型列表
    @inlinable
    public func describeOperateOpsTaskDatasourceType(projectId: String, taskType: Int64, serviceKind: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOperateOpsTaskDatasourceTypeResponse {
        try await self.describeOperateOpsTaskDatasourceType(.init(projectId: projectId, taskType: taskType, serviceKind: serviceKind), region: region, logger: logger, on: eventLoop)
    }
}
