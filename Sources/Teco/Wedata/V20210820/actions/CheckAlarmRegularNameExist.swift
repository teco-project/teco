//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// CheckAlarmRegularNameExist请求参数结构体
    public struct CheckAlarmRegularNameExistRequest: TCRequestModel {
        /// 项目名称
        public let projectId: String

        /// 规则名称
        public let alarmRegularName: String

        /// 任务ID
        @available(*, deprecated)
        public let taskId: String? = nil

        /// 主键ID
        public let id: String?

        /// 任务类型:201.实时,202.离线
        public let taskType: Int64?

        public init(projectId: String, alarmRegularName: String, id: String? = nil, taskType: Int64? = nil) {
            self.projectId = projectId
            self.alarmRegularName = alarmRegularName
            self.id = id
            self.taskType = taskType
        }

        @available(*, deprecated, renamed: "init(projectId:alarmRegularName:id:taskType:)", message: "'taskId' is deprecated in 'CheckAlarmRegularNameExistRequest'. Setting this parameter has no effect.")
        public init(projectId: String, alarmRegularName: String, taskId: String? = nil, id: String? = nil, taskType: Int64? = nil) {
            self.projectId = projectId
            self.alarmRegularName = alarmRegularName
            self.id = id
            self.taskType = taskType
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case alarmRegularName = "AlarmRegularName"
            case taskId = "TaskId"
            case id = "Id"
            case taskType = "TaskType"
        }
    }

    /// CheckAlarmRegularNameExist返回参数结构体
    public struct CheckAlarmRegularNameExistResponse: TCResponseModel {
        /// 是否重名
        public let data: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 判断告警规则重名
    @inlinable
    public func checkAlarmRegularNameExist(_ input: CheckAlarmRegularNameExistRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckAlarmRegularNameExistResponse> {
        self.client.execute(action: "CheckAlarmRegularNameExist", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 判断告警规则重名
    @inlinable
    public func checkAlarmRegularNameExist(_ input: CheckAlarmRegularNameExistRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckAlarmRegularNameExistResponse {
        try await self.client.execute(action: "CheckAlarmRegularNameExist", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 判断告警规则重名
    @inlinable
    public func checkAlarmRegularNameExist(projectId: String, alarmRegularName: String, id: String? = nil, taskType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckAlarmRegularNameExistResponse> {
        self.checkAlarmRegularNameExist(.init(projectId: projectId, alarmRegularName: alarmRegularName, id: id, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }

    /// 判断告警规则重名
    @available(*, deprecated, renamed: "checkAlarmRegularNameExist(projectId:alarmRegularName:id:taskType:region:logger:on:)", message: "'taskId' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func checkAlarmRegularNameExist(projectId: String, alarmRegularName: String, taskId: String? = nil, id: String? = nil, taskType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckAlarmRegularNameExistResponse> {
        self.checkAlarmRegularNameExist(.init(projectId: projectId, alarmRegularName: alarmRegularName, taskId: taskId, id: id, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }

    /// 判断告警规则重名
    @inlinable
    public func checkAlarmRegularNameExist(projectId: String, alarmRegularName: String, id: String? = nil, taskType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckAlarmRegularNameExistResponse {
        try await self.checkAlarmRegularNameExist(.init(projectId: projectId, alarmRegularName: alarmRegularName, id: id, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }

    /// 判断告警规则重名
    @available(*, deprecated, renamed: "checkAlarmRegularNameExist(projectId:alarmRegularName:id:taskType:region:logger:on:)", message: "'taskId' is deprecated. Setting this parameter has no effect.")
    @inlinable
    public func checkAlarmRegularNameExist(projectId: String, alarmRegularName: String, taskId: String? = nil, id: String? = nil, taskType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckAlarmRegularNameExistResponse {
        try await self.checkAlarmRegularNameExist(.init(projectId: projectId, alarmRegularName: alarmRegularName, taskId: taskId, id: id, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }
}
