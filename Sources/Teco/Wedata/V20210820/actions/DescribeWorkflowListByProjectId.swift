//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeWorkflowListByProjectId请求参数结构体
    public struct DescribeWorkflowListByProjectIdRequest: TCRequest {
        /// 项目id
        public let projectId: String

        public init(projectId: String) {
            self.projectId = projectId
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
        }
    }

    /// DescribeWorkflowListByProjectId返回参数结构体
    public struct DescribeWorkflowListByProjectIdResponse: TCResponse {
        /// 根据项目id获取项目下所有工作流列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [WorkflowCanvasOpsDto]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 根据项目id 获取项目下所有工作流列表
    @inlinable
    public func describeWorkflowListByProjectId(_ input: DescribeWorkflowListByProjectIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkflowListByProjectIdResponse> {
        self.client.execute(action: "DescribeWorkflowListByProjectId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据项目id 获取项目下所有工作流列表
    @inlinable
    public func describeWorkflowListByProjectId(_ input: DescribeWorkflowListByProjectIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkflowListByProjectIdResponse {
        try await self.client.execute(action: "DescribeWorkflowListByProjectId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据项目id 获取项目下所有工作流列表
    @inlinable
    public func describeWorkflowListByProjectId(projectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWorkflowListByProjectIdResponse> {
        self.describeWorkflowListByProjectId(.init(projectId: projectId), region: region, logger: logger, on: eventLoop)
    }

    /// 根据项目id 获取项目下所有工作流列表
    @inlinable
    public func describeWorkflowListByProjectId(projectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWorkflowListByProjectIdResponse {
        try await self.describeWorkflowListByProjectId(.init(projectId: projectId), region: region, logger: logger, on: eventLoop)
    }
}
