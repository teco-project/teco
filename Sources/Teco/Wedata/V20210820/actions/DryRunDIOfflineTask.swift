//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DryRunDIOfflineTask请求参数结构体
    public struct DryRunDIOfflineTaskRequest: TCRequestModel {
        /// 任务Id
        public let taskId: String

        /// 项目Id
        public let projectId: String

        /// 资源组Id
        public let resourceGroup: String?

        /// 默认 27
        public let taskTypeId: UInt64?

        public init(taskId: String, projectId: String, resourceGroup: String? = nil, taskTypeId: UInt64? = nil) {
            self.taskId = taskId
            self.projectId = projectId
            self.resourceGroup = resourceGroup
            self.taskTypeId = taskTypeId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case projectId = "ProjectId"
            case resourceGroup = "ResourceGroup"
            case taskTypeId = "TaskTypeId"
        }
    }

    /// DryRunDIOfflineTask返回参数结构体
    public struct DryRunDIOfflineTaskResponse: TCResponseModel {
        /// 数据时间
        public let currentRunDate: String

        /// 项目Id
        public let projectId: String

        /// 任务状态
        public let status: String

        /// 任务Id
        public let taskId: String

        /// 任务实例唯一key
        public let taskInstanceKey: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case currentRunDate = "CurrentRunDate"
            case projectId = "ProjectId"
            case status = "Status"
            case taskId = "TaskId"
            case taskInstanceKey = "TaskInstanceKey"
            case requestId = "RequestId"
        }
    }

    /// 调试运行集成任务
    @inlinable
    public func dryRunDIOfflineTask(_ input: DryRunDIOfflineTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DryRunDIOfflineTaskResponse> {
        self.client.execute(action: "DryRunDIOfflineTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 调试运行集成任务
    @inlinable
    public func dryRunDIOfflineTask(_ input: DryRunDIOfflineTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DryRunDIOfflineTaskResponse {
        try await self.client.execute(action: "DryRunDIOfflineTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 调试运行集成任务
    @inlinable
    public func dryRunDIOfflineTask(taskId: String, projectId: String, resourceGroup: String? = nil, taskTypeId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DryRunDIOfflineTaskResponse> {
        self.dryRunDIOfflineTask(.init(taskId: taskId, projectId: projectId, resourceGroup: resourceGroup, taskTypeId: taskTypeId), region: region, logger: logger, on: eventLoop)
    }

    /// 调试运行集成任务
    @inlinable
    public func dryRunDIOfflineTask(taskId: String, projectId: String, resourceGroup: String? = nil, taskTypeId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DryRunDIOfflineTaskResponse {
        try await self.dryRunDIOfflineTask(.init(taskId: taskId, projectId: projectId, resourceGroup: resourceGroup, taskTypeId: taskTypeId), region: region, logger: logger, on: eventLoop)
    }
}
