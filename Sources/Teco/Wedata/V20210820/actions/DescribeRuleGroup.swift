//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// DescribeRuleGroup请求参数结构体
    public struct DescribeRuleGroupRequest: TCRequestModel {
        /// 规则组ID
        public let ruleGroupId: UInt64?
        
        /// 数据来源ID
        public let datasourceId: String?
        
        /// 数据表Id
        public let tableId: String?
        
        /// 项目ID
        public let projectId: String?
        
        /// 数据库ID
        public let databaseId: String?
        
        public init (ruleGroupId: UInt64? = nil, datasourceId: String? = nil, tableId: String? = nil, projectId: String? = nil, databaseId: String? = nil) {
            self.ruleGroupId = ruleGroupId
            self.datasourceId = datasourceId
            self.tableId = tableId
            self.projectId = projectId
            self.databaseId = databaseId
        }
        
        enum CodingKeys: String, CodingKey {
            case ruleGroupId = "RuleGroupId"
            case datasourceId = "DatasourceId"
            case tableId = "TableId"
            case projectId = "ProjectId"
            case databaseId = "DatabaseId"
        }
    }
    
    /// DescribeRuleGroup返回参数结构体
    public struct DescribeRuleGroupResponse: TCResponseModel {
        /// 数据质量规则组详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: RuleGroup?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }
    
    /// 查询规则组详情接口
    @inlinable
    public func describeRuleGroup(_ input: DescribeRuleGroupRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeRuleGroupResponse > {
        self.client.execute(action: "DescribeRuleGroup", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询规则组详情接口
    @inlinable
    public func describeRuleGroup(_ input: DescribeRuleGroupRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleGroupResponse {
        try await self.client.execute(action: "DescribeRuleGroup", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询规则组详情接口
    @inlinable
    public func describeRuleGroup(ruleGroupId: UInt64? = nil, datasourceId: String? = nil, tableId: String? = nil, projectId: String? = nil, databaseId: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeRuleGroupResponse > {
        self.describeRuleGroup(DescribeRuleGroupRequest(ruleGroupId: ruleGroupId, datasourceId: datasourceId, tableId: tableId, projectId: projectId, databaseId: databaseId), logger: logger, on: eventLoop)
    }
    
    /// 查询规则组详情接口
    @inlinable
    public func describeRuleGroup(ruleGroupId: UInt64? = nil, datasourceId: String? = nil, tableId: String? = nil, projectId: String? = nil, databaseId: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleGroupResponse {
        try await self.describeRuleGroup(DescribeRuleGroupRequest(ruleGroupId: ruleGroupId, datasourceId: datasourceId, tableId: tableId, projectId: projectId, databaseId: databaseId), logger: logger, on: eventLoop)
    }
}
