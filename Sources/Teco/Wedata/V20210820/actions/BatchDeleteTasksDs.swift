//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// BatchDeleteTasksDs请求参数结构体
    public struct BatchDeleteTasksDsRequest: TCRequest {
        /// 批量删除的任务TaskId
        public let taskIdList: [String]

        /// true : 删除后下游任务可正常运行
        /// false：删除后下游任务不可运行
        public let deleteMode: Bool?

        /// true：通知下游任务责任人
        /// false:  不通知下游任务责任人
        public let operateInform: Bool?

        /// 项目Id
        public let projectId: String?

        /// true: 删除任务引用的脚本
        /// false: 不删除任务引用的脚本
        public let deleteScript: Bool?

        public init(taskIdList: [String], deleteMode: Bool? = nil, operateInform: Bool? = nil, projectId: String? = nil, deleteScript: Bool? = nil) {
            self.taskIdList = taskIdList
            self.deleteMode = deleteMode
            self.operateInform = operateInform
            self.projectId = projectId
            self.deleteScript = deleteScript
        }

        enum CodingKeys: String, CodingKey {
            case taskIdList = "TaskIdList"
            case deleteMode = "DeleteMode"
            case operateInform = "OperateInform"
            case projectId = "ProjectId"
            case deleteScript = "DeleteScript"
        }
    }

    /// BatchDeleteTasksDs返回参数结构体
    public struct BatchDeleteTasksDsResponse: TCResponse {
        /// 返回批量操作成功个数、失败个数、操作总数
        public let data: BatchOperateResult

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 批量删除任务Ds
    ///
    /// Ds批量删除任务，仅对任务状态为”已停止“有效；
    @inlinable
    public func batchDeleteTasksDs(_ input: BatchDeleteTasksDsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeleteTasksDsResponse> {
        self.client.execute(action: "BatchDeleteTasksDs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量删除任务Ds
    ///
    /// Ds批量删除任务，仅对任务状态为”已停止“有效；
    @inlinable
    public func batchDeleteTasksDs(_ input: BatchDeleteTasksDsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeleteTasksDsResponse {
        try await self.client.execute(action: "BatchDeleteTasksDs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量删除任务Ds
    ///
    /// Ds批量删除任务，仅对任务状态为”已停止“有效；
    @inlinable
    public func batchDeleteTasksDs(taskIdList: [String], deleteMode: Bool? = nil, operateInform: Bool? = nil, projectId: String? = nil, deleteScript: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeleteTasksDsResponse> {
        self.batchDeleteTasksDs(.init(taskIdList: taskIdList, deleteMode: deleteMode, operateInform: operateInform, projectId: projectId, deleteScript: deleteScript), region: region, logger: logger, on: eventLoop)
    }

    /// 批量删除任务Ds
    ///
    /// Ds批量删除任务，仅对任务状态为”已停止“有效；
    @inlinable
    public func batchDeleteTasksDs(taskIdList: [String], deleteMode: Bool? = nil, operateInform: Bool? = nil, projectId: String? = nil, deleteScript: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeleteTasksDsResponse {
        try await self.batchDeleteTasksDs(.init(taskIdList: taskIdList, deleteMode: deleteMode, operateInform: operateInform, projectId: projectId, deleteScript: deleteScript), region: region, logger: logger, on: eventLoop)
    }
}
