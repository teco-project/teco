//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DeleteTaskDs请求参数结构体
    public struct DeleteTaskDsRequest: TCRequest {
        /// 项目Id
        public let projectId: String?

        /// 是否删除脚本
        public let deleteScript: Bool?

        /// 任务操作是否消息通知下游任务责任人
        public let operateInform: Bool?

        /// 任务ID
        public let taskId: String?

        /// 虚拟任务id
        public let virtualTaskId: String?

        /// 虚拟任务标记
        public let virtualFlag: Bool?

        /// 任务删除方式
        public let deleteMode: Bool?

        public init(projectId: String? = nil, deleteScript: Bool? = nil, operateInform: Bool? = nil, taskId: String? = nil, virtualTaskId: String? = nil, virtualFlag: Bool? = nil, deleteMode: Bool? = nil) {
            self.projectId = projectId
            self.deleteScript = deleteScript
            self.operateInform = operateInform
            self.taskId = taskId
            self.virtualTaskId = virtualTaskId
            self.virtualFlag = virtualFlag
            self.deleteMode = deleteMode
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case deleteScript = "DeleteScript"
            case operateInform = "OperateInform"
            case taskId = "TaskId"
            case virtualTaskId = "VirtualTaskId"
            case virtualFlag = "VirtualFlag"
            case deleteMode = "DeleteMode"
        }
    }

    /// DeleteTaskDs返回参数结构体
    public struct DeleteTaskDsResponse: TCResponse {
        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 删除任务Ds
    @inlinable
    public func deleteTaskDs(_ input: DeleteTaskDsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTaskDsResponse> {
        self.client.execute(action: "DeleteTaskDs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除任务Ds
    @inlinable
    public func deleteTaskDs(_ input: DeleteTaskDsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteTaskDsResponse {
        try await self.client.execute(action: "DeleteTaskDs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除任务Ds
    @inlinable
    public func deleteTaskDs(projectId: String? = nil, deleteScript: Bool? = nil, operateInform: Bool? = nil, taskId: String? = nil, virtualTaskId: String? = nil, virtualFlag: Bool? = nil, deleteMode: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTaskDsResponse> {
        self.deleteTaskDs(.init(projectId: projectId, deleteScript: deleteScript, operateInform: operateInform, taskId: taskId, virtualTaskId: virtualTaskId, virtualFlag: virtualFlag, deleteMode: deleteMode), region: region, logger: logger, on: eventLoop)
    }

    /// 删除任务Ds
    @inlinable
    public func deleteTaskDs(projectId: String? = nil, deleteScript: Bool? = nil, operateInform: Bool? = nil, taskId: String? = nil, virtualTaskId: String? = nil, virtualFlag: Bool? = nil, deleteMode: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteTaskDsResponse {
        try await self.deleteTaskDs(.init(projectId: projectId, deleteScript: deleteScript, operateInform: operateInform, taskId: taskId, virtualTaskId: virtualTaskId, virtualFlag: virtualFlag, deleteMode: deleteMode), region: region, logger: logger, on: eventLoop)
    }
}
