//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// DescribeRuleTablesByPage请求参数结构体
    public struct DescribeRuleTablesByPageRequest: TCRequestModel {
        /// 项目Id
        public let projectId: String?

        /// 分页序号
        public let pageSize: UInt64?

        /// 分页大小
        public let pageNumber: UInt64?

        /// 过滤条件
        public let filters: [Filter]?

        /// 排序条件
        public let orderFields: [OrderField]?

        public init(projectId: String? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, filters: [Filter]? = nil, orderFields: [OrderField]? = nil) {
            self.projectId = projectId
            self.pageSize = pageSize
            self.pageNumber = pageNumber
            self.filters = filters
            self.orderFields = orderFields
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
            case filters = "Filters"
            case orderFields = "OrderFields"
        }
    }

    /// DescribeRuleTablesByPage返回参数结构体
    public struct DescribeRuleTablesByPageResponse: TCResponseModel {
        /// 表列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: RuleGroupPage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取表列表
    @inlinable
    public func describeRuleTablesByPage(_ input: DescribeRuleTablesByPageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleTablesByPageResponse> {
        self.client.execute(action: "DescribeRuleTablesByPage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取表列表
    @inlinable
    public func describeRuleTablesByPage(_ input: DescribeRuleTablesByPageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleTablesByPageResponse {
        try await self.client.execute(action: "DescribeRuleTablesByPage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取表列表
    @inlinable
    public func describeRuleTablesByPage(projectId: String? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, filters: [Filter]? = nil, orderFields: [OrderField]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleTablesByPageResponse> {
        self.describeRuleTablesByPage(DescribeRuleTablesByPageRequest(projectId: projectId, pageSize: pageSize, pageNumber: pageNumber, filters: filters, orderFields: orderFields), region: region, logger: logger, on: eventLoop)
    }

    /// 获取表列表
    @inlinable
    public func describeRuleTablesByPage(projectId: String? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, filters: [Filter]? = nil, orderFields: [OrderField]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleTablesByPageResponse {
        try await self.describeRuleTablesByPage(DescribeRuleTablesByPageRequest(projectId: projectId, pageSize: pageSize, pageNumber: pageNumber, filters: filters, orderFields: orderFields), region: region, logger: logger, on: eventLoop)
    }
}
