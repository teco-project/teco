//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// CreateBaseline请求参数结构体
    public struct CreateBaselineRequest: TCRequest {
        /// 项目id
        public let projectId: String

        /// 基线名称
        public let baselineName: String

        /// D或者H；分别表示天基线和小时基线
        public let baselineType: String

        /// 创建人id
        public let createUin: String

        /// 创建人名称
        public let createName: String

        /// 基线负责人id
        public let inChargeUin: String

        /// 基线负责人名称
        public let inChargeName: String

        /// 保障任务
        public let promiseTasks: [BaselineTaskInfo]

        /// 保障时间
        public let promiseTime: String

        /// 告警余量/分钟
        public let warningMargin: UInt64

        /// 1
        public let isNewAlarm: Bool

        /// 现有告警规则信息
        public let alarmRuleDto: AlarmRuleDto?

        /// 新增告警规则描述
        public let baselineCreateAlarmRuleRequest: CreateAlarmRuleRequest?

        public init(projectId: String, baselineName: String, baselineType: String, createUin: String, createName: String, inChargeUin: String, inChargeName: String, promiseTasks: [BaselineTaskInfo], promiseTime: String, warningMargin: UInt64, isNewAlarm: Bool, alarmRuleDto: AlarmRuleDto? = nil, baselineCreateAlarmRuleRequest: CreateAlarmRuleRequest? = nil) {
            self.projectId = projectId
            self.baselineName = baselineName
            self.baselineType = baselineType
            self.createUin = createUin
            self.createName = createName
            self.inChargeUin = inChargeUin
            self.inChargeName = inChargeName
            self.promiseTasks = promiseTasks
            self.promiseTime = promiseTime
            self.warningMargin = warningMargin
            self.isNewAlarm = isNewAlarm
            self.alarmRuleDto = alarmRuleDto
            self.baselineCreateAlarmRuleRequest = baselineCreateAlarmRuleRequest
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case baselineName = "BaselineName"
            case baselineType = "BaselineType"
            case createUin = "CreateUin"
            case createName = "CreateName"
            case inChargeUin = "InChargeUin"
            case inChargeName = "InChargeName"
            case promiseTasks = "PromiseTasks"
            case promiseTime = "PromiseTime"
            case warningMargin = "WarningMargin"
            case isNewAlarm = "IsNewAlarm"
            case alarmRuleDto = "AlarmRuleDto"
            case baselineCreateAlarmRuleRequest = "BaselineCreateAlarmRuleRequest"
        }
    }

    /// CreateBaseline返回参数结构体
    public struct CreateBaselineResponse: TCResponse {
        /// 是否成功
        public let data: BooleanResponse

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 创建基线
    @inlinable
    public func createBaseline(_ input: CreateBaselineRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBaselineResponse> {
        self.client.execute(action: "CreateBaseline", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建基线
    @inlinable
    public func createBaseline(_ input: CreateBaselineRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBaselineResponse {
        try await self.client.execute(action: "CreateBaseline", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建基线
    @inlinable
    public func createBaseline(projectId: String, baselineName: String, baselineType: String, createUin: String, createName: String, inChargeUin: String, inChargeName: String, promiseTasks: [BaselineTaskInfo], promiseTime: String, warningMargin: UInt64, isNewAlarm: Bool, alarmRuleDto: AlarmRuleDto? = nil, baselineCreateAlarmRuleRequest: CreateAlarmRuleRequest? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBaselineResponse> {
        self.createBaseline(.init(projectId: projectId, baselineName: baselineName, baselineType: baselineType, createUin: createUin, createName: createName, inChargeUin: inChargeUin, inChargeName: inChargeName, promiseTasks: promiseTasks, promiseTime: promiseTime, warningMargin: warningMargin, isNewAlarm: isNewAlarm, alarmRuleDto: alarmRuleDto, baselineCreateAlarmRuleRequest: baselineCreateAlarmRuleRequest), region: region, logger: logger, on: eventLoop)
    }

    /// 创建基线
    @inlinable
    public func createBaseline(projectId: String, baselineName: String, baselineType: String, createUin: String, createName: String, inChargeUin: String, inChargeName: String, promiseTasks: [BaselineTaskInfo], promiseTime: String, warningMargin: UInt64, isNewAlarm: Bool, alarmRuleDto: AlarmRuleDto? = nil, baselineCreateAlarmRuleRequest: CreateAlarmRuleRequest? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBaselineResponse {
        try await self.createBaseline(.init(projectId: projectId, baselineName: baselineName, baselineType: baselineType, createUin: createUin, createName: createName, inChargeUin: inChargeUin, inChargeName: inChargeName, promiseTasks: promiseTasks, promiseTime: promiseTime, warningMargin: warningMargin, isNewAlarm: isNewAlarm, alarmRuleDto: alarmRuleDto, baselineCreateAlarmRuleRequest: baselineCreateAlarmRuleRequest), region: region, logger: logger, on: eventLoop)
    }
}
