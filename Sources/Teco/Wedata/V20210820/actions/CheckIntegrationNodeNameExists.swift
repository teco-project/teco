//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Wedata {
    /// CheckIntegrationNodeNameExists请求参数结构体
    public struct CheckIntegrationNodeNameExistsRequest: TCRequestModel {
        /// 任务ID
        public let taskId: String

        /// 节点名称
        public let name: String

        /// 项目ID
        public let projectId: String

        /// 节点ID
        public let id: Int64?

        public init(taskId: String, name: String, projectId: String, id: Int64? = nil) {
            self.taskId = taskId
            self.name = name
            self.projectId = projectId
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case name = "Name"
            case projectId = "ProjectId"
            case id = "Id"
        }
    }

    /// CheckIntegrationNodeNameExists返回参数结构体
    public struct CheckIntegrationNodeNameExistsResponse: TCResponseModel {
        /// 返回true代表存在，返回false代表不存在
        public let data: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 判断集成节点名称是否存在
    @inlinable
    public func checkIntegrationNodeNameExists(_ input: CheckIntegrationNodeNameExistsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckIntegrationNodeNameExistsResponse> {
        self.client.execute(action: "CheckIntegrationNodeNameExists", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 判断集成节点名称是否存在
    @inlinable
    public func checkIntegrationNodeNameExists(_ input: CheckIntegrationNodeNameExistsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckIntegrationNodeNameExistsResponse {
        try await self.client.execute(action: "CheckIntegrationNodeNameExists", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 判断集成节点名称是否存在
    @inlinable
    public func checkIntegrationNodeNameExists(taskId: String, name: String, projectId: String, id: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckIntegrationNodeNameExistsResponse> {
        self.checkIntegrationNodeNameExists(.init(taskId: taskId, name: name, projectId: projectId, id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 判断集成节点名称是否存在
    @inlinable
    public func checkIntegrationNodeNameExists(taskId: String, name: String, projectId: String, id: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckIntegrationNodeNameExistsResponse {
        try await self.checkIntegrationNodeNameExists(.init(taskId: taskId, name: name, projectId: projectId, id: id), region: region, logger: logger, on: eventLoop)
    }
}
