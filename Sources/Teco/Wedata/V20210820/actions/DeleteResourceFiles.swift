//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DeleteResourceFiles请求参数结构体
    public struct DeleteResourceFilesRequest: TCRequestModel {
        /// 项目id
        public let projectId: String

        /// 使用状态
        public let useStatus: Bool

        /// 资源id列表
        public let resourceIds: [String]?

        /// 资源路径列表
        public let filePaths: [String]?

        public init(projectId: String, useStatus: Bool, resourceIds: [String]? = nil, filePaths: [String]? = nil) {
            self.projectId = projectId
            self.useStatus = useStatus
            self.resourceIds = resourceIds
            self.filePaths = filePaths
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case useStatus = "UseStatus"
            case resourceIds = "ResourceIds"
            case filePaths = "FilePaths"
        }
    }

    /// DeleteResourceFiles返回参数结构体
    public struct DeleteResourceFilesResponse: TCResponseModel {
        /// 资源批量删除结果
        public let data: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 【资源管理】批量删除资源
    ///
    /// 资源管理-批量删除资源文件
    @inlinable
    public func deleteResourceFiles(_ input: DeleteResourceFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteResourceFilesResponse> {
        self.client.execute(action: "DeleteResourceFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 【资源管理】批量删除资源
    ///
    /// 资源管理-批量删除资源文件
    @inlinable
    public func deleteResourceFiles(_ input: DeleteResourceFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteResourceFilesResponse {
        try await self.client.execute(action: "DeleteResourceFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 【资源管理】批量删除资源
    ///
    /// 资源管理-批量删除资源文件
    @inlinable
    public func deleteResourceFiles(projectId: String, useStatus: Bool, resourceIds: [String]? = nil, filePaths: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteResourceFilesResponse> {
        self.deleteResourceFiles(.init(projectId: projectId, useStatus: useStatus, resourceIds: resourceIds, filePaths: filePaths), region: region, logger: logger, on: eventLoop)
    }

    /// 【资源管理】批量删除资源
    ///
    /// 资源管理-批量删除资源文件
    @inlinable
    public func deleteResourceFiles(projectId: String, useStatus: Bool, resourceIds: [String]? = nil, filePaths: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteResourceFilesResponse {
        try await self.deleteResourceFiles(.init(projectId: projectId, useStatus: useStatus, resourceIds: resourceIds, filePaths: filePaths), region: region, logger: logger, on: eventLoop)
    }
}
