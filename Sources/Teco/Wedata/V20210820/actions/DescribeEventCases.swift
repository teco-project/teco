//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeEventCases请求参数结构体
    public struct DescribeEventCasesRequest: TCPaginatedRequest {
        /// 项目ID
        public let projectId: String

        /// 事件实例目录
        public let category: String

        /// 页码
        public let pageNumber: UInt64

        /// 每页数目
        public let pageSize: UInt64

        /// 事件名称
        public let eventName: String?

        /// 事件类型
        public let eventType: String?

        /// 事件分割类型
        public let eventSubType: String?

        /// 事件广播类型
        public let eventBroadcastType: String?

        /// 事件实例状态
        public let status: String?

        /// 事件实例最小创建时间
        public let creationTimeStart: String?

        /// 事件实例最大创建时间
        public let creationTimeEnd: String?

        /// 事件实例最小触发时间
        public let eventTriggeredTimeStart: String?

        /// 事件实例最大触发时间
        public let eventTriggeredTimeEnd: String?

        /// 事件实例最小消费时间
        public let logTimeStart: String?

        /// 事件实例最大消费时间
        public let logTimeEnd: String?

        /// 事件实例数据时间
        public let dimension: String?

        public init(projectId: String, category: String, pageNumber: UInt64, pageSize: UInt64, eventName: String? = nil, eventType: String? = nil, eventSubType: String? = nil, eventBroadcastType: String? = nil, status: String? = nil, creationTimeStart: String? = nil, creationTimeEnd: String? = nil, eventTriggeredTimeStart: String? = nil, eventTriggeredTimeEnd: String? = nil, logTimeStart: String? = nil, logTimeEnd: String? = nil, dimension: String? = nil) {
            self.projectId = projectId
            self.category = category
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.eventName = eventName
            self.eventType = eventType
            self.eventSubType = eventSubType
            self.eventBroadcastType = eventBroadcastType
            self.status = status
            self.creationTimeStart = creationTimeStart
            self.creationTimeEnd = creationTimeEnd
            self.eventTriggeredTimeStart = eventTriggeredTimeStart
            self.eventTriggeredTimeEnd = eventTriggeredTimeEnd
            self.logTimeStart = logTimeStart
            self.logTimeEnd = logTimeEnd
            self.dimension = dimension
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case category = "Category"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case eventName = "EventName"
            case eventType = "EventType"
            case eventSubType = "EventSubType"
            case eventBroadcastType = "EventBroadcastType"
            case status = "Status"
            case creationTimeStart = "CreationTimeStart"
            case creationTimeEnd = "CreationTimeEnd"
            case eventTriggeredTimeStart = "EventTriggeredTimeStart"
            case eventTriggeredTimeEnd = "EventTriggeredTimeEnd"
            case logTimeStart = "LogTimeStart"
            case logTimeEnd = "LogTimeEnd"
            case dimension = "Dimension"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeEventCasesResponse) -> DescribeEventCasesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(projectId: self.projectId, category: self.category, pageNumber: self.pageNumber + 1, pageSize: self.pageSize, eventName: self.eventName, eventType: self.eventType, eventSubType: self.eventSubType, eventBroadcastType: self.eventBroadcastType, status: self.status, creationTimeStart: self.creationTimeStart, creationTimeEnd: self.creationTimeEnd, eventTriggeredTimeStart: self.eventTriggeredTimeStart, eventTriggeredTimeEnd: self.eventTriggeredTimeEnd, logTimeStart: self.logTimeStart, logTimeEnd: self.logTimeEnd, dimension: self.dimension)
        }
    }

    /// DescribeEventCases返回参数结构体
    public struct DescribeEventCasesResponse: TCPaginatedResponse {
        /// 事件实例分页查询结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: EventCaseAuditLogVOCollection?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``EventCaseAuditLogOptDto`` list from the paginated response.
        public func getItems() -> [EventCaseAuditLogOptDto] {
            self.data?.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.data?.totalCount
        }
    }

    /// 查找事件实例
    ///
    /// 根据条件查找事件实例
    @inlinable
    public func describeEventCases(_ input: DescribeEventCasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEventCasesResponse> {
        self.client.execute(action: "DescribeEventCases", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查找事件实例
    ///
    /// 根据条件查找事件实例
    @inlinable
    public func describeEventCases(_ input: DescribeEventCasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEventCasesResponse {
        try await self.client.execute(action: "DescribeEventCases", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查找事件实例
    ///
    /// 根据条件查找事件实例
    @inlinable
    public func describeEventCases(projectId: String, category: String, pageNumber: UInt64, pageSize: UInt64, eventName: String? = nil, eventType: String? = nil, eventSubType: String? = nil, eventBroadcastType: String? = nil, status: String? = nil, creationTimeStart: String? = nil, creationTimeEnd: String? = nil, eventTriggeredTimeStart: String? = nil, eventTriggeredTimeEnd: String? = nil, logTimeStart: String? = nil, logTimeEnd: String? = nil, dimension: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEventCasesResponse> {
        self.describeEventCases(.init(projectId: projectId, category: category, pageNumber: pageNumber, pageSize: pageSize, eventName: eventName, eventType: eventType, eventSubType: eventSubType, eventBroadcastType: eventBroadcastType, status: status, creationTimeStart: creationTimeStart, creationTimeEnd: creationTimeEnd, eventTriggeredTimeStart: eventTriggeredTimeStart, eventTriggeredTimeEnd: eventTriggeredTimeEnd, logTimeStart: logTimeStart, logTimeEnd: logTimeEnd, dimension: dimension), region: region, logger: logger, on: eventLoop)
    }

    /// 查找事件实例
    ///
    /// 根据条件查找事件实例
    @inlinable
    public func describeEventCases(projectId: String, category: String, pageNumber: UInt64, pageSize: UInt64, eventName: String? = nil, eventType: String? = nil, eventSubType: String? = nil, eventBroadcastType: String? = nil, status: String? = nil, creationTimeStart: String? = nil, creationTimeEnd: String? = nil, eventTriggeredTimeStart: String? = nil, eventTriggeredTimeEnd: String? = nil, logTimeStart: String? = nil, logTimeEnd: String? = nil, dimension: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEventCasesResponse {
        try await self.describeEventCases(.init(projectId: projectId, category: category, pageNumber: pageNumber, pageSize: pageSize, eventName: eventName, eventType: eventType, eventSubType: eventSubType, eventBroadcastType: eventBroadcastType, status: status, creationTimeStart: creationTimeStart, creationTimeEnd: creationTimeEnd, eventTriggeredTimeStart: eventTriggeredTimeStart, eventTriggeredTimeEnd: eventTriggeredTimeEnd, logTimeStart: logTimeStart, logTimeEnd: logTimeEnd, dimension: dimension), region: region, logger: logger, on: eventLoop)
    }

    /// 查找事件实例
    ///
    /// 根据条件查找事件实例
    @inlinable
    public func describeEventCasesPaginated(_ input: DescribeEventCasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [EventCaseAuditLogOptDto])> {
        self.client.paginate(input: input, region: region, command: self.describeEventCases, logger: logger, on: eventLoop)
    }

    /// 查找事件实例
    ///
    /// 根据条件查找事件实例
    @inlinable @discardableResult
    public func describeEventCasesPaginated(_ input: DescribeEventCasesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeEventCasesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeEventCases, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查找事件实例
    ///
    /// 根据条件查找事件实例
    ///
    /// - Returns: `AsyncSequence`s of ``EventCaseAuditLogOptDto`` and ``DescribeEventCasesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeEventCasesPaginator(_ input: DescribeEventCasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeEventCasesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeEventCases, logger: logger, on: eventLoop)
    }
}
