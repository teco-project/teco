//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// SubmitTaskTestRun请求参数结构体
    public struct SubmitTaskTestRunRequest: TCRequestModel {
        /// 无
        public let taskIds: String

        /// 无
        public let projectId: String

        /// 无
        public let workFlowId: String?

        /// 无
        public let name: String?

        /// 无
        public let tasks: [StageCloudApiRequest]?

        /// 无
        public let description: String?

        /// 无
        public let runParams: String?

        /// 无
        public let scriptContent: String?

        /// 无
        public let versionId: String?

        public init(taskIds: String, projectId: String, workFlowId: String? = nil, name: String? = nil, tasks: [StageCloudApiRequest]? = nil, description: String? = nil, runParams: String? = nil, scriptContent: String? = nil, versionId: String? = nil) {
            self.taskIds = taskIds
            self.projectId = projectId
            self.workFlowId = workFlowId
            self.name = name
            self.tasks = tasks
            self.description = description
            self.runParams = runParams
            self.scriptContent = scriptContent
            self.versionId = versionId
        }

        enum CodingKeys: String, CodingKey {
            case taskIds = "TaskIds"
            case projectId = "ProjectId"
            case workFlowId = "WorkFlowId"
            case name = "Name"
            case tasks = "Tasks"
            case description = "Description"
            case runParams = "RunParams"
            case scriptContent = "ScriptContent"
            case versionId = "VersionId"
        }
    }

    /// SubmitTaskTestRun返回参数结构体
    public struct SubmitTaskTestRunResponse: TCResponseModel {
        /// 无
        public let jobId: Int64

        /// 无
        public let recordId: [Int64]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case recordId = "RecordId"
            case requestId = "RequestId"
        }
    }

    /// 提交工作流测试运行任务
    ///
    /// 无
    @inlinable
    public func submitTaskTestRun(_ input: SubmitTaskTestRunRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SubmitTaskTestRunResponse> {
        self.client.execute(action: "SubmitTaskTestRun", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 提交工作流测试运行任务
    ///
    /// 无
    @inlinable
    public func submitTaskTestRun(_ input: SubmitTaskTestRunRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SubmitTaskTestRunResponse {
        try await self.client.execute(action: "SubmitTaskTestRun", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 提交工作流测试运行任务
    ///
    /// 无
    @inlinable
    public func submitTaskTestRun(taskIds: String, projectId: String, workFlowId: String? = nil, name: String? = nil, tasks: [StageCloudApiRequest]? = nil, description: String? = nil, runParams: String? = nil, scriptContent: String? = nil, versionId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SubmitTaskTestRunResponse> {
        self.submitTaskTestRun(.init(taskIds: taskIds, projectId: projectId, workFlowId: workFlowId, name: name, tasks: tasks, description: description, runParams: runParams, scriptContent: scriptContent, versionId: versionId), region: region, logger: logger, on: eventLoop)
    }

    /// 提交工作流测试运行任务
    ///
    /// 无
    @inlinable
    public func submitTaskTestRun(taskIds: String, projectId: String, workFlowId: String? = nil, name: String? = nil, tasks: [StageCloudApiRequest]? = nil, description: String? = nil, runParams: String? = nil, scriptContent: String? = nil, versionId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SubmitTaskTestRunResponse {
        try await self.submitTaskTestRun(.init(taskIds: taskIds, projectId: projectId, workFlowId: workFlowId, name: name, tasks: tasks, description: description, runParams: runParams, scriptContent: scriptContent, versionId: versionId), region: region, logger: logger, on: eventLoop)
    }
}
