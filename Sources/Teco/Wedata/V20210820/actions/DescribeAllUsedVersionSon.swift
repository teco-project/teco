//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Wedata {
    /// DescribeAllUsedVersionSon请求参数结构体
    public struct DescribeAllUsedVersionSonRequest: TCPaginatedRequest {
        /// 搜索条件
        public let searchCondition: InstanceSearchCondition

        /// 页码
        public let pageNumber: Int64

        /// 分页大小
        public let pageSize: Int64

        public init(searchCondition: InstanceSearchCondition, pageNumber: Int64, pageSize: Int64) {
            self.searchCondition = searchCondition
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case searchCondition = "SearchCondition"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAllUsedVersionSonResponse) -> DescribeAllUsedVersionSonRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeAllUsedVersionSonRequest(searchCondition: self.searchCondition, pageNumber: self.pageNumber + 1, pageSize: self.pageSize)
        }
    }

    /// DescribeAllUsedVersionSon返回参数结构体
    public struct DescribeAllUsedVersionSonResponse: TCPaginatedResponse {
        /// 结果
        public let data: CollectionTaskOpsDto

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TaskOpsDto`` list from the paginated response.
        public func getItems() -> [TaskOpsDto] {
            self.data.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data.totalCount
        }
    }

    /// 根据任务Id查找生产态子任务
    @inlinable
    public func describeAllUsedVersionSon(_ input: DescribeAllUsedVersionSonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAllUsedVersionSonResponse> {
        self.client.execute(action: "DescribeAllUsedVersionSon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据任务Id查找生产态子任务
    @inlinable
    public func describeAllUsedVersionSon(_ input: DescribeAllUsedVersionSonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAllUsedVersionSonResponse {
        try await self.client.execute(action: "DescribeAllUsedVersionSon", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据任务Id查找生产态子任务
    @inlinable
    public func describeAllUsedVersionSon(searchCondition: InstanceSearchCondition, pageNumber: Int64, pageSize: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAllUsedVersionSonResponse> {
        self.describeAllUsedVersionSon(.init(searchCondition: searchCondition, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 根据任务Id查找生产态子任务
    @inlinable
    public func describeAllUsedVersionSon(searchCondition: InstanceSearchCondition, pageNumber: Int64, pageSize: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAllUsedVersionSonResponse {
        try await self.describeAllUsedVersionSon(.init(searchCondition: searchCondition, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 根据任务Id查找生产态子任务
    @inlinable
    public func describeAllUsedVersionSonPaginated(_ input: DescribeAllUsedVersionSonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [TaskOpsDto])> {
        self.client.paginate(input: input, region: region, command: self.describeAllUsedVersionSon, logger: logger, on: eventLoop)
    }

    /// 根据任务Id查找生产态子任务
    @inlinable @discardableResult
    public func describeAllUsedVersionSonPaginated(_ input: DescribeAllUsedVersionSonRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAllUsedVersionSonResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAllUsedVersionSon, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 根据任务Id查找生产态子任务
    ///
    /// - Returns: `AsyncSequence`s of ``TaskOpsDto`` and ``DescribeAllUsedVersionSonResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAllUsedVersionSonPaginator(_ input: DescribeAllUsedVersionSonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAllUsedVersionSonRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAllUsedVersionSon, logger: logger, on: eventLoop)
    }
}
