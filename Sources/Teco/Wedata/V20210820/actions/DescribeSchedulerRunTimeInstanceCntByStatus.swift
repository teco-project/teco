//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeSchedulerRunTimeInstanceCntByStatus请求参数结构体
    public struct DescribeSchedulerRunTimeInstanceCntByStatusRequest: TCRequestModel {
        /// 项目ID
        public let projectId: String

        /// 周期类型
        public let cycleUnit: String?

        /// 时间单元 eg: 12h
        public let timeUnit: String?

        /// 开始日期：2023-03-02
        public let startTime: String?

        /// 结束日前：2023-03-20
        public let endTime: String?

        public init(projectId: String, cycleUnit: String? = nil, timeUnit: String? = nil, startTime: String? = nil, endTime: String? = nil) {
            self.projectId = projectId
            self.cycleUnit = cycleUnit
            self.timeUnit = timeUnit
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case cycleUnit = "CycleUnit"
            case timeUnit = "TimeUnit"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeSchedulerRunTimeInstanceCntByStatus返回参数结构体
    public struct DescribeSchedulerRunTimeInstanceCntByStatusResponse: TCResponseModel {
        /// 响应数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [RuntimeInstanceCntTop]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 运维大屏-实例运行时长排行
    @inlinable
    public func describeSchedulerRunTimeInstanceCntByStatus(_ input: DescribeSchedulerRunTimeInstanceCntByStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSchedulerRunTimeInstanceCntByStatusResponse> {
        self.client.execute(action: "DescribeSchedulerRunTimeInstanceCntByStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 运维大屏-实例运行时长排行
    @inlinable
    public func describeSchedulerRunTimeInstanceCntByStatus(_ input: DescribeSchedulerRunTimeInstanceCntByStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSchedulerRunTimeInstanceCntByStatusResponse {
        try await self.client.execute(action: "DescribeSchedulerRunTimeInstanceCntByStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 运维大屏-实例运行时长排行
    @inlinable
    public func describeSchedulerRunTimeInstanceCntByStatus(projectId: String, cycleUnit: String? = nil, timeUnit: String? = nil, startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSchedulerRunTimeInstanceCntByStatusResponse> {
        self.describeSchedulerRunTimeInstanceCntByStatus(.init(projectId: projectId, cycleUnit: cycleUnit, timeUnit: timeUnit, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 运维大屏-实例运行时长排行
    @inlinable
    public func describeSchedulerRunTimeInstanceCntByStatus(projectId: String, cycleUnit: String? = nil, timeUnit: String? = nil, startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSchedulerRunTimeInstanceCntByStatusResponse {
        try await self.describeSchedulerRunTimeInstanceCntByStatus(.init(projectId: projectId, cycleUnit: cycleUnit, timeUnit: timeUnit, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
