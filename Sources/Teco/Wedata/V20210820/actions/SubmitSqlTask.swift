//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// SubmitSqlTask请求参数结构体
    public struct SubmitSqlTaskRequest: TCRequest {
        /// 数据库类型
        public let databaseType: String

        /// 数据源Id
        public let datasourceId: Int64

        /// 资源组Id
        public let groupId: String

        /// 脚本文件id
        public let scriptId: String

        /// 项目id
        public let projectId: String

        /// 数据库名称
        public let databaseName: String?

        /// 执行引擎实例ID
        public let engineId: String?

        /// 脚本内容
        public let scriptContent: String?

        /// 资源队列
        public let resourceQueue: String?

        /// 数据库类型
        public let datasourceType: String?

        /// 计算资源名称
        public let computeResource: String?

        /// 高级运行参数
        public let runParams: String?

        /// 高级设置
        public let confParams: String?

        public init(databaseType: String, datasourceId: Int64, groupId: String, scriptId: String, projectId: String, databaseName: String? = nil, engineId: String? = nil, scriptContent: String? = nil, resourceQueue: String? = nil, datasourceType: String? = nil, computeResource: String? = nil, runParams: String? = nil, confParams: String? = nil) {
            self.databaseType = databaseType
            self.datasourceId = datasourceId
            self.groupId = groupId
            self.scriptId = scriptId
            self.projectId = projectId
            self.databaseName = databaseName
            self.engineId = engineId
            self.scriptContent = scriptContent
            self.resourceQueue = resourceQueue
            self.datasourceType = datasourceType
            self.computeResource = computeResource
            self.runParams = runParams
            self.confParams = confParams
        }

        enum CodingKeys: String, CodingKey {
            case databaseType = "DatabaseType"
            case datasourceId = "DatasourceId"
            case groupId = "GroupId"
            case scriptId = "ScriptId"
            case projectId = "ProjectId"
            case databaseName = "DatabaseName"
            case engineId = "EngineId"
            case scriptContent = "ScriptContent"
            case resourceQueue = "ResourceQueue"
            case datasourceType = "DatasourceType"
            case computeResource = "ComputeResource"
            case runParams = "RunParams"
            case confParams = "ConfParams"
        }
    }

    /// SubmitSqlTask返回参数结构体
    public struct SubmitSqlTaskResponse: TCResponse {
        /// 任务提交记录
        public let record: AdhocRecord

        /// 子任务记录列表
        public let details: [AdhocDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case record = "Record"
            case details = "Details"
            case requestId = "RequestId"
        }
    }

    /// 提交SQL任务
    ///
    /// 即席分析提交SQL任务
    @inlinable
    public func submitSqlTask(_ input: SubmitSqlTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SubmitSqlTaskResponse> {
        self.client.execute(action: "SubmitSqlTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 提交SQL任务
    ///
    /// 即席分析提交SQL任务
    @inlinable
    public func submitSqlTask(_ input: SubmitSqlTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SubmitSqlTaskResponse {
        try await self.client.execute(action: "SubmitSqlTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 提交SQL任务
    ///
    /// 即席分析提交SQL任务
    @inlinable
    public func submitSqlTask(databaseType: String, datasourceId: Int64, groupId: String, scriptId: String, projectId: String, databaseName: String? = nil, engineId: String? = nil, scriptContent: String? = nil, resourceQueue: String? = nil, datasourceType: String? = nil, computeResource: String? = nil, runParams: String? = nil, confParams: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SubmitSqlTaskResponse> {
        self.submitSqlTask(.init(databaseType: databaseType, datasourceId: datasourceId, groupId: groupId, scriptId: scriptId, projectId: projectId, databaseName: databaseName, engineId: engineId, scriptContent: scriptContent, resourceQueue: resourceQueue, datasourceType: datasourceType, computeResource: computeResource, runParams: runParams, confParams: confParams), region: region, logger: logger, on: eventLoop)
    }

    /// 提交SQL任务
    ///
    /// 即席分析提交SQL任务
    @inlinable
    public func submitSqlTask(databaseType: String, datasourceId: Int64, groupId: String, scriptId: String, projectId: String, databaseName: String? = nil, engineId: String? = nil, scriptContent: String? = nil, resourceQueue: String? = nil, datasourceType: String? = nil, computeResource: String? = nil, runParams: String? = nil, confParams: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SubmitSqlTaskResponse {
        try await self.submitSqlTask(.init(databaseType: databaseType, datasourceId: datasourceId, groupId: groupId, scriptId: scriptId, projectId: projectId, databaseName: databaseName, engineId: engineId, scriptContent: scriptContent, resourceQueue: resourceQueue, datasourceType: datasourceType, computeResource: computeResource, runParams: runParams, confParams: confParams), region: region, logger: logger, on: eventLoop)
    }
}
