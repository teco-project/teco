//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeTaskByStatusReport请求参数结构体
    public struct DescribeTaskByStatusReportRequest: TCRequest {
        /// 项目ID
        public let projectId: String

        /// 时间类型
        public let type: String?

        /// 类型
        public let taskType: String?

        /// 类型名称
        public let typeName: String?

        /// 开始时间
        public let startTime: String?

        /// 结束时间
        public let endTime: String?

        public let aggregationUnit: String?

        public let cycleUnit: String?

        public let status: String?

        public let inCharge: String?

        public init(projectId: String, type: String? = nil, taskType: String? = nil, typeName: String? = nil, startTime: String? = nil, endTime: String? = nil, aggregationUnit: String? = nil, cycleUnit: String? = nil, status: String? = nil, inCharge: String? = nil) {
            self.projectId = projectId
            self.type = type
            self.taskType = taskType
            self.typeName = typeName
            self.startTime = startTime
            self.endTime = endTime
            self.aggregationUnit = aggregationUnit
            self.cycleUnit = cycleUnit
            self.status = status
            self.inCharge = inCharge
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case type = "Type"
            case taskType = "TaskType"
            case typeName = "TypeName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case aggregationUnit = "AggregationUnit"
            case cycleUnit = "CycleUnit"
            case status = "Status"
            case inCharge = "InCharge"
        }
    }

    /// DescribeTaskByStatusReport返回参数结构体
    public struct DescribeTaskByStatusReportResponse: TCResponse {
        /// 任务上报趋势指标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [TaskByStatus]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 任务状态趋势
    @inlinable
    public func describeTaskByStatusReport(_ input: DescribeTaskByStatusReportRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskByStatusReportResponse> {
        self.client.execute(action: "DescribeTaskByStatusReport", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 任务状态趋势
    @inlinable
    public func describeTaskByStatusReport(_ input: DescribeTaskByStatusReportRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskByStatusReportResponse {
        try await self.client.execute(action: "DescribeTaskByStatusReport", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 任务状态趋势
    @inlinable
    public func describeTaskByStatusReport(projectId: String, type: String? = nil, taskType: String? = nil, typeName: String? = nil, startTime: String? = nil, endTime: String? = nil, aggregationUnit: String? = nil, cycleUnit: String? = nil, status: String? = nil, inCharge: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskByStatusReportResponse> {
        self.describeTaskByStatusReport(.init(projectId: projectId, type: type, taskType: taskType, typeName: typeName, startTime: startTime, endTime: endTime, aggregationUnit: aggregationUnit, cycleUnit: cycleUnit, status: status, inCharge: inCharge), region: region, logger: logger, on: eventLoop)
    }

    /// 任务状态趋势
    @inlinable
    public func describeTaskByStatusReport(projectId: String, type: String? = nil, taskType: String? = nil, typeName: String? = nil, startTime: String? = nil, endTime: String? = nil, aggregationUnit: String? = nil, cycleUnit: String? = nil, status: String? = nil, inCharge: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskByStatusReportResponse {
        try await self.describeTaskByStatusReport(.init(projectId: projectId, type: type, taskType: taskType, typeName: typeName, startTime: startTime, endTime: endTime, aggregationUnit: aggregationUnit, cycleUnit: cycleUnit, status: status, inCharge: inCharge), region: region, logger: logger, on: eventLoop)
    }
}
