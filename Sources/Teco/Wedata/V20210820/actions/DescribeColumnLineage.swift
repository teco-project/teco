//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeColumnLineage请求参数结构体
    public struct DescribeColumnLineageRequest: TCRequestModel {
        /// 查询方向，INPUT,OUTPUT,BOTH枚举值
        public let direction: String

        /// 字段信息
        public let data: ColumnLineageInfo

        /// 单次查询入度
        public let inputDepth: Int64?

        /// 单次查询出度
        public let outputDepth: Int64?

        /// 额外参数（传递调用方信息）
        public let extParams: [RecordField]?

        /// 是否过滤临时表 默认值为true
        public let ignoreTemp: Bool?

        public init(direction: String, data: ColumnLineageInfo, inputDepth: Int64? = nil, outputDepth: Int64? = nil, extParams: [RecordField]? = nil, ignoreTemp: Bool? = nil) {
            self.direction = direction
            self.data = data
            self.inputDepth = inputDepth
            self.outputDepth = outputDepth
            self.extParams = extParams
            self.ignoreTemp = ignoreTemp
        }

        enum CodingKeys: String, CodingKey {
            case direction = "Direction"
            case data = "Data"
            case inputDepth = "InputDepth"
            case outputDepth = "OutputDepth"
            case extParams = "ExtParams"
            case ignoreTemp = "IgnoreTemp"
        }
    }

    /// DescribeColumnLineage返回参数结构体
    public struct DescribeColumnLineageResponse: TCResponseModel {
        /// 字段血缘信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let columnAggregationLineage: ColumnAggregationLineage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case columnAggregationLineage = "ColumnAggregationLineage"
            case requestId = "RequestId"
        }
    }

    /// 列出字段血缘信息
    @inlinable
    public func describeColumnLineage(_ input: DescribeColumnLineageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeColumnLineageResponse> {
        self.client.execute(action: "DescribeColumnLineage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 列出字段血缘信息
    @inlinable
    public func describeColumnLineage(_ input: DescribeColumnLineageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeColumnLineageResponse {
        try await self.client.execute(action: "DescribeColumnLineage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 列出字段血缘信息
    @inlinable
    public func describeColumnLineage(direction: String, data: ColumnLineageInfo, inputDepth: Int64? = nil, outputDepth: Int64? = nil, extParams: [RecordField]? = nil, ignoreTemp: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeColumnLineageResponse> {
        self.describeColumnLineage(.init(direction: direction, data: data, inputDepth: inputDepth, outputDepth: outputDepth, extParams: extParams, ignoreTemp: ignoreTemp), region: region, logger: logger, on: eventLoop)
    }

    /// 列出字段血缘信息
    @inlinable
    public func describeColumnLineage(direction: String, data: ColumnLineageInfo, inputDepth: Int64? = nil, outputDepth: Int64? = nil, extParams: [RecordField]? = nil, ignoreTemp: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeColumnLineageResponse {
        try await self.describeColumnLineage(.init(direction: direction, data: data, inputDepth: inputDepth, outputDepth: outputDepth, extParams: extParams, ignoreTemp: ignoreTemp), region: region, logger: logger, on: eventLoop)
    }
}
