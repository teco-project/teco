//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// BatchKillIntegrationTaskInstances请求参数结构体
    public struct BatchKillIntegrationTaskInstancesRequest: TCRequestModel {
        /// 实例信息
        public let instances: [SchedulerTaskInstanceInfo]
        
        /// 项目id
        public let projectId: String
        
        public init (instances: [SchedulerTaskInstanceInfo], projectId: String) {
            self.instances = instances
            self.projectId = projectId
        }
        
        enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case projectId = "ProjectId"
        }
    }
    
    /// BatchKillIntegrationTaskInstances返回参数结构体
    public struct BatchKillIntegrationTaskInstancesResponse: TCResponseModel {
        /// 操作成功的任务数
        public let successCount: Int64
        
        /// 操作失败的任务数
        public let failedCount: Int64
        
        /// 任务总数
        public let totalCount: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case successCount = "SuccessCount"
            case failedCount = "FailedCount"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
    
    /// 批量终止集成任务实例
    @inlinable
    public func batchKillIntegrationTaskInstances(_ input: BatchKillIntegrationTaskInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < BatchKillIntegrationTaskInstancesResponse > {
        self.client.execute(action: "BatchKillIntegrationTaskInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 批量终止集成任务实例
    @inlinable
    public func batchKillIntegrationTaskInstances(_ input: BatchKillIntegrationTaskInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchKillIntegrationTaskInstancesResponse {
        try await self.client.execute(action: "BatchKillIntegrationTaskInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
