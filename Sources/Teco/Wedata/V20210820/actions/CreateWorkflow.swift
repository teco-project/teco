//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// CreateWorkflow请求参数结构体
    public struct CreateWorkflowRequest: TCRequestModel {
        /// 项目Id
        public let projectId: String

        /// 工作流名称
        public let workflowName: String?

        /// 所属文件夹id
        public let folderId: String?

        public init(projectId: String, workflowName: String? = nil, folderId: String? = nil) {
            self.projectId = projectId
            self.workflowName = workflowName
            self.folderId = folderId
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case workflowName = "WorkflowName"
            case folderId = "FolderId"
        }
    }

    /// CreateWorkflow返回参数结构体
    public struct CreateWorkflowResponse: TCResponseModel {
        /// 返回工作流Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: CommonId?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 创建工作流【Beta版本】
    ///
    /// <p style="color:red;">[注意：该Beta版本只满足广州区部分白名单客户使用]</p>
    /// 创建工作流
    @inlinable
    public func createWorkflow(_ input: CreateWorkflowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWorkflowResponse> {
        self.client.execute(action: "CreateWorkflow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建工作流【Beta版本】
    ///
    /// <p style="color:red;">[注意：该Beta版本只满足广州区部分白名单客户使用]</p>
    /// 创建工作流
    @inlinable
    public func createWorkflow(_ input: CreateWorkflowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWorkflowResponse {
        try await self.client.execute(action: "CreateWorkflow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建工作流【Beta版本】
    ///
    /// <p style="color:red;">[注意：该Beta版本只满足广州区部分白名单客户使用]</p>
    /// 创建工作流
    @inlinable
    public func createWorkflow(projectId: String, workflowName: String? = nil, folderId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWorkflowResponse> {
        self.createWorkflow(.init(projectId: projectId, workflowName: workflowName, folderId: folderId), region: region, logger: logger, on: eventLoop)
    }

    /// 创建工作流【Beta版本】
    ///
    /// <p style="color:red;">[注意：该Beta版本只满足广州区部分白名单客户使用]</p>
    /// 创建工作流
    @inlinable
    public func createWorkflow(projectId: String, workflowName: String? = nil, folderId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWorkflowResponse {
        try await self.createWorkflow(.init(projectId: projectId, workflowName: workflowName, folderId: folderId), region: region, logger: logger, on: eventLoop)
    }
}
