//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeSchedulerTaskCntByStatus请求参数结构体
    public struct DescribeSchedulerTaskCntByStatusRequest: TCRequestModel {
        /// 1
        public let taskType: UInt64?

        /// Y
        public let typeName: String?

        /// 111
        public let projectId: String?

        public init(taskType: UInt64? = nil, typeName: String? = nil, projectId: String? = nil) {
            self.taskType = taskType
            self.typeName = typeName
            self.projectId = projectId
        }

        enum CodingKeys: String, CodingKey {
            case taskType = "TaskType"
            case typeName = "TypeName"
            case projectId = "ProjectId"
        }
    }

    /// DescribeSchedulerTaskCntByStatus返回参数结构体
    public struct DescribeSchedulerTaskCntByStatusResponse: TCResponseModel {
        /// 统计结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [ScreenTaskInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 任务状态统计
    @inlinable
    public func describeSchedulerTaskCntByStatus(_ input: DescribeSchedulerTaskCntByStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSchedulerTaskCntByStatusResponse> {
        self.client.execute(action: "DescribeSchedulerTaskCntByStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 任务状态统计
    @inlinable
    public func describeSchedulerTaskCntByStatus(_ input: DescribeSchedulerTaskCntByStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSchedulerTaskCntByStatusResponse {
        try await self.client.execute(action: "DescribeSchedulerTaskCntByStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 任务状态统计
    @inlinable
    public func describeSchedulerTaskCntByStatus(taskType: UInt64? = nil, typeName: String? = nil, projectId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSchedulerTaskCntByStatusResponse> {
        self.describeSchedulerTaskCntByStatus(.init(taskType: taskType, typeName: typeName, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }

    /// 任务状态统计
    @inlinable
    public func describeSchedulerTaskCntByStatus(taskType: UInt64? = nil, typeName: String? = nil, projectId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSchedulerTaskCntByStatusResponse {
        try await self.describeSchedulerTaskCntByStatus(.init(taskType: taskType, typeName: typeName, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }
}
