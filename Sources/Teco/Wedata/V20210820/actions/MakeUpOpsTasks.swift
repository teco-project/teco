//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// MakeUpOpsTasks请求参数结构体
    public struct MakeUpOpsTasksRequest: TCRequest {
        /// 补录的当前任务的taskId数组
        public let taskIdList: [String]

        /// 补录开始时间
        public let startTime: String

        /// 补录结束时间
        public let endTime: String

        /// 项目Id
        public let projectId: String

        /// true: 检查父任务实例状态；false: 不检查父任务实例状态
        public let checkParent: Bool?

        public init(taskIdList: [String], startTime: String, endTime: String, projectId: String, checkParent: Bool? = nil) {
            self.taskIdList = taskIdList
            self.startTime = startTime
            self.endTime = endTime
            self.projectId = projectId
            self.checkParent = checkParent
        }

        enum CodingKeys: String, CodingKey {
            case taskIdList = "TaskIdList"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case projectId = "ProjectId"
            case checkParent = "CheckParent"
        }
    }

    /// MakeUpOpsTasks返回参数结构体
    public struct MakeUpOpsTasksResponse: TCResponse {
        /// 返回批量操作成功个数、失败个数、操作总数
        public let data: BatchOperationOpsDto

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 智能运维-批量补录任务
    ///
    /// 任务批量补录，调度状态任务才可以补录；
    @inlinable
    public func makeUpOpsTasks(_ input: MakeUpOpsTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<MakeUpOpsTasksResponse> {
        self.client.execute(action: "MakeUpOpsTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 智能运维-批量补录任务
    ///
    /// 任务批量补录，调度状态任务才可以补录；
    @inlinable
    public func makeUpOpsTasks(_ input: MakeUpOpsTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> MakeUpOpsTasksResponse {
        try await self.client.execute(action: "MakeUpOpsTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 智能运维-批量补录任务
    ///
    /// 任务批量补录，调度状态任务才可以补录；
    @inlinable
    public func makeUpOpsTasks(taskIdList: [String], startTime: String, endTime: String, projectId: String, checkParent: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<MakeUpOpsTasksResponse> {
        self.makeUpOpsTasks(.init(taskIdList: taskIdList, startTime: startTime, endTime: endTime, projectId: projectId, checkParent: checkParent), region: region, logger: logger, on: eventLoop)
    }

    /// 智能运维-批量补录任务
    ///
    /// 任务批量补录，调度状态任务才可以补录；
    @inlinable
    public func makeUpOpsTasks(taskIdList: [String], startTime: String, endTime: String, projectId: String, checkParent: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> MakeUpOpsTasksResponse {
        try await self.makeUpOpsTasks(.init(taskIdList: taskIdList, startTime: startTime, endTime: endTime, projectId: projectId, checkParent: checkParent), region: region, logger: logger, on: eventLoop)
    }
}
