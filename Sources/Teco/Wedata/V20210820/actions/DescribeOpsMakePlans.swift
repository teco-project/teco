//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Wedata {
    /// DescribeOpsMakePlans请求参数结构体
    public struct DescribeOpsMakePlansRequest: TCPaginatedRequest {
        /// 项目ID
        public let projectId: String

        /// 分页数，默认值1
        public let pageNumber: Int64?

        /// 分页大小，默认值10
        public let pageSize: Int64?

        /// 补录计划ID
        public let planId: String?

        /// 补录计划名称
        public let planName: String?

        /// 补录任务名称
        public let taskName: String?

        /// 补录任务ID
        public let taskId: String?

        /// 补录计划创建者
        public let creator: String?

        /// 补录计划最小创建时间
        public let minCreateTime: String?

        /// 补录计划最大创建时间
        public let maxCreateTime: String?

        public init(projectId: String, pageNumber: Int64? = nil, pageSize: Int64? = nil, planId: String? = nil, planName: String? = nil, taskName: String? = nil, taskId: String? = nil, creator: String? = nil, minCreateTime: String? = nil, maxCreateTime: String? = nil) {
            self.projectId = projectId
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.planId = planId
            self.planName = planName
            self.taskName = taskName
            self.taskId = taskId
            self.creator = creator
            self.minCreateTime = minCreateTime
            self.maxCreateTime = maxCreateTime
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case planId = "PlanId"
            case planName = "PlanName"
            case taskName = "TaskName"
            case taskId = "TaskId"
            case creator = "Creator"
            case minCreateTime = "MinCreateTime"
            case maxCreateTime = "MaxCreateTime"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeOpsMakePlansResponse) -> DescribeOpsMakePlansRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeOpsMakePlansRequest(projectId: self.projectId, pageNumber: (self.pageNumber ?? 0) + 1, pageSize: self.pageSize, planId: self.planId, planName: self.planName, taskName: self.taskName, taskId: self.taskId, creator: self.creator, minCreateTime: self.minCreateTime, maxCreateTime: self.maxCreateTime)
        }
    }

    /// DescribeOpsMakePlans返回参数结构体
    public struct DescribeOpsMakePlansResponse: TCPaginatedResponse {
        /// 补录计划分页查询结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: MakePlanOpsDtoCollection?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``MakePlanOpsDto`` list from the paginated response.
        public func getItems() -> [MakePlanOpsDto] {
            self.data?.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data?.totalCount
        }
    }

    /// 查询补录计划
    ///
    /// 根据条件分页查询补录计划
    @inlinable
    public func describeOpsMakePlans(_ input: DescribeOpsMakePlansRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOpsMakePlansResponse> {
        self.client.execute(action: "DescribeOpsMakePlans", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询补录计划
    ///
    /// 根据条件分页查询补录计划
    @inlinable
    public func describeOpsMakePlans(_ input: DescribeOpsMakePlansRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOpsMakePlansResponse {
        try await self.client.execute(action: "DescribeOpsMakePlans", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询补录计划
    ///
    /// 根据条件分页查询补录计划
    @inlinable
    public func describeOpsMakePlans(projectId: String, pageNumber: Int64? = nil, pageSize: Int64? = nil, planId: String? = nil, planName: String? = nil, taskName: String? = nil, taskId: String? = nil, creator: String? = nil, minCreateTime: String? = nil, maxCreateTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOpsMakePlansResponse> {
        self.describeOpsMakePlans(.init(projectId: projectId, pageNumber: pageNumber, pageSize: pageSize, planId: planId, planName: planName, taskName: taskName, taskId: taskId, creator: creator, minCreateTime: minCreateTime, maxCreateTime: maxCreateTime), region: region, logger: logger, on: eventLoop)
    }

    /// 查询补录计划
    ///
    /// 根据条件分页查询补录计划
    @inlinable
    public func describeOpsMakePlans(projectId: String, pageNumber: Int64? = nil, pageSize: Int64? = nil, planId: String? = nil, planName: String? = nil, taskName: String? = nil, taskId: String? = nil, creator: String? = nil, minCreateTime: String? = nil, maxCreateTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOpsMakePlansResponse {
        try await self.describeOpsMakePlans(.init(projectId: projectId, pageNumber: pageNumber, pageSize: pageSize, planId: planId, planName: planName, taskName: taskName, taskId: taskId, creator: creator, minCreateTime: minCreateTime, maxCreateTime: maxCreateTime), region: region, logger: logger, on: eventLoop)
    }

    /// 查询补录计划
    ///
    /// 根据条件分页查询补录计划
    @inlinable
    public func describeOpsMakePlansPaginated(_ input: DescribeOpsMakePlansRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [MakePlanOpsDto])> {
        self.client.paginate(input: input, region: region, command: self.describeOpsMakePlans, logger: logger, on: eventLoop)
    }

    /// 查询补录计划
    ///
    /// 根据条件分页查询补录计划
    @inlinable @discardableResult
    public func describeOpsMakePlansPaginated(_ input: DescribeOpsMakePlansRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeOpsMakePlansResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeOpsMakePlans, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询补录计划
    ///
    /// 根据条件分页查询补录计划
    ///
    /// - Returns: `AsyncSequence`s of `MakePlanOpsDto` and `DescribeOpsMakePlansResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeOpsMakePlansPaginator(_ input: DescribeOpsMakePlansRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeOpsMakePlansRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeOpsMakePlans, logger: logger, on: eventLoop)
    }
}
