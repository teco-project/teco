//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeInstanceByCycle请求参数结构体
    public struct DescribeInstanceByCycleRequest: TCRequest {
        /// 1
        public let projectId: String?

        /// 1
        public let tenantId: String?

        public init(projectId: String? = nil, tenantId: String? = nil) {
            self.projectId = projectId
            self.tenantId = tenantId
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case tenantId = "TenantId"
        }
    }

    /// DescribeInstanceByCycle返回参数结构体
    public struct DescribeInstanceByCycleResponse: TCResponse {
        /// 统计结果
        public let data: [TaskByCycle]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 周期实例统计
    ///
    /// 根据周期类型查询所有实例
    @inlinable
    public func describeInstanceByCycle(_ input: DescribeInstanceByCycleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceByCycleResponse> {
        self.client.execute(action: "DescribeInstanceByCycle", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 周期实例统计
    ///
    /// 根据周期类型查询所有实例
    @inlinable
    public func describeInstanceByCycle(_ input: DescribeInstanceByCycleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceByCycleResponse {
        try await self.client.execute(action: "DescribeInstanceByCycle", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 周期实例统计
    ///
    /// 根据周期类型查询所有实例
    @inlinable
    public func describeInstanceByCycle(projectId: String? = nil, tenantId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceByCycleResponse> {
        self.describeInstanceByCycle(.init(projectId: projectId, tenantId: tenantId), region: region, logger: logger, on: eventLoop)
    }

    /// 周期实例统计
    ///
    /// 根据周期类型查询所有实例
    @inlinable
    public func describeInstanceByCycle(projectId: String? = nil, tenantId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceByCycleResponse {
        try await self.describeInstanceByCycle(.init(projectId: projectId, tenantId: tenantId), region: region, logger: logger, on: eventLoop)
    }
}
