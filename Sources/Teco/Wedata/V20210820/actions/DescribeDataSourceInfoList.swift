//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// 获取数据源信息
    ///
    /// 获取数据源信息-数据源分页列表
    @inlinable
    public func describeDataSourceInfoList(_ input: DescribeDataSourceInfoListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDataSourceInfoListResponse > {
        self.client.execute(action: "DescribeDataSourceInfoList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取数据源信息
    ///
    /// 获取数据源信息-数据源分页列表
    @inlinable
    public func describeDataSourceInfoList(_ input: DescribeDataSourceInfoListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDataSourceInfoListResponse {
        try await self.client.execute(action: "DescribeDataSourceInfoList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeDataSourceInfoList请求参数结构体
    public struct DescribeDataSourceInfoListRequest: TCRequestModel {
        /// 工作空间id
        public let projectId: String
        
        /// 页码
        public let pageNumber: UInt64?
        
        /// 页数
        public let pageSize: UInt64?
        
        /// 可选过滤条件，Filter可选配置(参考): "Name": { "type": "string", "description": "数据源名称" }, "Type": { "type": "string", "description": "类型" }, "ClusterId": { "type": "string", "description": "集群id" }, "CategoryId": { "type": "string", "description": "分类，项目或空间id" }
        public let filters: Filter
        
        /// 排序配置
        public let orderFields: OrderField
        
        /// 数据源类型
        public let type: String?
        
        /// 数据源名称过滤用
        public let datasourceName: String?
        
        public init (projectId: String, pageNumber: UInt64?, pageSize: UInt64?, filters: Filter, orderFields: OrderField, type: String?, datasourceName: String?) {
            self.projectId = projectId
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.filters = filters
            self.orderFields = orderFields
            self.type = type
            self.datasourceName = datasourceName
        }
        
        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case filters = "Filters"
            case orderFields = "OrderFields"
            case type = "Type"
            case datasourceName = "DatasourceName"
        }
    }
    
    /// DescribeDataSourceInfoList返回参数结构体
    public struct DescribeDataSourceInfoListResponse: TCResponseModel {
        /// 总条数。
        public let totalCount: Int64
        
        /// 数据源信息列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasourceSet: [DatasourceBaseInfo]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case datasourceSet = "DatasourceSet"
            case requestId = "RequestId"
        }
    }
}