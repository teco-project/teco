//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// 生成建hive表的sql
    @inlinable
    public func genHiveTableDDLSql(_ input: GenHiveTableDDLSqlRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GenHiveTableDDLSqlResponse > {
        self.client.execute(action: "GenHiveTableDDLSql", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 生成建hive表的sql
    @inlinable
    public func genHiveTableDDLSql(_ input: GenHiveTableDDLSqlRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GenHiveTableDDLSqlResponse {
        try await self.client.execute(action: "GenHiveTableDDLSql", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// GenHiveTableDDLSql请求参数结构体
    public struct GenHiveTableDDLSqlRequest: TCRequestModel {
        /// 项目id
        public let projectId: String
        
        /// 目标数据库
        public let sinkDatabase: String
        
        /// 节点id
        public let id: String?
        
        /// 元数据类型(MYSQL、ORACLE)
        public let msType: String?
        
        /// 数据源id
        public let datasourceId: String?
        
        /// 来源库
        public let sourceDatabase: String?
        
        /// 来源表
        public let tableName: String?
        
        /// 目标表元数据类型(HIVE、GBASE)
        public let sinkType: String?
        
        /// schema名称
        public let schemaName: String?
        
        /// 上游节点的字段信息
        public let sourceFieldInfoList: [SourceFieldInfo]?
        
        public init (projectId: String, sinkDatabase: String, id: String?, msType: String?, datasourceId: String?, sourceDatabase: String?, tableName: String?, sinkType: String?, schemaName: String?, sourceFieldInfoList: [SourceFieldInfo]?) {
            self.projectId = projectId
            self.sinkDatabase = sinkDatabase
            self.id = id
            self.msType = msType
            self.datasourceId = datasourceId
            self.sourceDatabase = sourceDatabase
            self.tableName = tableName
            self.sinkType = sinkType
            self.schemaName = schemaName
            self.sourceFieldInfoList = sourceFieldInfoList
        }
        
        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case sinkDatabase = "SinkDatabase"
            case id = "Id"
            case msType = "MsType"
            case datasourceId = "DatasourceId"
            case sourceDatabase = "SourceDatabase"
            case tableName = "TableName"
            case sinkType = "SinkType"
            case schemaName = "SchemaName"
            case sourceFieldInfoList = "SourceFieldInfoList"
        }
    }
    
    /// GenHiveTableDDLSql返回参数结构体
    public struct GenHiveTableDDLSqlResponse: TCResponseModel {
        /// 生成的ddl语句
        public let ddlSql: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case ddlSql = "DDLSql"
            case requestId = "RequestId"
        }
    }
}
