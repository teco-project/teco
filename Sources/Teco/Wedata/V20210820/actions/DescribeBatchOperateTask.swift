//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DescribeBatchOperateTask请求参数结构体
    public struct DescribeBatchOperateTaskRequest: TCRequest {
        /// 项目Id
        public let projectId: String

        /// 页码
        public let page: String

        /// 页号
        public let size: String

        /// 状态列表
        /// 草稿：'NS'，'N','P','R'
        /// 运行：''Y'
        /// 停止：'F'
        /// 冻结：'O'
        /// 停止中：'T'
        public let statusList: [String]?

        /// 责任人名列表
        public let ownerNameList: [String]?

        /// 工作流列表
        public let workflowIdList: [String]?

        /// 任务名称搜索
        public let taskNameFilter: String?

        /// 任务类型列表
        public let taskTypeList: [String]?

        /// 文件夹列表
        public let fordIdList: [String]?

        /// 任务Id搜索
        public let taskIdFilter: String?

        /// 责任人搜索
        public let ownerNameFilter: String?

        /// 排序字段：
        /// UpdateTime
        /// CreateTime
        public let sortItem: String?

        /// asc:升序
        /// desc:降序
        public let sortType: String?

        /// 引擎类型列表：三种
        /// SparkJob
        /// SparkSql
        /// presto
        public let dataEngineList: [String]?

        /// 操作人名
        public let userId: String?

        /// 1
        public let ownerId: String?

        /// 1
        public let tenantId: String?

        /// 数据源ID列表
        public let datasourceIdList: [String]?

        /// 数据源类型列表
        public let datasourceTypeList: [String]?

        /// 调度单位类型列表
        public let cycleUnitList: [String]?

        /// 是否筛选出可提交的任务
        public let canSubmit: Bool?

        public init(projectId: String, page: String, size: String, statusList: [String]? = nil, ownerNameList: [String]? = nil, workflowIdList: [String]? = nil, taskNameFilter: String? = nil, taskTypeList: [String]? = nil, fordIdList: [String]? = nil, taskIdFilter: String? = nil, ownerNameFilter: String? = nil, sortItem: String? = nil, sortType: String? = nil, dataEngineList: [String]? = nil, userId: String? = nil, ownerId: String? = nil, tenantId: String? = nil, datasourceIdList: [String]? = nil, datasourceTypeList: [String]? = nil, cycleUnitList: [String]? = nil, canSubmit: Bool? = nil) {
            self.projectId = projectId
            self.page = page
            self.size = size
            self.statusList = statusList
            self.ownerNameList = ownerNameList
            self.workflowIdList = workflowIdList
            self.taskNameFilter = taskNameFilter
            self.taskTypeList = taskTypeList
            self.fordIdList = fordIdList
            self.taskIdFilter = taskIdFilter
            self.ownerNameFilter = ownerNameFilter
            self.sortItem = sortItem
            self.sortType = sortType
            self.dataEngineList = dataEngineList
            self.userId = userId
            self.ownerId = ownerId
            self.tenantId = tenantId
            self.datasourceIdList = datasourceIdList
            self.datasourceTypeList = datasourceTypeList
            self.cycleUnitList = cycleUnitList
            self.canSubmit = canSubmit
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case page = "Page"
            case size = "Size"
            case statusList = "StatusList"
            case ownerNameList = "OwnerNameList"
            case workflowIdList = "WorkflowIdList"
            case taskNameFilter = "TaskNameFilter"
            case taskTypeList = "TaskTypeList"
            case fordIdList = "FordIdList"
            case taskIdFilter = "TaskIdFilter"
            case ownerNameFilter = "OwnerNameFilter"
            case sortItem = "SortItem"
            case sortType = "SortType"
            case dataEngineList = "DataEngineList"
            case userId = "UserId"
            case ownerId = "OwnerId"
            case tenantId = "TenantId"
            case datasourceIdList = "DatasourceIdList"
            case datasourceTypeList = "DatasourceTypeList"
            case cycleUnitList = "CycleUnitList"
            case canSubmit = "CanSubmit"
        }
    }

    /// DescribeBatchOperateTask返回参数结构体
    public struct DescribeBatchOperateTaskResponse: TCResponse {
        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: DescribeBatchOperateTaskPage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 批量操作任务列表
    @inlinable
    public func describeBatchOperateTask(_ input: DescribeBatchOperateTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBatchOperateTaskResponse> {
        self.client.execute(action: "DescribeBatchOperateTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量操作任务列表
    @inlinable
    public func describeBatchOperateTask(_ input: DescribeBatchOperateTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBatchOperateTaskResponse {
        try await self.client.execute(action: "DescribeBatchOperateTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量操作任务列表
    @inlinable
    public func describeBatchOperateTask(projectId: String, page: String, size: String, statusList: [String]? = nil, ownerNameList: [String]? = nil, workflowIdList: [String]? = nil, taskNameFilter: String? = nil, taskTypeList: [String]? = nil, fordIdList: [String]? = nil, taskIdFilter: String? = nil, ownerNameFilter: String? = nil, sortItem: String? = nil, sortType: String? = nil, dataEngineList: [String]? = nil, userId: String? = nil, ownerId: String? = nil, tenantId: String? = nil, datasourceIdList: [String]? = nil, datasourceTypeList: [String]? = nil, cycleUnitList: [String]? = nil, canSubmit: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBatchOperateTaskResponse> {
        self.describeBatchOperateTask(.init(projectId: projectId, page: page, size: size, statusList: statusList, ownerNameList: ownerNameList, workflowIdList: workflowIdList, taskNameFilter: taskNameFilter, taskTypeList: taskTypeList, fordIdList: fordIdList, taskIdFilter: taskIdFilter, ownerNameFilter: ownerNameFilter, sortItem: sortItem, sortType: sortType, dataEngineList: dataEngineList, userId: userId, ownerId: ownerId, tenantId: tenantId, datasourceIdList: datasourceIdList, datasourceTypeList: datasourceTypeList, cycleUnitList: cycleUnitList, canSubmit: canSubmit), region: region, logger: logger, on: eventLoop)
    }

    /// 批量操作任务列表
    @inlinable
    public func describeBatchOperateTask(projectId: String, page: String, size: String, statusList: [String]? = nil, ownerNameList: [String]? = nil, workflowIdList: [String]? = nil, taskNameFilter: String? = nil, taskTypeList: [String]? = nil, fordIdList: [String]? = nil, taskIdFilter: String? = nil, ownerNameFilter: String? = nil, sortItem: String? = nil, sortType: String? = nil, dataEngineList: [String]? = nil, userId: String? = nil, ownerId: String? = nil, tenantId: String? = nil, datasourceIdList: [String]? = nil, datasourceTypeList: [String]? = nil, cycleUnitList: [String]? = nil, canSubmit: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBatchOperateTaskResponse {
        try await self.describeBatchOperateTask(.init(projectId: projectId, page: page, size: size, statusList: statusList, ownerNameList: ownerNameList, workflowIdList: workflowIdList, taskNameFilter: taskNameFilter, taskTypeList: taskTypeList, fordIdList: fordIdList, taskIdFilter: taskIdFilter, ownerNameFilter: ownerNameFilter, sortItem: sortItem, sortType: sortType, dataEngineList: dataEngineList, userId: userId, ownerId: ownerId, tenantId: tenantId, datasourceIdList: datasourceIdList, datasourceTypeList: datasourceTypeList, cycleUnitList: cycleUnitList, canSubmit: canSubmit), region: region, logger: logger, on: eventLoop)
    }
}
