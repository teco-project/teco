//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Wedata {
    /// DescribeEventConsumeTasks请求参数结构体
    public struct DescribeEventConsumeTasksRequest: TCPaginatedRequest {
        /// 事件实例ID
        public let eventCaseId: String

        /// 页码
        public let pageNumber: UInt64

        /// 每页数目
        public let pageSize: UInt64

        public init(eventCaseId: String, pageNumber: UInt64, pageSize: UInt64) {
            self.eventCaseId = eventCaseId
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case eventCaseId = "EventCaseId"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeEventConsumeTasksResponse) -> DescribeEventConsumeTasksRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeEventConsumeTasksRequest(eventCaseId: self.eventCaseId, pageNumber: self.pageNumber + 1, pageSize: self.pageSize)
        }
    }

    /// DescribeEventConsumeTasks返回参数结构体
    public struct DescribeEventConsumeTasksResponse: TCPaginatedResponse {
        /// 事件消费任务记录列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: EventCaseConsumeLogOptDtoCollection?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``EventCaseConsumeLogOptDto`` list from the paginated response.
        public func getItems() -> [EventCaseConsumeLogOptDto] {
            self.data?.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.data?.totalCount
        }
    }

    /// 事件实例查看消费任务
    ///
    /// 查看事件实例的消费任务
    @inlinable
    public func describeEventConsumeTasks(_ input: DescribeEventConsumeTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEventConsumeTasksResponse> {
        self.client.execute(action: "DescribeEventConsumeTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 事件实例查看消费任务
    ///
    /// 查看事件实例的消费任务
    @inlinable
    public func describeEventConsumeTasks(_ input: DescribeEventConsumeTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEventConsumeTasksResponse {
        try await self.client.execute(action: "DescribeEventConsumeTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 事件实例查看消费任务
    ///
    /// 查看事件实例的消费任务
    @inlinable
    public func describeEventConsumeTasks(eventCaseId: String, pageNumber: UInt64, pageSize: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEventConsumeTasksResponse> {
        self.describeEventConsumeTasks(.init(eventCaseId: eventCaseId, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 事件实例查看消费任务
    ///
    /// 查看事件实例的消费任务
    @inlinable
    public func describeEventConsumeTasks(eventCaseId: String, pageNumber: UInt64, pageSize: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEventConsumeTasksResponse {
        try await self.describeEventConsumeTasks(.init(eventCaseId: eventCaseId, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 事件实例查看消费任务
    ///
    /// 查看事件实例的消费任务
    @inlinable
    public func describeEventConsumeTasksPaginated(_ input: DescribeEventConsumeTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [EventCaseConsumeLogOptDto])> {
        self.client.paginate(input: input, region: region, command: self.describeEventConsumeTasks, logger: logger, on: eventLoop)
    }

    /// 事件实例查看消费任务
    ///
    /// 查看事件实例的消费任务
    @inlinable @discardableResult
    public func describeEventConsumeTasksPaginated(_ input: DescribeEventConsumeTasksRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeEventConsumeTasksResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeEventConsumeTasks, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 事件实例查看消费任务
    ///
    /// 查看事件实例的消费任务
    ///
    /// - Returns: `AsyncSequence`s of ``EventCaseConsumeLogOptDto`` and ``DescribeEventConsumeTasksResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeEventConsumeTasksPaginator(_ input: DescribeEventConsumeTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeEventConsumeTasksRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeEventConsumeTasks, logger: logger, on: eventLoop)
    }
}
