//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// DeleteWorkflowById请求参数结构体
    public struct DeleteWorkflowByIdRequest: TCRequestModel {
        /// 工作流id
        public let workflowId: String

        /// 项目id
        public let projectId: String

        /// 删除后下游任务的处理方式，true:下游任务均正常运行 false:下游任务均运行失败
        public let deleteMode: Bool?

        /// 删除任务后是否通知下游任务责任人, true:通知 false:不通知
        public let enableNotify: Bool?

        public init(workflowId: String, projectId: String, deleteMode: Bool? = nil, enableNotify: Bool? = nil) {
            self.workflowId = workflowId
            self.projectId = projectId
            self.deleteMode = deleteMode
            self.enableNotify = enableNotify
        }

        enum CodingKeys: String, CodingKey {
            case workflowId = "WorkflowId"
            case projectId = "ProjectId"
            case deleteMode = "DeleteMode"
            case enableNotify = "EnableNotify"
        }
    }

    /// DeleteWorkflowById返回参数结构体
    public struct DeleteWorkflowByIdResponse: TCResponseModel {
        /// 删除结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: OperationOpsDto?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 通过工作流Id删除工作流
    @inlinable
    public func deleteWorkflowById(_ input: DeleteWorkflowByIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteWorkflowByIdResponse> {
        self.client.execute(action: "DeleteWorkflowById", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 通过工作流Id删除工作流
    @inlinable
    public func deleteWorkflowById(_ input: DeleteWorkflowByIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteWorkflowByIdResponse {
        try await self.client.execute(action: "DeleteWorkflowById", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 通过工作流Id删除工作流
    @inlinable
    public func deleteWorkflowById(workflowId: String, projectId: String, deleteMode: Bool? = nil, enableNotify: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteWorkflowByIdResponse> {
        self.deleteWorkflowById(.init(workflowId: workflowId, projectId: projectId, deleteMode: deleteMode, enableNotify: enableNotify), region: region, logger: logger, on: eventLoop)
    }

    /// 通过工作流Id删除工作流
    @inlinable
    public func deleteWorkflowById(workflowId: String, projectId: String, deleteMode: Bool? = nil, enableNotify: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteWorkflowByIdResponse {
        try await self.deleteWorkflowById(.init(workflowId: workflowId, projectId: projectId, deleteMode: deleteMode, enableNotify: enableNotify), region: region, logger: logger, on: eventLoop)
    }
}
