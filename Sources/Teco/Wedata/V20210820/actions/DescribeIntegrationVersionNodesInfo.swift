//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// DescribeIntegrationVersionNodesInfo请求参数结构体
    public struct DescribeIntegrationVersionNodesInfoRequest: TCRequestModel {
        /// 任务id
        public let taskId: String
        
        /// 项目id
        public let projectId: String
        
        /// task version path
        public let taskVersionPath: String
        
        /// task version
        public let taskVersion: String?
        
        public init (taskId: String, projectId: String, taskVersionPath: String, taskVersion: String? = nil) {
            self.taskId = taskId
            self.projectId = projectId
            self.taskVersionPath = taskVersionPath
            self.taskVersion = taskVersion
        }
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case projectId = "ProjectId"
            case taskVersionPath = "TaskVersionPath"
            case taskVersion = "TaskVersion"
        }
    }
    
    /// DescribeIntegrationVersionNodesInfo返回参数结构体
    public struct DescribeIntegrationVersionNodesInfoResponse: TCResponseModel {
        /// 任务节点信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodes: [IntegrationNodeInfo]?
        
        /// 任务映射信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mappings: [IntegrationNodeMapping]?
        
        /// 任务id
        public let taskId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case nodes = "Nodes"
            case mappings = "Mappings"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }
    
    /// 查询集成任务版本节点信息
    @inlinable
    public func describeIntegrationVersionNodesInfo(_ input: DescribeIntegrationVersionNodesInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeIntegrationVersionNodesInfoResponse > {
        self.client.execute(action: "DescribeIntegrationVersionNodesInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询集成任务版本节点信息
    @inlinable
    public func describeIntegrationVersionNodesInfo(_ input: DescribeIntegrationVersionNodesInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIntegrationVersionNodesInfoResponse {
        try await self.client.execute(action: "DescribeIntegrationVersionNodesInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询集成任务版本节点信息
    @inlinable
    public func describeIntegrationVersionNodesInfo(taskId: String, projectId: String, taskVersionPath: String, taskVersion: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeIntegrationVersionNodesInfoResponse > {
        self.describeIntegrationVersionNodesInfo(DescribeIntegrationVersionNodesInfoRequest(taskId: taskId, projectId: projectId, taskVersionPath: taskVersionPath, taskVersion: taskVersion), logger: logger, on: eventLoop)
    }
    
    /// 查询集成任务版本节点信息
    @inlinable
    public func describeIntegrationVersionNodesInfo(taskId: String, projectId: String, taskVersionPath: String, taskVersion: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIntegrationVersionNodesInfoResponse {
        try await self.describeIntegrationVersionNodesInfo(DescribeIntegrationVersionNodesInfoRequest(taskId: taskId, projectId: projectId, taskVersionPath: taskVersionPath, taskVersion: taskVersion), logger: logger, on: eventLoop)
    }
}
