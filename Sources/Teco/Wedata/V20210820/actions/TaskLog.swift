//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// TaskLog请求参数结构体
    public struct TaskLogRequest: TCRequestModel {
        /// 任务id
        public let taskId: String

        /// 起始时间戳，单位毫秒
        public let startTime: UInt64

        /// 结束时间戳，单位毫秒
        public let endTime: UInt64

        /// 项目id
        public let projectId: String

        /// 拉取日志数量，默认100
        public let limit: UInt64?

        /// 日志排序 desc 倒序 asc 顺序
        public let orderType: String?

        /// 实时任务 201   离线任务 202  默认实时任务
        public let taskType: UInt64?

        public init(taskId: String, startTime: UInt64, endTime: UInt64, projectId: String, limit: UInt64? = nil, orderType: String? = nil, taskType: UInt64? = nil) {
            self.taskId = taskId
            self.startTime = startTime
            self.endTime = endTime
            self.projectId = projectId
            self.limit = limit
            self.orderType = orderType
            self.taskType = taskType
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case projectId = "ProjectId"
            case limit = "Limit"
            case orderType = "OrderType"
            case taskType = "TaskType"
        }
    }

    /// TaskLog返回参数结构体
    public struct TaskLogResponse: TCResponseModel {
        /// 详细日志
        public let logContentList: [LogContent]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case logContentList = "LogContentList"
            case requestId = "RequestId"
        }
    }

    /// 管控日志接口
    ///
    /// 查询Inlong manager日志
    @inlinable
    public func taskLog(_ input: TaskLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TaskLogResponse> {
        self.client.execute(action: "TaskLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 管控日志接口
    ///
    /// 查询Inlong manager日志
    @inlinable
    public func taskLog(_ input: TaskLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TaskLogResponse {
        try await self.client.execute(action: "TaskLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 管控日志接口
    ///
    /// 查询Inlong manager日志
    @inlinable
    public func taskLog(taskId: String, startTime: UInt64, endTime: UInt64, projectId: String, limit: UInt64? = nil, orderType: String? = nil, taskType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TaskLogResponse> {
        self.taskLog(TaskLogRequest(taskId: taskId, startTime: startTime, endTime: endTime, projectId: projectId, limit: limit, orderType: orderType, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }

    /// 管控日志接口
    ///
    /// 查询Inlong manager日志
    @inlinable
    public func taskLog(taskId: String, startTime: UInt64, endTime: UInt64, projectId: String, limit: UInt64? = nil, orderType: String? = nil, taskType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TaskLogResponse {
        try await self.taskLog(TaskLogRequest(taskId: taskId, startTime: startTime, endTime: endTime, projectId: projectId, limit: limit, orderType: orderType, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }
}
