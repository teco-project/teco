//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Wedata {
    /// GetOfflineDIInstanceList请求参数结构体
    public struct GetOfflineDIInstanceListRequest: TCPaginatedRequest {
        /// 第几页
        public let pageIndex: UInt64

        /// 每页几条
        public let pageSize: UInt64

        /// 项目Id
        public let projectId: String

        /// 无
        public let searchCondition: SearchConditionNew?

        public init(pageIndex: UInt64, pageSize: UInt64, projectId: String, searchCondition: SearchConditionNew? = nil) {
            self.pageIndex = pageIndex
            self.pageSize = pageSize
            self.projectId = projectId
            self.searchCondition = searchCondition
        }

        enum CodingKeys: String, CodingKey {
            case pageIndex = "PageIndex"
            case pageSize = "PageSize"
            case projectId = "ProjectId"
            case searchCondition = "SearchCondition"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: GetOfflineDIInstanceListResponse) -> GetOfflineDIInstanceListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return GetOfflineDIInstanceListRequest(pageIndex: self.pageIndex + 1, pageSize: self.pageSize, projectId: self.projectId, searchCondition: self.searchCondition)
        }
    }

    /// GetOfflineDIInstanceList返回参数结构体
    public struct GetOfflineDIInstanceListResponse: TCPaginatedResponse {
        /// 总条数
        public let total: UInt64

        /// 实例详情
        public let list: [OfflineInstance]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case list = "List"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [OfflineInstance] {
            self.list
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 获取离线任务实例列表(新)
    @inlinable
    public func getOfflineDIInstanceList(_ input: GetOfflineDIInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetOfflineDIInstanceListResponse> {
        self.client.execute(action: "GetOfflineDIInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取离线任务实例列表(新)
    @inlinable
    public func getOfflineDIInstanceList(_ input: GetOfflineDIInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetOfflineDIInstanceListResponse {
        try await self.client.execute(action: "GetOfflineDIInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取离线任务实例列表(新)
    @inlinable
    public func getOfflineDIInstanceList(pageIndex: UInt64, pageSize: UInt64, projectId: String, searchCondition: SearchConditionNew? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetOfflineDIInstanceListResponse> {
        let input = GetOfflineDIInstanceListRequest(pageIndex: pageIndex, pageSize: pageSize, projectId: projectId, searchCondition: searchCondition)
        return self.client.execute(action: "GetOfflineDIInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取离线任务实例列表(新)
    @inlinable
    public func getOfflineDIInstanceList(pageIndex: UInt64, pageSize: UInt64, projectId: String, searchCondition: SearchConditionNew? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetOfflineDIInstanceListResponse {
        let input = GetOfflineDIInstanceListRequest(pageIndex: pageIndex, pageSize: pageSize, projectId: projectId, searchCondition: searchCondition)
        return try await self.client.execute(action: "GetOfflineDIInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取离线任务实例列表(新)
    @inlinable
    public func getOfflineDIInstanceListPaginated(_ input: GetOfflineDIInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [OfflineInstance])> {
        self.client.paginate(input: input, region: region, command: self.getOfflineDIInstanceList, logger: logger, on: eventLoop)
    }

    /// 获取离线任务实例列表(新)
    @inlinable @discardableResult
    public func getOfflineDIInstanceListPaginated(_ input: GetOfflineDIInstanceListRequest, region: TCRegion? = nil, onResponse: @escaping (GetOfflineDIInstanceListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getOfflineDIInstanceList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取离线任务实例列表(新)
    @inlinable
    public func getOfflineDIInstanceListPaginator(_ input: GetOfflineDIInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<GetOfflineDIInstanceListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.getOfflineDIInstanceList, logger: logger, on: eventLoop)
    }
}
