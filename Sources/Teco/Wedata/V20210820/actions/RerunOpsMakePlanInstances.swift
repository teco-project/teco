//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// RerunOpsMakePlanInstances请求参数结构体
    public struct RerunOpsMakePlanInstancesRequest: TCRequest {
        /// 项目ID
        public let projectId: String

        /// 补录计划ID
        public let planId: String

        /// 补录实例ID集合，为空则重跑整个补录计划失败实例。实例ID格式为"${TASK_ID}_${INSTANCE_DATA_TIME}"，即“任务ID_任务实例数据时间”。
        public let instanceIdList: [String]?

        public init(projectId: String, planId: String, instanceIdList: [String]? = nil) {
            self.projectId = projectId
            self.planId = planId
            self.instanceIdList = instanceIdList
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case planId = "PlanId"
            case instanceIdList = "InstanceIdList"
        }
    }

    /// RerunOpsMakePlanInstances返回参数结构体
    public struct RerunOpsMakePlanInstancesResponse: TCResponse {
        /// 操作结果描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: BatchOperateResultOpsDto?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 补录计划重跑
    ///
    /// 按补录计划批量重跑/选择补录计划→补录任务→补录实例，点击重跑
    @inlinable
    public func rerunOpsMakePlanInstances(_ input: RerunOpsMakePlanInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RerunOpsMakePlanInstancesResponse> {
        self.client.execute(action: "RerunOpsMakePlanInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 补录计划重跑
    ///
    /// 按补录计划批量重跑/选择补录计划→补录任务→补录实例，点击重跑
    @inlinable
    public func rerunOpsMakePlanInstances(_ input: RerunOpsMakePlanInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RerunOpsMakePlanInstancesResponse {
        try await self.client.execute(action: "RerunOpsMakePlanInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 补录计划重跑
    ///
    /// 按补录计划批量重跑/选择补录计划→补录任务→补录实例，点击重跑
    @inlinable
    public func rerunOpsMakePlanInstances(projectId: String, planId: String, instanceIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RerunOpsMakePlanInstancesResponse> {
        self.rerunOpsMakePlanInstances(.init(projectId: projectId, planId: planId, instanceIdList: instanceIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 补录计划重跑
    ///
    /// 按补录计划批量重跑/选择补录计划→补录任务→补录实例，点击重跑
    @inlinable
    public func rerunOpsMakePlanInstances(projectId: String, planId: String, instanceIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RerunOpsMakePlanInstancesResponse {
        try await self.rerunOpsMakePlanInstances(.init(projectId: projectId, planId: planId, instanceIdList: instanceIdList), region: region, logger: logger, on: eventLoop)
    }
}
