//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Wedata {
    /// CreateIntegrationNode请求参数结构体
    public struct CreateIntegrationNodeRequest: TCRequestModel {
        /// 集成节点信息
        public let nodeInfo: IntegrationNodeInfo

        /// 项目id
        public let projectId: String

        /// 任务类型
        public let taskType: UInt64?

        public init(nodeInfo: IntegrationNodeInfo, projectId: String, taskType: UInt64? = nil) {
            self.nodeInfo = nodeInfo
            self.projectId = projectId
            self.taskType = taskType
        }

        enum CodingKeys: String, CodingKey {
            case nodeInfo = "NodeInfo"
            case projectId = "ProjectId"
            case taskType = "TaskType"
        }
    }

    /// CreateIntegrationNode返回参数结构体
    public struct CreateIntegrationNodeResponse: TCResponseModel {
        /// 节点
        public let id: String

        /// 当前任务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 创建集成节点
    @inlinable
    public func createIntegrationNode(_ input: CreateIntegrationNodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateIntegrationNodeResponse> {
        self.client.execute(action: "CreateIntegrationNode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建集成节点
    @inlinable
    public func createIntegrationNode(_ input: CreateIntegrationNodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateIntegrationNodeResponse {
        try await self.client.execute(action: "CreateIntegrationNode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建集成节点
    @inlinable
    public func createIntegrationNode(nodeInfo: IntegrationNodeInfo, projectId: String, taskType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateIntegrationNodeResponse> {
        self.createIntegrationNode(CreateIntegrationNodeRequest(nodeInfo: nodeInfo, projectId: projectId, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }

    /// 创建集成节点
    @inlinable
    public func createIntegrationNode(nodeInfo: IntegrationNodeInfo, projectId: String, taskType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateIntegrationNodeResponse {
        try await self.createIntegrationNode(CreateIntegrationNodeRequest(nodeInfo: nodeInfo, projectId: projectId, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }
}
