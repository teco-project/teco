//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wedata {
    /// ModifyBaselineTaskAlarmStatus请求参数结构体
    public struct ModifyBaselineTaskAlarmStatusRequest: TCRequest {
        /// 是否告警. 取值范围:
        /// - true: 开启告警;
        /// - false: 关闭告警
        public let isAlarm: String

        /// 基线任务实例id
        public let id: UInt64

        /// 项目id
        public let projectId: String

        public init(isAlarm: String, id: UInt64, projectId: String) {
            self.isAlarm = isAlarm
            self.id = id
            self.projectId = projectId
        }

        enum CodingKeys: String, CodingKey {
            case isAlarm = "IsAlarm"
            case id = "Id"
            case projectId = "ProjectId"
        }
    }

    /// ModifyBaselineTaskAlarmStatus返回参数结构体
    public struct ModifyBaselineTaskAlarmStatusResponse: TCResponse {
        /// 成功或失败
        public let data: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 编辑基线实例中任务告警状态
    @inlinable
    public func modifyBaselineTaskAlarmStatus(_ input: ModifyBaselineTaskAlarmStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBaselineTaskAlarmStatusResponse> {
        self.client.execute(action: "ModifyBaselineTaskAlarmStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑基线实例中任务告警状态
    @inlinable
    public func modifyBaselineTaskAlarmStatus(_ input: ModifyBaselineTaskAlarmStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBaselineTaskAlarmStatusResponse {
        try await self.client.execute(action: "ModifyBaselineTaskAlarmStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑基线实例中任务告警状态
    @inlinable
    public func modifyBaselineTaskAlarmStatus(isAlarm: String, id: UInt64, projectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBaselineTaskAlarmStatusResponse> {
        self.modifyBaselineTaskAlarmStatus(.init(isAlarm: isAlarm, id: id, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑基线实例中任务告警状态
    @inlinable
    public func modifyBaselineTaskAlarmStatus(isAlarm: String, id: UInt64, projectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBaselineTaskAlarmStatusResponse {
        try await self.modifyBaselineTaskAlarmStatus(.init(isAlarm: isAlarm, id: id, projectId: projectId), region: region, logger: logger, on: eventLoop)
    }
}
