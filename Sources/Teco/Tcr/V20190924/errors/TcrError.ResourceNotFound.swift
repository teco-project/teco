//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTcrError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case errNoNamespace = "ResourceNotFound.ErrNoNamespace"
            case errNoRepo = "ResourceNotFound.ErrNoRepo"
            case errNoTag = "ResourceNotFound.ErrNoTag"
            case errNoTrigger = "ResourceNotFound.ErrNoTrigger"
            case errNoUser = "ResourceNotFound.ErrNoUser"
            case tcrResourceNotFound = "ResourceNotFound.TcrResourceNotFound"
            case other = "ResourceNotFound"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 用户没有创建命名空间。
        public static var errNoNamespace: ResourceNotFound {
            ResourceNotFound(.errNoNamespace)
        }
        
        /// 仓库不存在。
        public static var errNoRepo: ResourceNotFound {
            ResourceNotFound(.errNoRepo)
        }
        
        /// tag不存在。
        public static var errNoTag: ResourceNotFound {
            ResourceNotFound(.errNoTag)
        }
        
        /// 触发器不存在。
        public static var errNoTrigger: ResourceNotFound {
            ResourceNotFound(.errNoTrigger)
        }
        
        /// 用户不存在（未注册）。
        public static var errNoUser: ResourceNotFound {
            ResourceNotFound(.errNoUser)
        }
        
        /// Tcr实例中的资源未找到。
        public static var tcrResourceNotFound: ResourceNotFound {
            ResourceNotFound(.tcrResourceNotFound)
        }
        
        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }
    }
}

extension TCTcrError.ResourceNotFound: Equatable {
    public static func == (lhs: TCTcrError.ResourceNotFound, rhs: TCTcrError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTcrError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTcrError.ResourceNotFound {
    public func toTcrError() -> TCTcrError {
        guard let code = TCTcrError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTcrError(code, context: self.context)
    }
}