//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcr {
    /// DeleteSignaturePolicy请求参数结构体
    public struct DeleteSignaturePolicyRequest: TCRequest {
        /// 实例ID
        public let registryId: String

        /// 命名空间的名称
        public let namespaceName: String

        public init(registryId: String, namespaceName: String) {
            self.registryId = registryId
            self.namespaceName = namespaceName
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case namespaceName = "NamespaceName"
        }
    }

    /// DeleteSignaturePolicy返回参数结构体
    public struct DeleteSignaturePolicyResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除命名空间加签策略
    @inlinable @discardableResult
    public func deleteSignaturePolicy(_ input: DeleteSignaturePolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteSignaturePolicyResponse> {
        self.client.execute(action: "DeleteSignaturePolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除命名空间加签策略
    @inlinable @discardableResult
    public func deleteSignaturePolicy(_ input: DeleteSignaturePolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteSignaturePolicyResponse {
        try await self.client.execute(action: "DeleteSignaturePolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除命名空间加签策略
    @inlinable @discardableResult
    public func deleteSignaturePolicy(registryId: String, namespaceName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteSignaturePolicyResponse> {
        self.deleteSignaturePolicy(.init(registryId: registryId, namespaceName: namespaceName), region: region, logger: logger, on: eventLoop)
    }

    /// 删除命名空间加签策略
    @inlinable @discardableResult
    public func deleteSignaturePolicy(registryId: String, namespaceName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteSignaturePolicyResponse {
        try await self.deleteSignaturePolicy(.init(registryId: registryId, namespaceName: namespaceName), region: region, logger: logger, on: eventLoop)
    }
}
