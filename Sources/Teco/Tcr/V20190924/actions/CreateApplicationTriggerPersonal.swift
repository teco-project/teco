//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tcr {
    /// CreateApplicationTriggerPersonal请求参数结构体
    public struct CreateApplicationTriggerPersonalRequest: TCRequestModel {
        /// 触发器关联的镜像仓库，library/test格式
        public let repoName: String

        /// 触发器名称
        public let triggerName: String

        /// 触发方式，"all"全部触发，"taglist"指定tag触发，"regex"正则触发
        public let invokeMethod: String

        /// 应用所在TKE集群ID
        public let clusterId: String

        /// 应用所在TKE集群命名空间
        public let namespace: String

        /// 应用所在TKE集群工作负载类型,支持Deployment、StatefulSet、DaemonSet、CronJob、Job。
        public let workloadType: String

        /// 应用所在TKE集群工作负载名称
        public let workloadName: String

        /// 应用所在TKE集群工作负载下容器名称
        public let containerName: String

        /// 应用所在TKE集群地域
        public let clusterRegion: Int64

        /// 触发方式对应的表达式
        public let invokeExpr: String?

        public init(repoName: String, triggerName: String, invokeMethod: String, clusterId: String, namespace: String, workloadType: String, workloadName: String, containerName: String, clusterRegion: Int64, invokeExpr: String? = nil) {
            self.repoName = repoName
            self.triggerName = triggerName
            self.invokeMethod = invokeMethod
            self.clusterId = clusterId
            self.namespace = namespace
            self.workloadType = workloadType
            self.workloadName = workloadName
            self.containerName = containerName
            self.clusterRegion = clusterRegion
            self.invokeExpr = invokeExpr
        }

        enum CodingKeys: String, CodingKey {
            case repoName = "RepoName"
            case triggerName = "TriggerName"
            case invokeMethod = "InvokeMethod"
            case clusterId = "ClusterId"
            case namespace = "Namespace"
            case workloadType = "WorkloadType"
            case workloadName = "WorkloadName"
            case containerName = "ContainerName"
            case clusterRegion = "ClusterRegion"
            case invokeExpr = "InvokeExpr"
        }
    }

    /// CreateApplicationTriggerPersonal返回参数结构体
    public struct CreateApplicationTriggerPersonalResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建应用更新触发器
    ///
    /// 用于创建应用更新触发器
    @inlinable @discardableResult
    public func createApplicationTriggerPersonal(_ input: CreateApplicationTriggerPersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApplicationTriggerPersonalResponse> {
        self.client.execute(action: "CreateApplicationTriggerPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建应用更新触发器
    ///
    /// 用于创建应用更新触发器
    @inlinable @discardableResult
    public func createApplicationTriggerPersonal(_ input: CreateApplicationTriggerPersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApplicationTriggerPersonalResponse {
        try await self.client.execute(action: "CreateApplicationTriggerPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建应用更新触发器
    ///
    /// 用于创建应用更新触发器
    @inlinable @discardableResult
    public func createApplicationTriggerPersonal(repoName: String, triggerName: String, invokeMethod: String, clusterId: String, namespace: String, workloadType: String, workloadName: String, containerName: String, clusterRegion: Int64, invokeExpr: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApplicationTriggerPersonalResponse> {
        self.createApplicationTriggerPersonal(.init(repoName: repoName, triggerName: triggerName, invokeMethod: invokeMethod, clusterId: clusterId, namespace: namespace, workloadType: workloadType, workloadName: workloadName, containerName: containerName, clusterRegion: clusterRegion, invokeExpr: invokeExpr), region: region, logger: logger, on: eventLoop)
    }

    /// 创建应用更新触发器
    ///
    /// 用于创建应用更新触发器
    @inlinable @discardableResult
    public func createApplicationTriggerPersonal(repoName: String, triggerName: String, invokeMethod: String, clusterId: String, namespace: String, workloadType: String, workloadName: String, containerName: String, clusterRegion: Int64, invokeExpr: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApplicationTriggerPersonalResponse {
        try await self.createApplicationTriggerPersonal(.init(repoName: repoName, triggerName: triggerName, invokeMethod: invokeMethod, clusterId: clusterId, namespace: namespace, workloadType: workloadType, workloadName: workloadName, containerName: containerName, clusterRegion: clusterRegion, invokeExpr: invokeExpr), region: region, logger: logger, on: eventLoop)
    }
}
