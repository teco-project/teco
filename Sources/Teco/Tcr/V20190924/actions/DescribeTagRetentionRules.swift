//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore
import TecoPaginationHelpers

extension Tcr {
    /// DescribeTagRetentionRules请求参数结构体
    public struct DescribeTagRetentionRulesRequest: TCPaginatedRequest {
        /// 主实例iD
        public let registryId: String

        /// 命名空间的名称
        public let namespaceName: String?

        /// 分页PageSize
        public let limit: Int64?

        /// 分页Page
        public let offset: Int64?

        public init(registryId: String, namespaceName: String? = nil, limit: Int64? = nil, offset: Int64? = nil) {
            self.registryId = registryId
            self.namespaceName = namespaceName
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case namespaceName = "NamespaceName"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTagRetentionRulesResponse) -> DescribeTagRetentionRulesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeTagRetentionRulesRequest(registryId: self.registryId, namespaceName: self.namespaceName, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribeTagRetentionRules返回参数结构体
    public struct DescribeTagRetentionRulesResponse: TCPaginatedResponse {
        /// 版本保留策略列表
        public let retentionPolicyList: [RetentionPolicy]

        /// 版本保留策略总数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case retentionPolicyList = "RetentionPolicyList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [RetentionPolicy] {
            self.retentionPolicyList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询版本保留规则
    @inlinable
    public func describeTagRetentionRules(_ input: DescribeTagRetentionRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTagRetentionRulesResponse> {
        self.client.execute(action: "DescribeTagRetentionRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询版本保留规则
    @inlinable
    public func describeTagRetentionRules(_ input: DescribeTagRetentionRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTagRetentionRulesResponse {
        try await self.client.execute(action: "DescribeTagRetentionRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询版本保留规则
    @inlinable
    public func describeTagRetentionRules(registryId: String, namespaceName: String? = nil, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTagRetentionRulesResponse> {
        self.describeTagRetentionRules(.init(registryId: registryId, namespaceName: namespaceName, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询版本保留规则
    @inlinable
    public func describeTagRetentionRules(registryId: String, namespaceName: String? = nil, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTagRetentionRulesResponse {
        try await self.describeTagRetentionRules(.init(registryId: registryId, namespaceName: namespaceName, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询版本保留规则
    @inlinable
    public func describeTagRetentionRulesPaginated(_ input: DescribeTagRetentionRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RetentionPolicy])> {
        self.client.paginate(input: input, region: region, command: self.describeTagRetentionRules, logger: logger, on: eventLoop)
    }

    /// 查询版本保留规则
    @inlinable @discardableResult
    public func describeTagRetentionRulesPaginated(_ input: DescribeTagRetentionRulesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTagRetentionRulesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTagRetentionRules, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询版本保留规则
    ///
    /// - Returns: `AsyncSequence`s of `RetentionPolicy` and `DescribeTagRetentionRulesResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTagRetentionRulesPaginator(_ input: DescribeTagRetentionRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTagRetentionRulesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTagRetentionRules, logger: logger, on: eventLoop)
    }
}
