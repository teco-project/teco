//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcr {
    /// DuplicateImage请求参数结构体
    public struct DuplicateImageRequest: TCRequest {
        /// 实例id
        public let registryId: String

        /// 源命名空间名称
        public let sourceNamespace: String

        /// 源镜像仓库名称
        public let sourceRepo: String

        /// 源镜像tag或digest值，目前仅支持tag
        public let sourceReference: String

        /// 目标镜像版本
        public let destinationTag: String

        /// 目标命名空间，不填默认与源一致
        public let destinationNamespace: String?

        /// 目标镜像仓库，不填默认与源一致
        public let destinationRepo: String?

        /// 是否覆盖
        public let override: Bool?

        public init(registryId: String, sourceNamespace: String, sourceRepo: String, sourceReference: String, destinationTag: String, destinationNamespace: String? = nil, destinationRepo: String? = nil, override: Bool? = nil) {
            self.registryId = registryId
            self.sourceNamespace = sourceNamespace
            self.sourceRepo = sourceRepo
            self.sourceReference = sourceReference
            self.destinationTag = destinationTag
            self.destinationNamespace = destinationNamespace
            self.destinationRepo = destinationRepo
            self.override = override
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case sourceNamespace = "SourceNamespace"
            case sourceRepo = "SourceRepo"
            case sourceReference = "SourceReference"
            case destinationTag = "DestinationTag"
            case destinationNamespace = "DestinationNamespace"
            case destinationRepo = "DestinationRepo"
            case override = "Override"
        }
    }

    /// DuplicateImage返回参数结构体
    public struct DuplicateImageResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 复制企业版仓库镜像版本
    ///
    /// 用于在企业版镜像仓库中复制镜像版本
    @inlinable @discardableResult
    public func duplicateImage(_ input: DuplicateImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DuplicateImageResponse> {
        self.client.execute(action: "DuplicateImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 复制企业版仓库镜像版本
    ///
    /// 用于在企业版镜像仓库中复制镜像版本
    @inlinable @discardableResult
    public func duplicateImage(_ input: DuplicateImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DuplicateImageResponse {
        try await self.client.execute(action: "DuplicateImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 复制企业版仓库镜像版本
    ///
    /// 用于在企业版镜像仓库中复制镜像版本
    @inlinable @discardableResult
    public func duplicateImage(registryId: String, sourceNamespace: String, sourceRepo: String, sourceReference: String, destinationTag: String, destinationNamespace: String? = nil, destinationRepo: String? = nil, override: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DuplicateImageResponse> {
        self.duplicateImage(.init(registryId: registryId, sourceNamespace: sourceNamespace, sourceRepo: sourceRepo, sourceReference: sourceReference, destinationTag: destinationTag, destinationNamespace: destinationNamespace, destinationRepo: destinationRepo, override: override), region: region, logger: logger, on: eventLoop)
    }

    /// 复制企业版仓库镜像版本
    ///
    /// 用于在企业版镜像仓库中复制镜像版本
    @inlinable @discardableResult
    public func duplicateImage(registryId: String, sourceNamespace: String, sourceRepo: String, sourceReference: String, destinationTag: String, destinationNamespace: String? = nil, destinationRepo: String? = nil, override: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DuplicateImageResponse {
        try await self.duplicateImage(.init(registryId: registryId, sourceNamespace: sourceNamespace, sourceRepo: sourceRepo, sourceReference: sourceReference, destinationTag: destinationTag, destinationNamespace: destinationNamespace, destinationRepo: destinationRepo, override: override), region: region, logger: logger, on: eventLoop)
    }
}
