//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcr {
    /// DeleteApplicationTriggerPersonal请求参数结构体
    public struct DeleteApplicationTriggerPersonalRequest: TCRequestModel {
        /// 触发器名称
        public let triggerName: String

        public init(triggerName: String) {
            self.triggerName = triggerName
        }

        enum CodingKeys: String, CodingKey {
            case triggerName = "TriggerName"
        }
    }

    /// DeleteApplicationTriggerPersonal返回参数结构体
    public struct DeleteApplicationTriggerPersonalResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除应用更新触发器
    ///
    /// 用于删除应用更新触发器
    @inlinable @discardableResult
    public func deleteApplicationTriggerPersonal(_ input: DeleteApplicationTriggerPersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteApplicationTriggerPersonalResponse> {
        self.client.execute(action: "DeleteApplicationTriggerPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除应用更新触发器
    ///
    /// 用于删除应用更新触发器
    @inlinable @discardableResult
    public func deleteApplicationTriggerPersonal(_ input: DeleteApplicationTriggerPersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteApplicationTriggerPersonalResponse {
        try await self.client.execute(action: "DeleteApplicationTriggerPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除应用更新触发器
    ///
    /// 用于删除应用更新触发器
    @inlinable @discardableResult
    public func deleteApplicationTriggerPersonal(triggerName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteApplicationTriggerPersonalResponse> {
        let input = DeleteApplicationTriggerPersonalRequest(triggerName: triggerName)
        return self.client.execute(action: "DeleteApplicationTriggerPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除应用更新触发器
    ///
    /// 用于删除应用更新触发器
    @inlinable @discardableResult
    public func deleteApplicationTriggerPersonal(triggerName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteApplicationTriggerPersonalResponse {
        let input = DeleteApplicationTriggerPersonalRequest(triggerName: triggerName)
        return try await self.client.execute(action: "DeleteApplicationTriggerPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
