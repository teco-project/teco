//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcr {
    /// ModifyNamespace请求参数结构体
    public struct ModifyNamespaceRequest: TCRequestModel {
        /// 实例Id
        public let registryId: String

        /// 命名空间名称
        public let namespaceName: String

        /// 访问级别，True为公开，False为私有
        public let isPublic: Bool

        public init(registryId: String, namespaceName: String, isPublic: Bool) {
            self.registryId = registryId
            self.namespaceName = namespaceName
            self.isPublic = isPublic
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case namespaceName = "NamespaceName"
            case isPublic = "IsPublic"
        }
    }

    /// ModifyNamespace返回参数结构体
    public struct ModifyNamespaceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新命名空间信息
    ///
    /// 更新命名空间信息，当前仅支持修改命名空间访问级别
    @inlinable @discardableResult
    public func modifyNamespace(_ input: ModifyNamespaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyNamespaceResponse> {
        self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新命名空间信息
    ///
    /// 更新命名空间信息，当前仅支持修改命名空间访问级别
    @inlinable @discardableResult
    public func modifyNamespace(_ input: ModifyNamespaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyNamespaceResponse {
        try await self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新命名空间信息
    ///
    /// 更新命名空间信息，当前仅支持修改命名空间访问级别
    @inlinable @discardableResult
    public func modifyNamespace(registryId: String, namespaceName: String, isPublic: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyNamespaceResponse> {
        let input = ModifyNamespaceRequest(registryId: registryId, namespaceName: namespaceName, isPublic: isPublic)
        return self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新命名空间信息
    ///
    /// 更新命名空间信息，当前仅支持修改命名空间访问级别
    @inlinable @discardableResult
    public func modifyNamespace(registryId: String, namespaceName: String, isPublic: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyNamespaceResponse {
        let input = ModifyNamespaceRequest(registryId: registryId, namespaceName: namespaceName, isPublic: isPublic)
        return try await self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
