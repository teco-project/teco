//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Tcr {
    /// CreateServiceAccount请求参数结构体
    public struct CreateServiceAccountRequest: TCRequest {
        /// 实例Id
        public let registryId: String

        /// 服务级账号名
        public let name: String

        /// 策略列表
        public let permissions: [Permission]

        /// 服务级账号描述
        public let description: String?

        /// 有效期(单位：天)，从当前时间开始计算，优先级高于ExpiresAt
        public let duration: Int64?

        /// 过期时间（时间戳，单位:毫秒）
        public let expiresAt: Int64?

        /// 是否禁用服务级账号
        public let disable: Bool?

        public init(registryId: String, name: String, permissions: [Permission], description: String? = nil, duration: Int64? = nil, expiresAt: Int64? = nil, disable: Bool? = nil) {
            self.registryId = registryId
            self.name = name
            self.permissions = permissions
            self.description = description
            self.duration = duration
            self.expiresAt = expiresAt
            self.disable = disable
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case name = "Name"
            case permissions = "Permissions"
            case description = "Description"
            case duration = "Duration"
            case expiresAt = "ExpiresAt"
            case disable = "Disable"
        }
    }

    /// CreateServiceAccount返回参数结构体
    public struct CreateServiceAccountResponse: TCResponse {
        /// 服务级账号名（会自动加上前缀tcr$）
        public let name: String

        /// 服务级账号密码，仅展示一次，请注意留存
        public let password: String

        /// 服务级账号失效时间（时间戳）
        public let expiresAt: Int64

        /// 服务级账号创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$createTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case password = "Password"
            case expiresAt = "ExpiresAt"
            case createTime = "CreateTime"
            case requestId = "RequestId"
        }
    }

    /// 创建服务级账号
    ///
    /// 创建服务级账户
    @inlinable
    public func createServiceAccount(_ input: CreateServiceAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateServiceAccountResponse> {
        self.client.execute(action: "CreateServiceAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建服务级账号
    ///
    /// 创建服务级账户
    @inlinable
    public func createServiceAccount(_ input: CreateServiceAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateServiceAccountResponse {
        try await self.client.execute(action: "CreateServiceAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建服务级账号
    ///
    /// 创建服务级账户
    @inlinable
    public func createServiceAccount(registryId: String, name: String, permissions: [Permission], description: String? = nil, duration: Int64? = nil, expiresAt: Int64? = nil, disable: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateServiceAccountResponse> {
        self.createServiceAccount(.init(registryId: registryId, name: name, permissions: permissions, description: description, duration: duration, expiresAt: expiresAt, disable: disable), region: region, logger: logger, on: eventLoop)
    }

    /// 创建服务级账号
    ///
    /// 创建服务级账户
    @inlinable
    public func createServiceAccount(registryId: String, name: String, permissions: [Permission], description: String? = nil, duration: Int64? = nil, expiresAt: Int64? = nil, disable: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateServiceAccountResponse {
        try await self.createServiceAccount(.init(registryId: registryId, name: name, permissions: permissions, description: description, duration: duration, expiresAt: expiresAt, disable: disable), region: region, logger: logger, on: eventLoop)
    }
}
