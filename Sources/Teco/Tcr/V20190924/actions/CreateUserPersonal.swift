//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcr {
    /// CreateUserPersonal请求参数结构体
    public struct CreateUserPersonalRequest: TCRequest {
        /// 用户密码，密码必须为8到16位
        public let password: String

        public init(password: String) {
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case password = "Password"
        }
    }

    /// CreateUserPersonal返回参数结构体
    public struct CreateUserPersonalResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建个人用户
    @inlinable @discardableResult
    public func createUserPersonal(_ input: CreateUserPersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserPersonalResponse> {
        self.client.execute(action: "CreateUserPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建个人用户
    @inlinable @discardableResult
    public func createUserPersonal(_ input: CreateUserPersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserPersonalResponse {
        try await self.client.execute(action: "CreateUserPersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建个人用户
    @inlinable @discardableResult
    public func createUserPersonal(password: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserPersonalResponse> {
        self.createUserPersonal(.init(password: password), region: region, logger: logger, on: eventLoop)
    }

    /// 创建个人用户
    @inlinable @discardableResult
    public func createUserPersonal(password: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserPersonalResponse {
        try await self.createUserPersonal(.init(password: password), region: region, logger: logger, on: eventLoop)
    }
}
