//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcr {
    /// DescribeExternalEndpointStatus请求参数结构体
    public struct DescribeExternalEndpointStatusRequest: TCRequestModel {
        /// 实例Id
        public let registryId: String
        
        public init (registryId: String) {
            self.registryId = registryId
        }
        
        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
        }
    }
    
    /// DescribeExternalEndpointStatus返回参数结构体
    public struct DescribeExternalEndpointStatusResponse: TCResponseModel {
        /// 开启公网访问状态，开启中（Opening）、已开启（Opened）、关闭（Closed）
        public let status: String
        
        /// 原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reason: String?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case reason = "Reason"
            case requestId = "RequestId"
        }
    }
    
    /// 查询实例公网访问入口状态
    @inlinable
    public func describeExternalEndpointStatus(_ input: DescribeExternalEndpointStatusRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeExternalEndpointStatusResponse > {
        self.client.execute(action: "DescribeExternalEndpointStatus", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询实例公网访问入口状态
    @inlinable
    public func describeExternalEndpointStatus(_ input: DescribeExternalEndpointStatusRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExternalEndpointStatusResponse {
        try await self.client.execute(action: "DescribeExternalEndpointStatus", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
