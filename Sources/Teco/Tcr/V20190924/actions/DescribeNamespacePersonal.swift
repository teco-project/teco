//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore
import TecoPaginationHelpers

extension Tcr {
    /// DescribeNamespacePersonal请求参数结构体
    public struct DescribeNamespacePersonalRequest: TCPaginatedRequest {
        /// 命名空间，支持模糊查询
        public let namespace: String

        /// 单页数量
        public let limit: Int64

        /// 偏移量
        public let offset: Int64

        public init(namespace: String, limit: Int64, offset: Int64) {
            self.namespace = namespace
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeNamespacePersonalResponse) -> DescribeNamespacePersonalRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeNamespacePersonalRequest(namespace: self.namespace, limit: self.limit, offset: self.offset + .init(response.getItems().count))
        }
    }

    /// DescribeNamespacePersonal返回参数结构体
    public struct DescribeNamespacePersonalResponse: TCPaginatedResponse {
        /// 用户命名空间返回信息
        public let data: NamespaceInfoResp

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [NamespaceInfo] {
            self.data.namespaceInfo
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data.namespaceCount
        }
    }

    /// 查询个人版命名空间信息
    @inlinable
    public func describeNamespacePersonal(_ input: DescribeNamespacePersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNamespacePersonalResponse> {
        self.client.execute(action: "DescribeNamespacePersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询个人版命名空间信息
    @inlinable
    public func describeNamespacePersonal(_ input: DescribeNamespacePersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNamespacePersonalResponse {
        try await self.client.execute(action: "DescribeNamespacePersonal", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询个人版命名空间信息
    @inlinable
    public func describeNamespacePersonal(namespace: String, limit: Int64, offset: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNamespacePersonalResponse> {
        self.describeNamespacePersonal(.init(namespace: namespace, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询个人版命名空间信息
    @inlinable
    public func describeNamespacePersonal(namespace: String, limit: Int64, offset: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNamespacePersonalResponse {
        try await self.describeNamespacePersonal(.init(namespace: namespace, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询个人版命名空间信息
    @inlinable
    public func describeNamespacePersonalPaginated(_ input: DescribeNamespacePersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [NamespaceInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeNamespacePersonal, logger: logger, on: eventLoop)
    }

    /// 查询个人版命名空间信息
    @inlinable @discardableResult
    public func describeNamespacePersonalPaginated(_ input: DescribeNamespacePersonalRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeNamespacePersonalResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeNamespacePersonal, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询个人版命名空间信息
    ///
    /// - Returns: `AsyncSequence`s of `NamespaceInfo` and `DescribeNamespacePersonalResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeNamespacePersonalPaginator(_ input: DescribeNamespacePersonalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeNamespacePersonalRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeNamespacePersonal, logger: logger, on: eventLoop)
    }
}
