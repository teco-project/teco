//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcr {
    /// 管理实例同步
    @inlinable
    public func manageReplication(_ input: ManageReplicationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ManageReplicationResponse > {
        self.client.execute(action: "ManageReplication", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 管理实例同步
    @inlinable
    public func manageReplication(_ input: ManageReplicationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ManageReplicationResponse {
        try await self.client.execute(action: "ManageReplication", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ManageReplication请求参数结构体
    public struct ManageReplicationRequest: TCRequestModel {
        /// 复制源实例ID
        public let sourceRegistryId: String
        
        /// 复制目标实例ID
        public let destinationRegistryId: String
        
        /// 同步规则
        public let rule: ReplicationRule
        
        /// 规则描述
        public let description: String?
        
        /// 目标实例的地域ID，如广州是1
        public let destinationRegionId: UInt64?
        
        /// 开启跨主账号实例同步配置项
        public let peerReplicationOption: PeerReplicationOption
        
        public init (sourceRegistryId: String, destinationRegistryId: String, rule: ReplicationRule, description: String?, destinationRegionId: UInt64?, peerReplicationOption: PeerReplicationOption) {
            self.sourceRegistryId = sourceRegistryId
            self.destinationRegistryId = destinationRegistryId
            self.rule = rule
            self.description = description
            self.destinationRegionId = destinationRegionId
            self.peerReplicationOption = peerReplicationOption
        }
        
        enum CodingKeys: String, CodingKey {
            case sourceRegistryId = "SourceRegistryId"
            case destinationRegistryId = "DestinationRegistryId"
            case rule = "Rule"
            case description = "Description"
            case destinationRegionId = "DestinationRegionId"
            case peerReplicationOption = "PeerReplicationOption"
        }
    }
    
    /// ManageReplication返回参数结构体
    public struct ManageReplicationResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}
