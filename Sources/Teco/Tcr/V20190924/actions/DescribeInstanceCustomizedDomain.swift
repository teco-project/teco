//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcr {
    /// DescribeInstanceCustomizedDomain请求参数结构体
    public struct DescribeInstanceCustomizedDomainRequest: TCRequestModel {
        /// 主实例iD
        public let registryId: String

        /// 分页Limit
        public let limit: Int64?

        /// 分页Offset
        public let offset: Int64?

        public init(registryId: String, limit: Int64? = nil, offset: Int64? = nil) {
            self.registryId = registryId
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case limit = "Limit"
            case offset = "Offset"
        }
    }

    /// DescribeInstanceCustomizedDomain返回参数结构体
    public struct DescribeInstanceCustomizedDomainResponse: TCResponseModel {
        /// 域名信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domainInfoList: [CustomizedDomainInfo]?

        /// 总个数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case domainInfoList = "DomainInfoList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询实例自定义域名列表
    @inlinable
    public func describeInstanceCustomizedDomain(_ input: DescribeInstanceCustomizedDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceCustomizedDomainResponse> {
        self.client.execute(action: "DescribeInstanceCustomizedDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例自定义域名列表
    @inlinable
    public func describeInstanceCustomizedDomain(_ input: DescribeInstanceCustomizedDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceCustomizedDomainResponse {
        try await self.client.execute(action: "DescribeInstanceCustomizedDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例自定义域名列表
    @inlinable
    public func describeInstanceCustomizedDomain(registryId: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceCustomizedDomainResponse> {
        self.describeInstanceCustomizedDomain(DescribeInstanceCustomizedDomainRequest(registryId: registryId, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例自定义域名列表
    @inlinable
    public func describeInstanceCustomizedDomain(registryId: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceCustomizedDomainResponse {
        try await self.describeInstanceCustomizedDomain(DescribeInstanceCustomizedDomainRequest(registryId: registryId, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }
}
