//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcr {
    /// CreateNamespacePersonal请求参数结构体
    public struct CreateNamespacePersonalRequest: TCRequestModel {
        /// 命名空间名称
        public let namespace: String

        public init(namespace: String) {
            self.namespace = namespace
        }

        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
        }
    }

    /// CreateNamespacePersonal返回参数结构体
    public struct CreateNamespacePersonalResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建个人版命名空间
    ///
    /// 创建个人版镜像仓库命名空间，此命名空间全局唯一
    @inlinable
    public func createNamespacePersonal(_ input: CreateNamespacePersonalRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNamespacePersonalResponse> {
        self.client.execute(action: "CreateNamespacePersonal", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建个人版命名空间
    ///
    /// 创建个人版镜像仓库命名空间，此命名空间全局唯一
    @inlinable
    public func createNamespacePersonal(_ input: CreateNamespacePersonalRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNamespacePersonalResponse {
        try await self.client.execute(action: "CreateNamespacePersonal", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建个人版命名空间
    ///
    /// 创建个人版镜像仓库命名空间，此命名空间全局唯一
    @inlinable
    public func createNamespacePersonal(namespace: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNamespacePersonalResponse> {
        self.createNamespacePersonal(CreateNamespacePersonalRequest(namespace: namespace), logger: logger, on: eventLoop)
    }

    /// 创建个人版命名空间
    ///
    /// 创建个人版镜像仓库命名空间，此命名空间全局唯一
    @inlinable
    public func createNamespacePersonal(namespace: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNamespacePersonalResponse {
        try await self.createNamespacePersonal(CreateNamespacePersonalRequest(namespace: namespace), logger: logger, on: eventLoop)
    }
}
