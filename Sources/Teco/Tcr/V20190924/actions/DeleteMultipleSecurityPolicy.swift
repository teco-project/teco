//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcr {
    /// DeleteMultipleSecurityPolicy请求参数结构体
    public struct DeleteMultipleSecurityPolicyRequest: TCRequestModel {
        /// 实例Id
        public let registryId: String

        /// 安全组策略
        public let securityGroupPolicySet: [SecurityPolicy]

        public init(registryId: String, securityGroupPolicySet: [SecurityPolicy]) {
            self.registryId = registryId
            self.securityGroupPolicySet = securityGroupPolicySet
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case securityGroupPolicySet = "SecurityGroupPolicySet"
        }
    }

    /// DeleteMultipleSecurityPolicy返回参数结构体
    public struct DeleteMultipleSecurityPolicyResponse: TCResponseModel {
        /// 实例Id
        public let registryId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case requestId = "RequestId"
        }
    }

    /// 删除实例公网访问多白名单策略
    ///
    /// 用于删除实例多个公网访问白名单策略
    @inlinable
    public func deleteMultipleSecurityPolicy(_ input: DeleteMultipleSecurityPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteMultipleSecurityPolicyResponse> {
        self.client.execute(action: "DeleteMultipleSecurityPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除实例公网访问多白名单策略
    ///
    /// 用于删除实例多个公网访问白名单策略
    @inlinable
    public func deleteMultipleSecurityPolicy(_ input: DeleteMultipleSecurityPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteMultipleSecurityPolicyResponse {
        try await self.client.execute(action: "DeleteMultipleSecurityPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除实例公网访问多白名单策略
    ///
    /// 用于删除实例多个公网访问白名单策略
    @inlinable
    public func deleteMultipleSecurityPolicy(registryId: String, securityGroupPolicySet: [SecurityPolicy], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteMultipleSecurityPolicyResponse> {
        self.deleteMultipleSecurityPolicy(DeleteMultipleSecurityPolicyRequest(registryId: registryId, securityGroupPolicySet: securityGroupPolicySet), region: region, logger: logger, on: eventLoop)
    }

    /// 删除实例公网访问多白名单策略
    ///
    /// 用于删除实例多个公网访问白名单策略
    @inlinable
    public func deleteMultipleSecurityPolicy(registryId: String, securityGroupPolicySet: [SecurityPolicy], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteMultipleSecurityPolicyResponse {
        try await self.deleteMultipleSecurityPolicy(DeleteMultipleSecurityPolicyRequest(registryId: registryId, securityGroupPolicySet: securityGroupPolicySet), region: region, logger: logger, on: eventLoop)
    }
}
