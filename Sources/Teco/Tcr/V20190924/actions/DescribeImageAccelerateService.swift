//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tcr {
    /// DescribeImageAccelerateService请求参数结构体
    public struct DescribeImageAccelerateServiceRequest: TCRequestModel {
        /// 实例Id
        public let registryId: String

        public init(registryId: String) {
            self.registryId = registryId
        }

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
        }
    }

    /// DescribeImageAccelerateService返回参数结构体
    public struct DescribeImageAccelerateServiceResponse: TCResponseModel {
        /// 镜像加速状态
        public let status: String

        /// CFS的VIP
        public let cfsvip: String

        /// 是否开通
        public let isEnable: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case cfsvip = "CFSVIP"
            case isEnable = "IsEnable"
            case requestId = "RequestId"
        }
    }

    /// 查询镜像加速服务状态
    @inlinable
    public func describeImageAccelerateService(_ input: DescribeImageAccelerateServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageAccelerateServiceResponse> {
        self.client.execute(action: "DescribeImageAccelerateService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询镜像加速服务状态
    @inlinable
    public func describeImageAccelerateService(_ input: DescribeImageAccelerateServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageAccelerateServiceResponse {
        try await self.client.execute(action: "DescribeImageAccelerateService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询镜像加速服务状态
    @inlinable
    public func describeImageAccelerateService(registryId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageAccelerateServiceResponse> {
        self.describeImageAccelerateService(.init(registryId: registryId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询镜像加速服务状态
    @inlinable
    public func describeImageAccelerateService(registryId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageAccelerateServiceResponse {
        try await self.describeImageAccelerateService(.init(registryId: registryId), region: region, logger: logger, on: eventLoop)
    }
}
