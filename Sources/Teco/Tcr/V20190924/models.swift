//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Tcr {
    /// 内网接入信息
    public struct AccessVpc: TCOutputModel {
        /// Vpc的Id
        public let vpcId: String

        /// 子网Id
        public let subnetId: String

        /// 内网接入状态
        public let status: String

        /// 内网接入Ip
        public let accessIp: String

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case accessIp = "AccessIp"
        }
    }

    /// 自动删除策略信息
    public struct AutoDelStrategyInfo: TCOutputModel {
        /// 用户名
        public let username: String

        /// 仓库名
        public let repoName: String

        /// 类型
        public let type: String

        /// 策略值
        public let value: Int64

        /// Valid
        public let valid: Int64

        /// 创建时间
        public let creationTime: String

        enum CodingKeys: String, CodingKey {
            case username = "Username"
            case repoName = "RepoName"
            case type = "Type"
            case value = "Value"
            case valid = "Valid"
            case creationTime = "CreationTime"
        }
    }

    /// 获取自动删除策略
    public struct AutoDelStrategyInfoResp: TCOutputModel {
        /// 总数目
        public let totalCount: Int64

        /// 自动删除策略列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategyInfo: [AutoDelStrategyInfo]?

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case strategyInfo = "StrategyInfo"
        }
    }

    /// 命名空间漏洞白名单列表
    public struct CVEWhitelistItem: TCInputModel, TCOutputModel {
        /// 漏洞白名单 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cveid: String?

        public init(cveid: String? = nil) {
            self.cveid = cveid
        }

        enum CodingKeys: String, CodingKey {
            case cveid = "CVEID"
        }
    }

    /// 自定义账户
    public struct CustomAccount: TCInputModel, TCOutputModel {
        /// 自定义账户名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 是否禁用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let disable: Bool?

        /// 过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expiresAt: Int64?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        /// 策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let permissions: [Permission]?

        public init(name: String? = nil, description: String? = nil, disable: Bool? = nil, expiresAt: Int64? = nil, createTime: Date? = nil, updateTime: Date? = nil, permissions: [Permission]? = nil) {
            self.name = name
            self.description = description
            self.disable = disable
            self.expiresAt = expiresAt
            self._createTime = .init(wrappedValue: createTime)
            self._updateTime = .init(wrappedValue: updateTime)
            self.permissions = permissions
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case disable = "Disable"
            case expiresAt = "ExpiresAt"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case permissions = "Permissions"
        }
    }

    /// 自定义域名信息
    public struct CustomizedDomainInfo: TCOutputModel {
        /// 实例ID
        public let registryId: String

        /// 证书ID
        public let certId: String

        /// 域名名称
        public let domainName: String

        /// 域名创建状态（SUCCESS, FAILURE, CREATING, DELETING）
        public let status: String

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case certId = "CertId"
            case domainName = "DomainName"
            case status = "Status"
        }
    }

    /// 查询应用更新触发器触发日志返回值
    public struct DescribeApplicationTriggerLogPersonalResp: TCOutputModel {
        /// 返回总数
        public let totalCount: Int64

        /// 触发日志列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logInfo: [TriggerLogResp]?

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case logInfo = "LogInfo"
        }
    }

    /// 拉取触发器列表返回值
    public struct DescribeApplicationTriggerPersonalResp: TCOutputModel {
        /// 返回条目总数
        public let totalCount: Int64

        /// 触发器列表
        public let triggerInfo: [TriggerResp]

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case triggerInfo = "TriggerInfo"
        }
    }

    /// 复制镜像tag返回值
    public struct DupImageTagResp: TCOutputModel {
        /// 镜像Digest值
        public let digest: String

        enum CodingKeys: String, CodingKey {
            case digest = "Digest"
        }
    }

    /// 用于获取收藏仓库的响应
    public struct FavorResp: TCOutputModel {
        /// 收藏仓库的总数
        public let totalCount: Int64

        /// 仓库信息数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repoInfo: [Favors]?

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case repoInfo = "RepoInfo"
        }
    }

    /// 仓库收藏
    public struct Favors: TCOutputModel {
        /// 仓库名字
        public let repoName: String

        /// 仓库类型
        public let repoType: String

        /// Pull总共的次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pullCount: Int64?

        /// 仓库收藏次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let favorCount: Int64?

        /// 仓库是否公开
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `public`: Int64?

        /// 是否为官方所有
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isQcloudOfficial: Bool?

        /// 仓库Tag的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagCount: Int64?

        /// Logo
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logo: String?

        /// 地域
        public let region: String

        /// 地域的Id
        public let regionId: Int64

        enum CodingKeys: String, CodingKey {
            case repoName = "RepoName"
            case repoType = "RepoType"
            case pullCount = "PullCount"
            case favorCount = "FavorCount"
            case `public` = "Public"
            case isQcloudOfficial = "IsQcloudOfficial"
            case tagCount = "TagCount"
            case logo = "Logo"
            case region = "Region"
            case regionId = "RegionId"
        }
    }

    /// 过滤器
    public struct Filter: TCInputModel {
        /// 属性名称, 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
        public let name: String

        /// 属性值, 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// GC 执行信息
    public struct GCJobInfo: TCOutputModel {
        /// 作业 ID
        public let id: Int64

        /// 作业状态
        public let jobStatus: String

        /// 创建时间
        public let creationTime: String

        /// 更新时间
        public let updateTime: String

        /// 调度信息
        public let schedule: Schedule

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case jobStatus = "JobStatus"
            case creationTime = "CreationTime"
            case updateTime = "UpdateTime"
            case schedule = "Schedule"
        }
    }

    /// Header KV
    public struct Header: TCInputModel, TCOutputModel {
        /// Header Key
        public let key: String

        /// Header Values
        public let values: [String]

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    /// 镜像 tag 不可变规则
    public struct ImmutableTagRule: TCInputModel, TCOutputModel {
        /// 仓库匹配规则
        public let repositoryPattern: String

        /// Tag 匹配规则
        public let tagPattern: String

        /// repoMatches或repoExcludes
        public let repositoryDecoration: String

        /// matches或excludes
        public let tagDecoration: String

        /// 禁用规则
        public let disabled: Bool?

        /// 规则 Id
        public let ruleId: Int64?

        /// 命名空间
        public let nsName: String?

        public init(repositoryPattern: String, tagPattern: String, repositoryDecoration: String, tagDecoration: String, disabled: Bool? = nil, ruleId: Int64? = nil, nsName: String? = nil) {
            self.repositoryPattern = repositoryPattern
            self.tagPattern = tagPattern
            self.repositoryDecoration = repositoryDecoration
            self.tagDecoration = tagDecoration
            self.disabled = disabled
            self.ruleId = ruleId
            self.nsName = nsName
        }

        enum CodingKeys: String, CodingKey {
            case repositoryPattern = "RepositoryPattern"
            case tagPattern = "TagPattern"
            case repositoryDecoration = "RepositoryDecoration"
            case tagDecoration = "TagDecoration"
            case disabled = "Disabled"
            case ruleId = "RuleId"
            case nsName = "NsName"
        }
    }

    /// 通用参数字符串键值对
    public struct KeyValueString: TCInputModel, TCOutputModel {
        /// 键
        public let key: String

        /// 值
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 共享镜像仓库用户配额
    public struct Limit: TCOutputModel {
        /// 用户名
        public let username: String

        /// 配额的类型
        public let type: String

        /// 配置的值
        public let value: Int64

        enum CodingKeys: String, CodingKey {
            case username = "Username"
            case type = "Type"
            case value = "Value"
        }
    }

    /// 命名空间信息
    public struct NamespaceInfo: TCOutputModel {
        /// 命名空间
        public let namespace: String

        /// 创建时间
        public let creationTime: String

        /// 命名空间下仓库数量
        public let repoCount: Int64

        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case creationTime = "CreationTime"
            case repoCount = "RepoCount"
        }
    }

    /// 获取命名空间信息返回
    public struct NamespaceInfoResp: TCOutputModel {
        /// 命名空间数量
        public let namespaceCount: Int64

        /// 命名空间信息
        public let namespaceInfo: [NamespaceInfo]

        enum CodingKeys: String, CodingKey {
            case namespaceCount = "NamespaceCount"
            case namespaceInfo = "NamespaceInfo"
        }
    }

    /// NamespaceIsExists返回类型
    public struct NamespaceIsExistsResp: TCOutputModel {
        /// 命名空间是否存在
        public let isExist: Bool

        /// 是否为保留命名空间
        public let isPreserved: Bool

        enum CodingKeys: String, CodingKey {
            case isExist = "IsExist"
            case isPreserved = "IsPreserved"
        }
    }

    /// 跨主账号实例同步参数
    public struct PeerReplicationOption: TCInputModel {
        /// 待同步实例的uin
        public let peerRegistryUin: String

        /// 待同步实例的访问永久Token
        public let peerRegistryToken: String

        /// 是否开启跨主账号实例同步
        public let enablePeerReplication: Bool

        public init(peerRegistryUin: String, peerRegistryToken: String, enablePeerReplication: Bool) {
            self.peerRegistryUin = peerRegistryUin
            self.peerRegistryToken = peerRegistryToken
            self.enablePeerReplication = enablePeerReplication
        }

        enum CodingKeys: String, CodingKey {
            case peerRegistryUin = "PeerRegistryUin"
            case peerRegistryToken = "PeerRegistryToken"
            case enablePeerReplication = "EnablePeerReplication"
        }
    }

    /// 策略
    public struct Permission: TCInputModel, TCOutputModel {
        /// 资源路径，目前仅支持Namespace
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resource: String?

        /// 动作，目前仅支持：tcr:PushRepository、tcr:PullRepository、tcr:CreateRepository、tcr:CreateHelmChart、tcr:DescribeHelmCharts
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let actions: [String]?

        public init(resource: String, actions: [String]) {
            self.resource = resource
            self.actions = actions
        }

        enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case actions = "Actions"
        }
    }

    /// 地域信息
    public struct Region: TCOutputModel {
        /// gz
        public let alias: String

        /// 1
        public let regionId: UInt64

        /// ap-guangzhou
        public let regionName: String

        /// alluser
        public let status: String

        /// remark
        public let remark: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdAt: Date

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updatedAt: Date

        /// id
        public let id: Int64

        enum CodingKeys: String, CodingKey {
            case alias = "Alias"
            case regionId = "RegionId"
            case regionName = "RegionName"
            case status = "Status"
            case remark = "Remark"
            case createdAt = "CreatedAt"
            case updatedAt = "UpdatedAt"
            case id = "Id"
        }
    }

    /// 实例信息结构体
    public struct Registry: TCOutputModel {
        /// 实例ID
        public let registryId: String

        /// 实例名称
        public let registryName: String

        /// 实例规格
        public let registryType: String

        /// 实例状态
        public let status: String

        /// 实例的公共访问地址
        public let publicDomain: String

        /// 实例创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdAt: Date

        /// 地域名称
        public let regionName: String

        /// 地域Id
        public let regionId: UInt64

        /// 是否支持匿名
        public let enableAnonymous: Bool

        /// Token有效时间
        public let tokenValidTime: UInt64

        /// 实例内部访问地址
        public let internalEndpoint: String

        /// 实例云标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSpecification: TagSpecification?

        /// 实例过期时间（预付费）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expiredAt: String?

        /// 实例付费类型，0表示后付费，1表示预付费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMod: Int64?

        /// 预付费续费标识，0表示手动续费，1表示自动续费，2不续费并且不通知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: Int64?

        /// 是否开启实例删除保护，false表示不开启
        public let deletionProtection: Bool?

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case registryName = "RegistryName"
            case registryType = "RegistryType"
            case status = "Status"
            case publicDomain = "PublicDomain"
            case createdAt = "CreatedAt"
            case regionName = "RegionName"
            case regionId = "RegionId"
            case enableAnonymous = "EnableAnonymous"
            case tokenValidTime = "TokenValidTime"
            case internalEndpoint = "InternalEndpoint"
            case tagSpecification = "TagSpecification"
            case expiredAt = "ExpiredAt"
            case payMod = "PayMod"
            case renewFlag = "RenewFlag"
            case deletionProtection = "DeletionProtection"
        }
    }

    /// 实例预付费模式
    public struct RegistryChargePrepaid: TCInputModel {
        /// 购买实例的时长，单位：月
        public let period: Int64

        /// 自动续费标识，0：手动续费，1：自动续费，2：不续费并且不通知
        public let renewFlag: Int64

        public init(period: Int64, renewFlag: Int64) {
            self.period = period
            self.renewFlag = renewFlag
        }

        enum CodingKeys: String, CodingKey {
            case period = "Period"
            case renewFlag = "RenewFlag"
        }
    }

    /// 实例创建过程
    public struct RegistryCondition: TCOutputModel {
        /// 实例创建过程类型
        public let type: String

        /// 实例创建过程状态
        public let status: String

        /// 转换到该过程的简明原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reason: String?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case status = "Status"
            case reason = "Reason"
        }
    }

    /// 实例状态
    public struct RegistryStatus: TCOutputModel {
        /// 实例的Id
        public let registryId: String

        /// 实例的状态
        public let status: String

        /// 附加状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let conditions: [RegistryCondition]?

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case status = "Status"
            case conditions = "Conditions"
        }
    }

    /// 同步规则过滤器
    public struct ReplicationFilter: TCInputModel {
        /// 类型（name、tag和resource）
        public let type: String

        /// 默认为空
        public let value: String?

        public init(type: String, value: String? = nil) {
            self.type = type
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
        }
    }

    /// 同步日志
    public struct ReplicationLog: TCOutputModel {
        /// 资源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceType: String?

        /// 源资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: String?

        /// 目的资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let destination: String?

        /// 同步状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case source = "Source"
            case destination = "Destination"
            case status = "Status"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 企业版复制实例
    public struct ReplicationRegistry: TCOutputModel {
        /// 主实例ID
        public let registryId: String

        /// 复制实例ID
        public let replicationRegistryId: String

        /// 复制实例的地域ID
        public let replicationRegionId: UInt64

        /// 复制实例的地域名称
        public let replicationRegionName: String

        /// 复制实例的状态
        public let status: String

        /// 创建时间
        public let createdAt: String

        enum CodingKeys: String, CodingKey {
            case registryId = "RegistryId"
            case replicationRegistryId = "ReplicationRegistryId"
            case replicationRegionId = "ReplicationRegionId"
            case replicationRegionName = "ReplicationRegionName"
            case status = "Status"
            case createdAt = "CreatedAt"
        }
    }

    /// 同步规则
    public struct ReplicationRule: TCInputModel {
        /// 同步规则名称
        public let name: String

        /// 目标命名空间
        public let destNamespace: String

        /// 是否覆盖
        public let override: Bool

        /// 同步过滤条件
        public let filters: [ReplicationFilter]

        public init(name: String, destNamespace: String, override: Bool, filters: [ReplicationFilter]) {
            self.name = name
            self.destNamespace = destNamespace
            self.override = override
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case destNamespace = "DestNamespace"
            case override = "Override"
            case filters = "Filters"
        }
    }

    /// 仓库的信息
    public struct RepoInfo: TCOutputModel {
        /// 仓库名称
        public let repoName: String

        /// 仓库类型
        public let repoType: String

        /// Tag数量
        public let tagCount: Int64

        /// 是否为公开
        public let `public`: Int64

        /// 是否为用户收藏
        public let isUserFavor: Bool

        /// 是否为腾讯云官方仓库
        public let isQcloudOfficial: Bool

        /// 被收藏的个数
        public let favorCount: Int64

        /// 拉取的数量
        public let pullCount: Int64

        /// 描述
        public let description: String

        /// 仓库创建时间
        public let creationTime: String

        /// 仓库更新时间
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case repoName = "RepoName"
            case repoType = "RepoType"
            case tagCount = "TagCount"
            case `public` = "Public"
            case isUserFavor = "IsUserFavor"
            case isQcloudOfficial = "IsQcloudOfficial"
            case favorCount = "FavorCount"
            case pullCount = "PullCount"
            case description = "Description"
            case creationTime = "CreationTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 仓库信息的返回信息
    public struct RepoInfoResp: TCOutputModel {
        /// 仓库总数
        public let totalCount: Int64

        /// 仓库信息列表
        public let repoInfo: [RepoInfo]

        /// Server信息
        public let server: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case repoInfo = "RepoInfo"
            case server = "Server"
        }
    }

    /// 仓库是否存在的返回值
    public struct RepoIsExistResp: TCOutputModel {
        /// 仓库是否存在
        public let isExist: Bool

        enum CodingKeys: String, CodingKey {
            case isExist = "IsExist"
        }
    }

    /// 查询共享版仓库信息返回
    public struct RepositoryInfoResp: TCOutputModel {
        /// 镜像仓库名字
        public let repoName: String

        /// 镜像仓库类型
        public let repoType: String

        /// 镜像仓库服务地址
        public let server: String

        /// 创建时间
        public let creationTime: String

        /// 镜像仓库描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 是否为公有镜像
        public let `public`: Int64

        /// 下载次数
        public let pullCount: Int64

        /// 收藏次数
        public let favorCount: Int64

        /// 是否为用户收藏
        public let isUserFavor: Bool

        /// 是否为腾讯云官方镜像
        public let isQcloudOfficial: Bool

        enum CodingKeys: String, CodingKey {
            case repoName = "RepoName"
            case repoType = "RepoType"
            case server = "Server"
            case creationTime = "CreationTime"
            case description = "Description"
            case `public` = "Public"
            case pullCount = "PullCount"
            case favorCount = "FavorCount"
            case isUserFavor = "IsUserFavor"
            case isQcloudOfficial = "IsQcloudOfficial"
        }
    }

    /// 用户配额返回值
    public struct RespLimit: TCOutputModel {
        /// 配额信息
        public let limitInfo: [Limit]

        enum CodingKeys: String, CodingKey {
            case limitInfo = "LimitInfo"
        }
    }

    /// 版本保留规则执行
    public struct RetentionExecution: TCOutputModel {
        /// 执行Id
        public let executionId: Int64

        /// 所属规则id
        public let retentionId: Int64

        /// 执行的开始时间
        public let startTime: String

        /// 执行的结束时间
        public let endTime: String

        /// 执行的状态，Failed, Succeed, Stopped, InProgress
        public let status: String

        enum CodingKeys: String, CodingKey {
            case executionId = "ExecutionId"
            case retentionId = "RetentionId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case status = "Status"
        }
    }

    /// 版本保留策略
    public struct RetentionPolicy: TCOutputModel {
        /// 版本保留策略Id
        public let retentionId: Int64

        /// 命名空间的名称
        public let namespaceName: String

        /// 规则列表
        public let retentionRuleList: [RetentionRule]

        /// 定期执行方式
        public let cronSetting: String

        /// 是否启用规则
        public let disabled: Bool

        /// 基于当前时间根据cronSetting后下一次任务要执行的时间，仅做参考使用
        public let nextExecutionTime: String

        enum CodingKeys: String, CodingKey {
            case retentionId = "RetentionId"
            case namespaceName = "NamespaceName"
            case retentionRuleList = "RetentionRuleList"
            case cronSetting = "CronSetting"
            case disabled = "Disabled"
            case nextExecutionTime = "NextExecutionTime"
        }
    }

    /// 版本保留规则
    public struct RetentionRule: TCInputModel {
        /// 支持的策略，可选值为latestPushedK（保留最新推送多少个版本）nDaysSinceLastPush（保留近天内推送）
        public let key: String

        /// 规则设置下的对应值
        public let value: Int64

        public init(key: String, value: Int64) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 版本保留执行的规则
    public struct RetentionTask: TCOutputModel {
        /// 任务Id
        public let taskId: Int64

        /// 所属的规则执行Id
        public let executionId: Int64

        /// 任务开始时间
        public let startTime: String

        /// 任务结束时间
        public let endTime: String

        /// 任务的执行状态，Failed, Succeed, Stopped, InProgress
        public let status: String

        /// 总tag数
        public let total: Int64

        /// 保留tag数
        public let retained: Int64

        /// 应用的仓库
        public let repository: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case executionId = "ExecutionId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case status = "Status"
            case total = "Total"
            case retained = "Retained"
            case repository = "Repository"
        }
    }

    /// 指定tag镜像内容相同的tag列表
    public struct SameImagesResp: TCOutputModel {
        /// tag列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sameImages: [String]?

        enum CodingKeys: String, CodingKey {
            case sameImages = "SameImages"
        }
    }

    /// 作业调度信息
    public struct Schedule: TCOutputModel {
        /// 类型：Hourly, Daily, Weekly, Custom, Manual, Dryrun, None
        public let type: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    /// 获取满足输入搜索条件的用户镜像仓库
    public struct SearchUserRepositoryResp: TCOutputModel {
        /// 总个数
        public let totalCount: Int64

        /// 仓库列表
        public let repoInfo: [RepoInfo]

        /// Server
        public let server: String

        /// PrivilegeFiltered
        public let privilegeFiltered: Bool

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case repoInfo = "RepoInfo"
            case server = "Server"
            case privilegeFiltered = "PrivilegeFiltered"
        }
    }

    /// 安全策略
    public struct SecurityPolicy: TCInputModel, TCOutputModel {
        /// 策略索引
        public let policyIndex: Int64?

        /// 备注
        public let description: String?

        /// 运行访问的公网IP地址端
        public let cidrBlock: String?

        /// 安全策略的版本
        public let policyVersion: String?

        public init(policyIndex: Int64? = nil, description: String? = nil, cidrBlock: String? = nil, policyVersion: String? = nil) {
            self.policyIndex = policyIndex
            self.description = description
            self.cidrBlock = cidrBlock
            self.policyVersion = policyVersion
        }

        enum CodingKeys: String, CodingKey {
            case policyIndex = "PolicyIndex"
            case description = "Description"
            case cidrBlock = "CidrBlock"
            case policyVersion = "PolicyVersion"
        }
    }

    /// 服务级账号
    public struct ServiceAccount: TCInputModel, TCOutputModel {
        /// 服务级账号名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 是否禁用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let disable: Bool?

        /// 过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expiresAt: Int64?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        /// 策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let permissions: [Permission]?

        public init(name: String? = nil, description: String? = nil, disable: Bool? = nil, expiresAt: Int64? = nil, createTime: Date? = nil, updateTime: Date? = nil, permissions: [Permission]? = nil) {
            self.name = name
            self.description = description
            self.disable = disable
            self.expiresAt = expiresAt
            self._createTime = .init(wrappedValue: createTime)
            self._updateTime = .init(wrappedValue: updateTime)
            self.permissions = permissions
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case disable = "Disable"
            case expiresAt = "ExpiresAt"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case permissions = "Permissions"
        }
    }

    /// 云标签Tag
    public struct Tag: TCInputModel, TCOutputModel {
        /// 云标签的key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 云标签的值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 镜像tag信息
    public struct TagInfo: TCOutputModel {
        /// Tag名称
        public let tagName: String

        /// 制品的 ID
        public let tagId: String

        /// docker image 可以看到的id
        public let imageId: String

        /// 大小
        public let size: String

        /// 制品的创建时间
        public let creationTime: String

        /// 制品创建至今时间长度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let durationDays: String?

        /// 标注的制品作者
        public let author: String

        /// 标注的制品平台
        public let architecture: String

        /// 创建制品的 Docker 版本
        public let dockerVersion: String

        /// 标注的制品操作系统
        public let os: String

        /// 制品大小
        public let sizeByte: Int64

        /// 序号
        public let id: Int64

        /// 数据更新时间
        public let updateTime: String

        /// 制品更新时间
        public let pushTime: String

        /// 制品类型
        public let kind: String

        enum CodingKeys: String, CodingKey {
            case tagName = "TagName"
            case tagId = "TagId"
            case imageId = "ImageId"
            case size = "Size"
            case creationTime = "CreationTime"
            case durationDays = "DurationDays"
            case author = "Author"
            case architecture = "Architecture"
            case dockerVersion = "DockerVersion"
            case os = "OS"
            case sizeByte = "SizeByte"
            case id = "Id"
            case updateTime = "UpdateTime"
            case pushTime = "PushTime"
            case kind = "Kind"
        }
    }

    /// Tag列表的返回值
    public struct TagInfoResp: TCOutputModel {
        /// Tag的总数
        public let tagCount: Int64

        /// TagInfo列表
        public let tagInfo: [TagInfo]

        /// Server
        public let server: String

        /// 仓库名称
        public let repoName: String

        enum CodingKeys: String, CodingKey {
            case tagCount = "TagCount"
            case tagInfo = "TagInfo"
            case server = "Server"
            case repoName = "RepoName"
        }
    }

    /// 云标签
    public struct TagSpecification: TCInputModel, TCOutputModel {
        /// 默认值为instance
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceType: String?

        /// 云标签数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        public init(resourceType: String, tags: [Tag]) {
            self.resourceType = resourceType
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case tags = "Tags"
        }
    }

    /// 任务详情
    public struct TaskDetail: TCOutputModel {
        /// 任务
        public let taskName: String

        /// 任务UUID
        public let taskUUID: String

        /// 任务状态
        public let taskStatus: String

        /// 任务的状态信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskMessage: String?

        /// 任务开始时间
        public let createdTime: String

        /// 任务结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let finishedTime: String?

        enum CodingKeys: String, CodingKey {
            case taskName = "TaskName"
            case taskUUID = "TaskUUID"
            case taskStatus = "TaskStatus"
            case taskMessage = "TaskMessage"
            case createdTime = "CreatedTime"
            case finishedTime = "FinishedTime"
        }
    }

    /// 镜像信息
    public struct TcrImageInfo: TCOutputModel {
        /// 哈希值
        public let digest: String

        /// 镜像体积（单位：字节）
        public let size: Int64

        /// Tag名称
        public let imageVersion: String

        /// 更新时间
        public let updateTime: String

        /// 制品类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kind: String?

        /// KMS 签名信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kmsSignature: String?

        enum CodingKeys: String, CodingKey {
            case digest = "Digest"
            case size = "Size"
            case imageVersion = "ImageVersion"
            case updateTime = "UpdateTime"
            case kind = "Kind"
            case kmsSignature = "KmsSignature"
        }
    }

    /// 实例登录令牌
    public struct TcrInstanceToken: TCOutputModel {
        /// 令牌ID
        public let id: String

        /// 令牌描述
        public let desc: String

        /// 令牌所属实例ID
        public let registryId: String

        /// 令牌启用状态
        public let enabled: Bool

        /// 令牌创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createdAt: Date

        /// 令牌过期时间戳
        public let expiredAt: Int64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case desc = "Desc"
            case registryId = "RegistryId"
            case enabled = "Enabled"
            case createdAt = "CreatedAt"
            case expiredAt = "ExpiredAt"
        }
    }

    /// Tcr 命名空间的描述
    public struct TcrNamespaceInfo: TCOutputModel {
        /// 命名空间名称
        public let name: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var creationTime: Date

        /// 访问级别
        public let `public`: Bool

        /// 命名空间的Id
        public let namespaceId: Int64

        /// 实例云标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSpecification: TagSpecification?

        /// 命名空间元数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metadata: [KeyValueString]?

        /// 漏洞白名单列表
        public let cveWhitelistItems: [CVEWhitelistItem]?

        /// 扫描级别，true为自动，false为手动
        public let autoScan: Bool?

        /// 安全阻断级别，true为开启，false为关闭
        public let preventVUL: Bool?

        /// 阻断漏洞等级，目前仅支持low、medium、high, 为""时表示没有设置
        public let severity: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationTime = "CreationTime"
            case `public` = "Public"
            case namespaceId = "NamespaceId"
            case tagSpecification = "TagSpecification"
            case metadata = "Metadata"
            case cveWhitelistItems = "CVEWhitelistItems"
            case autoScan = "AutoScan"
            case preventVUL = "PreventVUL"
            case severity = "Severity"
        }
    }

    /// Tcr镜像仓库信息
    public struct TcrRepositoryInfo: TCOutputModel {
        /// 仓库名称
        public let name: String

        /// 命名空间名称
        public let namespace: String

        /// 创建时间，格式"2006-01-02 15:04:05.999999999 -0700 MST"
        public let creationTime: String

        /// 是否公开
        public let `public`: Bool

        /// 仓库详细描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 简单描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let briefDescription: String?

        /// 更新时间，格式"2006-01-02 15:04:05.999999999 -0700 MST"
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case namespace = "Namespace"
            case creationTime = "CreationTime"
            case `public` = "Public"
            case description = "Description"
            case briefDescription = "BriefDescription"
            case updateTime = "UpdateTime"
        }
    }

    /// 触发器触发条件
    public struct TriggerInvokeCondition: TCOutputModel {
        /// 触发方式
        public let invokeMethod: String

        /// 触发表达式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeExpr: String?

        enum CodingKeys: String, CodingKey {
            case invokeMethod = "InvokeMethod"
            case invokeExpr = "InvokeExpr"
        }
    }

    /// 触发器触发参数
    public struct TriggerInvokePara: TCOutputModel {
        /// AppId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: String?

        /// TKE集群ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        /// TKE集群命名空间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespace: String?

        /// TKE集群工作负载名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceName: String?

        /// TKE集群工作负载中容器名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerName: String?

        /// TKE集群地域数字ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterRegion: Int64?

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case clusterId = "ClusterId"
            case namespace = "Namespace"
            case serviceName = "ServiceName"
            case containerName = "ContainerName"
            case clusterRegion = "ClusterRegion"
        }
    }

    /// 触发器触发结果
    public struct TriggerInvokeResult: TCOutputModel {
        /// 请求TKE返回值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let returnCode: Int64?

        /// 请求TKE返回信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let returnMsg: String?

        enum CodingKeys: String, CodingKey {
            case returnCode = "ReturnCode"
            case returnMsg = "ReturnMsg"
        }
    }

    /// 触发器日志
    public struct TriggerLogResp: TCOutputModel {
        /// 仓库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repoName: String?

        /// Tag名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagName: String?

        /// 触发器名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let triggerName: String?

        /// 触发方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeSource: String?

        /// 触发动作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeAction: String?

        /// 触发时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeTime: String?

        /// 触发条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeCondition: TriggerInvokeCondition?

        /// 触发参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokePara: TriggerInvokePara?

        /// 触发结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeResult: TriggerInvokeResult?

        enum CodingKeys: String, CodingKey {
            case repoName = "RepoName"
            case tagName = "TagName"
            case triggerName = "TriggerName"
            case invokeSource = "InvokeSource"
            case invokeAction = "InvokeAction"
            case invokeTime = "InvokeTime"
            case invokeCondition = "InvokeCondition"
            case invokePara = "InvokePara"
            case invokeResult = "InvokeResult"
        }
    }

    /// 触发器返回值
    public struct TriggerResp: TCOutputModel {
        /// 触发器名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let triggerName: String?

        /// 触发来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeSource: String?

        /// 触发动作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeAction: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 触发条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokeCondition: TriggerInvokeCondition?

        /// 触发器参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invokePara: TriggerInvokePara?

        enum CodingKeys: String, CodingKey {
            case triggerName = "TriggerName"
            case invokeSource = "InvokeSource"
            case invokeAction = "InvokeAction"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case invokeCondition = "InvokeCondition"
            case invokePara = "InvokePara"
        }
    }

    /// vpc和domain信息
    public struct VpcAndDomainInfo: TCInputModel {
        /// tcr实例id
        public let instanceId: String

        /// 私有网络id
        public let vpcId: String

        /// tcr内网访问链路ip
        public let eniLBIp: String

        /// true：use instance name as subdomain
        /// false: use instancename+"-vpc" as subdomain
        public let usePublicDomain: Bool?

        /// 解析地域，需要保证和vpc处于同一地域，如果不填则默认为主实例地域
        public let regionName: String?

        public init(instanceId: String, vpcId: String, eniLBIp: String, usePublicDomain: Bool? = nil, regionName: String? = nil) {
            self.instanceId = instanceId
            self.vpcId = vpcId
            self.eniLBIp = eniLBIp
            self.usePublicDomain = usePublicDomain
            self.regionName = regionName
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case vpcId = "VpcId"
            case eniLBIp = "EniLBIp"
            case usePublicDomain = "UsePublicDomain"
            case regionName = "RegionName"
        }
    }

    /// vpc私有域名解析状态
    public struct VpcPrivateDomainStatus: TCOutputModel {
        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// unique vpc id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// ENABLE代表已经开启，DISABLE代表未开启，ERROR代表查询出错
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case vpcId = "VpcId"
            case status = "Status"
        }
    }

    /// 触发器目标
    public struct WebhookTarget: TCInputModel, TCOutputModel {
        /// 目标地址
        public let address: String

        /// 自定义 Headers
        public let headers: [Header]?

        public init(address: String, headers: [Header]? = nil) {
            self.address = address
            self.headers = headers
        }

        enum CodingKeys: String, CodingKey {
            case address = "Address"
            case headers = "Headers"
        }
    }

    /// Webhook 触发器
    public struct WebhookTrigger: TCInputModel, TCOutputModel {
        /// 触发器名称
        public let name: String

        /// 触发器目标
        public let targets: [WebhookTarget]

        /// 触发动作
        public let eventTypes: [String]

        /// 触发规则
        public let condition: String

        /// 启用触发器
        public let enabled: Bool

        /// 触发器Id
        public let id: Int64?

        /// 触发器描述
        public let description: String?

        /// 触发器所属命名空间 Id
        public let namespaceId: Int64?

        public init(name: String, targets: [WebhookTarget], eventTypes: [String], condition: String, enabled: Bool, id: Int64? = nil, description: String? = nil, namespaceId: Int64? = nil) {
            self.name = name
            self.targets = targets
            self.eventTypes = eventTypes
            self.condition = condition
            self.enabled = enabled
            self.id = id
            self.description = description
            self.namespaceId = namespaceId
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case targets = "Targets"
            case eventTypes = "EventTypes"
            case condition = "Condition"
            case enabled = "Enabled"
            case id = "Id"
            case description = "Description"
            case namespaceId = "NamespaceId"
        }
    }

    /// 触发器日志
    public struct WebhookTriggerLog: TCOutputModel {
        /// 日志 Id
        public let id: Int64

        /// 触发器 Id
        public let triggerId: Int64

        /// 事件类型
        public let eventType: String

        /// 通知类型
        public let notifyType: String

        /// 详情
        public let detail: String

        /// 创建时间
        public let creationTime: String

        /// 更新时间
        public let updateTime: String

        /// 状态
        public let status: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case triggerId = "TriggerId"
            case eventType = "EventType"
            case notifyType = "NotifyType"
            case detail = "Detail"
            case creationTime = "CreationTime"
            case updateTime = "UpdateTime"
            case status = "Status"
        }
    }
}
