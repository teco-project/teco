//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Vod {
    /// AI 智能分析模板详情
    public struct AIAnalysisTemplateItem: TCOutputModel {
        /// 智能分析模板唯一标识。
        public let definition: Int64

        /// 智能分析模板名称。
        public let name: String

        /// 智能分析模板描述信息。
        public let comment: String

        /// 智能分类任务控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classificationConfigure: ClassificationConfigureInfo?

        /// 智能标签任务控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagConfigure: TagConfigureInfo?

        /// 智能封面任务控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coverConfigure: CoverConfigureInfo?

        /// 智能按帧标签任务控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameTagConfigure: FrameTagConfigureInfo?

        /// 智能精彩集锦任务控制参数。
        public let highlightConfigure: HighlightsConfigureInfo

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case name = "Name"
            case comment = "Comment"
            case classificationConfigure = "ClassificationConfigure"
            case tagConfigure = "TagConfigure"
            case coverConfigure = "CoverConfigure"
            case frameTagConfigure = "FrameTagConfigure"
            case highlightConfigure = "HighlightConfigure"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 视频内容识别模板详情
    public struct AIRecognitionTemplateItem: TCOutputModel {
        /// 视频内容识别模板唯一标识。
        public let definition: Int64

        /// 视频内容识别模板名称。
        public let name: String

        /// 视频内容识别模板描述信息。
        public let comment: String

        /// 头尾识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let headTailConfigure: HeadTailConfigureInfo?

        /// 拆条识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let segmentConfigure: SegmentConfigureInfo?

        /// 人脸识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let faceConfigure: FaceConfigureInfo?

        /// 文本全文识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrFullTextConfigure: OcrFullTextConfigureInfo?

        /// 文本关键词识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrWordsConfigure: OcrWordsConfigureInfo?

        /// 语音全文识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrFullTextConfigure: AsrFullTextConfigureInfo?

        /// 语音关键词识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrWordsConfigure: AsrWordsConfigureInfo?

        /// 物体识别控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objectConfigure: ObjectConfigureInfo?

        /// 截图时间间隔，单位：秒。
        public let screenshotInterval: Float

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case name = "Name"
            case comment = "Comment"
            case headTailConfigure = "HeadTailConfigure"
            case segmentConfigure = "SegmentConfigure"
            case faceConfigure = "FaceConfigure"
            case ocrFullTextConfigure = "OcrFullTextConfigure"
            case ocrWordsConfigure = "OcrWordsConfigure"
            case asrFullTextConfigure = "AsrFullTextConfigure"
            case asrWordsConfigure = "AsrWordsConfigure"
            case objectConfigure = "ObjectConfigure"
            case screenshotInterval = "ScreenshotInterval"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 域名的地区加速信息
    public struct AccelerateAreaInfo: TCOutputModel {
        /// 加速地区，可选值：
        /// <li>Chinese Mainland：中国境内（不包含港澳台）。</li>
        /// <li>Outside Chinese Mainland：中国境外。</li>
        public let area: String

        /// 腾讯禁用原因，可选值：
        /// <li>ForLegalReasons：因法律原因导致关闭加速；</li>
        /// <li>ForOverdueBills：因欠费停服导致关闭加速。</li>
        public let tencentDisableReason: String

        /// 加速域名对应的 CNAME 域名。
        public let tencentEdgeDomain: String

        enum CodingKeys: String, CodingKey {
            case area = "Area"
            case tencentDisableReason = "TencentDisableReason"
            case tencentEdgeDomain = "TencentEdgeDomain"
        }
    }

    /// 转自适应码流信息
    public struct AdaptiveDynamicStreamingInfoItem: TCInputModel, TCOutputModel {
        /// 转自适应码流规格。
        public let definition: Int64

        /// 打包格式，取值范围：
        /// <li>HLS；</li>
        /// <li>DASH。</li>
        public let package: String

        /// 加密类型。
        public let drmType: String

        /// 播放地址。
        public let url: String

        /// 媒体文件大小，单位：字节。
        /// <li>当媒体文件为 HLS 时，大小是 m3u8 和 ts 文件大小的总和；</li>
        /// <li>当媒体文件为 DASH 时，大小是 mpd 和分片文件大小的总和；</li>
        /// <li><font color=red>注意</font>：在 2022-01-10T16:00:00Z 前处理生成的自适应码流文件此字段为0。</li>
        public let size: Int64?

        /// 数字水印类型。可选值：
        /// <li>Trace 表示经过溯源水印处理；</li>
        /// <li>None 表示没有经过数字水印处理。</li>
        public let digitalWatermarkType: String?

        /// 子流信息列表。
        public let subStreamSet: [MediaSubStreamInfoItem]?

        public init(definition: Int64, package: String, drmType: String, url: String, size: Int64? = nil, digitalWatermarkType: String? = nil, subStreamSet: [MediaSubStreamInfoItem]? = nil) {
            self.definition = definition
            self.package = package
            self.drmType = drmType
            self.url = url
            self.size = size
            self.digitalWatermarkType = digitalWatermarkType
            self.subStreamSet = subStreamSet
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case package = "Package"
            case drmType = "DrmType"
            case url = "Url"
            case size = "Size"
            case digitalWatermarkType = "DigitalWatermarkType"
            case subStreamSet = "SubStreamSet"
        }
    }

    /// 对视频转自适应码流的输入参数类型
    public struct AdaptiveDynamicStreamingTaskInput: TCInputModel, TCOutputModel {
        /// 转自适应码流模板 ID。
        public let definition: UInt64

        /// 水印列表，支持多张图片或文字水印，最大可支持 10 张。
        public let watermarkSet: [WatermarkInput]?

        /// 溯源水印。
        public let traceWatermark: TraceWatermarkInput?

        /// 字幕列表，元素为字幕 ID，支持多个字幕，最大可支持16个。
        public let subtitleSet: [String]?

        public init(definition: UInt64, watermarkSet: [WatermarkInput]? = nil, traceWatermark: TraceWatermarkInput? = nil, subtitleSet: [String]? = nil) {
            self.definition = definition
            self.watermarkSet = watermarkSet
            self.traceWatermark = traceWatermark
            self.subtitleSet = subtitleSet
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case watermarkSet = "WatermarkSet"
            case traceWatermark = "TraceWatermark"
            case subtitleSet = "SubtitleSet"
        }
    }

    /// 转自适应码流模板详情
    public struct AdaptiveDynamicStreamingTemplate: TCOutputModel {
        /// 转自适应码流模板唯一标识。
        public let definition: UInt64

        /// 模板类型，取值范围：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 转自适应码流模板名称。
        public let name: String

        /// 转自适应码流模板描述信息。
        public let comment: String

        /// 自适应转码格式，取值范围：
        /// <li>HLS。</li>
        public let format: String

        /// DRM 类型，取值范围：
        /// <li>SimpleAES</li>
        /// <li>Widevine</li>
        /// <li>FairPlay</li>
        /// 如果取值为空字符串，代表不对视频做 DRM 保护。
        public let drmType: String

        /// DRM 的密钥提供商，取值范围：
        /// <li>SDMC：华曦达；</li>
        /// <li>VOD：云点播。</li>
        /// 默认值为 VOD 。
        public let drmKeyProvider: String

        /// 自适应转码输入流参数信息，最多输入10路流。
        public let streamInfos: [AdaptiveStreamTemplate]

        /// 是否禁止视频低码率转高码率，取值范围：
        /// <li>0：否，</li>
        /// <li>1：是。</li>
        public let disableHigherVideoBitrate: UInt64

        /// 是否禁止视频分辨率转高分辨率，取值范围：
        /// <li>0：否，</li>
        /// <li>1：是。</li>
        public let disableHigherVideoResolution: UInt64

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        /// 切片类型，仅当 Format 为 HLS 时有效。
        public let segmentType: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case comment = "Comment"
            case format = "Format"
            case drmType = "DrmType"
            case drmKeyProvider = "DrmKeyProvider"
            case streamInfos = "StreamInfos"
            case disableHigherVideoBitrate = "DisableHigherVideoBitrate"
            case disableHigherVideoResolution = "DisableHigherVideoResolution"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case segmentType = "SegmentType"
        }
    }

    /// 自适应转码流参数模板
    public struct AdaptiveStreamTemplate: TCInputModel, TCOutputModel {
        /// 视频参数信息。
        public let video: VideoTemplateInfo

        /// 音频参数信息。
        public let audio: AudioTemplateInfo

        /// 是否移除音频流，取值范围：
        /// <li>0：否，</li>
        /// <li>1：是。</li>
        public let removeAudio: UInt64?

        /// 是否移除视频流，取值范围：
        /// <li>0：否，</li>
        /// <li>1：是。</li>
        public let removeVideo: UInt64?

        /// 极速高清转码参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tehdConfig: TEHDConfig?

        public init(video: VideoTemplateInfo, audio: AudioTemplateInfo, removeAudio: UInt64? = nil, removeVideo: UInt64? = nil, tehdConfig: TEHDConfig? = nil) {
            self.video = video
            self.audio = audio
            self.removeAudio = removeAudio
            self.removeVideo = removeVideo
            self.tehdConfig = tehdConfig
        }

        enum CodingKeys: String, CodingKey {
            case video = "Video"
            case audio = "Audio"
            case removeAudio = "RemoveAudio"
            case removeVideo = "RemoveVideo"
            case tehdConfig = "TEHDConfig"
        }
    }

    /// 智能分析结果
    public struct AiAnalysisResult: TCOutputModel {
        /// 任务的类型，可以取的值有：
        /// <li>Classification：智能分类</li>
        /// <li>Cover：智能封面</li>
        /// <li>Tag：智能标签</li>
        /// <li>FrameTag：智能按帧标签</li>
        /// <li>Highlight：智能精彩集锦</li>
        public let type: String

        /// 视频内容分析智能分类任务的查询结果，当任务类型为 Classification 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classificationTask: AiAnalysisTaskClassificationResult?

        /// 视频内容分析智能封面任务的查询结果，当任务类型为 Cover 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coverTask: AiAnalysisTaskCoverResult?

        /// 视频内容分析智能标签任务的查询结果，当任务类型为 Tag 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagTask: AiAnalysisTaskTagResult?

        /// 视频内容分析智能按帧标签任务的查询结果，当任务类型为 FrameTag 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameTagTask: AiAnalysisTaskFrameTagResult?

        /// 视频内容分析智能精彩集锦任务的查询结果，当任务类型为 Highlight 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let highlightTask: AiAnalysisTaskHighlightResult?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case classificationTask = "ClassificationTask"
            case coverTask = "CoverTask"
            case tagTask = "TagTask"
            case frameTagTask = "FrameTagTask"
            case highlightTask = "HighlightTask"
        }
    }

    /// 智能分类任务输入类型
    public struct AiAnalysisTaskClassificationInput: TCOutputModel {
        /// 视频智能分类模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 智能分类结果信息
    public struct AiAnalysisTaskClassificationOutput: TCOutputModel {
        /// 视频智能分类列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 ClassificationSetFileUrl 对应的文件中获取。
        public let classificationSet: [MediaAiAnalysisClassificationItem]

        /// 视频智能分类列表文件 URL。文件的内容为 JSON，数据结构与 ClassificationSet 字段一致。 （文件不会永久存储，到达 ClassificationSetFileUrlExpireTime 时间点后文件将被删除）。
        public let classificationSetFileUrl: String

        /// 视频智能分类列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let classificationSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case classificationSet = "ClassificationSet"
            case classificationSetFileUrl = "ClassificationSetFileUrl"
            case classificationSetFileUrlExpireTime = "ClassificationSetFileUrlExpireTime"
        }
    }

    /// 智能分类任务结果类型
    public struct AiAnalysisTaskClassificationResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 智能分类任务输入。
        public let input: AiAnalysisTaskClassificationInput

        /// 智能分类任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiAnalysisTaskClassificationOutput?

        /// 智能分类任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 智能分类任务输入类型
    public struct AiAnalysisTaskCoverInput: TCOutputModel {
        /// 视频智能封面模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 智能封面结果信息
    public struct AiAnalysisTaskCoverOutput: TCOutputModel {
        /// 智能封面列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 CoverSetFileUrl 对应的文件中获取。
        public let coverSet: [MediaAiAnalysisCoverItem]

        /// 智能封面列表文件 URL。文件的内容为 JSON，数据结构与 CoverSet 字段一致。 （文件不会永久存储，到达 CoverSetFileUrlExpireTime 时间点后文件将被删除）。
        public let coverSetFileUrl: String

        /// 智能封面列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let coverSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case coverSet = "CoverSet"
            case coverSetFileUrl = "CoverSetFileUrl"
            case coverSetFileUrlExpireTime = "CoverSetFileUrlExpireTime"
        }
    }

    /// 智能封面结果类型
    public struct AiAnalysisTaskCoverResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 智能封面任务输入。
        public let input: AiAnalysisTaskCoverInput

        /// 智能封面任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiAnalysisTaskCoverOutput?

        /// 智能封面任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 智能按帧标签任务输入类型
    public struct AiAnalysisTaskFrameTagInput: TCOutputModel {
        /// 视频智能按帧标签模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 智能按帧标签结果信息
    public struct AiAnalysisTaskFrameTagOutput: TCOutputModel {
        /// 视频按帧标签列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaAiAnalysisFrameTagSegmentItem]

        /// 视频按帧标签列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 视频按帧标签列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 智能按帧标签结果类型
    public struct AiAnalysisTaskFrameTagResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 智能按帧标签任务输入。
        public let input: AiAnalysisTaskFrameTagInput

        /// 智能按帧标签任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiAnalysisTaskFrameTagOutput?

        /// 智能按帧标签任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 智能精彩片段任务输入类型
    public struct AiAnalysisTaskHighlightInput: TCOutputModel {
        /// 视频智能精彩片段模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 智能精彩片段结果信息
    public struct AiAnalysisTaskHighlightOutput: TCOutputModel {
        /// 视频智能精彩片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 HighlightSetFileUrl 对应的文件中获取。
        public let highlightSet: [MediaAiAnalysisHighlightItem]

        /// 视频智能精彩片段列表文件 URL。文件的内容为 JSON，数据结构与 HighlightSet 字段一致。 （文件不会永久存储，到达 HighlightSetFileUrlExpireTime 时间点后文件将被删除）。
        public let highlightSetFileUrl: String

        /// 视频智能精彩片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let highlightSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case highlightSet = "HighlightSet"
            case highlightSetFileUrl = "HighlightSetFileUrl"
            case highlightSetFileUrlExpireTime = "HighlightSetFileUrlExpireTime"
        }
    }

    /// 智能精彩片段结果类型
    public struct AiAnalysisTaskHighlightResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 智能精彩片段任务输入。
        public let input: AiAnalysisTaskHighlightInput

        /// 智能精彩片段任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiAnalysisTaskHighlightOutput?

        /// 智能精彩片段任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// AI 视频智能分析输入参数类型
    public struct AiAnalysisTaskInput: TCInputModel, TCOutputModel {
        /// 视频内容分析模板 ID。
        public let definition: UInt64

        public init(definition: UInt64) {
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 智能标签任务输入类型
    public struct AiAnalysisTaskTagInput: TCOutputModel {
        /// 视频智能标签模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 智能标签结果信息
    public struct AiAnalysisTaskTagOutput: TCOutputModel {
        /// 视频智能标签列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 TagSetFileUrl 对应的文件中获取。
        public let tagSet: [MediaAiAnalysisTagItem]

        /// 视频智能标签列表文件 URL。文件的内容为 JSON，数据结构与 TagSet 字段一致。 （文件不会永久存储，到达 TagSetFileUrlExpireTime 时间点后文件将被删除）。
        public let tagSetFileUrl: String

        /// 视频智能标签列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let tagSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
            case tagSetFileUrl = "TagSetFileUrl"
            case tagSetFileUrlExpireTime = "TagSetFileUrlExpireTime"
        }
    }

    /// 智能标签结果类型
    public struct AiAnalysisTaskTagResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 智能标签任务输入。
        public let input: AiAnalysisTaskTagInput

        /// 智能标签任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiAnalysisTaskTagOutput?

        /// 智能标签任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核结果
    public struct AiContentReviewResult: TCOutputModel {
        /// 任务的类型，可以取的值有：
        /// <li>Porn：图片鉴别是否涉及令人反感的信息</li>
        /// <li>Terrorism：图片鉴别是否涉及令人不安全的信息</li>
        /// <li>Political：图片鉴别是否涉及令人不适宜的信息</li>
        /// <li>Porn.Asr：Asr 文字（ 音频中的文字）鉴别是否涉及令人反感的信息</li>
        /// <li>Porn.Ocr：Ocr 文字鉴别是否涉及令人反感的信息</li>
        /// <li>Political.Asr：Asr 文字（ 音频中的文字）鉴别是否涉及令人不适宜的信息</li>
        /// <li>Political.Ocr：Ocr 文字鉴别是否涉及令人不适宜的信息</li>
        /// <li>Terrorism.Ocr：Ocr 文字鉴别是否涉及令人不安全的信息</li>
        /// <li>Prohibited.Asr：Asr 文字（ 音频中的文字）鉴违禁</li>
        /// <li>Prohibited.Ocr：Ocr 文字鉴违禁</li>
        public let type: String

        /// 视频音视频审核任务（画面涉及令人反感的信息）的查询结果，当任务类型为 Porn 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pornTask: AiReviewTaskPornResult?

        /// 视频音视频审核任务（画面涉及令人不安全的信息）的查询结果，当任务类型为 Terrorism 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let terrorismTask: AiReviewTaskTerrorismResult?

        /// 视频音视频审核任务（画面涉及令人不适宜的信息）的查询结果，当任务类型为 Political 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let politicalTask: AiReviewTaskPoliticalResult?

        /// 视频音视频审核任务（Asr 文字涉及令人反感的信息）的查询结果，当任务类型为 Porn.Asr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pornAsrTask: AiReviewTaskPornAsrResult?

        /// 视频音视频审核任务（Ocr 文字涉及令人反感的信息）的查询结果，当任务类型为 Porn.Ocr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pornOcrTask: AiReviewTaskPornOcrResult?

        /// 视频音视频审核任务（Asr 文字涉及令人不适宜的信息）的查询结果，当任务类型为 Political.Asr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let politicalAsrTask: AiReviewTaskPoliticalAsrResult?

        /// 视频音视频审核任务（Ocr 文字涉及令人不适宜的信息）的查询结果，当任务类型为 Political.Ocr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let politicalOcrTask: AiReviewTaskPoliticalOcrResult?

        /// 视频音视频审核任务（ Ocr 文字涉及令人不安全的信息）的查询结果，当任务类型为 Terrorism.Ocr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let terrorismOcrTask: AiReviewTaskTerrorismOcrResult?

        /// 视频音视频审核 Ocr 文字鉴违禁任务的查询结果，当任务类型为 Prohibited.Ocr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let prohibitedOcrTask: AiReviewTaskProhibitedOcrResult?

        /// 视频音视频审核 Asr 文字鉴违禁任务的查询结果，当任务类型为 Prohibited.Asr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let prohibitedAsrTask: AiReviewTaskProhibitedAsrResult?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case pornTask = "PornTask"
            case terrorismTask = "TerrorismTask"
            case politicalTask = "PoliticalTask"
            case pornAsrTask = "PornAsrTask"
            case pornOcrTask = "PornOcrTask"
            case politicalAsrTask = "PoliticalAsrTask"
            case politicalOcrTask = "PoliticalOcrTask"
            case terrorismOcrTask = "TerrorismOcrTask"
            case prohibitedOcrTask = "ProhibitedOcrTask"
            case prohibitedAsrTask = "ProhibitedAsrTask"
        }
    }

    /// 音视频审核任务类型
    public struct AiContentReviewTaskInput: TCInputModel, TCOutputModel {
        /// 音视频审核模板 ID。
        public let definition: UInt64

        public init(definition: UInt64) {
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 智能识别结果。
    public struct AiRecognitionResult: TCOutputModel {
        /// 任务的类型，取值范围：
        /// <li>FaceRecognition：人脸识别，</li>
        /// <li>AsrWordsRecognition：语音关键词识别，</li>
        /// <li>OcrWordsRecognition：文本关键词识别，</li>
        /// <li>AsrFullTextRecognition：语音全文识别，</li>
        /// <li>OcrFullTextRecognition：文本全文识别，</li>
        /// <li>HeadTailRecognition：视频片头片尾识别，</li>
        /// <li>ObjectRecognition：物体识别。</li>
        public let type: String

        /// 视频片头片尾识别结果，当 Type 为
        ///  HeadTailRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let headTailTask: AiRecognitionTaskHeadTailResult?

        /// 视频拆条识别结果，当 Type 为
        ///  SegmentRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let segmentTask: AiRecognitionTaskSegmentResult?

        /// 人脸识别结果，当 Type 为
        ///  FaceRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let faceTask: AiRecognitionTaskFaceResult?

        /// 语音关键词识别结果，当 Type 为
        ///  AsrWordsRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrWordsTask: AiRecognitionTaskAsrWordsResult?

        /// 语音全文识别结果，当 Type 为
        ///  AsrFullTextRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrFullTextTask: AiRecognitionTaskAsrFullTextResult?

        /// 文本关键词识别结果，当 Type 为
        ///  OcrWordsRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrWordsTask: AiRecognitionTaskOcrWordsResult?

        /// 文本全文识别结果，当 Type 为
        ///  OcrFullTextRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrFullTextTask: AiRecognitionTaskOcrFullTextResult?

        /// 物体识别结果，当 Type 为
        ///  ObjectRecognition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objectTask: AiRecognitionTaskObjectResult?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case headTailTask = "HeadTailTask"
            case segmentTask = "SegmentTask"
            case faceTask = "FaceTask"
            case asrWordsTask = "AsrWordsTask"
            case asrFullTextTask = "AsrFullTextTask"
            case ocrWordsTask = "OcrWordsTask"
            case ocrFullTextTask = "OcrFullTextTask"
            case objectTask = "ObjectTask"
        }
    }

    /// 语音全文识别结果。
    public struct AiRecognitionTaskAsrFullTextResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 语音全文识别任务输入信息。
        public let input: AiRecognitionTaskAsrFullTextResultInput

        /// 语音全文识别任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskAsrFullTextResultOutput?

        /// 任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 语音全文识别的输入。
    public struct AiRecognitionTaskAsrFullTextResultInput: TCOutputModel {
        /// 语音全文识别模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 语音全文识别结果。
    public struct AiRecognitionTaskAsrFullTextResultOutput: TCOutputModel {
        /// 语音全文识别片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [AiRecognitionTaskAsrFullTextSegmentItem]

        /// 语音全文识别片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 语音全文识别片段列表文件 URL 失效时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        /// 生成的字幕列表，对应 [语音全文识别任务控制参数](https://cloud.tencent.com/document/api/266/31773#AsrFullTextConfigureInfo) SubtitleFormats。
        public let subtitleSet: [AiRecognitionTaskAsrFullTextResultOutputSubtitleItem]

        /// 生成的字幕文件 Url，对应 [语音全文识别任务控制参数](https://cloud.tencent.com/document/api/266/31773#AsrFullTextConfigureInfo) SubtitleFormat。
        public let subtitleUrl: String

        enum CodingKeys: String, CodingKey {
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
            case subtitleSet = "SubtitleSet"
            case subtitleUrl = "SubtitleUrl"
        }
    }

    /// 字幕信息。
    public struct AiRecognitionTaskAsrFullTextResultOutputSubtitleItem: TCOutputModel {
        /// 字幕文件格式，取值范围：
        /// <li>vtt：WebVTT 字幕文件；</li>
        /// <li>srt：SRT 字幕文件。</li>
        public let format: String

        /// 字幕文件 Url。
        public let url: String

        enum CodingKeys: String, CodingKey {
            case format = "Format"
            case url = "Url"
        }
    }

    /// 语音全文识别片段。
    public struct AiRecognitionTaskAsrFullTextSegmentItem: TCOutputModel {
        /// 识别片段置信度。取值：0~100。
        public let confidence: Float

        /// 识别片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 识别片段终止的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 识别文本。
        public let text: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case text = "Text"
        }
    }

    /// 语音关键词识别结果。
    public struct AiRecognitionTaskAsrWordsResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 语音关键词识别任务输入信息。
        public let input: AiRecognitionTaskAsrWordsResultInput

        /// 语音关键词识别任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskAsrWordsResultOutput?

        /// 语音关键词识别任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 语音关键词识别输入。
    public struct AiRecognitionTaskAsrWordsResultInput: TCOutputModel {
        /// 语音关键词识别模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 语音关键词识别结果。
    public struct AiRecognitionTaskAsrWordsResultItem: TCOutputModel {
        /// 语音关键词。
        public let word: String

        /// 语音关键词出现的时间片段列表。
        public let segmentSet: [AiRecognitionTaskAsrWordsSegmentItem]

        enum CodingKeys: String, CodingKey {
            case word = "Word"
            case segmentSet = "SegmentSet"
        }
    }

    /// 语音关键词识别输出。
    public struct AiRecognitionTaskAsrWordsResultOutput: TCOutputModel {
        /// 语音关键词识别结果集。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 ResultSetFileUrl 对应的文件中获取。
        public let resultSet: [AiRecognitionTaskAsrWordsResultItem]

        /// 语音关键词识别结果集文件 URL。文件的内容为 JSON，数据结构与 ResultSet 字段一致。 （文件不会永久存储，到达ResultSetFileUrlExpireTime 时间点后文件将被删除）。
        public let resultSetFileUrl: String

        /// 语音关键词识别结果集文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let resultSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case resultSet = "ResultSet"
            case resultSetFileUrl = "ResultSetFileUrl"
            case resultSetFileUrlExpireTime = "ResultSetFileUrlExpireTime"
        }
    }

    /// 语音识别片段。
    public struct AiRecognitionTaskAsrWordsSegmentItem: TCOutputModel {
        /// 识别片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 识别片段终止的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 识别片段置信度。取值：0~100。
        public let confidence: Float

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
        }
    }

    /// 人脸识别结果。
    public struct AiRecognitionTaskFaceResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 人脸识别任务输入信息。
        public let input: AiRecognitionTaskFaceResultInput

        /// 人脸识别任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskFaceResultOutput?

        /// 人脸识别任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 人脸识别输入。
    public struct AiRecognitionTaskFaceResultInput: TCOutputModel {
        /// 人脸识别模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 人脸识别结果
    public struct AiRecognitionTaskFaceResultItem: TCOutputModel {
        /// 人物唯一标识 ID。
        public let id: String

        /// 人物库类型，表示识别出的人物来自哪个人物库：
        /// <li>Default：默认人物库；</li>
        /// <li>UserDefine：用户自定义人物库。</li>
        public let type: String

        /// 人物名称。
        public let name: String

        /// 人物出现的片段结果集。
        public let segmentSet: [AiRecognitionTaskFaceSegmentItem]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case type = "Type"
            case name = "Name"
            case segmentSet = "SegmentSet"
        }
    }

    /// 智能人脸识别输出。
    public struct AiRecognitionTaskFaceResultOutput: TCOutputModel {
        /// 智能人脸识别结果集。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 ResultSetFileUrl 对应的文件中获取。
        public let resultSet: [AiRecognitionTaskFaceResultItem]

        /// 智能人脸识别结果集文件 URL。文件的内容为 JSON，数据结构与 ResultSet 字段一致。 （文件不会永久存储，到达ResultSetFileUrlExpireTime 时间点后文件将被删除）。
        public let resultSetFileUrl: String

        /// 智能人脸识别结果集文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let resultSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case resultSet = "ResultSet"
            case resultSetFileUrl = "ResultSetFileUrl"
            case resultSetFileUrlExpireTime = "ResultSetFileUrlExpireTime"
        }
    }

    /// 人脸识别结果片段
    public struct AiRecognitionTaskFaceSegmentItem: TCOutputModel {
        /// 识别片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 识别片段终止的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 识别片段置信度。取值：0~100。
        public let confidence: Float

        /// 识别结果的区域坐标。数组包含 4 个元素 [x1,y1,x2,y2]，依次表示区域左上点、右下点的横纵坐标。
        public let areaCoordSet: [Int64]

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case areaCoordSet = "AreaCoordSet"
        }
    }

    /// 视频片头片尾识别结果。
    public struct AiRecognitionTaskHeadTailResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 视频片头片尾识别任务输入信息。
        public let input: AiRecognitionTaskHeadTailResultInput

        /// 视频片头片尾识别任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskHeadTailResultOutput?

        /// 视频片头片尾识别任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 视频片头片尾识别的输入。
    public struct AiRecognitionTaskHeadTailResultInput: TCOutputModel {
        /// 视频片头片尾识别模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 视频片头片尾识别输出。
    public struct AiRecognitionTaskHeadTailResultOutput: TCOutputModel {
        /// 片头识别置信度。取值：0~100。
        public let headConfidence: Float

        /// 视频片头的结束时间点，单位：秒。
        public let headTimeOffset: Float

        /// 片尾识别置信度。取值：0~100。
        public let tailConfidence: Float

        /// 视频片尾的开始时间点，单位：秒。
        public let tailTimeOffset: Float

        enum CodingKeys: String, CodingKey {
            case headConfidence = "HeadConfidence"
            case headTimeOffset = "HeadTimeOffset"
            case tailConfidence = "TailConfidence"
            case tailTimeOffset = "TailTimeOffset"
        }
    }

    /// 视频内容识别输入参数类型
    public struct AiRecognitionTaskInput: TCInputModel, TCOutputModel {
        /// 视频智能识别模板 ID 。
        public let definition: UInt64

        public init(definition: UInt64) {
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 物体识别结果。
    public struct AiRecognitionTaskObjectResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 物体识别任务输入信息。
        public let input: AiRecognitionTaskObjectResultInput

        /// 物体识别任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskObjectResultOutput?

        /// 物体识别任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 物体识别任务输入类型。
    public struct AiRecognitionTaskObjectResultInput: TCOutputModel {
        /// 物体识别模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 单个物体识别结果。
    public struct AiRecognitionTaskObjectResultItem: TCOutputModel {
        /// 识别的物体名称。
        public let name: String

        /// 物体出现的片段列表。
        public let segmentSet: [AiRecognitionTaskObjectSeqmentItem]

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case segmentSet = "SegmentSet"
        }
    }

    /// 智能物体识别输出。
    public struct AiRecognitionTaskObjectResultOutput: TCOutputModel {
        /// 智能物体识别结果集。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 ResultSetFileUrl 对应的文件中获取。
        public let resultSet: [AiRecognitionTaskObjectResultItem]

        /// 智能物体识别结果集文件 URL。文件的内容为 JSON，数据结构与 ResultSet 字段一致。 （文件不会永久存储，到达ResultSetFileUrlExpireTime 时间点后文件将被删除）。
        public let resultSetFileUrl: String

        /// 智能物体识别结果集文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let resultSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case resultSet = "ResultSet"
            case resultSetFileUrl = "ResultSetFileUrl"
            case resultSetFileUrlExpireTime = "ResultSetFileUrlExpireTime"
        }
    }

    /// 物体识别结果片段。
    public struct AiRecognitionTaskObjectSeqmentItem: TCOutputModel {
        /// 识别片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 识别片段终止的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 识别片段置信度。取值：0~100。
        public let confidence: Float

        /// 识别结果的区域坐标。数组包含 4 个元素 [x1,y1,x2,y2]，依次表示区域左上点、右下点的横纵坐标。
        public let areaCoordSet: [Int64]

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case areaCoordSet = "AreaCoordSet"
        }
    }

    /// 文本全文识别结果。
    public struct AiRecognitionTaskOcrFullTextResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 文本全文识别任务输入信息。
        public let input: AiRecognitionTaskOcrFullTextResultInput

        /// 文本全文识别任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskOcrFullTextResultOutput?

        /// 文本全文识别任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 文本全文识别输入。
    public struct AiRecognitionTaskOcrFullTextResultInput: TCOutputModel {
        /// 文本全文识别模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 文本全文识别输出。
    public struct AiRecognitionTaskOcrFullTextResultOutput: TCOutputModel {
        /// 文本全文识别结果集。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [AiRecognitionTaskOcrFullTextSegmentItem]

        /// 文本全文识别结果集文件 URL。文件的内容为 JSON，数据结构与 ResultSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 文本全文识别结果集文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 文本全文识别片段。
    public struct AiRecognitionTaskOcrFullTextSegmentItem: TCOutputModel {
        /// 识别片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 识别片段终止的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 识别片段结果集。
        public let textSet: [AiRecognitionTaskOcrFullTextSegmentTextItem]

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case textSet = "TextSet"
        }
    }

    /// 文本全文识别片段。
    public struct AiRecognitionTaskOcrFullTextSegmentTextItem: TCOutputModel {
        /// 识别片段置信度。取值：0~100。
        public let confidence: Float

        /// 识别结果的区域坐标。数组包含 4 个元素 [x1,y1,x2,y2]，依次表示区域左上点、右下点的横纵坐标。
        public let areaCoordSet: [Int64]

        /// 识别文本。
        public let text: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case areaCoordSet = "AreaCoordSet"
            case text = "Text"
        }
    }

    /// 文本关键识别结果。
    public struct AiRecognitionTaskOcrWordsResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 文本关键词识别任务输入信息。
        public let input: AiRecognitionTaskOcrWordsResultInput

        /// 文本关键词识别任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskOcrWordsResultOutput?

        /// 文本关键词识别任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 文本关键词识别输入。
    public struct AiRecognitionTaskOcrWordsResultInput: TCOutputModel {
        /// 文本关键词识别模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 文本关键词识别结果。
    public struct AiRecognitionTaskOcrWordsResultItem: TCOutputModel {
        /// 文本关键词。
        public let word: String

        /// 文本关键出现的片段列表。
        public let segmentSet: [AiRecognitionTaskOcrWordsSegmentItem]

        enum CodingKeys: String, CodingKey {
            case word = "Word"
            case segmentSet = "SegmentSet"
        }
    }

    /// 文本关键词识别输出。
    public struct AiRecognitionTaskOcrWordsResultOutput: TCOutputModel {
        /// 文本关键词识别结果集。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 ResultSetFileUrl 对应的文件中获取。
        public let resultSet: [AiRecognitionTaskOcrWordsResultItem]

        /// 文本关键词识别结果集文件 URL。文件的内容为 JSON，数据结构与 ResultSet 字段一致。 （文件不会永久存储，到达ResultSetFileUrlExpireTime 时间点后文件将被删除）。
        public let resultSetFileUrl: String

        /// 文本关键词识别结果集文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let resultSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case resultSet = "ResultSet"
            case resultSetFileUrl = "ResultSetFileUrl"
            case resultSetFileUrlExpireTime = "ResultSetFileUrlExpireTime"
        }
    }

    /// 文本识别片段。
    public struct AiRecognitionTaskOcrWordsSegmentItem: TCOutputModel {
        /// 识别片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 识别片段终止的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 识别片段置信度。取值：0~100。
        public let confidence: Float

        /// 识别结果的区域坐标。数组包含 4 个元素 [x1,y1,x2,y2]，依次表示区域左上点、右下点的横纵坐标。
        public let areaCoordSet: [Int64]

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case areaCoordSet = "AreaCoordSet"
        }
    }

    /// 视频拆条结果。
    public struct AiRecognitionTaskSegmentResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 视频拆条任务输入信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let input: AiRecognitionTaskSegmentResultInput?

        /// 视频拆条任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiRecognitionTaskSegmentResultOutput?

        /// 视频拆条任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 视频拆条输入。
    public struct AiRecognitionTaskSegmentResultInput: TCOutputModel {
        /// 视频拆条模板 ID。
        public let definition: Int64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 视频拆条输出。
    public struct AiRecognitionTaskSegmentResultOutput: TCOutputModel {
        /// 视频拆条片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [AiRecognitionTaskSegmentSegmentItem]

        /// 视频拆条片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 视频拆条片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 视频拆条片段。
    public struct AiRecognitionTaskSegmentSegmentItem: TCOutputModel {
        /// 文件 ID。仅当处理的是点播文件并且拆条生成的子片段为点播文件时有效。
        public let fileId: String

        /// 视频拆条片段 Url。
        public let segmentUrl: String

        /// 拆条片段置信度。取值：0~100。
        public let confidence: Float

        /// 拆条片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 拆条片段终止的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 拆条封面图片 Url。
        public let covImgUrl: String

        /// 特殊字段，请忽略。
        public let specialInfo: String

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case segmentUrl = "SegmentUrl"
            case confidence = "Confidence"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case covImgUrl = "CovImgUrl"
            case specialInfo = "SpecialInfo"
        }
    }

    /// 音视频审核 Asr 文字涉及令人不适宜的信息、违规任务输入参数类型
    public struct AiReviewPoliticalAsrTaskInput: TCOutputModel {
        /// 鉴别涉及令人不适宜信息的模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// Asr 文字涉及令人不适宜的信息
    public struct AiReviewPoliticalAsrTaskOutput: TCOutputModel {
        /// Asr 文字涉及令人不适宜的信息、违规评分，分值为0到100。
        public let confidence: Float

        /// Asr 文字涉及令人不适宜的信息、违规结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Asr 文字有涉及令人不适宜的信息、违规嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewAsrTextSegmentItem]

        /// Asr 文字有涉及令人不适宜的信息、违规嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// Asr 文字有涉及令人不适宜的信息、违规嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核 Ocr 文字涉及令人不适宜信息的任务输入参数类型
    public struct AiReviewPoliticalOcrTaskInput: TCOutputModel {
        /// 鉴别涉及令人不适宜信息的模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// Ocr 文字涉及令人不适宜的信息
    public struct AiReviewPoliticalOcrTaskOutput: TCOutputModel {
        /// Ocr 文字涉及令人不适宜的信息、违规评分，分值为0到100。
        public let confidence: Float

        /// Ocr 文字涉及令人不适宜的信息、违规结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Ocr 文字有涉及令人不适宜的信息、违规嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewOcrTextSegmentItem]

        /// Ocr 文字有涉及令人不适宜的信息、违规嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// Ocr 文字有涉及令人不适宜的信息、违规嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核涉及令人不适宜信息的任务输入参数类型
    public struct AiReviewPoliticalTaskInput: TCOutputModel {
        /// 鉴别涉及令人不适宜信息的模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 涉及令人不适宜的信息
    public struct AiReviewPoliticalTaskOutput: TCOutputModel {
        /// 视频涉及令人不适宜信息的评分，分值为0到100。
        public let confidence: Float

        /// 涉及令人不适宜信息的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 视频涉及令人不适宜信息的结果标签。音视频审核模板[画面鉴政任务控制参数](https://cloud.tencent.com/document/api/266/31773#PoliticalImgReviewTemplateInfo)里 LabelSet 参数与此参数取值范围的对应关系：
        /// violation_photo：
        /// <li>violation_photo：违规图标。</li>
        /// 其他（即 politician/entertainment/sport/entrepreneur/scholar/celebrity/military）：
        /// <li>politician：相关人物。</li>
        public let label: String

        /// 有涉及令人不适宜信息嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewPoliticalSegmentItem]

        /// 有涉及令人不适宜的信息嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 有涉及令人不适宜的信息嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case label = "Label"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核 Asr 文字涉及令人反感的信息的任务输入参数类型
    public struct AiReviewPornAsrTaskInput: TCOutputModel {
        /// 鉴别涉及令人反感的信息的模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// Asr 文字涉及令人反感的信息
    public struct AiReviewPornAsrTaskOutput: TCOutputModel {
        /// Asr 文字涉及令人反感的信息的评分，分值为0到100。
        public let confidence: Float

        /// Asr 文字涉及令人反感的信息的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Asr 文字有涉及令人反感的信息的嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewAsrTextSegmentItem]

        /// Asr 文字有涉及令人反感的信息的嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// Asr 文字有涉及令人反感的信息的嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核 Ocr 文字涉及令人反感的信息的任务输入参数类型
    public struct AiReviewPornOcrTaskInput: TCOutputModel {
        /// 鉴别涉及令人反感的信息的模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// Ocr 文字涉及令人反感的信息
    public struct AiReviewPornOcrTaskOutput: TCOutputModel {
        /// Ocr 文字涉及令人反感的信息的评分，分值为0到100。
        public let confidence: Float

        /// Ocr 文字涉及令人反感的信息的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Ocr 文字有涉及令人反感的信息的嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewOcrTextSegmentItem]

        /// Ocr 文字有涉及令人反感的信息的嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// Ocr 文字有涉及令人反感的信息的嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核涉及令人反感的信息的任务输入参数类型
    public struct AiReviewPornTaskInput: TCInputModel {
        /// 鉴别涉及令人反感的信息的模板 ID。
        public let definition: UInt64

        public init(definition: UInt64) {
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 鉴别涉及令人反感的信息的结果信息
    public struct AiReviewPornTaskOutput: TCOutputModel {
        /// 视频鉴别涉及令人反感的信息的评分，分值为0到100。
        public let confidence: Float

        /// 鉴别涉及令人反感的信息的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 视频鉴别涉及令人反感的信息的结果标签，取值范围：
        /// <li>porn：色情。</li>
        /// <li>sexy：性感。</li>
        /// <li>vulgar：低俗。</li>
        /// <li>intimacy：亲密行为。</li>
        public let label: String

        /// 有涉及令人反感的信息的嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewSegmentItem]

        /// 涉及令人反感的信息的嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 涉及令人反感的信息的嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case label = "Label"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核 Asr 文字鉴违禁任务输入参数类型
    public struct AiReviewProhibitedAsrTaskInput: TCOutputModel {
        /// 鉴违禁模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// Asr 文字涉违禁信息
    public struct AiReviewProhibitedAsrTaskOutput: TCOutputModel {
        /// Asr 文字涉违禁评分，分值为0到100。
        public let confidence: Float

        /// Asr 文字涉违禁结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Asr 文字有涉违禁嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewAsrTextSegmentItem]

        /// Asr 文字有涉违禁嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// Asr 文字有涉违禁嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核 Ocr 文字鉴违禁任务输入参数类型
    public struct AiReviewProhibitedOcrTaskInput: TCOutputModel {
        /// 鉴违禁模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// Ocr 文字涉违禁信息
    public struct AiReviewProhibitedOcrTaskOutput: TCOutputModel {
        /// Ocr 文字涉违禁评分，分值为0到100。
        public let confidence: Float

        /// Ocr 文字涉违禁结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Ocr 文字有涉违禁嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewOcrTextSegmentItem]

        /// Ocr 文字有涉违禁嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// Ocr 文字有涉违禁嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核 Asr 文字涉及令人不适宜信息、违规任务结果类型
    public struct AiReviewTaskPoliticalAsrResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核 Asr 文字涉及令人不适宜信息的任务输入。
        public let input: AiReviewPoliticalAsrTaskInput

        /// 音视频审核 Asr 文字涉及令人不适宜信息的任务输出。
        public let output: AiReviewPoliticalAsrTaskOutput

        /// 音视频审核 Asr 文字涉及令人不适宜信息的任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核 Ocr 文字涉及令人不适宜信息、违规任务结果类型
    public struct AiReviewTaskPoliticalOcrResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核 Ocr 文字涉及令人不适宜信息的任务输入。
        public let input: AiReviewPoliticalOcrTaskInput

        /// 音视频审核 Ocr 文字涉及令人不适宜信息的任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewPoliticalOcrTaskOutput?

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
        }
    }

    /// 音视频审核涉及令人不适宜信息的任务结果类型
    public struct AiReviewTaskPoliticalResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核涉及令人不适宜信息的任务输入。
        public let input: AiReviewPoliticalTaskInput

        /// 音视频审核涉及令人不适宜信息的任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewPoliticalTaskOutput?

        /// 音视频审核涉及令人不适宜信息的任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核 Asr 文字涉及令人反感的信息的任务结果类型
    public struct AiReviewTaskPornAsrResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核 Asr 文字涉及令人反感的信息的任务输入。
        public let input: AiReviewPornAsrTaskInput

        /// 音视频审核 Asr 文字涉及令人反感的信息的任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewPornAsrTaskOutput?

        /// 音视频审核 Asr 文字涉及令人反感的信息的任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核 Ocr 文字涉及令人反感的信息的任务结果类型
    public struct AiReviewTaskPornOcrResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核 Ocr 文字涉及令人反感的信息的任务输入。
        public let input: AiReviewPornOcrTaskInput

        /// Ocr 文字音视频审核涉及令人反感的信息的任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewPornOcrTaskOutput?

        /// Ocr 文字音视频审核涉及令人反感的信息的任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核涉及令人反感的信息的任务结果类型
    public struct AiReviewTaskPornResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核涉及令人反感的信息的任务输入。
        public let input: AiReviewPornTaskInput

        /// 音视频审核涉及令人反感的信息的任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewPornTaskOutput?

        /// 音视频审核涉及令人反感的信息的任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核 Asr 文字鉴违禁任务结果类型
    public struct AiReviewTaskProhibitedAsrResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核 Asr 文字鉴违禁任务输入。
        public let input: AiReviewProhibitedAsrTaskInput

        /// 音视频审核 Asr 文字鉴违禁任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewProhibitedAsrTaskOutput?

        /// 音视频审核 Asr 文字鉴违禁任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核 Ocr 文字鉴违禁任务结果类型
    public struct AiReviewTaskProhibitedOcrResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核 Ocr 文字鉴违禁任务输入。
        public let input: AiReviewProhibitedOcrTaskInput

        /// 音视频审核 Ocr 文字鉴违禁任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewProhibitedOcrTaskOutput?

        /// 音视频审核 Ocr 文字鉴违禁任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核 Ocr 文字鉴别涉及令人不安全的信息的任务结果类型
    public struct AiReviewTaskTerrorismOcrResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核 Ocr 文字涉及令人不安全的信息的任务输入。
        public let input: AiReviewTerrorismOcrTaskInput

        /// 音视频审核 Ocr 文字涉及令人不安全的信息的任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewTerrorismOcrTaskOutput?

        /// 音视频审核 Ocr 文字涉及令人不安全的信息的任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核涉及令人不安全的信息的任务结果类型
    public struct AiReviewTaskTerrorismResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 音视频审核涉及令人不安全的信息的任务输入。
        public let input: AiReviewTerrorismTaskInput

        /// 音视频审核涉及令人不安全的信息的任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: AiReviewTerrorismTaskOutput?

        /// 音视频审核涉及令人不安全的信息的任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 音视频审核 Ocr 文字涉及令人不安全的信息的任务输入参数类型
    public struct AiReviewTerrorismOcrTaskInput: TCOutputModel {
        /// 鉴别涉及令人不安全的信息的模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// Ocr 文字涉及令人不安全的信息
    public struct AiReviewTerrorismOcrTaskOutput: TCOutputModel {
        /// Ocr 文字有涉及令人不安全信息的评分，分值为0到100。
        public let confidence: Float

        /// Ocr 文字有涉及令人不安全信息的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Ocr 文字有涉及令人不安全信息嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewOcrTextSegmentItem]

        /// Ocr 文字有涉及令人不安全信息嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达 SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// Ocr 文字有涉及令人不安全信息嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 音视频审核涉及令人不安全的信息的任务输入参数类型
    public struct AiReviewTerrorismTaskInput: TCOutputModel {
        /// 鉴别涉及令人不安全的信息的模板 ID。
        public let definition: UInt64

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 暴恐信息
    public struct AiReviewTerrorismTaskOutput: TCOutputModel {
        /// 视频暴恐评分，分值为0到100。
        public let confidence: Float

        /// 暴恐结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 视频暴恐结果标签，取值范围：
        /// <li>guns：武器枪支。</li>
        /// <li>crowd：人群聚集。</li>
        /// <li>police：警察部队。</li>
        /// <li>bloody：血腥画面。</li>
        /// <li>banners：暴恐旗帜。</li>
        /// <li>militant：武装分子。</li>
        /// <li>explosion：爆炸火灾。</li>
        /// <li>terrorists：暴恐人物。</li>
        /// <li>scenario：暴恐画面。</li>
        public let label: String

        /// 有暴恐嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 100 个元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [MediaContentReviewSegmentItem]

        /// 暴恐嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 暴恐嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case label = "Label"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// AI 样本管理，人脸信息。
    public struct AiSampleFaceInfo: TCOutputModel {
        /// 人脸图片 ID。
        public let faceId: String

        /// 人脸图片地址。
        public let url: String

        enum CodingKeys: String, CodingKey {
            case faceId = "FaceId"
            case url = "Url"
        }
    }

    /// AI 样本管理，人脸数据操作。
    public struct AiSampleFaceOperation: TCInputModel {
        /// 操作类型，可选值：add（添加）、delete（删除）、reset（重置）。重置操作将清空该人物已有人脸数据，并添加 FaceContents 指定人脸数据。
        public let type: String

        /// 人脸 ID 集合，当 Type为delete 时，该字段必填。
        public let faceIds: [String]?

        /// 人脸图片 [Base64](https://tools.ietf.org/html/rfc4648) 编码后的字符串集合。
        /// <li>当 Type为add 或 reset 时，该字段必填；</li>
        /// <li>数组长度限制：5 张图片。</li>
        /// 注意：图片必须是单人像正面人脸较清晰的照片，像素不低于 200*200。
        public let faceContents: [String]?

        public init(type: String, faceIds: [String]? = nil, faceContents: [String]? = nil) {
            self.type = type
            self.faceIds = faceIds
            self.faceContents = faceContents
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case faceIds = "FaceIds"
            case faceContents = "FaceContents"
        }
    }

    /// AI 样本管理，处理失败的人脸信息
    public struct AiSampleFailFaceInfo: TCOutputModel {
        /// 对应入参 FaceContents 中错误图片下标，从 0 开始。
        public let index: UInt64

        /// 错误码，取值：
        /// <li>0：成功；</li>
        /// <li>其他：失败。</li>
        public let errCode: Int64

        /// 错误描述。
        public let message: String

        enum CodingKeys: String, CodingKey {
            case index = "Index"
            case errCode = "ErrCode"
            case message = "Message"
        }
    }

    /// AI 样本管理，人物信息。
    public struct AiSamplePerson: TCOutputModel {
        /// 人物 ID。
        public let personId: String

        /// 人物名称。
        public let name: String

        /// 人物描述。
        public let description: String

        /// 人脸信息。
        public let faceInfoSet: [AiSampleFaceInfo]

        /// 人物标签。
        public let tagSet: [String]

        /// 应用场景。
        public let usageSet: [String]

        /// 创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case personId = "PersonId"
            case name = "Name"
            case description = "Description"
            case faceInfoSet = "FaceInfoSet"
            case tagSet = "TagSet"
            case usageSet = "UsageSet"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// AI 样本管理，标签操作。
    public struct AiSampleTagOperation: TCInputModel {
        /// 操作类型，可选值：add（添加）、delete（删除）、reset（重置）。
        public let type: String

        /// 标签，长度限制：128 个字符。
        public let tags: [String]

        public init(type: String, tags: [String]) {
            self.type = type
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case tags = "Tags"
        }
    }

    /// AI 样本管理，关键词输出信息。
    public struct AiSampleWord: TCOutputModel {
        /// 关键词。
        public let keyword: String

        /// 关键词标签。
        public let tagSet: [String]

        /// 关键词应用场景。
        public let usageSet: [String]

        /// 创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case keyword = "Keyword"
            case tagSet = "TagSet"
            case usageSet = "UsageSet"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// AI 样本管理，关键词输入信息。
    public struct AiSampleWordInfo: TCInputModel {
        /// 关键词，长度限制：20 个字符。
        public let keyword: String

        /// 关键词标签
        /// <li>数组长度限制：20 个标签；</li>
        /// <li>单个标签长度限制：128 个字符。</li>
        public let tags: [String]?

        public init(keyword: String, tags: [String]? = nil) {
            self.keyword = keyword
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case keyword = "Keyword"
            case tags = "Tags"
        }
    }

    /// 转动图任务类型
    public struct AnimatedGraphicTaskInput: TCInputModel, TCOutputModel {
        /// 视频转动图模板 ID
        public let definition: UInt64

        /// 动图在视频中的起始时间偏移，单位为秒。
        /// <li>不填或填0，表示从视频的起始位置开始；</li>
        /// <li>当数值大于0时（假设为 n），表示从视频的第 n 秒位置开始；</li>
        /// <li>当数值小于0时（假设为 -n），表示从视频结束 n 秒前的位置开始。</li>
        public let startTimeOffset: Float

        /// 动图在视频中的终止时间偏移，单位为秒。
        /// <li>不填或填0，表示持续到视频的末尾终止；</li>
        /// <li>当数值大于0时（假设为 n），表示持续到视频第 n 秒时终止；</li>
        /// <li>当数值小于0时（假设为 -n），表示持续到视频结束 n 秒前终止。</li>
        public let endTimeOffset: Float

        public init(definition: UInt64, startTimeOffset: Float, endTimeOffset: Float) {
            self.definition = definition
            self.startTimeOffset = startTimeOffset
            self.endTimeOffset = endTimeOffset
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
        }
    }

    /// 转动图模板详情。
    public struct AnimatedGraphicsTemplate: TCOutputModel {
        /// 转动图模板唯一标识。
        public let definition: UInt64

        /// 模板类型，取值范围：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 转动图模板名称。
        public let name: String

        /// 转动图模板描述信息。
        public let comment: String

        /// 动图宽度（或长边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let width: UInt64

        /// 动图高度（或短边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let height: UInt64

        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        /// 默认值：open。
        public let resolutionAdaptive: String

        /// 动图格式。
        public let format: String

        /// 帧率。
        public let fps: UInt64

        /// 图片质量。
        public let quality: Float

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case comment = "Comment"
            case width = "Width"
            case height = "Height"
            case resolutionAdaptive = "ResolutionAdaptive"
            case format = "Format"
            case fps = "Fps"
            case quality = "Quality"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 去伪影（毛刺）控制信息
    public struct ArtifactRepairInfo: TCInputModel, TCOutputModel {
        /// 去伪影（毛刺）控制开关，可选值：
        /// <li>ON：开启去伪影（毛刺）；</li>
        /// <li>OFF：关闭去伪影（毛刺）。</li>
        public let `switch`: String

        /// 去伪影（毛刺）类型，仅当去伪影（毛刺）控制开关为 ON 时有效，可选值：
        /// <li>weak：轻去伪影（毛刺）；</li>
        /// <li>strong：强去伪影（毛刺）。</li>
        /// 默认值：weak。
        public let type: String?

        public init(switch: String, type: String? = nil) {
            self.switch = `switch`
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
        }
    }

    /// 语音全文识别任务控制参数
    public struct AsrFullTextConfigureInfo: TCInputModel, TCOutputModel {
        /// 语音全文识别任务开关，可选值：
        /// <li>ON：开启智能语音全文识别任务；</li>
        /// <li>OFF：关闭智能语音全文识别任务。</li>
        public let `switch`: String

        /// 生成的字幕文件格式列表，不填或者填空数组表示不生成字幕文件，可选值：
        /// <li>vtt：生成 WebVTT 字幕文件；</li>
        /// <li>srt：生成 SRT 字幕文件。</li>
        public let subtitleFormats: [String]?

        /// 生成的字幕文件格式，不填或者填空字符串表示不生成字幕文件，可选值：
        /// <li>vtt：生成 WebVTT 字幕文件；</li>
        /// <li>srt：生成 SRT 字幕文件。</li>
        /// <font color='red'>注意：此字段已废弃，建议使用 SubtitleFormats。</font>
        public let subtitleFormat: String?

        public init(switch: String, subtitleFormats: [String]? = nil, subtitleFormat: String? = nil) {
            self.switch = `switch`
            self.subtitleFormats = subtitleFormats
            self.subtitleFormat = subtitleFormat
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case subtitleFormats = "SubtitleFormats"
            case subtitleFormat = "SubtitleFormat"
        }
    }

    /// 语音全文识别任务控制参数
    public struct AsrFullTextConfigureInfoForUpdate: TCInputModel {
        /// 语音全文识别任务开关，可选值：
        /// <li>ON：开启智能语音全文识别任务；</li>
        /// <li>OFF：关闭智能语音全文识别任务。</li>
        public let `switch`: String?

        /// 字幕格式列表操作信息。
        public let subtitleFormatsOperation: SubtitleFormatsOperation?

        /// 生成的字幕文件格式，<font color='red'>填空字符串</font>表示不生成字幕文件，可选值：
        /// <li>vtt：生成 WebVTT 字幕文件；</li>
        /// <li>srt：生成 SRT 字幕文件。</li>
        /// <font color='red'>注意：此字段已废弃，建议使用 SubtitleFormatsOperation。</font>
        public let subtitleFormat: String?

        public init(switch: String? = nil, subtitleFormatsOperation: SubtitleFormatsOperation? = nil, subtitleFormat: String? = nil) {
            self.switch = `switch`
            self.subtitleFormatsOperation = subtitleFormatsOperation
            self.subtitleFormat = subtitleFormat
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case subtitleFormatsOperation = "SubtitleFormatsOperation"
            case subtitleFormat = "SubtitleFormat"
        }
    }

    /// 语音关键词识别控制参数。
    public struct AsrWordsConfigureInfo: TCInputModel, TCOutputModel {
        /// 语音关键词识别任务开关，可选值：
        /// <li>ON：开启语音关键词识别任务；</li>
        /// <li>OFF：关闭语音关键词识别任务。</li>
        public let `switch`: String

        /// 关键词过滤标签，指定需要返回的关键词的标签。如果未填或者为空，则全部结果都返回。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        public init(switch: String, labelSet: [String]? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
        }
    }

    /// 语音关键词识别控制参数。
    public struct AsrWordsConfigureInfoForUpdate: TCInputModel {
        /// 语音关键词识别任务开关，可选值：
        /// <li>ON：开启语音关键词识别任务；</li>
        /// <li>OFF：关闭语音关键词识别任务。</li>
        public let `switch`: String?

        /// 关键词过滤标签，指定需要返回的关键词的标签。如果未填或者为空，则全部结果都返回。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        public init(switch: String? = nil, labelSet: [String]? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
        }
    }

    /// 音频降噪控制信息
    public struct AudioDenoiseInfo: TCInputModel, TCOutputModel {
        /// 音频降噪控制开关，可选值：
        /// <li>ON：开启音频降噪；</li>
        /// <li>OFF：关闭音频降噪。</li>
        public let `switch`: String

        /// 音频降噪类型，仅当音频降噪控制开关为 ON 时有效，可选值：
        /// <li>weak：轻音频降噪；</li>
        /// <li>normal：正常音频降噪；</li>
        /// <li>strong：强音频降噪。</li>
        /// 默认值：weak。
        public let type: String?

        public init(switch: String, type: String? = nil) {
            self.switch = `switch`
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
        }
    }

    /// 音频流配置参数
    public struct AudioTemplateInfo: TCInputModel, TCOutputModel {
        /// 音频流的编码格式。
        /// 当外层参数 Container 为 mp3 时，可选值为：
        /// <li>libmp3lame。</li>
        /// 当外层参数 Container 为 ogg 或 flac 时，可选值为：
        /// <li>flac。</li>
        /// 当外层参数 Container 为 m4a 时，可选值为：
        /// <li>libfdk_aac；</li>
        /// <li>libmp3lame；</li>
        /// <li>ac3。</li>
        /// 当外层参数 Container 为 mp4 或 flv 时，可选值为：
        /// <li>libfdk_aac：更适合 mp4；</li>
        /// <li>libmp3lame：更适合 flv；</li>
        /// <li>mp2。</li>
        /// 当外层参数 Container 为 hls 时，可选值为：
        /// <li>libfdk_aac。</li>
        /// 当外层参数 Format 为 HLS 或 MPEG-DASH 时，可选值为：
        /// <li>libfdk_aac。</li>
        /// 当外层参数 Container 为 wav 时，可选值为：
        /// <li>pcm16。</li>
        public let codec: String

        /// 音频流的码率，取值范围：0 和 [26, 256]，单位：kbps。
        /// 当取值为 0，表示音频码率和原始音频保持一致。
        public let bitrate: UInt64

        /// 音频流的采样率，可选值：
        /// <li>16000，仅当 Codec 为 pcm16 时可选。</li>
        /// <li>32000</li>
        /// <li>44100</li>
        /// <li>48000</li>
        /// 单位：Hz。
        public let sampleRate: UInt64

        /// 音频通道方式，可选值：
        /// <li>1：单通道</li>
        /// <li>2：双通道</li>
        /// <li>6：立体声</li>
        /// 当媒体的封装格式是音频格式时（flac，ogg，mp3，m4a）时，声道数不允许设为立体声。
        /// 默认值：2。
        public let audioChannel: Int64?

        public init(codec: String, bitrate: UInt64, sampleRate: UInt64, audioChannel: Int64? = nil) {
            self.codec = codec
            self.bitrate = bitrate
            self.sampleRate = sampleRate
            self.audioChannel = audioChannel
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case bitrate = "Bitrate"
            case sampleRate = "SampleRate"
            case audioChannel = "AudioChannel"
        }
    }

    /// 音频流配置参数
    public struct AudioTemplateInfoForUpdate: TCInputModel {
        /// 音频流的编码格式。
        /// 当外层参数 Container 为 mp3 时，可选值为：
        /// <li>libmp3lame。</li>
        /// 当外层参数 Container 为 ogg 或 flac 时，可选值为：
        /// <li>flac。</li>
        /// 当外层参数 Container 为 m4a 时，可选值为：
        /// <li>libfdk_aac；</li>
        /// <li>libmp3lame；</li>
        /// <li>ac3。</li>
        /// 当外层参数 Container 为 mp4 或 flv 时，可选值为：
        /// <li>libfdk_aac：更适合 mp4；</li>
        /// <li>libmp3lame：更适合 flv；</li>
        /// <li>mp2。</li>
        /// 当外层参数 Container 为 hls 时，可选值为：
        /// <li>libfdk_aac。</li>
        /// 当外层参数 Format 为 HLS 或 MPEG-DASH 时，可选值为：
        /// <li>libfdk_aac。</li>
        /// 当外层参数 Container 为 wav 时，可选值为：
        /// <li>pcm16。</li>
        public let codec: String?

        /// 音频流的码率，取值范围：0 和 [26, 256]，单位：kbps。 当取值为 0，表示音频码率和原始音频保持一致。
        public let bitrate: UInt64?

        /// 音频流的采样率，可选值：
        /// <li>16000，仅当 Codec 为 pcm16 时可选。</li>
        /// <li>32000</li>
        /// <li>44100</li>
        /// <li>48000</li>
        /// 单位：Hz。
        public let sampleRate: UInt64?

        /// 音频通道方式，可选值：
        /// <li>1：单通道</li>
        /// <li>2：双通道</li>
        /// <li>6：立体声</li>
        /// 当媒体的封装格式是音频格式时（flac，ogg，mp3，m4a）时，声道数不允许设为立体声。
        public let audioChannel: Int64?

        public init(codec: String? = nil, bitrate: UInt64? = nil, sampleRate: UInt64? = nil, audioChannel: Int64? = nil) {
            self.codec = codec
            self.bitrate = bitrate
            self.sampleRate = sampleRate
            self.audioChannel = audioChannel
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case bitrate = "Bitrate"
            case sampleRate = "SampleRate"
            case audioChannel = "AudioChannel"
        }
    }

    /// 音频轨道上的音频片段信息。
    public struct AudioTrackItem: TCInputModel, TCOutputModel {
        /// 音频片段的媒体素材来源，可以是：
        /// <li>点播的媒体文件 ID；</li>
        /// <li>其他媒体文件的下载 URL。</li>
        /// 注意：当使用其他媒体文件的下载 URL 作为素材来源，且开启了访问控制（如防盗链）时，需要在 URL 携带访问控制参数（如防盗链签名）。
        public let sourceMedia: String

        /// 音频片段取自素材文件的起始时间，单位为秒。0 表示从素材开始位置截取。默认为0。
        public let sourceMediaStartTime: Float?

        /// 音频片段的时长，单位为秒。默认和素材本身长度一致，表示截取全部素材。
        public let duration: Float?

        /// 音频片段目标时长，单位为秒。
        /// <li>当 TargetDuration 不填或填0时，表示目标时长和 Duration 一致；</li>
        /// <li>当 TargetDuration 取大于0的值时，将对音频片段做快进或慢放等处理，使得输出片段的时长等于 TargetDuration。</li>
        public let targetDuration: Float?

        /// 对音频片段进行的操作，如音量调节等。
        public let audioOperations: [AudioTransform]?

        public init(sourceMedia: String, sourceMediaStartTime: Float? = nil, duration: Float? = nil, targetDuration: Float? = nil, audioOperations: [AudioTransform]? = nil) {
            self.sourceMedia = sourceMedia
            self.sourceMediaStartTime = sourceMediaStartTime
            self.duration = duration
            self.targetDuration = targetDuration
            self.audioOperations = audioOperations
        }

        enum CodingKeys: String, CodingKey {
            case sourceMedia = "SourceMedia"
            case sourceMediaStartTime = "SourceMediaStartTime"
            case duration = "Duration"
            case targetDuration = "TargetDuration"
            case audioOperations = "AudioOperations"
        }
    }

    /// 音频操作
    public struct AudioTransform: TCInputModel, TCOutputModel {
        /// 音频操作类型，取值有：
        /// <li>Volume：音量调节。</li>
        public let type: String

        /// 音量调节参数， 当 Type = Volume 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let volumeParam: AudioVolumeParam?

        public init(type: String, volumeParam: AudioVolumeParam? = nil) {
            self.type = type
            self.volumeParam = volumeParam
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case volumeParam = "VolumeParam"
        }
    }

    /// 音频增益调节参数
    public struct AudioVolumeParam: TCInputModel, TCOutputModel {
        /// 是否静音，取值范围0或1。
        /// <li>0表示不静音。</li>
        /// <li>1表示静音。</li>
        /// 默认是0。
        public let mute: Int64?

        /// 音频增益，取值范围0~10。
        /// <li>大于1表示增加音量。</li>
        /// <li>小于1表示降低音量。</li>
        /// <li>0和1：表示不改变。</li>
        /// 默认是0。
        public let gain: Float?

        public init(mute: Int64? = nil, gain: Float? = nil) {
            self.mute = mute
            self.gain = gain
        }

        enum CodingKeys: String, CodingKey {
            case mute = "Mute"
            case gain = "Gain"
        }
    }

    /// 画布信息。制作视频时，如果源素材（视频或者图片）不能填满输出的视频窗口，将用设置的画布进行背景绘制。
    public struct Canvas: TCInputModel, TCOutputModel {
        /// 背景颜色，取值有：
        /// <li>Black：黑色背景</li>
        /// <li>White：白色背景</li>
        /// 默认值：Black。
        public let color: String?

        /// 画布宽度，即输出视频的宽度，取值范围：0~ 4096，单位：px。
        /// 默认值：0，表示和第一个视频轨的第一个视频片段的视频宽度一致。
        public let width: Int64?

        /// 画布高度，即输出视频的高度（或长边），取值范围：0~ 4096，单位：px。
        /// 默认值：0，表示和第一个视频轨的第一个视频片段的视频高度一致。
        public let height: Int64?

        public init(color: String? = nil, width: Int64? = nil, height: Int64? = nil) {
            self.color = color
            self.width = width
            self.height = height
        }

        enum CodingKeys: String, CodingKey {
            case color = "Color"
            case width = "Width"
            case height = "Height"
        }
    }

    /// CDN 日志信息
    public struct CdnLogInfo: TCOutputModel {
        /// 日志所属日期， 格式为：yyyy-MM-dd ，如2018-03-01。
        public let date: String

        /// 日志名称，格式为：日期小时-域名
        /// 如 2018120101-test.vod2.mqcloud.com。
        public let name: String

        /// 日志下载链接，24小时内下载有效。
        public let url: String

        /// 日志起始时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。
        public let startTime: String

        /// 日志结束时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。
        public let endTime: String

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case name = "Name"
            case url = "Url"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 智能分类任务控制参数
    public struct ClassificationConfigureInfo: TCInputModel, TCOutputModel {
        /// 智能分类任务开关，可选值：
        /// <li>ON：开启智能分类任务；</li>
        /// <li>OFF：关闭智能分类任务。</li>
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 智能分类任务控制参数
    public struct ClassificationConfigureInfoForUpdate: TCInputModel {
        /// 智能分类任务开关，可选值：
        /// <li>ON：开启智能分类任务；</li>
        /// <li>OFF：关闭智能分类任务。</li>
        public let `switch`: String?

        public init(switch: String? = nil) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 视频裁剪结果文件信息（2017 版）
    public struct ClipFileInfo2017: TCOutputModel {
        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 错误描述。
        public let message: String

        /// 输出目标文件的文件 ID。
        public let fileId: String

        /// 输出目标文件的文件地址。
        public let fileUrl: String

        /// 输出目标文件的文件类型。
        public let fileType: String

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case fileUrl = "FileUrl"
            case fileType = "FileType"
        }
    }

    /// 视频剪辑任务信息，该结构仅用于对 2017 版[视频剪辑](https://cloud.tencent.com/document/product/266/10156)接口发起的任务。
    public struct ClipTask2017: TCOutputModel {
        /// 视频剪辑任务 ID。
        public let taskId: String

        /// 视频剪辑任务源文件 ID。
        public let srcFileId: String

        /// 视频剪辑输出的文件信息。
        public let fileInfo: ClipFileInfo2017

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case srcFileId = "SrcFileId"
            case fileInfo = "FileInfo"
        }
    }

    /// 色彩增强控制参数
    public struct ColorEnhanceInfo: TCInputModel, TCOutputModel {
        /// 色彩增强控制开关，可选值：
        /// <li>ON：开启综合增强；</li>
        /// <li>OFF：关闭综合增强。</li>
        public let `switch`: String

        /// 色彩增强类型，仅当色彩增强控制开关为 ON 时有效，可选值：
        /// <li>weak：轻色彩增强；</li>
        /// <li>normal：正常色彩增强；</li>
        /// <li>strong：强色彩增强。</li>
        /// 默认值：weak。
        public let type: String?

        public init(switch: String, type: String? = nil) {
            self.switch = `switch`
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
        }
    }

    /// 输出的媒体文件信息。
    public struct ComposeMediaOutput: TCInputModel, TCOutputModel {
        /// 文件名称，最长 64 个字符。
        public let fileName: String

        /// 描述信息，最长 128 个字符。
        public let description: String?

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64?

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String?

        /// 封装格式，可选值：mp4、mp3。其中，mp3 为纯音频文件。
        public let container: String?

        /// 输出的视频信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let videoStream: OutputVideoStream?

        /// 输出的音频信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let audioStream: OutputAudioStream?

        /// 是否去除视频数据，可选值：
        /// <li>0：保留</li>
        /// <li>1：去除</li>
        /// 默认值：0。
        public let removeVideo: Int64?

        /// 是否去除音频数据，可选值：
        /// <li>0：保留</li>
        /// <li>1：去除</li>
        /// 默认值：0。
        public let removeAudio: Int64?

        public init(fileName: String, description: String? = nil, classId: Int64? = nil, expireTime: String? = nil, container: String? = nil, videoStream: OutputVideoStream? = nil, audioStream: OutputAudioStream? = nil, removeVideo: Int64? = nil, removeAudio: Int64? = nil) {
            self.fileName = fileName
            self.description = description
            self.classId = classId
            self.expireTime = expireTime
            self.container = container
            self.videoStream = videoStream
            self.audioStream = audioStream
            self.removeVideo = removeVideo
            self.removeAudio = removeAudio
        }

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case description = "Description"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
            case container = "Container"
            case videoStream = "VideoStream"
            case audioStream = "AudioStream"
            case removeVideo = "RemoveVideo"
            case removeAudio = "RemoveAudio"
        }
    }

    /// 制作媒体文件任务信息
    public struct ComposeMediaTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 制作媒体文件任务进度，取值范围 [0-100] 。
        public let progress: Int64

        /// 制作媒体文件任务的输入。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let input: ComposeMediaTaskInput?

        /// 制作媒体文件任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: ComposeMediaTaskOutput?

        /// 输出视频的元信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaData: MediaMetaData?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case message = "Message"
            case progress = "Progress"
            case input = "Input"
            case output = "Output"
            case metaData = "MetaData"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 制作媒体文件任务的输入。
    public struct ComposeMediaTaskInput: TCOutputModel {
        /// 输入的媒体轨道列表，包括视频、音频、图片等素材组成的多个轨道信息。
        public let tracks: [MediaTrack]

        /// 制作视频文件时使用的画布。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let canvas: Canvas?

        /// 输出的媒体文件信息。
        public let output: ComposeMediaOutput

        enum CodingKeys: String, CodingKey {
            case tracks = "Tracks"
            case canvas = "Canvas"
            case output = "Output"
        }
    }

    /// 制作媒体文件任务的输出。
    public struct ComposeMediaTaskOutput: TCOutputModel {
        /// 文件类型，例如 mp4、mp3 等。
        public let fileType: String

        /// 媒体文件 ID。
        public let fileId: String

        /// 媒体文件播放地址。
        public let fileUrl: String

        /// 文件名称，最长 64 个字符。
        public let mediaName: String

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String

        enum CodingKeys: String, CodingKey {
            case fileType = "FileType"
            case fileId = "FileId"
            case fileUrl = "FileUrl"
            case mediaName = "MediaName"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
        }
    }

    /// 视频拼接源文件信息（2017 版）
    public struct ConcatFileInfo2017: TCOutputModel {
        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 视频拼接源文件的 ID。
        public let fileId: String

        /// 视频拼接源文件的地址。
        public let fileUrl: String

        /// 视频拼接源文件的格式。
        public let fileType: String

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case fileUrl = "FileUrl"
            case fileType = "FileType"
        }
    }

    /// 视频拼接任务信息，该结构仅用于对 2017 版[视频拼接](https://cloud.tencent.com/document/product/266/7821)接口发起的任务。
    public struct ConcatTask2017: TCOutputModel {
        /// 视频拼接任务 ID。
        public let taskId: String

        /// 视频拼接源文件信息。
        public let fileInfoSet: [ConcatFileInfo2017]

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case fileInfoSet = "FileInfoSet"
        }
    }

    /// 图片Ocr 文字鉴别信息的任务结果类型
    public struct ContentReviewOcrResult: TCOutputModel {
        /// Ocr 文字鉴别结果的评分，分值为0到100。
        public let confidence: Float

        /// Ocr 文字鉴别的结果建议，取值范围：
        /// <li>pass；</li>
        /// <li>review；</li>
        /// <li>block。</li>
        public let suggestion: String

        /// Ocr 文字鉴别的嫌疑关键词列表。
        public let keywordSet: [String]

        /// Ocr 文字鉴别的嫌疑文字出现的区域坐标 (像素级)，[x1, y1, x2, y2]，即左上角坐标、右下角坐标。
        public let areaCoordSet: [Int64]

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case keywordSet = "KeywordSet"
            case areaCoordSet = "AreaCoordSet"
        }
    }

    /// 图片智能内容识别任务结果
    public struct ContentReviewResult: TCOutputModel {
        /// 结果类型，取值范围：
        /// <li>Porn.Image：图片画面中的鉴别令人反感的信息结果；</li>
        /// <li>Terrorism.Image：图片画面中的鉴别令人不安全的信息结果；</li>
        /// <li>Political.Image：图片画面中的鉴别令人不适宜信息结果；</li>
        /// <li>Porn.Ocr：图片 OCR 文字中的鉴别令人反感的信息结果；</li>
        /// <li>Terrorism.Ocr：图片 OCR 文字中的鉴别令人不安全的信息结果；</li>
        /// <li>Political.Ocr：图片 OCR 文字中的鉴别令人不适宜信息结果。</li>
        public let type: String

        /// 图片画面中的鉴别令人反感的信息结果，当 Type 为 Porn.Image 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pornImageResult: PornImageResult?

        /// 图片画面中的鉴别令人不安全的信息结果，当 Type 为 Terrorism.Image 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let terrorismImageResult: TerrorismImageResult?

        /// 图片画面中的鉴别令人不适宜信息结果，当 Type 为 Political.Image 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let politicalImageResult: PoliticalImageResult?

        /// 图片 OCR 文字中的鉴别令人反感的信息结果，当 Type 为 Porn.Ocr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pornOcrResult: ContentReviewOcrResult?

        /// 图片 OCR 中的鉴别令人不安全的信息结果，当 Type 为 Terrorism.Ocr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let terrorismOcrResult: ContentReviewOcrResult?

        /// 图片 OCR 文字中的鉴别令人不适宜信息结果，当 Type 为 Political.Ocr 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let politicalOcrResult: ContentReviewOcrResult?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case pornImageResult = "PornImageResult"
            case terrorismImageResult = "TerrorismImageResult"
            case politicalImageResult = "PoliticalImageResult"
            case pornOcrResult = "PornOcrResult"
            case terrorismOcrResult = "TerrorismOcrResult"
            case politicalOcrResult = "PoliticalOcrResult"
        }
    }

    /// 音视频审核模板详情
    public struct ContentReviewTemplateItem: TCOutputModel {
        /// 音视频审核模板唯一标识。
        public let definition: Int64

        /// 音视频审核模板名称，长度限制：64 个字符。
        public let name: String

        /// 音视频审核模板描述信息，长度限制：256 个字符。
        public let comment: String

        /// 鉴别涉及令人反感的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pornConfigure: PornConfigureInfo?

        /// 鉴别涉及令人不安全的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let terrorismConfigure: TerrorismConfigureInfo?

        /// 鉴别涉及令人不适宜的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let politicalConfigure: PoliticalConfigureInfo?

        /// 违禁控制参数。违禁内容包括：
        /// <li>谩骂；</li>
        /// <li>涉毒违法。</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let prohibitedConfigure: ProhibitedConfigureInfo?

        /// 用户自定义音视频审核控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userDefineConfigure: UserDefineConfigureInfo?

        /// 音视频审核结果是否进入音视频审核墙（对音视频审核结果进行人工复核）的开关。
        /// <li>ON：是；</li>
        /// <li>OFF：否。</li>
        public let reviewWallSwitch: String

        /// 截帧间隔，单位为秒。当不填时，默认截帧间隔为 1 秒，最小值为 0.5 秒。
        public let screenshotInterval: Float

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case name = "Name"
            case comment = "Comment"
            case pornConfigure = "PornConfigure"
            case terrorismConfigure = "TerrorismConfigure"
            case politicalConfigure = "PoliticalConfigure"
            case prohibitedConfigure = "ProhibitedConfigure"
            case userDefineConfigure = "UserDefineConfigure"
            case reviewWallSwitch = "ReviewWallSwitch"
            case screenshotInterval = "ScreenshotInterval"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 对视频截图做封面任务输入参数类型
    public struct CoverBySnapshotTaskInput: TCInputModel, TCOutputModel {
        /// 指定时间点截图模板 ID。
        public let definition: UInt64

        /// 截图方式。包含：
        /// <li>Time：依照时间点截图</li>
        /// <li>Percent：依照百分比截图</li>
        public let positionType: String

        /// 截图位置：
        /// <li>对于依照时间点截图，该值表示指定视频第几秒的截图作为封面</li>
        /// <li>对于依照百分比截图，该值表示使用视频百分之多少的截图作为封面</li>
        public let positionValue: Float

        /// 水印列表，支持多张图片或文字水印，最大可支持 10 张。
        public let watermarkSet: [WatermarkInput]?

        public init(definition: UInt64, positionType: String, positionValue: Float, watermarkSet: [WatermarkInput]? = nil) {
            self.definition = definition
            self.positionType = positionType
            self.positionValue = positionValue
            self.watermarkSet = watermarkSet
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case positionType = "PositionType"
            case positionValue = "PositionValue"
            case watermarkSet = "WatermarkSet"
        }
    }

    /// 对视频截图做封面任务输出类型
    public struct CoverBySnapshotTaskOutput: TCOutputModel {
        /// 封面 URL。
        public let coverUrl: String

        enum CodingKeys: String, CodingKey {
            case coverUrl = "CoverUrl"
        }
    }

    /// 智能封面任务控制参数
    public struct CoverConfigureInfo: TCInputModel, TCOutputModel {
        /// 智能封面任务开关，可选值：
        /// <li>ON：开启智能封面任务；</li>
        /// <li>OFF：关闭智能封面任务。</li>
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 智能封面任务控制参数
    public struct CoverConfigureInfoForUpdate: TCInputModel {
        /// 智能封面任务开关，可选值：
        /// <li>ON：开启智能封面任务；</li>
        /// <li>OFF：关闭智能封面任务。</li>
        public let `switch`: String?

        public init(switch: String? = nil) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 视频截取雪碧图任务，该结构仅用于对 2017 版[截取雪碧图](https://cloud.tencent.com/document/product/266/8101)接口发起的任务。
    public struct CreateImageSpriteTask2017: TCOutputModel {
        /// 截图雪碧图任务 ID。
        public let taskId: String

        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 截取雪碧图文件 ID。
        public let fileId: String

        /// 雪碧图规格，参见[雪碧图截图模板](https://cloud.tencent.com/document/product/266/33480#.E9.9B.AA.E7.A2.A7.E5.9B.BE.E6.A8.A1.E6.9D.BF)。
        public let definition: Int64

        /// 雪碧图小图总数量。
        public let totalCount: UInt64

        /// 截取雪碧图输出的地址。
        public let imageSpriteUrlSet: [String]

        /// 雪碧图子图位置与时间关系 WebVtt 文件地址。
        public let webVttUrl: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case definition = "Definition"
            case totalCount = "TotalCount"
            case imageSpriteUrlSet = "ImageSpriteUrlSet"
            case webVttUrl = "WebVttUrl"
        }
    }

    /// 播放统计信息。
    public struct DailyPlayStatInfo: TCOutputModel {
        /// 播放媒体文件的日期，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let date: String

        /// 媒体文件ID。
        public let fileId: String

        /// 播放次数。
        public let playTimes: UInt64

        /// 播放流量，单位：字节。
        public let traffic: UInt64

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case fileId = "FileId"
            case playTimes = "PlayTimes"
            case traffic = "Traffic"
        }
    }

    /// 获取文件属性任务信息
    public struct DescribeFileAttributesTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，0 表示成功，其他值表示失败：
        /// <li>40000：输入参数不合法，请检查输入参数；</li>
        /// <li>60000：源文件错误（如视频数据损坏），请确认源文件是否正常；</li>
        /// <li>70000：内部服务错误，建议重试。</li>
        public let errCode: Int64

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误信息。
        public let message: String

        /// 任务进度，取值范围 [0-100] 。
        public let progress: Int64

        /// 媒体文件 ID。
        public let fileId: String

        /// 获取媒体文件属性任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: DescribeFileAttributesTaskOutput?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case errCodeExt = "ErrCodeExt"
            case message = "Message"
            case progress = "Progress"
            case fileId = "FileId"
            case output = "Output"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 获取文件属性任务输出
    public struct DescribeFileAttributesTaskOutput: TCOutputModel {
        /// 媒体文件的 Md5 值。
        public let md5: String

        enum CodingKeys: String, CodingKey {
            case md5 = "Md5"
        }
    }

    /// 域名信息
    public struct DomainDetailInfo: TCOutputModel {
        /// 域名名称。
        public let domain: String

        /// 加速地区信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accelerateAreaInfos: [AccelerateAreaInfo]?

        /// 部署状态，取值有：
        /// <li>Online：上线；</li>
        /// <li>Deploying：部署中；</li>
        /// <li>Locked: 锁定中，出现该状态时，无法对该域名进行部署变更。</li>
        public let deployStatus: String

        /// HTTPS 配置信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpsConfig: DomainHTTPSConfig?

        /// [Key 防盗链](https://cloud.tencent.com/document/product/266/14047)配置信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let urlSignatureAuthPolicy: UrlSignatureAuthPolicy?

        /// [Referer 防盗链](https://cloud.tencent.com/document/product/266/14046)配置信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let refererAuthPolicy: RefererAuthPolicy?

        /// 域名添加到腾讯云点播系统中的时间。
        /// <li>格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。</li>
        public let createTime: String

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case accelerateAreaInfos = "AccelerateAreaInfos"
            case deployStatus = "DeployStatus"
            case httpsConfig = "HTTPSConfig"
            case urlSignatureAuthPolicy = "UrlSignatureAuthPolicy"
            case refererAuthPolicy = "RefererAuthPolicy"
            case createTime = "CreateTime"
        }
    }

    /// 域名 HTTPS 配置信息
    public struct DomainHTTPSConfig: TCInputModel, TCOutputModel {
        /// 证书过期时间。
        /// <li>格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。</li>
        public let certExpireTime: String

        public init(certExpireTime: String) {
            self.certExpireTime = certExpireTime
        }

        enum CodingKeys: String, CodingKey {
            case certExpireTime = "CertExpireTime"
        }
    }

    /// DRM 自适应码流播放信息
    public struct DrmStreamingsInfo: TCInputModel, TCOutputModel {
        /// 保护类型为 SimpleAES 的转自适应码流模板 ID。
        public let simpleAesDefinition: UInt64?

        /// 保护类型为 Widevine 的转自适应码流模板 ID。
        public let widevineDefinition: UInt64?

        /// 保护类型为 FairPlay 的转自适应码流模板 ID。
        public let fairPlayDefinition: UInt64?

        public init(simpleAesDefinition: UInt64? = nil, widevineDefinition: UInt64? = nil, fairPlayDefinition: UInt64? = nil) {
            self.simpleAesDefinition = simpleAesDefinition
            self.widevineDefinition = widevineDefinition
            self.fairPlayDefinition = fairPlayDefinition
        }

        enum CodingKeys: String, CodingKey {
            case simpleAesDefinition = "SimpleAesDefinition"
            case widevineDefinition = "WidevineDefinition"
            case fairPlayDefinition = "FairPlayDefinition"
        }
    }

    /// DRM 自适应码流播放信息修改对象
    public struct DrmStreamingsInfoForUpdate: TCInputModel {
        /// 保护类型为 SimpleAES 的转自适应码流模板 ID。
        public let simpleAesDefinition: UInt64?

        /// 保护类型为 Widevine 的转自适应码流模板 ID。
        public let widevineDefinition: UInt64?

        /// 保护类型为 FairPlay 的转自适应码流模板 ID。
        public let fairPlayDefinition: UInt64?

        public init(simpleAesDefinition: UInt64? = nil, widevineDefinition: UInt64? = nil, fairPlayDefinition: UInt64? = nil) {
            self.simpleAesDefinition = simpleAesDefinition
            self.widevineDefinition = widevineDefinition
            self.fairPlayDefinition = fairPlayDefinition
        }

        enum CodingKeys: String, CodingKey {
            case simpleAesDefinition = "SimpleAesDefinition"
            case widevineDefinition = "WidevineDefinition"
            case fairPlayDefinition = "FairPlayDefinition"
        }
    }

    /// 画面动态范围信息。
    public struct DynamicRangeInfo: TCOutputModel {
        /// 画面动态范围信息。可取值：
        /// <li>SDR：Standard Dynamic Range 标准动态范围；</li>
        /// <li>HDR：High Dynamic Range 高动态范围。</li>
        public let type: String?

        /// 高动态范围类型，当 Type 为 HDR 时有效。目前支持的可取值：
        /// <li>hdr10：表示 hdr10 标准；</li>
        /// <li>hlg：表示 hlg 标准。</li>
        public let hdrType: String?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case hdrType = "HDRType"
        }
    }

    /// 编辑点播视频文件信息
    public struct EditMediaFileInfo: TCInputModel, TCOutputModel {
        /// 视频的 ID。
        public let fileId: String

        /// 视频剪辑的起始偏移时间偏移，单位：秒。
        public let startTimeOffset: Float?

        /// 视频剪辑的起始结束时间偏移，单位：秒。
        public let endTimeOffset: Float?

        public init(fileId: String, startTimeOffset: Float? = nil, endTimeOffset: Float? = nil) {
            self.fileId = fileId
            self.startTimeOffset = startTimeOffset
            self.endTimeOffset = endTimeOffset
        }

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
        }
    }

    /// 编辑视频的结果文件输出。
    public struct EditMediaOutputConfig: TCInputModel {
        /// 输出文件名，最长 64 个字符。缺省由系统指定生成文件名。
        public let mediaName: String?

        /// 输出文件格式，可选值：mp4、hls。默认是 mp4。
        public let type: String?

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64?

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String?

        /// 输出的视频信息。
        public let videoStream: EditMediaVideoStream?

        /// 极速高清转码参数。
        public let tehdConfig: EditMediaTEHDConfig?

        public init(mediaName: String? = nil, type: String? = nil, classId: Int64? = nil, expireTime: String? = nil, videoStream: EditMediaVideoStream? = nil, tehdConfig: EditMediaTEHDConfig? = nil) {
            self.mediaName = mediaName
            self.type = type
            self.classId = classId
            self.expireTime = expireTime
            self.videoStream = videoStream
            self.tehdConfig = tehdConfig
        }

        enum CodingKeys: String, CodingKey {
            case mediaName = "MediaName"
            case type = "Type"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
            case videoStream = "VideoStream"
            case tehdConfig = "TEHDConfig"
        }
    }

    /// 编辑视频流信息
    public struct EditMediaStreamInfo: TCInputModel, TCOutputModel {
        /// 录制的流 ID
        public let streamId: String

        /// 流剪辑的起始时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let startTime: String?

        /// 流剪辑的结束时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let endTime: String?

        public init(streamId: String, startTime: String? = nil, endTime: String? = nil) {
            self.streamId = streamId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case streamId = "StreamId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 视频编辑极速高清参数配置。
    public struct EditMediaTEHDConfig: TCInputModel, TCOutputModel {
        /// 极速高清类型，可选值：<li>TEHD-100 表示极速高清-100;</li> <li>OFF 表示关闭极速高清。</li>不填表示 OFF。
        public let type: String

        public init(type: String) {
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    /// 编辑视频任务信息
    public struct EditMediaTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String?

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String?

        /// 错误码，0 表示成功，其他值表示失败：
        /// <li>40000：输入参数不合法，请检查输入参数；</li>
        /// <li>60000：源文件错误（如视频数据损坏），请确认源文件是否正常；</li>
        /// <li>70000：内部服务错误，建议重试。</li>
        public let errCode: Int64?

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String?

        /// 错误信息。
        public let message: String?

        /// 编辑视频任务进度，取值范围 [0-100] 。
        public let progress: Int64?

        /// 视频编辑任务的输入。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let input: EditMediaTaskInput?

        /// 视频编辑任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: EditMediaTaskOutput?

        /// 输出视频的元信息。
        public let metaData: MediaMetaData?

        /// 任务类型为 Procedure 的任务 ID。若发起[编辑视频](https://cloud.tencent.com/document/api/266/34783)任务时指定了任务流模板(ProcedureName)，当该任务流模板指定了 MediaProcessTask、AiAnalysisTask、AiRecognitionTask 中的一个或多个时发起该任务。
        public let procedureTaskId: String?

        /// 任务类型为 ReviewAudioVideo 的任务 ID。若发起[编辑视频](https://cloud.tencent.com/document/api/266/34783)任务时指定了任务流模板(ProcedureName)，当该任务流模板指定了 ReviewAudioVideoTask 时，发起该任务。
        public let reviewAudioVideoTaskId: String?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String?

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String?

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case errCodeExt = "ErrCodeExt"
            case message = "Message"
            case progress = "Progress"
            case input = "Input"
            case output = "Output"
            case metaData = "MetaData"
            case procedureTaskId = "ProcedureTaskId"
            case reviewAudioVideoTaskId = "ReviewAudioVideoTaskId"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 编辑视频任务的输入。
    public struct EditMediaTaskInput: TCOutputModel {
        /// 输入视频的来源类型，可以取的值为 File，Stream 两种。
        public let inputType: String

        /// 输入的视频文件信息，当 InputType 为 File 时，该字段有值。
        public let fileInfoSet: [EditMediaFileInfo]

        /// 输入的流信息，当 InputType 为 Stream 时，该字段有值。
        public let streamInfoSet: [EditMediaStreamInfo]

        enum CodingKeys: String, CodingKey {
            case inputType = "InputType"
            case fileInfoSet = "FileInfoSet"
            case streamInfoSet = "StreamInfoSet"
        }
    }

    /// 编辑视频任务的输出
    public struct EditMediaTaskOutput: TCOutputModel {
        /// 文件类型，例如 mp4、flv 等。
        public let fileType: String

        /// 媒体文件播放地址。
        public let fileUrl: String

        /// 媒体文件 ID。
        public let fileId: String

        /// 输出文件名，最长 64 个字符。缺省由系统指定生成文件名。
        public let mediaName: String

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String

        enum CodingKeys: String, CodingKey {
            case fileType = "FileType"
            case fileUrl = "FileUrl"
            case fileId = "FileId"
            case mediaName = "MediaName"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
        }
    }

    /// 视频流配置信息
    public struct EditMediaVideoStream: TCInputModel {
        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        /// 默认值：open。
        public let resolutionAdaptive: String?

        /// 视频流宽度（或长边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率取基准分辨率；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按基准分辨率比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按基准分辨率比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let width: UInt64?

        /// 视频流高度（或短边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率取基准分辨率；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按基准分辨率比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按基准分辨率比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let height: UInt64?

        public init(resolutionAdaptive: String? = nil, width: UInt64? = nil, height: UInt64? = nil) {
            self.resolutionAdaptive = resolutionAdaptive
            self.width = width
            self.height = height
        }

        enum CodingKeys: String, CodingKey {
            case resolutionAdaptive = "ResolutionAdaptive"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 空的轨道片段，用来进行时间轴的占位。如需要两个音频片段之间有一段时间的静音，可以用 EmptyTrackItem 来进行占位。
    public struct EmptyTrackItem: TCInputModel, TCOutputModel {
        /// 持续时间，单位为秒。
        public let duration: Float

        public init(duration: Float) {
            self.duration = duration
        }

        enum CodingKeys: String, CodingKey {
            case duration = "Duration"
        }
    }

    /// 事件通知内容，其中，TranscodeCompleteEvent、ConcatCompleteEvent、ClipCompleteEvent、CreateImageSpriteCompleteEvent、SnapshotByTimeOffsetCompleteEvent 为兼容 2017 版接口发起任务的事件通知。
    public struct EventContent: TCOutputModel {
        /// 事件句柄，调用方必须调用 ConfirmEvents 来确认消息已经收到，确认有效时间 30 秒。失效后，事件可重新被获取。
        public let eventHandle: String

        /// <b>支持事件类型：</b>
        /// <li>NewFileUpload：视频上传完成；</li>
        /// <li>ProcedureStateChanged：任务流状态变更；</li>
        /// <li>FileDeleted：视频删除完成；</li>
        /// <li>RestoreMediaComplete：视频取回完成；</li>
        /// <li>PullComplete：视频转拉完成；</li>
        /// <li>EditMediaComplete：视频编辑完成；</li>
        /// <li>SplitMediaComplete：视频拆分完成；</li>
        /// <li>ComposeMediaComplete：制作媒体文件完成；</li>
        /// <li>WechatMiniProgramPublishComplete：微信小程序发布完成。</li>
        /// <li>RemoveWatermark：智能去除水印完成。</li>
        /// <li>RebuildMediaComplete：音画质重生完成事件。</li>
        /// <li>ReviewAudioVideoComplete：音视频审核完成；</li>
        /// <li>ExtractTraceWatermarkComplete：提取溯源水印完成；</li>
        /// <li>DescribeFileAttributesComplete：获取文件属性完成；</li>
        /// <b>兼容 2017 版的事件类型：</b>
        /// <li>TranscodeComplete：视频转码完成；</li>
        /// <li>ConcatComplete：视频拼接完成；</li>
        /// <li>ClipComplete：视频剪辑完成；</li>
        /// <li>CreateImageSpriteComplete：视频截取雪碧图完成；</li>
        /// <li>CreateSnapshotByTimeOffsetComplete：视频按时间点截图完成。</li>
        public let eventType: String

        /// 视频上传完成事件，当事件类型为 NewFileUpload 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileUploadEvent: FileUploadTask?

        /// 任务流状态变更事件，当事件类型为 ProcedureStateChanged 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let procedureStateChangeEvent: ProcedureTask?

        /// 文件删除事件，当事件类型为 FileDeleted 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileDeleteEvent: FileDeleteTask?

        /// 视频转拉完成事件，当事件类型为 PullComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pullCompleteEvent: PullUploadTask?

        /// 视频编辑完成事件，当事件类型为 EditMediaComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let editMediaCompleteEvent: EditMediaTask?

        /// 视频拆分完成事件，当事件类型为 SplitMediaComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let splitMediaCompleteEvent: SplitMediaTask?

        /// 制作媒体文件任务完成事件，当事件类型为 ComposeMediaComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let composeMediaCompleteEvent: ComposeMediaTask?

        /// 视频剪辑完成事件，当事件类型为 ClipComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clipCompleteEvent: ClipTask2017?

        /// 视频转码完成事件，当事件类型为 TranscodeComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transcodeCompleteEvent: TranscodeTask2017?

        /// 视频截取雪碧图完成事件，当事件类型为 CreateImageSpriteComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createImageSpriteCompleteEvent: CreateImageSpriteTask2017?

        /// 视频拼接完成事件，当事件类型为 ConcatComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let concatCompleteEvent: ConcatTask2017?

        /// 视频按时间点截图完成事件，当事件类型为 CreateSnapshotByTimeOffsetComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshotByTimeOffsetCompleteEvent: SnapshotByTimeOffsetTask2017?

        /// 微信发布完成事件，当事件类型为 WechatPublishComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wechatPublishCompleteEvent: WechatPublishTask?

        /// 微信小程序发布任务完成事件，当事件类型为 WechatMiniProgramPublishComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wechatMiniProgramPublishCompleteEvent: WechatMiniProgramPublishTask?

        /// 智能去除水印完成事件，当事件类型为 RemoveWatermark 有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let removeWatermarkCompleteEvent: RemoveWatermarkTask?

        /// 视频取回完成事件，当事件类型为 RestoreMediaComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let restoreMediaCompleteEvent: RestoreMediaTask?

        /// 音画质重生完成事件，当事件类型为 RebuildMediaComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rebuildMediaCompleteEvent: RebuildMediaTask?

        /// 溯源水印提取完成事件，当事件类型为 ExtractTraceWatermarkComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extractTraceWatermarkCompleteEvent: ExtractTraceWatermarkTask?

        /// 音视频审核完成事件，当事件类型为 ReviewAudioVideoComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reviewAudioVideoCompleteEvent: ReviewAudioVideoTask?

        /// 该字段已无效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reduceMediaBitrateCompleteEvent: ReduceMediaBitrateTask?

        /// 获取文件属性完成事件，当事件类型为 DescribeFileAttributesComplete 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let describeFileAttributesCompleteEvent: DescribeFileAttributesTask?

        enum CodingKeys: String, CodingKey {
            case eventHandle = "EventHandle"
            case eventType = "EventType"
            case fileUploadEvent = "FileUploadEvent"
            case procedureStateChangeEvent = "ProcedureStateChangeEvent"
            case fileDeleteEvent = "FileDeleteEvent"
            case pullCompleteEvent = "PullCompleteEvent"
            case editMediaCompleteEvent = "EditMediaCompleteEvent"
            case splitMediaCompleteEvent = "SplitMediaCompleteEvent"
            case composeMediaCompleteEvent = "ComposeMediaCompleteEvent"
            case clipCompleteEvent = "ClipCompleteEvent"
            case transcodeCompleteEvent = "TranscodeCompleteEvent"
            case createImageSpriteCompleteEvent = "CreateImageSpriteCompleteEvent"
            case concatCompleteEvent = "ConcatCompleteEvent"
            case snapshotByTimeOffsetCompleteEvent = "SnapshotByTimeOffsetCompleteEvent"
            case wechatPublishCompleteEvent = "WechatPublishCompleteEvent"
            case wechatMiniProgramPublishCompleteEvent = "WechatMiniProgramPublishCompleteEvent"
            case removeWatermarkCompleteEvent = "RemoveWatermarkCompleteEvent"
            case restoreMediaCompleteEvent = "RestoreMediaCompleteEvent"
            case rebuildMediaCompleteEvent = "RebuildMediaCompleteEvent"
            case extractTraceWatermarkCompleteEvent = "ExtractTraceWatermarkCompleteEvent"
            case reviewAudioVideoCompleteEvent = "ReviewAudioVideoCompleteEvent"
            case reduceMediaBitrateCompleteEvent = "ReduceMediaBitrateCompleteEvent"
            case describeFileAttributesCompleteEvent = "DescribeFileAttributesCompleteEvent"
        }
    }

    /// 提取溯源水印任务。
    public struct ExtractTraceWatermarkTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 错误码，0 表示成功，其他值表示失败：
        /// <li>40000：输入参数不合法，请检查输入参数；</li>
        /// <li>60000：源文件错误（如视频数据损坏），请确认源文件是否正常；</li>
        /// <li>70000：内部服务错误，建议重试。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 提取溯源水印任务输入信息。
        public let input: ExtractTraceWatermarkTaskInput

        /// 提取溯源水印任务输出信息。
        public let output: ExtractTraceWatermarkTaskOutput

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case message = "Message"
            case errCodeExt = "ErrCodeExt"
            case input = "Input"
            case output = "Output"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 提取溯源水印输入
    public struct ExtractTraceWatermarkTaskInput: TCOutputModel {
        /// 需要提取水印的媒体 URL。
        public let url: String

        enum CodingKeys: String, CodingKey {
            case url = "Url"
        }
    }

    /// 提取溯源水印输出信息
    public struct ExtractTraceWatermarkTaskOutput: TCOutputModel {
        /// 播放者的 ID，以十六进制表示，共6位，该参数用于 [溯源水印](https://cloud.tencent.com/document/product/266/75789) 使用场景。
        public let uv: String

        /// 该字段已废弃。
        public let uid: String

        enum CodingKeys: String, CodingKey {
            case uv = "Uv"
            case uid = "Uid"
        }
    }

    /// 人脸识别任务控制参数
    public struct FaceConfigureInfo: TCInputModel, TCOutputModel {
        /// 人脸识别任务开关，可选值：
        /// <li>ON：开启智能人脸识别任务；</li>
        /// <li>OFF：关闭智能人脸识别任务。</li>
        public let `switch`: String

        /// 人脸识别过滤分数，当识别结果达到该分数以上，返回识别结果。默认 95 分。取值范围：0 - 100。
        public let score: Float?

        /// 默认人物过滤标签，指定需要返回的默认人物的标签。如果未填或者为空，则全部默认人物结果都返回。标签可选值：
        /// <li>entertainment：娱乐明星；</li>
        /// <li>sport：体育明星；</li>
        /// <li>politician：相关人物。</li>
        public let defaultLibraryLabelSet: [String]?

        /// 用户自定义人物过滤标签，指定需要返回的用户自定义人物的标签。如果未填或者为空，则全部自定义人物结果都返回。
        /// 标签个数最多 100 个，每个标签长度最多 16 个字符。
        public let userDefineLibraryLabelSet: [String]?

        /// 人物库选择，可选值：
        /// <li>Default：使用默认人物库；</li>
        /// <li>UserDefine：使用用户自定义人物库。</li>
        /// <li>All：同时使用默认人物库和用户自定义人物库。</li>
        /// 默认值：All，使用系统默认人物库及用户自定义人物库。
        public let faceLibrary: String?

        public init(switch: String, score: Float? = nil, defaultLibraryLabelSet: [String]? = nil, userDefineLibraryLabelSet: [String]? = nil, faceLibrary: String? = nil) {
            self.switch = `switch`
            self.score = score
            self.defaultLibraryLabelSet = defaultLibraryLabelSet
            self.userDefineLibraryLabelSet = userDefineLibraryLabelSet
            self.faceLibrary = faceLibrary
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case score = "Score"
            case defaultLibraryLabelSet = "DefaultLibraryLabelSet"
            case userDefineLibraryLabelSet = "UserDefineLibraryLabelSet"
            case faceLibrary = "FaceLibrary"
        }
    }

    /// 人脸识别任务控制参数
    public struct FaceConfigureInfoForUpdate: TCInputModel {
        /// 人脸识别任务开关，可选值：
        /// <li>ON：开启智能人脸识别任务；</li>
        /// <li>OFF：关闭智能人脸识别任务。</li>
        public let `switch`: String?

        /// 人脸识别过滤分数，当识别结果达到该分数以上，返回识别结果。取值范围：0-100。
        public let score: Float?

        /// 默认人物过滤标签，指定需要返回的默认人物的标签。如果未填或者为空，则全部默认人物结果都返回。标签可选值：
        /// <li>entertainment：娱乐明星；</li>
        /// <li>sport：体育明星；</li>
        /// <li>politician：相关人物。</li>
        public let defaultLibraryLabelSet: [String]?

        /// 用户自定义人物过滤标签，指定需要返回的用户自定义人物的标签。如果未填或者为空，则全部自定义人物结果都返回。
        /// 标签个数最多 100 个，每个标签长度最多 16 个字符。
        public let userDefineLibraryLabelSet: [String]?

        /// 人物库选择，可选值：
        /// <li>Default：使用默认人物库；</li>
        /// <li>UserDefine：使用用户自定义人物库。</li>
        /// <li>All：同时使用默认人物库和用户自定义人物库。</li>
        public let faceLibrary: String?

        public init(switch: String? = nil, score: Float? = nil, defaultLibraryLabelSet: [String]? = nil, userDefineLibraryLabelSet: [String]? = nil, faceLibrary: String? = nil) {
            self.switch = `switch`
            self.score = score
            self.defaultLibraryLabelSet = defaultLibraryLabelSet
            self.userDefineLibraryLabelSet = userDefineLibraryLabelSet
            self.faceLibrary = faceLibrary
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case score = "Score"
            case defaultLibraryLabelSet = "DefaultLibraryLabelSet"
            case userDefineLibraryLabelSet = "UserDefineLibraryLabelSet"
            case faceLibrary = "FaceLibrary"
        }
    }

    /// 人脸增强控制
    public struct FaceEnhanceInfo: TCInputModel, TCOutputModel {
        /// 人脸增强控制开关，可选值：
        /// <li>ON：开启人脸增强；</li>
        /// <li>OFF：关闭人脸增强。</li>
        public let `switch`: String

        /// 人脸增强强度，仅当人脸增强控制开关为 ON 时有效，取值范围：0.0~1.0。
        /// 默认：0.0。
        public let intensity: Float?

        public init(switch: String, intensity: Float? = nil) {
            self.switch = `switch`
            self.intensity = intensity
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case intensity = "Intensity"
        }
    }

    /// 文件删除结果信息
    public struct FileDeleteResultItem: TCOutputModel {
        /// 删除的文件 ID 。
        public let fileId: String

        /// 本次删除的文件部分。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deleteParts: [MediaDeleteItem]?

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case deleteParts = "DeleteParts"
        }
    }

    /// 文件删除任务
    public struct FileDeleteTask: TCOutputModel {
        /// 删除文件 ID 列表。
        public let fileIdSet: [String]

        /// 删除文件结果信息列表。
        public let fileDeleteResultInfo: [FileDeleteResultItem]

        enum CodingKeys: String, CodingKey {
            case fileIdSet = "FileIdSet"
            case fileDeleteResultInfo = "FileDeleteResultInfo"
        }
    }

    /// 文件审核信息。
    public struct FileReviewInfo: TCOutputModel {
        /// 媒体审核信息\*。
        ///
        /// \* 只展示通过 [音视频审核(ReviewAudioVideo)](https://cloud.tencent.com/document/api/266/80283) 或 [图片审核(ReviewImage)](https://cloud.tencent.com/document/api/266/73217) 发起的审核结果信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mediaReviewInfo: ReviewInfo?

        /// 媒体封面审核信息\*。
        ///
        /// \* 只展示通过 [音视频审核(ReviewAudioVideo)](https://cloud.tencent.com/document/api/266/80283) 或 [图片审核(ReviewImage)](https://cloud.tencent.com/document/api/266/73217) 发起的审核结果信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coverReviewInfo: ReviewInfo?

        enum CodingKeys: String, CodingKey {
            case mediaReviewInfo = "MediaReviewInfo"
            case coverReviewInfo = "CoverReviewInfo"
        }
    }

    /// 文件上传任务信息
    public struct FileUploadTask: TCOutputModel {
        /// 文件唯一 ID。
        public let fileId: String?

        /// 上传完成后生成的媒体文件基础信息。
        public let mediaBasicInfo: MediaBasicInfo?

        /// 任务类型为 Procedure 的任务 ID。若视频[上传时指定要执行的任务(procedure)](https://cloud.tencent.com/document/product/266/33475#.E4.BB.BB.E5.8A.A1.E5.8F.91.E8.B5.B7)，当该任务流模板指定了 MediaProcessTask、AiAnalysisTask、AiRecognitionTask 中的一个或多个时发起该任务。
        public let procedureTaskId: String?

        /// 任务类型为 ReviewAudioVideo 的任务 ID。若视频[上传时指定要执行的任务(procedure)](https://cloud.tencent.com/document/product/266/33475#.E4.BB.BB.E5.8A.A1.E5.8F.91.E8.B5.B7)，当该任务流模板指定了 ReviewAudioVideoTask 时，发起该任务。
        public let reviewAudioVideoTaskId: String?

        /// 元信息。包括大小、时长、视频流信息、音频流信息等。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaData: MediaMetaData?

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case mediaBasicInfo = "MediaBasicInfo"
            case procedureTaskId = "ProcedureTaskId"
            case reviewAudioVideoTaskId = "ReviewAudioVideoTaskId"
            case metaData = "MetaData"
        }
    }

    /// 智能按帧标签任务控制参数
    public struct FrameTagConfigureInfo: TCInputModel, TCOutputModel {
        /// 智能按帧标签任务开关，可选值：
        /// <li>ON：开启智能按帧标签任务；</li>
        /// <li>OFF：关闭智能按帧标签任务。</li>
        public let `switch`: String

        /// 截帧间隔，单位为秒，当不填时，默认截帧间隔为 1 秒，最小值为 0.5 秒。
        public let screenshotInterval: Float?

        public init(switch: String = "OFF", screenshotInterval: Float? = nil) {
            self.switch = `switch`
            self.screenshotInterval = screenshotInterval
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case screenshotInterval = "ScreenshotInterval"
        }
    }

    /// 智能按帧标签任务控制参数
    public struct FrameTagConfigureInfoForUpdate: TCInputModel {
        /// 智能按帧标签任务开关，可选值：
        /// <li>ON：开启智能按帧标签任务；</li>
        /// <li>OFF：关闭智能按帧标签任务。</li>
        public let `switch`: String?

        /// 截帧间隔，单位为秒，最小值为 0.5 秒。
        public let screenshotInterval: Float?

        public init(switch: String? = nil, screenshotInterval: Float? = nil) {
            self.switch = `switch`
            self.screenshotInterval = screenshotInterval
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case screenshotInterval = "ScreenshotInterval"
        }
    }

    /// 高动态范围类型控制参数。
    public struct HDRInfo: TCInputModel, TCOutputModel {
        /// 高动态范围类型控制开关，可选值：
        /// <li>ON：开启高动态范围类型转换；</li>
        /// <li>OFF：关闭高动态范围类型转换。</li>
        public let `switch`: String

        /// 高动态范围类型，可选值：
        /// <li>hdr10：表示 hdr10 标准；</li>
        /// <li>hlg：表示 hlg 标准。</li>
        ///
        /// 注意：
        /// <li> 仅当高动态范围类型控制开关为 ON 时有效；</li>
        /// <li>当画质重生目标参数中指定视频输出参数的视频流编码格式 Codec 为 libx265 时有效。</li>
        public let type: String?

        public init(switch: String, type: String? = nil) {
            self.switch = `switch`
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
        }
    }

    /// 视频片头片尾识别任务控制参数
    public struct HeadTailConfigureInfo: TCInputModel, TCOutputModel {
        /// 视频片头片尾识别任务开关，可选值：
        /// <li>ON：开启智能视频片头片尾识别任务；</li>
        /// <li>OFF：关闭智能视频片头片尾识别任务。</li>
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 视频片头片尾识别任务控制参数
    public struct HeadTailConfigureInfoForUpdate: TCInputModel {
        /// 视频片头片尾识别任务开关，可选值：
        /// <li>ON：开启智能视频片头片尾识别任务；</li>
        /// <li>OFF：关闭智能视频片头片尾识别任务。</li>
        public let `switch`: String?

        public init(switch: String? = nil) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 片尾任务输入类型。
    public struct HeadTailTaskInput: TCInputModel, TCOutputModel {
        /// 片头片尾模板号。
        public let definition: Int64

        public init(definition: Int64) {
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 片头片尾模板详情
    public struct HeadTailTemplate: TCOutputModel {
        /// 片头片尾模板号。
        public let definition: Int64

        /// 模板名，最大支持 64 个字符。
        public let name: String

        /// 模板描述，最大支持 256 个字符。
        public let comment: String

        /// 片头候选列表。使用时会选择跟正片分辨率最贴近的一个使用，当存在相同的候选时，选择第一个使用，最大支持 5 个。
        public let headCandidateSet: [String]

        /// 片尾候选列表。使用时会选择跟正片分辨率最贴近的一个使用，当存在相同的候选时，选择第一个使用，最大支持 5 个。
        public let tailCandidateSet: [String]

        /// 填充方式，当视频流配置宽高参数与原始视频的宽高比不一致时，对转码的处理方式，即为“填充”。可选填充方式：
        /// <li> stretch：拉伸，对每一帧进行拉伸，填满整个画面，可能导致转码后的视频被“压扁“或者“拉长“；</li>
        /// <li> gauss：高斯模糊，保持视频宽高比不变，边缘剩余部分使用高斯模糊；</li>
        /// <li> white：留白，保持视频宽高比不变，边缘剩余部分使用白色填充；</li>
        /// <li> black：留黑，保持视频宽高比不变，边缘剩余部分使用黑色填充。</li>
        /// 默认值：stretch 。
        public let fillType: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case name = "Name"
            case comment = "Comment"
            case headCandidateSet = "HeadCandidateSet"
            case tailCandidateSet = "TailCandidateSet"
            case fillType = "FillType"
        }
    }

    /// 智能精彩集锦片段列表。
    public struct HighlightSegmentItem: TCOutputModel {
        /// 置信度。
        public let confidence: Float

        /// 片段起始时间偏移。
        public let startTimeOffset: Float

        /// 片段结束时间偏移。
        public let endTimeOffset: Float

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
        }
    }

    /// 智能精彩片段任务控制参数
    public struct HighlightsConfigureInfo: TCInputModel, TCOutputModel {
        /// 智能精彩片段任务开关，可选值：
        /// <li>ON：开启智能精彩片段任务；</li>
        /// <li>OFF：关闭智能精彩片段任务。</li>
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 智能精彩片段任务控制参数
    public struct HighlightsConfigureInfoForUpdate: TCInputModel {
        /// 智能精彩片段任务开关，可选值：
        /// <li>ON：开启智能精彩片段任务；</li>
        /// <li>OFF：关闭智能精彩片段任务。</li>
        public let `switch`: String?

        public init(switch: String? = nil) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 图片模糊处理。
    public struct ImageBlur: TCInputModel {
        /// 图片模糊的操作类型。可选模式有：
        /// <li>Gaussian : 高斯模糊。</li>
        public let type: String

        /// 模糊半径，取值范围为1 - 50。当 Type 取值为 Gaussian 时此字段有效。
        public let radius: Int64?

        /// 正态分布的标准差，必须大于0。当 Type 取值为 Gaussian 时此字段有效。
        public let sigma: Int64?

        public init(type: String, radius: Int64? = nil, sigma: Int64? = nil) {
            self.type = type
            self.radius = radius
            self.sigma = sigma
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case radius = "Radius"
            case sigma = "Sigma"
        }
    }

    /// 图片中心裁剪处理。
    public struct ImageCenterCut: TCInputModel {
        /// 图片的裁剪模式，可选 Circle 和 Rectangle。
        /// <li>Circle ： 内切圆裁剪，输出图片半径为 Radius。</li>
        /// <li>Rectangle ： 矩形裁剪，输出图片宽为 Width ， 高为 Height。</li>
        public let type: String

        /// 输出图片的宽度，单位为像素，当 Type 取值为 Rectangle 时有效。
        public let width: Int64?

        /// 输出图片的高度，单位为像素，当 Type 取值为 Rectangle 时有效。
        public let height: Int64?

        /// 输出图片的半径，单位为像素，当 Type 取值为 Circle 时有效。
        public let radius: Int64?

        public init(type: String, width: Int64? = nil, height: Int64? = nil, radius: Int64? = nil) {
            self.type = type
            self.width = width
            self.height = height
            self.radius = radius
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case width = "Width"
            case height = "Height"
            case radius = "Radius"
        }
    }

    /// 图片智能内容识别任务输入
    public struct ImageContentReviewInput: TCInputModel {
        /// 图片智能内容审核模板 ID。当前只支持：
        /// <li>10：所有审核类型均打开。</li>
        public let definition: UInt64

        public init(definition: UInt64) {
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 单个图片处理操作。
    public struct ImageOperation: TCInputModel, TCOutputModel {
        /// 图片处理类型。可选类型有：
        /// <li>Scale : 图片缩略处理。</li>
        /// <li>CenterCut : 图片裁剪处理。</li>
        public let type: String

        /// 图片缩略处理，仅当 Type 为 Scale 时有效。
        public let scale: ImageScale?

        /// 图片裁剪处理，仅当 Type 为 CenterCut 时有效。
        public let centerCut: ImageCenterCut?

        /// 图片模糊处理，仅当 Type 为 Blur 时有效。
        public let blur: ImageBlur?

        public init(type: String, scale: ImageScale? = nil, centerCut: ImageCenterCut? = nil, blur: ImageBlur? = nil) {
            self.type = type
            self.scale = scale
            self.centerCut = centerCut
            self.blur = blur
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case scale = "Scale"
            case centerCut = "CenterCut"
            case blur = "Blur"
        }
    }

    /// 图片处理模板， 最多支持三次操作。例如：裁剪-缩略-裁剪。
    public struct ImageProcessingTemplate: TCOutputModel {
        /// 图片处理模板唯一标识。
        public let definition: UInt64

        /// 模板类型，取值范围：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 图片处理模板名称。
        public let name: String

        /// 模板描述信息。
        public let comment: String

        /// 图片处理操作数组，操作将以数组顺序执行。
        /// <li>长度限制：3。</li>
        public let operations: [ImageOperation]

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case comment = "Comment"
            case operations = "Operations"
            case createTime = "CreateTime"
        }
    }

    /// 图片审核次数统计数据。
    public struct ImageReviewUsageDataItem: TCOutputModel {
        /// 数据所在时间区间的开始时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#52)。如：当时间粒度为天，2018-12-01T00:00:00+08:00，表示2018年12月1日（含）到2018年12月2日（不含）区间。
        public let time: String

        /// 次数。
        public let count: Int64

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case count = "Count"
        }
    }

    /// 图片缩放处理。
    public struct ImageScale: TCInputModel {
        /// 图片缩放的操作类型。可选模式有：
        /// <li>WidthFirst : 指定图片的宽为 Width ，高度等比缩放。</li>
        /// <li>HeightFirst : 指定图片的高为 Height ，宽度等比缩放。</li>
        /// <li>LongEdgeFirst : 指定图片的长边为 LongEdge ，短边等比缩放。</li>
        /// <li>ShortEdgeFirst : 指定图片的短边为 ShortEdge ，长边等比缩放。</li>
        /// <li>Force : 忽略原图宽高比例，指定图片宽度为 Width，高度为 Height ，强行缩放图片，可能导致目标图片变形。</li>
        public let type: String

        /// 输出图片的高度，单位为像素。当 Type 取值为 HeightFirst 或 Force 时此字段有效。
        public let height: UInt64?

        /// 输出图片的宽度，单位为像素。当 Type 取值为 WidthFirst 或 Force 时此字段有效。
        public let width: UInt64?

        /// 输出图片的长边长度，单位为像素。当 Type 取值为 LongEdgeFirst 时此字段有效。
        public let longEdge: UInt64?

        /// 输出图片的短边长度，单位为像素。当 Type 取值为 ShortEdgeFirst 时此字段有效。
        public let shortEdge: UInt64?

        public init(type: String, height: UInt64? = nil, width: UInt64? = nil, longEdge: UInt64? = nil, shortEdge: UInt64? = nil) {
            self.type = type
            self.height = height
            self.width = width
            self.longEdge = longEdge
            self.shortEdge = shortEdge
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case height = "Height"
            case width = "Width"
            case longEdge = "LongEdge"
            case shortEdge = "ShortEdge"
        }
    }

    /// 对视频截雪碧图任务输入参数类型
    public struct ImageSpriteTaskInput: TCInputModel, TCOutputModel {
        /// 雪碧图模板 ID。
        public let definition: UInt64

        public init(definition: UInt64) {
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
        }
    }

    /// 雪碧图模板详情
    public struct ImageSpriteTemplate: TCOutputModel {
        /// 雪碧图模板唯一标识。
        public let definition: UInt64

        /// 模板类型，取值范围：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 雪碧图模板名称。
        public let name: String

        /// 雪碧图中小图的宽度（或长边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let width: UInt64

        /// 雪碧图中小图的高度（或短边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let height: UInt64

        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        /// 默认值：open。
        public let resolutionAdaptive: String

        /// 采样类型。
        public let sampleType: String

        /// 采样间隔。
        public let sampleInterval: UInt64

        /// 雪碧图中小图的行数。
        public let rowCount: UInt64

        /// 雪碧图中小图的列数。
        public let columnCount: UInt64

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        /// 填充方式，当视频流配置宽高参数与原始视频的宽高比不一致时，对转码的处理方式，即为“填充”。可选填充方式：
        /// <li> stretch：拉伸，对每一帧进行拉伸，填满整个画面，可能导致转码后的视频被“压扁“或者“拉长“；</li>
        /// <li>black：留黑，保持视频宽高比不变，边缘剩余部分使用黑色填充。</li>
        /// 默认值：black 。
        public let fillType: String

        /// 模板描述信息。
        public let comment: String

        /// 图片格式。
        public let format: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case width = "Width"
            case height = "Height"
            case resolutionAdaptive = "ResolutionAdaptive"
            case sampleType = "SampleType"
            case sampleInterval = "SampleInterval"
            case rowCount = "RowCount"
            case columnCount = "ColumnCount"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case fillType = "FillType"
            case comment = "Comment"
            case format = "Format"
        }
    }

    /// 图像旋转、翻转等操作
    public struct ImageTransform: TCInputModel, TCOutputModel {
        /// 类型，取值有：
        /// <li> Rotate：图像旋转。</li>
        /// <li> Flip：图像翻转。</li>
        public let type: String

        /// 图像以中心点为原点进行旋转的角度，取值范围0~360。当 Type = Rotate 时有效。
        public let rotateAngle: Float?

        /// 图像翻转动作，取值有：
        /// <li>Horizental：水平翻转，即左右镜像。</li>
        /// <li>Vertical：垂直翻转，即上下镜像。</li>
        /// 当 Type = Flip 时有效。
        public let flip: String?

        public init(type: String, rotateAngle: Float? = nil, flip: String? = nil) {
            self.type = type
            self.rotateAngle = rotateAngle
            self.flip = flip
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case rotateAngle = "RotateAngle"
            case flip = "Flip"
        }
    }

    /// 图片水印模板输入参数
    public struct ImageWatermarkInput: TCInputModel {
        /// 水印图片 [Base64](https://tools.ietf.org/html/rfc4648) 编码后的字符串。支持 jpeg、png、gif 图片格式。
        public let imageContent: String

        /// 水印的宽度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示水印 Width 为视频宽度的百分比大小，如 10% 表示 Width 为视频宽度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Width 单位为像素，如 100px 表示 Width 为 100 像素。取值范围为[8, 4096]。</li>
        /// 默认值：10%。
        public let width: String?

        /// 水印的高度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示水印 Height 为视频高度的百分比大小，如 10% 表示 Height 为视频高度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Height 单位为像素，如 100px 表示 Height 为 100 像素。取值范围为0或[8, 4096]。</li>
        /// 默认值：0px，表示 Height 按照原始水印图片的宽高比缩放。
        public let height: String?

        /// 水印重复类型。使用场景：水印为动态图像。取值范围：
        /// <li>once：动态水印播放完后，不再出现；</li>
        /// <li>repeat_last_frame：水印播放完后，停留在最后一帧；</li>
        /// <li>repeat：水印循环播放，直到视频结束（默认值）。</li>
        public let repeatType: String?

        /// 图片透明度，取值范围：[0, 100]
        /// <li>0：完全不透明</li>
        /// <li>100：完全透明</li>
        /// 默认值：0。
        public let transparency: Int64?

        public init(imageContent: String, width: String? = nil, height: String? = nil, repeatType: String? = nil, transparency: Int64? = nil) {
            self.imageContent = imageContent
            self.width = width
            self.height = height
            self.repeatType = repeatType
            self.transparency = transparency
        }

        enum CodingKeys: String, CodingKey {
            case imageContent = "ImageContent"
            case width = "Width"
            case height = "Height"
            case repeatType = "RepeatType"
            case transparency = "Transparency"
        }
    }

    /// 图片水印模板输入参数
    public struct ImageWatermarkInputForUpdate: TCInputModel {
        /// 水印图片 [Base64](https://tools.ietf.org/html/rfc4648) 编码后的字符串。支持 jpeg、png 图片格式。
        public let imageContent: String?

        /// 水印的宽度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示水印 Width 为视频宽度的百分比大小，如 10% 表示 Width 为视频宽度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Width 单位为像素，如 100px 表示 Width 为 100 像素。取值范围为[8, 4096]。</li>
        public let width: String?

        /// 水印的高度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示水印 Height 为视频高度的百分比大小，如 10% 表示 Height 为视频高度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Height 单位为像素，如 100px 表示 Height 为 100 像素。取值范围为0或[8, 4096]。</li>
        public let height: String?

        /// 水印重复类型。使用场景：水印为动态图像。取值范围：
        /// <li>once：动态水印播放完后，不再出现；</li>
        /// <li>repeat_last_frame：水印播放完后，停留在最后一帧；</li>
        /// <li>repeat：水印循环播放，直到视频结束。</li>
        public let repeatType: String?

        /// 图片透明度，取值范围：[0, 100]
        /// <li>0：完全不透明</li>
        /// <li>100：完全透明。</li>
        public let transparency: Int64?

        public init(imageContent: String? = nil, width: String? = nil, height: String? = nil, repeatType: String? = nil, transparency: Int64? = nil) {
            self.imageContent = imageContent
            self.width = width
            self.height = height
            self.repeatType = repeatType
            self.transparency = transparency
        }

        enum CodingKeys: String, CodingKey {
            case imageContent = "ImageContent"
            case width = "Width"
            case height = "Height"
            case repeatType = "RepeatType"
            case transparency = "Transparency"
        }
    }

    /// 图片水印模板
    public struct ImageWatermarkTemplate: TCOutputModel {
        /// 水印图片地址。
        public let imageUrl: String

        /// 水印的宽度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示水印 Width 为视频宽度的百分比大小，如 10% 表示 Width 为视频宽度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Width 单位为像素，如 100px 表示 Width 为 100 像素。</li>
        public let width: String

        /// 水印的高度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示水印 Height 为视频高度的百分比大小，如 10% 表示 Height 为视频高度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Height 单位为像素，如 100px 表示 Height 为 100 像素；</li>
        /// 0px：表示 Height 按照 Width 对视频宽度的比例缩放。
        public let height: String

        /// 水印重复类型。使用场景：水印为动态图像。取值范围：
        /// <li>once：动态水印播放完后，不再出现；</li>
        /// <li>repeat_last_frame：水印播放完后，停留在最后一帧；</li>
        /// <li>repeat：水印循环播放，直到视频结束。</li>
        public let repeatType: String

        /// 图片透明度，取值范围：[0, 100]
        /// <li>0：完全不透明</li>
        /// <li>100：完全透明。</li>
        public let transparency: Int64

        enum CodingKeys: String, CodingKey {
            case imageUrl = "ImageUrl"
            case width = "Width"
            case height = "Height"
            case repeatType = "RepeatType"
            case transparency = "Transparency"
        }
    }

    /// License 请求次数统计数据。
    public struct LicenseUsageDataItem: TCOutputModel {
        /// 数据所在时间区间的开始时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#52)。如：当时间粒度为天，2018-12-01T00:00:00+08:00，表示2018年12月1日（含）到2018年12月2日（不含）区间。
        public let time: String

        /// License 请求次数。
        public let count: Int64

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case count = "Count"
        }
    }

    /// 即时剪辑后媒体的片段信息。
    public struct LiveRealTimeClipMediaSegmentInfo: TCOutputModel {
        /// 片段的起始时间。格式参照 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let startTime: String

        /// 片段的结束时间。格式参照 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let endTime: String

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 直播即时剪辑流信息
    public struct LiveRealTimeClipStreamInfo: TCInputModel {
        /// 直播流类型，可选值：
        /// <li>Original（原始流，<b>默认值</b>）。</li>
        /// <li>Transcoding（转码流）。</li>
        public let type: String?

        /// 直播转码模板ID。
        /// <b>当Type值为"Transcoding"时，必须填写。</b>
        public let templateId: UInt64?

        public init(type: String? = nil, templateId: UInt64? = nil) {
            self.type = type
            self.templateId = templateId
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case templateId = "TemplateId"
        }
    }

    /// 低光照增强控制
    public struct LowLightEnhanceInfo: TCInputModel, TCOutputModel {
        /// 低光照增强控制开关，可选值：
        /// <li>ON：开启低光照增强；</li>
        /// <li>OFF：关闭低光照增强。</li>
        public let `switch`: String

        /// 低光照增强类型，仅当低光照增强控制开关为 ON 时有效，可选值：
        /// <li>normal：正常低光照增强；</li>
        /// 默认值：normal。
        public let type: String?

        public init(switch: String, type: String? = nil) {
            self.switch = `switch`
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
        }
    }

    /// 转自适应码流信息
    public struct MediaAdaptiveDynamicStreamingInfo: TCOutputModel {
        /// 转自适应码流信息数组。
        public let adaptiveDynamicStreamingSet: [AdaptiveDynamicStreamingInfoItem]

        enum CodingKeys: String, CodingKey {
            case adaptiveDynamicStreamingSet = "AdaptiveDynamicStreamingSet"
        }
    }

    /// 智能分类结果
    public struct MediaAiAnalysisClassificationItem: TCOutputModel {
        /// 智能分类的类别名称。
        public let classification: String

        /// 智能分类的可信度，取值范围是 0 到 100。
        public let confidence: Float

        enum CodingKeys: String, CodingKey {
            case classification = "Classification"
            case confidence = "Confidence"
        }
    }

    /// 智能封面信息
    public struct MediaAiAnalysisCoverItem: TCOutputModel {
        /// 智能封面地址。
        public let coverUrl: String

        /// 智能封面的可信度，取值范围是 0 到 100。
        public let confidence: Float

        enum CodingKeys: String, CodingKey {
            case coverUrl = "CoverUrl"
            case confidence = "Confidence"
        }
    }

    /// 智能按帧标签结果信息
    public struct MediaAiAnalysisFrameTagItem: TCOutputModel {
        /// 按帧标签名称。
        public let tag: String

        /// 按帧标签名称的分类列表，CategorySet.N 表示第 N+1级分类。
        /// 比如 Tag 为“塔楼”时，CategorySet 包含两个元素：CategorySet.0 为“场景”，CategorySet.1为 “建筑”，表示按帧标签为“塔楼”，且第1级分类是“场景”，第2级分类是“建筑”。
        public let categorySet: [String]

        /// 按帧标签的可信度，取值范围是 0 到 100。
        public let confidence: Float

        enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case categorySet = "CategorySet"
            case confidence = "Confidence"
        }
    }

    /// 按帧标签片段列表
    public struct MediaAiAnalysisFrameTagSegmentItem: TCOutputModel {
        /// 按帧标签起始的偏移时间。
        public let startTimeOffset: Float

        /// 按帧标签结束的偏移时间。
        public let endTimeOffset: Float

        /// 时间片段内的标签列表。
        public let tagSet: [MediaAiAnalysisFrameTagItem]

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case tagSet = "TagSet"
        }
    }

    /// 智能精彩片段信息
    public struct MediaAiAnalysisHighlightItem: TCOutputModel {
        /// 智能精彩集锦地址。
        public let highlightUrl: String

        /// 智能精彩集锦封面地址。
        public let covImgUrl: String

        /// 智能精彩集锦的可信度，取值范围是 0 到 100。
        public let confidence: Float

        /// 智能精彩集锦持续时间。
        public let duration: Float

        /// 智能精彩集锦子片段列表，精彩集锦片段由这些子片段拼接生成。
        public let segmentSet: [HighlightSegmentItem]

        enum CodingKeys: String, CodingKey {
            case highlightUrl = "HighlightUrl"
            case covImgUrl = "CovImgUrl"
            case confidence = "Confidence"
            case duration = "Duration"
            case segmentSet = "SegmentSet"
        }
    }

    /// 智能标签结果信息
    public struct MediaAiAnalysisTagItem: TCOutputModel {
        /// 标签名称。
        public let tag: String

        /// 标签的可信度，取值范围是 0 到 100。
        public let confidence: Float

        enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case confidence = "Confidence"
        }
    }

    /// 点播文件视频转动图结果信息
    public struct MediaAnimatedGraphicsInfo: TCOutputModel {
        /// 视频转动图结果信息
        public let animatedGraphicsSet: [MediaAnimatedGraphicsItem]

        enum CodingKeys: String, CodingKey {
            case animatedGraphicsSet = "AnimatedGraphicsSet"
        }
    }

    /// 视频转动图结果信息
    public struct MediaAnimatedGraphicsItem: TCOutputModel {
        /// 转动图的文件地址。
        public let url: String

        /// 转动图模板 ID，参见[转动图参数模板](https://cloud.tencent.com/document/product/266/33481#.3Cspan-id-.3D-.22zdt.22.3E.3C.2Fspan.3E.E8.BD.AC.E5.8A.A8.E5.9B.BE.E6.A8.A1.E6.9D.BF)。
        public let definition: Int64

        /// 动图格式，如 gif。
        public let container: String

        /// 动图的高度，单位：px。
        public let height: Int64

        /// 动图的宽度，单位：px。
        public let width: Int64

        /// 动图码率，单位：bps。
        public let bitrate: Int64

        /// 动图大小，单位：字节。
        public let size: Int64

        /// 动图的md5值。
        public let md5: String

        /// 动图在视频中的起始时间偏移，单位：秒。
        public let startTimeOffset: Float

        /// 动图在视频中的结束时间偏移，单位：秒。
        public let endTimeOffset: Float

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case definition = "Definition"
            case container = "Container"
            case height = "Height"
            case width = "Width"
            case bitrate = "Bitrate"
            case size = "Size"
            case md5 = "Md5"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
        }
    }

    /// 点播文件音频流信息
    public struct MediaAudioStreamItem: TCOutputModel {
        /// 音频流的码率，单位：bps。
        public let bitrate: Int64

        /// 音频流的采样率，单位：hz。
        public let samplingRate: Int64

        /// 音频流的编码格式，例如 aac。
        public let codec: String

        enum CodingKeys: String, CodingKey {
            case bitrate = "Bitrate"
            case samplingRate = "SamplingRate"
            case codec = "Codec"
        }
    }

    /// 点播媒体文件基础信息
    public struct MediaBasicInfo: TCOutputModel {
        /// 媒体文件名称。
        public let name: String

        /// 媒体文件描述。
        public let description: String

        /// 媒体文件的创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 媒体文件的最近更新时间（如修改视频属性、发起视频处理等会触发更新媒体文件信息的操作），使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        /// 媒体文件的过期时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。过期后该媒体文件及其相关资源（转码结果、雪碧图等）将被永久删除。“9999-12-31T23:59:59Z”表示永不过期。
        public let expireTime: String

        /// 媒体文件的分类 ID。
        public let classId: Int64

        /// 媒体文件的分类名称。
        public let className: String

        /// 媒体文件的分类路径，分类间以“-”分隔，如“新的一级分类 - 新的二级分类”。
        public let classPath: String

        /// 媒体文件的封面图片地址。
        public let coverUrl: String

        /// 媒体文件的封装格式，例如 mp4、flv 等。
        public let type: String

        /// 原始媒体文件的 URL 地址。
        public let mediaUrl: String

        /// 该媒体文件的来源信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceInfo: MediaSourceData?

        /// 媒体文件存储地区，如 ap-chongqing，参见[地域列表](https://cloud.tencent.com/document/product/266/9760#.E5.B7.B2.E6.94.AF.E6.8C.81.E5.9C.B0.E5.9F.9F.E5.88.97.E8.A1.A8)。
        public let storageRegion: String

        /// 媒体文件的标签信息。
        public let tagSet: [String]

        /// 直播录制文件的唯一标识。
        public let vid: String

        /// 文件类型：
        /// <li>Video: 视频文件</li>
        /// <li>Audio: 音频文件</li>
        /// <li>Image: 图片文件</li>
        public let category: String

        /// 文件状态：Normal：正常，Forbidden：封禁。
        ///
        /// *注意：此字段暂不支持。
        public let status: String

        /// 媒体文件的存储类别：
        /// <li> STANDARD：标准存储。</li>
        /// <li> STANDARD_IA：低频存储。</li>
        /// <li> ARCHIVE：归档存储。</li>
        /// <li> DEEP_ARCHIVE：深度归档存储。</li>
        public let storageClass: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case expireTime = "ExpireTime"
            case classId = "ClassId"
            case className = "ClassName"
            case classPath = "ClassPath"
            case coverUrl = "CoverUrl"
            case type = "Type"
            case mediaUrl = "MediaUrl"
            case sourceInfo = "SourceInfo"
            case storageRegion = "StorageRegion"
            case tagSet = "TagSet"
            case vid = "Vid"
            case category = "Category"
            case status = "Status"
            case storageClass = "StorageClass"
        }
    }

    /// 分类信息描述
    public struct MediaClassInfo: TCOutputModel {
        /// 分类 ID。
        public let classId: Int64

        /// 父类 ID，一级分类的父类 ID 为 -1。
        public let parentId: Int64

        /// 分类名称。
        public let name: String

        /// 分类级别，一级分类为 0，最大值为 3，即最多允许 4 级分类层次。
        public let level: UInt64

        /// 当前分类的第一级子类 ID 集合。
        public let subClassIdSet: [Int64]

        /// 分类名称（该字段已不推荐使用，建议使用新的分类名称字段 Name）。
        public let className: String

        enum CodingKeys: String, CodingKey {
            case classId = "ClassId"
            case parentId = "ParentId"
            case name = "Name"
            case level = "Level"
            case subClassIdSet = "SubClassIdSet"
            case className = "ClassName"
        }
    }

    /// 音视频审核 Asr 文字的嫌疑片段
    public struct MediaContentReviewAsrTextSegmentItem: TCOutputModel {
        /// 嫌疑片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 嫌疑片段结束的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 嫌疑片段置信度。
        public let confidence: Float

        /// 嫌疑片段音视频审核的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 嫌疑关键词列表。
        public let keywordSet: [String]

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case keywordSet = "KeywordSet"
        }
    }

    /// 音视频审核 Ocr 文字的嫌疑片段
    public struct MediaContentReviewOcrTextSegmentItem: TCOutputModel {
        /// 嫌疑片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 嫌疑片段结束的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 嫌疑片段置信度。
        public let confidence: Float

        /// 嫌疑片段音视频审核的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 嫌疑关键词列表。
        public let keywordSet: [String]

        /// 嫌疑文字出现的区域坐标 (像素级)，[x1, y1, x2, y2]，即左上角坐标、右下角坐标。
        public let areaCoordSet: [Int64]

        /// 嫌疑图片 URL （图片不会永久存储，到达
        /// PicUrlExpireTime 时间点后图片将被删除）。
        public let url: String

        /// 嫌疑图片 URL 失效时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let picUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case keywordSet = "KeywordSet"
            case areaCoordSet = "AreaCoordSet"
            case url = "Url"
            case picUrlExpireTime = "PicUrlExpireTime"
        }
    }

    /// 音视频审核涉及令人不适宜信息的嫌疑片段
    public struct MediaContentReviewPoliticalSegmentItem: TCOutputModel {
        /// 嫌疑片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 嫌疑片段结束的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 嫌疑片段分数。
        public let confidence: Float

        /// 嫌疑片段涉及令人不适宜的信息的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 涉及令人不适宜的信息、违规图标名字。
        public let name: String

        /// 嫌疑片段涉及令人不适宜的信息的结果标签。音视频审核模板[画面涉及令人不适宜的信息的任务控制参数](https://cloud.tencent.com/document/api/266/31773#PoliticalImgReviewTemplateInfo)里 LabelSet 参数与此参数取值范围的对应关系：
        /// violation_photo：
        /// <li>violation_photo：违规图标。</li>
        /// politician：
        /// <li>nation_politician：国家领导人；</li>
        /// <li>province_politician: 省部级领导人；</li>
        /// <li>bureau_politician：厅局级领导人；</li>
        /// <li>county_politician：县处级领导人；</li>
        /// <li>rural_politician：乡科级领导人；</li>
        /// <li>sensitive_politician：违规相关人物；</li>
        /// <li>foreign_politician：国外领导人。</li>
        /// entertainment：
        /// <li>sensitive_entertainment：违规娱乐人物。</li>
        /// sport：
        /// <li>sensitive_sport：违规体育人物。</li>
        /// entrepreneur：
        /// <li>sensitive_entrepreneur：违规商业人物。</li>
        /// scholar：
        /// <li>sensitive_scholar：违规教育学者。</li>
        /// celebrity：
        /// <li>sensitive_celebrity：违规知名人物；</li>
        /// <li>historical_celebrity：历史知名人物。</li>
        /// military：
        /// <li>sensitive_military：违规相关人物。</li>
        public let label: String

        /// 嫌疑图片 URL （图片不会永久存储，到达
        ///  PicUrlExpireTime 时间点后图片将被删除）。
        public let url: String

        /// 涉及令人不适宜的信息、违规图标出现的区域坐标 (像素级)，[x1, y1, x2, y2]，即左上角坐标、右下角坐标。
        public let areaCoordSet: [Int64]

        /// 该字段已废弃，请使用 PicUrlExpireTime。
        public let picUrlExpireTimeStamp: Int64

        /// 嫌疑图片 URL 失效时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let picUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case name = "Name"
            case label = "Label"
            case url = "Url"
            case areaCoordSet = "AreaCoordSet"
            case picUrlExpireTimeStamp = "PicUrlExpireTimeStamp"
            case picUrlExpireTime = "PicUrlExpireTime"
        }
    }

    /// 音视频审核涉及令人反感的信息、涉及令人不安全的信息的嫌疑片段
    public struct MediaContentReviewSegmentItem: TCOutputModel {
        /// 嫌疑片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 嫌疑片段结束的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 嫌疑片段涉及令人反感的信息的分数。
        public let confidence: Float

        /// 嫌疑片段涉及令人反感的信息的结果标签。
        public let label: String

        /// 嫌疑片段鉴别涉及令人反感的信息的结果建议，取值范围：
        /// <li>pass。</li>
        /// <li>review。</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 嫌疑图片 URL （图片不会永久存储，到达
        ///  PicUrlExpireTime 时间点后图片将被删除）。
        public let url: String

        /// 该字段已废弃，请使用 PicUrlExpireTime。
        public let picUrlExpireTimeStamp: Int64

        /// 嫌疑图片 URL 失效时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let picUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case label = "Label"
            case suggestion = "Suggestion"
            case url = "Url"
            case picUrlExpireTimeStamp = "PicUrlExpireTimeStamp"
            case picUrlExpireTime = "PicUrlExpireTime"
        }
    }

    /// 指定删除点播视频时的删除内容
    public struct MediaDeleteItem: TCInputModel, TCOutputModel {
        /// 所指定的删除部分。如果未填写该字段则参数无效。可选值有：
        /// <li>OriginalFiles（删除原文件，删除后无法发起转码、微信发布等任何视频处理操作）；</li>
        /// <li>TranscodeFiles（删除转码文件）；</li>
        /// <li>AdaptiveDynamicStreamingFiles（删除转自适应码流文件）；</li>
        /// <li>WechatPublishFiles（删除微信发布文件）。</li>
        public let type: String

        /// 删除由Type参数指定的种类下的视频模板号，模板定义参见[转码模板](https://cloud.tencent.com/document/product/266/33478#.3Cspan-id-.3D-.22zm.22-.3E.3C.2Fspan.3E.E8.BD.AC.E7.A0.81.E6.A8.A1.E6.9D.BF)。
        /// 默认值为0，表示删除参数Type指定种类下所有的视频。
        public let definition: Int64?

        public init(type: String, definition: Int64? = nil) {
            self.type = type
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case definition = "Definition"
        }
    }

    /// 点播文件雪碧图信息
    public struct MediaImageSpriteInfo: TCOutputModel {
        /// 特定规格的雪碧图信息集合，每个元素代表一套相同规格的雪碧图。
        public let imageSpriteSet: [MediaImageSpriteItem]

        enum CodingKeys: String, CodingKey {
            case imageSpriteSet = "ImageSpriteSet"
        }
    }

    /// 雪碧图信息
    public struct MediaImageSpriteItem: TCOutputModel {
        /// 雪碧图规格，参见[雪碧图参数模板](https://cloud.tencent.com/document/product/266/33480#.E9.9B.AA.E7.A2.A7.E5.9B.BE.E6.A8.A1.E6.9D.BF)。
        public let definition: Int64

        /// 雪碧图小图的高度。
        public let height: Int64

        /// 雪碧图小图的宽度。
        public let width: Int64

        /// 每一张雪碧图大图里小图的数量。
        public let totalCount: Int64

        /// 每一张雪碧图大图的地址。
        public let imageUrlSet: [String]

        /// 雪碧图子图位置与时间关系的 WebVtt 文件地址。WebVtt 文件表明了各个雪碧图小图对应的时间点，以及在雪碧大图里的坐标位置，一般被播放器用于实现预览。
        public let webVttUrl: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case height = "Height"
            case width = "Width"
            case totalCount = "TotalCount"
            case imageUrlSet = "ImageUrlSet"
            case webVttUrl = "WebVttUrl"
        }
    }

    /// 点播文件信息
    public struct MediaInfo: TCOutputModel {
        /// 基础信息。包括视频名称、分类、播放地址、封面图片等。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let basicInfo: MediaBasicInfo?

        /// 元信息。包括大小、时长、视频流信息、音频流信息等。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaData: MediaMetaData?

        /// 转码结果信息。包括该视频转码生成的各种码率的视频的地址、规格、码率、分辨率等。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transcodeInfo: MediaTranscodeInfo?

        /// 转动图结果信息。对视频转动图（如 gif）后，动图相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let animatedGraphicsInfo: MediaAnimatedGraphicsInfo?

        /// 采样截图信息。对视频采样截图后，相关截图信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sampleSnapshotInfo: MediaSampleSnapshotInfo?

        /// 雪碧图信息。对视频截取雪碧图之后，雪碧的相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageSpriteInfo: MediaImageSpriteInfo?

        /// 指定时间点截图信息。对视频依照指定时间点截图后，各个截图的信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshotByTimeOffsetInfo: MediaSnapshotByTimeOffsetInfo?

        /// 视频打点信息。对视频设置的各个打点信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyFrameDescInfo: MediaKeyFrameDescInfo?

        /// 转自适应码流信息。包括规格、加密类型、打包格式等相关信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let adaptiveDynamicStreamingInfo: MediaAdaptiveDynamicStreamingInfo?

        /// 小程序审核信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let miniProgramReviewInfo: MediaMiniProgramReviewInfo?

        /// 字幕信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subtitleInfo: MediaSubtitleInfo?

        /// 媒体文件唯一标识 ID。
        public let fileId: String?

        /// 审核信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reviewInfo: FileReviewInfo?

        enum CodingKeys: String, CodingKey {
            case basicInfo = "BasicInfo"
            case metaData = "MetaData"
            case transcodeInfo = "TranscodeInfo"
            case animatedGraphicsInfo = "AnimatedGraphicsInfo"
            case sampleSnapshotInfo = "SampleSnapshotInfo"
            case imageSpriteInfo = "ImageSpriteInfo"
            case snapshotByTimeOffsetInfo = "SnapshotByTimeOffsetInfo"
            case keyFrameDescInfo = "KeyFrameDescInfo"
            case adaptiveDynamicStreamingInfo = "AdaptiveDynamicStreamingInfo"
            case miniProgramReviewInfo = "MiniProgramReviewInfo"
            case subtitleInfo = "SubtitleInfo"
            case fileId = "FileId"
            case reviewInfo = "ReviewInfo"
        }
    }

    /// 要处理的源视频信息，视频名称、视频自定义 ID。
    public struct MediaInputInfo: TCInputModel {
        /// 视频 URL。
        public let url: String

        /// 视频名称。
        public let name: String?

        /// 视频自定义 ID。
        public let id: String?

        public init(url: String, name: String? = nil, id: String? = nil) {
            self.url = url
            self.name = name
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case name = "Name"
            case id = "Id"
        }
    }

    /// 视频打点信息
    public struct MediaKeyFrameDescInfo: TCOutputModel {
        /// 视频打点信息数组。
        public let keyFrameDescSet: [MediaKeyFrameDescItem]

        enum CodingKeys: String, CodingKey {
            case keyFrameDescSet = "KeyFrameDescSet"
        }
    }

    /// 视频打点信息
    public struct MediaKeyFrameDescItem: TCInputModel {
        /// 打点的视频偏移时间，单位：秒。
        public let timeOffset: Float

        /// 打点的内容字符串，限制 1-128 个字符。
        public let content: String

        public init(timeOffset: Float, content: String) {
            self.timeOffset = timeOffset
            self.content = content
        }

        enum CodingKeys: String, CodingKey {
            case timeOffset = "TimeOffset"
            case content = "Content"
        }
    }

    /// 点播媒体文件元信息
    public struct MediaMetaData: TCOutputModel {
        /// 上传的媒体文件大小（视频为 HLS 时，大小是 m3u8 和 ts 文件大小的总和），单位：字节。
        public let size: Int64

        /// 容器类型，例如 m4a，mp4 等。
        public let container: String

        /// 视频流码率平均值与音频流码率平均值之和，单位：bps。
        public let bitrate: Int64

        /// 视频流高度的最大值，单位：px。
        public let height: Int64

        /// 视频流宽度的最大值，单位：px。
        public let width: Int64

        /// 视频时长，单位：秒。
        public let duration: Float

        /// 视频拍摄时的选择角度，单位：度。
        public let rotate: Int64

        /// 视频流信息。
        public let videoStreamSet: [MediaVideoStreamItem]

        /// 音频流信息。
        public let audioStreamSet: [MediaAudioStreamItem]

        /// 视频时长，单位：秒。
        public let videoDuration: Float

        /// 音频时长，单位：秒。
        public let audioDuration: Float

        /// 媒体文件的 Md5 值。
        /// <li><font color=red>注意</font>：如需要获取媒体文件的 Md5，调用 DescribeFileAttributes 接口，待任务执行完成后获取。</li>
        public let md5: String

        enum CodingKeys: String, CodingKey {
            case size = "Size"
            case container = "Container"
            case bitrate = "Bitrate"
            case height = "Height"
            case width = "Width"
            case duration = "Duration"
            case rotate = "Rotate"
            case videoStreamSet = "VideoStreamSet"
            case audioStreamSet = "AudioStreamSet"
            case videoDuration = "VideoDuration"
            case audioDuration = "AudioDuration"
            case md5 = "Md5"
        }
    }

    /// 小程序音视频审核概要元信息
    public struct MediaMiniProgramReviewElem: TCOutputModel {
        /// 音视频审核类型。
        /// <li>Porn：画面涉及令人反感的信息，</li>
        /// <li>Porn.Ocr：文字涉及令人反感的信息，</li>
        /// <li>Porn.Asr：声音涉及令人反感的信息，</li>
        /// <li>Terrorism：画面涉及令人不安全的信息，</li>
        /// <li>Political：画面涉及令人不适宜的信息，</li>
        /// <li>Political.Ocr：文字涉及令人不适宜的信息，</li>
        /// <li>Political.Asr：声音涉及令人不适宜的信息。</li>
        public let type: String

        /// 音视频审核意见。
        /// <li>pass：确认正常，</li>
        /// <li>block：确认违规，</li>
        /// <li>review：疑似违规。</li>
        public let suggestion: String

        /// 音视频审核结果置信度。取值 0~100。
        public let confidence: Float

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case suggestion = "Suggestion"
            case confidence = "Confidence"
        }
    }

    /// 小程序音视频审核信息
    public struct MediaMiniProgramReviewInfo: TCOutputModel {
        /// 音视频审核信息列表。
        public let miniProgramReviewList: [MediaMiniProgramReviewInfoItem]

        enum CodingKeys: String, CodingKey {
            case miniProgramReviewList = "MiniProgramReviewList"
        }
    }

    /// 小程序音视频审核信息单元
    public struct MediaMiniProgramReviewInfoItem: TCOutputModel {
        /// 模板id。小程序视频发布的视频所对应的转码模板ID，为0代表原始视频。
        public let definition: Int64

        /// 视频元信息。
        public let metaData: MediaMetaData?

        /// 小程序音视频审核视频播放地址。
        public let url: String

        /// 小程序视频发布状态：
        /// <li>Pass：成功。</li>
        /// <li>Rejected：未通过。</li>
        public let reviewResult: String

        /// 小程序音视频审核元素。
        public let reviewSummary: [MediaMiniProgramReviewElem]

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case metaData = "MetaData"
            case url = "Url"
            case reviewResult = "ReviewResult"
            case reviewSummary = "ReviewSummary"
        }
    }

    /// 视频处理输出文件信息参数。
    public struct MediaOutputInfo: TCInputModel {
        /// 输出文件 Bucket 所属地域，如 ap-guangzhou  。
        public let region: String?

        /// 输出文件 Bucket 。
        public let bucket: String?

        /// 输出文件目录，目录名必须以 "/" 结尾。
        public let dir: String?

        public init(region: String? = nil, bucket: String? = nil, dir: String? = nil) {
            self.region = region
            self.bucket = bucket
            self.dir = dir
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case bucket = "Bucket"
            case dir = "Dir"
        }
    }

    /// 对视频转自适应码流任务结果类型
    public struct MediaProcessTaskAdaptiveDynamicStreamingResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 转自适应码流任务进度，取值范围 [0-100] 。
        public let progress: Int64

        /// 对视频转自适应码流任务的输入。
        public let input: AdaptiveDynamicStreamingTaskInput

        /// 对视频转自适应码流任务的输出。
        public let output: AdaptiveDynamicStreamingInfoItem

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case progress = "Progress"
            case input = "Input"
            case output = "Output"
        }
    }

    /// 转动图任务结果类型
    public struct MediaProcessTaskAnimatedGraphicResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 转动图任务的输入。
        public let input: AnimatedGraphicTaskInput

        /// 转动图任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: MediaAnimatedGraphicsItem?

        /// 转动图任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 对视频截图做封面任务结果类型
    public struct MediaProcessTaskCoverBySnapshotResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 对视频截图做封面任务的输入。
        public let input: CoverBySnapshotTaskInput

        /// 对视频截图做封面任务的输出。
        public let output: CoverBySnapshotTaskOutput

        /// 对视频截图做封面任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 对视频截雪碧图任务结果类型
    public struct MediaProcessTaskImageSpriteResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 对视频截雪碧图任务的输入。
        public let input: ImageSpriteTaskInput

        /// 对视频截雪碧图任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: MediaImageSpriteItem?

        /// 对视频截雪碧图任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 视频处理任务类型
    public struct MediaProcessTaskInput: TCInputModel, TCOutputModel {
        /// 视频转码任务列表。
        public let transcodeTaskSet: [TranscodeTaskInput]?

        /// 视频转动图任务列表。
        public let animatedGraphicTaskSet: [AnimatedGraphicTaskInput]?

        /// 对视频按时间点截图任务列表。
        public let snapshotByTimeOffsetTaskSet: [SnapshotByTimeOffsetTaskInput]?

        /// 对视频采样截图任务列表。
        public let sampleSnapshotTaskSet: [SampleSnapshotTaskInput]?

        /// 对视频截雪碧图任务列表。
        public let imageSpriteTaskSet: [ImageSpriteTaskInput]?

        /// 对视频截图做封面任务列表。
        public let coverBySnapshotTaskSet: [CoverBySnapshotTaskInput]?

        /// 对视频转自适应码流任务列表。
        public let adaptiveDynamicStreamingTaskSet: [AdaptiveDynamicStreamingTaskInput]?

        public init(transcodeTaskSet: [TranscodeTaskInput]? = nil, animatedGraphicTaskSet: [AnimatedGraphicTaskInput]? = nil, snapshotByTimeOffsetTaskSet: [SnapshotByTimeOffsetTaskInput]? = nil, sampleSnapshotTaskSet: [SampleSnapshotTaskInput]? = nil, imageSpriteTaskSet: [ImageSpriteTaskInput]? = nil, coverBySnapshotTaskSet: [CoverBySnapshotTaskInput]? = nil, adaptiveDynamicStreamingTaskSet: [AdaptiveDynamicStreamingTaskInput]? = nil) {
            self.transcodeTaskSet = transcodeTaskSet
            self.animatedGraphicTaskSet = animatedGraphicTaskSet
            self.snapshotByTimeOffsetTaskSet = snapshotByTimeOffsetTaskSet
            self.sampleSnapshotTaskSet = sampleSnapshotTaskSet
            self.imageSpriteTaskSet = imageSpriteTaskSet
            self.coverBySnapshotTaskSet = coverBySnapshotTaskSet
            self.adaptiveDynamicStreamingTaskSet = adaptiveDynamicStreamingTaskSet
        }

        enum CodingKeys: String, CodingKey {
            case transcodeTaskSet = "TranscodeTaskSet"
            case animatedGraphicTaskSet = "AnimatedGraphicTaskSet"
            case snapshotByTimeOffsetTaskSet = "SnapshotByTimeOffsetTaskSet"
            case sampleSnapshotTaskSet = "SampleSnapshotTaskSet"
            case imageSpriteTaskSet = "ImageSpriteTaskSet"
            case coverBySnapshotTaskSet = "CoverBySnapshotTaskSet"
            case adaptiveDynamicStreamingTaskSet = "AdaptiveDynamicStreamingTaskSet"
        }
    }

    /// 任务查询结果类型
    public struct MediaProcessTaskResult: TCOutputModel {
        /// 任务的类型，可以取的值有：
        /// <li>Transcode：转码</li>
        /// <li>AnimatedGraphics：转动图</li>
        /// <li>SnapshotByTimeOffset：时间点截图</li>
        /// <li>SampleSnapshot：采样截图</li>
        /// <li>ImageSprites：雪碧图</li>
        /// <li>CoverBySnapshot：截图做封面</li>
        /// <li>AdaptiveDynamicStreaming：自适应码流</li>
        public let type: String

        /// 视频转码任务的查询结果，当任务类型为 Transcode 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transcodeTask: MediaProcessTaskTranscodeResult?

        /// 视频转动图任务的查询结果，当任务类型为 AnimatedGraphics 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let animatedGraphicTask: MediaProcessTaskAnimatedGraphicResult?

        /// 对视频按时间点截图任务的查询结果，当任务类型为 SnapshotByTimeOffset 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshotByTimeOffsetTask: MediaProcessTaskSnapshotByTimeOffsetResult?

        /// 对视频采样截图任务的查询结果，当任务类型为 SampleSnapshot 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sampleSnapshotTask: MediaProcessTaskSampleSnapshotResult?

        /// 对视频截雪碧图任务的查询结果，当任务类型为 ImageSprite 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageSpriteTask: MediaProcessTaskImageSpriteResult?

        /// 对视频截图做封面任务的查询结果，当任务类型为 CoverBySnapshot 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coverBySnapshotTask: MediaProcessTaskCoverBySnapshotResult?

        /// 对视频转自适应码流任务的查询结果，当任务类型为 AdaptiveDynamicStreaming 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let adaptiveDynamicStreamingTask: MediaProcessTaskAdaptiveDynamicStreamingResult?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case transcodeTask = "TranscodeTask"
            case animatedGraphicTask = "AnimatedGraphicTask"
            case snapshotByTimeOffsetTask = "SnapshotByTimeOffsetTask"
            case sampleSnapshotTask = "SampleSnapshotTask"
            case imageSpriteTask = "ImageSpriteTask"
            case coverBySnapshotTask = "CoverBySnapshotTask"
            case adaptiveDynamicStreamingTask = "AdaptiveDynamicStreamingTask"
        }
    }

    /// 对视频做采样截图任务结果类型
    public struct MediaProcessTaskSampleSnapshotResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 对视频做采样截图任务输入。
        public let input: SampleSnapshotTaskInput

        /// 对视频做采样截图任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: MediaSampleSnapshotItem?

        /// 对视频做采样截图任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 对视频按指定时间点截图任务结果类型
    public struct MediaProcessTaskSnapshotByTimeOffsetResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 对视频按指定时间点截图任务输入。
        public let input: SnapshotByTimeOffsetTaskInput

        /// 对视频按指定时间点截图任务输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: MediaSnapshotByTimeOffsetItem?

        /// 对视频按指定时间点截图任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
        }
    }

    /// 转码任务结果类型
    public struct MediaProcessTaskTranscodeResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 转码任务的输入。
        public let input: TranscodeTaskInput

        /// 转码任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: MediaTranscodeItem?

        /// 转码进度，取值范围 [0-100] 。
        public let progress: Int64

        /// 转码任务开始执行的时间，采用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let beginProcessTime: String

        /// 转码任务执行完毕的时间，采用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let finishTime: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
            case beginProcessTime = "BeginProcessTime"
            case finishTime = "FinishTime"
        }
    }

    /// 点播文件采样截图信息
    public struct MediaSampleSnapshotInfo: TCOutputModel {
        /// 特定规格的采样截图信息集合，每个元素代表一套相同规格的采样截图。
        public let sampleSnapshotSet: [MediaSampleSnapshotItem]

        enum CodingKeys: String, CodingKey {
            case sampleSnapshotSet = "SampleSnapshotSet"
        }
    }

    /// 采样截图信息
    public struct MediaSampleSnapshotItem: TCOutputModel {
        /// 采样截图规格 ID，参见[采样截图参数模板](https://cloud.tencent.com/document/product/266/33480#.E9.87.87.E6.A0.B7.E6.88.AA.E5.9B.BE.E6.A8.A1.E6.9D.BF)。
        public let definition: Int64

        /// 采样方式，取值范围：
        /// <li>Percent：根据百分比间隔采样。</li>
        /// <li>Time：根据时间间隔采样。</li>
        public let sampleType: String

        /// 采样间隔
        /// <li>当 SampleType 为 Percent 时，该值表示多少百分比一张图。</li>
        /// <li>当 SampleType 为 Time 时，该值表示多少时间间隔一张图，单位秒， 第一张图均为视频首帧。</li>
        public let interval: Int64

        /// 生成的截图 url 列表。
        public let imageUrlSet: [String]

        /// 截图如果被打上了水印，被打水印的模板 ID 列表。
        public let waterMarkDefinition: [Int64]

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case sampleType = "SampleType"
            case interval = "Interval"
            case imageUrlSet = "ImageUrlSet"
            case waterMarkDefinition = "WaterMarkDefinition"
        }
    }

    /// 点播文件指定时间点截图信息
    public struct MediaSnapshotByTimeOffsetInfo: TCOutputModel {
        /// 特定规格的指定时间点截图信息集合。目前每种规格只能有一套截图。
        public let snapshotByTimeOffsetSet: [MediaSnapshotByTimeOffsetItem]

        enum CodingKeys: String, CodingKey {
            case snapshotByTimeOffsetSet = "SnapshotByTimeOffsetSet"
        }
    }

    /// 点播文件指定时间点截图信息
    public struct MediaSnapshotByTimeOffsetItem: TCOutputModel {
        /// 指定时间点截图规格，参见[指定时间点截图参数模板](https://cloud.tencent.com/document/product/266/33480#.E6.97.B6.E9.97.B4.E7.82.B9.E6.88.AA.E5.9B.BE.E6.A8.A1.E6.9D.BF)。
        public let definition: Int64

        /// 同一规格的截图信息集合，每个元素代表一张截图。
        public let picInfoSet: [MediaSnapshotByTimePicInfoItem]

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case picInfoSet = "PicInfoSet"
        }
    }

    /// 指定时间点截图信息
    public struct MediaSnapshotByTimePicInfoItem: TCOutputModel {
        /// 该张截图对应视频文件中的时间偏移，单位为<font color=red>毫秒</font>。
        public let timeOffset: Float

        /// 该张截图的 URL 地址。
        public let url: String

        /// 截图如果被打上了水印，被打水印的模板 ID 列表。
        public let waterMarkDefinition: [Int64]

        enum CodingKeys: String, CodingKey {
            case timeOffset = "TimeOffset"
            case url = "Url"
            case waterMarkDefinition = "WaterMarkDefinition"
        }
    }

    /// 来源文件信息
    public struct MediaSourceData: TCOutputModel {
        /// 媒体文件的来源类别：
        /// <li>Record：来自录制。如直播录制、直播时移录制等。</li>
        /// <li>Upload：来自上传。如拉取上传、服务端上传、客户端 UGC 上传等。</li>
        /// <li>VideoProcessing：来自视频处理。如视频拼接、视频剪辑等。</li>
        /// <li>WebPageRecord：来自全景录制。</li>
        /// <li>Unknown：未知来源。</li>
        public let sourceType: String

        /// 用户创建文件时透传的字段
        public let sourceContext: String

        /// TRTC 伴生录制信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trtcRecordInfo: TrtcRecordInfo?

        enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case sourceContext = "SourceContext"
            case trtcRecordInfo = "TrtcRecordInfo"
        }
    }

    /// 转自适应码流子流信息。
    public struct MediaSubStreamInfoItem: TCOutputModel {
        /// 子流类型，取值范围：
        /// <li>audio：纯音频；</li>
        /// <li>video：视频（可能包含音频流）。</li>
        public let type: String?

        /// 当子流为视频流时，视频画面宽度，单位：px。
        public let width: UInt64?

        /// 当子流为视频流时，视频画面高度，单位：px。
        public let height: UInt64?

        /// 子流媒体文件大小，单位：Byte。
        /// <font color=red>注意：</font>在 2023-02-09T16:00:00Z 前处理生成的自适应码流文件此字段为0。
        public let size: UInt64?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case width = "Width"
            case height = "Height"
            case size = "Size"
        }
    }

    /// 字幕信息。
    public struct MediaSubtitleInfo: TCOutputModel {
        /// 字幕信息列表。
        public let subtitleSet: [MediaSubtitleItem]

        enum CodingKeys: String, CodingKey {
            case subtitleSet = "SubtitleSet"
        }
    }

    /// 字幕信息输入参数。
    public struct MediaSubtitleInput: TCInputModel {
        /// 字幕名字，长度限制：64 个字符。
        public let name: String

        /// 字幕语言。常见的取值如下：
        /// <li>cn：中文</li>
        /// <li>ja：日文</li>
        /// <li>en-US：英文</li>
        /// 其他取值参考 [RFC5646](https://tools.ietf.org/html/rfc5646)
        public let language: String

        /// 字幕格式。取值范围如下：
        /// <li>vtt</li>
        public let format: String

        /// 字幕内容，进行 [Base64](https://tools.ietf.org/html/rfc4648) 编码后的字符串。
        public let content: String

        /// 字幕的唯一标识。长度不能超过16个字符，可以使用大小写字母、数字、下划线（_）或横杠（-）。不能与媒体文件中现有字幕的唯一标识重复。
        public let id: String?

        public init(name: String, language: String, format: String, content: String, id: String? = nil) {
            self.name = name
            self.language = language
            self.format = format
            self.content = content
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case language = "Language"
            case format = "Format"
            case content = "Content"
            case id = "Id"
        }
    }

    /// 字幕信息。
    public struct MediaSubtitleItem: TCOutputModel {
        /// 字幕的唯一标识。
        public let id: String

        /// 字幕名字。
        public let name: String

        /// 字幕语言。常见的取值如下：
        /// <li>cn：中文</li>
        /// <li>ja：日文</li>
        /// <li>en-US：英文</li>
        /// 其他取值参考 [RFC5646](https://tools.ietf.org/html/rfc5646)
        public let language: String

        /// 字幕格式。取值范围如下：
        /// <li>vtt</li>
        public let format: String

        /// 字幕 URL。
        public let url: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case language = "Language"
            case format = "Format"
            case url = "Url"
        }
    }

    /// 轨道信息
    public struct MediaTrack: TCInputModel, TCOutputModel {
        /// 轨道类型，取值有：
        /// <ul>
        /// <li>Video ：视频轨道。视频轨道由以下 Item 组成：<ul><li>VideoTrackItem</li><li>MediaTransitionItem</li> <li>EmptyTrackItem</li></ul> </li>
        /// <li>Audio ：音频轨道。音频轨道由以下 Item 组成：<ul><li>AudioTrackItem</li><li>MediaTransitionItem</li><li>EmptyTrackItem</li></ul></li>
        /// <li>Sticker ：贴图轨道。贴图轨道以下 Item 组成：<ul><li> StickerTrackItem</li><li>EmptyTrackItem</li></ul></li>
        /// </ul>
        public let type: String

        /// 轨道上的媒体片段列表。
        public let trackItems: [MediaTrackItem]

        public init(type: String, trackItems: [MediaTrackItem]) {
            self.type = type
            self.trackItems = trackItems
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case trackItems = "TrackItems"
        }
    }

    /// 媒体轨道的片段信息
    public struct MediaTrackItem: TCInputModel, TCOutputModel {
        /// 片段类型。取值有：
        /// <li>Video：视频片段。</li>
        /// <li>Audio：音频片段。</li>
        /// <li>Sticker：贴图片段。</li>
        /// <li>Transition：转场。</li>
        /// <li>Empty：空白片段。</li>
        public let type: String

        /// 视频片段，当 Type = Video 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let videoItem: VideoTrackItem?

        /// 音频片段，当 Type = Audio 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let audioItem: AudioTrackItem?

        /// 贴图片段，当 Type = Sticker 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stickerItem: StickerTrackItem?

        /// 转场，当 Type = Transition 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transitionItem: MediaTransitionItem?

        /// 空白片段，当 Type = Empty 时有效。空片段用于时间轴的占位。<li>如需要两个音频片段之间有一段时间的静音，可以用 EmptyTrackItem 来进行占位。</li>
        /// <li>使用 EmptyTrackItem 进行占位，来定位某个Item。</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let emptyItem: EmptyTrackItem?

        public init(type: String, videoItem: VideoTrackItem? = nil, audioItem: AudioTrackItem? = nil, stickerItem: StickerTrackItem? = nil, transitionItem: MediaTransitionItem? = nil, emptyItem: EmptyTrackItem? = nil) {
            self.type = type
            self.videoItem = videoItem
            self.audioItem = audioItem
            self.stickerItem = stickerItem
            self.transitionItem = transitionItem
            self.emptyItem = emptyItem
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case videoItem = "VideoItem"
            case audioItem = "AudioItem"
            case stickerItem = "StickerItem"
            case transitionItem = "TransitionItem"
            case emptyItem = "EmptyItem"
        }
    }

    /// 点播文件转码信息
    public struct MediaTranscodeInfo: TCOutputModel {
        /// 各规格的转码信息集合，每个元素代表一个规格的转码结果。
        public let transcodeSet: [MediaTranscodeItem]

        enum CodingKeys: String, CodingKey {
            case transcodeSet = "TranscodeSet"
        }
    }

    /// 转码信息
    public struct MediaTranscodeItem: TCOutputModel {
        /// 转码后的视频文件地址。
        public let url: String

        /// 转码规格 ID，参见[转码参数模板](https://cloud.tencent.com/document/product/266/33476)。
        public let definition: Int64

        /// 视频流码率平均值与音频流码率平均值之和， 单位：bps。
        public let bitrate: Int64

        /// 视频流高度的最大值，单位：px。
        public let height: Int64

        /// 视频流宽度的最大值，单位：px。
        public let width: Int64

        /// 媒体文件总大小，单位：字节。
        /// <li>当媒体文件为 HLS 时，大小是 m3u8 和 ts 文件大小的总和。</li>
        public let size: Int64

        /// 视频时长，单位：秒。
        public let duration: Float

        /// 视频的 md5 值。
        public let md5: String

        /// 容器类型，例如 m4a，mp4 等。
        public let container: String

        /// 视频流信息。
        public let videoStreamSet: [MediaVideoStreamItem]

        /// 音频流信息。
        public let audioStreamSet: [MediaAudioStreamItem]

        /// 数字水印类型。可选值：
        /// <li>Trace 表示经过溯源水印处理；</li>
        /// <li>None 表示没有经过数字水印处理。</li>
        public let digitalWatermarkType: String

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case definition = "Definition"
            case bitrate = "Bitrate"
            case height = "Height"
            case width = "Width"
            case size = "Size"
            case duration = "Duration"
            case md5 = "Md5"
            case container = "Container"
            case videoStreamSet = "VideoStreamSet"
            case audioStreamSet = "AudioStreamSet"
            case digitalWatermarkType = "DigitalWatermarkType"
        }
    }

    /// 转场信息
    public struct MediaTransitionItem: TCInputModel, TCOutputModel {
        /// 转场持续时间，单位为秒。进行转场处理的两个媒体片段，第二个片段在轨道上的起始时间会自动进行调整，设置为前面一个片段的结束时间减去转场的持续时间。
        public let duration: Float

        /// 转场操作列表。图像转场操作和音频转场操作各自最多支持一个。
        public let transitions: [TransitionOpertion]?

        public init(duration: Float, transitions: [TransitionOpertion]? = nil) {
            self.duration = duration
            self.transitions = transitions
        }

        enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case transitions = "Transitions"
        }
    }

    /// 点播文件视频流信息
    public struct MediaVideoStreamItem: TCOutputModel {
        /// 视频流的码率，单位：bps。
        public let bitrate: Int64?

        /// 视频流的高度，单位：px。
        public let height: Int64?

        /// 视频流的宽度，单位：px。
        public let width: Int64?

        /// 视频流的编码格式，例如 h264。
        public let codec: String?

        /// 帧率，单位：hz。
        public let fps: Int64?

        /// 编码标签，仅当 Codec 为 hevc 时有效。
        public let codecTag: String?

        /// 画面动态范围信息。
        /// <li><font color=red>注意</font>：在 2023-01-10T00:00:00Z 后处理的转码文件，此字段有效。</li>
        public let dynamicRangeInfo: DynamicRangeInfo

        enum CodingKeys: String, CodingKey {
            case bitrate = "Bitrate"
            case height = "Height"
            case width = "Width"
            case codec = "Codec"
            case fps = "Fps"
            case codecTag = "CodecTag"
            case dynamicRangeInfo = "DynamicRangeInfo"
        }
    }

    /// 视频处理任务中的马赛克参数类型
    public struct MosaicInput: TCInputModel, TCOutputModel {
        /// 原点位置，目前仅支持：
        /// <li>TopLeft：表示坐标原点位于视频图像左上角，马赛克原点为图片或文字的左上角。</li>
        /// 默认值：TopLeft。
        public let coordinateOrigin: String?

        /// 马赛克原点距离视频图像坐标原点的水平位置。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示马赛克 XPos 为视频宽度指定百分比，如 10% 表示 XPos 为视频宽度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示马赛克 XPos 为指定像素，如 100px 表示 XPos 为 100 像素。</li>
        /// 默认值：0px。
        public let xPos: String?

        /// 马赛克原点距离视频图像坐标原点的垂直位置。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示马赛克 YPos 为视频高度指定百分比，如 10% 表示 YPos 为视频高度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示马赛克 YPos 为指定像素，如 100px 表示 YPos 为 100 像素。</li>
        /// 默认值：0px。
        public let yPos: String?

        /// 马赛克的宽度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示马赛克 Width 为视频宽度的百分比大小，如 10% 表示 Width 为视频宽度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示马赛克 Width 单位为像素，如 100px 表示 Width 为 100 像素。</li>
        /// 默认值：10%。
        public let width: String?

        /// 马赛克的高度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示马赛克 Height 为视频高度的百分比大小，如 10% 表示 Height 为视频高度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示马赛克 Height 单位为像素，如 100px 表示 Height 为 100 像素。</li>
        /// 默认值：10%。
        public let height: String?

        /// 马赛克的起始时间偏移，单位：秒。不填或填0，表示马赛克从画面出现时开始显现。
        /// <li>不填或填0，表示马赛克从画面开始就出现；</li>
        /// <li>当数值大于0时（假设为 n），表示马赛克从画面开始的第 n 秒出现；</li>
        /// <li>当数值小于0时（假设为 -n），表示马赛克从离画面结束 n 秒前开始出现。</li>
        public let startTimeOffset: Float?

        /// 马赛克的结束时间偏移，单位：秒。
        /// <li>不填或填0，表示马赛克持续到画面结束；</li>
        /// <li>当数值大于0时（假设为 n），表示马赛克持续到第 n 秒时消失；</li>
        /// <li>当数值小于0时（假设为 -n），表示马赛克持续到离画面结束 n 秒前消失。</li>
        public let endTimeOffset: Float?

        public init(coordinateOrigin: String? = nil, xPos: String? = nil, yPos: String? = nil, width: String? = nil, height: String? = nil, startTimeOffset: Float? = nil, endTimeOffset: Float? = nil) {
            self.coordinateOrigin = coordinateOrigin
            self.xPos = xPos
            self.yPos = yPos
            self.width = width
            self.height = height
            self.startTimeOffset = startTimeOffset
            self.endTimeOffset = endTimeOffset
        }

        enum CodingKeys: String, CodingKey {
            case coordinateOrigin = "CoordinateOrigin"
            case xPos = "XPos"
            case yPos = "YPos"
            case width = "Width"
            case height = "Height"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
        }
    }

    /// 物体识别任务控制参数
    public struct ObjectConfigureInfo: TCInputModel, TCOutputModel {
        /// 物体识别任务开关，可选值：
        /// <li>ON：开启智能物体识别任务；</li>
        /// <li>OFF：关闭智能物体识别任务。</li>
        public let `switch`: String

        /// 物体库选择，可选值：
        /// <li>Default：使用默认物体库；</li>
        /// <li>UserDefine：使用用户自定义物体库。</li>
        /// <li>All：同时使用默认物体库和用户自定义物体库。</li>
        /// 默认值： All，同时使用默认物体库和用户自定义物体库。
        public let objectLibrary: String?

        public init(switch: String = "OFF", objectLibrary: String? = nil) {
            self.switch = `switch`
            self.objectLibrary = objectLibrary
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case objectLibrary = "ObjectLibrary"
        }
    }

    /// 物体识别任务控制参数
    public struct ObjectConfigureInfoForUpdate: TCInputModel {
        /// 物体识别任务开关，可选值：
        /// <li>ON：开启智能物体识别任务；</li>
        /// <li>OFF：关闭智能物体识别任务。</li>
        public let `switch`: String?

        /// 物体库选择，可选值：
        /// <li>Default：使用默认物体库；</li>
        /// <li>UserDefine：使用用户自定义物体库。</li>
        /// <li>All：同时使用默认物体库和用户自定义物体库。</li>
        public let objectLibrary: String?

        public init(switch: String? = nil, objectLibrary: String? = nil) {
            self.switch = `switch`
            self.objectLibrary = objectLibrary
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case objectLibrary = "ObjectLibrary"
        }
    }

    /// 文本全文本识别任务控制参数
    public struct OcrFullTextConfigureInfo: TCInputModel, TCOutputModel {
        /// 文本全文识别任务开关，可选值：
        /// <li>ON：开启智能文本全文识别任务；</li>
        /// <li>OFF：关闭智能文本全文识别任务。</li>
        public let `switch`: String

        public init(switch: String = "OFF") {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 文本全文本识别任务控制参数
    public struct OcrFullTextConfigureInfoForUpdate: TCInputModel {
        /// 文本全文识别任务开关，可选值：
        /// <li>ON：开启智能文本全文识别任务；</li>
        /// <li>OFF：关闭智能文本全文识别任务。</li>
        public let `switch`: String?

        public init(switch: String? = nil) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 文本关键词识别控制参数。
    public struct OcrWordsConfigureInfo: TCInputModel, TCOutputModel {
        /// 文本关键词识别任务开关，可选值：
        /// <li>ON：开启文本关键词识别任务；</li>
        /// <li>OFF：关闭文本关键词识别任务。</li>
        public let `switch`: String

        /// 关键词过滤标签，指定需要返回的关键词的标签。如果未填或者为空，则全部结果都返回。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        public init(switch: String, labelSet: [String]? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
        }
    }

    /// 文本关键词识别控制参数。
    public struct OcrWordsConfigureInfoForUpdate: TCInputModel {
        /// 文本关键词识别任务开关，可选值：
        /// <li>ON：开启文本关键词识别任务；</li>
        /// <li>OFF：关闭文本关键词识别任务。</li>
        public let `switch`: String?

        /// 关键词过滤标签，指定需要返回的关键词的标签。如果未填或者为空，则全部结果都返回。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        public init(switch: String? = nil, labelSet: [String]? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
        }
    }

    /// 输出的音频流信息
    public struct OutputAudioStream: TCInputModel, TCOutputModel {
        /// 音频流的编码格式，可选值：
        /// <li>libfdk_aac：适合 mp4 文件。</li>
        /// 默认值：libfdk_aac。
        public let codec: String?

        /// 音频流的采样率，可选值：
        /// <li>16000</li>
        /// <li>32000</li>
        /// <li>44100</li>
        /// <li>48000</li>
        /// 单位：Hz。
        /// 默认值：16000。
        public let sampleRate: Int64?

        /// 音频声道数，可选值：
        /// <li>1：单声道 。</li>
        /// <li>2：双声道</li>
        /// 默认值：2。
        public let audioChannel: Int64?

        public init(codec: String? = nil, sampleRate: Int64? = nil, audioChannel: Int64? = nil) {
            self.codec = codec
            self.sampleRate = sampleRate
            self.audioChannel = audioChannel
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case sampleRate = "SampleRate"
            case audioChannel = "AudioChannel"
        }
    }

    /// 输出的视频流信息
    public struct OutputVideoStream: TCInputModel, TCOutputModel {
        /// 视频流的编码格式，可选值：
        /// <li>libx264：H.264 编码 </li>
        /// 默认值：libx264。
        public let codec: String?

        /// 视频帧率，取值范围：[0, 60]，单位：Hz。
        /// 默认值：0，表示和第一个视频轨的第一个视频片段的视频帧率一致。
        public let fps: Int64?

        public init(codec: String? = nil, fps: Int64? = nil) {
            self.codec = codec
            self.fps = fps
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case fps = "Fps"
        }
    }

    /// 播放统计文件信息
    public struct PlayStatFileInfo: TCOutputModel {
        /// 播放统计数据所属日期，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let date: String

        /// 播放统计文件的 URL 地址。播放统计文件内容为：
        /// <li> date：播放日期。</li>
        /// <li> file_id：视频文件 ID。</li>
        /// <li> ip_count：去重后的客户端 IP 数。</li>
        /// <li> flux：播放流量，单位：字节。</li>
        /// <li> play_times：总的播放次数。</li>
        /// <li> pc_play_times：PC 端播放次数。</li>
        /// <li> mobile_play_times：移动端播放次数。</li>
        /// <li> iphone_play_times：iPhone 端播放次数。</li>
        /// <li> android_play_times：Android 端播放次数。</li>
        /// <li> host_name	域名。</li>
        public let url: String

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case url = "Url"
        }
    }

    /// 播放统计信息。
    public struct PlayStatInfo: TCOutputModel {
        /// 数据所在时间区间的开始时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。如：当时间粒度为天，2018-12-01T00:00:00+08:00，表示2018年12月1日（含）到2018年12月2日（不含）区间。
        /// <li>表示小时级别数据时，2019-08-22T00:00:00+08:00表示2019-08-22日0点到1点的统计数据。</li>
        /// <li>表示天级别数据时，2019-08-22T00:00:00+08:00表示2019-08-22日的统计数据。</li>
        public let time: String

        /// 媒体文件ID。
        public let fileId: String

        /// 播放次数。
        public let playTimes: UInt64

        /// 播放流量，单位：字节。
        public let traffic: UInt64

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case fileId = "FileId"
            case playTimes = "PlayTimes"
            case traffic = "Traffic"
        }
    }

    /// 播放器配置详情
    public struct PlayerConfig: TCOutputModel {
        /// 播放器配置名字。
        public let name: String

        /// 播放器配置类型，取值范围：
        /// <li>Preset：系统预置配置；</li>
        /// <li>Custom：用户自定义配置。</li>
        public let type: String

        /// 播放的音视频类型，可选值有：
        /// <li>AdaptiveDynamicStream：自适应码流输出；</li>
        /// <li>Transcode：转码输出；</li>
        /// <li>Original：原始音视频。</li>
        public let audioVideoType: String

        /// 播放 DRM 保护的自适应码流开关：
        /// <li>ON：开启，表示仅播放 DRM  保护的自适应码流输出；</li>
        /// <li>OFF：关闭，表示播放未加密的自适应码流输出。</li>
        public let drmSwitch: String

        /// 允许输出的未加密的自适应码流模板 ID。
        public let adaptiveDynamicStreamingDefinition: UInt64

        /// 允许输出的 DRM 自适应码流模板内容。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let drmStreamingsInfo: DrmStreamingsInfo?

        /// 允许输出的转码模板 ID。
        public let transcodeDefinition: UInt64

        /// 允许输出的雪碧图模板 ID。
        public let imageSpriteDefinition: UInt64

        /// 播放器对不于不同分辨率的子流展示名字。
        public let resolutionNameSet: [ResolutionNameInfo]

        /// 播放器配置创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。
        public let createTime: String

        /// 播放器配置最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。
        public let updateTime: String

        /// 播放时使用的域名。值为 Default，表示使用[默认分发配置](https://cloud.tencent.com/document/product/266/33373)中的域名。
        public let domain: String

        /// 播放时使用的 Scheme。取值范围：
        /// <li>Default：使用[默认分发配置](https://cloud.tencent.com/document/product/266/33373)中的 Scheme；</li>
        /// <li>HTTP；</li>
        /// <li>HTTPS。</li>
        public let scheme: String

        /// 模板描述信息。
        public let comment: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case audioVideoType = "AudioVideoType"
            case drmSwitch = "DrmSwitch"
            case adaptiveDynamicStreamingDefinition = "AdaptiveDynamicStreamingDefinition"
            case drmStreamingsInfo = "DrmStreamingsInfo"
            case transcodeDefinition = "TranscodeDefinition"
            case imageSpriteDefinition = "ImageSpriteDefinition"
            case resolutionNameSet = "ResolutionNameSet"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case domain = "Domain"
            case scheme = "Scheme"
            case comment = "Comment"
        }
    }

    /// 语音鉴别涉及令人不适宜的信息的任务控制参数
    public struct PoliticalAsrReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 语音鉴别涉及令人不适宜的信息的任务开关，可选值：
        /// <li>ON：开启语音鉴别涉及令人不适宜的信息的任务；</li>
        /// <li>OFF：关闭语音鉴别的涉及令人不适宜的信息的任务。</li>
        public let `switch`: String

        /// 判定需人工复核是否违规的分数阈值，当音视频审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        /// 判定涉嫌违规的分数阈值，当音视频审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        public init(switch: String, reviewConfidence: Int64? = nil, blockConfidence: Int64? = nil) {
            self.switch = `switch`
            self.reviewConfidence = reviewConfidence
            self.blockConfidence = blockConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case reviewConfidence = "ReviewConfidence"
            case blockConfidence = "BlockConfidence"
        }
    }

    /// 语音鉴别涉及令人不适宜的信息的任务控制参数。
    public struct PoliticalAsrReviewTemplateInfoForUpdate: TCInputModel {
        /// 语音鉴别涉及令人不适宜的信息的任务开关，可选值：
        /// <li>ON：开启语音鉴别涉及令人不适宜的信息的任务；</li>
        /// <li>OFF：关闭语音鉴别涉及令人不适宜的信息的任务。</li>
        public let `switch`: String?

        /// 判定涉嫌违规的分数阈值，当音视频审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当音视频审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 鉴别涉及令人不适宜的信息的任务控制参数
    public struct PoliticalConfigureInfo: TCInputModel, TCOutputModel {
        /// 画面鉴别涉及令人不适宜的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imgReviewInfo: PoliticalImgReviewTemplateInfo?

        /// 语音鉴别涉及令人不适宜的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrReviewInfo: PoliticalAsrReviewTemplateInfo?

        /// 文本鉴别涉及令人不适宜的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrReviewInfo: PoliticalOcrReviewTemplateInfo?

        public init(imgReviewInfo: PoliticalImgReviewTemplateInfo? = nil, asrReviewInfo: PoliticalAsrReviewTemplateInfo? = nil, ocrReviewInfo: PoliticalOcrReviewTemplateInfo? = nil) {
            self.imgReviewInfo = imgReviewInfo
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case imgReviewInfo = "ImgReviewInfo"
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 鉴别涉及令人不适宜的信息的控制参数。
    public struct PoliticalConfigureInfoForUpdate: TCInputModel {
        /// 画面鉴别涉及令人不适宜的信息的控制参数。
        public let imgReviewInfo: PoliticalImgReviewTemplateInfoForUpdate?

        /// 语音鉴别涉及令人不适宜的信息的控制参数。
        public let asrReviewInfo: PoliticalAsrReviewTemplateInfoForUpdate?

        /// 文本鉴别涉及令人不适宜的信息的控制参数。
        public let ocrReviewInfo: PoliticalOcrReviewTemplateInfoForUpdate?

        public init(imgReviewInfo: PoliticalImgReviewTemplateInfoForUpdate? = nil, asrReviewInfo: PoliticalAsrReviewTemplateInfoForUpdate? = nil, ocrReviewInfo: PoliticalOcrReviewTemplateInfoForUpdate? = nil) {
            self.imgReviewInfo = imgReviewInfo
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case imgReviewInfo = "ImgReviewInfo"
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 图片画面审核涉及令人不适宜信息的任务结果类型
    public struct PoliticalImageResult: TCOutputModel {
        /// 鉴别涉及令人不适宜信息的评分，分值为0到100。
        public let confidence: Float

        /// 鉴别涉及令人不适宜信息的结果建议，取值范围：
        /// <li>pass；</li>
        /// <li>review；</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 涉及令人不适宜的信息、违规图标名字。
        public let name: String

        /// 涉及令人不适宜的信息、违规图标出现的区域坐标 (像素级)，[x1, y1, x2, y2]，即左上角坐标、右下角坐标。
        public let areaCoordSet: [Int64]

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case name = "Name"
            case areaCoordSet = "AreaCoordSet"
        }
    }

    /// 画面鉴别涉及令人不适宜的信息的任务控制参数
    public struct PoliticalImgReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 画面鉴别涉及令人不适宜的信息的任务开关，可选值：
        /// <li>ON：开启画面鉴别涉及令人不适宜的信息的任务；</li>
        /// <li>OFF：关闭画面鉴别涉及令人不适宜的信息的任务。</li>
        public let `switch`: String

        /// 画面鉴别涉及令人不适宜的信息的过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回，可选值为：
        /// <li>violation_photo：违规图标；</li>
        /// <li>politician：相关人物；</li>
        /// <li>entertainment：娱乐人物；</li>
        /// <li>sport：体育人物；</li>
        /// <li>entrepreneur：商业人物；</li>
        /// <li>scholar：教育学者；</li>
        /// <li>celebrity：知名人物；</li>
        /// <li>military：相关人物。</li>
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 97 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 95 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 画面鉴别涉及令人不适宜的信息的任务控制参数。
    public struct PoliticalImgReviewTemplateInfoForUpdate: TCInputModel {
        /// 画面鉴别涉及令人不适宜的信息的任务开关，可选值：
        /// <li>ON：开启画面鉴别涉及令人不适宜的信息的任务；</li>
        /// <li>OFF：关闭画面鉴别涉及令人不适宜的信息的任务。</li>
        public let `switch`: String?

        /// 画面鉴别涉及令人不适宜的信息的过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回，可选值为：
        /// <li>violation_photo：违规图标；</li>
        /// <li>politician：相关人物；</li>
        /// <li>entertainment：娱乐人物；</li>
        /// <li>sport：体育人物；</li>
        /// <li>entrepreneur：商业人物；</li>
        /// <li>scholar：教育学者；</li>
        /// <li>celebrity：知名人物；</li>
        /// <li>military：相关人物。</li>
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文本鉴别涉及令人不适宜的信息的任务控制参数
    public struct PoliticalOcrReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 文本鉴别涉及令人不适宜的信息的任务开关，可选值：
        /// <li>ON：开启文本鉴别涉及令人不适宜的信息的任务；</li>
        /// <li>OFF：关闭文本鉴别涉及令人不适宜的信息的任务。</li>
        public let `switch`: String

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文本鉴别涉及令人不适宜的信息的任务控制参数。
    public struct PoliticalOcrReviewTemplateInfoForUpdate: TCInputModel {
        /// 文本鉴别涉及令人不适宜的信息的任务开关，可选值：
        /// <li>ON：开启文本鉴别涉及令人不适宜的信息的任务；</li>
        /// <li>OFF：关闭文本鉴别涉及令人不适宜的信息的任务。</li>
        public let `switch`: String?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 语音鉴别涉及令人反感的信息的任务控制参数
    public struct PornAsrReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 语音鉴别涉及令人反感的信息的任务开关，可选值：
        /// <li>ON：开启语音鉴别涉及令人反感的信息的任务；</li>
        /// <li>OFF：关闭语音鉴别涉及令人反感的信息的任务。</li>
        public let `switch`: String

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 语音鉴别涉及令人反感的信息的任务控制参数。
    public struct PornAsrReviewTemplateInfoForUpdate: TCInputModel {
        /// 语音鉴别涉及令人反感的信息的任务开关，可选值：
        /// <li>ON：开启语音鉴别涉及令人反感的信息的任务；</li>
        /// <li>OFF：关闭语音鉴别涉及令人反感的信息的任务。</li>
        public let `switch`: String?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 鉴别涉及令人反感的信息的任务控制参数
    public struct PornConfigureInfo: TCInputModel, TCOutputModel {
        /// 画面鉴别涉及令人反感的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imgReviewInfo: PornImgReviewTemplateInfo?

        /// 语音鉴别涉及令人反感的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrReviewInfo: PornAsrReviewTemplateInfo?

        /// 文本鉴别涉及令人反感的信息的控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrReviewInfo: PornOcrReviewTemplateInfo?

        public init(imgReviewInfo: PornImgReviewTemplateInfo? = nil, asrReviewInfo: PornAsrReviewTemplateInfo? = nil, ocrReviewInfo: PornOcrReviewTemplateInfo? = nil) {
            self.imgReviewInfo = imgReviewInfo
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case imgReviewInfo = "ImgReviewInfo"
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 鉴别涉及令人反感的信息的任务控制参数。
    public struct PornConfigureInfoForUpdate: TCInputModel {
        /// 画面鉴别涉及令人反感的信息的控制参数。
        public let imgReviewInfo: PornImgReviewTemplateInfoForUpdate?

        /// 语音鉴别涉及令人反感的信息的控制参数。
        public let asrReviewInfo: PornAsrReviewTemplateInfoForUpdate?

        /// 文本鉴别涉及令人反感的信息的控制参数。
        public let ocrReviewInfo: PornOcrReviewTemplateInfoForUpdate?

        public init(imgReviewInfo: PornImgReviewTemplateInfoForUpdate? = nil, asrReviewInfo: PornAsrReviewTemplateInfoForUpdate? = nil, ocrReviewInfo: PornOcrReviewTemplateInfoForUpdate? = nil) {
            self.imgReviewInfo = imgReviewInfo
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case imgReviewInfo = "ImgReviewInfo"
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 图片画面审核涉及令人反感的信息的任务结果类型
    public struct PornImageResult: TCOutputModel {
        /// 鉴别涉及令人反感的信息的评分，分值为0到100。
        public let confidence: Float

        /// 鉴别涉及令人反感的信息的结果建议，取值范围：
        /// <li>pass；</li>
        /// <li>review；</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 鉴别涉及令人反感的信息的结果标签，取值范围：
        /// <li>porn：色情；</li>
        /// <li>sexy：性感；</li>
        /// <li>vulgar：低俗；</li>
        /// <li>intimacy：亲密行为。</li>
        public let label: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case label = "Label"
        }
    }

    /// 画面鉴别涉及令人反感的信息的任务控制参数
    public struct PornImgReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 画面鉴别涉及令人反感的信息的任务开关，可选值：
        /// <li>ON：开启画面鉴别涉及令人反感的信息的任务；</li>
        /// <li>OFF：关闭画面鉴别涉及令人反感的信息的任务。</li>
        public let `switch`: String

        /// 画面鉴别涉及令人反感的信息的过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回，可选值为：
        /// <li>porn：色情；</li>
        /// <li>vulgar：低俗；</li>
        /// <li>intimacy：亲密行为；</li>
        /// <li>sexy：性感。</li>
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 90 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 0 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 画面鉴别涉及令人反感的信息的任务控制参数。
    public struct PornImgReviewTemplateInfoForUpdate: TCInputModel {
        /// 画面鉴别涉及令人反感的信息的任务开关，可选值：
        /// <li>ON：开启画面鉴别涉及令人反感的信息的任务；</li>
        /// <li>OFF：关闭画面鉴别涉及令人反感的信息的任务。</li>
        public let `switch`: String?

        /// 画面鉴别涉及令人反感的信息的过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回，可选值为：
        /// <li>porn：色情；</li>
        /// <li>vulgar：低俗；</li>
        /// <li>intimacy：亲密行为；</li>
        /// <li>sexy：性感。</li>
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文本鉴别涉及令人反感的信息的任务控制参数
    public struct PornOcrReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 文本鉴别涉及令人反感的信息的任务开关，可选值：
        /// <li>ON：开启文本鉴别涉及令人反感的信息的任务；</li>
        /// <li>OFF：关闭文本鉴别涉及令人反感的信息的任务。</li>
        public let `switch`: String

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文本鉴别涉及令人反感的信息的任务控制参数。
    public struct PornOcrReviewTemplateInfoForUpdate: TCInputModel {
        /// 文本鉴别涉及令人反感的信息的任务开关，可选值：
        /// <li>ON：开启文本鉴别涉及令人反感的信息的任务；</li>
        /// <li>OFF：关闭文本鉴别涉及令人反感的信息的任务。</li>
        public let `switch`: String?

        /// 判定涉嫌违规的分数阈值，当智能审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当智能审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 任务流模板音视频审核输入参数类型。
    public struct ProcedureReviewAudioVideoTaskInput: TCInputModel, TCOutputModel {
        /// 审核模板。
        public let definition: UInt64

        /// 审核的内容，可选值：
        /// <li>Media：原始音视频；</li>
        /// <li>Cover：封面。</li>
        /// 不填或填空数组时，默认为审核 Media。
        public let reviewContents: [String]?

        public init(definition: UInt64, reviewContents: [String]? = nil) {
            self.definition = definition
            self.reviewContents = reviewContents
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case reviewContents = "ReviewContents"
        }
    }

    /// 音视频处理任务信息
    public struct ProcedureTask: TCOutputModel {
        /// 音视频处理任务 ID。
        public let taskId: String

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 已弃用，请使用各个具体任务的 ErrCode。
        public let errCode: Int64

        /// 已弃用，请使用各个具体任务的 Message。
        public let message: String

        /// 媒体文件 ID
        /// <li>若流程由 [ProcessMedia](https://cloud.tencent.com/document/product/266/33427) 发起，该字段表示 [MediaInfo](https://cloud.tencent.com/document/product/266/31773#MediaInfo) 的 FileId；</li>
        /// <li>若流程由 [ProcessMediaByUrl](https://cloud.tencent.com/document/product/266/33426) 发起，该字段表示 [MediaInputInfo](https://cloud.tencent.com/document/product/266/31773#MediaInputInfo) 的 Id。</li>
        public let fileId: String

        /// 媒体文件名称
        /// <li>若流程由 [ProcessMedia](https://cloud.tencent.com/document/product/266/33427) 发起，该字段表示 [MediaInfo](https://cloud.tencent.com/document/product/266/31773#MediaInfo) 的 BasicInfo.Name；</li>
        /// <li>若流程由 [ProcessMediaByUrl](https://cloud.tencent.com/document/product/266/33426) 发起，该字段表示 [MediaInputInfo](https://cloud.tencent.com/document/product/266/31773#MediaInputInfo) 的 Name。</li>
        public let fileName: String

        /// 媒体文件地址
        /// <li>若流程由 [ProcessMedia](https://cloud.tencent.com/document/product/266/33427) 发起，该字段表示 [MediaInfo](https://cloud.tencent.com/document/product/266/31773#MediaInfo) 的 BasicInfo.MediaUrl；</li>
        /// <li>若流程由 [ProcessMediaByUrl](https://cloud.tencent.com/document/product/266/33426) 发起，该字段表示 [MediaInputInfo](https://cloud.tencent.com/document/product/266/31773#MediaInputInfo) 的 Url。</li>
        public let fileUrl: String

        /// 原始音视频的元信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaData: MediaMetaData?

        /// 音视频处理任务的执行状态与结果。
        public let mediaProcessResultSet: [MediaProcessTaskResult]

        /// 音视频审核任务的执行状态与结果。
        public let aiContentReviewResultSet: [AiContentReviewResult]

        /// 音视频内容分析任务的执行状态与结果。
        public let aiAnalysisResultSet: [AiAnalysisResult]

        /// 音视频内容识别任务的执行状态与结果。
        public let aiRecognitionResultSet: [AiRecognitionResult]

        /// 任务流的优先级，取值范围为 [-10, 10]。
        public let tasksPriority: Int64

        /// 任务流状态变更通知模式。
        /// <li>Finish：只有当任务流全部执行完毕时，才发起一次事件通知；</li>
        /// <li>Change：只要任务流中每个子任务的状态发生变化，都进行事件通知；</li>
        /// <li>None：不接受该任务流回调。</li>
        public let tasksNotifyMode: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 操作者。取值范围：
        /// <li>System: 表示系统触发。</li>
        public let `operator`: String

        /// 操作类型。取值范围：
        /// <li>TSC: 表示使用极速高清进行智能降码。</li>
        public let operationType: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case fileName = "FileName"
            case fileUrl = "FileUrl"
            case metaData = "MetaData"
            case mediaProcessResultSet = "MediaProcessResultSet"
            case aiContentReviewResultSet = "AiContentReviewResultSet"
            case aiAnalysisResultSet = "AiAnalysisResultSet"
            case aiRecognitionResultSet = "AiRecognitionResultSet"
            case tasksPriority = "TasksPriority"
            case tasksNotifyMode = "TasksNotifyMode"
            case sessionContext = "SessionContext"
            case sessionId = "SessionId"
            case `operator` = "Operator"
            case operationType = "OperationType"
        }
    }

    /// 任务流模板详情
    public struct ProcedureTemplate: TCOutputModel {
        /// 任务流名字。
        public let name: String?

        /// 任务流模板类型，取值范围：
        /// <li>Preset：系统预置任务流模板；</li>
        /// <li>Custom：用户自定义任务流模板。</li>
        public let type: String?

        /// 模板描述信息，长度限制：256 个字符。
        public let comment: String?

        /// 视频处理类型任务参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mediaProcessTask: MediaProcessTaskInput?

        /// AI 智能审核类型任务参数 \*。
        /// <font color=red>\*：该参数用于发起旧版审核，不建议使用。推荐使用 ReviewAudioVideoTask 参数发起审核。</font>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aiContentReviewTask: AiContentReviewTaskInput?

        /// AI 智能内容分析类型任务参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aiAnalysisTask: AiAnalysisTaskInput?

        /// AI 内容识别类型任务参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aiRecognitionTask: AiRecognitionTaskInput?

        /// 微信小程序发布任务参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let miniProgramPublishTask: WechatMiniProgramPublishTaskInput?

        /// 音视频审核类型任务参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reviewAudioVideoTask: ProcedureReviewAudioVideoTaskInput?

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String?

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case comment = "Comment"
            case mediaProcessTask = "MediaProcessTask"
            case aiContentReviewTask = "AiContentReviewTask"
            case aiAnalysisTask = "AiAnalysisTask"
            case aiRecognitionTask = "AiRecognitionTask"
            case miniProgramPublishTask = "MiniProgramPublishTask"
            case reviewAudioVideoTask = "ReviewAudioVideoTask"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 预付费商品实例
    public struct ProductInstance: TCOutputModel {
        /// 预付费商品实例类型，取值有：
        /// <li>StarterPackage：点播新手包。</li>
        /// <li>MiniProgramPlugin：点播小程序插件。</li>
        /// <li>ResourcePackage：点播资源包。</li>
        public let productType: String

        /// 资源包实例起始日期。使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。
        public let startTime: String

        /// 资源包实例过期日期。使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。
        public let expireTime: String

        /// 资源包实例ID。对应每个资源包，系统会分配相应的资源。续费或者升级资源包时，需要带上这个资源ID。
        public let productInstanceId: String

        /// 系统最近一次扣除资源包的日期。使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#iso-.E6.97.A5.E6.9C.9F.E6.A0.BC.E5.BC.8F)。
        public let lastConsumeDate: String

        /// 资源包绑定 License 状态，取值有：
        /// <li>0：未绑定。</li>
        /// <li>1：已绑定。</li>
        public let bindStatus: Int64

        /// 预付费资源包实例中包含的资源包列表。
        public let productInstanceResourceSet: [ProductInstanceRecource]

        /// 资源包实例的状态，取值有：
        /// <li>Effective：生效，可用于计费抵扣。</li>
        /// <li>Isolated：隔离，不可用于计费抵扣。</li>
        public let productInstanceStatus: String

        /// 资源包实例的可退还状态，取值有：
        /// <li>FullRefund：可全额退款。</li>
        /// <li>Denied：不可退款。</li>
        public let refundStatus: String

        /// 自动续费状态，取值有：
        /// <li>Never：不自动续费。</li>
        /// <li>Expire：到期自动续费。</li>
        /// <li>ExpireOrUseOut：到期或用完自动续费。</li>
        /// <li>NotSupport：不支持。</li>
        public let renewStatus: String

        enum CodingKeys: String, CodingKey {
            case productType = "ProductType"
            case startTime = "StartTime"
            case expireTime = "ExpireTime"
            case productInstanceId = "ProductInstanceId"
            case lastConsumeDate = "LastConsumeDate"
            case bindStatus = "BindStatus"
            case productInstanceResourceSet = "ProductInstanceResourceSet"
            case productInstanceStatus = "ProductInstanceStatus"
            case refundStatus = "RefundStatus"
            case renewStatus = "RenewStatus"
        }
    }

    /// 资源包中包含的资源。
    public struct ProductInstanceRecource: TCOutputModel {
        /// 资源类型。
        /// <li>Storage：存储资源包。</li>
        /// <li>Traffic：流量资源包。</li>
        /// <li>Transcode：普通转码资源包。</li>
        /// <li>TESHD：极速高清转码资源包。</li>
        /// <li>Review：音视频审核转码资源包。</li>
        public let resourceType: String

        /// 资源包额度。
        /// <li>音视频存储资源包，单位为字节。</li>
        /// <li>音视频转码资源包，单位为秒。</li>
        /// <li>音视频审核资源包，单位为秒。</li>
        /// <li>音视频极速高清资源包，单位为秒。</li>
        /// <li>音视频加速资源包，单位为字节。</li>
        public let amount: Int64

        /// 资源包余量。
        /// <li>音视频存储资源包，单位为字节。</li>
        /// <li>音视频转码资源包，单位为秒。</li>
        /// <li>音视频审核资源包，单位为秒。</li>
        /// <li>音视频极速高清资源包，单位为秒。</li>
        /// <li>音视频加速资源包，单位为字节。</li>
        public let left: Int64

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case amount = "Amount"
            case left = "Left"
        }
    }

    /// 语音违禁任务控制参数
    public struct ProhibitedAsrReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 语音违禁任务开关，可选值：
        /// <li>ON：开启语音违禁任务；</li>
        /// <li>OFF：关闭语音违禁任务。</li>
        public let `switch`: String

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 语音违禁任务控制参数
    public struct ProhibitedAsrReviewTemplateInfoForUpdate: TCInputModel {
        /// 语音违禁任务开关，可选值：
        /// <li>ON：开启语音违禁任务；</li>
        /// <li>OFF：关闭语音违禁任务。</li>
        public let `switch`: String?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 违禁任务控制参数
    public struct ProhibitedConfigureInfo: TCInputModel, TCOutputModel {
        /// 语音违禁控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrReviewInfo: ProhibitedAsrReviewTemplateInfo?

        /// 文本违禁控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrReviewInfo: ProhibitedOcrReviewTemplateInfo?

        public init(asrReviewInfo: ProhibitedAsrReviewTemplateInfo? = nil, ocrReviewInfo: ProhibitedOcrReviewTemplateInfo? = nil) {
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 违禁任务控制参数
    public struct ProhibitedConfigureInfoForUpdate: TCInputModel {
        /// 语音违禁控制参数。
        public let asrReviewInfo: ProhibitedAsrReviewTemplateInfoForUpdate?

        /// 文本违禁控制参数。
        public let ocrReviewInfo: ProhibitedOcrReviewTemplateInfoForUpdate?

        public init(asrReviewInfo: ProhibitedAsrReviewTemplateInfoForUpdate? = nil, ocrReviewInfo: ProhibitedOcrReviewTemplateInfoForUpdate? = nil) {
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 文本违禁任务控制参数
    public struct ProhibitedOcrReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 文本违禁任务开关，可选值：
        /// <li>ON：开启文本违禁任务；</li>
        /// <li>OFF：关闭文本违禁任务。</li>
        public let `switch`: String

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文本违禁任务控制参数
    public struct ProhibitedOcrReviewTemplateInfoForUpdate: TCInputModel {
        /// 文本违禁任务开关，可选值：
        /// <li>ON：开启文本违禁任务；</li>
        /// <li>OFF：关闭文本违禁任务。</li>
        public let `switch`: String?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 拉取上传任务信息
    public struct PullUploadTask: TCOutputModel {
        /// 拉取上传任务 ID。
        public let taskId: String?

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String?

        /// 错误码，0 表示成功，其他值表示失败：
        /// <li>40000：输入参数不合法，请检查输入参数；</li>
        /// <li>60000：源文件错误（如视频数据损坏），请确认源文件是否正常；</li>
        /// <li>70000：内部服务错误，建议重试。</li>
        public let errCode: Int64?

        /// 错误信息。
        public let message: String?

        /// 拉取上传完成后生成的视频 ID。
        public let fileId: String?

        /// 拉取上传完成后生成的媒体文件基础信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mediaBasicInfo: MediaBasicInfo?

        /// 输出视频的元信息。
        public let metaData: MediaMetaData?

        /// 拉取上传完成后生成的播放地址。
        public let fileUrl: String?

        /// 任务类型为 Procedure 的任务 ID。若[拉取上传](https://cloud.tencent.com/document/api/266/35575)时指定了媒体后续任务操作(Procedure)，当该任务流模板指定了 MediaProcessTask、AiAnalysisTask、AiRecognitionTask 中的一个或多个时发起该任务。
        public let procedureTaskId: String?

        /// 任务类型为 ReviewAudioVideo 的任务 ID。若[拉取上传](https://cloud.tencent.com/document/api/266/35575)时指定了媒体后续任务操作(Procedure)，当该任务流模板指定了 ReviewAudioVideoTask 时，发起该任务。
        public let reviewAudioVideoTaskId: String?

        /// 来源上下文，用于透传用户请求信息，[URL 拉取视频上传完成](https://cloud.tencent.com/document/product/266/7831)将返回该字段值，最长 1000 个字符。
        public let sessionContext: String?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String?

        /// 拉取上传进度，取值范围 [0-100] 。
        public let progress: Int64?

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case mediaBasicInfo = "MediaBasicInfo"
            case metaData = "MetaData"
            case fileUrl = "FileUrl"
            case procedureTaskId = "ProcedureTaskId"
            case reviewAudioVideoTaskId = "ReviewAudioVideoTaskId"
            case sessionContext = "SessionContext"
            case sessionId = "SessionId"
            case progress = "Progress"
        }
    }

    /// 音画质重生音频控制控制信息。
    public struct RebuildAudioInfo: TCInputModel, TCOutputModel {
        /// 音频降噪控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let audioDenoiseInfo: AudioDenoiseInfo?

        public init(audioDenoiseInfo: AudioDenoiseInfo? = nil) {
            self.audioDenoiseInfo = audioDenoiseInfo
        }

        enum CodingKeys: String, CodingKey {
            case audioDenoiseInfo = "AudioDenoiseInfo"
        }
    }

    /// 音画质重生结果文件输出。
    public struct RebuildMediaOutputConfig: TCInputModel {
        /// 输出文件名，最长 64 个字符。缺省由系统指定生成文件名。
        public let mediaName: String?

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64?

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String?

        public init(mediaName: String? = nil, classId: Int64? = nil, expireTime: String? = nil) {
            self.mediaName = mediaName
            self.classId = classId
            self.expireTime = expireTime
        }

        enum CodingKeys: String, CodingKey {
            case mediaName = "MediaName"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
        }
    }

    /// 画质重生输出的音频信息
    public struct RebuildMediaTargetAudioStream: TCInputModel, TCOutputModel {
        /// 音频流的编码格式。
        /// 当外层参数 Container 为 mp3 时，可选值为：
        /// <li>libmp3lame。</li>
        /// 当外层参数 Container 为 ogg 或 flac 时，可选值为：
        /// <li>flac。</li>
        /// 当外层参数 Container 为 m4a 时，可选值为：
        /// <li>libfdk_aac；</li>
        /// <li>libmp3lame；</li>
        /// <li>ac3。</li>
        /// 当外层参数 Container 为 mp4 或 flv 时，可选值为：
        /// <li>libfdk_aac：更适合 mp4；</li>
        /// <li>libmp3lame：更适合 flv；</li>
        /// <li>mp2。</li>
        /// 当外层参数 Container 为 hls 时，可选值为：
        /// <li>libfdk_aac。</li>
        public let codec: String?

        /// 音频流的码率，取值范围：0 和 [26, 256]，单位：kbps。
        /// 当取值为 0，表示音频码率和原始音频保持一致。
        public let bitrate: Int64?

        /// 音频流的采样率，可选值：
        /// <li>32000</li>
        /// <li>44100</li>
        /// <li>48000</li>
        ///
        /// 单位：Hz。
        public let sampleRate: Int64?

        /// 音频通道方式，可选值：
        /// <li>1：单通道</li>
        /// <li>2：双通道</li>
        /// <li>6：立体声</li>
        ///
        /// 当媒体的封装格式是音频格式时（flac，ogg，mp3，m4a）时，声道数不允许设为立体声。
        /// 默认值：2。
        public let audioChannel: Int64?

        public init(codec: String? = nil, bitrate: Int64? = nil, sampleRate: Int64? = nil, audioChannel: Int64? = nil) {
            self.codec = codec
            self.bitrate = bitrate
            self.sampleRate = sampleRate
            self.audioChannel = audioChannel
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case bitrate = "Bitrate"
            case sampleRate = "SampleRate"
            case audioChannel = "AudioChannel"
        }
    }

    /// 画质重生目标参数
    public struct RebuildMediaTargetInfo: TCInputModel, TCOutputModel {
        /// 输出文件名，最长 64 个字符。缺省由系统指定生成文件名。
        public let mediaName: String?

        /// 描述信息，最长 128 个字符。缺省描述信息为空。
        public let description: String?

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64?

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String?

        /// 输出文件封装格式，可选值：mp4、flv、hls。默认mp4。
        public let container: String?

        /// 输出的视频信息。
        public let videoStream: RebuildMediaTargetVideoStream?

        /// 输出的音频信息。
        public let audioStream: RebuildMediaTargetAudioStream?

        /// 是否去除视频数据，可选值：
        /// <li>0：保留</li>
        /// <li>1：去除</li>
        ///
        /// 默认值：0。
        public let removeVideo: Int64?

        /// 是否去除音频数据，可选值：
        /// <li>0：保留</li>
        /// <li>1：去除</li>
        ///
        /// 默认值：0。
        public let removeAudio: Int64?

        public init(mediaName: String? = nil, description: String? = nil, classId: Int64? = nil, expireTime: String? = nil, container: String? = nil, videoStream: RebuildMediaTargetVideoStream? = nil, audioStream: RebuildMediaTargetAudioStream? = nil, removeVideo: Int64? = nil, removeAudio: Int64? = nil) {
            self.mediaName = mediaName
            self.description = description
            self.classId = classId
            self.expireTime = expireTime
            self.container = container
            self.videoStream = videoStream
            self.audioStream = audioStream
            self.removeVideo = removeVideo
            self.removeAudio = removeAudio
        }

        enum CodingKeys: String, CodingKey {
            case mediaName = "MediaName"
            case description = "Description"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
            case container = "Container"
            case videoStream = "VideoStream"
            case audioStream = "AudioStream"
            case removeVideo = "RemoveVideo"
            case removeAudio = "RemoveAudio"
        }
    }

    /// 画质重生输出的视频信息
    public struct RebuildMediaTargetVideoStream: TCInputModel, TCOutputModel {
        /// 视频流的编码格式，可选值：
        /// <li>libx264：H.264 编码；</li>
        /// <li>libx265：H.265 编码；</li>
        /// <li>av1：AOMedia Video 1 编码。</li>
        /// 默认视频流的编码格式为 H.264 编码。
        public let codec: String?

        /// 视频流的码率，取值范围：0 和 [128, 35000]，单位：kbps。
        /// 当取值为 0，表示视频码率和原始视频保持一致。
        public let bitrate: Int64?

        /// 视频帧率，取值范围：[0, 100]，单位：Hz。 当取值为 0，表示帧率和原始视频保持一致。
        public let fps: Int64?

        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        ///
        /// 默认值：open。
        public let resolutionAdaptive: String?

        /// 视频流宽度（或长边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        ///
        /// 默认值：0。
        public let width: Int64?

        /// 视频流高度（或短边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        ///
        /// 默认值：0。
        public let height: Int64?

        /// 填充方式，当视频流配置宽高参数与原始视频的宽高比不一致时，对转码的处理方式，即为“填充”。可选填充方式：
        /// <li>stretch：拉伸，对每一帧进行拉伸，填满整个画面，可能导致转码后的视频被“压扁“或者“拉长“；</li>
        /// <li>black：留黑，保持视频宽高比不变，边缘剩余部分使用黑色填充。</li>
        ///
        /// 默认值：stretch 。
        public let fillType: String?

        /// 关键帧 I 帧之间的间隔，取值范围：0 和 [1, 100000]，单位：帧数。
        /// 当填 0 或不填时，系统将自动设置 gop 长度。
        public let gop: Int64?

        public init(codec: String? = nil, bitrate: Int64? = nil, fps: Int64? = nil, resolutionAdaptive: String? = nil, width: Int64? = nil, height: Int64? = nil, fillType: String? = nil, gop: Int64? = nil) {
            self.codec = codec
            self.bitrate = bitrate
            self.fps = fps
            self.resolutionAdaptive = resolutionAdaptive
            self.width = width
            self.height = height
            self.fillType = fillType
            self.gop = gop
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case bitrate = "Bitrate"
            case fps = "Fps"
            case resolutionAdaptive = "ResolutionAdaptive"
            case width = "Width"
            case height = "Height"
            case fillType = "FillType"
            case gop = "Gop"
        }
    }

    /// 音画质重生任务
    public struct RebuildMediaTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 错误码，0 表示成功，其他值表示失败：
        /// <li>40000：输入参数不合法，请检查输入参数；</li>
        /// <li>60000：源文件错误（如视频数据损坏），请确认源文件是否正常；</li>
        /// <li>70000：内部服务错误，建议重试。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 音画质重生任务进度，取值范围 [0-100] 。
        public let progress: Int64

        /// 音画质重生任务的输入。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let input: RebuildMediaTaskInput?

        /// 音画质重生任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: RebuildMediaTaskOutput?

        /// 音画质重生输出视频的元信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaData: MediaMetaData?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case message = "Message"
            case errCodeExt = "ErrCodeExt"
            case progress = "Progress"
            case input = "Input"
            case output = "Output"
            case metaData = "MetaData"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 音画质重生任务的输入。
    public struct RebuildMediaTaskInput: TCOutputModel {
        /// 媒体文件 ID。
        public let fileId: String

        /// 起始偏移时间，单位：秒，不填表示从视频开始截取。
        public let startTimeOffset: Float

        /// 结束偏移时间，单位：秒，不填表示截取到视频末尾。
        public let endTimeOffset: Float

        /// 音画质重生模版号。
        public let definition: Int64?

        /// 画质修复控制参数。
        public let repairInfo: RepairInfo

        /// 智能插帧控制参数。
        public let videoFrameInterpolationInfo: VideoFrameInterpolationInfo

        /// 画面超分控制参数。
        public let superResolutionInfo: SuperResolutionInfo

        /// 高动态范围类型控制参数。
        public let hdrInfo: HDRInfo?

        /// 视频降噪控制参数。
        public let videoDenoiseInfo: VideoDenoiseInfo?

        /// 音频降噪控制参数。
        public let audioDenoiseInfo: AudioDenoiseInfo?

        /// 色彩增强控制参数。
        public let colorInfo: ColorEnhanceInfo?

        /// 细节增强控制参数。
        public let sharpInfo: SharpEnhanceInfo?

        /// 人脸增强控制参数。
        public let faceInfo: FaceEnhanceInfo?

        /// 低光照控制参数。
        public let lowLightInfo: LowLightEnhanceInfo?

        /// 去划痕控制参数。
        public let scratchRepairInfo: ScratchRepairInfo?

        /// 去伪影（毛刺）控制参数。
        public let artifactRepairInfo: ArtifactRepairInfo?

        /// 音画质重生输出目标参数。
        public let targetInfo: RebuildMediaTargetInfo?

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case definition = "Definition"
            case repairInfo = "RepairInfo"
            case videoFrameInterpolationInfo = "VideoFrameInterpolationInfo"
            case superResolutionInfo = "SuperResolutionInfo"
            case hdrInfo = "HDRInfo"
            case videoDenoiseInfo = "VideoDenoiseInfo"
            case audioDenoiseInfo = "AudioDenoiseInfo"
            case colorInfo = "ColorInfo"
            case sharpInfo = "SharpInfo"
            case faceInfo = "FaceInfo"
            case lowLightInfo = "LowLightInfo"
            case scratchRepairInfo = "ScratchRepairInfo"
            case artifactRepairInfo = "ArtifactRepairInfo"
            case targetInfo = "TargetInfo"
        }
    }

    /// 音画质重生任务输出
    public struct RebuildMediaTaskOutput: TCOutputModel {
        /// 文件类型，例如 mp4、flv 等。
        public let fileType: String

        /// 媒体文件播放地址。
        public let fileUrl: String

        /// 媒体文件 ID。
        public let fileId: String

        /// 输出文件名，最长 64 个字符。缺省由系统指定生成文件名。
        public let mediaName: String

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String

        enum CodingKeys: String, CodingKey {
            case fileType = "FileType"
            case fileUrl = "FileUrl"
            case fileId = "FileId"
            case mediaName = "MediaName"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
        }
    }

    /// 音画质重生模板详情。
    public struct RebuildMediaTemplate: TCOutputModel {
        /// 音画质重生模板号。
        public let definition: Int64?

        /// 模板类型，可选值：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String?

        /// 音画质重生模板名称。
        public let name: String?

        /// 音画质重生模板描述。
        public let comment: String?

        /// 音画质重生视频控制信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rebuildVideoInfo: RebuildVideoInfo?

        /// 音画质重生音频控制信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rebuildAudioInfo: RebuildAudioInfo?

        /// 输出视频控制信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetVideoInfo: RebuildMediaTargetVideoStream?

        /// 输出音频控制信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetAudioInfo: RebuildMediaTargetAudioStream?

        /// 封装格式。可选值：mp4、hls。默认是 mp4。
        public let container: String?

        /// 是否去除视频数据，可选值：
        /// <li>0：保留</li>
        /// <li>1：去除</li>
        /// 默认值 0。
        public let removeVideo: Int64?

        /// 是否去除音频数据，可选值：
        /// <li>0：保留</li>
        /// <li>1：去除</li>
        /// 默认值 0。
        public let removeAudio: Int64?

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String?

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String?

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case comment = "Comment"
            case rebuildVideoInfo = "RebuildVideoInfo"
            case rebuildAudioInfo = "RebuildAudioInfo"
            case targetVideoInfo = "TargetVideoInfo"
            case targetAudioInfo = "TargetAudioInfo"
            case container = "Container"
            case removeVideo = "RemoveVideo"
            case removeAudio = "RemoveAudio"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 音画质重生视频控制控制信息。
    public struct RebuildVideoInfo: TCInputModel, TCOutputModel {
        /// 画质修复控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repairInfo: RepairInfo?

        /// 智能插帧控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let videoFrameInterpolationInfo: VideoFrameInterpolationInfo?

        /// 画面超分控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let superResolutionInfo: SuperResolutionInfo?

        /// 高动态范围类型控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hdrInfo: HDRInfo?

        /// 视频降噪控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let videoDenoiseInfo: VideoDenoiseInfo?

        /// 色彩增强控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let colorInfo: ColorEnhanceInfo?

        /// 细节增强控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sharpInfo: SharpEnhanceInfo?

        /// 人脸增强控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let faceInfo: FaceEnhanceInfo?

        /// 低光照控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lowLightInfo: LowLightEnhanceInfo?

        /// 去划痕控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scratchRepairInfo: ScratchRepairInfo?

        /// 去伪影控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let artifactRepairInfo: ArtifactRepairInfo?

        public init(repairInfo: RepairInfo? = nil, videoFrameInterpolationInfo: VideoFrameInterpolationInfo? = nil, superResolutionInfo: SuperResolutionInfo? = nil, hdrInfo: HDRInfo? = nil, videoDenoiseInfo: VideoDenoiseInfo? = nil, colorInfo: ColorEnhanceInfo? = nil, sharpInfo: SharpEnhanceInfo? = nil, faceInfo: FaceEnhanceInfo? = nil, lowLightInfo: LowLightEnhanceInfo? = nil, scratchRepairInfo: ScratchRepairInfo? = nil, artifactRepairInfo: ArtifactRepairInfo? = nil) {
            self.repairInfo = repairInfo
            self.videoFrameInterpolationInfo = videoFrameInterpolationInfo
            self.superResolutionInfo = superResolutionInfo
            self.hdrInfo = hdrInfo
            self.videoDenoiseInfo = videoDenoiseInfo
            self.colorInfo = colorInfo
            self.sharpInfo = sharpInfo
            self.faceInfo = faceInfo
            self.lowLightInfo = lowLightInfo
            self.scratchRepairInfo = scratchRepairInfo
            self.artifactRepairInfo = artifactRepairInfo
        }

        enum CodingKeys: String, CodingKey {
            case repairInfo = "RepairInfo"
            case videoFrameInterpolationInfo = "VideoFrameInterpolationInfo"
            case superResolutionInfo = "SuperResolutionInfo"
            case hdrInfo = "HDRInfo"
            case videoDenoiseInfo = "VideoDenoiseInfo"
            case colorInfo = "ColorInfo"
            case sharpInfo = "SharpInfo"
            case faceInfo = "FaceInfo"
            case lowLightInfo = "LowLightInfo"
            case scratchRepairInfo = "ScratchRepairInfo"
            case artifactRepairInfo = "ArtifactRepairInfo"
        }
    }

    /// 降码率任务转自适应码流结果类型
    public struct ReduceMediaBitrateAdaptiveDynamicStreamingResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误信息。
        public let message: String

        /// 对视频转自适应码流任务的输入。
        public let input: AdaptiveDynamicStreamingTaskInput

        /// 对视频转自适应码流任务的输出。
        public let output: AdaptiveDynamicStreamingInfoItem

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case message = "Message"
            case input = "Input"
            case output = "Output"
        }
    }

    /// 降码率任务结果
    public struct ReduceMediaBitrateMediaProcessTaskResult: TCOutputModel {
        /// 任务的类型，可以取的值有：
        /// <li>Transcode：转码</li>
        /// <li>AdaptiveDynamicStreaming：自适应码流</li>
        public let type: String

        /// 降码率任务中视频转码任务的查询结果，当任务类型为 Transcode 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let transcodeTask: ReduceMediaBitrateTranscodeResult?

        /// 降码率任务中对视频转自适应码流任务的查询结果，当任务类型为 AdaptiveDynamicStreaming 时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let adaptiveDynamicStreamingTask: ReduceMediaBitrateAdaptiveDynamicStreamingResult?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case transcodeTask = "TranscodeTask"
            case adaptiveDynamicStreamingTask = "AdaptiveDynamicStreamingTask"
        }
    }

    /// 降码率任务信息
    public struct ReduceMediaBitrateTask: TCOutputModel {
        /// 视频处理任务 ID。
        public let taskId: String

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 媒体文件 ID。
        public let fileId: String

        /// 媒体文件名称。
        public let fileName: String

        /// 媒体文件地址。
        public let fileUrl: String

        /// 原始视频的元信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaData: MediaMetaData?

        /// 降码率任务执行状态与结果。
        public let mediaProcessResultSet: [ReduceMediaBitrateMediaProcessTaskResult]

        /// 任务流的优先级，取值范围为 [-10, 10]。
        public let tasksPriority: Int64

        /// 任务流状态变更通知模式。
        /// <li>Finish：只有当任务流全部执行完毕时，才发起一次事件通知；</li>
        /// <li>None：不接受该任务流回调。</li>
        public let tasksNotifyMode: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case fileId = "FileId"
            case fileName = "FileName"
            case fileUrl = "FileUrl"
            case metaData = "MetaData"
            case mediaProcessResultSet = "MediaProcessResultSet"
            case tasksPriority = "TasksPriority"
            case tasksNotifyMode = "TasksNotifyMode"
            case sessionContext = "SessionContext"
            case sessionId = "SessionId"
        }
    }

    /// 降码率任务转码结果类型
    public struct ReduceMediaBitrateTranscodeResult: TCOutputModel {
        /// 任务状态，有 PROCESSING，SUCCESS 和 FAIL 三种。
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误信息。
        public let message: String

        /// 转码任务的输入。
        public let input: TranscodeTaskInput

        /// 转码任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: MediaTranscodeItem?

        /// 转码进度，取值范围 [0-100] 。
        public let progress: Int64

        /// 转码任务开始执行的时间，采用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let beginProcessTime: String

        /// 转码任务执行完毕的时间，采用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let finishTime: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case progress = "Progress"
            case beginProcessTime = "BeginProcessTime"
            case finishTime = "FinishTime"
        }
    }

    /// Referer 防盗链配置
    public struct RefererAuthPolicy: TCInputModel, TCOutputModel {
        /// [Referer 防盗链](https://cloud.tencent.com/document/product/266/14046)设置状态，可选值：
        /// <li>Enabled: 启用；</li>
        /// <li>Disabled: 禁用。</li>
        public let status: String

        /// Referer 校验类型，可选值：
        /// <li>Black：黑名单方式校验。HTTP 请求携带了 Referers 列表中的某个 Referer 将被拒绝访问。</li>
        /// <li>White：白名单方式校验。HTTP 请求携带了 Referers 列表中的 Referer 时才允许访问。</li>
        /// 当 Status 取值为 Enabled 时，AuthType 必须赋值。
        public let authType: String?

        /// 用于校验的 Referer 列表，最大支持20个 Referer。当 Status 取值为 Enabled 时， Referers 不能为空数组。Referer 的格式参考域名的格式。
        public let referers: [String]?

        /// 是否允许空 Referer 访问本域名，可选值：
        /// <li>Yes： 是。</li>
        /// <li>No： 否。</li>
        /// 当 Status 取值为 Enabled 时，BlankRefererAllowed 必须赋值。
        public let blankRefererAllowed: String?

        public init(status: String, authType: String? = nil, referers: [String]? = nil, blankRefererAllowed: String? = nil) {
            self.status = status
            self.authType = authType
            self.referers = referers
            self.blankRefererAllowed = blankRefererAllowed
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case authType = "AuthType"
            case referers = "Referers"
            case blankRefererAllowed = "BlankRefererAllowed"
        }
    }

    /// 智能去除水印任务的输入。
    public struct RemoveWaterMarkTaskInput: TCOutputModel {
        /// 媒体文件 ID。
        public let fileId: String

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
        }
    }

    /// 智能去除水印任务的输出。
    public struct RemoveWaterMarkTaskOutput: TCOutputModel {
        /// 视频 ID。
        public let fileId: String

        /// 元信息。包括大小、时长、视频流信息、音频流信息等。
        public let metaData: MediaMetaData

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case metaData = "MetaData"
        }
    }

    /// 智能去除水印任务信息，仅当 TaskType 为 RemoveWatermark，该字段有值。
    public struct RemoveWatermarkTask: TCOutputModel {
        /// 任务 ID 。
        public let taskId: String

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败：
        /// <li>40000：输入参数不合法，请检查输入参数；</li>
        /// <li>60000：源文件错误（如视频数据损坏），请确认源文件是否正常；</li>
        /// <li>70000：内部服务错误，建议重试。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 智能去除水印任务的输入。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let input: RemoveWaterMarkTaskInput?

        /// 智能去除水印任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: RemoveWaterMarkTaskOutput?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 画质修复控制参数
    public struct RepairInfo: TCInputModel, TCOutputModel {
        /// 画质修复控制开关，可选值：
        /// <li>ON：开启画质修复；</li>
        /// <li>OFF：关闭画质修复。</li>
        public let `switch`: String

        /// 画质修复类型，仅当画质修复控制开关为 ON 时有效，可选值：
        /// <li>weak：轻画质修复；</li>
        /// <li>normal：正常画质修复；</li>
        /// <li>strong：强画质修复。</li>
        /// 默认值：weak。
        public let type: String?

        public init(switch: String, type: String? = nil) {
            self.switch = `switch`
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
        }
    }

    /// 播放器子流名字信息
    public struct ResolutionNameInfo: TCInputModel, TCOutputModel {
        /// 视频短边长度，单位：像素。
        public let minEdgeLength: UInt64

        /// 展示名字。
        public let name: String

        public init(minEdgeLength: UInt64, name: String) {
            self.minEdgeLength = minEdgeLength
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case minEdgeLength = "MinEdgeLength"
            case name = "Name"
        }
    }

    /// 标签键值。参考[标签](https://cloud.tencent.com/document/product/651)。
    public struct ResourceTag: TCInputModel {
        /// 标签键。
        public let tagKey: String

        /// 标签值。
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 取回视频任务信息
    public struct RestoreMediaTask: TCOutputModel {
        /// 文件ID。
        public let fileId: String

        /// 文件原始存储类型。
        public let originalStorageClass: String

        /// 文件目标存储类型。对于临时取回，目标存储类型与原始存储类型相同。
        public let targetStorageClass: String

        /// 取回模式，取值：
        /// <li>Expedited：极速模式</li>
        /// <li>Standard：标准模式</li>
        /// <li>Bulk：批量模式</li>
        public let restoreTier: String

        /// 临时取回副本有效期，单位：天。对于永久取回，取值为0。
        public let restoreDay: Int64

        /// 该字段已废弃。
        public let status: Int64

        /// 该字段已废弃。
        public let message: String

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case originalStorageClass = "OriginalStorageClass"
            case targetStorageClass = "TargetStorageClass"
            case restoreTier = "RestoreTier"
            case restoreDay = "RestoreDay"
            case status = "Status"
            case message = "Message"
        }
    }

    /// 音视频审核片段。
    public struct ReviewAudioVideoSegmentItem: TCOutputModel {
        /// 嫌疑片段起始的偏移时间，单位：秒。
        public let startTimeOffset: Float

        /// 嫌疑片段结束的偏移时间，单位：秒。
        public let endTimeOffset: Float

        /// 嫌疑片段涉及令人反感的信息的分数。
        public let confidence: Float

        /// 嫌疑片段鉴别涉及违规信息的结果建议，取值范围：
        /// <li>review：疑似违规，建议复审；</li>
        /// <li>block：确认违规，建议封禁。</li>
        public let suggestion: String

        /// 嫌疑片段最可能的违规的标签，取值范围：
        /// <li>Porn：色情；</li>
        /// <li>Terror：暴力；</li>
        /// <li>Polity：不适宜的信息；</li>
        /// <li>Ad：广告；</li>
        /// <li>Illegal：违法；</li>
        /// <li>Abuse：谩骂；</li>
        /// <li>Moan：娇喘。</li>
        public let label: String

        /// 违规子标签。
        public let subLabel: String

        /// 嫌疑片段违禁的形式，取值范围：
        /// <li>Image：画面上的人物或图标；</li>
        /// <li>OCR：画面上的文字；</li>
        /// <li>ASR：语音中的文字；</li>
        /// <li>Voice：声音。</li>
        public let form: String

        /// 当 Form 为 Image 或 OCR 时有效，表示嫌疑人物、图标或文字出现的区域坐标 (像素级)，[x1, y1, x2, y2]，即左上角坐标、右下角坐标。
        public let areaCoordSet: [Int64]

        /// 当 Form 为 OCR 或 ASR 时有效，表示识别出来的 OCR 或 ASR 文本内容。
        public let text: String

        /// 当 Form 为 OCR 或 ASR 时有效，表示嫌疑片段命中的违规关键词列表。
        public let keywordSet: [String]

        /// 嫌疑图片 URL （图片不会永久存储，到达
        ///  PicUrlExpireTime 时间点后图片将被删除）。
        public let url: String

        /// 嫌疑图片 URL 失效时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let picUrlExpireTime: String

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case label = "Label"
            case subLabel = "SubLabel"
            case form = "Form"
            case areaCoordSet = "AreaCoordSet"
            case text = "Text"
            case keywordSet = "KeywordSet"
            case url = "Url"
            case picUrlExpireTime = "PicUrlExpireTime"
        }
    }

    /// 音视频审核任务信息。
    public struct ReviewAudioVideoTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误信息。
        public let message: String

        /// 音视频审核任务的输入。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let input: ReviewAudioVideoTaskInput?

        /// 音视频审核任务的输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: ReviewAudioVideoTaskOutput?

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息，音视频审核完成回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case message = "Message"
            case input = "Input"
            case output = "Output"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 音视频审核任务的输入。
    public struct ReviewAudioVideoTaskInput: TCOutputModel {
        /// 媒体文件 ID。
        public let fileId: String?

        /// 音视频审核模板 ID。
        public let definition: UInt64?

        /// 审核的内容，可选值：
        /// <li>Media：原始音视频；</li>
        /// <li>Cover：封面。</li>
        public let reviewContents: [String]?

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case definition = "Definition"
            case reviewContents = "ReviewContents"
        }
    }

    /// 音视频审核任务的输出。
    public struct ReviewAudioVideoTaskOutput: TCOutputModel {
        /// 音视频内容审核的结果建议，取值范围：
        /// <li>pass：建议通过；</li>
        /// <li>review：建议复审；</li>
        /// <li>block：建议封禁。</li>
        public let suggestion: String

        /// 当 Suggestion 为 review 或 block 时有效，表示音视频最可能的违规的标签，取值范围：
        /// <li>Porn：色情；</li>
        /// <li>Terror：暴力；</li>
        /// <li>Polity：不适宜的信息；</li>
        /// <li>Ad：广告；</li>
        /// <li>Illegal：违法；</li>
        /// <li>Abuse：谩骂；</li>
        /// <li>Moan：娇喘。</li>
        public let label: String

        /// 当 Suggestion 为 review 或 block 时有效，表示音视频最可能的违禁的形式，取值范围：
        /// <li>Image：画面上的人物或图标；</li>
        /// <li>OCR：画面上的文字；</li>
        /// <li>ASR：语音中的文字；</li>
        /// <li>Voice：声音。</li>
        public let form: String

        /// 有违规信息的嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 10个 元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [ReviewAudioVideoSegmentItem]

        /// 涉及违规信息的嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String

        /// 涉及违规信息的嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String

        /// 封面审核结果。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coverReviewResult: ReviewImageResult?

        enum CodingKeys: String, CodingKey {
            case suggestion = "Suggestion"
            case label = "Label"
            case form = "Form"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
            case coverReviewResult = "CoverReviewResult"
        }
    }

    /// 图片审核结果。
    public struct ReviewImageResult: TCOutputModel {
        /// 图片审核的结果建议，取值范围：
        /// <li>pass：建议通过；</li>
        /// <li>review：建议复审；</li>
        /// <li>block：建议封禁。</li>
        public let suggestion: String?

        /// 当 Suggestion 为 review 或 block 时有效，表示最可能的违规的标签，取值范围：
        /// <li>Porn：色情；</li>
        /// <li>Terror：暴力；</li>
        /// <li>Polity：不适宜的信息；</li>
        /// <li>Ad：广告；</li>
        /// <li>Illegal：违法；</li>
        /// <li>Abuse：谩骂。</li>
        public let label: String?

        /// 当 Suggestion 为 review 或 block 时有效，表示最可能的违禁的形式，取值范围：
        /// <li>Image：画面上的人物或图标；</li>
        /// <li>OCR：画面上的文字。</li>
        public let form: String?

        /// 有违规信息的嫌疑的视频片段列表。
        /// <font color=red>注意</font> ：该列表最多仅展示前 10个 元素。如希望获得完整结果，请从 SegmentSetFileUrl 对应的文件中获取。
        public let segmentSet: [ReviewImageSegmentItem]?

        /// 涉及违规信息的嫌疑的视频片段列表文件 URL。文件的内容为 JSON，数据结构与 SegmentSet 字段一致。 （文件不会永久存储，到达SegmentSetFileUrlExpireTime 时间点后文件将被删除）。
        public let segmentSetFileUrl: String?

        /// 涉及违规信息的嫌疑的视频片段列表文件 URL 失效时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let segmentSetFileUrlExpireTime: String?

        enum CodingKeys: String, CodingKey {
            case suggestion = "Suggestion"
            case label = "Label"
            case form = "Form"
            case segmentSet = "SegmentSet"
            case segmentSetFileUrl = "SegmentSetFileUrl"
            case segmentSetFileUrlExpireTime = "SegmentSetFileUrlExpireTime"
        }
    }

    /// 图片审核片段。
    public struct ReviewImageSegmentItem: TCOutputModel {
        /// 嫌疑片段涉及令人反感的信息的分数。
        public let confidence: Float?

        /// 嫌疑片段鉴别涉及违规信息的结果建议，取值范围：
        /// <li>review：疑似违规，建议复审；</li>
        /// <li>block：确认违规，建议封禁。</li>
        public let suggestion: String?

        /// 嫌疑片段最可能的违规的标签，取值范围：
        /// <li>Porn：色情；</li>
        /// <li>Terror：暴力；</li>
        /// <li>Polity：不适宜的信息；</li>
        /// <li>Ad：广告；</li>
        /// <li>Illegal：违法；</li>
        /// <li>Abuse：谩骂。</li>
        public let label: String?

        /// 违规子标签。
        public let subLabel: String?

        /// 嫌疑片段违禁的形式，取值范围：
        /// <li>Image：画面上的人物或图标；</li>
        /// <li>OCR：画面上的文字。</li>
        public let form: String?

        /// 嫌疑人物、图标或文字出现的区域坐标 (像素级)，[x1, y1, x2, y2]，即左上角坐标、右下角坐标。
        public let areaCoordSet: [Int64]?

        /// 当 Form 为 OCR 时有效，表示识别出来的 OCR 文本内容。
        public let text: String?

        /// 当 Form 为 OCR 时有效，表示嫌疑片段命中的违规关键词列表。
        public let keywordSet: [String]?

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case label = "Label"
            case subLabel = "SubLabel"
            case form = "Form"
            case areaCoordSet = "AreaCoordSet"
            case text = "Text"
            case keywordSet = "KeywordSet"
        }
    }

    /// 审核信息。
    public struct ReviewInfo: TCOutputModel {
        /// 审核模板 ID。
        public let definition: UInt64?

        /// 审核的结果建议，取值范围：
        /// <li>pass：建议通过；</li>
        /// <li>review：建议复审；</li>
        /// <li>block：建议封禁。</li>
        public let suggestion: String?

        /// 审核类型，当 Suggestion 为 review 或 block 时有效，格式为：Form.Label。
        /// Form 表示违禁的形式，取值范围：
        /// <li>Image：画面上的人物或图标；</li>
        /// <li>OCR：画面上的文字；</li>
        /// <li>ASR：语音中的文字；</li>
        /// <li>Voice：声音。</li>
        /// Label 表示违禁的标签，取值范围：
        /// <li>Porn：色情；</li>
        /// <li>Terror：暴力；</li>
        /// <li>Polity：不适宜的信息；</li>
        /// <li>Ad：广告；</li>
        /// <li>Illegal：违法；</li>
        /// <li>Abuse：谩骂；</li>
        /// <li>Moan：娇喘。</li>
        public let typeSet: [String]?

        /// 审核时间，使用  [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let reviewTime: String?

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case suggestion = "Suggestion"
            case typeSet = "TypeSet"
            case reviewTime = "ReviewTime"
        }
    }

    /// 审核模版详情
    public struct ReviewTemplate: TCOutputModel {
        /// 审核模版唯一标签。
        public let definition: Int64

        /// 模板名称。
        public let name: String

        /// 模板描述信息。
        public let comment: String

        /// 模板类型，可选值：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 需要返回的违规标签列表。
        public let labels: [String]

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case name = "Name"
            case comment = "Comment"
            case type = "Type"
            case labels = "Labels"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 轮播任务信息
    public struct RoundPlayInfo: TCOutputModel {
        /// 轮播播单标识。
        public let roundPlayId: String

        /// 启播时间，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#52)。
        public let startTime: String

        /// 轮播列表。
        public let roundPlaylist: [RoundPlayListItemInfo]

        /// 轮播播单名称，长度限制：64 个字符。
        public let name: String

        /// 轮播播单描述信息，长度限制：256 个字符。
        public let desc: String

        enum CodingKeys: String, CodingKey {
            case roundPlayId = "RoundPlayId"
            case startTime = "StartTime"
            case roundPlaylist = "RoundPlaylist"
            case name = "Name"
            case desc = "Desc"
        }
    }

    /// 加权轮播媒体文件信息
    public struct RoundPlayListItemInfo: TCInputModel, TCOutputModel {
        /// 媒体文件标识。
        public let fileId: String

        /// 播放的音视频类型，可选值：
        /// <li>Transcode：转码输出；转码输出会有多个模版，必须指定 Definition 字段</li>
        /// <li>Original：原始音视频。</li>
        /// Type 对应的格式必须为 HLS 格式。
        public let audioVideoType: String

        /// 指定播放的转码模版，当 AudioVideoType 为 Transcode 时必须指定。
        public let definition: Int64?

        public init(fileId: String, audioVideoType: String, definition: Int64? = nil) {
            self.fileId = fileId
            self.audioVideoType = audioVideoType
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case audioVideoType = "AudioVideoType"
            case definition = "Definition"
        }
    }

    /// 华曦达（SDMC）相关的 DRM 密钥提供商信息。
    public struct SDMCDrmKeyProviderInfo: TCInputModel, TCOutputModel {
        /// 华曦达分配的用户 ID。最大长度为128个字符。
        public let uid: String

        /// 华曦达分配的用户密钥 ID。最大长度为128个字符。
        public let secretId: String

        /// 华曦达分配的用户密钥内容。最大长度为128个字符。
        public let secretKey: String

        /// 华曦达分配的 FairPlay 证书地址。该地址需使用 HTTPS 协议，最大长度为1024个字符。
        public let fairPlayCertificateUrl: String

        public init(uid: String, secretId: String, secretKey: String, fairPlayCertificateUrl: String) {
            self.uid = uid
            self.secretId = secretId
            self.secretKey = secretKey
            self.fairPlayCertificateUrl = fairPlayCertificateUrl
        }

        enum CodingKeys: String, CodingKey {
            case uid = "Uid"
            case secretId = "SecretId"
            case secretKey = "SecretKey"
            case fairPlayCertificateUrl = "FairPlayCertificateUrl"
        }
    }

    /// 对视频做采样截图任务输入参数类型
    public struct SampleSnapshotTaskInput: TCInputModel, TCOutputModel {
        /// 采样截图模板 ID。
        public let definition: UInt64

        /// 水印列表，支持多张图片或文字水印，最大可支持 10 张。
        public let watermarkSet: [WatermarkInput]?

        public init(definition: UInt64, watermarkSet: [WatermarkInput]? = nil) {
            self.definition = definition
            self.watermarkSet = watermarkSet
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case watermarkSet = "WatermarkSet"
        }
    }

    /// 采样截图模板详情
    public struct SampleSnapshotTemplate: TCOutputModel {
        /// 采样截图模板唯一标识。
        public let definition: UInt64

        /// 模板类型，取值范围：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 采样截图模板名称。
        public let name: String

        /// 模板描述信息。
        public let comment: String

        /// 截图宽度（或长边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let width: UInt64

        /// 截图高度（或短边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let height: UInt64

        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        /// 默认值：open。
        public let resolutionAdaptive: String

        /// 图片格式。
        public let format: String

        /// 采样截图类型。
        public let sampleType: String

        /// 采样间隔。
        public let sampleInterval: UInt64

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        /// 填充方式，当截图配置宽高参数与原始视频的宽高比不一致时，对截图的处理方式，即为“填充”。可选填充方式：
        /// <li> stretch：拉伸，对每一帧进行拉伸，填满整个画面，可能导致转码后的视频被“压扁“或者“拉长“；</li>
        /// <li>black：留黑，保持视频宽高比不变，边缘剩余部分使用黑色填充。</li>
        /// <li>white：留白，保持视频宽高比不变，边缘剩余部分使用白色填充。</li>
        /// <li>gauss：高斯模糊，保持视频宽高比不变，边缘剩余部分使用高斯模糊。</li>
        /// 默认值：black 。
        public let fillType: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case comment = "Comment"
            case width = "Width"
            case height = "Height"
            case resolutionAdaptive = "ResolutionAdaptive"
            case format = "Format"
            case sampleType = "SampleType"
            case sampleInterval = "SampleInterval"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case fillType = "FillType"
        }
    }

    /// 去划痕控制信息
    public struct ScratchRepairInfo: TCInputModel, TCOutputModel {
        /// 去划痕控制开关，可选值：
        /// <li>ON：开启去划痕；</li>
        /// <li>OFF：关闭去划痕。</li>
        public let `switch`: String

        /// 去划痕强度，仅当去划痕控制开关为 ON 时有效，取值范围：0.0~1.0。
        /// 默认：0.0。
        public let intensity: Float?

        /// 去划痕类型，仅当去划痕控制开关为 ON 时有效，可选值：
        /// <li>normal：正常去划痕；</li>
        /// 默认值：normal。
        public let type: String?

        public init(switch: String, intensity: Float? = nil, type: String? = nil) {
            self.switch = `switch`
            self.intensity = intensity
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case intensity = "Intensity"
            case type = "Type"
        }
    }

    /// 视频拆条任务识别控制参数
    public struct SegmentConfigureInfo: TCInputModel, TCOutputModel {
        /// 视频拆条识别任务开关，可选值：
        /// <li>ON：开启智能视频拆条识别任务；</li>
        /// <li>OFF：关闭智能视频拆条识别任务。</li>
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 视频拆条识别任务控制参数
    public struct SegmentConfigureInfoForUpdate: TCInputModel {
        /// 视频拆条识别任务开关，可选值：
        /// <li>ON：开启智能视频拆条识别任务；</li>
        /// <li>OFF：关闭智能视频拆条识别任务。</li>
        public let `switch`: String?

        public init(switch: String? = nil) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 细节增强控制
    public struct SharpEnhanceInfo: TCInputModel, TCOutputModel {
        /// 细节增强控制开关，可选值：
        /// <li>ON：开启细节增强；</li>
        /// <li>OFF：关闭细节增强。</li>
        public let `switch`: String

        /// 细节增强强度，仅当细节增强控制开关为 ON 时有效，取值范围：0.0~1.0。
        /// 默认：0.0。
        public let intensity: Float?

        public init(switch: String, intensity: Float? = nil) {
            self.switch = `switch`
            self.intensity = intensity
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case intensity = "Intensity"
        }
    }

    /// 简单加密加解密密钥对。
    public struct SimpleAesEdkPair: TCOutputModel {
        /// 加密后的数据密钥。
        public let edk: String

        /// 数据密钥。返回的数据密钥 DK 为 Base64 编码字符串。
        public let dk: String

        enum CodingKeys: String, CodingKey {
            case edk = "Edk"
            case dk = "Dk"
        }
    }

    /// 截图输出信息（2017 版）
    public struct SnapshotByTimeOffset2017: TCOutputModel {
        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 截图的具体时间点，单位：毫秒。
        public let timeOffset: UInt64

        /// 截图输出文件地址。
        public let url: String

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case timeOffset = "TimeOffset"
            case url = "Url"
        }
    }

    /// 视频指定时间点截图任务信息，该结构仅用于 2017 版[指定时间点截图](https://cloud.tencent.com/document/product/266/8102)接口发起的任务。
    public struct SnapshotByTimeOffsetTask2017: TCOutputModel {
        /// 截图任务 ID。
        public let taskId: String

        /// 截图文件 ID。
        public let fileId: String

        /// 截图规格，参见[指定时间点截图参数模板](https://cloud.tencent.com/document/product/266/33480#.E6.97.B6.E9.97.B4.E7.82.B9.E6.88.AA.E5.9B.BE.E6.A8.A1.E6.9D.BF)。
        public let definition: Int64

        /// 截图结果信息。
        public let snapshotInfoSet: [SnapshotByTimeOffset2017]

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case fileId = "FileId"
            case definition = "Definition"
            case snapshotInfoSet = "SnapshotInfoSet"
        }
    }

    /// 对视频按指定时间点截图任务输入参数类型
    public struct SnapshotByTimeOffsetTaskInput: TCInputModel, TCOutputModel {
        /// 指定时间点截图模板 ID。
        public let definition: UInt64

        /// 截图时间点列表，时间点支持 s、% 两种格式：
        /// <li>当字符串以 s 结尾，表示时间点单位为秒，如 3.5s 表示时间点为第3.5秒；</li>
        /// <li>当字符串以 % 结尾，表示时间点为视频时长的百分比大小，如10%表示时间点为视频前第10%的时间。</li>
        public let extTimeOffsetSet: [String]?

        /// 截图时间点列表，单位为<font color=red>毫秒</font>。此参数已不再建议使用，建议您使用 ExtTimeOffsetSet 参数。
        public let timeOffsetSet: [Float]?

        /// 水印列表，支持多张图片或文字水印，最大可支持 10 张。
        public let watermarkSet: [WatermarkInput]?

        public init(definition: UInt64, extTimeOffsetSet: [String]? = nil, timeOffsetSet: [Float]? = nil, watermarkSet: [WatermarkInput]? = nil) {
            self.definition = definition
            self.extTimeOffsetSet = extTimeOffsetSet
            self.timeOffsetSet = timeOffsetSet
            self.watermarkSet = watermarkSet
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case extTimeOffsetSet = "ExtTimeOffsetSet"
            case timeOffsetSet = "TimeOffsetSet"
            case watermarkSet = "WatermarkSet"
        }
    }

    /// 指定时间点截图模板详情
    public struct SnapshotByTimeOffsetTemplate: TCOutputModel {
        /// 指定时间点截图模板唯一标识。
        public let definition: UInt64

        /// 模板类型，取值范围：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 指定时间点截图模板名称。
        public let name: String

        /// 模板描述信息。
        public let comment: String

        /// 截图宽度（或长边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let width: UInt64

        /// 截图高度（或短边）的最大值，取值范围：0 和 [128, 4096]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let height: UInt64

        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        /// 默认值：open。
        public let resolutionAdaptive: String

        /// 图片格式。
        public let format: String

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        /// 填充方式，当截图配置宽高参数与原始视频的宽高比不一致时，对截图的处理方式，即为“填充”。可选填充方式：
        /// <li> stretch：拉伸，对每一帧进行拉伸，填满整个画面，可能导致转码后的视频被“压扁“或者“拉长“；</li>
        /// <li>black：留黑，保持视频宽高比不变，边缘剩余部分使用黑色填充。</li>
        /// <li>white：留白，保持视频宽高比不变，边缘剩余部分使用白色填充。</li>
        /// <li>gauss：高斯模糊，保持视频宽高比不变，边缘剩余部分使用高斯模糊。</li>
        /// 默认值：black 。
        public let fillType: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case comment = "Comment"
            case width = "Width"
            case height = "Height"
            case resolutionAdaptive = "ResolutionAdaptive"
            case format = "Format"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case fillType = "FillType"
        }
    }

    /// 排序依据
    public struct SortBy: TCInputModel, TCOutputModel {
        /// 排序字段
        public let field: String

        /// 排序方式，可选值：Asc（升序）、Desc（降序）
        public let order: String

        public init(field: String, order: String) {
            self.field = field
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case field = "Field"
            case order = "Order"
        }
    }

    /// 指定规格任务统计数据。
    public struct SpecificationDataItem: TCOutputModel {
        /// 任务规格。
        public let specification: String

        /// 统计数据。
        public let data: [TaskStatDataItem]

        enum CodingKeys: String, CodingKey {
            case specification = "Specification"
            case data = "Data"
        }
    }

    /// 视频拆条的结果文件输出。
    public struct SplitMediaOutputConfig: TCInputModel {
        /// 输出文件名，最长 64 个字符。缺省由系统指定生成文件名。
        public let mediaName: String?

        /// 输出文件格式，可选值：mp4、hls。默认是 mp4。
        public let type: String?

        /// 分类ID，用于对媒体进行分类管理，可通过 [创建分类](/document/product/266/7812) 接口，创建分类，获得分类 ID。
        /// <li>默认值：0，表示其他分类。</li>
        public let classId: Int64?

        /// 输出文件的过期时间，超过该时间文件将被删除，默认为永久不过期，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。
        public let expireTime: String?

        public init(mediaName: String? = nil, type: String? = nil, classId: Int64? = nil, expireTime: String? = nil) {
            self.mediaName = mediaName
            self.type = type
            self.classId = classId
            self.expireTime = expireTime
        }

        enum CodingKeys: String, CodingKey {
            case mediaName = "MediaName"
            case type = "Type"
            case classId = "ClassId"
            case expireTime = "ExpireTime"
        }
    }

    /// 视频拆条任务信息，仅当 TaskType 为 SplitMedia，该字段有值。
    public struct SplitMediaTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务流状态，取值：
        /// <li>PROCESSING：处理中；</li>
        /// <li>FINISH：已完成。</li>
        public let status: String

        /// 错误码，空字符串表示成功，其他值表示失败，取值请参考 [视频处理类错误码](https://cloud.tencent.com/document/product/266/50368#.E8.A7.86.E9.A2.91.E5.A4.84.E7.90.86.E7.B1.BB.E9.94.99.E8.AF.AF.E7.A0.81) 列表。
        public let errCodeExt: String

        /// 错误码，0 表示成功，其他值表示失败（该字段已不推荐使用，建议使用新的错误码字段 ErrCodeExt）。
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 视频拆条任务详细信息列表。
        public let fileInfoSet: [SplitMediaTaskSegmentInfo]

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String

        /// 视频拆条任务进度，取值范围 [0-100] 。
        public let progress: Int64

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCodeExt = "ErrCodeExt"
            case errCode = "ErrCode"
            case message = "Message"
            case fileInfoSet = "FileInfoSet"
            case sessionContext = "SessionContext"
            case sessionId = "SessionId"
            case progress = "Progress"
        }
    }

    /// 视频拆条任务配置信息。
    public struct SplitMediaTaskConfig: TCInputModel {
        /// 视频拆条起始的偏移时间，单位：秒。
        /// <li>不填或填0，表示转码后的视频从原始视频的起始位置开始；</li>
        /// <li>当数值大于0时（假设为 n），表示转码后的视频从原始视频的第 n 秒位置开始；</li>
        /// <li>当数值小于0时（假设为 -n），表示转码后的视频从原始视频结束 n 秒前的位置开始。</li>
        public let startTimeOffset: Float?

        /// 视频拆条结束的偏移时间，单位：秒。
        /// <li>不填或填0，表示转码后的视频持续到原始视频的末尾终止；</li>
        /// <li>当数值大于0时（假设为 n），表示转码后的视频持续到原始视频第 n 秒时终止；</li>
        /// <li>当数值小于0时（假设为 -n），表示转码后的视频持续到原始视频结束 n 秒前终止。</li>
        public let endTimeOffset: Float?

        /// [任务流模板](/document/product/266/11700#.E4.BB.BB.E5.8A.A1.E6.B5.81.E6.A8.A1.E6.9D.BF)名字，如果要对生成的新视频执行任务流时填写。
        public let procedureName: String?

        /// 视频拆条输出信息。
        public let outputConfig: SplitMediaOutputConfig?

        public init(startTimeOffset: Float? = nil, endTimeOffset: Float? = nil, procedureName: String? = nil, outputConfig: SplitMediaOutputConfig? = nil) {
            self.startTimeOffset = startTimeOffset
            self.endTimeOffset = endTimeOffset
            self.procedureName = procedureName
            self.outputConfig = outputConfig
        }

        enum CodingKeys: String, CodingKey {
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case procedureName = "ProcedureName"
            case outputConfig = "OutputConfig"
        }
    }

    /// 视频拆条任务输入信息
    public struct SplitMediaTaskInput: TCOutputModel {
        /// 视频的 ID。
        public let fileId: String

        /// 视频拆条起始的偏移时间，单位：秒。
        /// <li>不填或填0，表示转码后的视频从原始视频的起始位置开始；</li>
        /// <li>当数值大于0时（假设为 n），表示转码后的视频从原始视频的第 n 秒位置开始；</li>
        /// <li>当数值小于0时（假设为 -n），表示转码后的视频从原始视频结束 n 秒前的位置开始。</li>
        public let startTimeOffset: Float

        /// 视频拆条结束的偏移时间，单位：秒。
        /// <li>不填或填0，表示转码后的视频持续到原始视频的末尾终止；</li>
        /// <li>当数值大于0时（假设为 n），表示转码后的视频持续到原始视频第 n 秒时终止；</li>
        /// <li>当数值小于0时（假设为 -n），表示转码后的视频持续到原始视频结束 n 秒前终止。</li>
        public let endTimeOffset: Float

        /// [任务流模板](/document/product/266/11700#.E4.BB.BB.E5.8A.A1.E6.B5.81.E6.A8.A1.E6.9D.BF)名字，如果要对生成的新视频执行任务流时填写。
        public let procedureName: String

        /// 视频拆条输出信息。
        public let outputConfig: SplitMediaOutputConfig

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
            case procedureName = "ProcedureName"
            case outputConfig = "OutputConfig"
        }
    }

    /// 视频拆条任务信息。
    public struct SplitMediaTaskSegmentInfo: TCOutputModel {
        /// 视频拆条任务输入信息。
        public let input: SplitMediaTaskInput?

        /// 视频拆条任务输出信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: TaskOutputMediaInfo?

        /// 任务类型为 Procedure 的任务 ID。若发起[视频拆条](https://cloud.tencent.com/document/api/266/51098)任务时，视频拆条任务信息列表指定了任务流模板(ProcedureName)，当该任务流模板指定了 MediaProcessTask、AiAnalysisTask、AiRecognitionTask 中的一个或多个时发起该任务。
        public let procedureTaskId: String?

        /// 任务类型为 ReviewAudioVideo 的任务 ID。若发起[视频拆条](https://cloud.tencent.com/document/api/266/51098)任务时，视频拆条任务信息列表指定了任务流模板(ProcedureName)，当该任务流模板指定了 ReviewAudioVideoTask 时，发起该任务。
        public let reviewAudioVideoTaskId: String?

        enum CodingKeys: String, CodingKey {
            case input = "Input"
            case output = "Output"
            case procedureTaskId = "ProcedureTaskId"
            case reviewAudioVideoTaskId = "ReviewAudioVideoTaskId"
        }
    }

    /// 统计数据
    public struct StatDataItem: TCOutputModel {
        /// 数据所在时间区间的开始时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。如：当时间粒度为天，2018-12-01T00:00:00+08:00，表示2018年12月1日（含）到2018年12月2日（不含）区间。
        /// <li>表示小时级别数据时，2019-08-22T00:00:00+08:00表示2019-08-22日0点到1点的统计数据。</li>
        /// <li>表示天级别数据时，2019-08-22T00:00:00+08:00表示2019-08-22日的统计数据。</li>
        public let time: String

        /// 数据大小。
        /// <li>存储空间的数据，单位是字节。</li>
        /// <li>转码时长的数据，单位是秒。</li>
        /// <li>流量数据，单位是字节。</li>
        /// <li>带宽数据，单位是比特每秒。</li>
        /// <li>直播剪辑数据，单位是秒。</li>
        public let value: Int64

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case value = "Value"
        }
    }

    /// 贴图轨上的贴图信息。
    public struct StickerTrackItem: TCInputModel, TCOutputModel {
        /// 贴图片段的媒体素材来源，可以是：
        /// <li>点播的媒体文件 ID；</li>
        /// <li>其他媒体文件的下载 URL。</li>
        /// 注意：当使用其他媒体文件的下载 URL 作为素材来源，且开启了访问控制（如防盗链）时，需要在 URL 携带访问控制参数（如防盗链签名）。
        public let sourceMedia: String

        /// 贴图的持续时间，单位为秒。
        public let duration: Float

        /// 贴图在轨道上的起始时间，单位为秒。
        public let startTime: Float?

        /// 原点位置，取值有：
        /// <li>Center：坐标原点为中心位置，如画布中心。</li>
        /// 默认值：Center。
        public let coordinateOrigin: String?

        /// 贴图原点距离画布原点的水平位置。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示贴图 XPos 为画布宽度指定百分比的位置，如 10% 表示 XPos 为画布宽度的 10%。</li><li>当字符串以 px 结尾，表示贴图 XPos 单位为像素，如 100px 表示 XPos 为 100 像素。</li>
        /// 默认值：0px。
        public let xPos: String?

        /// 贴图原点距离画布原点的垂直位置。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示贴图 YPos 为画布高度指定百分比的位置，如 10% 表示 YPos 为画布高度的 10%。</li>
        /// <li>当字符串以 px 结尾，表示贴图 YPos 单位为像素，如 100px 表示 YPos 为 100 像素。</li>
        /// 默认值：0px。
        public let yPos: String?

        /// 贴图的宽度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示贴图 Width 为画布宽度的百分比大小，如 10% 表示 Width 为画布宽度的 10%。</li>
        /// <li>当字符串以 px 结尾，表示贴图 Width 单位为像素，如 100px 表示 Width 为 100 像素。</li>
        /// <li>当 Width、Height 均为空，则 Width 和 Height 取贴图素材本身的 Width、Height。</li>
        /// <li>当 Width 为空0，Height 非空，则 Width 按比例缩放</li>
        /// <li>当 Width 非空，Height 为空，则 Height 按比例缩放。</li>
        public let width: String?

        /// 贴图的高度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示贴图 Height 为画布高度的百分比大小，如 10% 表示 Height 为画布高度的 10%。</li>
        /// <li>当字符串以 px 结尾，表示贴图 Height 单位为像素，如 100px 表示 Hieght 为 100 像素。</li>
        /// <li>当 Width、Height 均为空，则 Width 和 Height 取贴图素材本身的 Width、Height。</li>
        /// <li>当 Width 为空，Height 非空，则 Width 按比例缩放</li>
        /// <li>当 Width 非空，Height 为空，则 Height 按比例缩放。</li>
        public let height: String?

        /// 对贴图进行的操作，如图像旋转等。
        public let imageOperations: [ImageTransform]?

        public init(sourceMedia: String, duration: Float, startTime: Float? = nil, coordinateOrigin: String? = nil, xPos: String? = nil, yPos: String? = nil, width: String? = nil, height: String? = nil, imageOperations: [ImageTransform]? = nil) {
            self.sourceMedia = sourceMedia
            self.duration = duration
            self.startTime = startTime
            self.coordinateOrigin = coordinateOrigin
            self.xPos = xPos
            self.yPos = yPos
            self.width = width
            self.height = height
            self.imageOperations = imageOperations
        }

        enum CodingKeys: String, CodingKey {
            case sourceMedia = "SourceMedia"
            case duration = "Duration"
            case startTime = "StartTime"
            case coordinateOrigin = "CoordinateOrigin"
            case xPos = "XPos"
            case yPos = "YPos"
            case width = "Width"
            case height = "Height"
            case imageOperations = "ImageOperations"
        }
    }

    /// 存储地域信息
    public struct StorageRegionInfo: TCOutputModel {
        /// 存储地域。
        public let region: String

        /// 存储地域描述信息。
        public let description: String

        /// 状态，是否开通，取值有：
        /// <li>opened：已经开通。</li>
        /// <li>unopened：未开通。</li>
        public let status: String

        /// 是否默认的存储地域，true：是；false：否。
        public let isDefault: Bool

        /// 存储区域，取值有：
        /// <li>Chinese Mainland：中国境内（不包含港澳台）。</li>
        /// <li>Outside Chinese Mainland：中国境外。</li>
        public let area: String

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case description = "Description"
            case status = "Status"
            case isDefault = "IsDefault"
            case area = "Area"
        }
    }

    /// 云点播存储用量的分区统计数据
    public struct StorageStatData: TCOutputModel {
        /// 点播存储的计费区域，可能值：
        /// <li>Chinese Mainland：中国境内（不包含港澳台）。</li>
        /// <li>Outside Chinese Mainland：中国境外。</li>
        public let area: String

        /// 当前总存储量，单位是字节。
        public let totalStorage: UInt64

        /// 当前低频存储量，单位是字节。
        public let infrequentStorage: UInt64

        /// 当前标准存储量，单位是字节。
        public let standardStorage: UInt64

        /// 当前归档存储量，单位是字节。
        public let archiveStorage: UInt64

        /// 当前深度归档存储量，单位是字节。
        public let deepArchiveStorage: UInt64

        enum CodingKeys: String, CodingKey {
            case area = "Area"
            case totalStorage = "TotalStorage"
            case infrequentStorage = "InfrequentStorage"
            case standardStorage = "StandardStorage"
            case archiveStorage = "ArchiveStorage"
            case deepArchiveStorage = "DeepArchiveStorage"
        }
    }

    /// 子应用信息。
    public struct SubAppIdInfo: TCOutputModel {
        /// 子应用 ID。
        public let subAppId: UInt64

        /// 子应用名称。
        public let subAppIdName: String

        /// 子应用简介。
        public let description: String

        /// 子应用创建时间，采用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 子应用状态，有效值：
        /// <li>On：启用；</li>
        /// <li>Off：停用。</li>
        /// <li>Destroying：销毁中。</li>
        /// <li>Destroyed：销毁完成。</li>
        public let status: String

        /// 子应用名称（该字段已不推荐使用，建议使用新的子应用名称字段 SubAppIdName）。
        public let name: String

        enum CodingKeys: String, CodingKey {
            case subAppId = "SubAppId"
            case subAppIdName = "SubAppIdName"
            case description = "Description"
            case createTime = "CreateTime"
            case status = "Status"
            case name = "Name"
        }
    }

    /// 字幕格式列表操作。
    public struct SubtitleFormatsOperation: TCInputModel {
        /// 操作类型，取值范围：
        /// <li>add：添加 Formats 指定的格式列表；</li>
        /// <li>delete：删除 Formats 指定的格式列表；<l/i>
        /// <li>reset：将已配置的格式列表重置为  Formats 指定的格式列表。</li>
        public let type: String

        /// 字幕格式列表，取值范围：
        /// <li>vtt：生成 WebVTT 字幕文件；</li>
        /// <li>srt：生成 SRT 字幕文件。</li>
        public let formats: [String]

        public init(type: String, formats: [String]) {
            self.type = type
            self.formats = formats
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case formats = "Formats"
        }
    }

    /// 画面超分控制参数
    public struct SuperResolutionInfo: TCInputModel, TCOutputModel {
        /// 画面超分控制开关，可选值：
        /// <li>ON：开启画面超分；</li>
        /// <li>OFF：关闭画面超分。</li>
        /// 当开启画面超分时，默认2倍超分。
        public let `switch`: String

        /// 画面超分类型，仅当画面超分控制开关为 ON 时有效，可选值：
        /// <li>lq：针对低清晰度有较多噪声视频的超分；</li>
        /// <li>hq：针对高清晰度视频超分。</li>
        /// 默认值：lq。
        public let type: String?

        /// 超分倍数，可选值：2。
        /// 默认值：2。
        public let size: Int64?

        public init(switch: String, type: String? = nil, size: Int64? = nil) {
            self.switch = `switch`
            self.type = type
            self.size = size
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
            case size = "Size"
        }
    }

    /// SVG水印模板输入参数
    public struct SvgWatermarkInput: TCInputModel, TCOutputModel {
        /// 水印的宽度，支持 px，%，W%，H%，S%，L% 六种格式：
        /// <li>当字符串以 px 结尾，表示水印 Width 单位为像素，如 100px 表示 Width 为 100 像素；当填 0px 且
        ///  Height 不为 0px 时，表示水印的宽度按原始 SVG 图像等比缩放；当 Width、Height 都填 0px 时，表示水印的宽度取原始 SVG 图像的宽度；</li>
        /// <li>当字符串以 W% 结尾，表示水印 Width 为视频宽度的百分比大小，如 10W% 表示 Width 为视频宽度的 10%；</li>
        /// <li>当字符串以 H% 结尾，表示水印 Width 为视频高度的百分比大小，如 10H% 表示 Width 为视频高度的 10%；</li>
        /// <li>当字符串以 S% 结尾，表示水印 Width 为视频短边的百分比大小，如 10S% 表示 Width 为视频短边的 10%；</li>
        /// <li>当字符串以 L% 结尾，表示水印 Width 为视频长边的百分比大小，如 10L% 表示 Width 为视频长边的 10%；</li>
        /// <li>当字符串以 % 结尾时，含义同 W%。</li>
        /// 默认值为 10W%。
        public let width: String?

        /// 水印的高度，支持 px，W%，H%，S%，L% 六种格式：
        /// <li>当字符串以 px 结尾，表示水印 Height 单位为像素，如 100px 表示 Height 为 100 像素；当填 0px 且
        ///  Width 不为 0px 时，表示水印的高度按原始 SVG 图像等比缩放；当 Width、Height 都填 0px 时，表示水印的高度取原始 SVG 图像的高度；</li>
        /// <li>当字符串以 W% 结尾，表示水印 Height 为视频宽度的百分比大小，如 10W% 表示 Height 为视频宽度的 10%；</li>
        /// <li>当字符串以 H% 结尾，表示水印 Height 为视频高度的百分比大小，如 10H% 表示 Height 为视频高度的 10%；</li>
        /// <li>当字符串以 S% 结尾，表示水印 Height 为视频短边的百分比大小，如 10S% 表示 Height 为视频短边的 10%；</li>
        /// <li>当字符串以 L% 结尾，表示水印 Height 为视频长边的百分比大小，如 10L% 表示 Height 为视频长边的 10%；</li>
        /// <li>当字符串以 % 结尾时，含义同 H%。</li>
        /// 默认值为 0px。
        public let height: String?

        public init(width: String? = nil, height: String? = nil) {
            self.width = width
            self.height = height
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
        }
    }

    /// SVG水印模板输入参数
    public struct SvgWatermarkInputForUpdate: TCInputModel {
        /// 水印的宽度，支持 px，%，W%，H%，S%，L% 六种格式：
        /// <li>当字符串以 px 结尾，表示水印 Width 单位为像素，如 100px 表示 Width 为 100 像素；当填 0px 且
        ///  Height 不为 0px 时，表示水印的宽度按原始 SVG 图像等比缩放；当 Width、Height 都填 0px 时，表示水印的宽度取原始 SVG 图像的宽度；</li>
        /// <li>当字符串以 W% 结尾，表示水印 Width 为视频宽度的百分比大小，如 10W% 表示 Width 为视频宽度的 10%；</li>
        /// <li>当字符串以 H% 结尾，表示水印 Width 为视频高度的百分比大小，如 10H% 表示 Width 为视频高度的 10%；</li>
        /// <li>当字符串以 S% 结尾，表示水印 Width 为视频短边的百分比大小，如 10S% 表示 Width 为视频短边的 10%；</li>
        /// <li>当字符串以 L% 结尾，表示水印 Width 为视频长边的百分比大小，如 10L% 表示 Width 为视频长边的 10%；</li>
        /// <li>当字符串以 % 结尾时，含义同 W%。</li>
        /// 默认值为 10W%。
        public let width: String?

        /// 水印的高度，支持 px，%，W%，H%，S%，L% 六种格式：
        /// <li>当字符串以 px 结尾，表示水印 Height 单位为像素，如 100px 表示 Height 为 100 像素；当填 0px 且
        ///  Width 不为 0px 时，表示水印的高度按原始 SVG 图像等比缩放；当 Width、Height 都填 0px 时，表示水印的高度取原始 SVG 图像的高度；</li>
        /// <li>当字符串以 W% 结尾，表示水印 Height 为视频宽度的百分比大小，如 10W% 表示 Height 为视频宽度的 10%；</li>
        /// <li>当字符串以 H% 结尾，表示水印 Height 为视频高度的百分比大小，如 10H% 表示 Height 为视频高度的 10%；</li>
        /// <li>当字符串以 S% 结尾，表示水印 Height 为视频短边的百分比大小，如 10S% 表示 Height 为视频短边的 10%；</li>
        /// <li>当字符串以 L% 结尾，表示水印 Height 为视频长边的百分比大小，如 10L% 表示 Height 为视频长边的 10%；</li>
        /// <li>当字符串以 % 结尾时，含义同 H%。
        /// 默认值为 0px。
        public let height: String?

        /// 水印周期配置，用于配置水印周期性地显示与隐藏。
        /// 主要使用场景是：为了视频防遮标，在视频多个地方设置水印，这些水印按固定顺序周期性地显示与隐藏。
        /// 例如，设置 A、B、C、D 4 个水印分别位于视频的左上角、右上角、右下角、左下角处，视频开始时，{ A 显示 5 秒 -> B 显示 5 秒 -> C 显示 5 秒 -> D 显示 5 秒 } -> A 显示 5 秒 -> B 显示 5 秒 -> ...，任何时刻只显示一处水印。
        /// 花括号 {} 表示由 A、B、C、D 4 个水印组成的大周期，可以看出每个大周期持续 20 秒。
        /// 可以看出，A、B、C、D 都是周期性地显示 5 秒、隐藏 15 秒，且四者有固定的显示顺序。
        /// 此配置项即用来描述单个水印的周期配置。
        public let cycleConfig: WatermarkCycleConfigForUpdate?

        public init(width: String? = nil, height: String? = nil, cycleConfig: WatermarkCycleConfigForUpdate? = nil) {
            self.width = width
            self.height = height
            self.cycleConfig = cycleConfig
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
            case cycleConfig = "CycleConfig"
        }
    }

    /// 极速高清参数配置。
    public struct TEHDConfig: TCInputModel, TCOutputModel {
        /// 极速高清类型，可选值：<li>TEHD-100 表示极速高清-100;</li> <li>OFF 表示关闭极速高清。</li>不填表示 OFF。
        public let type: String

        /// 视频码率上限，当 Type 指定了极速高清类型时有效。
        /// 不填或填0表示不设视频码率上限。
        public let maxVideoBitrate: UInt64?

        public init(type: String, maxVideoBitrate: UInt64? = nil) {
            self.type = type
            self.maxVideoBitrate = maxVideoBitrate
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case maxVideoBitrate = "MaxVideoBitrate"
        }
    }

    /// 极速高清参数配置。
    public struct TEHDConfigForUpdate: TCInputModel {
        /// 极速高清类型，可选值：<li>TEHD-100 表示极速高清-100;</li> <li>OFF 表示关闭极速高清。</li>不填表示不修改。
        public let type: String?

        /// 视频码率上限，不填代表不修改。
        public let maxVideoBitrate: UInt64?

        public init(type: String? = nil, maxVideoBitrate: UInt64? = nil) {
            self.type = type
            self.maxVideoBitrate = maxVideoBitrate
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case maxVideoBitrate = "MaxVideoBitrate"
        }
    }

    /// 智能标签任务控制参数
    public struct TagConfigureInfo: TCInputModel, TCOutputModel {
        /// 智能标签任务开关，可选值：
        /// <li>ON：开启智能标签任务；</li>
        /// <li>OFF：关闭智能标签任务。</li>
        public let `switch`: String

        public init(switch: String) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 智能标签任务控制参数
    public struct TagConfigureInfoForUpdate: TCInputModel {
        /// 智能标签任务开关，可选值：
        /// <li>ON：开启智能标签任务；</li>
        /// <li>OFF：关闭智能标签任务。</li>
        public let `switch`: String?

        public init(switch: String? = nil) {
            self.switch = `switch`
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
        }
    }

    /// 视频处理任务的输出媒体文件信息
    public struct TaskOutputMediaInfo: TCOutputModel {
        /// 媒体文件 ID。
        public let fileId: String

        /// 转拉完成后生成的媒体文件基础信息。
        public let mediaBasicInfo: MediaBasicInfo

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case mediaBasicInfo = "MediaBasicInfo"
        }
    }

    /// 任务概要信息
    public struct TaskSimpleInfo: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务状态。取值：WAITING（等待中）、PROCESSING（处理中）、FINISH（已完成）。
        public let status: String

        /// 视频 ID。
        public let fileId: String

        /// 任务类型，取值：
        /// <li>Procedure：视频处理任务；</li>
        /// <li>EditMedia：视频编辑任务；</li>
        /// <li>ReduceMediaBitrate：降码率任务；</li>
        /// <li>WechatDistribute：微信发布任务；</li>
        /// <li>ReviewAudioVideo：音视频审核任务。</li>
        /// 兼容 2017 版的任务类型：
        /// <li>Transcode：视频转码任务；</li>
        /// <li>SnapshotByTimeOffset：视频截图任务；</li>
        /// <li>Concat：视频拼接任务；</li>
        /// <li>Clip：视频剪辑任务；</li>
        /// <li>ImageSprites：截取雪碧图任务。</li>
        public let taskType: String

        /// 任务创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 任务开始执行时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。若任务尚未开始，该字段为空。
        public let beginProcessTime: String

        /// 任务结束时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。若任务尚未完成，该字段为空。
        public let finishTime: String

        /// 用于去重的识别码，如果七天内曾有过相同的识别码的请求。
        public let sessionId: String

        /// 来源上下文，用于透传用户请求信息。
        public let sessionContext: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case fileId = "FileId"
            case taskType = "TaskType"
            case createTime = "CreateTime"
            case beginProcessTime = "BeginProcessTime"
            case finishTime = "FinishTime"
            case sessionId = "SessionId"
            case sessionContext = "SessionContext"
        }
    }

    /// 视频处理任务统计数据。
    public struct TaskStatData: TCOutputModel {
        /// 任务类型。
        /// <li> Transcoding: 普通转码</li>
        /// <li> Transcoding-TESHD: 极速高清转码</li>
        /// <li> Editing: 视频编辑</li>
        /// <li> Editing-TESHD: 极速高清视频编辑</li>
        /// <li> AdaptiveBitrateStreaming: 自适应码流</li>
        /// <li> ContentAudit: 内容审核</li>
        /// <li> ContentRecognition: 内容识别</li>
        /// <li> RemoveWatermark: 去水印</li>
        /// <li> ExtractTraceWatermark: 提取水印</li>
        /// <li> AddTraceWatermark: 添加水印</li>
        /// <li> RebuildMedia: 音画质重生</li>
        /// <li>Transcode: 转码，包含普通转码、极速高清和视频编辑（不推荐使用）</li>
        public let taskType: String

        /// 任务数统计数据概览，用量单位为秒。
        public let summary: [TaskStatDataItem]

        /// 不同规格任务统计数据详情。
        /// 转码规格：
        /// <li>Remuxing: 转封装</li>
        /// <li>Audio: 音频转码</li>
        /// <li>Standard.H264.SD: H.264编码方式标清转码</li>
        /// <li>Standard.H264.HD: H.264编码方式高清转码</li>
        /// <li>Standard.H264.FHD: H.264编码方式全高清转码</li>
        /// <li>Standard.H264.2K: H.264编码方式2K转码</li>
        /// <li>Standard.H264.4K: H.264编码方式4K转码</li>
        /// <li>Standard.H265.SD: H.265编码方式标清转码</li>
        /// <li>Standard.H265.HD: H.265编码方式高清转码</li>
        /// <li>Standard.H265.FHD: H.265编码方式全高清转码</li>
        /// <li>Standard.H265.2K: H.265编码方式2K转码</li>
        /// <li>Standard.H265.4K: H.265编码方式4K转码</li>
        /// <li>TESHD-10.H264.SD: H.264编码方式标清极速高清转码</li>
        /// <li>TESHD-10.H264.HD: H.264编码方式高清极速高清转码</li>
        /// <li>TESHD-10.H264.FHD: H.264编码方式全高清极速高清转码</li>
        /// <li>TESHD-10.H264.2K: H.264编码方式2K极速高清转码</li>
        /// <li>TESHD-10.H264.4K: H.264编码方式4K极速高清转码</li>
        /// <li>TESHD-10.H265.SD: H.265编码方式标清极速高清转码</li>
        /// <li>TESHD-10.H265.HD: H.265编码方式高清极速高清转码</li>
        /// <li>TESHD-10.H265.FHD: H.265编码方式全高清极速高清转码</li>
        /// <li>TESHD-10.H265.2K: H.265编码方式2K极速高清转码</li>
        /// <li>TESHD-10.H265.4K: H.265编码方式4K极速高清转码</li>
        /// <li>Edit.Audio: 音频编辑</li>
        /// <li>Edit.H264.SD: H.264编码方式标清视频编辑</li>
        /// <li>Edit.H264.HD: H.264编码方式高清视频编辑</li>
        /// <li>Edit.H264.FHD: H.264编码方式全高清视频编辑</li>
        /// <li>Edit.H264.2K: H.264编码方式2K视频编辑</li>
        /// <li>Edit.H264.4K: H.264编码方式4K视频编辑</li>
        /// <li>Edit.H265.SD: H.265编码方式标清视频编辑</li>
        /// <li>Edit.H265.HD: H.265编码方式高清视频编辑</li>
        /// <li>Edit.H265.FHD: H.265编码方式全高清视频编辑</li>
        /// <li>Edit.H265.2K: H.265编码方式2K视频编辑</li>
        /// <li>Edit.H265.4K: H.265编码方式4K视频编辑</li>
        /// <li>Edit.TESHD-10.H264.SD: H.264编码方式标清极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H264.HD: H.264编码方式高清极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H264.FHD: H.264编码方式全高清极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H264.2K: H.264编码方式2K极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H264.4K: H.264编码方式4K极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H265.SD: H.265编码方式标清极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H265.HD: H.265编码方式高清极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H265.FHD: H.265编码方式全高清极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H265.2K: H.265编码方式2K极速高清视频编辑</li>
        /// <li>Edit.TESHD-10.H265.4K: H.265编码方式4K极速高清视频编辑</li>
        /// 去水印、音画质重生规格：
        /// <li>480P: 短边 ≤ 480px</li>
        /// <li>720P: 短边 ≤ 720px</li>
        /// <li>1080P: 短边 ≤ 1080px</li>
        /// <li>2K: 短边 ≤ 1440px</li>
        /// <li>4K: 短边 ≤ 2160px</li>
        /// <li>8K: 短边 ≤ 4320px</li>
        /// <li>Audio: 音频</li>
        public let details: [SpecificationDataItem]

        enum CodingKeys: String, CodingKey {
            case taskType = "TaskType"
            case summary = "Summary"
            case details = "Details"
        }
    }

    /// 任务统计数据，包括任务数和用量。
    public struct TaskStatDataItem: TCOutputModel {
        /// 数据所在时间区间的开始时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#52)。如：当时间粒度为天，2018-12-01T00:00:00+08:00，表示2018年12月1日（含）到2018年12月2日（不含）区间。
        public let time: String

        /// 任务数。
        public let count: Int64

        /// 任务用量。
        public let usage: Int64

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case count = "Count"
            case usage = "Usage"
        }
    }

    /// 临时凭证
    public struct TempCertificate: TCOutputModel {
        /// 临时安全证书 Id。
        public let secretId: String

        /// 临时安全证书 Key。
        public let secretKey: String

        /// Token 值。
        public let token: String

        /// 证书无效的时间，返回 Unix 时间戳，精确到秒。
        public let expiredTime: UInt64

        enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
            case secretKey = "SecretKey"
            case token = "Token"
            case expiredTime = "ExpiredTime"
        }
    }

    /// 鉴别涉及令人不安全的信息的任务控制参数
    public struct TerrorismConfigureInfo: TCOutputModel {
        /// 画面鉴别涉及令人不安全的信息的任务控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imgReviewInfo: TerrorismImgReviewTemplateInfo?

        /// 文字鉴别涉及令人不安全的信息的任务控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrReviewInfo: TerrorismOcrReviewTemplateInfo?

        enum CodingKeys: String, CodingKey {
            case imgReviewInfo = "ImgReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 鉴别涉及令人不安全的信息的任务控制参数。
    public struct TerrorismConfigureInfoForUpdate: TCInputModel {
        /// 画面鉴别涉及令人不安全的信息的任务控制参数。
        public let imgReviewInfo: TerrorismImgReviewTemplateInfoForUpdate?

        /// 文本鉴别涉及令人不安全的信息的任务控制参数。
        public let ocrReviewInfo: TerrorismOcrReviewTemplateInfoForUpdate?

        public init(imgReviewInfo: TerrorismImgReviewTemplateInfoForUpdate? = nil, ocrReviewInfo: TerrorismOcrReviewTemplateInfoForUpdate? = nil) {
            self.imgReviewInfo = imgReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case imgReviewInfo = "ImgReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 图片画面审核涉及令人不安全的信息的任务结果类型
    public struct TerrorismImageResult: TCOutputModel {
        /// 鉴别涉及令人不安全的信息的评分，分值为0到100。
        public let confidence: Float

        /// 鉴别涉及令人不安全的信息的结果建议，取值范围：
        /// <li>pass；</li>
        /// <li>review；</li>
        /// <li>block。</li>
        public let suggestion: String

        /// 鉴别涉及令人不安全的信息的结果标签，取值范围：
        /// <li>guns：武器枪支；</li>
        /// <li>crowd：人群聚集；</li>
        /// <li>police：警察部队；</li>
        /// <li>bloody：血腥画面；</li>
        /// <li>banners：暴恐旗帜；</li>
        /// <li>explosion：爆炸火灾；</li>
        /// <li>scenario：暴恐画面。</li>
        public let label: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case suggestion = "Suggestion"
            case label = "Label"
        }
    }

    /// 画面鉴别涉及令人不安全的信息的任务控制参数
    public struct TerrorismImgReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 画面鉴别涉及令人不安全的信息的任务开关，可选值：
        /// <li>ON：开启画面鉴别涉及令人不安全的信息的任务；</li>
        /// <li>OFF：关闭画面鉴别涉及令人不安全的信息的任务。</li>
        public let `switch`: String

        /// 画面鉴别涉及令人不安全的信息的过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回，可选值为：
        /// <li>guns：武器枪支；</li>
        /// <li>crowd：人群聚集；</li>
        /// <li>bloody：血腥画面；</li>
        /// <li>police：警察部队；</li>
        /// <li>banners：暴恐旗帜；</li>
        /// <li>militant：武装分子；</li>
        /// <li>explosion：爆炸火灾；</li>
        /// <li>terrorists：暴恐人物；</li>
        /// <li>scenario：暴恐画面。</li>
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 90 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 80 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 画面鉴别涉及令人不安全的信息的任务控制参数。
    public struct TerrorismImgReviewTemplateInfoForUpdate: TCInputModel {
        /// 画面鉴别涉及令人不安全的信息的任务开关，可选值：
        /// <li>ON：开启画面鉴别涉及令人不安全的信息的任务；</li>
        /// <li>OFF：关闭画面鉴别涉及令人不安全的信息的任务。</li>
        public let `switch`: String?

        /// 画面鉴别涉及令人不安全的信息的过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回，可选值为：
        /// <li>guns：武器枪支；</li>
        /// <li>crowd：人群聚集；</li>
        /// <li>bloody：血腥画面；</li>
        /// <li>police：警察部队；</li>
        /// <li>banners：暴恐旗帜；</li>
        /// <li>militant：武装分子；</li>
        /// <li>explosion：爆炸火灾；</li>
        /// <li>terrorists：暴恐人物；</li>
        /// <li>scenario：暴恐画面。</li>
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文本鉴别涉及令人不安全的信息的任务控制参数
    public struct TerrorismOcrReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 文本鉴别涉及令人不安全的信息的任务开关，可选值：
        /// <li>ON：开启文本鉴别涉及令人不安全的信息的任务；</li>
        /// <li>OFF：关闭文本鉴别涉及令人不安全的信息的任务。</li>
        public let `switch`: String

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文本鉴别涉及令人不安全的信息的任务控制参数
    public struct TerrorismOcrReviewTemplateInfoForUpdate: TCInputModel {
        /// 文本鉴别涉及令人不安全的信息的任务开关，可选值：
        /// <li>ON：开启文本鉴别涉及令人不安全的信息的任务；</li>
        /// <li>OFF：关闭文本鉴别涉及令人不安全的信息的任务。</li>
        public let `switch`: String?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 文字水印模板
    public struct TextWatermarkTemplateInput: TCInputModel, TCOutputModel {
        /// 字体类型，目前可以支持两种：
        /// <li>simkai.ttf：可以支持中文和英文；</li>
        /// <li>arial.ttf：仅支持英文。</li>
        public let fontType: String

        /// 字体大小，格式：Npx，N 为数值。
        public let fontSize: String

        /// 字体颜色，格式：0xRRGGBB，默认值：0xFFFFFF（白色）。
        public let fontColor: String

        /// 文字透明度，取值范围：(0, 1]
        /// <li>0：完全透明</li>
        /// <li>1：完全不透明</li>
        /// 默认值：1。
        public let fontAlpha: Float

        public init(fontType: String, fontSize: String, fontColor: String, fontAlpha: Float) {
            self.fontType = fontType
            self.fontSize = fontSize
            self.fontColor = fontColor
            self.fontAlpha = fontAlpha
        }

        enum CodingKeys: String, CodingKey {
            case fontType = "FontType"
            case fontSize = "FontSize"
            case fontColor = "FontColor"
            case fontAlpha = "FontAlpha"
        }
    }

    /// 文字水印模板
    public struct TextWatermarkTemplateInputForUpdate: TCInputModel {
        /// 字体类型，目前可以支持两种：
        /// <li>simkai.ttf：可以支持中文和英文；</li>
        /// <li>arial.ttf：仅支持英文。</li>
        public let fontType: String?

        /// 字体大小，格式：Npx，N 为数值。
        public let fontSize: String?

        /// 字体颜色，格式：0xRRGGBB，默认值：0xFFFFFF（白色）。
        public let fontColor: String?

        /// 文字透明度，取值范围：(0, 1]
        /// <li>0：完全透明</li>
        /// <li>1：完全不透明</li>
        public let fontAlpha: Float?

        public init(fontType: String? = nil, fontSize: String? = nil, fontColor: String? = nil, fontAlpha: Float? = nil) {
            self.fontType = fontType
            self.fontSize = fontSize
            self.fontColor = fontColor
            self.fontAlpha = fontAlpha
        }

        enum CodingKeys: String, CodingKey {
            case fontType = "FontType"
            case fontSize = "FontSize"
            case fontColor = "FontColor"
            case fontAlpha = "FontAlpha"
        }
    }

    /// 用于描述一个时间段的通用数据类型。
    public struct TimeRange: TCInputModel {
        /// <li>大于等于此时间（起始时间）。</li>
        /// <li>格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。</li>
        public let after: String?

        /// <li>小于此时间（结束时间）。</li>
        /// <li>格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#I)。</li>
        public let before: String?

        public init(after: String? = nil, before: String? = nil) {
            self.after = after
            self.before = before
        }

        enum CodingKeys: String, CodingKey {
            case after = "After"
            case before = "Before"
        }
    }

    /// 溯源水印参数
    public struct TraceWatermarkInput: TCInputModel, TCOutputModel {
        /// 溯源水印任务开关，此字段必填，可选值：
        /// <li>ON：开启溯源水印；</li>
        /// <li>OFF：关闭溯源水印。</li>
        public let `switch`: String?

        /// 该字段已废弃，请勿使用。
        public let definition: UInt64?

        public init(switch: String? = nil, definition: UInt64? = nil) {
            self.switch = `switch`
            self.definition = definition
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case definition = "Definition"
        }
    }

    /// 视频转码播放信息（2017 版）
    public struct TranscodePlayInfo2017: TCOutputModel {
        /// 播放地址。
        public let url: String

        /// 转码规格 ID，参见[转码参数模板](https://cloud.tencent.com/document/product/266/33476)。
        public let definition: Int64

        /// 视频流码率平均值与音频流码率平均值之和， 单位：bps。
        public let bitrate: Int64

        /// 视频流高度的最大值，单位：px。
        public let height: Int64

        /// 视频流宽度的最大值，单位：px。
        public let width: Int64

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case definition = "Definition"
            case bitrate = "Bitrate"
            case height = "Height"
            case width = "Width"
        }
    }

    /// 视频转码任务信息，该结构仅用于对 2017 版[视频转码](https://cloud.tencent.com/document/product/266/7822)接口发起的任务。
    public struct TranscodeTask2017: TCOutputModel {
        /// 转码任务 ID。
        public let taskId: String

        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 被转码文件 ID。
        public let fileId: String

        /// 被转码文件名称。
        public let fileName: String

        /// 视频时长，单位：秒。
        public let duration: UInt64

        /// 封面地址。
        public let coverUrl: String

        /// 视频转码后生成的播放信息。
        public let playInfoSet: [TranscodePlayInfo2017]

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case fileName = "FileName"
            case duration = "Duration"
            case coverUrl = "CoverUrl"
            case playInfoSet = "PlayInfoSet"
        }
    }

    /// 转码任务输入参数类型
    public struct TranscodeTaskInput: TCInputModel, TCOutputModel {
        /// 视频转码模板 ID。
        public let definition: UInt64

        /// 水印列表，支持多张图片或文字水印，最大可支持 10 张。
        public let watermarkSet: [WatermarkInput]?

        /// 溯源水印。
        public let traceWatermark: TraceWatermarkInput?

        /// 马赛克列表，最大可支持 10 张。
        public let mosaicSet: [MosaicInput]?

        /// 片头片尾列表，支持多片头片尾，最大可支持 10 个。
        public let headTailSet: [HeadTailTaskInput]?

        /// 转码后的视频的起始时间偏移，单位：秒。
        /// <li>不填或填0，表示转码后的视频从原始视频的起始位置开始；</li>
        /// <li>当数值大于0时（假设为 n），表示转码后的视频从原始视频的第 n 秒位置开始；</li>
        /// <li>当数值小于0时（假设为 -n），表示转码后的视频从原始视频结束 n 秒前的位置开始。</li>
        public let startTimeOffset: Float?

        /// 转码后视频的终止时间偏移，单位：秒。
        /// <li>不填或填0，表示转码后的视频持续到原始视频的末尾终止；</li>
        /// <li>当数值大于0时（假设为 n），表示转码后的视频持续到原始视频第 n 秒时终止；</li>
        /// <li>当数值小于0时（假设为 -n），表示转码后的视频持续到原始视频结束 n 秒前终止。</li>
        public let endTimeOffset: Float?

        public init(definition: UInt64, watermarkSet: [WatermarkInput]? = nil, traceWatermark: TraceWatermarkInput? = nil, mosaicSet: [MosaicInput]? = nil, headTailSet: [HeadTailTaskInput]? = nil, startTimeOffset: Float? = nil, endTimeOffset: Float? = nil) {
            self.definition = definition
            self.watermarkSet = watermarkSet
            self.traceWatermark = traceWatermark
            self.mosaicSet = mosaicSet
            self.headTailSet = headTailSet
            self.startTimeOffset = startTimeOffset
            self.endTimeOffset = endTimeOffset
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case watermarkSet = "WatermarkSet"
            case traceWatermark = "TraceWatermark"
            case mosaicSet = "MosaicSet"
            case headTailSet = "HeadTailSet"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
        }
    }

    /// 转码模板详情
    public struct TranscodeTemplate: TCOutputModel {
        /// 转码模板唯一标识。
        public let definition: String

        /// 封装格式，取值：mp4、flv、hls、mp3、flac、ogg。
        public let container: String

        /// 转码模板名称。
        public let name: String

        /// 模板描述信息。
        public let comment: String

        /// 模板类型，取值：
        /// <li>Preset：系统预置模板；</li>
        /// <li>Custom：用户自定义模板。</li>
        public let type: String

        /// 是否去除视频数据，取值：
        /// <li>0：保留；</li>
        /// <li>1：去除。</li>
        public let removeVideo: Int64

        /// 是否去除音频数据，取值：
        /// <li>0：保留；</li>
        /// <li>1：去除。</li>
        public let removeAudio: Int64

        /// 视频流配置参数，仅当 RemoveVideo 为 0，该字段有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let videoTemplate: VideoTemplateInfo?

        /// 音频流配置参数，仅当 RemoveAudio 为 0，该字段有效 。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let audioTemplate: AudioTemplateInfo?

        /// 极速高清转码参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tehdConfig: TEHDConfig?

        /// 封装格式过滤条件，可选值：
        /// <li>Video：视频格式，可以同时包含视频流和音频流的封装格式；</li>
        /// <li>PureAudio：纯音频格式，只能包含音频流的封装格式板。</li>
        public let containerType: String

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        /// 切片类型，仅当 Container 为 hls 时有效。
        public let segmentType: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case container = "Container"
            case name = "Name"
            case comment = "Comment"
            case type = "Type"
            case removeVideo = "RemoveVideo"
            case removeAudio = "RemoveAudio"
            case videoTemplate = "VideoTemplate"
            case audioTemplate = "AudioTemplate"
            case tehdConfig = "TEHDConfig"
            case containerType = "ContainerType"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case segmentType = "SegmentType"
        }
    }

    /// 转场操作
    public struct TransitionOpertion: TCInputModel, TCOutputModel {
        /// 转场类型，取值有：
        /// <ul>
        /// <li>图像的转场操作，用于两个视频片段图像间的转场处理：
        /// <ul>
        /// <li>ImageFadeInFadeOut：图像淡入淡出。 </li>
        /// <li>BowTieHorizontal：水平蝴蝶结。 </li>
        /// <li>BowTieVertical：垂直蝴蝶结。 </li>
        /// <li>ButterflyWaveScrawler：晃动。 </li>
        /// <li>Cannabisleaf：枫叶。 </li>
        /// <li>Circle：弧形收放。 </li>
        /// <li>CircleCrop：圆环聚拢。 </li>
        /// <li>Circleopen：椭圆聚拢。 </li>
        /// <li>Crosswarp：横向翘曲。 </li>
        /// <li>Cube：立方体。 </li>
        /// <li>DoomScreenTransition：幕布。 </li>
        /// <li>Doorway：门廊。 </li>
        /// <li>Dreamy：波浪。 </li>
        /// <li>DreamyZoom：水平聚拢。 </li>
        /// <li>FilmBurn：火烧云。 </li>
        /// <li>GlitchMemories：抖动。 </li>
        /// <li>Heart：心形。 </li>
        /// <li>InvertedPageCurl：翻页。 </li>
        /// <li>Luma：腐蚀。 </li>
        /// <li>Mosaic：九宫格。 </li>
        /// <li>Pinwheel：风车。 </li>
        /// <li>PolarFunction：椭圆扩散。 </li>
        /// <li>PolkaDotsCurtain：弧形扩散。 </li>
        /// <li>Radial：雷达扫描 </li>
        /// <li>RotateScaleFade：上下收放。 </li>
        /// <li>Squeeze：上下聚拢。 </li>
        /// <li>Swap：放大切换。 </li>
        /// <li>Swirl：螺旋。 </li>
        /// <li>UndulatingBurnOutSwirl：水流蔓延。 </li>
        /// <li>Windowblinds：百叶窗。 </li>
        /// <li>WipeDown：向下收起。 </li>
        /// <li>WipeLeft：向左收起。 </li>
        /// <li>WipeRight：向右收起。 </li>
        /// <li>WipeUp：向上收起。 </li>
        /// <li>ZoomInCircles：水波纹。 </li>
        /// </ul>
        /// </li>
        /// <li>音频的转场操作，用于两个音频片段间的转场处理：
        /// <ul>
        /// <li>AudioFadeInFadeOut：声音淡入淡出。 </li>
        /// </ul>
        /// </li>
        /// </ul>
        public let type: String

        public init(type: String) {
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    /// TRTC伴生录制信息。
    public struct TrtcRecordInfo: TCOutputModel {
        /// TRTC 应用 ID。
        public let sdkAppId: UInt64

        /// TRTC 房间 ID。
        public let roomId: String

        /// 录制任务 ID。
        public let taskId: String

        /// 参与录制的用户 ID 列表。
        public let userIds: [String]

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case roomId = "RoomId"
            case taskId = "TaskId"
            case userIds = "UserIds"
        }
    }

    /// 基于签名的 Key 防盗链信息
    public struct UrlSignatureAuthPolicy: TCInputModel, TCOutputModel {
        /// [Key 防盗链](https://cloud.tencent.com/document/product/266/14047)设置状态，可选值：
        /// <li>Enabled: 启用。</li>
        /// <li>Disabled: 禁用。</li>
        public let status: String

        /// [Key 防盗链](https://cloud.tencent.com/document/product/266/14047)中用于生成签名的密钥。
        /// EncryptedKey 字符串的长度为8~40个字节，不能包含不可见字符。
        public let encryptedKey: String?

        public init(status: String, encryptedKey: String? = nil) {
            self.status = status
            self.encryptedKey = encryptedKey
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case encryptedKey = "EncryptedKey"
        }
    }

    /// 用户自定义语音审核任务控制参数
    public struct UserDefineAsrTextReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 用户自定语音审核任务开关，可选值：
        /// <li>ON：开启自定义语音审核任务；</li>
        /// <li>OFF：关闭自定义语音审核任务。</li>
        public let `switch`: String

        /// 用户自定义语音过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回。如果要使用标签过滤功能，添加自定义语音关键词素材时需要添加对应标签。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当智能审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 用户自定义语音审核任务控制参数
    public struct UserDefineAsrTextReviewTemplateInfoForUpdate: TCInputModel {
        /// 用户自定语音审核任务开关，可选值：
        /// <li>ON：开启自定义语音审核任务；</li>
        /// <li>OFF：关闭自定义语音审核任务。</li>
        public let `switch`: String?

        /// 用户自定义语音过滤标签，审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回。如果要使用标签过滤功能，添加自定义语音关键词素材时需要添加对应标签。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 用户自定义音视频审核任务控制参数
    public struct UserDefineConfigureInfo: TCInputModel, TCOutputModel {
        /// 用户自定义人物音视频审核控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let faceReviewInfo: UserDefineFaceReviewTemplateInfo?

        /// 用户自定义语音音视频审核控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let asrReviewInfo: UserDefineAsrTextReviewTemplateInfo?

        /// 用户自定义文本音视频审核控制参数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrReviewInfo: UserDefineOcrTextReviewTemplateInfo?

        public init(faceReviewInfo: UserDefineFaceReviewTemplateInfo? = nil, asrReviewInfo: UserDefineAsrTextReviewTemplateInfo? = nil, ocrReviewInfo: UserDefineOcrTextReviewTemplateInfo? = nil) {
            self.faceReviewInfo = faceReviewInfo
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case faceReviewInfo = "FaceReviewInfo"
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 用户自定义音视频审核任务控制参数。
    public struct UserDefineConfigureInfoForUpdate: TCInputModel {
        /// 用户自定义人物音视频审核控制参数。
        public let faceReviewInfo: UserDefineFaceReviewTemplateInfoForUpdate?

        /// 用户自定义语音音视频审核控制参数。
        public let asrReviewInfo: UserDefineAsrTextReviewTemplateInfoForUpdate?

        /// 用户自定义文本音视频审核控制参数。
        public let ocrReviewInfo: UserDefineOcrTextReviewTemplateInfoForUpdate?

        public init(faceReviewInfo: UserDefineFaceReviewTemplateInfoForUpdate? = nil, asrReviewInfo: UserDefineAsrTextReviewTemplateInfoForUpdate? = nil, ocrReviewInfo: UserDefineOcrTextReviewTemplateInfoForUpdate? = nil) {
            self.faceReviewInfo = faceReviewInfo
            self.asrReviewInfo = asrReviewInfo
            self.ocrReviewInfo = ocrReviewInfo
        }

        enum CodingKeys: String, CodingKey {
            case faceReviewInfo = "FaceReviewInfo"
            case asrReviewInfo = "AsrReviewInfo"
            case ocrReviewInfo = "OcrReviewInfo"
        }
    }

    /// 用户自定义人物音视频审核任务控制参数
    public struct UserDefineFaceReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 用户自定义人物音视频审核任务开关，可选值：
        /// <li>ON：开启自定义人物音视频审核任务；</li>
        /// <li>OFF：关闭自定义人物音视频审核任务。</li>
        public let `switch`: String

        /// 用户自定义人物过滤标签，音视频审核结果包含选择的标签则返回结果，如果过滤标签为空，则审核结果全部返回。如果要使用标签过滤功能，添加自定义人物库的时，需要添加对应人物标签。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 97 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 95 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 用户自定义人物音视频审核任务控制参数。
    public struct UserDefineFaceReviewTemplateInfoForUpdate: TCInputModel {
        /// 用户自定义人物音视频审核任务开关，可选值：
        /// <li>ON：开启自定义人物音视频审核任务；</li>
        /// <li>OFF：关闭自定义人物音视频审核任务。</li>
        public let `switch`: String?

        /// 用户自定义人物过滤标签，音视频审核结果包含选择的标签则返回结果，如果过滤标签为空，则音视频审核结果全部返回。如果要使用标签过滤功能，添加自定义人物库的时，需要添加对应人物标签。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当音视频审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当音视频审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 用户自定义文本音视频审核任务控制参数
    public struct UserDefineOcrTextReviewTemplateInfo: TCInputModel, TCOutputModel {
        /// 用户自定文本音视频审核任务开关，可选值：
        /// <li>ON：开启自定义文本音视频审核任务；</li>
        /// <li>OFF：关闭自定义文本音视频审核任务。</li>
        public let `switch`: String

        /// 用户自定义文本过滤标签，音视频审核结果包含选择的标签则返回结果，如果过滤标签为空，则音视频审核结果全部返回。如果要使用标签过滤功能，添加自定义文本关键词素材时需要添加对应标签。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规，不填默认为 100 分。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核，不填默认为 75 分。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 用户自定义文本音视频审核任务控制参数。
    public struct UserDefineOcrTextReviewTemplateInfoForUpdate: TCInputModel {
        /// 用户自定文本音视频审核任务开关，可选值：
        /// <li>ON：开启自定义文本音视频审核任务；</li>
        /// <li>OFF：关闭自定义文本音视频审核任务。</li>
        public let `switch`: String?

        /// 用户自定义文本过滤标签，音视频审核结果包含选择的标签则返回结果，如果过滤标签为空，则音视频审核结果全部返回。如果要使用标签过滤功能，添加自定义文本关键词素材时需要添加对应标签。
        /// 标签个数最多 10 个，每个标签长度最多 16 个字符。
        public let labelSet: [String]?

        /// 判定涉嫌违规的分数阈值，当审核达到该分数以上，认为涉嫌违规。取值范围：0~100。
        public let blockConfidence: Int64?

        /// 判定需人工复核是否违规的分数阈值，当审核达到该分数以上，认为需人工复核。取值范围：0~100。
        public let reviewConfidence: Int64?

        public init(switch: String? = nil, labelSet: [String]? = nil, blockConfidence: Int64? = nil, reviewConfidence: Int64? = nil) {
            self.switch = `switch`
            self.labelSet = labelSet
            self.blockConfidence = blockConfidence
            self.reviewConfidence = reviewConfidence
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case labelSet = "LabelSet"
            case blockConfidence = "BlockConfidence"
            case reviewConfidence = "ReviewConfidence"
        }
    }

    /// 视频降噪控制参数
    public struct VideoDenoiseInfo: TCInputModel, TCOutputModel {
        /// 视频降噪控制开关，可选值：
        /// <li>ON：开启视频降噪；</li>
        /// <li>OFF：关闭视频降噪。</li>
        public let `switch`: String

        /// 视频降噪类型，仅当视频降噪控制开关为 ON 时有效，可选值：
        /// <li>weak：轻视频降噪；</li>
        /// <li>strong：强视频降噪。</li>
        /// 默认值：weak。
        public let type: String?

        public init(switch: String, type: String? = nil) {
            self.switch = `switch`
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case type = "Type"
        }
    }

    /// 智能插帧控制参数
    public struct VideoFrameInterpolationInfo: TCInputModel, TCOutputModel {
        /// 智能插帧控制开关，可选值：
        /// <li>ON：开启智能插帧；</li>
        /// <li>OFF：关闭智能插帧。</li>
        public let `switch`: String

        /// 智能插帧帧率，帧率范围为 (0, 100]，仅当智能插帧控制开关为 ON 时有效。默认跟源文件帧率一致。
        public let fps: Int64?

        public init(switch: String, fps: Int64? = nil) {
            self.switch = `switch`
            self.fps = fps
        }

        enum CodingKeys: String, CodingKey {
            case `switch` = "Switch"
            case fps = "Fps"
        }
    }

    /// 视频流配置参数
    public struct VideoTemplateInfo: TCInputModel, TCOutputModel {
        /// 视频流的编码格式，可选值：
        /// <li>libx264：H.264 编码；</li>
        /// <li>libx265：H.265 编码；</li>
        /// <li>av1：AOMedia Video 1 编码；</li>
        /// <li>H.266：H.266 编码。</li>
        /// <font color=red>注意：</font>
        /// <li> av1，H.266 编码容器目前只支持 mp4 ；</li>
        /// <li> H.266 目前只支持恒定 CRF 码率控制方式。 </li>
        public let codec: String

        /// 视频帧率，取值范围：[0, 100]，单位：Hz。
        /// 当取值为 0，表示帧率和原始视频保持一致。
        public let fps: UInt64

        /// 视频流的码率，取值范围：0 和 [128, 35000]，单位：kbps。
        /// 当取值为 0，表示视频码率和原始视频保持一致。
        public let bitrate: UInt64

        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        /// 默认值：open。
        public let resolutionAdaptive: String?

        /// 视频流宽度（或长边）的最大值，取值范围：0 和 [128, 8192]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let width: UInt64?

        /// 视频流高度（或短边）的最大值，取值范围：0 和 [128, 8192]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        /// 默认值：0。
        public let height: UInt64?

        /// 填充方式，当视频流配置宽高参数与原始视频的宽高比不一致时，对转码的处理方式，即为“填充”。可选填充方式：
        /// <li> stretch：拉伸，对每一帧进行拉伸，填满整个画面，可能导致转码后的视频被“压扁“或者“拉长“；</li>
        /// <li>black：留黑，保持视频宽高比不变，边缘剩余部分使用黑色填充。</li>
        /// <li>white：留白，保持视频宽高比不变，边缘剩余部分使用白色填充。</li>
        /// <li>gauss：高斯模糊，保持视频宽高比不变，边缘剩余部分使用高斯模糊填充。</li>
        /// 默认值：black 。
        public let fillType: String?

        /// 视频恒定码率控制因子，取值范围为[1, 51]。
        ///
        /// <font color=red>注意：</font>
        /// <li>如果指定该参数，将使用 CRF 的码率控制方式做转码（视频码率将不再生效）；</li>
        /// <li>当指定视频流编码格式为 H.266 时，该字段必填，推荐值为 28；</li>
        /// <li>如果没有特殊需求，不建议指定该参数。</li>
        public let vcrf: UInt64?

        /// 关键帧 I 帧之间的间隔，取值范围：0 和 [1, 100000]，单位：帧数。
        /// 当填 0 或不填时，系统将自动设置 gop 长度。
        public let gop: UInt64?

        /// 当原始视频为 HDR（High Dynamic Range）时，转码输出是否依然保持 HDR。取值范围：
        /// <li>ON: 如果原始文件是 HDR，则转码输出保持 HDR；否则转码输出为 SDR （Standard Dynamic Range）。</li>
        /// <li>OFF: 无论原始文件是 HDR 还是 SDR，转码输出均为 SDR。</li>
        /// 默认值：OFF。
        public let preserveHDRSwitch: String?

        /// 编码标签，仅当视频流的编码格式为 H.265 编码时有效，可选值：
        /// <li>hvc1 表示 hvc1 标签；</li>
        /// <li>hev1 表示 hev1 标签。 </li>
        /// 默认值：hvc1。
        public let codecTag: String?

        public init(codec: String, fps: UInt64, bitrate: UInt64, resolutionAdaptive: String? = nil, width: UInt64? = nil, height: UInt64? = nil, fillType: String? = nil, vcrf: UInt64? = nil, gop: UInt64? = nil, preserveHDRSwitch: String? = nil, codecTag: String? = nil) {
            self.codec = codec
            self.fps = fps
            self.bitrate = bitrate
            self.resolutionAdaptive = resolutionAdaptive
            self.width = width
            self.height = height
            self.fillType = fillType
            self.vcrf = vcrf
            self.gop = gop
            self.preserveHDRSwitch = preserveHDRSwitch
            self.codecTag = codecTag
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case fps = "Fps"
            case bitrate = "Bitrate"
            case resolutionAdaptive = "ResolutionAdaptive"
            case width = "Width"
            case height = "Height"
            case fillType = "FillType"
            case vcrf = "Vcrf"
            case gop = "Gop"
            case preserveHDRSwitch = "PreserveHDRSwitch"
            case codecTag = "CodecTag"
        }
    }

    /// 视频流配置参数
    public struct VideoTemplateInfoForUpdate: TCInputModel {
        /// 视频流的编码格式，可选值：
        /// <li>libx264：H.264 编码；</li>
        /// <li>libx265：H.265 编码；</li>
        /// <li>av1：AOMedia Video 1 编码；</li>
        /// <li>H.266：H.266 编码。</li>
        /// <font color=red>注意：</font>
        /// <li> av1，H.266 编码容器目前只支持 mp4 ；</li>
        /// <li> H.266 目前只支持恒定 CRF 码率控制方式。 </li>
        public let codec: String?

        /// 视频帧率，取值范围：[0, 100]，单位：Hz。
        /// 当取值为 0，表示帧率和原始视频保持一致。
        public let fps: UInt64?

        /// 视频流的码率，取值范围：0 和 [128, 35000]，单位：kbps。
        /// 当取值为 0，表示视频码率和原始视频保持一致。
        public let bitrate: UInt64?

        /// 分辨率自适应，可选值：
        /// <li>open：开启，此时，Width 代表视频的长边，Height 表示视频的短边；</li>
        /// <li>close：关闭，此时，Width 代表视频的宽度，Height 表示视频的高度。</li>
        public let resolutionAdaptive: String?

        /// 视频流宽度（或长边）的最大值，取值范围：0 和 [128, 8192]，单位：px。
        /// <li>当 Width、Height 均为 0，则分辨率同源；</li>
        /// <li>当 Width 为 0，Height 非 0，则 Width 按比例缩放；</li>
        /// <li>当 Width 非 0，Height 为 0，则 Height 按比例缩放；</li>
        /// <li>当 Width、Height 均非 0，则分辨率按用户指定。</li>
        public let width: UInt64?

        /// 视频流高度（或短边）的最大值，取值范围：0 和 [128, 8192]，单位：px。
        public let height: UInt64?

        /// 填充方式，当视频流配置宽高参数与原始视频的宽高比不一致时，对转码的处理方式，即为“填充”。可选填充方式：
        /// <li> stretch：拉伸，对每一帧进行拉伸，填满整个画面，可能导致转码后的视频被“压扁“或者“拉长“；</li>
        /// <li>black：留黑，保持视频宽高比不变，边缘剩余部分使用黑色填充。</li>
        /// <li>white：留白，保持视频宽高比不变，边缘剩余部分使用白色填充。</li>
        /// <li>gauss：高斯模糊，保持视频宽高比不变，边缘剩余部分使用高斯模糊填充。</li>
        public let fillType: String?

        /// 视频恒定码率控制因子，取值范围为[1, 51]，填 0 表示禁用该参数。
        ///
        /// <font color=red>注意：</font>
        /// <li>如果指定该参数，将使用 CRF 的码率控制方式做转码（视频码率将不再生效）；</li>
        /// <li>当指定视频流编码格式为 H.266 时，该字段必填，推荐值为 28；</li>
        /// <li>如果没有特殊需求，不建议指定该参数。</li>
        public let vcrf: UInt64?

        /// 关键帧 I 帧之间的间隔，取值范围：0 和 [1, 100000]，单位：帧数。
        /// 当填 0 或不填时，系统将自动设置 gop 长度。
        public let gop: UInt64?

        /// 当原始视频为 HDR（High Dynamic Range）时，转码输出是否依然保持 HDR。取值范围：
        /// <li>ON: 如果原始文件是 HDR，则转码输出保持 HDR；否则转码输出为 SDR （Standard Dynamic Range）。</li>
        /// <li>OFF: 无论原始文件是 HDR 还是 SDR，转码输出均为 SDR。</li>
        public let preserveHDRSwitch: String?

        /// 编码标签，仅当视频流的编码格式为 H.265 编码时有效，可选值：
        /// <li>hvc1 表示 hvc1 标签；</li>
        /// <li>hev1 表示 hev1 标签。 </li>
        /// 默认值：hvc1。
        public let codecTag: String?

        public init(codec: String? = nil, fps: UInt64? = nil, bitrate: UInt64? = nil, resolutionAdaptive: String? = nil, width: UInt64? = nil, height: UInt64? = nil, fillType: String? = nil, vcrf: UInt64? = nil, gop: UInt64? = nil, preserveHDRSwitch: String? = nil, codecTag: String? = nil) {
            self.codec = codec
            self.fps = fps
            self.bitrate = bitrate
            self.resolutionAdaptive = resolutionAdaptive
            self.width = width
            self.height = height
            self.fillType = fillType
            self.vcrf = vcrf
            self.gop = gop
            self.preserveHDRSwitch = preserveHDRSwitch
            self.codecTag = codecTag
        }

        enum CodingKeys: String, CodingKey {
            case codec = "Codec"
            case fps = "Fps"
            case bitrate = "Bitrate"
            case resolutionAdaptive = "ResolutionAdaptive"
            case width = "Width"
            case height = "Height"
            case fillType = "FillType"
            case vcrf = "Vcrf"
            case gop = "Gop"
            case preserveHDRSwitch = "PreserveHDRSwitch"
            case codecTag = "CodecTag"
        }
    }

    /// 视频轨的视频片段信息。
    public struct VideoTrackItem: TCInputModel, TCOutputModel {
        /// 视频片段的媒体素材来源，可以是：
        /// <li>点播的媒体文件 ID；</li>
        /// <li>其他媒体文件的下载 URL。</li>
        /// 注意：当使用其他媒体文件的下载 URL 作为素材来源，且开启了访问控制（如防盗链）时，需要在 URL 携带访问控制参数（如防盗链签名）。
        public let sourceMedia: String

        /// 视频片段取自素材文件的起始时间，单位为秒。默认为0。
        public let sourceMediaStartTime: Float?

        /// 视频片段时长，单位为秒。默认取视频素材本身长度，表示截取全部素材。如果源文件是图片，Duration需要大于0。
        public let duration: Float?

        /// 视频片段目标时长，单位为秒。
        /// <li>当 TargetDuration 不填或填0时，表示目标时长和 Duration 一致；</li>
        /// <li>当 TargetDuration 取大于0的值时，将对视频片段做快进或慢放等处理，使得输出片段的时长等于 TargetDuration。</li>
        public let targetDuration: Float?

        /// 视频原点位置，取值有：
        /// <li>Center：坐标原点为中心位置，如画布中心。</li>
        /// 默认值 ：Center。
        public let coordinateOrigin: String?

        /// 视频片段原点距离画布原点的水平位置。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示视频片段 XPos 为画布宽度指定百分比的位置，如 10% 表示 XPos 为画布口宽度的 10%。</li>
        /// <li>当字符串以 px 结尾，表示视频片段 XPos 单位为像素，如 100px 表示 XPos 为100像素。</li>
        /// 默认值：0px。
        public let xPos: String?

        /// 视频片段原点距离画布原点的垂直位置。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示视频片段 YPos 为画布高度指定百分比的位置，如 10% 表示 YPos 为画布高度的 10%。</li>
        /// <li>当字符串以 px 结尾，表示视频片段 YPos 单位为像素，如 100px 表示 YPos 为100像素。</li>
        /// 默认值：0px。
        public let yPos: String?

        /// 视频片段的宽度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示视频片段 Width 为画布宽度的百分比大小，如 10% 表示 Width 为画布宽度的 10%。</li>
        /// <li>当字符串以 px 结尾，表示视频片段 Width 单位为像素，如 100px 表示 Width 为100像素。</li>
        /// <li>当 Width、Height 均为空，则 Width 和 Height 取视频素材本身的 Width、Height。</li>
        /// <li>当 Width 为空，Height 非空，则 Width 按比例缩放</li>
        /// <li>当 Width 非空，Height 为空，则 Height 按比例缩放。</li>
        public let width: String?

        /// 视频片段的高度。支持 %、px 两种格式：
        /// <li>当字符串以 % 结尾，表示视频片段 Height 为画布高度的百分比大小，如 10% 表示 Height 为画布高度的 10%；
        /// </li><li>当字符串以 px 结尾，表示视频片段 Height 单位为像素，如 100px 表示 Height 为100像素。</li>
        /// <li>当 Width、Height 均为空，则 Width 和 Height 取视频素材本身的 Width、Height。</li>
        /// <li>当 Width 为空，Height 非空，则 Width 按比例缩放</li>
        /// <li>当 Width 非空，Height 为空，则 Height 按比例缩放。</li>
        public let height: String?

        /// 对音频进行操作，如静音等。
        public let audioOperations: [AudioTransform]?

        /// 对图像进行的操作，如图像旋转等。
        public let imageOperations: [ImageTransform]?

        public init(sourceMedia: String, sourceMediaStartTime: Float? = nil, duration: Float? = nil, targetDuration: Float? = nil, coordinateOrigin: String? = nil, xPos: String? = nil, yPos: String? = nil, width: String? = nil, height: String? = nil, audioOperations: [AudioTransform]? = nil, imageOperations: [ImageTransform]? = nil) {
            self.sourceMedia = sourceMedia
            self.sourceMediaStartTime = sourceMediaStartTime
            self.duration = duration
            self.targetDuration = targetDuration
            self.coordinateOrigin = coordinateOrigin
            self.xPos = xPos
            self.yPos = yPos
            self.width = width
            self.height = height
            self.audioOperations = audioOperations
            self.imageOperations = imageOperations
        }

        enum CodingKeys: String, CodingKey {
            case sourceMedia = "SourceMedia"
            case sourceMediaStartTime = "SourceMediaStartTime"
            case duration = "Duration"
            case targetDuration = "TargetDuration"
            case coordinateOrigin = "CoordinateOrigin"
            case xPos = "XPos"
            case yPos = "YPos"
            case width = "Width"
            case height = "Height"
            case audioOperations = "AudioOperations"
            case imageOperations = "ImageOperations"
        }
    }

    /// 水印周期配置。
    public struct WatermarkCycleConfigForUpdate: TCInputModel {
        /// 水印在视频里第一次出现的播放时间点，单位：秒。
        public let startTime: Float?

        /// 在一个水印周期内，水印显示的持续时间，单位：秒。
        public let displayDuration: Float?

        /// 一个水印周期的持续时间，单位：秒。
        /// 填 0 表示水印只持续一个水印周期（即在整个视频里只显示 DisplayDuration 秒）。
        public let cycleDuration: Float?

        public init(startTime: Float? = nil, displayDuration: Float? = nil, cycleDuration: Float? = nil) {
            self.startTime = startTime
            self.displayDuration = displayDuration
            self.cycleDuration = cycleDuration
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case displayDuration = "DisplayDuration"
            case cycleDuration = "CycleDuration"
        }
    }

    /// 视频处理任务中的水印参数类型
    public struct WatermarkInput: TCInputModel, TCOutputModel {
        /// 水印模板 ID。
        public let definition: UInt64

        /// 文字内容，长度不超过100个字符。仅当水印类型为文字水印时填写。
        /// 文字水印不支持截图打水印。
        public let textContent: String?

        /// SVG 内容。长度不超过 2000000 个字符。仅当水印类型为 SVG 水印时填写。
        /// SVG 水印不支持截图打水印。
        public let svgContent: String?

        /// 水印的起始时间偏移，单位：秒。不填或填0，表示水印从画面出现时开始显现。
        /// <li>不填或填0，表示水印从画面开始就出现；</li>
        /// <li>当数值大于0时（假设为 n），表示水印从画面开始的第 n 秒出现；</li>
        /// <li>当数值小于0时（假设为 -n），表示水印从离画面结束 n 秒前开始出现。</li>
        public let startTimeOffset: Float?

        /// 水印的结束时间偏移，单位：秒。
        /// <li>不填或填0，表示水印持续到画面结束；</li>
        /// <li>当数值大于0时（假设为 n），表示水印持续到第 n 秒时消失；</li>
        /// <li>当数值小于0时（假设为 -n），表示水印持续到离画面结束 n 秒前消失。</li>
        public let endTimeOffset: Float?

        public init(definition: UInt64, textContent: String? = nil, svgContent: String? = nil, startTimeOffset: Float? = nil, endTimeOffset: Float? = nil) {
            self.definition = definition
            self.textContent = textContent
            self.svgContent = svgContent
            self.startTimeOffset = startTimeOffset
            self.endTimeOffset = endTimeOffset
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case textContent = "TextContent"
            case svgContent = "SvgContent"
            case startTimeOffset = "StartTimeOffset"
            case endTimeOffset = "EndTimeOffset"
        }
    }

    /// 水印模板详情
    public struct WatermarkTemplate: TCOutputModel {
        /// 水印模板唯一标识。
        public let definition: Int64

        /// 水印类型，取值：
        /// <li>image：图片水印；</li>
        /// <li>text：文字水印。</li>
        public let type: String

        /// 水印模板名称。
        public let name: String

        /// 模板描述信息。
        public let comment: String

        /// 水印图片原点距离视频图像原点的水平位置。
        /// <li>当字符串以 % 结尾，表示水印 Left 为视频宽度指定百分比的位置，如 10% 表示 Left 为视频宽度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Left 为视频宽度指定像素的位置，如 100px 表示 Left 为 100 像素。</li>
        public let xPos: String

        /// 水印图片原点距离视频图像原点的垂直位置。
        /// <li>当字符串以 % 结尾，表示水印 Top 为视频高度指定百分比的位置，如 10% 表示 Top 为视频高度的 10%；</li>
        /// <li>当字符串以 px 结尾，表示水印 Top 为视频高度指定像素的位置，如 100px 表示 Top 为 100 像素。</li>
        public let yPos: String

        /// 图片水印模板，仅当 Type 为 image，该字段有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageTemplate: ImageWatermarkTemplate?

        /// 文字水印模板，仅当 Type 为 text，该字段有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let textTemplate: TextWatermarkTemplateInput?

        /// SVG 水印模板，当 Type 为 svg，该字段有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let svgTemplate: SvgWatermarkInput?

        /// 模板创建时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let createTime: String

        /// 模板最后修改时间，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let updateTime: String

        /// 原点位置，可选值：
        /// <li>topLeft：表示坐标原点位于视频图像左上角，水印原点为图片或文字的左上角；</li>
        /// <li>topRight：表示坐标原点位于视频图像的右上角，水印原点为图片或文字的右上角；</li>
        /// <li>bottomLeft：表示坐标原点位于视频图像的左下角，水印原点为图片或文字的左下角；</li>
        /// <li>bottomRight：表示坐标原点位于视频图像的右下角，水印原点为图片或文字的右下。；</li>
        public let coordinateOrigin: String

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case type = "Type"
            case name = "Name"
            case comment = "Comment"
            case xPos = "XPos"
            case yPos = "YPos"
            case imageTemplate = "ImageTemplate"
            case textTemplate = "TextTemplate"
            case svgTemplate = "SvgTemplate"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case coordinateOrigin = "CoordinateOrigin"
        }
    }

    /// 微信小程序发布任务信息
    public struct WechatMiniProgramPublishTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务状态，取值：
        /// WAITING：等待中；
        /// PROCESSING：处理中；
        /// FINISH：已完成。
        public let status: String

        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 发布视频文件 ID。
        public let fileId: String

        /// 发布视频所对应的转码模板 ID，为 0 代表原始视频。
        public let sourceDefinition: UInt64

        /// 微信小程序视频发布状态，取值：
        /// <li>Pass：发布成功；</li>
        /// <li>Failed：发布失败；</li>
        /// <li>Rejected：音视频审核未通过。</li>
        public let publishResult: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case sourceDefinition = "SourceDefinition"
            case publishResult = "PublishResult"
        }
    }

    /// 微信小程序发布任务类型
    public struct WechatMiniProgramPublishTaskInput: TCInputModel, TCOutputModel {
        /// 发布视频所对应的转码模板 ID，为 0 代表原始视频。
        public let sourceDefinition: UInt64

        public init(sourceDefinition: UInt64) {
            self.sourceDefinition = sourceDefinition
        }

        enum CodingKeys: String, CodingKey {
            case sourceDefinition = "SourceDefinition"
        }
    }

    /// 微信发布任务信息
    public struct WechatPublishTask: TCOutputModel {
        /// 任务 ID。
        public let taskId: String

        /// 任务状态，取值：
        /// WAITING：等待中；
        /// PROCESSING：处理中；
        /// FINISH：已完成。
        public let status: String

        /// 错误码
        /// <li>0：成功；</li>
        /// <li>其他值：失败。</li>
        public let errCode: Int64

        /// 错误信息。
        public let message: String

        /// 发布视频文件 ID。
        public let fileId: String

        /// 微信发布模板 ID。
        public let definition: UInt64

        /// 发布视频所对应的转码模板 ID，为 0 代表原始视频。
        public let sourceDefinition: UInt64

        /// 微信发布状态，取值：
        /// <li>FAIL：失败；</li>
        /// <li>SUCCESS：成功；</li>
        /// <li>AUDITNOTPASS：审核未通过；</li>
        /// <li>NOTTRIGGERED：尚未发起微信发布。</li>
        public let wechatStatus: String

        /// 微信 Vid。
        public let wechatVid: String

        /// 微信地址。
        public let wechatUrl: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case errCode = "ErrCode"
            case message = "Message"
            case fileId = "FileId"
            case definition = "Definition"
            case sourceDefinition = "SourceDefinition"
            case wechatStatus = "WechatStatus"
            case wechatVid = "WechatVid"
            case wechatUrl = "WechatUrl"
        }
    }
}
