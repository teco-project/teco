//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// 获取任务流模板列表
    ///
    /// 根据任务流模板名字，获取任务流模板详情列表。
    @inlinable
    public func describeProcedureTemplates(_ input: DescribeProcedureTemplatesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeProcedureTemplatesResponse > {
        self.client.execute(action: "DescribeProcedureTemplates", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取任务流模板列表
    ///
    /// 根据任务流模板名字，获取任务流模板详情列表。
    @inlinable
    public func describeProcedureTemplates(_ input: DescribeProcedureTemplatesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProcedureTemplatesResponse {
        try await self.client.execute(action: "DescribeProcedureTemplates", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeProcedureTemplates请求参数结构体
    public struct DescribeProcedureTemplatesRequest: TCRequestModel {
        /// 任务流模板名字过滤条件，数组长度限制：100。
        public let names: [String]?
        
        /// 任务流模板类型过滤条件，可选值：
        /// <li>Preset：系统预置任务流模板；</li>
        /// <li>Custom：用户自定义任务流模板。</li>
        public let type: String?
        
        /// 分页偏移量，默认值：0。
        public let offset: UInt64?
        
        /// 返回记录条数，默认值：10，最大值：100。
        public let limit: UInt64?
        
        /// 点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。
        public let subAppId: UInt64?
        
        public init (names: [String]?, type: String?, offset: UInt64?, limit: UInt64?, subAppId: UInt64?) {
            self.names = names
            self.type = type
            self.offset = offset
            self.limit = limit
            self.subAppId = subAppId
        }
        
        enum CodingKeys: String, CodingKey {
            case names = "Names"
            case type = "Type"
            case offset = "Offset"
            case limit = "Limit"
            case subAppId = "SubAppId"
        }
    }
    
    /// DescribeProcedureTemplates返回参数结构体
    public struct DescribeProcedureTemplatesResponse: TCResponseModel {
        /// 符合过滤条件的记录总数。
        public let totalCount: UInt64
        
        /// 任务流模板详情列表。
        public let procedureTemplateSet: [ProcedureTemplate]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case procedureTemplateSet = "ProcedureTemplateSet"
            case requestId = "RequestId"
        }
    }
}