//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vod {
    /// ModifyRoundPlay请求参数结构体
    public struct ModifyRoundPlayRequest: TCRequestModel {
        /// 轮播播单唯一标识。
        public let roundPlayId: String

        /// <b>点播 [子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?

        /// 启播时间，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#52)。
        public let startTime: String?

        /// 轮播列表。
        /// <li>数组长度限制：100。</li>
        public let roundPlaylist: [RoundPlayListItemInfo]?

        /// 轮播播单名称，长度限制：64 个字符。
        public let name: String?

        /// 轮播播单描述信息，长度限制：256 个字符。
        public let desc: String?

        public init(roundPlayId: String, subAppId: UInt64? = nil, startTime: String? = nil, roundPlaylist: [RoundPlayListItemInfo]? = nil, name: String? = nil, desc: String? = nil) {
            self.roundPlayId = roundPlayId
            self.subAppId = subAppId
            self.startTime = startTime
            self.roundPlaylist = roundPlaylist
            self.name = name
            self.desc = desc
        }

        enum CodingKeys: String, CodingKey {
            case roundPlayId = "RoundPlayId"
            case subAppId = "SubAppId"
            case startTime = "StartTime"
            case roundPlaylist = "RoundPlaylist"
            case name = "Name"
            case desc = "Desc"
        }
    }

    /// ModifyRoundPlay返回参数结构体
    public struct ModifyRoundPlayResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改轮播播单
    ///
    /// 该接口用于修改轮播播单。
    /// 修改后只有新的播放请求会生效，已经在播放中的用户在七天之内还可以播放修改前的播单。
    @inlinable @discardableResult
    public func modifyRoundPlay(_ input: ModifyRoundPlayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRoundPlayResponse> {
        self.client.execute(action: "ModifyRoundPlay", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改轮播播单
    ///
    /// 该接口用于修改轮播播单。
    /// 修改后只有新的播放请求会生效，已经在播放中的用户在七天之内还可以播放修改前的播单。
    @inlinable @discardableResult
    public func modifyRoundPlay(_ input: ModifyRoundPlayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRoundPlayResponse {
        try await self.client.execute(action: "ModifyRoundPlay", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改轮播播单
    ///
    /// 该接口用于修改轮播播单。
    /// 修改后只有新的播放请求会生效，已经在播放中的用户在七天之内还可以播放修改前的播单。
    @inlinable @discardableResult
    public func modifyRoundPlay(roundPlayId: String, subAppId: UInt64? = nil, startTime: String? = nil, roundPlaylist: [RoundPlayListItemInfo]? = nil, name: String? = nil, desc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRoundPlayResponse> {
        self.modifyRoundPlay(.init(roundPlayId: roundPlayId, subAppId: subAppId, startTime: startTime, roundPlaylist: roundPlaylist, name: name, desc: desc), region: region, logger: logger, on: eventLoop)
    }

    /// 修改轮播播单
    ///
    /// 该接口用于修改轮播播单。
    /// 修改后只有新的播放请求会生效，已经在播放中的用户在七天之内还可以播放修改前的播单。
    @inlinable @discardableResult
    public func modifyRoundPlay(roundPlayId: String, subAppId: UInt64? = nil, startTime: String? = nil, roundPlaylist: [RoundPlayListItemInfo]? = nil, name: String? = nil, desc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRoundPlayResponse {
        try await self.modifyRoundPlay(.init(roundPlayId: roundPlayId, subAppId: subAppId, startTime: startTime, roundPlaylist: roundPlaylist, name: name, desc: desc), region: region, logger: logger, on: eventLoop)
    }
}
