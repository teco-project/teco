//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// CreateVodDomain请求参数结构体
    public struct CreateVodDomainRequest: TCRequestModel {
        /// 需要接入点播的加速域名。注意：不支持填写泛域名。
        public let domain: String
        
        /// <b>点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?
        
        /// 需要开启 CDN 加速的区域：
        /// <li>Chinese Mainland：中国境内（不包含港澳台）。</li>
        /// <li>Outside Chinese Mainland: 中国境外。</li>
        /// <li>Global: 全球范围。</li>
        /// 如果没有设置 AccelerateArea， 点播会根据用户在腾讯云设置的地域信息自动开通中国境内或者中国境外的 CDN 加速。开启中国境内加速的域名，需要先[备案域名](/document/product/243/18905)。
        public let accelerateArea: String?
        
        public init (domain: String, subAppId: UInt64? = nil, accelerateArea: String? = nil) {
            self.domain = domain
            self.subAppId = subAppId
            self.accelerateArea = accelerateArea
        }
        
        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case subAppId = "SubAppId"
            case accelerateArea = "AccelerateArea"
        }
    }
    
    /// CreateVodDomain返回参数结构体
    public struct CreateVodDomainResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 添加点播加速域名
    ///
    /// 该接口用于将加速域名添加到点播，一个用户最多添加20个加速域名。
    /// 1.域名添加成功后点播会进行域名的部署，域名由部署状态变为在线状态大概需要2分钟的时间。
    @inlinable
    public func createVodDomain(_ input: CreateVodDomainRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateVodDomainResponse > {
        self.client.execute(action: "CreateVodDomain", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 添加点播加速域名
    ///
    /// 该接口用于将加速域名添加到点播，一个用户最多添加20个加速域名。
    /// 1.域名添加成功后点播会进行域名的部署，域名由部署状态变为在线状态大概需要2分钟的时间。
    @inlinable
    public func createVodDomain(_ input: CreateVodDomainRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVodDomainResponse {
        try await self.client.execute(action: "CreateVodDomain", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 添加点播加速域名
    ///
    /// 该接口用于将加速域名添加到点播，一个用户最多添加20个加速域名。
    /// 1.域名添加成功后点播会进行域名的部署，域名由部署状态变为在线状态大概需要2分钟的时间。
    @inlinable
    public func createVodDomain(domain: String, subAppId: UInt64? = nil, accelerateArea: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateVodDomainResponse > {
        self.createVodDomain(CreateVodDomainRequest(domain: domain, subAppId: subAppId, accelerateArea: accelerateArea), logger: logger, on: eventLoop)
    }
    
    /// 添加点播加速域名
    ///
    /// 该接口用于将加速域名添加到点播，一个用户最多添加20个加速域名。
    /// 1.域名添加成功后点播会进行域名的部署，域名由部署状态变为在线状态大概需要2分钟的时间。
    @inlinable
    public func createVodDomain(domain: String, subAppId: UInt64? = nil, accelerateArea: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVodDomainResponse {
        try await self.createVodDomain(CreateVodDomainRequest(domain: domain, subAppId: subAppId, accelerateArea: accelerateArea), logger: logger, on: eventLoop)
    }
}
