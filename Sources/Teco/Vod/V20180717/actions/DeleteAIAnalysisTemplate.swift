//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// 删除音视频内容分析模板
    ///
    /// 删除用户自定义音视频内容分析模板。
    /// 注意：模板 ID 为 10000 以下的为系统预置模板，不允许删除。
    @inlinable
    public func deleteAIAnalysisTemplate(_ input: DeleteAIAnalysisTemplateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteAIAnalysisTemplateResponse > {
        self.client.execute(action: "DeleteAIAnalysisTemplate", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除音视频内容分析模板
    ///
    /// 删除用户自定义音视频内容分析模板。
    /// 注意：模板 ID 为 10000 以下的为系统预置模板，不允许删除。
    @inlinable
    public func deleteAIAnalysisTemplate(_ input: DeleteAIAnalysisTemplateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAIAnalysisTemplateResponse {
        try await self.client.execute(action: "DeleteAIAnalysisTemplate", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DeleteAIAnalysisTemplate请求参数结构体
    public struct DeleteAIAnalysisTemplateRequest: TCRequestModel {
        /// 音视频内容分析模板唯一标识。
        public let definition: Int64
        
        /// <b>点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?
        
        public init (definition: Int64, subAppId: UInt64?) {
            self.definition = definition
            self.subAppId = subAppId
        }
        
        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case subAppId = "SubAppId"
        }
    }
    
    /// DeleteAIAnalysisTemplate返回参数结构体
    public struct DeleteAIAnalysisTemplateResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}