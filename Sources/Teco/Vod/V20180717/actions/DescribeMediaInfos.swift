//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// DescribeMediaInfos请求参数结构体
    public struct DescribeMediaInfosRequest: TCRequestModel {
        /// 媒体文件 ID 列表，N 从 0 开始取值，最大 19。
        public let fileIds: [String]

        /// 指定所有媒体文件需要返回的信息，可同时指定多个信息，N 从 0 开始递增。如果未填写该字段，默认返回所有信息。选项有：
        /// <li>basicInfo（视频基础信息）。</li>
        /// <li>metaData（视频元信息）。</li>
        /// <li>transcodeInfo（视频转码结果信息）。</li>
        /// <li>animatedGraphicsInfo（视频转动图结果信息）。</li>
        /// <li>imageSpriteInfo（视频雪碧图信息）。</li>
        /// <li>snapshotByTimeOffsetInfo（视频指定时间点截图信息）。</li>
        /// <li>sampleSnapshotInfo（采样截图信息）。</li>
        /// <li>keyFrameDescInfo（打点信息）。</li>
        /// <li>adaptiveDynamicStreamingInfo（转自适应码流信息）。</li>
        /// <li>miniProgramReviewInfo（小程序审核信息）。</li>
        public let filters: [String]?

        /// 点播[子应用](/document/product/266/14574) ID 。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。
        public let subAppId: UInt64?

        public init(fileIds: [String], filters: [String]? = nil, subAppId: UInt64? = nil) {
            self.fileIds = fileIds
            self.filters = filters
            self.subAppId = subAppId
        }

        enum CodingKeys: String, CodingKey {
            case fileIds = "FileIds"
            case filters = "Filters"
            case subAppId = "SubAppId"
        }
    }

    /// DescribeMediaInfos返回参数结构体
    public struct DescribeMediaInfosResponse: TCResponseModel {
        /// 媒体文件信息列表。
        public let mediaInfoSet: [MediaInfo]

        /// 不存在的文件 ID 列表。
        public let notExistFileIdSet: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case mediaInfoSet = "MediaInfoSet"
            case notExistFileIdSet = "NotExistFileIdSet"
            case requestId = "RequestId"
        }
    }

    /// 获取媒体详细信息
    ///
    /// 1. 该接口可以获取多个媒体文件的多种信息，包括：
    ///     1. 基础信息（basicInfo）：包括媒体名称、分类、播放地址、封面图片等。
    ///     2. 元信息（metaData）：包括大小、时长、视频流信息、音频流信息等。
    ///     3. 转码结果信息（transcodeInfo）：包括该媒体转码生成的各种规格的媒体地址、视频流参数、音频流参数等。
    ///     4. 转动图结果信息（animatedGraphicsInfo）：对视频转动图（如 gif）后的动图信息。
    ///     5. 采样截图信息（sampleSnapshotInfo）：对视频采样截图后的截图信息。
    ///     6. 雪碧图信息（imageSpriteInfo）：对视频截取雪碧图后的雪碧图信息。
    ///     7. 指定时间点截图信息（snapshotByTimeOffsetInfo）：对视频依照指定时间点截图后，的截图信息。
    ///     8. 视频打点信息（keyFrameDescInfo）：对视频设置的打点信息。
    ///     9. 转自适应码流信息（adaptiveDynamicStreamingInfo）：包括规格、加密类型、打包格式等相关信息。
    /// 2. 可以指定回包只返回部分信息。
    @inlinable
    public func describeMediaInfos(_ input: DescribeMediaInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMediaInfosResponse> {
        self.client.execute(action: "DescribeMediaInfos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取媒体详细信息
    ///
    /// 1. 该接口可以获取多个媒体文件的多种信息，包括：
    ///     1. 基础信息（basicInfo）：包括媒体名称、分类、播放地址、封面图片等。
    ///     2. 元信息（metaData）：包括大小、时长、视频流信息、音频流信息等。
    ///     3. 转码结果信息（transcodeInfo）：包括该媒体转码生成的各种规格的媒体地址、视频流参数、音频流参数等。
    ///     4. 转动图结果信息（animatedGraphicsInfo）：对视频转动图（如 gif）后的动图信息。
    ///     5. 采样截图信息（sampleSnapshotInfo）：对视频采样截图后的截图信息。
    ///     6. 雪碧图信息（imageSpriteInfo）：对视频截取雪碧图后的雪碧图信息。
    ///     7. 指定时间点截图信息（snapshotByTimeOffsetInfo）：对视频依照指定时间点截图后，的截图信息。
    ///     8. 视频打点信息（keyFrameDescInfo）：对视频设置的打点信息。
    ///     9. 转自适应码流信息（adaptiveDynamicStreamingInfo）：包括规格、加密类型、打包格式等相关信息。
    /// 2. 可以指定回包只返回部分信息。
    @inlinable
    public func describeMediaInfos(_ input: DescribeMediaInfosRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMediaInfosResponse {
        try await self.client.execute(action: "DescribeMediaInfos", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取媒体详细信息
    ///
    /// 1. 该接口可以获取多个媒体文件的多种信息，包括：
    ///     1. 基础信息（basicInfo）：包括媒体名称、分类、播放地址、封面图片等。
    ///     2. 元信息（metaData）：包括大小、时长、视频流信息、音频流信息等。
    ///     3. 转码结果信息（transcodeInfo）：包括该媒体转码生成的各种规格的媒体地址、视频流参数、音频流参数等。
    ///     4. 转动图结果信息（animatedGraphicsInfo）：对视频转动图（如 gif）后的动图信息。
    ///     5. 采样截图信息（sampleSnapshotInfo）：对视频采样截图后的截图信息。
    ///     6. 雪碧图信息（imageSpriteInfo）：对视频截取雪碧图后的雪碧图信息。
    ///     7. 指定时间点截图信息（snapshotByTimeOffsetInfo）：对视频依照指定时间点截图后，的截图信息。
    ///     8. 视频打点信息（keyFrameDescInfo）：对视频设置的打点信息。
    ///     9. 转自适应码流信息（adaptiveDynamicStreamingInfo）：包括规格、加密类型、打包格式等相关信息。
    /// 2. 可以指定回包只返回部分信息。
    @inlinable
    public func describeMediaInfos(fileIds: [String], filters: [String]? = nil, subAppId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeMediaInfosResponse> {
        self.describeMediaInfos(DescribeMediaInfosRequest(fileIds: fileIds, filters: filters, subAppId: subAppId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取媒体详细信息
    ///
    /// 1. 该接口可以获取多个媒体文件的多种信息，包括：
    ///     1. 基础信息（basicInfo）：包括媒体名称、分类、播放地址、封面图片等。
    ///     2. 元信息（metaData）：包括大小、时长、视频流信息、音频流信息等。
    ///     3. 转码结果信息（transcodeInfo）：包括该媒体转码生成的各种规格的媒体地址、视频流参数、音频流参数等。
    ///     4. 转动图结果信息（animatedGraphicsInfo）：对视频转动图（如 gif）后的动图信息。
    ///     5. 采样截图信息（sampleSnapshotInfo）：对视频采样截图后的截图信息。
    ///     6. 雪碧图信息（imageSpriteInfo）：对视频截取雪碧图后的雪碧图信息。
    ///     7. 指定时间点截图信息（snapshotByTimeOffsetInfo）：对视频依照指定时间点截图后，的截图信息。
    ///     8. 视频打点信息（keyFrameDescInfo）：对视频设置的打点信息。
    ///     9. 转自适应码流信息（adaptiveDynamicStreamingInfo）：包括规格、加密类型、打包格式等相关信息。
    /// 2. 可以指定回包只返回部分信息。
    @inlinable
    public func describeMediaInfos(fileIds: [String], filters: [String]? = nil, subAppId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeMediaInfosResponse {
        try await self.describeMediaInfos(DescribeMediaInfosRequest(fileIds: fileIds, filters: filters, subAppId: subAppId), region: region, logger: logger, on: eventLoop)
    }
}
