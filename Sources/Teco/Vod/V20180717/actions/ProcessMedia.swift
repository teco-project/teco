//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// ProcessMedia请求参数结构体
    public struct ProcessMediaRequest: TCRequestModel {
        /// 媒体文件 ID，即该文件在云点播上的全局唯一标识符，在上传成功后由云点播后台分配。可以在 [视频上传完成事件通知](/document/product/266/7830) 或 [云点播控制台](https://console.cloud.tencent.com/vod/media) 获取该字段。
        public let fileId: String

        /// <b>点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?

        /// 视频处理类型任务参数。
        public let mediaProcessTask: MediaProcessTaskInput?

        /// 音视频内容审核类型任务参数。
        public let aiContentReviewTask: AiContentReviewTaskInput?

        /// 音视频内容分析类型任务参数。
        public let aiAnalysisTask: AiAnalysisTaskInput?

        /// 音视频内容识别类型任务参数。
        public let aiRecognitionTask: AiRecognitionTaskInput?

        /// 任务流的优先级，数值越大优先级越高，取值范围是 -10 到 10，不填代表 0。
        public let tasksPriority: Int64?

        /// 任务流状态变更通知模式，可取值有 Finish，Change 和 None，不填代表 Finish。
        public let tasksNotifyMode: String?

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String?

        /// 用于去重的识别码，如果三天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String?

        /// 保留字段，特殊用途时使用。
        public let extInfo: String?

        public init(fileId: String, subAppId: UInt64? = nil, mediaProcessTask: MediaProcessTaskInput? = nil, aiContentReviewTask: AiContentReviewTaskInput? = nil, aiAnalysisTask: AiAnalysisTaskInput? = nil, aiRecognitionTask: AiRecognitionTaskInput? = nil, tasksPriority: Int64? = nil, tasksNotifyMode: String? = nil, sessionContext: String? = nil, sessionId: String? = nil, extInfo: String? = nil) {
            self.fileId = fileId
            self.subAppId = subAppId
            self.mediaProcessTask = mediaProcessTask
            self.aiContentReviewTask = aiContentReviewTask
            self.aiAnalysisTask = aiAnalysisTask
            self.aiRecognitionTask = aiRecognitionTask
            self.tasksPriority = tasksPriority
            self.tasksNotifyMode = tasksNotifyMode
            self.sessionContext = sessionContext
            self.sessionId = sessionId
            self.extInfo = extInfo
        }

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case subAppId = "SubAppId"
            case mediaProcessTask = "MediaProcessTask"
            case aiContentReviewTask = "AiContentReviewTask"
            case aiAnalysisTask = "AiAnalysisTask"
            case aiRecognitionTask = "AiRecognitionTask"
            case tasksPriority = "TasksPriority"
            case tasksNotifyMode = "TasksNotifyMode"
            case sessionContext = "SessionContext"
            case sessionId = "SessionId"
            case extInfo = "ExtInfo"
        }
    }

    /// ProcessMedia返回参数结构体
    public struct ProcessMediaResponse: TCResponseModel {
        /// 任务 ID
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 视频处理
    ///
    /// 对点播中的音视频媒体发起处理任务，功能包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频截取一张图做封面；
    /// 7. 对视频转自适应码流（并加密）；
    /// 8. 内容审核（令人反感的信息、不安全的信息、不适宜的信息）；
    /// 9. 内容分析（标签、分类、封面、按帧标签）；
    /// 10. 内容识别（视频片头片尾、人脸、文本全文、文本关键词、语音全文、语音关键词、物体）。
    /// 如使用事件通知，事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)。
    @inlinable
    public func processMedia(_ input: ProcessMediaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ProcessMediaResponse> {
        self.client.execute(action: "ProcessMedia", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 视频处理
    ///
    /// 对点播中的音视频媒体发起处理任务，功能包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频截取一张图做封面；
    /// 7. 对视频转自适应码流（并加密）；
    /// 8. 内容审核（令人反感的信息、不安全的信息、不适宜的信息）；
    /// 9. 内容分析（标签、分类、封面、按帧标签）；
    /// 10. 内容识别（视频片头片尾、人脸、文本全文、文本关键词、语音全文、语音关键词、物体）。
    /// 如使用事件通知，事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)。
    @inlinable
    public func processMedia(_ input: ProcessMediaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ProcessMediaResponse {
        try await self.client.execute(action: "ProcessMedia", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 视频处理
    ///
    /// 对点播中的音视频媒体发起处理任务，功能包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频截取一张图做封面；
    /// 7. 对视频转自适应码流（并加密）；
    /// 8. 内容审核（令人反感的信息、不安全的信息、不适宜的信息）；
    /// 9. 内容分析（标签、分类、封面、按帧标签）；
    /// 10. 内容识别（视频片头片尾、人脸、文本全文、文本关键词、语音全文、语音关键词、物体）。
    /// 如使用事件通知，事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)。
    @inlinable
    public func processMedia(fileId: String, subAppId: UInt64? = nil, mediaProcessTask: MediaProcessTaskInput? = nil, aiContentReviewTask: AiContentReviewTaskInput? = nil, aiAnalysisTask: AiAnalysisTaskInput? = nil, aiRecognitionTask: AiRecognitionTaskInput? = nil, tasksPriority: Int64? = nil, tasksNotifyMode: String? = nil, sessionContext: String? = nil, sessionId: String? = nil, extInfo: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ProcessMediaResponse> {
        self.processMedia(ProcessMediaRequest(fileId: fileId, subAppId: subAppId, mediaProcessTask: mediaProcessTask, aiContentReviewTask: aiContentReviewTask, aiAnalysisTask: aiAnalysisTask, aiRecognitionTask: aiRecognitionTask, tasksPriority: tasksPriority, tasksNotifyMode: tasksNotifyMode, sessionContext: sessionContext, sessionId: sessionId, extInfo: extInfo), logger: logger, on: eventLoop)
    }

    /// 视频处理
    ///
    /// 对点播中的音视频媒体发起处理任务，功能包括：
    /// 1. 视频转码（带水印）；
    /// 2. 视频转动图；
    /// 3. 对视频按指定时间点截图；
    /// 4. 对视频采样截图；
    /// 5. 对视频截图雪碧图；
    /// 6. 对视频截取一张图做封面；
    /// 7. 对视频转自适应码流（并加密）；
    /// 8. 内容审核（令人反感的信息、不安全的信息、不适宜的信息）；
    /// 9. 内容分析（标签、分类、封面、按帧标签）；
    /// 10. 内容识别（视频片头片尾、人脸、文本全文、文本关键词、语音全文、语音关键词、物体）。
    /// 如使用事件通知，事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)。
    @inlinable
    public func processMedia(fileId: String, subAppId: UInt64? = nil, mediaProcessTask: MediaProcessTaskInput? = nil, aiContentReviewTask: AiContentReviewTaskInput? = nil, aiAnalysisTask: AiAnalysisTaskInput? = nil, aiRecognitionTask: AiRecognitionTaskInput? = nil, tasksPriority: Int64? = nil, tasksNotifyMode: String? = nil, sessionContext: String? = nil, sessionId: String? = nil, extInfo: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ProcessMediaResponse {
        try await self.processMedia(ProcessMediaRequest(fileId: fileId, subAppId: subAppId, mediaProcessTask: mediaProcessTask, aiContentReviewTask: aiContentReviewTask, aiAnalysisTask: aiAnalysisTask, aiRecognitionTask: aiRecognitionTask, tasksPriority: tasksPriority, tasksNotifyMode: tasksNotifyMode, sessionContext: sessionContext, sessionId: sessionId, extInfo: extInfo), logger: logger, on: eventLoop)
    }
}
