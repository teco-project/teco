//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// DescribeWatermarkTemplates请求参数结构体
    public struct DescribeWatermarkTemplatesRequest: TCRequestModel {
        /// <b>点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?

        /// 水印类型过滤条件，可选值：
        /// <li>image：图片水印；</li>
        /// <li>text：文字水印；</li>
        /// <li>svg：SVG 水印。</li>
        public let type: String?

        /// 分页偏移量，默认值：0。
        public let offset: UInt64?

        /// 水印模板唯一标识过滤条件，数组长度限制：100。
        public let definitions: [Int64]?

        /// 返回记录条数
        /// <li>默认值：10；</li>
        /// <li>最大值：100。</li>
        public let limit: UInt64?

        public init(subAppId: UInt64? = nil, type: String? = nil, offset: UInt64? = nil, definitions: [Int64]? = nil, limit: UInt64? = nil) {
            self.subAppId = subAppId
            self.type = type
            self.offset = offset
            self.definitions = definitions
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case subAppId = "SubAppId"
            case type = "Type"
            case offset = "Offset"
            case definitions = "Definitions"
            case limit = "Limit"
        }
    }

    /// DescribeWatermarkTemplates返回参数结构体
    public struct DescribeWatermarkTemplatesResponse: TCResponseModel {
        /// 符合过滤条件的记录总数。
        public let totalCount: UInt64

        /// 水印模板详情列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let watermarkTemplateSet: [WatermarkTemplate]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case watermarkTemplateSet = "WatermarkTemplateSet"
            case requestId = "RequestId"
        }
    }

    /// 获取水印模板列表
    ///
    /// 查询用户自定义水印模板，支持根据条件，分页查询。
    @inlinable
    public func describeWatermarkTemplates(_ input: DescribeWatermarkTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWatermarkTemplatesResponse> {
        self.client.execute(action: "DescribeWatermarkTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取水印模板列表
    ///
    /// 查询用户自定义水印模板，支持根据条件，分页查询。
    @inlinable
    public func describeWatermarkTemplates(_ input: DescribeWatermarkTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWatermarkTemplatesResponse {
        try await self.client.execute(action: "DescribeWatermarkTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取水印模板列表
    ///
    /// 查询用户自定义水印模板，支持根据条件，分页查询。
    @inlinable
    public func describeWatermarkTemplates(subAppId: UInt64? = nil, type: String? = nil, offset: UInt64? = nil, definitions: [Int64]? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWatermarkTemplatesResponse> {
        self.describeWatermarkTemplates(DescribeWatermarkTemplatesRequest(subAppId: subAppId, type: type, offset: offset, definitions: definitions, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取水印模板列表
    ///
    /// 查询用户自定义水印模板，支持根据条件，分页查询。
    @inlinable
    public func describeWatermarkTemplates(subAppId: UInt64? = nil, type: String? = nil, offset: UInt64? = nil, definitions: [Int64]? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWatermarkTemplatesResponse {
        try await self.describeWatermarkTemplates(DescribeWatermarkTemplatesRequest(subAppId: subAppId, type: type, offset: offset, definitions: definitions, limit: limit), region: region, logger: logger, on: eventLoop)
    }
}
