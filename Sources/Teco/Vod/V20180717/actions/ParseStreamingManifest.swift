//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// ParseStreamingManifest请求参数结构体
    public struct ParseStreamingManifestRequest: TCRequestModel {
        /// 待解析的索引文件内容。
        public let mediaManifestContent: String

        /// 视频索引文件格式。默认 m3u8 格式。
        /// <li>m3u8</li>
        /// <li>mpd</li>
        public let manifestType: String?

        public init(mediaManifestContent: String, manifestType: String? = nil) {
            self.mediaManifestContent = mediaManifestContent
            self.manifestType = manifestType
        }

        enum CodingKeys: String, CodingKey {
            case mediaManifestContent = "MediaManifestContent"
            case manifestType = "ManifestType"
        }
    }

    /// ParseStreamingManifest返回参数结构体
    public struct ParseStreamingManifestResponse: TCResponseModel {
        /// 分片文件列表。
        public let mediaSegmentSet: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case mediaSegmentSet = "MediaSegmentSet"
            case requestId = "RequestId"
        }
    }

    /// 解析视频索引文件
    ///
    /// 上传 HLS 视频时，解析索引文件内容，返回待上传的分片文件列表。分片文件路径必须是当前目录或子目录的相对路径，不能是 URL，不能是绝对路径。
    @inlinable
    public func parseStreamingManifest(_ input: ParseStreamingManifestRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ParseStreamingManifestResponse> {
        self.client.execute(action: "ParseStreamingManifest", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 解析视频索引文件
    ///
    /// 上传 HLS 视频时，解析索引文件内容，返回待上传的分片文件列表。分片文件路径必须是当前目录或子目录的相对路径，不能是 URL，不能是绝对路径。
    @inlinable
    public func parseStreamingManifest(_ input: ParseStreamingManifestRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ParseStreamingManifestResponse {
        try await self.client.execute(action: "ParseStreamingManifest", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 解析视频索引文件
    ///
    /// 上传 HLS 视频时，解析索引文件内容，返回待上传的分片文件列表。分片文件路径必须是当前目录或子目录的相对路径，不能是 URL，不能是绝对路径。
    @inlinable
    public func parseStreamingManifest(mediaManifestContent: String, manifestType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ParseStreamingManifestResponse> {
        self.parseStreamingManifest(.init(mediaManifestContent: mediaManifestContent, manifestType: manifestType), region: region, logger: logger, on: eventLoop)
    }

    /// 解析视频索引文件
    ///
    /// 上传 HLS 视频时，解析索引文件内容，返回待上传的分片文件列表。分片文件路径必须是当前目录或子目录的相对路径，不能是 URL，不能是绝对路径。
    @inlinable
    public func parseStreamingManifest(mediaManifestContent: String, manifestType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ParseStreamingManifestResponse {
        try await self.parseStreamingManifest(.init(mediaManifestContent: mediaManifestContent, manifestType: manifestType), region: region, logger: logger, on: eventLoop)
    }
}
