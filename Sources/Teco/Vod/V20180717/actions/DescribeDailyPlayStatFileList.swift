//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vod {
    /// DescribeDailyPlayStatFileList请求参数结构体
    public struct DescribeDailyPlayStatFileListRequest: TCRequestModel {
        /// 起始日期，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let startTime: String

        /// 结束日期，使用 [ISO 日期格式](https://cloud.tencent.com/document/product/266/11732#I)。
        public let endTime: String

        /// <b>点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?

        public init(startTime: String, endTime: String, subAppId: UInt64? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.subAppId = subAppId
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case subAppId = "SubAppId"
        }
    }

    /// DescribeDailyPlayStatFileList返回参数结构体
    public struct DescribeDailyPlayStatFileListResponse: TCResponseModel {
        /// 播放统计文件列表。
        public let playStatFileSet: [PlayStatFileInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case playStatFileSet = "PlayStatFileSet"
            case requestId = "RequestId"
        }
    }

    /// 查询播放统计文件下载列表
    ///
    /// 该接口用于查询播放统计文件的下载地址。
    /// * 可以查询最近一年的播放统计文件下载地址，查询的起始日期和结束日期的时间跨度不超过90天。
    /// * 云点播每天对前一天的 CDN 请求日志进行分析处理，生成播放统计文件。
    /// * 播放统计文件内容包含媒体文件的播放次数、播放流量等统计信息。
    /// * 播放次数统计说明：
    ///     1. HLS 文件：访问M3U8 文件时统计播放次数；访问TS 文件不统计播放次数。
    ///     2. 其它文件（如 MP4 文件）：播放请求带有 range 参数且 range 的 start 参数不等于0时不统计播放次数，其它情况统计播放次数。
    /// * 播放设备的统计：播放请求带了 UserAgent 参数，并且 UserAgent 包含 Android 或者 iPhone 等标识，会统计为移动端播放次数，否则统计为 PC 端播放次数。
    @inlinable
    public func describeDailyPlayStatFileList(_ input: DescribeDailyPlayStatFileListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDailyPlayStatFileListResponse> {
        self.client.execute(action: "DescribeDailyPlayStatFileList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询播放统计文件下载列表
    ///
    /// 该接口用于查询播放统计文件的下载地址。
    /// * 可以查询最近一年的播放统计文件下载地址，查询的起始日期和结束日期的时间跨度不超过90天。
    /// * 云点播每天对前一天的 CDN 请求日志进行分析处理，生成播放统计文件。
    /// * 播放统计文件内容包含媒体文件的播放次数、播放流量等统计信息。
    /// * 播放次数统计说明：
    ///     1. HLS 文件：访问M3U8 文件时统计播放次数；访问TS 文件不统计播放次数。
    ///     2. 其它文件（如 MP4 文件）：播放请求带有 range 参数且 range 的 start 参数不等于0时不统计播放次数，其它情况统计播放次数。
    /// * 播放设备的统计：播放请求带了 UserAgent 参数，并且 UserAgent 包含 Android 或者 iPhone 等标识，会统计为移动端播放次数，否则统计为 PC 端播放次数。
    @inlinable
    public func describeDailyPlayStatFileList(_ input: DescribeDailyPlayStatFileListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDailyPlayStatFileListResponse {
        try await self.client.execute(action: "DescribeDailyPlayStatFileList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询播放统计文件下载列表
    ///
    /// 该接口用于查询播放统计文件的下载地址。
    /// * 可以查询最近一年的播放统计文件下载地址，查询的起始日期和结束日期的时间跨度不超过90天。
    /// * 云点播每天对前一天的 CDN 请求日志进行分析处理，生成播放统计文件。
    /// * 播放统计文件内容包含媒体文件的播放次数、播放流量等统计信息。
    /// * 播放次数统计说明：
    ///     1. HLS 文件：访问M3U8 文件时统计播放次数；访问TS 文件不统计播放次数。
    ///     2. 其它文件（如 MP4 文件）：播放请求带有 range 参数且 range 的 start 参数不等于0时不统计播放次数，其它情况统计播放次数。
    /// * 播放设备的统计：播放请求带了 UserAgent 参数，并且 UserAgent 包含 Android 或者 iPhone 等标识，会统计为移动端播放次数，否则统计为 PC 端播放次数。
    @inlinable
    public func describeDailyPlayStatFileList(startTime: String, endTime: String, subAppId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDailyPlayStatFileListResponse> {
        self.describeDailyPlayStatFileList(.init(startTime: startTime, endTime: endTime, subAppId: subAppId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询播放统计文件下载列表
    ///
    /// 该接口用于查询播放统计文件的下载地址。
    /// * 可以查询最近一年的播放统计文件下载地址，查询的起始日期和结束日期的时间跨度不超过90天。
    /// * 云点播每天对前一天的 CDN 请求日志进行分析处理，生成播放统计文件。
    /// * 播放统计文件内容包含媒体文件的播放次数、播放流量等统计信息。
    /// * 播放次数统计说明：
    ///     1. HLS 文件：访问M3U8 文件时统计播放次数；访问TS 文件不统计播放次数。
    ///     2. 其它文件（如 MP4 文件）：播放请求带有 range 参数且 range 的 start 参数不等于0时不统计播放次数，其它情况统计播放次数。
    /// * 播放设备的统计：播放请求带了 UserAgent 参数，并且 UserAgent 包含 Android 或者 iPhone 等标识，会统计为移动端播放次数，否则统计为 PC 端播放次数。
    @inlinable
    public func describeDailyPlayStatFileList(startTime: String, endTime: String, subAppId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDailyPlayStatFileListResponse {
        try await self.describeDailyPlayStatFileList(.init(startTime: startTime, endTime: endTime, subAppId: subAppId), region: region, logger: logger, on: eventLoop)
    }
}
