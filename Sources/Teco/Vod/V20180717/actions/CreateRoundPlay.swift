//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Vod {
    /// CreateRoundPlay请求参数结构体
    public struct CreateRoundPlayRequest: TCRequestModel {
        /// 启播时间，格式按照 ISO 8601标准表示，详见 [ISO 日期格式说明](https://cloud.tencent.com/document/product/266/11732#52)。
        public let startTime: String

        /// 轮播列表。
        /// - 数组长度限制：100。
        public let roundPlaylist: [RoundPlayListItemInfo]

        /// **点播 [子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。**
        public let subAppId: UInt64?

        /// 轮播播单名称，长度限制：64 个字符。
        public let name: String?

        /// 轮播播单描述信息，长度限制：256 个字符。
        public let desc: String?

        /// 播放模式，可选值：
        /// - Loop：循环播放播单；
        /// - Linear：单次播放，播单播放完停止播放。
        ///
        /// 默认值：Loop。
        public let playBackMode: String?

        public init(startTime: String, roundPlaylist: [RoundPlayListItemInfo], subAppId: UInt64? = nil, name: String? = nil, desc: String? = nil, playBackMode: String? = nil) {
            self.startTime = startTime
            self.roundPlaylist = roundPlaylist
            self.subAppId = subAppId
            self.name = name
            self.desc = desc
            self.playBackMode = playBackMode
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case roundPlaylist = "RoundPlaylist"
            case subAppId = "SubAppId"
            case name = "Name"
            case desc = "Desc"
            case playBackMode = "PlayBackMode"
        }
    }

    /// CreateRoundPlay返回参数结构体
    public struct CreateRoundPlayResponse: TCResponseModel {
        /// 轮播播单唯一标识。
        public let roundPlayId: String

        /// 轮播播放地址。
        public let url: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case roundPlayId = "RoundPlayId"
            case url = "Url"
            case requestId = "RequestId"
        }
    }

    /// 创建轮播播单
    ///
    /// 该接口用于创建轮播播单，数量上限：100。
    /// 轮播播单的每个文件可以指定源文件，也可以指定某个转码文件。
    /// 指定的文件必须是hls格式，所有的播单文件最好保持相同的码率和分辨率。
    @inlinable
    public func createRoundPlay(_ input: CreateRoundPlayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRoundPlayResponse> {
        self.client.execute(action: "CreateRoundPlay", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建轮播播单
    ///
    /// 该接口用于创建轮播播单，数量上限：100。
    /// 轮播播单的每个文件可以指定源文件，也可以指定某个转码文件。
    /// 指定的文件必须是hls格式，所有的播单文件最好保持相同的码率和分辨率。
    @inlinable
    public func createRoundPlay(_ input: CreateRoundPlayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRoundPlayResponse {
        try await self.client.execute(action: "CreateRoundPlay", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建轮播播单
    ///
    /// 该接口用于创建轮播播单，数量上限：100。
    /// 轮播播单的每个文件可以指定源文件，也可以指定某个转码文件。
    /// 指定的文件必须是hls格式，所有的播单文件最好保持相同的码率和分辨率。
    @inlinable
    public func createRoundPlay(startTime: String, roundPlaylist: [RoundPlayListItemInfo], subAppId: UInt64? = nil, name: String? = nil, desc: String? = nil, playBackMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRoundPlayResponse> {
        self.createRoundPlay(.init(startTime: startTime, roundPlaylist: roundPlaylist, subAppId: subAppId, name: name, desc: desc, playBackMode: playBackMode), region: region, logger: logger, on: eventLoop)
    }

    /// 创建轮播播单
    ///
    /// 该接口用于创建轮播播单，数量上限：100。
    /// 轮播播单的每个文件可以指定源文件，也可以指定某个转码文件。
    /// 指定的文件必须是hls格式，所有的播单文件最好保持相同的码率和分辨率。
    @inlinable
    public func createRoundPlay(startTime: String, roundPlaylist: [RoundPlayListItemInfo], subAppId: UInt64? = nil, name: String? = nil, desc: String? = nil, playBackMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRoundPlayResponse {
        try await self.createRoundPlay(.init(startTime: startTime, roundPlaylist: roundPlaylist, subAppId: subAppId, name: name, desc: desc, playBackMode: playBackMode), region: region, logger: logger, on: eventLoop)
    }
}
