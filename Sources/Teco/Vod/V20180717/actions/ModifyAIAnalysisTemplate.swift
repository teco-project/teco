//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// ModifyAIAnalysisTemplate请求参数结构体
    public struct ModifyAIAnalysisTemplateRequest: TCRequestModel {
        /// 音视频内容分析模板唯一标识。
        public let definition: Int64

        /// <b>点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?

        /// 音视频内容分析模板名称，长度限制：64 个字符。
        public let name: String?

        /// 音视频内容分析模板描述信息，长度限制：256 个字符。
        public let comment: String?

        /// 智能分类任务控制参数。
        public let classificationConfigure: ClassificationConfigureInfoForUpdate?

        /// 智能标签任务控制参数。
        public let tagConfigure: TagConfigureInfoForUpdate?

        /// 智能封面任务控制参数。
        public let coverConfigure: CoverConfigureInfoForUpdate?

        /// 智能按帧标签任务控制参数。
        public let frameTagConfigure: FrameTagConfigureInfoForUpdate?

        /// 智能精彩集锦任务控制参数。
        public let highlightConfigure: HighlightsConfigureInfoForUpdate?

        public init(definition: Int64, subAppId: UInt64? = nil, name: String? = nil, comment: String? = nil, classificationConfigure: ClassificationConfigureInfoForUpdate? = nil, tagConfigure: TagConfigureInfoForUpdate? = nil, coverConfigure: CoverConfigureInfoForUpdate? = nil, frameTagConfigure: FrameTagConfigureInfoForUpdate? = nil, highlightConfigure: HighlightsConfigureInfoForUpdate? = nil) {
            self.definition = definition
            self.subAppId = subAppId
            self.name = name
            self.comment = comment
            self.classificationConfigure = classificationConfigure
            self.tagConfigure = tagConfigure
            self.coverConfigure = coverConfigure
            self.frameTagConfigure = frameTagConfigure
            self.highlightConfigure = highlightConfigure
        }

        enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case subAppId = "SubAppId"
            case name = "Name"
            case comment = "Comment"
            case classificationConfigure = "ClassificationConfigure"
            case tagConfigure = "TagConfigure"
            case coverConfigure = "CoverConfigure"
            case frameTagConfigure = "FrameTagConfigure"
            case highlightConfigure = "HighlightConfigure"
        }
    }

    /// ModifyAIAnalysisTemplate返回参数结构体
    public struct ModifyAIAnalysisTemplateResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改音视频内容分析模板
    ///
    /// 修改用户自定义音视频内容分析模板。
    /// 注意：模板 ID 10000 以下的为系统预置模板，不允许修改。
    @inlinable
    public func modifyAIAnalysisTemplate(_ input: ModifyAIAnalysisTemplateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAIAnalysisTemplateResponse> {
        self.client.execute(action: "ModifyAIAnalysisTemplate", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改音视频内容分析模板
    ///
    /// 修改用户自定义音视频内容分析模板。
    /// 注意：模板 ID 10000 以下的为系统预置模板，不允许修改。
    @inlinable
    public func modifyAIAnalysisTemplate(_ input: ModifyAIAnalysisTemplateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAIAnalysisTemplateResponse {
        try await self.client.execute(action: "ModifyAIAnalysisTemplate", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改音视频内容分析模板
    ///
    /// 修改用户自定义音视频内容分析模板。
    /// 注意：模板 ID 10000 以下的为系统预置模板，不允许修改。
    @inlinable
    public func modifyAIAnalysisTemplate(definition: Int64, subAppId: UInt64? = nil, name: String? = nil, comment: String? = nil, classificationConfigure: ClassificationConfigureInfoForUpdate? = nil, tagConfigure: TagConfigureInfoForUpdate? = nil, coverConfigure: CoverConfigureInfoForUpdate? = nil, frameTagConfigure: FrameTagConfigureInfoForUpdate? = nil, highlightConfigure: HighlightsConfigureInfoForUpdate? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAIAnalysisTemplateResponse> {
        self.modifyAIAnalysisTemplate(ModifyAIAnalysisTemplateRequest(definition: definition, subAppId: subAppId, name: name, comment: comment, classificationConfigure: classificationConfigure, tagConfigure: tagConfigure, coverConfigure: coverConfigure, frameTagConfigure: frameTagConfigure, highlightConfigure: highlightConfigure), logger: logger, on: eventLoop)
    }

    /// 修改音视频内容分析模板
    ///
    /// 修改用户自定义音视频内容分析模板。
    /// 注意：模板 ID 10000 以下的为系统预置模板，不允许修改。
    @inlinable
    public func modifyAIAnalysisTemplate(definition: Int64, subAppId: UInt64? = nil, name: String? = nil, comment: String? = nil, classificationConfigure: ClassificationConfigureInfoForUpdate? = nil, tagConfigure: TagConfigureInfoForUpdate? = nil, coverConfigure: CoverConfigureInfoForUpdate? = nil, frameTagConfigure: FrameTagConfigureInfoForUpdate? = nil, highlightConfigure: HighlightsConfigureInfoForUpdate? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAIAnalysisTemplateResponse {
        try await self.modifyAIAnalysisTemplate(ModifyAIAnalysisTemplateRequest(definition: definition, subAppId: subAppId, name: name, comment: comment, classificationConfigure: classificationConfigure, tagConfigure: tagConfigure, coverConfigure: coverConfigure, frameTagConfigure: frameTagConfigure, highlightConfigure: highlightConfigure), logger: logger, on: eventLoop)
    }
}
