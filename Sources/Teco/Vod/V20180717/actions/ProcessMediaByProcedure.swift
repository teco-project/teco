//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Vod {
    /// ProcessMediaByProcedure请求参数结构体
    public struct ProcessMediaByProcedureRequest: TCRequestModel {
        /// 媒体文件 ID。
        public let fileId: String

        /// [任务流模板](/document/product/266/11700#.E4.BB.BB.E5.8A.A1.E6.B5.81.E6.A8.A1.E6.9D.BF)名字。
        public let procedureName: String

        /// <b>点播[子应用](/document/product/266/14574) ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。</b>
        public let subAppId: UInt64?

        /// 任务流的优先级，数值越大优先级越高，取值范围是-10到10，不填代表0。
        public let tasksPriority: Int64?

        /// 任务流状态变更通知模式，可取值有 Finish，Change 和 None，不填代表 Finish。
        public let tasksNotifyMode: String?

        /// 来源上下文，用于透传用户请求信息，任务流状态变更回调将返回该字段值，最长 1000 个字符。
        public let sessionContext: String?

        /// 用于去重的识别码，如果三天内曾有过相同的识别码的请求，则本次的请求会返回错误。最长 50 个字符，不带或者带空字符串表示不做去重。
        public let sessionId: String?

        /// 保留字段，特殊用途时使用。
        public let extInfo: String?

        public init(fileId: String, procedureName: String, subAppId: UInt64? = nil, tasksPriority: Int64? = nil, tasksNotifyMode: String? = nil, sessionContext: String? = nil, sessionId: String? = nil, extInfo: String? = nil) {
            self.fileId = fileId
            self.procedureName = procedureName
            self.subAppId = subAppId
            self.tasksPriority = tasksPriority
            self.tasksNotifyMode = tasksNotifyMode
            self.sessionContext = sessionContext
            self.sessionId = sessionId
            self.extInfo = extInfo
        }

        enum CodingKeys: String, CodingKey {
            case fileId = "FileId"
            case procedureName = "ProcedureName"
            case subAppId = "SubAppId"
            case tasksPriority = "TasksPriority"
            case tasksNotifyMode = "TasksNotifyMode"
            case sessionContext = "SessionContext"
            case sessionId = "SessionId"
            case extInfo = "ExtInfo"
        }
    }

    /// ProcessMediaByProcedure返回参数结构体
    public struct ProcessMediaByProcedureResponse: TCResponseModel {
        /// 任务类型为 Procedure 的任务 ID，当入参 ProcedureName 对应的任务流模板指定了 MediaProcessTask、AiAnalysisTask、AiRecognitionTask 中的一个或多个时发起该任务。
        public let taskId: String

        /// 任务类型为 ReviewAudioVideo 的任务 ID，当入参 ProcedureName 对应的任务流模板指定了 ReviewAudioVideoTask 时，发起该任务。
        public let reviewAudioVideoTaskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case reviewAudioVideoTaskId = "ReviewAudioVideoTaskId"
            case requestId = "RequestId"
        }
    }

    /// 使用任务流模板进行视频处理
    ///
    /// 使用任务流模板，对点播中的视频发起处理任务。
    /// 有两种方式创建任务流模板：
    /// 1. 在控制台上创建和修改任务流模板；
    /// 2. 通过任务流模板接口创建任务流模板。
    ///
    /// 如使用事件通知，除音视频审核任务外的事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)；音视频审核任务事件通知的类型为 [音视频审核完成](https://cloud.tencent.com/document/product/266/81258)。
    @inlinable
    public func processMediaByProcedure(_ input: ProcessMediaByProcedureRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ProcessMediaByProcedureResponse> {
        self.client.execute(action: "ProcessMediaByProcedure", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 使用任务流模板进行视频处理
    ///
    /// 使用任务流模板，对点播中的视频发起处理任务。
    /// 有两种方式创建任务流模板：
    /// 1. 在控制台上创建和修改任务流模板；
    /// 2. 通过任务流模板接口创建任务流模板。
    ///
    /// 如使用事件通知，除音视频审核任务外的事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)；音视频审核任务事件通知的类型为 [音视频审核完成](https://cloud.tencent.com/document/product/266/81258)。
    @inlinable
    public func processMediaByProcedure(_ input: ProcessMediaByProcedureRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ProcessMediaByProcedureResponse {
        try await self.client.execute(action: "ProcessMediaByProcedure", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 使用任务流模板进行视频处理
    ///
    /// 使用任务流模板，对点播中的视频发起处理任务。
    /// 有两种方式创建任务流模板：
    /// 1. 在控制台上创建和修改任务流模板；
    /// 2. 通过任务流模板接口创建任务流模板。
    ///
    /// 如使用事件通知，除音视频审核任务外的事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)；音视频审核任务事件通知的类型为 [音视频审核完成](https://cloud.tencent.com/document/product/266/81258)。
    @inlinable
    public func processMediaByProcedure(fileId: String, procedureName: String, subAppId: UInt64? = nil, tasksPriority: Int64? = nil, tasksNotifyMode: String? = nil, sessionContext: String? = nil, sessionId: String? = nil, extInfo: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ProcessMediaByProcedureResponse> {
        self.processMediaByProcedure(ProcessMediaByProcedureRequest(fileId: fileId, procedureName: procedureName, subAppId: subAppId, tasksPriority: tasksPriority, tasksNotifyMode: tasksNotifyMode, sessionContext: sessionContext, sessionId: sessionId, extInfo: extInfo), region: region, logger: logger, on: eventLoop)
    }

    /// 使用任务流模板进行视频处理
    ///
    /// 使用任务流模板，对点播中的视频发起处理任务。
    /// 有两种方式创建任务流模板：
    /// 1. 在控制台上创建和修改任务流模板；
    /// 2. 通过任务流模板接口创建任务流模板。
    ///
    /// 如使用事件通知，除音视频审核任务外的事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)；音视频审核任务事件通知的类型为 [音视频审核完成](https://cloud.tencent.com/document/product/266/81258)。
    @inlinable
    public func processMediaByProcedure(fileId: String, procedureName: String, subAppId: UInt64? = nil, tasksPriority: Int64? = nil, tasksNotifyMode: String? = nil, sessionContext: String? = nil, sessionId: String? = nil, extInfo: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ProcessMediaByProcedureResponse {
        try await self.processMediaByProcedure(ProcessMediaByProcedureRequest(fileId: fileId, procedureName: procedureName, subAppId: subAppId, tasksPriority: tasksPriority, tasksNotifyMode: tasksNotifyMode, sessionContext: sessionContext, sessionId: sessionId, extInfo: extInfo), region: region, logger: logger, on: eventLoop)
    }
}
