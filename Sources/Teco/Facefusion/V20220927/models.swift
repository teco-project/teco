//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Facefusion {
    /// 人脸信息
    public struct FaceInfo: TCOutputModel {
        /// 人脸框的横坐标
        public let x: Int64

        /// 人脸框的纵坐标
        public let y: Int64

        /// 人脸框的宽度
        public let width: Int64

        /// 人脸框的高度
        public let height: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 人脸框信息
    public struct FaceRect: TCInputModel {
        /// 人脸框左上角横坐标。
        public let x: Int64

        /// 人脸框左上角纵坐标。
        public let y: Int64

        /// 人脸框宽度。
        public let width: Int64

        /// 人脸框高度。
        public let height: Int64

        public init(x: Int64, y: Int64, width: Int64, height: Int64) {
            self.x = x
            self.y = y
            self.width = width
            self.height = height
        }

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// logo参数
    public struct LogoParam: TCInputModel {
        /// 标识图片位于融合结果图中的坐标，将按照坐标对标识图片进行位置和大小的拉伸匹配
        public let logoRect: FaceRect

        /// 标识图片Url地址
        public let logoUrl: String?

        /// 标识图片base64
        public let logoImage: String?

        public init(logoRect: FaceRect, logoUrl: String? = nil, logoImage: String? = nil) {
            self.logoRect = logoRect
            self.logoUrl = logoUrl
            self.logoImage = logoImage
        }

        enum CodingKeys: String, CodingKey {
            case logoRect = "LogoRect"
            case logoUrl = "LogoUrl"
            case logoImage = "LogoImage"
        }
    }

    /// 人脸信息
    public struct MaterialFaces: TCInputModel, TCOutputModel {
        /// 人脸序号
        public let faceId: String?

        /// 人脸框信息
        public let faceInfo: FaceInfo?

        public init(faceId: String? = nil, faceInfo: FaceInfo? = nil) {
            self.faceId = faceId
            self.faceInfo = faceInfo
        }

        enum CodingKeys: String, CodingKey {
            case faceId = "FaceId"
            case faceInfo = "FaceInfo"
        }
    }

    /// 人脸图片和待被融合的素材模板图的人脸位置信息。
    public struct MergeInfo: TCInputModel {
        /// 输入图片base64
        public let image: String?

        /// 输入图片url
        public let url: String?

        /// 上传的图片人脸位置信息（人脸框）
        public let inputImageFaceRect: FaceRect?

        /// 控制台上传的素材人脸ID，不填默认取最大人脸
        public let templateFaceID: String?

        public init(image: String? = nil, url: String? = nil, inputImageFaceRect: FaceRect? = nil, templateFaceID: String? = nil) {
            self.image = image
            self.url = url
            self.inputImageFaceRect = inputImageFaceRect
            self.templateFaceID = templateFaceID
        }

        enum CodingKeys: String, CodingKey {
            case image = "Image"
            case url = "Url"
            case inputImageFaceRect = "InputImageFaceRect"
            case templateFaceID = "TemplateFaceID"
        }
    }

    /// 素材信息
    public struct PublicMaterialInfos: TCOutputModel {
        /// 素材Id
        public let materialId: String

        /// 素材状态
        public let materialStatus: Int64

        /// 创建时间
        public let createTime: String

        /// 修改时间
        public let updateTime: String

        /// 人脸信息
        public let materialFaceList: [MaterialFaces]

        /// 素材名
        public let materialName: String

        enum CodingKeys: String, CodingKey {
            case materialId = "MaterialId"
            case materialStatus = "MaterialStatus"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case materialFaceList = "MaterialFaceList"
            case materialName = "MaterialName"
        }
    }
}
