//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCYinsudaError {
    public struct FailedOperation: TCYinsudaErrorType {
        enum Code: String {
            case duplicateTradeSerialNo = "FailedOperation.DuplicateTradeSerialNo"
            case userLiveVipTimeExpire = "FailedOperation.UserLiveVipTimeExpire"
            case userNotLiveVip = "FailedOperation.UserNotLiveVip"
            case other = "FailedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 交易流水号重复
        public static var duplicateTradeSerialNo: FailedOperation {
            FailedOperation(.duplicateTradeSerialNo)
        }

        /// 直播会员已经过期
        public static var userLiveVipTimeExpire: FailedOperation {
            FailedOperation(.userLiveVipTimeExpire)
        }

        /// 非直播会员用户
        public static var userNotLiveVip: FailedOperation {
            FailedOperation(.userNotLiveVip)
        }

        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }

        public func asYinsudaError() -> TCYinsudaError {
            let code: TCYinsudaError.Code
            switch self.error {
            case .duplicateTradeSerialNo:
                code = .failedOperation_DuplicateTradeSerialNo
            case .userLiveVipTimeExpire:
                code = .failedOperation_UserLiveVipTimeExpire
            case .userNotLiveVip:
                code = .failedOperation_UserNotLiveVip
            case .other:
                code = .failedOperation
            }
            return TCYinsudaError(code, context: self.context)
        }
    }
}
