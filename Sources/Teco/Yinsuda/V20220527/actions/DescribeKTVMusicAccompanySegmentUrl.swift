//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Yinsuda {
    /// DescribeKTVMusicAccompanySegmentUrl请求参数结构体
    public struct DescribeKTVMusicAccompanySegmentUrlRequest: TCRequestModel {
        /// 应用名称。
        public let appName: String

        /// 用户标识。
        public let userId: String

        /// 歌曲 Id 。
        public let musicId: String

        /// 播放场景。默认为Chat
        /// <li>Live：直播</li><li>Chat：语聊</li>
        public let playScene: String?

        /// 房间Id
        public let roomId: String?

        public init(appName: String, userId: String, musicId: String, playScene: String? = nil, roomId: String? = nil) {
            self.appName = appName
            self.userId = userId
            self.musicId = musicId
            self.playScene = playScene
            self.roomId = roomId
        }

        enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case userId = "UserId"
            case musicId = "MusicId"
            case playScene = "PlayScene"
            case roomId = "RoomId"
        }
    }

    /// DescribeKTVMusicAccompanySegmentUrl返回参数结构体
    public struct DescribeKTVMusicAccompanySegmentUrlResponse: TCResponseModel {
        /// 歌曲状态。
        /// 0：可用
        /// 1：下线
        /// 2：没权限
        /// 3：没伴奏
        /// 当返回2时，其他参数有可能全部为空
        public let status: Int64

        /// 伴奏链接
        public let url: String

        /// 伴奏类型，如mkv，mp3等
        public let extName: String

        /// 高潮开始时间
        public let segmentBegin: Int64

        /// 高潮结束时间
        public let segmentEnd: Int64

        /// 链接文件大小 单位 字节
        public let fileSize: Int64

        /// 其它片段时间（可用于抢唱）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let otherSegments: [KTVOtherSegments]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case url = "Url"
            case extName = "ExtName"
            case segmentBegin = "SegmentBegin"
            case segmentEnd = "SegmentEnd"
            case fileSize = "FileSize"
            case otherSegments = "OtherSegments"
            case requestId = "RequestId"
        }
    }

    /// 获取歌曲伴奏片段链接
    ///
    /// 获取歌曲伴奏片段链接，可用于抢唱
    @inlinable
    public func describeKTVMusicAccompanySegmentUrl(_ input: DescribeKTVMusicAccompanySegmentUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKTVMusicAccompanySegmentUrlResponse> {
        self.client.execute(action: "DescribeKTVMusicAccompanySegmentUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取歌曲伴奏片段链接
    ///
    /// 获取歌曲伴奏片段链接，可用于抢唱
    @inlinable
    public func describeKTVMusicAccompanySegmentUrl(_ input: DescribeKTVMusicAccompanySegmentUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVMusicAccompanySegmentUrlResponse {
        try await self.client.execute(action: "DescribeKTVMusicAccompanySegmentUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取歌曲伴奏片段链接
    ///
    /// 获取歌曲伴奏片段链接，可用于抢唱
    @inlinable
    public func describeKTVMusicAccompanySegmentUrl(appName: String, userId: String, musicId: String, playScene: String? = nil, roomId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKTVMusicAccompanySegmentUrlResponse> {
        self.describeKTVMusicAccompanySegmentUrl(.init(appName: appName, userId: userId, musicId: musicId, playScene: playScene, roomId: roomId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取歌曲伴奏片段链接
    ///
    /// 获取歌曲伴奏片段链接，可用于抢唱
    @inlinable
    public func describeKTVMusicAccompanySegmentUrl(appName: String, userId: String, musicId: String, playScene: String? = nil, roomId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVMusicAccompanySegmentUrlResponse {
        try await self.describeKTVMusicAccompanySegmentUrl(.init(appName: appName, userId: userId, musicId: musicId, playScene: playScene, roomId: roomId), region: region, logger: logger, on: eventLoop)
    }
}
