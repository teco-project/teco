//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Yinsuda {
    /// RechargeLiveVip请求参数结构体
    public struct RechargeLiveVipRequest: TCRequestModel {
        /// 应用名称。
        public let appName: String

        /// 用户标识。
        public let userId: String

        /// 交易流水号，用于标记此次充值记录，多次充值记录传入相同的 TradeSerialNo 会判断为失败，可用于防止重提提交造成重复计费。
        public let tradeSerialNo: String

        /// 房间标识。
        public let roomId: String

        /// 充值会员天数。
        /// 取值有：
        /// - 31
        /// - 93
        /// - 186
        /// - 372
        public let vipDays: Int64

        /// 充值分类。取值有：room_card-包月房卡; 其他-保留。
        public let giveType: String?

        /// 播放场景。默认为Live
        /// - Live：直播
        /// - Chat：语聊
        public let playScene: String?

        public init(appName: String, userId: String, tradeSerialNo: String, roomId: String, vipDays: Int64, giveType: String? = nil, playScene: String? = nil) {
            self.appName = appName
            self.userId = userId
            self.tradeSerialNo = tradeSerialNo
            self.roomId = roomId
            self.vipDays = vipDays
            self.giveType = giveType
            self.playScene = playScene
        }

        enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case userId = "UserId"
            case tradeSerialNo = "TradeSerialNo"
            case roomId = "RoomId"
            case vipDays = "VipDays"
            case giveType = "GiveType"
            case playScene = "PlayScene"
        }
    }

    /// RechargeLiveVip返回参数结构体
    public struct RechargeLiveVipResponse: TCResponseModel {
        /// 直播会员信息。
        public let liveVipUserInfo: LiveVipUserInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case liveVipUserInfo = "LiveVipUserInfo"
            case requestId = "RequestId"
        }
    }

    /// 充值直播会员
    ///
    /// 充值直播会员，使该用户可以在直播场景使用
    @inlinable
    public func rechargeLiveVip(_ input: RechargeLiveVipRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RechargeLiveVipResponse> {
        self.client.execute(action: "RechargeLiveVip", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 充值直播会员
    ///
    /// 充值直播会员，使该用户可以在直播场景使用
    @inlinable
    public func rechargeLiveVip(_ input: RechargeLiveVipRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RechargeLiveVipResponse {
        try await self.client.execute(action: "RechargeLiveVip", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 充值直播会员
    ///
    /// 充值直播会员，使该用户可以在直播场景使用
    @inlinable
    public func rechargeLiveVip(appName: String, userId: String, tradeSerialNo: String, roomId: String, vipDays: Int64, giveType: String? = nil, playScene: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RechargeLiveVipResponse> {
        self.rechargeLiveVip(.init(appName: appName, userId: userId, tradeSerialNo: tradeSerialNo, roomId: roomId, vipDays: vipDays, giveType: giveType, playScene: playScene), region: region, logger: logger, on: eventLoop)
    }

    /// 充值直播会员
    ///
    /// 充值直播会员，使该用户可以在直播场景使用
    @inlinable
    public func rechargeLiveVip(appName: String, userId: String, tradeSerialNo: String, roomId: String, vipDays: Int64, giveType: String? = nil, playScene: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RechargeLiveVipResponse {
        try await self.rechargeLiveVip(.init(appName: appName, userId: userId, tradeSerialNo: tradeSerialNo, roomId: roomId, vipDays: vipDays, giveType: giveType, playScene: playScene), region: region, logger: logger, on: eventLoop)
    }
}
