//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Yinsuda {
    /// SearchKTVMusics请求参数结构体
    public struct SearchKTVMusicsRequest: TCPaginatedRequest {
        /// 应用名称。
        public let appName: String

        /// 用户标识。
        public let userId: String

        /// 关键词。
        public let keyWord: String

        /// 滚动标记。
        public let scrollToken: String?

        /// 返回条数限制，默认 20，最大 50.
        public let limit: Int64?

        /// 权益过滤，取值有：
        /// <li>Play：可播；</li>
        /// <li>Sing：可唱。</li>
        public let rightFilters: [String]?

        public init(appName: String, userId: String, keyWord: String, scrollToken: String? = nil, limit: Int64? = nil, rightFilters: [String]? = nil) {
            self.appName = appName
            self.userId = userId
            self.keyWord = keyWord
            self.scrollToken = scrollToken
            self.limit = limit
            self.rightFilters = rightFilters
        }

        enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case userId = "UserId"
            case keyWord = "KeyWord"
            case scrollToken = "ScrollToken"
            case limit = "Limit"
            case rightFilters = "RightFilters"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: SearchKTVMusicsResponse) -> SearchKTVMusicsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return SearchKTVMusicsRequest(appName: self.appName, userId: self.userId, keyWord: self.keyWord, scrollToken: response.scrollToken, limit: self.limit, rightFilters: self.rightFilters)
        }
    }

    /// SearchKTVMusics返回参数结构体
    public struct SearchKTVMusicsResponse: TCPaginatedResponse {
        /// 歌曲信息列表。
        public let ktvMusicInfoSet: [KTVMusicBaseInfo]

        /// 滚动标记，用于设置下次请求的 ScrollToken 参数。
        public let scrollToken: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ktvMusicInfoSet = "KTVMusicInfoSet"
            case scrollToken = "ScrollToken"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [KTVMusicBaseInfo] {
            self.ktvMusicInfoSet
        }
    }

    /// 搜索歌曲
    ///
    /// 根据关键词搜索歌曲，返回相关歌曲列表。
    @inlinable
    public func searchKTVMusics(_ input: SearchKTVMusicsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchKTVMusicsResponse> {
        self.client.execute(action: "SearchKTVMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 搜索歌曲
    ///
    /// 根据关键词搜索歌曲，返回相关歌曲列表。
    @inlinable
    public func searchKTVMusics(_ input: SearchKTVMusicsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchKTVMusicsResponse {
        try await self.client.execute(action: "SearchKTVMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 搜索歌曲
    ///
    /// 根据关键词搜索歌曲，返回相关歌曲列表。
    @inlinable
    public func searchKTVMusics(appName: String, userId: String, keyWord: String, scrollToken: String? = nil, limit: Int64? = nil, rightFilters: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchKTVMusicsResponse> {
        let input = SearchKTVMusicsRequest(appName: appName, userId: userId, keyWord: keyWord, scrollToken: scrollToken, limit: limit, rightFilters: rightFilters)
        return self.client.execute(action: "SearchKTVMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 搜索歌曲
    ///
    /// 根据关键词搜索歌曲，返回相关歌曲列表。
    @inlinable
    public func searchKTVMusics(appName: String, userId: String, keyWord: String, scrollToken: String? = nil, limit: Int64? = nil, rightFilters: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchKTVMusicsResponse {
        let input = SearchKTVMusicsRequest(appName: appName, userId: userId, keyWord: keyWord, scrollToken: scrollToken, limit: limit, rightFilters: rightFilters)
        return try await self.client.execute(action: "SearchKTVMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
