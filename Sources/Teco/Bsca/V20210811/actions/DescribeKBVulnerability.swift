//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bsca {
    /// DescribeKBVulnerability请求参数结构体
    public struct DescribeKBVulnerabilityRequest: TCRequestModel {
        /// CVE ID列表（不能与Vul ID同时存在）
        public let cveid: [String]?

        /// Vul ID列表（不能与CVE ID 同时存在）
        public let vulID: [String]?

        public init(cveid: [String]? = nil, vulID: [String]? = nil) {
            self.cveid = cveid
            self.vulID = vulID
        }

        enum CodingKeys: String, CodingKey {
            case cveid = "CVEID"
            case vulID = "VulID"
        }
    }

    /// DescribeKBVulnerability返回参数结构体
    public struct DescribeKBVulnerabilityResponse: TCResponseModel {
        /// 漏洞详细信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vulnerabilityDetailList: [VulnerabilityUnion]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case vulnerabilityDetailList = "VulnerabilityDetailList"
            case requestId = "RequestId"
        }
    }

    /// 查询知识库漏洞详情列表
    ///
    /// 本接口(DescribeKBVulnerability)用于在知识库中查询漏洞详细信息，支持根据CVE ID查询或者根据Vul ID查询。
    @inlinable
    public func describeKBVulnerability(_ input: DescribeKBVulnerabilityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKBVulnerabilityResponse> {
        self.client.execute(action: "DescribeKBVulnerability", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询知识库漏洞详情列表
    ///
    /// 本接口(DescribeKBVulnerability)用于在知识库中查询漏洞详细信息，支持根据CVE ID查询或者根据Vul ID查询。
    @inlinable
    public func describeKBVulnerability(_ input: DescribeKBVulnerabilityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKBVulnerabilityResponse {
        try await self.client.execute(action: "DescribeKBVulnerability", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询知识库漏洞详情列表
    ///
    /// 本接口(DescribeKBVulnerability)用于在知识库中查询漏洞详细信息，支持根据CVE ID查询或者根据Vul ID查询。
    @inlinable
    public func describeKBVulnerability(cveid: [String]? = nil, vulID: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKBVulnerabilityResponse> {
        self.describeKBVulnerability(.init(cveid: cveid, vulID: vulID), region: region, logger: logger, on: eventLoop)
    }

    /// 查询知识库漏洞详情列表
    ///
    /// 本接口(DescribeKBVulnerability)用于在知识库中查询漏洞详细信息，支持根据CVE ID查询或者根据Vul ID查询。
    @inlinable
    public func describeKBVulnerability(cveid: [String]? = nil, vulID: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKBVulnerabilityResponse {
        try await self.describeKBVulnerability(.init(cveid: cveid, vulID: vulID), region: region, logger: logger, on: eventLoop)
    }
}
