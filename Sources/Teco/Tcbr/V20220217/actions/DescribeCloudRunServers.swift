//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Tcbr {
    /// DescribeCloudRunServers请求参数结构体
    public struct DescribeCloudRunServersRequest: TCPaginatedRequest {
        /// 环境Id
        public let envId: String

        /// 默认为9， 最大为30
        /// 不传或传0时 取默认9
        /// 大于30时取30
        public let pageSize: Int64?

        /// 不传或传0时 会默认为1
        public let pageNum: Int64?

        public init(envId: String, pageSize: Int64? = nil, pageNum: Int64? = nil) {
            self.envId = envId
            self.pageSize = pageSize
            self.pageNum = pageNum
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case pageSize = "PageSize"
            case pageNum = "PageNum"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeCloudRunServersResponse) -> DescribeCloudRunServersRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeCloudRunServersRequest(envId: self.envId, pageSize: self.pageSize, pageNum: (self.pageNum ?? 0) + 1)
        }
    }

    /// DescribeCloudRunServers返回参数结构体
    public struct DescribeCloudRunServersResponse: TCPaginatedResponse {
        /// 服务列表
        public let serverList: [ServerBaseInfo]

        /// 服务总数
        public let total: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case serverList = "ServerList"
            case total = "Total"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [ServerBaseInfo] {
            self.serverList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 查询云托管服务列表
    ///
    /// 查询云托管服务列表接口
    @inlinable
    public func describeCloudRunServers(_ input: DescribeCloudRunServersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudRunServersResponse> {
        self.client.execute(action: "DescribeCloudRunServers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云托管服务列表
    ///
    /// 查询云托管服务列表接口
    @inlinable
    public func describeCloudRunServers(_ input: DescribeCloudRunServersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudRunServersResponse {
        try await self.client.execute(action: "DescribeCloudRunServers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云托管服务列表
    ///
    /// 查询云托管服务列表接口
    @inlinable
    public func describeCloudRunServers(envId: String, pageSize: Int64? = nil, pageNum: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudRunServersResponse> {
        let input = DescribeCloudRunServersRequest(envId: envId, pageSize: pageSize, pageNum: pageNum)
        return self.client.execute(action: "DescribeCloudRunServers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云托管服务列表
    ///
    /// 查询云托管服务列表接口
    @inlinable
    public func describeCloudRunServers(envId: String, pageSize: Int64? = nil, pageNum: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudRunServersResponse {
        let input = DescribeCloudRunServersRequest(envId: envId, pageSize: pageSize, pageNum: pageNum)
        return try await self.client.execute(action: "DescribeCloudRunServers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云托管服务列表
    ///
    /// 查询云托管服务列表接口
    @inlinable
    public func describeCloudRunServersPaginated(_ input: DescribeCloudRunServersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [ServerBaseInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeCloudRunServers, logger: logger, on: eventLoop)
    }

    /// 查询云托管服务列表
    ///
    /// 查询云托管服务列表接口
    @inlinable @discardableResult
    public func describeCloudRunServersPaginated(_ input: DescribeCloudRunServersRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeCloudRunServersResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeCloudRunServers, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询云托管服务列表
    ///
    /// 查询云托管服务列表接口
    ///
    /// - Returns: `AsyncSequence`s of `ServerBaseInfo` and `DescribeCloudRunServersResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeCloudRunServersPaginator(_ input: DescribeCloudRunServersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeCloudRunServersRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeCloudRunServers, logger: logger, on: eventLoop)
    }
}
