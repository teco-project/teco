//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcbr {
    /// 创建环境
    ///
    /// 创建云托管环境，并开通资源。	
    @inlinable
    public func createCloudRunEnv(_ input: CreateCloudRunEnvRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateCloudRunEnvResponse > {
        self.client.execute(action: "CreateCloudRunEnv", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建环境
    ///
    /// 创建云托管环境，并开通资源。	
    @inlinable
    public func createCloudRunEnv(_ input: CreateCloudRunEnvRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudRunEnvResponse {
        try await self.client.execute(action: "CreateCloudRunEnv", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateCloudRunEnv请求参数结构体
    public struct CreateCloudRunEnvRequest: TCRequestModel {
        /// Trial,Standard,Professional,Enterprise
        public let packageType: String
        
        /// 环境别名，要以a-z开头，不能包含 a-z,0-9,- 以外的字符
        public let alias: String?
        
        /// 用户享有的免费额度级别，目前只能为“basic”，不传该字段或该字段为空，标识不享受免费额度。
        public let freeQuota: String?
        
        /// 订单标记。建议使用方统一转大小写之后再判断。
        /// QuickStart：快速启动来源
        /// Activity：活动来源
        public let flag: String?
        
        /// 私有网络Id
        public let vpcId: String?
        
        /// 子网列表
        public let subNetIds: [String]?
        
        /// 请求key 用于防重
        public let reqKey: String?
        
        /// 来源：wechat | cloud
        public let source: String?
        
        /// 渠道：wechat | cloud
        public let channel: String?
        
        public init (packageType: String, alias: String?, freeQuota: String?, flag: String?, vpcId: String?, subNetIds: [String]?, reqKey: String?, source: String?, channel: String?) {
            self.packageType = packageType
            self.alias = alias
            self.freeQuota = freeQuota
            self.flag = flag
            self.vpcId = vpcId
            self.subNetIds = subNetIds
            self.reqKey = reqKey
            self.source = source
            self.channel = channel
        }
        
        enum CodingKeys: String, CodingKey {
            case packageType = "PackageType"
            case alias = "Alias"
            case freeQuota = "FreeQuota"
            case flag = "Flag"
            case vpcId = "VpcId"
            case subNetIds = "SubNetIds"
            case reqKey = "ReqKey"
            case source = "Source"
            case channel = "Channel"
        }
    }
    
    /// CreateCloudRunEnv返回参数结构体
    public struct CreateCloudRunEnvResponse: TCResponseModel {
        /// 环境Id
        public let envId: String
        
        /// 后付费订单号
        public let tranId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case tranId = "TranId"
            case requestId = "RequestId"
        }
    }
}