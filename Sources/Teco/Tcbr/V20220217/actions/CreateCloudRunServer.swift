//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcbr {
    /// CreateCloudRunServer请求参数结构体
    public struct CreateCloudRunServerRequest: TCRequestModel {
        /// 环境Id
        public let envId: String
        
        /// 服务名
        public let serverName: String
        
        /// 部署信息
        public let deployInfo: DeployParam
        
        /// 服务配置信息
        public let serverConfig: ServerBaseConfig
        
        public init (envId: String, serverName: String, deployInfo: DeployParam, serverConfig: ServerBaseConfig) {
            self.envId = envId
            self.serverName = serverName
            self.deployInfo = deployInfo
            self.serverConfig = serverConfig
        }
        
        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case serverName = "ServerName"
            case deployInfo = "DeployInfo"
            case serverConfig = "ServerConfig"
        }
    }
    
    /// CreateCloudRunServer返回参数结构体
    public struct CreateCloudRunServerResponse: TCResponseModel {
        /// 一键部署任务Id，微信云托管，暂时用不到
        public let taskId: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }
    
    /// 创建云托管服务
    ///
    /// 创建云托管服务接口
    @inlinable
    public func createCloudRunServer(_ input: CreateCloudRunServerRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateCloudRunServerResponse > {
        self.client.execute(action: "CreateCloudRunServer", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建云托管服务
    ///
    /// 创建云托管服务接口
    @inlinable
    public func createCloudRunServer(_ input: CreateCloudRunServerRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudRunServerResponse {
        try await self.client.execute(action: "CreateCloudRunServer", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 创建云托管服务
    ///
    /// 创建云托管服务接口
    @inlinable
    public func createCloudRunServer(envId: String, serverName: String, deployInfo: DeployParam, serverConfig: ServerBaseConfig, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateCloudRunServerResponse > {
        self.createCloudRunServer(CreateCloudRunServerRequest(envId: envId, serverName: serverName, deployInfo: deployInfo, serverConfig: serverConfig), logger: logger, on: eventLoop)
    }
    
    /// 创建云托管服务
    ///
    /// 创建云托管服务接口
    @inlinable
    public func createCloudRunServer(envId: String, serverName: String, deployInfo: DeployParam, serverConfig: ServerBaseConfig, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCloudRunServerResponse {
        try await self.createCloudRunServer(CreateCloudRunServerRequest(envId: envId, serverName: serverName, deployInfo: deployInfo, serverConfig: serverConfig), logger: logger, on: eventLoop)
    }
}
