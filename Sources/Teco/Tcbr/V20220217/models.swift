//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcbr {
    /// BuildPacks信息
    public struct BuildPacksInfo: TCInputModel, TCOutputModel {
        /// 基础镜像
        public let baseImage: String
        
        /// 启动命令
        public let entryPoint: String
        
        /// 语言
        public let repoLanguage: String
        
        /// 上传文件名
        public let uploadFilename: String
        
        public init (baseImage: String, entryPoint: String, repoLanguage: String, uploadFilename: String) {
            self.baseImage = baseImage
            self.entryPoint = entryPoint
            self.repoLanguage = repoLanguage
            self.uploadFilename = uploadFilename
        }
        
        enum CodingKeys: String, CodingKey {
            case baseImage = "BaseImage"
            case entryPoint = "EntryPoint"
            case repoLanguage = "RepoLanguage"
            case uploadFilename = "UploadFilename"
        }
    }
    
    /// cls日志信息
    public struct ClsInfo: TCOutputModel {
        /// cls所属地域
        public let clsRegion: String
        
        /// cls日志集ID
        public let clsLogsetId: String
        
        /// cls日志主题ID
        public let clsTopicId: String
        
        /// 创建时间
        public let createTime: String
        
        enum CodingKeys: String, CodingKey {
            case clsRegion = "ClsRegion"
            case clsLogsetId = "ClsLogsetId"
            case clsTopicId = "ClsTopicId"
            case createTime = "CreateTime"
        }
    }
    
    /// 数据库资源信息
    public struct DatabasesInfo: TCOutputModel {
        /// 数据库唯一标识
        public let instanceId: String
        
        /// 状态。包含以下取值：
        /// <li>INITIALIZING：资源初始化中</li>
        /// <li>RUNNING：运行中，可正常使用的状态</li>
        /// <li>UNUSABLE：禁用，不可用</li>
        /// <li>OVERDUE：资源过期</li>
        public let status: String
        
        /// 所属地域。
        /// 当前支持ap-shanghai
        public let region: String
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case status = "Status"
            case region = "Region"
        }
    }
    
    /// 部署参数
    public struct DeployParam: TCInputModel {
        /// 部署类型：package/image/repository/pipeline/jar/war
        public let deployType: String
        
        /// 部署类型为image时传入
        public let imageUrl: String?
        
        /// 部署类型为package时传入
        public let packageName: String?
        
        /// 部署类型为package时传入
        public let packageVersion: String?
        
        /// 部署备注
        public let deployRemark: String?
        
        /// 代码仓库信息
        public let repoInfo: RepositoryInfo
        
        /// 无Dockerfile时填写
        public let buildPacks: BuildPacksInfo
        
        /// 发布类型 GRAY | FULL
        public let releaseType: String?
        
        public init (deployType: String, imageUrl: String?, packageName: String?, packageVersion: String?, deployRemark: String?, repoInfo: RepositoryInfo, buildPacks: BuildPacksInfo, releaseType: String?) {
            self.deployType = deployType
            self.imageUrl = imageUrl
            self.packageName = packageName
            self.packageVersion = packageVersion
            self.deployRemark = deployRemark
            self.repoInfo = repoInfo
            self.buildPacks = buildPacks
            self.releaseType = releaseType
        }
        
        enum CodingKeys: String, CodingKey {
            case deployType = "DeployType"
            case imageUrl = "ImageUrl"
            case packageName = "PackageName"
            case packageVersion = "PackageVersion"
            case deployRemark = "DeployRemark"
            case repoInfo = "RepoInfo"
            case buildPacks = "BuildPacks"
            case releaseType = "ReleaseType"
        }
    }
    
    /// 环境基础信息
    public struct EnvBaseInfo: TCOutputModel {
        /// 环境Id
        public let envId: String
        
        /// 套餐类型：Trial ｜ Standard ｜ Professional ｜ Enterprise
        public let packageType: String
        
        /// VPC Id
        public let vpcId: String
        
        /// 环境创建时间
        public let createTime: String
        
        /// 环境别名
        public let alias: String
        
        /// 环境状态
        public let status: String
        
        /// 环境地域
        public let region: String
        
        /// 环境类型 tcbr ｜ run
        public let envType: String
        
        /// 子网id
        public let subnetIds: String
        
        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case packageType = "PackageType"
            case vpcId = "VpcId"
            case createTime = "CreateTime"
            case alias = "Alias"
            case status = "Status"
            case region = "Region"
            case envType = "EnvType"
            case subnetIds = "SubnetIds"
        }
    }
    
    /// 环境信息
    public struct EnvInfo: TCOutputModel {
        /// 账户下该环境唯一标识
        public let envId: String
        
        /// 环境来源。包含以下取值：
        /// <li>miniapp：微信小程序</li>
        /// <li>qcloud ：腾讯云</li>
        public let source: String
        
        /// 环境别名，要以a-z开头，不能包含 a-zA-z0-9- 以外的字符
        public let alias: String
        
        /// 创建时间
        public let createTime: String
        
        /// 最后修改时间
        public let updateTime: String
        
        /// 环境状态。包含以下取值：
        /// <li>NORMAL：正常可用</li>
        /// <li>UNAVAILABLE：服务不可用，可能是尚未初始化或者初始化过程中</li>
        public let status: String
        
        /// 是否到期自动降为免费版
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAutoDegrade: Bool?
        
        /// 环境渠道
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envChannel: String?
        
        /// 支付方式。包含以下取值：
        /// <li> prepayment：预付费</li>
        /// <li> postpaid：后付费</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: String?
        
        /// 是否为默认环境
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDefault: Bool?
        
        /// 环境所属地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?
        
        /// 环境类型：baas, run, hosting, weda,tcbr
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envType: String?
        
        /// 数据库列表
        public let databases: [DatabasesInfo]
        
        /// 存储列表
        public let storages: [StorageInfo]
        
        /// 函数列表
        public let functions: [FunctionInfo]
        
        /// 云日志服务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logServices: [LogServiceInfo]?
        
        /// 静态资源信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let staticStorages: [StaticStorageInfo]?
        
        /// 环境标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?
        
        /// 自定义日志服务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customLogServices: [ClsInfo]?
        
        /// tcb产品套餐ID，参考DescribePackages接口的返回值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageId: String?
        
        /// 套餐中文名称，参考DescribePackages接口的返回值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageName: String?
        
        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case source = "Source"
            case alias = "Alias"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case status = "Status"
            case isAutoDegrade = "IsAutoDegrade"
            case envChannel = "EnvChannel"
            case payMode = "PayMode"
            case isDefault = "IsDefault"
            case region = "Region"
            case envType = "EnvType"
            case databases = "Databases"
            case storages = "Storages"
            case functions = "Functions"
            case logServices = "LogServices"
            case staticStorages = "StaticStorages"
            case tags = "Tags"
            case customLogServices = "CustomLogServices"
            case packageId = "PackageId"
            case packageName = "PackageName"
        }
    }
    
    /// 函数的信息
    public struct FunctionInfo: TCOutputModel {
        /// 命名空间
        public let namespace: String
        
        /// 所属地域。
        /// 当前支持ap-shanghai
        public let region: String
        
        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case region = "Region"
        }
    }
    
    /// 扩缩容入参
    public struct HpaPolicy: TCInputModel {
        /// 扩缩容类型
        public let policyType: String
        
        /// 扩缩容阈值
        public let policyThreshold: UInt64
        
        public init (policyType: String, policyThreshold: UInt64) {
            self.policyType = policyType
            self.policyThreshold = policyThreshold
        }
        
        enum CodingKeys: String, CodingKey {
            case policyType = "PolicyType"
            case policyThreshold = "PolicyThreshold"
        }
    }
    
    /// 云日志服务相关信息
    public struct LogServiceInfo: TCOutputModel {
        /// log名
        public let logsetName: String
        
        /// log-id
        public let logsetId: String
        
        /// topic名
        public let topicName: String
        
        /// topic-id
        public let topicId: String
        
        /// cls日志所属地域
        public let region: String
        
        enum CodingKeys: String, CodingKey {
            case logsetName = "LogsetName"
            case logsetId = "LogsetId"
            case topicName = "TopicName"
            case topicId = "TopicId"
            case region = "Region"
        }
    }
    
    /// 通用Key Value
    public struct ObjectKV: TCInputModel, TCOutputModel {
        /// 键值对Key
        public let key: String
        
        /// 键值对Value
        public let value: String
        
        public init (key: String, value: String) {
            self.key = key
            self.value = value
        }
        
        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }
    
    /// 在线版本信息
    public struct OnlineVersionInfo: TCOutputModel {
        /// 版本名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionName: String?
        
        /// 镜像url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageUrl: String?
        
        /// 流量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowRatio: String?
        
        enum CodingKeys: String, CodingKey {
            case versionName = "VersionName"
            case imageUrl = "ImageUrl"
            case flowRatio = "FlowRatio"
        }
    }
    
    /// 代码仓库信息
    public struct RepositoryInfo: TCInputModel, TCOutputModel {
        /// git source
        public let source: String
        
        /// 仓库名
        public let repo: String
        
        /// 分支名
        public let branch: String
        
        public init (source: String, repo: String, branch: String) {
            self.source = source
            self.repo = repo
            self.branch = branch
        }
        
        enum CodingKeys: String, CodingKey {
            case source = "Source"
            case repo = "Repo"
            case branch = "Branch"
        }
    }
    
    /// 服务基础配置信息
    public struct ServerBaseConfig: TCInputModel, TCOutputModel {
        /// 环境 Id
        public let envId: String
        
        /// 服务名
        public let serverName: String
        
        /// 是否开启公网访问
        public let openAccessTypes: [String]
        
        /// Cpu 规格
        public let cpu: Float
        
        /// Mem 规格
        public let mem: Float
        
        /// 最小副本数
        public let minNum: UInt64
        
        /// 最大副本数
        public let maxNum: UInt64
        
        /// 扩缩容配置
        public let policyDetails: [HpaPolicy]
        
        /// 日志采集路径
        public let customLogs: String
        
        /// 环境变量
        public let envParams: String
        
        /// 延迟检测时间
        public let initialDelaySeconds: UInt64
        
        /// 创建时间
        public let createTime: String
        
        /// 服务端口
        public let port: Int64
        
        /// 是否有Dockerfile
        public let hasDockerfile: Bool
        
        /// Dockerfile 文件名
        public let dockerfile: String
        
        /// 构建目录
        public let buildDir: String
        
        /// 日志类型: none | default | custom
        public let logType: String?
        
        /// cls setId
        public let logSetId: String?
        
        /// cls 主题id
        public let logTopicId: String?
        
        /// 解析类型：json ｜ line
        public let logParseType: String?
        
        public init (envId: String, serverName: String, openAccessTypes: [String], cpu: Float, mem: Float, minNum: UInt64, maxNum: UInt64, policyDetails: [HpaPolicy], customLogs: String, envParams: String, initialDelaySeconds: UInt64, createTime: String, port: Int64, hasDockerfile: Bool, dockerfile: String, buildDir: String, logType: String?, logSetId: String?, logTopicId: String?, logParseType: String?) {
            self.envId = envId
            self.serverName = serverName
            self.openAccessTypes = openAccessTypes
            self.cpu = cpu
            self.mem = mem
            self.minNum = minNum
            self.maxNum = maxNum
            self.policyDetails = policyDetails
            self.customLogs = customLogs
            self.envParams = envParams
            self.initialDelaySeconds = initialDelaySeconds
            self.createTime = createTime
            self.port = port
            self.hasDockerfile = hasDockerfile
            self.dockerfile = dockerfile
            self.buildDir = buildDir
            self.logType = logType
            self.logSetId = logSetId
            self.logTopicId = logTopicId
            self.logParseType = logParseType
        }
        
        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case serverName = "ServerName"
            case openAccessTypes = "OpenAccessTypes"
            case cpu = "Cpu"
            case mem = "Mem"
            case minNum = "MinNum"
            case maxNum = "MaxNum"
            case policyDetails = "PolicyDetails"
            case customLogs = "CustomLogs"
            case envParams = "EnvParams"
            case initialDelaySeconds = "InitialDelaySeconds"
            case createTime = "CreateTime"
            case port = "Port"
            case hasDockerfile = "HasDockerfile"
            case dockerfile = "Dockerfile"
            case buildDir = "BuildDir"
            case logType = "LogType"
            case logSetId = "LogSetId"
            case logTopicId = "LogTopicId"
            case logParseType = "LogParseType"
        }
    }
    
    /// 服务基本信息
    public struct ServerBaseInfo: TCOutputModel {
        /// 服务名
        public let serverName: String
        
        /// 默认服务域名
        public let defaultDomainName: String
        
        /// 自定义域名
        public let customDomainName: String
        
        /// 服务状态：running/deploying/deploy_failed
        public let status: String
        
        /// 更新时间
        public let updateTime: String
        
        /// 公网访问类型
        public let accessTypes: [String]
        
        /// 展示自定义域名
        public let customDomainNames: [String]
        
        enum CodingKeys: String, CodingKey {
            case serverName = "ServerName"
            case defaultDomainName = "DefaultDomainName"
            case customDomainName = "CustomDomainName"
            case status = "Status"
            case updateTime = "UpdateTime"
            case accessTypes = "AccessTypes"
            case customDomainNames = "CustomDomainNames"
        }
    }
    
    /// 服务管理任务信息
    public struct ServerManageTaskInfo: TCOutputModel {
        /// 任务Id
        public let id: Int64
        
        /// 环境Id
        public let envId: String
        
        /// 服务名
        public let serverName: String
        
        /// 创建时间
        public let createTime: String
        
        /// 变更类型
        public let changeType: String
        
        /// 发布类型
        public let releaseType: String
        
        /// 部署类型
        public let deployType: String
        
        /// 上一个版本名
        public let preVersionName: String
        
        /// 版本名
        public let versionName: String
        
        /// 流水线Id
        public let pipelineId: Int64
        
        /// 流水线任务Id
        public let pipelineTaskId: Int64
        
        /// 发布单Id
        public let releaseId: Int64
        
        /// 状态
        public let status: String
        
        /// 步骤信息
        public let steps: [TaskStepInfo]
        
        /// 失败原因
        public let failReason: String
        
        /// 操作标识
        public let operatorRemark: String
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case envId = "EnvId"
            case serverName = "ServerName"
            case createTime = "CreateTime"
            case changeType = "ChangeType"
            case releaseType = "ReleaseType"
            case deployType = "DeployType"
            case preVersionName = "PreVersionName"
            case versionName = "VersionName"
            case pipelineId = "PipelineId"
            case pipelineTaskId = "PipelineTaskId"
            case releaseId = "ReleaseId"
            case status = "Status"
            case steps = "Steps"
            case failReason = "FailReason"
            case operatorRemark = "OperatorRemark"
        }
    }
    
    /// 静态CDN资源信息
    public struct StaticStorageInfo: TCOutputModel {
        /// 静态CDN域名
        public let staticDomain: String
        
        /// 静态CDN默认文件夹，当前为根目录
        public let defaultDirName: String
        
        /// 资源状态(process/online/offline/init)
        public let status: String
        
        /// cos所属区域
        public let region: String
        
        /// bucket信息
        public let bucket: String
        
        enum CodingKeys: String, CodingKey {
            case staticDomain = "StaticDomain"
            case defaultDirName = "DefaultDirName"
            case status = "Status"
            case region = "Region"
            case bucket = "Bucket"
        }
    }
    
    /// StorageInfo 资源信息
    public struct StorageInfo: TCOutputModel {
        /// 资源所属地域。
        /// 当前支持ap-shanghai
        public let region: String
        
        /// 桶名，存储资源的唯一标识
        public let bucket: String
        
        /// cdn 域名
        public let cdnDomain: String
        
        /// 资源所属用户的腾讯云appId
        public let appId: String
        
        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case bucket = "Bucket"
            case cdnDomain = "CdnDomain"
            case appId = "AppId"
        }
    }
    
    /// 标签键值对
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键
        public let key: String
        
        /// 标签值
        public let value: String
        
        public init (key: String, value: String) {
            self.key = key
            self.value = value
        }
        
        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }
    
    /// 任务步骤信息
    public struct TaskStepInfo: TCOutputModel {
        /// 步骤名
        public let name: String
        
        /// 未启动："todo"
        /// 运行中："running"
        /// 失败："failed"
        /// 成功结束："finished"
        public let status: String
        
        /// 开始时间
        public let startTime: String
        
        /// 结束时间
        public let endTime: String
        
        /// 消耗时间：秒
        public let costTime: Int64
        
        /// 失败原因
        public let failReason: String
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case status = "Status"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case costTime = "CostTime"
            case failReason = "FailReason"
        }
    }
    
    /// 版本流量信息
    public struct VersionFlowInfo: TCInputModel {
        /// 版本名
        public let versionName: String
        
        /// 是否默认版本
        public let isDefaultPriority: Bool
        
        /// 流量比例
        public let flowRatio: Int64?
        
        /// 测试KV值
        public let urlParam: ObjectKV
        
        /// 权重
        public let priority: Int64?
        
        public init (versionName: String, isDefaultPriority: Bool, flowRatio: Int64?, urlParam: ObjectKV, priority: Int64?) {
            self.versionName = versionName
            self.isDefaultPriority = isDefaultPriority
            self.flowRatio = flowRatio
            self.urlParam = urlParam
            self.priority = priority
        }
        
        enum CodingKeys: String, CodingKey {
            case versionName = "VersionName"
            case isDefaultPriority = "IsDefaultPriority"
            case flowRatio = "FlowRatio"
            case urlParam = "UrlParam"
            case priority = "Priority"
        }
    }
}