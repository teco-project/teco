//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcb {
    /// DescribeStandaloneGateway请求参数结构体
    public struct DescribeStandaloneGatewayRequest: TCRequestModel {
        /// 环境ID
        public let envId: String

        /// 网关名称
        public let gatewayName: String?

        /// 网关别名
        public let gatewayAlias: String?

        public init(envId: String, gatewayName: String? = nil, gatewayAlias: String? = nil) {
            self.envId = envId
            self.gatewayName = gatewayName
            self.gatewayAlias = gatewayAlias
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case gatewayName = "GatewayName"
            case gatewayAlias = "GatewayAlias"
        }
    }

    /// DescribeStandaloneGateway返回参数结构体
    public struct DescribeStandaloneGatewayResponse: TCResponseModel {
        /// 独立网关信息列表
        public let standaloneGatewayList: [StandaloneGatewayInfo]

        /// 总数
        public let total: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case standaloneGatewayList = "StandaloneGatewayList"
            case total = "Total"
            case requestId = "RequestId"
        }
    }

    /// 查询小租户网关信息
    ///
    /// 本接口（DescribeStandaloneGateway）查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGateway(_ input: DescribeStandaloneGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStandaloneGatewayResponse> {
        self.client.execute(action: "DescribeStandaloneGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询小租户网关信息
    ///
    /// 本接口（DescribeStandaloneGateway）查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGateway(_ input: DescribeStandaloneGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStandaloneGatewayResponse {
        try await self.client.execute(action: "DescribeStandaloneGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询小租户网关信息
    ///
    /// 本接口（DescribeStandaloneGateway）查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGateway(envId: String, gatewayName: String? = nil, gatewayAlias: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStandaloneGatewayResponse> {
        self.describeStandaloneGateway(DescribeStandaloneGatewayRequest(envId: envId, gatewayName: gatewayName, gatewayAlias: gatewayAlias), region: region, logger: logger, on: eventLoop)
    }

    /// 查询小租户网关信息
    ///
    /// 本接口（DescribeStandaloneGateway）查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGateway(envId: String, gatewayName: String? = nil, gatewayAlias: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStandaloneGatewayResponse {
        try await self.describeStandaloneGateway(DescribeStandaloneGatewayRequest(envId: envId, gatewayName: gatewayName, gatewayAlias: gatewayAlias), region: region, logger: logger, on: eventLoop)
    }
}
