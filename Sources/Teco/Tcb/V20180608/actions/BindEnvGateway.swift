//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcb {
    /// BindEnvGateway请求参数结构体
    public struct BindEnvGatewayRequest: TCRequestModel {
        /// 子环境id
        public let subEnvId: String

        public init(subEnvId: String) {
            self.subEnvId = subEnvId
        }

        enum CodingKeys: String, CodingKey {
            case subEnvId = "SubEnvId"
        }
    }

    /// BindEnvGateway返回参数结构体
    public struct BindEnvGatewayResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 绑定环境网关
    ///
    /// 绑定另外一个环境下的网关，callContainer请求可以访问到该网关
    @inlinable @discardableResult
    public func bindEnvGateway(_ input: BindEnvGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindEnvGatewayResponse> {
        self.client.execute(action: "BindEnvGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定环境网关
    ///
    /// 绑定另外一个环境下的网关，callContainer请求可以访问到该网关
    @inlinable @discardableResult
    public func bindEnvGateway(_ input: BindEnvGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindEnvGatewayResponse {
        try await self.client.execute(action: "BindEnvGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 绑定环境网关
    ///
    /// 绑定另外一个环境下的网关，callContainer请求可以访问到该网关
    @inlinable @discardableResult
    public func bindEnvGateway(subEnvId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindEnvGatewayResponse> {
        let input = BindEnvGatewayRequest(subEnvId: subEnvId)
        return self.client.execute(action: "BindEnvGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定环境网关
    ///
    /// 绑定另外一个环境下的网关，callContainer请求可以访问到该网关
    @inlinable @discardableResult
    public func bindEnvGateway(subEnvId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindEnvGatewayResponse {
        let input = BindEnvGatewayRequest(subEnvId: subEnvId)
        return try await self.client.execute(action: "BindEnvGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
