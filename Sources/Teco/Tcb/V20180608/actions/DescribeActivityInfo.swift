//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcb {
    /// DescribeActivityInfo请求参数结构体
    public struct DescribeActivityInfoRequest: TCRequestModel {
        /// 活动id列表
        public let activityIdList: [Int64]?

        public init(activityIdList: [Int64]? = nil) {
            self.activityIdList = activityIdList
        }

        enum CodingKeys: String, CodingKey {
            case activityIdList = "ActivityIdList"
        }
    }

    /// DescribeActivityInfo返回参数结构体
    public struct DescribeActivityInfoResponse: TCResponseModel {
        /// 活动详情
        public let activityInfoList: [ActivityInfoItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case activityInfoList = "ActivityInfoList"
            case requestId = "RequestId"
        }
    }

    /// 查询活动信息
    @inlinable
    public func describeActivityInfo(_ input: DescribeActivityInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeActivityInfoResponse> {
        self.client.execute(action: "DescribeActivityInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询活动信息
    @inlinable
    public func describeActivityInfo(_ input: DescribeActivityInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeActivityInfoResponse {
        try await self.client.execute(action: "DescribeActivityInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询活动信息
    @inlinable
    public func describeActivityInfo(activityIdList: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeActivityInfoResponse> {
        self.describeActivityInfo(.init(activityIdList: activityIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 查询活动信息
    @inlinable
    public func describeActivityInfo(activityIdList: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeActivityInfoResponse {
        try await self.describeActivityInfo(.init(activityIdList: activityIdList), region: region, logger: logger, on: eventLoop)
    }
}
