//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcb {
    /// DescribeHostingDomainTask请求参数结构体
    public struct DescribeHostingDomainTaskRequest: TCRequestModel {
        /// 环境ID
        public let envId: String

        public init(envId: String) {
            self.envId = envId
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
        }
    }

    /// DescribeHostingDomainTask返回参数结构体
    public struct DescribeHostingDomainTaskResponse: TCResponseModel {
        /// todo/doing/done/error
        public let status: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 查询静态托管域名任务状态
    @inlinable
    public func describeHostingDomainTask(_ input: DescribeHostingDomainTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostingDomainTaskResponse> {
        self.client.execute(action: "DescribeHostingDomainTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询静态托管域名任务状态
    @inlinable
    public func describeHostingDomainTask(_ input: DescribeHostingDomainTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostingDomainTaskResponse {
        try await self.client.execute(action: "DescribeHostingDomainTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询静态托管域名任务状态
    @inlinable
    public func describeHostingDomainTask(envId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostingDomainTaskResponse> {
        self.describeHostingDomainTask(DescribeHostingDomainTaskRequest(envId: envId), logger: logger, on: eventLoop)
    }

    /// 查询静态托管域名任务状态
    @inlinable
    public func describeHostingDomainTask(envId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostingDomainTaskResponse {
        try await self.describeHostingDomainTask(DescribeHostingDomainTaskRequest(envId: envId), logger: logger, on: eventLoop)
    }
}
