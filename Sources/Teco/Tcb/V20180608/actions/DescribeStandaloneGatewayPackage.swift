//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tcb {
    /// DescribeStandaloneGatewayPackage请求参数结构体
    public struct DescribeStandaloneGatewayPackageRequest: TCRequestModel {
        /// 环境ID
        public let envId: String?

        /// 套餐版本，包含starter、basic、advanced、enterprise
        public let packageVersion: String?

        public init(envId: String? = nil, packageVersion: String? = nil) {
            self.envId = envId
            self.packageVersion = packageVersion
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case packageVersion = "PackageVersion"
        }
    }

    /// DescribeStandaloneGatewayPackage返回参数结构体
    public struct DescribeStandaloneGatewayPackageResponse: TCResponseModel {
        /// 总数
        public let total: Int64

        /// 套餐详情
        public let standaloneGatewayPackageList: [StandaloneGatewayPackageInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case standaloneGatewayPackageList = "StandaloneGatewayPackageList"
            case requestId = "RequestId"
        }
    }

    /// 查询小租户网关套餐信息
    ///
    /// 本接口（DescribeStandaloneGatewayPackage）用于查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGatewayPackage(_ input: DescribeStandaloneGatewayPackageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStandaloneGatewayPackageResponse> {
        self.client.execute(action: "DescribeStandaloneGatewayPackage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询小租户网关套餐信息
    ///
    /// 本接口（DescribeStandaloneGatewayPackage）用于查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGatewayPackage(_ input: DescribeStandaloneGatewayPackageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStandaloneGatewayPackageResponse {
        try await self.client.execute(action: "DescribeStandaloneGatewayPackage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询小租户网关套餐信息
    ///
    /// 本接口（DescribeStandaloneGatewayPackage）用于查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGatewayPackage(envId: String? = nil, packageVersion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStandaloneGatewayPackageResponse> {
        self.describeStandaloneGatewayPackage(.init(envId: envId, packageVersion: packageVersion), region: region, logger: logger, on: eventLoop)
    }

    /// 查询小租户网关套餐信息
    ///
    /// 本接口（DescribeStandaloneGatewayPackage）用于查询小租户网关套餐信息。
    @inlinable
    public func describeStandaloneGatewayPackage(envId: String? = nil, packageVersion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStandaloneGatewayPackageResponse {
        try await self.describeStandaloneGatewayPackage(.init(envId: envId, packageVersion: packageVersion), region: region, logger: logger, on: eventLoop)
    }
}
