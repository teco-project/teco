//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcb {
    /// DescribeEnvDealRegion请求参数结构体
    public struct DescribeEnvDealRegionRequest: TCRequestModel {
        /// 环境ID
        public let envId: String

        /// 订单类型：
        /// ENV_PREPAY_MINIAPP= 预付费环境(微信小程序)
        /// ENV_PREPAY_CLOUD= 预付费环境(腾讯云)
        /// ENV_POSTPAY = 后付费环境
        /// HOSTING_PREPAY = 预付费静态托管
        /// PACKAGE=套餐包
        public let dealType: String

        /// 下单类型：
        /// CREATE = 新购
        /// RENEW = 续费
        /// MODIFY = 套餐调整(升级/降级)
        /// REFUND = 退费
        public let dealAction: String

        /// 下单地域：
        /// ap-guangzhou = 广州地域
        /// ap-shanghai = 上海地域
        /// ap-beijing = 北京地域
        public let dealRegion: String

        public init(envId: String, dealType: String, dealAction: String, dealRegion: String) {
            self.envId = envId
            self.dealType = dealType
            self.dealAction = dealAction
            self.dealRegion = dealRegion
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case dealType = "DealType"
            case dealAction = "DealAction"
            case dealRegion = "DealRegion"
        }
    }

    /// DescribeEnvDealRegion返回参数结构体
    public struct DescribeEnvDealRegionResponse: TCResponseModel {
        /// 下单region
        public let region: String

        /// 下单zone
        public let zone: String

        /// 下单regionId
        public let regionId: UInt64

        /// 下单zoneId
        public let zoneId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case zone = "Zone"
            case regionId = "RegionId"
            case zoneId = "ZoneId"
            case requestId = "RequestId"
        }
    }

    /// 获取环境下单地域
    @inlinable
    public func describeEnvDealRegion(_ input: DescribeEnvDealRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEnvDealRegionResponse> {
        self.client.execute(action: "DescribeEnvDealRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取环境下单地域
    @inlinable
    public func describeEnvDealRegion(_ input: DescribeEnvDealRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEnvDealRegionResponse {
        try await self.client.execute(action: "DescribeEnvDealRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取环境下单地域
    @inlinable
    public func describeEnvDealRegion(envId: String, dealType: String, dealAction: String, dealRegion: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEnvDealRegionResponse> {
        let input = DescribeEnvDealRegionRequest(envId: envId, dealType: dealType, dealAction: dealAction, dealRegion: dealRegion)
        return self.client.execute(action: "DescribeEnvDealRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取环境下单地域
    @inlinable
    public func describeEnvDealRegion(envId: String, dealType: String, dealAction: String, dealRegion: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEnvDealRegionResponse {
        let input = DescribeEnvDealRegionRequest(envId: envId, dealType: dealType, dealAction: dealAction, dealRegion: dealRegion)
        return try await self.client.execute(action: "DescribeEnvDealRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
