//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcb {
    /// DescribeCbrServerVersion请求参数结构体
    public struct DescribeCbrServerVersionRequest: TCRequestModel {
        /// 环境ID
        public let envId: String

        /// 服务名称
        public let serverName: String

        /// 版本名称
        public let versionName: String

        public init(envId: String, serverName: String, versionName: String) {
            self.envId = envId
            self.serverName = serverName
            self.versionName = versionName
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case serverName = "ServerName"
            case versionName = "VersionName"
        }
    }

    /// DescribeCbrServerVersion返回参数结构体
    public struct DescribeCbrServerVersionResponse: TCResponseModel {
        /// 版本名称
        public let versionName: String

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// Dockefile的路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dockerfilePath: String?

        /// DockerBuild的目录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let buildDir: String?

        /// Cpu大小
        public let cpu: Float

        /// Mem大小
        public let mem: Float

        /// 副本最小值
        public let minNum: Int64

        /// 副本最大值
        public let maxNum: Int64

        /// 环境变量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envParams: String?

        /// 创建时间
        public let createdTime: String

        /// 更新时间
        public let updatedTime: String

        /// 版本的IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionIP: String?

        /// 版本的端口号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionPort: Int64?

        /// 版本状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 枚举（package/repository/image)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uploadType: String?

        /// 服务名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverName: String?

        /// 是否对于外网开放
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isPublic: Bool?

        /// vpc id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetIds: [String]?

        /// 日志采集路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customLogs: String?

        /// 监听端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerPort: Int64?

        /// 延迟多长时间开始健康检查（单位s）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let initialDelaySeconds: Int64?

        /// 镜像地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageUrl: String?

        /// 是否有Dockerfile：0-default has, 1-has, 2-has not
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasDockerfile: Int64?

        /// 基础镜像
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let baseImage: String?

        /// 容器启动入口命令
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let entryPoint: String?

        /// 自动扩缩容策略组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyDetail: [HpaPolicy]?

        /// Tke集群信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tkeClusterInfo: TkeClusterInfo?

        /// 版本工作负载类型；deployment/deamonset
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tkeWorkloadType: String?

        /// 代码包信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageInfo: CbrPackageInfo?

        /// 仓库信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repoInfo: CbrRepoInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case versionName = "VersionName"
            case remark = "Remark"
            case dockerfilePath = "DockerfilePath"
            case buildDir = "BuildDir"
            case cpu = "Cpu"
            case mem = "Mem"
            case minNum = "MinNum"
            case maxNum = "MaxNum"
            case envParams = "EnvParams"
            case createdTime = "CreatedTime"
            case updatedTime = "UpdatedTime"
            case versionIP = "VersionIP"
            case versionPort = "VersionPort"
            case status = "Status"
            case uploadType = "UploadType"
            case serverName = "ServerName"
            case isPublic = "IsPublic"
            case vpcId = "VpcId"
            case subnetIds = "SubnetIds"
            case customLogs = "CustomLogs"
            case containerPort = "ContainerPort"
            case initialDelaySeconds = "InitialDelaySeconds"
            case imageUrl = "ImageUrl"
            case hasDockerfile = "HasDockerfile"
            case baseImage = "BaseImage"
            case entryPoint = "EntryPoint"
            case policyDetail = "PolicyDetail"
            case tkeClusterInfo = "TkeClusterInfo"
            case tkeWorkloadType = "TkeWorkloadType"
            case packageInfo = "PackageInfo"
            case repoInfo = "RepoInfo"
            case requestId = "RequestId"
        }
    }

    /// 查询服务版本的详情
    @inlinable
    public func describeCbrServerVersion(_ input: DescribeCbrServerVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCbrServerVersionResponse> {
        self.client.execute(action: "DescribeCbrServerVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询服务版本的详情
    @inlinable
    public func describeCbrServerVersion(_ input: DescribeCbrServerVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCbrServerVersionResponse {
        try await self.client.execute(action: "DescribeCbrServerVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询服务版本的详情
    @inlinable
    public func describeCbrServerVersion(envId: String, serverName: String, versionName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCbrServerVersionResponse> {
        self.describeCbrServerVersion(.init(envId: envId, serverName: serverName, versionName: versionName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询服务版本的详情
    @inlinable
    public func describeCbrServerVersion(envId: String, serverName: String, versionName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCbrServerVersionResponse {
        try await self.describeCbrServerVersion(.init(envId: envId, serverName: serverName, versionName: versionName), region: region, logger: logger, on: eventLoop)
    }
}
