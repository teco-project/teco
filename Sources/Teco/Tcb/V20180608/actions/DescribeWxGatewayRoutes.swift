//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcb {
    /// DescribeWxGatewayRoutes请求参数结构体
    public struct DescribeWxGatewayRoutesRequest: TCRequest {
        /// 环境ID
        public let envId: String

        /// 网关名称
        public let gatewayId: String

        /// 网关路由名称
        public let gatewayRouteName: String?

        /// 网关版本名
        public let gatewayVersion: String?

        public init(envId: String, gatewayId: String, gatewayRouteName: String? = nil, gatewayVersion: String? = nil) {
            self.envId = envId
            self.gatewayId = gatewayId
            self.gatewayRouteName = gatewayRouteName
            self.gatewayVersion = gatewayVersion
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case gatewayId = "GatewayId"
            case gatewayRouteName = "GatewayRouteName"
            case gatewayVersion = "GatewayVersion"
        }
    }

    /// DescribeWxGatewayRoutes返回参数结构体
    public struct DescribeWxGatewayRoutesResponse: TCResponse {
        /// 返回的服务个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 返回的服务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wxGatewayRouteSet: [WxGatewayRountItem]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case wxGatewayRouteSet = "WxGatewayRouteSet"
            case requestId = "RequestId"
        }
    }

    /// 查看安全网关路由
    @inlinable
    public func describeWxGatewayRoutes(_ input: DescribeWxGatewayRoutesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWxGatewayRoutesResponse> {
        self.client.execute(action: "DescribeWxGatewayRoutes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看安全网关路由
    @inlinable
    public func describeWxGatewayRoutes(_ input: DescribeWxGatewayRoutesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWxGatewayRoutesResponse {
        try await self.client.execute(action: "DescribeWxGatewayRoutes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看安全网关路由
    @inlinable
    public func describeWxGatewayRoutes(envId: String, gatewayId: String, gatewayRouteName: String? = nil, gatewayVersion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWxGatewayRoutesResponse> {
        self.describeWxGatewayRoutes(.init(envId: envId, gatewayId: gatewayId, gatewayRouteName: gatewayRouteName, gatewayVersion: gatewayVersion), region: region, logger: logger, on: eventLoop)
    }

    /// 查看安全网关路由
    @inlinable
    public func describeWxGatewayRoutes(envId: String, gatewayId: String, gatewayRouteName: String? = nil, gatewayVersion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWxGatewayRoutesResponse {
        try await self.describeWxGatewayRoutes(.init(envId: envId, gatewayId: gatewayId, gatewayRouteName: gatewayRouteName, gatewayVersion: gatewayVersion), region: region, logger: logger, on: eventLoop)
    }
}
