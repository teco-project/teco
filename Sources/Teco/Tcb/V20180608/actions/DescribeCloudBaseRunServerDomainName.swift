//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tcb {
    /// DescribeCloudBaseRunServerDomainName请求参数结构体
    public struct DescribeCloudBaseRunServerDomainNameRequest: TCRequestModel {
        /// 服务名
        public let serverName: String

        /// 环境Id
        public let userEnvId: String

        /// 用户Uin
        public let userUin: String

        /// 外部Id
        public let externalId: String

        public init(serverName: String, userEnvId: String, userUin: String, externalId: String) {
            self.serverName = serverName
            self.userEnvId = userEnvId
            self.userUin = userUin
            self.externalId = externalId
        }

        enum CodingKeys: String, CodingKey {
            case serverName = "ServerName"
            case userEnvId = "UserEnvId"
            case userUin = "UserUin"
            case externalId = "ExternalId"
        }
    }

    /// DescribeCloudBaseRunServerDomainName返回参数结构体
    public struct DescribeCloudBaseRunServerDomainNameResponse: TCResponseModel {
        /// 公网服务域名
        public let publicDomain: String

        /// 内部服务域名
        public let internalDomain: String

        /// 弃用
        public let domainName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case publicDomain = "PublicDomain"
            case internalDomain = "InternalDomain"
            case domainName = "DomainName"
            case requestId = "RequestId"
        }
    }

    /// 查询微信云托管服务域名
    @inlinable
    public func describeCloudBaseRunServerDomainName(_ input: DescribeCloudBaseRunServerDomainNameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudBaseRunServerDomainNameResponse> {
        self.client.execute(action: "DescribeCloudBaseRunServerDomainName", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询微信云托管服务域名
    @inlinable
    public func describeCloudBaseRunServerDomainName(_ input: DescribeCloudBaseRunServerDomainNameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudBaseRunServerDomainNameResponse {
        try await self.client.execute(action: "DescribeCloudBaseRunServerDomainName", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询微信云托管服务域名
    @inlinable
    public func describeCloudBaseRunServerDomainName(serverName: String, userEnvId: String, userUin: String, externalId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCloudBaseRunServerDomainNameResponse> {
        self.describeCloudBaseRunServerDomainName(.init(serverName: serverName, userEnvId: userEnvId, userUin: userUin, externalId: externalId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询微信云托管服务域名
    @inlinable
    public func describeCloudBaseRunServerDomainName(serverName: String, userEnvId: String, userUin: String, externalId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCloudBaseRunServerDomainNameResponse {
        try await self.describeCloudBaseRunServerDomainName(.init(serverName: serverName, userEnvId: userEnvId, userUin: userUin, externalId: externalId), region: region, logger: logger, on: eventLoop)
    }
}
