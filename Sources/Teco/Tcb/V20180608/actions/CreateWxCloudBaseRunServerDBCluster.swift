//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcb {
    /// CreateWxCloudBaseRunServerDBCluster请求参数结构体
    public struct CreateWxCloudBaseRunServerDBClusterRequest: TCRequestModel {
        /// 账户密码
        public let accountPassword: String
        
        /// 环境ID
        public let envId: String
        
        /// 微信appid
        public let wxAppId: String?
        
        /// mysql内核版本，支持5.7,8.0
        public let dbVersion: String?
        
        /// 0: 非大小写敏感
        /// 1: 大小写敏感
        /// 默认 0
        public let lowerCaseTableName: String?
        
        public init (accountPassword: String, envId: String, wxAppId: String? = nil, dbVersion: String? = nil, lowerCaseTableName: String? = nil) {
            self.accountPassword = accountPassword
            self.envId = envId
            self.wxAppId = wxAppId
            self.dbVersion = dbVersion
            self.lowerCaseTableName = lowerCaseTableName
        }
        
        enum CodingKeys: String, CodingKey {
            case accountPassword = "AccountPassword"
            case envId = "EnvId"
            case wxAppId = "WxAppId"
            case dbVersion = "DbVersion"
            case lowerCaseTableName = "LowerCaseTableName"
        }
    }
    
    /// CreateWxCloudBaseRunServerDBCluster返回参数结构体
    public struct CreateWxCloudBaseRunServerDBClusterResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 开通微信云托管MySQL数据库服务
    @inlinable
    public func createWxCloudBaseRunServerDBCluster(_ input: CreateWxCloudBaseRunServerDBClusterRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateWxCloudBaseRunServerDBClusterResponse > {
        self.client.execute(action: "CreateWxCloudBaseRunServerDBCluster", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 开通微信云托管MySQL数据库服务
    @inlinable
    public func createWxCloudBaseRunServerDBCluster(_ input: CreateWxCloudBaseRunServerDBClusterRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWxCloudBaseRunServerDBClusterResponse {
        try await self.client.execute(action: "CreateWxCloudBaseRunServerDBCluster", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 开通微信云托管MySQL数据库服务
    @inlinable
    public func createWxCloudBaseRunServerDBCluster(accountPassword: String, envId: String, wxAppId: String? = nil, dbVersion: String? = nil, lowerCaseTableName: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateWxCloudBaseRunServerDBClusterResponse > {
        self.createWxCloudBaseRunServerDBCluster(CreateWxCloudBaseRunServerDBClusterRequest(accountPassword: accountPassword, envId: envId, wxAppId: wxAppId, dbVersion: dbVersion, lowerCaseTableName: lowerCaseTableName), logger: logger, on: eventLoop)
    }
    
    /// 开通微信云托管MySQL数据库服务
    @inlinable
    public func createWxCloudBaseRunServerDBCluster(accountPassword: String, envId: String, wxAppId: String? = nil, dbVersion: String? = nil, lowerCaseTableName: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWxCloudBaseRunServerDBClusterResponse {
        try await self.createWxCloudBaseRunServerDBCluster(CreateWxCloudBaseRunServerDBClusterRequest(accountPassword: accountPassword, envId: envId, wxAppId: wxAppId, dbVersion: dbVersion, lowerCaseTableName: lowerCaseTableName), logger: logger, on: eventLoop)
    }
}
