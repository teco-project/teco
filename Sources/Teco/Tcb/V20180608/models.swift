//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Tcb {
    /// 活动信息
    public struct ActivityInfoItem: TCOutputModel {
        /// 活动id
        public let activityId: Int64

        /// 记录插入时间
        public let createTime: String

        /// 记录最后一次变更时间
        public let updateTime: String

        /// 活动开始时间
        public let startTime: String

        /// 活动结束时间
        public let expireTime: String

        /// 自定义备注信息
        public let tag: String

        enum CodingKeys: String, CodingKey {
            case activityId = "ActivityId"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case startTime = "StartTime"
            case expireTime = "ExpireTime"
            case tag = "Tag"
        }
    }

    /// 活动详情
    public struct ActivityRecordItem: TCOutputModel {
        /// 用户uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uin: String?

        /// 活动id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let activityId: Int64?

        /// 自定义状态码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 自定义子状态码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subStatus: String?

        /// 整型子状态码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subStatusInt: Int64?

        /// 是否软删除
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDeleted: Bool?

        enum CodingKeys: String, CodingKey {
            case uin = "Uin"
            case activityId = "ActivityId"
            case status = "Status"
            case subStatus = "SubStatus"
            case subStatusInt = "SubStatusInt"
            case isDeleted = "IsDeleted"
        }
    }

    /// 合法域名
    public struct AuthDomain: TCOutputModel {
        /// 域名ID
        public let id: String

        /// 域名
        public let domain: String

        /// 域名类型。包含以下取值：
        /// <li>SYSTEM</li>
        /// <li>USER</li>
        public let type: String

        /// 状态。包含以下取值：
        /// <li>ENABLE</li>
        /// <li>DISABLE</li>
        public let status: String

        /// 创建时间
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var createTime: Date

        /// 更新时间
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var updateTime: Date

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case domain = "Domain"
            case type = "Type"
            case status = "Status"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 新套餐套餐详情
    public struct BaasPackageInfo: TCOutputModel {
        /// DAU产品套餐ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageName: String?

        /// DAU套餐中文名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageTitle: String?

        /// 套餐分组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?

        /// 套餐分组中文名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupTitle: String?

        /// json格式化计费标签，例如：
        /// {"pid":2, "cids":{"create": 2, "renew": 2, "modify": 2}, "productCode":"p_tcb_mp", "subProductCode":"sp_tcb_mp_cloudbase_dau"}
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billTags: String?

        /// json格式化用户资源限制，例如：
        /// {"Qps":1000,"InvokeNum":{"TimeUnit":"m", "Unit":"万次", "MaxSize": 100},"Capacity":{"TimeUnit":"m", "Unit":"GB", "MaxSize": 100}, "Cdn":{"Flux":{"TimeUnit":"m", "Unit":"GB", "MaxSize": 100}, "BackFlux":{"TimeUnit":"m", "Unit":"GB", "MaxSize": 100}},"Scf":{"Concurrency":1000,"OutFlux":{"TimeUnit":"m", "Unit":"GB", "MaxSize": 100},"MemoryUse":{"TimeUnit":"m", "Unit":"WGBS", "MaxSize": 100000}}}
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceLimit: String?

        /// json格式化高级限制，例如：
        /// {"CMSEnable":false,"ProvisionedConcurrencyMem":512000, "PictureProcessing":false, "SecurityAudit":false, "RealTimePush":false, "TemplateMessageBatchPush":false, "Payment":false}
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advanceLimit: String?

        /// 套餐描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageDescription: String?

        /// 是否对外展示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isExternal: Bool?

        enum CodingKeys: String, CodingKey {
            case packageName = "PackageName"
            case packageTitle = "PackageTitle"
            case groupName = "GroupName"
            case groupTitle = "GroupTitle"
            case billTags = "BillTags"
            case resourceLimit = "ResourceLimit"
            case advanceLimit = "AdvanceLimit"
            case packageDescription = "PackageDescription"
            case isExternal = "IsExternal"
        }
    }

    /// 网关服务信息
    public struct BackendServiceInfo: TCOutputModel {
        /// 服务名称
        public let serviceName: String

        /// 服务状态
        public let status: String

        enum CodingKeys: String, CodingKey {
            case serviceName = "ServiceName"
            case status = "Status"
        }
    }

    /// cloudrun安全特性能力
    public struct CloudBaseCapabilities: TCInputModel, TCOutputModel {
        /// 启用安全能力项列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let add: [String]?

        /// 禁用安全能力向列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let drop: [String]?

        public init(add: [String]? = nil, drop: [String]? = nil) {
            self.add = add
            self.drop = drop
        }

        enum CodingKeys: String, CodingKey {
            case add = "Add"
            case drop = "Drop"
        }
    }

    /// 代码仓库里 Repo的信息描述
    public struct CloudBaseCodeRepoDetail: TCInputModel, TCOutputModel {
        /// repo的名字
        public let name: CloudBaseCodeRepoName?

        /// repo的url
        public let url: String?

        public init(name: CloudBaseCodeRepoName? = nil, url: String? = nil) {
            self.name = name
            self.url = url
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case url = "Url"
        }
    }

    /// 代码仓库 repo的名字
    public struct CloudBaseCodeRepoName: TCInputModel, TCOutputModel {
        /// repo的名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// repo的完整全名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fullName: String?

        public init(name: String? = nil, fullName: String? = nil) {
            self.name = name
            self.fullName = fullName
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case fullName = "FullName"
        }
    }

    /// es信息
    public struct CloudBaseEsInfo: TCInputModel, TCOutputModel {
        /// es的id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// secret名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let secretName: String?

        /// ip地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// 端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 索引
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let index: String?

        /// 用户名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let account: String?

        /// 密码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let password: String?

        public init(id: Int64? = nil, secretName: String? = nil, ip: String? = nil, port: Int64? = nil, index: String? = nil, account: String? = nil, password: String? = nil) {
            self.id = id
            self.secretName = secretName
            self.ip = ip
            self.port = port
            self.index = index
            self.account = account
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case secretName = "SecretName"
            case ip = "Ip"
            case port = "Port"
            case index = "Index"
            case account = "Account"
            case password = "Password"
        }
    }

    /// 云开发项目版本
    public struct CloudBaseProjectVersion: TCOutputModel {
        /// 项目名
        public let name: String

        /// SAM json
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sam: String?

        /// 来源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: CodeSource?

        /// 创建时间, unix时间戳
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: Int64?

        /// 更新时间 ,unix时间戳
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Int64?

        /// 项目状态, 枚举值:
        ///         "creatingEnv"-创建环境中
        /// 	"createEnvFail"-创建环境失败
        /// 	"building"-构建中
        /// 	"buildFail"-构建失败
        /// 	"deploying"-部署中
        /// 	 "deployFail"-部署失败
        /// 	 "success"-部署成功
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 环境变量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let parameters: [KVPair]?

        /// 项目类型, 枚举值:
        /// "framework-oneclick" 控制台一键部署
        /// "framework-local-oneclick" cli本地一键部署
        /// "qci-extension-cicd" 内网coding ci cd
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// ci的id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ciId: String?

        /// cd的id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdId: String?

        /// 环境id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envId: String?

        /// 版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionNum: Int64?

        /// 错误原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failReason: String?

        /// rc.json内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rcJson: String?

        /// 插件配置内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addonConfig: String?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// 网络配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkConfig: String?

        /// 扩展id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extensionId: String?

        /// 错误类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failType: String?

        /// 私有仓库地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repoUrl: String?

        /// 是否私有仓库代码变更触发自动部署
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoDeployOnCodeChange: Bool?

        /// ci部署进度（%）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let buildPercent: Int64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sam = "Sam"
            case source = "Source"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case status = "Status"
            case parameters = "Parameters"
            case type = "Type"
            case ciId = "CIId"
            case cdId = "CDId"
            case envId = "EnvId"
            case versionNum = "VersionNum"
            case failReason = "FailReason"
            case rcJson = "RcJson"
            case addonConfig = "AddonConfig"
            case tags = "Tags"
            case networkConfig = "NetworkConfig"
            case extensionId = "ExtensionId"
            case failType = "FailType"
            case repoUrl = "RepoUrl"
            case autoDeployOnCodeChange = "AutoDeployOnCodeChange"
            case buildPercent = "BuildPercent"
        }
    }

    /// emptydir 数据卷详细信息
    public struct CloudBaseRunEmptyDirVolumeSource: TCInputModel {
        /// 启用emptydir数据卷
        public let enableEmptyDirVolume: Bool?

        /// "","Memory","HugePages"
        public let medium: String?

        /// emptydir数据卷大小
        public let sizeLimit: String?

        public init(enableEmptyDirVolume: Bool? = nil, medium: String? = nil, sizeLimit: String? = nil) {
            self.enableEmptyDirVolume = enableEmptyDirVolume
            self.medium = medium
            self.sizeLimit = sizeLimit
        }

        enum CodingKeys: String, CodingKey {
            case enableEmptyDirVolume = "EnableEmptyDirVolume"
            case medium = "Medium"
            case sizeLimit = "SizeLimit"
        }
    }

    /// 独立网关云托管服务配置信息
    public struct CloudBaseRunForGatewayConf: TCInputModel {
        /// 是否缩容到0
        public let isZero: Bool

        /// 按百分比灰度的权重
        public let weight: Int64

        /// 按请求/header参数的灰度Key
        public let grayKey: String

        /// 按请求/header参数的灰度Value
        public let grayValue: String

        /// 是否为默认版本(按请求/header参数)
        public let isDefault: Bool

        /// 访问权限，对应二进制分多段，vpc内网｜公网｜oa
        public let accessType: Int64

        /// 访问的URL（域名＋路径）列表
        public let urLs: [String]

        /// 环境ID
        public let envId: String?

        /// 服务名称
        public let serverName: String?

        /// 版本名称
        public let versionName: String?

        /// 灰度类型：FLOW(权重), URL_PARAMS/HEAD_PARAMS
        public let grayType: String?

        /// CLB的IP:Port
        public let lbAddr: String?

        /// 0:http访问服务配置信息, 1: 服务域名
        public let configType: Int64?

        public init(isZero: Bool, weight: Int64, grayKey: String, grayValue: String, isDefault: Bool, accessType: Int64, urLs: [String], envId: String? = nil, serverName: String? = nil, versionName: String? = nil, grayType: String? = nil, lbAddr: String? = nil, configType: Int64? = nil) {
            self.isZero = isZero
            self.weight = weight
            self.grayKey = grayKey
            self.grayValue = grayValue
            self.isDefault = isDefault
            self.accessType = accessType
            self.urLs = urLs
            self.envId = envId
            self.serverName = serverName
            self.versionName = versionName
            self.grayType = grayType
            self.lbAddr = lbAddr
            self.configType = configType
        }

        enum CodingKeys: String, CodingKey {
            case isZero = "IsZero"
            case weight = "Weight"
            case grayKey = "GrayKey"
            case grayValue = "GrayValue"
            case isDefault = "IsDefault"
            case accessType = "AccessType"
            case urLs = "URLs"
            case envId = "EnvId"
            case serverName = "ServerName"
            case versionName = "VersionName"
            case grayType = "GrayType"
            case lbAddr = "LbAddr"
            case configType = "ConfigType"
        }
    }

    /// CloudBaseRun 镜像信息
    public struct CloudBaseRunImageInfo: TCInputModel, TCOutputModel {
        /// 镜像仓库名称
        public let repositoryName: String

        /// 是否公有
        public let isPublic: Bool

        /// 镜像tag名称
        public let tagName: String

        /// 镜像server
        public let serverAddr: String

        /// 镜像拉取地址
        public let imageUrl: String

        public init(repositoryName: String, isPublic: Bool, tagName: String, serverAddr: String, imageUrl: String) {
            self.repositoryName = repositoryName
            self.isPublic = isPublic
            self.tagName = tagName
            self.serverAddr = serverAddr
            self.imageUrl = imageUrl
        }

        enum CodingKeys: String, CodingKey {
            case repositoryName = "RepositoryName"
            case isPublic = "IsPublic"
            case tagName = "TagName"
            case serverAddr = "ServerAddr"
            case imageUrl = "ImageUrl"
        }
    }

    /// ImageSecretInfo的信息
    public struct CloudBaseRunImageSecretInfo: TCInputModel {
        /// 镜像地址
        public let registryServer: String?

        /// 用户名
        public let userName: String?

        /// 仓库密码
        public let password: String?

        /// 邮箱
        public let email: String?

        public init(registryServer: String? = nil, userName: String? = nil, password: String? = nil, email: String? = nil) {
            self.registryServer = registryServer
            self.userName = userName
            self.password = password
            self.email = email
        }

        enum CodingKeys: String, CodingKey {
            case registryServer = "RegistryServer"
            case userName = "UserName"
            case password = "Password"
            case email = "Email"
        }
    }

    /// KV参数的优先级
    public struct CloudBaseRunKVPriority: TCOutputModel {
        /// 参数的Key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 参数的Value
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        /// 优先级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let priority: Int64?

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case priority = "Priority"
        }
    }

    /// nfs挂载资源
    public struct CloudBaseRunNfsVolumeSource: TCInputModel {
        /// NFS挂载Server
        public let server: String?

        /// Server路径
        public let path: String?

        /// 是否只读
        public let readOnly: Bool?

        /// secret名称
        public let secretName: String?

        /// 临时目录
        public let enableEmptyDirVolume: Bool?

        public init(server: String? = nil, path: String? = nil, readOnly: Bool? = nil, secretName: String? = nil, enableEmptyDirVolume: Bool? = nil) {
            self.server = server
            self.path = path
            self.readOnly = readOnly
            self.secretName = secretName
            self.enableEmptyDirVolume = enableEmptyDirVolume
        }

        enum CodingKeys: String, CodingKey {
            case server = "Server"
            case path = "Path"
            case readOnly = "ReadOnly"
            case secretName = "SecretName"
            case enableEmptyDirVolume = "EnableEmptyDirVolume"
        }
    }

    /// 版本的列表
    public struct CloudBaseRunServerVersionItem: TCOutputModel {
        /// 版本名称
        public let versionName: String

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 流量占比
        public let flowRatio: Int64

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedTime: String?

        /// 构建ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let buildId: Int64?

        /// 构建方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uploadType: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// url中的参数路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let urlParam: ObjectKV?

        /// 优先级（数值越小，优先级越高）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let priority: Int64?

        /// 是否是默认兜底版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDefaultPriority: Bool?

        /// KV Params
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowParams: [CloudBaseRunKVPriority]?

        /// 最小副本数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minReplicas: Int64?

        /// 最大副本数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxReplicas: Int64?

        /// 操作记录id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runId: String?

        /// 进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let percent: Int64?

        /// 当前副本数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentReplicas: Int64?

        /// Monolithic，Microservice
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let architecture: String?

        enum CodingKeys: String, CodingKey {
            case versionName = "VersionName"
            case status = "Status"
            case flowRatio = "FlowRatio"
            case createdTime = "CreatedTime"
            case updatedTime = "UpdatedTime"
            case buildId = "BuildId"
            case uploadType = "UploadType"
            case remark = "Remark"
            case urlParam = "UrlParam"
            case priority = "Priority"
            case isDefaultPriority = "IsDefaultPriority"
            case flowParams = "FlowParams"
            case minReplicas = "MinReplicas"
            case maxReplicas = "MaxReplicas"
            case runId = "RunId"
            case percent = "Percent"
            case currentReplicas = "CurrentReplicas"
            case architecture = "Architecture"
        }
    }

    /// 对标 EKS VolumeMount
    public struct CloudBaseRunServiceVolumeMount: TCInputModel {
        /// Volume 名称
        public let name: String?

        /// 挂载路径
        public let mountPath: String?

        /// 是否只读
        public let readOnly: Bool?

        /// 子路径
        public let subPath: String?

        /// 传播挂载方式
        public let mountPropagation: String?

        public init(name: String? = nil, mountPath: String? = nil, readOnly: Bool? = nil, subPath: String? = nil, mountPropagation: String? = nil) {
            self.name = name
            self.mountPath = mountPath
            self.readOnly = readOnly
            self.subPath = subPath
            self.mountPropagation = mountPropagation
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mountPath = "MountPath"
            case readOnly = "ReadOnly"
            case subPath = "SubPath"
            case mountPropagation = "MountPropagation"
        }
    }

    /// CloudBaseRun 的 Side 描述定义
    public struct CloudBaseRunSideSpec: TCInputModel, TCOutputModel {
        /// 容器镜像
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerImage: String?

        /// 容器端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerPort: Int64?

        /// 容器的名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerName: String?

        /// kv的json字符串
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envVar: String?

        /// InitialDelaySeconds 延迟多长时间启动健康检查
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let initialDelaySeconds: Int64?

        /// CPU大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpu: Int64?

        /// 内存大小（单位：M）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mem: Int64?

        /// 安全特性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let security: CloudBaseSecurityContext?

        /// 挂载信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let volumeMountInfos: [CloudBaseRunVolumeMount]?

        public init(containerImage: String? = nil, containerPort: Int64? = nil, containerName: String? = nil, envVar: String? = nil, initialDelaySeconds: Int64? = nil, cpu: Int64? = nil, mem: Int64? = nil, security: CloudBaseSecurityContext? = nil, volumeMountInfos: [CloudBaseRunVolumeMount]? = nil) {
            self.containerImage = containerImage
            self.containerPort = containerPort
            self.containerName = containerName
            self.envVar = envVar
            self.initialDelaySeconds = initialDelaySeconds
            self.cpu = cpu
            self.mem = mem
            self.security = security
            self.volumeMountInfos = volumeMountInfos
        }

        enum CodingKeys: String, CodingKey {
            case containerImage = "ContainerImage"
            case containerPort = "ContainerPort"
            case containerName = "ContainerName"
            case envVar = "EnvVar"
            case initialDelaySeconds = "InitialDelaySeconds"
            case cpu = "Cpu"
            case mem = "Mem"
            case security = "Security"
            case volumeMountInfos = "VolumeMountInfos"
        }
    }

    /// 版本流量占比
    public struct CloudBaseRunVersionFlowItem: TCInputModel, TCOutputModel {
        /// 版本名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionName: String?

        /// 流量占比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowRatio: Int64?

        /// 流量参数键值对（URL参数/HEADERS参数）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let urlParam: ObjectKV?

        /// 优先级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let priority: Int64?

        /// 是否是默认兜底版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDefaultPriority: Bool?

        public init(versionName: String, flowRatio: Int64? = nil, urlParam: ObjectKV? = nil, priority: Int64? = nil, isDefaultPriority: Bool? = nil) {
            self.versionName = versionName
            self.flowRatio = flowRatio
            self.urlParam = urlParam
            self.priority = priority
            self.isDefaultPriority = isDefaultPriority
        }

        enum CodingKeys: String, CodingKey {
            case versionName = "VersionName"
            case flowRatio = "FlowRatio"
            case urlParam = "UrlParam"
            case priority = "Priority"
            case isDefaultPriority = "IsDefaultPriority"
        }
    }

    /// cfs挂载点
    public struct CloudBaseRunVolumeMount: TCInputModel {
        /// 资源名
        public let name: String?

        /// 挂载路径
        public let mountPath: String?

        /// 是否只读
        public let readOnly: Bool?

        /// Nfs挂载信息
        public let nfsVolumes: [CloudBaseRunNfsVolumeSource]?

        public init(name: String? = nil, mountPath: String? = nil, readOnly: Bool? = nil, nfsVolumes: [CloudBaseRunNfsVolumeSource]? = nil) {
            self.name = name
            self.mountPath = mountPath
            self.readOnly = readOnly
            self.nfsVolumes = nfsVolumes
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mountPath = "MountPath"
            case readOnly = "ReadOnly"
            case nfsVolumes = "NfsVolumes"
        }
    }

    /// vpc信息
    public struct CloudBaseRunVpcInfo: TCInputModel, TCOutputModel {
        /// vpc的id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetIds: [String]?

        /// 创建类型(0=继承; 1=新建; 2=指定)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createType: Int64?

        public init(vpcId: String? = nil, subnetIds: [String]? = nil, createType: Int64? = nil) {
            self.vpcId = vpcId
            self.subnetIds = subnetIds
            self.createType = createType
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetIds = "SubnetIds"
            case createType = "CreateType"
        }
    }

    /// 子网信息
    public struct CloudBaseRunVpcSubnet: TCOutputModel {
        /// 子网id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 子网的ipv4
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cidr: String?

        /// 可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// subnet类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let target: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case cidr = "Cidr"
            case zone = "Zone"
            case type = "Type"
            case target = "Target"
            case region = "Region"
            case name = "Name"
        }
    }

    /// cloudrun安全特性
    public struct CloudBaseSecurityContext: TCInputModel, TCOutputModel {
        /// 安全特性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let capabilities: CloudBaseCapabilities?

        public init(capabilities: CloudBaseCapabilities? = nil) {
            self.capabilities = capabilities
        }

        enum CodingKeys: String, CodingKey {
            case capabilities = "Capabilities"
        }
    }

    /// CloudRunServiceSimpleVersionSnapshot 信息
    public struct CloudRunServiceSimpleVersionSnapshot: TCInputModel, TCOutputModel {
        /// 版本名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionName: String?

        /// 版本备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// cpu规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpu: Float?

        /// 内存规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mem: Float?

        /// 最小副本数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minNum: Int64?

        /// 最大副本数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxNum: Int64?

        /// 镜像url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageUrl: String?

        /// 扩容策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyType: String?

        /// 策略阈值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyThreshold: Int64?

        /// 环境参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envParams: String?

        /// 容器端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerPort: Int64?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 更新类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uploadType: String?

        /// dockerfile路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dockerfilePath: String?

        /// 构建路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let buildDir: String?

        /// repo类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repoType: String?

        /// 仓库
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repo: String?

        /// 分支
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let branch: String?

        /// 环境id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envId: String?

        /// 服务名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverName: String?

        /// package名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageName: String?

        /// package版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageVersion: String?

        /// 自定义log路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customLogs: String?

        /// 延时健康检查时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let initialDelaySeconds: Int64?

        /// snapshot名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshotName: String?

        /// 镜像信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageInfo: CloudBaseRunImageInfo?

        /// 代码仓库信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let codeDetail: CloudBaseCodeRepoDetail?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        public init(versionName: String? = nil, remark: String? = nil, cpu: Float? = nil, mem: Float? = nil, minNum: Int64? = nil, maxNum: Int64? = nil, imageUrl: String? = nil, policyType: String? = nil, policyThreshold: Int64? = nil, envParams: String? = nil, containerPort: Int64? = nil, createTime: String? = nil, updateTime: String? = nil, uploadType: String? = nil, dockerfilePath: String? = nil, buildDir: String? = nil, repoType: String? = nil, repo: String? = nil, branch: String? = nil, envId: String? = nil, serverName: String? = nil, packageName: String? = nil, packageVersion: String? = nil, customLogs: String? = nil, initialDelaySeconds: Int64? = nil, snapshotName: String? = nil, imageInfo: CloudBaseRunImageInfo? = nil, codeDetail: CloudBaseCodeRepoDetail? = nil, status: String? = nil) {
            self.versionName = versionName
            self.remark = remark
            self.cpu = cpu
            self.mem = mem
            self.minNum = minNum
            self.maxNum = maxNum
            self.imageUrl = imageUrl
            self.policyType = policyType
            self.policyThreshold = policyThreshold
            self.envParams = envParams
            self.containerPort = containerPort
            self.createTime = createTime
            self.updateTime = updateTime
            self.uploadType = uploadType
            self.dockerfilePath = dockerfilePath
            self.buildDir = buildDir
            self.repoType = repoType
            self.repo = repo
            self.branch = branch
            self.envId = envId
            self.serverName = serverName
            self.packageName = packageName
            self.packageVersion = packageVersion
            self.customLogs = customLogs
            self.initialDelaySeconds = initialDelaySeconds
            self.snapshotName = snapshotName
            self.imageInfo = imageInfo
            self.codeDetail = codeDetail
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case versionName = "VersionName"
            case remark = "Remark"
            case cpu = "Cpu"
            case mem = "Mem"
            case minNum = "MinNum"
            case maxNum = "MaxNum"
            case imageUrl = "ImageUrl"
            case policyType = "PolicyType"
            case policyThreshold = "PolicyThreshold"
            case envParams = "EnvParams"
            case containerPort = "ContainerPort"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case uploadType = "UploadType"
            case dockerfilePath = "DockerfilePath"
            case buildDir = "BuildDir"
            case repoType = "RepoType"
            case repo = "Repo"
            case branch = "Branch"
            case envId = "EnvId"
            case serverName = "ServerName"
            case packageName = "PackageName"
            case packageVersion = "PackageVersion"
            case customLogs = "CustomLogs"
            case initialDelaySeconds = "InitialDelaySeconds"
            case snapshotName = "SnapshotName"
            case imageInfo = "ImageInfo"
            case codeDetail = "CodeDetail"
            case status = "Status"
        }
    }

    /// 服务的volume
    public struct CloudRunServiceVolume: TCInputModel, TCOutputModel {
        /// 名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// NFS的挂载方式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nfs: CloudBaseRunNfsVolumeSource?

        /// secret名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let secretName: String?

        /// 是否开启临时目录逐步废弃，请使用 EmptyDir
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableEmptyDirVolume: Bool?

        /// emptydir数据卷详细信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let emptyDir: CloudBaseRunEmptyDirVolumeSource?

        public init(name: String? = nil, nfs: CloudBaseRunNfsVolumeSource? = nil, secretName: String? = nil, enableEmptyDirVolume: Bool? = nil, emptyDir: CloudBaseRunEmptyDirVolumeSource? = nil) {
            self.name = name
            self.nfs = nfs
            self.secretName = secretName
            self.enableEmptyDirVolume = enableEmptyDirVolume
            self.emptyDir = emptyDir
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case nfs = "NFS"
            case secretName = "SecretName"
            case enableEmptyDirVolume = "EnableEmptyDirVolume"
            case emptyDir = "EmptyDir"
        }
    }

    /// cls日志信息
    public struct ClsInfo: TCOutputModel {
        /// cls所属地域
        public let clsRegion: String

        /// cls日志集ID
        public let clsLogsetId: String

        /// cls日志主题ID
        public let clsTopicId: String

        /// 创建时间
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var createTime: Date

        enum CodingKeys: String, CodingKey {
            case clsRegion = "ClsRegion"
            case clsLogsetId = "ClsLogsetId"
            case clsTopicId = "ClsTopicId"
            case createTime = "CreateTime"
        }
    }

    /// 云开发项目来源
    public struct CodeSource: TCInputModel, TCOutputModel {
        /// 类型, 可能的枚举: "coding","package","package_url","github","gitlab","gitee","rawcode"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 下载链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 工作目录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workDir: String?

        /// code包名, type为coding的时候需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let codingPackageName: String?

        /// coding版本名, type为coding的时候需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let codingPackageVersion: String?

        /// 源码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rawCode: String?

        /// 代码分支
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let branch: String?

        /// coding项目ID，type为coding时需要填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: Int64?

        /// coding项目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectName: String?

        public init(type: String? = nil, url: String? = nil, name: String? = nil, workDir: String? = nil, codingPackageName: String? = nil, codingPackageVersion: String? = nil, rawCode: String? = nil, branch: String? = nil, projectId: Int64? = nil, projectName: String? = nil) {
            self.type = type
            self.url = url
            self.name = name
            self.workDir = workDir
            self.codingPackageName = codingPackageName
            self.codingPackageVersion = codingPackageVersion
            self.rawCode = rawCode
            self.branch = branch
            self.projectId = projectId
            self.projectName = projectName
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case url = "Url"
            case name = "Name"
            case workDir = "WorkDir"
            case codingPackageName = "CodingPackageName"
            case codingPackageVersion = "CodingPackageVersion"
            case rawCode = "RawCode"
            case branch = "Branch"
            case projectId = "ProjectId"
            case projectName = "ProjectName"
        }
    }

    /// 数据库资源信息
    public struct DatabasesInfo: TCOutputModel {
        /// 数据库唯一标识
        public let instanceId: String

        /// 状态。包含以下取值：
        /// <li>INITIALIZING：资源初始化中</li>
        /// <li>RUNNING：运行中，可正常使用的状态</li>
        /// <li>UNUSABLE：禁用，不可用</li>
        /// <li>OVERDUE：资源过期</li>
        public let status: String

        /// 所属地域。
        /// 当前支持ap-shanghai
        public let region: String

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case status = "Status"
            case region = "Region"
            case updateTime = "UpdateTime"
        }
    }

    /// 终端用户信息
    public struct EndUserInfo: TCOutputModel {
        /// 用户唯一ID
        public let uuId: String

        /// 微信ID
        public let wxOpenId: String

        /// qq ID
        public let qqOpenId: String

        /// 手机号
        public let phone: String

        /// 邮箱
        public let email: String

        /// 昵称
        public let nickName: String

        /// 性别
        public let gender: String

        /// 头像地址
        public let avatarUrl: String

        /// 更新时间
        public let updateTime: String

        /// 创建时间
        public let createTime: String

        /// 是否为匿名用户
        public let isAnonymous: Bool

        /// 是否禁用账户
        public let isDisabled: Bool

        /// 是否设置过密码
        public let hasPassword: Bool

        /// 用户名
        public let userName: String

        enum CodingKeys: String, CodingKey {
            case uuId = "UUId"
            case wxOpenId = "WXOpenId"
            case qqOpenId = "QQOpenId"
            case phone = "Phone"
            case email = "Email"
            case nickName = "NickName"
            case gender = "Gender"
            case avatarUrl = "AvatarUrl"
            case updateTime = "UpdateTime"
            case createTime = "CreateTime"
            case isAnonymous = "IsAnonymous"
            case isDisabled = "IsDisabled"
            case hasPassword = "HasPassword"
            case userName = "UserName"
        }
    }

    /// 环境计费信息
    public struct EnvBillingInfoItem: TCOutputModel {
        /// 环境ID
        public let envId: String

        /// tcb产品套餐ID，参考DescribePackages接口的返回值。
        public let packageId: String

        /// 自动续费标记
        public let isAutoRenew: Bool

        /// 状态。包含以下取值：
        /// <li> 空字符串：初始化中</li>
        /// <li> NORMAL：正常</li>
        /// <li> ISOLATE：隔离</li>
        public let status: String

        /// 支付方式。包含以下取值：
        /// <li> PREPAYMENT：预付费</li>
        /// <li> POSTPAID：后付费</li>
        public let payMode: String

        /// 隔离时间，最近一次隔离的时间
        public let isolatedTime: String

        /// 过期时间，套餐即将到期的时间
        public let expireTime: String

        /// 创建时间，第一次接入计费方案的时间。
        public let createTime: String

        /// 更新时间，计费信息最近一次更新的时间。
        public let updateTime: String

        /// true表示从未升级过付费版。
        public let isAlwaysFree: Bool

        /// 付费渠道。
        /// <li> miniapp：小程序</li>
        /// <li> qcloud：腾讯云</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paymentChannel: String?

        /// 最新的订单信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orderInfo: OrderInfo?

        /// 免费配额信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freeQuota: String?

        /// 是否开启 `超过套餐额度部分转按量付费`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableOverrun: Bool?

        /// 环境套餐类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extPackageType: String?

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case packageId = "PackageId"
            case isAutoRenew = "IsAutoRenew"
            case status = "Status"
            case payMode = "PayMode"
            case isolatedTime = "IsolatedTime"
            case expireTime = "ExpireTime"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case isAlwaysFree = "IsAlwaysFree"
            case paymentChannel = "PaymentChannel"
            case orderInfo = "OrderInfo"
            case freeQuota = "FreeQuota"
            case enableOverrun = "EnableOverrun"
            case extPackageType = "ExtPackageType"
        }
    }

    /// 环境信息
    public struct EnvInfo: TCOutputModel {
        /// 账户下该环境唯一标识
        public let envId: String

        /// 环境来源。包含以下取值：
        /// <li>miniapp：微信小程序</li>
        /// <li>qcloud ：腾讯云</li>
        public let source: String

        /// 环境别名，要以a-z开头，不能包含 a-zA-z0-9- 以外的字符
        public let alias: String

        /// 创建时间
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var createTime: Date

        /// 最后修改时间
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var updateTime: Date

        /// 环境状态。包含以下取值：
        /// <li>NORMAL：正常可用</li>
        /// <li>UNAVAILABLE：服务不可用，可能是尚未初始化或者初始化过程中</li>
        public let status: String

        /// 数据库列表
        public let databases: [DatabasesInfo]

        /// 存储列表
        public let storages: [StorageInfo]

        /// 函数列表
        public let functions: [FunctionInfo]

        /// tcb产品套餐ID，参考DescribePackages接口的返回值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageId: String?

        /// 套餐中文名称，参考DescribePackages接口的返回值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageName: String?

        /// 云日志服务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logServices: [LogServiceInfo]?

        /// 静态资源信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let staticStorages: [StaticStorageInfo]?

        /// 是否到期自动降为免费版
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAutoDegrade: Bool?

        /// 环境渠道
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envChannel: String?

        /// 支付方式。包含以下取值：
        /// <li> prepayment：预付费</li>
        /// <li> postpaid：后付费</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: String?

        /// 是否为默认环境
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDefault: Bool?

        /// 环境所属地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 环境标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 自定义日志服务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customLogServices: [ClsInfo]?

        /// 环境类型：baas, run, hoting, weda
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envType: String?

        /// 是否是dau新套餐
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDauPackage: Bool?

        /// 套餐类型:空\baas\tcbr
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageType: String?

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case source = "Source"
            case alias = "Alias"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case status = "Status"
            case databases = "Databases"
            case storages = "Storages"
            case functions = "Functions"
            case packageId = "PackageId"
            case packageName = "PackageName"
            case logServices = "LogServices"
            case staticStorages = "StaticStorages"
            case isAutoDegrade = "IsAutoDegrade"
            case envChannel = "EnvChannel"
            case payMode = "PayMode"
            case isDefault = "IsDefault"
            case region = "Region"
            case tags = "Tags"
            case customLogServices = "CustomLogServices"
            case envType = "EnvType"
            case isDauPackage = "IsDauPackage"
            case packageType = "PackageType"
        }
    }

    /// 扩展文件
    public struct ExtensionFile: TCInputModel {
        /// 文件类型。枚举值
        /// <li>FUNCTION：函数代码</li>
        /// <li>STATIC：静态托管代码</li>
        /// <li>SMS：短信文件</li>
        public let fileType: String

        /// 文件名，长度不超过24
        public let fileName: String

        public init(fileType: String, fileName: String) {
            self.fileType = fileType
            self.fileName = fileName
        }

        enum CodingKeys: String, CodingKey {
            case fileType = "FileType"
            case fileName = "FileName"
        }
    }

    /// 扩展文件信息
    public struct ExtensionFileInfo: TCOutputModel {
        /// 模板里使用的地址
        public let codeUri: String

        /// 上传文件的临时地址，含签名
        public let uploadUrl: String

        /// 自定义密钥。如果为空，则表示不需要加密
        public let customKey: String

        /// 文件大小限制，单位M，客户端上传前需要主动检查文件大小，超过限制的文件会被删除。
        public let maxSize: UInt64

        enum CodingKeys: String, CodingKey {
            case codeUri = "CodeUri"
            case uploadUrl = "UploadUrl"
            case customKey = "CustomKey"
            case maxSize = "MaxSize"
        }
    }

    /// 后付费资源免费量信息
    public struct FreequotaInfo: TCOutputModel {
        /// 资源类型
        /// <li>COS</li>
        /// <li>CDN</li>
        /// <li>FLEXDB</li>
        /// <li>SCF</li>
        public let resourceType: String

        /// 资源指标名称
        public let resourceMetric: String

        /// 资源指标免费量
        public let freeQuota: Int64

        /// 指标单位
        public let metricUnit: String

        /// 免费量抵扣周期
        /// <li>sum-month:以月为单位抵扣</li>
        /// <li>sum-day:以天为单位抵扣</li>
        /// <li>totalize:总容量抵扣</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deductType: String?

        /// 免费量类型
        /// <li>basic:通用量抵扣</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freeQuotaType: String?

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceMetric = "ResourceMetric"
            case freeQuota = "FreeQuota"
            case metricUnit = "MetricUnit"
            case deductType = "DeductType"
            case freeQuotaType = "FreeQuotaType"
        }
    }

    /// 函数的信息
    public struct FunctionInfo: TCOutputModel {
        /// 命名空间
        public let namespace: String

        /// 所属地域。
        /// 当前支持ap-shanghai
        public let region: String

        enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
            case region = "Region"
        }
    }

    /// 扩缩容策略
    public struct HpaPolicy: TCInputModel, TCOutputModel {
        /// 策略类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyType: String?

        /// 策略阈值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyThreshold: Int64?

        public init(policyType: String? = nil, policyThreshold: Int64? = nil) {
            self.policyType = policyType
            self.policyThreshold = policyThreshold
        }

        enum CodingKeys: String, CodingKey {
            case policyType = "PolicyType"
            case policyThreshold = "PolicyThreshold"
        }
    }

    /// 键值对
    public struct KVPair: TCInputModel, TCOutputModel {
        /// 键
        public let key: String

        /// 值
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// CLS日志单条信息
    public struct LogObject: TCOutputModel {
        /// 日志属于的 topic ID
        public let topicId: String

        /// 日志主题的名字
        public let topicName: String

        /// 日志时间
        public let timestamp: String

        /// 日志内容
        public let content: String

        /// 采集路径
        public let fileName: String

        /// 日志来源设备
        public let source: String

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case topicName = "TopicName"
            case timestamp = "Timestamp"
            case content = "Content"
            case fileName = "FileName"
            case source = "Source"
        }
    }

    /// CLS日志结果
    public struct LogResObject: TCOutputModel {
        /// 获取更多检索结果的游标
        public let context: String

        /// 搜索结果是否已经全部返回
        public let listOver: Bool

        /// 日志内容信息
        public let results: [LogObject]

        enum CodingKeys: String, CodingKey {
            case context = "Context"
            case listOver = "ListOver"
            case results = "Results"
        }
    }

    /// 云日志服务相关信息
    public struct LogServiceInfo: TCOutputModel {
        /// log名
        public let logsetName: String

        /// log-id
        public let logsetId: String

        /// topic名
        public let topicName: String

        /// topic-id
        public let topicId: String

        /// cls日志所属地域
        public let region: String

        /// topic保存时长 默认7天
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let period: Int64?

        enum CodingKeys: String, CodingKey {
            case logsetName = "LogsetName"
            case logsetId = "LogsetId"
            case topicName = "TopicName"
            case topicId = "TopicId"
            case region = "Region"
            case period = "Period"
        }
    }

    /// 终端用户登录新增统计
    public struct LoginStatistic: TCInputModel, TCOutputModel {
        /// 统计类型 新增NEWUSER 和登录 LOGIN
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statisticalType: String?

        /// 统计周期：日DAY，周WEEK，月MONTH
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statisticalCycle: String?

        /// 统计总量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: UInt64?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        public init(statisticalType: String? = nil, statisticalCycle: String? = nil, count: UInt64? = nil, updateTime: String? = nil) {
            self.statisticalType = statisticalType
            self.statisticalCycle = statisticalCycle
            self.count = count
            self.updateTime = updateTime
        }

        enum CodingKeys: String, CodingKey {
            case statisticalType = "StatisticalType"
            case statisticalCycle = "StatisticalCycle"
            case count = "Count"
            case updateTime = "UpdateTime"
        }
    }

    /// Key-Value类型，模拟的 object 类型
    public struct ObjectKV: TCOutputModel {
        /// object 的 key
        public let key: String

        /// object key 对应的 value
        public let value: String

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 一键部署步骤信息
    public struct OneClickTaskStepInfo: TCOutputModel {
        /// 未启动："todo"
        /// 运行中："running"
        /// 失败："failed"
        /// 成功结束："finished"
        public let status: String

        /// 开始时间
        public let startTime: String

        /// 结束时间
        public let endTime: String

        /// 耗时：秒
        public let costTime: Int64

        /// 失败原因
        public let failReason: String

        /// 步骤名
        public let name: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case costTime = "CostTime"
            case failReason = "FailReason"
            case name = "Name"
        }
    }

    /// 订单信息
    public struct OrderInfo: TCOutputModel {
        /// 订单号
        public let tranId: String

        /// 订单要切换的套餐ID
        public let packageId: String

        /// 订单类型
        /// <li>1 购买</li>
        /// <li>2 续费</li>
        /// <li>3 变配</li>
        public let tranType: String

        /// 订单状态。
        /// <li>1未支付</li>
        /// <li>2 支付中</li>
        /// <li>3 发货中</li>
        /// <li>4 发货成功</li>
        /// <li>5 发货失败</li>
        /// <li>6 已退款</li>
        /// <li>7 已取消</li>
        /// <li>100 已删除</li>
        public let tranStatus: String

        /// 订单更新时间
        public let updateTime: String

        /// 订单创建时间
        public let createTime: String

        /// 付费模式.
        /// <li>prepayment 预付费</li>
        /// <li>postpaid 后付费</li>
        public let payMode: String

        /// 订单绑定的扩展ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extensionId: String?

        /// 资源初始化结果(仅当ExtensionId不为空时有效): successful(初始化成功), failed(初始化失败), doing(初始化进行中), init(准备初始化)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceReady: String?

        /// 安装标记。建议使用方统一转大小写之后再判断。
        /// <li>QuickStart：快速启动来源</li>
        /// <li>Activity：活动来源</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flag: String?

        /// 下单时的参数
        public let reqBody: String

        enum CodingKeys: String, CodingKey {
            case tranId = "TranId"
            case packageId = "PackageId"
            case tranType = "TranType"
            case tranStatus = "TranStatus"
            case updateTime = "UpdateTime"
            case createTime = "CreateTime"
            case payMode = "PayMode"
            case extensionId = "ExtensionId"
            case resourceReady = "ResourceReady"
            case flag = "Flag"
            case reqBody = "ReqBody"
        }
    }

    /// 后付费免费额度
    public struct PackageFreeQuotaInfo: TCOutputModel {
        /// 资源类型
        /// <li>COS</li>
        /// <li>CDN</li>
        /// <li>FLEXDB</li>
        /// <li>SCF</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceType: String?

        /// 资源指标名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceMetric: String?

        /// 资源指标免费量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freeQuota: Int64?

        /// 指标单位
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricUnit: String?

        /// 免费量抵扣周期
        /// <li>sum-month:以月为单位抵扣</li>
        /// <li>sum-day:以天为单位抵扣</li>
        /// <li>totalize:总容量抵扣</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deductType: String?

        /// 免费量类型
        /// <li>basic:通用量抵扣</li>
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freeQuotaType: String?

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceMetric = "ResourceMetric"
            case freeQuota = "FreeQuota"
            case metricUnit = "MetricUnit"
            case deductType = "DeductType"
            case freeQuotaType = "FreeQuotaType"
        }
    }

    /// 终端用户平台统计信息
    public struct PlatformStatistic: TCInputModel, TCOutputModel {
        /// 终端用户从属平台
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let platform: String?

        /// 平台终端用户数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: UInt64?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        public init(platform: String? = nil, count: UInt64? = nil, updateTime: String? = nil) {
            self.platform = platform
            self.count = count
            self.updateTime = updateTime
        }

        enum CodingKeys: String, CodingKey {
            case platform = "Platform"
            case count = "Count"
            case updateTime = "UpdateTime"
        }
    }

    /// 后付费计费详情
    public struct PostPaidEnvDeductInfo: TCOutputModel {
        /// 资源方
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceType: String?

        /// 指标名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricName: String?

        /// 按量计费详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resQuota: Float?

        /// 资源包抵扣详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pkgQuota: Float?

        /// 免费额度抵扣详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freeQuota: Float?

        /// 环境id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envId: String?

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case metricName = "MetricName"
            case resQuota = "ResQuota"
            case pkgQuota = "PkgQuota"
            case freeQuota = "FreeQuota"
            case envId = "EnvId"
        }
    }

    /// 按量付费免费配额信息
    public struct PostpayEnvQuota: TCOutputModel {
        /// 资源类型
        public let resourceType: String

        /// 指标名
        public let metricName: String

        /// 配额值
        public let value: UInt64

        /// 配额生效时间
        /// 为空表示没有时间限制
        public let startTime: String

        /// 配额失效时间
        /// 为空表示没有时间限制
        public let endTime: String

        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case metricName = "MetricName"
            case value = "Value"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 短信免费量
    public struct SmsFreeQuota: TCOutputModel {
        /// 免费量总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let freeQuota: UInt64?

        /// 共计已使用总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalUsedQuota: UInt64?

        /// 免费周期起点，0000-00-00 00:00:00 形式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cycleStart: String?

        /// 免费周期终点，0000-00-00 00:00:00 形式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cycleEnd: String?

        /// 今天已使用总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let todayUsedQuota: UInt64?

        enum CodingKeys: String, CodingKey {
            case freeQuota = "FreeQuota"
            case totalUsedQuota = "TotalUsedQuota"
            case cycleStart = "CycleStart"
            case cycleEnd = "CycleEnd"
            case todayUsedQuota = "TodayUsedQuota"
        }
    }

    /// 1分钱计费详情
    public struct SpecialCostItem: TCOutputModel {
        /// 上报日期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reportDate: String?

        /// 腾讯云uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uin: String?

        /// 资源id:环境id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let envId: String?

        /// 上报任务状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        enum CodingKeys: String, CodingKey {
            case reportDate = "ReportDate"
            case uin = "Uin"
            case envId = "EnvId"
            case status = "Status"
        }
    }

    /// 独立网关信息
    public struct StandaloneGatewayInfo: TCOutputModel {
        /// 独立网关名称
        public let gatewayName: String

        /// CPU核心数
        public let cpu: Float

        /// 内存大小，单位MB
        public let mem: UInt64

        /// 套餐包版本名称
        public let packageVersion: String

        /// 网关别名
        public let gatewayAlias: String

        /// 私有网络ID
        public let vpcId: String

        /// 子网ID列表
        public let subnetIds: [String]

        /// 网关描述
        public let gatewayDesc: String

        /// 网关状态
        public let gateWayStatus: String

        /// 服务信息
        public let serviceInfo: BackendServiceInfo

        /// 公网CLBIP
        public let publicClbIp: String

        /// 内网CLBIP
        public let internalClbIp: String

        enum CodingKeys: String, CodingKey {
            case gatewayName = "GatewayName"
            case cpu = "CPU"
            case mem = "Mem"
            case packageVersion = "PackageVersion"
            case gatewayAlias = "GatewayAlias"
            case vpcId = "VpcId"
            case subnetIds = "SubnetIds"
            case gatewayDesc = "GatewayDesc"
            case gateWayStatus = "GateWayStatus"
            case serviceInfo = "ServiceInfo"
            case publicClbIp = "PublicClbIp"
            case internalClbIp = "InternalClbIp"
        }
    }

    /// 小租户网关套餐配置
    public struct StandaloneGatewayPackageInfo: TCOutputModel {
        /// CPU核心数
        public let cpu: Float

        /// 内存大小，单位MB
        public let mem: UInt64

        /// 套餐包版本名称
        public let packageVersion: String

        enum CodingKeys: String, CodingKey {
            case cpu = "CPU"
            case mem = "Mem"
            case packageVersion = "PackageVersion"
        }
    }

    /// 静态CDN资源信息
    public struct StaticStorageInfo: TCOutputModel {
        /// 静态CDN域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let staticDomain: String?

        /// 静态CDN默认文件夹，当前为根目录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultDirName: String?

        /// 资源状态(process/online/offline/init)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// cos所属区域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// bucket信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucket: String?

        enum CodingKeys: String, CodingKey {
            case staticDomain = "StaticDomain"
            case defaultDirName = "DefaultDirName"
            case status = "Status"
            case region = "Region"
            case bucket = "Bucket"
        }
    }

    /// StorageInfo 资源信息
    public struct StorageInfo: TCOutputModel {
        /// 资源所属地域。
        /// 当前支持ap-shanghai
        public let region: String

        /// 桶名，存储资源的唯一标识
        public let bucket: String

        /// cdn 域名
        public let cdnDomain: String

        /// 资源所属用户的腾讯云appId
        public let appId: String

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case bucket = "Bucket"
            case cdnDomain = "CdnDomain"
            case appId = "AppId"
        }
    }

    /// 标签键值对
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键
        public let key: String

        /// 标签值
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }
}
