//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Wav {
    /// QueryActivityLiveCodeList请求参数结构体
    public struct QueryActivityLiveCodeListRequest: TCPaginatedRequest {
        /// 用于分页查询的游标，字符串类型，由上一次调用返回，首次调用可不填
        public let cursor: String?

        /// 返回的最大记录数，整型，最大值100，默认值50，超过最大值时取最大值
        public let limit: Int64?

        public init(cursor: String? = nil, limit: Int64? = nil) {
            self.cursor = cursor
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case cursor = "Cursor"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: QueryActivityLiveCodeListResponse) -> QueryActivityLiveCodeListRequest? {
            guard response.nextCursor != nil else {
                return nil
            }
            return .init(cursor: response.nextCursor, limit: self.limit)
        }
    }

    /// QueryActivityLiveCodeList返回参数结构体
    public struct QueryActivityLiveCodeListResponse: TCPaginatedResponse {
        /// 分页游标，再下次请求时填写以获取之后分页的记录，如果已经没有更多的数据则返回空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nextCursor: String?

        /// 活码列表响应参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pageData: [LiveCodeDetail]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case nextCursor = "NextCursor"
            case pageData = "PageData"
            case requestId = "RequestId"
        }

        /// Extract the returned ``LiveCodeDetail`` list from the paginated response.
        public func getItems() -> [LiveCodeDetail] {
            self.pageData ?? []
        }
    }

    /// 查询活动活码列表接口
    ///
    /// 根据游标拉取活动活码列表信息
    @inlinable
    public func queryActivityLiveCodeList(_ input: QueryActivityLiveCodeListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryActivityLiveCodeListResponse> {
        self.client.execute(action: "QueryActivityLiveCodeList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询活动活码列表接口
    ///
    /// 根据游标拉取活动活码列表信息
    @inlinable
    public func queryActivityLiveCodeList(_ input: QueryActivityLiveCodeListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryActivityLiveCodeListResponse {
        try await self.client.execute(action: "QueryActivityLiveCodeList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询活动活码列表接口
    ///
    /// 根据游标拉取活动活码列表信息
    @inlinable
    public func queryActivityLiveCodeList(cursor: String? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryActivityLiveCodeListResponse> {
        self.queryActivityLiveCodeList(.init(cursor: cursor, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询活动活码列表接口
    ///
    /// 根据游标拉取活动活码列表信息
    @inlinable
    public func queryActivityLiveCodeList(cursor: String? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryActivityLiveCodeListResponse {
        try await self.queryActivityLiveCodeList(.init(cursor: cursor, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询活动活码列表接口
    ///
    /// 根据游标拉取活动活码列表信息
    @inlinable
    public func queryActivityLiveCodeListPaginated(_ input: QueryActivityLiveCodeListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [LiveCodeDetail])> {
        self.client.paginate(input: input, region: region, command: self.queryActivityLiveCodeList, logger: logger, on: eventLoop)
    }

    /// 查询活动活码列表接口
    ///
    /// 根据游标拉取活动活码列表信息
    @inlinable @discardableResult
    public func queryActivityLiveCodeListPaginated(_ input: QueryActivityLiveCodeListRequest, region: TCRegion? = nil, onResponse: @escaping (QueryActivityLiveCodeListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.queryActivityLiveCodeList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询活动活码列表接口
    ///
    /// 根据游标拉取活动活码列表信息
    ///
    /// - Returns: `AsyncSequence`s of ``LiveCodeDetail`` and ``QueryActivityLiveCodeListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func queryActivityLiveCodeListPaginator(_ input: QueryActivityLiveCodeListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<QueryActivityLiveCodeListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.queryActivityLiveCodeList, logger: logger, on: eventLoop)
    }
}
