//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Wav {
    /// QueryLicenseInfo请求参数结构体
    public struct QueryLicenseInfoRequest: TCRequestModel {
        /// license编号
        public let license: String

        public init(license: String) {
            self.license = license
        }

        enum CodingKeys: String, CodingKey {
            case license = "License"
        }
    }

    /// QueryLicenseInfo返回参数结构体
    public struct QueryLicenseInfoResponse: TCResponseModel {
        /// license响应信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let licenseInfo: LicenseInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case licenseInfo = "LicenseInfo"
            case requestId = "RequestId"
        }
    }

    /// 查询license信息接口
    ///
    /// 该接口获取license对应的详细信息
    @inlinable
    public func queryLicenseInfo(_ input: QueryLicenseInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryLicenseInfoResponse> {
        self.client.execute(action: "QueryLicenseInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询license信息接口
    ///
    /// 该接口获取license对应的详细信息
    @inlinable
    public func queryLicenseInfo(_ input: QueryLicenseInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryLicenseInfoResponse {
        try await self.client.execute(action: "QueryLicenseInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询license信息接口
    ///
    /// 该接口获取license对应的详细信息
    @inlinable
    public func queryLicenseInfo(license: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryLicenseInfoResponse> {
        self.queryLicenseInfo(.init(license: license), region: region, logger: logger, on: eventLoop)
    }

    /// 查询license信息接口
    ///
    /// 该接口获取license对应的详细信息
    @inlinable
    public func queryLicenseInfo(license: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryLicenseInfoResponse {
        try await self.queryLicenseInfo(.init(license: license), region: region, logger: logger, on: eventLoop)
    }
}
