//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Gs {
    /// StopGame请求参数结构体
    public struct StopGameRequest: TCRequestModel {
        /// 唯一用户身份标识，由业务方自定义，平台不予理解。（可根据业务需要决定使用用户的唯一身份标识或是使用时间戳随机生成；在用户重连时应保持UserId不变）
        public let userId: String

        /// 【多人游戏】游戏主机用户ID
        public let hostUserId: String?

        public init(userId: String, hostUserId: String? = nil) {
            self.userId = userId
            self.hostUserId = hostUserId
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case hostUserId = "HostUserId"
        }
    }

    /// StopGame返回参数结构体
    public struct StopGameResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 强制退出游戏
    @inlinable @discardableResult
    public func stopGame(_ input: StopGameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopGameResponse> {
        self.client.execute(action: "StopGame", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 强制退出游戏
    @inlinable @discardableResult
    public func stopGame(_ input: StopGameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopGameResponse {
        try await self.client.execute(action: "StopGame", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 强制退出游戏
    @inlinable @discardableResult
    public func stopGame(userId: String, hostUserId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopGameResponse> {
        self.stopGame(StopGameRequest(userId: userId, hostUserId: hostUserId), region: region, logger: logger, on: eventLoop)
    }

    /// 强制退出游戏
    @inlinable @discardableResult
    public func stopGame(userId: String, hostUserId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopGameResponse {
        try await self.stopGame(StopGameRequest(userId: userId, hostUserId: hostUserId), region: region, logger: logger, on: eventLoop)
    }
}
