//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DescribeClusterPasswordComplexity请求参数结构体
    public struct DescribeClusterPasswordComplexityRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    /// DescribeClusterPasswordComplexity返回参数结构体
    public struct DescribeClusterPasswordComplexityResponse: TCResponseModel {
        /// 数据字典参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validatePasswordDictionary: ParamInfo?

        /// 密码长度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validatePasswordLength: ParamInfo?

        /// 大小写敏感字符个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validatePasswordMixedCaseCount: ParamInfo?

        /// 数字个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validatePasswordNumberCount: ParamInfo?

        /// 密码等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validatePasswordPolicy: ParamInfo?

        /// 特殊字符个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validatePasswordSpecialCharCount: ParamInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case validatePasswordDictionary = "ValidatePasswordDictionary"
            case validatePasswordLength = "ValidatePasswordLength"
            case validatePasswordMixedCaseCount = "ValidatePasswordMixedCaseCount"
            case validatePasswordNumberCount = "ValidatePasswordNumberCount"
            case validatePasswordPolicy = "ValidatePasswordPolicy"
            case validatePasswordSpecialCharCount = "ValidatePasswordSpecialCharCount"
            case requestId = "RequestId"
        }
    }

    /// 查看集群密码复杂度详情
    ///
    /// 本接口（DescribeClusterPasswordComplexity）用于查看集群密码复杂度详情
    @inlinable
    public func describeClusterPasswordComplexity(_ input: DescribeClusterPasswordComplexityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterPasswordComplexityResponse> {
        self.client.execute(action: "DescribeClusterPasswordComplexity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看集群密码复杂度详情
    ///
    /// 本接口（DescribeClusterPasswordComplexity）用于查看集群密码复杂度详情
    @inlinable
    public func describeClusterPasswordComplexity(_ input: DescribeClusterPasswordComplexityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterPasswordComplexityResponse {
        try await self.client.execute(action: "DescribeClusterPasswordComplexity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看集群密码复杂度详情
    ///
    /// 本接口（DescribeClusterPasswordComplexity）用于查看集群密码复杂度详情
    @inlinable
    public func describeClusterPasswordComplexity(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterPasswordComplexityResponse> {
        self.describeClusterPasswordComplexity(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 查看集群密码复杂度详情
    ///
    /// 本接口（DescribeClusterPasswordComplexity）用于查看集群密码复杂度详情
    @inlinable
    public func describeClusterPasswordComplexity(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterPasswordComplexityResponse {
        try await self.describeClusterPasswordComplexity(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
