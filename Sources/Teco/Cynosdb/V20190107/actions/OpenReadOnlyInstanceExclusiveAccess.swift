//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// OpenReadOnlyInstanceExclusiveAccess请求参数结构体
    public struct OpenReadOnlyInstanceExclusiveAccessRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 需要开通独有访问的只读实例ID
        public let instanceId: String

        /// 指定的vpc ID
        public let vpcId: String

        /// 指定的子网ID
        public let subnetId: String

        /// 端口
        public let port: Int64

        /// 安全组
        public let securityGroupIds: [String]?

        public init(clusterId: String, instanceId: String, vpcId: String, subnetId: String, port: Int64, securityGroupIds: [String]? = nil) {
            self.clusterId = clusterId
            self.instanceId = instanceId
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.port = port
            self.securityGroupIds = securityGroupIds
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceId = "InstanceId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case port = "Port"
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    /// OpenReadOnlyInstanceExclusiveAccess返回参数结构体
    public struct OpenReadOnlyInstanceExclusiveAccessResponse: TCResponseModel {
        /// 开通流程ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 开通只读实例独有访问接入组
    @inlinable
    public func openReadOnlyInstanceExclusiveAccess(_ input: OpenReadOnlyInstanceExclusiveAccessRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<OpenReadOnlyInstanceExclusiveAccessResponse> {
        self.client.execute(action: "OpenReadOnlyInstanceExclusiveAccess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开通只读实例独有访问接入组
    @inlinable
    public func openReadOnlyInstanceExclusiveAccess(_ input: OpenReadOnlyInstanceExclusiveAccessRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OpenReadOnlyInstanceExclusiveAccessResponse {
        try await self.client.execute(action: "OpenReadOnlyInstanceExclusiveAccess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开通只读实例独有访问接入组
    @inlinable
    public func openReadOnlyInstanceExclusiveAccess(clusterId: String, instanceId: String, vpcId: String, subnetId: String, port: Int64, securityGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<OpenReadOnlyInstanceExclusiveAccessResponse> {
        self.openReadOnlyInstanceExclusiveAccess(.init(clusterId: clusterId, instanceId: instanceId, vpcId: vpcId, subnetId: subnetId, port: port, securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }

    /// 开通只读实例独有访问接入组
    @inlinable
    public func openReadOnlyInstanceExclusiveAccess(clusterId: String, instanceId: String, vpcId: String, subnetId: String, port: Int64, securityGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OpenReadOnlyInstanceExclusiveAccessResponse {
        try await self.openReadOnlyInstanceExclusiveAccess(.init(clusterId: clusterId, instanceId: instanceId, vpcId: vpcId, subnetId: subnetId, port: port, securityGroupIds: securityGroupIds), region: region, logger: logger, on: eventLoop)
    }
}
