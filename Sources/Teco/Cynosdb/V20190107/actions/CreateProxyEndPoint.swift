//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// CreateProxyEndPoint请求参数结构体
    public struct CreateProxyEndPointRequest: TCRequest {
        /// 集群ID
        public let clusterId: String

        /// 私有网络ID，默认与集群私有网络ID保持一致
        public let uniqueVpcId: String

        /// 私有网络子网ID，默认与集群子网ID保持一致
        public let uniqueSubnetId: String

        /// 连接池类型：SessionConnectionPool(会话级别连接池 )
        public let connectionPoolType: String?

        /// 是否开启连接池,yes-开启，no-不开启
        public let openConnectionPool: String?

        /// 连接池阈值：单位（秒）
        public let connectionPoolTimeOut: Int64?

        /// 安全组ID数组
        public let securityGroupIds: [String]?

        /// 描述说明
        public let description: String?

        /// vip信息
        public let vip: String?

        /// 权重模式：
        /// system-系统分配，custom-自定义
        public let weightMode: String?

        /// 是否自动添加只读实例，yes-是，no-不自动添加
        public let autoAddRo: String?

        /// 是否开启故障转移
        public let failOver: String?

        /// 一致性类型：
        /// eventual,global,session
        public let consistencyType: String?

        /// 读写属性：
        /// READWRITE,READONLY
        public let rwType: String?

        /// 一致性超时时间
        public let consistencyTimeOut: Int64?

        /// 事务拆分
        public let transSplit: Bool?

        /// 连接模式：
        /// nearby,balance
        public let accessMode: String?

        /// 实例权重
        public let instanceWeights: [ProxyInstanceWeight]?

        public init(clusterId: String, uniqueVpcId: String, uniqueSubnetId: String, connectionPoolType: String? = nil, openConnectionPool: String? = nil, connectionPoolTimeOut: Int64? = nil, securityGroupIds: [String]? = nil, description: String? = nil, vip: String? = nil, weightMode: String? = nil, autoAddRo: String? = nil, failOver: String? = nil, consistencyType: String? = nil, rwType: String? = nil, consistencyTimeOut: Int64? = nil, transSplit: Bool? = nil, accessMode: String? = nil, instanceWeights: [ProxyInstanceWeight]? = nil) {
            self.clusterId = clusterId
            self.uniqueVpcId = uniqueVpcId
            self.uniqueSubnetId = uniqueSubnetId
            self.connectionPoolType = connectionPoolType
            self.openConnectionPool = openConnectionPool
            self.connectionPoolTimeOut = connectionPoolTimeOut
            self.securityGroupIds = securityGroupIds
            self.description = description
            self.vip = vip
            self.weightMode = weightMode
            self.autoAddRo = autoAddRo
            self.failOver = failOver
            self.consistencyType = consistencyType
            self.rwType = rwType
            self.consistencyTimeOut = consistencyTimeOut
            self.transSplit = transSplit
            self.accessMode = accessMode
            self.instanceWeights = instanceWeights
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case uniqueVpcId = "UniqueVpcId"
            case uniqueSubnetId = "UniqueSubnetId"
            case connectionPoolType = "ConnectionPoolType"
            case openConnectionPool = "OpenConnectionPool"
            case connectionPoolTimeOut = "ConnectionPoolTimeOut"
            case securityGroupIds = "SecurityGroupIds"
            case description = "Description"
            case vip = "Vip"
            case weightMode = "WeightMode"
            case autoAddRo = "AutoAddRo"
            case failOver = "FailOver"
            case consistencyType = "ConsistencyType"
            case rwType = "RwType"
            case consistencyTimeOut = "ConsistencyTimeOut"
            case transSplit = "TransSplit"
            case accessMode = "AccessMode"
            case instanceWeights = "InstanceWeights"
        }
    }

    /// CreateProxyEndPoint返回参数结构体
    public struct CreateProxyEndPointResponse: TCResponse {
        /// 异步流程ID
        public let flowId: Int64

        /// 异步任务ID
        public let taskId: Int64

        /// 数据库代理组ID
        public let proxyGroupId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case taskId = "TaskId"
            case proxyGroupId = "ProxyGroupId"
            case requestId = "RequestId"
        }
    }

    /// 创建数据库代理连接点
    @inlinable
    public func createProxyEndPoint(_ input: CreateProxyEndPointRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateProxyEndPointResponse> {
        self.client.execute(action: "CreateProxyEndPoint", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理连接点
    @inlinable
    public func createProxyEndPoint(_ input: CreateProxyEndPointRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateProxyEndPointResponse {
        try await self.client.execute(action: "CreateProxyEndPoint", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据库代理连接点
    @inlinable
    public func createProxyEndPoint(clusterId: String, uniqueVpcId: String, uniqueSubnetId: String, connectionPoolType: String? = nil, openConnectionPool: String? = nil, connectionPoolTimeOut: Int64? = nil, securityGroupIds: [String]? = nil, description: String? = nil, vip: String? = nil, weightMode: String? = nil, autoAddRo: String? = nil, failOver: String? = nil, consistencyType: String? = nil, rwType: String? = nil, consistencyTimeOut: Int64? = nil, transSplit: Bool? = nil, accessMode: String? = nil, instanceWeights: [ProxyInstanceWeight]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateProxyEndPointResponse> {
        self.createProxyEndPoint(.init(clusterId: clusterId, uniqueVpcId: uniqueVpcId, uniqueSubnetId: uniqueSubnetId, connectionPoolType: connectionPoolType, openConnectionPool: openConnectionPool, connectionPoolTimeOut: connectionPoolTimeOut, securityGroupIds: securityGroupIds, description: description, vip: vip, weightMode: weightMode, autoAddRo: autoAddRo, failOver: failOver, consistencyType: consistencyType, rwType: rwType, consistencyTimeOut: consistencyTimeOut, transSplit: transSplit, accessMode: accessMode, instanceWeights: instanceWeights), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理连接点
    @inlinable
    public func createProxyEndPoint(clusterId: String, uniqueVpcId: String, uniqueSubnetId: String, connectionPoolType: String? = nil, openConnectionPool: String? = nil, connectionPoolTimeOut: Int64? = nil, securityGroupIds: [String]? = nil, description: String? = nil, vip: String? = nil, weightMode: String? = nil, autoAddRo: String? = nil, failOver: String? = nil, consistencyType: String? = nil, rwType: String? = nil, consistencyTimeOut: Int64? = nil, transSplit: Bool? = nil, accessMode: String? = nil, instanceWeights: [ProxyInstanceWeight]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateProxyEndPointResponse {
        try await self.createProxyEndPoint(.init(clusterId: clusterId, uniqueVpcId: uniqueVpcId, uniqueSubnetId: uniqueSubnetId, connectionPoolType: connectionPoolType, openConnectionPool: openConnectionPool, connectionPoolTimeOut: connectionPoolTimeOut, securityGroupIds: securityGroupIds, description: description, vip: vip, weightMode: weightMode, autoAddRo: autoAddRo, failOver: failOver, consistencyType: consistencyType, rwType: rwType, consistencyTimeOut: consistencyTimeOut, transSplit: transSplit, accessMode: accessMode, instanceWeights: instanceWeights), region: region, logger: logger, on: eventLoop)
    }
}
