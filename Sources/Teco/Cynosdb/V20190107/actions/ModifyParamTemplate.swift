//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// ModifyParamTemplate请求参数结构体
    public struct ModifyParamTemplateRequest: TCRequestModel {
        /// 模板ID
        public let templateId: Int64

        /// 模板名
        public let templateName: String?

        /// 模板描述
        public let templateDescription: String?

        /// 参数列表
        public let paramList: [ModifyParamItem]?

        public init(templateId: Int64, templateName: String? = nil, templateDescription: String? = nil, paramList: [ModifyParamItem]? = nil) {
            self.templateId = templateId
            self.templateName = templateName
            self.templateDescription = templateDescription
            self.paramList = paramList
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case templateDescription = "TemplateDescription"
            case paramList = "ParamList"
        }
    }

    /// ModifyParamTemplate返回参数结构体
    public struct ModifyParamTemplateResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改参数模板
    ///
    /// 本接口（ModifyParamTemplate）用于修改用户参数模板。
    @inlinable @discardableResult
    public func modifyParamTemplate(_ input: ModifyParamTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyParamTemplateResponse> {
        self.client.execute(action: "ModifyParamTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改参数模板
    ///
    /// 本接口（ModifyParamTemplate）用于修改用户参数模板。
    @inlinable @discardableResult
    public func modifyParamTemplate(_ input: ModifyParamTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyParamTemplateResponse {
        try await self.client.execute(action: "ModifyParamTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改参数模板
    ///
    /// 本接口（ModifyParamTemplate）用于修改用户参数模板。
    @inlinable @discardableResult
    public func modifyParamTemplate(templateId: Int64, templateName: String? = nil, templateDescription: String? = nil, paramList: [ModifyParamItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyParamTemplateResponse> {
        self.modifyParamTemplate(.init(templateId: templateId, templateName: templateName, templateDescription: templateDescription, paramList: paramList), region: region, logger: logger, on: eventLoop)
    }

    /// 修改参数模板
    ///
    /// 本接口（ModifyParamTemplate）用于修改用户参数模板。
    @inlinable @discardableResult
    public func modifyParamTemplate(templateId: Int64, templateName: String? = nil, templateDescription: String? = nil, paramList: [ModifyParamItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyParamTemplateResponse {
        try await self.modifyParamTemplate(.init(templateId: templateId, templateName: templateName, templateDescription: templateDescription, paramList: paramList), region: region, logger: logger, on: eventLoop)
    }
}
