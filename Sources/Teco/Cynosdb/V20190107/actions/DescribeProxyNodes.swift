//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DescribeProxyNodes请求参数结构体
    public struct DescribeProxyNodesRequest: TCPaginatedRequest {
        /// 返回数量，默认为 20，最大值为 100
        public let limit: Int64?

        /// 记录偏移量，默认值为0
        public let offset: Int64?

        /// 排序字段，取值范围：
        /// - CREATETIME：创建时间
        /// - PERIODENDTIME：过期时间
        public let orderBy: String?

        /// 排序类型，取值范围：
        /// - ASC：升序排序
        /// - DESC：降序排序
        public let orderByType: String?

        /// 搜索条件，若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
        public let filters: [QueryFilter]?

        public init(limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, filters: [QueryFilter]? = nil) {
            self.limit = limit
            self.offset = offset
            self.orderBy = orderBy
            self.orderByType = orderByType
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeProxyNodesResponse) -> DescribeProxyNodesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), orderBy: self.orderBy, orderByType: self.orderByType, filters: self.filters)
        }
    }

    /// DescribeProxyNodes返回参数结构体
    public struct DescribeProxyNodesResponse: TCPaginatedResponse {
        /// 数据库代理节点总数
        public let totalCount: Int64

        /// 数据库代理节点列表
        public let proxyNodeInfos: [ProxyNodeInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case proxyNodeInfos = "ProxyNodeInfos"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ProxyNodeInfo`` list from the paginated response.
        public func getItems() -> [ProxyNodeInfo] {
            self.proxyNodeInfos
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询代理节点列表
    ///
    /// 本接口（DescribeProxyNodes）用于查询代理节点列表。
    @inlinable
    public func describeProxyNodes(_ input: DescribeProxyNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProxyNodesResponse> {
        self.client.execute(action: "DescribeProxyNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询代理节点列表
    ///
    /// 本接口（DescribeProxyNodes）用于查询代理节点列表。
    @inlinable
    public func describeProxyNodes(_ input: DescribeProxyNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProxyNodesResponse {
        try await self.client.execute(action: "DescribeProxyNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询代理节点列表
    ///
    /// 本接口（DescribeProxyNodes）用于查询代理节点列表。
    @inlinable
    public func describeProxyNodes(limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, filters: [QueryFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProxyNodesResponse> {
        self.describeProxyNodes(.init(limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询代理节点列表
    ///
    /// 本接口（DescribeProxyNodes）用于查询代理节点列表。
    @inlinable
    public func describeProxyNodes(limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, filters: [QueryFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProxyNodesResponse {
        try await self.describeProxyNodes(.init(limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询代理节点列表
    ///
    /// 本接口（DescribeProxyNodes）用于查询代理节点列表。
    @inlinable
    public func describeProxyNodesPaginated(_ input: DescribeProxyNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [ProxyNodeInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeProxyNodes, logger: logger, on: eventLoop)
    }

    /// 查询代理节点列表
    ///
    /// 本接口（DescribeProxyNodes）用于查询代理节点列表。
    @inlinable @discardableResult
    public func describeProxyNodesPaginated(_ input: DescribeProxyNodesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeProxyNodesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeProxyNodes, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询代理节点列表
    ///
    /// 本接口（DescribeProxyNodes）用于查询代理节点列表。
    ///
    /// - Returns: `AsyncSequence`s of ``ProxyNodeInfo`` and ``DescribeProxyNodesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeProxyNodesPaginator(_ input: DescribeProxyNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeProxyNodesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeProxyNodes, logger: logger, on: eventLoop)
    }
}
