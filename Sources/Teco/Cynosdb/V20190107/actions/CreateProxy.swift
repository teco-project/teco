//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// CreateProxy请求参数结构体
    public struct CreateProxyRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// cpu核数
        public let cpu: Int64

        /// 内存
        public let mem: Int64

        /// 私有网络ID，默认与集群私有网络ID保持一致
        public let uniqueVpcId: String?

        /// 私有网络子网ID，默认与集群子网ID保持一致
        public let uniqueSubnetId: String?

        /// 数据库代理组节点个数
        public let proxyCount: Int64?

        /// 连接池类型：SessionConnectionPool(会话级别连接池 )
        public let connectionPoolType: String?

        /// 是否开启连接池,yes-开启，no-不开启
        public let openConnectionPool: String?

        /// 连接池阈值：单位（秒）
        public let connectionPoolTimeOut: Int64?

        /// 安全组ID数组
        public let securityGroupIds: [String]?

        /// 描述说明
        public let description: String?

        /// 数据库节点信息
        public let proxyZones: [ProxyZone]?

        public init(clusterId: String, cpu: Int64, mem: Int64, uniqueVpcId: String? = nil, uniqueSubnetId: String? = nil, proxyCount: Int64? = nil, connectionPoolType: String? = nil, openConnectionPool: String? = nil, connectionPoolTimeOut: Int64? = nil, securityGroupIds: [String]? = nil, description: String? = nil, proxyZones: [ProxyZone]? = nil) {
            self.clusterId = clusterId
            self.cpu = cpu
            self.mem = mem
            self.uniqueVpcId = uniqueVpcId
            self.uniqueSubnetId = uniqueSubnetId
            self.proxyCount = proxyCount
            self.connectionPoolType = connectionPoolType
            self.openConnectionPool = openConnectionPool
            self.connectionPoolTimeOut = connectionPoolTimeOut
            self.securityGroupIds = securityGroupIds
            self.description = description
            self.proxyZones = proxyZones
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case cpu = "Cpu"
            case mem = "Mem"
            case uniqueVpcId = "UniqueVpcId"
            case uniqueSubnetId = "UniqueSubnetId"
            case proxyCount = "ProxyCount"
            case connectionPoolType = "ConnectionPoolType"
            case openConnectionPool = "OpenConnectionPool"
            case connectionPoolTimeOut = "ConnectionPoolTimeOut"
            case securityGroupIds = "SecurityGroupIds"
            case description = "Description"
            case proxyZones = "ProxyZones"
        }
    }

    /// CreateProxy返回参数结构体
    public struct CreateProxyResponse: TCResponseModel {
        /// 异步流程ID
        public let flowId: Int64

        /// 异步任务ID
        public let taskId: Int64

        /// 数据库代理组ID
        public let proxyGroupId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case taskId = "TaskId"
            case proxyGroupId = "ProxyGroupId"
            case requestId = "RequestId"
        }
    }

    /// 创建数据库代理
    @inlinable
    public func createProxy(_ input: CreateProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateProxyResponse> {
        self.client.execute(action: "CreateProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理
    @inlinable
    public func createProxy(_ input: CreateProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateProxyResponse {
        try await self.client.execute(action: "CreateProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据库代理
    @inlinable
    public func createProxy(clusterId: String, cpu: Int64, mem: Int64, uniqueVpcId: String? = nil, uniqueSubnetId: String? = nil, proxyCount: Int64? = nil, connectionPoolType: String? = nil, openConnectionPool: String? = nil, connectionPoolTimeOut: Int64? = nil, securityGroupIds: [String]? = nil, description: String? = nil, proxyZones: [ProxyZone]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateProxyResponse> {
        self.createProxy(.init(clusterId: clusterId, cpu: cpu, mem: mem, uniqueVpcId: uniqueVpcId, uniqueSubnetId: uniqueSubnetId, proxyCount: proxyCount, connectionPoolType: connectionPoolType, openConnectionPool: openConnectionPool, connectionPoolTimeOut: connectionPoolTimeOut, securityGroupIds: securityGroupIds, description: description, proxyZones: proxyZones), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据库代理
    @inlinable
    public func createProxy(clusterId: String, cpu: Int64, mem: Int64, uniqueVpcId: String? = nil, uniqueSubnetId: String? = nil, proxyCount: Int64? = nil, connectionPoolType: String? = nil, openConnectionPool: String? = nil, connectionPoolTimeOut: Int64? = nil, securityGroupIds: [String]? = nil, description: String? = nil, proxyZones: [ProxyZone]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateProxyResponse {
        try await self.createProxy(.init(clusterId: clusterId, cpu: cpu, mem: mem, uniqueVpcId: uniqueVpcId, uniqueSubnetId: uniqueSubnetId, proxyCount: proxyCount, connectionPoolType: connectionPoolType, openConnectionPool: openConnectionPool, connectionPoolTimeOut: connectionPoolTimeOut, securityGroupIds: securityGroupIds, description: description, proxyZones: proxyZones), region: region, logger: logger, on: eventLoop)
    }
}
