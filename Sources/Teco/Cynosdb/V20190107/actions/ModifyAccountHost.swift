//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// ModifyAccountHost请求参数结构体
    public struct ModifyAccountHostRequest: TCRequestModel {
        /// 集群id
        public let clusterId: String

        /// 新主机
        public let newHost: String

        /// 账号信息
        public let account: InputAccount

        public init(clusterId: String, newHost: String, account: InputAccount) {
            self.clusterId = clusterId
            self.newHost = newHost
            self.account = account
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case newHost = "NewHost"
            case account = "Account"
        }
    }

    /// ModifyAccountHost返回参数结构体
    public struct ModifyAccountHostResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改账号主机
    @inlinable @discardableResult
    public func modifyAccountHost(_ input: ModifyAccountHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAccountHostResponse> {
        self.client.execute(action: "ModifyAccountHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改账号主机
    @inlinable @discardableResult
    public func modifyAccountHost(_ input: ModifyAccountHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAccountHostResponse {
        try await self.client.execute(action: "ModifyAccountHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改账号主机
    @inlinable @discardableResult
    public func modifyAccountHost(clusterId: String, newHost: String, account: InputAccount, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAccountHostResponse> {
        self.modifyAccountHost(.init(clusterId: clusterId, newHost: newHost, account: account), region: region, logger: logger, on: eventLoop)
    }

    /// 修改账号主机
    @inlinable @discardableResult
    public func modifyAccountHost(clusterId: String, newHost: String, account: InputAccount, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAccountHostResponse {
        try await self.modifyAccountHost(.init(clusterId: clusterId, newHost: newHost, account: account), region: region, logger: logger, on: eventLoop)
    }
}
