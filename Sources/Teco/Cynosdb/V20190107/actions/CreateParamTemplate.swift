//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// CreateParamTemplate请求参数结构体
    public struct CreateParamTemplateRequest: TCRequestModel {
        /// 模板名称
        public let templateName: String

        /// mysql版本号
        public let engineVersion: String

        /// 模板描述
        public let templateDescription: String?

        /// 可选参数，需要复制的模板ID
        public let templateId: Int64?

        /// 数据库类型，可选值：NORMAL（默认值），SERVERLESS
        public let dbMode: String?

        /// 参数列表
        public let paramList: [ParamItem]?

        public init(templateName: String, engineVersion: String, templateDescription: String? = nil, templateId: Int64? = nil, dbMode: String? = nil, paramList: [ParamItem]? = nil) {
            self.templateName = templateName
            self.engineVersion = engineVersion
            self.templateDescription = templateDescription
            self.templateId = templateId
            self.dbMode = dbMode
            self.paramList = paramList
        }

        enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case engineVersion = "EngineVersion"
            case templateDescription = "TemplateDescription"
            case templateId = "TemplateId"
            case dbMode = "DbMode"
            case paramList = "ParamList"
        }
    }

    /// CreateParamTemplate返回参数结构体
    public struct CreateParamTemplateResponse: TCResponseModel {
        /// 模板ID
        public let templateId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case requestId = "RequestId"
        }
    }

    /// 创建参数模板
    ///
    /// 本接口（CreateParamTemplate）用于创建参数模板
    @inlinable
    public func createParamTemplate(_ input: CreateParamTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateParamTemplateResponse> {
        self.client.execute(action: "CreateParamTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建参数模板
    ///
    /// 本接口（CreateParamTemplate）用于创建参数模板
    @inlinable
    public func createParamTemplate(_ input: CreateParamTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateParamTemplateResponse {
        try await self.client.execute(action: "CreateParamTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建参数模板
    ///
    /// 本接口（CreateParamTemplate）用于创建参数模板
    @inlinable
    public func createParamTemplate(templateName: String, engineVersion: String, templateDescription: String? = nil, templateId: Int64? = nil, dbMode: String? = nil, paramList: [ParamItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateParamTemplateResponse> {
        self.createParamTemplate(.init(templateName: templateName, engineVersion: engineVersion, templateDescription: templateDescription, templateId: templateId, dbMode: dbMode, paramList: paramList), region: region, logger: logger, on: eventLoop)
    }

    /// 创建参数模板
    ///
    /// 本接口（CreateParamTemplate）用于创建参数模板
    @inlinable
    public func createParamTemplate(templateName: String, engineVersion: String, templateDescription: String? = nil, templateId: Int64? = nil, dbMode: String? = nil, paramList: [ParamItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateParamTemplateResponse {
        try await self.createParamTemplate(.init(templateName: templateName, engineVersion: engineVersion, templateDescription: templateDescription, templateId: templateId, dbMode: dbMode, paramList: paramList), region: region, logger: logger, on: eventLoop)
    }
}
