//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// ModifyResourcePackageClusters请求参数结构体
    public struct ModifyResourcePackageClustersRequest: TCRequestModel {
        /// 资源包唯一ID
        public let packageId: String

        /// 需要建立绑定关系的集群ID
        public let bindClusterIds: [String]?

        /// 需要解除绑定关系的集群ID
        public let unbindClusterIds: [String]?

        public init(packageId: String, bindClusterIds: [String]? = nil, unbindClusterIds: [String]? = nil) {
            self.packageId = packageId
            self.bindClusterIds = bindClusterIds
            self.unbindClusterIds = unbindClusterIds
        }

        enum CodingKeys: String, CodingKey {
            case packageId = "PackageId"
            case bindClusterIds = "BindClusterIds"
            case unbindClusterIds = "UnbindClusterIds"
        }
    }

    /// ModifyResourcePackageClusters返回参数结构体
    public struct ModifyResourcePackageClustersResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改集群与资源包之间的绑定关系
    ///
    /// 给资源包绑定集群
    @inlinable @discardableResult
    public func modifyResourcePackageClusters(_ input: ModifyResourcePackageClustersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyResourcePackageClustersResponse> {
        self.client.execute(action: "ModifyResourcePackageClusters", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改集群与资源包之间的绑定关系
    ///
    /// 给资源包绑定集群
    @inlinable @discardableResult
    public func modifyResourcePackageClusters(_ input: ModifyResourcePackageClustersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyResourcePackageClustersResponse {
        try await self.client.execute(action: "ModifyResourcePackageClusters", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改集群与资源包之间的绑定关系
    ///
    /// 给资源包绑定集群
    @inlinable @discardableResult
    public func modifyResourcePackageClusters(packageId: String, bindClusterIds: [String]? = nil, unbindClusterIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyResourcePackageClustersResponse> {
        self.modifyResourcePackageClusters(.init(packageId: packageId, bindClusterIds: bindClusterIds, unbindClusterIds: unbindClusterIds), region: region, logger: logger, on: eventLoop)
    }

    /// 修改集群与资源包之间的绑定关系
    ///
    /// 给资源包绑定集群
    @inlinable @discardableResult
    public func modifyResourcePackageClusters(packageId: String, bindClusterIds: [String]? = nil, unbindClusterIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyResourcePackageClustersResponse {
        try await self.modifyResourcePackageClusters(.init(packageId: packageId, bindClusterIds: bindClusterIds, unbindClusterIds: unbindClusterIds), region: region, logger: logger, on: eventLoop)
    }
}
