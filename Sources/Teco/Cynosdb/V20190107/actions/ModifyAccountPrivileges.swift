//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// ModifyAccountPrivileges请求参数结构体
    public struct ModifyAccountPrivilegesRequest: TCRequest {
        /// 集群id
        public let clusterId: String

        /// 账号信息
        public let account: InputAccount

        /// 全局权限数组
        public let globalPrivileges: [String]?

        /// 数据库权限数组
        public let databasePrivileges: [DatabasePrivileges]?

        /// 表权限数组
        public let tablePrivileges: [TablePrivileges]?

        public init(clusterId: String, account: InputAccount, globalPrivileges: [String]? = nil, databasePrivileges: [DatabasePrivileges]? = nil, tablePrivileges: [TablePrivileges]? = nil) {
            self.clusterId = clusterId
            self.account = account
            self.globalPrivileges = globalPrivileges
            self.databasePrivileges = databasePrivileges
            self.tablePrivileges = tablePrivileges
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case account = "Account"
            case globalPrivileges = "GlobalPrivileges"
            case databasePrivileges = "DatabasePrivileges"
            case tablePrivileges = "TablePrivileges"
        }
    }

    /// ModifyAccountPrivileges返回参数结构体
    public struct ModifyAccountPrivilegesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改账号库表权限
    @inlinable @discardableResult
    public func modifyAccountPrivileges(_ input: ModifyAccountPrivilegesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAccountPrivilegesResponse> {
        self.client.execute(action: "ModifyAccountPrivileges", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改账号库表权限
    @inlinable @discardableResult
    public func modifyAccountPrivileges(_ input: ModifyAccountPrivilegesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAccountPrivilegesResponse {
        try await self.client.execute(action: "ModifyAccountPrivileges", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改账号库表权限
    @inlinable @discardableResult
    public func modifyAccountPrivileges(clusterId: String, account: InputAccount, globalPrivileges: [String]? = nil, databasePrivileges: [DatabasePrivileges]? = nil, tablePrivileges: [TablePrivileges]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAccountPrivilegesResponse> {
        self.modifyAccountPrivileges(.init(clusterId: clusterId, account: account, globalPrivileges: globalPrivileges, databasePrivileges: databasePrivileges, tablePrivileges: tablePrivileges), region: region, logger: logger, on: eventLoop)
    }

    /// 修改账号库表权限
    @inlinable @discardableResult
    public func modifyAccountPrivileges(clusterId: String, account: InputAccount, globalPrivileges: [String]? = nil, databasePrivileges: [DatabasePrivileges]? = nil, tablePrivileges: [TablePrivileges]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAccountPrivilegesResponse {
        try await self.modifyAccountPrivileges(.init(clusterId: clusterId, account: account, globalPrivileges: globalPrivileges, databasePrivileges: databasePrivileges, tablePrivileges: tablePrivileges), region: region, logger: logger, on: eventLoop)
    }
}
