//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// CreateResourcePackage请求参数结构体
    public struct CreateResourcePackageRequest: TCRequestModel {
        /// 实例类型
        public let instanceType: String

        /// 资源包使用地域
        /// china-中国内地通用，overseas-港澳台及海外通用
        public let packageRegion: String

        /// 资源包类型：CCU-计算资源包，DISK-存储资源包
        public let packageType: String

        /// 资源包版本
        /// base-基础版本，common-通用版本，enterprise-企业版本
        public let packageVersion: String

        /// 资源包大小，计算资源单位：万个；存储资源：GB
        public let packageSpec: Float

        /// 资源包有效期，单位:天
        public let expireDay: Int64

        /// 购买资源包个数
        public let packageCount: Int64

        /// 资源包名称
        public let packageName: String?

        public init(instanceType: String, packageRegion: String, packageType: String, packageVersion: String, packageSpec: Float, expireDay: Int64, packageCount: Int64, packageName: String? = nil) {
            self.instanceType = instanceType
            self.packageRegion = packageRegion
            self.packageType = packageType
            self.packageVersion = packageVersion
            self.packageSpec = packageSpec
            self.expireDay = expireDay
            self.packageCount = packageCount
            self.packageName = packageName
        }

        enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case packageRegion = "PackageRegion"
            case packageType = "PackageType"
            case packageVersion = "PackageVersion"
            case packageSpec = "PackageSpec"
            case expireDay = "ExpireDay"
            case packageCount = "PackageCount"
            case packageName = "PackageName"
        }
    }

    /// CreateResourcePackage返回参数结构体
    public struct CreateResourcePackageResponse: TCResponseModel {
        /// 付费总订单号
        public let bigDealIds: [String]

        /// 每个物品对应一个dealName，业务需要根据dealName保证发货接口幂等
        public let dealNames: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case bigDealIds = "BigDealIds"
            case dealNames = "DealNames"
            case requestId = "RequestId"
        }
    }

    /// 新购资源包
    @inlinable
    public func createResourcePackage(_ input: CreateResourcePackageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateResourcePackageResponse> {
        self.client.execute(action: "CreateResourcePackage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新购资源包
    @inlinable
    public func createResourcePackage(_ input: CreateResourcePackageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateResourcePackageResponse {
        try await self.client.execute(action: "CreateResourcePackage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新购资源包
    @inlinable
    public func createResourcePackage(instanceType: String, packageRegion: String, packageType: String, packageVersion: String, packageSpec: Float, expireDay: Int64, packageCount: Int64, packageName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateResourcePackageResponse> {
        self.createResourcePackage(.init(instanceType: instanceType, packageRegion: packageRegion, packageType: packageType, packageVersion: packageVersion, packageSpec: packageSpec, expireDay: expireDay, packageCount: packageCount, packageName: packageName), region: region, logger: logger, on: eventLoop)
    }

    /// 新购资源包
    @inlinable
    public func createResourcePackage(instanceType: String, packageRegion: String, packageType: String, packageVersion: String, packageSpec: Float, expireDay: Int64, packageCount: Int64, packageName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateResourcePackageResponse {
        try await self.createResourcePackage(.init(instanceType: instanceType, packageRegion: packageRegion, packageType: packageType, packageVersion: packageVersion, packageSpec: packageSpec, expireDay: expireDay, packageCount: packageCount, packageName: packageName), region: region, logger: logger, on: eventLoop)
    }
}
