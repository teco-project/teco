//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// CreateAuditRuleTemplate请求参数结构体
    public struct CreateAuditRuleTemplateRequest: TCRequestModel {
        /// 审计规则。
        public let ruleFilters: [RuleFilters]

        /// 规则模版名称。
        public let ruleTemplateName: String

        /// 规则模版描述。
        public let description: String?

        public init(ruleFilters: [RuleFilters], ruleTemplateName: String, description: String? = nil) {
            self.ruleFilters = ruleFilters
            self.ruleTemplateName = ruleTemplateName
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case ruleFilters = "RuleFilters"
            case ruleTemplateName = "RuleTemplateName"
            case description = "Description"
        }
    }

    /// CreateAuditRuleTemplate返回参数结构体
    public struct CreateAuditRuleTemplateResponse: TCResponseModel {
        /// 生成的规则模版ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleTemplateId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ruleTemplateId = "RuleTemplateId"
            case requestId = "RequestId"
        }
    }

    /// 创建审计规则模版
    @inlinable
    public func createAuditRuleTemplate(_ input: CreateAuditRuleTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAuditRuleTemplateResponse> {
        self.client.execute(action: "CreateAuditRuleTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建审计规则模版
    @inlinable
    public func createAuditRuleTemplate(_ input: CreateAuditRuleTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAuditRuleTemplateResponse {
        try await self.client.execute(action: "CreateAuditRuleTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建审计规则模版
    @inlinable
    public func createAuditRuleTemplate(ruleFilters: [RuleFilters], ruleTemplateName: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAuditRuleTemplateResponse> {
        self.createAuditRuleTemplate(.init(ruleFilters: ruleFilters, ruleTemplateName: ruleTemplateName, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 创建审计规则模版
    @inlinable
    public func createAuditRuleTemplate(ruleFilters: [RuleFilters], ruleTemplateName: String, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAuditRuleTemplateResponse {
        try await self.createAuditRuleTemplate(.init(ruleFilters: ruleFilters, ruleTemplateName: ruleTemplateName, description: description), region: region, logger: logger, on: eventLoop)
    }
}
