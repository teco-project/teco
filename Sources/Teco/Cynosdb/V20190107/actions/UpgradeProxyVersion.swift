//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// UpgradeProxyVersion请求参数结构体
    public struct UpgradeProxyVersionRequest: TCRequest {
        /// 集群ID
        public let clusterId: String

        /// 数据库代理当前版本
        public let srcProxyVersion: String

        /// 数据库代理升级版本
        public let dstProxyVersion: String

        /// 数据库代理组ID
        public let proxyGroupId: String?

        /// 升级时间 ：no（升级完成时）yes（实例维护时间）
        public let isInMaintainPeriod: String?

        public init(clusterId: String, srcProxyVersion: String, dstProxyVersion: String, proxyGroupId: String? = nil, isInMaintainPeriod: String? = nil) {
            self.clusterId = clusterId
            self.srcProxyVersion = srcProxyVersion
            self.dstProxyVersion = dstProxyVersion
            self.proxyGroupId = proxyGroupId
            self.isInMaintainPeriod = isInMaintainPeriod
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case srcProxyVersion = "SrcProxyVersion"
            case dstProxyVersion = "DstProxyVersion"
            case proxyGroupId = "ProxyGroupId"
            case isInMaintainPeriod = "IsInMaintainPeriod"
        }
    }

    /// UpgradeProxyVersion返回参数结构体
    public struct UpgradeProxyVersionResponse: TCResponse {
        /// 异步流程ID
        public let flowId: Int64

        /// 异步任务id
        public let taskId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 升级数据库代理版本
    @inlinable
    public func upgradeProxyVersion(_ input: UpgradeProxyVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeProxyVersionResponse> {
        self.client.execute(action: "UpgradeProxyVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 升级数据库代理版本
    @inlinable
    public func upgradeProxyVersion(_ input: UpgradeProxyVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeProxyVersionResponse {
        try await self.client.execute(action: "UpgradeProxyVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 升级数据库代理版本
    @inlinable
    public func upgradeProxyVersion(clusterId: String, srcProxyVersion: String, dstProxyVersion: String, proxyGroupId: String? = nil, isInMaintainPeriod: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeProxyVersionResponse> {
        self.upgradeProxyVersion(.init(clusterId: clusterId, srcProxyVersion: srcProxyVersion, dstProxyVersion: dstProxyVersion, proxyGroupId: proxyGroupId, isInMaintainPeriod: isInMaintainPeriod), region: region, logger: logger, on: eventLoop)
    }

    /// 升级数据库代理版本
    @inlinable
    public func upgradeProxyVersion(clusterId: String, srcProxyVersion: String, dstProxyVersion: String, proxyGroupId: String? = nil, isInMaintainPeriod: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeProxyVersionResponse {
        try await self.upgradeProxyVersion(.init(clusterId: clusterId, srcProxyVersion: srcProxyVersion, dstProxyVersion: dstProxyVersion, proxyGroupId: proxyGroupId, isInMaintainPeriod: isInMaintainPeriod), region: region, logger: logger, on: eventLoop)
    }
}
