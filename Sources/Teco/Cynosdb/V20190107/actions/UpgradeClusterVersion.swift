//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// UpgradeClusterVersion请求参数结构体
    public struct UpgradeClusterVersionRequest: TCRequest {
        /// 集群id
        public let clusterId: String

        /// 内核版本
        public let cynosVersion: String

        /// 升级时间类型，可选：upgradeImmediate,upgradeInMaintain
        public let upgradeType: String

        public init(clusterId: String, cynosVersion: String, upgradeType: String) {
            self.clusterId = clusterId
            self.cynosVersion = cynosVersion
            self.upgradeType = upgradeType
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case cynosVersion = "CynosVersion"
            case upgradeType = "UpgradeType"
        }
    }

    /// UpgradeClusterVersion返回参数结构体
    public struct UpgradeClusterVersionResponse: TCResponse {
        /// 异步任务id
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 更新集群Cynos内核版本
    @inlinable
    public func upgradeClusterVersion(_ input: UpgradeClusterVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeClusterVersionResponse> {
        self.client.execute(action: "UpgradeClusterVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新集群Cynos内核版本
    @inlinable
    public func upgradeClusterVersion(_ input: UpgradeClusterVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeClusterVersionResponse {
        try await self.client.execute(action: "UpgradeClusterVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新集群Cynos内核版本
    @inlinable
    public func upgradeClusterVersion(clusterId: String, cynosVersion: String, upgradeType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeClusterVersionResponse> {
        self.upgradeClusterVersion(.init(clusterId: clusterId, cynosVersion: cynosVersion, upgradeType: upgradeType), region: region, logger: logger, on: eventLoop)
    }

    /// 更新集群Cynos内核版本
    @inlinable
    public func upgradeClusterVersion(clusterId: String, cynosVersion: String, upgradeType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeClusterVersionResponse {
        try await self.upgradeClusterVersion(.init(clusterId: clusterId, cynosVersion: cynosVersion, upgradeType: upgradeType), region: region, logger: logger, on: eventLoop)
    }
}
