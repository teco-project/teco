//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cynosdb {
    /// ModifyClusterStorage请求参数结构体
    public struct ModifyClusterStorageRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 集群新存储大小（单位G）
        public let newStorageLimit: Int64

        /// 集群原存储大小（单位G）
        public let oldStorageLimit: Int64

        /// 交易模式 0-下单并支付 1-下单
        public let dealMode: Int64?

        public init(clusterId: String, newStorageLimit: Int64, oldStorageLimit: Int64, dealMode: Int64? = nil) {
            self.clusterId = clusterId
            self.newStorageLimit = newStorageLimit
            self.oldStorageLimit = oldStorageLimit
            self.dealMode = dealMode
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case newStorageLimit = "NewStorageLimit"
            case oldStorageLimit = "OldStorageLimit"
            case dealMode = "DealMode"
        }
    }

    /// ModifyClusterStorage返回参数结构体
    public struct ModifyClusterStorageResponse: TCResponseModel {
        /// 冻结流水ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tranId: String?

        /// 大订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bigDealIds: [String]?

        /// 订单号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dealNames: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case tranId = "TranId"
            case bigDealIds = "BigDealIds"
            case dealNames = "DealNames"
            case requestId = "RequestId"
        }
    }

    /// 升级预付费存储
    @inlinable
    public func modifyClusterStorage(_ input: ModifyClusterStorageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyClusterStorageResponse> {
        self.client.execute(action: "ModifyClusterStorage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 升级预付费存储
    @inlinable
    public func modifyClusterStorage(_ input: ModifyClusterStorageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyClusterStorageResponse {
        try await self.client.execute(action: "ModifyClusterStorage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 升级预付费存储
    @inlinable
    public func modifyClusterStorage(clusterId: String, newStorageLimit: Int64, oldStorageLimit: Int64, dealMode: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyClusterStorageResponse> {
        self.modifyClusterStorage(.init(clusterId: clusterId, newStorageLimit: newStorageLimit, oldStorageLimit: oldStorageLimit, dealMode: dealMode), region: region, logger: logger, on: eventLoop)
    }

    /// 升级预付费存储
    @inlinable
    public func modifyClusterStorage(clusterId: String, newStorageLimit: Int64, oldStorageLimit: Int64, dealMode: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyClusterStorageResponse {
        try await self.modifyClusterStorage(.init(clusterId: clusterId, newStorageLimit: newStorageLimit, oldStorageLimit: oldStorageLimit, dealMode: dealMode), region: region, logger: logger, on: eventLoop)
    }
}
