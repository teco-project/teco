//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cynosdb {
    /// DescribeClusterParamLogs请求参数结构体
    public struct DescribeClusterParamLogsRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String
        
        /// 实例ID列表，用来记录具体操作哪些实例
        public let instanceIds: [String]?
        
        /// 排序字段，定义在回返结果的基于哪个字段进行排序
        public let orderBy: String?
        
        /// 定义具体的排序规则，限定为desc,asc,DESC,ASC其中之一
        public let orderByType: String?
        
        /// 返回数量，默认为 20，取值范围为(0,100]
        public let limit: Int64?
        
        /// 记录偏移量，默认值为0，取值范围为[0,INF)
        public let offset: Int64?
        
        public init (clusterId: String, instanceIds: [String]? = nil, orderBy: String? = nil, orderByType: String? = nil, limit: Int64? = nil, offset: Int64? = nil) {
            self.clusterId = clusterId
            self.instanceIds = instanceIds
            self.orderBy = orderBy
            self.orderByType = orderByType
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceIds = "InstanceIds"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeClusterParamLogs返回参数结构体
    public struct DescribeClusterParamLogsResponse: TCResponseModel {
        /// 记录总数
        public let totalCount: Int64
        
        /// 参数修改记录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterParamLogs: [ClusterParamModifyLog]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case clusterParamLogs = "ClusterParamLogs"
            case requestId = "RequestId"
        }
    }
    
    /// 查询参数修改日志
    ///
    /// 本接口（DescribeClusterParamLogs）查询参数修改日志
    @inlinable
    public func describeClusterParamLogs(_ input: DescribeClusterParamLogsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeClusterParamLogsResponse > {
        self.client.execute(action: "DescribeClusterParamLogs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询参数修改日志
    ///
    /// 本接口（DescribeClusterParamLogs）查询参数修改日志
    @inlinable
    public func describeClusterParamLogs(_ input: DescribeClusterParamLogsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterParamLogsResponse {
        try await self.client.execute(action: "DescribeClusterParamLogs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
