//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cynosdb {
    /// DescribeBackupDownloadUrl请求参数结构体
    public struct DescribeBackupDownloadUrlRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 备份ID
        public let backupId: Int64

        public init(clusterId: String, backupId: Int64) {
            self.clusterId = clusterId
            self.backupId = backupId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case backupId = "BackupId"
        }
    }

    /// DescribeBackupDownloadUrl返回参数结构体
    public struct DescribeBackupDownloadUrlResponse: TCResponseModel {
        /// 备份下载地址
        public let downloadUrl: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case downloadUrl = "DownloadUrl"
            case requestId = "RequestId"
        }
    }

    /// 查询备份下载地址
    ///
    /// 此接口（DescribeBackupDownloadUrl）用于查询集群备份文件下载地址。
    @inlinable
    public func describeBackupDownloadUrl(_ input: DescribeBackupDownloadUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupDownloadUrlResponse> {
        self.client.execute(action: "DescribeBackupDownloadUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询备份下载地址
    ///
    /// 此接口（DescribeBackupDownloadUrl）用于查询集群备份文件下载地址。
    @inlinable
    public func describeBackupDownloadUrl(_ input: DescribeBackupDownloadUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupDownloadUrlResponse {
        try await self.client.execute(action: "DescribeBackupDownloadUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询备份下载地址
    ///
    /// 此接口（DescribeBackupDownloadUrl）用于查询集群备份文件下载地址。
    @inlinable
    public func describeBackupDownloadUrl(clusterId: String, backupId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupDownloadUrlResponse> {
        self.describeBackupDownloadUrl(.init(clusterId: clusterId, backupId: backupId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份下载地址
    ///
    /// 此接口（DescribeBackupDownloadUrl）用于查询集群备份文件下载地址。
    @inlinable
    public func describeBackupDownloadUrl(clusterId: String, backupId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupDownloadUrlResponse {
        try await self.describeBackupDownloadUrl(.init(clusterId: clusterId, backupId: backupId), region: region, logger: logger, on: eventLoop)
    }
}
