//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DeleteBackup请求参数结构体
    public struct DeleteBackupRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 备份文件ID，旧版本使用的字段，不推荐使用
        public let snapshotIdList: [Int64]?

        /// 备份文件ID，推荐使用
        public let backupIds: [Int64]?

        public init(clusterId: String, snapshotIdList: [Int64]? = nil, backupIds: [Int64]? = nil) {
            self.clusterId = clusterId
            self.snapshotIdList = snapshotIdList
            self.backupIds = backupIds
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case snapshotIdList = "SnapshotIdList"
            case backupIds = "BackupIds"
        }
    }

    /// DeleteBackup返回参数结构体
    public struct DeleteBackupResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除手动备份
    ///
    /// 为集群删除手动备份，无法删除自动备份
    @inlinable @discardableResult
    public func deleteBackup(_ input: DeleteBackupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBackupResponse> {
        self.client.execute(action: "DeleteBackup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除手动备份
    ///
    /// 为集群删除手动备份，无法删除自动备份
    @inlinable @discardableResult
    public func deleteBackup(_ input: DeleteBackupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBackupResponse {
        try await self.client.execute(action: "DeleteBackup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除手动备份
    ///
    /// 为集群删除手动备份，无法删除自动备份
    @inlinable @discardableResult
    public func deleteBackup(clusterId: String, snapshotIdList: [Int64]? = nil, backupIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteBackupResponse> {
        self.deleteBackup(.init(clusterId: clusterId, snapshotIdList: snapshotIdList, backupIds: backupIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除手动备份
    ///
    /// 为集群删除手动备份，无法删除自动备份
    @inlinable @discardableResult
    public func deleteBackup(clusterId: String, snapshotIdList: [Int64]? = nil, backupIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteBackupResponse {
        try await self.deleteBackup(.init(clusterId: clusterId, snapshotIdList: snapshotIdList, backupIds: backupIds), region: region, logger: logger, on: eventLoop)
    }
}
