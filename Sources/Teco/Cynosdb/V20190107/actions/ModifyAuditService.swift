//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// ModifyAuditService请求参数结构体
    public struct ModifyAuditServiceRequest: TCRequest {
        /// 实例ID。
        public let instanceId: String

        /// 日志保留时长。
        public let logExpireDay: UInt64?

        /// 高频日志保留时长。
        public let highLogExpireDay: UInt64?

        /// 修改实例审计规则为全审计。
        public let auditAll: Bool?

        /// 规则审计。
        public let auditRuleFilters: [AuditRuleFilters]?

        /// 规则模版ID。
        public let ruleTemplateIds: [String]?

        public init(instanceId: String, logExpireDay: UInt64? = nil, highLogExpireDay: UInt64? = nil, auditAll: Bool? = nil, auditRuleFilters: [AuditRuleFilters]? = nil, ruleTemplateIds: [String]? = nil) {
            self.instanceId = instanceId
            self.logExpireDay = logExpireDay
            self.highLogExpireDay = highLogExpireDay
            self.auditAll = auditAll
            self.auditRuleFilters = auditRuleFilters
            self.ruleTemplateIds = ruleTemplateIds
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case logExpireDay = "LogExpireDay"
            case highLogExpireDay = "HighLogExpireDay"
            case auditAll = "AuditAll"
            case auditRuleFilters = "AuditRuleFilters"
            case ruleTemplateIds = "RuleTemplateIds"
        }
    }

    /// ModifyAuditService返回参数结构体
    public struct ModifyAuditServiceResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 实例修改审计服务
    ///
    /// 本接口(ModifyAuditService)用于修改云数据库审计日志保存时长、审计规则等服务配置。
    @inlinable @discardableResult
    public func modifyAuditService(_ input: ModifyAuditServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAuditServiceResponse> {
        self.client.execute(action: "ModifyAuditService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 实例修改审计服务
    ///
    /// 本接口(ModifyAuditService)用于修改云数据库审计日志保存时长、审计规则等服务配置。
    @inlinable @discardableResult
    public func modifyAuditService(_ input: ModifyAuditServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAuditServiceResponse {
        try await self.client.execute(action: "ModifyAuditService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 实例修改审计服务
    ///
    /// 本接口(ModifyAuditService)用于修改云数据库审计日志保存时长、审计规则等服务配置。
    @inlinable @discardableResult
    public func modifyAuditService(instanceId: String, logExpireDay: UInt64? = nil, highLogExpireDay: UInt64? = nil, auditAll: Bool? = nil, auditRuleFilters: [AuditRuleFilters]? = nil, ruleTemplateIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAuditServiceResponse> {
        self.modifyAuditService(.init(instanceId: instanceId, logExpireDay: logExpireDay, highLogExpireDay: highLogExpireDay, auditAll: auditAll, auditRuleFilters: auditRuleFilters, ruleTemplateIds: ruleTemplateIds), region: region, logger: logger, on: eventLoop)
    }

    /// 实例修改审计服务
    ///
    /// 本接口(ModifyAuditService)用于修改云数据库审计日志保存时长、审计规则等服务配置。
    @inlinable @discardableResult
    public func modifyAuditService(instanceId: String, logExpireDay: UInt64? = nil, highLogExpireDay: UInt64? = nil, auditAll: Bool? = nil, auditRuleFilters: [AuditRuleFilters]? = nil, ruleTemplateIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAuditServiceResponse {
        try await self.modifyAuditService(.init(instanceId: instanceId, logExpireDay: logExpireDay, highLogExpireDay: highLogExpireDay, auditAll: auditAll, auditRuleFilters: auditRuleFilters, ruleTemplateIds: ruleTemplateIds), region: region, logger: logger, on: eventLoop)
    }
}
