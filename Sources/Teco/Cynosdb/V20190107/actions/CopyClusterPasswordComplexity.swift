//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// CopyClusterPasswordComplexity请求参数结构体
    public struct CopyClusterPasswordComplexityRequest: TCRequestModel {
        /// 复制集群ID数组
        public let clusterIds: [String]

        /// 集群id
        public let sourceClusterId: String

        public init(clusterIds: [String], sourceClusterId: String) {
            self.clusterIds = clusterIds
            self.sourceClusterId = sourceClusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterIds = "ClusterIds"
            case sourceClusterId = "SourceClusterId"
        }
    }

    /// CopyClusterPasswordComplexity返回参数结构体
    public struct CopyClusterPasswordComplexityResponse: TCResponseModel {
        /// 任务流ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 复制集群密码复杂度
    ///
    /// 本接口（CopyClusterPasswordComplexity）用于复制集群密码复杂度
    @inlinable
    public func copyClusterPasswordComplexity(_ input: CopyClusterPasswordComplexityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CopyClusterPasswordComplexityResponse> {
        self.client.execute(action: "CopyClusterPasswordComplexity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 复制集群密码复杂度
    ///
    /// 本接口（CopyClusterPasswordComplexity）用于复制集群密码复杂度
    @inlinable
    public func copyClusterPasswordComplexity(_ input: CopyClusterPasswordComplexityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CopyClusterPasswordComplexityResponse {
        try await self.client.execute(action: "CopyClusterPasswordComplexity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 复制集群密码复杂度
    ///
    /// 本接口（CopyClusterPasswordComplexity）用于复制集群密码复杂度
    @inlinable
    public func copyClusterPasswordComplexity(clusterIds: [String], sourceClusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CopyClusterPasswordComplexityResponse> {
        self.copyClusterPasswordComplexity(.init(clusterIds: clusterIds, sourceClusterId: sourceClusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 复制集群密码复杂度
    ///
    /// 本接口（CopyClusterPasswordComplexity）用于复制集群密码复杂度
    @inlinable
    public func copyClusterPasswordComplexity(clusterIds: [String], sourceClusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CopyClusterPasswordComplexityResponse {
        try await self.copyClusterPasswordComplexity(.init(clusterIds: clusterIds, sourceClusterId: sourceClusterId), region: region, logger: logger, on: eventLoop)
    }
}
