//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cynosdb {
    /// 查询数据库管理账号
    ///
    /// 本接口(DescribeAccounts)用于查询数据库管理账号。
    @inlinable
    public func describeAccounts(_ input: DescribeAccountsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAccountsResponse > {
        self.client.execute(action: "DescribeAccounts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询数据库管理账号
    ///
    /// 本接口(DescribeAccounts)用于查询数据库管理账号。
    @inlinable
    public func describeAccounts(_ input: DescribeAccountsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccountsResponse {
        try await self.client.execute(action: "DescribeAccounts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeAccounts请求参数结构体
    public struct DescribeAccountsRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String
        
        /// 需要过滤的账户列表
        public let accountNames: [String]?
        
        /// 数据库类型，取值范围: 
        /// <li> MYSQL </li>
        public let dbType: String?
        
        public init (clusterId: String, accountNames: [String]?, dbType: String?) {
            self.clusterId = clusterId
            self.accountNames = accountNames
            self.dbType = dbType
        }
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case accountNames = "AccountNames"
            case dbType = "DbType"
        }
    }
    
    /// DescribeAccounts返回参数结构体
    public struct DescribeAccountsResponse: TCResponseModel {
        /// 数据库账号列表
        public let accountSet: [Account]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case accountSet = "AccountSet"
            case requestId = "RequestId"
        }
    }
}
