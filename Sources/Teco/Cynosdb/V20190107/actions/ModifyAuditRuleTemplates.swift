//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// ModifyAuditRuleTemplates请求参数结构体
    public struct ModifyAuditRuleTemplatesRequest: TCRequest {
        /// 审计规则模板ID。
        public let ruleTemplateIds: [String]

        /// 修改后的审计规则。
        public let ruleFilters: [RuleFilters]?

        /// 修改后的规则模板名称。
        public let ruleTemplateName: String?

        /// 修改后的规则模板描述。
        public let description: String?

        /// 告警等级。1-低风险，2-中风险，3-高风险。
        public let alarmLevel: UInt64?

        /// 告警策略。0-不告警，1-告警。
        public let alarmPolicy: UInt64?

        public init(ruleTemplateIds: [String], ruleFilters: [RuleFilters]? = nil, ruleTemplateName: String? = nil, description: String? = nil, alarmLevel: UInt64? = nil, alarmPolicy: UInt64? = nil) {
            self.ruleTemplateIds = ruleTemplateIds
            self.ruleFilters = ruleFilters
            self.ruleTemplateName = ruleTemplateName
            self.description = description
            self.alarmLevel = alarmLevel
            self.alarmPolicy = alarmPolicy
        }

        enum CodingKeys: String, CodingKey {
            case ruleTemplateIds = "RuleTemplateIds"
            case ruleFilters = "RuleFilters"
            case ruleTemplateName = "RuleTemplateName"
            case description = "Description"
            case alarmLevel = "AlarmLevel"
            case alarmPolicy = "AlarmPolicy"
        }
    }

    /// ModifyAuditRuleTemplates返回参数结构体
    public struct ModifyAuditRuleTemplatesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改审计规则模板
    @inlinable @discardableResult
    public func modifyAuditRuleTemplates(_ input: ModifyAuditRuleTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAuditRuleTemplatesResponse> {
        self.client.execute(action: "ModifyAuditRuleTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改审计规则模板
    @inlinable @discardableResult
    public func modifyAuditRuleTemplates(_ input: ModifyAuditRuleTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAuditRuleTemplatesResponse {
        try await self.client.execute(action: "ModifyAuditRuleTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改审计规则模板
    @inlinable @discardableResult
    public func modifyAuditRuleTemplates(ruleTemplateIds: [String], ruleFilters: [RuleFilters]? = nil, ruleTemplateName: String? = nil, description: String? = nil, alarmLevel: UInt64? = nil, alarmPolicy: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAuditRuleTemplatesResponse> {
        self.modifyAuditRuleTemplates(.init(ruleTemplateIds: ruleTemplateIds, ruleFilters: ruleFilters, ruleTemplateName: ruleTemplateName, description: description, alarmLevel: alarmLevel, alarmPolicy: alarmPolicy), region: region, logger: logger, on: eventLoop)
    }

    /// 修改审计规则模板
    @inlinable @discardableResult
    public func modifyAuditRuleTemplates(ruleTemplateIds: [String], ruleFilters: [RuleFilters]? = nil, ruleTemplateName: String? = nil, description: String? = nil, alarmLevel: UInt64? = nil, alarmPolicy: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAuditRuleTemplatesResponse {
        try await self.modifyAuditRuleTemplates(.init(ruleTemplateIds: ruleTemplateIds, ruleFilters: ruleFilters, ruleTemplateName: ruleTemplateName, description: description, alarmLevel: alarmLevel, alarmPolicy: alarmPolicy), region: region, logger: logger, on: eventLoop)
    }
}
