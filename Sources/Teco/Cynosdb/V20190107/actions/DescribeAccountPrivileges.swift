//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DescribeAccountPrivileges请求参数结构体
    public struct DescribeAccountPrivilegesRequest: TCRequestModel {
        /// 集群id
        public let clusterId: String

        /// 账户名
        public let accountName: String

        /// 主机
        public let host: String

        /// 数据库名，为*时，忽略Type/TableName, 表示修改用户全局权限；
        public let db: String

        /// 指定数据库下的对象类型，可选"table"，"*"
        public let type: String

        /// 当Type="table"时，用来指定表名
        public let tableName: String?

        public init(clusterId: String, accountName: String, host: String, db: String, type: String, tableName: String? = nil) {
            self.clusterId = clusterId
            self.accountName = accountName
            self.host = host
            self.db = db
            self.type = type
            self.tableName = tableName
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case accountName = "AccountName"
            case host = "Host"
            case db = "Db"
            case type = "Type"
            case tableName = "TableName"
        }
    }

    /// DescribeAccountPrivileges返回参数结构体
    public struct DescribeAccountPrivilegesResponse: TCResponseModel {
        /// 权限列表，示例值为：["select","update","delete","create","drop","references","index","alter","show_db","create_tmp_table","lock_tables","execute","create_view","show_view","create_routine","alter_routine","event","trigger"]
        public let privileges: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case privileges = "Privileges"
            case requestId = "RequestId"
        }
    }

    /// 查询账号已有权限
    @inlinable
    public func describeAccountPrivileges(_ input: DescribeAccountPrivilegesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccountPrivilegesResponse> {
        self.client.execute(action: "DescribeAccountPrivileges", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询账号已有权限
    @inlinable
    public func describeAccountPrivileges(_ input: DescribeAccountPrivilegesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccountPrivilegesResponse {
        try await self.client.execute(action: "DescribeAccountPrivileges", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询账号已有权限
    @inlinable
    public func describeAccountPrivileges(clusterId: String, accountName: String, host: String, db: String, type: String, tableName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccountPrivilegesResponse> {
        self.describeAccountPrivileges(.init(clusterId: clusterId, accountName: accountName, host: host, db: db, type: type, tableName: tableName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询账号已有权限
    @inlinable
    public func describeAccountPrivileges(clusterId: String, accountName: String, host: String, db: String, type: String, tableName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccountPrivilegesResponse {
        try await self.describeAccountPrivileges(.init(clusterId: clusterId, accountName: accountName, host: host, db: db, type: type, tableName: tableName), region: region, logger: logger, on: eventLoop)
    }
}
