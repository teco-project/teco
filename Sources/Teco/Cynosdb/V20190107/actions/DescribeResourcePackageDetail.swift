//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DescribeResourcePackageDetail请求参数结构体
    public struct DescribeResourcePackageDetailRequest: TCRequestModel {
        /// 资源包唯一ID
        public let packageId: String

        /// 实例ID
        public let clusterIds: [String]?

        /// 开始时间
        public let startTime: String?

        /// 结束时间
        public let endTime: String?

        /// 偏移量
        public let offset: String?

        /// 限制
        public let limit: String?

        public init(packageId: String, clusterIds: [String]? = nil, startTime: String? = nil, endTime: String? = nil, offset: String? = nil, limit: String? = nil) {
            self.packageId = packageId
            self.clusterIds = clusterIds
            self.startTime = startTime
            self.endTime = endTime
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case packageId = "PackageId"
            case clusterIds = "ClusterIds"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// DescribeResourcePackageDetail返回参数结构体
    public struct DescribeResourcePackageDetailResponse: TCResponseModel {
        /// 总使用明细数
        public let total: Int64

        /// 资源包明细说明
        public let detail: [PackageDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case detail = "Detail"
            case requestId = "RequestId"
        }
    }

    /// 查询资源包使用详情
    @inlinable
    public func describeResourcePackageDetail(_ input: DescribeResourcePackageDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourcePackageDetailResponse> {
        self.client.execute(action: "DescribeResourcePackageDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询资源包使用详情
    @inlinable
    public func describeResourcePackageDetail(_ input: DescribeResourcePackageDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourcePackageDetailResponse {
        try await self.client.execute(action: "DescribeResourcePackageDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询资源包使用详情
    @inlinable
    public func describeResourcePackageDetail(packageId: String, clusterIds: [String]? = nil, startTime: String? = nil, endTime: String? = nil, offset: String? = nil, limit: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourcePackageDetailResponse> {
        self.describeResourcePackageDetail(.init(packageId: packageId, clusterIds: clusterIds, startTime: startTime, endTime: endTime, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询资源包使用详情
    @inlinable
    public func describeResourcePackageDetail(packageId: String, clusterIds: [String]? = nil, startTime: String? = nil, endTime: String? = nil, offset: String? = nil, limit: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourcePackageDetailResponse {
        try await self.describeResourcePackageDetail(.init(packageId: packageId, clusterIds: clusterIds, startTime: startTime, endTime: endTime, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }
}
