//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DescribeProxies请求参数结构体
    public struct DescribeProxiesRequest: TCRequest {
        /// 集群ID
        public let clusterId: String?

        /// 返回数量，默认为 20，最大值为 100
        public let limit: Int64?

        /// 记录偏移量，默认值为0
        public let offset: Int64?

        /// 排序字段，取值范围：
        /// - CREATETIME：创建时间
        /// - PERIODENDTIME：过期时间
        public let orderBy: String?

        /// 排序类型，取值范围：
        /// - ASC：升序排序
        /// - DESC：降序排序
        public let orderByType: String?

        /// 搜索条件，若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
        public let filters: [QueryParamFilter]?

        public init(clusterId: String? = nil, limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, filters: [QueryParamFilter]? = nil) {
            self.clusterId = clusterId
            self.limit = limit
            self.offset = offset
            self.orderBy = orderBy
            self.orderByType = orderByType
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case limit = "Limit"
            case offset = "Offset"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
            case filters = "Filters"
        }
    }

    /// DescribeProxies返回参数结构体
    public struct DescribeProxiesResponse: TCResponse {
        /// 数据库代理组数
        public let totalCount: Int64

        /// 数据库代理组列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyGroupInfos: [ProxyGroupInfo]?

        /// 数据库代理节点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyNodeInfos: [ProxyNodeInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case proxyGroupInfos = "ProxyGroupInfos"
            case proxyNodeInfos = "ProxyNodeInfos"
            case requestId = "RequestId"
        }
    }

    /// 查询数据库代理列表
    @inlinable
    public func describeProxies(_ input: DescribeProxiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProxiesResponse> {
        self.client.execute(action: "DescribeProxies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询数据库代理列表
    @inlinable
    public func describeProxies(_ input: DescribeProxiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProxiesResponse {
        try await self.client.execute(action: "DescribeProxies", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询数据库代理列表
    @inlinable
    public func describeProxies(clusterId: String? = nil, limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, filters: [QueryParamFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProxiesResponse> {
        self.describeProxies(.init(clusterId: clusterId, limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询数据库代理列表
    @inlinable
    public func describeProxies(clusterId: String? = nil, limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, filters: [QueryParamFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProxiesResponse {
        try await self.describeProxies(.init(clusterId: clusterId, limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType, filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
