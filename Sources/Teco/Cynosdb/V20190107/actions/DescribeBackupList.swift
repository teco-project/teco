//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cynosdb {
    /// 查询备份文件列表
    ///
    /// 查询备份文件列表
    @inlinable
    public func describeBackupList(_ input: DescribeBackupListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeBackupListResponse > {
        self.client.execute(action: "DescribeBackupList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询备份文件列表
    ///
    /// 查询备份文件列表
    @inlinable
    public func describeBackupList(_ input: DescribeBackupListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupListResponse {
        try await self.client.execute(action: "DescribeBackupList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeBackupList请求参数结构体
    public struct DescribeBackupListRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String
        
        /// 备份文件列表大小，取值范围(0,100]
        public let limit: Int64?
        
        /// 备份文件列表偏移，取值范围[0,INF)
        public let offset: Int64?
        
        /// 数据库类型，取值范围: 
        /// <li> MYSQL </li>
        public let dbType: String?
        
        /// 备份ID
        public let backupIds: [Int64]?
        
        /// 备份类型，可选值：snapshot，快照备份； logic，逻辑备份
        public let backupType: String?
        
        /// 备份方式，可选值：auto，自动备份；manual，手动备
        public let backupMethod: String?
        
        /// 快照类型，可选值：full，全量；increment，增量
        public let snapShotType: String?
        
        /// 备份开始时间
        public let startTime: String?
        
        /// 备份结束时间
        public let endTime: String?
        
        /// 备份文件名，模糊查询
        public let fileNames: [String]?
        
        /// 备份备注名，模糊查询
        public let backupNames: [String]?
        
        public init (clusterId: String, limit: Int64?, offset: Int64?, dbType: String?, backupIds: [Int64]?, backupType: String?, backupMethod: String?, snapShotType: String?, startTime: String?, endTime: String?, fileNames: [String]?, backupNames: [String]?) {
            self.clusterId = clusterId
            self.limit = limit
            self.offset = offset
            self.dbType = dbType
            self.backupIds = backupIds
            self.backupType = backupType
            self.backupMethod = backupMethod
            self.snapShotType = snapShotType
            self.startTime = startTime
            self.endTime = endTime
            self.fileNames = fileNames
            self.backupNames = backupNames
        }
        
        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case limit = "Limit"
            case offset = "Offset"
            case dbType = "DbType"
            case backupIds = "BackupIds"
            case backupType = "BackupType"
            case backupMethod = "BackupMethod"
            case snapShotType = "SnapShotType"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case fileNames = "FileNames"
            case backupNames = "BackupNames"
        }
    }
    
    /// DescribeBackupList返回参数结构体
    public struct DescribeBackupListResponse: TCResponseModel {
        /// 总共备份文件个数
        public let totalCount: Int64
        
        /// 备份文件列表
        public let backupList: [BackupFileInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case backupList = "BackupList"
            case requestId = "RequestId"
        }
    }
}