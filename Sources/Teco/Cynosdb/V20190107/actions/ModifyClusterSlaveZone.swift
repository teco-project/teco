//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// ModifyClusterSlaveZone请求参数结构体
    public struct ModifyClusterSlaveZoneRequest: TCRequest {
        /// 集群Id
        public let clusterId: String

        /// 旧从可用区
        public let oldSlaveZone: String

        /// 新从可用区
        public let newSlaveZone: String

        public init(clusterId: String, oldSlaveZone: String, newSlaveZone: String) {
            self.clusterId = clusterId
            self.oldSlaveZone = oldSlaveZone
            self.newSlaveZone = newSlaveZone
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case oldSlaveZone = "OldSlaveZone"
            case newSlaveZone = "NewSlaveZone"
        }
    }

    /// ModifyClusterSlaveZone返回参数结构体
    public struct ModifyClusterSlaveZoneResponse: TCResponse {
        /// 异步FlowId
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 修改从可用区
    @inlinable
    public func modifyClusterSlaveZone(_ input: ModifyClusterSlaveZoneRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyClusterSlaveZoneResponse> {
        self.client.execute(action: "ModifyClusterSlaveZone", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改从可用区
    @inlinable
    public func modifyClusterSlaveZone(_ input: ModifyClusterSlaveZoneRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyClusterSlaveZoneResponse {
        try await self.client.execute(action: "ModifyClusterSlaveZone", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改从可用区
    @inlinable
    public func modifyClusterSlaveZone(clusterId: String, oldSlaveZone: String, newSlaveZone: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyClusterSlaveZoneResponse> {
        self.modifyClusterSlaveZone(.init(clusterId: clusterId, oldSlaveZone: oldSlaveZone, newSlaveZone: newSlaveZone), region: region, logger: logger, on: eventLoop)
    }

    /// 修改从可用区
    @inlinable
    public func modifyClusterSlaveZone(clusterId: String, oldSlaveZone: String, newSlaveZone: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyClusterSlaveZoneResponse {
        try await self.modifyClusterSlaveZone(.init(clusterId: clusterId, oldSlaveZone: oldSlaveZone, newSlaveZone: newSlaveZone), region: region, logger: logger, on: eventLoop)
    }
}
