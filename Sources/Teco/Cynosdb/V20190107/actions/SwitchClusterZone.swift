//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// SwitchClusterZone请求参数结构体
    public struct SwitchClusterZoneRequest: TCRequest {
        /// 集群Id
        public let clusterId: String

        /// 当前可用区
        public let oldZone: String

        /// 要切换到的可用区
        public let newZone: String

        /// 维护期间执行-yes,立即执行-no
        public let isInMaintainPeriod: String?

        public init(clusterId: String, oldZone: String, newZone: String, isInMaintainPeriod: String? = nil) {
            self.clusterId = clusterId
            self.oldZone = oldZone
            self.newZone = newZone
            self.isInMaintainPeriod = isInMaintainPeriod
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case oldZone = "OldZone"
            case newZone = "NewZone"
            case isInMaintainPeriod = "IsInMaintainPeriod"
        }
    }

    /// SwitchClusterZone返回参数结构体
    public struct SwitchClusterZoneResponse: TCResponse {
        /// 异步FlowId
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 主备可用区切换
    @inlinable
    public func switchClusterZone(_ input: SwitchClusterZoneRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SwitchClusterZoneResponse> {
        self.client.execute(action: "SwitchClusterZone", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 主备可用区切换
    @inlinable
    public func switchClusterZone(_ input: SwitchClusterZoneRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SwitchClusterZoneResponse {
        try await self.client.execute(action: "SwitchClusterZone", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 主备可用区切换
    @inlinable
    public func switchClusterZone(clusterId: String, oldZone: String, newZone: String, isInMaintainPeriod: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SwitchClusterZoneResponse> {
        self.switchClusterZone(.init(clusterId: clusterId, oldZone: oldZone, newZone: newZone, isInMaintainPeriod: isInMaintainPeriod), region: region, logger: logger, on: eventLoop)
    }

    /// 主备可用区切换
    @inlinable
    public func switchClusterZone(clusterId: String, oldZone: String, newZone: String, isInMaintainPeriod: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SwitchClusterZoneResponse {
        try await self.switchClusterZone(.init(clusterId: clusterId, oldZone: oldZone, newZone: newZone, isInMaintainPeriod: isInMaintainPeriod), region: region, logger: logger, on: eventLoop)
    }
}
