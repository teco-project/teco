//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// CreateClusterDatabase请求参数结构体
    public struct CreateClusterDatabaseRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 数据库名
        public let dbName: String

        /// 字符集类型
        public let characterSet: String

        /// 排序规则
        public let collateRule: String

        /// 授权用户主机权限
        public let userHostPrivileges: [UserHostPrivilege]?

        /// 备注
        public let description: String?

        public init(clusterId: String, dbName: String, characterSet: String, collateRule: String, userHostPrivileges: [UserHostPrivilege]? = nil, description: String? = nil) {
            self.clusterId = clusterId
            self.dbName = dbName
            self.characterSet = characterSet
            self.collateRule = collateRule
            self.userHostPrivileges = userHostPrivileges
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case dbName = "DbName"
            case characterSet = "CharacterSet"
            case collateRule = "CollateRule"
            case userHostPrivileges = "UserHostPrivileges"
            case description = "Description"
        }
    }

    /// CreateClusterDatabase返回参数结构体
    public struct CreateClusterDatabaseResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建数据库
    @inlinable @discardableResult
    public func createClusterDatabase(_ input: CreateClusterDatabaseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateClusterDatabaseResponse> {
        self.client.execute(action: "CreateClusterDatabase", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据库
    @inlinable @discardableResult
    public func createClusterDatabase(_ input: CreateClusterDatabaseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateClusterDatabaseResponse {
        try await self.client.execute(action: "CreateClusterDatabase", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据库
    @inlinable @discardableResult
    public func createClusterDatabase(clusterId: String, dbName: String, characterSet: String, collateRule: String, userHostPrivileges: [UserHostPrivilege]? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateClusterDatabaseResponse> {
        self.createClusterDatabase(.init(clusterId: clusterId, dbName: dbName, characterSet: characterSet, collateRule: collateRule, userHostPrivileges: userHostPrivileges, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据库
    @inlinable @discardableResult
    public func createClusterDatabase(clusterId: String, dbName: String, characterSet: String, collateRule: String, userHostPrivileges: [UserHostPrivilege]? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateClusterDatabaseResponse {
        try await self.createClusterDatabase(.init(clusterId: clusterId, dbName: dbName, characterSet: characterSet, collateRule: collateRule, userHostPrivileges: userHostPrivileges, description: description), region: region, logger: logger, on: eventLoop)
    }
}
