//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Cynosdb {
    /// ExportInstanceErrorLogs请求参数结构体
    public struct ExportInstanceErrorLogsRequest: TCPaginatedRequest {
        /// 实例ID
        public let instanceId: String

        /// 日志最早时间
        public let startTime: String?

        /// 日志最晚时间
        public let endTime: String?

        /// 限制条数
        public let limit: Int64?

        /// 偏移量
        public let offset: Int64?

        /// 日志等级
        public let logLevels: [String]?

        /// 关键字
        public let keyWords: [String]?

        /// 文件类型，可选值：csv, original
        public let fileType: String?

        /// 可选值Timestamp
        public let orderBy: String?

        /// ASC或DESC
        public let orderByType: String?

        public init(instanceId: String, startTime: String? = nil, endTime: String? = nil, limit: Int64? = nil, offset: Int64? = nil, logLevels: [String]? = nil, keyWords: [String]? = nil, fileType: String? = nil, orderBy: String? = nil, orderByType: String? = nil) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
            self.limit = limit
            self.offset = offset
            self.logLevels = logLevels
            self.keyWords = keyWords
            self.fileType = fileType
            self.orderBy = orderBy
            self.orderByType = orderByType
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case limit = "Limit"
            case offset = "Offset"
            case logLevels = "LogLevels"
            case keyWords = "KeyWords"
            case fileType = "FileType"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ExportInstanceErrorLogsResponse) -> ExportInstanceErrorLogsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return ExportInstanceErrorLogsRequest(instanceId: self.instanceId, startTime: self.startTime, endTime: self.endTime, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), logLevels: self.logLevels, keyWords: self.keyWords, fileType: self.fileType, orderBy: self.orderBy, orderByType: self.orderByType)
        }
    }

    /// ExportInstanceErrorLogs返回参数结构体
    public struct ExportInstanceErrorLogsResponse: TCPaginatedResponse {
        /// 错误日志导出内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorLogItems: [ErrorLogItemExport]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errorLogItems = "ErrorLogItems"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [ErrorLogItemExport] {
            self.errorLogItems ?? []
        }
    }

    /// 导出实例错误日志
    ///
    /// 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
    @inlinable
    public func exportInstanceErrorLogs(_ input: ExportInstanceErrorLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportInstanceErrorLogsResponse> {
        self.client.execute(action: "ExportInstanceErrorLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导出实例错误日志
    ///
    /// 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
    @inlinable
    public func exportInstanceErrorLogs(_ input: ExportInstanceErrorLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportInstanceErrorLogsResponse {
        try await self.client.execute(action: "ExportInstanceErrorLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导出实例错误日志
    ///
    /// 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
    @inlinable
    public func exportInstanceErrorLogs(instanceId: String, startTime: String? = nil, endTime: String? = nil, limit: Int64? = nil, offset: Int64? = nil, logLevels: [String]? = nil, keyWords: [String]? = nil, fileType: String? = nil, orderBy: String? = nil, orderByType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportInstanceErrorLogsResponse> {
        self.exportInstanceErrorLogs(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, limit: limit, offset: offset, logLevels: logLevels, keyWords: keyWords, fileType: fileType, orderBy: orderBy, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }

    /// 导出实例错误日志
    ///
    /// 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
    @inlinable
    public func exportInstanceErrorLogs(instanceId: String, startTime: String? = nil, endTime: String? = nil, limit: Int64? = nil, offset: Int64? = nil, logLevels: [String]? = nil, keyWords: [String]? = nil, fileType: String? = nil, orderBy: String? = nil, orderByType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportInstanceErrorLogsResponse {
        try await self.exportInstanceErrorLogs(.init(instanceId: instanceId, startTime: startTime, endTime: endTime, limit: limit, offset: offset, logLevels: logLevels, keyWords: keyWords, fileType: fileType, orderBy: orderBy, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }

    /// 导出实例错误日志
    ///
    /// 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
    @inlinable
    public func exportInstanceErrorLogsPaginated(_ input: ExportInstanceErrorLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [ErrorLogItemExport])> {
        self.client.paginate(input: input, region: region, command: self.exportInstanceErrorLogs, logger: logger, on: eventLoop)
    }

    /// 导出实例错误日志
    ///
    /// 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
    @inlinable @discardableResult
    public func exportInstanceErrorLogsPaginated(_ input: ExportInstanceErrorLogsRequest, region: TCRegion? = nil, onResponse: @escaping (ExportInstanceErrorLogsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.exportInstanceErrorLogs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 导出实例错误日志
    ///
    /// 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
    ///
    /// - Returns: `AsyncSequence`s of `ErrorLogItemExport` and `ExportInstanceErrorLogsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func exportInstanceErrorLogsPaginator(_ input: ExportInstanceErrorLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ExportInstanceErrorLogsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.exportInstanceErrorLogs, logger: logger, on: eventLoop)
    }
}
