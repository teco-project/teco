//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// UpgradeProxy请求参数结构体
    public struct UpgradeProxyRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// cpu核数
        public let cpu: Int64

        /// 内存
        public let mem: Int64

        /// 数据库代理组节点个数
        public let proxyCount: Int64?

        /// 数据库代理组ID（已废弃）
        public let proxyGroupId: String?

        /// 重新负载均衡：auto（自动），manual（手动）
        public let reloadBalance: String?

        /// 升级时间 ：no（升级完成时）yes（实例维护时间）
        public let isInMaintainPeriod: String?

        /// 数据库代理节点信息
        public let proxyZones: [ProxyZone]?

        public init(clusterId: String, cpu: Int64, mem: Int64, proxyCount: Int64? = nil, proxyGroupId: String? = nil, reloadBalance: String? = nil, isInMaintainPeriod: String? = nil, proxyZones: [ProxyZone]? = nil) {
            self.clusterId = clusterId
            self.cpu = cpu
            self.mem = mem
            self.proxyCount = proxyCount
            self.proxyGroupId = proxyGroupId
            self.reloadBalance = reloadBalance
            self.isInMaintainPeriod = isInMaintainPeriod
            self.proxyZones = proxyZones
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case cpu = "Cpu"
            case mem = "Mem"
            case proxyCount = "ProxyCount"
            case proxyGroupId = "ProxyGroupId"
            case reloadBalance = "ReloadBalance"
            case isInMaintainPeriod = "IsInMaintainPeriod"
            case proxyZones = "ProxyZones"
        }
    }

    /// UpgradeProxy返回参数结构体
    public struct UpgradeProxyResponse: TCResponseModel {
        /// 异步流程ID
        public let flowId: Int64

        /// 异步任务ID
        public let taskId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 升级数据库代理配置
    @inlinable
    public func upgradeProxy(_ input: UpgradeProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeProxyResponse> {
        self.client.execute(action: "UpgradeProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 升级数据库代理配置
    @inlinable
    public func upgradeProxy(_ input: UpgradeProxyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeProxyResponse {
        try await self.client.execute(action: "UpgradeProxy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 升级数据库代理配置
    @inlinable
    public func upgradeProxy(clusterId: String, cpu: Int64, mem: Int64, proxyCount: Int64? = nil, proxyGroupId: String? = nil, reloadBalance: String? = nil, isInMaintainPeriod: String? = nil, proxyZones: [ProxyZone]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeProxyResponse> {
        self.upgradeProxy(.init(clusterId: clusterId, cpu: cpu, mem: mem, proxyCount: proxyCount, proxyGroupId: proxyGroupId, reloadBalance: reloadBalance, isInMaintainPeriod: isInMaintainPeriod, proxyZones: proxyZones), region: region, logger: logger, on: eventLoop)
    }

    /// 升级数据库代理配置
    @inlinable
    public func upgradeProxy(clusterId: String, cpu: Int64, mem: Int64, proxyCount: Int64? = nil, proxyGroupId: String? = nil, reloadBalance: String? = nil, isInMaintainPeriod: String? = nil, proxyZones: [ProxyZone]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeProxyResponse {
        try await self.upgradeProxy(.init(clusterId: clusterId, cpu: cpu, mem: mem, proxyCount: proxyCount, proxyGroupId: proxyGroupId, reloadBalance: reloadBalance, isInMaintainPeriod: isInMaintainPeriod, proxyZones: proxyZones), region: region, logger: logger, on: eventLoop)
    }
}
