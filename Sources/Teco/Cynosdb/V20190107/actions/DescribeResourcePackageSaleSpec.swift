//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DescribeResourcePackageSaleSpec请求参数结构体
    public struct DescribeResourcePackageSaleSpecRequest: TCPaginatedRequest {
        /// 实例类型
        public let instanceType: String

        /// 资源包使用地域
        /// china-中国内地通用，overseas-港澳台及海外通用
        public let packageRegion: String

        /// 资源包类型
        /// CCU-计算资源包
        /// DISK-存储资源包
        public let packageType: String

        /// 偏移量
        public let offset: Int64?

        /// 限制
        public let limit: Int64?

        public init(instanceType: String, packageRegion: String, packageType: String, offset: Int64? = nil, limit: Int64? = nil) {
            self.instanceType = instanceType
            self.packageRegion = packageRegion
            self.packageType = packageType
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case packageRegion = "PackageRegion"
            case packageType = "PackageType"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeResourcePackageSaleSpecResponse) -> DescribeResourcePackageSaleSpecRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(instanceType: self.instanceType, packageRegion: self.packageRegion, packageType: self.packageType, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeResourcePackageSaleSpec返回参数结构体
    public struct DescribeResourcePackageSaleSpecResponse: TCPaginatedResponse {
        /// 可售卖资源包规格总数
        public let total: Int64

        /// 资源包明细说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: [SalePackageSpec]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case detail = "Detail"
            case requestId = "RequestId"
        }

        /// Extract the returned ``SalePackageSpec`` list from the paginated response.
        public func getItems() -> [SalePackageSpec] {
            self.detail ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 查询资源包规格
    @inlinable
    public func describeResourcePackageSaleSpec(_ input: DescribeResourcePackageSaleSpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourcePackageSaleSpecResponse> {
        self.client.execute(action: "DescribeResourcePackageSaleSpec", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询资源包规格
    @inlinable
    public func describeResourcePackageSaleSpec(_ input: DescribeResourcePackageSaleSpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourcePackageSaleSpecResponse {
        try await self.client.execute(action: "DescribeResourcePackageSaleSpec", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询资源包规格
    @inlinable
    public func describeResourcePackageSaleSpec(instanceType: String, packageRegion: String, packageType: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourcePackageSaleSpecResponse> {
        self.describeResourcePackageSaleSpec(.init(instanceType: instanceType, packageRegion: packageRegion, packageType: packageType, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询资源包规格
    @inlinable
    public func describeResourcePackageSaleSpec(instanceType: String, packageRegion: String, packageType: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourcePackageSaleSpecResponse {
        try await self.describeResourcePackageSaleSpec(.init(instanceType: instanceType, packageRegion: packageRegion, packageType: packageType, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询资源包规格
    @inlinable
    public func describeResourcePackageSaleSpecPaginated(_ input: DescribeResourcePackageSaleSpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [SalePackageSpec])> {
        self.client.paginate(input: input, region: region, command: self.describeResourcePackageSaleSpec, logger: logger, on: eventLoop)
    }

    /// 查询资源包规格
    @inlinable @discardableResult
    public func describeResourcePackageSaleSpecPaginated(_ input: DescribeResourcePackageSaleSpecRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeResourcePackageSaleSpecResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeResourcePackageSaleSpec, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询资源包规格
    ///
    /// - Returns: `AsyncSequence`s of ``SalePackageSpec`` and ``DescribeResourcePackageSaleSpecResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeResourcePackageSaleSpecPaginator(_ input: DescribeResourcePackageSaleSpecRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeResourcePackageSaleSpecRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeResourcePackageSaleSpec, logger: logger, on: eventLoop)
    }
}
