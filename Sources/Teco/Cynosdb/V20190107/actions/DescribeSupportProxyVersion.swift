//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cynosdb {
    /// DescribeSupportProxyVersion请求参数结构体
    public struct DescribeSupportProxyVersionRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 数据库代理组ID
        public let proxyGroupId: String?

        public init(clusterId: String, proxyGroupId: String? = nil) {
            self.clusterId = clusterId
            self.proxyGroupId = proxyGroupId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case proxyGroupId = "ProxyGroupId"
        }
    }

    /// DescribeSupportProxyVersion返回参数结构体
    public struct DescribeSupportProxyVersionResponse: TCResponseModel {
        /// 支持的数据库代理版本集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportProxyVersions: [String]?

        /// 当前proxy版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentProxyVersion: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case supportProxyVersions = "SupportProxyVersions"
            case currentProxyVersion = "CurrentProxyVersion"
            case requestId = "RequestId"
        }
    }

    /// 查询支持的数据库代理版本
    @inlinable
    public func describeSupportProxyVersion(_ input: DescribeSupportProxyVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSupportProxyVersionResponse> {
        self.client.execute(action: "DescribeSupportProxyVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询支持的数据库代理版本
    @inlinable
    public func describeSupportProxyVersion(_ input: DescribeSupportProxyVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSupportProxyVersionResponse {
        try await self.client.execute(action: "DescribeSupportProxyVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询支持的数据库代理版本
    @inlinable
    public func describeSupportProxyVersion(clusterId: String, proxyGroupId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSupportProxyVersionResponse> {
        self.describeSupportProxyVersion(.init(clusterId: clusterId, proxyGroupId: proxyGroupId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询支持的数据库代理版本
    @inlinable
    public func describeSupportProxyVersion(clusterId: String, proxyGroupId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSupportProxyVersionResponse {
        try await self.describeSupportProxyVersion(.init(clusterId: clusterId, proxyGroupId: proxyGroupId), region: region, logger: logger, on: eventLoop)
    }
}
