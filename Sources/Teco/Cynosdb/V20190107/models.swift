//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Cynosdb {
    /// 集群支持的功能
    public struct Ability: TCOutputModel {
        /// 是否支持从可用区
        public let isSupportSlaveZone: String

        /// 不支持从可用区的原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nonsupportSlaveZoneReason: String?

        /// 是否支持RO实例
        public let isSupportRo: String

        /// 不支持RO实例的原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nonsupportRoReason: String?

        enum CodingKeys: String, CodingKey {
            case isSupportSlaveZone = "IsSupportSlaveZone"
            case nonsupportSlaveZoneReason = "NonsupportSlaveZoneReason"
            case isSupportRo = "IsSupportRo"
            case nonsupportRoReason = "NonsupportRoReason"
        }
    }

    /// 数据库账号信息
    public struct Account: TCOutputModel {
        /// 数据库账号名
        public let accountName: String

        /// 数据库账号描述
        public let description: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 主机
        public let host: String

        /// 用户最大连接数
        public let maxUserConnections: Int64

        enum CodingKeys: String, CodingKey {
            case accountName = "AccountName"
            case description = "Description"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case host = "Host"
            case maxUserConnections = "MaxUserConnections"
        }
    }

    /// 账号参数
    public struct AccountParam: TCInputModel {
        /// 参数名称，当前仅支持参数：max_user_connections
        public let paramName: String

        /// 参数值
        public let paramValue: String

        public init(paramName: String, paramValue: String) {
            self.paramName = paramName
            self.paramValue = paramValue
        }

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case paramValue = "ParamValue"
        }
    }

    /// 数据库地址
    public struct Addr: TCOutputModel {
        /// IP
        public let ip: String

        /// 端口
        public let port: Int64

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case port = "Port"
        }
    }

    /// 审计日志详细信息
    public struct AuditLog: TCOutputModel {
        /// 影响行数。
        public let affectRows: Int64

        /// 错误码。
        public let errCode: Int64

        /// SQL类型。
        public let sqlType: String

        /// 表名称。
        public let tableName: String

        /// 实例名称。
        public let instanceName: String

        /// 审计策略名称。
        public let policyName: String

        /// 数据库名称。
        public let dbName: String

        /// SQL语句。
        public let sql: String

        /// 客户端地址。
        public let host: String

        /// 用户名。
        public let user: String

        /// 执行时间。
        public let execTime: Int64

        /// 时间戳。
        public let timestamp: String

        /// 发送行数。
        public let sentRows: Int64

        /// 执行线程ID。
        public let threadId: Int64

        enum CodingKeys: String, CodingKey {
            case affectRows = "AffectRows"
            case errCode = "ErrCode"
            case sqlType = "SqlType"
            case tableName = "TableName"
            case instanceName = "InstanceName"
            case policyName = "PolicyName"
            case dbName = "DBName"
            case sql = "Sql"
            case host = "Host"
            case user = "User"
            case execTime = "ExecTime"
            case timestamp = "Timestamp"
            case sentRows = "SentRows"
            case threadId = "ThreadId"
        }
    }

    /// 审计日志文件
    public struct AuditLogFile: TCOutputModel {
        /// 审计日志文件名称
        public let fileName: String

        /// 审计日志文件创建时间。格式为 : "2019-03-20 17:09:13"。
        public let createTime: String

        /// 文件状态值。可能返回的值为：
        /// "creating" - 生成中;
        /// "failed" - 创建失败;
        /// "success" - 已生成;
        public let status: String

        /// 文件大小，单位为 KB。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileSize: Int64?

        /// 审计日志下载地址。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let downloadUrl: String?

        /// 错误信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errMsg: String?

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case createTime = "CreateTime"
            case status = "Status"
            case fileSize = "FileSize"
            case downloadUrl = "DownloadUrl"
            case errMsg = "ErrMsg"
        }
    }

    /// 审计日志过滤条件。查询审计日志时，用户过滤返回的审计日志。
    public struct AuditLogFilter: TCInputModel {
        /// 客户端地址。
        public let host: [String]?

        /// 用户名。
        public let user: [String]?

        /// 数据库名称。
        public let dbName: [String]?

        /// 表名称。
        public let tableName: [String]?

        /// 审计策略名称。
        public let policyName: [String]?

        /// SQL 语句。支持模糊匹配。
        public let sql: String?

        /// SQL 类型。目前支持："SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "DROP", "ALTER", "SET", "REPLACE", "EXECUTE"。
        public let sqlType: String?

        /// 执行时间。单位为：ms。表示筛选执行时间大于该值的审计日志。
        public let execTime: Int64?

        /// 影响行数。表示筛选影响行数大于该值的审计日志。
        public let affectRows: Int64?

        /// SQL 类型。支持多个类型同时查询。目前支持："SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "DROP", "ALTER", "SET", "REPLACE", "EXECUTE"。
        public let sqlTypes: [String]?

        /// SQL 语句。支持传递多个sql语句。
        public let sqls: [String]?

        /// 返回行数。
        public let sentRows: UInt64?

        /// 线程ID。
        public let threadId: [String]?

        public init(host: [String]? = nil, user: [String]? = nil, dbName: [String]? = nil, tableName: [String]? = nil, policyName: [String]? = nil, sql: String? = nil, sqlType: String? = nil, execTime: Int64? = nil, affectRows: Int64? = nil, sqlTypes: [String]? = nil, sqls: [String]? = nil, sentRows: UInt64? = nil, threadId: [String]? = nil) {
            self.host = host
            self.user = user
            self.dbName = dbName
            self.tableName = tableName
            self.policyName = policyName
            self.sql = sql
            self.sqlType = sqlType
            self.execTime = execTime
            self.affectRows = affectRows
            self.sqlTypes = sqlTypes
            self.sqls = sqls
            self.sentRows = sentRows
            self.threadId = threadId
        }

        enum CodingKeys: String, CodingKey {
            case host = "Host"
            case user = "User"
            case dbName = "DBName"
            case tableName = "TableName"
            case policyName = "PolicyName"
            case sql = "Sql"
            case sqlType = "SqlType"
            case execTime = "ExecTime"
            case affectRows = "AffectRows"
            case sqlTypes = "SqlTypes"
            case sqls = "Sqls"
            case sentRows = "SentRows"
            case threadId = "ThreadId"
        }
    }

    /// 规则审计的过滤条件
    public struct AuditRuleFilters: TCInputModel {
        /// 单条审计规则。
        public let ruleFilters: [RuleFilters]

        public init(ruleFilters: [RuleFilters]) {
            self.ruleFilters = ruleFilters
        }

        enum CodingKeys: String, CodingKey {
            case ruleFilters = "RuleFilters"
        }
    }

    /// 审计规则模版的详情
    public struct AuditRuleTemplateInfo: TCOutputModel {
        /// 规则模版ID。
        public let ruleTemplateId: String

        /// 规则模版名称。
        public let ruleTemplateName: String

        /// 规则模版的过滤条件
        public let ruleFilters: [RuleFilters]

        /// 规则模版描述。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 规则模版创建时间。
        public let createAt: String

        enum CodingKeys: String, CodingKey {
            case ruleTemplateId = "RuleTemplateId"
            case ruleTemplateName = "RuleTemplateName"
            case ruleFilters = "RuleFilters"
            case description = "Description"
            case createAt = "CreateAt"
        }
    }

    /// 备份文件信息
    public struct BackupFileInfo: TCOutputModel {
        /// 快照文件ID，已废弃，请使用BackupId
        public let snapshotId: UInt64

        /// 备份文件名
        public let fileName: String

        /// 备份文件大小
        public let fileSize: UInt64

        /// 备份开始时间
        public let startTime: String

        /// 备份完成时间
        public let finishTime: String

        /// 备份类型：snapshot，快照备份；logic，逻辑备份
        public let backupType: String

        /// 备份方式：auto，自动备份；manual，手动备份
        public let backupMethod: String

        /// 备份文件状态：success：备份成功；fail：备份失败；creating：备份文件创建中；deleting：备份文件删除中
        public let backupStatus: String

        /// 备份文件时间
        public let snapshotTime: String

        /// 备份ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupId: Int64?

        /// 快照类型，可选值：full，全量；increment，增量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapShotType: String?

        /// 备份文件备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backupName: String?

        enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case fileName = "FileName"
            case fileSize = "FileSize"
            case startTime = "StartTime"
            case finishTime = "FinishTime"
            case backupType = "BackupType"
            case backupMethod = "BackupMethod"
            case backupStatus = "BackupStatus"
            case snapshotTime = "SnapshotTime"
            case backupId = "BackupId"
            case snapShotType = "SnapShotType"
            case backupName = "BackupName"
        }
    }

    /// 计费资源信息
    public struct BillingResourceInfo: TCOutputModel {
        /// 集群ID
        public let clusterId: String

        /// 实例ID列表
        public let instanceIds: [String]

        /// 订单ID
        public let dealName: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceIds = "InstanceIds"
            case dealName = "DealName"
        }
    }

    /// Binlog描述
    public struct BinlogItem: TCOutputModel {
        /// Binlog文件名称
        public let fileName: String

        /// 文件大小，单位：字节
        public let fileSize: Int64

        /// 事务最早时间
        public let startTime: String

        /// 事务最晚时间
        public let finishTime: String

        /// Binlog文件ID
        public let binlogId: Int64

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case fileSize = "FileSize"
            case startTime = "StartTime"
            case finishTime = "FinishTime"
            case binlogId = "BinlogId"
        }
    }

    /// 集群实例信息
    public struct ClusterInstanceDetail: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 引擎类型
        public let instanceType: String

        /// 实例状态
        public let instanceStatus: String

        /// 实例状态描述
        public let instanceStatusDesc: String

        /// cpu核数
        public let instanceCpu: Int64

        /// 内存
        public let instanceMemory: Int64

        /// 硬盘
        public let instanceStorage: Int64

        /// 实例角色
        public let instanceRole: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceType = "InstanceType"
            case instanceStatus = "InstanceStatus"
            case instanceStatusDesc = "InstanceStatusDesc"
            case instanceCpu = "InstanceCpu"
            case instanceMemory = "InstanceMemory"
            case instanceStorage = "InstanceStorage"
            case instanceRole = "InstanceRole"
        }
    }

    /// 参数修改记录
    public struct ClusterParamModifyLog: TCOutputModel {
        /// 参数名称
        public let paramName: String

        /// 当前值
        public let currentValue: String

        /// 修改后的值
        public let updateValue: String

        /// 修改状态
        public let status: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date

        /// 集群ID
        public let clusterId: String

        /// 实例ID
        public let instanceId: String

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case currentValue = "CurrentValue"
            case updateValue = "UpdateValue"
            case status = "Status"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case clusterId = "ClusterId"
            case instanceId = "InstanceId"
        }
    }

    /// 集群信息
    public struct CynosdbCluster: TCInputModel, TCOutputModel {
        /// 集群状态， 可选值如下:
        /// creating: 创建中
        /// running:运行中
        /// isolating:隔离中
        /// isolated:已隔离
        /// activating:解隔离中
        /// offlining:下线中
        /// offlined:已下线
        /// deleting:删除中
        /// deleted:已删除
        public let status: String

        /// 更新时间
        public let updateTime: String

        /// 可用区
        public let zone: String

        /// 集群名称
        public let clusterName: String

        /// 地域
        public let region: String

        /// 数据库版本
        public let dbVersion: String

        /// 集群ID
        public let clusterId: String

        /// 实例数
        public let instanceNum: Int64

        /// 用户uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uin: String?

        /// 引擎类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbType: String?

        /// 用户appid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: Int64?

        /// 集群状态描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusDesc: String?

        /// 集群创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 付费模式。0-按量计费，1-包年包月
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: Int64?

        /// 截止时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let periodEndTime: String?

        /// 集群读写vip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 集群读写vport
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vport: Int64?

        /// 项目id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectID: Int64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// cynos内核版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cynosVersion: String?

        /// 存储容量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageLimit: Int64?

        /// 续费标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: Int64?

        /// 正在处理的任务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processingTask: String?

        /// 集群的任务数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tasks: [ObjectTask]?

        /// 集群绑定的tag数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceTags: [Tag]?

        /// Db类型(NORMAL, SERVERLESS)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMode: String?

        /// 当Db类型为SERVERLESS时，serverless集群状态，可选值:
        /// resume
        /// pause
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverlessStatus: String?

        /// 集群预付费存储值大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storage: Int64?

        /// 集群存储为预付费时的存储ID，用于预付费存储变配
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageId: String?

        /// 集群存储付费模式。0-按量计费，1-包年包月
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storagePayMode: Int64?

        /// 集群计算规格对应的最小存储值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minStorageSize: Int64?

        /// 集群计算规格对应的最大存储值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxStorageSize: Int64?

        /// 集群网络信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let netAddrs: [NetAddr]?

        /// 物理可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let physicalZone: String?

        /// 主可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterZone: String?

        /// 是否有从可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasSlaveZone: String?

        /// 从可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZones: [String]?

        /// 商业类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessType: String?

        /// 是否冻结
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isFreeze: String?

        /// 订单来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orderSource: String?

        /// 能力
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ability: Ability?

        public init(status: String, updateTime: String, zone: String, clusterName: String, region: String, dbVersion: String, clusterId: String, instanceNum: Int64, uin: String, dbType: String, appId: Int64, statusDesc: String, createTime: String, payMode: Int64, periodEndTime: String, vip: String, vport: Int64, projectID: Int64, vpcId: String? = nil, subnetId: String? = nil, cynosVersion: String? = nil, storageLimit: Int64? = nil, renewFlag: Int64? = nil, processingTask: String? = nil, tasks: [ObjectTask]? = nil, resourceTags: [Tag]? = nil, dbMode: String? = nil, serverlessStatus: String? = nil, storage: Int64? = nil, storageId: String? = nil, storagePayMode: Int64? = nil, minStorageSize: Int64? = nil, maxStorageSize: Int64? = nil, netAddrs: [NetAddr]? = nil, physicalZone: String? = nil, masterZone: String? = nil, hasSlaveZone: String? = nil, slaveZones: [String]? = nil, businessType: String? = nil, isFreeze: String? = nil, orderSource: String? = nil, ability: Ability? = nil) {
            self.status = status
            self.updateTime = updateTime
            self.zone = zone
            self.clusterName = clusterName
            self.region = region
            self.dbVersion = dbVersion
            self.clusterId = clusterId
            self.instanceNum = instanceNum
            self.uin = uin
            self.dbType = dbType
            self.appId = appId
            self.statusDesc = statusDesc
            self.createTime = createTime
            self.payMode = payMode
            self.periodEndTime = periodEndTime
            self.vip = vip
            self.vport = vport
            self.projectID = projectID
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.cynosVersion = cynosVersion
            self.storageLimit = storageLimit
            self.renewFlag = renewFlag
            self.processingTask = processingTask
            self.tasks = tasks
            self.resourceTags = resourceTags
            self.dbMode = dbMode
            self.serverlessStatus = serverlessStatus
            self.storage = storage
            self.storageId = storageId
            self.storagePayMode = storagePayMode
            self.minStorageSize = minStorageSize
            self.maxStorageSize = maxStorageSize
            self.netAddrs = netAddrs
            self.physicalZone = physicalZone
            self.masterZone = masterZone
            self.hasSlaveZone = hasSlaveZone
            self.slaveZones = slaveZones
            self.businessType = businessType
            self.isFreeze = isFreeze
            self.orderSource = orderSource
            self.ability = ability
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case updateTime = "UpdateTime"
            case zone = "Zone"
            case clusterName = "ClusterName"
            case region = "Region"
            case dbVersion = "DbVersion"
            case clusterId = "ClusterId"
            case instanceNum = "InstanceNum"
            case uin = "Uin"
            case dbType = "DbType"
            case appId = "AppId"
            case statusDesc = "StatusDesc"
            case createTime = "CreateTime"
            case payMode = "PayMode"
            case periodEndTime = "PeriodEndTime"
            case vip = "Vip"
            case vport = "Vport"
            case projectID = "ProjectID"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case cynosVersion = "CynosVersion"
            case storageLimit = "StorageLimit"
            case renewFlag = "RenewFlag"
            case processingTask = "ProcessingTask"
            case tasks = "Tasks"
            case resourceTags = "ResourceTags"
            case dbMode = "DbMode"
            case serverlessStatus = "ServerlessStatus"
            case storage = "Storage"
            case storageId = "StorageId"
            case storagePayMode = "StoragePayMode"
            case minStorageSize = "MinStorageSize"
            case maxStorageSize = "MaxStorageSize"
            case netAddrs = "NetAddrs"
            case physicalZone = "PhysicalZone"
            case masterZone = "MasterZone"
            case hasSlaveZone = "HasSlaveZone"
            case slaveZones = "SlaveZones"
            case businessType = "BusinessType"
            case isFreeze = "IsFreeze"
            case orderSource = "OrderSource"
            case ability = "Ability"
        }
    }

    /// 集群详情详细信息
    public struct CynosdbClusterDetail: TCOutputModel {
        /// 集群ID
        public let clusterId: String

        /// 集群名称
        public let clusterName: String

        /// 地域
        public let region: String

        /// 状态
        public let status: String

        /// 状态描述
        public let statusDesc: String

        /// VPC名称
        public let vpcName: String

        /// vpc唯一id
        public let vpcId: String

        /// 子网名称
        public let subnetName: String

        /// 子网ID
        public let subnetId: String

        /// 字符集
        public let charset: String

        /// 创建时间
        public let createTime: String

        /// 数据库类型
        public let dbType: String

        /// 数据库版本
        public let dbVersion: String

        /// 使用容量
        public let usedStorage: Int64

        /// 读写分离Vport
        public let roAddr: [Addr]

        /// 实例信息
        public let instanceSet: [ClusterInstanceDetail]

        /// 付费模式
        public let payMode: Int64

        /// 到期时间
        public let periodEndTime: String

        /// vip地址
        public let vip: String

        /// vport端口
        public let vport: Int64

        /// 项目id
        public let projectID: Int64

        /// 可用区
        public let zone: String

        /// 实例绑定的tag数组信息
        public let resourceTags: [Tag]

        /// 当Db类型为SERVERLESS时，serverless集群状态，可选值:
        /// resume
        /// resuming
        /// pause
        /// pausing
        public let serverlessStatus: String

        /// binlog开关，可选值：ON, OFF
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logBin: String?

        /// pitr类型，可选值：normal, redo_pitr
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pitrType: String?

        /// 物理可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let physicalZone: String?

        /// 存储Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageId: String?

        /// 存储大小，单位为G
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storage: Int64?

        /// 最大存储规格，单位为G
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxStorageSize: Int64?

        /// 最小存储规格，单位为G
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minStorageSize: Int64?

        /// 存储付费类型，1为包年包月，0为按量计费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storagePayMode: Int64?

        /// 数据库类型，normal，serverless
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMode: String?

        /// 存储空间上限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageLimit: Int64?

        /// 集群支持的功能
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ability: Ability?

        /// cynos版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cynosVersion: String?

        /// 商业类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessType: String?

        /// 是否有从可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasSlaveZone: String?

        /// 是否冻结
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isFreeze: String?

        /// 任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tasks: [ObjectTask]?

        /// 主可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterZone: String?

        /// 从可用区列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZones: [String]?

        /// Proxy状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyStatus: String?

        /// 是否跳过交易
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isSkipTrade: String?

        /// 是否打开密码复杂度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isOpenPasswordComplexity: String?

        /// 网络类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkStatus: String?

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case region = "Region"
            case status = "Status"
            case statusDesc = "StatusDesc"
            case vpcName = "VpcName"
            case vpcId = "VpcId"
            case subnetName = "SubnetName"
            case subnetId = "SubnetId"
            case charset = "Charset"
            case createTime = "CreateTime"
            case dbType = "DbType"
            case dbVersion = "DbVersion"
            case usedStorage = "UsedStorage"
            case roAddr = "RoAddr"
            case instanceSet = "InstanceSet"
            case payMode = "PayMode"
            case periodEndTime = "PeriodEndTime"
            case vip = "Vip"
            case vport = "Vport"
            case projectID = "ProjectID"
            case zone = "Zone"
            case resourceTags = "ResourceTags"
            case serverlessStatus = "ServerlessStatus"
            case logBin = "LogBin"
            case pitrType = "PitrType"
            case physicalZone = "PhysicalZone"
            case storageId = "StorageId"
            case storage = "Storage"
            case maxStorageSize = "MaxStorageSize"
            case minStorageSize = "MinStorageSize"
            case storagePayMode = "StoragePayMode"
            case dbMode = "DbMode"
            case storageLimit = "StorageLimit"
            case ability = "Ability"
            case cynosVersion = "CynosVersion"
            case businessType = "BusinessType"
            case hasSlaveZone = "HasSlaveZone"
            case isFreeze = "IsFreeze"
            case tasks = "Tasks"
            case masterZone = "MasterZone"
            case slaveZones = "SlaveZones"
            case proxyStatus = "ProxyStatus"
            case isSkipTrade = "IsSkipTrade"
            case isOpenPasswordComplexity = "IsOpenPasswordComplexity"
            case networkStatus = "NetworkStatus"
        }
    }

    /// 实例信息
    public struct CynosdbInstance: TCOutputModel {
        /// 用户Uin
        public let uin: String

        /// 用户AppId
        public let appId: Int64

        /// 集群ID
        public let clusterId: String

        /// 集群名称
        public let clusterName: String

        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 项目ID
        public let projectId: Int64

        /// 地域
        public let region: String

        /// 可用区
        public let zone: String

        /// 实例状态
        public let status: String

        /// 实例状态中文描述
        public let statusDesc: String

        /// 数据库类型
        public let dbType: String

        /// 数据库版本
        public let dbVersion: String

        /// Cpu，单位：核
        public let cpu: Int64

        /// 内存，单位：GB
        public let memory: Int64

        /// 存储量，单位：GB
        public let storage: Int64

        /// 实例类型
        public let instanceType: String

        /// 实例当前角色
        public let instanceRole: String

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// VPC网络ID
        public let vpcId: String

        /// 子网ID
        public let subnetId: String

        /// 实例内网IP
        public let vip: String

        /// 实例内网端口
        public let vport: Int64

        /// 付费模式
        public let payMode: Int64

        /// 实例过期时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var periodEndTime: Date

        /// 销毁期限
        public let destroyDeadlineText: String

        /// 隔离时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var isolateTime: Date

        /// 网络类型
        public let netType: Int64

        /// 外网域名
        public let wanDomain: String

        /// 外网IP
        public let wanIP: String

        /// 外网端口
        public let wanPort: Int64

        /// 外网状态
        public let wanStatus: String

        /// 实例销毁时间
        public let destroyTime: String

        /// Cynos内核版本
        public let cynosVersion: String

        /// 正在处理的任务
        public let processingTask: String

        /// 续费标志
        public let renewFlag: Int64

        /// serverless实例cpu下限
        public let minCpu: Float

        /// serverless实例cpu上限
        public let maxCpu: Float

        /// serverless实例状态, 可选值：
        /// resume
        /// pause
        public let serverlessStatus: String

        /// 预付费存储Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageId: String?

        /// 存储付费类型
        public let storagePayMode: Int64

        /// 物理区
        public let physicalZone: String

        /// 商业类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessType: String?

        /// 任务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tasks: [ObjectTask]?

        /// 是否冻结
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isFreeze: String?

        /// 资源标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceTags: [Tag]?

        /// 主可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterZone: String?

        /// 备可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slaveZones: [String]?

        /// 实例网络信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceNetInfo: [InstanceNetInfo]?

        enum CodingKeys: String, CodingKey {
            case uin = "Uin"
            case appId = "AppId"
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case projectId = "ProjectId"
            case region = "Region"
            case zone = "Zone"
            case status = "Status"
            case statusDesc = "StatusDesc"
            case dbType = "DbType"
            case dbVersion = "DbVersion"
            case cpu = "Cpu"
            case memory = "Memory"
            case storage = "Storage"
            case instanceType = "InstanceType"
            case instanceRole = "InstanceRole"
            case updateTime = "UpdateTime"
            case createTime = "CreateTime"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case vip = "Vip"
            case vport = "Vport"
            case payMode = "PayMode"
            case periodEndTime = "PeriodEndTime"
            case destroyDeadlineText = "DestroyDeadlineText"
            case isolateTime = "IsolateTime"
            case netType = "NetType"
            case wanDomain = "WanDomain"
            case wanIP = "WanIP"
            case wanPort = "WanPort"
            case wanStatus = "WanStatus"
            case destroyTime = "DestroyTime"
            case cynosVersion = "CynosVersion"
            case processingTask = "ProcessingTask"
            case renewFlag = "RenewFlag"
            case minCpu = "MinCpu"
            case maxCpu = "MaxCpu"
            case serverlessStatus = "ServerlessStatus"
            case storageId = "StorageId"
            case storagePayMode = "StoragePayMode"
            case physicalZone = "PhysicalZone"
            case businessType = "BusinessType"
            case tasks = "Tasks"
            case isFreeze = "IsFreeze"
            case resourceTags = "ResourceTags"
            case masterZone = "MasterZone"
            case slaveZones = "SlaveZones"
            case instanceNetInfo = "InstanceNetInfo"
        }
    }

    /// 实例详情
    public struct CynosdbInstanceDetail: TCOutputModel {
        /// 用户Uin
        public let uin: String

        /// 用户AppId
        public let appId: Int64

        /// 集群ID
        public let clusterId: String

        /// 集群名称
        public let clusterName: String

        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 项目ID
        public let projectId: Int64

        /// 地域
        public let region: String

        /// 可用区
        public let zone: String

        /// 实例状态
        public let status: String

        /// 实例状态中文描述
        public let statusDesc: String

        /// 数据库类型
        public let dbType: String

        /// 数据库版本
        public let dbVersion: String

        /// Cpu，单位：核
        public let cpu: Int64

        /// 内存，单位：GB
        public let memory: Int64

        /// 存储量，单位：GB
        public let storage: Int64

        /// 实例类型
        public let instanceType: String

        /// 实例当前角色
        public let instanceRole: String

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 付费模式
        public let payMode: Int64

        /// 实例过期时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var periodEndTime: Date

        /// 网络类型
        public let netType: Int64

        /// VPC网络ID
        public let vpcId: String

        /// 子网ID
        public let subnetId: String

        /// 实例内网IP
        public let vip: String

        /// 实例内网端口
        public let vport: Int64

        /// 实例外网域名
        public let wanDomain: String

        /// 字符集
        public let charset: String

        /// Cynos内核版本
        public let cynosVersion: String

        /// 续费标志
        public let renewFlag: Int64

        /// serverless实例cpu下限
        public let minCpu: Float

        /// serverless实例cpu上限
        public let maxCpu: Float

        /// serverless实例状态, 可能值：
        /// resume
        /// pause
        public let serverlessStatus: String

        enum CodingKeys: String, CodingKey {
            case uin = "Uin"
            case appId = "AppId"
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case projectId = "ProjectId"
            case region = "Region"
            case zone = "Zone"
            case status = "Status"
            case statusDesc = "StatusDesc"
            case dbType = "DbType"
            case dbVersion = "DbVersion"
            case cpu = "Cpu"
            case memory = "Memory"
            case storage = "Storage"
            case instanceType = "InstanceType"
            case instanceRole = "InstanceRole"
            case updateTime = "UpdateTime"
            case createTime = "CreateTime"
            case payMode = "PayMode"
            case periodEndTime = "PeriodEndTime"
            case netType = "NetType"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case vip = "Vip"
            case vport = "Vport"
            case wanDomain = "WanDomain"
            case charset = "Charset"
            case cynosVersion = "CynosVersion"
            case renewFlag = "RenewFlag"
            case minCpu = "MinCpu"
            case maxCpu = "MaxCpu"
            case serverlessStatus = "ServerlessStatus"
        }
    }

    /// 实例组信息
    public struct CynosdbInstanceGrp: TCOutputModel {
        /// 用户appId
        public let appId: Int64?

        /// 集群ID
        public let clusterId: String?

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createdTime: Date?

        /// 删除时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var deletedTime: Date?

        /// 实例组ID
        public let instanceGrpId: String?

        /// 状态
        public let status: String?

        /// 实例组类型。ha-ha组；ro-只读组
        public let type: String?

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updatedTime: Date?

        /// 内网IP
        public let vip: String?

        /// 内网端口
        public let vport: Int64?

        /// 外网域名
        public let wanDomain: String?

        /// 外网ip
        public let wanIP: String?

        /// 外网端口
        public let wanPort: Int64?

        /// 外网状态
        public let wanStatus: String?

        /// 实例组包含实例信息
        public let instanceSet: [CynosdbInstance]?

        /// VPC的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqVpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqSubnetId: String?

        /// 正在回收IP信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let oldAddrInfo: OldAddrInfo?

        /// 正在进行的任务
        public let processingTasks: [String]?

        /// 任务列表
        public let tasks: [ObjectTask]?

        /// biz_net_service表id
        public let netServiceId: Int64

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case clusterId = "ClusterId"
            case createdTime = "CreatedTime"
            case deletedTime = "DeletedTime"
            case instanceGrpId = "InstanceGrpId"
            case status = "Status"
            case type = "Type"
            case updatedTime = "UpdatedTime"
            case vip = "Vip"
            case vport = "Vport"
            case wanDomain = "WanDomain"
            case wanIP = "WanIP"
            case wanPort = "WanPort"
            case wanStatus = "WanStatus"
            case instanceSet = "InstanceSet"
            case uniqVpcId = "UniqVpcId"
            case uniqSubnetId = "UniqSubnetId"
            case oldAddrInfo = "OldAddrInfo"
            case processingTasks = "ProcessingTasks"
            case tasks = "Tasks"
            case netServiceId = "NetServiceId"
        }
    }

    /// 数据库权限列表
    public struct DatabasePrivileges: TCInputModel {
        /// 数据库
        public let db: String

        /// 权限列表
        public let privileges: [String]

        public init(db: String, privileges: [String]) {
            self.db = db
            self.privileges = privileges
        }

        enum CodingKeys: String, CodingKey {
            case db = "Db"
            case privileges = "Privileges"
        }
    }

    /// 数据库表信息
    public struct DatabaseTables: TCInputModel, TCOutputModel {
        /// 数据库名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let database: String?

        /// 表名称列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tables: [String]?

        public init(database: String? = nil, tables: [String]? = nil) {
            self.database = database
            self.tables = tables
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case tables = "Tables"
        }
    }

    /// 数据库表
    public struct DbTable: TCInputModel {
        /// 数据库名称
        public let db: String

        /// 数据库表名称
        public let tableName: String?

        public init(db: String, tableName: String? = nil) {
            self.db = db
            self.tableName = tableName
        }

        enum CodingKeys: String, CodingKey {
            case db = "Db"
            case tableName = "TableName"
        }
    }

    /// 账号，包含accountName和host
    public struct InputAccount: TCInputModel {
        /// 账号
        public let accountName: String

        /// 主机，默认‘%’
        public let host: String?

        public init(accountName: String, host: String? = nil) {
            self.accountName = accountName
            self.host = host
        }

        enum CodingKeys: String, CodingKey {
            case accountName = "AccountName"
            case host = "Host"
        }
    }

    /// 实例的审计规则详情，DescribeAuditRuleWithInstanceIds接口的出参。
    public struct InstanceAuditRule: TCOutputModel {
        /// 实例ID。
        public let instanceId: String

        /// 是否是规则审计。true-规则审计，false-全审计。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let auditRule: Bool?

        /// 审计规则详情。仅当AuditRule=true时有效。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let auditRuleFilters: [AuditRuleFilters]?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case auditRule = "AuditRule"
            case auditRuleFilters = "AuditRuleFilters"
        }
    }

    /// 实例初始化配置信息
    public struct InstanceInitInfo: TCInputModel {
        /// 实例cpu
        public let cpu: Int64

        /// 实例内存
        public let memory: Int64

        /// 实例类型 rw/ro
        public let instanceType: String

        /// 实例个数,范围[1,15]
        public let instanceCount: Int64

        public init(cpu: Int64, memory: Int64, instanceType: String, instanceCount: Int64) {
            self.cpu = cpu
            self.memory = memory
            self.instanceType = instanceType
            self.instanceCount = instanceCount
        }

        enum CodingKeys: String, CodingKey {
            case cpu = "Cpu"
            case memory = "Memory"
            case instanceType = "InstanceType"
            case instanceCount = "InstanceCount"
        }
    }

    /// 实例网络信息
    public struct InstanceNetInfo: TCOutputModel {
        /// 网络类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroupType: String?

        /// 实例组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceGroupId: String?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 网络类型, 0-基础网络, 1-vpc网络, 2-黑石网络
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let netType: Int64?

        /// 私有网络IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 私有网络端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vport: Int64?

        /// 外网域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanDomain: String?

        /// 外网Ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanIP: String?

        /// 外网端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanPort: Int64?

        /// 外网开启状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanStatus: String?

        enum CodingKeys: String, CodingKey {
            case instanceGroupType = "InstanceGroupType"
            case instanceGroupId = "InstanceGroupId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case netType = "NetType"
            case vip = "Vip"
            case vport = "Vport"
            case wanDomain = "WanDomain"
            case wanIP = "WanIP"
            case wanPort = "WanPort"
            case wanStatus = "WanStatus"
        }
    }

    /// 实例可售卖规格详细信息，创建实例时Cpu/Memory确定实例规格，存储可选大小为[MinStorageSize,MaxStorageSize]
    public struct InstanceSpec: TCOutputModel {
        /// 实例CPU，单位：核
        public let cpu: UInt64

        /// 实例内存，单位：GB
        public let memory: UInt64

        /// 实例最大可用存储，单位：GB
        public let maxStorageSize: UInt64

        /// 实例最小可用存储，单位：GB
        public let minStorageSize: UInt64

        /// 是否有库存
        public let hasStock: Bool

        /// 机器类型
        public let machineType: String

        /// 最大IOPS
        public let maxIops: Int64

        /// 最大IO带宽
        public let maxIoBandWidth: Int64

        /// 地域库存信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneStockInfos: [ZoneStockInfo]?

        /// 库存数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stockCount: Int64?

        enum CodingKeys: String, CodingKey {
            case cpu = "Cpu"
            case memory = "Memory"
            case maxStorageSize = "MaxStorageSize"
            case minStorageSize = "MinStorageSize"
            case hasStock = "HasStock"
            case machineType = "MachineType"
            case maxIops = "MaxIops"
            case maxIoBandWidth = "MaxIoBandWidth"
            case zoneStockInfos = "ZoneStockInfos"
            case stockCount = "StockCount"
        }
    }

    /// 参数是否可修改的详细信息
    public struct ModifiableInfo: TCOutputModel {
    }

    /// 修改的实例参数信息
    public struct ModifyParamItem: TCInputModel, TCOutputModel {
        /// 参数名
        public let paramName: String

        /// 参数当前值
        public let currentValue: String

        /// 参数旧值（只在出参时有用）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let oldValue: String?

        public init(paramName: String, currentValue: String, oldValue: String? = nil) {
            self.paramName = paramName
            self.currentValue = currentValue
            self.oldValue = oldValue
        }

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case currentValue = "CurrentValue"
            case oldValue = "OldValue"
        }
    }

    /// 系统支持的模块
    public struct Module: TCOutputModel {
        /// 是否支持，可选值:yes,no
        public let isDisable: String

        /// 模块名
        public let moduleName: String

        enum CodingKeys: String, CodingKey {
            case isDisable = "IsDisable"
            case moduleName = "ModuleName"
        }
    }

    /// 网络信息
    public struct NetAddr: TCOutputModel {
        /// 内网ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 内网端口号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vport: Int64?

        /// 外网域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanDomain: String?

        /// 外网端口号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanPort: Int64?

        /// 网络类型（ro-只读,rw/ha-读写）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let netType: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqSubnetId: String?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqVpcId: String?

        /// 描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 外网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanIP: String?

        /// 外网状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanStatus: String?

        enum CodingKeys: String, CodingKey {
            case vip = "Vip"
            case vport = "Vport"
            case wanDomain = "WanDomain"
            case wanPort = "WanPort"
            case netType = "NetType"
            case uniqSubnetId = "UniqSubnetId"
            case uniqVpcId = "UniqVpcId"
            case description = "Description"
            case wanIP = "WanIP"
            case wanStatus = "WanStatus"
        }
    }

    /// x08新创建的账号
    public struct NewAccount: TCInputModel {
        /// 账户名，包含字母数字_,以字母开头，字母或数字结尾，长度1-16
        public let accountName: String

        /// 密码，密码长度范围为8到64个字符
        public let accountPassword: String

        /// 主机
        public let host: String

        /// 描述
        public let description: String?

        /// 用户最大连接数，不能大于10240
        public let maxUserConnections: Int64?

        public init(accountName: String, accountPassword: String, host: String, description: String? = nil, maxUserConnections: Int64? = nil) {
            self.accountName = accountName
            self.accountPassword = accountPassword
            self.host = host
            self.description = description
            self.maxUserConnections = maxUserConnections
        }

        enum CodingKeys: String, CodingKey {
            case accountName = "AccountName"
            case accountPassword = "AccountPassword"
            case host = "Host"
            case description = "Description"
            case maxUserConnections = "MaxUserConnections"
        }
    }

    /// 任务信息
    public struct ObjectTask: TCInputModel, TCOutputModel {
        /// 任务自增ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: Int64?

        /// 任务类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskType: String?

        /// 任务状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskStatus: String?

        /// 任务ID（集群ID|实例组ID|实例ID）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objectId: String?

        /// 任务类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let objectType: String?

        public init(taskId: Int64? = nil, taskType: String? = nil, taskStatus: String? = nil, objectId: String? = nil, objectType: String? = nil) {
            self.taskId = taskId
            self.taskType = taskType
            self.taskStatus = taskStatus
            self.objectId = objectId
            self.objectType = objectType
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskType = "TaskType"
            case taskStatus = "TaskStatus"
            case objectId = "ObjectId"
            case objectType = "ObjectType"
        }
    }

    /// 数据库地址
    public struct OldAddrInfo: TCOutputModel {
        /// IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vport: Int64?

        /// 期望执行回收时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let returnTime: String?

        enum CodingKeys: String, CodingKey {
            case vip = "Vip"
            case vport = "Vport"
            case returnTime = "ReturnTime"
        }
    }

    /// 参数信息
    public struct ParamInfo: TCOutputModel {
        /// 当前值
        public let currentValue: String

        /// 默认值
        public let `default`: String

        /// 参数为enum/string/bool时，可选值列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enumValue: [String]?

        /// 参数类型为float/integer时的最大值
        public let max: String

        /// 参数类型为float/integer时的最小值
        public let min: String

        /// 参数名称
        public let paramName: String

        /// 是否需要重启生效
        public let needReboot: Int64

        /// 参数类型：integer/float/string/enum/bool
        public let paramType: String

        /// 匹配类型，multiVal, regex在参数类型是string时使用
        public let matchType: String

        /// 匹配目标值，当multiVal时，各个key用;分割
        public let matchValue: String

        /// 参数描述
        public let description: String

        /// 是否为全局参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isGlobal: Int64?

        /// 参数是否可修改
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifiableInfo: ModifiableInfo?

        /// 是否为函数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isFunc: Bool?

        /// 函数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `func`: String?

        enum CodingKeys: String, CodingKey {
            case currentValue = "CurrentValue"
            case `default` = "Default"
            case enumValue = "EnumValue"
            case max = "Max"
            case min = "Min"
            case paramName = "ParamName"
            case needReboot = "NeedReboot"
            case paramType = "ParamType"
            case matchType = "MatchType"
            case matchValue = "MatchValue"
            case description = "Description"
            case isGlobal = "IsGlobal"
            case modifiableInfo = "ModifiableInfo"
            case isFunc = "IsFunc"
            case `func` = "Func"
        }
    }

    /// 修改参数时，传入参数描述
    public struct ParamItem: TCInputModel {
        /// 参数名称
        public let paramName: String

        /// 当前值
        public let currentValue: String

        /// 原有值
        public let oldValue: String

        public init(paramName: String, currentValue: String, oldValue: String) {
            self.paramName = paramName
            self.currentValue = currentValue
            self.oldValue = oldValue
        }

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case currentValue = "CurrentValue"
            case oldValue = "OldValue"
        }
    }

    /// 参数模板信息
    public struct ParamTemplateListInfo: TCOutputModel {
        /// 参数模板ID
        public let id: Int64

        /// 参数模板名称
        public let templateName: String

        /// 参数模板描述
        public let templateDescription: String

        /// 引擎版本
        public let engineVersion: String

        /// 数据库类型，可选值：NORMAL，SERVERLESS
        public let dbMode: String

        /// 参数模板详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paramInfoSet: [TemplateParamInfo]?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case templateName = "TemplateName"
            case templateDescription = "TemplateDescription"
            case engineVersion = "EngineVersion"
            case dbMode = "DbMode"
            case paramInfoSet = "ParamInfoSet"
        }
    }

    /// 安全组规则
    public struct PolicyRule: TCOutputModel {
        /// 策略，ACCEPT或者DROP
        public let action: String

        /// 来源Ip或Ip段，例如192.168.0.0/16
        public let cidrIp: String

        /// 端口
        public let portRange: String

        /// 网络协议，支持udp、tcp等
        public let ipProtocol: String

        /// 协议端口ID或者协议端口组ID。
        public let serviceModule: String

        /// IP地址ID或者ID地址组ID。
        public let addressModule: String

        /// id
        public let id: String

        /// 描述
        public let desc: String

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case cidrIp = "CidrIp"
            case portRange = "PortRange"
            case ipProtocol = "IpProtocol"
            case serviceModule = "ServiceModule"
            case addressModule = "AddressModule"
            case id = "Id"
            case desc = "Desc"
        }
    }

    /// 查询过滤器
    public struct QueryFilter: TCInputModel {
        /// 搜索字段，目前支持："InstanceId", "ProjectId", "InstanceName", "Vip"
        public let names: [String]

        /// 搜索字符串
        public let values: [String]

        /// 是否精确匹配
        public let exactMatch: Bool?

        /// 搜索字段
        public let name: String?

        /// 操作符
        public let `operator`: String?

        public init(names: [String], values: [String], exactMatch: Bool? = nil, name: String? = nil, operator: String? = nil) {
            self.names = names
            self.values = values
            self.exactMatch = exactMatch
            self.name = name
            self.operator = `operator`
        }

        enum CodingKeys: String, CodingKey {
            case names = "Names"
            case values = "Values"
            case exactMatch = "ExactMatch"
            case name = "Name"
            case `operator` = "Operator"
        }
    }

    /// 回滚数据库信息
    public struct RollbackDatabase: TCInputModel {
        /// 旧数据库名称
        public let oldDatabase: String

        /// 新数据库名称
        public let newDatabase: String

        public init(oldDatabase: String, newDatabase: String) {
            self.oldDatabase = oldDatabase
            self.newDatabase = newDatabase
        }

        enum CodingKeys: String, CodingKey {
            case oldDatabase = "OldDatabase"
            case newDatabase = "NewDatabase"
        }
    }

    /// 回档数据库及表
    public struct RollbackTable: TCInputModel {
        /// 数据库名称
        public let database: String

        /// 数据库表
        public let tables: [RollbackTableInfo]

        public init(database: String, tables: [RollbackTableInfo]) {
            self.database = database
            self.tables = tables
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case tables = "Tables"
        }
    }

    /// 回档表信息
    public struct RollbackTableInfo: TCInputModel {
        /// 旧表名称
        public let oldTable: String

        /// 新表名称
        public let newTable: String

        public init(oldTable: String, newTable: String) {
            self.oldTable = oldTable
            self.newTable = newTable
        }

        enum CodingKeys: String, CodingKey {
            case oldTable = "OldTable"
            case newTable = "NewTable"
        }
    }

    /// 可回档的时间范围
    public struct RollbackTimeRange: TCOutputModel {
        /// 开始时间
        public let timeRangeStart: String

        /// 结束时间
        public let timeRangeEnd: String

        enum CodingKeys: String, CodingKey {
            case timeRangeStart = "TimeRangeStart"
            case timeRangeEnd = "TimeRangeEnd"
        }
    }

    /// 审计规则的规则过滤条件
    public struct RuleFilters: TCInputModel, TCOutputModel {
        /// 审计规则过滤条件的参数名称。可选值：host – 客户端 IP；user – 数据库账户；dbName – 数据库名称；sqlType-SQL类型；sql-sql语句。
        public let type: String

        /// 审计规则过滤条件的匹配类型。可选值：INC – 包含；EXC – 不包含；EQS – 等于；NEQ – 不等于。
        public let compare: String

        /// 审计规则过滤条件的匹配值。
        public let value: [String]

        public init(type: String, compare: String, value: [String]) {
            self.type = type
            self.compare = compare
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case compare = "Compare"
            case value = "Value"
        }
    }

    /// 售卖地域信息
    public struct SaleRegion: TCOutputModel {
        /// 地域英文名
        public let region: String

        /// 地域数字ID
        public let regionId: Int64

        /// 地域中文名
        public let regionZh: String

        /// 可售卖可用区列表
        public let zoneSet: [SaleZone]

        /// 引擎类型
        public let dbType: String

        /// 地域模块支持情况
        public let modules: [Module]

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionId = "RegionId"
            case regionZh = "RegionZh"
            case zoneSet = "ZoneSet"
            case dbType = "DbType"
            case modules = "Modules"
        }
    }

    /// 售卖可用区信息
    public struct SaleZone: TCOutputModel {
        /// 可用区英文名
        public let zone: String

        /// 可用区数字ID
        public let zoneId: Int64

        /// 可用区中文名
        public let zoneZh: String

        /// 是否支持serverless集群<br>
        /// 0:不支持<br>
        /// 1:支持
        public let isSupportServerless: Int64

        /// 是否支持普通集群<br>
        /// 0:不支持<br>
        /// 1:支持
        public let isSupportNormal: Int64

        /// 物理区
        public let physicalZone: String

        /// 用户是否有可用区权限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasPermission: Bool?

        /// 是否为全链路RDMA可用区
        public let isWholeRdmaZone: String?

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneId = "ZoneId"
            case zoneZh = "ZoneZh"
            case isSupportServerless = "IsSupportServerless"
            case isSupportNormal = "IsSupportNormal"
            case physicalZone = "PhysicalZone"
            case hasPermission = "HasPermission"
            case isWholeRdmaZone = "IsWholeRdmaZone"
        }
    }

    /// 安全组详情
    public struct SecurityGroup: TCOutputModel {
        /// 项目ID
        public let projectId: Int64

        /// 创建时间，时间格式：yyyy-mm-dd hh:mm:ss
        public let createTime: String

        /// 入站规则
        public let inbound: [PolicyRule]

        /// 出站规则
        public let outbound: [PolicyRule]

        /// 安全组ID
        public let securityGroupId: String

        /// 安全组名称
        public let securityGroupName: String

        /// 安全组备注
        public let securityGroupRemark: String

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case createTime = "CreateTime"
            case inbound = "Inbound"
            case outbound = "Outbound"
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupRemark = "SecurityGroupRemark"
        }
    }

    /// 实例慢查询信息
    public struct SlowQueriesItem: TCOutputModel {
        /// 执行时间戳
        public let timestamp: Int64

        /// 执行时长，单位秒
        public let queryTime: Float

        /// sql语句
        public let sqlText: String

        /// 客户端host
        public let userHost: String

        /// 用户名
        public let userName: String

        /// 数据库名
        public let database: String

        /// 锁时长，单位秒
        public let lockTime: Float

        /// 扫描行数
        public let rowsExamined: Int64

        /// 返回行数
        public let rowsSent: Int64

        /// sql模版
        public let sqlTemplate: String

        /// sql语句md5
        public let sqlMd5: String

        enum CodingKeys: String, CodingKey {
            case timestamp = "Timestamp"
            case queryTime = "QueryTime"
            case sqlText = "SqlText"
            case userHost = "UserHost"
            case userName = "UserName"
            case database = "Database"
            case lockTime = "LockTime"
            case rowsExamined = "RowsExamined"
            case rowsSent = "RowsSent"
            case sqlTemplate = "SqlTemplate"
            case sqlMd5 = "SqlMd5"
        }
    }

    /// mysql表权限
    public struct TablePrivileges: TCInputModel {
        /// 数据库名
        public let db: String

        /// 表名
        public let tableName: String

        /// 权限列表
        public let privileges: [String]

        public init(db: String, tableName: String, privileges: [String]) {
            self.db = db
            self.tableName = tableName
            self.privileges = privileges
        }

        enum CodingKeys: String, CodingKey {
            case db = "Db"
            case tableName = "TableName"
            case privileges = "Privileges"
        }
    }

    /// 集群绑定的标签信息，包含标签键TagKey和标签值TagValue
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 参数模板详情
    public struct TemplateParamInfo: TCOutputModel {
        /// 当前值
        public let currentValue: String

        /// 默认值
        public let `default`: String

        /// 参数类型为enum时可选的值类型集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enumValue: [String]?

        /// 参数类型为float/integer时的最大值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let max: String?

        /// 参数类型为float/integer时的最小值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let min: String?

        /// 参数名称
        public let paramName: String

        /// 是否需要重启
        public let needReboot: Int64

        /// 参数描述
        public let description: String

        /// 参数类型，integer/float/string/enum
        public let paramType: String

        enum CodingKeys: String, CodingKey {
            case currentValue = "CurrentValue"
            case `default` = "Default"
            case enumValue = "EnumValue"
            case max = "Max"
            case min = "Min"
            case paramName = "ParamName"
            case needReboot = "NeedReboot"
            case description = "Description"
            case paramType = "ParamType"
        }
    }

    /// 计费询价结果
    public struct TradePrice: TCOutputModel {
        /// 预付费模式下资源总价，不包含优惠，单位:分
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalPrice: Int64?

        /// 总的折扣，100表示100%不打折
        public let discount: Float

        /// 预付费模式下的优惠后总价, 单位: 分,例如用户享有折扣 =TotalPrice × Discount
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalPriceDiscount: Int64?

        /// 后付费模式下的单位资源价格，不包含优惠，单位:分
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unitPrice: Int64?

        /// 优惠后后付费模式下的单位资源价格, 单位: 分,例如用户享有折扣=UnitPricet × Discount
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unitPriceDiscount: Int64?

        /// 计费价格单位
        public let chargeUnit: String

        enum CodingKeys: String, CodingKey {
            case totalPrice = "TotalPrice"
            case discount = "Discount"
            case totalPriceDiscount = "TotalPriceDiscount"
            case unitPrice = "UnitPrice"
            case unitPriceDiscount = "UnitPriceDiscount"
            case chargeUnit = "ChargeUnit"
        }
    }

    /// 可用区库存信息
    public struct ZoneStockInfo: TCOutputModel {
        /// 可用区
        public let zone: String

        /// 是否有库存
        public let hasStock: Bool

        /// 库存数量
        public let stockCount: Int64

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case hasStock = "HasStock"
            case stockCount = "StockCount"
        }
    }
}
