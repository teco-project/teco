//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCynosdbError {
    public struct OperationDenied: TCErrorType {
        enum Code: String {
            case clusterOpNotAllowedError = "OperationDenied.ClusterOpNotAllowedError"
            case clusterStatusDeniedError = "OperationDenied.ClusterStatusDeniedError"
            case instanceStatusDeniedError = "OperationDenied.InstanceStatusDeniedError"
            case insufficientBalanceError = "OperationDenied.InsufficientBalanceError"
            case serverlessClusterStatusDenied = "OperationDenied.ServerlessClusterStatusDenied"
            case serverlessInstanceStatusDenied = "OperationDenied.ServerlessInstanceStatusDenied"
            case taskConflictError = "OperationDenied.TaskConflictError"
            case userNotAuthenticatedError = "OperationDenied.UserNotAuthenticatedError"
            case versionNotSupportError = "OperationDenied.VersionNotSupportError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 由于操作禁止，当前集群不允许该操作。
        public static var clusterOpNotAllowedError: OperationDenied {
            OperationDenied(.clusterOpNotAllowedError)
        }
        
        /// 集群当前状态不允许该操作。
        public static var clusterStatusDeniedError: OperationDenied {
            OperationDenied(.clusterStatusDeniedError)
        }
        
        /// 实例当前状态不允许该操作。
        public static var instanceStatusDeniedError: OperationDenied {
            OperationDenied(.instanceStatusDeniedError)
        }
        
        /// 账号余额不足。
        public static var insufficientBalanceError: OperationDenied {
            OperationDenied(.insufficientBalanceError)
        }
        
        /// serverless集群当前状态不允许该操作。
        public static var serverlessClusterStatusDenied: OperationDenied {
            OperationDenied(.serverlessClusterStatusDenied)
        }
        
        /// serverless实例当前状态不允许该操作。
        public static var serverlessInstanceStatusDenied: OperationDenied {
            OperationDenied(.serverlessInstanceStatusDenied)
        }
        
        /// 任务冲突检查不通过。
        public static var taskConflictError: OperationDenied {
            OperationDenied(.taskConflictError)
        }
        
        /// 用户未进行实名认证，请先进行实名认证才可购买。
        public static var userNotAuthenticatedError: OperationDenied {
            OperationDenied(.userNotAuthenticatedError)
        }
        
        /// Serverless不支持该版本。
        public static var versionNotSupportError: OperationDenied {
            OperationDenied(.versionNotSupportError)
        }
    }
}

extension TCCynosdbError.OperationDenied: Equatable {
    public static func == (lhs: TCCynosdbError.OperationDenied, rhs: TCCynosdbError.OperationDenied) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCynosdbError.OperationDenied: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCynosdbError.OperationDenied {
    public func toCynosdbError() -> TCCynosdbError {
        guard let code = TCCynosdbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCynosdbError(code, context: self.context)
    }
}