//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCynosdbError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case batchGetInstanceError = "FailedOperation.BatchGetInstanceError"
            case camCheckResourceError = "FailedOperation.CamCheckResourceError"
            case camSigAndAuthError = "FailedOperation.CamSigAndAuthError"
            case createOrder = "FailedOperation.CreateOrder"
            case databaseAccessError = "FailedOperation.DatabaseAccessError"
            case flowCreateError = "FailedOperation.FlowCreateError"
            case flowNotFoundError = "FailedOperation.FlowNotFoundError"
            case getBackupStrategyError = "FailedOperation.GetBackupStrategyError"
            case insufficientBalance = "FailedOperation.InsufficientBalance"
            case operationFailedError = "FailedOperation.OperationFailedError"
            case querySpecBySpecCodeError = "FailedOperation.QuerySpecBySpecCodeError"
            case tradeCreateOrderError = "FailedOperation.TradeCreateOrderError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 批量查询失败。
        public static var batchGetInstanceError: FailedOperation {
            FailedOperation(.batchGetInstanceError)
        }
        
        /// 获取权限失败，请稍后重试。如果持续不成功，请联系客服进行处理。
        public static var camCheckResourceError: FailedOperation {
            FailedOperation(.camCheckResourceError)
        }
        
        /// 鉴权失败，请稍后重试。如果持续不成功，请联系客服进行处理。
        public static var camSigAndAuthError: FailedOperation {
            FailedOperation(.camSigAndAuthError)
        }
        
        /// 创建并支付订单失败。
        public static var createOrder: FailedOperation {
            FailedOperation(.createOrder)
        }
        
        /// 数据库访问失败，请稍后重试。如果持续不成功，请联系客服进行处理。
        public static var databaseAccessError: FailedOperation {
            FailedOperation(.databaseAccessError)
        }
        
        /// 创建流程失败，请稍后重试。如果持续不成功，请联系客服进行处理。
        public static var flowCreateError: FailedOperation {
            FailedOperation(.flowCreateError)
        }
        
        /// Flow不存在。
        public static var flowNotFoundError: FailedOperation {
            FailedOperation(.flowNotFoundError)
        }
        
        /// 获取备份策略失败，请稍后重试。如果持续不成功，请联系客服进行处理。
        public static var getBackupStrategyError: FailedOperation {
            FailedOperation(.getBackupStrategyError)
        }
        
        /// 账号余额不足。
        public static var insufficientBalance: FailedOperation {
            FailedOperation(.insufficientBalance)
        }
        
        /// 操作失败，请稍后重试。如果持续不成功，请联系客服进行处理。
        public static var operationFailedError: FailedOperation {
            FailedOperation(.operationFailedError)
        }
        
        /// 规格信息查询失败。
        public static var querySpecBySpecCodeError: FailedOperation {
            FailedOperation(.querySpecBySpecCodeError)
        }
        
        /// 创建并支付订单失败，请稍后重试。如果持续不成功，请联系客服进行处理。
        public static var tradeCreateOrderError: FailedOperation {
            FailedOperation(.tradeCreateOrderError)
        }
    }
}

extension TCCynosdbError.FailedOperation: Equatable {
    public static func == (lhs: TCCynosdbError.FailedOperation, rhs: TCCynosdbError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCynosdbError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCynosdbError.FailedOperation {
    /// - Returns: ``TCCynosdbError`` that holds the same error and context.
    public func toCynosdbError() -> TCCynosdbError {
        guard let code = TCCynosdbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCynosdbError(code, context: self.context)
    }
}

extension TCCynosdbError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
