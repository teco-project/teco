//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCynosdbError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case dbOperationFailed = "InternalError.DbOperationFailed"
            case getSecurityGroupDetailFailed = "InternalError.GetSecurityGroupDetailFailed"
            case getSubnetFailed = "InternalError.GetSubnetFailed"
            case getVpcFailed = "InternalError.GetVpcFailed"
            case internalHttpServerError = "InternalError.InternalHttpServerError"
            case listInstanceFailed = "InternalError.ListInstanceFailed"
            case operateWanFail = "InternalError.OperateWanFail"
            case operationNotSupport = "InternalError.OperationNotSupport"
            case queryDatabaseFailed = "InternalError.QueryDatabaseFailed"
            case systemError = "InternalError.SystemError"
            case unknownError = "InternalError.UnknownError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 查询数据库失败。
        public static var dbOperationFailed: InternalError {
            InternalError(.dbOperationFailed)
        }
        
        /// 获取安全组信息失败。
        public static var getSecurityGroupDetailFailed: InternalError {
            InternalError(.getSecurityGroupDetailFailed)
        }
        
        /// 获取子网失败。
        public static var getSubnetFailed: InternalError {
            InternalError(.getSubnetFailed)
        }
        
        /// 获取VPC失败。
        public static var getVpcFailed: InternalError {
            InternalError(.getVpcFailed)
        }
        
        /// http请求执行异常。
        public static var internalHttpServerError: InternalError {
            InternalError(.internalHttpServerError)
        }
        
        /// 安全组查询实例失败。
        public static var listInstanceFailed: InternalError {
            InternalError(.listInstanceFailed)
        }
        
        /// 操作外网失败。
        public static var operateWanFail: InternalError {
            InternalError(.operateWanFail)
        }
        
        /// 操作不支持。
        public static var operationNotSupport: InternalError {
            InternalError(.operationNotSupport)
        }
        
        /// 查询数据库失败。
        public static var queryDatabaseFailed: InternalError {
            InternalError(.queryDatabaseFailed)
        }
        
        /// 系统内部错误。
        public static var systemError: InternalError {
            InternalError(.systemError)
        }
        
        /// 未知的内部错误。
        public static var unknownError: InternalError {
            InternalError(.unknownError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCCynosdbError.InternalError: Equatable {
    public static func == (lhs: TCCynosdbError.InternalError, rhs: TCCynosdbError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCynosdbError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCynosdbError.InternalError {
    public func toCynosdbError() -> TCCynosdbError {
        guard let code = TCCynosdbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCynosdbError(code, context: self.context)
    }
}