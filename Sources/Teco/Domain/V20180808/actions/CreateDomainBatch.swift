//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Domain {
    /// CreateDomainBatch请求参数结构体
    public struct CreateDomainBatchRequest: TCRequestModel {
        /// 模板ID。详情请查看：[获取模板列表](https://cloud.tencent.com/document/product/242/48940)
        public let templateId: String
        
        /// 购买域名的年限，可选值：[1-10]
        public let period: Int64
        
        /// 批量购买的域名,最多为4000个
        public let domains: [String]
        
        /// 付费模式 0手动在线付费，1使用余额付费，2使用特惠包
        public let payMode: Int64
        
        /// 自动续费开关。有两个可选值：
        /// 0 表示关闭，不自动续费（默认值）
        /// 1 表示开启，将自动续费
        public let autoRenewFlag: Int64?
        
        /// 使用的特惠包ID，PayMode为2时必填
        public let packageResourceId: String?
        
        /// 是否开启更新锁：0=默认不开启，1=开启
        public let updateProhibition: Int64?
        
        /// 是否开启转移锁：0=默认不开启，1=开启
        public let transferProhibition: Int64?
        
        public init (templateId: String, period: Int64, domains: [String], payMode: Int64, autoRenewFlag: Int64? = nil, packageResourceId: String? = nil, updateProhibition: Int64? = nil, transferProhibition: Int64? = nil) {
            self.templateId = templateId
            self.period = period
            self.domains = domains
            self.payMode = payMode
            self.autoRenewFlag = autoRenewFlag
            self.packageResourceId = packageResourceId
            self.updateProhibition = updateProhibition
            self.transferProhibition = transferProhibition
        }
        
        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case period = "Period"
            case domains = "Domains"
            case payMode = "PayMode"
            case autoRenewFlag = "AutoRenewFlag"
            case packageResourceId = "PackageResourceId"
            case updateProhibition = "UpdateProhibition"
            case transferProhibition = "TransferProhibition"
        }
    }
    
    /// CreateDomainBatch返回参数结构体
    public struct CreateDomainBatchResponse: TCResponseModel {
        /// 批量日志ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logId: Int64?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case logId = "LogId"
            case requestId = "RequestId"
        }
    }
    
    /// 批量域名注册
    ///
    /// 本接口 ( CreateDomainBatch ) 用于批量域名注册 。
    @inlinable
    public func createDomainBatch(_ input: CreateDomainBatchRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateDomainBatchResponse > {
        self.client.execute(action: "CreateDomainBatch", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 批量域名注册
    ///
    /// 本接口 ( CreateDomainBatch ) 用于批量域名注册 。
    @inlinable
    public func createDomainBatch(_ input: CreateDomainBatchRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDomainBatchResponse {
        try await self.client.execute(action: "CreateDomainBatch", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
