//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Domain {
    /// 批量域名 DNS 修改
    ///
    /// 本接口 ( ModifyDomainDNSBatch) 用于批量域名 DNS 修改 。
    @inlinable
    public func modifyDomainDNSBatch(_ input: ModifyDomainDNSBatchRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyDomainDNSBatchResponse > {
        self.client.execute(action: "ModifyDomainDNSBatch", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 批量域名 DNS 修改
    ///
    /// 本接口 ( ModifyDomainDNSBatch) 用于批量域名 DNS 修改 。
    @inlinable
    public func modifyDomainDNSBatch(_ input: ModifyDomainDNSBatchRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDomainDNSBatchResponse {
        try await self.client.execute(action: "ModifyDomainDNSBatch", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyDomainDNSBatch请求参数结构体
    public struct ModifyDomainDNSBatchRequest: TCRequestModel {
        /// 批量操作的域名。
        public let domains: [String]
        
        /// 域名DNS 数组。
        public let dns: [String]
        
        public init (domains: [String], dns: [String]) {
            self.domains = domains
            self.dns = dns
        }
        
        enum CodingKeys: String, CodingKey {
            case domains = "Domains"
            case dns = "Dns"
        }
    }
    
    /// ModifyDomainDNSBatch返回参数结构体
    public struct ModifyDomainDNSBatchResponse: TCResponseModel {
        /// 日志ID。
        public let logId: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case logId = "LogId"
            case requestId = "RequestId"
        }
    }
}
