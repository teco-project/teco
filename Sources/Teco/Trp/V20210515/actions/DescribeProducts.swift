//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Trp {
    /// DescribeProducts请求参数结构体
    public struct DescribeProductsRequest: TCRequestModel {
        /// 商品名称
        public let name: String?
        
        /// 条数
        public let pageSize: UInt64?
        
        /// 页数
        public let pageNumber: UInt64?
        
        /// 商品ID
        public let merchantId: String?
        
        /// 企业ID
        public let corpId: UInt64?
        
        public init (name: String? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, merchantId: String? = nil, corpId: UInt64? = nil) {
            self.name = name
            self.pageSize = pageSize
            self.pageNumber = pageNumber
            self.merchantId = merchantId
            self.corpId = corpId
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
            case merchantId = "MerchantId"
            case corpId = "CorpId"
        }
    }
    
    /// DescribeProducts返回参数结构体
    public struct DescribeProductsResponse: TCResponseModel {
        /// 商品列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let products: [Product]?
        
        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case products = "Products"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
    
    /// 查询商品列表
    @inlinable
    public func describeProducts(_ input: DescribeProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeProductsResponse > {
        self.client.execute(action: "DescribeProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询商品列表
    @inlinable
    public func describeProducts(_ input: DescribeProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProductsResponse {
        try await self.client.execute(action: "DescribeProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询商品列表
    @inlinable
    public func describeProducts(name: String? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, merchantId: String? = nil, corpId: UInt64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeProductsResponse > {
        self.describeProducts(DescribeProductsRequest(name: name, pageSize: pageSize, pageNumber: pageNumber, merchantId: merchantId, corpId: corpId), logger: logger, on: eventLoop)
    }
    
    /// 查询商品列表
    @inlinable
    public func describeProducts(name: String? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, merchantId: String? = nil, corpId: UInt64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProductsResponse {
        try await self.describeProducts(DescribeProductsRequest(name: name, pageSize: pageSize, pageNumber: pageNumber, merchantId: merchantId, corpId: corpId), logger: logger, on: eventLoop)
    }
}
