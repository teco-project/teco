//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Trp {
    /// DescribeRawScanLogs请求参数结构体
    public struct DescribeRawScanLogsRequest: TCPaginatedRequest {
        /// 企业ID, 默认为当前企业
        /// 如果有渠道权限，可以传 0 会查渠道下所有的企业
        public let corpId: UInt64?

        /// 分页数量，默认为 20，最大为 1000
        public let pageSize: UInt64?

        /// 当前分页，默认为 1
        public let pageNumber: UInt64?

        /// 从哪个日志后查询
        /// 即: LogId > $AfterLogId
        public let afterLogId: UInt64?

        /// 开始时间 >= StartTime
        public let startTime: String?

        /// 结束时间 < EndTime
        public let endTime: String?

        public init(corpId: UInt64? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, afterLogId: UInt64? = nil, startTime: String? = nil, endTime: String? = nil) {
            self.corpId = corpId
            self.pageSize = pageSize
            self.pageNumber = pageNumber
            self.afterLogId = afterLogId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case corpId = "CorpId"
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
            case afterLogId = "AfterLogId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRawScanLogsResponse) -> DescribeRawScanLogsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeRawScanLogsRequest(corpId: self.corpId, pageSize: self.pageSize, pageNumber: (self.pageNumber ?? 0) + 1, afterLogId: self.afterLogId, startTime: self.startTime, endTime: self.endTime)
        }
    }

    /// DescribeRawScanLogs返回参数结构体
    public struct DescribeRawScanLogsResponse: TCPaginatedResponse {
        /// 原始扫码日志
        public let scanLogs: [RawScanLog]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case scanLogs = "ScanLogs"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RawScanLog`` list from the paginated response.
        public func getItems() -> [RawScanLog] {
            self.scanLogs ?? []
        }
    }

    /// 增量查询原始扫码日志
    ///
    /// 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
    @inlinable
    public func describeRawScanLogs(_ input: DescribeRawScanLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRawScanLogsResponse> {
        self.client.execute(action: "DescribeRawScanLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 增量查询原始扫码日志
    ///
    /// 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
    @inlinable
    public func describeRawScanLogs(_ input: DescribeRawScanLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRawScanLogsResponse {
        try await self.client.execute(action: "DescribeRawScanLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 增量查询原始扫码日志
    ///
    /// 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
    @inlinable
    public func describeRawScanLogs(corpId: UInt64? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, afterLogId: UInt64? = nil, startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRawScanLogsResponse> {
        self.describeRawScanLogs(.init(corpId: corpId, pageSize: pageSize, pageNumber: pageNumber, afterLogId: afterLogId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 增量查询原始扫码日志
    ///
    /// 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
    @inlinable
    public func describeRawScanLogs(corpId: UInt64? = nil, pageSize: UInt64? = nil, pageNumber: UInt64? = nil, afterLogId: UInt64? = nil, startTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRawScanLogsResponse {
        try await self.describeRawScanLogs(.init(corpId: corpId, pageSize: pageSize, pageNumber: pageNumber, afterLogId: afterLogId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 增量查询原始扫码日志
    ///
    /// 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
    @inlinable
    public func describeRawScanLogsPaginated(_ input: DescribeRawScanLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [RawScanLog])> {
        self.client.paginate(input: input, region: region, command: self.describeRawScanLogs, logger: logger, on: eventLoop)
    }

    /// 增量查询原始扫码日志
    ///
    /// 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
    @inlinable @discardableResult
    public func describeRawScanLogsPaginated(_ input: DescribeRawScanLogsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRawScanLogsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRawScanLogs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 增量查询原始扫码日志
    ///
    /// 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
    ///
    /// - Returns: `AsyncSequence`s of ``RawScanLog`` and ``DescribeRawScanLogsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRawScanLogsPaginator(_ input: DescribeRawScanLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRawScanLogsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRawScanLogs, logger: logger, on: eventLoop)
    }
}
