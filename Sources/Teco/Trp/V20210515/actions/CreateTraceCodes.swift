//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Trp {
    /// CreateTraceCodes请求参数结构体
    public struct CreateTraceCodesRequest: TCRequestModel {
        /// 批次ID
        public let batchId: String

        /// 企业ID
        public let corpId: UInt64?

        /// 码
        public let codes: [CodeItem]?

        public init(batchId: String, corpId: UInt64? = nil, codes: [CodeItem]? = nil) {
            self.batchId = batchId
            self.corpId = corpId
            self.codes = codes
        }

        enum CodingKeys: String, CodingKey {
            case batchId = "BatchId"
            case corpId = "CorpId"
            case codes = "Codes"
        }
    }

    /// CreateTraceCodes返回参数结构体
    public struct CreateTraceCodesResponse: TCResponseModel {
        /// 批次ID
        public let batchId: String

        /// 导入成功码数量
        public let activeCnt: UInt64

        /// 批次码数量
        public let codeCnt: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case batchId = "BatchId"
            case activeCnt = "ActiveCnt"
            case codeCnt = "CodeCnt"
            case requestId = "RequestId"
        }
    }

    /// 批量导入二维码
    ///
    /// 批量导入二维码，只支持平台发的码
    @inlinable
    public func createTraceCodes(_ input: CreateTraceCodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateTraceCodesResponse> {
        self.client.execute(action: "CreateTraceCodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量导入二维码
    ///
    /// 批量导入二维码，只支持平台发的码
    @inlinable
    public func createTraceCodes(_ input: CreateTraceCodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTraceCodesResponse {
        try await self.client.execute(action: "CreateTraceCodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量导入二维码
    ///
    /// 批量导入二维码，只支持平台发的码
    @inlinable
    public func createTraceCodes(batchId: String, corpId: UInt64? = nil, codes: [CodeItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateTraceCodesResponse> {
        self.createTraceCodes(CreateTraceCodesRequest(batchId: batchId, corpId: corpId, codes: codes), region: region, logger: logger, on: eventLoop)
    }

    /// 批量导入二维码
    ///
    /// 批量导入二维码，只支持平台发的码
    @inlinable
    public func createTraceCodes(batchId: String, corpId: UInt64? = nil, codes: [CodeItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTraceCodesResponse {
        try await self.createTraceCodes(CreateTraceCodesRequest(batchId: batchId, corpId: corpId, codes: codes), region: region, logger: logger, on: eventLoop)
    }
}
