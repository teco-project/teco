//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Trp {
    /// ModifyTraceCodeUnlink请求参数结构体
    public struct ModifyTraceCodeUnlinkRequest: TCRequestModel {
        /// 批次ID
        public let batchId: String

        /// 溯源码列表
        public let codes: [String]

        /// 企业ID
        public let corpId: UInt64?

        public init(batchId: String, codes: [String], corpId: UInt64? = nil) {
            self.batchId = batchId
            self.codes = codes
            self.corpId = corpId
        }

        enum CodingKeys: String, CodingKey {
            case batchId = "BatchId"
            case codes = "Codes"
            case corpId = "CorpId"
        }
    }

    /// ModifyTraceCodeUnlink返回参数结构体
    public struct ModifyTraceCodeUnlinkResponse: TCResponseModel {
        /// 成功解绑溯源码的数量
        public let unlinkCnt: UInt64

        /// 当前批次的码数量
        public let codeCnt: UInt64

        /// 批次ID
        public let batchId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case unlinkCnt = "UnlinkCnt"
            case codeCnt = "CodeCnt"
            case batchId = "BatchId"
            case requestId = "RequestId"
        }
    }

    /// 解绑溯源码和批次的关系
    ///
    /// 解绑溯源码和批次的关系，让溯源码重置为未关联的状态，以便关联其他批次
    /// 注意：溯源码必须属于指定的批次才会解绑
    @inlinable
    public func modifyTraceCodeUnlink(_ input: ModifyTraceCodeUnlinkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyTraceCodeUnlinkResponse> {
        self.client.execute(action: "ModifyTraceCodeUnlink", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 解绑溯源码和批次的关系
    ///
    /// 解绑溯源码和批次的关系，让溯源码重置为未关联的状态，以便关联其他批次
    /// 注意：溯源码必须属于指定的批次才会解绑
    @inlinable
    public func modifyTraceCodeUnlink(_ input: ModifyTraceCodeUnlinkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTraceCodeUnlinkResponse {
        try await self.client.execute(action: "ModifyTraceCodeUnlink", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 解绑溯源码和批次的关系
    ///
    /// 解绑溯源码和批次的关系，让溯源码重置为未关联的状态，以便关联其他批次
    /// 注意：溯源码必须属于指定的批次才会解绑
    @inlinable
    public func modifyTraceCodeUnlink(batchId: String, codes: [String], corpId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyTraceCodeUnlinkResponse> {
        let input = ModifyTraceCodeUnlinkRequest(batchId: batchId, codes: codes, corpId: corpId)
        return self.client.execute(action: "ModifyTraceCodeUnlink", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 解绑溯源码和批次的关系
    ///
    /// 解绑溯源码和批次的关系，让溯源码重置为未关联的状态，以便关联其他批次
    /// 注意：溯源码必须属于指定的批次才会解绑
    @inlinable
    public func modifyTraceCodeUnlink(batchId: String, codes: [String], corpId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTraceCodeUnlinkResponse {
        let input = ModifyTraceCodeUnlinkRequest(batchId: batchId, codes: codes, corpId: corpId)
        return try await self.client.execute(action: "ModifyTraceCodeUnlink", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
