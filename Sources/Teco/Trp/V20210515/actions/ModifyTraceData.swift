//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Trp {
    /// 修改溯源信息
    @inlinable
    public func modifyTraceData(_ input: ModifyTraceDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyTraceDataResponse > {
        self.client.execute(action: "ModifyTraceData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改溯源信息
    @inlinable
    public func modifyTraceData(_ input: ModifyTraceDataRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTraceDataResponse {
        try await self.client.execute(action: "ModifyTraceData", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyTraceData请求参数结构体
    public struct ModifyTraceDataRequest: TCRequestModel {
        /// 溯源ID
        public let traceId: String?
        
        /// 批次ID
        public let batchId: String?
        
        /// 生产溯源任务ID
        public let taskId: String?
        
        /// 溯源信息
        public let traceItems: [TraceItem]?
        
        /// 溯源阶段名称
        public let phaseName: String?
        
        /// [无效] 类型
        public let type: UInt64?
        
        /// [无效] 溯源码
        public let code: String?
        
        /// [无效] 排序
        public let rank: UInt64?
        
        /// [无效] 溯源阶段 0:商品 1:通用 2:生产溯源 3:销售溯源
        public let phase: UInt64?
        
        /// [无效] 溯源时间
        public let traceTime: String?
        
        /// [无效] 创建时间
        public let createTime: String?
        
        /// [无效] 上链状态
        public let chainStatus: UInt64?
        
        /// [无效] 上链时间
        public let chainTime: String?
        
        /// [无效] 上链数据
        public let chainData: ChainData
        
        /// 企业ID
        public let corpId: UInt64?
        
        /// 溯源状态 0: 无效, 1: 有效
        public let status: UInt64?
        
        /// 环节数据
        public let phaseData: PhaseData
        
        public init (traceId: String?, batchId: String?, taskId: String?, traceItems: [TraceItem]?, phaseName: String?, type: UInt64?, code: String?, rank: UInt64?, phase: UInt64?, traceTime: String?, createTime: String?, chainStatus: UInt64?, chainTime: String?, chainData: ChainData, corpId: UInt64?, status: UInt64?, phaseData: PhaseData) {
            self.traceId = traceId
            self.batchId = batchId
            self.taskId = taskId
            self.traceItems = traceItems
            self.phaseName = phaseName
            self.type = type
            self.code = code
            self.rank = rank
            self.phase = phase
            self.traceTime = traceTime
            self.createTime = createTime
            self.chainStatus = chainStatus
            self.chainTime = chainTime
            self.chainData = chainData
            self.corpId = corpId
            self.status = status
            self.phaseData = phaseData
        }
        
        enum CodingKeys: String, CodingKey {
            case traceId = "TraceId"
            case batchId = "BatchId"
            case taskId = "TaskId"
            case traceItems = "TraceItems"
            case phaseName = "PhaseName"
            case type = "Type"
            case code = "Code"
            case rank = "Rank"
            case phase = "Phase"
            case traceTime = "TraceTime"
            case createTime = "CreateTime"
            case chainStatus = "ChainStatus"
            case chainTime = "ChainTime"
            case chainData = "ChainData"
            case corpId = "CorpId"
            case status = "Status"
            case phaseData = "PhaseData"
        }
    }
    
    /// ModifyTraceData返回参数结构体
    public struct ModifyTraceDataResponse: TCResponseModel {
        /// 溯源ID
        public let traceId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case traceId = "TraceId"
            case requestId = "RequestId"
        }
    }
}
