//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Oceanus {
    /// DescribeJobSubmissionLog请求参数结构体
    public struct DescribeJobSubmissionLogRequest: TCRequest {
        /// 作业ID，例如：cql-6v1jkxrn
        public let jobId: String

        /// 起始时间，unix时间戳，毫秒级，例如：1611754219108
        public let startTime: Int64

        /// 结束时间，unix时间戳，毫秒级，例如：1611754219108
        public let endTime: Int64

        /// 作业运行的实例ID, 例如：1,2,3。默认为0，表示未选中任何实例，搜索该时间段内最近的一个实例的日志
        public let runningOrderId: Int64?

        /// 日志搜索的关键词，默认为空
        public let keyword: String?

        /// 日志搜索的游标，可透传上次返回的值，默认为空
        public let cursor: String?

        /// 时间戳排序规则，asc - 升序，desc - 降序。默认为升序
        public let orderType: String?

        /// 搜索的日志条数上限值，最大为100
        public let limit: Int64?

        public init(jobId: String, startTime: Int64, endTime: Int64, runningOrderId: Int64? = nil, keyword: String? = nil, cursor: String? = nil, orderType: String? = nil, limit: Int64? = nil) {
            self.jobId = jobId
            self.startTime = startTime
            self.endTime = endTime
            self.runningOrderId = runningOrderId
            self.keyword = keyword
            self.cursor = cursor
            self.orderType = orderType
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case runningOrderId = "RunningOrderId"
            case keyword = "Keyword"
            case cursor = "Cursor"
            case orderType = "OrderType"
            case limit = "Limit"
        }
    }

    /// DescribeJobSubmissionLog返回参数结构体
    public struct DescribeJobSubmissionLogResponse: TCResponse {
        /// 日志搜索的游标，需要搜索更多时透传这个值
        public let cursor: String

        /// 是否返回了所有的日志记录
        public let listOver: Bool

        /// 作业启动的requestId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobRequestId: String?

        /// 该时间段内符合关键字的所有的作业实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobInstanceList: [JobInstanceForSubmissionLog]?

        /// 废弃，请使用LogContentList
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logList: [String]?

        /// 日志列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logContentList: [LogContent]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case cursor = "Cursor"
            case listOver = "ListOver"
            case jobRequestId = "JobRequestId"
            case jobInstanceList = "JobInstanceList"
            case logList = "LogList"
            case logContentList = "LogContentList"
            case requestId = "RequestId"
        }
    }

    /// 查询作业实例启动日志
    @inlinable
    public func describeJobSubmissionLog(_ input: DescribeJobSubmissionLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeJobSubmissionLogResponse> {
        self.client.execute(action: "DescribeJobSubmissionLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询作业实例启动日志
    @inlinable
    public func describeJobSubmissionLog(_ input: DescribeJobSubmissionLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeJobSubmissionLogResponse {
        try await self.client.execute(action: "DescribeJobSubmissionLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询作业实例启动日志
    @inlinable
    public func describeJobSubmissionLog(jobId: String, startTime: Int64, endTime: Int64, runningOrderId: Int64? = nil, keyword: String? = nil, cursor: String? = nil, orderType: String? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeJobSubmissionLogResponse> {
        self.describeJobSubmissionLog(.init(jobId: jobId, startTime: startTime, endTime: endTime, runningOrderId: runningOrderId, keyword: keyword, cursor: cursor, orderType: orderType, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询作业实例启动日志
    @inlinable
    public func describeJobSubmissionLog(jobId: String, startTime: Int64, endTime: Int64, runningOrderId: Int64? = nil, keyword: String? = nil, cursor: String? = nil, orderType: String? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeJobSubmissionLogResponse {
        try await self.describeJobSubmissionLog(.init(jobId: jobId, startTime: startTime, endTime: endTime, runningOrderId: runningOrderId, keyword: keyword, cursor: cursor, orderType: orderType, limit: limit), region: region, logger: logger, on: eventLoop)
    }
}
