//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Oceanus {
    /// DeleteTableConfig请求参数结构体
    public struct DeleteTableConfigRequest: TCRequestModel {
        /// 作业ID
        public let jobId: String

        /// 调试作业ID
        public let debugId: Int64

        /// 表名
        public let tableName: String

        /// 工作空间 SerialId
        public let workSpaceId: String?

        public init(jobId: String, debugId: Int64, tableName: String, workSpaceId: String? = nil) {
            self.jobId = jobId
            self.debugId = debugId
            self.tableName = tableName
            self.workSpaceId = workSpaceId
        }

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case debugId = "DebugId"
            case tableName = "TableName"
            case workSpaceId = "WorkSpaceId"
        }
    }

    /// DeleteTableConfig返回参数结构体
    public struct DeleteTableConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除作业表配置
    @inlinable @discardableResult
    public func deleteTableConfig(_ input: DeleteTableConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTableConfigResponse> {
        self.client.execute(action: "DeleteTableConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除作业表配置
    @inlinable @discardableResult
    public func deleteTableConfig(_ input: DeleteTableConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteTableConfigResponse {
        try await self.client.execute(action: "DeleteTableConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除作业表配置
    @inlinable @discardableResult
    public func deleteTableConfig(jobId: String, debugId: Int64, tableName: String, workSpaceId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTableConfigResponse> {
        self.deleteTableConfig(.init(jobId: jobId, debugId: debugId, tableName: tableName, workSpaceId: workSpaceId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除作业表配置
    @inlinable @discardableResult
    public func deleteTableConfig(jobId: String, debugId: Int64, tableName: String, workSpaceId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteTableConfigResponse {
        try await self.deleteTableConfig(.init(jobId: jobId, debugId: debugId, tableName: tableName, workSpaceId: workSpaceId), region: region, logger: logger, on: eventLoop)
    }
}
