//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Oceanus {
    /// 删除资源版本
    ///
    /// 删除资源版本
    @inlinable
    public func deleteResourceConfigs(_ input: DeleteResourceConfigsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteResourceConfigsResponse > {
        self.client.execute(action: "DeleteResourceConfigs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除资源版本
    ///
    /// 删除资源版本
    @inlinable
    public func deleteResourceConfigs(_ input: DeleteResourceConfigsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteResourceConfigsResponse {
        try await self.client.execute(action: "DeleteResourceConfigs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DeleteResourceConfigs请求参数结构体
    public struct DeleteResourceConfigsRequest: TCRequestModel {
        /// 资源ID
        public let resourceId: String
        
        /// 资源版本数组
        public let resourceConfigVersions: [Int64]
        
        /// 工作空间 SerialId
        public let workSpaceId: String?
        
        public init (resourceId: String, resourceConfigVersions: [Int64], workSpaceId: String?) {
            self.resourceId = resourceId
            self.resourceConfigVersions = resourceConfigVersions
            self.workSpaceId = workSpaceId
        }
        
        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceConfigVersions = "ResourceConfigVersions"
            case workSpaceId = "WorkSpaceId"
        }
    }
    
    /// DeleteResourceConfigs返回参数结构体
    public struct DeleteResourceConfigsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}