//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCOceanusError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case camCgwError = "InternalError.CamCgwError"
            case cls = "InternalError.CLS"
            case cosClient = "InternalError.COSClient"
            case db = "InternalError.DB"
            case failedToBescribeResources = "InternalError.FailedToBescribeResources"
            case failedToUpdateJob = "InternalError.FailedToUpdateJob"
            case jobInstanceNotFound = "InternalError.JobInstanceNotFound"
            case logicError = "InternalError.LogicError"
            case resourceConfigCanNotDelete = "InternalError.ResourceConfigCanNotDelete"
            case resourceNotExist = "InternalError.ResourceNotExist"
            case sqlCodeNotFound = "InternalError.SqlCodeNotFound"
            case stsNewClient = "InternalError.StsNewClient"
            case systemError = "InternalError.SystemError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// CAM 网关错误。
        public static var camCgwError: InternalError {
            InternalError(.camCgwError)
        }
        
        /// CLS接口错误。
        public static var cls: InternalError {
            InternalError(.cls)
        }
        
        /// COS 服务访问错误。
        public static var cosClient: InternalError {
            InternalError(.cosClient)
        }
        
        /// 数据库异常。
        public static var db: InternalError {
            InternalError(.db)
        }
        
        /// 失败的目标资源。
        public static var failedToBescribeResources: InternalError {
            InternalError(.failedToBescribeResources)
        }
        
        /// 无法更新作业错误。
        public static var failedToUpdateJob: InternalError {
            InternalError(.failedToUpdateJob)
        }
        
        /// 作业实例没找到。
        public static var jobInstanceNotFound: InternalError {
            InternalError(.jobInstanceNotFound)
        }
        
        /// 内部错误。
        public static var logicError: InternalError {
            InternalError(.logicError)
        }
        
        /// 资源只有一个版本，无法删除。
        public static var resourceConfigCanNotDelete: InternalError {
            InternalError(.resourceConfigCanNotDelete)
        }
        
        /// 资源不存在。
        public static var resourceNotExist: InternalError {
            InternalError(.resourceNotExist)
        }
        
        /// 未找到sqlcode错误。
        public static var sqlCodeNotFound: InternalError {
            InternalError(.sqlCodeNotFound)
        }
        
        /// 内部错误。
        public static var stsNewClient: InternalError {
            InternalError(.stsNewClient)
        }
        
        /// 系统错误。
        public static var systemError: InternalError {
            InternalError(.systemError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCOceanusError.InternalError: Equatable {
    public static func == (lhs: TCOceanusError.InternalError, rhs: TCOceanusError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCOceanusError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCOceanusError.InternalError {
    /// - Returns: ``TCOceanusError`` that holds the same error and context.
    public func toOceanusError() -> TCOceanusError {
        guard let code = TCOceanusError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCOceanusError(code, context: self.context)
    }
}

extension TCOceanusError.InternalError {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
