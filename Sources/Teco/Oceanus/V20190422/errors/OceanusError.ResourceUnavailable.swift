//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCOceanusError {
    public struct ResourceUnavailable: TCErrorType {
        enum Code: String {
            case beUseBySomeJobConfig = "ResourceUnavailable.BeUseBySomeJobConfig"
            case checkResourceLocExists = "ResourceUnavailable.CheckResourceLocExists"
            case cluster = "ResourceUnavailable.Cluster"
            case clusterGroupStatus = "ResourceUnavailable.ClusterGroupStatus"
            case failedToBescribeResources = "ResourceUnavailable.FailedToBescribeResources"
            case getJobPublishedJobConfig = "ResourceUnavailable.GetJobPublishedJobConfig"
            case jobResourceConfigNotReady = "ResourceUnavailable.JobResourceConfigNotReady"
            case noRunningJobInstancesFoundForJobId = "ResourceUnavailable.NoRunningJobInstancesFoundForJobId"
            case notAllowedToBeDeleted = "ResourceUnavailable.NotAllowedToBeDeleted"
            case notAllowedToBeStopOrPause = "ResourceUnavailable.NotAllowedToBeStopOrPause"
            case reqCuMem = "ResourceUnavailable.ReqCuMem"
            case resourceLocNotExists = "ResourceUnavailable.ResourceLocNotExists"
            case other = "ResourceUnavailable"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 被某个作业配置使用。
        public static var beUseBySomeJobConfig: ResourceUnavailable {
            ResourceUnavailable(.beUseBySomeJobConfig)
        }
        
        /// 检查资源位置是否存在错误。
        public static var checkResourceLocExists: ResourceUnavailable {
            ResourceUnavailable(.checkResourceLocExists)
        }
        
        /// 集群处于非运行状态。
        public static var cluster: ResourceUnavailable {
            ResourceUnavailable(.cluster)
        }
        
        /// 群集组状态错误。
        public static var clusterGroupStatus: ResourceUnavailable {
            ResourceUnavailable(.clusterGroupStatus)
        }
        
        /// 失败的目标资源。
        public static var failedToBescribeResources: ResourceUnavailable {
            ResourceUnavailable(.failedToBescribeResources)
        }
        
        /// 获取发布的作业作业配置错误。
        public static var getJobPublishedJobConfig: ResourceUnavailable {
            ResourceUnavailable(.getJobPublishedJobConfig)
        }
        
        /// 作业资源配置未就绪。
        public static var jobResourceConfigNotReady: ResourceUnavailable {
            ResourceUnavailable(.jobResourceConfigNotReady)
        }
        
        /// 找不到JobId的正在运行的作业实例。
        public static var noRunningJobInstancesFoundForJobId: ResourceUnavailable {
            ResourceUnavailable(.noRunningJobInstancesFoundForJobId)
        }
        
        /// 不允许删除错误。
        public static var notAllowedToBeDeleted: ResourceUnavailable {
            ResourceUnavailable(.notAllowedToBeDeleted)
        }
        
        /// 不允许停止或暂停错误。
        public static var notAllowedToBeStopOrPause: ResourceUnavailable {
            ResourceUnavailable(.notAllowedToBeStopOrPause)
        }
        
        /// 共享群集只允许CuMem=4。
        public static var reqCuMem: ResourceUnavailable {
            ResourceUnavailable(.reqCuMem)
        }
        
        /// cos上的程序包不存在。
        public static var resourceLocNotExists: ResourceUnavailable {
            ResourceUnavailable(.resourceLocNotExists)
        }
        
        /// 资源不可用。
        public static var other: ResourceUnavailable {
            ResourceUnavailable(.other)
        }
    }
}

extension TCOceanusError.ResourceUnavailable: Equatable {
    public static func == (lhs: TCOceanusError.ResourceUnavailable, rhs: TCOceanusError.ResourceUnavailable) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCOceanusError.ResourceUnavailable: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCOceanusError.ResourceUnavailable {
    /// - Returns: ``TCOceanusError`` that holds the same error and context.
    public func toOceanusError() -> TCOceanusError {
        guard let code = TCOceanusError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCOceanusError(code, context: self.context)
    }
}

extension TCOceanusError.ResourceUnavailable {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
