//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCOceanusError {
    public struct UnsupportedOperation: TCOceanusErrorType {
        enum Code: String {
            case invalidCheckpointIntervalError = "UnsupportedOperation.InvalidCheckpointIntervalError"
            case noPermissionAccess = "UnsupportedOperation.NoPermissionAccess"
            case unsupportedStartMode = "UnsupportedOperation.UnsupportedStartMode"
            case other = "UnsupportedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// Checkpoint 时间间隔，错误。
        public static var invalidCheckpointIntervalError: UnsupportedOperation {
            UnsupportedOperation(.invalidCheckpointIntervalError)
        }

        /// 权限拦截,没有进入权限。
        ///
        /// 先赋权，再作业
        public static var noPermissionAccess: UnsupportedOperation {
            UnsupportedOperation(.noPermissionAccess)
        }

        /// 不支持的启动模式。
        public static var unsupportedStartMode: UnsupportedOperation {
            UnsupportedOperation(.unsupportedStartMode)
        }

        /// 操作不支持。
        public static var other: UnsupportedOperation {
            UnsupportedOperation(.other)
        }

        public func asOceanusError() -> TCOceanusError {
            let code: TCOceanusError.Code
            switch self.error {
            case .invalidCheckpointIntervalError:
                code = .unsupportedOperation_InvalidCheckpointIntervalError
            case .noPermissionAccess:
                code = .unsupportedOperation_NoPermissionAccess
            case .unsupportedStartMode:
                code = .unsupportedOperation_UnsupportedStartMode
            case .other:
                code = .unsupportedOperation
            }
            return TCOceanusError(code, context: self.context)
        }
    }
}
