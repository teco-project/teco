//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Gse {
    /// DescribeFleetEvents请求参数结构体
    public struct DescribeFleetEventsRequest: TCRequestModel {
        /// 服务器舰队 Id
        public let fleetId: String
        
        /// 分页时返回服务器舰队事件的数量，默认为20，最大值为100
        public let limit: UInt64?
        
        /// 分页时的数据偏移量，默认为0
        public let offset: UInt64?
        
        /// 事件代码
        public let eventCode: String?
        
        /// 发生事件的开始时间
        public let startTime: Date?
        
        /// 发生事件的结束时间
        public let endTime: Date?
        
        public init (fleetId: String, limit: UInt64? = nil, offset: UInt64? = nil, eventCode: String? = nil, startTime: Date? = nil, endTime: Date? = nil) {
            self.fleetId = fleetId
            self.limit = limit
            self.offset = offset
            self.eventCode = eventCode
            self.startTime = startTime
            self.endTime = endTime
        }
        
        enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case limit = "Limit"
            case offset = "Offset"
            case eventCode = "EventCode"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }
    
    /// DescribeFleetEvents返回参数结构体
    public struct DescribeFleetEventsResponse: TCResponseModel {
        /// 返回的事件列表
        public let events: [Event]
        
        /// 返回的事件总数
        public let totalCount: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case events = "Events"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
    
    /// 查询服务器舰队的事件列表
    ///
    /// 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持
    /// 本接口（DescribeFleetEvents）用于查询服务器舰队相关的事件列表。
    @inlinable
    public func describeFleetEvents(_ input: DescribeFleetEventsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeFleetEventsResponse > {
        self.client.execute(action: "DescribeFleetEvents", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询服务器舰队的事件列表
    ///
    /// 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持
    /// 本接口（DescribeFleetEvents）用于查询服务器舰队相关的事件列表。
    @inlinable
    public func describeFleetEvents(_ input: DescribeFleetEventsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFleetEventsResponse {
        try await self.client.execute(action: "DescribeFleetEvents", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询服务器舰队的事件列表
    ///
    /// 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持
    /// 本接口（DescribeFleetEvents）用于查询服务器舰队相关的事件列表。
    @inlinable
    public func describeFleetEvents(fleetId: String, limit: UInt64? = nil, offset: UInt64? = nil, eventCode: String? = nil, startTime: Date? = nil, endTime: Date? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeFleetEventsResponse > {
        self.describeFleetEvents(DescribeFleetEventsRequest(fleetId: fleetId, limit: limit, offset: offset, eventCode: eventCode, startTime: startTime, endTime: endTime), logger: logger, on: eventLoop)
    }
    
    /// 查询服务器舰队的事件列表
    ///
    /// 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持
    /// 本接口（DescribeFleetEvents）用于查询服务器舰队相关的事件列表。
    @inlinable
    public func describeFleetEvents(fleetId: String, limit: UInt64? = nil, offset: UInt64? = nil, eventCode: String? = nil, startTime: Date? = nil, endTime: Date? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFleetEventsResponse {
        try await self.describeFleetEvents(DescribeFleetEventsRequest(fleetId: fleetId, limit: limit, offset: offset, eventCode: eventCode, startTime: startTime, endTime: endTime), logger: logger, on: eventLoop)
    }
}
