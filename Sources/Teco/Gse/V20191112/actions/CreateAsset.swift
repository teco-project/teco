//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Gse {
    /// CreateAsset请求参数结构体
    public struct CreateAssetRequest: TCRequestModel {
        /// 生成包的ZIP包名，例如：server.zip
        public let bucketKey: String
        
        /// 生成包名字，最小长度为1，最大长度为64
        public let assetName: String
        
        /// 生成包版本，最小长度为1，最大长度为64
        public let assetVersion: String
        
        /// 生成包所在地域，详见产品支持的 [地域列表](https://cloud.tencent.com/document/api/1165/42053#.E5.9C.B0.E5.9F.9F.E5.88.97.E8.A1.A8)
        public let assetRegion: String
        
        /// 生成包可运行的操作系统，若传入参数为CentOS7.16则不需要传入ImageId字段，否则，需要传入Imageid字段（该方式是为了兼容之前的版本，后续建议使用ImageId来替代该字段）。这里可通过[DescribeAssetSystems](https://cloud.tencent.com/document/product/1165/49191)接口获取asset支持的操作系统进行传入（使用AssetSupportSys的OsVersion字段）
        public let operateSystem: String
        
        /// 生成包支持的操作系统镜像id，若传入OperateSystem字段的值是CentOS7.16，则不需要传入该值；如果不是，则需要通过[DescribeAssetSystems](https://cloud.tencent.com/document/product/1165/49191)接口获取asset支持的操作系统ImageId进行传入
        public let imageId: String?
        
        /// 标签列表，最大长度50组
        public let tags: [Tag]?
        
        public init (bucketKey: String, assetName: String, assetVersion: String, assetRegion: String, operateSystem: String, imageId: String? = nil, tags: [Tag]? = nil) {
            self.bucketKey = bucketKey
            self.assetName = assetName
            self.assetVersion = assetVersion
            self.assetRegion = assetRegion
            self.operateSystem = operateSystem
            self.imageId = imageId
            self.tags = tags
        }
        
        enum CodingKeys: String, CodingKey {
            case bucketKey = "BucketKey"
            case assetName = "AssetName"
            case assetVersion = "AssetVersion"
            case assetRegion = "AssetRegion"
            case operateSystem = "OperateSystem"
            case imageId = "ImageId"
            case tags = "Tags"
        }
    }
    
    /// CreateAsset返回参数结构体
    public struct CreateAssetResponse: TCResponseModel {
        /// 生成包ID
        public let assetId: String
        
        /// 生成包的全局唯一资源标识符
        public let assetArn: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case assetId = "AssetId"
            case assetArn = "AssetArn"
            case requestId = "RequestId"
        }
    }
    
    /// 创建生成包
    ///
    /// 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持
    /// 本接口（CreateAsset）用于创建生成包。
    /// 通过获取上传cos的临时密钥，将文件上传至cos，然后将生成包的zip名称下发给本接口完成资源创建。  
    /// 上传文件至 cos支持俩种方式：
    /// - 获取预签名方式，COS 简单上传
    ///     1. [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727) 获取预签名信息
    ///     2. 使用 COS API 进行上传([参考文档](https://cloud.tencent.com/document/product/436/7749))
    /// -  临时密钥方式，COS 简单上传或者分块上传方式
    ///     1. [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727)（获取上传 bucket  第一次调用需要，后续可以不用调用）
    ///     2. [GetUploadFederationToken](https://cloud.tencent.com/document/product/1165/48742) 获取临时密钥
    ///     3. 使用 COS API 进行上传([参考文档](https://cloud.tencent.com/document/product/436/7742))
    /// 具体使用场景可以参考 [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727) ,  [GetUploadFederationToken](https://cloud.tencent.com/document/product/1165/48742)和下面 CreateAsset 示例。  
    @inlinable
    public func createAsset(_ input: CreateAssetRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateAssetResponse > {
        self.client.execute(action: "CreateAsset", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建生成包
    ///
    /// 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持
    /// 本接口（CreateAsset）用于创建生成包。
    /// 通过获取上传cos的临时密钥，将文件上传至cos，然后将生成包的zip名称下发给本接口完成资源创建。  
    /// 上传文件至 cos支持俩种方式：
    /// - 获取预签名方式，COS 简单上传
    ///     1. [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727) 获取预签名信息
    ///     2. 使用 COS API 进行上传([参考文档](https://cloud.tencent.com/document/product/436/7749))
    /// -  临时密钥方式，COS 简单上传或者分块上传方式
    ///     1. [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727)（获取上传 bucket  第一次调用需要，后续可以不用调用）
    ///     2. [GetUploadFederationToken](https://cloud.tencent.com/document/product/1165/48742) 获取临时密钥
    ///     3. 使用 COS API 进行上传([参考文档](https://cloud.tencent.com/document/product/436/7742))
    /// 具体使用场景可以参考 [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727) ,  [GetUploadFederationToken](https://cloud.tencent.com/document/product/1165/48742)和下面 CreateAsset 示例。  
    @inlinable
    public func createAsset(_ input: CreateAssetRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetResponse {
        try await self.client.execute(action: "CreateAsset", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
