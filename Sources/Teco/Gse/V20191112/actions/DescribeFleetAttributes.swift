//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Gse {
    /// DescribeFleetAttributes请求参数结构体
    public struct DescribeFleetAttributesRequest: TCRequestModel {
        /// 服务器舰队 Ids
        public let fleetIds: [String]?

        /// 结果返回最大数量，默认值20，最大值100
        public let limit: UInt64?

        /// 返回结果偏移，最小值0
        public let offset: UInt64?

        public init(fleetIds: [String]? = nil, limit: UInt64? = nil, offset: UInt64? = nil) {
            self.fleetIds = fleetIds
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case limit = "Limit"
            case offset = "Offset"
        }
    }

    /// DescribeFleetAttributes返回参数结构体
    public struct DescribeFleetAttributesResponse: TCResponseModel {
        /// 服务器舰队属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fleetAttributes: [FleetAttributes]?

        /// 服务器舰队总数，最小值0
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case fleetAttributes = "FleetAttributes"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 获取服务器舰队属性
    ///
    /// 本接口（DescribeFleetAttributes）用于查询服务器舰队属性。
    @available(*, deprecated, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeFleetAttributes(_ input: DescribeFleetAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFleetAttributesResponse> {
        self.client.execute(action: "DescribeFleetAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取服务器舰队属性
    ///
    /// 本接口（DescribeFleetAttributes）用于查询服务器舰队属性。
    @available(*, deprecated, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeFleetAttributes(_ input: DescribeFleetAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFleetAttributesResponse {
        try await self.client.execute(action: "DescribeFleetAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取服务器舰队属性
    ///
    /// 本接口（DescribeFleetAttributes）用于查询服务器舰队属性。
    @available(*, deprecated, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeFleetAttributes(fleetIds: [String]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFleetAttributesResponse> {
        let input = DescribeFleetAttributesRequest(fleetIds: fleetIds, limit: limit, offset: offset)
        return self.client.execute(action: "DescribeFleetAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取服务器舰队属性
    ///
    /// 本接口（DescribeFleetAttributes）用于查询服务器舰队属性。
    @available(*, deprecated, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeFleetAttributes(fleetIds: [String]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFleetAttributesResponse {
        let input = DescribeFleetAttributesRequest(fleetIds: fleetIds, limit: limit, offset: offset)
        return try await self.client.execute(action: "DescribeFleetAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
