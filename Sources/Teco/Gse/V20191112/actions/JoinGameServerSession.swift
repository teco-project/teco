//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Gse {
    /// JoinGameServerSession请求参数结构体
    public struct JoinGameServerSessionRequest: TCRequestModel {
        /// 游戏服务器会话ID，最小长度1个ASCII字符，最大长度不超过256个ASCII字符
        public let gameServerSessionId: String

        /// 玩家ID，最大长度1024个ASCII字符
        public let playerId: String

        /// 玩家自定义数据，最大长度2048个ASCII字符
        public let playerData: String?

        public init(gameServerSessionId: String, playerId: String, playerData: String? = nil) {
            self.gameServerSessionId = gameServerSessionId
            self.playerId = playerId
            self.playerData = playerData
        }

        enum CodingKeys: String, CodingKey {
            case gameServerSessionId = "GameServerSessionId"
            case playerId = "PlayerId"
            case playerData = "PlayerData"
        }
    }

    /// JoinGameServerSession返回参数结构体
    public struct JoinGameServerSessionResponse: TCResponseModel {
        /// 玩家会话
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let playerSession: PlayerSession?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case playerSession = "PlayerSession"
            case requestId = "RequestId"
        }
    }

    /// 加入游戏服务器会话
    ///
    /// 本接口（JoinGameServerSession）用于加入游戏服务器会话。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func joinGameServerSession(_ input: JoinGameServerSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<JoinGameServerSessionResponse> {
        fatalError("JoinGameServerSession is no longer available.")
    }

    /// 加入游戏服务器会话
    ///
    /// 本接口（JoinGameServerSession）用于加入游戏服务器会话。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func joinGameServerSession(_ input: JoinGameServerSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> JoinGameServerSessionResponse {
        fatalError("JoinGameServerSession is no longer available.")
    }

    /// 加入游戏服务器会话
    ///
    /// 本接口（JoinGameServerSession）用于加入游戏服务器会话。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func joinGameServerSession(gameServerSessionId: String, playerId: String, playerData: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<JoinGameServerSessionResponse> {
        fatalError("JoinGameServerSession is no longer available.")
    }

    /// 加入游戏服务器会话
    ///
    /// 本接口（JoinGameServerSession）用于加入游戏服务器会话。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func joinGameServerSession(gameServerSessionId: String, playerId: String, playerData: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> JoinGameServerSessionResponse {
        fatalError("JoinGameServerSession is no longer available.")
    }
}
