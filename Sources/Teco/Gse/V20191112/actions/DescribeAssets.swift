//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Gse {
    /// DescribeAssets请求参数结构体
    public struct DescribeAssetsRequest: TCPaginatedRequest {
        /// 生成包支持的可部署 [地域列表](https://cloud.tencent.com/document/api/1165/42053#.E5.9C.B0.E5.9F.9F.E5.88.97.E8.A1.A8)
        public let assetRegion: String

        /// 偏移，代表页数，与asset实际数量相关
        public let offset: Int64

        /// 前端界面每页显示的最大条数，不超过100
        public let limit: Int64

        /// 搜索条件，支持包ID或包名字过滤，该字段会逐步废弃，建议使用 Filters 字段
        public let filter: String?

        /// 资源过滤字段，可以按照资源名称、资源ID和标签进行过滤- 资源名称过滤    - Key: 固定字符串 "resource:name"    - Values: 资源名称数组（生成包当前仅支持单个名称的过滤）- 资源ID过滤    - Key: 固定字符串 "resource:resourceId"    - Values: 生成包ID数组（生成包当前仅支持单个生成包ID的过滤）- 标签过滤    - 通过标签键过滤        - Key: 固定字符串 "tag:key"        - Values 不传    - 通过标签键值过滤        - Key: 固定字符串 "tag:key-value"        - Values: 标签键值对数组，例如 ["key1:value1", "key1:value2", "key2:value2"]
        public let filters: [Filter]?

        public init(assetRegion: String, offset: Int64, limit: Int64, filter: String? = nil, filters: [Filter]? = nil) {
            self.assetRegion = assetRegion
            self.offset = offset
            self.limit = limit
            self.filter = filter
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case assetRegion = "AssetRegion"
            case offset = "Offset"
            case limit = "Limit"
            case filter = "Filter"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeAssetsResponse) -> DescribeAssetsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeAssetsRequest(assetRegion: self.assetRegion, offset: self.offset + .init(response.getItems().count), limit: self.limit, filter: self.filter, filters: self.filters)
        }
    }

    /// DescribeAssets返回参数结构体
    public struct DescribeAssetsResponse: TCPaginatedResponse {
        /// 生成包总数
        public let totalCount: Int64

        /// 生成包列表
        public let assets: [Asset]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case assets = "Assets"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Asset] {
            self.assets
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 拉取生成包列表
    ///
    /// 本接口（DescribeAssets）用于获取生成包列表。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeAssets(_ input: DescribeAssetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetsResponse> {
        self.client.execute(action: "DescribeAssets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 拉取生成包列表
    ///
    /// 本接口（DescribeAssets）用于获取生成包列表。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeAssets(_ input: DescribeAssetsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetsResponse {
        try await self.client.execute(action: "DescribeAssets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 拉取生成包列表
    ///
    /// 本接口（DescribeAssets）用于获取生成包列表。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeAssets(assetRegion: String, offset: Int64, limit: Int64, filter: String? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetsResponse> {
        let input = DescribeAssetsRequest(assetRegion: assetRegion, offset: offset, limit: limit, filter: filter, filters: filters)
        return self.client.execute(action: "DescribeAssets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 拉取生成包列表
    ///
    /// 本接口（DescribeAssets）用于获取生成包列表。
    @available(*, unavailable, message: "此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持")
    @inlinable
    public func describeAssets(assetRegion: String, offset: Int64, limit: Int64, filter: String? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetsResponse {
        let input = DescribeAssetsRequest(assetRegion: assetRegion, offset: offset, limit: limit, filter: filter, filters: filters)
        return try await self.client.execute(action: "DescribeAssets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
