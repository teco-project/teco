//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tci {
    /// DescribeImageTaskStatistic请求参数结构体
    public struct DescribeImageTaskStatisticRequest: TCRequestModel {
        /// 图像任务标识符
        public let jobId: Int64

        public init(jobId: Int64) {
            self.jobId = jobId
        }

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    /// DescribeImageTaskStatistic返回参数结构体
    public struct DescribeImageTaskStatisticResponse: TCResponseModel {
        /// 任务统计信息
        public let statistic: ImageTaskStatistic

        /// 图像任务唯一标识符
        public let jobId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case statistic = "Statistic"
            case jobId = "JobId"
            case requestId = "RequestId"
        }
    }

    /// 获取图像任务统计信息
    @inlinable
    public func describeImageTaskStatistic(_ input: DescribeImageTaskStatisticRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageTaskStatisticResponse> {
        self.client.execute(action: "DescribeImageTaskStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取图像任务统计信息
    @inlinable
    public func describeImageTaskStatistic(_ input: DescribeImageTaskStatisticRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageTaskStatisticResponse {
        try await self.client.execute(action: "DescribeImageTaskStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取图像任务统计信息
    @inlinable
    public func describeImageTaskStatistic(jobId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageTaskStatisticResponse> {
        let input = DescribeImageTaskStatisticRequest(jobId: jobId)
        return self.client.execute(action: "DescribeImageTaskStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取图像任务统计信息
    @inlinable
    public func describeImageTaskStatistic(jobId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageTaskStatisticResponse {
        let input = DescribeImageTaskStatisticRequest(jobId: jobId)
        return try await self.client.execute(action: "DescribeImageTaskStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
