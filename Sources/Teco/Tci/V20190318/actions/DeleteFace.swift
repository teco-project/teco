//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tci {
    /// 删除人脸
    ///
    /// 删除人脸
    @inlinable
    public func deleteFace(_ input: DeleteFaceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteFaceResponse > {
        self.client.execute(action: "DeleteFace", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 删除人脸
    ///
    /// 删除人脸
    @inlinable
    public func deleteFace(_ input: DeleteFaceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteFaceResponse {
        try await self.client.execute(action: "DeleteFace", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DeleteFace请求参数结构体
    public struct DeleteFaceRequest: TCRequestModel {
        /// 人脸标识符数组
        public let faceIdSet: [String]
        
        /// 人员唯一标识符
        public let personId: String
        
        /// 人员库唯一标识符
        public let libraryId: String?
        
        public init (faceIdSet: [String], personId: String, libraryId: String?) {
            self.faceIdSet = faceIdSet
            self.personId = personId
            self.libraryId = libraryId
        }
        
        enum CodingKeys: String, CodingKey {
            case faceIdSet = "FaceIdSet"
            case personId = "PersonId"
            case libraryId = "LibraryId"
        }
    }
    
    /// DeleteFace返回参数结构体
    public struct DeleteFaceResponse: TCResponseModel {
        /// 人脸操作结果
        public let faceInfoSet: [FaceInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case faceInfoSet = "FaceInfoSet"
            case requestId = "RequestId"
        }
    }
}