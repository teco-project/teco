//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Apcas {
    /// GetTaskDetail请求参数结构体
    public struct GetTaskDetailRequest: TCRequestModel {
        /// 任务ID
        public let id: UInt64

        public init(id: UInt64) {
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// GetTaskDetail返回参数结构体
    public struct GetTaskDetailResponse: TCResponseModel {
        /// 画像洞察任务TAG详细数据列表
        public let taskDetailDataList: [TaskDetailData]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskDetailDataList = "TaskDetailDataList"
            case requestId = "RequestId"
        }
    }

    /// 查询画像洞察任务详情
    @inlinable
    public func getTaskDetail(_ input: GetTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTaskDetailResponse> {
        self.client.execute(action: "GetTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询画像洞察任务详情
    @inlinable
    public func getTaskDetail(_ input: GetTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTaskDetailResponse {
        try await self.client.execute(action: "GetTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询画像洞察任务详情
    @inlinable
    public func getTaskDetail(id: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTaskDetailResponse> {
        self.getTaskDetail(.init(id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 查询画像洞察任务详情
    @inlinable
    public func getTaskDetail(id: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTaskDetailResponse {
        try await self.getTaskDetail(.init(id: id), region: region, logger: logger, on: eventLoop)
    }
}
