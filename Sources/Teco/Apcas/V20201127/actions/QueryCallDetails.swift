//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Apcas {
    /// 查询调用明细
    ///
    /// 查询调用明细
    @inlinable
    public func queryCallDetails(_ input: QueryCallDetailsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < QueryCallDetailsResponse > {
        self.client.execute(action: "QueryCallDetails", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询调用明细
    ///
    /// 查询调用明细
    @inlinable
    public func queryCallDetails(_ input: QueryCallDetailsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryCallDetailsResponse {
        try await self.client.execute(action: "QueryCallDetails", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// QueryCallDetails请求参数结构体
    public struct QueryCallDetailsRequest: TCRequestModel {
        /// 请求类型 1:人群特征洞察统计 2:购车意向预测统计
        public let type: UInt64
        
        /// 开始时间戳（毫秒）
        public let startTime: UInt64
        
        /// 结束时间戳（毫秒）
        public let endTime: UInt64
        
        /// 页数
        public let pageNumber: UInt64
        
        /// 每页个数
        public let pageSize: UInt64
        
        public init (type: UInt64, startTime: UInt64, endTime: UInt64, pageNumber: UInt64, pageSize: UInt64) {
            self.type = type
            self.startTime = startTime
            self.endTime = endTime
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }
        
        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }
    }
    
    /// QueryCallDetails返回参数结构体
    public struct QueryCallDetailsResponse: TCResponseModel {
        /// 调用明细
        public let callDetails: CallDetails
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case callDetails = "CallDetails"
            case requestId = "RequestId"
        }
    }
}