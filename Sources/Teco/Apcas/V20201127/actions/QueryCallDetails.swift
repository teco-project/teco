//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Apcas {
    /// QueryCallDetails请求参数结构体
    public struct QueryCallDetailsRequest: TCPaginatedRequest {
        /// 请求类型 1:人群特征洞察统计 2:购车意向预测统计
        public let type: UInt64

        /// 开始时间戳（毫秒）
        public let startTime: UInt64

        /// 结束时间戳（毫秒）
        public let endTime: UInt64

        /// 页数
        public let pageNumber: UInt64

        /// 每页个数
        public let pageSize: UInt64

        public init(type: UInt64, startTime: UInt64, endTime: UInt64, pageNumber: UInt64, pageSize: UInt64) {
            self.type = type
            self.startTime = startTime
            self.endTime = endTime
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: QueryCallDetailsResponse) -> QueryCallDetailsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return QueryCallDetailsRequest(type: self.type, startTime: self.startTime, endTime: self.endTime, pageNumber: self.pageNumber + 1, pageSize: self.pageSize)
        }
    }

    /// QueryCallDetails返回参数结构体
    public struct QueryCallDetailsResponse: TCPaginatedResponse {
        /// 调用明细
        public let callDetails: CallDetails

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case callDetails = "CallDetails"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [CallDetailItem] {
            self.callDetails.callDetailSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.callDetails.totalCount
        }
    }

    /// 查询调用明细
    @inlinable
    public func queryCallDetails(_ input: QueryCallDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryCallDetailsResponse> {
        self.client.execute(action: "QueryCallDetails", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询调用明细
    @inlinable
    public func queryCallDetails(_ input: QueryCallDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryCallDetailsResponse {
        try await self.client.execute(action: "QueryCallDetails", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询调用明细
    @inlinable
    public func queryCallDetails(type: UInt64, startTime: UInt64, endTime: UInt64, pageNumber: UInt64, pageSize: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryCallDetailsResponse> {
        self.queryCallDetails(.init(type: type, startTime: startTime, endTime: endTime, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 查询调用明细
    @inlinable
    public func queryCallDetails(type: UInt64, startTime: UInt64, endTime: UInt64, pageNumber: UInt64, pageSize: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryCallDetailsResponse {
        try await self.queryCallDetails(.init(type: type, startTime: startTime, endTime: endTime, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 查询调用明细
    @inlinable
    public func queryCallDetailsPaginated(_ input: QueryCallDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [CallDetailItem])> {
        self.client.paginate(input: input, region: region, command: self.queryCallDetails, logger: logger, on: eventLoop)
    }

    /// 查询调用明细
    @inlinable @discardableResult
    public func queryCallDetailsPaginated(_ input: QueryCallDetailsRequest, region: TCRegion? = nil, onResponse: @escaping (QueryCallDetailsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.queryCallDetails, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询调用明细
    ///
    /// - Returns: `AsyncSequence`s of `CallDetailItem` and `QueryCallDetailsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func queryCallDetailsPaginator(_ input: QueryCallDetailsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<QueryCallDetailsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.queryCallDetails, logger: logger, on: eventLoop)
    }
}
