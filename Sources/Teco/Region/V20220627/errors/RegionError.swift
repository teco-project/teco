//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

/// Service error type returned by `Region`.
public protocol TCRegionErrorType: TCServiceErrorType {
    /// Get the service error as ``TCRegionError``.
    ///
    /// - Returns: ``TCRegionError`` that holds the same error code and context.
    func asRegionError() -> TCRegionError
}

public struct TCRegionError: TCRegionErrorType {
    enum Code: String {
        case invalidParameter = "InvalidParameter"
        case requestLimitExceeded = "RequestLimitExceeded"
        case unsupportedOperation = "UnsupportedOperation"
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 参数错误。
    public static var invalidParameter: TCRegionError {
        TCRegionError(.invalidParameter)
    }

    /// 请求的次数超过了频率限制。
    public static var requestLimitExceeded: TCRegionError {
        TCRegionError(.requestLimitExceeded)
    }

    /// 操作不支持。
    public static var unsupportedOperation: TCRegionError {
        TCRegionError(.unsupportedOperation)
    }

    public func asRegionError() -> TCRegionError {
        return self
    }
}
