//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCBtoeError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case dataInfoTooLong = "InvalidParameterValue.DataInfoTooLong"
            case hashNoMatch = "InvalidParameterValue.HashNoMatch"
            case invalidFileSuffix = "InvalidParameterValue.InvalidFileSuffix"
            case invalidURL = "InvalidParameterValue.InvalidURL"
            case parameterError = "InvalidParameterValue.ParameterError"
            case tooLargeFileError = "InvalidParameterValue.TooLargeFileError"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 数据明文内容过长。
        public static var dataInfoTooLong: InvalidParameterValue {
            InvalidParameterValue(.dataInfoTooLong)
        }
        
        /// 哈希不匹配。
        public static var hashNoMatch: InvalidParameterValue {
            InvalidParameterValue(.hashNoMatch)
        }
        
        /// 文件后缀不正确。
        public static var invalidFileSuffix: InvalidParameterValue {
            InvalidParameterValue(.invalidFileSuffix)
        }
        
        /// URL无效。
        public static var invalidURL: InvalidParameterValue {
            InvalidParameterValue(.invalidURL)
        }
        
        /// 参数值错误。
        public static var parameterError: InvalidParameterValue {
            InvalidParameterValue(.parameterError)
        }
        
        /// 文件内容太大。
        public static var tooLargeFileError: InvalidParameterValue {
            InvalidParameterValue(.tooLargeFileError)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCBtoeError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCBtoeError.InvalidParameterValue, rhs: TCBtoeError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCBtoeError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCBtoeError.InvalidParameterValue {
    public func toBtoeError() -> TCBtoeError {
        guard let code = TCBtoeError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCBtoeError(code, context: self.context)
    }
}