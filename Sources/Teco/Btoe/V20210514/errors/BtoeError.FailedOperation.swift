//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCBtoeError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case arrearsError = "FailedOperation.ArrearsError"
            case countLimitError = "FailedOperation.CountLimitError"
            case dataInfoTooLong = "FailedOperation.DataInfoTooLong"
            case downLoadError = "FailedOperation.DownLoadError"
            case fileEncodindFormatError = "FailedOperation.FileEncodindFormatError"
            case fileReadFailed = "FailedOperation.FileReadFailed"
            case hashNoMatch = "FailedOperation.HashNoMatch"
            case onChainFailure = "FailedOperation.OnChainFailure"
            case queryNoRecord = "FailedOperation.QueryNoRecord"
            case sensitiveData = "FailedOperation.SensitiveData"
            case unKnowError = "FailedOperation.UnKnowError"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 帐号已欠费。
        public static var arrearsError: FailedOperation {
            FailedOperation(.arrearsError)
        }
        
        /// 今日次数达到限制。
        public static var countLimitError: FailedOperation {
            FailedOperation(.countLimitError)
        }
        
        /// 数据明文内容过长。
        public static var dataInfoTooLong: FailedOperation {
            FailedOperation(.dataInfoTooLong)
        }
        
        /// 文件下载失败。
        public static var downLoadError: FailedOperation {
            FailedOperation(.downLoadError)
        }
        
        /// 文件编码格式错误。
        public static var fileEncodindFormatError: FailedOperation {
            FailedOperation(.fileEncodindFormatError)
        }
        
        /// 文件读取失败。
        public static var fileReadFailed: FailedOperation {
            FailedOperation(.fileReadFailed)
        }
        
        /// 哈希不匹配。
        public static var hashNoMatch: FailedOperation {
            FailedOperation(.hashNoMatch)
        }
        
        /// 上链失败。
        public static var onChainFailure: FailedOperation {
            FailedOperation(.onChainFailure)
        }
        
        /// 查询无记录。
        public static var queryNoRecord: FailedOperation {
            FailedOperation(.queryNoRecord)
        }
        
        /// 敏感数据。
        public static var sensitiveData: FailedOperation {
            FailedOperation(.sensitiveData)
        }
        
        /// 未知错误。
        public static var unKnowError: FailedOperation {
            FailedOperation(.unKnowError)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCBtoeError.FailedOperation: Equatable {
    public static func == (lhs: TCBtoeError.FailedOperation, rhs: TCBtoeError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCBtoeError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCBtoeError.FailedOperation {
    public func toBtoeError() -> TCBtoeError {
        guard let code = TCBtoeError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCBtoeError(code, context: self.context)
    }
}