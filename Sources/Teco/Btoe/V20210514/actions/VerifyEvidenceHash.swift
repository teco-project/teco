//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Btoe {
    /// 核验存证内容hash
    ///
    /// 用户存证内容hash向BTOE核验存证记录的真实性。
    @inlinable
    public func verifyEvidenceHash(_ input: VerifyEvidenceHashRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < VerifyEvidenceHashResponse > {
        self.client.execute(action: "VerifyEvidenceHash", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 核验存证内容hash
    ///
    /// 用户存证内容hash向BTOE核验存证记录的真实性。
    @inlinable
    public func verifyEvidenceHash(_ input: VerifyEvidenceHashRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VerifyEvidenceHashResponse {
        try await self.client.execute(action: "VerifyEvidenceHash", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// VerifyEvidenceHash请求参数结构体
    public struct VerifyEvidenceHashRequest: TCRequestModel {
        /// 存证内容hash，hash类型即为用户在存证时所用或所选的hash类型
        public let evidenceHash: String
        
        public init (evidenceHash: String) {
            self.evidenceHash = evidenceHash
        }
        
        enum CodingKeys: String, CodingKey {
            case evidenceHash = "EvidenceHash"
        }
    }
    
    /// VerifyEvidenceHash返回参数结构体
    public struct VerifyEvidenceHashResponse: TCResponseModel {
        /// 核验结果，true为核验成功，false为核验失败
        public let result: Bool
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}