//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudhsm {
    /// GetAlarmEvent请求参数结构体
    public struct GetAlarmEventRequest: TCRequest {
        public init() {
        }
    }

    /// GetAlarmEvent返回参数结构体
    public struct GetAlarmEventResponse: TCResponse {
        /// 用户所有的告警策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let alarmConfig: [AlarmPolicy]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case alarmConfig = "AlarmConfig"
            case requestId = "RequestId"
        }
    }

    /// 获取告警事件
    @inlinable
    public func getAlarmEvent(_ input: GetAlarmEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAlarmEventResponse> {
        self.client.execute(action: "GetAlarmEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取告警事件
    @inlinable
    public func getAlarmEvent(_ input: GetAlarmEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAlarmEventResponse {
        try await self.client.execute(action: "GetAlarmEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取告警事件
    @inlinable
    public func getAlarmEvent(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAlarmEventResponse> {
        self.getAlarmEvent(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 获取告警事件
    @inlinable
    public func getAlarmEvent(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAlarmEventResponse {
        try await self.getAlarmEvent(.init(), region: region, logger: logger, on: eventLoop)
    }
}
