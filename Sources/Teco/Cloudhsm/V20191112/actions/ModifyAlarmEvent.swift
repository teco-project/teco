//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cloudhsm {
    /// ModifyAlarmEvent请求参数结构体
    public struct ModifyAlarmEventRequest: TCRequestModel {
        /// 告警事件，支持CPU、MEM、TCP
        public let event: String

        /// 告警阈值
        public let limit: Int64

        /// 告警状态，0表示停用，1表示启动
        public let status: Int64

        /// 告警开始时间，只有在这个时间后才会发送告警，当跟EndTime同时为空时表示全天告警
        public let beginTime: String?

        /// 告警结束时间，只有在这个时间前才会发送告警，当跟BeginTime同时为空时表示全天告警
        public let endTime: String?

        public init(event: String, limit: Int64, status: Int64, beginTime: String? = nil, endTime: String? = nil) {
            self.event = event
            self.limit = limit
            self.status = status
            self.beginTime = beginTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case event = "Event"
            case limit = "Limit"
            case status = "Status"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
        }
    }

    /// ModifyAlarmEvent返回参数结构体
    public struct ModifyAlarmEventResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改告警事件
    @inlinable @discardableResult
    public func modifyAlarmEvent(_ input: ModifyAlarmEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmEventResponse> {
        self.client.execute(action: "ModifyAlarmEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改告警事件
    @inlinable @discardableResult
    public func modifyAlarmEvent(_ input: ModifyAlarmEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmEventResponse {
        try await self.client.execute(action: "ModifyAlarmEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改告警事件
    @inlinable @discardableResult
    public func modifyAlarmEvent(event: String, limit: Int64, status: Int64, beginTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmEventResponse> {
        self.modifyAlarmEvent(.init(event: event, limit: limit, status: status, beginTime: beginTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 修改告警事件
    @inlinable @discardableResult
    public func modifyAlarmEvent(event: String, limit: Int64, status: Int64, beginTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmEventResponse {
        try await self.modifyAlarmEvent(.init(event: event, limit: limit, status: status, beginTime: beginTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
