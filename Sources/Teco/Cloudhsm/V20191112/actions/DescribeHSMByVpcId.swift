//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudhsm {
    /// DescribeHSMByVpcId请求参数结构体
    public struct DescribeHSMByVpcIdRequest: TCRequest {
        /// VPC标识符
        public let vpcId: String

        public init(vpcId: String) {
            self.vpcId = vpcId
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    /// DescribeHSMByVpcId返回参数结构体
    public struct DescribeHSMByVpcIdResponse: TCResponse {
        /// HSM数量
        public let totalCount: Int64

        /// 作为查询条件的VpcId
        public let vpcId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case vpcId = "VpcId"
            case requestId = "RequestId"
        }
    }

    /// 通过VpcId获取Hsm资源数
    @inlinable
    public func describeHSMByVpcId(_ input: DescribeHSMByVpcIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHSMByVpcIdResponse> {
        self.client.execute(action: "DescribeHSMByVpcId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 通过VpcId获取Hsm资源数
    @inlinable
    public func describeHSMByVpcId(_ input: DescribeHSMByVpcIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHSMByVpcIdResponse {
        try await self.client.execute(action: "DescribeHSMByVpcId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 通过VpcId获取Hsm资源数
    @inlinable
    public func describeHSMByVpcId(vpcId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHSMByVpcIdResponse> {
        self.describeHSMByVpcId(.init(vpcId: vpcId), region: region, logger: logger, on: eventLoop)
    }

    /// 通过VpcId获取Hsm资源数
    @inlinable
    public func describeHSMByVpcId(vpcId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHSMByVpcIdResponse {
        try await self.describeHSMByVpcId(.init(vpcId: vpcId), region: region, logger: logger, on: eventLoop)
    }
}
