//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Cloudhsm {
    /// DescribeSubnet请求参数结构体
    public struct DescribeSubnetRequest: TCPaginatedRequest {
        /// 返回数量。Limit需要在[1, 100]之间。
        public let limit: Int64

        /// 偏移量。偏移量最小为0。
        public let offset: Int64

        /// 查询指定VpcId下的子网信息。
        public let vpcId: String

        /// 查找关键字
        public let searchWord: String?

        public init(limit: Int64, offset: Int64, vpcId: String, searchWord: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.vpcId = vpcId
            self.searchWord = searchWord
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case vpcId = "VpcId"
            case searchWord = "SearchWord"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeSubnetResponse) -> DescribeSubnetRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeSubnetRequest(limit: self.limit, offset: self.offset + .init(response.getItems().count), vpcId: self.vpcId, searchWord: self.searchWord)
        }
    }

    /// DescribeSubnet返回参数结构体
    public struct DescribeSubnetResponse: TCPaginatedResponse {
        /// 返回的子网数量。
        public let totalCount: Int64

        /// 返回的子网实例列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetList: [Subnet]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case subnetList = "SubnetList"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Subnet] {
            self.subnetList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnet(_ input: DescribeSubnetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSubnetResponse> {
        self.client.execute(action: "DescribeSubnet", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnet(_ input: DescribeSubnetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSubnetResponse {
        try await self.client.execute(action: "DescribeSubnet", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnet(limit: Int64, offset: Int64, vpcId: String, searchWord: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSubnetResponse> {
        self.describeSubnet(.init(limit: limit, offset: offset, vpcId: vpcId, searchWord: searchWord), region: region, logger: logger, on: eventLoop)
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnet(limit: Int64, offset: Int64, vpcId: String, searchWord: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSubnetResponse {
        try await self.describeSubnet(.init(limit: limit, offset: offset, vpcId: vpcId, searchWord: searchWord), region: region, logger: logger, on: eventLoop)
    }

    /// 查询子网列表
    @inlinable
    public func describeSubnetPaginated(_ input: DescribeSubnetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [Subnet])> {
        self.client.paginate(input: input, region: region, command: self.describeSubnet, logger: logger, on: eventLoop)
    }

    /// 查询子网列表
    @inlinable @discardableResult
    public func describeSubnetPaginated(_ input: DescribeSubnetRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeSubnetResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeSubnet, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询子网列表
    ///
    /// - Returns: `AsyncSequence`s of `Subnet` and `DescribeSubnetResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeSubnetPaginator(_ input: DescribeSubnetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeSubnetRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeSubnet, logger: logger, on: eventLoop)
    }
}
