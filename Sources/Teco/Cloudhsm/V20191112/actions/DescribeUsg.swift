//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudhsm {
    /// DescribeUsg请求参数结构体
    public struct DescribeUsgRequest: TCPaginatedRequest {
        /// 偏移量，当Offset和Limit均为0时将一次性返回用户所有的安全组列表。
        public let offset: Int64

        /// 返回量，当Offset和Limit均为0时将一次性返回用户所有的安全组列表。
        public let limit: Int64

        /// 搜索关键字
        public let searchWord: String?

        public init(offset: Int64, limit: Int64, searchWord: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.searchWord = searchWord
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case searchWord = "SearchWord"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeUsgResponse) -> DescribeUsgRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), self.offset + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(offset: self.offset + .init(response.getItems().count), limit: self.limit, searchWord: self.searchWord)
        }
    }

    /// DescribeUsg返回参数结构体
    public struct DescribeUsgResponse: TCPaginatedResponse {
        /// 用户的安全组列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sgList: [SgUnit]?

        /// 返回的安全组数量
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sgList = "SgList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``SgUnit`` list from the paginated response.
        public func getItems() -> [SgUnit] {
            self.sgList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取用户安全组列表
    ///
    /// 根据用户的AppId获取用户安全组列表
    @inlinable
    public func describeUsg(_ input: DescribeUsgRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUsgResponse> {
        self.client.execute(action: "DescribeUsg", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取用户安全组列表
    ///
    /// 根据用户的AppId获取用户安全组列表
    @inlinable
    public func describeUsg(_ input: DescribeUsgRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUsgResponse {
        try await self.client.execute(action: "DescribeUsg", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取用户安全组列表
    ///
    /// 根据用户的AppId获取用户安全组列表
    @inlinable
    public func describeUsg(offset: Int64, limit: Int64, searchWord: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUsgResponse> {
        self.describeUsg(.init(offset: offset, limit: limit, searchWord: searchWord), region: region, logger: logger, on: eventLoop)
    }

    /// 获取用户安全组列表
    ///
    /// 根据用户的AppId获取用户安全组列表
    @inlinable
    public func describeUsg(offset: Int64, limit: Int64, searchWord: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUsgResponse {
        try await self.describeUsg(.init(offset: offset, limit: limit, searchWord: searchWord), region: region, logger: logger, on: eventLoop)
    }

    /// 获取用户安全组列表
    ///
    /// 根据用户的AppId获取用户安全组列表
    @inlinable
    public func describeUsgPaginated(_ input: DescribeUsgRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [SgUnit])> {
        self.client.paginate(input: input, region: region, command: self.describeUsg, logger: logger, on: eventLoop)
    }

    /// 获取用户安全组列表
    ///
    /// 根据用户的AppId获取用户安全组列表
    @inlinable @discardableResult
    public func describeUsgPaginated(_ input: DescribeUsgRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeUsgResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeUsg, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取用户安全组列表
    ///
    /// 根据用户的AppId获取用户安全组列表
    ///
    /// - Returns: `AsyncSequence`s of ``SgUnit`` and ``DescribeUsgResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeUsgPaginator(_ input: DescribeUsgRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeUsgRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeUsg, logger: logger, on: eventLoop)
    }
}
