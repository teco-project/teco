//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ocr {
    /// 广告文字识别结果
    public struct AdvertiseTextDetection: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 置信度 0 ~100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        /// 此字段为扩展字段。
        /// GeneralBasicOcr接口返回段落信息Parag，包含ParagNo。
        public let advancedInfo: String

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
        }
    }

    /// 银行回单识别出的字段
    public struct BankSlipInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 付款开户行、收款开户行、付款账号、收款账号、回单类型、回单编号、币种、流水号、凭证号码、交易机构、交易金额、手续费、日期等字段信息。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 验真接口
    public struct BizLicenseVerifyResult: TCOutputModel {
        /// “0“：一致
        /// “-1”：不一致
        public let regNum: String

        /// “0“：一致
        /// “-1”：不一致
        /// “”：不验真
        public let name: String

        /// “0“：一致
        /// “-1”：不一致
        /// “”：不验真
        public let address: String

        enum CodingKeys: String, CodingKey {
            case regNum = "RegNum"
            case name = "Name"
            case address = "Address"
        }
    }

    /// 汽车票字段信息
    public struct BusInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、发票号码、日期、票价、始发地、目的地、姓名、时间、发票消费类型、身份证号、省、市、开票日期、乘车地点、检票口、客票类型、车型、座位号、车次。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 名片识别结果
    public struct BusinessCardInfo: TCOutputModel {
        /// 识别出的字段名称（关键字，可能重复，比如多个手机），能识别的字段名为：
        /// 姓名、英文姓名、英文地址、公司、英文公司、职位、英文职位、部门、英文部门、手机、电话、传真、社交帐号、QQ、MSN、微信、微博、邮箱、邮编、网址、公司账号、其他。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemCoord: ItemCoord

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case itemCoord = "ItemCoord"
        }
    }

    /// 候选字符集(包含候选字Character以及置信度Confidence)
    public struct CandWord: TCOutputModel {
        /// 候选字符集的单词信息（包括单词Character和单词置信度confidence）
        public let candWords: [Words]

        enum CodingKeys: String, CodingKey {
            case candWords = "CandWords"
        }
    }

    /// 购车发票识别结果
    public struct CarInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、 机打代码、 发票号码、 发动机号码、 合格证号、 机打号码、 价税合计(小写)、 销货单位名称、 身份证号码/组织机构代码、 购买方名称、 销售方纳税人识别号、 购买方纳税人识别号、主管税务机关、 主管税务机关代码、 开票日期、 不含税价(小写)、 吨位、增值税税率或征收率、 车辆识别代号/车架号码、 增值税税额、 厂牌型号、 省、 市、 发票消费类型、 销售方电话、 销售方账号、 产地、 进口证明书号、 车辆类型、 机器编号、备注、开票人、限乘人数、商检单号、销售方地址、销售方开户银行、价税合计、发票类型。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 字段在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        /// 字段在原图中的中的四点坐标。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: Polygon?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
            case polygon = "Polygon"
        }
    }

    /// 单元格识别结果
    public struct CellContent: TCOutputModel {
        /// 段落编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paragNo: Int64?

        /// 字体大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wordSize: Int64?

        enum CodingKeys: String, CodingKey {
            case paragNo = "ParagNo"
            case wordSize = "WordSize"
        }
    }

    /// 卡证智能分类结果
    public struct ClassifyDetectInfo: TCOutputModel {
        /// 分类名称，包括：身份证、护照、名片、银行卡、行驶证、驾驶证、港澳台通行证、户口本、港澳台来往内地通行证、港澳台居住证、不动产证、营业执照
        public let name: String

        /// 分类类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 位置坐标
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case rect = "Rect"
        }
    }

    /// 坐标
    public struct Coord: TCOutputModel {
        /// 横坐标
        public let x: Int64

        /// 纵坐标
        public let y: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
        }
    }

    /// 企业四要素核验结果
    public struct Detail: TCOutputModel {
        /// 企业四要素核验结果状态码
        public let result: Int64

        /// 企业四要素核验结果描述
        public let desc: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case desc = "Desc"
        }
    }

    /// 单字在原图中的坐标，以四个顶点坐标表示，以左上角为起点，顺时针返回。
    public struct DetectedWordCoordPoint: TCOutputModel {
        /// 单字在原图中的坐标，以四个顶点坐标表示，以左上角为起点，顺时针返回。
        public let wordCoordinate: [Coord]

        enum CodingKeys: String, CodingKey {
            case wordCoordinate = "WordCoordinate"
        }
    }

    /// 识别出来的单字信息包括单字（包括单字Character和单字置信度confidence）
    public struct DetectedWords: TCOutputModel {
        /// 置信度 0 ~100
        public let confidence: Int64

        /// 候选字Character
        public let character: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case character = "Character"
        }
    }

    /// 识别出的字段
    public struct DutyPaidProofInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 税号 、纳税人识别号 、纳税人名称 、金额合计大写 、金额合计小写 、填发日期 、税务机关 、填票人。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 企业证照单个字段的内容
    public struct EnterpriseLicenseInfo: TCOutputModel {
        /// 识别出的字段名称（关键字），不同证件类型可能不同，证件类型包含企业登记证书、许可证书、企业执照、三证合一类证书；
        /// 支持以下字段：统一社会信用代码、法定代表人、公司名称、公司地址、注册资金、企业关型、经营范围、成立日期、有效期、开办资金、经费来源、举办单位等；
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 金融票据整单识别单个字段的内容
    public struct FinanBillInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 【进账单】
        /// 日期、出票全称、出票账号、出票开户行、收款人全称、收款人账号、收款开户行、大写金额、小写金额、票据种类、票据张数、票据号码；
        /// 【支票】
        /// 开户银行、支票种类、凭证号码2、日期、大写金额、小写金额、付款行编号、密码、凭证号码1；
        /// 【银行承兑汇票】或【商业承兑汇票】
        /// 出票日期、行号1、行号2、出票人全称、出票人账号、付款行全称、收款人全称、收款人账号、收款人开户行、出票金额大写、出票金额小写、汇票到期日、付款行行号、付款行地址。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 金融票据切片识别单个字段的内容
    public struct FinanBillSliceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 大写金额、小写金额、账号、票号1、票号2、收款人、大写日期、同城交换号、地址-省份、地址-城市、付款行全称、支票密码、支票用途。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 机票行程单识别结果
    public struct FlightInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 票价、合计金额、填开日期、有效身份证件号码、电子客票号码、验证码、旅客姓名、填开单位、其他税费、燃油附加费、民航发展基金、保险费、销售单位代号、始发地、目的地、航班号、时间、日期、座位等级、承运人、发票消费类型、国内国际标签、印刷序号、客票级别/类别、客票生效日期、有效期截止日期、免费行李。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段 Name 对应的字符串结果。
        public let value: String

        /// 多个行程的字段所在行号，下标从0开始，非行字段或未能识别行号的该值返回-1。
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case row = "Row"
        }
    }

    /// 保险单据信息
    public struct InsuranceBillInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 【病案首页】
        /// 姓名、性别、出生日期、出院诊断、疾病编码、入院病情等。
        /// 【费用清单】
        /// 医疗参保人员类别、身份证号、入院方式、结账日期、项目、金额等。
        /// 【结算单】
        /// 名称、单价、数量、金额、医保内、医保外等。
        /// 【医疗发票】
        /// 姓名、性别、住院时间、收费项目、金额、合计等。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 票据检测结果
    public struct InvoiceDetectInfo: TCOutputModel {
        /// 识别出的图片在混贴票据图片中的旋转角度。
        public let angle: Float

        /// 识别出的图片所属的票据类型。
        /// -1：未知类型
        /// 0：出租车发票
        /// 1：定额发票
        /// 2：火车票
        /// 3：增值税发票
        /// 4：客运限额发票
        /// 5：机票行程单
        /// 6：酒店账单
        /// 7：完税证明
        /// 8：通用机打发票
        /// 9：汽车票
        /// 10：轮船票
        /// 11：增值税发票（卷票 ）
        /// 12：购车发票
        /// 13：过路过桥费发票
        /// 14：购物小票
        public let type: Int64

        /// 识别出的图片在混贴票据图片中的位置信息。与Angel结合可以得出原图位置，组成RotatedRect((X+0.5\*Width,Y+0.5\*Height), (Width, Height), Angle)，详情可参考OpenCV文档。
        public let rect: Rect

        /// 入参 ReturnImage 为 True 时返回 Base64 编码后的图片。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let image: String?

        enum CodingKeys: String, CodingKey {
            case angle = "Angle"
            case type = "Type"
            case rect = "Rect"
            case image = "Image"
        }
    }

    /// 通用机打发票信息
    public struct InvoiceGeneralInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段识别（注：下划线表示一个字段）：
        /// 发票代码、发票号码、日期、合计金额(小写)、合计金额(大写)、购买方识别号、销售方识别号、校验码、购买方名称、销售方名称、时间、种类、发票消费类型、省、市、是否有公司印章、发票名称、<span style="text-decoration:underline">购买方地址、电话</span>、<span style="text-decoration:underline">销售方地址、电话</span>、购买方开户行及账号、销售方开户行及账号、经办人取票用户、经办人支付信息、经办人商户号、经办人订单号、<span style="text-decoration:underline">货物或应税劳务、服务名称</span>、数量、单价、税率、税额、金额、单位、规格型号、合计税额、合计金额、备注、收款人、复核、开票人、密码区、行业分类
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
    public struct ItemCoord: TCOutputModel {
        /// 左上角x
        public let x: Int64

        /// 左上角y
        public let y: Int64

        /// 宽width
        public let width: Int64

        /// 高height
        public let height: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 全部车牌信息
    public struct LicensePlateInfo: TCOutputModel {
        /// 识别出的车牌号码。
        public let number: String

        /// 置信度，0 - 100 之间。
        public let confidence: Int64

        /// 文本行在原图片中的像素坐标框。
        public let rect: Rect

        /// 识别出的车牌颜色，目前支持颜色包括 “白”、“黑”、“蓝”、“绿“、“黄”、“黄绿”、“临牌”。
        public let color: String

        enum CodingKeys: String, CodingKey {
            case number = "Number"
            case confidence = "Confidence"
            case rect = "Rect"
            case color = "Color"
        }
    }

    /// 医疗发票识别结果
    public struct MedicalInvoiceInfo: TCOutputModel {
        /// 医疗发票识别结果条目
        public let medicalInvoiceItems: [MedicalInvoiceItem]

        enum CodingKeys: String, CodingKey {
            case medicalInvoiceItems = "MedicalInvoiceItems"
        }
    }

    /// 医疗发票识别结果
    public struct MedicalInvoiceItem: TCOutputModel {
        /// 识别出的字段名称
        /// <table><tr><td>分类</td><td>name</td></tr><tr><td>票据基本信息</td><td>发票名称</td></tr><tr><td></td><td>票据代码</td></tr><tr><td></td><td>票据号码</td></tr><tr><td></td><td>电子票据代码</td></tr><tr><td></td><td>电子票据号码</td></tr><tr><td></td><td>交款人统一社会信用代码</td></tr><tr><td></td><td>校验码</td></tr><tr><td></td><td>交款人</td></tr><tr><td></td><td>开票日期</td></tr><tr><td></td><td>收款单位</td></tr><tr><td></td><td>复核人</td></tr><tr><td></td><td>收款人</td></tr><tr><td></td><td>业务流水号</td></tr><tr><td></td><td>门诊号</td></tr><tr><td></td><td>就诊日期</td></tr><tr><td></td><td>医疗机构类型</td></tr><tr><td></td><td>医保类型</td></tr><tr><td></td><td>医保编号</td></tr><tr><td></td><td>性别</td></tr><tr><td></td><td>医保统筹基金支付</td></tr><tr><td></td><td>其他支付</td></tr><tr><td></td><td>个人账户支付</td></tr><tr><td></td><td>个人现金支付</td></tr><tr><td></td><td>个人自付</td></tr><tr><td></td><td>个人自费</td></tr><tr><td></td><td>病历号</td></tr><tr><td></td><td>住院号</td></tr><tr><td></td><td>住院科别</td></tr><tr><td></td><td>住院时间</td></tr><tr><td></td><td>预缴金额</td></tr><tr><td></td><td>补缴金额</td></tr><tr><td></td><td>退费金额</td></tr><tr><td></td><td>发票属地</td></tr><tr><td></td><td>发票类型</td></tr><tr><td>总金额</td><td>总金额大写</td></tr><tr><td></td><td>总金额小写</td></tr><tr><td>收费大项</td><td>大项名称</td></tr><tr><td></td><td>大项金额</td></tr><tr><td>收费细项</td><td>项目名称</td></tr><tr><td></td><td>数量</td></tr><tr><td></td><td>单位</td></tr><tr><td></td><td>金额</td></tr><tr><td></td><td>备注</td></tr><tr><td>票据其他信息</td><td>入院时间</td></tr><tr><td></td><td>出院时间</td></tr><tr><td></td><td>住院天数</td></tr><tr><td></td><td>自付二</td></tr><tr><td></td><td>自付一</td></tr><tr><td></td><td>起付金额</td></tr><tr><td></td><td>超封顶金额</td></tr><tr><td></td><td>自费</td></tr><tr><td></td><td>本次医保范围内金额</td></tr><tr><td></td><td>累计医保内范围金额</td></tr><tr><td></td><td>门诊大额支付</td></tr><tr><td></td><td>残军补助支付</td></tr><tr><td></td><td>年度门诊大额累计支付</td></tr><tr><td></td><td>单位补充险[原公疗]支付</td></tr><tr><td></td><td>社会保障卡号</td></tr><tr><td></td><td>姓名</td></tr><tr><td></td><td>交易流水号</td></tr><tr><td></td><td>本次支付后个人账户余额</td></tr><tr><td></td><td>基金支付</td></tr><tr><td></td><td>现金支付</td></tr><tr><td></td><td>复核</td></tr><tr><td></td><td>自负</td></tr><tr><td></td><td>结算方式</td></tr><tr><td></td><td>医保统筹/公医记账</td></tr><tr><td></td><td>其他</td></tr><tr><td></td><td>个人支付金额</td></tr><tr><td></td><td>欠费</td></tr><tr><td></td><td>退休补充支付</td></tr><tr><td></td><td>医院类型</td></tr><tr><td></td><td>退款</td></tr><tr><td></td><td>补收</td></tr><tr><td></td><td>附加支付</td></tr><tr><td></td><td>分类自负</td></tr><tr><td></td><td>其它</td></tr><tr><td></td><td>预交款</td></tr><tr><td></td><td>个人缴费</td></tr></table>
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果
        public let content: String

        /// 识别出的文本行四点坐标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vertex: Polygon?

        /// 识别出的文本行在旋转纠正之后的图像中的像素坐标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coord: Rect?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case content = "Content"
            case vertex = "Vertex"
            case coord = "Coord"
        }
    }

    /// 混贴票据单张发票识别信息
    public struct MixedInvoiceItem: TCOutputModel {
        /// 识别结果。
        /// OK：表示识别成功；FailedOperation.UnsupportedInvioce：表示不支持识别；
        /// FailedOperation.UnKnowError：表示识别失败；
        /// 其它错误码见各个票据接口的定义。
        public let code: String

        /// 识别出的图片所属的票据类型。
        /// -1：未知类型
        /// 0：出租车发票
        /// 1：定额发票
        /// 2：火车票
        /// 3：增值税发票
        /// 5：机票行程单
        /// 8：通用机打发票
        /// 9：汽车票
        /// 10：轮船票
        /// 11：增值税发票（卷票）
        /// 12：购车发票
        /// 13：过路过桥费发票
        /// 15：非税发票
        /// 16：全电发票
        public let type: Int64

        /// 识别出的图片在混贴票据图片中的位置信息。与Angel结合可以得出原图位置，组成RotatedRect((X+0.5\*Width,Y+0.5\*Height), (Width, Height), Angle)，详情可参考OpenCV文档。
        public let rect: Rect

        /// 识别出的图片在混贴票据图片中的旋转角度。
        public let angle: Float

        /// 识别到的内容。
        public let singleInvoiceInfos: [SingleInvoiceInfo]

        /// 发票处于识别图片或PDF文件中的页教，默认从1开始。
        public let page: Int64?

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case type = "Type"
            case rect = "Rect"
            case angle = "Angle"
            case singleInvoiceInfos = "SingleInvoiceInfos"
            case page = "Page"
        }
    }

    /// 网约车行程单识别结果
    public struct OnlineTaxiItineraryInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、 机打代码、 发票号码、 发动机号码、 合格证号、 机打号码、 价税合计(小写)、 销货单位名称、 身份证号码/组织机构代码、 购买方名称、 销售方纳税人识别号、 购买方纳税人识别号、主管税务机关、 主管税务机关代码、 开票日期、 不含税价(小写)、 吨位、增值税税率或征收率、 车辆识别代号/车架号码、 增值税税额、 厂牌型号、 省、 市、 发票消费类型、 销售方电话、 销售方账号、 产地、 进口证明书号、 车辆类型、 机器编号、备注、开票人、限乘人数、商检单号、销售方地址、销售方开户银行、价税合计、发票类型。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 字段所在行，下标从0开始，非行字段或未能识别行号的返回-1
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case row = "Row"
        }
    }

    /// 通行费发票信息
    public struct PassInvoiceInfo: TCOutputModel {
        /// 通行费车牌号
        public let numberPlate: String

        /// 通行费类型
        public let type: String

        /// 通行日期起
        public let passDateBegin: String

        /// 通行日期止
        public let passDateEnd: String

        /// 税收分类编码
        public let taxClassifyCode: String

        enum CodingKeys: String, CodingKey {
            case numberPlate = "NumberPlate"
            case type = "Type"
            case passDateBegin = "PassDateBegin"
            case passDateEnd = "PassDateEnd"
            case taxClassifyCode = "TaxClassifyCode"
        }
    }

    /// 文本的坐标，以四个顶点坐标表示
    /// 注意：此字段可能返回 null，表示取不到有效值
    public struct Polygon: TCOutputModel {
        /// 左上顶点坐标
        public let leftTop: Coord

        /// 右上顶点坐标
        public let rightTop: Coord

        /// 右下顶点坐标
        public let rightBottom: Coord

        /// 左下顶点坐标
        public let leftBottom: Coord

        enum CodingKeys: String, CodingKey {
            case leftTop = "LeftTop"
            case rightTop = "RightTop"
            case rightBottom = "RightBottom"
            case leftBottom = "LeftBottom"
        }
    }

    /// 商品码信息
    public struct ProductDataRecord: TCOutputModel {
        /// 产品名称
        public let productName: String

        /// 产品名称(英文)
        public let enName: String

        /// 品牌名称
        public let brandName: String

        /// 规格型号
        public let type: String

        /// 宽度，单位毫米
        public let width: String

        /// 高度，单位毫米
        public let height: String

        /// 深度，单位毫米
        public let depth: String

        /// 关键字
        public let keyWord: String

        /// 简短描述
        public let description: String

        /// 图片链接
        public let imageLink: [String]

        /// 厂家名称
        public let manufacturerName: String

        /// 厂家地址
        public let manufacturerAddress: String

        /// 企业社会信用代码
        public let firmCode: String

        /// 表示数据查询状态
        /// checkResult	状态说明
        /// 1	 经查，该商品条码已在中国物品编码中心注册
        /// 2	经查，该厂商识别代码已在中国物品编码中心注册，但编码信息未按规定通报。
        /// 3	经查，该厂商识别代码已于xxxxx注销，请关注产品生产日期。
        /// 4	经查，该企业以及条码未经条码中心注册，属于违法使用
        /// -1	经查，该商品条码被冒用
        /// -2	经查，该厂商识别代码已在中国物品编码中心注册，但该产品已经下市
        /// S001                未找到该厂商识别代码的注册信息。
        /// S002		该厂商识别代码已经在GS1注册，但编码信息未通报
        /// S003		该商品条码已在GS1通报
        /// S004		该商品条码已注销
        /// S005		数字不正确。GS1前缀（3位国家/地区代码）用于特殊用途。
        /// E001		完整性失败：此GTIN的长度无效。
        /// E002		完整性失败：校验位不正确。
        /// E003		完整性失败：字符串包含字母数字字符。
        /// E004		数字不正确。GS1前缀（3位国家/地区代码）不存在。
        /// E005		数字不正确。GS1前缀（3位国家/地区代码）用于特殊用途。
        /// E006		数字不正确。尚未分配该GS1公司前缀。
        /// E008	        经查，该企业厂商识别代码以及条码尚未通报
        public let checkResult: String

        /// UNSPSC分类码
        public let categoryCode: String

        enum CodingKeys: String, CodingKey {
            case productName = "ProductName"
            case enName = "EnName"
            case brandName = "BrandName"
            case type = "Type"
            case width = "Width"
            case height = "Height"
            case depth = "Depth"
            case keyWord = "KeyWord"
            case description = "Description"
            case imageLink = "ImageLink"
            case manufacturerName = "ManufacturerName"
            case manufacturerAddress = "ManufacturerAddress"
            case firmCode = "FirmCode"
            case checkResult = "CheckResult"
            case categoryCode = "CategoryCode"
        }
    }

    /// 图片大小
    public struct QrcodeImgSize: TCOutputModel {
        /// 宽
        public let wide: Int64

        /// 高
        public let high: Int64

        enum CodingKeys: String, CodingKey {
            case wide = "Wide"
            case high = "High"
        }
    }

    /// 二维码/条形码坐标信息
    public struct QrcodePositionObj: TCOutputModel {
        /// 左上顶点坐标（如果是条形码，X和Y都为-1）
        public let leftTop: Coord

        /// 右上顶点坐标（如果是条形码，X和Y都为-1）
        public let rightTop: Coord

        /// 右下顶点坐标（如果是条形码，X和Y都为-1）
        public let rightBottom: Coord

        /// 左下顶点坐标（如果是条形码，X和Y都为-1）
        public let leftBottom: Coord

        enum CodingKeys: String, CodingKey {
            case leftTop = "LeftTop"
            case rightTop = "RightTop"
            case rightBottom = "RightBottom"
            case leftBottom = "LeftBottom"
        }
    }

    /// 二维码/条形码识别结果信息
    public struct QrcodeResultsInfo: TCOutputModel {
        /// 类型（二维码、条形码）
        public let typeName: String

        /// 二维码/条形码包含的地址
        public let url: String

        /// 二维码/条形码坐标
        public let position: QrcodePositionObj

        enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
            case url = "Url"
            case position = "Position"
        }
    }

    /// 数学试题识别结构化对象
    public struct QuestionBlockObj: TCOutputModel {
        /// 数学试题识别结构化信息数组
        public let questionArr: [QuestionObj]

        /// 题目主体区域检测框在图片中的像素坐标
        public let questionBboxCoord: Rect

        enum CodingKeys: String, CodingKey {
            case questionArr = "QuestionArr"
            case questionBboxCoord = "QuestionBboxCoord"
        }
    }

    /// 试题识别结构化信息
    public struct QuestionObj: TCOutputModel {
        /// 题号
        public let questionTextNo: String

        /// 题型：
        /// 1: "选择题"
        /// 2: "填空题"
        /// 3: "解答题"
        public let questionTextType: Int64

        /// 题干
        public let questionText: String

        /// 选择题选项，包含1个或多个option
        public let questionOptions: String

        /// 所有子题的question属性
        public let questionSubquestion: String

        /// 示意图检测框在的图片中的像素坐标
        public let questionImageCoords: [Rect]

        enum CodingKeys: String, CodingKey {
            case questionTextNo = "QuestionTextNo"
            case questionTextType = "QuestionTextType"
            case questionText = "QuestionText"
            case questionOptions = "QuestionOptions"
            case questionSubquestion = "QuestionSubquestion"
            case questionImageCoords = "QuestionImageCoords"
        }
    }

    /// 矩形坐标
    public struct Rect: TCOutputModel {
        /// 左上角x
        public let x: Int64

        /// 左上角y
        public let y: Int64

        /// 宽度
        public let width: Int64

        /// 高度
        public let height: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 印章信息
    public struct SealInfo: TCOutputModel {
        /// 印章主体内容
        public let sealBody: String

        /// 印章坐标
        public let location: Rect

        /// 印章其它文本内容
        public let otherTexts: [String]

        /// 印章类型，表示为:
        /// 圆形印章：0
        /// 椭圆形印章：1
        /// 方形印章：2
        /// 菱形印章：3
        /// 三角形印章：4
        public let sealShape: String

        enum CodingKeys: String, CodingKey {
            case sealBody = "SealBody"
            case location = "Location"
            case otherTexts = "OtherTexts"
            case sealShape = "SealShape"
        }
    }

    /// 轮船票字段信息
    public struct ShipInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、发票号码、日期、票价、始发地、目的地、姓名、时间、发票消费类型、省、市、币种。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 混贴票据中单张发票的内容
    public struct SingleInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 字段属于第几行，用于相同字段的排版，如发票明细表格项目，普通字段使用默认值为-1，表示无列排版。
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case row = "Row"
        }
    }

    /// 智慧表单上传文件信息
    public struct SmartFormFileUrl: TCInputModel {
        /// 文件url地址
        public let fileUrl: String

        /// 文件的顺序，顺序从1开始
        public let fileOrderNumber: UInt64

        public init(fileUrl: String, fileOrderNumber: UInt64) {
            self.fileUrl = fileUrl
            self.fileOrderNumber = fileOrderNumber
        }

        enum CodingKeys: String, CodingKey {
            case fileUrl = "FileUrl"
            case fileOrderNumber = "FileOrderNumber"
        }
    }

    /// 智能结构化识别
    public struct StructuralItem: TCOutputModel {
        /// 识别出的字段名称(关键字)。
        public let name: String

        /// 识别出的字段名称对应的值。
        public let value: String

        /// 置信度 0 ~100。
        public let confidence: Int64

        /// 文本行在旋转纠正之后的图像中的像素
        /// 坐标。
        public let itemCoord: ItemCoord

        /// 字段所在行号，下标从0开始，非行字段或未能识别行号的该值返回-1。
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case confidence = "Confidence"
            case itemCoord = "ItemCoord"
            case row = "Row"
        }
    }

    /// 单元格数据
    public struct TableCell: TCOutputModel {
        /// 单元格左上角的列索引
        public let colTl: Int64

        /// 单元格左上角的行索引
        public let rowTl: Int64

        /// 单元格右下角的列索引
        public let colBr: Int64

        /// 单元格右下角的行索引
        public let rowBr: Int64

        /// 单元格内识别出的字符串文本，若文本存在多行，以换行符"\n"隔开
        public let text: String

        /// 单元格类型
        public let type: String

        /// 单元格置信度
        public let confidence: Float

        /// 单元格在图像中的四点坐标
        public let polygon: [Coord]

        /// 此字段为扩展字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advancedInfo: String?

        /// 单元格文本属性
        public let contents: [CellContent]

        enum CodingKeys: String, CodingKey {
            case colTl = "ColTl"
            case rowTl = "RowTl"
            case colBr = "ColBr"
            case rowBr = "RowBr"
            case text = "Text"
            case type = "Type"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case contents = "Contents"
        }
    }

    /// 单元格数据
    public struct TableCellInfo: TCOutputModel {
        /// 单元格左上角的列索引
        public let colTl: Int64

        /// 单元格左上角的行索引
        public let rowTl: Int64

        /// 单元格右下角的列索引
        public let colBr: Int64

        /// 单元格右下角的行索引
        public let rowBr: Int64

        /// 单元格内识别出的字符串文本，若文本存在多行，以换行符"\n"隔开
        public let text: String

        /// 单元格类型
        public let type: String

        /// 单元格置信度
        public let confidence: Float

        /// 单元格在图像中的四点坐标
        public let polygon: [Coord]

        enum CodingKeys: String, CodingKey {
            case colTl = "ColTl"
            case rowTl = "RowTl"
            case colBr = "ColBr"
            case rowBr = "RowBr"
            case text = "Text"
            case type = "Type"
            case confidence = "Confidence"
            case polygon = "Polygon"
        }
    }

    /// 表格内容检测
    public struct TableDetectInfo: TCOutputModel {
        /// 单元格内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cells: [TableCell]?

        /// 表格标题
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let titles: [TableTitle]?

        /// 图像中的文本块类型，0 为非表格文本，
        /// 1 为有线表格，2 为无线表格
        /// （接口暂不支持日文无线表格识别，若传入日文无线表格，返回0）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 表格主体四个顶点坐标（依次为左上角，
        /// 右上角，右下角，左下角）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableCoordPoint: [Coord]?

        enum CodingKeys: String, CodingKey {
            case cells = "Cells"
            case titles = "Titles"
            case type = "Type"
            case tableCoordPoint = "TableCoordPoint"
        }
    }

    /// 表格内容检测
    public struct TableInfo: TCOutputModel {
        /// 单元格内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cells: [TableCellInfo]?

        /// 图像中的文本块类型，0 为非表格文本，
        /// 1 为有线表格，2 为无线表格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 表格主体四个顶点坐标（依次为左上角，
        /// 右上角，右下角，左下角）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableCoordPoint: [Coord]?

        enum CodingKeys: String, CodingKey {
            case cells = "Cells"
            case type = "Type"
            case tableCoordPoint = "TableCoordPoint"
        }
    }

    /// 表格标题
    public struct TableTitle: TCOutputModel {
        /// 表格名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let text: String?

        enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    /// 算式识别结果
    public struct TextArithmetic: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 算式运算结果，true-正确   false-错误或非法参数
        public let result: Bool

        /// 保留字段，暂不支持
        public let confidence: Int64

        /// 原图文本行坐标，以四个顶点坐标表示（保留字段，暂不支持）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: [Coord]?

        /// 保留字段，暂不支持
        public let advancedInfo: String

        /// 文本行旋转纠正之后在图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemCoord: ItemCoord

        /// 算式题型编号：
        /// ‘1’: 加减乘除四则
        /// ‘2’: 加减乘除已知结果求运算因子
        /// ‘3’: 判断大小
        /// ‘4’: 约等于估算
        /// ‘5’: 带余数除法
        /// ‘6’: 分数四则运算
        /// ‘7’: 单位换算
        /// ‘8’: 竖式加减法
        /// ‘9’: 竖式乘除法
        /// ‘10’: 脱式计算
        /// ‘11’: 解方程
        public let expressionType: String

        /// 错题推荐答案，算式运算结果正确返回为""，算式运算结果错误返回推荐答案 (注：暂不支持多个关系运算符（如1<10<7）、无关系运算符（如frac(1,2)+frac(2,3)）、单位换算（如1元=100角）错题的推荐答案返回)
        public let answer: String

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case result = "Result"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case itemCoord = "ItemCoord"
            case expressionType = "ExpressionType"
            case answer = "Answer"
        }
    }

    /// 文字识别结果
    public struct TextDetection: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 置信度 0 ~100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: [Coord]?

        /// 此字段为扩展字段。
        /// GeneralBasicOcr接口返回段落信息Parag，包含ParagNo。
        public let advancedInfo: String

        /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemPolygon: ItemCoord

        /// 识别出来的单字信息包括单字（包括单字Character和单字置信度confidence）， 支持识别的接口：GeneralBasicOCR、GeneralAccurateOCR
        public let words: [DetectedWords]

        /// 单字在原图中的四点坐标， 支持识别的接口：GeneralBasicOCR、GeneralAccurateOCR
        public let wordCoordPoint: [DetectedWordCoordPoint]

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case itemPolygon = "ItemPolygon"
            case words = "Words"
            case wordCoordPoint = "WordCoordPoint"
        }
    }

    /// 英文识别结果
    public struct TextDetectionEn: TCOutputModel {
        /// 识别出的文本行内容。
        public let detectedText: String

        /// 置信度 0 ~100。
        public let confidence: Int64

        /// 文本行在原图中的四点坐标。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: [Coord]?

        /// 此字段为扩展字段。目前EnglishOCR接口返回内容为空。
        public let advancedInfo: String

        /// 英文单词在原图中的四点坐标。
        public let wordCoordPoint: [WordCoordPoint]

        /// 候选字符集(包含候选字Character以及置信度Confidence)。
        public let candWord: [CandWord]

        /// 识别出来的单词信息（包括单词Character和单词置信度confidence）
        public let words: [Words]

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case wordCoordPoint = "WordCoordPoint"
            case candWord = "CandWord"
            case words = "Words"
        }
    }

    /// 识别结果
    public struct TextDetectionResult: TCOutputModel {
        /// 识别出的文本行内容
        public let value: String

        /// 坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        enum CodingKeys: String, CodingKey {
            case value = "Value"
            case polygon = "Polygon"
        }
    }

    /// 数学试题识别结果
    public struct TextEduPaper: TCOutputModel {
        /// 识别出的字段名称（关键字）
        public let item: String

        /// 识别出的字段名称对应的值，也就是字段Item对应的字符串结果
        public let detectedText: String

        /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemcoord: ItemCoord

        enum CodingKeys: String, CodingKey {
            case item = "Item"
            case detectedText = "DetectedText"
            case itemcoord = "Itemcoord"
        }
    }

    /// 数学公式识别结果
    public struct TextFormula: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
        }
    }

    /// 文字识别结果
    public struct TextGeneralHandwriting: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 置信度 0 - 100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        /// 此字段为扩展字段。
        /// 能返回文本行的段落信息，例如：{\"Parag\":{\"ParagNo\":2}}，
        /// 其中ParagNo为段落行，从1开始。
        public let advancedInfo: String

        /// 字的坐标数组，以四个顶点坐标表示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wordPolygon: [Polygon]?

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case wordPolygon = "WordPolygon"
        }
    }

    /// 表格识别结果
    public struct TextTable: TCOutputModel {
        /// 单元格左上角的列索引
        public let colTl: Int64

        /// 单元格左上角的行索引
        public let rowTl: Int64

        /// 单元格右下角的列索引
        public let colBr: Int64

        /// 单元格右下角的行索引
        public let rowBr: Int64

        /// 单元格文字
        public let text: String

        /// 单元格类型，包含body（表格主体）、header（表头）、footer（表尾）三种
        public let type: String

        /// 置信度 0 ~100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        /// 此字段为扩展字段
        public let advancedInfo: String

        enum CodingKeys: String, CodingKey {
            case colTl = "ColTl"
            case rowTl = "RowTl"
            case colBr = "ColBr"
            case rowBr = "RowBr"
            case text = "Text"
            case type = "Type"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
        }
    }

    /// 增值税发票识别结果
    public struct TextVatInvoice: TCOutputModel {
        /// 识别出的字段名称（关键字）。支持以下字段的识别：
        /// 发票代码、 发票号码、 打印发票代码、 打印发票号码、 开票日期、 购买方识别号、 小写金额、 价税合计(大写)、 销售方识别号、 校验码、 购买方名称、 销售方名称、 税额、 复核、 联次名称、 备注、 联次、 密码区、 开票人、 收款人、 （货物或应税劳务、服务名称）、省、 市、 服务类型、 通行费标志、 是否代开、 是否收购、 合计金额、 是否有公司印章、 发票消费类型、 车船税、 机器编号、 成品油标志、 税率、 合计税额、 （购买方地址、电话）、 （销售方地址、电话）、 单价、 金额、 销售方开户行及账号、 购买方开户行及账号、 规格型号、 发票名称、 单位、 数量、 校验码备选、 校验码后六位备选、发票号码备选、车牌号、类型、通行日期起、通行日期止、发票类型。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 字段在原图中的中的四点坐标。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: Polygon?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case polygon = "Polygon"
        }
    }

    /// 行驶证副页正面的识别结果
    public struct TextVehicleBack: TCOutputModel {
        /// 号牌号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let plateNo: String?

        /// 档案编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileNo: String?

        /// 核定人数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let allowNum: String?

        /// 总质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalMass: String?

        /// 整备质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let curbWeight: String?

        /// 核定载质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadQuality: String?

        /// 外廓尺寸
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let externalSize: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let marks: String?

        /// 检验记录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let record: String?

        /// 准牵引总质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalQuasiMass: String?

        enum CodingKeys: String, CodingKey {
            case plateNo = "PlateNo"
            case fileNo = "FileNo"
            case allowNum = "AllowNum"
            case totalMass = "TotalMass"
            case curbWeight = "CurbWeight"
            case loadQuality = "LoadQuality"
            case externalSize = "ExternalSize"
            case marks = "Marks"
            case record = "Record"
            case totalQuasiMass = "TotalQuasiMass"
        }
    }

    /// 行驶证主页正面的识别结果
    public struct TextVehicleFront: TCOutputModel {
        /// 号牌号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let plateNo: String?

        /// 车辆类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vehicleType: String?

        /// 所有人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let owner: String?

        /// 住址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let address: String?

        /// 使用性质
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let useCharacter: String?

        /// 品牌型号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let model: String?

        /// 车辆识别代号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vin: String?

        /// 发动机号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineNo: String?

        /// 注册日期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registerDate: String?

        /// 发证日期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let issueDate: String?

        /// 印章
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let seal: String?

        enum CodingKeys: String, CodingKey {
            case plateNo = "PlateNo"
            case vehicleType = "VehicleType"
            case owner = "Owner"
            case address = "Address"
            case useCharacter = "UseCharacter"
            case model = "Model"
            case vin = "Vin"
            case engineNo = "EngineNo"
            case registerDate = "RegisterDate"
            case issueDate = "IssueDate"
            case seal = "Seal"
        }
    }

    /// 运单识别结果
    public struct TextWaybill: TCOutputModel {
        /// 收件人姓名
        public let recName: WaybillObj

        /// 收件人手机号
        public let recNum: WaybillObj

        /// 收件人地址
        public let recAddr: WaybillObj

        /// 寄件人姓名
        public let senderName: WaybillObj

        /// 寄件人手机号
        public let senderNum: WaybillObj

        /// 寄件人地址
        public let senderAddr: WaybillObj

        /// 运单号
        public let waybillNum: WaybillObj

        enum CodingKeys: String, CodingKey {
            case recName = "RecName"
            case recNum = "RecNum"
            case recAddr = "RecAddr"
            case senderName = "SenderName"
            case senderNum = "SenderNum"
            case senderAddr = "SenderAddr"
            case waybillNum = "WaybillNum"
        }
    }

    /// 过路过桥费字段信息
    public struct TollInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称（关键字）。支持以下字段的识别：
        /// 发票代码、发票号码、日期、金额、入口、出口、时间、发票消费类型、高速标志。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 二手车销售统一发票信息
    public struct UsedVehicleInvoiceInfo: TCOutputModel {
        /// 所属税局
        public let taxBureau: String

        /// 买方单位/个人
        public let buyer: String

        /// 买方单位代码/身份证号码
        public let buyerNo: String

        /// 买方单位/个人地址
        public let buyerAddress: String

        /// 买方单位电话
        public let buyerTel: String

        /// 卖方单位/个人
        public let seller: String

        /// 卖方单位代码/身份证号码
        public let sellerNo: String

        /// 卖方单位/个人地址
        public let sellerAddress: String

        /// 卖方单位电话
        public let sellerTel: String

        /// 车牌照号
        public let vehicleLicenseNo: String

        /// 登记证号
        public let registerNo: String

        /// 车架号/车辆识别代码
        public let vehicleIdentifyNo: String

        /// 转入地车辆管理所名称
        public let managementOffice: String

        /// 车价合计
        public let vehicleTotalPrice: String

        /// 经营、拍卖单位
        public let auctioneer: String

        /// 经营、拍卖单位地址
        public let auctioneerAddress: String

        /// 经营、拍卖单位纳税人识别号
        public let auctioneerTaxpayerNum: String

        /// 经营、拍卖单位开户银行、账号
        public let auctioneerBankAccount: String

        /// 经营、拍卖单位电话
        public let auctioneerTel: String

        /// 二手车市场
        public let market: String

        /// 二手车市场纳税人识别号
        public let marketTaxpayerNum: String

        /// 二手车市场地址
        public let marketAddress: String

        /// 二手车市场开户银行账号
        public let marketBankAccount: String

        /// 二手车市场电话
        public let marketTel: String

        enum CodingKeys: String, CodingKey {
            case taxBureau = "TaxBureau"
            case buyer = "Buyer"
            case buyerNo = "BuyerNo"
            case buyerAddress = "BuyerAddress"
            case buyerTel = "BuyerTel"
            case seller = "Seller"
            case sellerNo = "SellerNo"
            case sellerAddress = "SellerAddress"
            case sellerTel = "SellerTel"
            case vehicleLicenseNo = "VehicleLicenseNo"
            case registerNo = "RegisterNo"
            case vehicleIdentifyNo = "VehicleIdentifyNo"
            case managementOffice = "ManagementOffice"
            case vehicleTotalPrice = "VehicleTotalPrice"
            case auctioneer = "Auctioneer"
            case auctioneerAddress = "AuctioneerAddress"
            case auctioneerTaxpayerNum = "AuctioneerTaxpayerNum"
            case auctioneerBankAccount = "AuctioneerBankAccount"
            case auctioneerTel = "AuctioneerTel"
            case market = "Market"
            case marketTaxpayerNum = "MarketTaxpayerNum"
            case marketAddress = "MarketAddress"
            case marketBankAccount = "MarketBankAccount"
            case marketTel = "MarketTel"
        }
    }

    /// 增值税发票信息
    public struct VatInvoice: TCOutputModel {
        /// 发票代码
        public let code: String

        /// 发票号码
        public let number: String

        /// 开票日期
        public let date: String

        /// 购方抬头
        public let buyerName: String

        /// 购方税号
        public let buyerTaxCode: String

        /// 购方地址电话
        public let buyerAddressPhone: String

        /// 购方银行账号
        public let buyerBankAccount: String

        /// 销方名称
        public let sellerName: String

        /// 销方税号
        public let sellerTaxCode: String

        /// 销方地址电话
        public let sellerAddressPhone: String

        /// 销方银行账号
        public let sellerBankAccount: String

        /// 备注
        public let remark: String

        /// 机器编码
        public let machineNo: String

        /// 票种类型
        /// 01：增值税专用发票，
        /// 02：货运运输业增值税专用发票，
        /// 03：机动车销售统一发票，
        /// 04：增值税普通发票，
        /// 08：增值税电子专用发票（含全电，全电仅新版接口支持），
        /// 10：增值税电子普通发票（含全电，全电仅新版接口支持），
        /// 11：增值税普通发票（卷式），
        /// 14：增值税电子（通行费）发票，
        /// 15：二手车销售统一发票，
        /// 32：深圳区块链发票，
        /// 102：通用机打电子发票
        public let type: String

        /// 检验码
        public let checkCode: String

        /// 是否作废（红冲）是否作废（红冲）
        /// Y：已作废，N：未作废，H：红冲，HP：部分红冲，HF：全额红冲
        public let isAbandoned: String

        /// 是否有销货清单
        /// Y: 有清单 N：无清单
        /// 卷票无
        public let hasSellerList: String

        /// 销货清单标题
        public let sellerListTitle: String

        /// 销货清单税额
        public let sellerListTax: String

        /// 不含税金额
        public let amountWithoutTax: String

        /// 税额
        public let taxAmount: String

        /// 含税金额
        public let amountWithTax: String

        /// 项目明细
        public let items: [VatInvoiceItem]

        /// 所属税局
        public let taxBureau: String

        /// 通行费标志:Y、是;N、否
        public let trafficFreeFlag: String

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case number = "Number"
            case date = "Date"
            case buyerName = "BuyerName"
            case buyerTaxCode = "BuyerTaxCode"
            case buyerAddressPhone = "BuyerAddressPhone"
            case buyerBankAccount = "BuyerBankAccount"
            case sellerName = "SellerName"
            case sellerTaxCode = "SellerTaxCode"
            case sellerAddressPhone = "SellerAddressPhone"
            case sellerBankAccount = "SellerBankAccount"
            case remark = "Remark"
            case machineNo = "MachineNo"
            case type = "Type"
            case checkCode = "CheckCode"
            case isAbandoned = "IsAbandoned"
            case hasSellerList = "HasSellerList"
            case sellerListTitle = "SellerListTitle"
            case sellerListTax = "SellerListTax"
            case amountWithoutTax = "AmountWithoutTax"
            case taxAmount = "TaxAmount"
            case amountWithTax = "AmountWithTax"
            case items = "Items"
            case taxBureau = "TaxBureau"
            case trafficFreeFlag = "TrafficFreeFlag"
        }
    }

    /// 发票商品
    public struct VatInvoiceGoodsInfo: TCOutputModel {
        /// 项目名称
        public let item: String

        /// 规格型号
        public let specification: String

        /// 单位
        public let measurementDimension: String

        /// 价格
        public let price: String

        /// 数量
        public let quantity: String

        /// 金额
        public let amount: String

        /// 税率(如6%、免税)
        public let taxScheme: String

        /// 税额
        public let taxAmount: String

        enum CodingKeys: String, CodingKey {
            case item = "Item"
            case specification = "Specification"
            case measurementDimension = "MeasurementDimension"
            case price = "Price"
            case quantity = "Quantity"
            case amount = "Amount"
            case taxScheme = "TaxScheme"
            case taxAmount = "TaxAmount"
        }
    }

    /// 增值税发票项目明细
    public struct VatInvoiceItem: TCOutputModel {
        /// 行号
        public let lineNo: String

        /// 名称
        public let name: String

        /// 规格
        public let spec: String

        /// 单位
        public let unit: String

        /// 数量
        public let quantity: String

        /// 单价
        public let unitPrice: String

        /// 不含税金额
        public let amountWithoutTax: String

        /// 税率
        public let taxRate: String

        /// 税额
        public let taxAmount: String

        /// 税收分类编码
        public let taxClassifyCode: String

        enum CodingKeys: String, CodingKey {
            case lineNo = "LineNo"
            case name = "Name"
            case spec = "Spec"
            case unit = "Unit"
            case quantity = "Quantity"
            case unitPrice = "UnitPrice"
            case amountWithoutTax = "AmountWithoutTax"
            case taxRate = "TaxRate"
            case taxAmount = "TaxAmount"
            case taxClassifyCode = "TaxClassifyCode"
        }
    }

    /// 发票人员信息
    public struct VatInvoiceUserInfo: TCOutputModel {
        /// 名称
        public let name: String

        /// 纳税人识别号
        public let taxId: String

        /// 地 址、电 话
        public let addrTel: String

        /// 开户行及账号
        public let financialAccount: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case taxId = "TaxId"
            case addrTel = "AddrTel"
            case financialAccount = "FinancialAccount"
        }
    }

    /// 增值税发票卷票信息
    public struct VatRollInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、合计金额(小写)、合计金额(大写)、开票日期、发票号码、购买方识别号、销售方识别号、校验码、销售方名称、购买方名称、发票消费类型、省、市、是否有公司印章、单价、金额、数量、服务类型、品名、种类。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 机动车销售统一发票信息
    public struct VehicleInvoiceInfo: TCOutputModel {
        /// 车辆类型
        public let carType: String

        /// 厂牌型号
        public let plateModel: String

        /// 产地
        public let produceAddress: String

        /// 合格证号
        public let certificateNo: String

        /// 进口证明书号
        public let importNo: String

        /// LSVCA2NP9HN0xxxxx
        public let vinNo: String

        /// 完税证书号
        public let payTaxesNo: String

        /// 吨位
        public let tonnage: String

        /// 限乘人数
        public let limitCount: String

        /// 发动机号码
        public let engineNo: String

        /// 商检单号
        public let bizCheckFormNo: String

        /// 主管税务机关代码
        public let taxtationOrgCode: String

        /// 主管税务机关名称
        public let taxtationOrgName: String

        /// 税率
        public let motorTaxRate: String

        /// 开户行
        public let motorBankName: String

        /// 账号
        public let motorBankAccount: String

        /// 销售地址
        public let sellerAddress: String

        /// 销售电话
        public let sellerTel: String

        /// 购方身份证
        public let buyerNo: String

        enum CodingKeys: String, CodingKey {
            case carType = "CarType"
            case plateModel = "PlateModel"
            case produceAddress = "ProduceAddress"
            case certificateNo = "CertificateNo"
            case importNo = "ImportNo"
            case vinNo = "VinNo"
            case payTaxesNo = "PayTaxesNo"
            case tonnage = "Tonnage"
            case limitCount = "LimitCount"
            case engineNo = "EngineNo"
            case bizCheckFormNo = "BizCheckFormNo"
            case taxtationOrgCode = "TaxtationOrgCode"
            case taxtationOrgName = "TaxtationOrgName"
            case motorTaxRate = "MotorTaxRate"
            case motorBankName = "MotorBankName"
            case motorBankAccount = "MotorBankAccount"
            case sellerAddress = "SellerAddress"
            case sellerTel = "SellerTel"
            case buyerNo = "BuyerNo"
        }
    }

    /// 机动车登记证书识别结果
    public struct VehicleRegCertInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 【注册登记页】
        /// 车辆型号、车辆识别代号/车架号、发动机号、制造厂名称、轴距、轮胎数、总质量、外廓尺寸、轴数、车辆出厂日期、发证日期、使用性质、车辆获得方式、车辆类型、国产/进口、燃料种类、车身颜色、发动机型号、车辆品牌、编号、转向形式、
        /// 机动车所有人1、身份证明名称1、号码1、登记机关1、登记日期1
        /// 机动车所有人2、身份证明名称2、号码2、登记机关2、登记日期2
        /// 机动车所有人3、身份证明名称3、号码3、登记机关3、登记日期3
        /// 机动车所有人4、身份证明名称4、号码4、登记机关4、登记日期4
        /// 机动车所有人5、身份证明名称5、号码5、登记机关5、登记日期5
        /// 机动车所有人6、身份证明名称6、号码6、登记机关6、登记日期6
        /// 机动车所有人7、身份证明名称7、号码7、登记机关7、登记日期7
        /// 【抵押登记页】
        /// 机动车登记证书编号、身份证明名称/号码、抵押权人姓名/名称、抵押登记日期。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 运单识别对象
    public struct WaybillObj: TCOutputModel {
        /// 识别出的文本行内容
        public let text: String

        enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    /// 英文OCR识别出的单词在原图中的四点坐标数组
    public struct WordCoordPoint: TCOutputModel {
        /// 英文OCR识别出的每个单词在原图中的四点坐标。
        public let wordCoordinate: [Coord]

        enum CodingKeys: String, CodingKey {
            case wordCoordinate = "WordCoordinate"
        }
    }

    /// 识别出来的单词信息包括单词（包括单词Character和单词置信度confidence）
    public struct Words: TCOutputModel {
        /// 置信度 0 ~100
        public let confidence: Int64

        /// 候选字Character
        public let character: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case character = "Character"
        }
    }
}
