//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ocr {
    /// 广告文字识别结果
    public struct AdvertiseTextDetection: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 置信度 0 ~100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        /// 此字段为扩展字段。
        /// GeneralBasicOcr接口返回段落信息Parag，包含ParagNo。
        public let advancedInfo: String

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
        }
    }

    /// 机票行程单
    public struct AirTransport: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 电子客票号码
        public let number: String?

        /// 校验码
        public let checkCode: String?

        /// 印刷序号
        public let serialNumber: String?

        /// 开票日期
        public let date: String?

        /// 销售单位代号
        public let agentCode: String?

        /// 销售单位代号第一行
        public let agentCodeFirst: String?

        /// 销售单位代号第二行
        public let agentCodeSecond: String?

        /// 姓名
        public let userName: String?

        /// 身份证号
        public let userID: String?

        /// 填开单位
        public let issuer: String?

        /// 票价
        public let fare: String?

        /// 合计税额
        public let tax: String?

        /// 燃油附加费
        public let fuelSurcharge: String?

        /// 民航发展基金
        public let airDevelopmentFund: String?

        /// 保险费
        public let insurance: String?

        /// 合计金额（小写）
        public let total: String?

        /// 发票消费类型
        public let kind: String?

        /// 国内国际标签
        public let domesticInternationalTag: String?

        /// 客票生效日期
        public let dateStart: String?

        /// 有效截至日期
        public let dateEnd: String?

        /// 签注
        public let endorsement: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 条目
        public let flightItems: [FlightItem]?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case number = "Number"
            case checkCode = "CheckCode"
            case serialNumber = "SerialNumber"
            case date = "Date"
            case agentCode = "AgentCode"
            case agentCodeFirst = "AgentCodeFirst"
            case agentCodeSecond = "AgentCodeSecond"
            case userName = "UserName"
            case userID = "UserID"
            case issuer = "Issuer"
            case fare = "Fare"
            case tax = "Tax"
            case fuelSurcharge = "FuelSurcharge"
            case airDevelopmentFund = "AirDevelopmentFund"
            case insurance = "Insurance"
            case total = "Total"
            case kind = "Kind"
            case domesticInternationalTag = "DomesticInternationalTag"
            case dateStart = "DateStart"
            case dateEnd = "DateEnd"
            case endorsement = "Endorsement"
            case qrCodeMark = "QRCodeMark"
            case flightItems = "FlightItems"
        }
    }

    /// 银行回单识别出的字段
    public struct BankSlipInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 付款开户行、收款开户行、付款账号、收款账号、回单类型、回单编号、币种、流水号、凭证号码、交易机构、交易金额、手续费、日期等字段信息。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 验真接口
    public struct BizLicenseVerifyResult: TCOutputModel {
        /// “0“：一致
        /// “-1”：不一致
        public let regNum: String

        /// “0“：一致
        /// “-1”：不一致
        /// “”：不验真
        public let name: String

        /// “0“：一致
        /// “-1”：不一致
        /// “”：不验真
        public let address: String

        enum CodingKeys: String, CodingKey {
            case regNum = "RegNum"
            case name = "Name"
            case address = "Address"
        }
    }

    /// 汽车票
    public struct BusInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 发票号码
        public let number: String?

        /// 发票代码
        public let code: String?

        /// 开票日期
        public let date: String?

        /// 乘车时间
        public let timeGetOn: String?

        /// 乘车日期
        public let dateGetOn: String?

        /// 出发车站
        public let stationGetOn: String?

        /// 到达车站
        public let stationGetOff: String?

        /// 票价
        public let total: String?

        /// 姓名
        public let userName: String?

        /// 消费类型
        public let kind: String?

        /// 身份证号
        public let userID: String?

        /// 省
        public let province: String?

        /// 市
        public let city: String?

        /// 乘车地点
        public let placeGetOn: String?

        /// 检票口
        public let gateNumber: String?

        /// 客票类型
        public let ticketType: String?

        /// 车型
        public let vehicleType: String?

        /// 座位号
        public let seatNumber: String?

        /// 车次
        public let trainNumber: String?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case qrCodeMark = "QRCodeMark"
            case number = "Number"
            case code = "Code"
            case date = "Date"
            case timeGetOn = "TimeGetOn"
            case dateGetOn = "DateGetOn"
            case stationGetOn = "StationGetOn"
            case stationGetOff = "StationGetOff"
            case total = "Total"
            case userName = "UserName"
            case kind = "Kind"
            case userID = "UserID"
            case province = "Province"
            case city = "City"
            case placeGetOn = "PlaceGetOn"
            case gateNumber = "GateNumber"
            case ticketType = "TicketType"
            case vehicleType = "VehicleType"
            case seatNumber = "SeatNumber"
            case trainNumber = "TrainNumber"
        }
    }

    /// 汽车票字段信息
    public struct BusInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、发票号码、日期、票价、始发地、目的地、姓名、时间、发票消费类型、身份证号、省、市、开票日期、乘车地点、检票口、客票类型、车型、座位号、车次。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 名片识别结果
    public struct BusinessCardInfo: TCOutputModel {
        /// 识别出的字段名称（关键字，可能重复，比如多个手机），能识别的字段名为：
        /// 姓名、英文姓名、英文地址、公司、英文公司、职位、英文职位、部门、英文部门、手机、电话、传真、社交帐号、QQ、MSN、微信、微博、邮箱、邮编、网址、公司账号、其他。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemCoord: ItemCoord

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case itemCoord = "ItemCoord"
        }
    }

    /// 候选字符集(包含候选字Character以及置信度Confidence)
    public struct CandWord: TCOutputModel {
        /// 候选字符集的单词信息（包括单词Character和单词置信度confidence）
        public let candWords: [Words]

        enum CodingKeys: String, CodingKey {
            case candWords = "CandWords"
        }
    }

    /// 购车发票识别结果
    public struct CarInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、 机打代码、 发票号码、 发动机号码、 合格证号、 机打号码、 价税合计(小写)、 销货单位名称、 身份证号码/组织机构代码、 购买方名称、 销售方纳税人识别号、 购买方纳税人识别号、主管税务机关、 主管税务机关代码、 开票日期、 不含税价(小写)、 吨位、增值税税率或征收率、 车辆识别代号/车架号码、 增值税税额、 厂牌型号、 省、 市、 发票消费类型、 销售方电话、 销售方账号、 产地、 进口证明书号、 车辆类型、 机器编号、备注、开票人、限乘人数、商检单号、销售方地址、销售方开户银行、价税合计、发票类型。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 字段在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        /// 字段在原图中的四点坐标。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: Polygon?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
            case polygon = "Polygon"
        }
    }

    /// 单元格识别结果
    public struct CellContent: TCOutputModel {
        /// 段落编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paragNo: Int64?

        /// 字体大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wordSize: Int64?

        enum CodingKeys: String, CodingKey {
            case paragNo = "ParagNo"
            case wordSize = "WordSize"
        }
    }

    /// 卡证智能分类结果
    public struct ClassifyDetectInfo: TCOutputModel {
        /// 分类名称，包括：身份证、护照、名片、银行卡、行驶证、驾驶证、港澳台通行证、户口本、港澳台来往内地通行证、港澳台居住证、不动产证、营业执照
        public let name: String

        /// 分类类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 位置坐标
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case rect = "Rect"
        }
    }

    /// 坐标
    public struct Coord: TCOutputModel {
        /// 横坐标
        public let x: Int64

        /// 纵坐标
        public let y: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
        }
    }

    /// 单字在原图中的坐标，以四个顶点坐标表示，以左上角为起点，顺时针返回。
    public struct DetectedWordCoordPoint: TCOutputModel {
        /// 单字在原图中的坐标，以四个顶点坐标表示，以左上角为起点，顺时针返回。
        public let wordCoordinate: [Coord]

        enum CodingKeys: String, CodingKey {
            case wordCoordinate = "WordCoordinate"
        }
    }

    /// 识别出来的单字信息包括单字（包括单字Character和单字置信度confidence）
    public struct DetectedWords: TCOutputModel {
        /// 置信度 0 ~100
        public let confidence: Int64

        /// 候选字Character
        public let character: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case character = "Character"
        }
    }

    /// 识别出的字段
    public struct DutyPaidProofInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 税号 、纳税人识别号 、纳税人名称 、金额合计大写 、金额合计小写 、填发日期 、税务机关 、填票人。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 企业证照单个字段的内容
    public struct EnterpriseLicenseInfo: TCOutputModel {
        /// 识别出的字段名称（关键字），不同证件类型可能不同，证件类型包含企业登记证书、许可证书、企业执照、三证合一类证书；
        /// 支持以下字段：统一社会信用代码、法定代表人、公司名称、公司地址、注册资金、企业类型、经营范围、成立日期、有效期、开办资金、经费来源、举办单位等；
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 金融票据整单识别单个字段的内容
    public struct FinanBillInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 【进账单】
        /// 日期、出票全称、出票账号、出票开户行、收款人全称、收款人账号、收款开户行、大写金额、小写金额、票据种类、票据张数、票据号码；
        /// 【支票】
        /// 开户银行、支票种类、凭证号码2、日期、大写金额、小写金额、付款行编号、密码、凭证号码1；
        /// 【银行承兑汇票】或【商业承兑汇票】
        /// 出票日期、行号1、行号2、出票人全称、出票人账号、付款行全称、收款人全称、收款人账号、收款人开户行、出票金额大写、出票金额小写、汇票到期日、付款行行号、付款行地址。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 金融票据切片识别单个字段的内容
    public struct FinanBillSliceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 大写金额、小写金额、账号、票号1、票号2、收款人、大写日期、同城交换号、地址-省份、地址-城市、付款行全称、支票密码、支票用途。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 机票行程单识别结果
    public struct FlightInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 票价、合计金额、填开日期、有效身份证件号码、电子客票号码、验证码、旅客姓名、填开单位、其他税费、燃油附加费、民航发展基金、保险费、销售单位代号、始发地、目的地、航班号、时间、日期、座位等级、承运人、发票消费类型、国内国际标签、印刷序号、客票级别/类别、客票生效日期、有效期截止日期、免费行李。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段 Name 对应的字符串结果。
        public let value: String

        /// 多个行程的字段所在行号，下标从0开始，非行字段或未能识别行号的该值返回-1。
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case row = "Row"
        }
    }

    /// 机票行程卡条目
    public struct FlightItem: TCOutputModel {
        /// 出发航站楼
        public let terminalGetOn: String?

        /// 到达航站楼
        public let terminalGetOff: String?

        /// 承运人
        public let carrier: String?

        /// 航班号
        public let flightNumber: String?

        /// 座位等级
        public let seat: String?

        /// 乘机日期
        public let dateGetOn: String?

        /// 乘机时间
        public let timeGetOn: String?

        /// 出发站
        public let stationGetOn: String?

        /// 到达站
        public let stationGetOff: String?

        /// 免费行李
        public let allow: String?

        /// 客票级别/客票类别
        public let fareBasis: String?

        enum CodingKeys: String, CodingKey {
            case terminalGetOn = "TerminalGetOn"
            case terminalGetOff = "TerminalGetOff"
            case carrier = "Carrier"
            case flightNumber = "FlightNumber"
            case seat = "Seat"
            case dateGetOn = "DateGetOn"
            case timeGetOn = "TimeGetOn"
            case stationGetOn = "StationGetOn"
            case stationGetOff = "StationGetOff"
            case allow = "Allow"
            case fareBasis = "FareBasis"
        }
    }

    /// 通用机打发票条目
    public struct GeneralMachineItem: TCOutputModel {
        /// 项目名称
        public let name: String?

        /// 规格型号
        public let specification: String?

        /// 单位
        public let unit: String?

        /// 数量
        public let quantity: String?

        /// 单价
        public let price: String?

        /// 金额
        public let total: String?

        /// 税率
        public let taxRate: String?

        /// 税额
        public let tax: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case specification = "Specification"
            case unit = "Unit"
            case quantity = "Quantity"
            case price = "Price"
            case total = "Total"
            case taxRate = "TaxRate"
            case tax = "Tax"
        }
    }

    /// 组在图中的序号
    public struct GroupInfo: TCOutputModel {
        /// 每一行的元素
        public let groups: [LineInfo]?

        enum CodingKeys: String, CodingKey {
            case groups = "Groups"
        }
    }

    /// 保险单据信息
    public struct InsuranceBillInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 【病案首页】
        /// 姓名、性别、出生日期、出院诊断、疾病编码、入院病情等。
        /// 【费用清单】
        /// 医疗参保人员类别、身份证号、入院方式、结账日期、项目、金额等。
        /// 【结算单】
        /// 名称、单价、数量、金额、医保内、医保外等。
        /// 【医疗发票】
        /// 姓名、性别、住院时间、收费项目、金额、合计等。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 票据检测结果
    public struct InvoiceDetectInfo: TCOutputModel {
        /// 识别出的图片在混贴票据图片中的旋转角度。
        public let angle: Float

        /// 识别出的图片所属的票据类型。
        /// -1：未知类型
        /// 0：出租车发票
        /// 1：定额发票
        /// 2：火车票
        /// 3：增值税发票
        /// 4：客运限额发票
        /// 5：机票行程单
        /// 6：酒店账单
        /// 7：完税证明
        /// 8：通用机打发票
        /// 9：汽车票
        /// 10：轮船票
        /// 11：增值税发票（卷票 ）
        /// 12：购车发票
        /// 13：过路过桥费发票
        /// 14：购物小票
        public let type: Int64

        /// 识别出的图片在混贴票据图片中的位置信息。与Angel结合可以得出原图位置，组成RotatedRect((X+0.5\*Width,Y+0.5\*Height), (Width, Height), Angle)，详情可参考OpenCV文档。
        public let rect: Rect

        /// 入参 ReturnImage 为 True 时返回 Base64 编码后的图片。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let image: String?

        enum CodingKeys: String, CodingKey {
            case angle = "Angle"
            case type = "Type"
            case rect = "Rect"
            case image = "Image"
        }
    }

    /// 通用机打发票信息
    public struct InvoiceGeneralInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段识别（注：下划线表示一个字段）：
        /// 发票代码、发票号码、日期、合计金额(小写)、合计金额(大写)、购买方识别号、销售方识别号、校验码、购买方名称、销售方名称、时间、种类、发票消费类型、省、市、是否有公司印章、发票名称、<span style="text-decoration:underline">购买方地址、电话</span>、<span style="text-decoration:underline">销售方地址、电话</span>、购买方开户行及账号、销售方开户行及账号、经办人取票用户、经办人支付信息、经办人商户号、经办人订单号、<span style="text-decoration:underline">货物或应税劳务、服务名称</span>、数量、单价、税率、税额、金额、单位、规格型号、合计税额、合计金额、备注、收款人、复核、开票人、密码区、行业分类
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 混贴票据单张发票识别信息
    public struct InvoiceItem: TCOutputModel {
        /// 识别结果。
        /// OK：表示识别成功；FailedOperation.UnsupportedInvoice：表示不支持识别；
        /// FailedOperation.UnKnowError：表示识别失败；
        /// 其它错误码见各个票据接口的定义。
        public let code: String

        /// 识别出的图片所属的票据类型。
        /// -1：未知类型
        /// 0：出租车发票
        /// 1：定额发票
        /// 2：火车票
        /// 3：增值税发票
        /// 5：机票行程单
        /// 8：通用机打发票
        /// 9：汽车票
        /// 10：轮船票
        /// 11：增值税发票（卷票）
        /// 12：购车发票
        /// 13：过路过桥费发票
        /// 15：非税发票
        /// 16：全电发票
        /// 17：医疗发票
        public let type: Int64

        /// 该发票在原图片中的四点坐标。
        public let polygon: Polygon

        /// 识别出的图片在混贴票据图片中的旋转角度。
        public let angle: Float

        /// 识别到的内容。
        public let singleInvoiceInfos: SingleInvoiceItem

        /// 发票处于识别图片或PDF文件中的页教，默认从1开始。
        public let page: Int64

        /// 发票详细类型，详见上方 SubType 返回值说明
        public let subType: String

        /// 发票类型描述，详见上方 TypeDescription  返回值说明
        public let typeDescription: String

        /// 切割单图文件，Base64编码后的切图后的图片文件，开启 EnableCutImage 后进行返回
        public let cutImage: String

        /// 发票详细类型描述，详见上方 SubType 返回值说明
        public let subTypeDescription: String

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case type = "Type"
            case polygon = "Polygon"
            case angle = "Angle"
            case singleInvoiceInfos = "SingleInvoiceInfos"
            case page = "Page"
            case subType = "SubType"
            case typeDescription = "TypeDescription"
            case cutImage = "CutImage"
            case subTypeDescription = "SubTypeDescription"
        }
    }

    /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
    public struct ItemCoord: TCOutputModel {
        /// 左上角x
        public let x: Int64

        /// 左上角y
        public let y: Int64

        /// 宽width
        public let width: Int64

        /// 高height
        public let height: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 智能结构化元素组
    public struct ItemInfo: TCOutputModel {
        /// key信息组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: Key?

        /// Value信息组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: Value?

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// key信息组
    public struct Key: TCOutputModel {
        /// 自动识别的字段名称
        public let autoName: String?

        /// 定义的字段名称（传key的名称）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let configName: String?

        enum CodingKeys: String, CodingKey {
            case autoName = "AutoName"
            case configName = "ConfigName"
        }
    }

    /// 全部车牌信息
    public struct LicensePlateInfo: TCOutputModel {
        /// 识别出的车牌号码。
        public let number: String

        /// 置信度，0 - 100 之间。
        public let confidence: Int64

        /// 文本行在原图片中的像素坐标框。
        public let rect: Rect

        /// 识别出的车牌颜色，目前支持颜色包括 “白”、“黑”、“蓝”、“绿“、“黄”、“黄绿”、“临牌”。
        public let color: String

        enum CodingKeys: String, CodingKey {
            case number = "Number"
            case confidence = "Confidence"
            case rect = "Rect"
            case color = "Color"
        }
    }

    /// 按行输出，行序号
    public struct LineInfo: TCOutputModel {
        /// 每行的一个元素
        public let lines: [ItemInfo]?

        enum CodingKeys: String, CodingKey {
            case lines = "Lines"
        }
    }

    /// 通用机打发票
    public struct MachinePrintedInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 开票日期
        public let date: String?

        /// 时间
        public let time: String?

        /// 校验码
        public let checkCode: String?

        /// 密码区
        public let ciphertext: String?

        /// 种类
        public let category: String?

        /// 税前金额
        public let pretaxAmount: String?

        /// 价税合计（小写）
        public let total: String?

        /// 价税合计（大写）
        public let totalCn: String?

        /// 合计税额
        public let tax: String?

        /// 行业分类
        public let industryClass: String?

        /// 销售方名称
        public let seller: String?

        /// 销售方纳税人识别号
        public let sellerTaxID: String?

        /// 销售方地址电话
        public let sellerAddrTel: String?

        /// 销售方银行账号
        public let sellerBankAccount: String?

        /// 购买方名称
        public let buyer: String?

        /// 购买方纳税人识别号
        public let buyerTaxID: String?

        /// 购买方地址电话
        public let buyerAddrTel: String?

        /// 购买方银行账号
        public let buyerBankAccount: String?

        /// 发票消费类型
        public let kind: String?

        /// 省
        public let province: String?

        /// 市
        public let city: String?

        /// 是否有公司印章（0：没有，1：有）
        public let companySealMark: Int64?

        /// 是否为浙江/广东通用机打发票（0：没有，1：有）
        public let electronicMark: Int64?

        /// 开票人
        public let issuer: String?

        /// 收款人
        public let receiptor: String?

        /// 复核人
        public let reviewer: String?

        /// 备注
        public let remark: String?

        /// 经办人支付信息
        public let paymentInfo: String?

        /// 经办人取票用户
        public let ticketPickupUser: String?

        /// 经办人商户号
        public let merchantNumber: String?

        /// 经办人订单号
        public let orderNumber: String?

        /// 条目
        public let generalMachineItems: [GeneralMachineItem]?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case qrCodeMark = "QRCodeMark"
            case code = "Code"
            case number = "Number"
            case date = "Date"
            case time = "Time"
            case checkCode = "CheckCode"
            case ciphertext = "Ciphertext"
            case category = "Category"
            case pretaxAmount = "PretaxAmount"
            case total = "Total"
            case totalCn = "TotalCn"
            case tax = "Tax"
            case industryClass = "IndustryClass"
            case seller = "Seller"
            case sellerTaxID = "SellerTaxID"
            case sellerAddrTel = "SellerAddrTel"
            case sellerBankAccount = "SellerBankAccount"
            case buyer = "Buyer"
            case buyerTaxID = "BuyerTaxID"
            case buyerAddrTel = "BuyerAddrTel"
            case buyerBankAccount = "BuyerBankAccount"
            case kind = "Kind"
            case province = "Province"
            case city = "City"
            case companySealMark = "CompanySealMark"
            case electronicMark = "ElectronicMark"
            case issuer = "Issuer"
            case receiptor = "Receiptor"
            case reviewer = "Reviewer"
            case remark = "Remark"
            case paymentInfo = "PaymentInfo"
            case ticketPickupUser = "TicketPickupUser"
            case merchantNumber = "MerchantNumber"
            case orderNumber = "OrderNumber"
            case generalMachineItems = "GeneralMachineItems"
        }
    }

    /// 医疗票据信息
    public struct MedicalInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 价税合计（小写）
        public let total: String?

        /// 价税合计（大写）
        public let totalCn: String?

        /// 开票日期
        public let date: String?

        /// 校验码
        public let checkCode: String?

        /// 发票属地
        public let place: String?

        /// 复核人
        public let reviewer: String?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case code = "Code"
            case number = "Number"
            case total = "Total"
            case totalCn = "TotalCn"
            case date = "Date"
            case checkCode = "CheckCode"
            case place = "Place"
            case reviewer = "Reviewer"
        }
    }

    /// 医疗发票识别结果
    public struct MedicalInvoiceInfo: TCOutputModel {
        /// 医疗发票识别结果条目
        public let medicalInvoiceItems: [MedicalInvoiceItem]

        enum CodingKeys: String, CodingKey {
            case medicalInvoiceItems = "MedicalInvoiceItems"
        }
    }

    /// 医疗发票识别结果
    public struct MedicalInvoiceItem: TCOutputModel {
        /// 识别出的字段名称
        ///
        /// | 分类 | name |
        /// |---|---|
        /// | 票据基本信息 | 发票名称 |
        /// | | 票据代码 |
        /// | | 票据号码 |
        /// | | 电子票据代码 |
        /// | | 电子票据号码 |
        /// | | 交款人统一社会信用代码 |
        /// | | 校验码 |
        /// | | 交款人 |
        /// | | 开票日期 |
        /// | | 收款单位 |
        /// | | 复核人 |
        /// | | 收款人 |
        /// | | 业务流水号 |
        /// | | 门诊号 |
        /// | | 就诊日期 |
        /// | | 医疗机构类型 |
        /// | | 医保类型 |
        /// | | 医保编号 |
        /// | | 性别 |
        /// | | 医保统筹基金支付 |
        /// | | 其他支付 |
        /// | | 个人账户支付 |
        /// | | 个人现金支付 |
        /// | | 个人自付 |
        /// | | 个人自费 |
        /// | | 病历号 |
        /// | | 住院号 |
        /// | | 住院科别 |
        /// | | 住院时间 |
        /// | | 预缴金额 |
        /// | | 补缴金额 |
        /// | | 退费金额 |
        /// | | 发票属地 |
        /// | | 发票类型 |
        /// | 总金额 | 总金额大写 |
        /// | | 总金额小写 |
        /// | 收费大项 | 大项名称 |
        /// | | 大项金额 |
        /// | 收费细项 | 项目名称 |
        /// | | 数量 |
        /// | | 单位 |
        /// | | 金额 |
        /// | | 备注 |
        /// | 票据其他信息 | 入院时间 |
        /// | | 出院时间 |
        /// | | 住院天数 |
        /// | | 自付二 |
        /// | | 自付一 |
        /// | | 起付金额 |
        /// | | 超封顶金额 |
        /// | | 自费 |
        /// | | 本次医保范围内金额 |
        /// | | 累计医保内范围金额 |
        /// | | 门诊大额支付 |
        /// | | 残军补助支付 |
        /// | | 年度门诊大额累计支付 |
        /// | | 单位补充险[原公疗]支付 |
        /// | | 社会保障卡号 |
        /// | | 姓名 |
        /// | | 交易流水号 |
        /// | | 本次支付后个人账户余额 |
        /// | | 基金支付 |
        /// | | 现金支付 |
        /// | | 复核 |
        /// | | 自负 |
        /// | | 结算方式 |
        /// | | 医保统筹/公医记账 |
        /// | | 其他 |
        /// | | 个人支付金额 |
        /// | | 欠费 |
        /// | | 退休补充支付 |
        /// | | 医院类型 |
        /// | | 退款 |
        /// | | 补收 |
        /// | | 附加支付 |
        /// | | 分类自负 |
        /// | | 其它 |
        /// | | 预交款 |
        /// | | 个人缴费 |
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果
        public let content: String

        /// 识别出的文本行四点坐标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vertex: Polygon?

        /// 识别出的文本行在旋转纠正之后的图像中的像素坐标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coord: Rect?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case content = "Content"
            case vertex = "Vertex"
            case coord = "Coord"
        }
    }

    /// 混贴票据单张发票识别信息
    public struct MixedInvoiceItem: TCOutputModel {
        /// 识别结果。
        /// OK：表示识别成功；FailedOperation.UnsupportedInvioce：表示不支持识别；
        /// FailedOperation.UnKnowError：表示识别失败；
        /// 其它错误码见各个票据接口的定义。
        public let code: String

        /// 识别出的图片所属的票据类型。
        /// -1：未知类型
        /// 0：出租车发票
        /// 1：定额发票
        /// 2：火车票
        /// 3：增值税发票
        /// 5：机票行程单
        /// 8：通用机打发票
        /// 9：汽车票
        /// 10：轮船票
        /// 11：增值税发票（卷票）
        /// 12：购车发票
        /// 13：过路过桥费发票
        /// 15：非税发票
        /// 16：全电发票
        public let type: Int64

        /// 识别出的图片在混贴票据图片中的位置信息。与Angel结合可以得出原图位置，组成RotatedRect((X+0.5\*Width,Y+0.5\*Height), (Width, Height), Angle)，详情可参考OpenCV文档。
        public let rect: Rect

        /// 识别出的图片在混贴票据图片中的旋转角度。
        public let angle: Float

        /// 识别到的内容。
        public let singleInvoiceInfos: [SingleInvoiceInfo]

        /// 发票处于识别图片或PDF文件中的页教，默认从1开始。
        public let page: Int64?

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case type = "Type"
            case rect = "Rect"
            case angle = "Angle"
            case singleInvoiceInfos = "SingleInvoiceInfos"
            case page = "Page"
        }
    }

    /// 机动车销售统一发票
    public struct MotorVehicleSaleInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 开票日期
        public let date: String?

        /// 税前金额
        public let pretaxAmount: String?

        /// 价税合计（小写）
        public let total: String?

        /// 价税合计（大写）
        public let totalCn: String?

        /// 销售方名称
        public let seller: String?

        /// 销售方单位代码
        public let sellerTaxID: String?

        /// 销售方电话
        public let sellerTel: String?

        /// 销售方地址
        public let sellerAddress: String?

        /// 销售方开户行
        public let sellerBank: String?

        /// 销售方银行账号
        public let sellerBankAccount: String?

        /// 购买方名称
        public let buyer: String?

        /// 购买方纳税人识别号
        public let buyerTaxID: String?

        /// 购买方身份证号码/组织机构代码
        public let buyerID: String?

        /// 主管税务机关
        public let taxAuthorities: String?

        /// 主管税务机关代码
        public let taxAuthoritiesCode: String?

        /// 车辆识别代码
        public let vin: String?

        /// 厂牌型号
        public let vehicleModel: String?

        /// 发动机号码
        public let vehicleEngineCode: String?

        /// 合格证号
        public let certificateNumber: String?

        /// 商检单号
        public let inspectionNumber: String?

        /// 机器编号
        public let machineID: String?

        /// 车辆类型
        public let vehicleType: String?

        /// 发票消费类型
        public let kind: String?

        /// 省
        public let province: String?

        /// 市
        public let city: String?

        /// 合计税额
        public let tax: String?

        /// 税率
        public let taxRate: String?

        /// 是否有公司印章（0：没有，1：有）
        public let companySealMark: Int64?

        /// 吨位
        public let tonnage: String?

        /// 备注
        public let remark: String?

        /// 发票联次
        public let formType: String?

        /// 发票联名
        public let formName: String?

        /// 开票人
        public let issuer: String?

        /// 完税凭证号码
        public let taxNum: String?

        /// 限乘人数
        public let maxPeopleNum: String?

        /// 产地
        public let origin: String?

        /// 机打发票代码
        public let machineCode: String?

        /// 机打发票号码
        public let machineNumber: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case code = "Code"
            case number = "Number"
            case date = "Date"
            case pretaxAmount = "PretaxAmount"
            case total = "Total"
            case totalCn = "TotalCn"
            case seller = "Seller"
            case sellerTaxID = "SellerTaxID"
            case sellerTel = "SellerTel"
            case sellerAddress = "SellerAddress"
            case sellerBank = "SellerBank"
            case sellerBankAccount = "SellerBankAccount"
            case buyer = "Buyer"
            case buyerTaxID = "BuyerTaxID"
            case buyerID = "BuyerID"
            case taxAuthorities = "TaxAuthorities"
            case taxAuthoritiesCode = "TaxAuthoritiesCode"
            case vin = "VIN"
            case vehicleModel = "VehicleModel"
            case vehicleEngineCode = "VehicleEngineCode"
            case certificateNumber = "CertificateNumber"
            case inspectionNumber = "InspectionNumber"
            case machineID = "MachineID"
            case vehicleType = "VehicleType"
            case kind = "Kind"
            case province = "Province"
            case city = "City"
            case tax = "Tax"
            case taxRate = "TaxRate"
            case companySealMark = "CompanySealMark"
            case tonnage = "Tonnage"
            case remark = "Remark"
            case formType = "FormType"
            case formName = "FormName"
            case issuer = "Issuer"
            case taxNum = "TaxNum"
            case maxPeopleNum = "MaxPeopleNum"
            case origin = "Origin"
            case machineCode = "MachineCode"
            case machineNumber = "MachineNumber"
            case qrCodeMark = "QRCodeMark"
        }
    }

    /// 非税收入
    public struct NonTaxIncomeBill: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 发票号码
        public let number: String?

        /// 发票代码
        public let code: String?

        /// 校验码
        public let checkCode: String?

        /// 开票日期
        public let date: String?

        /// 价税合计（小写）
        public let total: String?

        /// 价税合计（大写）
        public let totalCn: String?

        /// 交款人名称
        public let buyer: String?

        /// 交款人纳税人识别号
        public let buyerTaxID: String?

        /// 收款人名称
        public let seller: String?

        /// 收款单位名称
        public let sellerCompany: String?

        /// 备注
        public let remark: String?

        /// 币种
        public let currencyCode: String?

        /// 复核人
        public let reviewer: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 其他信息
        public let otherInfo: String?

        /// 缴款码
        public let paymentCode: String?

        /// 执收单位编码
        public let receiveUnitCode: String?

        /// 执收单位名称
        public let receiver: String?

        /// 经办人
        public let `operator`: String?

        /// 付款人账号
        public let payerAccount: String?

        /// 付款人开户银行
        public let payerBank: String?

        /// 收款人账号
        public let receiverAccount: String?

        /// 收款人开户银行
        public let receiverBank: String?

        /// 条目
        public let nonTaxItems: [NonTaxItem]?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case number = "Number"
            case code = "Code"
            case checkCode = "CheckCode"
            case date = "Date"
            case total = "Total"
            case totalCn = "TotalCn"
            case buyer = "Buyer"
            case buyerTaxID = "BuyerTaxID"
            case seller = "Seller"
            case sellerCompany = "SellerCompany"
            case remark = "Remark"
            case currencyCode = "CurrencyCode"
            case reviewer = "Reviewer"
            case qrCodeMark = "QRCodeMark"
            case otherInfo = "OtherInfo"
            case paymentCode = "PaymentCode"
            case receiveUnitCode = "ReceiveUnitCode"
            case receiver = "Receiver"
            case `operator` = "Operator"
            case payerAccount = "PayerAccount"
            case payerBank = "PayerBank"
            case receiverAccount = "ReceiverAccount"
            case receiverBank = "ReceiverBank"
            case nonTaxItems = "NonTaxItems"
        }
    }

    /// 非税收入条目
    public struct NonTaxItem: TCOutputModel {
        /// 项目编码
        public let itemID: String?

        /// 项目名称
        public let name: String?

        /// 单位
        public let unit: String?

        /// 数量
        public let quantity: String?

        /// 标准
        public let standard: String?

        /// 金额
        public let total: String?

        enum CodingKeys: String, CodingKey {
            case itemID = "ItemID"
            case name = "Name"
            case unit = "Unit"
            case quantity = "Quantity"
            case standard = "Standard"
            case total = "Total"
        }
    }

    /// 网约车行程单识别结果
    public struct OnlineTaxiItineraryInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、 机打代码、 发票号码、 发动机号码、 合格证号、 机打号码、 价税合计(小写)、 销货单位名称、 身份证号码/组织机构代码、 购买方名称、 销售方纳税人识别号、 购买方纳税人识别号、主管税务机关、 主管税务机关代码、 开票日期、 不含税价(小写)、 吨位、增值税税率或征收率、 车辆识别代号/车架号码、 增值税税额、 厂牌型号、 省、 市、 发票消费类型、 销售方电话、 销售方账号、 产地、 进口证明书号、 车辆类型、 机器编号、备注、开票人、限乘人数、商检单号、销售方地址、销售方开户银行、价税合计、发票类型。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 字段所在行，下标从0开始，非行字段或未能识别行号的返回-1
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case row = "Row"
        }
    }

    /// 其他发票
    public struct OtherInvoice: TCOutputModel {
        /// 发票名称
        public let title: String

        /// 金额
        public let total: String

        /// 列表
        public let otherInvoiceListItems: [OtherInvoiceItem]

        /// 表格
        public let otherInvoiceTableItems: [OtherInvoiceList]

        /// 发票日期
        public let date: String

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case total = "Total"
            case otherInvoiceListItems = "OtherInvoiceListItems"
            case otherInvoiceTableItems = "OtherInvoiceTableItems"
            case date = "Date"
        }
    }

    /// OtherInvoiceItem
    public struct OtherInvoiceItem: TCOutputModel {
        /// 票面key值
        public let name: String?

        /// 票面value值
        public let value: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 其他票Table
    public struct OtherInvoiceList: TCOutputModel {
        /// 列表
        public let otherInvoiceItemList: [OtherInvoiceItem]?

        enum CodingKeys: String, CodingKey {
            case otherInvoiceItemList = "OtherInvoiceItemList"
        }
    }

    /// 通行费发票信息
    public struct PassInvoiceInfo: TCOutputModel {
        /// 通行费车牌号
        public let numberPlate: String

        /// 通行费类型
        public let type: String

        /// 通行日期起
        public let passDateBegin: String

        /// 通行日期止
        public let passDateEnd: String

        /// 税收分类编码
        public let taxClassifyCode: String

        enum CodingKeys: String, CodingKey {
            case numberPlate = "NumberPlate"
            case type = "Type"
            case passDateBegin = "PassDateBegin"
            case passDateEnd = "PassDateEnd"
            case taxClassifyCode = "TaxClassifyCode"
        }
    }

    /// 文本的坐标，以四个顶点坐标表示
    /// 注意：此字段可能返回 null，表示取不到有效值
    public struct Polygon: TCOutputModel {
        /// 左上顶点坐标
        public let leftTop: Coord

        /// 右上顶点坐标
        public let rightTop: Coord

        /// 右下顶点坐标
        public let rightBottom: Coord

        /// 左下顶点坐标
        public let leftBottom: Coord

        enum CodingKeys: String, CodingKey {
            case leftTop = "LeftTop"
            case rightTop = "RightTop"
            case rightBottom = "RightBottom"
            case leftBottom = "LeftBottom"
        }
    }

    /// 图片大小
    public struct QrcodeImgSize: TCOutputModel {
        /// 宽
        public let wide: Int64

        /// 高
        public let high: Int64

        enum CodingKeys: String, CodingKey {
            case wide = "Wide"
            case high = "High"
        }
    }

    /// 二维码/条形码坐标信息
    public struct QrcodePositionObj: TCOutputModel {
        /// 左上顶点坐标（如果是条形码，X和Y都为-1）
        public let leftTop: Coord

        /// 右上顶点坐标（如果是条形码，X和Y都为-1）
        public let rightTop: Coord

        /// 右下顶点坐标（如果是条形码，X和Y都为-1）
        public let rightBottom: Coord

        /// 左下顶点坐标（如果是条形码，X和Y都为-1）
        public let leftBottom: Coord

        enum CodingKeys: String, CodingKey {
            case leftTop = "LeftTop"
            case rightTop = "RightTop"
            case rightBottom = "RightBottom"
            case leftBottom = "LeftBottom"
        }
    }

    /// 二维码/条形码识别结果信息
    public struct QrcodeResultsInfo: TCOutputModel {
        /// 类型（二维码、条形码）
        public let typeName: String

        /// 二维码/条形码包含的地址
        public let url: String

        /// 二维码/条形码坐标
        public let position: QrcodePositionObj

        enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
            case url = "Url"
            case position = "Position"
        }
    }

    /// 数学试题识别结构化对象
    public struct QuestionBlockObj: TCOutputModel {
        /// 数学试题识别结构化信息数组
        public let questionArr: [QuestionObj]

        /// 题目主体区域检测框在图片中的像素坐标
        public let questionBboxCoord: Rect

        enum CodingKeys: String, CodingKey {
            case questionArr = "QuestionArr"
            case questionBboxCoord = "QuestionBboxCoord"
        }
    }

    /// 试题识别结构化信息
    public struct QuestionObj: TCOutputModel {
        /// 题号
        public let questionTextNo: String

        /// 题型：
        /// 1: "选择题"
        /// 2: "填空题"
        /// 3: "解答题"
        public let questionTextType: Int64

        /// 题干
        public let questionText: String

        /// 选择题选项，包含1个或多个option
        public let questionOptions: String

        /// 所有子题的question属性
        public let questionSubquestion: String

        /// 示意图检测框在的图片中的像素坐标
        public let questionImageCoords: [Rect]

        enum CodingKeys: String, CodingKey {
            case questionTextNo = "QuestionTextNo"
            case questionTextType = "QuestionTextType"
            case questionText = "QuestionText"
            case questionOptions = "QuestionOptions"
            case questionSubquestion = "QuestionSubquestion"
            case questionImageCoords = "QuestionImageCoords"
        }
    }

    /// 定额发票
    public struct QuotaInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 价税合计（小写）
        public let total: String?

        /// 价税合计（大写）
        public let totalCn: String?

        /// 发票消费类型
        public let kind: String?

        /// 省
        public let province: String?

        /// 市
        public let city: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 是否有公司印章（0：没有，1：有）
        public let companySealMark: Int64?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case code = "Code"
            case number = "Number"
            case total = "Total"
            case totalCn = "TotalCn"
            case kind = "Kind"
            case province = "Province"
            case city = "City"
            case qrCodeMark = "QRCodeMark"
            case companySealMark = "CompanySealMark"
        }
    }

    /// 矩形坐标
    public struct Rect: TCOutputModel {
        /// 左上角x
        public let x: Int64

        /// 左上角y
        public let y: Int64

        /// 宽度
        public let width: Int64

        /// 高度
        public let height: Int64

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 印章信息
    public struct SealInfo: TCOutputModel {
        /// 印章主体内容
        public let sealBody: String

        /// 印章坐标
        public let location: Rect

        /// 印章其它文本内容
        public let otherTexts: [String]

        /// 印章类型，表示为:
        /// 圆形印章：0
        /// 椭圆形印章：1
        /// 方形印章：2
        /// 菱形印章：3
        /// 三角形印章：4
        public let sealShape: String

        enum CodingKeys: String, CodingKey {
            case sealBody = "SealBody"
            case location = "Location"
            case otherTexts = "OtherTexts"
            case sealShape = "SealShape"
        }
    }

    /// 轮船票字段信息
    public struct ShipInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、发票号码、日期、票价、始发地、目的地、姓名、时间、发票消费类型、省、市、币种。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 轮船票
    public struct ShippingInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 姓名
        public let userName: String?

        /// 日期
        public let date: String?

        /// 时间
        public let time: String?

        /// 出发车站
        public let stationGetOn: String?

        /// 到达车站
        public let stationGetOff: String?

        /// 票价
        public let total: String?

        /// 发票消费类型
        public let kind: String?

        /// 省
        public let province: String?

        /// 市
        public let city: String?

        /// 币种
        public let currencyCode: String?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case qrCodeMark = "QRCodeMark"
            case code = "Code"
            case number = "Number"
            case userName = "UserName"
            case date = "Date"
            case time = "Time"
            case stationGetOn = "StationGetOn"
            case stationGetOff = "StationGetOff"
            case total = "Total"
            case kind = "Kind"
            case province = "Province"
            case city = "City"
            case currencyCode = "CurrencyCode"
        }
    }

    /// 混贴票据中单张发票的内容
    public struct SingleInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        /// 字段属于第几行，用于相同字段的排版，如发票明细表格项目，普通字段使用默认值为-1，表示无列排版。
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case row = "Row"
        }
    }

    /// 混贴票据中单张发票的内容
    public struct SingleInvoiceItem: TCOutputModel {
        /// 增值税专用发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatSpecialInvoice: VatInvoiceInfo?

        /// 增值税普通发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatCommonInvoice: VatInvoiceInfo?

        /// 增值税电子普通发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatElectronicCommonInvoice: VatInvoiceInfo?

        /// 增值税电子专用发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatElectronicSpecialInvoice: VatInvoiceInfo?

        /// 区块链电子发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatElectronicInvoiceBlockchain: VatInvoiceInfo?

        /// 增值税电子普通发票(通行费)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatElectronicInvoiceToll: VatInvoiceInfo?

        /// 电子发票(专用发票)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatElectronicSpecialInvoiceFull: VatElectronicInfo?

        /// 电子发票(普通发票)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatElectronicInvoiceFull: VatElectronicInfo?

        /// 通用机打发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let machinePrintedInvoice: MachinePrintedInvoice?

        /// 汽车票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let busInvoice: BusInvoice?

        /// 轮船票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let shippingInvoice: ShippingInvoice?

        /// 过路过桥费发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tollInvoice: TollInvoice?

        /// 其他发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let otherInvoice: OtherInvoice?

        /// 机动车销售统一发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let motorVehicleSaleInvoice: MotorVehicleSaleInvoice?

        /// 二手车销售统一发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedCarPurchaseInvoice: UsedCarPurchaseInvoice?

        /// 增值税普通发票(卷票)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatInvoiceRoll: VatInvoiceRoll?

        /// 出租车发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taxiTicket: TaxiTicket?

        /// 定额发票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quotaInvoice: QuotaInvoice?

        /// 机票行程单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let airTransport: AirTransport?

        /// 非税收入通用票据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nonTaxIncomeGeneralBill: NonTaxIncomeBill?

        /// 非税收入一般缴款书(电子)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nonTaxIncomeElectronicBill: NonTaxIncomeBill?

        /// 火车票
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainTicket: TrainTicket?

        /// 医疗门诊收费票据（电子）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let medicalOutpatientInvoice: MedicalInvoice?

        /// 医疗住院收费票据（电子）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let medicalHospitalizedInvoice: MedicalInvoice?

        /// 增值税销货清单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vatSalesList: VatInvoiceInfo?

        enum CodingKeys: String, CodingKey {
            case vatSpecialInvoice = "VatSpecialInvoice"
            case vatCommonInvoice = "VatCommonInvoice"
            case vatElectronicCommonInvoice = "VatElectronicCommonInvoice"
            case vatElectronicSpecialInvoice = "VatElectronicSpecialInvoice"
            case vatElectronicInvoiceBlockchain = "VatElectronicInvoiceBlockchain"
            case vatElectronicInvoiceToll = "VatElectronicInvoiceToll"
            case vatElectronicSpecialInvoiceFull = "VatElectronicSpecialInvoiceFull"
            case vatElectronicInvoiceFull = "VatElectronicInvoiceFull"
            case machinePrintedInvoice = "MachinePrintedInvoice"
            case busInvoice = "BusInvoice"
            case shippingInvoice = "ShippingInvoice"
            case tollInvoice = "TollInvoice"
            case otherInvoice = "OtherInvoice"
            case motorVehicleSaleInvoice = "MotorVehicleSaleInvoice"
            case usedCarPurchaseInvoice = "UsedCarPurchaseInvoice"
            case vatInvoiceRoll = "VatInvoiceRoll"
            case taxiTicket = "TaxiTicket"
            case quotaInvoice = "QuotaInvoice"
            case airTransport = "AirTransport"
            case nonTaxIncomeGeneralBill = "NonTaxIncomeGeneralBill"
            case nonTaxIncomeElectronicBill = "NonTaxIncomeElectronicBill"
            case trainTicket = "TrainTicket"
            case medicalOutpatientInvoice = "MedicalOutpatientInvoice"
            case medicalHospitalizedInvoice = "MedicalHospitalizedInvoice"
            case vatSalesList = "VatSalesList"
        }
    }

    /// 智慧表单上传文件信息
    public struct SmartFormFileUrl: TCInputModel {
        /// 文件url地址
        public let fileUrl: String

        /// 文件的顺序，顺序从1开始
        public let fileOrderNumber: UInt64

        public init(fileUrl: String, fileOrderNumber: UInt64) {
            self.fileUrl = fileUrl
            self.fileOrderNumber = fileOrderNumber
        }

        enum CodingKeys: String, CodingKey {
            case fileUrl = "FileUrl"
            case fileOrderNumber = "FileOrderNumber"
        }
    }

    /// 智能结构化识别
    public struct StructuralItem: TCOutputModel {
        /// 识别出的字段名称(关键字)。
        public let name: String

        /// 识别出的字段名称对应的值。
        public let value: String

        /// 置信度 0 ~100。
        public let confidence: Int64

        /// 文本行在旋转纠正之后的图像中的像素
        /// 坐标。
        public let itemCoord: ItemCoord

        /// 字段所在行号，下标从0开始，非行字段或未能识别行号的该值返回-1。
        public let row: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case confidence = "Confidence"
            case itemCoord = "ItemCoord"
            case row = "Row"
        }
    }

    /// 单元格数据
    public struct TableCell: TCOutputModel {
        /// 单元格左上角的列索引
        public let colTl: Int64

        /// 单元格左上角的行索引
        public let rowTl: Int64

        /// 单元格右下角的列索引
        public let colBr: Int64

        /// 单元格右下角的行索引
        public let rowBr: Int64

        /// 单元格内识别出的字符串文本，若文本存在多行，以换行符"\n"隔开
        public let text: String

        /// 单元格类型
        public let type: String

        /// 单元格置信度
        public let confidence: Float

        /// 单元格在图像中的四点坐标
        public let polygon: [Coord]

        /// 此字段为扩展字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advancedInfo: String?

        /// 单元格文本属性
        public let contents: [CellContent]

        enum CodingKeys: String, CodingKey {
            case colTl = "ColTl"
            case rowTl = "RowTl"
            case colBr = "ColBr"
            case rowBr = "RowBr"
            case text = "Text"
            case type = "Type"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case contents = "Contents"
        }
    }

    /// 单元格数据
    public struct TableCellInfo: TCOutputModel {
        /// 单元格左上角的列索引
        public let colTl: Int64

        /// 单元格左上角的行索引
        public let rowTl: Int64

        /// 单元格右下角的列索引
        public let colBr: Int64

        /// 单元格右下角的行索引
        public let rowBr: Int64

        /// 单元格内识别出的字符串文本，若文本存在多行，以换行符"\n"隔开
        public let text: String

        /// 单元格类型
        public let type: String

        /// 单元格置信度
        public let confidence: Float

        /// 单元格在图像中的四点坐标
        public let polygon: [Coord]

        enum CodingKeys: String, CodingKey {
            case colTl = "ColTl"
            case rowTl = "RowTl"
            case colBr = "ColBr"
            case rowBr = "RowBr"
            case text = "Text"
            case type = "Type"
            case confidence = "Confidence"
            case polygon = "Polygon"
        }
    }

    /// 表格内容检测
    public struct TableDetectInfo: TCOutputModel {
        /// 单元格内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cells: [TableCell]?

        /// 表格标题
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let titles: [TableTitle]?

        /// 图像中的文本块类型，0 为非表格文本，
        /// 1 为有线表格，2 为无线表格
        /// （接口暂不支持日文无线表格识别，若传入日文无线表格，返回0）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 表格主体四个顶点坐标（依次为左上角，
        /// 右上角，右下角，左下角）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableCoordPoint: [Coord]?

        enum CodingKeys: String, CodingKey {
            case cells = "Cells"
            case titles = "Titles"
            case type = "Type"
            case tableCoordPoint = "TableCoordPoint"
        }
    }

    /// 表格内容检测
    public struct TableInfo: TCOutputModel {
        /// 单元格内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cells: [TableCellInfo]?

        /// 图像中的文本块类型，0 为非表格文本，
        /// 1 为有线表格，2 为无线表格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 表格主体四个顶点坐标（依次为左上角，
        /// 右上角，右下角，左下角）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableCoordPoint: [Coord]?

        enum CodingKeys: String, CodingKey {
            case cells = "Cells"
            case type = "Type"
            case tableCoordPoint = "TableCoordPoint"
        }
    }

    /// 表格标题
    public struct TableTitle: TCOutputModel {
        /// 表格名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let text: String?

        enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    /// 出租车发票
    public struct TaxiTicket: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 开票日期
        public let date: String?

        /// 上车时间
        public let timeGetOn: String?

        /// 下车时间
        public let timeGetOff: String?

        /// 单价
        public let price: String?

        /// 里程
        public let mileage: String?

        /// 总金额
        public let total: String?

        /// 发票所在地
        public let place: String?

        /// 省
        public let province: String?

        /// 市
        public let city: String?

        /// 发票消费类型
        public let kind: String?

        /// 车牌号
        public let licensePlate: String?

        /// 燃油附加费
        public let fuelFee: String?

        /// 预约叫车服务费
        public let bookingCallFee: String?

        /// 是否有公司印章（0：没有，1：有）
        public let companySealMark: Int64?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case qrCodeMark = "QRCodeMark"
            case code = "Code"
            case number = "Number"
            case date = "Date"
            case timeGetOn = "TimeGetOn"
            case timeGetOff = "TimeGetOff"
            case price = "Price"
            case mileage = "Mileage"
            case total = "Total"
            case place = "Place"
            case province = "Province"
            case city = "City"
            case kind = "Kind"
            case licensePlate = "LicensePlate"
            case fuelFee = "FuelFee"
            case bookingCallFee = "BookingCallFee"
            case companySealMark = "CompanySealMark"
        }
    }

    /// 算式识别结果
    public struct TextArithmetic: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 算式运算结果，true-正确   false-错误或非法参数
        public let result: Bool

        /// 保留字段，暂不支持
        public let confidence: Int64

        /// 原图文本行坐标，以四个顶点坐标表示（保留字段，暂不支持）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: [Coord]?

        /// 保留字段，暂不支持
        public let advancedInfo: String

        /// 文本行旋转纠正之后在图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemCoord: ItemCoord

        /// 算式题型编号：
        /// ‘1’: 加减乘除四则
        /// ‘2’: 加减乘除已知结果求运算因子
        /// ‘3’: 判断大小
        /// ‘4’: 约等于估算
        /// ‘5’: 带余数除法
        /// ‘6’: 分数四则运算
        /// ‘7’: 单位换算
        /// ‘8’: 竖式加减法
        /// ‘9’: 竖式乘除法
        /// ‘10’: 脱式计算
        /// ‘11’: 解方程
        public let expressionType: String

        /// 错题推荐答案，算式运算结果正确返回为""，算式运算结果错误返回推荐答案 (注：暂不支持多个关系运算符（如1<10<7）、无关系运算符（如frac(1,2)+frac(2,3)）、单位换算（如1元=100角）错题的推荐答案返回)
        public let answer: String

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case result = "Result"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case itemCoord = "ItemCoord"
            case expressionType = "ExpressionType"
            case answer = "Answer"
        }
    }

    /// 文字识别结果
    public struct TextDetection: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 置信度 0 ~100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: [Coord]?

        /// 此字段为扩展字段。
        /// GeneralBasicOcr接口返回段落信息Parag，包含ParagNo。
        public let advancedInfo: String

        /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemPolygon: ItemCoord

        /// 识别出来的单字信息包括单字（包括单字Character和单字置信度confidence）， 支持识别的接口：GeneralBasicOCR、GeneralAccurateOCR
        public let words: [DetectedWords]

        /// 单字在原图中的四点坐标， 支持识别的接口：GeneralBasicOCR、GeneralAccurateOCR
        public let wordCoordPoint: [DetectedWordCoordPoint]

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case itemPolygon = "ItemPolygon"
            case words = "Words"
            case wordCoordPoint = "WordCoordPoint"
        }
    }

    /// 英文识别结果
    public struct TextDetectionEn: TCOutputModel {
        /// 识别出的文本行内容。
        public let detectedText: String

        /// 置信度 0 ~100。
        public let confidence: Int64

        /// 文本行在原图中的四点坐标。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: [Coord]?

        /// 此字段为扩展字段。目前EnglishOCR接口返回内容为空。
        public let advancedInfo: String

        /// 英文单词在原图中的四点坐标。
        public let wordCoordPoint: [WordCoordPoint]

        /// 候选字符集(包含候选字Character以及置信度Confidence)。
        public let candWord: [CandWord]

        /// 识别出来的单词信息（包括单词Character和单词置信度confidence）
        public let words: [Words]

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case wordCoordPoint = "WordCoordPoint"
            case candWord = "CandWord"
            case words = "Words"
        }
    }

    /// 识别结果
    public struct TextDetectionResult: TCOutputModel {
        /// 识别出的文本行内容
        public let value: String

        /// 坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        enum CodingKeys: String, CodingKey {
            case value = "Value"
            case polygon = "Polygon"
        }
    }

    /// 数学试题识别结果
    public struct TextEduPaper: TCOutputModel {
        /// 识别出的字段名称（关键字）
        public let item: String

        /// 识别出的字段名称对应的值，也就是字段Item对应的字符串结果
        public let detectedText: String

        /// 文本行在旋转纠正之后的图像中的像素坐标，表示为（左上角x, 左上角y，宽width，高height）
        public let itemcoord: ItemCoord

        enum CodingKeys: String, CodingKey {
            case item = "Item"
            case detectedText = "DetectedText"
            case itemcoord = "Itemcoord"
        }
    }

    /// 数学公式识别结果
    public struct TextFormula: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
        }
    }

    /// 文字识别结果
    public struct TextGeneralHandwriting: TCOutputModel {
        /// 识别出的文本行内容
        public let detectedText: String

        /// 置信度 0 - 100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        /// 此字段为扩展字段。
        /// 能返回文本行的段落信息，例如：{\"Parag\":{\"ParagNo\":2}}，
        /// 其中ParagNo为段落行，从1开始。
        public let advancedInfo: String

        /// 字的坐标数组，以四个顶点坐标表示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wordPolygon: [Polygon]?

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
            case wordPolygon = "WordPolygon"
        }
    }

    /// 表格识别结果
    public struct TextTable: TCOutputModel {
        /// 单元格左上角的列索引
        public let colTl: Int64

        /// 单元格左上角的行索引
        public let rowTl: Int64

        /// 单元格右下角的列索引
        public let colBr: Int64

        /// 单元格右下角的行索引
        public let rowBr: Int64

        /// 单元格文字
        public let text: String

        /// 单元格类型，包含body（表格主体）、header（表头）、footer（表尾）三种
        public let type: String

        /// 置信度 0 ~100
        public let confidence: Int64

        /// 文本行坐标，以四个顶点坐标表示
        public let polygon: [Coord]

        /// 此字段为扩展字段
        public let advancedInfo: String

        enum CodingKeys: String, CodingKey {
            case colTl = "ColTl"
            case rowTl = "RowTl"
            case colBr = "ColBr"
            case rowBr = "RowBr"
            case text = "Text"
            case type = "Type"
            case confidence = "Confidence"
            case polygon = "Polygon"
            case advancedInfo = "AdvancedInfo"
        }
    }

    /// 增值税发票识别结果
    public struct TextVatInvoice: TCOutputModel {
        /// 识别出的字段名称（关键字）。支持以下字段的识别：
        /// 发票代码、 发票号码、 打印发票代码、 打印发票号码、 开票日期、 购买方识别号、 小写金额、 价税合计(大写)、 销售方识别号、 校验码、 购买方名称、 销售方名称、 税额、 复核、 联次名称、 备注、 联次、 密码区、 开票人、 收款人、 （货物或应税劳务、服务名称）、省、 市、 服务类型、 通行费标志、 是否代开、 是否收购、 合计金额、 是否有公司印章、 发票消费类型、 车船税、 机器编号、 成品油标志、 税率、 合计税额、 （购买方地址、电话）、 （销售方地址、电话）、 单价、 金额、 销售方开户行及账号、 购买方开户行及账号、 规格型号、 发票名称、 单位、 数量、 校验码备选、 校验码后六位备选、发票号码备选、车牌号、类型、通行日期起、通行日期止、发票类型。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 字段在原图中的中的四点坐标。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polygon: Polygon?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case polygon = "Polygon"
        }
    }

    /// 行驶证副页正面的识别结果
    public struct TextVehicleBack: TCOutputModel {
        /// 号牌号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let plateNo: String?

        /// 档案编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileNo: String?

        /// 核定人数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let allowNum: String?

        /// 总质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalMass: String?

        /// 整备质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let curbWeight: String?

        /// 核定载质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadQuality: String?

        /// 外廓尺寸
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let externalSize: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let marks: String?

        /// 检验记录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let record: String?

        /// 准牵引总质量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalQuasiMass: String?

        /// 副页编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subPageCode: String?

        enum CodingKeys: String, CodingKey {
            case plateNo = "PlateNo"
            case fileNo = "FileNo"
            case allowNum = "AllowNum"
            case totalMass = "TotalMass"
            case curbWeight = "CurbWeight"
            case loadQuality = "LoadQuality"
            case externalSize = "ExternalSize"
            case marks = "Marks"
            case record = "Record"
            case totalQuasiMass = "TotalQuasiMass"
            case subPageCode = "SubPageCode"
        }
    }

    /// 行驶证主页正面的识别结果
    public struct TextVehicleFront: TCOutputModel {
        /// 号牌号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let plateNo: String?

        /// 车辆类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vehicleType: String?

        /// 所有人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let owner: String?

        /// 住址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let address: String?

        /// 使用性质
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let useCharacter: String?

        /// 品牌型号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let model: String?

        /// 车辆识别代号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vin: String?

        /// 发动机号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineNo: String?

        /// 注册日期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registerDate: String?

        /// 发证日期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let issueDate: String?

        /// 印章
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let seal: String?

        enum CodingKeys: String, CodingKey {
            case plateNo = "PlateNo"
            case vehicleType = "VehicleType"
            case owner = "Owner"
            case address = "Address"
            case useCharacter = "UseCharacter"
            case model = "Model"
            case vin = "Vin"
            case engineNo = "EngineNo"
            case registerDate = "RegisterDate"
            case issueDate = "IssueDate"
            case seal = "Seal"
        }
    }

    /// 运单识别结果
    public struct TextWaybill: TCOutputModel {
        /// 收件人姓名
        public let recName: WaybillObj

        /// 收件人手机号
        public let recNum: WaybillObj

        /// 收件人地址
        public let recAddr: WaybillObj

        /// 寄件人姓名
        public let senderName: WaybillObj

        /// 寄件人手机号
        public let senderNum: WaybillObj

        /// 寄件人地址
        public let senderAddr: WaybillObj

        /// 运单号
        public let waybillNum: WaybillObj

        enum CodingKeys: String, CodingKey {
            case recName = "RecName"
            case recNum = "RecNum"
            case recAddr = "RecAddr"
            case senderName = "SenderName"
            case senderNum = "SenderNum"
            case senderAddr = "SenderAddr"
            case waybillNum = "WaybillNum"
        }
    }

    /// 过路过桥费发票
    public struct TollInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 价税合计（小写）
        public let total: String?

        /// 发票消费类型
        public let kind: String?

        /// 日期
        public let date: String?

        /// 时间
        public let time: String?

        /// 入口
        public let entrance: String?

        /// 出口
        public let exit: String?

        /// 高速标志（0：没有，1：有）
        public let highwayMark: Int64?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case code = "Code"
            case number = "Number"
            case total = "Total"
            case kind = "Kind"
            case date = "Date"
            case time = "Time"
            case entrance = "Entrance"
            case exit = "Exit"
            case highwayMark = "HighwayMark"
            case qrCodeMark = "QRCodeMark"
        }
    }

    /// 过路过桥费字段信息
    public struct TollInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称（关键字）。支持以下字段的识别：
        /// 发票代码、发票号码、日期、金额、入口、出口、时间、发票消费类型、高速标志。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 火车票
    public struct TrainTicket: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 发票号码
        public let number: String?

        /// 乘车日期
        public let dateGetOn: String?

        /// 乘车时间
        public let timeGetOn: String?

        /// 乘车人姓名
        public let name: String?

        /// 出发车站
        public let stationGetOn: String?

        /// 到达车站
        public let stationGetOff: String?

        /// 座位类型
        public let seat: String?

        /// 总金额
        public let total: String?

        /// 发票消费类型
        public let kind: String?

        /// 序列号
        public let serialNumber: String?

        /// 身份证号
        public let userID: String?

        /// 检票口
        public let gateNumber: String?

        /// 车次
        public let trainNumber: String?

        /// 手续费
        public let handlingFee: String?

        /// 原票价
        public let originalFare: String?

        /// 大写金额
        public let totalCn: String?

        /// 座位号
        public let seatNumber: String?

        /// 取票地址
        public let pickUpAddress: String?

        /// 是否始发改签
        public let ticketChange: String?

        /// 加收票价
        public let additionalFare: String?

        /// 收据号码
        public let receiptNumber: String?

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64?

        /// 是否仅供报销使用（0：没有，1：有）
        public let reimburseOnlyMark: Int64?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case number = "Number"
            case dateGetOn = "DateGetOn"
            case timeGetOn = "TimeGetOn"
            case name = "Name"
            case stationGetOn = "StationGetOn"
            case stationGetOff = "StationGetOff"
            case seat = "Seat"
            case total = "Total"
            case kind = "Kind"
            case serialNumber = "SerialNumber"
            case userID = "UserID"
            case gateNumber = "GateNumber"
            case trainNumber = "TrainNumber"
            case handlingFee = "HandlingFee"
            case originalFare = "OriginalFare"
            case totalCn = "TotalCn"
            case seatNumber = "SeatNumber"
            case pickUpAddress = "PickUpAddress"
            case ticketChange = "TicketChange"
            case additionalFare = "AdditionalFare"
            case receiptNumber = "ReceiptNumber"
            case qrCodeMark = "QRCodeMark"
            case reimburseOnlyMark = "ReimburseOnlyMark"
        }
    }

    /// 二手车销售统一发票
    public struct UsedCarPurchaseInvoice: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 是否存在二维码（0：没有，1：有）
        public let qrCodeMark: Int64?

        /// 发票代码
        public let code: String?

        /// 发票号码
        public let number: String?

        /// 开票日期
        public let date: String?

        /// 价税合计（小写）
        public let total: String?

        /// 价税合计（大写）
        public let totalCn: String?

        /// 销货单位名称
        public let seller: String?

        /// 销售方电话
        public let sellerTel: String?

        /// 销售方单位代码/个人身份证号
        public let sellerTaxID: String?

        /// 销售方地址
        public let sellerAddress: String?

        /// 购买方名称
        public let buyer: String?

        /// 购买方单位代码/个人身份证号
        public let buyerID: String?

        /// 购买方地址
        public let buyerAddress: String?

        /// 购买方电话
        public let buyerTel: String?

        /// 二手车市场
        public let companyName: String?

        /// 二手车市场纳税人识别号
        public let companyTaxID: String?

        /// 二手车市场开户银行和账号
        public let companyBankAccount: String?

        /// 二手车市场电话
        public let companyTel: String?

        /// 二手车市场地址
        public let companyAddress: String?

        /// 转入地车辆管理所名称
        public let transferAdministrationName: String?

        /// 车牌号
        public let licensePlate: String?

        /// 登记证号
        public let registrationNumber: String?

        /// 车辆识别代码
        public let vin: String?

        /// 厂牌型号
        public let vehicleModel: String?

        /// 发票消费类型
        public let kind: String?

        /// 省
        public let province: String?

        /// 市
        public let city: String?

        /// 车辆类型
        public let vehicleType: String?

        /// 备注
        public let remark: String?

        /// 发票联次
        public let formType: String?

        /// 发票联名
        public let formName: String?

        /// 是否有公司印章（0：没有，1：有）
        public let companySealMark: Int64?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case qrCodeMark = "QRCodeMark"
            case code = "Code"
            case number = "Number"
            case date = "Date"
            case total = "Total"
            case totalCn = "TotalCn"
            case seller = "Seller"
            case sellerTel = "SellerTel"
            case sellerTaxID = "SellerTaxID"
            case sellerAddress = "SellerAddress"
            case buyer = "Buyer"
            case buyerID = "BuyerID"
            case buyerAddress = "BuyerAddress"
            case buyerTel = "BuyerTel"
            case companyName = "CompanyName"
            case companyTaxID = "CompanyTaxID"
            case companyBankAccount = "CompanyBankAccount"
            case companyTel = "CompanyTel"
            case companyAddress = "CompanyAddress"
            case transferAdministrationName = "TransferAdministrationName"
            case licensePlate = "LicensePlate"
            case registrationNumber = "RegistrationNumber"
            case vin = "VIN"
            case vehicleModel = "VehicleModel"
            case kind = "Kind"
            case province = "Province"
            case city = "City"
            case vehicleType = "VehicleType"
            case remark = "Remark"
            case formType = "FormType"
            case formName = "FormName"
            case companySealMark = "CompanySealMark"
        }
    }

    /// 二手车销售统一发票信息
    public struct UsedVehicleInvoiceInfo: TCOutputModel {
        /// 所属税局
        public let taxBureau: String

        /// 买方单位/个人
        public let buyer: String

        /// 买方单位代码/身份证号码
        public let buyerNo: String

        /// 买方单位/个人地址
        public let buyerAddress: String

        /// 买方单位电话
        public let buyerTel: String

        /// 卖方单位/个人
        public let seller: String

        /// 卖方单位代码/身份证号码
        public let sellerNo: String

        /// 卖方单位/个人地址
        public let sellerAddress: String

        /// 卖方单位电话
        public let sellerTel: String

        /// 车牌照号
        public let vehicleLicenseNo: String

        /// 登记证号
        public let registerNo: String

        /// 车架号/车辆识别代码
        public let vehicleIdentifyNo: String

        /// 转入地车辆管理所名称
        public let managementOffice: String

        /// 车价合计
        public let vehicleTotalPrice: String

        /// 经营、拍卖单位
        public let auctioneer: String

        /// 经营、拍卖单位地址
        public let auctioneerAddress: String

        /// 经营、拍卖单位纳税人识别号
        public let auctioneerTaxpayerNum: String

        /// 经营、拍卖单位开户银行、账号
        public let auctioneerBankAccount: String

        /// 经营、拍卖单位电话
        public let auctioneerTel: String

        /// 二手车市场
        public let market: String

        /// 二手车市场纳税人识别号
        public let marketTaxpayerNum: String

        /// 二手车市场地址
        public let marketAddress: String

        /// 二手车市场开户银行账号
        public let marketBankAccount: String

        /// 二手车市场电话
        public let marketTel: String

        enum CodingKeys: String, CodingKey {
            case taxBureau = "TaxBureau"
            case buyer = "Buyer"
            case buyerNo = "BuyerNo"
            case buyerAddress = "BuyerAddress"
            case buyerTel = "BuyerTel"
            case seller = "Seller"
            case sellerNo = "SellerNo"
            case sellerAddress = "SellerAddress"
            case sellerTel = "SellerTel"
            case vehicleLicenseNo = "VehicleLicenseNo"
            case registerNo = "RegisterNo"
            case vehicleIdentifyNo = "VehicleIdentifyNo"
            case managementOffice = "ManagementOffice"
            case vehicleTotalPrice = "VehicleTotalPrice"
            case auctioneer = "Auctioneer"
            case auctioneerAddress = "AuctioneerAddress"
            case auctioneerTaxpayerNum = "AuctioneerTaxpayerNum"
            case auctioneerBankAccount = "AuctioneerBankAccount"
            case auctioneerTel = "AuctioneerTel"
            case market = "Market"
            case marketTaxpayerNum = "MarketTaxpayerNum"
            case marketAddress = "MarketAddress"
            case marketBankAccount = "MarketBankAccount"
            case marketTel = "MarketTel"
        }
    }

    /// value信息组
    public struct Value: TCOutputModel {
        /// 自动识别的字段内容
        public let autoContent: String?

        /// 四点坐标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coord: Polygon?

        enum CodingKeys: String, CodingKey {
            case autoContent = "AutoContent"
            case coord = "Coord"
        }
    }

    /// 电子发票返回值
    public struct VatElectronicInfo: TCOutputModel {
        /// 发票名称
        public let title: String?

        /// 发票号码
        public let number: String?

        /// 开票日期
        public let date: String?

        /// 税前金额
        public let pretaxAmount: String?

        /// 合计税额
        public let tax: String?

        /// 价税合计（小写）
        public let total: String?

        /// 价税合计（大写）
        public let totalCn: String?

        /// 销售方名称
        public let seller: String?

        /// 销售方纳税人识别号
        public let sellerTaxID: String?

        /// 购买方名称
        public let buyer: String?

        /// 购买方纳税人识别号
        public let buyerTaxID: String?

        /// 开票人
        public let issuer: String?

        /// 备注
        public let remark: String?

        /// 小计金额
        public let subTotal: String?

        /// 小计税额
        public let subTax: String?

        /// 电子发票详细条目信息
        public let vatElectronicItems: [VatElectronicItemInfo]?

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case number = "Number"
            case date = "Date"
            case pretaxAmount = "PretaxAmount"
            case tax = "Tax"
            case total = "Total"
            case totalCn = "TotalCn"
            case seller = "Seller"
            case sellerTaxID = "SellerTaxID"
            case buyer = "Buyer"
            case buyerTaxID = "BuyerTaxID"
            case issuer = "Issuer"
            case remark = "Remark"
            case subTotal = "SubTotal"
            case subTax = "SubTax"
            case vatElectronicItems = "VatElectronicItems"
        }
    }

    /// 电子发票详细条目信息
    public struct VatElectronicItemInfo: TCOutputModel {
        /// 项目名称
        public let name: String?

        /// 数量
        public let quantity: String?

        /// 规格型号
        public let specification: String?

        /// 单价
        public let price: String?

        /// 金额
        public let total: String?

        /// 税率
        public let taxRate: String?

        /// 税额
        public let tax: String?

        /// 单位
        public let unit: String?

        /// 运输工具类型
        public let vehicleType: String?

        /// 运输工具牌号
        public let vehicleBrand: String?

        /// 起始地
        public let departurePlace: String?

        /// 到达地
        public let arrivalPlace: String?

        /// 运输货物名称，仅货物运输服务发票返回
        public let transportItemsName: String?

        /// 建筑服务发生地，仅建筑发票返回
        public let placeOfBuildingService: String?

        /// 建筑项目名称，仅建筑发票返回
        public let buildingName: String?

        /// 产权证书/不动产权证号，仅不动产经营租赁服务发票返回
        public let estateNumber: String?

        /// 面积单位，仅不动产经营租赁服务发票返回
        public let areaUnit: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case quantity = "Quantity"
            case specification = "Specification"
            case price = "Price"
            case total = "Total"
            case taxRate = "TaxRate"
            case tax = "Tax"
            case unit = "Unit"
            case vehicleType = "VehicleType"
            case vehicleBrand = "VehicleBrand"
            case departurePlace = "DeparturePlace"
            case arrivalPlace = "ArrivalPlace"
            case transportItemsName = "TransportItemsName"
            case placeOfBuildingService = "PlaceOfBuildingService"
            case buildingName = "BuildingName"
            case estateNumber = "EstateNumber"
            case areaUnit = "AreaUnit"
        }
    }

    /// 增值税发票信息
    public struct VatInvoice: TCOutputModel {
        /// 发票代码
        public let code: String

        /// 发票号码
        public let number: String

        /// 开票日期
        public let date: String

        /// 购方抬头
        public let buyerName: String

        /// 购方税号
        public let buyerTaxCode: String

        /// 购方地址电话
        public let buyerAddressPhone: String

        /// 购方银行账号
        public let buyerBankAccount: String

        /// 销方名称
        public let sellerName: String

        /// 销方税号
        public let sellerTaxCode: String

        /// 销方地址电话
        public let sellerAddressPhone: String

        /// 销方银行账号
        public let sellerBankAccount: String

        /// 备注
        public let remark: String

        /// 机器编码
        public let machineNo: String

        /// 票种类型
        /// 01：增值税专用发票，
        /// 02：货运运输业增值税专用发票，
        /// 03：机动车销售统一发票，
        /// 04：增值税普通发票，
        /// 08：增值税电子专用发票（含全电，全电仅新版接口支持），
        /// 10：增值税电子普通发票（含全电，全电仅新版接口支持），
        /// 11：增值税普通发票（卷式），
        /// 14：增值税电子（通行费）发票，
        /// 15：二手车销售统一发票，
        /// 32：深圳区块链发票，
        /// 102：通用机打电子发票
        public let type: String

        /// 检验码
        public let checkCode: String

        /// 是否作废（红冲）是否作废（红冲）
        /// Y：已作废，N：未作废，H：红冲，HP：部分红冲，HF：全额红冲
        public let isAbandoned: String

        /// 是否有销货清单
        /// Y: 有清单 N：无清单
        /// 卷票无
        public let hasSellerList: String

        /// 销货清单标题
        public let sellerListTitle: String

        /// 销货清单税额
        public let sellerListTax: String

        /// 不含税金额
        public let amountWithoutTax: String

        /// 税额
        public let taxAmount: String

        /// 含税金额
        public let amountWithTax: String

        /// 项目明细
        public let items: [VatInvoiceItem]

        /// 所属税局
        public let taxBureau: String

        /// 通行费标志:Y、是;N、否
        public let trafficFreeFlag: String

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case number = "Number"
            case date = "Date"
            case buyerName = "BuyerName"
            case buyerTaxCode = "BuyerTaxCode"
            case buyerAddressPhone = "BuyerAddressPhone"
            case buyerBankAccount = "BuyerBankAccount"
            case sellerName = "SellerName"
            case sellerTaxCode = "SellerTaxCode"
            case sellerAddressPhone = "SellerAddressPhone"
            case sellerBankAccount = "SellerBankAccount"
            case remark = "Remark"
            case machineNo = "MachineNo"
            case type = "Type"
            case checkCode = "CheckCode"
            case isAbandoned = "IsAbandoned"
            case hasSellerList = "HasSellerList"
            case sellerListTitle = "SellerListTitle"
            case sellerListTax = "SellerListTax"
            case amountWithoutTax = "AmountWithoutTax"
            case taxAmount = "TaxAmount"
            case amountWithTax = "AmountWithTax"
            case items = "Items"
            case taxBureau = "TaxBureau"
            case trafficFreeFlag = "TrafficFreeFlag"
        }
    }

    /// 发票商品
    public struct VatInvoiceGoodsInfo: TCOutputModel {
        /// 项目名称
        public let item: String

        /// 规格型号
        public let specification: String

        /// 单位
        public let measurementDimension: String

        /// 价格
        public let price: String

        /// 数量
        public let quantity: String

        /// 金额
        public let amount: String

        /// 税率(如6%、免税)
        public let taxScheme: String

        /// 税额
        public let taxAmount: String

        enum CodingKeys: String, CodingKey {
            case item = "Item"
            case specification = "Specification"
            case measurementDimension = "MeasurementDimension"
            case price = "Price"
            case quantity = "Quantity"
            case amount = "Amount"
            case taxScheme = "TaxScheme"
            case taxAmount = "TaxAmount"
        }
    }

    /// 增值税发票返回值
    public struct VatInvoiceInfo: TCOutputModel {
        /// 校验码
        public let checkCode: String

        /// 发票联次
        public let formType: String

        /// 车船税
        public let travelTax: String

        /// 购买方地址电话
        public let buyerAddrTel: String

        /// 购买方银行账号
        public let buyerBankAccount: String

        /// 公司印章内容
        public let companySealContent: String

        /// 税务局章内容
        public let taxSealContent: String

        /// 服务类型
        public let serviceName: String

        /// 市
        public let city: String

        /// 是否存在二维码（0：没有，1：有）
        public let qrCodeMark: Int64

        /// 是否有代开标记（0：没有，1：有）
        public let agentMark: Int64

        /// 是否有通行费标记（0：没有，1：有）
        public let transitMark: Int64

        /// 是否有成品油标记（0：没有，1：有）
        public let oilMark: Int64

        /// 发票名称
        public let title: String

        /// 发票消费类型
        public let kind: String

        /// 发票代码
        public let code: String

        /// 发票号码
        public let number: String

        /// 机打发票号码
        public let numberConfirm: String

        /// 开票日期
        public let date: String

        /// 价税合计（小写）
        public let total: String

        /// 价税合计（大写）
        public let totalCn: String

        /// 税前金额
        public let pretaxAmount: String

        /// 合计税额
        public let tax: String

        /// 机器编号
        public let machineCode: String

        /// 密码区
        public let ciphertext: String

        /// 备注
        public let remark: String

        /// 销售方名称
        public let seller: String

        /// 销售方纳税人识别号
        public let sellerTaxID: String

        /// 销售方地址电话
        public let sellerAddrTel: String

        /// 销售方银行账号
        public let sellerBankAccount: String

        /// 购买方名称
        public let buyer: String

        /// 购买方纳税人识别号
        public let buyerTaxID: String

        /// 是否有公司印章（0：没有，1：有）
        public let companySealMark: Int64

        /// 开票人
        public let issuer: String

        /// 复核人
        public let reviewer: String

        /// 省
        public let province: String

        /// 增值税发票项目信息
        public let vatInvoiceItemInfos: [VatInvoiceItemInfo]

        /// 机打发票代码
        public let codeConfirm: String

        /// 收款人
        public let receiptor: String

        /// 是否有全电纸质票（0：没有，1：有）
        public let electronicFullMark: Int64

        /// 全电号码
        public let electronicFullNumber: String

        /// 发票联名
        public let formName: String

        /// 是否有区块链标记（0：没有，1：有）
        public let blockChainMark: Int64

        /// 是否有收购标记（0：没有，1：有）
        public let acquisitionMark: Int64

        /// 小计金额
        public let subTotal: String

        /// 小计税额
        public let subTax: String

        enum CodingKeys: String, CodingKey {
            case checkCode = "CheckCode"
            case formType = "FormType"
            case travelTax = "TravelTax"
            case buyerAddrTel = "BuyerAddrTel"
            case buyerBankAccount = "BuyerBankAccount"
            case companySealContent = "CompanySealContent"
            case taxSealContent = "TaxSealContent"
            case serviceName = "ServiceName"
            case city = "City"
            case qrCodeMark = "QRCodeMark"
            case agentMark = "AgentMark"
            case transitMark = "TransitMark"
            case oilMark = "OilMark"
            case title = "Title"
            case kind = "Kind"
            case code = "Code"
            case number = "Number"
            case numberConfirm = "NumberConfirm"
            case date = "Date"
            case total = "Total"
            case totalCn = "TotalCn"
            case pretaxAmount = "PretaxAmount"
            case tax = "Tax"
            case machineCode = "MachineCode"
            case ciphertext = "Ciphertext"
            case remark = "Remark"
            case seller = "Seller"
            case sellerTaxID = "SellerTaxID"
            case sellerAddrTel = "SellerAddrTel"
            case sellerBankAccount = "SellerBankAccount"
            case buyer = "Buyer"
            case buyerTaxID = "BuyerTaxID"
            case companySealMark = "CompanySealMark"
            case issuer = "Issuer"
            case reviewer = "Reviewer"
            case province = "Province"
            case vatInvoiceItemInfos = "VatInvoiceItemInfos"
            case codeConfirm = "CodeConfirm"
            case receiptor = "Receiptor"
            case electronicFullMark = "ElectronicFullMark"
            case electronicFullNumber = "ElectronicFullNumber"
            case formName = "FormName"
            case blockChainMark = "BlockChainMark"
            case acquisitionMark = "AcquisitionMark"
            case subTotal = "SubTotal"
            case subTax = "SubTax"
        }
    }

    /// 增值税发票项目明细
    public struct VatInvoiceItem: TCOutputModel {
        /// 行号
        public let lineNo: String

        /// 名称
        public let name: String

        /// 规格
        public let spec: String

        /// 单位
        public let unit: String

        /// 数量
        public let quantity: String

        /// 单价
        public let unitPrice: String

        /// 不含税金额
        public let amountWithoutTax: String

        /// 税率
        public let taxRate: String

        /// 税额
        public let taxAmount: String

        /// 税收分类编码
        public let taxClassifyCode: String

        /// 运输工具类型
        public let vehicleType: String?

        /// 运输工具牌号
        public let vehicleBrand: String?

        /// 起始地
        public let departurePlace: String?

        /// 到达地
        public let arrivalPlace: String?

        /// 运输货物名称
        public let transportItemsName: String?

        /// 建筑服务发生地
        public let constructionPlace: String?

        /// 建筑项目名称
        public let constructionName: String?

        enum CodingKeys: String, CodingKey {
            case lineNo = "LineNo"
            case name = "Name"
            case spec = "Spec"
            case unit = "Unit"
            case quantity = "Quantity"
            case unitPrice = "UnitPrice"
            case amountWithoutTax = "AmountWithoutTax"
            case taxRate = "TaxRate"
            case taxAmount = "TaxAmount"
            case taxClassifyCode = "TaxClassifyCode"
            case vehicleType = "VehicleType"
            case vehicleBrand = "VehicleBrand"
            case departurePlace = "DeparturePlace"
            case arrivalPlace = "ArrivalPlace"
            case transportItemsName = "TransportItemsName"
            case constructionPlace = "ConstructionPlace"
            case constructionName = "ConstructionName"
        }
    }

    /// 增值税发票项目信息
    public struct VatInvoiceItemInfo: TCOutputModel {
        /// 项目名称
        public let name: String

        /// 规格型号
        public let specification: String

        /// 单位
        public let unit: String

        /// 数量
        public let quantity: String

        /// 单价
        public let price: String

        /// 金额
        public let total: String

        /// 税率
        public let taxRate: String

        /// 税额
        public let tax: String

        /// 通行日期起
        public let dateStart: String

        /// 通行日期止
        public let dateEnd: String

        /// 车牌号
        public let licensePlate: String

        /// 车辆类型
        public let vehicleType: String

        /// 序号
        public let serialNumber: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case specification = "Specification"
            case unit = "Unit"
            case quantity = "Quantity"
            case price = "Price"
            case total = "Total"
            case taxRate = "TaxRate"
            case tax = "Tax"
            case dateStart = "DateStart"
            case dateEnd = "DateEnd"
            case licensePlate = "LicensePlate"
            case vehicleType = "VehicleType"
            case serialNumber = "SerialNumber"
        }
    }

    /// 增值税普通发票(卷票)
    public struct VatInvoiceRoll: TCOutputModel {
        /// 发票名称
        public let title: String

        /// 发票代码
        public let code: String

        /// 发票号码
        public let number: String

        /// 机打发票号码
        public let numberConfirm: String

        /// 开票日期
        public let date: String

        /// 校验码
        public let checkCode: String

        /// 销售方名称
        public let seller: String

        /// 销售方纳税人识别号
        public let sellerTaxID: String

        /// 购买方名称
        public let buyer: String

        /// 购买方纳税人识别号
        public let buyerTaxID: String

        /// 种类
        public let category: String

        /// 价税合计（小写）
        public let total: String

        /// 价税合计（大写）
        public let totalCn: String

        /// 发票消费类型
        public let kind: String

        /// 省
        public let province: String

        /// 市
        public let city: String

        /// 是否有公司印章（0：没有，1：有）
        public let companySealMark: Int64

        /// 是否存在二维码（1：有，0：无）
        public let qrCodeMark: Int64

        /// 服务类型
        public let serviceName: String

        /// 公司印章内容
        public let companySealContent: String

        /// 税务局章内容
        public let taxSealContent: String

        /// 条目
        public let vatRollItems: [VatRollItem]

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case code = "Code"
            case number = "Number"
            case numberConfirm = "NumberConfirm"
            case date = "Date"
            case checkCode = "CheckCode"
            case seller = "Seller"
            case sellerTaxID = "SellerTaxID"
            case buyer = "Buyer"
            case buyerTaxID = "BuyerTaxID"
            case category = "Category"
            case total = "Total"
            case totalCn = "TotalCn"
            case kind = "Kind"
            case province = "Province"
            case city = "City"
            case companySealMark = "CompanySealMark"
            case qrCodeMark = "QRCodeMark"
            case serviceName = "ServiceName"
            case companySealContent = "CompanySealContent"
            case taxSealContent = "TaxSealContent"
            case vatRollItems = "VatRollItems"
        }
    }

    /// 发票人员信息
    public struct VatInvoiceUserInfo: TCOutputModel {
        /// 名称
        public let name: String

        /// 纳税人识别号
        public let taxId: String

        /// 地 址、电 话
        public let addrTel: String

        /// 开户行及账号
        public let financialAccount: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case taxId = "TaxId"
            case addrTel = "AddrTel"
            case financialAccount = "FinancialAccount"
        }
    }

    /// 增值税发票卷票信息
    public struct VatRollInvoiceInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 发票代码、合计金额(小写)、合计金额(大写)、开票日期、发票号码、购买方识别号、销售方识别号、校验码、销售方名称、购买方名称、发票消费类型、省、市、是否有公司印章、单价、金额、数量、服务类型、品名、种类。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段Name对应的字符串结果。
        public let value: String

        /// 文本行在旋转纠正之后的图像中的像素坐标。
        public let rect: Rect

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
            case rect = "Rect"
        }
    }

    /// 增值税普通发票（卷票）条目
    public struct VatRollItem: TCOutputModel {
        /// 项目名称
        public let name: String?

        /// 数量
        public let quantity: String?

        /// 单价
        public let price: String?

        /// 金额
        public let total: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case quantity = "Quantity"
            case price = "Price"
            case total = "Total"
        }
    }

    /// 机动车销售统一发票信息
    public struct VehicleInvoiceInfo: TCOutputModel {
        /// 车辆类型
        public let carType: String

        /// 厂牌型号
        public let plateModel: String

        /// 产地
        public let produceAddress: String

        /// 合格证号
        public let certificateNo: String

        /// 进口证明书号
        public let importNo: String

        /// LSVCA2NP9HN0xxxxx
        public let vinNo: String

        /// 完税证书号
        public let payTaxesNo: String

        /// 吨位
        public let tonnage: String

        /// 限乘人数
        public let limitCount: String

        /// 发动机号码
        public let engineNo: String

        /// 商检单号
        public let bizCheckFormNo: String

        /// 主管税务机关代码
        public let taxtationOrgCode: String

        /// 主管税务机关名称
        public let taxtationOrgName: String

        /// 税率
        public let motorTaxRate: String

        /// 开户行
        public let motorBankName: String

        /// 账号
        public let motorBankAccount: String

        /// 销售地址
        public let sellerAddress: String

        /// 销售电话
        public let sellerTel: String

        /// 购方身份证
        public let buyerNo: String

        enum CodingKeys: String, CodingKey {
            case carType = "CarType"
            case plateModel = "PlateModel"
            case produceAddress = "ProduceAddress"
            case certificateNo = "CertificateNo"
            case importNo = "ImportNo"
            case vinNo = "VinNo"
            case payTaxesNo = "PayTaxesNo"
            case tonnage = "Tonnage"
            case limitCount = "LimitCount"
            case engineNo = "EngineNo"
            case bizCheckFormNo = "BizCheckFormNo"
            case taxtationOrgCode = "TaxtationOrgCode"
            case taxtationOrgName = "TaxtationOrgName"
            case motorTaxRate = "MotorTaxRate"
            case motorBankName = "MotorBankName"
            case motorBankAccount = "MotorBankAccount"
            case sellerAddress = "SellerAddress"
            case sellerTel = "SellerTel"
            case buyerNo = "BuyerNo"
        }
    }

    /// 机动车登记证书识别结果
    public struct VehicleRegCertInfo: TCOutputModel {
        /// 识别出的字段名称(关键字)，支持以下字段：
        /// 【注册登记页】
        /// 车辆型号、车辆识别代号/车架号、发动机号、制造厂名称、轴距、轮胎数、总质量、外廓尺寸、轴数、车辆出厂日期、发证日期、使用性质、车辆获得方式、车辆类型、国产/进口、燃料种类、车身颜色、发动机型号、车辆品牌、编号、转向形式、
        /// 机动车所有人1、身份证明名称1、号码1、登记机关1、登记日期1
        /// 机动车所有人2、身份证明名称2、号码2、登记机关2、登记日期2
        /// 机动车所有人3、身份证明名称3、号码3、登记机关3、登记日期3
        /// 机动车所有人4、身份证明名称4、号码4、登记机关4、登记日期4
        /// 机动车所有人5、身份证明名称5、号码5、登记机关5、登记日期5
        /// 机动车所有人6、身份证明名称6、号码6、登记机关6、登记日期6
        /// 机动车所有人7、身份证明名称7、号码7、登记机关7、登记日期7
        /// 【抵押登记页】
        /// 机动车登记证书编号、身份证明名称/号码、抵押权人姓名/名称、抵押登记日期。
        public let name: String

        /// 识别出的字段名称对应的值，也就是字段name对应的字符串结果。
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 运单识别对象
    public struct WaybillObj: TCOutputModel {
        /// 识别出的文本行内容
        public let text: String

        enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    /// 英文OCR识别出的单词在原图中的四点坐标数组
    public struct WordCoordPoint: TCOutputModel {
        /// 英文OCR识别出的每个单词在原图中的四点坐标。
        public let wordCoordinate: [Coord]

        enum CodingKeys: String, CodingKey {
            case wordCoordinate = "WordCoordinate"
        }
    }

    /// 还原文本信息
    public struct WordItem: TCOutputModel {
        /// 文本块内容
        public let detectedText: String?

        /// 四点坐标
        public let coord: Polygon?

        enum CodingKeys: String, CodingKey {
            case detectedText = "DetectedText"
            case coord = "Coord"
        }
    }

    /// 识别出来的单词信息包括单词（包括单词Character和单词置信度confidence）
    public struct Words: TCOutputModel {
        /// 置信度 0 ~100
        public let confidence: Int64

        /// 候选字Character
        public let character: String

        enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case character = "Character"
        }
    }
}
