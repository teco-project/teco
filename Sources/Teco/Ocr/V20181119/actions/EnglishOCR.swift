//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ocr {
    /// EnglishOCR请求参数结构体
    public struct EnglishOCRRequest: TCRequestModel {
        /// 图片的 Base64 值。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经Base64编码后不超过 7M。图片下载时间不超过 3 秒。
        /// 图片的 ImageUrl、ImageBase64 必须提供一个，如果都提供，只使用 ImageUrl。
        public let imageBase64: String?

        /// 图片的 Url 地址。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经 Base64 编码后不超过 7M。图片下载时间不超过 3 秒。
        /// 图片存储于腾讯云的 Url 可保障更高的下载速度和稳定性，建议图片存储于腾讯云。
        /// 非腾讯云存储的 Url 速度和稳定性可能受一定影响。
        public let imageUrl: String?

        /// 单词四点坐标开关，开启可返回图片中单词的四点坐标。
        /// 该参数默认值为false。
        public let enableCoordPoint: Bool?

        /// 候选字开关，开启可返回识别时多个可能的候选字（每个候选字对应其置信度）。
        /// 该参数默认值为false。
        public let enableCandWord: Bool?

        /// 预处理开关，功能是检测图片倾斜的角度，将原本倾斜的图片矫正。该参数默认值为true。
        public let preprocess: Bool?

        public init(imageBase64: String? = nil, imageUrl: String? = nil, enableCoordPoint: Bool? = nil, enableCandWord: Bool? = nil, preprocess: Bool? = nil) {
            self.imageBase64 = imageBase64
            self.imageUrl = imageUrl
            self.enableCoordPoint = enableCoordPoint
            self.enableCandWord = enableCandWord
            self.preprocess = preprocess
        }

        enum CodingKeys: String, CodingKey {
            case imageBase64 = "ImageBase64"
            case imageUrl = "ImageUrl"
            case enableCoordPoint = "EnableCoordPoint"
            case enableCandWord = "EnableCandWord"
            case preprocess = "Preprocess"
        }
    }

    /// EnglishOCR返回参数结构体
    public struct EnglishOCRResponse: TCResponseModel {
        /// 检测到的文本信息，具体内容请点击左侧链接。
        public let textDetections: [TextDetectionEn]

        /// 图片旋转角度（角度制），文本的水平方向为0°；顺时针为正，逆时针为负。点击查看<a href="https://cloud.tencent.com/document/product/866/45139">如何纠正倾斜文本</a>
        public let angel: Float

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case textDetections = "TextDetections"
            case angel = "Angel"
            case requestId = "RequestId"
        }
    }

    /// 英文识别
    ///
    /// 本接口支持图像英文文字的检测和识别，返回文字框位置与文字内容。支持多场景、任意版面下的英文、字母、数字和常见字符的识别，同时覆盖英文印刷体和英文手写体识别。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func englishOCR(_ input: EnglishOCRRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnglishOCRResponse> {
        self.client.execute(action: "EnglishOCR", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 英文识别
    ///
    /// 本接口支持图像英文文字的检测和识别，返回文字框位置与文字内容。支持多场景、任意版面下的英文、字母、数字和常见字符的识别，同时覆盖英文印刷体和英文手写体识别。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func englishOCR(_ input: EnglishOCRRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnglishOCRResponse {
        try await self.client.execute(action: "EnglishOCR", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 英文识别
    ///
    /// 本接口支持图像英文文字的检测和识别，返回文字框位置与文字内容。支持多场景、任意版面下的英文、字母、数字和常见字符的识别，同时覆盖英文印刷体和英文手写体识别。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func englishOCR(imageBase64: String? = nil, imageUrl: String? = nil, enableCoordPoint: Bool? = nil, enableCandWord: Bool? = nil, preprocess: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnglishOCRResponse> {
        self.englishOCR(.init(imageBase64: imageBase64, imageUrl: imageUrl, enableCoordPoint: enableCoordPoint, enableCandWord: enableCandWord, preprocess: preprocess), region: region, logger: logger, on: eventLoop)
    }

    /// 英文识别
    ///
    /// 本接口支持图像英文文字的检测和识别，返回文字框位置与文字内容。支持多场景、任意版面下的英文、字母、数字和常见字符的识别，同时覆盖英文印刷体和英文手写体识别。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func englishOCR(imageBase64: String? = nil, imageUrl: String? = nil, enableCoordPoint: Bool? = nil, enableCandWord: Bool? = nil, preprocess: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnglishOCRResponse {
        try await self.englishOCR(.init(imageBase64: imageBase64, imageUrl: imageUrl, enableCoordPoint: enableCoordPoint, enableCandWord: enableCandWord, preprocess: preprocess), region: region, logger: logger, on: eventLoop)
    }
}
