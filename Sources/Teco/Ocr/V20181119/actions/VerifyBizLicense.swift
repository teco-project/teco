//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ocr {
    /// VerifyBizLicense请求参数结构体
    public struct VerifyBizLicenseRequest: TCRequestModel {
        /// 用于入参是营业执照图片的场景，ImageBase64和ImageUrl必须提供一个，如果都提供，只使用 ImageUrl。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经Base64编码后不超过 7M。图片下载时间不超过 3 秒。
        public let imageBase64: String?

        /// 用于入参是营业执照图片的场景，ImageBase64和ImageUrl必须提供一个，如果都提供，只使用 ImageUrl。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经Base64编码后不超过 7M。图片下载时间不超过 3 秒。
        public let imageUrl: String?

        /// 用于入参是营业执照图片的场景，表示需要校验的参数：RegNum（注册号或者统一社会信用代码），Name（企业名称），Address（经营地址）。选择后会返回相关参数校验结果。RegNum为必选，Name和Address可选。
        /// 格式为{RegNum: true, Name:true/false, Address:true/false}
        /// 设置方式参考：
        /// Config = Json.stringify({"Name":true,"Address":true})
        /// API 3.0 Explorer 设置方式参考：
        /// Config = {"Name":true,"Address":true}
        public let imageConfig: String?

        /// 用于入参是文本的场景，RegNum表示注册号或者统一社会信用代码。若没有传入营业执照图片，则RegNum为必选项，若图片和RegNum都传入，则只使用RegNum。
        public let regNum: String?

        /// 用于入参是文本的场景，Name表示企业名称。Name为可选项，填写后会返回Name的校验结果。
        public let name: String?

        /// 用于入参是文本的场景，Address表示经营地址，填写后会返回Address的校验结果。
        public let address: String?

        public init(imageBase64: String? = nil, imageUrl: String? = nil, imageConfig: String? = nil, regNum: String? = nil, name: String? = nil, address: String? = nil) {
            self.imageBase64 = imageBase64
            self.imageUrl = imageUrl
            self.imageConfig = imageConfig
            self.regNum = regNum
            self.name = name
            self.address = address
        }

        enum CodingKeys: String, CodingKey {
            case imageBase64 = "ImageBase64"
            case imageUrl = "ImageUrl"
            case imageConfig = "ImageConfig"
            case regNum = "RegNum"
            case name = "Name"
            case address = "Address"
        }
    }

    /// VerifyBizLicense返回参数结构体
    public struct VerifyBizLicenseResponse: TCResponseModel {
        /// 状态码
        public let errorCode: Int64

        /// 统一社会信用代码
        public let creditCode: String

        /// 组织机构代码
        public let orgCode: String

        /// 经营期限自（YYYY-MM-DD）
        public let openFrom: String

        /// 经营期限至（YYYY-MM-DD）
        public let openTo: String

        /// 法人姓名
        public let frName: String

        /// 经营状态，包括：成立、筹建、存续、在营、开业、在册、正常经营、开业登记中、登记成立、撤销、撤销登记、非正常户、告解、个体暂时吊销、个体转企业、吊销（未注销）、拟注销、已注销、（待）迁入、（待）迁出、停业、歇业、清算等。
        public let enterpriseStatus: String

        /// 经营（业务）范围及方式
        public let operateScopeAndForm: String

        /// 注册资金（单位:万元）
        public let regCap: String

        /// 注册币种
        public let regCapCur: String

        /// 登记机关
        public let regOrg: String

        /// 开业日期（YYYY-MM-DD）
        public let esDate: String

        /// 企业（机构）类型
        public let enterpriseType: String

        /// 注销日期
        public let cancelDate: String

        /// 吊销日期
        public let revokeDate: String

        /// 许可经营项目
        public let abuItem: String

        /// 一般经营项目
        public let cbuItem: String

        /// 核准时间
        public let apprDate: String

        /// 省（返回空值）
        public let province: String

        /// 地级市（返回空值）
        public let city: String

        /// 区\县（返回空值）
        public let county: String

        /// 住所所在行政区划代码（返回空值）
        public let areaCode: String

        /// 行业门类代码（返回空值）
        public let industryPhyCode: String

        /// 行业门类名称（返回空值）
        public let industryPhyName: String

        /// 国民经济行业代码（返回空值）
        public let industryCode: String

        /// 国民经济行业名称（返回空值）
        public let industryName: String

        /// 经营（业务）范围
        public let operateScope: String

        /// 要核验的工商注册号
        public let verifyRegNo: String

        /// 工商注册号
        public let regNo: String

        /// 要核验的企业名称
        public let verifyEnterpriseName: String

        /// 企业名称
        public let enterpriseName: String

        /// 要核验的注册地址
        public let verifyAddress: String

        /// 注册地址
        public let address: String

        /// 验证结果
        public let regNumResult: BizLicenseVerifyResult

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case creditCode = "CreditCode"
            case orgCode = "OrgCode"
            case openFrom = "OpenFrom"
            case openTo = "OpenTo"
            case frName = "FrName"
            case enterpriseStatus = "EnterpriseStatus"
            case operateScopeAndForm = "OperateScopeAndForm"
            case regCap = "RegCap"
            case regCapCur = "RegCapCur"
            case regOrg = "RegOrg"
            case esDate = "EsDate"
            case enterpriseType = "EnterpriseType"
            case cancelDate = "CancelDate"
            case revokeDate = "RevokeDate"
            case abuItem = "AbuItem"
            case cbuItem = "CbuItem"
            case apprDate = "ApprDate"
            case province = "Province"
            case city = "City"
            case county = "County"
            case areaCode = "AreaCode"
            case industryPhyCode = "IndustryPhyCode"
            case industryPhyName = "IndustryPhyName"
            case industryCode = "IndustryCode"
            case industryName = "IndustryName"
            case operateScope = "OperateScope"
            case verifyRegNo = "VerifyRegNo"
            case regNo = "RegNo"
            case verifyEnterpriseName = "VerifyEnterpriseName"
            case enterpriseName = "EnterpriseName"
            case verifyAddress = "VerifyAddress"
            case address = "Address"
            case regNumResult = "RegNumResult"
            case requestId = "RequestId"
        }
    }

    /// 营业执照识别及核验（详细版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验，返回的真实工商照面信息比营业执照识别及核验（基础版）接口更详细。
    /// 您可以输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询），接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。
    /// 查询到工商信息包括：统一社会信用代码、组织机构代码、经营期限、法人姓名、经营状态、经营业务范围及方式、注册资金、注册币种、登记机关、开业日期、企业（机构）类型、注销日期、吊销日期、许可经营项目、一般经营项目、核准时间、省、地级市、区/县、住所所在行政区划代码、行业门类代码、行业门类名称、国民经济行业代码、国民经济行业名称、经营（业务）范围等。
    @inlinable
    public func verifyBizLicense(_ input: VerifyBizLicenseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VerifyBizLicenseResponse> {
        self.client.execute(action: "VerifyBizLicense", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 营业执照识别及核验（详细版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验，返回的真实工商照面信息比营业执照识别及核验（基础版）接口更详细。
    /// 您可以输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询），接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。
    /// 查询到工商信息包括：统一社会信用代码、组织机构代码、经营期限、法人姓名、经营状态、经营业务范围及方式、注册资金、注册币种、登记机关、开业日期、企业（机构）类型、注销日期、吊销日期、许可经营项目、一般经营项目、核准时间、省、地级市、区/县、住所所在行政区划代码、行业门类代码、行业门类名称、国民经济行业代码、国民经济行业名称、经营（业务）范围等。
    @inlinable
    public func verifyBizLicense(_ input: VerifyBizLicenseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VerifyBizLicenseResponse {
        try await self.client.execute(action: "VerifyBizLicense", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 营业执照识别及核验（详细版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验，返回的真实工商照面信息比营业执照识别及核验（基础版）接口更详细。
    /// 您可以输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询），接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。
    /// 查询到工商信息包括：统一社会信用代码、组织机构代码、经营期限、法人姓名、经营状态、经营业务范围及方式、注册资金、注册币种、登记机关、开业日期、企业（机构）类型、注销日期、吊销日期、许可经营项目、一般经营项目、核准时间、省、地级市、区/县、住所所在行政区划代码、行业门类代码、行业门类名称、国民经济行业代码、国民经济行业名称、经营（业务）范围等。
    @inlinable
    public func verifyBizLicense(imageBase64: String? = nil, imageUrl: String? = nil, imageConfig: String? = nil, regNum: String? = nil, name: String? = nil, address: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VerifyBizLicenseResponse> {
        self.verifyBizLicense(VerifyBizLicenseRequest(imageBase64: imageBase64, imageUrl: imageUrl, imageConfig: imageConfig, regNum: regNum, name: name, address: address), region: region, logger: logger, on: eventLoop)
    }

    /// 营业执照识别及核验（详细版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验，返回的真实工商照面信息比营业执照识别及核验（基础版）接口更详细。
    /// 您可以输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询），接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。
    /// 查询到工商信息包括：统一社会信用代码、组织机构代码、经营期限、法人姓名、经营状态、经营业务范围及方式、注册资金、注册币种、登记机关、开业日期、企业（机构）类型、注销日期、吊销日期、许可经营项目、一般经营项目、核准时间、省、地级市、区/县、住所所在行政区划代码、行业门类代码、行业门类名称、国民经济行业代码、国民经济行业名称、经营（业务）范围等。
    @inlinable
    public func verifyBizLicense(imageBase64: String? = nil, imageUrl: String? = nil, imageConfig: String? = nil, regNum: String? = nil, name: String? = nil, address: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VerifyBizLicenseResponse {
        try await self.verifyBizLicense(VerifyBizLicenseRequest(imageBase64: imageBase64, imageUrl: imageUrl, imageConfig: imageConfig, regNum: regNum, name: name, address: address), region: region, logger: logger, on: eventLoop)
    }
}
