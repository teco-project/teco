//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ocr {
    /// VerifyBasicBizLicense请求参数结构体
    public struct VerifyBasicBizLicenseRequest: TCRequestModel {
        /// 用于入参是营业执照图片的场景，ImageBase64和ImageUrl必须提供一个，如果都提供，只使用 ImageUrl。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经Base64编码后不超过 7M。图片下载时间不超过 3 秒。
        public let imageBase64: String?

        /// 用于入参是营业执照图片的场景，ImageBase64和ImageUrl必须提供一个，如果都提供，只使用 ImageUrl。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经Base64编码后不超过 7M。图片下载时间不超过 3 秒。
        public let imageUrl: String?

        /// 用于入参是营业执照图片的场景，表示需要校验的参数：RegNum（注册号或者统一社会信用代码），Name（企业名称），Address（经营地址）。选择后会返回相关参数校验结果。RegNum为必选，Name和Address可选。
        /// 格式为{RegNum: true, Name:true/false, Address:true/false}
        ///
        /// 设置方式参考：
        /// Config = Json.stringify({"Name":true,"Address":true})
        /// API 3.0 Explorer 设置方式参考：
        /// Config = {"Name":true,"Address":true}
        public let imageConfig: String?

        /// 用于入参是文本的场景，RegNum表示注册号或者统一社会信用代码。若没有传入营业执照图片，则RegNum为必选项，若图片和RegNum都传入，则只使用RegNum。
        public let regNum: String?

        /// 用于入参是文本的场景，Name表示企业名称。Name为可选项，填写后会返回Name的校验结果。
        public let name: String?

        /// 用于入参是文本的场景，Address表示经营地址。Address为可选项，填写后会返回Address的校验结果。
        public let address: String?

        /// 1表示输出注册资本字段（单位：万元），其他值表示不输出。默认不输出。
        public let regCapital: Int64?

        /// true表示展示成立/注册日期
        public let establishTime: Bool?

        public init(imageBase64: String? = nil, imageUrl: String? = nil, imageConfig: String? = nil, regNum: String? = nil, name: String? = nil, address: String? = nil, regCapital: Int64? = nil, establishTime: Bool? = nil) {
            self.imageBase64 = imageBase64
            self.imageUrl = imageUrl
            self.imageConfig = imageConfig
            self.regNum = regNum
            self.name = name
            self.address = address
            self.regCapital = regCapital
            self.establishTime = establishTime
        }

        enum CodingKeys: String, CodingKey {
            case imageBase64 = "ImageBase64"
            case imageUrl = "ImageUrl"
            case imageConfig = "ImageConfig"
            case regNum = "RegNum"
            case name = "Name"
            case address = "Address"
            case regCapital = "RegCapital"
            case establishTime = "EstablishTime"
        }
    }

    /// VerifyBasicBizLicense返回参数结构体
    public struct VerifyBasicBizLicenseResponse: TCResponseModel {
        /// 状态码，成功时返回0
        public let errorCode: Int64

        /// 统一社会信用代码
        public let creditCode: String

        /// 经营期限自（YYYY-MM-DD）
        public let opfrom: String

        /// 经营期限至（YYYY-MM-DD）
        public let opto: String

        /// 法人姓名
        public let frname: String

        /// 经营状态，包括：成立、筹建、存续、在营、开业、在册、正常经营、开业登记中、登记成立、撤销、撤销登记、非正常户、告解、个体暂时吊销、个体转企业、吊销（未注销）、拟注销、已注销、（待）迁入、（待）迁出、停业、歇业、清算等。
        public let entstatus: String

        /// 经营业务范围
        public let zsopscope: String

        /// 查询的状态信息
        public let reason: String

        /// 原注册号
        public let oriregno: String

        /// 要核验的工商注册号
        public let verifyRegno: String

        /// 工商注册号
        public let regno: String

        /// 要核验的企业名称
        public let verifyEntname: String

        /// 企业名称
        public let entname: String

        /// 要核验的住址
        public let verifyDom: String

        /// 住址
        public let dom: String

        /// 验证结果
        public let regNumResult: BizLicenseVerifyResult

        /// 注册资本（单位：万元）,只有输入参数regCapital为1的时候才输出
        public let regCapital: String

        /// 成立/注册日期，只有输入参数EstablishTime为true时展示，默认为空
        public let establishTime: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case creditCode = "CreditCode"
            case opfrom = "Opfrom"
            case opto = "Opto"
            case frname = "Frname"
            case entstatus = "Entstatus"
            case zsopscope = "Zsopscope"
            case reason = "Reason"
            case oriregno = "Oriregno"
            case verifyRegno = "VerifyRegno"
            case regno = "Regno"
            case verifyEntname = "VerifyEntname"
            case entname = "Entname"
            case verifyDom = "VerifyDom"
            case dom = "Dom"
            case regNumResult = "RegNumResult"
            case regCapital = "RegCapital"
            case establishTime = "EstablishTime"
            case requestId = "RequestId"
        }
    }

    /// 营业执照识别及核验（基础版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验。
    ///
    /// 您可以通过输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询）进行核验，接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。查询到工商信息包括：统一社会信用代码、经营期限、法人姓名、经营状态、经营业务范围、注册资本等。
    @available(*, unavailable, message: "库源服务调整，该接口在2023年6月1日将正式下线。")
    @inlinable
    public func verifyBasicBizLicense(_ input: VerifyBasicBizLicenseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VerifyBasicBizLicenseResponse> {
        fatalError("VerifyBasicBizLicense is no longer available.")
    }

    /// 营业执照识别及核验（基础版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验。
    ///
    /// 您可以通过输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询）进行核验，接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。查询到工商信息包括：统一社会信用代码、经营期限、法人姓名、经营状态、经营业务范围、注册资本等。
    @available(*, unavailable, message: "库源服务调整，该接口在2023年6月1日将正式下线。")
    @inlinable
    public func verifyBasicBizLicense(_ input: VerifyBasicBizLicenseRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VerifyBasicBizLicenseResponse {
        fatalError("VerifyBasicBizLicense is no longer available.")
    }

    /// 营业执照识别及核验（基础版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验。
    ///
    /// 您可以通过输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询）进行核验，接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。查询到工商信息包括：统一社会信用代码、经营期限、法人姓名、经营状态、经营业务范围、注册资本等。
    @available(*, unavailable, message: "库源服务调整，该接口在2023年6月1日将正式下线。")
    @inlinable
    public func verifyBasicBizLicense(imageBase64: String? = nil, imageUrl: String? = nil, imageConfig: String? = nil, regNum: String? = nil, name: String? = nil, address: String? = nil, regCapital: Int64? = nil, establishTime: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VerifyBasicBizLicenseResponse> {
        fatalError("VerifyBasicBizLicense is no longer available.")
    }

    /// 营业执照识别及核验（基础版）
    ///
    /// 本接口支持营业执照信息的识别与准确性核验。
    ///
    /// 您可以通过输入营业执照注册号或营业执照图片（若两者都输入则只用注册号做查询）进行核验，接口返回查询到的工商照面信息，并比对要校验的字段与查询结果的一致性。查询到工商信息包括：统一社会信用代码、经营期限、法人姓名、经营状态、经营业务范围、注册资本等。
    @available(*, unavailable, message: "库源服务调整，该接口在2023年6月1日将正式下线。")
    @inlinable
    public func verifyBasicBizLicense(imageBase64: String? = nil, imageUrl: String? = nil, imageConfig: String? = nil, regNum: String? = nil, name: String? = nil, address: String? = nil, regCapital: Int64? = nil, establishTime: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VerifyBasicBizLicenseResponse {
        fatalError("VerifyBasicBizLicense is no longer available.")
    }
}
