//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ocr {
    /// SmartStructuralOCRV2请求参数结构体
    public struct SmartStructuralOCRV2Request: TCRequestModel {
        /// 图片的 Url 地址。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经 Base64 编码后不超过 7M。图片下载时间不超过 3 秒。
        /// 支持的图片像素：需介于20-10000px之间。
        /// 图片存储于腾讯云的 Url 可保障更高的下载速度和稳定性，建议图片存储于腾讯云。
        /// 非腾讯云存储的 Url 速度和稳定性可能受一定影响。
        public let imageUrl: String?

        /// 图片的 Base64 值。
        /// 支持的图片格式：PNG、JPG、JPEG，暂不支持 GIF 格式。
        /// 支持的图片大小：所下载图片经Base64编码后不超过 7M。图片下载时间不超过 3 秒。
        /// 支持的图片像素：需介于20-10000px之间。
        /// 图片的 ImageUrl、ImageBase64 必须提供一个，如果都提供，只使用 ImageUrl。
        public let imageBase64: String?

        /// 是否开启PDF识别，默认值为false，开启后可同时支持图片和PDF的识别。
        public let isPdf: Bool?

        /// 需要识别的PDF页面的对应页码，仅支持PDF单页识别，当上传文件为PDF且IsPdf参数值为true时有效，默认值为1。
        public let pdfPageNumber: UInt64?

        /// 自定义结构化功能需返回的字段名称，例：
        /// 若客户只想返回姓名、性别两个字段的识别结果，则输入
        /// ItemNames=["姓名","性别"]
        public let itemNames: [String]?

        /// 是否开启全文字段识别
        public let returnFullText: Bool?

        /// 配置id支持：
        /// General -- 通用场景
        /// OnlineTaxiItinerary -- 网约车行程单
        /// RideHailingDriverLicense -- 网约车驾驶证
        /// RideHailingTransportLicense -- 网约车运输证
        /// WayBill -- 快递运单
        /// AccountOpeningPermit -- 银行开户许可证
        public let configId: String?

        public init(imageUrl: String? = nil, imageBase64: String? = nil, isPdf: Bool? = nil, pdfPageNumber: UInt64? = nil, itemNames: [String]? = nil, returnFullText: Bool? = nil, configId: String? = nil) {
            self.imageUrl = imageUrl
            self.imageBase64 = imageBase64
            self.isPdf = isPdf
            self.pdfPageNumber = pdfPageNumber
            self.itemNames = itemNames
            self.returnFullText = returnFullText
            self.configId = configId
        }

        enum CodingKeys: String, CodingKey {
            case imageUrl = "ImageUrl"
            case imageBase64 = "ImageBase64"
            case isPdf = "IsPdf"
            case pdfPageNumber = "PdfPageNumber"
            case itemNames = "ItemNames"
            case returnFullText = "ReturnFullText"
            case configId = "ConfigId"
        }
    }

    /// SmartStructuralOCRV2返回参数结构体
    public struct SmartStructuralOCRV2Response: TCResponseModel {
        /// 图片旋转角度(角度制)，文本的水平方向
        /// 为 0；顺时针为正，逆时针为负
        public let angle: Float

        /// 配置结构化文本信息
        public let structuralList: [GroupInfo]

        /// 还原文本信息
        public let wordList: [WordItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case angle = "Angle"
            case structuralList = "StructuralList"
            case wordList = "WordList"
            case requestId = "RequestId"
        }
    }

    /// 智能结构化识别V2
    ///
    /// 本接口支持智能提取各类证照、票据、表单、合同等结构化场景的key:value字段信息，并支持提取表格信息的key:value组的结构化，灵活高效，适用于各类非标准材料的信息录入场景，点击[立即体验](https://cloud.tencent.com/product/smart-ocr)。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func smartStructuralOCRV2(_ input: SmartStructuralOCRV2Request, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SmartStructuralOCRV2Response> {
        self.client.execute(action: "SmartStructuralOCRV2", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 智能结构化识别V2
    ///
    /// 本接口支持智能提取各类证照、票据、表单、合同等结构化场景的key:value字段信息，并支持提取表格信息的key:value组的结构化，灵活高效，适用于各类非标准材料的信息录入场景，点击[立即体验](https://cloud.tencent.com/product/smart-ocr)。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func smartStructuralOCRV2(_ input: SmartStructuralOCRV2Request, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SmartStructuralOCRV2Response {
        try await self.client.execute(action: "SmartStructuralOCRV2", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 智能结构化识别V2
    ///
    /// 本接口支持智能提取各类证照、票据、表单、合同等结构化场景的key:value字段信息，并支持提取表格信息的key:value组的结构化，灵活高效，适用于各类非标准材料的信息录入场景，点击[立即体验](https://cloud.tencent.com/product/smart-ocr)。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func smartStructuralOCRV2(imageUrl: String? = nil, imageBase64: String? = nil, isPdf: Bool? = nil, pdfPageNumber: UInt64? = nil, itemNames: [String]? = nil, returnFullText: Bool? = nil, configId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SmartStructuralOCRV2Response> {
        self.smartStructuralOCRV2(.init(imageUrl: imageUrl, imageBase64: imageBase64, isPdf: isPdf, pdfPageNumber: pdfPageNumber, itemNames: itemNames, returnFullText: returnFullText, configId: configId), region: region, logger: logger, on: eventLoop)
    }

    /// 智能结构化识别V2
    ///
    /// 本接口支持智能提取各类证照、票据、表单、合同等结构化场景的key:value字段信息，并支持提取表格信息的key:value组的结构化，灵活高效，适用于各类非标准材料的信息录入场景，点击[立即体验](https://cloud.tencent.com/product/smart-ocr)。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func smartStructuralOCRV2(imageUrl: String? = nil, imageBase64: String? = nil, isPdf: Bool? = nil, pdfPageNumber: UInt64? = nil, itemNames: [String]? = nil, returnFullText: Bool? = nil, configId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SmartStructuralOCRV2Response {
        try await self.smartStructuralOCRV2(.init(imageUrl: imageUrl, imageBase64: imageBase64, isPdf: isPdf, pdfPageNumber: pdfPageNumber, itemNames: itemNames, returnFullText: returnFullText, configId: configId), region: region, logger: logger, on: eventLoop)
    }
}
