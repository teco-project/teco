//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ocr {
    /// PassportOCR请求参数结构体
    public struct PassportOCRRequest: TCRequestModel {
        /// 图片的 Base64 值。要求图片经Base64编码后不超过 7M，分辨率建议500*800以上，支持PNG、JPG、JPEG、BMP格式。建议卡片部分占据图片2/3以上。
        /// 图片的 ImageUrl、ImageBase64 必须提供一个，如果都提供，只使用 ImageUrl。
        public let imageBase64: String?

        /// 图片的 Url 地址。要求图片经Base64编码后不超过 7M，分辨率建议500*800以上，支持PNG、JPG、JPEG、BMP格式。建议卡片部分占据图片2/3以上。
        /// 建议图片存储于腾讯云，可保障更高的下载速度和稳定性。
        public let imageUrl: String?

        /// 默认填写CN
        /// 支持中国大陆地区护照。
        public let type: String?

        public init(imageBase64: String? = nil, imageUrl: String? = nil, type: String? = nil) {
            self.imageBase64 = imageBase64
            self.imageUrl = imageUrl
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case imageBase64 = "ImageBase64"
            case imageUrl = "ImageUrl"
            case type = "Type"
        }
    }

    /// PassportOCR返回参数结构体
    public struct PassportOCRResponse: TCResponseModel {
        /// 国家码
        public let country: String

        /// 护照号
        public let passportNo: String

        /// 性别
        public let sex: String

        /// 国籍
        public let nationality: String

        /// 出生日期
        public let birthDate: String

        /// 出生地点
        public let birthPlace: String

        /// 签发日期
        public let issueDate: String

        /// 签发地点
        public let issuePlace: String

        /// 有效期
        public let expiryDate: String

        /// 持证人签名
        public let signature: String

        /// 最下方第一行 MRZ Code 序列
        public let codeSet: String

        /// 最下方第二行 MRZ Code 序列
        public let codeCrc: String

        /// 姓名
        public let name: String

        /// 姓
        public let familyName: String

        /// 名
        public let firstName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case country = "Country"
            case passportNo = "PassportNo"
            case sex = "Sex"
            case nationality = "Nationality"
            case birthDate = "BirthDate"
            case birthPlace = "BirthPlace"
            case issueDate = "IssueDate"
            case issuePlace = "IssuePlace"
            case expiryDate = "ExpiryDate"
            case signature = "Signature"
            case codeSet = "CodeSet"
            case codeCrc = "CodeCrc"
            case name = "Name"
            case familyName = "FamilyName"
            case firstName = "FirstName"
            case requestId = "RequestId"
        }
    }

    /// 护照识别（中国大陆地区护照）
    ///
    /// 本接口支持中国大陆地区护照个人资料页多个字段的检测与识别。已支持字段包括英文姓名、中文姓名、国家码、护照号、出生地、出生日期、国籍英文、性别英文、有效期、签发地点英文、签发日期、持证人签名、护照机读码（MRZ码）等。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func passportOCR(_ input: PassportOCRRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<PassportOCRResponse> {
        self.client.execute(action: "PassportOCR", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 护照识别（中国大陆地区护照）
    ///
    /// 本接口支持中国大陆地区护照个人资料页多个字段的检测与识别。已支持字段包括英文姓名、中文姓名、国家码、护照号、出生地、出生日期、国籍英文、性别英文、有效期、签发地点英文、签发日期、持证人签名、护照机读码（MRZ码）等。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func passportOCR(_ input: PassportOCRRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PassportOCRResponse {
        try await self.client.execute(action: "PassportOCR", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 护照识别（中国大陆地区护照）
    ///
    /// 本接口支持中国大陆地区护照个人资料页多个字段的检测与识别。已支持字段包括英文姓名、中文姓名、国家码、护照号、出生地、出生日期、国籍英文、性别英文、有效期、签发地点英文、签发日期、持证人签名、护照机读码（MRZ码）等。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func passportOCR(imageBase64: String? = nil, imageUrl: String? = nil, type: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<PassportOCRResponse> {
        self.passportOCR(.init(imageBase64: imageBase64, imageUrl: imageUrl, type: type), region: region, logger: logger, on: eventLoop)
    }

    /// 护照识别（中国大陆地区护照）
    ///
    /// 本接口支持中国大陆地区护照个人资料页多个字段的检测与识别。已支持字段包括英文姓名、中文姓名、国家码、护照号、出生地、出生日期、国籍英文、性别英文、有效期、签发地点英文、签发日期、持证人签名、护照机读码（MRZ码）等。
    ///
    /// 默认接口请求频率限制：10次/秒。
    @inlinable
    public func passportOCR(imageBase64: String? = nil, imageUrl: String? = nil, type: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PassportOCRResponse {
        try await self.passportOCR(.init(imageBase64: imageBase64, imageUrl: imageUrl, type: type), region: region, logger: logger, on: eventLoop)
    }
}
