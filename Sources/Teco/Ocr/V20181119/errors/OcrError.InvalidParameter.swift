//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCOcrError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case configFormatError = "InvalidParameter.ConfigFormatError"
            case engineImageDecodeFailed = "InvalidParameter.EngineImageDecodeFailed"
            case invalidGTINError = "InvalidParameter.InvalidGTINError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// Config不是有效的JSON格式。
        public static var configFormatError: InvalidParameter {
            InvalidParameter(.configFormatError)
        }
        
        /// 图片解码失败。
        public static var engineImageDecodeFailed: InvalidParameter {
            InvalidParameter(.engineImageDecodeFailed)
        }
        
        /// 无效的GTIN。
        public static var invalidGTINError: InvalidParameter {
            InvalidParameter(.invalidGTINError)
        }
    }
}

extension TCOcrError.InvalidParameter: Equatable {
    public static func == (lhs: TCOcrError.InvalidParameter, rhs: TCOcrError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCOcrError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCOcrError.InvalidParameter {
    /// - Returns: ``TCOcrError`` that holds the same error and context.
    public func toOcrError() -> TCOcrError {
        guard let code = TCOcrError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCOcrError(code, context: self.context)
    }
}

extension TCOcrError.InvalidParameter {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
