//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCOcrError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case arrearsError = "FailedOperation.ArrearsError"
            case countLimitError = "FailedOperation.CountLimitError"
            case dataSourceQueryFailed = "FailedOperation.DataSourceQueryFailed"
            case detectFailed = "FailedOperation.DetectFailed"
            case downLoadError = "FailedOperation.DownLoadError"
            case emptyImageError = "FailedOperation.EmptyImageError"
            case engineRecognizeTimeout = "FailedOperation.EngineRecognizeTimeout"
            case idCardInfoIllegal = "FailedOperation.IdCardInfoIllegal"
            case imageBlur = "FailedOperation.ImageBlur"
            case imageDecodeFailed = "FailedOperation.ImageDecodeFailed"
            case imageNoBusinessCard = "FailedOperation.ImageNoBusinessCard"
            case imageNoIdCard = "FailedOperation.ImageNoIdCard"
            case imageNoText = "FailedOperation.ImageNoText"
            case imageSizeTooLarge = "FailedOperation.ImageSizeTooLarge"
            case invoiceMismatch = "FailedOperation.InvoiceMismatch"
            case languageNotSupport = "FailedOperation.LanguageNotSupport"
            case multiCardError = "FailedOperation.MultiCardError"
            case noBizLicense = "FailedOperation.NoBizLicense"
            case noHKIDCard = "FailedOperation.NoHKIDCard"
            case noMASIDCard = "FailedOperation.NoMASIDCard"
            case noPassport = "FailedOperation.NoPassport"
            case ocrFailed = "FailedOperation.OcrFailed"
            case queryNoRecord = "FailedOperation.QueryNoRecord"
            case unKnowError = "FailedOperation.UnKnowError"
            case unOpenError = "FailedOperation.UnOpenError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 帐号已欠费。
        public static var arrearsError: FailedOperation {
            FailedOperation(.arrearsError)
        }
        
        /// 今日次数达到限制。
        public static var countLimitError: FailedOperation {
            FailedOperation(.countLimitError)
        }
        
        /// 数据源查询失败。
        public static var dataSourceQueryFailed: FailedOperation {
            FailedOperation(.dataSourceQueryFailed)
        }
        
        /// 检测失败。
        public static var detectFailed: FailedOperation {
            FailedOperation(.detectFailed)
        }
        
        /// 文件下载失败。
        public static var downLoadError: FailedOperation {
            FailedOperation(.downLoadError)
        }
        
        /// 图片内容为空。
        public static var emptyImageError: FailedOperation {
            FailedOperation(.emptyImageError)
        }
        
        /// 引擎识别超时。
        public static var engineRecognizeTimeout: FailedOperation {
            FailedOperation(.engineRecognizeTimeout)
        }
        
        /// 身份证信息不合法（身份证号、姓名字段校验非法等）。
        public static var idCardInfoIllegal: FailedOperation {
            FailedOperation(.idCardInfoIllegal)
        }
        
        /// 图片模糊。
        public static var imageBlur: FailedOperation {
            FailedOperation(.imageBlur)
        }
        
        /// 图片解码失败。
        public static var imageDecodeFailed: FailedOperation {
            FailedOperation(.imageDecodeFailed)
        }
        
        /// 照片未检测到名片。
        public static var imageNoBusinessCard: FailedOperation {
            FailedOperation(.imageNoBusinessCard)
        }
        
        /// 图片中未检测到身份证。
        public static var imageNoIdCard: FailedOperation {
            FailedOperation(.imageNoIdCard)
        }
        
        /// 图片中未检测到文本。
        public static var imageNoText: FailedOperation {
            FailedOperation(.imageNoText)
        }
        
        /// 图片尺寸过大，请参考输出参数中关于图片大小限制的说明。
        public static var imageSizeTooLarge: FailedOperation {
            FailedOperation(.imageSizeTooLarge)
        }
        
        /// 发票数据不一致。
        public static var invoiceMismatch: FailedOperation {
            FailedOperation(.invoiceMismatch)
        }
        
        /// 输入的Language不支持。
        public static var languageNotSupport: FailedOperation {
            FailedOperation(.languageNotSupport)
        }
        
        /// 照片中存在多张卡。
        public static var multiCardError: FailedOperation {
            FailedOperation(.multiCardError)
        }
        
        public static var noBizLicense: FailedOperation {
            FailedOperation(.noBizLicense)
        }
        
        /// 非香港身份证。
        public static var noHKIDCard: FailedOperation {
            FailedOperation(.noHKIDCard)
        }
        
        /// 非马来身份证。
        public static var noMASIDCard: FailedOperation {
            FailedOperation(.noMASIDCard)
        }
        
        /// 非护照。
        public static var noPassport: FailedOperation {
            FailedOperation(.noPassport)
        }
        
        /// OCR识别失败。
        public static var ocrFailed: FailedOperation {
            FailedOperation(.ocrFailed)
        }
        
        /// 查询无记录。
        public static var queryNoRecord: FailedOperation {
            FailedOperation(.queryNoRecord)
        }
        
        /// 未知错误。
        public static var unKnowError: FailedOperation {
            FailedOperation(.unKnowError)
        }
        
        /// 服务未开通。
        public static var unOpenError: FailedOperation {
            FailedOperation(.unOpenError)
        }
    }
}

extension TCOcrError.FailedOperation: Equatable {
    public static func == (lhs: TCOcrError.FailedOperation, rhs: TCOcrError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCOcrError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCOcrError.FailedOperation {
    public func toOcrError() -> TCOcrError {
        guard let code = TCOcrError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCOcrError(code, context: self.context)
    }
}