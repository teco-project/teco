//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentRiskTemplateVulnerableList请求参数结构体
    public struct DescribeDSPAAssessmentRiskTemplateVulnerableListRequest: TCPaginatedRequest {
        /// dspa实例id
        public let dspaId: String

        /// 限制条数
        public let limit: Int64

        /// 偏移量
        public let offset: Int64

        /// 风险类型
        public let riskType: String?

        /// 风险名称
        public let riskName: String?

        /// 风险面
        public let riskSide: String?

        public init(dspaId: String, limit: Int64, offset: Int64, riskType: String? = nil, riskName: String? = nil, riskSide: String? = nil) {
            self.dspaId = dspaId
            self.limit = limit
            self.offset = offset
            self.riskType = riskType
            self.riskName = riskName
            self.riskSide = riskSide
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case limit = "Limit"
            case offset = "Offset"
            case riskType = "RiskType"
            case riskName = "RiskName"
            case riskSide = "RiskSide"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDSPAAssessmentRiskTemplateVulnerableListResponse) -> DescribeDSPAAssessmentRiskTemplateVulnerableListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), self.offset + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(dspaId: self.dspaId, limit: self.limit, offset: self.offset + .init(response.getItems().count), riskType: self.riskType, riskName: self.riskName, riskSide: self.riskSide)
        }
    }

    /// DescribeDSPAAssessmentRiskTemplateVulnerableList返回参数结构体
    public struct DescribeDSPAAssessmentRiskTemplateVulnerableListResponse: TCPaginatedResponse {
        /// 脆弱项列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskItemList: [AssessmentRiskItem]?

        /// 总条数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case riskItemList = "RiskItemList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``AssessmentRiskItem`` list from the paginated response.
        public func getItems() -> [AssessmentRiskItem] {
            self.riskItemList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询风险模版中的脆弱项配置
    ///
    /// 风险模版页面--查询风险模版中的脆弱项配置
    @inlinable
    public func describeDSPAAssessmentRiskTemplateVulnerableList(_ input: DescribeDSPAAssessmentRiskTemplateVulnerableListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskTemplateVulnerableListResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentRiskTemplateVulnerableList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询风险模版中的脆弱项配置
    ///
    /// 风险模版页面--查询风险模版中的脆弱项配置
    @inlinable
    public func describeDSPAAssessmentRiskTemplateVulnerableList(_ input: DescribeDSPAAssessmentRiskTemplateVulnerableListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskTemplateVulnerableListResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentRiskTemplateVulnerableList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询风险模版中的脆弱项配置
    ///
    /// 风险模版页面--查询风险模版中的脆弱项配置
    @inlinable
    public func describeDSPAAssessmentRiskTemplateVulnerableList(dspaId: String, limit: Int64, offset: Int64, riskType: String? = nil, riskName: String? = nil, riskSide: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskTemplateVulnerableListResponse> {
        self.describeDSPAAssessmentRiskTemplateVulnerableList(.init(dspaId: dspaId, limit: limit, offset: offset, riskType: riskType, riskName: riskName, riskSide: riskSide), region: region, logger: logger, on: eventLoop)
    }

    /// 查询风险模版中的脆弱项配置
    ///
    /// 风险模版页面--查询风险模版中的脆弱项配置
    @inlinable
    public func describeDSPAAssessmentRiskTemplateVulnerableList(dspaId: String, limit: Int64, offset: Int64, riskType: String? = nil, riskName: String? = nil, riskSide: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskTemplateVulnerableListResponse {
        try await self.describeDSPAAssessmentRiskTemplateVulnerableList(.init(dspaId: dspaId, limit: limit, offset: offset, riskType: riskType, riskName: riskName, riskSide: riskSide), region: region, logger: logger, on: eventLoop)
    }

    /// 查询风险模版中的脆弱项配置
    ///
    /// 风险模版页面--查询风险模版中的脆弱项配置
    @inlinable
    public func describeDSPAAssessmentRiskTemplateVulnerableListPaginated(_ input: DescribeDSPAAssessmentRiskTemplateVulnerableListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [AssessmentRiskItem])> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentRiskTemplateVulnerableList, logger: logger, on: eventLoop)
    }

    /// 查询风险模版中的脆弱项配置
    ///
    /// 风险模版页面--查询风险模版中的脆弱项配置
    @inlinable @discardableResult
    public func describeDSPAAssessmentRiskTemplateVulnerableListPaginated(_ input: DescribeDSPAAssessmentRiskTemplateVulnerableListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDSPAAssessmentRiskTemplateVulnerableListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentRiskTemplateVulnerableList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询风险模版中的脆弱项配置
    ///
    /// 风险模版页面--查询风险模版中的脆弱项配置
    ///
    /// - Returns: `AsyncSequence`s of ``AssessmentRiskItem`` and ``DescribeDSPAAssessmentRiskTemplateVulnerableListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDSPAAssessmentRiskTemplateVulnerableListPaginator(_ input: DescribeDSPAAssessmentRiskTemplateVulnerableListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDSPAAssessmentRiskTemplateVulnerableListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDSPAAssessmentRiskTemplateVulnerableList, logger: logger, on: eventLoop)
    }
}
