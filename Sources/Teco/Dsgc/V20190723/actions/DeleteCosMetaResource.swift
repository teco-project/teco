//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DeleteCosMetaResource请求参数结构体
    public struct DeleteCosMetaResourceRequest: TCRequest {
        /// 实例Id。
        public let dspaId: String

        /// 资源所处地域。
        public let resourceRegion: String

        /// 资源实例ID。
        public let resourceIds: [String]?

        public init(dspaId: String, resourceRegion: String, resourceIds: [String]? = nil) {
            self.dspaId = dspaId
            self.resourceRegion = resourceRegion
            self.resourceIds = resourceIds
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case resourceRegion = "ResourceRegion"
            case resourceIds = "ResourceIds"
        }
    }

    /// DeleteCosMetaResource返回参数结构体
    public struct DeleteCosMetaResourceResponse: TCResponse {
        /// 结果集合。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let results: [DspaTaskResult]?

        /// DSPA实例ID。
        public let dspaId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case results = "Results"
            case dspaId = "DspaId"
            case requestId = "RequestId"
        }
    }

    /// 删除用户COS元数据信息
    ///
    /// 本接口（DeleteCOSMetaData）用于删除COS元数据信息。
    @inlinable
    public func deleteCosMetaResource(_ input: DeleteCosMetaResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCosMetaResourceResponse> {
        self.client.execute(action: "DeleteCosMetaResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除用户COS元数据信息
    ///
    /// 本接口（DeleteCOSMetaData）用于删除COS元数据信息。
    @inlinable
    public func deleteCosMetaResource(_ input: DeleteCosMetaResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCosMetaResourceResponse {
        try await self.client.execute(action: "DeleteCosMetaResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除用户COS元数据信息
    ///
    /// 本接口（DeleteCOSMetaData）用于删除COS元数据信息。
    @inlinable
    public func deleteCosMetaResource(dspaId: String, resourceRegion: String, resourceIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCosMetaResourceResponse> {
        self.deleteCosMetaResource(.init(dspaId: dspaId, resourceRegion: resourceRegion, resourceIds: resourceIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除用户COS元数据信息
    ///
    /// 本接口（DeleteCOSMetaData）用于删除COS元数据信息。
    @inlinable
    public func deleteCosMetaResource(dspaId: String, resourceRegion: String, resourceIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCosMetaResourceResponse {
        try await self.deleteCosMetaResource(.init(dspaId: dspaId, resourceRegion: resourceRegion, resourceIds: resourceIds), region: region, logger: logger, on: eventLoop)
    }
}
