//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateAssetSortingReportRetryTask请求参数结构体
    public struct CreateAssetSortingReportRetryTaskRequest: TCRequest {
        /// 任务id
        public let reportTaskId: UInt64

        /// dspa实例id
        public let dspaId: String

        public init(reportTaskId: UInt64, dspaId: String) {
            self.reportTaskId = reportTaskId
            self.dspaId = dspaId
        }

        enum CodingKeys: String, CodingKey {
            case reportTaskId = "ReportTaskId"
            case dspaId = "DspaId"
        }
    }

    /// CreateAssetSortingReportRetryTask返回参数结构体
    public struct CreateAssetSortingReportRetryTaskResponse: TCResponse {
        /// 任务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reportTaskId: UInt64?

        /// 提示信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case reportTaskId = "ReportTaskId"
            case remark = "Remark"
            case requestId = "RequestId"
        }
    }

    /// 创建资产梳理报表导出重试任务
    @inlinable
    public func createAssetSortingReportRetryTask(_ input: CreateAssetSortingReportRetryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAssetSortingReportRetryTaskResponse> {
        self.client.execute(action: "CreateAssetSortingReportRetryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建资产梳理报表导出重试任务
    @inlinable
    public func createAssetSortingReportRetryTask(_ input: CreateAssetSortingReportRetryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetSortingReportRetryTaskResponse {
        try await self.client.execute(action: "CreateAssetSortingReportRetryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建资产梳理报表导出重试任务
    @inlinable
    public func createAssetSortingReportRetryTask(reportTaskId: UInt64, dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAssetSortingReportRetryTaskResponse> {
        self.createAssetSortingReportRetryTask(.init(reportTaskId: reportTaskId, dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }

    /// 创建资产梳理报表导出重试任务
    @inlinable
    public func createAssetSortingReportRetryTask(reportTaskId: UInt64, dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetSortingReportRetryTaskResponse {
        try await self.createAssetSortingReportRetryTask(.init(reportTaskId: reportTaskId, dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }
}
