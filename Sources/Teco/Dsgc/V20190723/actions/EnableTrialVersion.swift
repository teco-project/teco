//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// EnableTrialVersion请求参数结构体
    public struct EnableTrialVersionRequest: TCRequest {
        /// DSPA实例ID。
        public let dspaId: String

        /// 体验版本名称。
        public let trialVersion: String

        public init(dspaId: String, trialVersion: String) {
            self.dspaId = dspaId
            self.trialVersion = trialVersion
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case trialVersion = "TrialVersion"
        }
    }

    /// EnableTrialVersion返回参数结构体
    public struct EnableTrialVersionResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 启用版本体验
    @inlinable @discardableResult
    public func enableTrialVersion(_ input: EnableTrialVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableTrialVersionResponse> {
        self.client.execute(action: "EnableTrialVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 启用版本体验
    @inlinable @discardableResult
    public func enableTrialVersion(_ input: EnableTrialVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableTrialVersionResponse {
        try await self.client.execute(action: "EnableTrialVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 启用版本体验
    @inlinable @discardableResult
    public func enableTrialVersion(dspaId: String, trialVersion: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableTrialVersionResponse> {
        self.enableTrialVersion(.init(dspaId: dspaId, trialVersion: trialVersion), region: region, logger: logger, on: eventLoop)
    }

    /// 启用版本体验
    @inlinable @discardableResult
    public func enableTrialVersion(dspaId: String, trialVersion: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableTrialVersionResponse {
        try await self.enableTrialVersion(.init(dspaId: dspaId, trialVersion: trialVersion), region: region, logger: logger, on: eventLoop)
    }
}
