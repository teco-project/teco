//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeSensitiveCOSDataDistribution请求参数结构体
    public struct DescribeSensitiveCOSDataDistributionRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 2331
        public let complianceId: Int64

        /// 查询的资产信息列表
        public let assetList: [AssetList]

        public init(dspaId: String, complianceId: Int64, assetList: [AssetList]) {
            self.dspaId = dspaId
            self.complianceId = complianceId
            self.assetList = assetList
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
            case assetList = "AssetList"
        }
    }

    /// DescribeSensitiveCOSDataDistribution返回参数结构体
    public struct DescribeSensitiveCOSDataDistributionResponse: TCResponse {
        /// 分级分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelDistribution: [Note]?

        /// 分类分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryDistribution: [Note]?

        /// 规则分布详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleDistribution: [RuleDistribution]?

        /// 计算占比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveDataNum: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case levelDistribution = "LevelDistribution"
            case categoryDistribution = "CategoryDistribution"
            case ruleDistribution = "RuleDistribution"
            case sensitiveDataNum = "SensitiveDataNum"
            case requestId = "RequestId"
        }
    }

    /// 查询cos敏感数据分布
    ///
    /// 数据资产报告-查询cos的敏感数据分布（分级分布 分类分布 敏感规则分布详情列表）
    @inlinable
    public func describeSensitiveCOSDataDistribution(_ input: DescribeSensitiveCOSDataDistributionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSensitiveCOSDataDistributionResponse> {
        self.client.execute(action: "DescribeSensitiveCOSDataDistribution", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询cos敏感数据分布
    ///
    /// 数据资产报告-查询cos的敏感数据分布（分级分布 分类分布 敏感规则分布详情列表）
    @inlinable
    public func describeSensitiveCOSDataDistribution(_ input: DescribeSensitiveCOSDataDistributionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSensitiveCOSDataDistributionResponse {
        try await self.client.execute(action: "DescribeSensitiveCOSDataDistribution", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询cos敏感数据分布
    ///
    /// 数据资产报告-查询cos的敏感数据分布（分级分布 分类分布 敏感规则分布详情列表）
    @inlinable
    public func describeSensitiveCOSDataDistribution(dspaId: String, complianceId: Int64, assetList: [AssetList], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSensitiveCOSDataDistributionResponse> {
        self.describeSensitiveCOSDataDistribution(.init(dspaId: dspaId, complianceId: complianceId, assetList: assetList), region: region, logger: logger, on: eventLoop)
    }

    /// 查询cos敏感数据分布
    ///
    /// 数据资产报告-查询cos的敏感数据分布（分级分布 分类分布 敏感规则分布详情列表）
    @inlinable
    public func describeSensitiveCOSDataDistribution(dspaId: String, complianceId: Int64, assetList: [AssetList], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSensitiveCOSDataDistributionResponse {
        try await self.describeSensitiveCOSDataDistribution(.init(dspaId: dspaId, complianceId: complianceId, assetList: assetList), region: region, logger: logger, on: eventLoop)
    }
}
