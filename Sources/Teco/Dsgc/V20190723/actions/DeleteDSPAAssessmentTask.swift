//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DeleteDSPAAssessmentTask请求参数结构体
    public struct DeleteDSPAAssessmentTaskRequest: TCRequest {
        /// DSPA实例Id，格式“dspa-xxxxxxxx”
        public let dspaId: String

        /// 评估任务Id，格式“task-xxxxxxxx”
        public let taskId: String

        public init(dspaId: String, taskId: String) {
            self.dspaId = dspaId
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case taskId = "TaskId"
        }
    }

    /// DeleteDSPAAssessmentTask返回参数结构体
    public struct DeleteDSPAAssessmentTaskResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除DSPA评估任务
    ///
    /// 删除DSPA风险评估任务
    @inlinable @discardableResult
    public func deleteDSPAAssessmentTask(_ input: DeleteDSPAAssessmentTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDSPAAssessmentTaskResponse> {
        self.client.execute(action: "DeleteDSPAAssessmentTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除DSPA评估任务
    ///
    /// 删除DSPA风险评估任务
    @inlinable @discardableResult
    public func deleteDSPAAssessmentTask(_ input: DeleteDSPAAssessmentTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDSPAAssessmentTaskResponse {
        try await self.client.execute(action: "DeleteDSPAAssessmentTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除DSPA评估任务
    ///
    /// 删除DSPA风险评估任务
    @inlinable @discardableResult
    public func deleteDSPAAssessmentTask(dspaId: String, taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDSPAAssessmentTaskResponse> {
        self.deleteDSPAAssessmentTask(.init(dspaId: dspaId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除DSPA评估任务
    ///
    /// 删除DSPA风险评估任务
    @inlinable @discardableResult
    public func deleteDSPAAssessmentTask(dspaId: String, taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDSPAAssessmentTaskResponse {
        try await self.deleteDSPAAssessmentTask(.init(dspaId: dspaId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
