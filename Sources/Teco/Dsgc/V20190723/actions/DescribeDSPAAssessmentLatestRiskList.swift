//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentLatestRiskList请求参数结构体
    public struct DescribeDSPAAssessmentLatestRiskListRequest: TCRequest {
        /// dspa实例Id
        public let dspaId: String

        /// 评估模版id
        public let templateId: Int64

        /// 限制条数
        public let limit: Int64?

        /// 分页偏移量
        public let offset: String?

        /// 资产名称，数据源id
        public let dataSourceId: String?

        /// 风险类型
        public let riskType: String?

        /// 风险项
        public let controlItemId: String?

        /// 风险状态
        public let status: Int64?

        /// 扫描开始时间
        public let beginTime: String?

        /// 扫描结束时间
        public let endTime: String?

        /// 风险等级筛选
        public let riskLevel: String?

        /// 风险面筛选
        public let riskSide: [String]?

        /// ASC 正序，DESC倒叙
        public let timeSort: String?

        public init(dspaId: String, templateId: Int64, limit: Int64? = nil, offset: String? = nil, dataSourceId: String? = nil, riskType: String? = nil, controlItemId: String? = nil, status: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, riskLevel: String? = nil, riskSide: [String]? = nil, timeSort: String? = nil) {
            self.dspaId = dspaId
            self.templateId = templateId
            self.limit = limit
            self.offset = offset
            self.dataSourceId = dataSourceId
            self.riskType = riskType
            self.controlItemId = controlItemId
            self.status = status
            self.beginTime = beginTime
            self.endTime = endTime
            self.riskLevel = riskLevel
            self.riskSide = riskSide
            self.timeSort = timeSort
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case templateId = "TemplateId"
            case limit = "Limit"
            case offset = "Offset"
            case dataSourceId = "DataSourceId"
            case riskType = "RiskType"
            case controlItemId = "ControlItemId"
            case status = "Status"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case riskLevel = "RiskLevel"
            case riskSide = "RiskSide"
            case timeSort = "TimeSort"
        }
    }

    /// DescribeDSPAAssessmentLatestRiskList返回参数结构体
    public struct DescribeDSPAAssessmentLatestRiskListResponse: TCResponse {
        /// 最新风险详情列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestRiskList: [RiskItemInfo]?

        /// 总条数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case latestRiskList = "LatestRiskList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询最新风险详情列表数据
    ///
    /// 查询最新的风险详情列表数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskList(_ input: DescribeDSPAAssessmentLatestRiskListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentLatestRiskListResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentLatestRiskList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询最新风险详情列表数据
    ///
    /// 查询最新的风险详情列表数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskList(_ input: DescribeDSPAAssessmentLatestRiskListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentLatestRiskListResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentLatestRiskList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询最新风险详情列表数据
    ///
    /// 查询最新的风险详情列表数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskList(dspaId: String, templateId: Int64, limit: Int64? = nil, offset: String? = nil, dataSourceId: String? = nil, riskType: String? = nil, controlItemId: String? = nil, status: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, riskLevel: String? = nil, riskSide: [String]? = nil, timeSort: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentLatestRiskListResponse> {
        self.describeDSPAAssessmentLatestRiskList(.init(dspaId: dspaId, templateId: templateId, limit: limit, offset: offset, dataSourceId: dataSourceId, riskType: riskType, controlItemId: controlItemId, status: status, beginTime: beginTime, endTime: endTime, riskLevel: riskLevel, riskSide: riskSide, timeSort: timeSort), region: region, logger: logger, on: eventLoop)
    }

    /// 查询最新风险详情列表数据
    ///
    /// 查询最新的风险详情列表数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskList(dspaId: String, templateId: Int64, limit: Int64? = nil, offset: String? = nil, dataSourceId: String? = nil, riskType: String? = nil, controlItemId: String? = nil, status: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, riskLevel: String? = nil, riskSide: [String]? = nil, timeSort: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentLatestRiskListResponse {
        try await self.describeDSPAAssessmentLatestRiskList(.init(dspaId: dspaId, templateId: templateId, limit: limit, offset: offset, dataSourceId: dataSourceId, riskType: riskType, controlItemId: controlItemId, status: status, beginTime: beginTime, endTime: endTime, riskLevel: riskLevel, riskSide: riskSide, timeSort: timeSort), region: region, logger: logger, on: eventLoop)
    }
}
