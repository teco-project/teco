//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// GetUserQuotaInfo请求参数结构体
    public struct GetUserQuotaInfoRequest: TCRequest {
        /// DSPA实例ID。
        public let dspaId: String

        public init(dspaId: String) {
            self.dspaId = dspaId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
        }
    }

    /// GetUserQuotaInfo返回参数结构体
    public struct GetUserQuotaInfoResponse: TCResponse {
        /// DSPA实例ID。
        public let dspaId: String

        /// 用户购买的DB配额。
        public let dbTotalQuota: Int64

        /// 用户购买的COS存储量配额。
        public let cosTotalQuota: Int64

        /// 用户可用的DB配额。
        public let dbRemainQuota: Int64

        /// 用户可用的COS存储量配额。
        public let cosRemainQuota: Float

        /// COS存储量单位，比如TB。
        public let cosQuotaUnit: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case dbTotalQuota = "DbTotalQuota"
            case cosTotalQuota = "CosTotalQuota"
            case dbRemainQuota = "DbRemainQuota"
            case cosRemainQuota = "CosRemainQuota"
            case cosQuotaUnit = "CosQuotaUnit"
            case requestId = "RequestId"
        }
    }

    /// 获取用户购买配额信息
    @inlinable
    public func getUserQuotaInfo(_ input: GetUserQuotaInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetUserQuotaInfoResponse> {
        self.client.execute(action: "GetUserQuotaInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取用户购买配额信息
    @inlinable
    public func getUserQuotaInfo(_ input: GetUserQuotaInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetUserQuotaInfoResponse {
        try await self.client.execute(action: "GetUserQuotaInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取用户购买配额信息
    @inlinable
    public func getUserQuotaInfo(dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetUserQuotaInfoResponse> {
        self.getUserQuotaInfo(.init(dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取用户购买配额信息
    @inlinable
    public func getUserQuotaInfo(dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetUserQuotaInfoResponse {
        try await self.getUserQuotaInfo(.init(dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }
}
