//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ModifyDSPAComplianceGroup请求参数结构体
    public struct ModifyDSPAComplianceGroupRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 合规组ID
        public let complianceGroupId: Int64

        /// 合规组名称，1-60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字，Name不可重复
        public let name: String?

        /// 合规组描述，最大长度为1024个字符
        public let description: String?

        /// 合规组规则配置（参数已废弃，请传空数组）
        public let complianceGroupRules: [ComplianceGroupRuleIdInfo]?

        /// 分级组ID，新增参数，可选参数，默认值为1
        public let levelGroupId: UInt64?

        /// 是否开启别名
        public let ruleAlias: Bool?

        public init(dspaId: String, complianceGroupId: Int64, name: String? = nil, description: String? = nil, complianceGroupRules: [ComplianceGroupRuleIdInfo]? = nil, levelGroupId: UInt64? = nil, ruleAlias: Bool? = nil) {
            self.dspaId = dspaId
            self.complianceGroupId = complianceGroupId
            self.name = name
            self.description = description
            self.complianceGroupRules = complianceGroupRules
            self.levelGroupId = levelGroupId
            self.ruleAlias = ruleAlias
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceGroupId = "ComplianceGroupId"
            case name = "Name"
            case description = "Description"
            case complianceGroupRules = "ComplianceGroupRules"
            case levelGroupId = "LevelGroupId"
            case ruleAlias = "RuleAlias"
        }
    }

    /// ModifyDSPAComplianceGroup返回参数结构体
    public struct ModifyDSPAComplianceGroupResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改分类分级模板
    ///
    /// 修改分类分级模板，内置模板不支持修改。
    @inlinable @discardableResult
    public func modifyDSPAComplianceGroup(_ input: ModifyDSPAComplianceGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPAComplianceGroupResponse> {
        self.client.execute(action: "ModifyDSPAComplianceGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改分类分级模板
    ///
    /// 修改分类分级模板，内置模板不支持修改。
    @inlinable @discardableResult
    public func modifyDSPAComplianceGroup(_ input: ModifyDSPAComplianceGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPAComplianceGroupResponse {
        try await self.client.execute(action: "ModifyDSPAComplianceGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改分类分级模板
    ///
    /// 修改分类分级模板，内置模板不支持修改。
    @inlinable @discardableResult
    public func modifyDSPAComplianceGroup(dspaId: String, complianceGroupId: Int64, name: String? = nil, description: String? = nil, complianceGroupRules: [ComplianceGroupRuleIdInfo]? = nil, levelGroupId: UInt64? = nil, ruleAlias: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPAComplianceGroupResponse> {
        self.modifyDSPAComplianceGroup(.init(dspaId: dspaId, complianceGroupId: complianceGroupId, name: name, description: description, complianceGroupRules: complianceGroupRules, levelGroupId: levelGroupId, ruleAlias: ruleAlias), region: region, logger: logger, on: eventLoop)
    }

    /// 修改分类分级模板
    ///
    /// 修改分类分级模板，内置模板不支持修改。
    @inlinable @discardableResult
    public func modifyDSPAComplianceGroup(dspaId: String, complianceGroupId: Int64, name: String? = nil, description: String? = nil, complianceGroupRules: [ComplianceGroupRuleIdInfo]? = nil, levelGroupId: UInt64? = nil, ruleAlias: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPAComplianceGroupResponse {
        try await self.modifyDSPAComplianceGroup(.init(dspaId: dspaId, complianceGroupId: complianceGroupId, name: name, description: description, complianceGroupRules: complianceGroupRules, levelGroupId: levelGroupId, ruleAlias: ruleAlias), region: region, logger: logger, on: eventLoop)
    }
}
