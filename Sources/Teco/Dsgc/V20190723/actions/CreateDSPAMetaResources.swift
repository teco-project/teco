//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateDSPAMetaResources请求参数结构体
    public struct CreateDSPAMetaResourcesRequest: TCRequest {
        /// 资源类型，支持：cdb（云数据库 MySQL）、dcdb（TDSQL MySQL版）、mariadb（云数据库 MariaDB）、postgres（云数据库 PostgreSQL）、cynosdbpg（TDSQL-C PostgreSQL版）、cynosdbmysql（TDSQL-C MySQL版）
        public let metaType: String

        /// 资源所处地域。
        public let resourceRegion: String

        /// DSPA实例ID。
        public let dspaId: String

        /// 用来标记本次更新是否已经是最后一次，可选值：continue（后续还需要更新）、finished（本次是最后一次更新）。
        public let updateStatus: String

        /// 本次更新的ID号，用来标记一次完整的更新过程。
        public let updateId: String

        /// 资源列表。
        public let items: [DspaUserResourceMeta]

        public init(metaType: String, resourceRegion: String, dspaId: String, updateStatus: String, updateId: String, items: [DspaUserResourceMeta]) {
            self.metaType = metaType
            self.resourceRegion = resourceRegion
            self.dspaId = dspaId
            self.updateStatus = updateStatus
            self.updateId = updateId
            self.items = items
        }

        enum CodingKeys: String, CodingKey {
            case metaType = "MetaType"
            case resourceRegion = "ResourceRegion"
            case dspaId = "DspaId"
            case updateStatus = "UpdateStatus"
            case updateId = "UpdateId"
            case items = "Items"
        }
    }

    /// CreateDSPAMetaResources返回参数结构体
    public struct CreateDSPAMetaResourcesResponse: TCResponse {
        /// 本次更新的ID号，用来标记一次完整的更新过程。
        public let updateId: String

        /// 资源类型，支持：cdb（云数据库 MySQL）、dcdb（TDSQL MySQL版）、mariadb（云数据库 MariaDB）、postgres（云数据库 PostgreSQL）、cynosdbpg（TDSQL-C PostgreSQL版）、cynosdbmysql（TDSQL-C MySQL版）
        public let metaType: String

        /// DSPA实例ID。
        public let dspaId: String

        /// 资源所处地域。
        public let resourceRegion: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case updateId = "UpdateId"
            case metaType = "MetaType"
            case dspaId = "DspaId"
            case resourceRegion = "ResourceRegion"
            case requestId = "RequestId"
        }
    }

    /// 添加用户云资源
    ///
    /// 添加用户云上资源列表
    @inlinable
    public func createDSPAMetaResources(_ input: CreateDSPAMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPAMetaResourcesResponse> {
        self.client.execute(action: "CreateDSPAMetaResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加用户云资源
    ///
    /// 添加用户云上资源列表
    @inlinable
    public func createDSPAMetaResources(_ input: CreateDSPAMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPAMetaResourcesResponse {
        try await self.client.execute(action: "CreateDSPAMetaResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加用户云资源
    ///
    /// 添加用户云上资源列表
    @inlinable
    public func createDSPAMetaResources(metaType: String, resourceRegion: String, dspaId: String, updateStatus: String, updateId: String, items: [DspaUserResourceMeta], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPAMetaResourcesResponse> {
        self.createDSPAMetaResources(.init(metaType: metaType, resourceRegion: resourceRegion, dspaId: dspaId, updateStatus: updateStatus, updateId: updateId, items: items), region: region, logger: logger, on: eventLoop)
    }

    /// 添加用户云资源
    ///
    /// 添加用户云上资源列表
    @inlinable
    public func createDSPAMetaResources(metaType: String, resourceRegion: String, dspaId: String, updateStatus: String, updateId: String, items: [DspaUserResourceMeta], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPAMetaResourcesResponse {
        try await self.createDSPAMetaResources(.init(metaType: metaType, resourceRegion: resourceRegion, dspaId: dspaId, updateStatus: updateStatus, updateId: updateId, items: items), region: region, logger: logger, on: eventLoop)
    }
}
