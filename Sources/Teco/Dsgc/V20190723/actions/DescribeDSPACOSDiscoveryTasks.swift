//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPACOSDiscoveryTasks请求参数结构体
    public struct DescribeDSPACOSDiscoveryTasksRequest: TCPaginatedRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 任务ID
        public let taskId: Int64?

        /// 任务名称
        public let name: String?

        /// 任务扫描结果状态，可供选择的状态值有：-1待触发 0待扫描 1扫描中 2扫描终止 3扫描成功 4扫描失败
        public let statusList: [Int64]?

        /// 偏移量，默认为0
        public let offset: Int64?

        /// 返回结果集数量，默认值是10000，最大值为10000，根据该资源的个数限制条件，该资源的个数不会超过10000，所以如果不输入该字段，默认获取全量数据
        public let limit: Int64?

        public init(dspaId: String, taskId: Int64? = nil, name: String? = nil, statusList: [Int64]? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.dspaId = dspaId
            self.taskId = taskId
            self.name = name
            self.statusList = statusList
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case taskId = "TaskId"
            case name = "Name"
            case statusList = "StatusList"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDSPACOSDiscoveryTasksResponse) -> DescribeDSPACOSDiscoveryTasksRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(dspaId: self.dspaId, taskId: self.taskId, name: self.name, statusList: self.statusList, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeDSPACOSDiscoveryTasks返回参数结构体
    public struct DescribeDSPACOSDiscoveryTasksResponse: TCPaginatedResponse {
        /// 任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [DspaCOSDiscoveryTask]?

        /// 符合条件的任务列表数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DspaCOSDiscoveryTask`` list from the paginated response.
        public func getItems() -> [DspaCOSDiscoveryTask] {
            self.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取COS分类分级任务信息列表
    ///
    /// 获取COS分类分级任务列表
    @inlinable
    public func describeDSPACOSDiscoveryTasks(_ input: DescribeDSPACOSDiscoveryTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPACOSDiscoveryTasksResponse> {
        self.client.execute(action: "DescribeDSPACOSDiscoveryTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务信息列表
    ///
    /// 获取COS分类分级任务列表
    @inlinable
    public func describeDSPACOSDiscoveryTasks(_ input: DescribeDSPACOSDiscoveryTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPACOSDiscoveryTasksResponse {
        try await self.client.execute(action: "DescribeDSPACOSDiscoveryTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取COS分类分级任务信息列表
    ///
    /// 获取COS分类分级任务列表
    @inlinable
    public func describeDSPACOSDiscoveryTasks(dspaId: String, taskId: Int64? = nil, name: String? = nil, statusList: [Int64]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPACOSDiscoveryTasksResponse> {
        self.describeDSPACOSDiscoveryTasks(.init(dspaId: dspaId, taskId: taskId, name: name, statusList: statusList, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务信息列表
    ///
    /// 获取COS分类分级任务列表
    @inlinable
    public func describeDSPACOSDiscoveryTasks(dspaId: String, taskId: Int64? = nil, name: String? = nil, statusList: [Int64]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPACOSDiscoveryTasksResponse {
        try await self.describeDSPACOSDiscoveryTasks(.init(dspaId: dspaId, taskId: taskId, name: name, statusList: statusList, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务信息列表
    ///
    /// 获取COS分类分级任务列表
    @inlinable
    public func describeDSPACOSDiscoveryTasksPaginated(_ input: DescribeDSPACOSDiscoveryTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [DspaCOSDiscoveryTask])> {
        self.client.paginate(input: input, region: region, command: self.describeDSPACOSDiscoveryTasks, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务信息列表
    ///
    /// 获取COS分类分级任务列表
    @inlinable @discardableResult
    public func describeDSPACOSDiscoveryTasksPaginated(_ input: DescribeDSPACOSDiscoveryTasksRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDSPACOSDiscoveryTasksResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDSPACOSDiscoveryTasks, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务信息列表
    ///
    /// 获取COS分类分级任务列表
    ///
    /// - Returns: `AsyncSequence`s of ``DspaCOSDiscoveryTask`` and ``DescribeDSPACOSDiscoveryTasksResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDSPACOSDiscoveryTasksPaginator(_ input: DescribeDSPACOSDiscoveryTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDSPACOSDiscoveryTasksRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDSPACOSDiscoveryTasks, logger: logger, on: eventLoop)
    }
}
