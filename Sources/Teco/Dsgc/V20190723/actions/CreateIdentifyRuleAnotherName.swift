//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateIdentifyRuleAnotherName请求参数结构体
    public struct CreateIdentifyRuleAnotherNameRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 合规组ID
        public let complianceId: Int64

        /// 规则绑定的分类id
        public let categoryId: Int64

        /// 规则id
        public let ruleId: Int64

        /// 规则名称
        public let ruleName: String

        /// 规则别名
        public let anotherName: String

        /// 别名规则id
        public let aliasRuleId: Int64?

        /// 别名规则名称
        public let aliasRuleName: String?

        public init(dspaId: String, complianceId: Int64, categoryId: Int64, ruleId: Int64, ruleName: String, anotherName: String, aliasRuleId: Int64? = nil, aliasRuleName: String? = nil) {
            self.dspaId = dspaId
            self.complianceId = complianceId
            self.categoryId = categoryId
            self.ruleId = ruleId
            self.ruleName = ruleName
            self.anotherName = anotherName
            self.aliasRuleId = aliasRuleId
            self.aliasRuleName = aliasRuleName
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
            case categoryId = "CategoryId"
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case anotherName = "AnotherName"
            case aliasRuleId = "AliasRuleId"
            case aliasRuleName = "AliasRuleName"
        }
    }

    /// CreateIdentifyRuleAnotherName返回参数结构体
    public struct CreateIdentifyRuleAnotherNameResponse: TCResponse {
        /// 创建的别名规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aliasRuleId: Int64?

        /// 别名规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aliasRuleName: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case aliasRuleId = "AliasRuleId"
            case aliasRuleName = "AliasRuleName"
            case requestId = "RequestId"
        }
    }

    /// 创建规则别别名
    ///
    /// 创建规则别名
    @inlinable
    public func createIdentifyRuleAnotherName(_ input: CreateIdentifyRuleAnotherNameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateIdentifyRuleAnotherNameResponse> {
        self.client.execute(action: "CreateIdentifyRuleAnotherName", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建规则别别名
    ///
    /// 创建规则别名
    @inlinable
    public func createIdentifyRuleAnotherName(_ input: CreateIdentifyRuleAnotherNameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateIdentifyRuleAnotherNameResponse {
        try await self.client.execute(action: "CreateIdentifyRuleAnotherName", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建规则别别名
    ///
    /// 创建规则别名
    @inlinable
    public func createIdentifyRuleAnotherName(dspaId: String, complianceId: Int64, categoryId: Int64, ruleId: Int64, ruleName: String, anotherName: String, aliasRuleId: Int64? = nil, aliasRuleName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateIdentifyRuleAnotherNameResponse> {
        self.createIdentifyRuleAnotherName(.init(dspaId: dspaId, complianceId: complianceId, categoryId: categoryId, ruleId: ruleId, ruleName: ruleName, anotherName: anotherName, aliasRuleId: aliasRuleId, aliasRuleName: aliasRuleName), region: region, logger: logger, on: eventLoop)
    }

    /// 创建规则别别名
    ///
    /// 创建规则别名
    @inlinable
    public func createIdentifyRuleAnotherName(dspaId: String, complianceId: Int64, categoryId: Int64, ruleId: Int64, ruleName: String, anotherName: String, aliasRuleId: Int64? = nil, aliasRuleName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateIdentifyRuleAnotherNameResponse {
        try await self.createIdentifyRuleAnotherName(.init(dspaId: dspaId, complianceId: complianceId, categoryId: categoryId, ruleId: ruleId, ruleName: ruleName, anotherName: anotherName, aliasRuleId: aliasRuleId, aliasRuleName: aliasRuleName), region: region, logger: logger, on: eventLoop)
    }
}
