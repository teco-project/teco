//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentRisks请求参数结构体
    public struct DescribeDSPAAssessmentRisksRequest: TCPaginatedRequest {
        /// DSPA实例Id，格式“dspa-xxxxxxxx”
        public let dspaId: String

        /// 评估任务Id，格式“task-xxxxxxxx”
        public let taskId: String

        /// 偏移量。默认为0
        public let offset: Int64?

        /// 结果集个数限制。默认为20，最大值为100
        public let limit: Int64?

        /// 过滤项。
        /// 支持模糊搜索：ControlItemName。
        /// 支持过滤：
        /// RiskLevel：风险等级（high，medium，low）
        /// Status：风险处理状态(waiting待处理, processing处理中, stopped处理暂停, finished已处理, failed处理失败)
        public let filters: [DspaAssessmentFilter]?

        public init(dspaId: String, taskId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil) {
            self.dspaId = dspaId
            self.taskId = taskId
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case taskId = "TaskId"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDSPAAssessmentRisksResponse) -> DescribeDSPAAssessmentRisksRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(dspaId: self.dspaId, taskId: self.taskId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeDSPAAssessmentRisks返回参数结构体
    public struct DescribeDSPAAssessmentRisksResponse: TCPaginatedResponse {
        /// 符合条件的评估风险项数目
        public let totalCount: Int64

        /// 评估风险项列表
        public let items: [AssessmentRisk]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
            case requestId = "RequestId"
        }

        /// Extract the returned ``AssessmentRisk`` list from the paginated response.
        public func getItems() -> [AssessmentRisk] {
            self.items
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取DSPA评估风险项列表
    @inlinable
    public func describeDSPAAssessmentRisks(_ input: DescribeDSPAAssessmentRisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRisksResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentRisks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估风险项列表
    @inlinable
    public func describeDSPAAssessmentRisks(_ input: DescribeDSPAAssessmentRisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRisksResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentRisks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取DSPA评估风险项列表
    @inlinable
    public func describeDSPAAssessmentRisks(dspaId: String, taskId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRisksResponse> {
        self.describeDSPAAssessmentRisks(.init(dspaId: dspaId, taskId: taskId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估风险项列表
    @inlinable
    public func describeDSPAAssessmentRisks(dspaId: String, taskId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRisksResponse {
        try await self.describeDSPAAssessmentRisks(.init(dspaId: dspaId, taskId: taskId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估风险项列表
    @inlinable
    public func describeDSPAAssessmentRisksPaginated(_ input: DescribeDSPAAssessmentRisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [AssessmentRisk])> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentRisks, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估风险项列表
    @inlinable @discardableResult
    public func describeDSPAAssessmentRisksPaginated(_ input: DescribeDSPAAssessmentRisksRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDSPAAssessmentRisksResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentRisks, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估风险项列表
    ///
    /// - Returns: `AsyncSequence`s of ``AssessmentRisk`` and ``DescribeDSPAAssessmentRisksResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDSPAAssessmentRisksPaginator(_ input: DescribeDSPAAssessmentRisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDSPAAssessmentRisksRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDSPAAssessmentRisks, logger: logger, on: eventLoop)
    }
}
