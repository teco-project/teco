//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentRiskDistributionOverview请求参数结构体
    public struct DescribeDSPAAssessmentRiskDistributionOverviewRequest: TCRequest {
        /// dspa实例Id
        public let dspaId: String

        /// 评估模版id
        public let templateId: Int64

        /// 风险资产分布的过滤条件
        /// （rdb，cos，不传就筛选全部）
        public let filter: String?

        public init(dspaId: String, templateId: Int64, filter: String? = nil) {
            self.dspaId = dspaId
            self.templateId = templateId
            self.filter = filter
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case templateId = "TemplateId"
            case filter = "Filter"
        }
    }

    /// DescribeDSPAAssessmentRiskDistributionOverview返回参数结构体
    public struct DescribeDSPAAssessmentRiskDistributionOverviewResponse: TCResponse {
        /// 风险类型分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskTypeDistribution: [Note]?

        /// 风险详情分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskDetailDistribution: [Note]?

        /// 风险资产详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskAssetsDistribution: [Note]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case riskTypeDistribution = "RiskTypeDistribution"
            case riskDetailDistribution = "RiskDetailDistribution"
            case riskAssetsDistribution = "RiskAssetsDistribution"
            case requestId = "RequestId"
        }
    }

    /// 查询风险分布数据
    ///
    /// 查询风险分布数据，包含风险类型分布，风险详情分布，风险资产的分布
    @inlinable
    public func describeDSPAAssessmentRiskDistributionOverview(_ input: DescribeDSPAAssessmentRiskDistributionOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskDistributionOverviewResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentRiskDistributionOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询风险分布数据
    ///
    /// 查询风险分布数据，包含风险类型分布，风险详情分布，风险资产的分布
    @inlinable
    public func describeDSPAAssessmentRiskDistributionOverview(_ input: DescribeDSPAAssessmentRiskDistributionOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskDistributionOverviewResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentRiskDistributionOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询风险分布数据
    ///
    /// 查询风险分布数据，包含风险类型分布，风险详情分布，风险资产的分布
    @inlinable
    public func describeDSPAAssessmentRiskDistributionOverview(dspaId: String, templateId: Int64, filter: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskDistributionOverviewResponse> {
        self.describeDSPAAssessmentRiskDistributionOverview(.init(dspaId: dspaId, templateId: templateId, filter: filter), region: region, logger: logger, on: eventLoop)
    }

    /// 查询风险分布数据
    ///
    /// 查询风险分布数据，包含风险类型分布，风险详情分布，风险资产的分布
    @inlinable
    public func describeDSPAAssessmentRiskDistributionOverview(dspaId: String, templateId: Int64, filter: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskDistributionOverviewResponse {
        try await self.describeDSPAAssessmentRiskDistributionOverview(.init(dspaId: dspaId, templateId: templateId, filter: filter), region: region, logger: logger, on: eventLoop)
    }
}
