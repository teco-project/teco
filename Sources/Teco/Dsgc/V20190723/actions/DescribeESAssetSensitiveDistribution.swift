//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeESAssetSensitiveDistribution请求参数结构体
    public struct DescribeESAssetSensitiveDistributionRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 合规组id
        public let complianceId: Int64

        /// 查询的资产信息列表
        public let assetList: [AssetList]

        public init(dspaId: String, complianceId: Int64, assetList: [AssetList]) {
            self.dspaId = dspaId
            self.complianceId = complianceId
            self.assetList = assetList
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
            case assetList = "AssetList"
        }
    }

    /// DescribeESAssetSensitiveDistribution返回参数结构体
    public struct DescribeESAssetSensitiveDistributionResponse: TCResponse {
        /// ES的资产统计数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esAsset: ESAsset?

        /// 涉敏top数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topAsset: [TopAsset]?

        /// ES的详情列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esDetail: [ESAssetDBDetail]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case esAsset = "ESAsset"
            case topAsset = "TopAsset"
            case esDetail = "ESDetail"
            case requestId = "RequestId"
        }
    }

    /// 查询es的敏感资产分布
    ///
    /// 数据资产报告-查询es的敏感资产报告，包含（数据库资产，设敏级别数据库top10，资产详情）
    @inlinable
    public func describeESAssetSensitiveDistribution(_ input: DescribeESAssetSensitiveDistributionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeESAssetSensitiveDistributionResponse> {
        self.client.execute(action: "DescribeESAssetSensitiveDistribution", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询es的敏感资产分布
    ///
    /// 数据资产报告-查询es的敏感资产报告，包含（数据库资产，设敏级别数据库top10，资产详情）
    @inlinable
    public func describeESAssetSensitiveDistribution(_ input: DescribeESAssetSensitiveDistributionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeESAssetSensitiveDistributionResponse {
        try await self.client.execute(action: "DescribeESAssetSensitiveDistribution", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询es的敏感资产分布
    ///
    /// 数据资产报告-查询es的敏感资产报告，包含（数据库资产，设敏级别数据库top10，资产详情）
    @inlinable
    public func describeESAssetSensitiveDistribution(dspaId: String, complianceId: Int64, assetList: [AssetList], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeESAssetSensitiveDistributionResponse> {
        self.describeESAssetSensitiveDistribution(.init(dspaId: dspaId, complianceId: complianceId, assetList: assetList), region: region, logger: logger, on: eventLoop)
    }

    /// 查询es的敏感资产分布
    ///
    /// 数据资产报告-查询es的敏感资产报告，包含（数据库资产，设敏级别数据库top10，资产详情）
    @inlinable
    public func describeESAssetSensitiveDistribution(dspaId: String, complianceId: Int64, assetList: [AssetList], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeESAssetSensitiveDistributionResponse {
        try await self.describeESAssetSensitiveDistribution(.init(dspaId: dspaId, complianceId: complianceId, assetList: assetList), region: region, logger: logger, on: eventLoop)
    }
}
