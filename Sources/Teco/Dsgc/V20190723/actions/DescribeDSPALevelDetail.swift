//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPALevelDetail请求参数结构体
    public struct DescribeDSPALevelDetailRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 过滤数组。支持的Name：
        /// ComplianceId 合规组ID
        /// LevelGroupId 敏感分级组ID
        public let filters: [Filter]?

        public init(dspaId: String, filters: [Filter]? = nil) {
            self.dspaId = dspaId
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case filters = "Filters"
        }
    }

    /// DescribeDSPALevelDetail返回参数结构体
    public struct DescribeDSPALevelDetailResponse: TCResponse {
        /// 符合条件的敏感数据分级标识记录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [LevelItem]

        /// 符合条件的敏感数据分级标识记录数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 获取分级详情
    @inlinable
    public func describeDSPALevelDetail(_ input: DescribeDSPALevelDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPALevelDetailResponse> {
        self.client.execute(action: "DescribeDSPALevelDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取分级详情
    @inlinable
    public func describeDSPALevelDetail(_ input: DescribeDSPALevelDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPALevelDetailResponse {
        try await self.client.execute(action: "DescribeDSPALevelDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取分级详情
    @inlinable
    public func describeDSPALevelDetail(dspaId: String, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPALevelDetailResponse> {
        self.describeDSPALevelDetail(.init(dspaId: dspaId, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取分级详情
    @inlinable
    public func describeDSPALevelDetail(dspaId: String, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPALevelDetailResponse {
        try await self.describeDSPALevelDetail(.init(dspaId: dspaId, filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
