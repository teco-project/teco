//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPARDBDataAssetDetail请求参数结构体
    public struct DescribeDSPARDBDataAssetDetailRequest: TCRequest {
        /// DSPA实例Id
        public let dspaId: String

        /// 合规组Id
        public let complianceId: Int64

        public init(dspaId: String, complianceId: Int64) {
            self.dspaId = dspaId
            self.complianceId = complianceId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
        }
    }

    /// DescribeDSPARDBDataAssetDetail返回参数结构体
    public struct DescribeDSPARDBDataAssetDetailResponse: TCResponse {
        /// RDB关系数据库敏感数据资产详情列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let details: [DspaRDBDataAssetDetail]?

        /// 符合条件的RDB关系数据库敏感数据资产数量
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case details = "Details"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 获取RDB关系数据库分类分级资产详情
    @inlinable
    public func describeDSPARDBDataAssetDetail(_ input: DescribeDSPARDBDataAssetDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPARDBDataAssetDetailResponse> {
        self.client.execute(action: "DescribeDSPARDBDataAssetDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取RDB关系数据库分类分级资产详情
    @inlinable
    public func describeDSPARDBDataAssetDetail(_ input: DescribeDSPARDBDataAssetDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPARDBDataAssetDetailResponse {
        try await self.client.execute(action: "DescribeDSPARDBDataAssetDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取RDB关系数据库分类分级资产详情
    @inlinable
    public func describeDSPARDBDataAssetDetail(dspaId: String, complianceId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPARDBDataAssetDetailResponse> {
        self.describeDSPARDBDataAssetDetail(.init(dspaId: dspaId, complianceId: complianceId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取RDB关系数据库分类分级资产详情
    @inlinable
    public func describeDSPARDBDataAssetDetail(dspaId: String, complianceId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPARDBDataAssetDetailResponse {
        try await self.describeDSPARDBDataAssetDetail(.init(dspaId: dspaId, complianceId: complianceId), region: region, logger: logger, on: eventLoop)
    }
}
