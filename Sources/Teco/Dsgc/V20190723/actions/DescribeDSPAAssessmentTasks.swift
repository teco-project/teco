//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentTasks请求参数结构体
    public struct DescribeDSPAAssessmentTasksRequest: TCPaginatedRequest {
        /// DSPA实例Id，格式“dspa-xxxxxxxx”
        public let dspaId: String

        /// 偏移量。默认为0
        public let offset: Int64?

        /// 结果集个数限制。默认为20，最大值为100
        public let limit: Int64?

        /// 过滤项。
        /// 支持模糊搜索：TaskId，TaskName
        /// 支持过滤：
        /// BusinessName：业务名称
        /// BusinessDept：业务部门名称
        /// TemplateName：评估模版名称
        /// Status：评估状态 (waiting待评估，processing评估中, , finished已评估, failed评估失败)
        public let filters: [DspaAssessmentFilter]?

        public init(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil) {
            self.dspaId = dspaId
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDSPAAssessmentTasksResponse) -> DescribeDSPAAssessmentTasksRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(dspaId: self.dspaId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeDSPAAssessmentTasks返回参数结构体
    public struct DescribeDSPAAssessmentTasksResponse: TCPaginatedResponse {
        /// 符合条件的评估任务数目
        public let totalCount: Int64

        /// 评估任务列表
        public let items: [AssessmentTask]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
            case requestId = "RequestId"
        }

        /// Extract the returned ``AssessmentTask`` list from the paginated response.
        public func getItems() -> [AssessmentTask] {
            self.items
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取DSPA评估任务列表
    @inlinable
    public func describeDSPAAssessmentTasks(_ input: DescribeDSPAAssessmentTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentTasksResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估任务列表
    @inlinable
    public func describeDSPAAssessmentTasks(_ input: DescribeDSPAAssessmentTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentTasksResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取DSPA评估任务列表
    @inlinable
    public func describeDSPAAssessmentTasks(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentTasksResponse> {
        self.describeDSPAAssessmentTasks(.init(dspaId: dspaId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估任务列表
    @inlinable
    public func describeDSPAAssessmentTasks(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentTasksResponse {
        try await self.describeDSPAAssessmentTasks(.init(dspaId: dspaId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估任务列表
    @inlinable
    public func describeDSPAAssessmentTasksPaginated(_ input: DescribeDSPAAssessmentTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [AssessmentTask])> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentTasks, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估任务列表
    @inlinable @discardableResult
    public func describeDSPAAssessmentTasksPaginated(_ input: DescribeDSPAAssessmentTasksRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDSPAAssessmentTasksResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentTasks, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估任务列表
    ///
    /// - Returns: `AsyncSequence`s of ``AssessmentTask`` and ``DescribeDSPAAssessmentTasksResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDSPAAssessmentTasksPaginator(_ input: DescribeDSPAAssessmentTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDSPAAssessmentTasksRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDSPAAssessmentTasks, logger: logger, on: eventLoop)
    }
}
