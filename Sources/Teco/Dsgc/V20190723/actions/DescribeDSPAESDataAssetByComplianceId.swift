//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAESDataAssetByComplianceId请求参数结构体
    public struct DescribeDSPAESDataAssetByComplianceIdRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 合规组id
        public let complianceId: Int64

        public init(dspaId: String, complianceId: Int64) {
            self.dspaId = dspaId
            self.complianceId = complianceId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
        }
    }

    /// DescribeDSPAESDataAssetByComplianceId返回参数结构体
    public struct DescribeDSPAESDataAssetByComplianceIdResponse: TCResponse {
        /// 概览统计结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stats: ESDataAssetCountDto?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case stats = "Stats"
            case requestId = "RequestId"
        }
    }

    /// 查询ES的资产概览统计数据
    ///
    /// 根据合规组id，去查询ES的概览页统计数据
    @inlinable
    public func describeDSPAESDataAssetByComplianceId(_ input: DescribeDSPAESDataAssetByComplianceIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAESDataAssetByComplianceIdResponse> {
        self.client.execute(action: "DescribeDSPAESDataAssetByComplianceId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询ES的资产概览统计数据
    ///
    /// 根据合规组id，去查询ES的概览页统计数据
    @inlinable
    public func describeDSPAESDataAssetByComplianceId(_ input: DescribeDSPAESDataAssetByComplianceIdRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAESDataAssetByComplianceIdResponse {
        try await self.client.execute(action: "DescribeDSPAESDataAssetByComplianceId", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询ES的资产概览统计数据
    ///
    /// 根据合规组id，去查询ES的概览页统计数据
    @inlinable
    public func describeDSPAESDataAssetByComplianceId(dspaId: String, complianceId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAESDataAssetByComplianceIdResponse> {
        self.describeDSPAESDataAssetByComplianceId(.init(dspaId: dspaId, complianceId: complianceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询ES的资产概览统计数据
    ///
    /// 根据合规组id，去查询ES的概览页统计数据
    @inlinable
    public func describeDSPAESDataAssetByComplianceId(dspaId: String, complianceId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAESDataAssetByComplianceIdResponse {
        try await self.describeDSPAESDataAssetByComplianceId(.init(dspaId: dspaId, complianceId: complianceId), region: region, logger: logger, on: eventLoop)
    }
}
