//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentLatestRiskDetailInfo请求参数结构体
    public struct DescribeDSPAAssessmentLatestRiskDetailInfoRequest: TCRequest {
        /// dspa实例Id
        public let dspaId: String

        /// 评估模版id
        public let templateId: Int64

        /// 风险id
        public let riskId: Int64

        public init(dspaId: String, templateId: Int64, riskId: Int64) {
            self.dspaId = dspaId
            self.templateId = templateId
            self.riskId = riskId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case templateId = "TemplateId"
            case riskId = "RiskId"
        }
    }

    /// DescribeDSPAAssessmentLatestRiskDetailInfo返回参数结构体
    public struct DescribeDSPAAssessmentLatestRiskDetailInfoResponse: TCResponse {
        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// 数据源name
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 资产对象名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assetName: String?

        /// 风险评估模版id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assessmentTemplateId: Int64?

        /// 分类分级的模版id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let identifyTemplateId: Int64?

        /// 风险类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskType: String?

        /// 风险项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskName: String?

        /// 风险的描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskDescription: String?

        /// 风险的级别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: String?

        /// 处置的建议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let suggestAction: String?

        /// 处置状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 安全产品
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityProduct: [SecurityProduct]?

        /// 风险归属
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskDimension: String?

        /// 关联数据库（如果风险归属是instance）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let relationAsset: [String]?

        /// 风险账号详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accountRiskDetail: [AccountRisk]?

        /// 权限风险详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privilegeRiskDetail: [PrivilegeRisk]?

        /// 策略风险的cos风险文件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyRiskCosFileList: [String]?

        /// AKSK泄漏列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let akskLeak: [AKSKLeak]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case dataSourceName = "DataSourceName"
            case assetName = "AssetName"
            case assessmentTemplateId = "AssessmentTemplateId"
            case identifyTemplateId = "IdentifyTemplateId"
            case riskType = "RiskType"
            case riskName = "RiskName"
            case riskDescription = "RiskDescription"
            case riskLevel = "RiskLevel"
            case suggestAction = "SuggestAction"
            case status = "Status"
            case remark = "Remark"
            case securityProduct = "SecurityProduct"
            case riskDimension = "RiskDimension"
            case relationAsset = "RelationAsset"
            case accountRiskDetail = "AccountRiskDetail"
            case privilegeRiskDetail = "PrivilegeRiskDetail"
            case policyRiskCosFileList = "PolicyRiskCosFileList"
            case akskLeak = "AKSKLeak"
            case requestId = "RequestId"
        }
    }

    /// 查询最新风险项详情数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskDetailInfo(_ input: DescribeDSPAAssessmentLatestRiskDetailInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentLatestRiskDetailInfoResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentLatestRiskDetailInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询最新风险项详情数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskDetailInfo(_ input: DescribeDSPAAssessmentLatestRiskDetailInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentLatestRiskDetailInfoResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentLatestRiskDetailInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询最新风险项详情数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskDetailInfo(dspaId: String, templateId: Int64, riskId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentLatestRiskDetailInfoResponse> {
        self.describeDSPAAssessmentLatestRiskDetailInfo(.init(dspaId: dspaId, templateId: templateId, riskId: riskId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询最新风险项详情数据
    @inlinable
    public func describeDSPAAssessmentLatestRiskDetailInfo(dspaId: String, templateId: Int64, riskId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentLatestRiskDetailInfoResponse {
        try await self.describeDSPAAssessmentLatestRiskDetailInfo(.init(dspaId: dspaId, templateId: templateId, riskId: riskId), region: region, logger: logger, on: eventLoop)
    }
}
