//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentRiskLevelList请求参数结构体
    public struct DescribeDSPAAssessmentRiskLevelListRequest: TCPaginatedRequest {
        /// dspa实例id
        public let dspaId: String

        /// 限制条数
        public let limit: Int64

        /// 偏移量
        public let offset: Int64

        public init(dspaId: String, limit: Int64, offset: Int64) {
            self.dspaId = dspaId
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDSPAAssessmentRiskLevelListResponse) -> DescribeDSPAAssessmentRiskLevelListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(dspaId: self.dspaId, limit: self.limit, offset: self.offset + .init(response.getItems().count))
        }
    }

    /// DescribeDSPAAssessmentRiskLevelList返回参数结构体
    public struct DescribeDSPAAssessmentRiskLevelListResponse: TCPaginatedResponse {
        /// 总条数
        public let totalCount: Int64

        /// 风险等级列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevelList: [RiskLevelRisk]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case riskLevelList = "RiskLevelList"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RiskLevelRisk`` list from the paginated response.
        public func getItems() -> [RiskLevelRisk] {
            self.riskLevelList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询风险等级的列表
    ///
    /// 风险项页面----查询风险等级的列表
    @inlinable
    public func describeDSPAAssessmentRiskLevelList(_ input: DescribeDSPAAssessmentRiskLevelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskLevelListResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentRiskLevelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询风险等级的列表
    ///
    /// 风险项页面----查询风险等级的列表
    @inlinable
    public func describeDSPAAssessmentRiskLevelList(_ input: DescribeDSPAAssessmentRiskLevelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskLevelListResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentRiskLevelList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询风险等级的列表
    ///
    /// 风险项页面----查询风险等级的列表
    @inlinable
    public func describeDSPAAssessmentRiskLevelList(dspaId: String, limit: Int64, offset: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskLevelListResponse> {
        self.describeDSPAAssessmentRiskLevelList(.init(dspaId: dspaId, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询风险等级的列表
    ///
    /// 风险项页面----查询风险等级的列表
    @inlinable
    public func describeDSPAAssessmentRiskLevelList(dspaId: String, limit: Int64, offset: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskLevelListResponse {
        try await self.describeDSPAAssessmentRiskLevelList(.init(dspaId: dspaId, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询风险等级的列表
    ///
    /// 风险项页面----查询风险等级的列表
    @inlinable
    public func describeDSPAAssessmentRiskLevelListPaginated(_ input: DescribeDSPAAssessmentRiskLevelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RiskLevelRisk])> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentRiskLevelList, logger: logger, on: eventLoop)
    }

    /// 查询风险等级的列表
    ///
    /// 风险项页面----查询风险等级的列表
    @inlinable @discardableResult
    public func describeDSPAAssessmentRiskLevelListPaginated(_ input: DescribeDSPAAssessmentRiskLevelListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDSPAAssessmentRiskLevelListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentRiskLevelList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询风险等级的列表
    ///
    /// 风险项页面----查询风险等级的列表
    ///
    /// - Returns: `AsyncSequence`s of ``RiskLevelRisk`` and ``DescribeDSPAAssessmentRiskLevelListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDSPAAssessmentRiskLevelListPaginator(_ input: DescribeDSPAAssessmentRiskLevelListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDSPAAssessmentRiskLevelListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDSPAAssessmentRiskLevelList, logger: logger, on: eventLoop)
    }
}
