//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateDSPAComplianceRules请求参数结构体
    public struct CreateDSPAComplianceRulesRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 分类id
        public let categoryId: UInt64

        /// 合规组模板id
        public let complianceId: UInt64

        /// 规则列表
        public let rules: [CreateComplianceRules]

        public init(dspaId: String, categoryId: UInt64, complianceId: UInt64, rules: [CreateComplianceRules]) {
            self.dspaId = dspaId
            self.categoryId = categoryId
            self.complianceId = complianceId
            self.rules = rules
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case categoryId = "CategoryId"
            case complianceId = "ComplianceId"
            case rules = "Rules"
        }
    }

    /// CreateDSPAComplianceRules返回参数结构体
    public struct CreateDSPAComplianceRulesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建合规组分类规则关联关系
    @inlinable @discardableResult
    public func createDSPAComplianceRules(_ input: CreateDSPAComplianceRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPAComplianceRulesResponse> {
        self.client.execute(action: "CreateDSPAComplianceRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建合规组分类规则关联关系
    @inlinable @discardableResult
    public func createDSPAComplianceRules(_ input: CreateDSPAComplianceRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPAComplianceRulesResponse {
        try await self.client.execute(action: "CreateDSPAComplianceRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建合规组分类规则关联关系
    @inlinable @discardableResult
    public func createDSPAComplianceRules(dspaId: String, categoryId: UInt64, complianceId: UInt64, rules: [CreateComplianceRules], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPAComplianceRulesResponse> {
        self.createDSPAComplianceRules(.init(dspaId: dspaId, categoryId: categoryId, complianceId: complianceId, rules: rules), region: region, logger: logger, on: eventLoop)
    }

    /// 创建合规组分类规则关联关系
    @inlinable @discardableResult
    public func createDSPAComplianceRules(dspaId: String, categoryId: UInt64, complianceId: UInt64, rules: [CreateComplianceRules], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPAComplianceRulesResponse {
        try await self.createDSPAComplianceRules(.init(dspaId: dspaId, categoryId: categoryId, complianceId: complianceId, rules: rules), region: region, logger: logger, on: eventLoop)
    }
}
