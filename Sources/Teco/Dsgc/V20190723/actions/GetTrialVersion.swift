//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// GetTrialVersion请求参数结构体
    public struct GetTrialVersionRequest: TCRequest {
        /// DSPA实例ID。
        public let dspaId: String

        public init(dspaId: String) {
            self.dspaId = dspaId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
        }
    }

    /// GetTrialVersion返回参数结构体
    public struct GetTrialVersionResponse: TCResponse {
        /// 体验版本名称。
        public let trialVersion: String

        /// 版本体验结束时间戳。
        public let trialEndAt: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case trialVersion = "TrialVersion"
            case trialEndAt = "TrialEndAt"
            case requestId = "RequestId"
        }
    }

    /// 获取体验版本信息
    @inlinable
    public func getTrialVersion(_ input: GetTrialVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTrialVersionResponse> {
        self.client.execute(action: "GetTrialVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取体验版本信息
    @inlinable
    public func getTrialVersion(_ input: GetTrialVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTrialVersionResponse {
        try await self.client.execute(action: "GetTrialVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取体验版本信息
    @inlinable
    public func getTrialVersion(dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTrialVersionResponse> {
        self.getTrialVersion(.init(dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取体验版本信息
    @inlinable
    public func getTrialVersion(dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetTrialVersionResponse {
        try await self.getTrialVersion(.init(dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }
}
