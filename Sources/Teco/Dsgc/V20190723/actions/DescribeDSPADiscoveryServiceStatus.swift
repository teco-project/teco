//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPADiscoveryServiceStatus请求参数结构体
    public struct DescribeDSPADiscoveryServiceStatusRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        public init(dspaId: String) {
            self.dspaId = dspaId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
        }
    }

    /// DescribeDSPADiscoveryServiceStatus返回参数结构体
    public struct DescribeDSPADiscoveryServiceStatusResponse: TCResponse {
        /// 分类分级服务是否开通，true 表示已开通，false表示未开通
        public let serviceEnabled: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case serviceEnabled = "ServiceEnabled"
            case requestId = "RequestId"
        }
    }

    /// 获取分类分级服务的状态
    ///
    /// 用于查询该用户是否已开通分类分级服务
    @inlinable
    public func describeDSPADiscoveryServiceStatus(_ input: DescribeDSPADiscoveryServiceStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPADiscoveryServiceStatusResponse> {
        self.client.execute(action: "DescribeDSPADiscoveryServiceStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取分类分级服务的状态
    ///
    /// 用于查询该用户是否已开通分类分级服务
    @inlinable
    public func describeDSPADiscoveryServiceStatus(_ input: DescribeDSPADiscoveryServiceStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPADiscoveryServiceStatusResponse {
        try await self.client.execute(action: "DescribeDSPADiscoveryServiceStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取分类分级服务的状态
    ///
    /// 用于查询该用户是否已开通分类分级服务
    @inlinable
    public func describeDSPADiscoveryServiceStatus(dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPADiscoveryServiceStatusResponse> {
        self.describeDSPADiscoveryServiceStatus(.init(dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取分类分级服务的状态
    ///
    /// 用于查询该用户是否已开通分类分级服务
    @inlinable
    public func describeDSPADiscoveryServiceStatus(dspaId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPADiscoveryServiceStatusResponse {
        try await self.describeDSPADiscoveryServiceStatus(.init(dspaId: dspaId), region: region, logger: logger, on: eventLoop)
    }
}
