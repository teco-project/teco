//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentTemplates请求参数结构体
    public struct DescribeDSPAAssessmentTemplatesRequest: TCPaginatedRequest {
        /// DSPA实例Id，格式“dspa-xxxxxxxx”
        public let dspaId: String

        /// 偏移量。默认为0
        public let offset: Int64?

        /// 结果集个数限制。默认为20，最大值为100
        public let limit: Int64?

        /// 过滤项。
        /// 支持模糊搜索：（TemplateId，TemplateName）
        /// 支持过滤：
        /// Source：模版来源，system / user
        /// UseType：模版类型，auto，semi-auto，law等
        /// Status：模版启用状态，draft / launched
        public let filters: [DspaAssessmentFilter]?

        public init(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil) {
            self.dspaId = dspaId
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDSPAAssessmentTemplatesResponse) -> DescribeDSPAAssessmentTemplatesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(dspaId: self.dspaId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeDSPAAssessmentTemplates返回参数结构体
    public struct DescribeDSPAAssessmentTemplatesResponse: TCPaginatedResponse {
        /// 符合条件的模板数目
        public let totalCount: Int64

        /// 模板列表。
        public let items: [AssessmentTemplate]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case items = "Items"
            case requestId = "RequestId"
        }

        /// Extract the returned ``AssessmentTemplate`` list from the paginated response.
        public func getItems() -> [AssessmentTemplate] {
            self.items
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取DSPA评估模板列表
    @inlinable
    public func describeDSPAAssessmentTemplates(_ input: DescribeDSPAAssessmentTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentTemplatesResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估模板列表
    @inlinable
    public func describeDSPAAssessmentTemplates(_ input: DescribeDSPAAssessmentTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentTemplatesResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取DSPA评估模板列表
    @inlinable
    public func describeDSPAAssessmentTemplates(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentTemplatesResponse> {
        self.describeDSPAAssessmentTemplates(.init(dspaId: dspaId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估模板列表
    @inlinable
    public func describeDSPAAssessmentTemplates(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [DspaAssessmentFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentTemplatesResponse {
        try await self.describeDSPAAssessmentTemplates(.init(dspaId: dspaId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估模板列表
    @inlinable
    public func describeDSPAAssessmentTemplatesPaginated(_ input: DescribeDSPAAssessmentTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [AssessmentTemplate])> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentTemplates, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估模板列表
    @inlinable @discardableResult
    public func describeDSPAAssessmentTemplatesPaginated(_ input: DescribeDSPAAssessmentTemplatesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDSPAAssessmentTemplatesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDSPAAssessmentTemplates, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取DSPA评估模板列表
    ///
    /// - Returns: `AsyncSequence`s of ``AssessmentTemplate`` and ``DescribeDSPAAssessmentTemplatesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDSPAAssessmentTemplatesPaginator(_ input: DescribeDSPAAssessmentTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDSPAAssessmentTemplatesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDSPAAssessmentTemplates, logger: logger, on: eventLoop)
    }
}
