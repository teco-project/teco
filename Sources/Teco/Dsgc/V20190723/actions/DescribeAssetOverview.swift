//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeAssetOverview请求参数结构体
    public struct DescribeAssetOverviewRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 合规组id
        public let complianceId: Int64

        /// 查询的资产信息列表
        public let assetList: [AssetList]

        public init(dspaId: String, complianceId: Int64, assetList: [AssetList]) {
            self.dspaId = dspaId
            self.complianceId = complianceId
            self.assetList = assetList
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
            case assetList = "AssetList"
        }
    }

    /// DescribeAssetOverview返回参数结构体
    public struct DescribeAssetOverviewResponse: TCResponse {
        /// 数据库实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbInstanceNums: Int64?

        /// 数据库个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbNums: Int64?

        /// 表的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableNums: Int64?

        /// 字段个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldNums: Int64?

        /// 数据库实例的分布情况
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbInstanceDistribution: [Note]?

        /// db分布情况
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbDistribution: [Note]?

        /// cos桶的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketNums: Int64?

        /// 文件个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileNums: Int64?

        /// 用于对用户进行提示信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// es实例数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esInstanceNums: UInt64?

        /// es索引数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esIndexNums: UInt64?

        /// es字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esFieldNums: UInt64?

        /// mongo实例数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mongoInstanceNums: UInt64?

        /// mongo数据库数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mongoDbNums: UInt64?

        /// mongo集合数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mongoColNums: UInt64?

        /// mongo字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mongoFieldNums: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dbInstanceNums = "DBInstanceNums"
            case dbNums = "DBNums"
            case tableNums = "TableNums"
            case fieldNums = "FieldNums"
            case dbInstanceDistribution = "DBInstanceDistribution"
            case dbDistribution = "DBDistribution"
            case bucketNums = "BucketNums"
            case fileNums = "FileNums"
            case remark = "Remark"
            case esInstanceNums = "EsInstanceNums"
            case esIndexNums = "EsIndexNums"
            case esFieldNums = "EsFieldNums"
            case mongoInstanceNums = "MongoInstanceNums"
            case mongoDbNums = "MongoDbNums"
            case mongoColNums = "MongoColNums"
            case mongoFieldNums = "MongoFieldNums"
            case requestId = "RequestId"
        }
    }

    /// 数据资产报告-查询数据资产概览接口
    ///
    /// 数据资产报告页面-查询数据资产概览接口（包括数据库资产详情和存储资产详情）
    @inlinable
    public func describeAssetOverview(_ input: DescribeAssetOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetOverviewResponse> {
        self.client.execute(action: "DescribeAssetOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 数据资产报告-查询数据资产概览接口
    ///
    /// 数据资产报告页面-查询数据资产概览接口（包括数据库资产详情和存储资产详情）
    @inlinable
    public func describeAssetOverview(_ input: DescribeAssetOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetOverviewResponse {
        try await self.client.execute(action: "DescribeAssetOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 数据资产报告-查询数据资产概览接口
    ///
    /// 数据资产报告页面-查询数据资产概览接口（包括数据库资产详情和存储资产详情）
    @inlinable
    public func describeAssetOverview(dspaId: String, complianceId: Int64, assetList: [AssetList], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetOverviewResponse> {
        self.describeAssetOverview(.init(dspaId: dspaId, complianceId: complianceId, assetList: assetList), region: region, logger: logger, on: eventLoop)
    }

    /// 数据资产报告-查询数据资产概览接口
    ///
    /// 数据资产报告页面-查询数据资产概览接口（包括数据库资产详情和存储资产详情）
    @inlinable
    public func describeAssetOverview(dspaId: String, complianceId: Int64, assetList: [AssetList], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetOverviewResponse {
        try await self.describeAssetOverview(.init(dspaId: dspaId, complianceId: complianceId, assetList: assetList), region: region, logger: logger, on: eventLoop)
    }
}
