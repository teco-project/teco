//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeExportTaskResult请求参数结构体
    public struct DescribeExportTaskResultRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 导出任务id
        public let exportTaskId: UInt64

        public init(dspaId: String, exportTaskId: UInt64) {
            self.dspaId = dspaId
            self.exportTaskId = exportTaskId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case exportTaskId = "ExportTaskId"
        }
    }

    /// DescribeExportTaskResult返回参数结构体
    public struct DescribeExportTaskResultResponse: TCResponse {
        /// 导出任务结果
        public let exportResult: String

        /// 导出文件地址
        public let exportFileUrl: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case exportResult = "ExportResult"
            case exportFileUrl = "ExportFileUrl"
            case requestId = "RequestId"
        }
    }

    /// 获取导出任务结果
    @inlinable
    public func describeExportTaskResult(_ input: DescribeExportTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExportTaskResultResponse> {
        self.client.execute(action: "DescribeExportTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取导出任务结果
    @inlinable
    public func describeExportTaskResult(_ input: DescribeExportTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExportTaskResultResponse {
        try await self.client.execute(action: "DescribeExportTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取导出任务结果
    @inlinable
    public func describeExportTaskResult(dspaId: String, exportTaskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExportTaskResultResponse> {
        self.describeExportTaskResult(.init(dspaId: dspaId, exportTaskId: exportTaskId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取导出任务结果
    @inlinable
    public func describeExportTaskResult(dspaId: String, exportTaskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExportTaskResultResponse {
        try await self.describeExportTaskResult(.init(dspaId: dspaId, exportTaskId: exportTaskId), region: region, logger: logger, on: eventLoop)
    }
}
