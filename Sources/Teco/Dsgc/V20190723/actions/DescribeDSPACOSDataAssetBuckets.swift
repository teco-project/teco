//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPACOSDataAssetBuckets请求参数结构体
    public struct DescribeDSPACOSDataAssetBucketsRequest: TCRequest {
        /// DSPA实例Id
        public let dspaId: String

        /// 合规组Id
        public let complianceId: Int64

        public init(dspaId: String, complianceId: Int64) {
            self.dspaId = dspaId
            self.complianceId = complianceId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
        }
    }

    /// DescribeDSPACOSDataAssetBuckets返回参数结构体
    public struct DescribeDSPACOSDataAssetBucketsResponse: TCResponse {
        /// COS对象存储敏感数据资产已扫描的桶集合。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let buckets: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case buckets = "Buckets"
            case requestId = "RequestId"
        }
    }

    /// 获取COS敏感数据资产桶列表
    @inlinable
    public func describeDSPACOSDataAssetBuckets(_ input: DescribeDSPACOSDataAssetBucketsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPACOSDataAssetBucketsResponse> {
        self.client.execute(action: "DescribeDSPACOSDataAssetBuckets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取COS敏感数据资产桶列表
    @inlinable
    public func describeDSPACOSDataAssetBuckets(_ input: DescribeDSPACOSDataAssetBucketsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPACOSDataAssetBucketsResponse {
        try await self.client.execute(action: "DescribeDSPACOSDataAssetBuckets", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取COS敏感数据资产桶列表
    @inlinable
    public func describeDSPACOSDataAssetBuckets(dspaId: String, complianceId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPACOSDataAssetBucketsResponse> {
        self.describeDSPACOSDataAssetBuckets(.init(dspaId: dspaId, complianceId: complianceId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取COS敏感数据资产桶列表
    @inlinable
    public func describeDSPACOSDataAssetBuckets(dspaId: String, complianceId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPACOSDataAssetBucketsResponse {
        try await self.describeDSPACOSDataAssetBuckets(.init(dspaId: dspaId, complianceId: complianceId), region: region, logger: logger, on: eventLoop)
    }
}
