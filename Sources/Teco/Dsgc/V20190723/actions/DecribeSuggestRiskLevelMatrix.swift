//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DecribeSuggestRiskLevelMatrix请求参数结构体
    public struct DecribeSuggestRiskLevelMatrixRequest: TCRequest {
        /// dspaId
        public let dspaId: String

        /// 分类分级等级列表
        public let sensitiveLevelList: [RiskMatrixLevel]

        /// 脆弱项等级列表
        public let vulnerabilityLevelList: [RiskMatrixLevel]

        public init(dspaId: String, sensitiveLevelList: [RiskMatrixLevel], vulnerabilityLevelList: [RiskMatrixLevel]) {
            self.dspaId = dspaId
            self.sensitiveLevelList = sensitiveLevelList
            self.vulnerabilityLevelList = vulnerabilityLevelList
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case sensitiveLevelList = "SensitiveLevelList"
            case vulnerabilityLevelList = "VulnerabilityLevelList"
        }
    }

    /// DecribeSuggestRiskLevelMatrix返回参数结构体
    public struct DecribeSuggestRiskLevelMatrixResponse: TCResponse {
        /// 矩阵
        public let suggestRiskLevelMatrix: [SuggestRiskLevelMatrix]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case suggestRiskLevelMatrix = "SuggestRiskLevelMatrix"
            case requestId = "RequestId"
        }
    }

    /// 查询建议的默认风险等级矩阵
    ///
    /// 风险等级的定义页面-创建风险等级的时候生成的一个默认的矩阵
    @inlinable
    public func decribeSuggestRiskLevelMatrix(_ input: DecribeSuggestRiskLevelMatrixRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DecribeSuggestRiskLevelMatrixResponse> {
        self.client.execute(action: "DecribeSuggestRiskLevelMatrix", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询建议的默认风险等级矩阵
    ///
    /// 风险等级的定义页面-创建风险等级的时候生成的一个默认的矩阵
    @inlinable
    public func decribeSuggestRiskLevelMatrix(_ input: DecribeSuggestRiskLevelMatrixRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DecribeSuggestRiskLevelMatrixResponse {
        try await self.client.execute(action: "DecribeSuggestRiskLevelMatrix", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询建议的默认风险等级矩阵
    ///
    /// 风险等级的定义页面-创建风险等级的时候生成的一个默认的矩阵
    @inlinable
    public func decribeSuggestRiskLevelMatrix(dspaId: String, sensitiveLevelList: [RiskMatrixLevel], vulnerabilityLevelList: [RiskMatrixLevel], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DecribeSuggestRiskLevelMatrixResponse> {
        self.decribeSuggestRiskLevelMatrix(.init(dspaId: dspaId, sensitiveLevelList: sensitiveLevelList, vulnerabilityLevelList: vulnerabilityLevelList), region: region, logger: logger, on: eventLoop)
    }

    /// 查询建议的默认风险等级矩阵
    ///
    /// 风险等级的定义页面-创建风险等级的时候生成的一个默认的矩阵
    @inlinable
    public func decribeSuggestRiskLevelMatrix(dspaId: String, sensitiveLevelList: [RiskMatrixLevel], vulnerabilityLevelList: [RiskMatrixLevel], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DecribeSuggestRiskLevelMatrixResponse {
        try await self.decribeSuggestRiskLevelMatrix(.init(dspaId: dspaId, sensitiveLevelList: sensitiveLevelList, vulnerabilityLevelList: vulnerabilityLevelList), region: region, logger: logger, on: eventLoop)
    }
}
