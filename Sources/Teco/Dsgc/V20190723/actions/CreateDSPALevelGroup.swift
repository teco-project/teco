//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateDSPALevelGroup请求参数结构体
    public struct CreateDSPALevelGroupRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 分级组名称，唯一性约束，最多60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字，Name不可重复
        public let name: String

        /// 分级标识配置
        public let itemLevels: [ItemLevel]

        /// 分级组描述，最多1024字符
        public let description: String?

        public init(dspaId: String, name: String, itemLevels: [ItemLevel], description: String? = nil) {
            self.dspaId = dspaId
            self.name = name
            self.itemLevels = itemLevels
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case name = "Name"
            case itemLevels = "ItemLevels"
            case description = "Description"
        }
    }

    /// CreateDSPALevelGroup返回参数结构体
    public struct CreateDSPALevelGroupResponse: TCResponse {
        /// 分级组ID
        public let levelGroupId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case levelGroupId = "LevelGroupId"
            case requestId = "RequestId"
        }
    }

    /// 新增分级
    ///
    /// 新增分级，单个Casb实例最多允许创建100个数据分级
    @inlinable
    public func createDSPALevelGroup(_ input: CreateDSPALevelGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPALevelGroupResponse> {
        self.client.execute(action: "CreateDSPALevelGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增分级
    ///
    /// 新增分级，单个Casb实例最多允许创建100个数据分级
    @inlinable
    public func createDSPALevelGroup(_ input: CreateDSPALevelGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPALevelGroupResponse {
        try await self.client.execute(action: "CreateDSPALevelGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增分级
    ///
    /// 新增分级，单个Casb实例最多允许创建100个数据分级
    @inlinable
    public func createDSPALevelGroup(dspaId: String, name: String, itemLevels: [ItemLevel], description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPALevelGroupResponse> {
        self.createDSPALevelGroup(.init(dspaId: dspaId, name: name, itemLevels: itemLevels, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 新增分级
    ///
    /// 新增分级，单个Casb实例最多允许创建100个数据分级
    @inlinable
    public func createDSPALevelGroup(dspaId: String, name: String, itemLevels: [ItemLevel], description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPALevelGroupResponse {
        try await self.createDSPALevelGroup(.init(dspaId: dspaId, name: name, itemLevels: itemLevels, description: description), region: region, logger: logger, on: eventLoop)
    }
}
