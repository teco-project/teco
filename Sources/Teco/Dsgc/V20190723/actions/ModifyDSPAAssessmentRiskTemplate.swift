//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ModifyDSPAAssessmentRiskTemplate请求参数结构体
    public struct ModifyDSPAAssessmentRiskTemplateRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 模版名称
        public let templateName: String

        /// 模版的描述
        public let templateDescription: String

        /// 模版id
        public let templateId: Int64

        /// 修改的风险等级id
        public let riskLevelId: Int64

        /// 脆弱项列表
        public let riskIdList: [Int64]?

        public init(dspaId: String, templateName: String, templateDescription: String, templateId: Int64, riskLevelId: Int64, riskIdList: [Int64]? = nil) {
            self.dspaId = dspaId
            self.templateName = templateName
            self.templateDescription = templateDescription
            self.templateId = templateId
            self.riskLevelId = riskLevelId
            self.riskIdList = riskIdList
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case templateName = "TemplateName"
            case templateDescription = "TemplateDescription"
            case templateId = "TemplateId"
            case riskLevelId = "RiskLevelId"
            case riskIdList = "RiskIdList"
        }
    }

    /// ModifyDSPAAssessmentRiskTemplate返回参数结构体
    public struct ModifyDSPAAssessmentRiskTemplateResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改风险模版页面
    ///
    /// 风险模版---修改风险模版
    @inlinable @discardableResult
    public func modifyDSPAAssessmentRiskTemplate(_ input: ModifyDSPAAssessmentRiskTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPAAssessmentRiskTemplateResponse> {
        self.client.execute(action: "ModifyDSPAAssessmentRiskTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改风险模版页面
    ///
    /// 风险模版---修改风险模版
    @inlinable @discardableResult
    public func modifyDSPAAssessmentRiskTemplate(_ input: ModifyDSPAAssessmentRiskTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPAAssessmentRiskTemplateResponse {
        try await self.client.execute(action: "ModifyDSPAAssessmentRiskTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改风险模版页面
    ///
    /// 风险模版---修改风险模版
    @inlinable @discardableResult
    public func modifyDSPAAssessmentRiskTemplate(dspaId: String, templateName: String, templateDescription: String, templateId: Int64, riskLevelId: Int64, riskIdList: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPAAssessmentRiskTemplateResponse> {
        self.modifyDSPAAssessmentRiskTemplate(.init(dspaId: dspaId, templateName: templateName, templateDescription: templateDescription, templateId: templateId, riskLevelId: riskLevelId, riskIdList: riskIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 修改风险模版页面
    ///
    /// 风险模版---修改风险模版
    @inlinable @discardableResult
    public func modifyDSPAAssessmentRiskTemplate(dspaId: String, templateName: String, templateDescription: String, templateId: Int64, riskLevelId: Int64, riskIdList: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPAAssessmentRiskTemplateResponse {
        try await self.modifyDSPAAssessmentRiskTemplate(.init(dspaId: dspaId, templateName: templateName, templateDescription: templateDescription, templateId: templateId, riskLevelId: riskLevelId, riskIdList: riskIdList), region: region, logger: logger, on: eventLoop)
    }
}
