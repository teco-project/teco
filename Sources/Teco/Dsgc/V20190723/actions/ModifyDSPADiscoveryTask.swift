//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ModifyDSPADiscoveryTask请求参数结构体
    public struct ModifyDSPADiscoveryTaskRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 任务ID
        public let taskId: Int64

        /// 任务名称，1-60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字，Name不可重复
        public let name: String?

        /// 任务描述，最大长度为1024个字符
        public let description: String?

        /// 任务开关，0 关闭，1 启用
        public let enable: Int64?

        /// 数据源ID
        public let dataSourceId: String?

        /// 用于传入的数据源的条件，目前只支持数据库，所以目前表示数据库的名称，最多添加5个数据库，之间通过逗号分隔
        public let condition: String?

        /// 通用规则集开关；0 关闭，1 启用
        public let generalRuleSetEnable: Int64?

        /// 合规组ID列表，最多支持添加5个
        public let complianceGroupIds: [Int64]?

        /// 执行计划； 0立即 1定时，选择“立即”时，扫描周期只能选择单次
        public let plan: Int64?

        /// 扫描周期；0单次 1每天 2每周 3每月
        public let period: Int64?

        /// 任务定时启动时间，格式：2006-01-02 15:04:05
        /// 当执行计划（Plan字段）为”立即“时，定时启动时间不会生效，此场景下给该字段传值不会被保存。
        public let timingStartTime: String?

        /// 资源所在地域
        public let resourceRegion: String?

        /// 数据源类型，可取值如下：
        /// cdb 表示云数据库 MySQL,
        /// dcdb 表示TDSQL MySQL版,
        /// mariadb 表示云数据库 MariaDB,
        /// postgres 表示云数据库 PostgreSQL,
        /// cynosdbpg 表示TDSQL-C PostgreSQL版,
        /// cynosdbmysql 表示TDSQL-C MySQL版,
        /// selfbuilt-db 表示自建数据库
        public let dataSourceType: String?

        public init(dspaId: String, taskId: Int64, name: String? = nil, description: String? = nil, enable: Int64? = nil, dataSourceId: String? = nil, condition: String? = nil, generalRuleSetEnable: Int64? = nil, complianceGroupIds: [Int64]? = nil, plan: Int64? = nil, period: Int64? = nil, timingStartTime: String? = nil, resourceRegion: String? = nil, dataSourceType: String? = nil) {
            self.dspaId = dspaId
            self.taskId = taskId
            self.name = name
            self.description = description
            self.enable = enable
            self.dataSourceId = dataSourceId
            self.condition = condition
            self.generalRuleSetEnable = generalRuleSetEnable
            self.complianceGroupIds = complianceGroupIds
            self.plan = plan
            self.period = period
            self.timingStartTime = timingStartTime
            self.resourceRegion = resourceRegion
            self.dataSourceType = dataSourceType
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case taskId = "TaskId"
            case name = "Name"
            case description = "Description"
            case enable = "Enable"
            case dataSourceId = "DataSourceId"
            case condition = "Condition"
            case generalRuleSetEnable = "GeneralRuleSetEnable"
            case complianceGroupIds = "ComplianceGroupIds"
            case plan = "Plan"
            case period = "Period"
            case timingStartTime = "TimingStartTime"
            case resourceRegion = "ResourceRegion"
            case dataSourceType = "DataSourceType"
        }
    }

    /// ModifyDSPADiscoveryTask返回参数结构体
    public struct ModifyDSPADiscoveryTaskResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改分类分级任务信息
    ///
    /// 修改分类分级任务，该接口只有在任务状态为以下状态时才支持正确修改：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func modifyDSPADiscoveryTask(_ input: ModifyDSPADiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPADiscoveryTaskResponse> {
        self.client.execute(action: "ModifyDSPADiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改分类分级任务信息
    ///
    /// 修改分类分级任务，该接口只有在任务状态为以下状态时才支持正确修改：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func modifyDSPADiscoveryTask(_ input: ModifyDSPADiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPADiscoveryTaskResponse {
        try await self.client.execute(action: "ModifyDSPADiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改分类分级任务信息
    ///
    /// 修改分类分级任务，该接口只有在任务状态为以下状态时才支持正确修改：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func modifyDSPADiscoveryTask(dspaId: String, taskId: Int64, name: String? = nil, description: String? = nil, enable: Int64? = nil, dataSourceId: String? = nil, condition: String? = nil, generalRuleSetEnable: Int64? = nil, complianceGroupIds: [Int64]? = nil, plan: Int64? = nil, period: Int64? = nil, timingStartTime: String? = nil, resourceRegion: String? = nil, dataSourceType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPADiscoveryTaskResponse> {
        self.modifyDSPADiscoveryTask(.init(dspaId: dspaId, taskId: taskId, name: name, description: description, enable: enable, dataSourceId: dataSourceId, condition: condition, generalRuleSetEnable: generalRuleSetEnable, complianceGroupIds: complianceGroupIds, plan: plan, period: period, timingStartTime: timingStartTime, resourceRegion: resourceRegion, dataSourceType: dataSourceType), region: region, logger: logger, on: eventLoop)
    }

    /// 修改分类分级任务信息
    ///
    /// 修改分类分级任务，该接口只有在任务状态为以下状态时才支持正确修改：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func modifyDSPADiscoveryTask(dspaId: String, taskId: Int64, name: String? = nil, description: String? = nil, enable: Int64? = nil, dataSourceId: String? = nil, condition: String? = nil, generalRuleSetEnable: Int64? = nil, complianceGroupIds: [Int64]? = nil, plan: Int64? = nil, period: Int64? = nil, timingStartTime: String? = nil, resourceRegion: String? = nil, dataSourceType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPADiscoveryTaskResponse {
        try await self.modifyDSPADiscoveryTask(.init(dspaId: dspaId, taskId: taskId, name: name, description: description, enable: enable, dataSourceId: dataSourceId, condition: condition, generalRuleSetEnable: generalRuleSetEnable, complianceGroupIds: complianceGroupIds, plan: plan, period: period, timingStartTime: timingStartTime, resourceRegion: resourceRegion, dataSourceType: dataSourceType), region: region, logger: logger, on: eventLoop)
    }
}
