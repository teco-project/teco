//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeReportTasks请求参数结构体
    public struct DescribeReportTasksRequest: TCPaginatedRequest {
        /// dspa实例id
        public let dspaId: String

        /// 分页大小
        public let limit: UInt64

        /// 分页偏移量
        public let offset: UInt64

        /// 报表名称
        public let reportName: String?

        public init(dspaId: String, limit: UInt64, offset: UInt64, reportName: String? = nil) {
            self.dspaId = dspaId
            self.limit = limit
            self.offset = offset
            self.reportName = reportName
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case limit = "Limit"
            case offset = "Offset"
            case reportName = "ReportName"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeReportTasksResponse) -> DescribeReportTasksRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), self.offset + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(dspaId: self.dspaId, limit: self.limit, offset: self.offset + .init(response.getItems().count), reportName: self.reportName)
        }
    }

    /// DescribeReportTasks返回参数结构体
    public struct DescribeReportTasksResponse: TCPaginatedResponse {
        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 报表信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let itemSet: [ReportInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case itemSet = "ItemSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ReportInfo`` list from the paginated response.
        public func getItems() -> [ReportInfo] {
            self.itemSet ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取资产报表任务列表
    @inlinable
    public func describeReportTasks(_ input: DescribeReportTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeReportTasksResponse> {
        self.client.execute(action: "DescribeReportTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取资产报表任务列表
    @inlinable
    public func describeReportTasks(_ input: DescribeReportTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeReportTasksResponse {
        try await self.client.execute(action: "DescribeReportTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取资产报表任务列表
    @inlinable
    public func describeReportTasks(dspaId: String, limit: UInt64, offset: UInt64, reportName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeReportTasksResponse> {
        self.describeReportTasks(.init(dspaId: dspaId, limit: limit, offset: offset, reportName: reportName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取资产报表任务列表
    @inlinable
    public func describeReportTasks(dspaId: String, limit: UInt64, offset: UInt64, reportName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeReportTasksResponse {
        try await self.describeReportTasks(.init(dspaId: dspaId, limit: limit, offset: offset, reportName: reportName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取资产报表任务列表
    @inlinable
    public func describeReportTasksPaginated(_ input: DescribeReportTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [ReportInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeReportTasks, logger: logger, on: eventLoop)
    }

    /// 获取资产报表任务列表
    @inlinable @discardableResult
    public func describeReportTasksPaginated(_ input: DescribeReportTasksRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeReportTasksResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeReportTasks, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取资产报表任务列表
    ///
    /// - Returns: `AsyncSequence`s of ``ReportInfo`` and ``DescribeReportTasksResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeReportTasksPaginator(_ input: DescribeReportTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeReportTasksRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeReportTasks, logger: logger, on: eventLoop)
    }
}
