//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DeleteDSPADiscoveryTaskResult请求参数结构体
    public struct DeleteDSPADiscoveryTaskResultRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 扫描数据库结果ID
        public let dbResultId: Int64

        public init(dspaId: String, dbResultId: Int64) {
            self.dspaId = dspaId
            self.dbResultId = dbResultId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case dbResultId = "DbResultId"
        }
    }

    /// DeleteDSPADiscoveryTaskResult返回参数结构体
    public struct DeleteDSPADiscoveryTaskResultResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除分类分级任务结果
    ///
    /// 删除分类分级识别任务结果
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTaskResult(_ input: DeleteDSPADiscoveryTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDSPADiscoveryTaskResultResponse> {
        self.client.execute(action: "DeleteDSPADiscoveryTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除分类分级任务结果
    ///
    /// 删除分类分级识别任务结果
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTaskResult(_ input: DeleteDSPADiscoveryTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDSPADiscoveryTaskResultResponse {
        try await self.client.execute(action: "DeleteDSPADiscoveryTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除分类分级任务结果
    ///
    /// 删除分类分级识别任务结果
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTaskResult(dspaId: String, dbResultId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDSPADiscoveryTaskResultResponse> {
        self.deleteDSPADiscoveryTaskResult(.init(dspaId: dspaId, dbResultId: dbResultId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除分类分级任务结果
    ///
    /// 删除分类分级识别任务结果
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTaskResult(dspaId: String, dbResultId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDSPADiscoveryTaskResultResponse {
        try await self.deleteDSPADiscoveryTaskResult(.init(dspaId: dspaId, dbResultId: dbResultId), region: region, logger: logger, on: eventLoop)
    }
}
