//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ModifyDSPACOSTaskResult请求参数结构体
    public struct ModifyDSPACOSTaskResultRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 合规组ID
        public let complianceId: Int64

        /// 文件扫描结果ID
        public let fileResultId: Int64

        /// 是否设置为非敏感文件
        public let isSetNonSensitiveFile: Bool?

        public init(dspaId: String, complianceId: Int64, fileResultId: Int64, isSetNonSensitiveFile: Bool? = nil) {
            self.dspaId = dspaId
            self.complianceId = complianceId
            self.fileResultId = fileResultId
            self.isSetNonSensitiveFile = isSetNonSensitiveFile
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
            case fileResultId = "FileResultId"
            case isSetNonSensitiveFile = "IsSetNonSensitiveFile"
        }
    }

    /// ModifyDSPACOSTaskResult返回参数结构体
    public struct ModifyDSPACOSTaskResultResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 调整COS任务扫描结果
    @inlinable @discardableResult
    public func modifyDSPACOSTaskResult(_ input: ModifyDSPACOSTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPACOSTaskResultResponse> {
        self.client.execute(action: "ModifyDSPACOSTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 调整COS任务扫描结果
    @inlinable @discardableResult
    public func modifyDSPACOSTaskResult(_ input: ModifyDSPACOSTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPACOSTaskResultResponse {
        try await self.client.execute(action: "ModifyDSPACOSTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 调整COS任务扫描结果
    @inlinable @discardableResult
    public func modifyDSPACOSTaskResult(dspaId: String, complianceId: Int64, fileResultId: Int64, isSetNonSensitiveFile: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPACOSTaskResultResponse> {
        self.modifyDSPACOSTaskResult(.init(dspaId: dspaId, complianceId: complianceId, fileResultId: fileResultId, isSetNonSensitiveFile: isSetNonSensitiveFile), region: region, logger: logger, on: eventLoop)
    }

    /// 调整COS任务扫描结果
    @inlinable @discardableResult
    public func modifyDSPACOSTaskResult(dspaId: String, complianceId: Int64, fileResultId: Int64, isSetNonSensitiveFile: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPACOSTaskResultResponse {
        try await self.modifyDSPACOSTaskResult(.init(dspaId: dspaId, complianceId: complianceId, fileResultId: fileResultId, isSetNonSensitiveFile: isSetNonSensitiveFile), region: region, logger: logger, on: eventLoop)
    }
}
