//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentRiskProcessHistory请求参数结构体
    public struct DescribeDSPAAssessmentRiskProcessHistoryRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// xxx
        public let riskId: Int64

        public init(dspaId: String, riskId: Int64) {
            self.dspaId = dspaId
            self.riskId = riskId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case riskId = "RiskId"
        }
    }

    /// DescribeDSPAAssessmentRiskProcessHistory返回参数结构体
    public struct DescribeDSPAAssessmentRiskProcessHistoryResponse: TCResponse {
        /// 处理的历史
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processHistory: [ProcessHistory]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case processHistory = "ProcessHistory"
            case requestId = "RequestId"
        }
    }

    /// 查询风险的处理历史
    ///
    /// 修改最新评估风险项状态
    @inlinable
    public func describeDSPAAssessmentRiskProcessHistory(_ input: DescribeDSPAAssessmentRiskProcessHistoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskProcessHistoryResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentRiskProcessHistory", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询风险的处理历史
    ///
    /// 修改最新评估风险项状态
    @inlinable
    public func describeDSPAAssessmentRiskProcessHistory(_ input: DescribeDSPAAssessmentRiskProcessHistoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskProcessHistoryResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentRiskProcessHistory", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询风险的处理历史
    ///
    /// 修改最新评估风险项状态
    @inlinable
    public func describeDSPAAssessmentRiskProcessHistory(dspaId: String, riskId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskProcessHistoryResponse> {
        self.describeDSPAAssessmentRiskProcessHistory(.init(dspaId: dspaId, riskId: riskId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询风险的处理历史
    ///
    /// 修改最新评估风险项状态
    @inlinable
    public func describeDSPAAssessmentRiskProcessHistory(dspaId: String, riskId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskProcessHistoryResponse {
        try await self.describeDSPAAssessmentRiskProcessHistory(.init(dspaId: dspaId, riskId: riskId), region: region, logger: logger, on: eventLoop)
    }
}
