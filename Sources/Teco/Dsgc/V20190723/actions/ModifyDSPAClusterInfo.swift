//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ModifyDSPAClusterInfo请求参数结构体
    public struct ModifyDSPAClusterInfoRequest: TCRequest {
        /// DSPA实例ID。
        public let dspaId: String

        /// DSPA实例名。1-60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字。
        public let dspaName: String?

        /// DSPA实例描述信息。最长1024个字符。
        public let dspaDescription: String?

        public init(dspaId: String, dspaName: String? = nil, dspaDescription: String? = nil) {
            self.dspaId = dspaId
            self.dspaName = dspaName
            self.dspaDescription = dspaDescription
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case dspaName = "DspaName"
            case dspaDescription = "DspaDescription"
        }
    }

    /// ModifyDSPAClusterInfo返回参数结构体
    public struct ModifyDSPAClusterInfoResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改DSPA集群信息
    @inlinable @discardableResult
    public func modifyDSPAClusterInfo(_ input: ModifyDSPAClusterInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPAClusterInfoResponse> {
        self.client.execute(action: "ModifyDSPAClusterInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改DSPA集群信息
    @inlinable @discardableResult
    public func modifyDSPAClusterInfo(_ input: ModifyDSPAClusterInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPAClusterInfoResponse {
        try await self.client.execute(action: "ModifyDSPAClusterInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改DSPA集群信息
    @inlinable @discardableResult
    public func modifyDSPAClusterInfo(dspaId: String, dspaName: String? = nil, dspaDescription: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPAClusterInfoResponse> {
        self.modifyDSPAClusterInfo(.init(dspaId: dspaId, dspaName: dspaName, dspaDescription: dspaDescription), region: region, logger: logger, on: eventLoop)
    }

    /// 修改DSPA集群信息
    @inlinable @discardableResult
    public func modifyDSPAClusterInfo(dspaId: String, dspaName: String? = nil, dspaDescription: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPAClusterInfoResponse {
        try await self.modifyDSPAClusterInfo(.init(dspaId: dspaId, dspaName: dspaName, dspaDescription: dspaDescription), region: region, logger: logger, on: eventLoop)
    }
}
