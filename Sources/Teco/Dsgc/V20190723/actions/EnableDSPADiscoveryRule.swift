//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// EnableDSPADiscoveryRule请求参数结构体
    public struct EnableDSPADiscoveryRuleRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 规则ID
        public let ruleId: Int64

        /// 开关ScanRule
        public let enable: Bool

        public init(dspaId: String, ruleId: Int64, enable: Bool) {
            self.dspaId = dspaId
            self.ruleId = ruleId
            self.enable = enable
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case ruleId = "RuleId"
            case enable = "Enable"
        }
    }

    /// EnableDSPADiscoveryRule返回参数结构体
    public struct EnableDSPADiscoveryRuleResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 打开或关闭分类分级规则
    ///
    /// 打开或者关闭分类分级规则
    /// 注：此API同时对该规则下的RDB跟COS规则操作。
    @inlinable @discardableResult
    public func enableDSPADiscoveryRule(_ input: EnableDSPADiscoveryRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableDSPADiscoveryRuleResponse> {
        self.client.execute(action: "EnableDSPADiscoveryRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 打开或关闭分类分级规则
    ///
    /// 打开或者关闭分类分级规则
    /// 注：此API同时对该规则下的RDB跟COS规则操作。
    @inlinable @discardableResult
    public func enableDSPADiscoveryRule(_ input: EnableDSPADiscoveryRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableDSPADiscoveryRuleResponse {
        try await self.client.execute(action: "EnableDSPADiscoveryRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 打开或关闭分类分级规则
    ///
    /// 打开或者关闭分类分级规则
    /// 注：此API同时对该规则下的RDB跟COS规则操作。
    @inlinable @discardableResult
    public func enableDSPADiscoveryRule(dspaId: String, ruleId: Int64, enable: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EnableDSPADiscoveryRuleResponse> {
        self.enableDSPADiscoveryRule(.init(dspaId: dspaId, ruleId: ruleId, enable: enable), region: region, logger: logger, on: eventLoop)
    }

    /// 打开或关闭分类分级规则
    ///
    /// 打开或者关闭分类分级规则
    /// 注：此API同时对该规则下的RDB跟COS规则操作。
    @inlinable @discardableResult
    public func enableDSPADiscoveryRule(dspaId: String, ruleId: Int64, enable: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EnableDSPADiscoveryRuleResponse {
        try await self.enableDSPADiscoveryRule(.init(dspaId: dspaId, ruleId: ruleId, enable: enable), region: region, logger: logger, on: eventLoop)
    }
}
