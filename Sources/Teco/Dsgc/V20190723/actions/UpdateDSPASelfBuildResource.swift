//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// UpdateDSPASelfBuildResource请求参数结构体
    public struct UpdateDSPASelfBuildResourceRequest: TCRequest {
        /// DSPA实例ID。
        public let dspaId: String

        /// 云资源名称，如果是通过CVM访问则填写CVM的资源ID，如果是通过LB访问则填写LB的资源ID。
        public let resourceId: String

        /// 资源绑定的端口，为0则表示不更新。
        public let resourceVPort: UInt64

        /// 账户名，为空则表示不更新。
        /// UserName和Password必须同时填写或同时为空。
        public let userName: String

        /// 账户密码，为空则表示不更新。
        /// UserName和Password必须同时填写或同时为空。
        public let password: String

        public init(dspaId: String, resourceId: String, resourceVPort: UInt64, userName: String, password: String) {
            self.dspaId = dspaId
            self.resourceId = resourceId
            self.resourceVPort = resourceVPort
            self.userName = userName
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case resourceId = "ResourceId"
            case resourceVPort = "ResourceVPort"
            case userName = "UserName"
            case password = "Password"
        }
    }

    /// UpdateDSPASelfBuildResource返回参数结构体
    public struct UpdateDSPASelfBuildResourceResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新自建资源基础信息
    ///
    /// 更新自建资源基础信息，包括：端口、账户名、密码。
    /// 请注意：
    /// 如果资源自身的VPC、VIP信息发生变化，后台会自动更新。
    /// 如果监听的端口发生变化，请显式输入端口。
    /// 如果账户名密码任意一个发生变化，请务必同时显式输入账户名密码。
    @inlinable @discardableResult
    public func updateDSPASelfBuildResource(_ input: UpdateDSPASelfBuildResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateDSPASelfBuildResourceResponse> {
        self.client.execute(action: "UpdateDSPASelfBuildResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新自建资源基础信息
    ///
    /// 更新自建资源基础信息，包括：端口、账户名、密码。
    /// 请注意：
    /// 如果资源自身的VPC、VIP信息发生变化，后台会自动更新。
    /// 如果监听的端口发生变化，请显式输入端口。
    /// 如果账户名密码任意一个发生变化，请务必同时显式输入账户名密码。
    @inlinable @discardableResult
    public func updateDSPASelfBuildResource(_ input: UpdateDSPASelfBuildResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDSPASelfBuildResourceResponse {
        try await self.client.execute(action: "UpdateDSPASelfBuildResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新自建资源基础信息
    ///
    /// 更新自建资源基础信息，包括：端口、账户名、密码。
    /// 请注意：
    /// 如果资源自身的VPC、VIP信息发生变化，后台会自动更新。
    /// 如果监听的端口发生变化，请显式输入端口。
    /// 如果账户名密码任意一个发生变化，请务必同时显式输入账户名密码。
    @inlinable @discardableResult
    public func updateDSPASelfBuildResource(dspaId: String, resourceId: String, resourceVPort: UInt64, userName: String, password: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateDSPASelfBuildResourceResponse> {
        self.updateDSPASelfBuildResource(.init(dspaId: dspaId, resourceId: resourceId, resourceVPort: resourceVPort, userName: userName, password: password), region: region, logger: logger, on: eventLoop)
    }

    /// 更新自建资源基础信息
    ///
    /// 更新自建资源基础信息，包括：端口、账户名、密码。
    /// 请注意：
    /// 如果资源自身的VPC、VIP信息发生变化，后台会自动更新。
    /// 如果监听的端口发生变化，请显式输入端口。
    /// 如果账户名密码任意一个发生变化，请务必同时显式输入账户名密码。
    @inlinable @discardableResult
    public func updateDSPASelfBuildResource(dspaId: String, resourceId: String, resourceVPort: UInt64, userName: String, password: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDSPASelfBuildResourceResponse {
        try await self.updateDSPASelfBuildResource(.init(dspaId: dspaId, resourceId: resourceId, resourceVPort: resourceVPort, userName: userName, password: password), region: region, logger: logger, on: eventLoop)
    }
}
