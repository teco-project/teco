//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ListDSPAMetaResources请求参数结构体
    public struct ListDSPAMetaResourcesRequest: TCPaginatedRequest {
        /// DSPA实例ID。
        public let dspaId: String

        /// 过滤项。
        /// 可过滤值包括：
        /// ResoureRegion - 资源所处地域，需要填写完整地域名称，不支持模糊匹配。
        ///
        /// AuthStatus - authorized（已授权）、unauthorized（未授权）、deleted（资源已被删除），不支持模糊匹配，需要填写完整。
        ///
        /// BuildType - cloud（云原生资源）、build（用户自建资源），不支持模糊匹配，需要填写完整。
        ///
        /// MetaType - cdb（云数据Mysql）、dcdb（TDSQL MySQL版）、mariadb（云数据库 MariaDB）、postgres（云数据库 PostgreSQL）、cynosdbmysql（TDSQL-C MySQL版）、cos（对象存储）、mysql_like_proto（自建型Mysql协议类关系型数据库）、postgre_like_proto（自建型Postgre协议类关系型数据库）。
        ///
        /// ResourceId - 资源ID，支持模糊搜索。
        public let filters: [DspaDataSourceMngFilter]?

        /// 分页步长，默认为100。
        public let limit: UInt64?

        /// 分页偏移量，默认为0。
        public let offset: UInt64?

        /// 资源绑定状态过滤，默认为全部
        public let bindType: String?

        public init(dspaId: String, filters: [DspaDataSourceMngFilter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, bindType: String? = nil) {
            self.dspaId = dspaId
            self.filters = filters
            self.limit = limit
            self.offset = offset
            self.bindType = bindType
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
            case bindType = "BindType"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListDSPAMetaResourcesResponse) -> ListDSPAMetaResourcesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(dspaId: self.dspaId, filters: self.filters, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), bindType: self.bindType)
        }
    }

    /// ListDSPAMetaResources返回参数结构体
    public struct ListDSPAMetaResourcesResponse: TCPaginatedResponse {
        /// DSPA实例ID。
        public let dspaId: String

        /// 用户资源列表。
        public let resources: [DspaUserResourceMeta]

        /// 资源总量。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case resources = "Resources"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DspaUserResourceMeta`` list from the paginated response.
        public func getItems() -> [DspaUserResourceMeta] {
            self.resources
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 拉取用户云资源
    @inlinable
    public func listDSPAMetaResources(_ input: ListDSPAMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListDSPAMetaResourcesResponse> {
        self.client.execute(action: "ListDSPAMetaResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 拉取用户云资源
    @inlinable
    public func listDSPAMetaResources(_ input: ListDSPAMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDSPAMetaResourcesResponse {
        try await self.client.execute(action: "ListDSPAMetaResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 拉取用户云资源
    @inlinable
    public func listDSPAMetaResources(dspaId: String, filters: [DspaDataSourceMngFilter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, bindType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListDSPAMetaResourcesResponse> {
        self.listDSPAMetaResources(.init(dspaId: dspaId, filters: filters, limit: limit, offset: offset, bindType: bindType), region: region, logger: logger, on: eventLoop)
    }

    /// 拉取用户云资源
    @inlinable
    public func listDSPAMetaResources(dspaId: String, filters: [DspaDataSourceMngFilter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, bindType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDSPAMetaResourcesResponse {
        try await self.listDSPAMetaResources(.init(dspaId: dspaId, filters: filters, limit: limit, offset: offset, bindType: bindType), region: region, logger: logger, on: eventLoop)
    }

    /// 拉取用户云资源
    @inlinable
    public func listDSPAMetaResourcesPaginated(_ input: ListDSPAMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [DspaUserResourceMeta])> {
        self.client.paginate(input: input, region: region, command: self.listDSPAMetaResources, logger: logger, on: eventLoop)
    }

    /// 拉取用户云资源
    @inlinable @discardableResult
    public func listDSPAMetaResourcesPaginated(_ input: ListDSPAMetaResourcesRequest, region: TCRegion? = nil, onResponse: @escaping (ListDSPAMetaResourcesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listDSPAMetaResources, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 拉取用户云资源
    ///
    /// - Returns: `AsyncSequence`s of ``DspaUserResourceMeta`` and ``ListDSPAMetaResourcesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func listDSPAMetaResourcesPaginator(_ input: ListDSPAMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListDSPAMetaResourcesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listDSPAMetaResources, logger: logger, on: eventLoop)
    }
}
