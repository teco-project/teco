//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ExportAssetDetailData请求参数结构体
    public struct ExportAssetDetailDataRequest: TCRequest {
        /// DSPA实例Id，格式“dspa-xxxxxxxx”
        public let dspaId: String

        /// 合规组id
        public let complianceId: UInt64

        /// 资产类型（rdb,cvm_db,cos）
        public let metaDataType: String

        /// 过滤数组。支持的Name：
        /// DataSourceID 数据源ID
        /// DbName 数据库名称
        /// CategoryID 敏感数据分类ID
        /// RuleID 规则ID
        /// LevelID 敏感分级ID
        /// ResourceRegion 资源所在地域
        /// DataSourceType 数据源类型，不填默认过滤非自建的所有关系型数据源类型，填selfbuilt-db只过滤自建类型
        /// 注意：每个name默认支持最多5个values。
        public let filters: [Filter]?

        public init(dspaId: String, complianceId: UInt64, metaDataType: String, filters: [Filter]? = nil) {
            self.dspaId = dspaId
            self.complianceId = complianceId
            self.metaDataType = metaDataType
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case complianceId = "ComplianceId"
            case metaDataType = "MetaDataType"
            case filters = "Filters"
        }
    }

    /// ExportAssetDetailData返回参数结构体
    public struct ExportAssetDetailDataResponse: TCResponse {
        /// 导出任务id
        public let exportTaskId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case exportTaskId = "ExportTaskId"
            case requestId = "RequestId"
        }
    }

    /// 敏感数据导出
    ///
    /// 创建敏感数据导出任务
    @inlinable
    public func exportAssetDetailData(_ input: ExportAssetDetailDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportAssetDetailDataResponse> {
        self.client.execute(action: "ExportAssetDetailData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 敏感数据导出
    ///
    /// 创建敏感数据导出任务
    @inlinable
    public func exportAssetDetailData(_ input: ExportAssetDetailDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportAssetDetailDataResponse {
        try await self.client.execute(action: "ExportAssetDetailData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 敏感数据导出
    ///
    /// 创建敏感数据导出任务
    @inlinable
    public func exportAssetDetailData(dspaId: String, complianceId: UInt64, metaDataType: String, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportAssetDetailDataResponse> {
        self.exportAssetDetailData(.init(dspaId: dspaId, complianceId: complianceId, metaDataType: metaDataType, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 敏感数据导出
    ///
    /// 创建敏感数据导出任务
    @inlinable
    public func exportAssetDetailData(dspaId: String, complianceId: UInt64, metaDataType: String, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportAssetDetailDataResponse {
        try await self.exportAssetDetailData(.init(dspaId: dspaId, complianceId: complianceId, metaDataType: metaDataType, filters: filters), region: region, logger: logger, on: eventLoop)
    }
}
