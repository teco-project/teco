//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DeleteDSPADiscoveryTask请求参数结构体
    public struct DeleteDSPADiscoveryTaskRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 任务ID
        public let taskId: Int64

        /// 数据源类型
        public let dataSourceType: String?

        public init(dspaId: String, taskId: Int64, dataSourceType: String? = nil) {
            self.dspaId = dspaId
            self.taskId = taskId
            self.dataSourceType = dataSourceType
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case taskId = "TaskId"
            case dataSourceType = "DataSourceType"
        }
    }

    /// DeleteDSPADiscoveryTask返回参数结构体
    public struct DeleteDSPADiscoveryTaskResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除分类分级任务
    ///
    /// 删除分类分级识别任务，该接口只有在任务状态为以下几个状态值时才支持正确删除：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTask(_ input: DeleteDSPADiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDSPADiscoveryTaskResponse> {
        self.client.execute(action: "DeleteDSPADiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除分类分级任务
    ///
    /// 删除分类分级识别任务，该接口只有在任务状态为以下几个状态值时才支持正确删除：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTask(_ input: DeleteDSPADiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDSPADiscoveryTaskResponse {
        try await self.client.execute(action: "DeleteDSPADiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除分类分级任务
    ///
    /// 删除分类分级识别任务，该接口只有在任务状态为以下几个状态值时才支持正确删除：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTask(dspaId: String, taskId: Int64, dataSourceType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDSPADiscoveryTaskResponse> {
        self.deleteDSPADiscoveryTask(.init(dspaId: dspaId, taskId: taskId, dataSourceType: dataSourceType), region: region, logger: logger, on: eventLoop)
    }

    /// 删除分类分级任务
    ///
    /// 删除分类分级识别任务，该接口只有在任务状态为以下几个状态值时才支持正确删除：
    /// 0 待扫描，
    /// 2 扫描终止，
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func deleteDSPADiscoveryTask(dspaId: String, taskId: Int64, dataSourceType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDSPADiscoveryTaskResponse {
        try await self.deleteDSPADiscoveryTask(.init(dspaId: dspaId, taskId: taskId, dataSourceType: dataSourceType), region: region, logger: logger, on: eventLoop)
    }
}
