//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// QueryResourceDbBindStatus请求参数结构体
    public struct QueryResourceDbBindStatusRequest: TCRequest {
        /// DSPA实例ID。
        public let dspaId: String

        /// 资源ID。
        public let resourceId: String

        /// 资源所在地域。
        public let resourceRegion: String

        /// 资源类型。
        public let metaType: String

        public init(dspaId: String, resourceId: String, resourceRegion: String, metaType: String) {
            self.dspaId = dspaId
            self.resourceId = resourceId
            self.resourceRegion = resourceRegion
            self.metaType = metaType
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case resourceId = "ResourceId"
            case resourceRegion = "ResourceRegion"
            case metaType = "MetaType"
        }
    }

    /// QueryResourceDbBindStatus返回参数结构体
    public struct QueryResourceDbBindStatusResponse: TCResponse {
        /// 绑定DB数量。
        public let bindDbNums: UInt64

        /// 未绑定DB数量。
        public let unbindDbNums: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case bindDbNums = "BindDbNums"
            case unbindDbNums = "UnbindDbNums"
            case requestId = "RequestId"
        }
    }

    /// 获取资源绑定DB状态
    @inlinable
    public func queryResourceDbBindStatus(_ input: QueryResourceDbBindStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryResourceDbBindStatusResponse> {
        self.client.execute(action: "QueryResourceDbBindStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取资源绑定DB状态
    @inlinable
    public func queryResourceDbBindStatus(_ input: QueryResourceDbBindStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryResourceDbBindStatusResponse {
        try await self.client.execute(action: "QueryResourceDbBindStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取资源绑定DB状态
    @inlinable
    public func queryResourceDbBindStatus(dspaId: String, resourceId: String, resourceRegion: String, metaType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryResourceDbBindStatusResponse> {
        self.queryResourceDbBindStatus(.init(dspaId: dspaId, resourceId: resourceId, resourceRegion: resourceRegion, metaType: metaType), region: region, logger: logger, on: eventLoop)
    }

    /// 获取资源绑定DB状态
    @inlinable
    public func queryResourceDbBindStatus(dspaId: String, resourceId: String, resourceRegion: String, metaType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryResourceDbBindStatusResponse {
        try await self.queryResourceDbBindStatus(.init(dspaId: dspaId, resourceId: resourceId, resourceRegion: resourceRegion, metaType: metaType), region: region, logger: logger, on: eventLoop)
    }
}
