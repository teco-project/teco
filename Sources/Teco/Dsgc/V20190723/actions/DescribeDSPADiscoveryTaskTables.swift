//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPADiscoveryTaskTables请求参数结构体
    public struct DescribeDSPADiscoveryTaskTablesRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 任务ID
        public let taskId: Int64

        /// 数据库扫描结果ID
        public let dbResultId: Int64

        /// db名称
        public let dbName: String?

        public init(dspaId: String, taskId: Int64, dbResultId: Int64, dbName: String? = nil) {
            self.dspaId = dspaId
            self.taskId = taskId
            self.dbResultId = dbResultId
            self.dbName = dbName
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case taskId = "TaskId"
            case dbResultId = "DbResultId"
            case dbName = "DbName"
        }
    }

    /// DescribeDSPADiscoveryTaskTables返回参数结构体
    public struct DescribeDSPADiscoveryTaskTablesResponse: TCResponse {
        /// 分类分级扫描表集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [DSPATableInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case requestId = "RequestId"
        }
    }

    /// 获取分级分级扫描的表集合
    @inlinable
    public func describeDSPADiscoveryTaskTables(_ input: DescribeDSPADiscoveryTaskTablesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPADiscoveryTaskTablesResponse> {
        self.client.execute(action: "DescribeDSPADiscoveryTaskTables", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取分级分级扫描的表集合
    @inlinable
    public func describeDSPADiscoveryTaskTables(_ input: DescribeDSPADiscoveryTaskTablesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPADiscoveryTaskTablesResponse {
        try await self.client.execute(action: "DescribeDSPADiscoveryTaskTables", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取分级分级扫描的表集合
    @inlinable
    public func describeDSPADiscoveryTaskTables(dspaId: String, taskId: Int64, dbResultId: Int64, dbName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPADiscoveryTaskTablesResponse> {
        self.describeDSPADiscoveryTaskTables(.init(dspaId: dspaId, taskId: taskId, dbResultId: dbResultId, dbName: dbName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取分级分级扫描的表集合
    @inlinable
    public func describeDSPADiscoveryTaskTables(dspaId: String, taskId: Int64, dbResultId: Int64, dbName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPADiscoveryTaskTablesResponse {
        try await self.describeDSPADiscoveryTaskTables(.init(dspaId: dspaId, taskId: taskId, dbResultId: dbResultId, dbName: dbName), region: region, logger: logger, on: eventLoop)
    }
}
