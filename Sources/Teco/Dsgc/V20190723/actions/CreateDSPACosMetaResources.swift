//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateDSPACosMetaResources请求参数结构体
    public struct CreateDSPACosMetaResourcesRequest: TCRequest {
        /// 资源所处地域。
        public let resourceRegion: String

        /// DSPA实例ID。
        public let dspaId: String

        /// COS桶列表
        public let buckets: [String]

        public init(resourceRegion: String, dspaId: String, buckets: [String]) {
            self.resourceRegion = resourceRegion
            self.dspaId = dspaId
            self.buckets = buckets
        }

        enum CodingKeys: String, CodingKey {
            case resourceRegion = "ResourceRegion"
            case dspaId = "DspaId"
            case buckets = "Buckets"
        }
    }

    /// CreateDSPACosMetaResources返回参数结构体
    public struct CreateDSPACosMetaResourcesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 添加用户COS元数据
    ///
    /// 添加COS元数据
    @inlinable @discardableResult
    public func createDSPACosMetaResources(_ input: CreateDSPACosMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPACosMetaResourcesResponse> {
        self.client.execute(action: "CreateDSPACosMetaResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加用户COS元数据
    ///
    /// 添加COS元数据
    @inlinable @discardableResult
    public func createDSPACosMetaResources(_ input: CreateDSPACosMetaResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPACosMetaResourcesResponse {
        try await self.client.execute(action: "CreateDSPACosMetaResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加用户COS元数据
    ///
    /// 添加COS元数据
    @inlinable @discardableResult
    public func createDSPACosMetaResources(resourceRegion: String, dspaId: String, buckets: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPACosMetaResourcesResponse> {
        self.createDSPACosMetaResources(.init(resourceRegion: resourceRegion, dspaId: dspaId, buckets: buckets), region: region, logger: logger, on: eventLoop)
    }

    /// 添加用户COS元数据
    ///
    /// 添加COS元数据
    @inlinable @discardableResult
    public func createDSPACosMetaResources(resourceRegion: String, dspaId: String, buckets: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPACosMetaResourcesResponse {
        try await self.createDSPACosMetaResources(.init(resourceRegion: resourceRegion, dspaId: dspaId, buckets: buckets), region: region, logger: logger, on: eventLoop)
    }
}
