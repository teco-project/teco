//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ListDSPAClusters请求参数结构体
    public struct ListDSPAClustersRequest: TCPaginatedRequest {
        /// 分页步长，默认为100。
        public let limit: UInt64?

        /// 分页偏移量，默认为0。
        public let offset: UInt64?

        /// 过滤项。
        /// 支持的过滤项包括：DspaId、Status、Version、DspaName。
        /// DspaId和DspaName支持模糊搜索。
        /// Status支持的可选值：enabled、disabled。
        /// Version支持的可选值：trial、official。
        public let filters: [DspaDataSourceMngFilter]?

        /// 展示模式。
        public let listMode: String?

        public init(limit: UInt64? = nil, offset: UInt64? = nil, filters: [DspaDataSourceMngFilter]? = nil, listMode: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.listMode = listMode
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case listMode = "ListMode"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListDSPAClustersResponse) -> ListDSPAClustersRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters, listMode: self.listMode)
        }
    }

    /// ListDSPAClusters返回参数结构体
    public struct ListDSPAClustersResponse: TCPaginatedResponse {
        /// 资源总数。
        public let totalCount: UInt64

        /// 资源列表。
        public let instanceList: [DspaInstance]

        /// 是否被拒绝访问所有dspa实例资源。
        public let denyAll: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case instanceList = "InstanceList"
            case denyAll = "DenyAll"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DspaInstance`` list from the paginated response.
        public func getItems() -> [DspaInstance] {
            self.instanceList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 拉取DSPA集群列表
    @inlinable
    public func listDSPAClusters(_ input: ListDSPAClustersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListDSPAClustersResponse> {
        self.client.execute(action: "ListDSPAClusters", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 拉取DSPA集群列表
    @inlinable
    public func listDSPAClusters(_ input: ListDSPAClustersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDSPAClustersResponse {
        try await self.client.execute(action: "ListDSPAClusters", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 拉取DSPA集群列表
    @inlinable
    public func listDSPAClusters(limit: UInt64? = nil, offset: UInt64? = nil, filters: [DspaDataSourceMngFilter]? = nil, listMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListDSPAClustersResponse> {
        self.listDSPAClusters(.init(limit: limit, offset: offset, filters: filters, listMode: listMode), region: region, logger: logger, on: eventLoop)
    }

    /// 拉取DSPA集群列表
    @inlinable
    public func listDSPAClusters(limit: UInt64? = nil, offset: UInt64? = nil, filters: [DspaDataSourceMngFilter]? = nil, listMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDSPAClustersResponse {
        try await self.listDSPAClusters(.init(limit: limit, offset: offset, filters: filters, listMode: listMode), region: region, logger: logger, on: eventLoop)
    }

    /// 拉取DSPA集群列表
    @inlinable
    public func listDSPAClustersPaginated(_ input: ListDSPAClustersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [DspaInstance])> {
        self.client.paginate(input: input, region: region, command: self.listDSPAClusters, logger: logger, on: eventLoop)
    }

    /// 拉取DSPA集群列表
    @inlinable @discardableResult
    public func listDSPAClustersPaginated(_ input: ListDSPAClustersRequest, region: TCRegion? = nil, onResponse: @escaping (ListDSPAClustersResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listDSPAClusters, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 拉取DSPA集群列表
    ///
    /// - Returns: `AsyncSequence`s of ``DspaInstance`` and ``ListDSPAClustersResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func listDSPAClustersPaginator(_ input: ListDSPAClustersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListDSPAClustersRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listDSPAClusters, logger: logger, on: eventLoop)
    }
}
