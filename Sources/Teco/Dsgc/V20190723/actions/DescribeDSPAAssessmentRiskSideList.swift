//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentRiskSideList请求参数结构体
    public struct DescribeDSPAAssessmentRiskSideListRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 评估模版id
        public let templateId: Int64

        public init(dspaId: String, templateId: Int64) {
            self.dspaId = dspaId
            self.templateId = templateId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case templateId = "TemplateId"
        }
    }

    /// DescribeDSPAAssessmentRiskSideList返回参数结构体
    public struct DescribeDSPAAssessmentRiskSideListResponse: TCResponse {
        /// 风险面列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskSideItmeList: [Note]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case riskSideItmeList = "RiskSideItmeList"
            case requestId = "RequestId"
        }
    }

    /// 查询风险评估风险面的列表
    ///
    /// 风险评估概览页，查询风险面的分布
    @inlinable
    public func describeDSPAAssessmentRiskSideList(_ input: DescribeDSPAAssessmentRiskSideListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskSideListResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentRiskSideList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询风险评估风险面的列表
    ///
    /// 风险评估概览页，查询风险面的分布
    @inlinable
    public func describeDSPAAssessmentRiskSideList(_ input: DescribeDSPAAssessmentRiskSideListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskSideListResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentRiskSideList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询风险评估风险面的列表
    ///
    /// 风险评估概览页，查询风险面的分布
    @inlinable
    public func describeDSPAAssessmentRiskSideList(dspaId: String, templateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentRiskSideListResponse> {
        self.describeDSPAAssessmentRiskSideList(.init(dspaId: dspaId, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询风险评估风险面的列表
    ///
    /// 风险评估概览页，查询风险面的分布
    @inlinable
    public func describeDSPAAssessmentRiskSideList(dspaId: String, templateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentRiskSideListResponse {
        try await self.describeDSPAAssessmentRiskSideList(.init(dspaId: dspaId, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }
}
