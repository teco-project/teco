//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// StopDSPADiscoveryTask请求参数结构体
    public struct StopDSPADiscoveryTaskRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 任务ID
        public let taskId: Int64

        public init(dspaId: String, taskId: Int64) {
            self.dspaId = dspaId
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case taskId = "TaskId"
        }
    }

    /// StopDSPADiscoveryTask返回参数结构体
    public struct StopDSPADiscoveryTaskResponse: TCResponse {
        /// 任务扫描结果ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultId: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case resultId = "ResultId"
            case requestId = "RequestId"
        }
    }

    /// 停止正在执行的分类分级任务
    ///
    /// 停止分类分级任务，该接口只有在任务状态为以下状态时才支持正确执行停止扫描：
    /// 1 扫描中
    @inlinable
    public func stopDSPADiscoveryTask(_ input: StopDSPADiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopDSPADiscoveryTaskResponse> {
        self.client.execute(action: "StopDSPADiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 停止正在执行的分类分级任务
    ///
    /// 停止分类分级任务，该接口只有在任务状态为以下状态时才支持正确执行停止扫描：
    /// 1 扫描中
    @inlinable
    public func stopDSPADiscoveryTask(_ input: StopDSPADiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopDSPADiscoveryTaskResponse {
        try await self.client.execute(action: "StopDSPADiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 停止正在执行的分类分级任务
    ///
    /// 停止分类分级任务，该接口只有在任务状态为以下状态时才支持正确执行停止扫描：
    /// 1 扫描中
    @inlinable
    public func stopDSPADiscoveryTask(dspaId: String, taskId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopDSPADiscoveryTaskResponse> {
        self.stopDSPADiscoveryTask(.init(dspaId: dspaId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 停止正在执行的分类分级任务
    ///
    /// 停止分类分级任务，该接口只有在任务状态为以下状态时才支持正确执行停止扫描：
    /// 1 扫描中
    @inlinable
    public func stopDSPADiscoveryTask(dspaId: String, taskId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopDSPADiscoveryTaskResponse {
        try await self.stopDSPADiscoveryTask(.init(dspaId: dspaId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
