//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// BindDSPAResourceDatabases请求参数结构体
    public struct BindDSPAResourceDatabasesRequest: TCRequest {
        /// DSPA实例ID。
        public let dspaId: String

        /// 数据库实例ID。
        public let resourceId: String

        /// 数据库实例类型。
        public let metaType: String

        /// 绑定DB列表。
        public let bindDbItems: [DbResourceItem]?

        /// 解绑DB列表。
        public let unbindDbItems: [DbResourceItem]?

        public init(dspaId: String, resourceId: String, metaType: String, bindDbItems: [DbResourceItem]? = nil, unbindDbItems: [DbResourceItem]? = nil) {
            self.dspaId = dspaId
            self.resourceId = resourceId
            self.metaType = metaType
            self.bindDbItems = bindDbItems
            self.unbindDbItems = unbindDbItems
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case resourceId = "ResourceId"
            case metaType = "MetaType"
            case bindDbItems = "BindDbItems"
            case unbindDbItems = "UnbindDbItems"
        }
    }

    /// BindDSPAResourceDatabases返回参数结构体
    public struct BindDSPAResourceDatabasesResponse: TCResponse {
        /// 绑定结果数组
        public let dbTaskResults: [DbTaskResult]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dbTaskResults = "DbTaskResults"
            case requestId = "RequestId"
        }
    }

    /// 绑定或解绑数据库实例DB
    @inlinable
    public func bindDSPAResourceDatabases(_ input: BindDSPAResourceDatabasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindDSPAResourceDatabasesResponse> {
        self.client.execute(action: "BindDSPAResourceDatabases", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定或解绑数据库实例DB
    @inlinable
    public func bindDSPAResourceDatabases(_ input: BindDSPAResourceDatabasesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindDSPAResourceDatabasesResponse {
        try await self.client.execute(action: "BindDSPAResourceDatabases", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 绑定或解绑数据库实例DB
    @inlinable
    public func bindDSPAResourceDatabases(dspaId: String, resourceId: String, metaType: String, bindDbItems: [DbResourceItem]? = nil, unbindDbItems: [DbResourceItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindDSPAResourceDatabasesResponse> {
        self.bindDSPAResourceDatabases(.init(dspaId: dspaId, resourceId: resourceId, metaType: metaType, bindDbItems: bindDbItems, unbindDbItems: unbindDbItems), region: region, logger: logger, on: eventLoop)
    }

    /// 绑定或解绑数据库实例DB
    @inlinable
    public func bindDSPAResourceDatabases(dspaId: String, resourceId: String, metaType: String, bindDbItems: [DbResourceItem]? = nil, unbindDbItems: [DbResourceItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindDSPAResourceDatabasesResponse {
        try await self.bindDSPAResourceDatabases(.init(dspaId: dspaId, resourceId: resourceId, metaType: metaType, bindDbItems: bindDbItems, unbindDbItems: unbindDbItems), region: region, logger: logger, on: eventLoop)
    }
}
