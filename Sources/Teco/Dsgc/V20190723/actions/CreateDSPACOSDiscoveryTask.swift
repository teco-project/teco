//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateDSPACOSDiscoveryTask请求参数结构体
    public struct CreateDSPACOSDiscoveryTaskRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 任务名称，1-60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字，Name不可重复
        public let name: String

        /// 数据源ID
        public let dataSourceId: String

        /// 任务开关，0 关闭，1 启用
        public let enable: Int64

        /// 桶名
        public let bucket: String

        /// 通用规则集开关，0 关闭，1 启用
        public let generalRuleSetEnable: Int64

        /// 执行计划， 0立即 1定时，选择“立即”时，扫描周期只能选择单次。
        public let plan: Int64

        /// 扫描周期，0单次 1每天 2每周 3每月
        public let period: Int64

        /// 待扫描文件类型，用逗号隔开，格式如：[".txt", ".csv", ".log", ".xml",".html", ".json"]。
        public let fileTypes: [String]

        /// 文件大小上限，单位为KB，如1000, 目前单个文件最大只支持100MB（102400KB）
        public let fileSizeLimit: Int64

        /// 资源所在地域
        public let resourceRegion: String

        /// 任务描述，最大长度为1024个字符
        public let description: String?

        /// 合规组ID列表，最多支持添加5个
        public let complianceGroupIds: [Int64]?

        /// 任务定时启动时间，格式如：2006-01-02 15:04:05
        /// 当执行计划（Plan字段）为”立即“时，定时启动时间不会生效，此场景下给该字段传值不会被保存。
        public let timingStartTime: String?

        public init(dspaId: String, name: String, dataSourceId: String, enable: Int64, bucket: String, generalRuleSetEnable: Int64, plan: Int64, period: Int64, fileTypes: [String], fileSizeLimit: Int64, resourceRegion: String, description: String? = nil, complianceGroupIds: [Int64]? = nil, timingStartTime: String? = nil) {
            self.dspaId = dspaId
            self.name = name
            self.dataSourceId = dataSourceId
            self.enable = enable
            self.bucket = bucket
            self.generalRuleSetEnable = generalRuleSetEnable
            self.plan = plan
            self.period = period
            self.fileTypes = fileTypes
            self.fileSizeLimit = fileSizeLimit
            self.resourceRegion = resourceRegion
            self.description = description
            self.complianceGroupIds = complianceGroupIds
            self.timingStartTime = timingStartTime
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case name = "Name"
            case dataSourceId = "DataSourceId"
            case enable = "Enable"
            case bucket = "Bucket"
            case generalRuleSetEnable = "GeneralRuleSetEnable"
            case plan = "Plan"
            case period = "Period"
            case fileTypes = "FileTypes"
            case fileSizeLimit = "FileSizeLimit"
            case resourceRegion = "ResourceRegion"
            case description = "Description"
            case complianceGroupIds = "ComplianceGroupIds"
            case timingStartTime = "TimingStartTime"
        }
    }

    /// CreateDSPACOSDiscoveryTask返回参数结构体
    public struct CreateDSPACOSDiscoveryTaskResponse: TCResponse {
        /// 任务ID
        public let taskId: Int64

        /// 扫描结果ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultId: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case resultId = "ResultId"
            case requestId = "RequestId"
        }
    }

    /// 新增COS分类分级发现任务
    ///
    /// 新增COS分类分级扫描任务，单个用户最多允许创建100个任务。
    @inlinable
    public func createDSPACOSDiscoveryTask(_ input: CreateDSPACOSDiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPACOSDiscoveryTaskResponse> {
        self.client.execute(action: "CreateDSPACOSDiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增COS分类分级发现任务
    ///
    /// 新增COS分类分级扫描任务，单个用户最多允许创建100个任务。
    @inlinable
    public func createDSPACOSDiscoveryTask(_ input: CreateDSPACOSDiscoveryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPACOSDiscoveryTaskResponse {
        try await self.client.execute(action: "CreateDSPACOSDiscoveryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增COS分类分级发现任务
    ///
    /// 新增COS分类分级扫描任务，单个用户最多允许创建100个任务。
    @inlinable
    public func createDSPACOSDiscoveryTask(dspaId: String, name: String, dataSourceId: String, enable: Int64, bucket: String, generalRuleSetEnable: Int64, plan: Int64, period: Int64, fileTypes: [String], fileSizeLimit: Int64, resourceRegion: String, description: String? = nil, complianceGroupIds: [Int64]? = nil, timingStartTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPACOSDiscoveryTaskResponse> {
        self.createDSPACOSDiscoveryTask(.init(dspaId: dspaId, name: name, dataSourceId: dataSourceId, enable: enable, bucket: bucket, generalRuleSetEnable: generalRuleSetEnable, plan: plan, period: period, fileTypes: fileTypes, fileSizeLimit: fileSizeLimit, resourceRegion: resourceRegion, description: description, complianceGroupIds: complianceGroupIds, timingStartTime: timingStartTime), region: region, logger: logger, on: eventLoop)
    }

    /// 新增COS分类分级发现任务
    ///
    /// 新增COS分类分级扫描任务，单个用户最多允许创建100个任务。
    @inlinable
    public func createDSPACOSDiscoveryTask(dspaId: String, name: String, dataSourceId: String, enable: Int64, bucket: String, generalRuleSetEnable: Int64, plan: Int64, period: Int64, fileTypes: [String], fileSizeLimit: Int64, resourceRegion: String, description: String? = nil, complianceGroupIds: [Int64]? = nil, timingStartTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPACOSDiscoveryTaskResponse {
        try await self.createDSPACOSDiscoveryTask(.init(dspaId: dspaId, name: name, dataSourceId: dataSourceId, enable: enable, bucket: bucket, generalRuleSetEnable: generalRuleSetEnable, plan: plan, period: period, fileTypes: fileTypes, fileSizeLimit: fileSizeLimit, resourceRegion: resourceRegion, description: description, complianceGroupIds: complianceGroupIds, timingStartTime: timingStartTime), region: region, logger: logger, on: eventLoop)
    }
}
