//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// ModifyDSPADiscoveryRule请求参数结构体
    public struct ModifyDSPADiscoveryRuleRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 规则名称，1-60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字，Name不可重复
        public let name: String

        /// 规则ID
        public let ruleId: Int64

        /// 规则描述，最大长度为1024个字符
        public let description: String?

        /// RDB类敏感数据识别规则
        public let rdbRules: ScanTaskRDBRules?

        /// COS类敏感数据识别规则
        public let cosRules: ScanTaskCOSRules?

        public init(dspaId: String, name: String, ruleId: Int64, description: String? = nil, rdbRules: ScanTaskRDBRules? = nil, cosRules: ScanTaskCOSRules? = nil) {
            self.dspaId = dspaId
            self.name = name
            self.ruleId = ruleId
            self.description = description
            self.rdbRules = rdbRules
            self.cosRules = cosRules
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case name = "Name"
            case ruleId = "RuleId"
            case description = "Description"
            case rdbRules = "RDBRules"
            case cosRules = "COSRules"
        }
    }

    /// ModifyDSPADiscoveryRule返回参数结构体
    public struct ModifyDSPADiscoveryRuleResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改分类分级规则信息
    ///
    /// 修改分类分级规则，单个用户最多允许创建200个规则。
    /// 注：此API同时适用RDB跟COS类型数据。
    @inlinable @discardableResult
    public func modifyDSPADiscoveryRule(_ input: ModifyDSPADiscoveryRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPADiscoveryRuleResponse> {
        self.client.execute(action: "ModifyDSPADiscoveryRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改分类分级规则信息
    ///
    /// 修改分类分级规则，单个用户最多允许创建200个规则。
    /// 注：此API同时适用RDB跟COS类型数据。
    @inlinable @discardableResult
    public func modifyDSPADiscoveryRule(_ input: ModifyDSPADiscoveryRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPADiscoveryRuleResponse {
        try await self.client.execute(action: "ModifyDSPADiscoveryRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改分类分级规则信息
    ///
    /// 修改分类分级规则，单个用户最多允许创建200个规则。
    /// 注：此API同时适用RDB跟COS类型数据。
    @inlinable @discardableResult
    public func modifyDSPADiscoveryRule(dspaId: String, name: String, ruleId: Int64, description: String? = nil, rdbRules: ScanTaskRDBRules? = nil, cosRules: ScanTaskCOSRules? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDSPADiscoveryRuleResponse> {
        self.modifyDSPADiscoveryRule(.init(dspaId: dspaId, name: name, ruleId: ruleId, description: description, rdbRules: rdbRules, cosRules: cosRules), region: region, logger: logger, on: eventLoop)
    }

    /// 修改分类分级规则信息
    ///
    /// 修改分类分级规则，单个用户最多允许创建200个规则。
    /// 注：此API同时适用RDB跟COS类型数据。
    @inlinable @discardableResult
    public func modifyDSPADiscoveryRule(dspaId: String, name: String, ruleId: Int64, description: String? = nil, rdbRules: ScanTaskRDBRules? = nil, cosRules: ScanTaskCOSRules? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDSPADiscoveryRuleResponse {
        try await self.modifyDSPADiscoveryRule(.init(dspaId: dspaId, name: name, ruleId: ruleId, description: description, rdbRules: rdbRules, cosRules: cosRules), region: region, logger: logger, on: eventLoop)
    }
}
