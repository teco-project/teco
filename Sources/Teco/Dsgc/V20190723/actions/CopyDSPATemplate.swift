//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CopyDSPATemplate请求参数结构体
    public struct CopyDSPATemplateRequest: TCRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 合规组ID
        public let templateId: Int64

        public init(dspaId: String, templateId: Int64) {
            self.dspaId = dspaId
            self.templateId = templateId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case templateId = "TemplateId"
        }
    }

    /// CopyDSPATemplate返回参数结构体
    public struct CopyDSPATemplateResponse: TCResponse {
        /// 模版id
        public let templateId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case requestId = "RequestId"
        }
    }

    /// 复制合规组模版
    @inlinable
    public func copyDSPATemplate(_ input: CopyDSPATemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CopyDSPATemplateResponse> {
        self.client.execute(action: "CopyDSPATemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 复制合规组模版
    @inlinable
    public func copyDSPATemplate(_ input: CopyDSPATemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CopyDSPATemplateResponse {
        try await self.client.execute(action: "CopyDSPATemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 复制合规组模版
    @inlinable
    public func copyDSPATemplate(dspaId: String, templateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CopyDSPATemplateResponse> {
        self.copyDSPATemplate(.init(dspaId: dspaId, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }

    /// 复制合规组模版
    @inlinable
    public func copyDSPATemplate(dspaId: String, templateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CopyDSPATemplateResponse {
        try await self.copyDSPATemplate(.init(dspaId: dspaId, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }
}
