//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// CreateDSPASelfBuildMetaResource请求参数结构体
    public struct CreateDSPASelfBuildMetaResourceRequest: TCRequest {
        /// Dspa实例ID。
        public let dspaId: String

        /// 自建数据库类型。目前支持的自建数据库类型按照协议进行区分，支持两种开源数据库协议：
        /// mysql_like_proto -- Mysql协议类关系型数据库，
        /// postgre_like_proto -- Postgre协议类关系型数据库。
        /// 其他闭源协议的数据库如SqlServer、Oracle等暂不支持。
        public let metaType: String

        /// 资源所处地域。
        public let resourceRegion: String

        /// 自建云资源ID。
        public let resourceId: String

        /// 可用于访问自建云资源的IP。
        public let resourceVip: String

        /// 可用于访问自建云资源的端口。
        public let resourceVPort: UInt64

        /// 自建云资源的VPC ID。
        public let resourceUniqueVpcId: String

        /// 自建云资源的Subnet ID。
        public let resourceUniqueSubnetId: String

        /// 自建云资源所处的服务类型，可选：
        /// cvm - 通过云服务器直接访问。
        /// clb - 通过LB的方式进行访问。
        public let resourceAccessType: String

        /// 账户名。
        public let userName: String

        /// 账户密码。
        public let password: String

        /// 资源名称，1-60个字符。
        public let resourceName: String?

        public init(dspaId: String, metaType: String, resourceRegion: String, resourceId: String, resourceVip: String, resourceVPort: UInt64, resourceUniqueVpcId: String, resourceUniqueSubnetId: String, resourceAccessType: String, userName: String, password: String, resourceName: String? = nil) {
            self.dspaId = dspaId
            self.metaType = metaType
            self.resourceRegion = resourceRegion
            self.resourceId = resourceId
            self.resourceVip = resourceVip
            self.resourceVPort = resourceVPort
            self.resourceUniqueVpcId = resourceUniqueVpcId
            self.resourceUniqueSubnetId = resourceUniqueSubnetId
            self.resourceAccessType = resourceAccessType
            self.userName = userName
            self.password = password
            self.resourceName = resourceName
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case metaType = "MetaType"
            case resourceRegion = "ResourceRegion"
            case resourceId = "ResourceId"
            case resourceVip = "ResourceVip"
            case resourceVPort = "ResourceVPort"
            case resourceUniqueVpcId = "ResourceUniqueVpcId"
            case resourceUniqueSubnetId = "ResourceUniqueSubnetId"
            case resourceAccessType = "ResourceAccessType"
            case userName = "UserName"
            case password = "Password"
            case resourceName = "ResourceName"
        }
    }

    /// CreateDSPASelfBuildMetaResource返回参数结构体
    public struct CreateDSPASelfBuildMetaResourceResponse: TCResponse {
        /// 连通性测试情况，success表示可正常访问，failed表示无法访问。
        public let connectivityStatus: String

        /// 连通性描述字段，如果连通性测试失败，这里会返回无法访问的相关信息说明。
        public let connectivityDescription: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case connectivityStatus = "ConnectivityStatus"
            case connectivityDescription = "ConnectivityDescription"
            case requestId = "RequestId"
        }
    }

    /// 新建用户自建云资源
    @inlinable
    public func createDSPASelfBuildMetaResource(_ input: CreateDSPASelfBuildMetaResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPASelfBuildMetaResourceResponse> {
        self.client.execute(action: "CreateDSPASelfBuildMetaResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新建用户自建云资源
    @inlinable
    public func createDSPASelfBuildMetaResource(_ input: CreateDSPASelfBuildMetaResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPASelfBuildMetaResourceResponse {
        try await self.client.execute(action: "CreateDSPASelfBuildMetaResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新建用户自建云资源
    @inlinable
    public func createDSPASelfBuildMetaResource(dspaId: String, metaType: String, resourceRegion: String, resourceId: String, resourceVip: String, resourceVPort: UInt64, resourceUniqueVpcId: String, resourceUniqueSubnetId: String, resourceAccessType: String, userName: String, password: String, resourceName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDSPASelfBuildMetaResourceResponse> {
        self.createDSPASelfBuildMetaResource(.init(dspaId: dspaId, metaType: metaType, resourceRegion: resourceRegion, resourceId: resourceId, resourceVip: resourceVip, resourceVPort: resourceVPort, resourceUniqueVpcId: resourceUniqueVpcId, resourceUniqueSubnetId: resourceUniqueSubnetId, resourceAccessType: resourceAccessType, userName: userName, password: password, resourceName: resourceName), region: region, logger: logger, on: eventLoop)
    }

    /// 新建用户自建云资源
    @inlinable
    public func createDSPASelfBuildMetaResource(dspaId: String, metaType: String, resourceRegion: String, resourceId: String, resourceVip: String, resourceVPort: UInt64, resourceUniqueVpcId: String, resourceUniqueSubnetId: String, resourceAccessType: String, userName: String, password: String, resourceName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDSPASelfBuildMetaResourceResponse {
        try await self.createDSPASelfBuildMetaResource(.init(dspaId: dspaId, metaType: metaType, resourceRegion: resourceRegion, resourceId: resourceId, resourceVip: resourceVip, resourceVPort: resourceVPort, resourceUniqueVpcId: resourceUniqueVpcId, resourceUniqueSubnetId: resourceUniqueSubnetId, resourceAccessType: resourceAccessType, userName: userName, password: password, resourceName: resourceName), region: region, logger: logger, on: eventLoop)
    }
}
