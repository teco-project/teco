//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPACOSDiscoveryTaskResult请求参数结构体
    public struct DescribeDSPACOSDiscoveryTaskResultRequest: TCPaginatedRequest {
        /// DSPA实例ID
        public let dspaId: String

        /// 偏移量，默认值为0
        public let offset: Int64?

        /// 返回数量，默认值为20，最大值为100
        public let limit: Int64?

        /// Array of Filter	此参数对外不可见。过滤数组。支持的Name：
        /// BucketName 对象桶名
        /// TaskID 任务ID，
        /// TaskName 任务名，
        /// DataSourceId：数据源ID，
        /// ResourceRegion：资源所在地域
        /// 每项过滤条件最多支持5个。
        public let filters: [Filter]?

        public init(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil) {
            self.dspaId = dspaId
            self.offset = offset
            self.limit = limit
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDSPACOSDiscoveryTaskResultResponse) -> DescribeDSPACOSDiscoveryTaskResultRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(dspaId: self.dspaId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, filters: self.filters)
        }
    }

    /// DescribeDSPACOSDiscoveryTaskResult返回参数结构体
    public struct DescribeDSPACOSDiscoveryTaskResultResponse: TCPaginatedResponse {
        /// 扫描任务结果项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [DspaCOSDiscoveryTaskResult]?

        /// 符合条件的数据结果数目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DspaCOSDiscoveryTaskResult`` list from the paginated response.
        public func getItems() -> [DspaCOSDiscoveryTaskResult] {
            self.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取COS分类分级任务执行结果
    ///
    /// 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable
    public func describeDSPACOSDiscoveryTaskResult(_ input: DescribeDSPACOSDiscoveryTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPACOSDiscoveryTaskResultResponse> {
        self.client.execute(action: "DescribeDSPACOSDiscoveryTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务执行结果
    ///
    /// 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable
    public func describeDSPACOSDiscoveryTaskResult(_ input: DescribeDSPACOSDiscoveryTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPACOSDiscoveryTaskResultResponse {
        try await self.client.execute(action: "DescribeDSPACOSDiscoveryTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取COS分类分级任务执行结果
    ///
    /// 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable
    public func describeDSPACOSDiscoveryTaskResult(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPACOSDiscoveryTaskResultResponse> {
        self.describeDSPACOSDiscoveryTaskResult(.init(dspaId: dspaId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务执行结果
    ///
    /// 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable
    public func describeDSPACOSDiscoveryTaskResult(dspaId: String, offset: Int64? = nil, limit: Int64? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPACOSDiscoveryTaskResultResponse {
        try await self.describeDSPACOSDiscoveryTaskResult(.init(dspaId: dspaId, offset: offset, limit: limit, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务执行结果
    ///
    /// 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable
    public func describeDSPACOSDiscoveryTaskResultPaginated(_ input: DescribeDSPACOSDiscoveryTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [DspaCOSDiscoveryTaskResult])> {
        self.client.paginate(input: input, region: region, command: self.describeDSPACOSDiscoveryTaskResult, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务执行结果
    ///
    /// 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
    /// 3 扫描成功，
    /// 4 扫描失败
    @inlinable @discardableResult
    public func describeDSPACOSDiscoveryTaskResultPaginated(_ input: DescribeDSPACOSDiscoveryTaskResultRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDSPACOSDiscoveryTaskResultResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDSPACOSDiscoveryTaskResult, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取COS分类分级任务执行结果
    ///
    /// 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
    /// 3 扫描成功，
    /// 4 扫描失败
    ///
    /// - Returns: `AsyncSequence`s of ``DspaCOSDiscoveryTaskResult`` and ``DescribeDSPACOSDiscoveryTaskResultResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDSPACOSDiscoveryTaskResultPaginator(_ input: DescribeDSPACOSDiscoveryTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDSPACOSDiscoveryTaskResultRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDSPACOSDiscoveryTaskResult, logger: logger, on: eventLoop)
    }
}
