//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dsgc {
    /// DescribeDSPAAssessmentNewDiscoveredRiskOverview请求参数结构体
    public struct DescribeDSPAAssessmentNewDiscoveredRiskOverviewRequest: TCRequest {
        /// dspa实例id
        public let dspaId: String

        /// 评估模版id
        public let templateId: Int64

        public init(dspaId: String, templateId: Int64) {
            self.dspaId = dspaId
            self.templateId = templateId
        }

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case templateId = "TemplateId"
        }
    }

    /// DescribeDSPAAssessmentNewDiscoveredRiskOverview返回参数结构体
    public struct DescribeDSPAAssessmentNewDiscoveredRiskOverviewResponse: TCResponse {
        /// 待处理的风险数
        public let newDiscoveredRiskCount: Int64

        /// 受影响的资产数
        public let affectedAssetCount: Int64

        /// 周同比
        public let weekRatio: Float

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case newDiscoveredRiskCount = "NewDiscoveredRiskCount"
            case affectedAssetCount = "AffectedAssetCount"
            case weekRatio = "WeekRatio"
            case requestId = "RequestId"
        }
    }

    /// 查询新发现的风险统计
    ///
    /// 风险概览-查询新发现风险统计数
    @inlinable
    public func describeDSPAAssessmentNewDiscoveredRiskOverview(_ input: DescribeDSPAAssessmentNewDiscoveredRiskOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentNewDiscoveredRiskOverviewResponse> {
        self.client.execute(action: "DescribeDSPAAssessmentNewDiscoveredRiskOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询新发现的风险统计
    ///
    /// 风险概览-查询新发现风险统计数
    @inlinable
    public func describeDSPAAssessmentNewDiscoveredRiskOverview(_ input: DescribeDSPAAssessmentNewDiscoveredRiskOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentNewDiscoveredRiskOverviewResponse {
        try await self.client.execute(action: "DescribeDSPAAssessmentNewDiscoveredRiskOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询新发现的风险统计
    ///
    /// 风险概览-查询新发现风险统计数
    @inlinable
    public func describeDSPAAssessmentNewDiscoveredRiskOverview(dspaId: String, templateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDSPAAssessmentNewDiscoveredRiskOverviewResponse> {
        self.describeDSPAAssessmentNewDiscoveredRiskOverview(.init(dspaId: dspaId, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询新发现的风险统计
    ///
    /// 风险概览-查询新发现风险统计数
    @inlinable
    public func describeDSPAAssessmentNewDiscoveredRiskOverview(dspaId: String, templateId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDSPAAssessmentNewDiscoveredRiskOverviewResponse {
        try await self.describeDSPAAssessmentNewDiscoveredRiskOverview(.init(dspaId: dspaId, templateId: templateId), region: region, logger: logger, on: eventLoop)
    }
}
