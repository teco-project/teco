//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Dsgc {
    /// AKSK泄漏信息
    public struct AKSKLeak: TCOutputModel {
        /// AK编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ak: String?

        /// SK编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sk: String?

        /// URL编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        enum CodingKeys: String, CodingKey {
            case ak = "AK"
            case sk = "SK"
            case url = "URL"
        }
    }

    /// 账户风险
    public struct AccountRisk: TCOutputModel {
        /// id（可不参考）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 风险账户
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskAccount: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case riskAccount = "RiskAccount"
        }
    }

    /// DSPA评估控制项
    public struct AssessmentControlItem: TCOutputModel {
        /// 评估项Id
        public let itemId: String

        /// 评估项名称
        public let itemName: String

        /// 评估项描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 评估项来源，内置/用户自定，取值（system，user）
        public let source: String

        /// 评估项类型，问卷/自动化，取值（questionnaire，auto）
        public let itemType: String

        /// 评估项子类型，单选/多选/时间/文本/AKSK等，取值（singlechoice，multichoice，date，text，AKSK……等）
        public let itemSubType: String

        /// 评估项创建时间
        public let createdTime: String

        /// 评估项启用状态，启用/未启用，取值draft / launched
        public let status: String

        /// 评估项关联的模版数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateCount: Int64?

        enum CodingKeys: String, CodingKey {
            case itemId = "ItemId"
            case itemName = "ItemName"
            case description = "Description"
            case source = "Source"
            case itemType = "ItemType"
            case itemSubType = "ItemSubType"
            case createdTime = "CreatedTime"
            case status = "Status"
            case templateCount = "TemplateCount"
        }
    }

    /// DSPA评估风险项
    public struct AssessmentRisk: TCOutputModel {
        /// 风险项Id
        public let riskId: String

        /// 风险项描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskDescription: String?

        /// 评估模版Id
        public let templateId: String

        /// 评估模版名称
        public let templateName: String

        /// 评估项Id
        public let controlItemId: String

        /// 评估项名称
        public let controlItemName: String

        /// 评估描述
        public let controlItemDesc: String

        /// 风险等级，取值（high，medium，low）
        public let riskLevel: String

        /// 风险缓解措施
        public let riskMitigation: String

        /// 风险处理状态。(waiting待处理, processing处理中, finished已处理)
        public let status: String

        /// 风险生成时间
        public let createdTime: String

        /// 风险负责人
        public let riskOwner: String

        /// 风险涉及资产
        public let relatedAsset: String

        /// 风险涉及资产id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// 风险涉及资产名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 资产名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assetName: String?

        /// 建议使用安全产品
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityProduct: [SecurityProduct]?

        /// 风险类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskType: String?

        /// 风险面
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskSide: String?

        /// 数据源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceType: String?

        enum CodingKeys: String, CodingKey {
            case riskId = "RiskId"
            case riskDescription = "RiskDescription"
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case controlItemId = "ControlItemId"
            case controlItemName = "ControlItemName"
            case controlItemDesc = "ControlItemDesc"
            case riskLevel = "RiskLevel"
            case riskMitigation = "RiskMitigation"
            case status = "Status"
            case createdTime = "CreatedTime"
            case riskOwner = "RiskOwner"
            case relatedAsset = "RelatedAsset"
            case dataSourceId = "DataSourceId"
            case dataSourceName = "DataSourceName"
            case assetName = "AssetName"
            case securityProduct = "SecurityProduct"
            case riskType = "RiskType"
            case riskSide = "RiskSide"
            case dataSourceType = "DataSourceType"
        }
    }

    /// 风险项列表详细数据
    public struct AssessmentRiskItem: TCInputModel, TCOutputModel {
        /// 脆弱项id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskName: String?

        /// 脆弱性级别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// 说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 风险类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskType: String?

        /// 关联模版个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let referTemplateCount: Int64?

        /// 支持的数据源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportDataSource: [String]?

        /// 风险面
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskSide: String?

        /// 关联模版列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let referTemplateList: [TemplateInfo]?

        public init(id: Int64? = nil, riskName: String? = nil, level: String? = nil, description: String? = nil, riskType: String? = nil, referTemplateCount: Int64? = nil, supportDataSource: [String]? = nil, riskSide: String? = nil, referTemplateList: [TemplateInfo]? = nil) {
            self.id = id
            self.riskName = riskName
            self.level = level
            self.description = description
            self.riskType = riskType
            self.referTemplateCount = referTemplateCount
            self.supportDataSource = supportDataSource
            self.riskSide = riskSide
            self.referTemplateList = referTemplateList
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case riskName = "RiskName"
            case level = "Level"
            case description = "Description"
            case riskType = "RiskType"
            case referTemplateCount = "ReferTemplateCount"
            case supportDataSource = "SupportDataSource"
            case riskSide = "RiskSide"
            case referTemplateList = "ReferTemplateList"
        }
    }

    /// DSPA评估任务
    public struct AssessmentTask: TCInputModel, TCOutputModel {
        /// 评估任务Id
        public let taskId: String

        /// 评估任务的自增ID
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskUid: Int64?

        /// 评估任务名称
        public let taskName: String

        /// 业务名称
        public let businessName: String

        /// 业务所属部门
        public let businessDept: String

        /// 业务负责人
        public let businessOwner: String

        /// 评估模版Id
        public let templateId: String

        /// 评估模版名称
        public let templateName: String

        /// 分类分级模版Id
        public let complianceGroupId: Int64

        /// 分类分级模版名称
        public let complianceGroupName: String

        /// 评估项数量
        public let controlItemCount: Int64

        /// 风险项数量（仅状态为finished的风险项不计入总数，其余状态均算入该数量）
        public let riskCount: Int64

        /// 评估任务完成时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let finishedTime: String?

        /// 评估任务发起时间
        public let createdTime: String

        /// 评估状态。(waiting待评估，processing评估中, , finished已评估, failed评估失败)
        public let status: String

        /// 待处理各等级风险项信息
        public let riskCountInfoList: [RiskCountInfo]

        /// 数据源信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let discoveryCondition: DiscoveryCondition?

        /// 评估任务失败信息
        public let errorInfo: String

        /// 模版主键id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateUid: Int64?

        /// 进度百分比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progressPercent: Int64?

        public init(taskId: String, taskUid: Int64, taskName: String, businessName: String, businessDept: String, businessOwner: String, templateId: String, templateName: String, complianceGroupId: Int64, complianceGroupName: String, controlItemCount: Int64, riskCount: Int64, finishedTime: String, createdTime: String, status: String, riskCountInfoList: [RiskCountInfo], discoveryCondition: DiscoveryCondition, errorInfo: String, templateUid: Int64? = nil, progressPercent: Int64? = nil) {
            self.taskId = taskId
            self.taskUid = taskUid
            self.taskName = taskName
            self.businessName = businessName
            self.businessDept = businessDept
            self.businessOwner = businessOwner
            self.templateId = templateId
            self.templateName = templateName
            self.complianceGroupId = complianceGroupId
            self.complianceGroupName = complianceGroupName
            self.controlItemCount = controlItemCount
            self.riskCount = riskCount
            self.finishedTime = finishedTime
            self.createdTime = createdTime
            self.status = status
            self.riskCountInfoList = riskCountInfoList
            self.discoveryCondition = discoveryCondition
            self.errorInfo = errorInfo
            self.templateUid = templateUid
            self.progressPercent = progressPercent
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskUid = "TaskUid"
            case taskName = "TaskName"
            case businessName = "BusinessName"
            case businessDept = "BusinessDept"
            case businessOwner = "BusinessOwner"
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case complianceGroupId = "ComplianceGroupId"
            case complianceGroupName = "ComplianceGroupName"
            case controlItemCount = "ControlItemCount"
            case riskCount = "RiskCount"
            case finishedTime = "FinishedTime"
            case createdTime = "CreatedTime"
            case status = "Status"
            case riskCountInfoList = "RiskCountInfoList"
            case discoveryCondition = "DiscoveryCondition"
            case errorInfo = "ErrorInfo"
            case templateUid = "TemplateUid"
            case progressPercent = "ProgressPercent"
        }
    }

    /// DSPA评估模版
    public struct AssessmentTemplate: TCOutputModel {
        /// id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 评估模版Id
        public let templateId: String

        /// 评估模版名称
        public let templateName: String

        /// 描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 模版来源，内置/用户自定，取值（system，user）
        public let source: String

        /// 模版类型，自动化/半自动化/问卷，取值（auto，semi-auto，law）等
        public let useType: String

        /// 评估模版创建时间
        public let createdTime: String

        /// 模版关联的评估项数量
        public let controlItemCount: Int64

        /// 模版已启用的评估项数量
        public let appliedItemCount: Int64

        /// 模版启用状态，草稿/已启用，取值draft / launched
        public let status: String

        /// 支持的数据源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportDataSource: [String]?

        /// 是否包含攻击面风险
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isASMTemplate: Bool?

        /// 合规组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let identifyComplianceId: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case description = "Description"
            case source = "Source"
            case useType = "UseType"
            case createdTime = "CreatedTime"
            case controlItemCount = "ControlItemCount"
            case appliedItemCount = "AppliedItemCount"
            case status = "Status"
            case supportDataSource = "SupportDataSource"
            case isASMTemplate = "IsASMTemplate"
            case identifyComplianceId = "IdentifyComplianceId"
        }
    }

    /// 数据资产报告-cos的资产详情
    public struct AssetCosDetail: TCOutputModel {
        /// 桶的名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucket: String?

        /// 数据源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataType: String?

        /// 文件的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileNums: Int64?

        /// 敏感的文件个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFileNums: Int64?

        /// 敏感分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let distributionData: [Note]?

        /// cos文件的敏感数据个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let matchedNum: Int64?

        enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case dataType = "DataType"
            case fileNums = "FileNums"
            case sensitiveFileNums = "SensitiveFileNums"
            case distributionData = "DistributionData"
            case matchedNum = "MatchedNum"
        }
    }

    /// RDB敏感资产详情列表
    public struct AssetDBDetail: TCOutputModel {
        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// 数据库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ddName: String?

        /// 数据库类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataType: String?

        /// 表的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableNums: Int64?

        /// 敏感表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveTableNums: Int64?

        /// 字段的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldNums: Int64?

        /// 敏感字段的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldNums: Int64?

        /// 敏感数据分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let distributionData: [Note]?

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case ddName = "DdName"
            case dataType = "DataType"
            case tableNums = "TableNums"
            case sensitiveTableNums = "SensitiveTableNums"
            case fieldNums = "FieldNums"
            case sensitiveFieldNums = "SensitiveFieldNums"
            case distributionData = "DistributionData"
        }
    }

    /// 数据资产报告页面-用户查询入参
    public struct AssetList: TCInputModel {
        /// 数据源类型
        public let dataSourceType: String

        /// 数据源信息
        public let dataSourceInfo: [DataSourceInfo]

        public init(dataSourceType: String, dataSourceInfo: [DataSourceInfo]) {
            self.dataSourceType = dataSourceType
            self.dataSourceInfo = dataSourceInfo
        }

        enum CodingKeys: String, CodingKey {
            case dataSourceType = "DataSourceType"
            case dataSourceInfo = "DataSourceInfo"
        }
    }

    /// COS敏感数据识别规则
    public struct COSDataRule: TCInputModel {
        /// 只能取and 、or两个值其中之一，and：字段和内容同时满足，or：字段和内容满足其一.
        /// 默认值为or
        public let `operator`: String?

        /// 规则内容
        public let contents: [DataContent]?

        public init(operator: String? = nil, contents: [DataContent]? = nil) {
            self.operator = `operator`
            self.contents = contents
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case contents = "Contents"
        }
    }

    /// COS数据源实例信息
    public struct COSInstance: TCInputModel, TCOutputModel {
        /// 数据源Id
        public let dataSourceId: String

        /// 桶名
        public let bucketName: String

        /// 资源所在地域
        public let resourceRegion: String

        public init(dataSourceId: String, bucketName: String, resourceRegion: String) {
            self.dataSourceId = dataSourceId
            self.bucketName = bucketName
            self.resourceRegion = resourceRegion
        }

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case bucketName = "BucketName"
            case resourceRegion = "ResourceRegion"
        }
    }

    /// 分类规则信息
    public struct CategoryRule: TCOutputModel {
        /// 分类id
        public let categoryId: UInt64

        /// 规则id
        public let ruleId: UInt64

        /// 规则名称
        public let ruleName: String

        /// 级别id
        public let levelId: UInt64

        /// 级别名称
        public let levelName: String

        /// 分类规则绑定关系id
        public let id: UInt64

        /// 别名ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aliasRuleId: Int64?

        /// 别名规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let aliasRuleName: String?

        enum CodingKeys: String, CodingKey {
            case categoryId = "CategoryId"
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case levelId = "LevelId"
            case levelName = "LevelName"
            case id = "Id"
            case aliasRuleId = "AliasRuleId"
            case aliasRuleName = "AliasRuleName"
        }
    }

    /// 分类规则统计信息
    public struct CategoryRuleStatistic: TCOutputModel {
        /// 分类id
        public let categoryId: UInt64

        /// 规则数量
        public let ruleCount: UInt64

        /// 分类名称
        public let categoryName: String

        enum CodingKeys: String, CodingKey {
            case categoryId = "CategoryId"
            case ruleCount = "RuleCount"
            case categoryName = "CategoryName"
        }
    }

    /// 模板详情
    public struct ComplianceGroupDetail: TCOutputModel {
        /// 模板id
        public let id: UInt64

        /// 模板名称
        public let name: String

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 模板类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceGroupType: Int64?

        /// 模板分级方案id
        public let levelGroupId: UInt64

        /// 模板分级方案名称
        public let levelGroupName: String

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifyTime: String?

        /// 是否开启别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAlias: Bool?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case description = "Description"
            case complianceGroupType = "ComplianceGroupType"
            case levelGroupId = "LevelGroupId"
            case levelGroupName = "LevelGroupName"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
            case isAlias = "IsAlias"
        }
    }

    /// 合规组中规则信息：包括规则ID，数据分类ID, 数据分级标识ID
    public struct ComplianceGroupRuleIdInfo: TCInputModel {
        /// 敏感数据识别规则ID
        public let ruleId: Int64

        /// 敏感数据分类ID
        public let categoryId: Int64

        /// 敏感数据分级标识ID, 系统支持高、中、低三级，也支持自定义分级
        public let levelId: Int64

        public init(ruleId: Int64, categoryId: Int64, levelId: Int64) {
            self.ruleId = ruleId
            self.categoryId = categoryId
            self.levelId = levelId
        }

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case categoryId = "CategoryId"
            case levelId = "LevelId"
        }
    }

    /// 数据资产报告-cos的敏感资产报告详情
    public struct CosAsset: TCOutputModel {
        /// 桶的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketNums: Int64?

        /// 敏感桶的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveBucketNums: Int64?

        /// 文件个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileNums: Int64?

        /// 敏感文件的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFileNums: Int64?

        enum CodingKeys: String, CodingKey {
            case bucketNums = "BucketNums"
            case sensitiveBucketNums = "SensitiveBucketNums"
            case fileNums = "FileNums"
            case sensitiveFileNums = "SensitiveFileNums"
        }
    }

    /// COS资源的桶信息
    public struct CosResourceItem: TCInputModel {
        /// cos数据源ID。
        public let resourceId: String?

        /// 桶所在地域。
        public let resourceRegion: String?

        /// 桶名称。
        public let resourceName: String?

        public init(resourceId: String, resourceRegion: String, resourceName: String) {
            self.resourceId = resourceId
            self.resourceRegion = resourceRegion
            self.resourceName = resourceName
        }

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceRegion = "ResourceRegion"
            case resourceName = "ResourceName"
        }
    }

    /// cos批量操作返回结果结构体
    public struct CosTaskResult: TCOutputModel {
        /// 结果类型。
        public let result: String?

        /// 结果描述。
        public let resultDescription: String?

        /// 错误信息描述。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errDescription: ErrDescription?

        /// 资源ID。
        public let resourceId: String?

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case resultDescription = "ResultDescription"
            case errDescription = "ErrDescription"
            case resourceId = "ResourceId"
        }
    }

    /// 合规组分类关联规则信息
    public struct CreateComplianceRules: TCInputModel {
        /// 规则id
        public let ruleId: UInt64

        /// 级别id
        public let levelId: UInt64

        public init(ruleId: UInt64, levelId: UInt64) {
            self.ruleId = ruleId
            self.levelId = levelId
        }

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case levelId = "LevelId"
        }
    }

    /// 绑定的实例信息
    public struct DBInstanceInfo: TCOutputModel {
        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceId: String?

        /// 数据源绑定的db信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbInfos: [DbInfo]?

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case dbInfos = "DbInfos"
        }
    }

    /// 数据库信息
    public struct DBStatements: TCInputModel, TCOutputModel {
        /// 数据库名称
        public let dbName: String

        /// 数据库Schema
        public let dbSchema: String

        public init(dbName: String, dbSchema: String) {
            self.dbName = dbName
            self.dbSchema = dbSchema
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DBName"
            case dbSchema = "DBSchema"
        }
    }

    /// COS元数据信息
    public struct DSPACosMetaDataInfo: TCOutputModel {
        /// COS桶名
        public let bucket: String

        /// COS桶创建时间
        public let createTime: String

        /// 1 -- 有效，0 -- 无效，资源可能已被删除。
        public let valid: Int64

        /// DSPA为COS资源生成的资源ID
        public let resourceId: String

        /// COS资源所处的地域
        public let resourceRegion: String

        /// COS桶绑定状态
        public let bindStatus: String?

        /// COS桶存储量
        public let storage: Float?

        enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case createTime = "CreateTime"
            case valid = "Valid"
            case resourceId = "ResourceId"
            case resourceRegion = "ResourceRegion"
            case bindStatus = "BindStatus"
            case storage = "Storage"
        }
    }

    /// DSPA数据源的数据库信息
    public struct DSPADataSourceDbInfo: TCOutputModel {
        /// 数据库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbName: String?

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
        }
    }

    /// 元数据类型
    public struct DSPAMetaType: TCOutputModel {
        /// 元数据类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaType: String?

        /// 支持的此元数据类型的地域列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regions: [String]?

        /// 此元数据类型支持的授权类型：
        /// account    -- 账户名密码授权，账户的最高只读权限需要由用户自行赋予；
        /// automatic -- 一键授权，由DSPA自动生成账户名密码并自动在实例中给账户名赋予最高只读权限；
        /// 如果此列表为空，表明此类资源不支持以上的授权机制，无法通过后台进行授权。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportedAuthTypes: [String]?

        enum CodingKeys: String, CodingKey {
            case metaType = "MetaType"
            case regions = "Regions"
            case supportedAuthTypes = "SupportedAuthTypes"
        }
    }

    /// DSPA分类分级任务扫描的表信息
    public struct DSPATableInfo: TCOutputModel {
        /// 表名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableName: String?

        enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    /// 敏感数据分类
    public struct DataCategory: TCOutputModel {
        /// 分类ID
        public let categoryId: Int64

        /// 敏感数据分类名称
        public let name: String

        /// 敏感数据分类来源，取值：0 内置, 1 自定义
        public let source: Int64

        /// 关联模板数量
        public let relateComplianceCount: UInt64

        enum CodingKeys: String, CodingKey {
            case categoryId = "CategoryId"
            case name = "Name"
            case source = "Source"
            case relateComplianceCount = "RelateComplianceCount"
        }
    }

    /// 扫描规则内容
    public struct DataContent: TCInputModel {
        /// 规则内容，可以是正则规则，关键词，
        /// 忽略词扥
        public let ruleContent: String

        /// 是否区分大小写
        /// false: 不区分大小写
        /// true:区分大小写
        public let isIgnoreCase: Bool?

        public init(ruleContent: String, isIgnoreCase: Bool? = nil) {
            self.ruleContent = ruleContent
            self.isIgnoreCase = isIgnoreCase
        }

        enum CodingKeys: String, CodingKey {
            case ruleContent = "RuleContent"
            case isIgnoreCase = "IsIgnoreCase"
        }
    }

    /// 敏感数据识别规则
    public struct DataRule: TCInputModel {
        /// 规则类型；取值：
        /// keyword 关键字,
        /// regex 正则
        public let ruleType: String

        /// 内容
        public let ruleContent: String

        /// 该字段是针对规则类型RuleType为keyword类型时的一个扩展属性
        public let extendParameters: [DatagovRuleExtendParameter]?

        public init(ruleType: String, ruleContent: String, extendParameters: [DatagovRuleExtendParameter]? = nil) {
            self.ruleType = ruleType
            self.ruleContent = ruleContent
            self.extendParameters = extendParameters
        }

        enum CodingKeys: String, CodingKey {
            case ruleType = "RuleType"
            case ruleContent = "RuleContent"
            case extendParameters = "ExtendParameters"
        }
    }

    /// 敏感数据识别规则集
    public struct DataRules: TCInputModel, TCOutputModel {
        /// 操作符；只能取and, or的其中一种
        public let `operator`: String

        /// 规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contents: [DataRule]?

        public init(operator: String, contents: [DataRule]) {
            self.operator = `operator`
            self.contents = contents
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case contents = "Contents"
        }
    }

    /// dsgc-资产梳理报表-数据源信息
    public struct DataSourceInfo: TCInputModel {
        /// 数据源ID
        public let dataSourceId: String?

        /// 针对rbd-就是绑定的db_name
        public let bindList: [String]?

        public init(dataSourceId: String, bindList: [String]? = nil) {
            self.dataSourceId = dataSourceId
            self.bindList = bindList
        }

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case bindList = "BindList"
        }
    }

    /// 敏感数据识别规则扩展参数
    public struct DatagovRuleExtendParameter: TCInputModel, TCOutputModel {
        /// 扩展参数名称，目前支持如下两个扩展属性名称：
        /// IsFullWordMatch，表示是否全文匹配，该Name对应的Value可取值为"true"或"false":，默认值为"false"，
        /// IsIgnoreCase，表示是否忽略大小写，该Name对应的Value可取值为"true"或"false"，默认值为"true"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 扩展参数值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 查询绑定的db信息
    public struct DbInfo: TCOutputModel {
        /// 数据库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbName: String?

        /// 绑定的状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validStatus: String?

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
            case validStatus = "ValidStatus"
        }
    }

    /// 数据库实例的DB绑定关系状态信息。
    public struct DbRelationStatusItem: TCOutputModel {
        /// DB名称。
        public let dbName: String?

        /// DB绑定状态。
        public let bindStatus: String?

        /// DB有效性状态。
        public let validStatus: String?

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
            case bindStatus = "BindStatus"
            case validStatus = "ValidStatus"
        }
    }

    /// 数据库DB资源项
    public struct DbResourceItem: TCInputModel {
        /// DB名称。
        public let dbName: String

        public init(dbName: String) {
            self.dbName = dbName
        }

        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
        }
    }

    /// database批量操作返回结果结构体
    public struct DbTaskResult: TCOutputModel {
        /// 结果类型。
        public let result: String?

        /// 结果描述。
        public let resultDescription: String?

        /// 错误信息描述。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errDescription: ErrDescription?

        /// 资源ID。
        public let resourceId: String?

        /// database名称。
        public let dbName: String?

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case resultDescription = "ResultDescription"
            case errDescription = "ErrDescription"
            case resourceId = "ResourceId"
            case dbName = "DbName"
        }
    }

    /// DSPA敏感数据扫描数据源条件
    public struct DiscoveryCondition: TCInputModel, TCOutputModel {
        /// RDB实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rdbInstances: [RDBInstance]?

        /// COS实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosInstances: [COSInstance]?

        /// Mongo实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nosqlInstances: [NOSQLInstance]?

        /// ES实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esInstances: [ESInstance]?

        public init(rdbInstances: [RDBInstance]? = nil, cosInstances: [COSInstance]? = nil, nosqlInstances: [NOSQLInstance]? = nil, esInstances: [ESInstance]? = nil) {
            self.rdbInstances = rdbInstances
            self.cosInstances = cosInstances
            self.nosqlInstances = nosqlInstances
            self.esInstances = esInstances
        }

        enum CodingKeys: String, CodingKey {
            case rdbInstances = "RDBInstances"
            case cosInstances = "COSInstances"
            case nosqlInstances = "NOSQLInstances"
            case esInstances = "ESInstances"
        }
    }

    /// 描述键值对过滤器，用于条件过滤查询
    public struct DspaAssessmentFilter: TCInputModel {
        /// 过滤类型。
        public let name: String

        /// 过滤类型的值。
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// COS对象存储敏感数据资产统计
    public struct DspaCOSDataAssetCount: TCOutputModel {
        /// 数组资产类型，0代表关系型数据库资产，1代表对象存储COS资产
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataAssetType: Int64?

        /// 已扫描的存储桶的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalBucketCnt: Int64?

        /// 对象总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalObjectCnt: Int64?

        /// 敏感数据类型个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveCategoryCnt: Int64?

        /// 敏感数据条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveDataCnt: Int64?

        /// 敏感等级分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveLevel: [SensitiveLevel]?

        /// 敏感存储桶个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveBucketCnt: Int64?

        /// 敏感对象个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveObjectCnt: Int64?

        /// 数据分类分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryDistributed: [DspaDataCategoryDistributed]?

        enum CodingKeys: String, CodingKey {
            case dataAssetType = "DataAssetType"
            case totalBucketCnt = "TotalBucketCnt"
            case totalObjectCnt = "TotalObjectCnt"
            case sensitiveCategoryCnt = "SensitiveCategoryCnt"
            case sensitiveDataCnt = "SensitiveDataCnt"
            case sensitiveLevel = "SensitiveLevel"
            case sensitiveBucketCnt = "SensitiveBucketCnt"
            case sensitiveObjectCnt = "SensitiveObjectCnt"
            case categoryDistributed = "CategoryDistributed"
        }
    }

    /// COS对象存储数据资产详情
    public struct DspaCOSDataAssetDetail: TCOutputModel {
        /// 对象桶
        public let bucketName: String

        /// 对象名称
        public let fileName: String

        /// 规则名称
        public let ruleName: String

        /// 出现次数
        public let sensitiveDataCount: Int64

        /// 敏感数据分类
        public let categoryName: String

        /// 敏感等级
        public let levelRiskName: String

        /// KMS加密
        public let kmsEncrypted: Bool

        /// 文件类型
        public let fileType: String

        /// 文件大小
        public let fileSize: String

        /// 敏感数据分级分数
        public let levelRiskScore: Int64

        /// 数据源ID
        public let dataSourceId: String

        /// 规则id
        public let ruleId: Int64

        /// 资源所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        /// 分类ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 分级ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        /// 文件扫描结果ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileResultId: Int64?

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 分类路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryFullPath: String?

        enum CodingKeys: String, CodingKey {
            case bucketName = "BucketName"
            case fileName = "FileName"
            case ruleName = "RuleName"
            case sensitiveDataCount = "SensitiveDataCount"
            case categoryName = "CategoryName"
            case levelRiskName = "LevelRiskName"
            case kmsEncrypted = "KMSEncrypted"
            case fileType = "FileType"
            case fileSize = "FileSize"
            case levelRiskScore = "LevelRiskScore"
            case dataSourceId = "DataSourceId"
            case ruleId = "RuleId"
            case resourceRegion = "ResourceRegion"
            case categoryId = "CategoryId"
            case levelId = "LevelId"
            case fileResultId = "FileResultId"
            case dataSourceName = "DataSourceName"
            case categoryFullPath = "CategoryFullPath"
        }
    }

    /// COS敏感数据扫描任务相关信息
    public struct DspaCOSDiscoveryTask: TCOutputModel {
        /// 任务名称
        public let name: String

        /// 任务描述
        public let description: String

        /// 执行周期，0单次 1每天 2每周 3每月
        public let period: Int64

        /// 执行计划，0立即 1定时
        public let plan: Int64

        /// 任务开关；1 打开，0 关闭
        public let enable: Int64

        /// 数据源对象信息
        public let dataSourceInfo: DspaCOSDiscoveryTaskDataSourceInfo

        /// 通用规则集开关，0 关闭，1 启用
        public let generalRuleSetEnable: Int64

        /// 任务最新的一次执行结果信息，该字段用于查询任务列表接口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: ScanTaskResult?

        /// 定时开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timingStartTime: String?

        /// 关联分类模板是否更新
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceUpdate: Bool?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case period = "Period"
            case plan = "Plan"
            case enable = "Enable"
            case dataSourceInfo = "DataSourceInfo"
            case generalRuleSetEnable = "GeneralRuleSetEnable"
            case result = "Result"
            case timingStartTime = "TimingStartTime"
            case complianceUpdate = "ComplianceUpdate"
        }
    }

    /// 扫描任务元数据信息
    public struct DspaCOSDiscoveryTaskDataSourceInfo: TCOutputModel {
        /// 数据源ID
        public let dataSourceId: String

        /// 代理地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyAddress: [String]?

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 扫描任务条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let condition: DspaDiscoveryTaskCOSCondition?

        /// 资源所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case proxyAddress = "ProxyAddress"
            case dataSourceName = "DataSourceName"
            case condition = "Condition"
            case resourceRegion = "ResourceRegion"
        }
    }

    /// COS敏感数据扫描任务相关信息
    public struct DspaCOSDiscoveryTaskDetail: TCOutputModel {
        /// 任务名称
        public let name: String

        /// 任务描述
        public let description: String

        /// 执行周期，0单次 1每天 2每周 3每月
        public let period: Int64

        /// 执行计划，0立即 1定时
        public let plan: Int64

        /// 任务开关；1 打开，0 关闭
        public let enable: Int64

        /// 数据源对象信息
        public let dataSourceInfo: DspaCOSDiscoveryTaskDataSourceInfo

        /// 通用规则集开关，0 关闭，1 启用
        public let generalRuleSetEnable: Int64

        /// 当创建任务时，用户打开了通用规则集开关，则该字段就会保存默认合规组信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultComplianceInfo: [ScanTaskComplianceInfo]?

        /// 该任务中用户选择的合规组信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customComplianceInfo: [ScanTaskComplianceInfo]?

        /// 定时开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timingStartTime: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case period = "Period"
            case plan = "Plan"
            case enable = "Enable"
            case dataSourceInfo = "DataSourceInfo"
            case generalRuleSetEnable = "GeneralRuleSetEnable"
            case defaultComplianceInfo = "DefaultComplianceInfo"
            case customComplianceInfo = "CustomComplianceInfo"
            case timingStartTime = "TimingStartTime"
        }
    }

    /// COS扫描任务结果，按照数据库级别展示
    public struct DspaCOSDiscoveryTaskResult: TCOutputModel {
        /// 扫描bucket结果ID
        public let bucketResultId: Int64

        /// 任务ID
        public let taskId: Int64

        /// 任务名称
        public let taskName: String

        /// 扫描任务最新一次扫描结果ID
        public let resultId: Int64

        /// 数据源ID
        public let dataSourceId: String

        /// 桶名称
        public let bucketName: String

        /// 总文件数
        public let totalFiles: Int64

        /// 被识别出的敏感数据数
        public let sensitiveDataNums: Int64

        /// Bucket扫描的结束时间，格式如：2006-01-02 15:04:05
        public let endTime: String

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// Bucket扫描状态，0待扫描 1扫描中 2扫描终止 3扫描成功 4扫描失败
        public let status: Int64

        /// Bucket扫描结果错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorInfo: String?

        /// 资源所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        /// 是否超额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let overSize: String?

        enum CodingKeys: String, CodingKey {
            case bucketResultId = "BucketResultId"
            case taskId = "TaskId"
            case taskName = "TaskName"
            case resultId = "ResultId"
            case dataSourceId = "DataSourceId"
            case bucketName = "BucketName"
            case totalFiles = "TotalFiles"
            case sensitiveDataNums = "SensitiveDataNums"
            case endTime = "EndTime"
            case dataSourceName = "DataSourceName"
            case status = "Status"
            case errorInfo = "ErrorInfo"
            case resourceRegion = "ResourceRegion"
            case overSize = "OverSize"
        }
    }

    /// 云上资源元数据
    public struct DspaCloudResourceMeta: TCInputModel {
        /// 用户资源ID。
        public let resourceId: String

        /// 资源名称。
        public let resourceName: String

        /// 资源VIP。
        public let resourceVip: String

        /// 资源端口。
        public let resourceVPort: UInt64

        /// 资源被创建时间。
        public let resourceCreateTime: String

        /// 用户资源VPC ID 字符串。
        public let resourceUniqueVpcId: String

        /// 用户资源Subnet ID 字符串。
        public let resourceUniqueSubnetId: String

        public init(resourceId: String, resourceName: String, resourceVip: String, resourceVPort: UInt64, resourceCreateTime: String, resourceUniqueVpcId: String, resourceUniqueSubnetId: String) {
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceVip = resourceVip
            self.resourceVPort = resourceVPort
            self.resourceCreateTime = resourceCreateTime
            self.resourceUniqueVpcId = resourceUniqueVpcId
            self.resourceUniqueSubnetId = resourceUniqueSubnetId
        }

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceName = "ResourceName"
            case resourceVip = "ResourceVip"
            case resourceVPort = "ResourceVPort"
            case resourceCreateTime = "ResourceCreateTime"
            case resourceUniqueVpcId = "ResourceUniqueVpcId"
            case resourceUniqueSubnetId = "ResourceUniqueSubnetId"
        }
    }

    /// DSPA数据分类分布
    public struct DspaDataCategoryDistributed: TCOutputModel {
        /// 数据分类ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 数据分类名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryName: String?

        /// 数据分类统计个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: UInt64?

        /// 分类路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryFullPath: String?

        enum CodingKeys: String, CodingKey {
            case categoryId = "CategoryId"
            case categoryName = "CategoryName"
            case count = "Count"
            case categoryFullPath = "CategoryFullPath"
        }
    }

    /// 过滤内容
    public struct DspaDataSourceMngFilter: TCInputModel {
        /// 过滤类型。
        public let name: String

        /// 过滤类型的值。
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// COS敏感数据识别规则
    public struct DspaDiscoveryCOSDataRule: TCInputModel, TCOutputModel {
        /// 只能取and 、or两个值其中之一，and：字段和内容同时满足，or：字段和内容满足其一.
        /// 默认值为or
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `operator`: String?

        /// 规则内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contents: [DspaDiscoveryDataContent]?

        public init(operator: String? = nil, contents: [DspaDiscoveryDataContent]? = nil) {
            self.operator = `operator`
            self.contents = contents
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case contents = "Contents"
        }
    }

    /// 分类分级任务COS识别规则
    public struct DspaDiscoveryCOSRules: TCInputModel, TCOutputModel {
        /// 规则状态；0 不启用, 1 启用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// regex规则内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regexRule: DspaDiscoveryCOSDataRule?

        /// 关键词规则内容组，最大支持5个关键词。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keywordRule: DspaDiscoveryCOSDataRule?

        /// 忽略词规则内容组，最大支持5个忽略词。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoreStringRule: DspaDiscoveryCOSDataRule?

        /// 最大匹配距离，默认值为100。上限为500.
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxMatch: Int64?

        public init(status: Int64? = nil, regexRule: DspaDiscoveryCOSDataRule? = nil, keywordRule: DspaDiscoveryCOSDataRule? = nil, ignoreStringRule: DspaDiscoveryCOSDataRule? = nil, maxMatch: Int64? = nil) {
            self.status = status
            self.regexRule = regexRule
            self.keywordRule = keywordRule
            self.ignoreStringRule = ignoreStringRule
            self.maxMatch = maxMatch
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case regexRule = "RegexRule"
            case keywordRule = "KeywordRule"
            case ignoreStringRule = "IgnoreStringRule"
            case maxMatch = "MaxMatch"
        }
    }

    /// COS扫描任务结果详情
    public struct DspaDiscoveryCOSTaskResultDetail: TCOutputModel {
        /// 任务ID
        public let taskId: Int64

        /// 扫描File结果详情ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileResultId: Int64?

        /// 所属桶名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucketName: String?

        /// 所属文件名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileName: String?

        /// 敏感数据分类ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 敏感数据分类名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryName: String?

        /// 敏感数据分级ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        /// 敏感数据分级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelName: String?

        /// KMS加密，true or false
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kmsEncrypted: Bool?

        /// 规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        /// 规则ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 敏感数据分级分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelRiskScore: Int64?

        /// 文件大小，单位为KB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileSize: Int64?

        /// 文件类型，如csv，txt
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileType: String?

        /// 敏感数据出现次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveDataCount: Int64?

        /// 分类树路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryFullPath: [String]?

        /// 合规组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceId: Int64?

        /// 结果id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultId: Int64?

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case fileResultId = "FileResultId"
            case bucketName = "BucketName"
            case fileName = "FileName"
            case categoryId = "CategoryId"
            case categoryName = "CategoryName"
            case levelId = "LevelId"
            case levelName = "LevelName"
            case kmsEncrypted = "KMSEncrypted"
            case ruleName = "RuleName"
            case ruleId = "RuleId"
            case levelRiskScore = "LevelRiskScore"
            case fileSize = "FileSize"
            case fileType = "FileType"
            case sensitiveDataCount = "SensitiveDataCount"
            case categoryFullPath = "CategoryFullPath"
            case complianceId = "ComplianceId"
            case resultId = "ResultId"
        }
    }

    /// 合规组
    public struct DspaDiscoveryComplianceGroup: TCOutputModel {
        /// 合规组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceGroupId: Int64?

        /// 合规组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 合规组描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 合规组类型；0 默认合规组，1 系统合规组（除默认合规组外）, 2 自定义合规组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceGroupType: Int64?

        /// 合规组对应的规则项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceGroupRules: [DspaDiscoveryComplianceGroupRuleInfo]?

        /// 合规组对应的分级组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelGroupId: UInt64?

        enum CodingKeys: String, CodingKey {
            case complianceGroupId = "ComplianceGroupId"
            case name = "Name"
            case description = "Description"
            case complianceGroupType = "ComplianceGroupType"
            case complianceGroupRules = "ComplianceGroupRules"
            case levelGroupId = "LevelGroupId"
        }
    }

    /// 合规组信息
    public struct DspaDiscoveryComplianceGroupInfo: TCOutputModel {
        /// 合规组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceGroupId: Int64?

        /// 合规组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 合规组描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 合规组类型；0 默认合规组，1 系统合规组（除默认合规组外）, 2 自定义合规组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceGroupType: Int64?

        /// 合规组对应的规则项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceGroupRules: [DspaDiscoveryComplianceGroupRule]?

        /// 合规组对应的分级组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelGroupId: UInt64?

        /// 是否禁止使用（true，禁止使用，false，可以使用）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let disabled: Bool?

        /// 是否别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAlias: Bool?

        enum CodingKeys: String, CodingKey {
            case complianceGroupId = "ComplianceGroupId"
            case name = "Name"
            case description = "Description"
            case complianceGroupType = "ComplianceGroupType"
            case complianceGroupRules = "ComplianceGroupRules"
            case levelGroupId = "LevelGroupId"
            case disabled = "Disabled"
            case isAlias = "IsAlias"
        }
    }

    /// 合规组中规则信息，用于合规组列表中规则信息展示
    public struct DspaDiscoveryComplianceGroupRule: TCOutputModel {
        /// 敏感数据识别规则ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 敏感数据识别规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        /// 敏感数据分类ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 敏感数据分级ID, 目前只支持高、中、低三级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        /// 合规组对应的分类信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryName: String?

        /// 分级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelRiskName: String?

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case categoryId = "CategoryId"
            case levelId = "LevelId"
            case categoryName = "CategoryName"
            case levelRiskName = "LevelRiskName"
        }
    }

    /// 合规组中规则信息，用于合规组列表中规则信息展示
    public struct DspaDiscoveryComplianceGroupRuleInfo: TCOutputModel {
        /// 敏感数据识别规则ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 敏感数据识别规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        /// 敏感数据分类ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 敏感数据分级ID, 目前只支持高、中、低三级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case categoryId = "CategoryId"
            case levelId = "LevelId"
        }
    }

    /// 扫描规则内容
    public struct DspaDiscoveryDataContent: TCInputModel, TCOutputModel {
        /// 规则内容，可以是正则规则，关键词，
        /// 忽略词扥
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleContent: String?

        /// 是否区分大小写
        /// false: 不区分大小写
        /// true:区分大小写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isIgnoreCase: Bool?

        public init(ruleContent: String? = nil, isIgnoreCase: Bool? = nil) {
            self.ruleContent = ruleContent
            self.isIgnoreCase = isIgnoreCase
        }

        enum CodingKeys: String, CodingKey {
            case ruleContent = "RuleContent"
            case isIgnoreCase = "IsIgnoreCase"
        }
    }

    /// 敏感数据识别规则
    public struct DspaDiscoveryDataRule: TCInputModel, TCOutputModel {
        /// 规则类型；取值：
        /// keyword 关键字,
        /// regex 正则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleType: String?

        /// 内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleContent: String?

        /// 该字段是针对规则类型RuleType为keyword类型时的一个扩展属性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extendParameters: [DatagovRuleExtendParameter]?

        public init(ruleType: String, ruleContent: String, extendParameters: [DatagovRuleExtendParameter]? = nil) {
            self.ruleType = ruleType
            self.ruleContent = ruleContent
            self.extendParameters = extendParameters
        }

        enum CodingKeys: String, CodingKey {
            case ruleType = "RuleType"
            case ruleContent = "RuleContent"
            case extendParameters = "ExtendParameters"
        }
    }

    /// 敏感数据识别规则集
    public struct DspaDiscoveryDataRules: TCInputModel, TCOutputModel {
        /// 操作符；只能取and, or的其中一种
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `operator`: String?

        /// 规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contents: [DspaDiscoveryDataRule]?

        public init(operator: String, contents: [DspaDiscoveryDataRule]) {
            self.operator = `operator`
            self.contents = contents
        }

        enum CodingKeys: String, CodingKey {
            case `operator` = "Operator"
            case contents = "Contents"
        }
    }

    /// 敏感数据分级信息
    public struct DspaDiscoveryLevelDetail: TCOutputModel {
        /// 分级组名称，唯一性约束，最多60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字，Name不可重复
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelGroupName: String?

        /// 分级组来源，0为内置，1为自定义
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: Int64?

        /// 分级组描述，最多1024字符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelGroupDesc: String?

        /// 具体分级标识详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelDetail: [LevelItem]?

        /// 引用合规组次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let refComplianceCnt: UInt64?

        /// 引用合规组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let refCompliance: [DspaDiscoveryComplianceGroup]?

        /// 分级组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelGroupId: UInt64?

        enum CodingKeys: String, CodingKey {
            case levelGroupName = "LevelGroupName"
            case source = "Source"
            case levelGroupDesc = "LevelGroupDesc"
            case levelDetail = "LevelDetail"
            case refComplianceCnt = "RefComplianceCnt"
            case refCompliance = "RefCompliance"
            case levelGroupId = "LevelGroupId"
        }
    }

    /// 分类分级任务RDB数据规则
    public struct DspaDiscoveryRDBRules: TCInputModel, TCOutputModel {
        /// 规则状态；0 不启用, 1 启用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 只能取and 、or两个值其中之一，and：字段和内容同时满足，or：字段和内容满足其一
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let matchOperator: String?

        /// 字段名包含规则，最大支持选择9项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metaRule: DspaDiscoveryDataRules?

        /// 内容包含规则，最大支持选择9项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contentRule: DspaDiscoveryDataRules?

        public init(status: Int64, matchOperator: String, metaRule: DspaDiscoveryDataRules, contentRule: DspaDiscoveryDataRules) {
            self.status = status
            self.matchOperator = matchOperator
            self.metaRule = metaRule
            self.contentRule = contentRule
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case matchOperator = "MatchOperator"
            case metaRule = "MetaRule"
            case contentRule = "ContentRule"
        }
    }

    /// 敏感数据扫描任务识别规则详情
    public struct DspaDiscoveryRuleDetail: TCOutputModel {
        /// 规则ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 规则描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 规则来源，取值：0 内置, 1 自定义
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: Int64?

        /// RDB规则详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rdbRules: DspaDiscoveryRDBRules?

        /// COS规则详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosRules: DspaDiscoveryCOSRules?

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case name = "Name"
            case description = "Description"
            case source = "Source"
            case rdbRules = "RDBRules"
            case cosRules = "COSRules"
        }
    }

    /// 描述对象存储类敏感识别扫描人元数据条件。
    public struct DspaDiscoveryTaskCOSCondition: TCOutputModel {
        /// 数据桶名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucket: String?

        /// 文件类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileTypes: [String]?

        /// 文件大小上限，单位为KB，如1000, 目前单个文件最大只支持1GB（1048576KB）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileSizeLimit: Int64?

        enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case fileTypes = "FileTypes"
            case fileSizeLimit = "FileSizeLimit"
        }
    }

    /// 扫描任务数据源信息
    public struct DspaDiscoveryTaskDataSource: TCOutputModel {
        /// 数据源ID
        public let dataSourceId: String

        /// 用于传入的数据源的条件，可以选择多个数据库，数据库之间通过逗号分隔，如果为空，默认是全部数据库
        public let condition: String

        /// 代理地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyAddress: [String]?

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 资源所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case condition = "Condition"
            case proxyAddress = "ProxyAddress"
            case dataSourceName = "DataSourceName"
            case resourceRegion = "ResourceRegion"
        }
    }

    /// 扫描任务结果，按照数据库级别展示
    public struct DspaDiscoveryTaskDbResult: TCOutputModel {
        /// 扫描数据库结果ID
        public let dbResultId: Int64

        /// 任务ID
        public let taskId: Int64

        /// 任务名称
        public let taskName: String

        /// 扫描任务最新一次扫描结果ID
        public let resultId: Int64

        /// 数据源ID
        public let dataSourceId: String

        /// 数据库名称
        public let dbName: String

        /// 总表数
        public let totalTables: Int64

        /// 敏感表数
        public let sensitiveTables: Int64

        /// DB扫描的结束时间，格式如：2006-01-02 15:04:05
        public let endTime: String

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// DB扫描状态，0待扫描 1扫描中 2扫描终止 3扫描成功 4扫描失败
        public let status: Int64

        /// DB扫描结果错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorInfo: String?

        /// 资源所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        /// 敏感字段数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveField: Int64?

        /// 总的字段数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalField: Int64?

        enum CodingKeys: String, CodingKey {
            case dbResultId = "DbResultId"
            case taskId = "TaskId"
            case taskName = "TaskName"
            case resultId = "ResultId"
            case dataSourceId = "DataSourceId"
            case dbName = "DbName"
            case totalTables = "TotalTables"
            case sensitiveTables = "SensitiveTables"
            case endTime = "EndTime"
            case dataSourceName = "DataSourceName"
            case status = "Status"
            case errorInfo = "ErrorInfo"
            case resourceRegion = "ResourceRegion"
            case sensitiveField = "SensitiveField"
            case totalField = "TotalField"
        }
    }

    /// 敏感数据扫描任务相关信息
    public struct DspaDiscoveryTaskDetail: TCOutputModel {
        /// 任务名称
        public let name: String

        /// 任务描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 执行周期，0单次 1每天 2每周 3每月
        public let period: Int64

        /// 执行计划，0立即 1定时
        public let plan: Int64

        /// 任务开关；1 打开，0 关闭
        public let enable: Int64

        /// 元数据对象信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceInfo: DspaDiscoveryTaskDataSource?

        /// 通用规则集开关，0 关闭，1 启用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let generalRuleSetEnable: Int64?

        /// 当创建任务时，用户打开了通用规则集开关，则该字段就会保存默认合规组信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultComplianceInfo: [ScanTaskComplianceInfo]?

        /// 该任务中用户选择的合规组信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customComplianceInfo: [ScanTaskComplianceInfo]?

        /// 定时开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timingStartTime: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case period = "Period"
            case plan = "Plan"
            case enable = "Enable"
            case dataSourceInfo = "DataSourceInfo"
            case generalRuleSetEnable = "GeneralRuleSetEnable"
            case defaultComplianceInfo = "DefaultComplianceInfo"
            case customComplianceInfo = "CustomComplianceInfo"
            case timingStartTime = "TimingStartTime"
        }
    }

    /// 扫描任务结果详情
    public struct DspaDiscoveryTaskResultDetail: TCOutputModel {
        /// 任务ID
        public let taskId: Int64

        /// 扫描结果详情ID
        public let fieldResultId: Int64

        /// 所属数据表名
        public let tableName: String

        /// 字段名
        public let fieldName: String

        /// 敏感数据分类ID
        public let categoryId: Int64

        /// 敏感数据分类名称
        public let categoryName: String

        /// 敏感数据分级ID
        public let levelId: Int64

        /// 敏感数据分级名称
        public let levelName: String

        /// 规则名称
        public let ruleName: String

        /// 规则ID
        public let ruleId: Int64

        /// 敏感数据分级分数
        public let levelRiskScore: Int64

        /// 保护措施
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let safeGuard: DspaSafeGuard?

        /// 分类路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryFullPath: String?

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case fieldResultId = "FieldResultId"
            case tableName = "TableName"
            case fieldName = "FieldName"
            case categoryId = "CategoryId"
            case categoryName = "CategoryName"
            case levelId = "LevelId"
            case levelName = "LevelName"
            case ruleName = "RuleName"
            case ruleId = "RuleId"
            case levelRiskScore = "LevelRiskScore"
            case safeGuard = "SafeGuard"
            case categoryFullPath = "CategoryFullPath"
        }
    }

    /// 数据样本
    public struct DspaFieldResultDataSample: TCOutputModel {
        /// 数据样本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSample: String?

        enum CodingKeys: String, CodingKey {
            case dataSample = "DataSample"
        }
    }

    /// Dspa实例信息
    public struct DspaInstance: TCOutputModel {
        /// DSPA实例ID。
        public let dspaId: String

        /// DSPA实例名称。
        public let dspaName: String

        /// DSPA实例描述信息。
        public let dspaDescription: String

        /// DSPA实例已授权的数据库实例数量。
        public let dbAuthCount: UInt64

        /// DSPA实例已绑定的cos桶数量。
        public let cosBindCount: UInt64

        /// DSPA实例版本。
        public let instanceVersion: String

        /// DSPA实例状态。
        public let status: String

        /// 实例过期时间戳。
        public let expiredAt: UInt64

        /// 账户APPID。
        public let appId: UInt64

        /// 体验版本信息。
        public let trialVersion: String

        /// 体验版本过期时间戳。
        public let trialEndAt: UInt64

        /// DB已购配额。
        public let dbTotalQuota: Int64

        /// COS已购配额。
        public let cosTotalQuota: Int64

        /// COS配额单位，比如TB。
        public let cosQuotaUnit: String

        /// 0: 默认状态(用户未设置)
        /// 1: 开启自动续费
        /// 2: 明确不自动续费
        public let renewFlag: UInt64

        enum CodingKeys: String, CodingKey {
            case dspaId = "DspaId"
            case dspaName = "DspaName"
            case dspaDescription = "DspaDescription"
            case dbAuthCount = "DBAuthCount"
            case cosBindCount = "CosBindCount"
            case instanceVersion = "InstanceVersion"
            case status = "Status"
            case expiredAt = "ExpiredAt"
            case appId = "AppId"
            case trialVersion = "TrialVersion"
            case trialEndAt = "TrialEndAt"
            case dbTotalQuota = "DbTotalQuota"
            case cosTotalQuota = "CosTotalQuota"
            case cosQuotaUnit = "CosQuotaUnit"
            case renewFlag = "RenewFlag"
        }
    }

    /// RDB关系型数据库敏感数据资产统计
    public struct DspaRDBDataAssetCount: TCOutputModel {
        /// 数组资产类型，0代表关系型数据库资产，1代表对象存储COS资产
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataAssetType: Int64?

        /// 已扫描的数据库的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalDbCnt: Int64?

        /// 数据库表的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalTableCnt: Int64?

        /// 敏感数据类型个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveCategoryCnt: Int64?

        /// 敏感字段的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldCnt: Int64?

        /// 敏感等级分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveLevel: [SensitiveLevel]?

        /// 敏感数据库的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveDbCnt: Int64?

        /// 敏感数据库表的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveTableCnt: Int64?

        /// 扫描字段的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalFieldCnt: Int64?

        /// 数据分类分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryDistributed: [DspaDataCategoryDistributed]?

        enum CodingKeys: String, CodingKey {
            case dataAssetType = "DataAssetType"
            case totalDbCnt = "TotalDbCnt"
            case totalTableCnt = "TotalTableCnt"
            case sensitiveCategoryCnt = "SensitiveCategoryCnt"
            case sensitiveFieldCnt = "SensitiveFieldCnt"
            case sensitiveLevel = "SensitiveLevel"
            case sensitiveDbCnt = "SensitiveDbCnt"
            case sensitiveTableCnt = "SensitiveTableCnt"
            case totalFieldCnt = "TotalFieldCnt"
            case categoryDistributed = "CategoryDistributed"
        }
    }

    /// 关系型数据库资产详情
    public struct DspaRDBDataAssetDetail: TCOutputModel {
        /// 数据源ID
        public let dataSourceId: String

        /// 数据库类型
        public let dbType: String

        /// 数据库名称
        public let dbName: String

        /// 数据库表名称
        public let tableName: String

        /// 数据库表字段名称
        public let fieldName: String

        /// 规则名称
        public let ruleName: String

        /// 数据分类
        public let categoryName: String

        /// 敏感等级
        public let levelRiskName: String

        /// 分级风险分数，1-10，最小值为1，最大值为10
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelRiskScore: Int64?

        /// 可信分
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trustedScore: String?

        /// 资源所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        /// 字段扫描结果ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldResultId: String?

        /// 规则ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 分级ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        /// 分类ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 保护措施
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let safeGuard: DspaSafeGuard?

        /// 分类路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryFullPath: String?

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case dbType = "DbType"
            case dbName = "DbName"
            case tableName = "TableName"
            case fieldName = "FieldName"
            case ruleName = "RuleName"
            case categoryName = "CategoryName"
            case levelRiskName = "LevelRiskName"
            case levelRiskScore = "LevelRiskScore"
            case trustedScore = "TrustedScore"
            case resourceRegion = "ResourceRegion"
            case fieldResultId = "FieldResultId"
            case ruleId = "RuleId"
            case levelId = "LevelId"
            case categoryId = "CategoryId"
            case dataSourceName = "DataSourceName"
            case safeGuard = "SafeGuard"
            case categoryFullPath = "CategoryFullPath"
        }
    }

    /// 资源账户信息
    public struct DspaResourceAccount: TCInputModel, TCOutputModel {
        /// 资源ID。
        public let resourceId: String

        /// 用户名。
        public let userName: String

        /// 密码。
        public let password: String

        public init(resourceId: String, userName: String, password: String) {
            self.resourceId = resourceId
            self.userName = userName
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case userName = "UserName"
            case password = "Password"
        }
    }

    /// 分类分级扫描结果字段的保护措施
    public struct DspaSafeGuard: TCOutputModel {
        /// 加密状态，可取值如下：
        /// UNSET 未设置
        /// DISABLE 规则设置未启用
        /// ENABLE 规则设置并启用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let encrypt: String?

        /// 脱敏状态，可取值如下：
        /// UNSET 未设置
        /// DISABLE 规则设置未启用
        /// ENABLE 规则设置并启用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let desensitization: String?

        enum CodingKeys: String, CodingKey {
            case encrypt = "Encrypt"
            case desensitization = "Desensitization"
        }
    }

    /// 任务执行结果描述。
    public struct DspaTaskResult: TCOutputModel {
        /// 任务结果。
        public let result: String

        /// 结果描述。
        public let resultDescription: String

        /// 资源ID。
        public let resourceId: String

        /// 资源类型。
        public let metaType: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case resultDescription = "ResultDescription"
            case resourceId = "ResourceId"
            case metaType = "MetaType"
        }
    }

    /// DSPA用户资源元信息
    public struct DspaUserResourceMeta: TCInputModel, TCOutputModel {
        /// 用户资源ID。
        public let resourceId: String

        /// 资源名称。
        public let resourceName: String

        /// 资源VIP。
        public let resourceVip: String

        /// 资源端口。
        public let resourceVPort: UInt64

        /// 资源被创建时间。
        public let resourceCreateTime: String

        /// 用户资源VPC ID 字符串。
        public let resourceUniqueVpcId: String

        /// 用户资源Subnet ID 字符串。
        public let resourceUniqueSubnetId: String

        /// 用户资源类型信息。
        public let metaType: String?

        /// 资源所处地域。
        public let resourceRegion: String?

        /// 资源被同步时间。
        public let resourceSyncTime: String?

        /// 资源被授权状态。
        public let authStatus: String?

        /// 资源创建类型，cloud-云原生资源，build-用户自建资源。
        public let buildType: String?

        /// 主实例ID。
        public let masterInsId: String?

        /// 用户资源VPC ID 整数。
        public let resourceVpcId: UInt64?

        /// 用户资源Subnet ID 整数。
        public let resourceSubnetId: UInt64?

        /// 协议类型。
        public let `protocol`: String?

        /// 资源版本号。
        public let resourceVersion: String?

        /// 授权方式
        public let resourceAuthType: String?

        /// 授权账号名
        public let resourceAuthAccount: String?

        public init(resourceId: String, resourceName: String, resourceVip: String, resourceVPort: UInt64, resourceCreateTime: String, resourceUniqueVpcId: String, resourceUniqueSubnetId: String, metaType: String? = nil, resourceRegion: String? = nil, resourceSyncTime: String? = nil, authStatus: String? = nil, buildType: String? = nil, masterInsId: String? = nil, resourceVpcId: UInt64? = nil, resourceSubnetId: UInt64? = nil, protocol: String? = nil, resourceVersion: String? = nil, resourceAuthType: String? = nil, resourceAuthAccount: String? = nil) {
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceVip = resourceVip
            self.resourceVPort = resourceVPort
            self.resourceCreateTime = resourceCreateTime
            self.resourceUniqueVpcId = resourceUniqueVpcId
            self.resourceUniqueSubnetId = resourceUniqueSubnetId
            self.metaType = metaType
            self.resourceRegion = resourceRegion
            self.resourceSyncTime = resourceSyncTime
            self.authStatus = authStatus
            self.buildType = buildType
            self.masterInsId = masterInsId
            self.resourceVpcId = resourceVpcId
            self.resourceSubnetId = resourceSubnetId
            self.protocol = `protocol`
            self.resourceVersion = resourceVersion
            self.resourceAuthType = resourceAuthType
            self.resourceAuthAccount = resourceAuthAccount
        }

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceName = "ResourceName"
            case resourceVip = "ResourceVip"
            case resourceVPort = "ResourceVPort"
            case resourceCreateTime = "ResourceCreateTime"
            case resourceUniqueVpcId = "ResourceUniqueVpcId"
            case resourceUniqueSubnetId = "ResourceUniqueSubnetId"
            case metaType = "MetaType"
            case resourceRegion = "ResourceRegion"
            case resourceSyncTime = "ResourceSyncTime"
            case authStatus = "AuthStatus"
            case buildType = "BuildType"
            case masterInsId = "MasterInsId"
            case resourceVpcId = "ResourceVpcId"
            case resourceSubnetId = "ResourceSubnetId"
            case `protocol` = "Protocol"
            case resourceVersion = "ResourceVersion"
            case resourceAuthType = "ResourceAuthType"
            case resourceAuthAccount = "ResourceAuthAccount"
        }
    }

    /// es的资产统计结果
    public struct ESAsset: TCOutputModel {
        /// 索引总数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexNums: Int64?

        /// 敏感索引的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveIndexNums: Int64?

        /// 字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldNums: Int64?

        /// 敏感的字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldNums: Int64?

        enum CodingKeys: String, CodingKey {
            case indexNums = "IndexNums"
            case sensitiveIndexNums = "SensitiveIndexNums"
            case fieldNums = "FieldNums"
            case sensitiveFieldNums = "SensitiveFieldNums"
        }
    }

    /// es敏感资产详情列表
    public struct ESAssetDBDetail: TCOutputModel {
        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// 索引名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexName: String?

        /// 数据库类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataType: String?

        /// 字段的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldNums: Int64?

        /// 敏感字段的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldNums: Int64?

        /// 敏感数据分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let distributionData: [Note]?

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case indexName = "IndexName"
            case dataType = "DataType"
            case fieldNums = "FieldNums"
            case sensitiveFieldNums = "SensitiveFieldNums"
            case distributionData = "DistributionData"
        }
    }

    /// ES的概览页统计数据
    public struct ESDataAssetCountDto: TCOutputModel {
        /// es
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataAssetType: Int64?

        /// 敏感索引个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveIndexCnt: Int64?

        /// 总的索引个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalIndexCnt: Int64?

        /// 敏感字段个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldCnt: Int64?

        /// 总的字段个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalFieldCnt: Int64?

        /// 敏感分类的个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveCategoryCnt: Int64?

        /// 敏感分级的分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveLevel: [SensitiveLevel]?

        /// 敏感分类的分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryDistributed: [DspaDataCategoryDistributed]?

        enum CodingKeys: String, CodingKey {
            case dataAssetType = "DataAssetType"
            case sensitiveIndexCnt = "SensitiveIndexCnt"
            case totalIndexCnt = "TotalIndexCnt"
            case sensitiveFieldCnt = "SensitiveFieldCnt"
            case totalFieldCnt = "TotalFieldCnt"
            case sensitiveCategoryCnt = "SensitiveCategoryCnt"
            case sensitiveLevel = "SensitiveLevel"
            case categoryDistributed = "CategoryDistributed"
        }
    }

    /// ES的概览页资产详情
    public struct ESDataAssetDetail: TCOutputModel {
        /// id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldResultId: Int64?

        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceType: String?

        /// 地域信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        /// 索引名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexName: String?

        /// 字段名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldName: String?

        /// 分类id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 分类名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryName: String?

        /// 分类路径数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryArr: [String]?

        /// 等级id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        /// 分级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelRiskName: String?

        /// 分级分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelRiskScore: Int64?

        /// 可信分
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trustedScore: Float?

        /// 规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        enum CodingKeys: String, CodingKey {
            case fieldResultId = "FieldResultId"
            case dataSourceId = "DataSourceId"
            case dataSourceName = "DataSourceName"
            case dataSourceType = "DataSourceType"
            case resourceRegion = "ResourceRegion"
            case indexName = "IndexName"
            case fieldName = "FieldName"
            case categoryId = "CategoryId"
            case categoryName = "CategoryName"
            case categoryArr = "CategoryArr"
            case levelId = "LevelId"
            case levelRiskName = "LevelRiskName"
            case levelRiskScore = "LevelRiskScore"
            case trustedScore = "TrustedScore"
            case ruleId = "RuleId"
            case ruleName = "RuleName"
        }
    }

    /// 创建评估任务的ES详情
    public struct ESInstance: TCInputModel {
        /// 数据源id
        public let dataSourceId: String

        /// 数据源类型
        public let dataSourceType: String

        /// 地域
        public let resourceRegion: String

        /// 扫描任务ID
        public let discoveryTaskId: Int64?

        /// 扫描任务实例ID
        public let discoveryTaskInstanceID: Int64?

        public init(dataSourceId: String, dataSourceType: String, resourceRegion: String, discoveryTaskId: Int64? = nil, discoveryTaskInstanceID: Int64? = nil) {
            self.dataSourceId = dataSourceId
            self.dataSourceType = dataSourceType
            self.resourceRegion = resourceRegion
            self.discoveryTaskId = discoveryTaskId
            self.discoveryTaskInstanceID = discoveryTaskInstanceID
        }

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case dataSourceType = "DataSourceType"
            case resourceRegion = "ResourceRegion"
            case discoveryTaskId = "DiscoveryTaskId"
            case discoveryTaskInstanceID = "DiscoveryTaskInstanceID"
        }
    }

    /// ES扫描任务结果详情
    public struct ESTaskResultDetail: TCOutputModel {
        /// id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 任务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: Int64?

        /// 字段名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldName: String?

        /// 规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        /// 分类id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryId: Int64?

        /// 分类名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryName: String?

        /// 多级分类的路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryArr: [String]?

        /// 分级id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        /// 分级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelName: String?

        /// 分级分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelRiskScore: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case taskId = "TaskId"
            case fieldName = "FieldName"
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case categoryId = "CategoryId"
            case categoryName = "CategoryName"
            case categoryArr = "CategoryArr"
            case levelId = "LevelId"
            case levelName = "LevelName"
            case levelRiskScore = "LevelRiskScore"
        }
    }

    /// 错误信息描述
    public struct ErrDescription: TCOutputModel {
        /// 错误码。
        public let errCode: String?

        /// 具体错误信息。
        public let errMessage: String?

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case errMessage = "ErrMessage"
        }
    }

    /// 描述键值对过滤器，用于条件过滤查询。例如过滤ID、名称、状态等
    ///
    /// 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
    /// 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct Filter: TCInputModel {
        /// 需要过滤的字段。
        public let name: String

        /// 字段的过滤值。
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 高风险资产详情信息
    public struct HighRiskAssetsDetail: TCOutputModel {
        /// 实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 数据源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceType: String?

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 资产对象名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assetsName: String?

        /// 高风险个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let highRiskCount: Int64?

        /// 风险类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskType: String?

        /// 总的风险个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalRiskCount: Int64?

        /// 风险面
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskSide: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dataSourceType = "DataSourceType"
            case dataSourceName = "DataSourceName"
            case assetsName = "AssetsName"
            case highRiskCount = "HighRiskCount"
            case riskType = "RiskType"
            case totalRiskCount = "TotalRiskCount"
            case riskSide = "RiskSide"
            case resourceRegion = "ResourceRegion"
        }
    }

    /// 某个分级单个信息
    public struct ItemLevel: TCInputModel {
        /// 分级标识名称，1-60个字符，仅允许输入中文、英文字母、数字、'_'、'-'，并且开头和结尾需为中文、英文字母或者数字，Name不可重复
        public let levelRiskName: String

        /// 分级标识对应的风险分数值，1-10，最小为1，最大为10
        public let levelRiskScore: Int64

        public init(levelRiskName: String, levelRiskScore: Int64) {
            self.levelRiskName = levelRiskName
            self.levelRiskScore = levelRiskScore
        }

        enum CodingKeys: String, CodingKey {
            case levelRiskName = "LevelRiskName"
            case levelRiskScore = "LevelRiskScore"
        }
    }

    /// 分级单项信息
    public struct LevelItem: TCOutputModel {
        /// 分级ID
        public let levelId: UInt64

        /// 分级组ID
        public let levelGroupId: UInt64

        /// 分级标识名称，支持内置分级，内置分级取值：高，中，低，也可以自定义
        public let levelRiskName: String

        /// 分级风险分数，1-10，最小值为1，最大值为10
        public let levelRiskScore: UInt64

        enum CodingKeys: String, CodingKey {
            case levelId = "LevelId"
            case levelGroupId = "LevelGroupId"
            case levelRiskName = "LevelRiskName"
            case levelRiskScore = "LevelRiskScore"
        }
    }

    /// mongo的资产统计结果
    public struct MongoAsset: TCOutputModel {
        /// DB总数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbNums: Int64?

        /// 敏感DB数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveDbNums: Int64?

        /// 集合数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let colNums: Int64?

        /// 敏感集合的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveColNums: Int64?

        /// 字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldNums: Int64?

        /// 敏感的字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldNums: Int64?

        enum CodingKeys: String, CodingKey {
            case dbNums = "DbNums"
            case sensitiveDbNums = "SensitiveDbNums"
            case colNums = "ColNums"
            case sensitiveColNums = "SensitiveColNums"
            case fieldNums = "FieldNums"
            case sensitiveFieldNums = "SensitiveFieldNums"
        }
    }

    /// mongo敏感资产详情列表
    public struct MongoAssetDBDetail: TCOutputModel {
        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// 数据库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ddName: String?

        /// 数据库类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataType: String?

        /// 集合的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let colNums: Int64?

        /// 敏感集合数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveColNums: Int64?

        /// 字段的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldNums: Int64?

        /// 敏感字段的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldNums: Int64?

        /// 敏感数据分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let distributionData: [Note]?

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case ddName = "DdName"
            case dataType = "DataType"
            case colNums = "ColNums"
            case sensitiveColNums = "SensitiveColNums"
            case fieldNums = "FieldNums"
            case sensitiveFieldNums = "SensitiveFieldNums"
            case distributionData = "DistributionData"
        }
    }

    /// NOSQL类型的数据源实例
    public struct NOSQLInstance: TCInputModel {
        /// 数据源id
        public let dataSourceId: String?

        /// cdb, dcdb, mariadb, postgres, cynosdbpg, cynosdbmysql, cos, mysql_like_proto, postgre_like_proto,mongodb
        public let dataSourceType: String?

        /// 资源所在地域
        public let resourceRegion: String?

        /// 根据实例创建的敏感数据识别扫描任务Id
        public let discoveryTaskId: Int64?

        /// 敏感数据识别任务实例id
        public let discoveryTaskInstanceID: Int64?

        public init(dataSourceId: String, dataSourceType: String, resourceRegion: String, discoveryTaskId: Int64? = nil, discoveryTaskInstanceID: Int64? = nil) {
            self.dataSourceId = dataSourceId
            self.dataSourceType = dataSourceType
            self.resourceRegion = resourceRegion
            self.discoveryTaskId = discoveryTaskId
            self.discoveryTaskInstanceID = discoveryTaskInstanceID
        }

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case dataSourceType = "DataSourceType"
            case resourceRegion = "ResourceRegion"
            case discoveryTaskId = "DiscoveryTaskId"
            case discoveryTaskInstanceID = "DiscoveryTaskInstanceID"
        }
    }

    /// 数据资产报告-各种key-value的展示数据结构
    public struct Note: TCInputModel, TCOutputModel {
        /// 通用key，比如分类名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 通用value，比如分类个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: Int64?

        public init(key: String? = nil, value: Int64? = nil) {
            self.key = key
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 权限风险详情
    public struct PrivilegeRisk: TCOutputModel {
        /// 账户名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accountName: [String]?

        /// 表名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableName: String?

        /// 说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        enum CodingKeys: String, CodingKey {
            case accountName = "AccountName"
            case tableName = "TableName"
            case description = "Description"
        }
    }

    /// 处理历史
    public struct ProcessHistory: TCOutputModel {
        /// 处理时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let time: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 处理人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let handler: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let note: String?

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case status = "Status"
            case handler = "Handler"
            case note = "Note"
        }
    }

    /// rdb的资产统计结果
    public struct RDBAsset: TCOutputModel {
        /// DB总数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbNums: Int64?

        /// 敏感DB数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveDbNums: Int64?

        /// 表数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableNums: Int64?

        /// 敏感表的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveTableNums: Int64?

        /// 字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fieldNums: Int64?

        /// 敏感的字段数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveFieldNums: Int64?

        enum CodingKeys: String, CodingKey {
            case dbNums = "DbNums"
            case sensitiveDbNums = "SensitiveDbNums"
            case tableNums = "TableNums"
            case sensitiveTableNums = "SensitiveTableNums"
            case fieldNums = "FieldNums"
            case sensitiveFieldNums = "SensitiveFieldNums"
        }
    }

    /// RDB实例信息
    public struct RDBInstance: TCInputModel, TCOutputModel {
        /// 数据源Id
        public let dataSourceId: String

        /// cdb, dcdb, mariadb, postgres, cynosdbpg, cynosdbmysql, cos, mysql_like_proto, postgre_like_proto
        public let dataSourceType: String

        /// 资源所在地域
        public let resourceRegion: String

        /// 若未来扩展到DBName粒度，可采用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dBs: [DBStatements]?

        public init(dataSourceId: String, dataSourceType: String, resourceRegion: String, dBs: [DBStatements]? = nil) {
            self.dataSourceId = dataSourceId
            self.dataSourceType = dataSourceType
            self.resourceRegion = resourceRegion
            self.dBs = dBs
        }

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case dataSourceType = "DataSourceType"
            case resourceRegion = "ResourceRegion"
            case dBs = "DBs"
        }
    }

    /// 报表信息
    public struct ReportInfo: TCOutputModel {
        /// 任务id
        public let id: UInt64?

        /// 报告名称
        public let reportName: String?

        /// 报告类型（AssetSorting:资产梳理）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reportType: String?

        /// 报告周期（0单次 1每天 2每周 3每月）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reportPeriod: UInt64?

        /// 执行计划 （0:单次报告 1:定时报告）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reportPlan: UInt64?

        /// 报告导出状态（Success 成功, Failed 失败, InProgress 进行中）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reportStatus: String?

        /// 任务下次启动时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timingStartTime: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 完成时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let finishedTime: String?

        /// 子账号uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subUin: String?

        /// 失败信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedMessage: String?

        /// 是否启用（0：否 1：是）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enable: UInt64?

        /// 识别模板名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let complianceName: String?

        /// 进度百分比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progressPercent: UInt64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case reportName = "ReportName"
            case reportType = "ReportType"
            case reportPeriod = "ReportPeriod"
            case reportPlan = "ReportPlan"
            case reportStatus = "ReportStatus"
            case timingStartTime = "TimingStartTime"
            case createTime = "CreateTime"
            case finishedTime = "FinishedTime"
            case subUin = "SubUin"
            case failedMessage = "FailedMessage"
            case enable = "Enable"
            case complianceName = "ComplianceName"
            case progressPercent = "ProgressPercent"
        }
    }

    /// 待处理风险项数量信息
    public struct RiskCountInfo: TCOutputModel {
        /// 风险等级
        public let riskLevel: String

        /// 该等级风险项数量
        public let count: Int64

        /// 风险等级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevelName: String?

        enum CodingKeys: String, CodingKey {
            case riskLevel = "RiskLevel"
            case count = "Count"
            case riskLevelName = "RiskLevelName"
        }
    }

    /// 风险趋势项
    public struct RiskDealedTrendItem: TCOutputModel {
        /// 日期
        public let date: String

        /// 未解决数量
        public let unhandled: UInt64

        /// 已解决数量
        public let handled: UInt64

        /// 新发现
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newDiscoveryHandled: UInt64?

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case unhandled = "Unhandled"
            case handled = "Handled"
            case newDiscoveryHandled = "NewDiscoveryHandled"
        }
    }

    /// 风险TOP5统计项
    public struct RiskItem: TCOutputModel {
        /// 名称
        public let itemName: String

        /// 风险数量
        public let riskNum: UInt64

        enum CodingKeys: String, CodingKey {
            case itemName = "ItemName"
            case riskNum = "RiskNum"
        }
    }

    /// 最新的风险详情信息数据
    public struct RiskItemInfo: TCInputModel, TCOutputModel {
        /// 最新风险项id
        public let id: Int64?

        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// 数据源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceName: String?

        /// 数据源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceType: String?

        /// 资源地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceRegion: String?

        /// 资产名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assetName: String?

        /// 风险类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskType: String?

        /// 风险项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskName: String?

        /// 风险级别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: String?

        /// 风险描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskDescription: String?

        /// 建议措施
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let suggestAction: String?

        /// 安全产品（可能有多个）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityProduct: [SecurityProduct]?

        /// 状态(waiting:待处理，processing:处理中，finished:已处理，ignored:已忽略)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 扫描时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanTime: String?

        /// 最后处置时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastProcessTime: String?

        /// 分类分级合规组Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let identifyComplianceId: Int64?

        /// 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let itemSubType: String?

        /// 风险面
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskSide: String?

        /// API安全风险链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let apiRiskLinkURL: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        public init(id: Int64? = nil, dataSourceId: String? = nil, dataSourceName: String? = nil, dataSourceType: String? = nil, resourceRegion: String? = nil, assetName: String? = nil, riskType: String? = nil, riskName: String? = nil, riskLevel: String? = nil, riskDescription: String? = nil, suggestAction: String? = nil, securityProduct: [SecurityProduct]? = nil, status: Int64? = nil, scanTime: String? = nil, lastProcessTime: String? = nil, identifyComplianceId: Int64? = nil, itemSubType: String? = nil, riskSide: String? = nil, apiRiskLinkURL: String? = nil, remark: String? = nil) {
            self.id = id
            self.dataSourceId = dataSourceId
            self.dataSourceName = dataSourceName
            self.dataSourceType = dataSourceType
            self.resourceRegion = resourceRegion
            self.assetName = assetName
            self.riskType = riskType
            self.riskName = riskName
            self.riskLevel = riskLevel
            self.riskDescription = riskDescription
            self.suggestAction = suggestAction
            self.securityProduct = securityProduct
            self.status = status
            self.scanTime = scanTime
            self.lastProcessTime = lastProcessTime
            self.identifyComplianceId = identifyComplianceId
            self.itemSubType = itemSubType
            self.riskSide = riskSide
            self.apiRiskLinkURL = apiRiskLinkURL
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case dataSourceId = "DataSourceId"
            case dataSourceName = "DataSourceName"
            case dataSourceType = "DataSourceType"
            case resourceRegion = "ResourceRegion"
            case assetName = "AssetName"
            case riskType = "RiskType"
            case riskName = "RiskName"
            case riskLevel = "RiskLevel"
            case riskDescription = "RiskDescription"
            case suggestAction = "SuggestAction"
            case securityProduct = "SecurityProduct"
            case status = "Status"
            case scanTime = "ScanTime"
            case lastProcessTime = "LastProcessTime"
            case identifyComplianceId = "IdentifyComplianceId"
            case itemSubType = "ItemSubType"
            case riskSide = "RiskSide"
            case apiRiskLinkURL = "APIRiskLinkURL"
            case remark = "Remark"
        }
    }

    /// 风险级别详情的矩阵
    public struct RiskLevelMatrix: TCInputModel, TCOutputModel {
        /// 存储id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 分类分级levelID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveLevelId: Int64?

        /// 分类分级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveLevelName: String?

        /// 漏洞级别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vulnerabilityLevel: String?

        /// 风险级别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: String?

        public init(id: Int64? = nil, sensitiveLevelId: Int64? = nil, sensitiveLevelName: String? = nil, vulnerabilityLevel: String? = nil, riskLevel: String? = nil) {
            self.id = id
            self.sensitiveLevelId = sensitiveLevelId
            self.sensitiveLevelName = sensitiveLevelName
            self.vulnerabilityLevel = vulnerabilityLevel
            self.riskLevel = riskLevel
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case sensitiveLevelId = "SensitiveLevelId"
            case sensitiveLevelName = "SensitiveLevelName"
            case vulnerabilityLevel = "VulnerabilityLevel"
            case riskLevel = "RiskLevel"
        }
    }

    /// 风险等级列表
    public struct RiskLevelRisk: TCOutputModel {
        /// 风险id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 风险等级列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevelName: String?

        /// 风险级别描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevelDescription: String?

        /// 引用的分类分级模版
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let identifyComplianceName: String?

        /// 类型，区分自定义还是系统内置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case riskLevelName = "RiskLevelName"
            case riskLevelDescription = "RiskLevelDescription"
            case identifyComplianceName = "IdentifyComplianceName"
            case type = "Type"
        }
    }

    /// 风险级别趋势项
    public struct RiskLevelTrendItem: TCOutputModel {
        /// 日期
        public let date: String

        /// 高风险数量
        public let high: UInt64

        /// 中风险数量
        public let medium: UInt64

        /// 低风险数量
        public let low: UInt64

        /// 总数
        public let total: UInt64

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case high = "High"
            case medium = "Medium"
            case low = "Low"
            case total = "Total"
        }
    }

    /// 用于生成默认的风险级别矩阵
    public struct RiskMatrixLevel: TCInputModel, TCOutputModel {
        /// 名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 就是id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let score: Float?

        public init(name: String? = nil, id: Int64? = nil, score: Float? = nil) {
            self.name = name
            self.id = id
            self.score = score
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
            case score = "Score"
        }
    }

    /// 风险面的分布
    public struct RiskSideDistributed: TCOutputModel {
        /// 风险面
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assessmentRiskSide: Note?

        /// 风险类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assessmentRisk: [Note]?

        enum CodingKeys: String, CodingKey {
            case assessmentRiskSide = "AssessmentRiskSide"
            case assessmentRisk = "AssessmentRisk"
        }
    }

    /// 数据资产报告-rdb的敏感数据规则分布
    public struct RuleDistribution: TCOutputModel {
        /// 规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: Int64?

        /// 规则名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        /// 分级id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelId: Int64?

        /// 分级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelName: String?

        /// 规则数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleCnt: Int64?

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case levelId = "LevelId"
            case levelName = "LevelName"
            case ruleCnt = "RuleCnt"
        }
    }

    /// 敏感识别任务COS识别规则
    public struct ScanTaskCOSRules: TCInputModel, TCOutputModel {
        /// regex规则内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regexRule: COSDataRule?

        /// 规则状态；0 不启用, 1 启用
        public let status: Int64?

        /// 关键词规则内容组，最大支持5个关键词。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keywordRule: COSDataRule?

        /// 忽略词规则内容组，最大支持5个忽略词。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoreStringRule: COSDataRule?

        /// 最大匹配距离，默认值为100。上限为500.
        public let maxMatch: Int64?

        public init(regexRule: COSDataRule, status: Int64? = nil, keywordRule: COSDataRule? = nil, ignoreStringRule: COSDataRule? = nil, maxMatch: Int64? = nil) {
            self.regexRule = regexRule
            self.status = status
            self.keywordRule = keywordRule
            self.ignoreStringRule = ignoreStringRule
            self.maxMatch = maxMatch
        }

        enum CodingKeys: String, CodingKey {
            case regexRule = "RegexRule"
            case status = "Status"
            case keywordRule = "KeywordRule"
            case ignoreStringRule = "IgnoreStringRule"
            case maxMatch = "MaxMatch"
        }
    }

    /// 扫描任务选择的合规组信息
    public struct ScanTaskComplianceInfo: TCOutputModel {
        /// 合规组ID
        public let complianceGroupId: Int64

        /// 合规组名称
        public let complianceGroupName: String

        enum CodingKeys: String, CodingKey {
            case complianceGroupId = "ComplianceGroupId"
            case complianceGroupName = "ComplianceGroupName"
        }
    }

    /// 敏感识别任务RDB数据规则
    public struct ScanTaskRDBRules: TCInputModel {
        /// 规则状态；0 不启用, 1 启用
        public let status: Int64

        /// 只能取and 、or两个值其中之一，and：字段和内容同时满足，or：字段和内容满足其一
        public let matchOperator: String

        /// 字段名包含规则，最大支持选择9项
        public let metaRule: DataRules

        /// 内容包含规则，最大支持选择9项
        public let contentRule: DataRules

        public init(status: Int64, matchOperator: String, metaRule: DataRules, contentRule: DataRules) {
            self.status = status
            self.matchOperator = matchOperator
            self.metaRule = metaRule
            self.contentRule = contentRule
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case matchOperator = "MatchOperator"
            case metaRule = "MetaRule"
            case contentRule = "ContentRule"
        }
    }

    /// 扫描任务结果信息
    public struct ScanTaskResult: TCOutputModel {
        /// 任务最新一次运行结果ID
        public let id: Int64

        /// 任务扫描结束的时间，格式如：2021-12-12 12:12:12
        public let endTime: String

        /// 任务状态，-1待触发 0待扫描 1扫描中 2扫描终止 3扫描成功 4扫描失败
        public let status: Int64

        /// 扫描任务结果展示，如果扫描失败，则显示失败原因
        public let result: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case endTime = "EndTime"
            case status = "Status"
            case result = "Result"
        }
    }

    /// 建议使用的安全产品
    public struct SecurityProduct: TCOutputModel {
        /// 产品名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let productName: String?

        /// 产品链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let referUrl: String?

        enum CodingKeys: String, CodingKey {
            case productName = "ProductName"
            case referUrl = "ReferUrl"
        }
    }

    /// 敏感等级分布
    public struct SensitiveLevel: TCOutputModel {
        /// 分级标识ID
        public let levelId: Int64

        /// 分级标识统计
        public let levelCnt: Int64

        /// 分级标识名称
        public let levelRiskName: String

        /// 分级标识分数
        public let levelRiskScore: Int64

        enum CodingKeys: String, CodingKey {
            case levelId = "LevelId"
            case levelCnt = "LevelCnt"
            case levelRiskName = "LevelRiskName"
            case levelRiskScore = "LevelRiskScore"
        }
    }

    /// 生成的建议的风险等级矩阵
    public struct SuggestRiskLevelMatrix: TCOutputModel {
        /// 矩阵
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevelMatrix: [SuggestRiskLevelMatrixItem]?

        enum CodingKeys: String, CodingKey {
            case riskLevelMatrix = "RiskLevelMatrix"
        }
    }

    /// 建议生成的二位矩阵的第二层
    public struct SuggestRiskLevelMatrixItem: TCOutputModel {
        /// 分类分级等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveLevel: RiskMatrixLevel?

        /// 脆弱项等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vulnerabilityLevel: RiskMatrixLevel?

        /// 风险名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskName: String?

        /// 分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskScore: Float?

        enum CodingKeys: String, CodingKey {
            case sensitiveLevel = "SensitiveLevel"
            case vulnerabilityLevel = "VulnerabilityLevel"
            case riskName = "RiskName"
            case riskScore = "RiskScore"
        }
    }

    /// 评估模版的详情数据
    public struct TemplateInfo: TCOutputModel {
        /// 模版id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateId: Int64?

        /// 模版名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateName: String?

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
        }
    }

    /// 数据资产报告-涉敏top的资产
    public struct TopAsset: TCOutputModel {
        /// 分级名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let levelName: String?

        /// top数据信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topStat: [TopAssetStat]?

        enum CodingKeys: String, CodingKey {
            case levelName = "LevelName"
            case topStat = "TopStat"
        }
    }

    /// 设敏top资产的信息
    public struct TopAssetStat: TCOutputModel {
        /// 数据源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceId: String?

        /// db_name
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subData: String?

        /// 敏感个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sensitiveCnt: Int64?

        enum CodingKeys: String, CodingKey {
            case dataSourceId = "DataSourceId"
            case subData = "SubData"
            case sensitiveCnt = "SensitiveCnt"
        }
    }
}
