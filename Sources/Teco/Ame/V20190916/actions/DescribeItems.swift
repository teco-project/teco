//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Ame {
    /// DescribeItems请求参数结构体
    public struct DescribeItemsRequest: TCPaginatedRequest {
        /// offset (Default = 0)，(当前页-1) * Limit
        public let offset: UInt64

        /// 条数，必须大于0，最大值为30
        public let limit: UInt64

        /// （电台/歌单）ID，CategoryId和CategoryCode两个必传1个，可以从<a href="https://cloud.tencent.com/document/product/1155/40109">获取分类内容（Station）列表接口</a>中获取。
        public let categoryId: String?

        /// （电台/歌单）ID，CategoryId和CategoryCode两个必传1个，可以从<a href="https://cloud.tencent.com/document/product/1155/40109">获取分类内容（Station）列表接口</a>中获取。
        public let categoryCode: String?

        public init(offset: UInt64, limit: UInt64, categoryId: String? = nil, categoryCode: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.categoryId = categoryId
            self.categoryCode = categoryCode
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case categoryId = "CategoryId"
            case categoryCode = "CategoryCode"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeItemsResponse) -> DescribeItemsRequest? {
            guard response.haveMore > 0 else {
                return nil
            }
            return DescribeItemsRequest(offset: self.offset + .init(response.getItems().count), limit: self.limit, categoryId: self.categoryId, categoryCode: self.categoryCode)
        }
    }

    /// DescribeItems返回参数结构体
    public struct DescribeItemsResponse: TCPaginatedResponse {
        /// 分页偏移量
        public let offset: UInt64

        /// 当前页歌曲数量
        public let size: UInt64

        /// 总数据条数
        public let total: UInt64

        /// 剩余数量（total-offset-size），通过这个值判断是否
        /// 还有下一页
        public let haveMore: UInt64

        /// Items 歌曲列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [Item]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case size = "Size"
            case total = "Total"
            case haveMore = "HaveMore"
            case items = "Items"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Item] {
            self.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 获取分类内容下歌曲列表
    ///
    /// 该服务后续会停用，不再建议使用
    @inlinable
    public func describeItems(_ input: DescribeItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeItemsResponse> {
        self.client.execute(action: "DescribeItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取分类内容下歌曲列表
    ///
    /// 该服务后续会停用，不再建议使用
    @inlinable
    public func describeItems(_ input: DescribeItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeItemsResponse {
        try await self.client.execute(action: "DescribeItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取分类内容下歌曲列表
    ///
    /// 该服务后续会停用，不再建议使用
    @inlinable
    public func describeItems(offset: UInt64, limit: UInt64, categoryId: String? = nil, categoryCode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeItemsResponse> {
        let input = DescribeItemsRequest(offset: offset, limit: limit, categoryId: categoryId, categoryCode: categoryCode)
        return self.client.execute(action: "DescribeItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取分类内容下歌曲列表
    ///
    /// 该服务后续会停用，不再建议使用
    @inlinable
    public func describeItems(offset: UInt64, limit: UInt64, categoryId: String? = nil, categoryCode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeItemsResponse {
        let input = DescribeItemsRequest(offset: offset, limit: limit, categoryId: categoryId, categoryCode: categoryCode)
        return try await self.client.execute(action: "DescribeItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取分类内容下歌曲列表
    ///
    /// 该服务后续会停用，不再建议使用
    @inlinable
    public func describeItemsPaginated(_ input: DescribeItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [Item])> {
        self.client.paginate(input: input, region: region, command: self.describeItems, logger: logger, on: eventLoop)
    }

    /// 获取分类内容下歌曲列表
    ///
    /// 该服务后续会停用，不再建议使用
    @inlinable @discardableResult
    public func describeItemsPaginated(_ input: DescribeItemsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeItemsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeItems, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取分类内容下歌曲列表
    ///
    /// 该服务后续会停用，不再建议使用
    @inlinable
    public func describeItemsPaginator(_ input: DescribeItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<DescribeItemsRequest, DescribeItemsResponse>.ResultSequence, responses: TCClient.Paginator<DescribeItemsRequest, DescribeItemsResponse>.ResponseSequence) {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeItems, logger: logger, on: eventLoop)
    }
}
