//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ame {
    /// DescribeKTVMusicTags请求参数结构体
    public struct DescribeKTVMusicTagsRequest: TCRequestModel {
        public init () {
        }
    }
    
    /// DescribeKTVMusicTags返回参数结构体
    public struct DescribeKTVMusicTagsResponse: TCResponseModel {
        /// 标签分组列表
        public let tagGroupSet: [KTVMusicTagGroup]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case tagGroupSet = "TagGroupSet"
            case requestId = "RequestId"
        }
    }
    
    /// 获取直播互动曲库标签信息
    ///
    /// 获取直播互动曲库标签分组信息和标签信息
    @inlinable
    public func describeKTVMusicTags(_ input: DescribeKTVMusicTagsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeKTVMusicTagsResponse > {
        self.client.execute(action: "DescribeKTVMusicTags", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取直播互动曲库标签信息
    ///
    /// 获取直播互动曲库标签分组信息和标签信息
    @inlinable
    public func describeKTVMusicTags(_ input: DescribeKTVMusicTagsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVMusicTagsResponse {
        try await self.client.execute(action: "DescribeKTVMusicTags", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取直播互动曲库标签信息
    ///
    /// 获取直播互动曲库标签分组信息和标签信息
    @inlinable
    public func describeKTVMusicTags(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeKTVMusicTagsResponse > {
        self.describeKTVMusicTags(DescribeKTVMusicTagsRequest(), logger: logger, on: eventLoop)
    }
    
    /// 获取直播互动曲库标签信息
    ///
    /// 获取直播互动曲库标签分组信息和标签信息
    @inlinable
    public func describeKTVMusicTags(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVMusicTagsResponse {
        try await self.describeKTVMusicTags(DescribeKTVMusicTagsRequest(), logger: logger, on: eventLoop)
    }
}
