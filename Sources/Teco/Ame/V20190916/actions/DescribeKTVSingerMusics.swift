//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ame {
    /// DescribeKTVSingerMusics请求参数结构体
    public struct DescribeKTVSingerMusicsRequest: TCRequestModel {
        /// 歌手id
        public let singerId: String

        /// 分页偏移量，默认值：0。
        public let offset: Int64?

        /// 分页返回的记录条数，默认值：50。将返回第 Offset 到第 Offset+Limit-1 条。
        public let limit: Int64?

        public init(singerId: String, offset: Int64? = nil, limit: Int64? = nil) {
            self.singerId = singerId
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case singerId = "SingerId"
            case offset = "Offset"
            case limit = "Limit"
        }
    }

    /// DescribeKTVSingerMusics返回参数结构体
    public struct DescribeKTVSingerMusicsResponse: TCResponseModel {
        /// 总曲目数
        public let totalCount: Int64

        /// KTV 曲目列表
        public let ktvMusicInfoSet: [KTVMusicBaseInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case ktvMusicInfoSet = "KTVMusicInfoSet"
            case requestId = "RequestId"
        }
    }

    /// 获取歌手下歌曲列表
    ///
    /// 根据歌手id，返回该歌手下歌曲列表。
    @inlinable
    public func describeKTVSingerMusics(_ input: DescribeKTVSingerMusicsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKTVSingerMusicsResponse> {
        self.client.execute(action: "DescribeKTVSingerMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取歌手下歌曲列表
    ///
    /// 根据歌手id，返回该歌手下歌曲列表。
    @inlinable
    public func describeKTVSingerMusics(_ input: DescribeKTVSingerMusicsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVSingerMusicsResponse {
        try await self.client.execute(action: "DescribeKTVSingerMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取歌手下歌曲列表
    ///
    /// 根据歌手id，返回该歌手下歌曲列表。
    @inlinable
    public func describeKTVSingerMusics(singerId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKTVSingerMusicsResponse> {
        let input = DescribeKTVSingerMusicsRequest(singerId: singerId, offset: offset, limit: limit)
        return self.client.execute(action: "DescribeKTVSingerMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取歌手下歌曲列表
    ///
    /// 根据歌手id，返回该歌手下歌曲列表。
    @inlinable
    public func describeKTVSingerMusics(singerId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVSingerMusicsResponse {
        let input = DescribeKTVSingerMusicsRequest(singerId: singerId, offset: offset, limit: limit)
        return try await self.client.execute(action: "DescribeKTVSingerMusics", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
