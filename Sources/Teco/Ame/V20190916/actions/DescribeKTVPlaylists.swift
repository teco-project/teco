//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Ame {
    /// DescribeKTVPlaylists请求参数结构体
    public struct DescribeKTVPlaylistsRequest: TCPaginatedRequest {
        /// 歌单类型，取值有：
        /// ·OfficialRec：官方推荐
        /// ·Normal：自定义
        /// 当该字段未填时，默认为取OfficialRec
        public let type: String?

        /// 分页返回的起始偏移量，默认值：0。将返回第 Offset 到第 Offset+Limit-1 条。
        /// 取值范围：Offset + Limit 不超过5000
        public let offset: Int64?

        /// 分页返回的记录条数，默认值：50。将返回第 Offset 到第 Offset+Limit-1 条。
        /// 取值范围：Offset + Limit 不超过5000
        public let limit: Int64?

        public init(type: String? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.type = type
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeKTVPlaylistsResponse) -> DescribeKTVPlaylistsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeKTVPlaylistsRequest(type: self.type, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeKTVPlaylists返回参数结构体
    public struct DescribeKTVPlaylistsResponse: TCPaginatedResponse {
        /// 推荐歌单列表
        public let playlistBaseInfoSet: [KTVPlaylistBaseInfo]

        /// 推荐歌单列表总数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case playlistBaseInfoSet = "PlaylistBaseInfoSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [KTVPlaylistBaseInfo] {
            self.playlistBaseInfoSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取直播互动曲库推荐歌单列表
    ///
    /// 获取直播互动曲库推荐歌单列表。
    @inlinable
    public func describeKTVPlaylists(_ input: DescribeKTVPlaylistsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKTVPlaylistsResponse> {
        self.client.execute(action: "DescribeKTVPlaylists", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取直播互动曲库推荐歌单列表
    ///
    /// 获取直播互动曲库推荐歌单列表。
    @inlinable
    public func describeKTVPlaylists(_ input: DescribeKTVPlaylistsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVPlaylistsResponse {
        try await self.client.execute(action: "DescribeKTVPlaylists", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取直播互动曲库推荐歌单列表
    ///
    /// 获取直播互动曲库推荐歌单列表。
    @inlinable
    public func describeKTVPlaylists(type: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKTVPlaylistsResponse> {
        self.describeKTVPlaylists(.init(type: type, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取直播互动曲库推荐歌单列表
    ///
    /// 获取直播互动曲库推荐歌单列表。
    @inlinable
    public func describeKTVPlaylists(type: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKTVPlaylistsResponse {
        try await self.describeKTVPlaylists(.init(type: type, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取直播互动曲库推荐歌单列表
    ///
    /// 获取直播互动曲库推荐歌单列表。
    @inlinable
    public func describeKTVPlaylistsPaginated(_ input: DescribeKTVPlaylistsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [KTVPlaylistBaseInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeKTVPlaylists, logger: logger, on: eventLoop)
    }

    /// 获取直播互动曲库推荐歌单列表
    ///
    /// 获取直播互动曲库推荐歌单列表。
    @inlinable @discardableResult
    public func describeKTVPlaylistsPaginated(_ input: DescribeKTVPlaylistsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeKTVPlaylistsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeKTVPlaylists, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取直播互动曲库推荐歌单列表
    ///
    /// 获取直播互动曲库推荐歌单列表。
    ///
    /// - Returns: `AsyncSequence`s of `KTVPlaylistBaseInfo` and `DescribeKTVPlaylistsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeKTVPlaylistsPaginator(_ input: DescribeKTVPlaylistsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeKTVPlaylistsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeKTVPlaylists, logger: logger, on: eventLoop)
    }
}
