//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTemError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case actionReadTimeout = "InternalError.ActionReadTimeout"
            case addNewNodeError = "InternalError.AddNewNodeError"
            case createApmResourceError = "InternalError.CreateApmResourceError"
            case createConfigDataError = "InternalError.CreateConfigDataError"
            case createEksClusterError = "InternalError.CreateEksClusterError"
            case createLogConfigError = "InternalError.CreateLogConfigError"
            case createServiceError = "InternalError.CreateServiceError"
            case defaultInternalError = "InternalError.DefaultInternalError"
            case deleteIngressError = "InternalError.DeleteIngressError"
            case deleteLogConfigError = "InternalError.DeleteLogConfigError"
            case deleteServiceError = "InternalError.DeleteServiceError"
            case deployVersionError = "InternalError.DeployVersionError"
            case describeConfigDataError = "InternalError.DescribeConfigDataError"
            case describeConfigDataListError = "InternalError.DescribeConfigDataListError"
            case describeIngressError = "InternalError.DescribeIngressError"
            case describeLogConfigError = "InternalError.DescribeLogConfigError"
            case describeLogConfigListError = "InternalError.DescribeLogConfigListError"
            case describeRunPodListError = "InternalError.DescribeRunPodListError"
            case describeServiceError = "InternalError.DescribeServiceError"
            case describeServiceIngressError = "InternalError.DescribeServiceIngressError"
            case describeServiceListError = "InternalError.DescribeServiceListError"
            case modifyConfigDataError = "InternalError.ModifyConfigDataError"
            case modifyLogConfigError = "InternalError.ModifyLogConfigError"
            case restartApplicationError = "InternalError.RestartApplicationError"
            case stopApplicationError = "InternalError.StopApplicationError"
            case tagInterfaceError = "InternalError.TagInterfaceError"
            case updateIngressError = "InternalError.UpdateIngressError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 请求响应超时。
        public static var actionReadTimeout: InternalError {
            InternalError(.actionReadTimeout)
        }
        
        /// 添加子网/虚拟节点异常。
        public static var addNewNodeError: InternalError {
            InternalError(.addNewNodeError)
        }
        
        /// 创建apm资源失败。
        public static var createApmResourceError: InternalError {
            InternalError(.createApmResourceError)
        }
        
        /// 创建配置失败。
        public static var createConfigDataError: InternalError {
            InternalError(.createConfigDataError)
        }
        
        /// 底层集群创建失败。
        public static var createEksClusterError: InternalError {
            InternalError(.createEksClusterError)
        }
        
        public static var createLogConfigError: InternalError {
            InternalError(.createLogConfigError)
        }
        
        /// 创建服务失败。
        public static var createServiceError: InternalError {
            InternalError(.createServiceError)
        }
        
        /// 服务器繁忙,请稍后再试。
        public static var defaultInternalError: InternalError {
            InternalError(.defaultInternalError)
        }
        
        /// 删除 ingress 失败。
        public static var deleteIngressError: InternalError {
            InternalError(.deleteIngressError)
        }
        
        public static var deleteLogConfigError: InternalError {
            InternalError(.deleteLogConfigError)
        }
        
        /// 删除应用失败。
        public static var deleteServiceError: InternalError {
            InternalError(.deleteServiceError)
        }
        
        /// 版本部署调用失败。
        public static var deployVersionError: InternalError {
            InternalError(.deployVersionError)
        }
        
        /// 查询配置详情失败。
        public static var describeConfigDataError: InternalError {
            InternalError(.describeConfigDataError)
        }
        
        /// 查询配置列表失败。
        public static var describeConfigDataListError: InternalError {
            InternalError(.describeConfigDataListError)
        }
        
        /// 查询 ingress 失败。
        public static var describeIngressError: InternalError {
            InternalError(.describeIngressError)
        }
        
        public static var describeLogConfigError: InternalError {
            InternalError(.describeLogConfigError)
        }
        
        public static var describeLogConfigListError: InternalError {
            InternalError(.describeLogConfigListError)
        }
        
        /// 查询实例信息失败。
        public static var describeRunPodListError: InternalError {
            InternalError(.describeRunPodListError)
        }
        
        /// 查询service失败。
        public static var describeServiceError: InternalError {
            InternalError(.describeServiceError)
        }
        
        /// 查询服务关联的 ingress 失败。
        public static var describeServiceIngressError: InternalError {
            InternalError(.describeServiceIngressError)
        }
        
        /// 查询service列表失败。
        public static var describeServiceListError: InternalError {
            InternalError(.describeServiceListError)
        }
        
        /// 修改配置失败。
        public static var modifyConfigDataError: InternalError {
            InternalError(.modifyConfigDataError)
        }
        
        public static var modifyLogConfigError: InternalError {
            InternalError(.modifyLogConfigError)
        }
        
        /// 重启失败。
        public static var restartApplicationError: InternalError {
            InternalError(.restartApplicationError)
        }
        
        /// 停止应用失败。
        public static var stopApplicationError: InternalError {
            InternalError(.stopApplicationError)
        }
        
        public static var tagInterfaceError: InternalError {
            InternalError(.tagInterfaceError)
        }
        
        /// 更新 ingress 失败。
        public static var updateIngressError: InternalError {
            InternalError(.updateIngressError)
        }
    }
}

extension TCTemError.InternalError: Equatable {
    public static func == (lhs: TCTemError.InternalError, rhs: TCTemError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTemError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTemError.InternalError {
    public func toTemError() -> TCTemError {
        guard let code = TCTemError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTemError(code, context: self.context)
    }
}