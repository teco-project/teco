//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTemError {
    public struct InvalidParameterValue: TCTemErrorType {
        enum Code: String {
            case apmNotBind = "InvalidParameterValue.ApmNotBind"
            case applicationAccessServiceReachMaximum = "InvalidParameterValue.ApplicationAccessServiceReachMaximum"
            case applicationServiceAlreadyExist = "InvalidParameterValue.ApplicationServiceAlreadyExist"
            case applicationServiceNotFound = "InvalidParameterValue.ApplicationServiceNotFound"
            case atLeastOneScalerRuleShouldBeApplied = "InvalidParameterValue.AtLeastOneScalerRuleShouldBeApplied"
            case autoScalerLargerThanOne = "InvalidParameterValue.AutoScalerLargerThanOne"
            case autoScalerNameInvalid = "InvalidParameterValue.AutoScalerNameInvalid"
            case cannotOverWriteOtherApplicationService = "InvalidParameterValue.CannotOverWriteOtherApplicationService"
            case cannotUpdateServiceByBothMethods = "InvalidParameterValue.CannotUpdateServiceByBothMethods"
            case configDataAlreadyExist = "InvalidParameterValue.ConfigDataAlreadyExist"
            case configDataInvalid = "InvalidParameterValue.ConfigDataInvalid"
            case createNamespaceUnsupportRegionError = "InvalidParameterValue.CreateNamespaceUnsupportRegionError"
            case cronHpaReplicasInvalid = "InvalidParameterValue.CronHpaReplicasInvalid"
            case dailyCreateNamespaceReachMaximum = "InvalidParameterValue.DailyCreateNamespaceReachMaximum"
            case disableScalerBeforeDelete = "InvalidParameterValue.DisableScalerBeforeDelete"
            case environmentNameImmutable = "InvalidParameterValue.EnvironmentNameImmutable"
            case hpaMetricsInvalid = "InvalidParameterValue.HpaMetricsInvalid"
            case hpaMinMaxInvalid = "InvalidParameterValue.HpaMinMaxInvalid"
            case hpaThresholdInvalid = "InvalidParameterValue.HpaThresholdInvalid"
            case ingressRewriteRequiredHttpsEnable = "InvalidParameterValue.IngressRewriteRequiredHttpsEnable"
            case invalidCronScalerPeriod = "InvalidParameterValue.InvalidCronScalerPeriod"
            case invalidDeployVersion = "InvalidParameterValue.InvalidDeployVersion"
            case invalidEksServiceType = "InvalidParameterValue.InvalidEksServiceType"
            case invalidEnvName = "InvalidParameterValue.InvalidEnvName"
            case invalidEnvValue = "InvalidParameterValue.InvalidEnvValue"
            case invalidMountPath = "InvalidParameterValue.InvalidMountPath"
            case invalidServiceName = "InvalidParameterValue.InvalidServiceName"
            case invalidTenantInfo = "InvalidParameterValue.InvalidTenantInfo"
            case jdkVersionRequired = "InvalidParameterValue.JdkVersionRequired"
            case logConfigAlreadyExist = "InvalidParameterValue.LogConfigAlreadyExist"
            case mustProvidePortMappingRules = "InvalidParameterValue.MustProvidePortMappingRules"
            case namespaceDuplicateError = "InvalidParameterValue.NamespaceDuplicateError"
            case namespaceNotBelongToAppid = "InvalidParameterValue.NamespaceNotBelongToAppid"
            case namespaceNotFound = "InvalidParameterValue.NamespaceNotFound"
            case namespaceReachMaximum = "InvalidParameterValue.NamespaceReachMaximum"
            case namespaceResourceReachMaximum = "InvalidParameterValue.NamespaceResourceReachMaximum"
            case osNotSupport = "InvalidParameterValue.OsNotSupport"
            case portDuplicateError = "InvalidParameterValue.PortDuplicateError"
            case portIsReserved = "InvalidParameterValue.PortIsReserved"
            case postStartNotValid = "InvalidParameterValue.PostStartNotValid"
            case publicRepoTypeParameterError = "InvalidParameterValue.PublicRepoTypeParameterError"
            case registryNotBind = "InvalidParameterValue.RegistryNotBind"
            case scalerNameDuplicated = "InvalidParameterValue.ScalerNameDuplicated"
            case serviceFoundRunningVersion = "InvalidParameterValue.ServiceFoundRunningVersion"
            case serviceLowerCase = "InvalidParameterValue.ServiceLowerCase"
            case serviceNameDuplicateError = "InvalidParameterValue.ServiceNameDuplicateError"
            case serviceNotBelongToAppid = "InvalidParameterValue.ServiceNotBelongToAppid"
            case servicePodReachMaximum = "InvalidParameterValue.ServicePodReachMaximum"
            case serviceReachMaximum = "InvalidParameterValue.ServiceReachMaximum"
            case serviceUseReserveSuffix = "InvalidParameterValue.ServiceUseReserveSuffix"
            case tcrEntInstanceNameNotValid = "InvalidParameterValue.TcrEntInstanceNameNotValid"
            case temIdInvalid = "InvalidParameterValue.TemIdInvalid"
            case traitsTracingNotSupported = "InvalidParameterValue.TraitsTracingNotSupported"
            case versionLengthLimit = "InvalidParameterValue.VersionLengthLimit"
            case versionLowerCase = "InvalidParameterValue.VersionLowerCase"
            case versionRouteRateNotZero = "InvalidParameterValue.VersionRouteRateNotZero"
            case vpcInvalid = "InvalidParameterValue.VpcInvalid"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// APM 没有与当前环境绑定。
        public static var apmNotBind: InvalidParameterValue {
            InvalidParameterValue(.apmNotBind)
        }

        /// 应用访问配置服务数量达到上限。
        public static var applicationAccessServiceReachMaximum: InvalidParameterValue {
            InvalidParameterValue(.applicationAccessServiceReachMaximum)
        }

        /// 已存在同名访问方式。
        public static var applicationServiceAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.applicationServiceAlreadyExist)
        }

        /// 没有找到该访问方式。
        public static var applicationServiceNotFound: InvalidParameterValue {
            InvalidParameterValue(.applicationServiceNotFound)
        }

        /// 请至少启用一种弹性规则。
        public static var atLeastOneScalerRuleShouldBeApplied: InvalidParameterValue {
            InvalidParameterValue(.atLeastOneScalerRuleShouldBeApplied)
        }

        /// 只支持绑定一种弹性伸缩。
        public static var autoScalerLargerThanOne: InvalidParameterValue {
            InvalidParameterValue(.autoScalerLargerThanOne)
        }

        /// 弹性规则名称不合法, 长度必须小于20。
        public static var autoScalerNameInvalid: InvalidParameterValue {
            InvalidParameterValue(.autoScalerNameInvalid)
        }

        /// 不能覆盖其他应用的访问方式。
        public static var cannotOverWriteOtherApplicationService: InvalidParameterValue {
            InvalidParameterValue(.cannotOverWriteOtherApplicationService)
        }

        /// 不能同时使用全量以及单条更新。
        public static var cannotUpdateServiceByBothMethods: InvalidParameterValue {
            InvalidParameterValue(.cannotUpdateServiceByBothMethods)
        }

        /// 配置已存在。
        public static var configDataAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.configDataAlreadyExist)
        }

        /// 配置不合法。
        public static var configDataInvalid: InvalidParameterValue {
            InvalidParameterValue(.configDataInvalid)
        }

        /// 创建环境createRegion参数错误。
        public static var createNamespaceUnsupportRegionError: InvalidParameterValue {
            InvalidParameterValue(.createNamespaceUnsupportRegionError)
        }

        /// 定时弹性伸缩目标实例数不合法。
        public static var cronHpaReplicasInvalid: InvalidParameterValue {
            InvalidParameterValue(.cronHpaReplicasInvalid)
        }

        /// 每日环境创建次数超过上限。
        public static var dailyCreateNamespaceReachMaximum: InvalidParameterValue {
            InvalidParameterValue(.dailyCreateNamespaceReachMaximum)
        }

        /// 弹性伸缩启用中，请停用后再删除。
        public static var disableScalerBeforeDelete: InvalidParameterValue {
            InvalidParameterValue(.disableScalerBeforeDelete)
        }

        /// 环境名称不可变。
        public static var environmentNameImmutable: InvalidParameterValue {
            InvalidParameterValue(.environmentNameImmutable)
        }

        /// 弹性伸缩指标不合法。
        public static var hpaMetricsInvalid: InvalidParameterValue {
            InvalidParameterValue(.hpaMetricsInvalid)
        }

        /// 弹性伸缩最小值/最大值不合法。
        public static var hpaMinMaxInvalid: InvalidParameterValue {
            InvalidParameterValue(.hpaMinMaxInvalid)
        }

        /// 弹性伸缩阈值不合法。
        public static var hpaThresholdInvalid: InvalidParameterValue {
            InvalidParameterValue(.hpaThresholdInvalid)
        }

        /// 访问配置重定向需要启用 HTTPS。
        public static var ingressRewriteRequiredHttpsEnable: InvalidParameterValue {
            InvalidParameterValue(.ingressRewriteRequiredHttpsEnable)
        }

        /// 无效的定时伸缩周期。
        public static var invalidCronScalerPeriod: InvalidParameterValue {
            InvalidParameterValue(.invalidCronScalerPeriod)
        }

        /// 版本号格式非法。
        public static var invalidDeployVersion: InvalidParameterValue {
            InvalidParameterValue(.invalidDeployVersion)
        }

        /// 访问类型不支持。
        public static var invalidEksServiceType: InvalidParameterValue {
            InvalidParameterValue(.invalidEksServiceType)
        }

        /// 环境变量名非法，要求有由字母、数字，"."，"_" 和 "-" 组成，不能由数字开头。
        public static var invalidEnvName: InvalidParameterValue {
            InvalidParameterValue(.invalidEnvName)
        }

        /// 环境变量长度不能超过1000。
        public static var invalidEnvValue: InvalidParameterValue {
            InvalidParameterValue(.invalidEnvValue)
        }

        /// 挂载路径不合法，不能为 /app。
        public static var invalidMountPath: InvalidParameterValue {
            InvalidParameterValue(.invalidMountPath)
        }

        /// 应用名格式非法。
        public static var invalidServiceName: InvalidParameterValue {
            InvalidParameterValue(.invalidServiceName)
        }

        /// 无法识别租户信息。
        public static var invalidTenantInfo: InvalidParameterValue {
            InvalidParameterValue(.invalidTenantInfo)
        }

        /// JDK 版本不能为空。
        public static var jdkVersionRequired: InvalidParameterValue {
            InvalidParameterValue(.jdkVersionRequired)
        }

        /// LogConfig 配置已存在。
        public static var logConfigAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.logConfigAlreadyExist)
        }

        /// 必须提供PortMapping规则。
        public static var mustProvidePortMappingRules: InvalidParameterValue {
            InvalidParameterValue(.mustProvidePortMappingRules)
        }

        /// 环境重复。
        public static var namespaceDuplicateError: InvalidParameterValue {
            InvalidParameterValue(.namespaceDuplicateError)
        }

        /// 命名空间不属于用户。
        public static var namespaceNotBelongToAppid: InvalidParameterValue {
            InvalidParameterValue(.namespaceNotBelongToAppid)
        }

        /// 环境不存在。
        public static var namespaceNotFound: InvalidParameterValue {
            InvalidParameterValue(.namespaceNotFound)
        }

        /// 环境创建失败，达到上限。
        public static var namespaceReachMaximum: InvalidParameterValue {
            InvalidParameterValue(.namespaceReachMaximum)
        }

        /// 环境资源创建失败，达到上限。
        public static var namespaceResourceReachMaximum: InvalidParameterValue {
            InvalidParameterValue(.namespaceResourceReachMaximum)
        }

        /// 操作系统不支持。
        public static var osNotSupport: InvalidParameterValue {
            InvalidParameterValue(.osNotSupport)
        }

        /// 服务端口映射重复。
        public static var portDuplicateError: InvalidParameterValue {
            InvalidParameterValue(.portDuplicateError)
        }

        /// 服务端口是保留端口。
        public static var portIsReserved: InvalidParameterValue {
            InvalidParameterValue(.portIsReserved)
        }

        /// post start 不合法。
        public static var postStartNotValid: InvalidParameterValue {
            InvalidParameterValue(.postStartNotValid)
        }

        /// 公有镜像参数错误。
        public static var publicRepoTypeParameterError: InvalidParameterValue {
            InvalidParameterValue(.publicRepoTypeParameterError)
        }

        /// 注册中心没有与当前环境绑定。
        public static var registryNotBind: InvalidParameterValue {
            InvalidParameterValue(.registryNotBind)
        }

        /// 弹性伸缩名称已存在。
        public static var scalerNameDuplicated: InvalidParameterValue {
            InvalidParameterValue(.scalerNameDuplicated)
        }

        /// 应用存在正在运行的实例。
        public static var serviceFoundRunningVersion: InvalidParameterValue {
            InvalidParameterValue(.serviceFoundRunningVersion)
        }

        /// 服务名必须小写。
        public static var serviceLowerCase: InvalidParameterValue {
            InvalidParameterValue(.serviceLowerCase)
        }

        /// 应用名已存在。
        public static var serviceNameDuplicateError: InvalidParameterValue {
            InvalidParameterValue(.serviceNameDuplicateError)
        }

        /// 应用不属于此账户。
        public static var serviceNotBelongToAppid: InvalidParameterValue {
            InvalidParameterValue(.serviceNotBelongToAppid)
        }

        /// 实例创建失败，达到上限。
        public static var servicePodReachMaximum: InvalidParameterValue {
            InvalidParameterValue(.servicePodReachMaximum)
        }

        /// 应用创建失败，达到上限。
        public static var serviceReachMaximum: InvalidParameterValue {
            InvalidParameterValue(.serviceReachMaximum)
        }

        /// 服务名使用了保留后缀。
        public static var serviceUseReserveSuffix: InvalidParameterValue {
            InvalidParameterValue(.serviceUseReserveSuffix)
        }

        /// 企业版 TCR 实例名称不合法。
        public static var tcrEntInstanceNameNotValid: InvalidParameterValue {
            InvalidParameterValue(.tcrEntInstanceNameNotValid)
        }

        /// 不是合法的TEM ID。
        public static var temIdInvalid: InvalidParameterValue {
            InvalidParameterValue(.temIdInvalid)
        }

        /// 非 JAVA 应用不支持链路追踪特性。
        public static var traitsTracingNotSupported: InvalidParameterValue {
            InvalidParameterValue(.traitsTracingNotSupported)
        }

        /// version 不能超过128位。
        public static var versionLengthLimit: InvalidParameterValue {
            InvalidParameterValue(.versionLengthLimit)
        }

        /// 版本必须小写。
        public static var versionLowerCase: InvalidParameterValue {
            InvalidParameterValue(.versionLowerCase)
        }

        /// 版本的路由流量不为0。
        public static var versionRouteRateNotZero: InvalidParameterValue {
            InvalidParameterValue(.versionRouteRateNotZero)
        }

        /// vpc错误, 与环境vpc不一致。
        public static var vpcInvalid: InvalidParameterValue {
            InvalidParameterValue(.vpcInvalid)
        }

        public func asTemError() -> TCTemError {
            let code: TCTemError.Code
            switch self.error {
            case .apmNotBind:
                code = .invalidParameterValue_ApmNotBind
            case .applicationAccessServiceReachMaximum:
                code = .invalidParameterValue_ApplicationAccessServiceReachMaximum
            case .applicationServiceAlreadyExist:
                code = .invalidParameterValue_ApplicationServiceAlreadyExist
            case .applicationServiceNotFound:
                code = .invalidParameterValue_ApplicationServiceNotFound
            case .atLeastOneScalerRuleShouldBeApplied:
                code = .invalidParameterValue_AtLeastOneScalerRuleShouldBeApplied
            case .autoScalerLargerThanOne:
                code = .invalidParameterValue_AutoScalerLargerThanOne
            case .autoScalerNameInvalid:
                code = .invalidParameterValue_AutoScalerNameInvalid
            case .cannotOverWriteOtherApplicationService:
                code = .invalidParameterValue_CannotOverWriteOtherApplicationService
            case .cannotUpdateServiceByBothMethods:
                code = .invalidParameterValue_CannotUpdateServiceByBothMethods
            case .configDataAlreadyExist:
                code = .invalidParameterValue_ConfigDataAlreadyExist
            case .configDataInvalid:
                code = .invalidParameterValue_ConfigDataInvalid
            case .createNamespaceUnsupportRegionError:
                code = .invalidParameterValue_CreateNamespaceUnsupportRegionError
            case .cronHpaReplicasInvalid:
                code = .invalidParameterValue_CronHpaReplicasInvalid
            case .dailyCreateNamespaceReachMaximum:
                code = .invalidParameterValue_DailyCreateNamespaceReachMaximum
            case .disableScalerBeforeDelete:
                code = .invalidParameterValue_DisableScalerBeforeDelete
            case .environmentNameImmutable:
                code = .invalidParameterValue_EnvironmentNameImmutable
            case .hpaMetricsInvalid:
                code = .invalidParameterValue_HpaMetricsInvalid
            case .hpaMinMaxInvalid:
                code = .invalidParameterValue_HpaMinMaxInvalid
            case .hpaThresholdInvalid:
                code = .invalidParameterValue_HpaThresholdInvalid
            case .ingressRewriteRequiredHttpsEnable:
                code = .invalidParameterValue_IngressRewriteRequiredHttpsEnable
            case .invalidCronScalerPeriod:
                code = .invalidParameterValue_InvalidCronScalerPeriod
            case .invalidDeployVersion:
                code = .invalidParameterValue_InvalidDeployVersion
            case .invalidEksServiceType:
                code = .invalidParameterValue_InvalidEksServiceType
            case .invalidEnvName:
                code = .invalidParameterValue_InvalidEnvName
            case .invalidEnvValue:
                code = .invalidParameterValue_InvalidEnvValue
            case .invalidMountPath:
                code = .invalidParameterValue_InvalidMountPath
            case .invalidServiceName:
                code = .invalidParameterValue_InvalidServiceName
            case .invalidTenantInfo:
                code = .invalidParameterValue_InvalidTenantInfo
            case .jdkVersionRequired:
                code = .invalidParameterValue_JdkVersionRequired
            case .logConfigAlreadyExist:
                code = .invalidParameterValue_LogConfigAlreadyExist
            case .mustProvidePortMappingRules:
                code = .invalidParameterValue_MustProvidePortMappingRules
            case .namespaceDuplicateError:
                code = .invalidParameterValue_NamespaceDuplicateError
            case .namespaceNotBelongToAppid:
                code = .invalidParameterValue_NamespaceNotBelongToAppid
            case .namespaceNotFound:
                code = .invalidParameterValue_NamespaceNotFound
            case .namespaceReachMaximum:
                code = .invalidParameterValue_NamespaceReachMaximum
            case .namespaceResourceReachMaximum:
                code = .invalidParameterValue_NamespaceResourceReachMaximum
            case .osNotSupport:
                code = .invalidParameterValue_OsNotSupport
            case .portDuplicateError:
                code = .invalidParameterValue_PortDuplicateError
            case .portIsReserved:
                code = .invalidParameterValue_PortIsReserved
            case .postStartNotValid:
                code = .invalidParameterValue_PostStartNotValid
            case .publicRepoTypeParameterError:
                code = .invalidParameterValue_PublicRepoTypeParameterError
            case .registryNotBind:
                code = .invalidParameterValue_RegistryNotBind
            case .scalerNameDuplicated:
                code = .invalidParameterValue_ScalerNameDuplicated
            case .serviceFoundRunningVersion:
                code = .invalidParameterValue_ServiceFoundRunningVersion
            case .serviceLowerCase:
                code = .invalidParameterValue_ServiceLowerCase
            case .serviceNameDuplicateError:
                code = .invalidParameterValue_ServiceNameDuplicateError
            case .serviceNotBelongToAppid:
                code = .invalidParameterValue_ServiceNotBelongToAppid
            case .servicePodReachMaximum:
                code = .invalidParameterValue_ServicePodReachMaximum
            case .serviceReachMaximum:
                code = .invalidParameterValue_ServiceReachMaximum
            case .serviceUseReserveSuffix:
                code = .invalidParameterValue_ServiceUseReserveSuffix
            case .tcrEntInstanceNameNotValid:
                code = .invalidParameterValue_TcrEntInstanceNameNotValid
            case .temIdInvalid:
                code = .invalidParameterValue_TemIdInvalid
            case .traitsTracingNotSupported:
                code = .invalidParameterValue_TraitsTracingNotSupported
            case .versionLengthLimit:
                code = .invalidParameterValue_VersionLengthLimit
            case .versionLowerCase:
                code = .invalidParameterValue_VersionLowerCase
            case .versionRouteRateNotZero:
                code = .invalidParameterValue_VersionRouteRateNotZero
            case .vpcInvalid:
                code = .invalidParameterValue_VpcInvalid
            }
            return TCTemError(code, context: self.context)
        }
    }
}
