//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTemError {
    public struct ResourceNotFound: TCTemErrorType {
        enum Code: String {
            case configDataNotFound = "ResourceNotFound.ConfigDataNotFound"
            case interfaceNotFound = "ResourceNotFound.InterfaceNotFound"
            case logConfigNotFound = "ResourceNotFound.LogConfigNotFound"
            case microserviceOffline = "ResourceNotFound.MicroserviceOffline"
            case namespaceNotFound = "ResourceNotFound.NamespaceNotFound"
            case serviceNotFound = "ResourceNotFound.ServiceNotFound"
            case serviceRunningVersionNotFound = "ResourceNotFound.ServiceRunningVersionNotFound"
            case versionNamespaceNotFound = "ResourceNotFound.VersionNamespaceNotFound"
            case versionServiceNotFound = "ResourceNotFound.VersionServiceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 配置不存在。
        public static var configDataNotFound: ResourceNotFound {
            ResourceNotFound(.configDataNotFound)
        }

        /// 未提供该接口。
        public static var interfaceNotFound: ResourceNotFound {
            ResourceNotFound(.interfaceNotFound)
        }

        /// 日志配置不存在。
        public static var logConfigNotFound: ResourceNotFound {
            ResourceNotFound(.logConfigNotFound)
        }

        /// 目标微服务已离线。
        public static var microserviceOffline: ResourceNotFound {
            ResourceNotFound(.microserviceOffline)
        }

        /// 环境不存在。
        public static var namespaceNotFound: ResourceNotFound {
            ResourceNotFound(.namespaceNotFound)
        }

        /// 找不到应用。
        public static var serviceNotFound: ResourceNotFound {
            ResourceNotFound(.serviceNotFound)
        }

        /// 找不到运行的服务实例。
        public static var serviceRunningVersionNotFound: ResourceNotFound {
            ResourceNotFound(.serviceRunningVersionNotFound)
        }

        /// 找不到版本对应的环境。
        public static var versionNamespaceNotFound: ResourceNotFound {
            ResourceNotFound(.versionNamespaceNotFound)
        }

        /// 找不到版本对应的应用。
        public static var versionServiceNotFound: ResourceNotFound {
            ResourceNotFound(.versionServiceNotFound)
        }

        public func asTemError() -> TCTemError {
            let code: TCTemError.Code
            switch self.error {
            case .configDataNotFound:
                code = .resourceNotFound_ConfigDataNotFound
            case .interfaceNotFound:
                code = .resourceNotFound_InterfaceNotFound
            case .logConfigNotFound:
                code = .resourceNotFound_LogConfigNotFound
            case .microserviceOffline:
                code = .resourceNotFound_MicroserviceOffline
            case .namespaceNotFound:
                code = .resourceNotFound_NamespaceNotFound
            case .serviceNotFound:
                code = .resourceNotFound_ServiceNotFound
            case .serviceRunningVersionNotFound:
                code = .resourceNotFound_ServiceRunningVersionNotFound
            case .versionNamespaceNotFound:
                code = .resourceNotFound_VersionNamespaceNotFound
            case .versionServiceNotFound:
                code = .resourceNotFound_VersionServiceNotFound
            }
            return TCTemError(code, context: self.context)
        }
    }
}
