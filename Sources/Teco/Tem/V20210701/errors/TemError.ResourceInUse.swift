//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTemError {
    public struct ResourceInUse: TCTemErrorType {
        enum Code: String {
            case environmentAlreadyLocked = "ResourceInUse.EnvironmentAlreadyLocked"
            case resourceAlreadyLocked = "ResourceInUse.ResourceAlreadyLocked"
            case resourceAlreadyUsed = "ResourceInUse.ResourceAlreadyUsed"
            case serviceDeploying = "ResourceInUse.ServiceDeploying"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 环境已锁定。
        public static var environmentAlreadyLocked: ResourceInUse {
            ResourceInUse(.environmentAlreadyLocked)
        }

        /// 你操作的资源已被其他操作占用，请稍后重试。
        public static var resourceAlreadyLocked: ResourceInUse {
            ResourceInUse(.resourceAlreadyLocked)
        }

        /// 资源已绑定。
        public static var resourceAlreadyUsed: ResourceInUse {
            ResourceInUse(.resourceAlreadyUsed)
        }

        /// 服务部署中。
        public static var serviceDeploying: ResourceInUse {
            ResourceInUse(.serviceDeploying)
        }

        public func asTemError() -> TCTemError {
            let code: TCTemError.Code
            switch self.error {
            case .environmentAlreadyLocked:
                code = .resourceInUse_EnvironmentAlreadyLocked
            case .resourceAlreadyLocked:
                code = .resourceInUse_ResourceAlreadyLocked
            case .resourceAlreadyUsed:
                code = .resourceInUse_ResourceAlreadyUsed
            case .serviceDeploying:
                code = .resourceInUse_ServiceDeploying
            }
            return TCTemError(code, context: self.context)
        }
    }
}
