//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTemError {
    public struct MissingParameter: TCErrorType {
        enum Code: String {
            case autoScalerNameNull = "MissingParameter.AutoScalerNameNull"
            case deployModeNull = "MissingParameter.DeployModeNull"
            case deployVersionNull = "MissingParameter.DeployVersionNull"
            case environmentNameNull = "MissingParameter.EnvironmentNameNull"
            case logsetOrTopicNull = "MissingParameter.LogsetOrTopicNull"
            case minMaxNumNull = "MissingParameter.MinMaxNumNull"
            case namespaceIdNull = "MissingParameter.NamespaceIdNull"
            case pkgNameNull = "MissingParameter.PkgNameNull"
            case scalerIdNull = "MissingParameter.ScalerIdNull"
            case serviceIdNull = "MissingParameter.ServiceIdNull"
            case svcRepoNotReady = "MissingParameter.SvcRepoNotReady"
            case tcrEntInstanceNameNull = "MissingParameter.TcrEntInstanceNameNull"
            case vpcServiceSubnetNull = "MissingParameter.VpcServiceSubnetNull"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var autoScalerNameNull: MissingParameter {
            MissingParameter(.autoScalerNameNull)
        }
        
        public static var deployModeNull: MissingParameter {
            MissingParameter(.deployModeNull)
        }
        
        /// 部署版本不能为空。
        public static var deployVersionNull: MissingParameter {
            MissingParameter(.deployVersionNull)
        }
        
        public static var environmentNameNull: MissingParameter {
            MissingParameter(.environmentNameNull)
        }
        
        public static var logsetOrTopicNull: MissingParameter {
            MissingParameter(.logsetOrTopicNull)
        }
        
        public static var minMaxNumNull: MissingParameter {
            MissingParameter(.minMaxNumNull)
        }
        
        /// 环境ID不能为空。
        public static var namespaceIdNull: MissingParameter {
            MissingParameter(.namespaceIdNull)
        }
        
        /// 包名不能为空。
        public static var pkgNameNull: MissingParameter {
            MissingParameter(.pkgNameNull)
        }
        
        public static var scalerIdNull: MissingParameter {
            MissingParameter(.scalerIdNull)
        }
        
        /// 服务ID不能为空。
        public static var serviceIdNull: MissingParameter {
            MissingParameter(.serviceIdNull)
        }
        
        /// 镜像仓库还未就绪。
        public static var svcRepoNotReady: MissingParameter {
            MissingParameter(.svcRepoNotReady)
        }
        
        public static var tcrEntInstanceNameNull: MissingParameter {
            MissingParameter(.tcrEntInstanceNameNull)
        }
        
        /// vpc内访问类型子网ID不能为空。
        public static var vpcServiceSubnetNull: MissingParameter {
            MissingParameter(.vpcServiceSubnetNull)
        }
    }
}

extension TCTemError.MissingParameter: Equatable {
    public static func == (lhs: TCTemError.MissingParameter, rhs: TCTemError.MissingParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTemError.MissingParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTemError.MissingParameter {
    public func toTemError() -> TCTemError {
        guard let code = TCTemError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTemError(code, context: self.context)
    }
}