//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTemError {
    public struct MissingParameter: TCTemErrorType {
        enum Code: String {
            case autoScalerNameNull = "MissingParameter.AutoScalerNameNull"
            case deployModeNull = "MissingParameter.DeployModeNull"
            case deployVersionNull = "MissingParameter.DeployVersionNull"
            case environmentNameNull = "MissingParameter.EnvironmentNameNull"
            case imgRepoNull = "MissingParameter.ImgRepoNull"
            case logsetOrTopicNull = "MissingParameter.LogsetOrTopicNull"
            case minMaxNumNull = "MissingParameter.MinMaxNumNull"
            case namespaceIdNull = "MissingParameter.NamespaceIdNull"
            case pkgNameNull = "MissingParameter.PkgNameNull"
            case scalerIdNull = "MissingParameter.ScalerIdNull"
            case serviceIdNull = "MissingParameter.ServiceIdNull"
            case svcRepoNotReady = "MissingParameter.SvcRepoNotReady"
            case tcrEntInstanceNameNull = "MissingParameter.TcrEntInstanceNameNull"
            case vpcServiceSubnetNull = "MissingParameter.VpcServiceSubnetNull"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 弹性规则名称不能为空。
        public static var autoScalerNameNull: MissingParameter {
            MissingParameter(.autoScalerNameNull)
        }

        /// 部署方式不能为空。
        public static var deployModeNull: MissingParameter {
            MissingParameter(.deployModeNull)
        }

        /// 部署版本不能为空。
        public static var deployVersionNull: MissingParameter {
            MissingParameter(.deployVersionNull)
        }

        /// 环境名称不能为空。
        public static var environmentNameNull: MissingParameter {
            MissingParameter(.environmentNameNull)
        }

        /// 镜像仓库不能为空。
        public static var imgRepoNull: MissingParameter {
            MissingParameter(.imgRepoNull)
        }

        /// logset 和 topic 不能为空。
        public static var logsetOrTopicNull: MissingParameter {
            MissingParameter(.logsetOrTopicNull)
        }

        /// 弹性伸缩配置最大值/最小值不能为空。
        public static var minMaxNumNull: MissingParameter {
            MissingParameter(.minMaxNumNull)
        }

        /// 环境ID不能为空。
        public static var namespaceIdNull: MissingParameter {
            MissingParameter(.namespaceIdNull)
        }

        /// 包名不能为空。
        public static var pkgNameNull: MissingParameter {
            MissingParameter(.pkgNameNull)
        }

        /// 弹性规则ID不能为空。
        public static var scalerIdNull: MissingParameter {
            MissingParameter(.scalerIdNull)
        }

        /// 服务ID不能为空。
        public static var serviceIdNull: MissingParameter {
            MissingParameter(.serviceIdNull)
        }

        /// 镜像仓库还未就绪。
        ///
        /// 请等待镜像仓库就绪
        public static var svcRepoNotReady: MissingParameter {
            MissingParameter(.svcRepoNotReady)
        }

        /// 企业版 TCR 实例名称不能为空。
        public static var tcrEntInstanceNameNull: MissingParameter {
            MissingParameter(.tcrEntInstanceNameNull)
        }

        /// vpc内访问类型子网ID不能为空。
        public static var vpcServiceSubnetNull: MissingParameter {
            MissingParameter(.vpcServiceSubnetNull)
        }

        public func asTemError() -> TCTemError {
            let code: TCTemError.Code
            switch self.error {
            case .autoScalerNameNull:
                code = .missingParameter_AutoScalerNameNull
            case .deployModeNull:
                code = .missingParameter_DeployModeNull
            case .deployVersionNull:
                code = .missingParameter_DeployVersionNull
            case .environmentNameNull:
                code = .missingParameter_EnvironmentNameNull
            case .imgRepoNull:
                code = .missingParameter_ImgRepoNull
            case .logsetOrTopicNull:
                code = .missingParameter_LogsetOrTopicNull
            case .minMaxNumNull:
                code = .missingParameter_MinMaxNumNull
            case .namespaceIdNull:
                code = .missingParameter_NamespaceIdNull
            case .pkgNameNull:
                code = .missingParameter_PkgNameNull
            case .scalerIdNull:
                code = .missingParameter_ScalerIdNull
            case .serviceIdNull:
                code = .missingParameter_ServiceIdNull
            case .svcRepoNotReady:
                code = .missingParameter_SvcRepoNotReady
            case .tcrEntInstanceNameNull:
                code = .missingParameter_TcrEntInstanceNameNull
            case .vpcServiceSubnetNull:
                code = .missingParameter_VpcServiceSubnetNull
            }
            return TCTemError(code, context: self.context)
        }
    }
}
