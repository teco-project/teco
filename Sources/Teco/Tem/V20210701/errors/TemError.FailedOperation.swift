//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTemError {
    public struct FailedOperation: TCTemErrorType {
        enum Code: String {
            case actionReadTimeout = "FailedOperation.ActionReadTimeout"
            case createServiceError = "FailedOperation.CreateServiceError"
            case defaultInternalError = "FailedOperation.DefaultInternalError"
            case deleteServiceError = "FailedOperation.DeleteServiceError"
            case describeIngressListError = "FailedOperation.DescribeIngressListError"
            case describeRunPodListError = "FailedOperation.DescribeRunPodListError"
            case describeServiceError = "FailedOperation.DescribeServiceError"
            case describeServiceListError = "FailedOperation.DescribeServiceListError"
            case updateIngressError = "FailedOperation.UpdateIngressError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 请求响应超时。
        public static var actionReadTimeout: FailedOperation {
            FailedOperation(.actionReadTimeout)
        }

        /// 创建服务失败。
        public static var createServiceError: FailedOperation {
            FailedOperation(.createServiceError)
        }

        /// 服务器繁忙,请稍后再试。
        public static var defaultInternalError: FailedOperation {
            FailedOperation(.defaultInternalError)
        }

        /// 删除应用失败。
        public static var deleteServiceError: FailedOperation {
            FailedOperation(.deleteServiceError)
        }

        /// 查询 ingress 列表失败。
        public static var describeIngressListError: FailedOperation {
            FailedOperation(.describeIngressListError)
        }

        /// 查询实例信息失败。
        public static var describeRunPodListError: FailedOperation {
            FailedOperation(.describeRunPodListError)
        }

        /// 查询service失败。
        public static var describeServiceError: FailedOperation {
            FailedOperation(.describeServiceError)
        }

        /// 查询service列表失败。
        public static var describeServiceListError: FailedOperation {
            FailedOperation(.describeServiceListError)
        }

        /// 更新 ingress 失败。
        public static var updateIngressError: FailedOperation {
            FailedOperation(.updateIngressError)
        }

        public func asTemError() -> TCTemError {
            let code: TCTemError.Code
            switch self.error {
            case .actionReadTimeout:
                code = .failedOperation_ActionReadTimeout
            case .createServiceError:
                code = .failedOperation_CreateServiceError
            case .defaultInternalError:
                code = .failedOperation_DefaultInternalError
            case .deleteServiceError:
                code = .failedOperation_DeleteServiceError
            case .describeIngressListError:
                code = .failedOperation_DescribeIngressListError
            case .describeRunPodListError:
                code = .failedOperation_DescribeRunPodListError
            case .describeServiceError:
                code = .failedOperation_DescribeServiceError
            case .describeServiceListError:
                code = .failedOperation_DescribeServiceListError
            case .updateIngressError:
                code = .failedOperation_UpdateIngressError
            }
            return TCTemError(code, context: self.context)
        }
    }
}
