//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tem {
    /// 查询 Ingress 规则
    @inlinable
    public func describeIngress(_ input: DescribeIngressRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeIngressResponse > {
        self.client.execute(action: "DescribeIngress", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询 Ingress 规则
    @inlinable
    public func describeIngress(_ input: DescribeIngressRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIngressResponse {
        try await self.client.execute(action: "DescribeIngress", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeIngress请求参数结构体
    public struct DescribeIngressRequest: TCRequestModel {
        /// 环境ID
        public let environmentId: String
        
        /// 环境namespace
        public let clusterNamespace: String
        
        /// ingress 规则名
        public let ingressName: String
        
        /// 来源渠道
        public let sourceChannel: Int64?
        
        public init (environmentId: String, clusterNamespace: String, ingressName: String, sourceChannel: Int64?) {
            self.environmentId = environmentId
            self.clusterNamespace = clusterNamespace
            self.ingressName = ingressName
            self.sourceChannel = sourceChannel
        }
        
        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case clusterNamespace = "ClusterNamespace"
            case ingressName = "IngressName"
            case sourceChannel = "SourceChannel"
        }
    }
    
    /// DescribeIngress返回参数结构体
    public struct DescribeIngressResponse: TCResponseModel {
        /// Ingress 规则配置
        public let result: IngressInfo
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
