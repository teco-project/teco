//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tem {
    /// CreateApplication请求参数结构体
    public struct CreateApplicationRequest: TCRequestModel {
        /// 应用名
        public let applicationName: String

        /// 描述
        public let description: String

        /// 是否使用默认镜像服务 1-是，0-否
        public let useDefaultImageService: Int64?

        /// 如果是绑定仓库，绑定的仓库类型，0-个人版，1-企业版
        public let repoType: Int64?

        /// 企业版镜像服务的实例id
        public let instanceId: String?

        /// 绑定镜像服务器地址
        public let repoServer: String?

        /// 绑定镜像仓库名
        public let repoName: String?

        /// 来源渠道
        public let sourceChannel: Int64?

        /// 应用所在子网
        public let subnetList: [String]?

        /// 编程语言
        /// - JAVA
        /// - OTHER
        public let codingLanguage: String?

        /// 部署方式
        /// - IMAGE
        /// - JAR
        /// - WAR
        public let deployMode: String?

        /// 是否开启 Java 应用的 APM 自动上报功能，1 表示启用；0 表示关闭
        public let enableTracing: Int64?

        /// 使用默认镜像服务额外参数
        public let useDefaultImageServiceParameters: UseDefaultRepoParameters?

        /// 标签
        public let tags: [Tag]?

        public init(applicationName: String, description: String, useDefaultImageService: Int64? = nil, repoType: Int64? = nil, instanceId: String? = nil, repoServer: String? = nil, repoName: String? = nil, sourceChannel: Int64? = nil, subnetList: [String]? = nil, codingLanguage: String? = nil, deployMode: String? = nil, enableTracing: Int64? = nil, useDefaultImageServiceParameters: UseDefaultRepoParameters? = nil, tags: [Tag]? = nil) {
            self.applicationName = applicationName
            self.description = description
            self.useDefaultImageService = useDefaultImageService
            self.repoType = repoType
            self.instanceId = instanceId
            self.repoServer = repoServer
            self.repoName = repoName
            self.sourceChannel = sourceChannel
            self.subnetList = subnetList
            self.codingLanguage = codingLanguage
            self.deployMode = deployMode
            self.enableTracing = enableTracing
            self.useDefaultImageServiceParameters = useDefaultImageServiceParameters
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case description = "Description"
            case useDefaultImageService = "UseDefaultImageService"
            case repoType = "RepoType"
            case instanceId = "InstanceId"
            case repoServer = "RepoServer"
            case repoName = "RepoName"
            case sourceChannel = "SourceChannel"
            case subnetList = "SubnetList"
            case codingLanguage = "CodingLanguage"
            case deployMode = "DeployMode"
            case enableTracing = "EnableTracing"
            case useDefaultImageServiceParameters = "UseDefaultImageServiceParameters"
            case tags = "Tags"
        }
    }

    /// CreateApplication返回参数结构体
    public struct CreateApplicationResponse: TCResponseModel {
        /// 服务code
        public let result: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 创建应用
    @inlinable
    public func createApplication(_ input: CreateApplicationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApplicationResponse> {
        self.client.execute(action: "CreateApplication", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建应用
    @inlinable
    public func createApplication(_ input: CreateApplicationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApplicationResponse {
        try await self.client.execute(action: "CreateApplication", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建应用
    @inlinable
    public func createApplication(applicationName: String, description: String, useDefaultImageService: Int64? = nil, repoType: Int64? = nil, instanceId: String? = nil, repoServer: String? = nil, repoName: String? = nil, sourceChannel: Int64? = nil, subnetList: [String]? = nil, codingLanguage: String? = nil, deployMode: String? = nil, enableTracing: Int64? = nil, useDefaultImageServiceParameters: UseDefaultRepoParameters? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApplicationResponse> {
        self.createApplication(.init(applicationName: applicationName, description: description, useDefaultImageService: useDefaultImageService, repoType: repoType, instanceId: instanceId, repoServer: repoServer, repoName: repoName, sourceChannel: sourceChannel, subnetList: subnetList, codingLanguage: codingLanguage, deployMode: deployMode, enableTracing: enableTracing, useDefaultImageServiceParameters: useDefaultImageServiceParameters, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 创建应用
    @inlinable
    public func createApplication(applicationName: String, description: String, useDefaultImageService: Int64? = nil, repoType: Int64? = nil, instanceId: String? = nil, repoServer: String? = nil, repoName: String? = nil, sourceChannel: Int64? = nil, subnetList: [String]? = nil, codingLanguage: String? = nil, deployMode: String? = nil, enableTracing: Int64? = nil, useDefaultImageServiceParameters: UseDefaultRepoParameters? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApplicationResponse {
        try await self.createApplication(.init(applicationName: applicationName, description: description, useDefaultImageService: useDefaultImageService, repoType: repoType, instanceId: instanceId, repoServer: repoServer, repoName: repoName, sourceChannel: sourceChannel, subnetList: subnetList, codingLanguage: codingLanguage, deployMode: deployMode, enableTracing: enableTracing, useDefaultImageServiceParameters: useDefaultImageServiceParameters, tags: tags), region: region, logger: logger, on: eventLoop)
    }
}
