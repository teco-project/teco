//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tem {
    /// 绑定云资源
    @inlinable
    public func createResource(_ input: CreateResourceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateResourceResponse > {
        self.client.execute(action: "CreateResource", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 绑定云资源
    @inlinable
    public func createResource(_ input: CreateResourceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateResourceResponse {
        try await self.client.execute(action: "CreateResource", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateResource请求参数结构体
    public struct CreateResourceRequest: TCRequestModel {
        /// 环境 Id
        public let environmentId: String
        
        /// 资源类型，目前支持文件系统：CFS；日志服务：CLS；注册中心：TSE_SRE
        public let resourceType: String
        
        /// 资源 Id
        public let resourceId: String
        
        /// 来源渠道
        public let sourceChannel: Int64?
        
        /// 资源来源，目前支持：existing，已有资源；creating，自动创建
        public let resourceFrom: String?
        
        /// 设置 resource 的额外配置
        public let resourceConfig: String?
        
        public init (environmentId: String, resourceType: String, resourceId: String, sourceChannel: Int64?, resourceFrom: String?, resourceConfig: String?) {
            self.environmentId = environmentId
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.sourceChannel = sourceChannel
            self.resourceFrom = resourceFrom
            self.resourceConfig = resourceConfig
        }
        
        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case resourceType = "ResourceType"
            case resourceId = "ResourceId"
            case sourceChannel = "SourceChannel"
            case resourceFrom = "ResourceFrom"
            case resourceConfig = "ResourceConfig"
        }
    }
    
    /// CreateResource返回参数结构体
    public struct CreateResourceResponse: TCResponseModel {
        /// 成功与否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
