//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tem {
    /// DescribeEnvironment请求参数结构体
    public struct DescribeEnvironmentRequest: TCRequestModel {
        /// 命名空间id
        public let environmentId: String
        
        /// 来源Channel
        public let sourceChannel: Int64?
        
        public init (environmentId: String, sourceChannel: Int64? = nil) {
            self.environmentId = environmentId
            self.sourceChannel = sourceChannel
        }
        
        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case sourceChannel = "SourceChannel"
        }
    }
    
    /// DescribeEnvironment返回参数结构体
    public struct DescribeEnvironmentResponse: TCResponseModel {
        /// 环境信息
        public let result: NamespaceInfo
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 获取环境基础信息
    @inlinable
    public func describeEnvironment(_ input: DescribeEnvironmentRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeEnvironmentResponse > {
        self.client.execute(action: "DescribeEnvironment", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取环境基础信息
    @inlinable
    public func describeEnvironment(_ input: DescribeEnvironmentRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEnvironmentResponse {
        try await self.client.execute(action: "DescribeEnvironment", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取环境基础信息
    @inlinable
    public func describeEnvironment(environmentId: String, sourceChannel: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeEnvironmentResponse > {
        self.describeEnvironment(DescribeEnvironmentRequest(environmentId: environmentId, sourceChannel: sourceChannel), logger: logger, on: eventLoop)
    }
    
    /// 获取环境基础信息
    @inlinable
    public func describeEnvironment(environmentId: String, sourceChannel: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEnvironmentResponse {
        try await self.describeEnvironment(DescribeEnvironmentRequest(environmentId: environmentId, sourceChannel: sourceChannel), logger: logger, on: eventLoop)
    }
}
