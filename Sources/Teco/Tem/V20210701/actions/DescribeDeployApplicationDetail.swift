//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tem {
    /// 获取分批发布详情
    ///
    /// 获取分批发布详情
    @inlinable
    public func describeDeployApplicationDetail(_ input: DescribeDeployApplicationDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDeployApplicationDetailResponse > {
        self.client.execute(action: "DescribeDeployApplicationDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取分批发布详情
    ///
    /// 获取分批发布详情
    @inlinable
    public func describeDeployApplicationDetail(_ input: DescribeDeployApplicationDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeployApplicationDetailResponse {
        try await self.client.execute(action: "DescribeDeployApplicationDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeDeployApplicationDetail请求参数结构体
    public struct DescribeDeployApplicationDetailRequest: TCRequestModel {
        /// 服务id
        public let applicationId: String?
        
        /// 环境id
        public let environmentId: String?
        
        /// 版本部署id
        public let versionId: String?
        
        public init (applicationId: String?, environmentId: String?, versionId: String?) {
            self.applicationId = applicationId
            self.environmentId = environmentId
            self.versionId = versionId
        }
        
        enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case environmentId = "EnvironmentId"
            case versionId = "VersionId"
        }
    }
    
    /// DescribeDeployApplicationDetail返回参数结构体
    public struct DescribeDeployApplicationDetailResponse: TCResponseModel {
        /// 分批发布结果详情
        public let result: TemDeployApplicationDetailInfo
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}