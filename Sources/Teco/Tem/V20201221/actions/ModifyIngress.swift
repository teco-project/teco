//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tem {
    /// 创建或者更新 Ingress 规则
    @inlinable
    public func modifyIngress(_ input: ModifyIngressRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyIngressResponse > {
        self.client.execute(action: "ModifyIngress", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建或者更新 Ingress 规则
    @inlinable
    public func modifyIngress(_ input: ModifyIngressRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyIngressResponse {
        try await self.client.execute(action: "ModifyIngress", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyIngress请求参数结构体
    public struct ModifyIngressRequest: TCRequestModel {
        /// Ingress 规则配置
        public let ingress: IngressInfo
        
        /// 来源渠道
        public let sourceChannel: Int64?
        
        public init (ingress: IngressInfo, sourceChannel: Int64?) {
            self.ingress = ingress
            self.sourceChannel = sourceChannel
        }
        
        enum CodingKeys: String, CodingKey {
            case ingress = "Ingress"
            case sourceChannel = "SourceChannel"
        }
    }
    
    /// ModifyIngress返回参数结构体
    public struct ModifyIngressResponse: TCResponseModel {
        /// 创建成功
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
