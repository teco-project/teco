//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tem {
    /// 重启实例
    @inlinable
    public func restartServiceRunPod(_ input: RestartServiceRunPodRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < RestartServiceRunPodResponse > {
        self.client.execute(action: "RestartServiceRunPod", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 重启实例
    @inlinable
    public func restartServiceRunPod(_ input: RestartServiceRunPodRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RestartServiceRunPodResponse {
        try await self.client.execute(action: "RestartServiceRunPod", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// RestartServiceRunPod请求参数结构体
    public struct RestartServiceRunPodRequest: TCRequestModel {
        /// 环境id
        public let namespaceId: String
        
        /// 服务名id
        public let serviceId: String
        
        /// 名字
        public let podName: String
        
        /// 单页条数
        public let limit: Int64?
        
        /// 分页下标
        public let offset: Int64?
        
        /// pod状态
        public let status: String?
        
        /// 来源渠道
        public let sourceChannel: Int64?
        
        public init (namespaceId: String, serviceId: String, podName: String, limit: Int64?, offset: Int64?, status: String?, sourceChannel: Int64?) {
            self.namespaceId = namespaceId
            self.serviceId = serviceId
            self.podName = podName
            self.limit = limit
            self.offset = offset
            self.status = status
            self.sourceChannel = sourceChannel
        }
        
        enum CodingKeys: String, CodingKey {
            case namespaceId = "NamespaceId"
            case serviceId = "ServiceId"
            case podName = "PodName"
            case limit = "Limit"
            case offset = "Offset"
            case status = "Status"
            case sourceChannel = "SourceChannel"
        }
    }
    
    /// RestartServiceRunPod返回参数结构体
    public struct RestartServiceRunPodResponse: TCResponseModel {
        /// 返回结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
