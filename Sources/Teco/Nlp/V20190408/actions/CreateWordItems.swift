//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// CreateWordItems请求参数结构体
    public struct CreateWordItemsRequest: TCRequestModel {
        /// 自定义词库ID。
        public let dictId: String

        /// 待添加的词条集合。
        public let wordItems: [WordItem]

        public init(dictId: String, wordItems: [WordItem]) {
            self.dictId = dictId
            self.wordItems = wordItems
        }

        enum CodingKeys: String, CodingKey {
            case dictId = "DictId"
            case wordItems = "WordItems"
        }
    }

    /// CreateWordItems返回参数结构体
    public struct CreateWordItemsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 新增自定义词库词条
    ///
    /// 向指定的词库中添加词条。
    @inlinable @discardableResult
    public func createWordItems(_ input: CreateWordItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWordItemsResponse> {
        self.client.execute(action: "CreateWordItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增自定义词库词条
    ///
    /// 向指定的词库中添加词条。
    @inlinable @discardableResult
    public func createWordItems(_ input: CreateWordItemsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWordItemsResponse {
        try await self.client.execute(action: "CreateWordItems", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增自定义词库词条
    ///
    /// 向指定的词库中添加词条。
    @inlinable @discardableResult
    public func createWordItems(dictId: String, wordItems: [WordItem], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWordItemsResponse> {
        self.createWordItems(.init(dictId: dictId, wordItems: wordItems), region: region, logger: logger, on: eventLoop)
    }

    /// 新增自定义词库词条
    ///
    /// 向指定的词库中添加词条。
    @inlinable @discardableResult
    public func createWordItems(dictId: String, wordItems: [WordItem], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWordItemsResponse {
        try await self.createWordItems(.init(dictId: dictId, wordItems: wordItems), region: region, logger: logger, on: eventLoop)
    }
}
