//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// ComposePoetry请求参数结构体
    public struct ComposePoetryRequest: TCRequestModel {
        /// 生成诗词的关键词。
        public let text: String

        /// 生成诗词的类型。0：藏头或藏身；1：藏头；2：藏身。默认为0。
        public let poetryType: Int64?

        /// 诗的体裁。0：五言律诗或七言律诗；5：五言律诗；7：七言律诗。默认为0。
        public let genre: Int64?

        public init(text: String, poetryType: Int64? = nil, genre: Int64? = nil) {
            self.text = text
            self.poetryType = poetryType
            self.genre = genre
        }

        enum CodingKeys: String, CodingKey {
            case text = "Text"
            case poetryType = "PoetryType"
            case genre = "Genre"
        }
    }

    /// ComposePoetry返回参数结构体
    public struct ComposePoetryResponse: TCResponseModel {
        /// 诗题，即输入的生成诗词的关键词。
        public let title: String

        /// 诗的内容。
        public let content: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case content = "Content"
            case requestId = "RequestId"
        }
    }

    /// 诗词生成
    ///
    /// 诗词生成接口利用现代的自然语言处理和深度学习技术，模仿了古代著名诗人的风格，为用户产生独特的诗词。用户只需输入的命题关键词，接口就能自动生成一首七言律诗或五言律诗。
    @inlinable
    public func composePoetry(_ input: ComposePoetryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ComposePoetryResponse> {
        self.client.execute(action: "ComposePoetry", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 诗词生成
    ///
    /// 诗词生成接口利用现代的自然语言处理和深度学习技术，模仿了古代著名诗人的风格，为用户产生独特的诗词。用户只需输入的命题关键词，接口就能自动生成一首七言律诗或五言律诗。
    @inlinable
    public func composePoetry(_ input: ComposePoetryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ComposePoetryResponse {
        try await self.client.execute(action: "ComposePoetry", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 诗词生成
    ///
    /// 诗词生成接口利用现代的自然语言处理和深度学习技术，模仿了古代著名诗人的风格，为用户产生独特的诗词。用户只需输入的命题关键词，接口就能自动生成一首七言律诗或五言律诗。
    @inlinable
    public func composePoetry(text: String, poetryType: Int64? = nil, genre: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ComposePoetryResponse> {
        self.composePoetry(.init(text: text, poetryType: poetryType, genre: genre), region: region, logger: logger, on: eventLoop)
    }

    /// 诗词生成
    ///
    /// 诗词生成接口利用现代的自然语言处理和深度学习技术，模仿了古代著名诗人的风格，为用户产生独特的诗词。用户只需输入的命题关键词，接口就能自动生成一首七言律诗或五言律诗。
    @inlinable
    public func composePoetry(text: String, poetryType: Int64? = nil, genre: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ComposePoetryResponse {
        try await self.composePoetry(.init(text: text, poetryType: poetryType, genre: genre), region: region, logger: logger, on: eventLoop)
    }
}
