//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// ClassifyContent请求参数结构体
    public struct ClassifyContentRequest: TCRequest {
        /// 待分类的文章的标题（仅支持UTF-8格式，不超过100字符）。
        public let title: String

        /// 待分类文章的内容, 每个元素对应一个段落。（仅支持UTF-8格式，文章内容长度总和不超过2000字符）
        public let content: [String]

        public init(title: String, content: [String]) {
            self.title = title
            self.content = content
        }

        enum CodingKeys: String, CodingKey {
            case title = "Title"
            case content = "Content"
        }
    }

    /// ClassifyContent返回参数结构体
    public struct ClassifyContentResponse: TCResponse {
        /// 一级分类。（请参见附录[三级分类体系表](https://cloud.tencent.com/document/product/271/94286)）
        public let firstClassification: Category

        /// 二级分类。（请参见附录[三级分类体系表](https://cloud.tencent.com/document/product/271/94286)）
        public let secondClassification: Category

        /// 三级分类。（请参见附录[三级分类体系表](https://cloud.tencent.com/document/product/271/94286)）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let thirdClassification: Category?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case firstClassification = "FirstClassification"
            case secondClassification = "SecondClassification"
            case thirdClassification = "ThirdClassification"
            case requestId = "RequestId"
        }
    }

    /// 文本分类V2
    ///
    /// 文本分类接口能够对用户输入的文章进行自动分类，将其映射到具体的类目上，用户只需要提供待分类的文本，而无需关注具体实现。该功能定义了一套较为完备的[三级分类体系](https://cloud.tencent.com/document/product/271/94286)，积累了数百万的语料，经过多轮迭代优化打造了较先进的深度学习模型，以保证效果不断提升。
    @inlinable
    public func classifyContent(_ input: ClassifyContentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ClassifyContentResponse> {
        self.client.execute(action: "ClassifyContent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 文本分类V2
    ///
    /// 文本分类接口能够对用户输入的文章进行自动分类，将其映射到具体的类目上，用户只需要提供待分类的文本，而无需关注具体实现。该功能定义了一套较为完备的[三级分类体系](https://cloud.tencent.com/document/product/271/94286)，积累了数百万的语料，经过多轮迭代优化打造了较先进的深度学习模型，以保证效果不断提升。
    @inlinable
    public func classifyContent(_ input: ClassifyContentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ClassifyContentResponse {
        try await self.client.execute(action: "ClassifyContent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 文本分类V2
    ///
    /// 文本分类接口能够对用户输入的文章进行自动分类，将其映射到具体的类目上，用户只需要提供待分类的文本，而无需关注具体实现。该功能定义了一套较为完备的[三级分类体系](https://cloud.tencent.com/document/product/271/94286)，积累了数百万的语料，经过多轮迭代优化打造了较先进的深度学习模型，以保证效果不断提升。
    @inlinable
    public func classifyContent(title: String, content: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ClassifyContentResponse> {
        self.classifyContent(.init(title: title, content: content), region: region, logger: logger, on: eventLoop)
    }

    /// 文本分类V2
    ///
    /// 文本分类接口能够对用户输入的文章进行自动分类，将其映射到具体的类目上，用户只需要提供待分类的文本，而无需关注具体实现。该功能定义了一套较为完备的[三级分类体系](https://cloud.tencent.com/document/product/271/94286)，积累了数百万的语料，经过多轮迭代优化打造了较先进的深度学习模型，以保证效果不断提升。
    @inlinable
    public func classifyContent(title: String, content: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ClassifyContentResponse {
        try await self.classifyContent(.init(title: title, content: content), region: region, logger: logger, on: eventLoop)
    }
}
