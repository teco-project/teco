//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// GenerateKeywordSentence请求参数结构体
    public struct GenerateKeywordSentenceRequest: TCRequest {
        /// 生成句子的关键词，关键词个数需不超过4个，中文关键词长度应不超过10字符，英文关键词长度不超过3个单词。关键词中不可包含标点符号。
        public let wordList: [String]

        /// 返回生成句子的个数。数量需>=1且<=5。
        /// （注意实际结果可能小于指定个数）
        public let number: Int64

        /// 指定生成句子的领域，支持领域如下：
        /// general：通用领域，支持中英文
        /// academic：学术领域，仅支持英文
        /// 默认为general（通用领域）。
        public let domain: String?

        public init(wordList: [String], number: Int64, domain: String? = nil) {
            self.wordList = wordList
            self.number = number
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case wordList = "WordList"
            case number = "Number"
            case domain = "Domain"
        }
    }

    /// GenerateKeywordSentence返回参数结构体
    public struct GenerateKeywordSentenceResponse: TCResponse {
        /// 生成的句子列表。
        public let keywordSentenceList: [KeywordSentence]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case keywordSentenceList = "KeywordSentenceList"
            case requestId = "RequestId"
        }
    }

    /// 句子生成
    ///
    /// 提取文本中的关键信息，生成简洁明了的关键句子，便于用户快速获取核心观点。
    @inlinable
    public func generateKeywordSentence(_ input: GenerateKeywordSentenceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GenerateKeywordSentenceResponse> {
        self.client.execute(action: "GenerateKeywordSentence", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 句子生成
    ///
    /// 提取文本中的关键信息，生成简洁明了的关键句子，便于用户快速获取核心观点。
    @inlinable
    public func generateKeywordSentence(_ input: GenerateKeywordSentenceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GenerateKeywordSentenceResponse {
        try await self.client.execute(action: "GenerateKeywordSentence", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 句子生成
    ///
    /// 提取文本中的关键信息，生成简洁明了的关键句子，便于用户快速获取核心观点。
    @inlinable
    public func generateKeywordSentence(wordList: [String], number: Int64, domain: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GenerateKeywordSentenceResponse> {
        self.generateKeywordSentence(.init(wordList: wordList, number: number, domain: domain), region: region, logger: logger, on: eventLoop)
    }

    /// 句子生成
    ///
    /// 提取文本中的关键信息，生成简洁明了的关键句子，便于用户快速获取核心观点。
    @inlinable
    public func generateKeywordSentence(wordList: [String], number: Int64, domain: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GenerateKeywordSentenceResponse {
        try await self.generateKeywordSentence(.init(wordList: wordList, number: number, domain: domain), region: region, logger: logger, on: eventLoop)
    }
}
