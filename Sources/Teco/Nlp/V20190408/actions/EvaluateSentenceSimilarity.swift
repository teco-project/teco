//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// EvaluateSentenceSimilarity请求参数结构体
    public struct EvaluateSentenceSimilarityRequest: TCRequest {
        /// 待分析的句子对数组。句子对应不超过1对，仅支持中文文本，原句子与目标句子均应不超过500字符。
        public let sentencePairList: [SentencePair]

        public init(sentencePairList: [SentencePair]) {
            self.sentencePairList = sentencePairList
        }

        enum CodingKeys: String, CodingKey {
            case sentencePairList = "SentencePairList"
        }
    }

    /// EvaluateSentenceSimilarity返回参数结构体
    public struct EvaluateSentenceSimilarityResponse: TCResponse {
        /// 每个句子对的相似度分值。
        public let scoreList: [Float]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case scoreList = "ScoreList"
            case requestId = "RequestId"
        }
    }

    /// 句子相似度V2
    ///
    /// 通过计算句子间的语义相似性，帮助您快速找到文本中重复或相似的句子，用于文本聚类、相似问题检索等应用场景。
    @inlinable
    public func evaluateSentenceSimilarity(_ input: EvaluateSentenceSimilarityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EvaluateSentenceSimilarityResponse> {
        self.client.execute(action: "EvaluateSentenceSimilarity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 句子相似度V2
    ///
    /// 通过计算句子间的语义相似性，帮助您快速找到文本中重复或相似的句子，用于文本聚类、相似问题检索等应用场景。
    @inlinable
    public func evaluateSentenceSimilarity(_ input: EvaluateSentenceSimilarityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EvaluateSentenceSimilarityResponse {
        try await self.client.execute(action: "EvaluateSentenceSimilarity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 句子相似度V2
    ///
    /// 通过计算句子间的语义相似性，帮助您快速找到文本中重复或相似的句子，用于文本聚类、相似问题检索等应用场景。
    @inlinable
    public func evaluateSentenceSimilarity(sentencePairList: [SentencePair], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<EvaluateSentenceSimilarityResponse> {
        self.evaluateSentenceSimilarity(.init(sentencePairList: sentencePairList), region: region, logger: logger, on: eventLoop)
    }

    /// 句子相似度V2
    ///
    /// 通过计算句子间的语义相似性，帮助您快速找到文本中重复或相似的句子，用于文本聚类、相似问题检索等应用场景。
    @inlinable
    public func evaluateSentenceSimilarity(sentencePairList: [SentencePair], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> EvaluateSentenceSimilarityResponse {
        try await self.evaluateSentenceSimilarity(.init(sentencePairList: sentencePairList), region: region, logger: logger, on: eventLoop)
    }
}
