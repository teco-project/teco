//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// SentenceCorrection请求参数结构体
    public struct SentenceCorrectionRequest: TCRequestModel {
        /// 待纠错的句子列表。可以以数组方式在一次请求中填写多个待纠错的句子。文本统一使用utf-8格式编码，每个中文句子的长度不超过150字符，每个英文句子的长度不超过100个单词，且数组长度需小于30，即句子总数需少于30句。
        public let textList: [String]

        public init(textList: [String]) {
            self.textList = textList
        }

        enum CodingKeys: String, CodingKey {
            case textList = "TextList"
        }
    }

    /// SentenceCorrection返回参数结构体
    public struct SentenceCorrectionResponse: TCResponseModel {
        /// 纠错结果列表。
        /// （注意仅展示错误句子的纠错结果，若句子无错则不展示，若全部待纠错句子都被认为无错，则可能返回数组为空）
        public let correctionList: [CorrectionItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case correctionList = "CorrectionList"
            case requestId = "RequestId"
        }
    }

    /// 句子纠错
    ///
    /// 智能识别并纠正句子中的语法、拼写、用词等错误，确保文本的准确性和可读性。
    @inlinable
    public func sentenceCorrection(_ input: SentenceCorrectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SentenceCorrectionResponse> {
        self.client.execute(action: "SentenceCorrection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 句子纠错
    ///
    /// 智能识别并纠正句子中的语法、拼写、用词等错误，确保文本的准确性和可读性。
    @inlinable
    public func sentenceCorrection(_ input: SentenceCorrectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SentenceCorrectionResponse {
        try await self.client.execute(action: "SentenceCorrection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 句子纠错
    ///
    /// 智能识别并纠正句子中的语法、拼写、用词等错误，确保文本的准确性和可读性。
    @inlinable
    public func sentenceCorrection(textList: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SentenceCorrectionResponse> {
        self.sentenceCorrection(.init(textList: textList), region: region, logger: logger, on: eventLoop)
    }

    /// 句子纠错
    ///
    /// 智能识别并纠正句子中的语法、拼写、用词等错误，确保文本的准确性和可读性。
    @inlinable
    public func sentenceCorrection(textList: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SentenceCorrectionResponse {
        try await self.sentenceCorrection(.init(textList: textList), region: region, logger: logger, on: eventLoop)
    }
}
