//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// AutoSummarization请求参数结构体
    public struct AutoSummarizationRequest: TCRequestModel {
        /// 待处理的文本（仅支持UTF-8格式，不超过2000字）
        public let text: String

        /// 指定摘要的长度上限（默认值为200）
        /// 注：为保证摘要的可读性，最终生成的摘要长度会低于指定的长度上限。
        public let length: UInt64?

        public init(text: String, length: UInt64? = nil) {
            self.text = text
            self.length = length
        }

        enum CodingKeys: String, CodingKey {
            case text = "Text"
            case length = "Length"
        }
    }

    /// AutoSummarization返回参数结构体
    public struct AutoSummarizationResponse: TCResponseModel {
        /// 文本摘要结果
        public let summary: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case summary = "Summary"
            case requestId = "RequestId"
        }
    }

    /// 自动摘要
    ///
    /// 利用人工智能算法，自动抽取文本中的关键信息并生成指定长度的文本摘要。可用于新闻标题生成、科技文献摘要生成和商品评论摘要等。
    @inlinable
    public func autoSummarization(_ input: AutoSummarizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AutoSummarizationResponse> {
        self.client.execute(action: "AutoSummarization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 自动摘要
    ///
    /// 利用人工智能算法，自动抽取文本中的关键信息并生成指定长度的文本摘要。可用于新闻标题生成、科技文献摘要生成和商品评论摘要等。
    @inlinable
    public func autoSummarization(_ input: AutoSummarizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AutoSummarizationResponse {
        try await self.client.execute(action: "AutoSummarization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 自动摘要
    ///
    /// 利用人工智能算法，自动抽取文本中的关键信息并生成指定长度的文本摘要。可用于新闻标题生成、科技文献摘要生成和商品评论摘要等。
    @inlinable
    public func autoSummarization(text: String, length: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AutoSummarizationResponse> {
        self.autoSummarization(.init(text: text, length: length), region: region, logger: logger, on: eventLoop)
    }

    /// 自动摘要
    ///
    /// 利用人工智能算法，自动抽取文本中的关键信息并生成指定长度的文本摘要。可用于新闻标题生成、科技文献摘要生成和商品评论摘要等。
    @inlinable
    public func autoSummarization(text: String, length: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AutoSummarizationResponse {
        try await self.autoSummarization(.init(text: text, length: length), region: region, logger: logger, on: eventLoop)
    }
}
