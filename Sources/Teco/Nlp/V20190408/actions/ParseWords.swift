//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// ParseWords请求参数结构体
    public struct ParseWordsRequest: TCRequestModel {
        /// 待分析的文本（支持中英文文本，不超过500字符）
        public let text: String

        public init(text: String) {
            self.text = text
        }

        enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    /// ParseWords返回参数结构体
    public struct ParseWordsResponse: TCResponseModel {
        /// 输入文本正则化的结果。（包括对英文文本中的开头和实体进行大写等）
        public let normalText: String

        /// 基础粒度分词和词性标注的结果。（请参见附录[词性表](https://cloud.tencent.com/document/product/271/36460)）
        public let basicParticiples: [BasicParticiple]

        /// 复合粒度分词和词性标注的结果。（请参见附录[词性表](https://cloud.tencent.com/document/product/271/36460)）
        public let compoundParticiples: [CompoundParticiple]

        /// 实体识别结果。（请参见附录[实体类型数据](https://cloud.tencent.com/document/product/271/90592)）
        public let entities: [Entity]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case normalText = "NormalText"
            case basicParticiples = "BasicParticiples"
            case compoundParticiples = "CompoundParticiples"
            case entities = "Entities"
            case requestId = "RequestId"
        }
    }

    /// 词法分析V2
    ///
    /// 通过精准地对文本进行分词、词性标注、命名实体识别等功能，助您更好地理解文本内容，挖掘出潜在的价值信息。
    @inlinable
    public func parseWords(_ input: ParseWordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ParseWordsResponse> {
        self.client.execute(action: "ParseWords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 词法分析V2
    ///
    /// 通过精准地对文本进行分词、词性标注、命名实体识别等功能，助您更好地理解文本内容，挖掘出潜在的价值信息。
    @inlinable
    public func parseWords(_ input: ParseWordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ParseWordsResponse {
        try await self.client.execute(action: "ParseWords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 词法分析V2
    ///
    /// 通过精准地对文本进行分词、词性标注、命名实体识别等功能，助您更好地理解文本内容，挖掘出潜在的价值信息。
    @inlinable
    public func parseWords(text: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ParseWordsResponse> {
        self.parseWords(.init(text: text), region: region, logger: logger, on: eventLoop)
    }

    /// 词法分析V2
    ///
    /// 通过精准地对文本进行分词、词性标注、命名实体识别等功能，助您更好地理解文本内容，挖掘出潜在的价值信息。
    @inlinable
    public func parseWords(text: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ParseWordsResponse {
        try await self.parseWords(.init(text: text), region: region, logger: logger, on: eventLoop)
    }
}
