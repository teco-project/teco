//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// TextWriting请求参数结构体
    public struct TextWritingRequest: TCRequestModel {
        /// 待续写的句子，文本统一使用utf-8格式编码，长度不超过200字符。
        public let text: String

        /// 待续写文本的语言类型，支持语言如下：
        /// zh：中文
        /// en：英文
        public let sourceLang: String

        /// 返回续写结果的个数。数量需>=1且<=5。
        /// （注意实际结果可能小于指定个数）
        public let number: Int64

        /// 指定续写领域，支持领域如下：
        /// general：通用领域，支持中英文补全
        /// academic：学术领域，仅支持英文补全
        /// 默认为general（通用领域）。
        public let domain: String?

        /// 指定续写风格，支持风格如下：
        /// science_fiction：科幻
        /// military_history：军事
        /// xuanhuan_wuxia：武侠
        /// urban_officialdom：职场
        /// 默认为xuanhuan_wuxia（武侠）。
        public let style: String?

        public init(text: String, sourceLang: String, number: Int64, domain: String? = nil, style: String? = nil) {
            self.text = text
            self.sourceLang = sourceLang
            self.number = number
            self.domain = domain
            self.style = style
        }

        enum CodingKeys: String, CodingKey {
            case text = "Text"
            case sourceLang = "SourceLang"
            case number = "Number"
            case domain = "Domain"
            case style = "Style"
        }
    }

    /// TextWriting返回参数结构体
    public struct TextWritingResponse: TCResponseModel {
        /// 续写结果列表。
        public let writingList: [Writing]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case writingList = "WritingList"
            case requestId = "RequestId"
        }
    }

    /// 文本补全
    ///
    /// 通过自动补全文本片段，帮助用户快速生成高质量、连贯的完整文本，提高创作效率。
    @inlinable
    public func textWriting(_ input: TextWritingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TextWritingResponse> {
        self.client.execute(action: "TextWriting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 文本补全
    ///
    /// 通过自动补全文本片段，帮助用户快速生成高质量、连贯的完整文本，提高创作效率。
    @inlinable
    public func textWriting(_ input: TextWritingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TextWritingResponse {
        try await self.client.execute(action: "TextWriting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 文本补全
    ///
    /// 通过自动补全文本片段，帮助用户快速生成高质量、连贯的完整文本，提高创作效率。
    @inlinable
    public func textWriting(text: String, sourceLang: String, number: Int64, domain: String? = nil, style: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TextWritingResponse> {
        self.textWriting(.init(text: text, sourceLang: sourceLang, number: number, domain: domain, style: style), region: region, logger: logger, on: eventLoop)
    }

    /// 文本补全
    ///
    /// 通过自动补全文本片段，帮助用户快速生成高质量、连贯的完整文本，提高创作效率。
    @inlinable
    public func textWriting(text: String, sourceLang: String, number: Int64, domain: String? = nil, style: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TextWritingResponse {
        try await self.textWriting(.init(text: text, sourceLang: sourceLang, number: number, domain: domain, style: style), region: region, logger: logger, on: eventLoop)
    }
}
