//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// TestingTextGeneration请求参数结构体
    public struct TestingTextGenerationRequest: TCRequest {
        /// 会话内容,按对话时间从旧到新在数组中排列。
        public let messages: [TextGenerationMessage]

        /// 模型名称，当前固定为TestingModel
        public let model: String?

        /// 会话id。
        public let queryId: String?

        /// 超参数temperature, 该参数用于控制生成文本中重复内容。取值区间为[0.0, 2.0], 非必要不建议使用, 不合理的取值会影响效果。默认为1.0。
        public let temperature: Float?

        /// 超参数top_p, 该参数用于控制生成文本的多样性。较小的"top_p"值会限制模型的选择范围，使生成的文本更加一致和确定性。较大的"top_p"值会扩大选择范围，使生成的文本更加多样化和随机。取值区间为[0.0, 1.0], 非必要不建议使用, 不合理的取值会影响效果。默认值为1.0。
        public let topP: Float?

        /// 超参数top_k,该参数用于控制生成文本的多样性和可控性，较小的"top_k"值会限制模型的选择范围，使生成的文本更加一致和确定性。较大的"top_k"值会扩大选择范围，使生成的文本更加多样化和随机。取值区间为[1, 100]，默认值 40。
        public let topK: Float?

        /// 重复惩罚项,该参数用于用于控制生成文本中重复内容。建议范围[1.0, 1.05]非必要不建议使用, 不合理的取值会影响效果。默认为1。
        public let repetitionPenalty: Float?

        /// 输出结果最大tokens数量。取值区间为(0, 1024]。默认值为768。
        public let outputSeqLen: Int64?

        /// 输入文本的最大 tokens 数量。取值区间为(0, 1024]。默认值为256。
        public let maxInputSeqLen: Int64?

        public init(messages: [TextGenerationMessage], model: String? = nil, queryId: String? = nil, temperature: Float? = nil, topP: Float? = nil, topK: Float? = nil, repetitionPenalty: Float? = nil, outputSeqLen: Int64? = nil, maxInputSeqLen: Int64? = nil) {
            self.messages = messages
            self.model = model
            self.queryId = queryId
            self.temperature = temperature
            self.topP = topP
            self.topK = topK
            self.repetitionPenalty = repetitionPenalty
            self.outputSeqLen = outputSeqLen
            self.maxInputSeqLen = maxInputSeqLen
        }

        enum CodingKeys: String, CodingKey {
            case messages = "Messages"
            case model = "Model"
            case queryId = "QueryId"
            case temperature = "Temperature"
            case topP = "TopP"
            case topK = "TopK"
            case repetitionPenalty = "RepetitionPenalty"
            case outputSeqLen = "OutputSeqLen"
            case maxInputSeqLen = "MaxInputSeqLen"
        }
    }

    /// TestingTextGeneration返回参数结构体
    public struct TestingTextGenerationResponse: TCResponse {
        /// 结果
        public let choices: [TextGenerationChoices]?

        /// unix时间戳的字符串
        public let created: Int64?

        /// 会话id
        public let id: String?

        /// 模型名
        public let model: String?

        /// token数量
        public let usage: TextGenerationUsage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case choices = "Choices"
            case created = "Created"
            case id = "Id"
            case model = "Model"
            case usage = "Usage"
            case requestId = "RequestId"
        }
    }

    /// 文案创作（内测版）
    ///
    /// 基于腾讯大模型能力，用户可以通过传入不同的参数控制生成内容的类型，并通过自然语言给模型以内容生成的指令，可以满足多种场景的文本生成需求，包括但不限于文章写作、营销文案、视频脚本、电商文案、纪要整理等（注意：当前接口为内测体验专用接口，非正式服务接口，内测期结束接口会下线或停服，届时请接入正式服务接口）
    @inlinable
    public func testingTextGeneration(_ input: TestingTextGenerationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TestingTextGenerationResponse> {
        self.client.execute(action: "TestingTextGeneration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 文案创作（内测版）
    ///
    /// 基于腾讯大模型能力，用户可以通过传入不同的参数控制生成内容的类型，并通过自然语言给模型以内容生成的指令，可以满足多种场景的文本生成需求，包括但不限于文章写作、营销文案、视频脚本、电商文案、纪要整理等（注意：当前接口为内测体验专用接口，非正式服务接口，内测期结束接口会下线或停服，届时请接入正式服务接口）
    @inlinable
    public func testingTextGeneration(_ input: TestingTextGenerationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TestingTextGenerationResponse {
        try await self.client.execute(action: "TestingTextGeneration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 文案创作（内测版）
    ///
    /// 基于腾讯大模型能力，用户可以通过传入不同的参数控制生成内容的类型，并通过自然语言给模型以内容生成的指令，可以满足多种场景的文本生成需求，包括但不限于文章写作、营销文案、视频脚本、电商文案、纪要整理等（注意：当前接口为内测体验专用接口，非正式服务接口，内测期结束接口会下线或停服，届时请接入正式服务接口）
    @inlinable
    public func testingTextGeneration(messages: [TextGenerationMessage], model: String? = nil, queryId: String? = nil, temperature: Float? = nil, topP: Float? = nil, topK: Float? = nil, repetitionPenalty: Float? = nil, outputSeqLen: Int64? = nil, maxInputSeqLen: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TestingTextGenerationResponse> {
        self.testingTextGeneration(.init(messages: messages, model: model, queryId: queryId, temperature: temperature, topP: topP, topK: topK, repetitionPenalty: repetitionPenalty, outputSeqLen: outputSeqLen, maxInputSeqLen: maxInputSeqLen), region: region, logger: logger, on: eventLoop)
    }

    /// 文案创作（内测版）
    ///
    /// 基于腾讯大模型能力，用户可以通过传入不同的参数控制生成内容的类型，并通过自然语言给模型以内容生成的指令，可以满足多种场景的文本生成需求，包括但不限于文章写作、营销文案、视频脚本、电商文案、纪要整理等（注意：当前接口为内测体验专用接口，非正式服务接口，内测期结束接口会下线或停服，届时请接入正式服务接口）
    @inlinable
    public func testingTextGeneration(messages: [TextGenerationMessage], model: String? = nil, queryId: String? = nil, temperature: Float? = nil, topP: Float? = nil, topK: Float? = nil, repetitionPenalty: Float? = nil, outputSeqLen: Int64? = nil, maxInputSeqLen: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TestingTextGenerationResponse {
        try await self.testingTextGeneration(.init(messages: messages, model: model, queryId: queryId, temperature: temperature, topP: topP, topK: topK, repetitionPenalty: repetitionPenalty, outputSeqLen: outputSeqLen, maxInputSeqLen: maxInputSeqLen), region: region, logger: logger, on: eventLoop)
    }
}
