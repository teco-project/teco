//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Nlp {
    /// ComposeCouplet请求参数结构体
    public struct ComposeCoupletRequest: TCRequest {
        /// 生成对联的关键词。长度需>=2，当长度>2时，自动截取前两个字作为关键字。内容需为常用汉字（不含有数字、英文、韩语、日语、符号等等其他）。
        public let text: String

        /// 返回的文本结果为繁体还是简体。0：简体；1：繁体。默认为0。
        public let targetType: Int64?

        public init(text: String, targetType: Int64? = nil) {
            self.text = text
            self.targetType = targetType
        }

        enum CodingKeys: String, CodingKey {
            case text = "Text"
            case targetType = "TargetType"
        }
    }

    /// ComposeCouplet返回参数结构体
    public struct ComposeCoupletResponse: TCResponse {
        /// 横批。
        public let topScroll: String

        /// 上联与下联。
        public let content: [String]

        /// 当对联随机生成时，展示随机生成原因。
        public let randomCause: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case topScroll = "TopScroll"
            case content = "Content"
            case randomCause = "RandomCause"
            case requestId = "RequestId"
        }
    }

    /// 对联生成
    ///
    /// 对联生成接口根据用户输入的命题关键词，智能生成一副完整的春联，包括上联、下联和横批。该接口利用先进的自然语言处理技术，确保生成的春联既符合传统对仗、对韵、对义的要求，又具有新意和创意，为用户提供独特的春节祝福。
    @inlinable
    public func composeCouplet(_ input: ComposeCoupletRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ComposeCoupletResponse> {
        self.client.execute(action: "ComposeCouplet", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 对联生成
    ///
    /// 对联生成接口根据用户输入的命题关键词，智能生成一副完整的春联，包括上联、下联和横批。该接口利用先进的自然语言处理技术，确保生成的春联既符合传统对仗、对韵、对义的要求，又具有新意和创意，为用户提供独特的春节祝福。
    @inlinable
    public func composeCouplet(_ input: ComposeCoupletRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ComposeCoupletResponse {
        try await self.client.execute(action: "ComposeCouplet", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 对联生成
    ///
    /// 对联生成接口根据用户输入的命题关键词，智能生成一副完整的春联，包括上联、下联和横批。该接口利用先进的自然语言处理技术，确保生成的春联既符合传统对仗、对韵、对义的要求，又具有新意和创意，为用户提供独特的春节祝福。
    @inlinable
    public func composeCouplet(text: String, targetType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ComposeCoupletResponse> {
        self.composeCouplet(.init(text: text, targetType: targetType), region: region, logger: logger, on: eventLoop)
    }

    /// 对联生成
    ///
    /// 对联生成接口根据用户输入的命题关键词，智能生成一副完整的春联，包括上联、下联和横批。该接口利用先进的自然语言处理技术，确保生成的春联既符合传统对仗、对韵、对义的要求，又具有新意和创意，为用户提供独特的春节祝福。
    @inlinable
    public func composeCouplet(text: String, targetType: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ComposeCoupletResponse {
        try await self.composeCouplet(.init(text: text, targetType: targetType), region: region, logger: logger, on: eventLoop)
    }
}
