//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCNlpError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case emptyValueError = "InvalidParameterValue.EmptyValueError"
            case textEncodeError = "InvalidParameterValue.TextEncodeError"
            case textFormatError = "InvalidParameterValue.TextFormatError"
            case textNumTooMuch = "InvalidParameterValue.TextNumTooMuch"
            case textTooLong = "InvalidParameterValue.TextTooLong"
            case valueRangeError = "InvalidParameterValue.ValueRangeError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 参数空值错误
        public static var emptyValueError: InvalidParameterValue {
            InvalidParameterValue(.emptyValueError)
        }
        
        /// 文本编码错误，不符合utf-8
        public static var textEncodeError: InvalidParameterValue {
            InvalidParameterValue(.textEncodeError)
        }
        
        /// 文本输入格式错误
        public static var textFormatError: InvalidParameterValue {
            InvalidParameterValue(.textFormatError)
        }
        
        /// 输入文本超出数量限制
        public static var textNumTooMuch: InvalidParameterValue {
            InvalidParameterValue(.textNumTooMuch)
        }
        
        /// 输入文本超出长度限制
        public static var textTooLong: InvalidParameterValue {
            InvalidParameterValue(.textTooLong)
        }
        
        /// 参数取值范围错误
        public static var valueRangeError: InvalidParameterValue {
            InvalidParameterValue(.valueRangeError)
        }
    }
}

extension TCNlpError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCNlpError.InvalidParameterValue, rhs: TCNlpError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCNlpError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCNlpError.InvalidParameterValue {
    public func toNlpError() -> TCNlpError {
        guard let code = TCNlpError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCNlpError(code, context: self.context)
    }
}