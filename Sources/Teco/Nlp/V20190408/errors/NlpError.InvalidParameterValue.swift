//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCNlpError {
    public struct InvalidParameterValue: TCNlpErrorType {
        enum Code: String {
            case emptyValueError = "InvalidParameterValue.EmptyValueError"
            case textEncodeError = "InvalidParameterValue.TextEncodeError"
            case textFormatError = "InvalidParameterValue.TextFormatError"
            case textNumTooMuch = "InvalidParameterValue.TextNumTooMuch"
            case textTooLong = "InvalidParameterValue.TextTooLong"
            case valueRangeError = "InvalidParameterValue.ValueRangeError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 参数空值错误
        public static var emptyValueError: InvalidParameterValue {
            InvalidParameterValue(.emptyValueError)
        }

        /// 文本编码错误，不符合utf-8
        public static var textEncodeError: InvalidParameterValue {
            InvalidParameterValue(.textEncodeError)
        }

        /// 文本输入格式错误
        public static var textFormatError: InvalidParameterValue {
            InvalidParameterValue(.textFormatError)
        }

        /// 输入文本超出数量限制
        public static var textNumTooMuch: InvalidParameterValue {
            InvalidParameterValue(.textNumTooMuch)
        }

        /// 输入文本超出长度限制
        public static var textTooLong: InvalidParameterValue {
            InvalidParameterValue(.textTooLong)
        }

        /// 参数取值范围错误
        public static var valueRangeError: InvalidParameterValue {
            InvalidParameterValue(.valueRangeError)
        }

        public func asNlpError() -> TCNlpError {
            let code: TCNlpError.Code
            switch self.error {
            case .emptyValueError:
                code = .invalidParameterValue_EmptyValueError
            case .textEncodeError:
                code = .invalidParameterValue_TextEncodeError
            case .textFormatError:
                code = .invalidParameterValue_TextFormatError
            case .textNumTooMuch:
                code = .invalidParameterValue_TextNumTooMuch
            case .textTooLong:
                code = .invalidParameterValue_TextTooLong
            case .valueRangeError:
                code = .invalidParameterValue_ValueRangeError
            }
            return TCNlpError(code, context: self.context)
        }
    }
}
