//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCNlpError {
    public struct InvalidParameterValue: TCNlpErrorType {
        enum Code: String {
            case genre = "InvalidParameterValue.Genre"
            case invalidParameter = "InvalidParameterValue.InvalidParameter"
            case poetryType = "InvalidParameterValue.PoetryType"
            case sensitiveText = "InvalidParameterValue.SensitiveText"
            case targetType = "InvalidParameterValue.TargetType"
            case text = "InvalidParameterValue.Text"
            case textNumTooMuch = "InvalidParameterValue.TextNumTooMuch"
            case textTooLong = "InvalidParameterValue.TextTooLong"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// Genre非法，请参考Genre参数说明。
        public static var genre: InvalidParameterValue {
            InvalidParameterValue(.genre)
        }

        /// 参数不合法。
        public static var invalidParameter: InvalidParameterValue {
            InvalidParameterValue(.invalidParameter)
        }

        /// PoetryType非法，请参考PoetryType参数说明。
        public static var poetryType: InvalidParameterValue {
            InvalidParameterValue(.poetryType)
        }

        /// Text输入含有敏感信息。
        public static var sensitiveText: InvalidParameterValue {
            InvalidParameterValue(.sensitiveText)
        }

        /// TargetType非法，请参考TargetType参数说明。
        public static var targetType: InvalidParameterValue {
            InvalidParameterValue(.targetType)
        }

        /// Text非法，请参考Text参数说明。
        public static var text: InvalidParameterValue {
            InvalidParameterValue(.text)
        }

        /// 输入文本超出数量限制
        public static var textNumTooMuch: InvalidParameterValue {
            InvalidParameterValue(.textNumTooMuch)
        }

        /// 输入文本超出长度限制
        public static var textTooLong: InvalidParameterValue {
            InvalidParameterValue(.textTooLong)
        }

        public func asNlpError() -> TCNlpError {
            let code: TCNlpError.Code
            switch self.error {
            case .genre:
                code = .invalidParameterValue_Genre
            case .invalidParameter:
                code = .invalidParameterValue_InvalidParameter
            case .poetryType:
                code = .invalidParameterValue_PoetryType
            case .sensitiveText:
                code = .invalidParameterValue_SensitiveText
            case .targetType:
                code = .invalidParameterValue_TargetType
            case .text:
                code = .invalidParameterValue_Text
            case .textNumTooMuch:
                code = .invalidParameterValue_TextNumTooMuch
            case .textTooLong:
                code = .invalidParameterValue_TextTooLong
            }
            return TCNlpError(code, context: self.context)
        }
    }
}
