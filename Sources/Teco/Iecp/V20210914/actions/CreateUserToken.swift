//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iecp {
    /// CreateUserToken请求参数结构体
    public struct CreateUserTokenRequest: TCRequestModel {
        /// token过期时间，有效值是1~300秒
        public let second: Int64?

        public init(second: Int64? = nil) {
            self.second = second
        }

        enum CodingKeys: String, CodingKey {
            case second = "Second"
        }
    }

    /// CreateUserToken返回参数结构体
    public struct CreateUserTokenResponse: TCResponseModel {
        public let token: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case token = "Token"
            case requestId = "RequestId"
        }
    }

    /// 创建token
    @inlinable
    public func createUserToken(_ input: CreateUserTokenRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserTokenResponse> {
        self.client.execute(action: "CreateUserToken", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建token
    @inlinable
    public func createUserToken(_ input: CreateUserTokenRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserTokenResponse {
        try await self.client.execute(action: "CreateUserToken", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建token
    @inlinable
    public func createUserToken(second: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateUserTokenResponse> {
        self.createUserToken(.init(second: second), region: region, logger: logger, on: eventLoop)
    }

    /// 创建token
    @inlinable
    public func createUserToken(second: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateUserTokenResponse {
        try await self.createUserToken(.init(second: second), region: region, logger: logger, on: eventLoop)
    }
}
