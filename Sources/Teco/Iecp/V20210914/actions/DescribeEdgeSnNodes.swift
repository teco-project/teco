//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Iecp {
    /// DescribeEdgeSnNodes请求参数结构体
    public struct DescribeEdgeSnNodesRequest: TCPaginatedRequest {
        /// 边缘单元ID
        public let edgeUnitId: UInt64

        /// 根据节点名称模糊匹配
        public let namePattern: String?

        /// 根据设备SN模糊匹配
        public let snPattern: String?

        /// 根据备注批次信息模糊匹配
        public let remarkPattern: String?

        /// 默认0
        public let offset: UInt64?

        /// 默认20
        public let limit: UInt64?

        public init(edgeUnitId: UInt64, namePattern: String? = nil, snPattern: String? = nil, remarkPattern: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.edgeUnitId = edgeUnitId
            self.namePattern = namePattern
            self.snPattern = snPattern
            self.remarkPattern = remarkPattern
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case namePattern = "NamePattern"
            case snPattern = "SNPattern"
            case remarkPattern = "RemarkPattern"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeEdgeSnNodesResponse) -> DescribeEdgeSnNodesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeEdgeSnNodesRequest(edgeUnitId: self.edgeUnitId, namePattern: self.namePattern, snPattern: self.snPattern, remarkPattern: self.remarkPattern, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeEdgeSnNodes返回参数结构体
    public struct DescribeEdgeSnNodesResponse: TCPaginatedResponse {
        /// 满足条件的总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 节点详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeSet: [EdgeDracoNodeInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case nodeSet = "NodeSet"
            case requestId = "RequestId"
        }

        /// Extract the total count from the paginated response.
        public func getItems() -> [EdgeDracoNodeInfo] {
            self.nodeSet ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询预注册节点列表
    @inlinable
    public func describeEdgeSnNodes(_ input: DescribeEdgeSnNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeSnNodesResponse> {
        self.client.execute(action: "DescribeEdgeSnNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询预注册节点列表
    @inlinable
    public func describeEdgeSnNodes(_ input: DescribeEdgeSnNodesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeSnNodesResponse {
        try await self.client.execute(action: "DescribeEdgeSnNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询预注册节点列表
    @inlinable
    public func describeEdgeSnNodes(edgeUnitId: UInt64, namePattern: String? = nil, snPattern: String? = nil, remarkPattern: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeSnNodesResponse> {
        let input = DescribeEdgeSnNodesRequest(edgeUnitId: edgeUnitId, namePattern: namePattern, snPattern: snPattern, remarkPattern: remarkPattern, offset: offset, limit: limit)
        return self.client.execute(action: "DescribeEdgeSnNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询预注册节点列表
    @inlinable
    public func describeEdgeSnNodes(edgeUnitId: UInt64, namePattern: String? = nil, snPattern: String? = nil, remarkPattern: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeSnNodesResponse {
        let input = DescribeEdgeSnNodesRequest(edgeUnitId: edgeUnitId, namePattern: namePattern, snPattern: snPattern, remarkPattern: remarkPattern, offset: offset, limit: limit)
        return try await self.client.execute(action: "DescribeEdgeSnNodes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
