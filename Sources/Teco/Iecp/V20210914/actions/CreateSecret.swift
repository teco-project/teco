//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// CreateSecret请求参数结构体
    public struct CreateSecretRequest: TCRequestModel {
        /// 单元ID
        public let edgeUnitID: UInt64

        /// secret名
        public let secretName: String

        /// 命名空间（默认:default）
        public let secretNamespace: String?

        /// secret类型(取值范围:DockerConfigJson,Opaque 默认Opaque)
        public let secretType: String?

        /// DockerConfig的序列化base64编码后的字符串
        public let dockerConfigJson: String?

        /// Opaque类型的Secret内容
        public let cloudData: [KeyValueObj]?

        /// DockerConfig配置
        public let dockerConfig: DockerConfig?

        public init(edgeUnitID: UInt64, secretName: String, secretNamespace: String? = nil, secretType: String? = nil, dockerConfigJson: String? = nil, cloudData: [KeyValueObj]? = nil, dockerConfig: DockerConfig? = nil) {
            self.edgeUnitID = edgeUnitID
            self.secretName = secretName
            self.secretNamespace = secretNamespace
            self.secretType = secretType
            self.dockerConfigJson = dockerConfigJson
            self.cloudData = cloudData
            self.dockerConfig = dockerConfig
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitID = "EdgeUnitID"
            case secretName = "SecretName"
            case secretNamespace = "SecretNamespace"
            case secretType = "SecretType"
            case dockerConfigJson = "DockerConfigJson"
            case cloudData = "CloudData"
            case dockerConfig = "DockerConfig"
        }
    }

    /// CreateSecret返回参数结构体
    public struct CreateSecretResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建Secret
    @inlinable @discardableResult
    public func createSecret(_ input: CreateSecretRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSecretResponse> {
        self.client.execute(action: "CreateSecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建Secret
    @inlinable @discardableResult
    public func createSecret(_ input: CreateSecretRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSecretResponse {
        try await self.client.execute(action: "CreateSecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建Secret
    @inlinable @discardableResult
    public func createSecret(edgeUnitID: UInt64, secretName: String, secretNamespace: String? = nil, secretType: String? = nil, dockerConfigJson: String? = nil, cloudData: [KeyValueObj]? = nil, dockerConfig: DockerConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateSecretResponse> {
        self.createSecret(.init(edgeUnitID: edgeUnitID, secretName: secretName, secretNamespace: secretNamespace, secretType: secretType, dockerConfigJson: dockerConfigJson, cloudData: cloudData, dockerConfig: dockerConfig), region: region, logger: logger, on: eventLoop)
    }

    /// 创建Secret
    @inlinable @discardableResult
    public func createSecret(edgeUnitID: UInt64, secretName: String, secretNamespace: String? = nil, secretType: String? = nil, dockerConfigJson: String? = nil, cloudData: [KeyValueObj]? = nil, dockerConfig: DockerConfig? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSecretResponse {
        try await self.createSecret(.init(edgeUnitID: edgeUnitID, secretName: secretName, secretNamespace: secretNamespace, secretType: secretType, dockerConfigJson: dockerConfigJson, cloudData: cloudData, dockerConfig: dockerConfig), region: region, logger: logger, on: eventLoop)
    }
}
