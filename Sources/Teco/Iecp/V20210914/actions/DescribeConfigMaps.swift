//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// 获取ConfigMap列表
    @inlinable
    public func describeConfigMaps(_ input: DescribeConfigMapsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeConfigMapsResponse > {
        self.client.execute(action: "DescribeConfigMaps", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取ConfigMap列表
    @inlinable
    public func describeConfigMaps(_ input: DescribeConfigMapsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConfigMapsResponse {
        try await self.client.execute(action: "DescribeConfigMaps", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeConfigMaps请求参数结构体
    public struct DescribeConfigMapsRequest: TCRequestModel {
        /// 单元ID
        public let edgeUnitID: UInt64
        
        /// 翻页偏移量
        public let offset: UInt64
        
        /// 每页大小(最大100)
        public let limit: UInt64
        
        /// 命名空间
        public let configMapNamespace: String?
        
        /// 模糊匹配的名称
        public let namePattern: String?
        
        /// Sort.Fileld填写CreateTime Sort.Order(ASC|DESC) 默认ASC
        public let sort: FieldSort
        
        public init (edgeUnitID: UInt64, offset: UInt64, limit: UInt64, configMapNamespace: String?, namePattern: String?, sort: FieldSort) {
            self.edgeUnitID = edgeUnitID
            self.offset = offset
            self.limit = limit
            self.configMapNamespace = configMapNamespace
            self.namePattern = namePattern
            self.sort = sort
        }
        
        enum CodingKeys: String, CodingKey {
            case edgeUnitID = "EdgeUnitID"
            case offset = "Offset"
            case limit = "Limit"
            case configMapNamespace = "ConfigMapNamespace"
            case namePattern = "NamePattern"
            case sort = "Sort"
        }
    }
    
    /// DescribeConfigMaps返回参数结构体
    public struct DescribeConfigMapsResponse: TCResponseModel {
        /// ConfigMap列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [ConfigMapBasicInfo]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case requestId = "RequestId"
        }
    }
}
