//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// CreateEdgeNodeUnitTemplate请求参数结构体
    public struct CreateEdgeNodeUnitTemplateRequest: TCRequestModel {
        /// IECP边缘单元ID
        public let edgeUnitId: UInt64

        /// NodeUnit模板名称
        public let name: String

        /// 命名空间，默认default
        public let namespace: String?

        /// 包含的节点列表
        public let nodes: [String]?

        /// 描述
        public let description: String?

        public init(edgeUnitId: UInt64, name: String, namespace: String? = nil, nodes: [String]? = nil, description: String? = nil) {
            self.edgeUnitId = edgeUnitId
            self.name = name
            self.namespace = namespace
            self.nodes = nodes
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case name = "Name"
            case namespace = "Namespace"
            case nodes = "Nodes"
            case description = "Description"
        }
    }

    /// CreateEdgeNodeUnitTemplate返回参数结构体
    public struct CreateEdgeNodeUnitTemplateResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建边缘单元NodeUnit模板
    @inlinable @discardableResult
    public func createEdgeNodeUnitTemplate(_ input: CreateEdgeNodeUnitTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEdgeNodeUnitTemplateResponse> {
        self.client.execute(action: "CreateEdgeNodeUnitTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建边缘单元NodeUnit模板
    @inlinable @discardableResult
    public func createEdgeNodeUnitTemplate(_ input: CreateEdgeNodeUnitTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEdgeNodeUnitTemplateResponse {
        try await self.client.execute(action: "CreateEdgeNodeUnitTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建边缘单元NodeUnit模板
    @inlinable @discardableResult
    public func createEdgeNodeUnitTemplate(edgeUnitId: UInt64, name: String, namespace: String? = nil, nodes: [String]? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEdgeNodeUnitTemplateResponse> {
        self.createEdgeNodeUnitTemplate(CreateEdgeNodeUnitTemplateRequest(edgeUnitId: edgeUnitId, name: name, namespace: namespace, nodes: nodes, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 创建边缘单元NodeUnit模板
    @inlinable @discardableResult
    public func createEdgeNodeUnitTemplate(edgeUnitId: UInt64, name: String, namespace: String? = nil, nodes: [String]? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEdgeNodeUnitTemplateResponse {
        try await self.createEdgeNodeUnitTemplate(CreateEdgeNodeUnitTemplateRequest(edgeUnitId: edgeUnitId, name: name, namespace: namespace, nodes: nodes, description: description), region: region, logger: logger, on: eventLoop)
    }
}
