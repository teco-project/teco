//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// 修改单元应用基本信息
    ///
    /// 修改单元应用基本信息
    @inlinable
    public func modifyEdgeUnitApplicationBasicInfo(_ input: ModifyEdgeUnitApplicationBasicInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyEdgeUnitApplicationBasicInfoResponse > {
        self.client.execute(action: "ModifyEdgeUnitApplicationBasicInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改单元应用基本信息
    ///
    /// 修改单元应用基本信息
    @inlinable
    public func modifyEdgeUnitApplicationBasicInfo(_ input: ModifyEdgeUnitApplicationBasicInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEdgeUnitApplicationBasicInfoResponse {
        try await self.client.execute(action: "ModifyEdgeUnitApplicationBasicInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyEdgeUnitApplicationBasicInfo请求参数结构体
    public struct ModifyEdgeUnitApplicationBasicInfoRequest: TCRequestModel {
        /// 应用基本信息
        public let basicInfo: ApplicationBasicInfo
        
        /// 单元ID
        public let edgeUnitId: UInt64?
        
        /// 应用ID
        public let applicationId: UInt64?
        
        public init (basicInfo: ApplicationBasicInfo, edgeUnitId: UInt64?, applicationId: UInt64?) {
            self.basicInfo = basicInfo
            self.edgeUnitId = edgeUnitId
            self.applicationId = applicationId
        }
        
        enum CodingKeys: String, CodingKey {
            case basicInfo = "BasicInfo"
            case edgeUnitId = "EdgeUnitId"
            case applicationId = "ApplicationId"
        }
    }
    
    /// ModifyEdgeUnitApplicationBasicInfo返回参数结构体
    public struct ModifyEdgeUnitApplicationBasicInfoResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}