//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iecp {
    /// DeleteEdgeUnitApplications请求参数结构体
    public struct DeleteEdgeUnitApplicationsRequest: TCRequest {
        /// 单元ID
        public let edgeUnitID: UInt64

        /// 应用ID列表
        public let applicationIDs: [UInt64]

        public init(edgeUnitID: UInt64, applicationIDs: [UInt64]) {
            self.edgeUnitID = edgeUnitID
            self.applicationIDs = applicationIDs
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitID = "EdgeUnitID"
            case applicationIDs = "ApplicationIDs"
        }
    }

    /// DeleteEdgeUnitApplications返回参数结构体
    public struct DeleteEdgeUnitApplicationsResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除应用列表
    @inlinable @discardableResult
    public func deleteEdgeUnitApplications(_ input: DeleteEdgeUnitApplicationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteEdgeUnitApplicationsResponse> {
        self.client.execute(action: "DeleteEdgeUnitApplications", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除应用列表
    @inlinable @discardableResult
    public func deleteEdgeUnitApplications(_ input: DeleteEdgeUnitApplicationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEdgeUnitApplicationsResponse {
        try await self.client.execute(action: "DeleteEdgeUnitApplications", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除应用列表
    @inlinable @discardableResult
    public func deleteEdgeUnitApplications(edgeUnitID: UInt64, applicationIDs: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteEdgeUnitApplicationsResponse> {
        self.deleteEdgeUnitApplications(.init(edgeUnitID: edgeUnitID, applicationIDs: applicationIDs), region: region, logger: logger, on: eventLoop)
    }

    /// 删除应用列表
    @inlinable @discardableResult
    public func deleteEdgeUnitApplications(edgeUnitID: UInt64, applicationIDs: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEdgeUnitApplicationsResponse {
        try await self.deleteEdgeUnitApplications(.init(edgeUnitID: edgeUnitID, applicationIDs: applicationIDs), region: region, logger: logger, on: eventLoop)
    }
}
