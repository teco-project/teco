//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// 查询边缘单元Grid事件列表
    ///
    /// 查询边缘单元Grid事件列表
    @inlinable
    public func describeEdgeUnitGridEvents(_ input: DescribeEdgeUnitGridEventsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeEdgeUnitGridEventsResponse > {
        self.client.execute(action: "DescribeEdgeUnitGridEvents", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询边缘单元Grid事件列表
    ///
    /// 查询边缘单元Grid事件列表
    @inlinable
    public func describeEdgeUnitGridEvents(_ input: DescribeEdgeUnitGridEventsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeUnitGridEventsResponse {
        try await self.client.execute(action: "DescribeEdgeUnitGridEvents", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeEdgeUnitGridEvents请求参数结构体
    public struct DescribeEdgeUnitGridEventsRequest: TCRequestModel {
        /// IECP边缘单元ID
        public let edgeUnitId: UInt64
        
        /// Grid名称
        public let gridName: String
        
        /// 负载类型（StatefulSetGrid｜DeploymentGrid）
        public let workloadKind: String
        
        /// 命名空间，默认为default
        public let namespace: String?
        
        /// NodeUnit名称
        public let nodeUnit: String?
        
        /// Pod名称
        public let podName: String?
        
        public init (edgeUnitId: UInt64, gridName: String, workloadKind: String, namespace: String?, nodeUnit: String?, podName: String?) {
            self.edgeUnitId = edgeUnitId
            self.gridName = gridName
            self.workloadKind = workloadKind
            self.namespace = namespace
            self.nodeUnit = nodeUnit
            self.podName = podName
        }
        
        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case gridName = "GridName"
            case workloadKind = "WorkloadKind"
            case namespace = "Namespace"
            case nodeUnit = "NodeUnit"
            case podName = "PodName"
        }
    }
    
    /// DescribeEdgeUnitGridEvents返回参数结构体
    public struct DescribeEdgeUnitGridEventsResponse: TCResponseModel {
        /// 事件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventSet: [GridEventInfo]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case eventSet = "EventSet"
            case requestId = "RequestId"
        }
    }
}