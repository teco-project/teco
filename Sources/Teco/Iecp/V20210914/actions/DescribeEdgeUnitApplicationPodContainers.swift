//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// DescribeEdgeUnitApplicationPodContainers请求参数结构体
    public struct DescribeEdgeUnitApplicationPodContainersRequest: TCRequestModel {
        /// 单元ID
        public let edgeUnitId: UInt64

        /// 应用ID
        public let applicationId: UInt64

        /// Pod名
        public let podName: String

        public init(edgeUnitId: UInt64, applicationId: UInt64, podName: String) {
            self.edgeUnitId = edgeUnitId
            self.applicationId = applicationId
            self.podName = podName
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case applicationId = "ApplicationId"
            case podName = "PodName"
        }
    }

    /// DescribeEdgeUnitApplicationPodContainers返回参数结构体
    public struct DescribeEdgeUnitApplicationPodContainersResponse: TCResponseModel {
        /// 容器列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerSet: [ContainerStatus]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case containerSet = "ContainerSet"
            case requestId = "RequestId"
        }
    }

    /// 获取应用容器状态
    @inlinable
    public func describeEdgeUnitApplicationPodContainers(_ input: DescribeEdgeUnitApplicationPodContainersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeUnitApplicationPodContainersResponse> {
        self.client.execute(action: "DescribeEdgeUnitApplicationPodContainers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取应用容器状态
    @inlinable
    public func describeEdgeUnitApplicationPodContainers(_ input: DescribeEdgeUnitApplicationPodContainersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeUnitApplicationPodContainersResponse {
        try await self.client.execute(action: "DescribeEdgeUnitApplicationPodContainers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取应用容器状态
    @inlinable
    public func describeEdgeUnitApplicationPodContainers(edgeUnitId: UInt64, applicationId: UInt64, podName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeUnitApplicationPodContainersResponse> {
        self.describeEdgeUnitApplicationPodContainers(.init(edgeUnitId: edgeUnitId, applicationId: applicationId, podName: podName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取应用容器状态
    @inlinable
    public func describeEdgeUnitApplicationPodContainers(edgeUnitId: UInt64, applicationId: UInt64, podName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeUnitApplicationPodContainersResponse {
        try await self.describeEdgeUnitApplicationPodContainers(.init(edgeUnitId: edgeUnitId, applicationId: applicationId, podName: podName), region: region, logger: logger, on: eventLoop)
    }
}
