//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// DescribeEdgeUnitDeployGridItem请求参数结构体
    public struct DescribeEdgeUnitDeployGridItemRequest: TCRequestModel {
        /// 边缘单元ID
        public let edgeUnitId: UInt64

        /// Grid名称
        public let gridName: String

        /// 负载类型（StatefulSetGrid｜DeploymentGrid）
        public let workloadKind: String

        /// 命名空间，默认default
        public let namespace: String?

        /// 排序，默认ASC
        public let order: String?

        public init(edgeUnitId: UInt64, gridName: String, workloadKind: String, namespace: String? = nil, order: String? = nil) {
            self.edgeUnitId = edgeUnitId
            self.gridName = gridName
            self.workloadKind = workloadKind
            self.namespace = namespace
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case gridName = "GridName"
            case workloadKind = "WorkloadKind"
            case namespace = "Namespace"
            case order = "Order"
        }
    }

    /// DescribeEdgeUnitDeployGridItem返回参数结构体
    public struct DescribeEdgeUnitDeployGridItemResponse: TCResponseModel {
        /// 记录总数
        public let totalCount: Int64

        /// Grid部署列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deploySet: [GridItemInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case deploySet = "DeploySet"
            case requestId = "RequestId"
        }
    }

    /// 查询边缘单元指定Grid下的部署应用列表
    @inlinable
    public func describeEdgeUnitDeployGridItem(_ input: DescribeEdgeUnitDeployGridItemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeUnitDeployGridItemResponse> {
        self.client.execute(action: "DescribeEdgeUnitDeployGridItem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询边缘单元指定Grid下的部署应用列表
    @inlinable
    public func describeEdgeUnitDeployGridItem(_ input: DescribeEdgeUnitDeployGridItemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeUnitDeployGridItemResponse {
        try await self.client.execute(action: "DescribeEdgeUnitDeployGridItem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询边缘单元指定Grid下的部署应用列表
    @inlinable
    public func describeEdgeUnitDeployGridItem(edgeUnitId: UInt64, gridName: String, workloadKind: String, namespace: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeUnitDeployGridItemResponse> {
        let input = DescribeEdgeUnitDeployGridItemRequest(edgeUnitId: edgeUnitId, gridName: gridName, workloadKind: workloadKind, namespace: namespace, order: order)
        return self.client.execute(action: "DescribeEdgeUnitDeployGridItem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询边缘单元指定Grid下的部署应用列表
    @inlinable
    public func describeEdgeUnitDeployGridItem(edgeUnitId: UInt64, gridName: String, workloadKind: String, namespace: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeUnitDeployGridItemResponse {
        let input = DescribeEdgeUnitDeployGridItemRequest(edgeUnitId: edgeUnitId, gridName: gridName, workloadKind: workloadKind, namespace: namespace, order: order)
        return try await self.client.execute(action: "DescribeEdgeUnitDeployGridItem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
