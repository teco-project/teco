//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Iecp {
    /// DescribeEdgeUnitsCloud请求参数结构体
    public struct DescribeEdgeUnitsCloudRequest: TCPaginatedRequest {
        /// 偏移量
        public let offset: UInt64

        /// limit值
        public let limit: UInt64

        /// 集群名称模糊匹配
        public let namePattern: String?

        /// 排序，ASC/DESC(默认)
        public let order: String?

        public init(offset: UInt64, limit: UInt64, namePattern: String? = nil, order: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.namePattern = namePattern
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case namePattern = "NamePattern"
            case order = "Order"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeEdgeUnitsCloudResponse) -> DescribeEdgeUnitsCloudRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeEdgeUnitsCloudRequest(offset: self.offset + .init(response.getItems().count), limit: self.limit, namePattern: self.namePattern, order: self.order)
        }
    }

    /// DescribeEdgeUnitsCloud返回参数结构体
    public struct DescribeEdgeUnitsCloudResponse: TCPaginatedResponse {
        /// 总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 集群详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let edgeUnitSet: [EdgeCloudCluster]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case edgeUnitSet = "EdgeUnitSet"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [EdgeCloudCluster] {
            self.edgeUnitSet ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询边缘单元列表
    @inlinable
    public func describeEdgeUnitsCloud(_ input: DescribeEdgeUnitsCloudRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeUnitsCloudResponse> {
        self.client.execute(action: "DescribeEdgeUnitsCloud", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询边缘单元列表
    @inlinable
    public func describeEdgeUnitsCloud(_ input: DescribeEdgeUnitsCloudRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeUnitsCloudResponse {
        try await self.client.execute(action: "DescribeEdgeUnitsCloud", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询边缘单元列表
    @inlinable
    public func describeEdgeUnitsCloud(offset: UInt64, limit: UInt64, namePattern: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEdgeUnitsCloudResponse> {
        self.describeEdgeUnitsCloud(.init(offset: offset, limit: limit, namePattern: namePattern, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 查询边缘单元列表
    @inlinable
    public func describeEdgeUnitsCloud(offset: UInt64, limit: UInt64, namePattern: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEdgeUnitsCloudResponse {
        try await self.describeEdgeUnitsCloud(.init(offset: offset, limit: limit, namePattern: namePattern, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 查询边缘单元列表
    @inlinable
    public func describeEdgeUnitsCloudPaginated(_ input: DescribeEdgeUnitsCloudRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [EdgeCloudCluster])> {
        self.client.paginate(input: input, region: region, command: self.describeEdgeUnitsCloud, logger: logger, on: eventLoop)
    }

    /// 查询边缘单元列表
    @inlinable @discardableResult
    public func describeEdgeUnitsCloudPaginated(_ input: DescribeEdgeUnitsCloudRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeEdgeUnitsCloudResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeEdgeUnitsCloud, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询边缘单元列表
    ///
    /// - Returns: `AsyncSequence`s of `EdgeCloudCluster` and `DescribeEdgeUnitsCloudResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeEdgeUnitsCloudPaginator(_ input: DescribeEdgeUnitsCloudRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeEdgeUnitsCloudRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeEdgeUnitsCloud, logger: logger, on: eventLoop)
    }
}
