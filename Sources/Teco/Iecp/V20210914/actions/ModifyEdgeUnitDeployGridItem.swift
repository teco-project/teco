//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// ModifyEdgeUnitDeployGridItem请求参数结构体
    public struct ModifyEdgeUnitDeployGridItemRequest: TCRequestModel {
        /// IECP边缘单元ID
        public let edgeUnitId: UInt64

        /// Grid名称
        public let gridItemName: String

        /// 负载类型（StatefulSetGrid｜DeploymentGrid）
        public let workloadKind: String

        /// 副本数
        public let replicas: Int64

        /// 命名空间，默认default
        public let namespace: String?

        public init(edgeUnitId: UInt64, gridItemName: String, workloadKind: String, replicas: Int64, namespace: String? = nil) {
            self.edgeUnitId = edgeUnitId
            self.gridItemName = gridItemName
            self.workloadKind = workloadKind
            self.replicas = replicas
            self.namespace = namespace
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case gridItemName = "GridItemName"
            case workloadKind = "WorkloadKind"
            case replicas = "Replicas"
            case namespace = "Namespace"
        }
    }

    /// ModifyEdgeUnitDeployGridItem返回参数结构体
    public struct ModifyEdgeUnitDeployGridItemResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改边缘单元Grid部署应用副本数
    @inlinable @discardableResult
    public func modifyEdgeUnitDeployGridItem(_ input: ModifyEdgeUnitDeployGridItemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEdgeUnitDeployGridItemResponse> {
        self.client.execute(action: "ModifyEdgeUnitDeployGridItem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改边缘单元Grid部署应用副本数
    @inlinable @discardableResult
    public func modifyEdgeUnitDeployGridItem(_ input: ModifyEdgeUnitDeployGridItemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEdgeUnitDeployGridItemResponse {
        try await self.client.execute(action: "ModifyEdgeUnitDeployGridItem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改边缘单元Grid部署应用副本数
    @inlinable @discardableResult
    public func modifyEdgeUnitDeployGridItem(edgeUnitId: UInt64, gridItemName: String, workloadKind: String, replicas: Int64, namespace: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEdgeUnitDeployGridItemResponse> {
        self.modifyEdgeUnitDeployGridItem(ModifyEdgeUnitDeployGridItemRequest(edgeUnitId: edgeUnitId, gridItemName: gridItemName, workloadKind: workloadKind, replicas: replicas, namespace: namespace), region: region, logger: logger, on: eventLoop)
    }

    /// 修改边缘单元Grid部署应用副本数
    @inlinable @discardableResult
    public func modifyEdgeUnitDeployGridItem(edgeUnitId: UInt64, gridItemName: String, workloadKind: String, replicas: Int64, namespace: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEdgeUnitDeployGridItemResponse {
        try await self.modifyEdgeUnitDeployGridItem(ModifyEdgeUnitDeployGridItemRequest(edgeUnitId: edgeUnitId, gridItemName: gridItemName, workloadKind: workloadKind, replicas: replicas, namespace: namespace), region: region, logger: logger, on: eventLoop)
    }
}
