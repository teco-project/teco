//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// RedeployEdgeUnitApplication请求参数结构体
    public struct RedeployEdgeUnitApplicationRequest: TCRequestModel {
        /// 单元ID
        public let edgeUnitId: UInt64
        
        /// 应用ID
        public let applicationId: UInt64
        
        public init (edgeUnitId: UInt64, applicationId: UInt64) {
            self.edgeUnitId = edgeUnitId
            self.applicationId = applicationId
        }
        
        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case applicationId = "ApplicationId"
        }
    }
    
    /// RedeployEdgeUnitApplication返回参数结构体
    public struct RedeployEdgeUnitApplicationResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 单元应用重部署
    @inlinable
    public func redeployEdgeUnitApplication(_ input: RedeployEdgeUnitApplicationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < RedeployEdgeUnitApplicationResponse > {
        self.client.execute(action: "RedeployEdgeUnitApplication", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 单元应用重部署
    @inlinable
    public func redeployEdgeUnitApplication(_ input: RedeployEdgeUnitApplicationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RedeployEdgeUnitApplicationResponse {
        try await self.client.execute(action: "RedeployEdgeUnitApplication", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
