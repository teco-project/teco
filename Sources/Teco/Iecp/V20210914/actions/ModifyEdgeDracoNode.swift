//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iecp {
    /// ModifyEdgeDracoNode请求参数结构体
    public struct ModifyEdgeDracoNodeRequest: TCRequestModel {
        /// 边缘单元ID
        public let edgeUnitId: UInt64

        /// 边缘节点ID
        public let nodeId: UInt64

        /// 节点信息
        public let nodeInfo: DracoNodeInfo?

        /// 是否重置draco设备
        public let isReset: Bool?

        public init(edgeUnitId: UInt64, nodeId: UInt64, nodeInfo: DracoNodeInfo? = nil, isReset: Bool? = nil) {
            self.edgeUnitId = edgeUnitId
            self.nodeId = nodeId
            self.nodeInfo = nodeInfo
            self.isReset = isReset
        }

        enum CodingKeys: String, CodingKey {
            case edgeUnitId = "EdgeUnitId"
            case nodeId = "NodeId"
            case nodeInfo = "NodeInfo"
            case isReset = "IsReset"
        }
    }

    /// ModifyEdgeDracoNode返回参数结构体
    public struct ModifyEdgeDracoNodeResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 编辑draco设备信息
    @inlinable @discardableResult
    public func modifyEdgeDracoNode(_ input: ModifyEdgeDracoNodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEdgeDracoNodeResponse> {
        self.client.execute(action: "ModifyEdgeDracoNode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑draco设备信息
    @inlinable @discardableResult
    public func modifyEdgeDracoNode(_ input: ModifyEdgeDracoNodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEdgeDracoNodeResponse {
        try await self.client.execute(action: "ModifyEdgeDracoNode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑draco设备信息
    @inlinable @discardableResult
    public func modifyEdgeDracoNode(edgeUnitId: UInt64, nodeId: UInt64, nodeInfo: DracoNodeInfo? = nil, isReset: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEdgeDracoNodeResponse> {
        self.modifyEdgeDracoNode(.init(edgeUnitId: edgeUnitId, nodeId: nodeId, nodeInfo: nodeInfo, isReset: isReset), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑draco设备信息
    @inlinable @discardableResult
    public func modifyEdgeDracoNode(edgeUnitId: UInt64, nodeId: UInt64, nodeInfo: DracoNodeInfo? = nil, isReset: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEdgeDracoNodeResponse {
        try await self.modifyEdgeDracoNode(.init(edgeUnitId: edgeUnitId, nodeId: nodeId, nodeInfo: nodeInfo, isReset: isReset), region: region, logger: logger, on: eventLoop)
    }
}
