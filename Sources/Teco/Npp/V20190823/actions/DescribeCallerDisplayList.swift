//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Npp {
    /// DescribeCallerDisplayList请求参数结构体
    public struct DescribeCallerDisplayListRequest: TCRequestModel {
        /// 业务appid
        public let bizAppId: String

        public init(bizAppId: String) {
            self.bizAppId = bizAppId
        }

        enum CodingKeys: String, CodingKey {
            case bizAppId = "BizAppId"
        }
    }

    /// DescribeCallerDisplayList返回参数结构体
    public struct DescribeCallerDisplayListResponse: TCResponseModel {
        /// appid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: String?

        /// 主叫显号号码集合，codeList[0...*] 结构体数组，如果业务是主被叫互显，该字段为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let codeList: [CallBackPhoneCode]?

        /// 错误码
        public let errorCode: String

        /// 错误原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let msg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case codeList = "CodeList"
            case errorCode = "ErrorCode"
            case msg = "Msg"
            case requestId = "RequestId"
        }
    }

    /// 回拨拉取主叫显号号码集合
    @inlinable
    public func describeCallerDisplayList(_ input: DescribeCallerDisplayListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCallerDisplayListResponse> {
        self.client.execute(action: "DescribeCallerDisplayList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 回拨拉取主叫显号号码集合
    @inlinable
    public func describeCallerDisplayList(_ input: DescribeCallerDisplayListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCallerDisplayListResponse {
        try await self.client.execute(action: "DescribeCallerDisplayList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 回拨拉取主叫显号号码集合
    @inlinable
    public func describeCallerDisplayList(bizAppId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCallerDisplayListResponse> {
        self.describeCallerDisplayList(.init(bizAppId: bizAppId), region: region, logger: logger, on: eventLoop)
    }

    /// 回拨拉取主叫显号号码集合
    @inlinable
    public func describeCallerDisplayList(bizAppId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCallerDisplayListResponse {
        try await self.describeCallerDisplayList(.init(bizAppId: bizAppId), region: region, logger: logger, on: eventLoop)
    }
}
