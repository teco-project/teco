//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Tione {
    /// DescribeNotebookLifecycleScript请求参数结构体
    public struct DescribeNotebookLifecycleScriptRequest: TCRequestModel {
        /// 生命周期脚本名称
        public let notebookLifecycleScriptsName: String
        
        public init (notebookLifecycleScriptsName: String) {
            self.notebookLifecycleScriptsName = notebookLifecycleScriptsName
        }
        
        enum CodingKeys: String, CodingKey {
            case notebookLifecycleScriptsName = "NotebookLifecycleScriptsName"
        }
    }
    
    /// DescribeNotebookLifecycleScript返回参数结构体
    public struct DescribeNotebookLifecycleScriptResponse: TCResponseModel {
        /// 生命周期脚本名称
        public let notebookLifecycleScriptsName: String
        
        /// 创建脚本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createScript: String?
        
        /// 启动脚本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startScript: String?
        
        /// 创建时间
        // FIXME: Codable support not implemented for datetime yet.
        public let creationTime: Date
        
        /// 最后修改时间
        // FIXME: Codable support not implemented for datetime yet.
        public let lastModifiedTime: Date
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case notebookLifecycleScriptsName = "NotebookLifecycleScriptsName"
            case createScript = "CreateScript"
            case startScript = "StartScript"
            case creationTime = "CreationTime"
            case lastModifiedTime = "LastModifiedTime"
            case requestId = "RequestId"
        }
    }
    
    /// 查看notebook生命周期脚本详情
    @inlinable
    public func describeNotebookLifecycleScript(_ input: DescribeNotebookLifecycleScriptRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeNotebookLifecycleScriptResponse > {
        self.client.execute(action: "DescribeNotebookLifecycleScript", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查看notebook生命周期脚本详情
    @inlinable
    public func describeNotebookLifecycleScript(_ input: DescribeNotebookLifecycleScriptRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookLifecycleScriptResponse {
        try await self.client.execute(action: "DescribeNotebookLifecycleScript", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
