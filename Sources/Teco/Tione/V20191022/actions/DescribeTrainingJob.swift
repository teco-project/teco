//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Tione {
    /// 查询训练任务
    @inlinable
    public func describeTrainingJob(_ input: DescribeTrainingJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeTrainingJobResponse > {
        self.client.execute(action: "DescribeTrainingJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询训练任务
    @inlinable
    public func describeTrainingJob(_ input: DescribeTrainingJobRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTrainingJobResponse {
        try await self.client.execute(action: "DescribeTrainingJob", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeTrainingJob请求参数结构体
    public struct DescribeTrainingJobRequest: TCRequestModel {
        /// 训练任务名称
        public let trainingJobName: String
        
        public init (trainingJobName: String) {
            self.trainingJobName = trainingJobName
        }
        
        enum CodingKeys: String, CodingKey {
            case trainingJobName = "TrainingJobName"
        }
    }
    
    /// DescribeTrainingJob返回参数结构体
    public struct DescribeTrainingJobResponse: TCResponseModel {
        /// 算法镜像配置
        public let algorithmSpecification: AlgorithmSpecification
        
        /// 任务名称
        public let trainingJobName: String
        
        /// 算法超级参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hyperParameters: String?
        
        /// 输入数据配置
        public let inputDataConfig: [InputDataConfig]
        
        /// 输出数据配置
        public let outputDataConfig: OutputDataConfig
        
        /// 中止条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stoppingCondition: StoppingCondition
        
        /// 计算实例配置
        public let resourceConfig: ResourceConfig
        
        /// 私有网络配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcConfig: VpcConfig
        
        /// 失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failureReason: String?
        
        /// 最近修改时间
        // FIXME: Codable support not implemented for datetime yet.
        public let lastModifiedTime: Date
        
        /// 任务开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingStartTime: Date?
        
        /// 任务完成时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingEndTime: Date?
        
        /// 模型输出配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelArtifacts: ModelArtifacts
        
        /// 详细状态，取值范围
        /// Starting：启动中
        /// Downloading: 准备训练数据
        /// Training: 正在训练
        /// Uploading: 上传训练结果
        /// Completed：已完成
        /// Failed: 失败
        /// MaxRuntimeExceeded: 任务超过最大运行时间
        /// Stopping: 停止中
        /// Stopped：已停止
        public let secondaryStatus: String
        
        /// 详细状态事件记录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let secondaryStatusTransitions: [SecondaryStatusTransition]?
        
        /// 角色名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleName: String?
        
        /// 训练任务状态，取值范围
        /// InProgress：运行中
        /// Completed: 已完成
        /// Failed: 失败
        /// Stopping: 停止中
        /// Stopped：已停止
        public let trainingJobStatus: String
        
        /// 训练任务日志链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logUrl: String?
        
        /// 训练任务实例ID
        public let instanceId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case algorithmSpecification = "AlgorithmSpecification"
            case trainingJobName = "TrainingJobName"
            case hyperParameters = "HyperParameters"
            case inputDataConfig = "InputDataConfig"
            case outputDataConfig = "OutputDataConfig"
            case stoppingCondition = "StoppingCondition"
            case resourceConfig = "ResourceConfig"
            case vpcConfig = "VpcConfig"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case trainingStartTime = "TrainingStartTime"
            case trainingEndTime = "TrainingEndTime"
            case modelArtifacts = "ModelArtifacts"
            case secondaryStatus = "SecondaryStatus"
            case secondaryStatusTransitions = "SecondaryStatusTransitions"
            case roleName = "RoleName"
            case trainingJobStatus = "TrainingJobStatus"
            case logUrl = "LogUrl"
            case instanceId = "InstanceId"
            case requestId = "RequestId"
        }
    }
}
