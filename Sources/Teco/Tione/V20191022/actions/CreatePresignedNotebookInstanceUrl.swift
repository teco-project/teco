//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tione {
    /// 创建Notebook授权Url
    ///
    /// 创建Notebook授权Url
    @inlinable
    public func createPresignedNotebookInstanceUrl(_ input: CreatePresignedNotebookInstanceUrlRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreatePresignedNotebookInstanceUrlResponse > {
        self.client.execute(action: "CreatePresignedNotebookInstanceUrl", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建Notebook授权Url
    ///
    /// 创建Notebook授权Url
    @inlinable
    public func createPresignedNotebookInstanceUrl(_ input: CreatePresignedNotebookInstanceUrlRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreatePresignedNotebookInstanceUrlResponse {
        try await self.client.execute(action: "CreatePresignedNotebookInstanceUrl", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreatePresignedNotebookInstanceUrl请求参数结构体
    public struct CreatePresignedNotebookInstanceUrlRequest: TCRequestModel {
        /// Notebook实例名称
        /// 规则：“^\[a-zA-Z0-9\](-\*\[a-zA-Z0-9\])\*$”
        public let notebookInstanceName: String
        
        /// session有效时间，秒，取值范围[1800, 43200]
        public let sessionExpirationDurationInSeconds: Int64?
        
        public init (notebookInstanceName: String, sessionExpirationDurationInSeconds: Int64?) {
            self.notebookInstanceName = notebookInstanceName
            self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
        }
        
        enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
            case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
        }
    }
    
    /// CreatePresignedNotebookInstanceUrl返回参数结构体
    public struct CreatePresignedNotebookInstanceUrlResponse: TCResponseModel {
        /// 授权url
        public let authorizedUrl: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case authorizedUrl = "AuthorizedUrl"
            case requestId = "RequestId"
        }
    }
}