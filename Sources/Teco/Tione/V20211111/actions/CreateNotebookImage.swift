//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tione {
    /// CreateNotebookImage请求参数结构体
    public struct CreateNotebookImageRequest: TCRequest {
        /// 镜像信息
        public let imageInfo: ImageInfo

        /// notebook id
        public let notebookId: String

        /// 要保存的kernel数组
        public let kernels: [String]?

        public init(imageInfo: ImageInfo, notebookId: String, kernels: [String]? = nil) {
            self.imageInfo = imageInfo
            self.notebookId = notebookId
            self.kernels = kernels
        }

        enum CodingKeys: String, CodingKey {
            case imageInfo = "ImageInfo"
            case notebookId = "NotebookId"
            case kernels = "Kernels"
        }
    }

    /// CreateNotebookImage返回参数结构体
    public struct CreateNotebookImageResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 保存镜像
    @inlinable @discardableResult
    public func createNotebookImage(_ input: CreateNotebookImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNotebookImageResponse> {
        self.client.execute(action: "CreateNotebookImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 保存镜像
    @inlinable @discardableResult
    public func createNotebookImage(_ input: CreateNotebookImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNotebookImageResponse {
        try await self.client.execute(action: "CreateNotebookImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 保存镜像
    @inlinable @discardableResult
    public func createNotebookImage(imageInfo: ImageInfo, notebookId: String, kernels: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNotebookImageResponse> {
        self.createNotebookImage(.init(imageInfo: imageInfo, notebookId: notebookId, kernels: kernels), region: region, logger: logger, on: eventLoop)
    }

    /// 保存镜像
    @inlinable @discardableResult
    public func createNotebookImage(imageInfo: ImageInfo, notebookId: String, kernels: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNotebookImageResponse {
        try await self.createNotebookImage(.init(imageInfo: imageInfo, notebookId: notebookId, kernels: kernels), region: region, logger: logger, on: eventLoop)
    }
}
