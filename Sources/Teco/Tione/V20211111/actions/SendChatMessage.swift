//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tione {
    /// SendChatMessage请求参数结构体
    public struct SendChatMessageRequest: TCRequest {
        /// 会话id，标识一组对话的唯一id，id变更则重置会话
        public let sessionId: String

        /// 问题描述
        public let question: String

        /// 会话模型版本，不同的会话模型调用到不同的模型后台。
        /// 注: 多行业多场景大模型填写 tj_llm_clm-v1
        public let modelVersion: String?

        /// 使用模式(仅部分模型支持)。General 通用问答；WithSearchPlugin 搜索增强问答
        public let mode: String?

        /// 搜索来源。仅当Mode未WithSearchPlugin时生效。Preset 预置文稿库；Custom 自定义。
        public let searchSource: String?

        public init(sessionId: String, question: String, modelVersion: String? = nil, mode: String? = nil, searchSource: String? = nil) {
            self.sessionId = sessionId
            self.question = question
            self.modelVersion = modelVersion
            self.mode = mode
            self.searchSource = searchSource
        }

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case question = "Question"
            case modelVersion = "ModelVersion"
            case mode = "Mode"
            case searchSource = "SearchSource"
        }
    }

    /// SendChatMessage返回参数结构体
    public struct SendChatMessageResponse: TCResponse {
        /// 答案
        public let answer: String

        /// 会话id,返回请求的会话id
        public let sessionId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case answer = "Answer"
            case sessionId = "SessionId"
            case requestId = "RequestId"
        }
    }

    /// LLM模型对话请求
    ///
    /// LLM模型的对话请求发送接口
    @inlinable
    public func sendChatMessage(_ input: SendChatMessageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendChatMessageResponse> {
        self.client.execute(action: "SendChatMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// LLM模型对话请求
    ///
    /// LLM模型的对话请求发送接口
    @inlinable
    public func sendChatMessage(_ input: SendChatMessageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendChatMessageResponse {
        try await self.client.execute(action: "SendChatMessage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// LLM模型对话请求
    ///
    /// LLM模型的对话请求发送接口
    @inlinable
    public func sendChatMessage(sessionId: String, question: String, modelVersion: String? = nil, mode: String? = nil, searchSource: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendChatMessageResponse> {
        self.sendChatMessage(.init(sessionId: sessionId, question: question, modelVersion: modelVersion, mode: mode, searchSource: searchSource), region: region, logger: logger, on: eventLoop)
    }

    /// LLM模型对话请求
    ///
    /// LLM模型的对话请求发送接口
    @inlinable
    public func sendChatMessage(sessionId: String, question: String, modelVersion: String? = nil, mode: String? = nil, searchSource: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendChatMessageResponse {
        try await self.sendChatMessage(.init(sessionId: sessionId, question: question, modelVersion: modelVersion, mode: mode, searchSource: searchSource), region: region, logger: logger, on: eventLoop)
    }
}
