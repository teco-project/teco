//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tione {
    /// StopBatchTask请求参数结构体
    public struct StopBatchTaskRequest: TCRequestModel {
        /// 跑批任务ID
        public let batchTaskId: String

        public init(batchTaskId: String) {
            self.batchTaskId = batchTaskId
        }

        enum CodingKeys: String, CodingKey {
            case batchTaskId = "BatchTaskId"
        }
    }

    /// StopBatchTask返回参数结构体
    public struct StopBatchTaskResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 停止跑批任务
    @inlinable @discardableResult
    public func stopBatchTask(_ input: StopBatchTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopBatchTaskResponse> {
        self.client.execute(action: "StopBatchTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 停止跑批任务
    @inlinable @discardableResult
    public func stopBatchTask(_ input: StopBatchTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopBatchTaskResponse {
        try await self.client.execute(action: "StopBatchTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 停止跑批任务
    @inlinable @discardableResult
    public func stopBatchTask(batchTaskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopBatchTaskResponse> {
        self.stopBatchTask(StopBatchTaskRequest(batchTaskId: batchTaskId), region: region, logger: logger, on: eventLoop)
    }

    /// 停止跑批任务
    @inlinable @discardableResult
    public func stopBatchTask(batchTaskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopBatchTaskResponse {
        try await self.stopBatchTask(StopBatchTaskRequest(batchTaskId: batchTaskId), region: region, logger: logger, on: eventLoop)
    }
}
