//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tione {
    /// DescribeNotebook请求参数结构体
    public struct DescribeNotebookRequest: TCRequestModel {
        /// notebook id
        public let id: String

        public init(id: String) {
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// DescribeNotebook返回参数结构体
    public struct DescribeNotebookResponse: TCResponseModel {
        /// 详情
        public let notebookDetail: NotebookDetail

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case notebookDetail = "NotebookDetail"
            case requestId = "RequestId"
        }
    }

    /// Notebook详情
    @inlinable
    public func describeNotebook(_ input: DescribeNotebookRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookResponse> {
        self.client.execute(action: "DescribeNotebook", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Notebook详情
    @inlinable
    public func describeNotebook(_ input: DescribeNotebookRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookResponse {
        try await self.client.execute(action: "DescribeNotebook", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// Notebook详情
    @inlinable
    public func describeNotebook(id: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotebookResponse> {
        self.describeNotebook(.init(id: id), region: region, logger: logger, on: eventLoop)
    }

    /// Notebook详情
    @inlinable
    public func describeNotebook(id: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeNotebookResponse {
        try await self.describeNotebook(.init(id: id), region: region, logger: logger, on: eventLoop)
    }
}
