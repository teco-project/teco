//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tione {
    /// DescribeModelServiceCallInfo请求参数结构体
    public struct DescribeModelServiceCallInfoRequest: TCRequest {
        /// 服务组id
        public let serviceGroupId: String

        /// 服务分类
        public let serviceCategory: String?

        public init(serviceGroupId: String, serviceCategory: String? = nil) {
            self.serviceGroupId = serviceGroupId
            self.serviceCategory = serviceCategory
        }

        enum CodingKeys: String, CodingKey {
            case serviceGroupId = "ServiceGroupId"
            case serviceCategory = "ServiceCategory"
        }
    }

    /// DescribeModelServiceCallInfo返回参数结构体
    public struct DescribeModelServiceCallInfoResponse: TCResponse {
        /// 服务调用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceCallInfo: ServiceCallInfo?

        /// 升级网关调用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inferGatewayCallInfo: InferGatewayCallInfo?

        /// 默认nginx网关的调用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultNginxGatewayCallInfo: DefaultNginxGatewayCallInfo?

        /// 太极服务的调用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tjCallInfo: TJCallInfo?

        /// 内网调用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intranetCallInfo: IntranetCallInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case serviceCallInfo = "ServiceCallInfo"
            case inferGatewayCallInfo = "InferGatewayCallInfo"
            case defaultNginxGatewayCallInfo = "DefaultNginxGatewayCallInfo"
            case tjCallInfo = "TJCallInfo"
            case intranetCallInfo = "IntranetCallInfo"
            case requestId = "RequestId"
        }
    }

    /// 展示服务的调用信息
    @inlinable
    public func describeModelServiceCallInfo(_ input: DescribeModelServiceCallInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeModelServiceCallInfoResponse> {
        self.client.execute(action: "DescribeModelServiceCallInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 展示服务的调用信息
    @inlinable
    public func describeModelServiceCallInfo(_ input: DescribeModelServiceCallInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeModelServiceCallInfoResponse {
        try await self.client.execute(action: "DescribeModelServiceCallInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 展示服务的调用信息
    @inlinable
    public func describeModelServiceCallInfo(serviceGroupId: String, serviceCategory: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeModelServiceCallInfoResponse> {
        self.describeModelServiceCallInfo(.init(serviceGroupId: serviceGroupId, serviceCategory: serviceCategory), region: region, logger: logger, on: eventLoop)
    }

    /// 展示服务的调用信息
    @inlinable
    public func describeModelServiceCallInfo(serviceGroupId: String, serviceCategory: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeModelServiceCallInfoResponse {
        try await self.describeModelServiceCallInfo(.init(serviceGroupId: serviceGroupId, serviceCategory: serviceCategory), region: region, logger: logger, on: eventLoop)
    }
}
