//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Tione {
    /// 接口描述信息
    public struct APIConfigDetail: TCOutputModel {
        /// 接口id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 接口所属服务组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceGroupId: String?

        /// 接口描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 相对路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let relativeUrl: String?

        /// 服务类型 HTTP HTTPS
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceType: String?

        /// GET POST
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpMethod: String?

        /// 请求示例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpInputExample: String?

        /// 回包示例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let httpOutputExample: String?

        /// 更新成员
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedBy: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updatedAt: String?

        /// 主账号uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uin: String?

        /// 子账号subuin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subUin: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case serviceGroupId = "ServiceGroupId"
            case description = "Description"
            case relativeUrl = "RelativeUrl"
            case serviceType = "ServiceType"
            case httpMethod = "HttpMethod"
            case httpInputExample = "HttpInputExample"
            case httpOutputExample = "HttpOutputExample"
            case updatedBy = "UpdatedBy"
            case updatedAt = "UpdatedAt"
            case uin = "Uin"
            case subUin = "SubUin"
        }
    }

    /// 批量模型加速任务
    public struct BatchModelAccTask: TCInputModel {
        /// 模型ID
        public let modelId: String

        /// 模型版本
        public let modelVersion: String

        /// 模型来源(JOB/COS)
        public let modelSource: String

        /// 模型格式(TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/MMDETECTION/ONNX/HUGGING_FACE)
        public let modelFormat: String

        /// 模型Tensor信息
        public let tensorInfos: [String]

        /// 加速引擎版本
        public let accEngineVersion: String

        /// 模型输入cos路径
        public let modelInputPath: CosPathInfo

        /// 模型名称
        public let modelName: String?

        /// SavedModel保存时配置的签名
        public let modelSignature: String?

        public init(modelId: String, modelVersion: String, modelSource: String, modelFormat: String, tensorInfos: [String], accEngineVersion: String, modelInputPath: CosPathInfo, modelName: String? = nil, modelSignature: String? = nil) {
            self.modelId = modelId
            self.modelVersion = modelVersion
            self.modelSource = modelSource
            self.modelFormat = modelFormat
            self.tensorInfos = tensorInfos
            self.accEngineVersion = accEngineVersion
            self.modelInputPath = modelInputPath
            self.modelName = modelName
            self.modelSignature = modelSignature
        }

        enum CodingKeys: String, CodingKey {
            case modelId = "ModelId"
            case modelVersion = "ModelVersion"
            case modelSource = "ModelSource"
            case modelFormat = "ModelFormat"
            case tensorInfos = "TensorInfos"
            case accEngineVersion = "AccEngineVersion"
            case modelInputPath = "ModelInputPath"
            case modelName = "ModelName"
            case modelSignature = "ModelSignature"
        }
    }

    /// 跑批任务详情
    public struct BatchTaskDetail: TCOutputModel {
        /// 跑批任务ID
        public let batchTaskId: String

        /// 跑批任务名称
        public let batchTaskName: String

        /// 主账号uin
        public let uin: String

        /// 子账号uin
        public let subUin: String

        /// 地域
        public let region: String

        /// 计费模式
        public let chargeType: String

        /// 预付费专用资源组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupId: String?

        /// 预付费专用资源组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupName: String?

        /// 资源配置
        public let resourceConfigInfo: ResourceConfigInfo

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 服务对应的模型信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInfo: ModelInfo?

        /// 自定义镜像信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageInfo: ImageInfo?

        /// 代码包
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let codePackagePath: CosPathInfo?

        /// 启动命令
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startCmd: String?

        /// 输入数据配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataConfigs: [DataConfig]?

        /// 输出数据配置
        public let outputs: [DataConfig]

        /// 是否上报日志
        public let logEnable: Bool

        /// 日志配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logConfig: LogConfig?

        /// vpc id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 任务状态
        public let status: String

        /// 运行时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runtimeInSeconds: UInt64?

        /// 创建时间
        public let createTime: String

        /// 更新时间
        public let updateTime: String

        /// 任务开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 任务结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        public let chargeStatus: String

        /// 最近一次实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestInstanceId: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failureReason: String?

        /// 计费金额信息，eg：2.00元/小时 (for后付费)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingInfo: String?

        enum CodingKeys: String, CodingKey {
            case batchTaskId = "BatchTaskId"
            case batchTaskName = "BatchTaskName"
            case uin = "Uin"
            case subUin = "SubUin"
            case region = "Region"
            case chargeType = "ChargeType"
            case resourceGroupId = "ResourceGroupId"
            case resourceGroupName = "ResourceGroupName"
            case resourceConfigInfo = "ResourceConfigInfo"
            case tags = "Tags"
            case modelInfo = "ModelInfo"
            case imageInfo = "ImageInfo"
            case codePackagePath = "CodePackagePath"
            case startCmd = "StartCmd"
            case dataConfigs = "DataConfigs"
            case outputs = "Outputs"
            case logEnable = "LogEnable"
            case logConfig = "LogConfig"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case runtimeInSeconds = "RuntimeInSeconds"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case chargeStatus = "ChargeStatus"
            case latestInstanceId = "LatestInstanceId"
            case remark = "Remark"
            case failureReason = "FailureReason"
            case billingInfo = "BillingInfo"
        }
    }

    /// 批处理任务实例
    public struct BatchTaskInstance: TCOutputModel {
        /// 任务实例id
        public let batchTaskInstanceId: String

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 任务状态
        public let status: String

        /// 运行时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runtimeInSeconds: UInt64?

        enum CodingKeys: String, CodingKey {
            case batchTaskInstanceId = "BatchTaskInstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case status = "Status"
            case runtimeInSeconds = "RuntimeInSeconds"
        }
    }

    /// 出参类型
    public struct BatchTaskSetItem: TCOutputModel {
        /// 跑批任务ID
        public let batchTaskId: String

        /// 跑批任务名称
        public let batchTaskName: String

        /// 模型信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInfo: ModelInfo?

        /// 镜像信息
        public let imageInfo: ImageInfo

        /// 计费模式
        public let chargeType: String

        /// 计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        public let chargeStatus: String

        /// 预付费专用资源组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupId: String?

        /// 资源配置
        public let resourceConfigInfo: ResourceConfigInfo

        /// 标签配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 任务状态
        public let status: String

        /// 运行时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runtimeInSeconds: UInt64?

        /// 创建时间
        public let createTime: String

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 输出
        public let outputs: [DataConfig]

        /// 预付费专用资源组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupName: String?

        /// 失败原因
        public let failureReason: String

        /// 计费金额信息，eg：2.00元/小时 (for后付费)
        public let billingInfo: String

        enum CodingKeys: String, CodingKey {
            case batchTaskId = "BatchTaskId"
            case batchTaskName = "BatchTaskName"
            case modelInfo = "ModelInfo"
            case imageInfo = "ImageInfo"
            case chargeType = "ChargeType"
            case chargeStatus = "ChargeStatus"
            case resourceGroupId = "ResourceGroupId"
            case resourceConfigInfo = "ResourceConfigInfo"
            case tags = "Tags"
            case status = "Status"
            case runtimeInSeconds = "RuntimeInSeconds"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case updateTime = "UpdateTime"
            case outputs = "Outputs"
            case resourceGroupName = "ResourceGroupName"
            case failureReason = "FailureReason"
            case billingInfo = "BillingInfo"
        }
    }

    /// CFS存储的配置
    public struct CFSConfig: TCInputModel, TCOutputModel {
        /// cfs的实例的ID
        public let id: String

        /// 存储的路径
        public let path: String

        public init(id: String, path: String) {
            self.id = id
            self.path = path
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case path = "Path"
        }
    }

    /// cos的路径信息
    public struct CosPathInfo: TCInputModel, TCOutputModel {
        /// 存储桶
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bucket: String?

        /// 所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 路径列表，目前只支持单个
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paths: [String]?

        public init(bucket: String, region: String, paths: [String]) {
            self.bucket = bucket
            self.region = region
            self.paths = paths
        }

        enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case region = "Region"
            case paths = "Paths"
        }
    }

    /// 跑批任务周期描述
    public struct CronInfo: TCInputModel, TCOutputModel {
        /// cron配置
        public let cronConfig: String

        /// 周期开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var startTime: Date?

        /// 周期结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var endTime: Date?

        public init(cronConfig: String, startTime: Date? = nil, endTime: Date? = nil) {
            self.cronConfig = cronConfig
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
        }

        enum CodingKeys: String, CodingKey {
            case cronConfig = "CronConfig"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 定时扩缩任务
    public struct CronScaleJob: TCInputModel, TCOutputModel {
        /// Cron表达式，标识任务的执行时间，精确到分钟级
        public let schedule: String

        /// 定时任务名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 目标实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetReplicas: Int64?

        /// 目标min
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minReplicas: Int64?

        /// 目标max
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxReplicas: Int64?

        /// 例外时间，Cron表达式，在对应时间内不执行任务。最多支持3条。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let excludeDates: [String]?

        public init(schedule: String, name: String? = nil, targetReplicas: Int64? = nil, minReplicas: Int64? = nil, maxReplicas: Int64? = nil, excludeDates: [String]? = nil) {
            self.schedule = schedule
            self.name = name
            self.targetReplicas = targetReplicas
            self.minReplicas = minReplicas
            self.maxReplicas = maxReplicas
            self.excludeDates = excludeDates
        }

        enum CodingKeys: String, CodingKey {
            case schedule = "Schedule"
            case name = "Name"
            case targetReplicas = "TargetReplicas"
            case minReplicas = "MinReplicas"
            case maxReplicas = "MaxReplicas"
            case excludeDates = "ExcludeDates"
        }
    }

    /// 自定义指标
    public struct CustomTrainingData: TCInputModel, TCOutputModel {
        /// 指标名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metricName: String?

        /// 指标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let metrics: [CustomTrainingMetric]?

        public init(metricName: String? = nil, metrics: [CustomTrainingMetric]? = nil) {
            self.metricName = metricName
            self.metrics = metrics
        }

        enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case metrics = "Metrics"
        }
    }

    /// 自定义指标
    public struct CustomTrainingMetric: TCInputModel, TCOutputModel {
        /// X轴数据类型: TIMESTAMP; EPOCH; STEP
        public let xType: String?

        /// 数据点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let points: [CustomTrainingPoint]?

        public init(xType: String? = nil, points: [CustomTrainingPoint]? = nil) {
            self.xType = xType
            self.points = points
        }

        enum CodingKeys: String, CodingKey {
            case xType = "XType"
            case points = "Points"
        }
    }

    /// 自定义训练指标数据点
    public struct CustomTrainingPoint: TCInputModel, TCOutputModel {
        /// X值
        public let xValue: Float?

        /// Y值
        public let yValue: Float?

        public init(xValue: Float? = nil, yValue: Float? = nil) {
            self.xValue = xValue
            self.yValue = yValue
        }

        enum CodingKeys: String, CodingKey {
            case xValue = "XValue"
            case yValue = "YValue"
        }
    }

    /// 数据配置
    public struct DataConfig: TCOutputModel {
        /// 映射路径
        public let mappingPath: String

        /// DATASET、COS、CFS、HDFS、WEDATA_HDFS
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSourceType: String?

        /// 来自数据集的数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSetSource: DataSetConfig?

        /// 来自cos的数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosSource: CosPathInfo?

        /// 来自CFS的数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cfsSource: CFSConfig?

        /// 来自HDFS的数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hdfsSource: HDFSConfig?

        enum CodingKeys: String, CodingKey {
            case mappingPath = "MappingPath"
            case dataSourceType = "DataSourceType"
            case dataSetSource = "DataSetSource"
            case cosSource = "COSSource"
            case cfsSource = "CFSSource"
            case hdfsSource = "HDFSSource"
        }
    }

    /// 数据点
    public struct DataPoint: TCInputModel, TCOutputModel {
        /// 指标名字
        public let name: String

        /// 值
        public let value: Float

        public init(name: String, value: Float) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 数据集结构体
    public struct DataSetConfig: TCInputModel, TCOutputModel {
        /// 数据集ID
        public let id: String

        public init(id: String) {
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    /// 数据集组
    public struct DatasetGroup: TCOutputModel {
        /// 数据集ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetId: String?

        /// 数据集名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetName: String?

        /// 创建者
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let creator: String?

        /// 数据集版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetVersion: String?

        /// 数据集类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetType: String?

        /// 数据集标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetTags: [Tag]?

        /// 数据集标注任务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetAnnotationTaskName: String?

        /// 数据集标注任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetAnnotationTaskId: String?

        /// 处理进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let process: UInt64?

        /// 数据集状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetStatus: String?

        /// 错误详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 外部关联TASKType
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let externalTaskType: String?

        /// 数据集大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetSize: String?

        /// 数据集数据量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileNum: UInt64?

        /// 数据集源COS路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageDataPath: CosPathInfo?

        /// 数据集标签存储路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageLabelPath: CosPathInfo?

        /// 数据集版本聚合详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetVersions: [DatasetInfo]?

        /// 数据集标注状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotationStatus: String?

        /// 数据集类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotationType: String?

        /// 数据集标注格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotationFormat: String?

        /// 数据集范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetScope: String?

        enum CodingKeys: String, CodingKey {
            case datasetId = "DatasetId"
            case datasetName = "DatasetName"
            case creator = "Creator"
            case datasetVersion = "DatasetVersion"
            case datasetType = "DatasetType"
            case datasetTags = "DatasetTags"
            case datasetAnnotationTaskName = "DatasetAnnotationTaskName"
            case datasetAnnotationTaskId = "DatasetAnnotationTaskId"
            case process = "Process"
            case datasetStatus = "DatasetStatus"
            case errorMsg = "ErrorMsg"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case externalTaskType = "ExternalTaskType"
            case datasetSize = "DatasetSize"
            case fileNum = "FileNum"
            case storageDataPath = "StorageDataPath"
            case storageLabelPath = "StorageLabelPath"
            case datasetVersions = "DatasetVersions"
            case annotationStatus = "AnnotationStatus"
            case annotationType = "AnnotationType"
            case annotationFormat = "AnnotationFormat"
            case datasetScope = "DatasetScope"
        }
    }

    /// 数据集详情
    public struct DatasetInfo: TCOutputModel {
        /// 数据集id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetId: String?

        /// 数据集名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetName: String?

        /// 数据集创建者
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let creator: String?

        /// 数据集版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetVersion: String?

        /// 数据集类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetType: String?

        /// 数据集标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetTags: [Tag]?

        /// 数据集对应标注任务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetAnnotationTaskName: String?

        /// 数据集对应标注任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetAnnotationTaskId: String?

        /// 处理进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let process: Int64?

        /// 数据集状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetStatus: String?

        /// 错误详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// 数据集创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 数据集更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 外部任务类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let externalTaskType: String?

        /// 数据集存储大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetSize: String?

        /// 数据集数据数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileNum: UInt64?

        /// 数据集源cos 路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageDataPath: CosPathInfo?

        /// 数据集输出cos路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let storageLabelPath: CosPathInfo?

        /// 数据集标注状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotationStatus: String?

        /// 数据集类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotationType: String?

        /// 数据集标注格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let annotationFormat: String?

        /// 数据集范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let datasetScope: String?

        enum CodingKeys: String, CodingKey {
            case datasetId = "DatasetId"
            case datasetName = "DatasetName"
            case creator = "Creator"
            case datasetVersion = "DatasetVersion"
            case datasetType = "DatasetType"
            case datasetTags = "DatasetTags"
            case datasetAnnotationTaskName = "DatasetAnnotationTaskName"
            case datasetAnnotationTaskId = "DatasetAnnotationTaskId"
            case process = "Process"
            case datasetStatus = "DatasetStatus"
            case errorMsg = "ErrorMsg"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case externalTaskType = "ExternalTaskType"
            case datasetSize = "DatasetSize"
            case fileNum = "FileNum"
            case storageDataPath = "StorageDataPath"
            case storageLabelPath = "StorageLabelPath"
            case annotationStatus = "AnnotationStatus"
            case annotationType = "AnnotationType"
            case annotationFormat = "AnnotationFormat"
            case datasetScope = "DatasetScope"
        }
    }

    /// 图像检测参数信息
    public struct DetectionLabelInfo: TCOutputModel {
        /// 点坐标列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let points: [PointInfo]?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labels: [String]?

        /// 类别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameType: String?

        enum CodingKeys: String, CodingKey {
            case points = "Points"
            case labels = "Labels"
            case frameType = "FrameType"
        }
    }

    /// 引擎版本
    public struct EngineVersion: TCOutputModel {
        /// 引擎版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        /// 运行镜像
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let image: String?

        enum CodingKeys: String, CodingKey {
            case version = "Version"
            case image = "Image"
        }
    }

    /// 环境变量
    public struct EnvVar: TCInputModel, TCOutputModel {
        /// 环境变量key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 环境变量value
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 过滤器
    public struct Filter: TCInputModel {
        /// 过滤字段名称
        public let name: String?

        /// 过滤字段取值
        public let values: [String]?

        /// 是否开启反向查询
        public let negative: Bool?

        /// 是否开启模糊匹配
        public let fuzzy: Bool?

        public init(name: String? = nil, values: [String]? = nil, negative: Bool? = nil, fuzzy: Bool? = nil) {
            self.name = name
            self.values = values
            self.negative = negative
            self.fuzzy = fuzzy
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case negative = "Negative"
            case fuzzy = "Fuzzy"
        }
    }

    /// 图片列表查询结果详情
    public struct FilterLabelInfo: TCOutputModel {
        /// 数据集id
        public let datasetId: String

        /// 文件ID
        public let fileId: String

        /// 文件路径
        public let fileName: String

        /// 分类标签结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classificationLabels: [String]?

        /// 检测标签结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detectionLabels: [DetectionLabelInfo]?

        /// 分割标签结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let segmentationLabels: [SegmentationInfo]?

        /// RGB 图片路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rgbPath: String?

        /// 标签模板类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelTemplateType: String?

        /// 下载url链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let downloadUrl: String?

        /// 缩略图下载链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let downloadThumbnailUrl: String?

        /// 分割结果图片下载链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let downloadRGBUrl: String?

        /// OCR场景
        /// IDENTITY：识别
        /// STRUCTURE：智能结构化
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrScene: String?

        /// OCR场景标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrLabels: [OcrLabelInfo]?

        /// OCR场景标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ocrLabelInfo: String?

        /// 文本分类场景标签结果，内容是json结构
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let textClassificationLabelList: String?

        /// 文本内容，返回50字符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rowText: String?

        /// 文本内容是否完全返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contentOmit: Bool?

        enum CodingKeys: String, CodingKey {
            case datasetId = "DatasetId"
            case fileId = "FileId"
            case fileName = "FileName"
            case classificationLabels = "ClassificationLabels"
            case detectionLabels = "DetectionLabels"
            case segmentationLabels = "SegmentationLabels"
            case rgbPath = "RGBPath"
            case labelTemplateType = "LabelTemplateType"
            case downloadUrl = "DownloadUrl"
            case downloadThumbnailUrl = "DownloadThumbnailUrl"
            case downloadRGBUrl = "DownloadRGBUrl"
            case ocrScene = "OcrScene"
            case ocrLabels = "OcrLabels"
            case ocrLabelInfo = "OcrLabelInfo"
            case textClassificationLabelList = "TextClassificationLabelList"
            case rowText = "RowText"
            case contentOmit = "ContentOmit"
        }
    }

    /// 框架信息列表
    public struct FrameworkInfo: TCOutputModel {
        /// 框架名称
        public let name: String

        /// 框架版本以及对应的训练模式
        public let versionInfos: [FrameworkVersion]

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case versionInfos = "VersionInfos"
        }
    }

    /// 框架版本以及对应的训练模式
    public struct FrameworkVersion: TCInputModel, TCOutputModel {
        /// 框架版本
        public let version: String

        /// 训练模式
        public let trainingModes: [String]

        /// 框架运行环境
        public let environment: String?

        public init(version: String, trainingModes: [String], environment: String? = nil) {
            self.version = version
            self.trainingModes = trainingModes
            self.environment = environment
        }

        enum CodingKeys: String, CodingKey {
            case version = "Version"
            case trainingModes = "TrainingModes"
            case environment = "Environment"
        }
    }

    /// gpu 详情
    public struct GpuDetail: TCOutputModel {
        /// GPU 显卡类型；枚举值: V100 A100 T4
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// GPU 显卡数；单位为1/100卡，比如100代表1卡
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: UInt64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 资源信息
    public struct GroupResource: TCOutputModel {
        /// CPU核数; 单位为1/1000核，比如100表示0.1核
        public let cpu: UInt64

        /// 内存；单位为MB
        public let memory: UInt64

        /// 总卡数；GPUDetail 显卡数之和；单位为1/100卡，比如100代表1卡
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpu: UInt64?

        /// Gpu详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuDetailSet: [GpuDetail]?

        enum CodingKeys: String, CodingKey {
            case cpu = "Cpu"
            case memory = "Memory"
            case gpu = "Gpu"
            case gpuDetailSet = "GpuDetailSet"
        }
    }

    /// HDFS的参数配置
    public struct HDFSConfig: TCInputModel, TCOutputModel {
        /// 集群实例ID,实例ID形如: emr-xxxxxxxx
        public let id: String

        /// 路径
        public let path: String

        public init(id: String, path: String) {
            self.id = id
            self.path = path
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case path = "Path"
        }
    }

    /// hpa的描述
    public struct HorizontalPodAutoscaler: TCInputModel, TCOutputModel {
        /// 最小实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minReplicas: Int64?

        /// 最大实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxReplicas: Int64?

        /// 扩缩容指标
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hpaMetrics: [Option]?

        public init(minReplicas: Int64, maxReplicas: Int64, hpaMetrics: [Option]) {
            self.minReplicas = minReplicas
            self.maxReplicas = maxReplicas
            self.hpaMetrics = hpaMetrics
        }

        enum CodingKeys: String, CodingKey {
            case minReplicas = "MinReplicas"
            case maxReplicas = "MaxReplicas"
            case hpaMetrics = "HpaMetrics"
        }
    }

    /// 模型专业参数
    public struct HyperParameter: TCInputModel, TCOutputModel {
        /// 最大nnz数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxNNZ: String?

        /// slot数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slotNum: String?

        /// gpu cache 使用率
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpuCachePercentage: String?

        /// cpu cache 使用率
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuCachePercentage: String?

        /// 是否开启分布式模式(true/false)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableDistributed: String?

        /// TORCH_SCRIPT、MMDETECTION、DETECTRON2、HUGGINGFACE格式在进行优化时切分子图的最小算子数目，一般无需进行改动，默认为3
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minBlockSizePt: String?

        /// FROZEN_GRAPH、SAVED_MODEL格式在进行优化时切分子图的最小算子数目，一般无需进行改动，默认为10
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minBlockSizeTf: String?

        public init(maxNNZ: String? = nil, slotNum: String? = nil, cpuCachePercentage: String? = nil, gpuCachePercentage: String? = nil, enableDistributed: String? = nil, minBlockSizePt: String? = nil, minBlockSizeTf: String? = nil) {
            self.maxNNZ = maxNNZ
            self.slotNum = slotNum
            self.cpuCachePercentage = cpuCachePercentage
            self.gpuCachePercentage = gpuCachePercentage
            self.enableDistributed = enableDistributed
            self.minBlockSizePt = minBlockSizePt
            self.minBlockSizeTf = minBlockSizeTf
        }

        enum CodingKeys: String, CodingKey {
            case maxNNZ = "MaxNNZ"
            case slotNum = "SlotNum"
            case cpuCachePercentage = "CpuCachePercentage"
            case gpuCachePercentage = "GpuCachePercentage"
            case enableDistributed = "EnableDistributed"
            case minBlockSizePt = "MinBlockSizePt"
            case minBlockSizeTf = "MinBlockSizeTf"
        }
    }

    /// 镜像描述信息
    public struct ImageInfo: TCInputModel, TCOutputModel {
        /// 镜像类型：TCR为腾讯云TCR镜像; CCR为腾讯云TCR个人版镜像，PreSet为平台预置镜像
        public let imageType: String

        /// 镜像地址
        public let imageUrl: String

        /// TCR镜像对应的地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registryRegion: String?

        /// TCR镜像对应的实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registryId: String?

        public init(imageType: String, imageUrl: String, registryRegion: String? = nil, registryId: String? = nil) {
            self.imageType = imageType
            self.imageUrl = imageUrl
            self.registryRegion = registryRegion
            self.registryId = registryId
        }

        enum CodingKeys: String, CodingKey {
            case imageType = "ImageType"
            case imageUrl = "ImageUrl"
            case registryRegion = "RegistryRegion"
            case registryId = "RegistryId"
        }
    }

    /// 服务的调用信息，服务组下唯一
    public struct InferGatewayCallInfo: TCOutputModel {
        /// 内网http调用地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcHttpAddr: String?

        /// 内网https调用地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcHttpsAddr: String?

        /// 内网grpc调用地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcGrpcTlsAddr: String?

        /// 可访问的vpcid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 后端ip对应的子网
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        enum CodingKeys: String, CodingKey {
            case vpcHttpAddr = "VpcHttpAddr"
            case vpcHttpsAddr = "VpcHttpsAddr"
            case vpcGrpcTlsAddr = "VpcGrpcTlsAddr"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
        }
    }

    /// 推理镜像详情
    public struct InferTemplate: TCOutputModel {
        /// 模板ID
        public let inferTemplateId: String

        /// 模板镜像
        public let inferTemplateImage: String

        enum CodingKeys: String, CodingKey {
            case inferTemplateId = "InferTemplateId"
            case inferTemplateImage = "InferTemplateImage"
        }
    }

    /// 推理镜像组
    public struct InferTemplateGroup: TCOutputModel {
        /// 算法框架
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let framework: String?

        /// 版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameworkVersion: String?

        /// 支持的训练框架集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groups: [String]?

        /// 镜像模板参数列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inferTemplates: [InferTemplate]?

        enum CodingKeys: String, CodingKey {
            case framework = "Framework"
            case frameworkVersion = "FrameworkVersion"
            case groups = "Groups"
            case inferTemplates = "InferTemplates"
        }
    }

    /// 资源组节点信息
    public struct Instance: TCOutputModel {
        /// 资源组节点id
        public let instanceId: String

        /// 节点已用资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedResource: ResourceInfo?

        /// 节点总资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalResource: ResourceInfo?

        /// 节点状态
        /// 注意：此字段为枚举值
        /// 说明:
        /// DEPLOYING: 部署中
        /// RUNNING: 运行中
        /// DEPLOY_FAILED: 部署失败
        ///  RELEASING 释放中
        /// RELEASED：已释放
        /// EXCEPTION：异常
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceStatus: String?

        /// 创建人
        public let subUin: String

        /// 创建时间:
        /// 注意：北京时间，比如: 2021-12-01 12:00:00
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 到期时间
        /// 注意：北京时间，比如：2021-12-11 12:00:00
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 自动续费标识
        /// 注意：此字段为枚举值
        /// 说明：
        /// NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期通知
        /// NOTIFY_AND_AUTO_RENEW：自动续费且到期通知
        /// DISABLE_NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期不通知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenewFlag: String?

        /// 计费项ID
        public let specId: String

        /// 计费项别名
        public let specAlias: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case usedResource = "UsedResource"
            case totalResource = "TotalResource"
            case instanceStatus = "InstanceStatus"
            case subUin = "SubUin"
            case createTime = "CreateTime"
            case expireTime = "ExpireTime"
            case autoRenewFlag = "AutoRenewFlag"
            case specId = "SpecId"
            case specAlias = "SpecAlias"
        }
    }

    /// 日志配置
    public struct LogConfig: TCInputModel, TCOutputModel {
        /// 日志需要投递到cls的日志集
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logsetId: String?

        /// 日志需要投递到cls的主题
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicId: String?

        public init(logsetId: String, topicId: String) {
            self.logsetId = logsetId
            self.topicId = topicId
        }

        enum CodingKeys: String, CodingKey {
            case logsetId = "LogsetId"
            case topicId = "TopicId"
        }
    }

    /// 单条日志数据结构
    public struct LogIdentity: TCOutputModel {
        /// 单条日志的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 单条日志的内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 这条日志对应的Pod名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let podName: String?

        /// 日志的时间戳（RFC3339格式的时间字符串）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timestamp: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case message = "Message"
            case podName = "PodName"
            case timestamp = "Timestamp"
        }
    }

    /// 指标数据
    public struct MetricData: TCInputModel, TCOutputModel {
        /// 训练任务id
        public let taskId: String

        /// 时间戳.unix timestamp,单位为秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timestamp: Int64?

        /// 用户uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uin: String?

        /// 本次上报数据所处的训练周期数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let epoch: Int64?

        /// 本次上报数据所处的训练迭代次数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let step: Int64?

        /// 训练停止所需的迭代总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalSteps: Int64?

        /// 数据点。数组元素为不同指标的数据。数组长度不超过10。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let points: [DataPoint]?

        public init(taskId: String, timestamp: Int64? = nil, uin: String? = nil, epoch: Int64? = nil, step: Int64? = nil, totalSteps: Int64? = nil, points: [DataPoint]? = nil) {
            self.taskId = taskId
            self.timestamp = timestamp
            self.uin = uin
            self.epoch = epoch
            self.step = step
            self.totalSteps = totalSteps
            self.points = points
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case timestamp = "Timestamp"
            case uin = "Uin"
            case epoch = "Epoch"
            case step = "Step"
            case totalSteps = "TotalSteps"
            case points = "Points"
        }
    }

    /// 模型加速引擎版本
    public struct ModelAccEngineVersion: TCOutputModel {
        /// 模型格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelFormat: String?

        /// 引擎版本信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineVersions: [EngineVersion]?

        enum CodingKeys: String, CodingKey {
            case modelFormat = "ModelFormat"
            case engineVersions = "EngineVersions"
        }
    }

    /// 模型加速任务
    public struct ModelAccelerateTask: TCOutputModel {
        /// 模型加速任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelAccTaskId: String?

        /// 模型加速任务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelAccTaskName: String?

        /// 模型ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelId: String?

        /// 模型名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelName: String?

        /// 模型版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelVersion: String?

        /// 模型来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelSource: String?

        /// 优化级别
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let optimizationLevel: String?

        /// 任务状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskStatus: String?

        /// input节点个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInputNum: UInt64?

        /// input节点信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInputInfos: [ModelInputInfo]?

        /// GPU型号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuType: String?

        /// 计费模式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chargeType: String?

        /// 加速比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let speedup: String?

        /// 模型输入cos路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInputPath: CosPathInfo?

        /// 模型输出cos路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelOutputPath: CosPathInfo?

        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// 算法框架
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let algorithmFramework: String?

        /// 排队个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let waitNumber: UInt64?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 任务进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskProgress: UInt64?

        /// 模型格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelFormat: String?

        /// 模型Tensor信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tensorInfos: [String]?

        /// 模型专业参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hyperParameter: HyperParameter?

        /// 加速引擎版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accEngineVersion: String?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 优化模型是否已保存到模型仓库
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isSaved: Bool?

        /// SAVED_MODEL保存时配置的签名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelSignature: String?

        /// 是否是QAT模型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let qatModel: Bool?

        enum CodingKeys: String, CodingKey {
            case modelAccTaskId = "ModelAccTaskId"
            case modelAccTaskName = "ModelAccTaskName"
            case modelId = "ModelId"
            case modelName = "ModelName"
            case modelVersion = "ModelVersion"
            case modelSource = "ModelSource"
            case optimizationLevel = "OptimizationLevel"
            case taskStatus = "TaskStatus"
            case modelInputNum = "ModelInputNum"
            case modelInputInfos = "ModelInputInfos"
            case gpuType = "GPUType"
            case chargeType = "ChargeType"
            case speedup = "Speedup"
            case modelInputPath = "ModelInputPath"
            case modelOutputPath = "ModelOutputPath"
            case errorMsg = "ErrorMsg"
            case algorithmFramework = "AlgorithmFramework"
            case waitNumber = "WaitNumber"
            case createTime = "CreateTime"
            case taskProgress = "TaskProgress"
            case modelFormat = "ModelFormat"
            case tensorInfos = "TensorInfos"
            case hyperParameter = "HyperParameter"
            case accEngineVersion = "AccEngineVersion"
            case tags = "Tags"
            case isSaved = "IsSaved"
            case modelSignature = "ModelSignature"
            case qatModel = "QATModel"
        }
    }

    /// 模型描述信息
    public struct ModelInfo: TCInputModel, TCOutputModel {
        /// 模型版本id, DescribeTrainingModelVersion查询模型接口时的id
        /// 自动学习类型的模型填写自动学习的任务id
        public let modelVersionId: String

        /// 模型id
        public let modelId: String?

        /// 模型名
        public let modelName: String?

        /// 模型版本
        public let modelVersion: String?

        /// 模型来源
        public let modelSource: String?

        /// cos路径信息
        public let cosPathInfo: CosPathInfo?

        /// 模型对应的算法框架，预留
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let algorithmFramework: String?

        /// 默认为 NORMAL, 已加速模型: ACCELERATE, 自动学习模型 AUTO_ML
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelType: String?

        public init(modelVersionId: String, modelId: String? = nil, modelName: String? = nil, modelVersion: String? = nil, modelSource: String? = nil, cosPathInfo: CosPathInfo? = nil, algorithmFramework: String? = nil, modelType: String? = nil) {
            self.modelVersionId = modelVersionId
            self.modelId = modelId
            self.modelName = modelName
            self.modelVersion = modelVersion
            self.modelSource = modelSource
            self.cosPathInfo = cosPathInfo
            self.algorithmFramework = algorithmFramework
            self.modelType = modelType
        }

        enum CodingKeys: String, CodingKey {
            case modelVersionId = "ModelVersionId"
            case modelId = "ModelId"
            case modelName = "ModelName"
            case modelVersion = "ModelVersion"
            case modelSource = "ModelSource"
            case cosPathInfo = "CosPathInfo"
            case algorithmFramework = "AlgorithmFramework"
            case modelType = "ModelType"
        }
    }

    /// 模型输入信息
    public struct ModelInputInfo: TCInputModel, TCOutputModel {
        /// input数据类型
        /// FIXED：固定
        /// RANGE：浮动
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInputType: String?

        /// input数据尺寸
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInputDimension: [String]?

        public init(modelInputType: String, modelInputDimension: [String]) {
            self.modelInputType = modelInputType
            self.modelInputDimension = modelInputDimension
        }

        enum CodingKeys: String, CodingKey {
            case modelInputType = "ModelInputType"
            case modelInputDimension = "ModelInputDimension"
        }
    }

    /// OCR场景标签列表
    public struct OcrLabelInfo: TCOutputModel {
        /// 坐标点围起来的框
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let points: [PointInfo]?

        /// 框的形状：
        /// FRAME_TYPE_RECTANGLE
        /// FRAME_TYPE_POLYGON
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameType: String?

        /// 智能结构化：key区域对应的内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 智能结构化：上述key的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyId: String?

        /// 识别：框区域的内容
        /// 智能结构化：value区域对应的内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        /// 智能结构化：value区域所关联的key 区域的keyID的集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyIdsForValue: [String]?

        /// key或者value区域内容的方向：
        /// DIRECTION_VERTICAL
        /// DIRECTION_HORIZONTAL
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let direction: String?

        enum CodingKeys: String, CodingKey {
            case points = "Points"
            case frameType = "FrameType"
            case key = "Key"
            case keyId = "KeyId"
            case value = "Value"
            case keyIdsForValue = "KeyIdsForValue"
            case direction = "Direction"
        }
    }

    /// 键值对
    public struct Option: TCInputModel, TCOutputModel {
        /// 指标名
        public let name: String

        /// 指标值
        public let value: Int64

        public init(name: String, value: Int64) {
            self.name = name
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 点信息描述
    public struct PointInfo: TCOutputModel {
        /// X坐标值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let x: Float?

        /// Y坐标值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let y: Float?

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
        }
    }

    /// 资源配置
    public struct ResourceConfigInfo: TCInputModel, TCOutputModel {
        /// 角色，eg：PS、WORKER、DRIVER、EXECUTOR
        public let role: String

        /// cpu核数，1000=1核
        public let cpu: UInt64?

        /// 内存，单位为MB
        public let memory: UInt64?

        /// gpu卡类型
        public let gpuType: String?

        /// gpu数
        public let gpu: UInt64?

        /// 算力规格ID
        /// 计算规格 (for后付费)，可选值如下：
        /// TI.S.LARGE.POST: 4C8G
        /// TI.S.2XLARGE16.POST:  8C16G
        /// TI.S.2XLARGE32.POST:  8C32G
        /// TI.S.4XLARGE32.POST:  16C32G
        /// TI.S.4XLARGE64.POST:  16C64G
        /// TI.S.6XLARGE48.POST:  24C48G
        /// TI.S.6XLARGE96.POST:  24C96G
        /// TI.S.8XLARGE64.POST:  32C64G
        /// TI.S.8XLARGE128.POST : 32C128G
        /// TI.GN10.2XLARGE40.POST: 8C40G V100*1
        /// TI.GN10.5XLARGE80.POST:  18C80G V100*2
        /// TI.GN10.10XLARGE160.POST :  32C160G V100*4
        /// TI.GN10.20XLARGE320.POST :  72C320G V100*8
        /// TI.GN7.8XLARGE128.POST: 32C128G T4*1
        /// TI.GN7.10XLARGE160.POST: 40C160G T4*2
        /// TI.GN7.20XLARGE320.POST: 80C32
        public let instanceType: String?

        /// 计算节点数
        public let instanceNum: UInt64?

        /// 算力规格名称
        /// 计算规格 (for后付费)，可选值如下：
        /// 4C8G
        /// 8C16G
        /// 8C32G
        /// 16C32G
        /// 6C64G
        /// 24C48G
        /// 24C96G
        /// 32C64G
        /// 32C128G
        /// 8C40G V100*1
        /// 8C80G V100*2
        /// 32C160G V100*4
        /// 72C320G V100*8
        /// 32C128G T4*1
        /// 40C160G T4*2
        /// 80C32
        public let instanceTypeAlias: String?

        public init(role: String, cpu: UInt64? = nil, memory: UInt64? = nil, gpuType: String? = nil, gpu: UInt64? = nil, instanceType: String? = nil, instanceNum: UInt64? = nil, instanceTypeAlias: String? = nil) {
            self.role = role
            self.cpu = cpu
            self.memory = memory
            self.gpuType = gpuType
            self.gpu = gpu
            self.instanceType = instanceType
            self.instanceNum = instanceNum
            self.instanceTypeAlias = instanceTypeAlias
        }

        enum CodingKeys: String, CodingKey {
            case role = "Role"
            case cpu = "Cpu"
            case memory = "Memory"
            case gpuType = "GpuType"
            case gpu = "Gpu"
            case instanceType = "InstanceType"
            case instanceNum = "InstanceNum"
            case instanceTypeAlias = "InstanceTypeAlias"
        }
    }

    /// 资源组
    public struct ResourceGroup: TCOutputModel {
        /// 资源组id
        public let resourceGroupId: String

        /// 资源组名称
        public let resourceGroupName: String

        /// 可用节点个数(运行中的节点)
        public let freeInstance: UInt64

        /// 总节点个数(所有节点)
        public let totalInstance: UInt64

        /// 资资源组已用的资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedResource: GroupResource?

        /// 资源组总资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalResource: GroupResource?

        /// 节点信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceSet: [Instance]?

        /// 标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [Tag]?

        enum CodingKeys: String, CodingKey {
            case resourceGroupId = "ResourceGroupId"
            case resourceGroupName = "ResourceGroupName"
            case freeInstance = "FreeInstance"
            case totalInstance = "TotalInstance"
            case usedResource = "UsedResource"
            case totalResource = "TotalResource"
            case instanceSet = "InstanceSet"
            case tagSet = "TagSet"
        }
    }

    /// 描述资源信息
    public struct ResourceInfo: TCInputModel, TCOutputModel {
        /// 处理器资源, 单位为1/1000核
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpu: UInt64?

        /// 内存资源, 单位为1M
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memory: UInt64?

        /// Gpu卡个数资源, 单位为0.01单位的GpuType.
        /// Gpu=100表示使用了“一张”gpu卡, 但此处的“一张”卡有可能是虚拟化后的1/4卡, 也有可能是整张卡. 取决于实例的机型
        /// 例1 实例的机型带有1张虚拟gpu卡, 每张虚拟gpu卡对应1/4张实际T4卡, 则此时 GpuType=T4, Gpu=100, RealGpu=25.
        /// 例2 实例的机型带有4张gpu整卡, 每张卡对应1张实际T4卡, 则 此时 GpuType=T4, Gpu=400, RealGpu=400.
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpu: UInt64?

        /// Gpu卡型号 T4或者V100。仅展示当前 GPU 卡型号，若存在多类型同时使用，则参考 RealGpuDetailSet 的值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuType: String?

        /// 创建或更新时无需填写，仅展示需要关注
        /// 后付费非整卡实例对应的实际的Gpu卡资源, 表示gpu资源对应实际的gpu卡个数.
        /// RealGpu=100表示实际使用了一张gpu卡, 对应实际的实例机型, 有可能代表带有1/4卡的实例4个, 或者带有1/2卡的实例2个, 或者带有1卡的实力1个.
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realGpu: UInt64?

        /// 创建或更新时无需填写，仅展示需要关注。详细的GPU使用信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realGpuDetailSet: [GpuDetail]?

        public init(cpu: UInt64, memory: UInt64, gpu: UInt64? = nil, gpuType: String? = nil, realGpu: UInt64? = nil, realGpuDetailSet: [GpuDetail]? = nil) {
            self.cpu = cpu
            self.memory = memory
            self.gpu = gpu
            self.gpuType = gpuType
            self.realGpu = realGpu
            self.realGpuDetailSet = realGpuDetailSet
        }

        enum CodingKeys: String, CodingKey {
            case cpu = "Cpu"
            case memory = "Memory"
            case gpu = "Gpu"
            case gpuType = "GpuType"
            case realGpu = "RealGpu"
            case realGpuDetailSet = "RealGpuDetailSet"
        }
    }

    /// 文本行信息
    public struct RowItem: TCOutputModel {
        /// rowValue 数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let values: [RowValue]?

        enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    /// 文件行信息
    public struct RowValue: TCOutputModel {
        /// 列名
        public let name: String

        /// 列值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 定时的事务和行为
    public struct ScheduledAction: TCInputModel {
        /// 是否要定时停止服务，true or false。true 则 ScheduleStopTime 必填， false 则 ScheduleStopTime 不生效
        public let scheduleStop: Bool?

        /// 要执行定时停止的时间，格式：“2022-01-26T19:46:22+08:00”
        public let scheduleStopTime: String?

        public init(scheduleStop: Bool? = nil, scheduleStopTime: String? = nil) {
            self.scheduleStop = scheduleStop
            self.scheduleStopTime = scheduleStopTime
        }

        enum CodingKeys: String, CodingKey {
            case scheduleStop = "ScheduleStop"
            case scheduleStopTime = "ScheduleStopTime"
        }
    }

    /// 表格数据集表头信息
    public struct SchemaInfo: TCInputModel {
        /// 长度30字符内
        public let name: String

        /// 数据类型
        public let type: String

        public init(name: String, type: String) {
            self.name = name
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
        }
    }

    /// 图片分割参数信息
    public struct SegmentationInfo: TCOutputModel {
        /// 点坐标数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let points: [PointInfo]?

        /// 分割标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let label: String?

        /// 灰度值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gray: UInt64?

        /// 颜色
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let color: String?

        enum CodingKeys: String, CodingKey {
            case points = "Points"
            case label = "Label"
            case gray = "Gray"
            case color = "Color"
        }
    }

    /// 描述在线服务
    public struct Service: TCOutputModel {
        /// 服务组id
        public let serviceGroupId: String

        /// 服务id
        public let serviceId: String

        /// 服务组名
        public let serviceGroupName: String

        /// 服务描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceDescription: String?

        /// 集群id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 命名空间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespace: String?

        /// 付费类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chargeType: String?

        /// 后付费资源组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupId: String?

        /// 创建者
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdBy: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 主账号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uin: String?

        /// 子账号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subUin: String?

        /// app_id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: Int64?

        /// 版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        /// 服务组下服务的最高版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestVersion: String?

        /// 服务的详细信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceInfo: ServiceInfo?

        /// 服务的业务状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessStatus: String?

        /// 服务的创建来源
        /// AUTO_ML: 来自自动学习的一键发布
        /// DEFAULT: 其他来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createSource: String?

        /// 费用信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingInfo: String?

        /// 服务状态
        /// CREATING 创建中
        /// CREATE_FAILED 创建失败
        /// Normal	正常运行中
        /// Stopped  已停止
        /// Stopping 停止中
        /// Abnormal 异常
        /// Pending 启动中
        /// Waiting 就绪中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 模型权重
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weight: Int64?

        /// 服务所在的 ingress 的 name
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ingressName: String?

        /// 服务限速限流相关配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceLimit: ServiceLimit?

        /// 定时停止的配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scheduledAction: ScheduledAction?

        /// 服务创建失败的原因，创建成功后该字段为默认值 CREATE_SUCCEED
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createFailedReason: String?

        /// 预付费服务对应的资源组名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupName: String?

        /// 服务的标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        enum CodingKeys: String, CodingKey {
            case serviceGroupId = "ServiceGroupId"
            case serviceId = "ServiceId"
            case serviceGroupName = "ServiceGroupName"
            case serviceDescription = "ServiceDescription"
            case clusterId = "ClusterId"
            case region = "Region"
            case namespace = "Namespace"
            case chargeType = "ChargeType"
            case resourceGroupId = "ResourceGroupId"
            case createdBy = "CreatedBy"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case uin = "Uin"
            case subUin = "SubUin"
            case appId = "AppId"
            case version = "Version"
            case latestVersion = "LatestVersion"
            case serviceInfo = "ServiceInfo"
            case businessStatus = "BusinessStatus"
            case createSource = "CreateSource"
            case billingInfo = "BillingInfo"
            case status = "Status"
            case weight = "Weight"
            case ingressName = "IngressName"
            case serviceLimit = "ServiceLimit"
            case scheduledAction = "ScheduledAction"
            case createFailedReason = "CreateFailedReason"
            case resourceGroupName = "ResourceGroupName"
            case tags = "Tags"
        }
    }

    /// 服务的调用信息，服务组下唯一
    public struct ServiceCallInfo: TCOutputModel {
        /// 服务组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceGroupId: String?

        /// 内网http调用地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let innerHttpAddr: String?

        /// 内网https调用地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let innerHttpsAddr: String?

        /// 内网http调用地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let outerHttpAddr: String?

        /// 内网https调用地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let outerHttpsAddr: String?

        /// 调用key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appKey: String?

        /// 调用secret
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appSecret: String?

        enum CodingKeys: String, CodingKey {
            case serviceGroupId = "ServiceGroupId"
            case innerHttpAddr = "InnerHttpAddr"
            case innerHttpsAddr = "InnerHttpsAddr"
            case outerHttpAddr = "OuterHttpAddr"
            case outerHttpsAddr = "OuterHttpsAddr"
            case appKey = "AppKey"
            case appSecret = "AppSecret"
        }
    }

    /// 在线服务一个服务组的信息
    public struct ServiceGroup: TCOutputModel {
        /// 服务组id
        public let serviceGroupId: String

        /// 服务组名
        public let serviceGroupName: String

        /// 创建者
        public let createdBy: String

        /// 创建时间
        public let createTime: String

        /// 更新时间
        public let updateTime: String

        /// 主账号
        public let uin: String

        /// 服务组下服务总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceCount: UInt64?

        /// 服务组下在运行的服务数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runningServiceCount: UInt64?

        /// 服务描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let services: [Service]?

        /// 服务组状态，与服务一致
        ///  CREATING 创建中
        ///      CREATE_FAILED 创建失败
        ///      Normal	正常运行中
        ///      Stopped  已停止
        ///      Stopping 停止中
        ///      Abnormal 异常
        ///      Pending 启动中
        ///      Waiting 就绪中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 服务组标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 服务组下最高版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestVersion: String?

        /// 服务的业务状态
        /// CREATING 创建中
        ///      CREATE_FAILED 创建失败
        ///      ARREARS_STOP 因欠费被强制停止
        ///      BILLING 计费中
        ///      WHITELIST_USING 白名单试用中
        ///      WHITELIST_STOP 白名单额度不足
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let businessStatus: String?

        /// 服务的计费信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingInfo: String?

        /// 服务的创建来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createSource: String?

        /// 服务组的权重更新状态
        /// UPDATING 更新中
        ///      UPDATED 更新成功
        ///      UPDATE_FAILED 更新失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weightUpdateStatus: String?

        enum CodingKeys: String, CodingKey {
            case serviceGroupId = "ServiceGroupId"
            case serviceGroupName = "ServiceGroupName"
            case createdBy = "CreatedBy"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case uin = "Uin"
            case serviceCount = "ServiceCount"
            case runningServiceCount = "RunningServiceCount"
            case services = "Services"
            case status = "Status"
            case tags = "Tags"
            case latestVersion = "LatestVersion"
            case businessStatus = "BusinessStatus"
            case billingInfo = "BillingInfo"
            case createSource = "CreateSource"
            case weightUpdateStatus = "WeightUpdateStatus"
        }
    }

    /// 服务历史版本
    public struct ServiceHistory: TCOutputModel {
        /// 版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let revision: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 镜像
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let image: String?

        /// 模型文件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelFile: String?

        /// 原始数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rawData: String?

        enum CodingKeys: String, CodingKey {
            case revision = "Revision"
            case updateTime = "UpdateTime"
            case image = "Image"
            case modelFile = "ModelFile"
            case rawData = "RawData"
        }
    }

    /// 推理服务在集群中的信息
    public struct ServiceInfo: TCOutputModel {
        /// 期望运行的Pod数量，停止状态是0
        /// 不同计费模式和调节模式下对应关系如下
        /// PREPAID 和 POSTPAID_BY_HOUR:
        /// 手动调节模式下对应 实例数量
        /// 自动调节模式下对应 基于时间的默认策略的实例数量
        /// HYBRID_PAID:
        /// 后付费实例手动调节模式下对应 实例数量
        /// 后付费实例自动调节模式下对应 时间策略的默认策略的实例数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicas: Int64?

        /// 镜像信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageInfo: ImageInfo?

        /// 环境变量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let env: [EnvVar]?

        /// 资源信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resources: ResourceInfo?

        /// 后付费实例对应的机型规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceType: String?

        /// 模型信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelInfo: ModelInfo?

        /// 是否启用日志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logEnable: Bool?

        /// 日志配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logConfig: LogConfig?

        /// 是否开启鉴权
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let authorizationEnable: Bool?

        /// hpa配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let horizontalPodAutoscaler: HorizontalPodAutoscaler?

        /// 服务的状态描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: WorkloadStatus?

        /// 权重
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weight: UInt64?

        /// 实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let podList: [String]?

        /// 资源总量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceTotal: ResourceInfo?

        /// 历史实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let oldReplicas: Int64?

        /// 计费模式[HYBRID_PAID]时生效, 用于标识混合计费模式下的预付费实例数, 若不填则默认为1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hybridBillingPrepaidReplicas: Int64?

        /// 历史 HYBRID_PAID 时的实例数，用户恢复服务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let oldHybridBillingPrepaidReplicas: Int64?

        /// 是否开启模型的热更新。默认不开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelHotUpdateEnable: Bool?

        enum CodingKeys: String, CodingKey {
            case replicas = "Replicas"
            case imageInfo = "ImageInfo"
            case env = "Env"
            case resources = "Resources"
            case instanceType = "InstanceType"
            case modelInfo = "ModelInfo"
            case logEnable = "LogEnable"
            case logConfig = "LogConfig"
            case authorizationEnable = "AuthorizationEnable"
            case horizontalPodAutoscaler = "HorizontalPodAutoscaler"
            case status = "Status"
            case weight = "Weight"
            case podList = "PodList"
            case resourceTotal = "ResourceTotal"
            case oldReplicas = "OldReplicas"
            case hybridBillingPrepaidReplicas = "HybridBillingPrepaidReplicas"
            case oldHybridBillingPrepaidReplicas = "OldHybridBillingPrepaidReplicas"
            case modelHotUpdateEnable = "ModelHotUpdateEnable"
        }
    }

    /// 服务的限流限速等配置
    public struct ServiceLimit: TCInputModel {
        /// 是否开启实例层面限流限速，true or false。true 则 InstanceRpsLimit 必填， false 则 InstanceRpsLimit 不生效
        public let enableInstanceRpsLimit: Bool?

        /// 每个服务实例的 request per second 限速, 0 为不限流
        public let instanceRpsLimit: Int64?

        public init(enableInstanceRpsLimit: Bool? = nil, instanceRpsLimit: Int64? = nil) {
            self.enableInstanceRpsLimit = enableInstanceRpsLimit
            self.instanceRpsLimit = instanceRpsLimit
        }

        enum CodingKeys: String, CodingKey {
            case enableInstanceRpsLimit = "EnableInstanceRpsLimit"
            case instanceRpsLimit = "InstanceRpsLimit"
        }
    }

    /// 计费项内容
    public struct Spec: TCOutputModel {
        /// 计费项标签
        public let specId: String

        /// 计费项名称
        public let specName: String

        /// 计费项显示名称
        public let specAlias: String

        /// 是否售罄
        public let available: Bool

        /// 当前资源售罄时，可用的区域有哪些
        public let availableRegion: [String]

        enum CodingKeys: String, CodingKey {
            case specId = "SpecId"
            case specName = "SpecName"
            case specAlias = "SpecAlias"
            case available = "Available"
            case availableRegion = "AvailableRegion"
        }
    }

    /// 计费项询价结果
    public struct SpecPrice: TCOutputModel {
        /// 计费项名称
        public let specName: String

        /// 原价，单位：分。最大值42亿，超过则返回0
        public let totalCost: UInt64

        /// 优惠后的价格，单位：分
        public let realTotalCost: UInt64

        enum CodingKeys: String, CodingKey {
            case specName = "SpecName"
            case totalCost = "TotalCost"
            case realTotalCost = "RealTotalCost"
        }
    }

    /// 计费项询价单元
    public struct SpecUnit: TCInputModel {
        /// 计费项名称
        public let specName: String

        /// 计费项数量,建议不超过100万
        public let specCount: UInt64

        public init(specName: String, specCount: UInt64) {
            self.specName = specName
            self.specCount = specCount
        }

        enum CodingKeys: String, CodingKey {
            case specName = "SpecName"
            case specCount = "SpecCount"
        }
    }

    /// 启动命令信息
    public struct StartCmdInfo: TCInputModel {
        /// 启动命令
        public let startCmd: String?

        /// ps启动命令
        public let psStartCmd: String?

        /// worker启动命令
        public let workerStartCmd: String?

        public init(startCmd: String? = nil, psStartCmd: String? = nil, workerStartCmd: String? = nil) {
            self.startCmd = startCmd
            self.psStartCmd = psStartCmd
            self.workerStartCmd = workerStartCmd
        }

        enum CodingKeys: String, CodingKey {
            case startCmd = "StartCmd"
            case psStartCmd = "PsStartCmd"
            case workerStartCmd = "WorkerStartCmd"
        }
    }

    /// 实例状况
    public struct StatefulSetCondition: TCInputModel, TCOutputModel {
        /// 信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reason: String?

        /// Status of the condition, one of True, False, Unknown.
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 上次更新的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastTransitionTime: String?

        public init(message: String, reason: String, status: String, type: String, lastTransitionTime: String) {
            self.message = message
            self.reason = reason
            self.status = status
            self.type = type
            self.lastTransitionTime = lastTransitionTime
        }

        enum CodingKeys: String, CodingKey {
            case message = "Message"
            case reason = "Reason"
            case status = "Status"
            case type = "Type"
            case lastTransitionTime = "LastTransitionTime"
        }
    }

    /// 描述腾讯云标签
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagKey: String?

        /// 标签值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagValue: String?

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// Tag过滤参数
    public struct TagFilter: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String?

        /// 多个标签值
        public let tagValues: [String]?

        public init(tagKey: String? = nil, tagValues: [String]? = nil) {
            self.tagKey = tagKey
            self.tagValues = tagValues
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValues = "TagValues"
        }
    }

    /// 五级标签
    public struct TextLabelDistributionDetailInfoFifthClass: TCInputModel, TCOutputModel {
        /// 标签名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelValue: String?

        /// 标签个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelCount: UInt64?

        /// 标签占比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelPercentage: Float?

        public init(labelValue: String? = nil, labelCount: UInt64? = nil, labelPercentage: Float? = nil) {
            self.labelValue = labelValue
            self.labelCount = labelCount
            self.labelPercentage = labelPercentage
        }

        enum CodingKeys: String, CodingKey {
            case labelValue = "LabelValue"
            case labelCount = "LabelCount"
            case labelPercentage = "LabelPercentage"
        }
    }

    /// 一级标签
    public struct TextLabelDistributionDetailInfoFirstClass: TCInputModel, TCOutputModel {
        /// 标签名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelValue: String?

        /// 标签个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelCount: UInt64?

        /// 标签占比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelPercentage: Float?

        /// 子标签分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let childLabelList: [TextLabelDistributionDetailInfoSecondClass]?

        public init(labelValue: String? = nil, labelCount: UInt64? = nil, labelPercentage: Float? = nil, childLabelList: [TextLabelDistributionDetailInfoSecondClass]? = nil) {
            self.labelValue = labelValue
            self.labelCount = labelCount
            self.labelPercentage = labelPercentage
            self.childLabelList = childLabelList
        }

        enum CodingKeys: String, CodingKey {
            case labelValue = "LabelValue"
            case labelCount = "LabelCount"
            case labelPercentage = "LabelPercentage"
            case childLabelList = "ChildLabelList"
        }
    }

    /// 四级标签
    public struct TextLabelDistributionDetailInfoFourthClass: TCInputModel, TCOutputModel {
        /// 标签名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelValue: String?

        /// 标签个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelCount: UInt64?

        /// 标签占比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelPercentage: Float?

        /// 子标签分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let childLabelList: [TextLabelDistributionDetailInfoFifthClass]?

        public init(labelValue: String? = nil, labelCount: UInt64? = nil, labelPercentage: Float? = nil, childLabelList: [TextLabelDistributionDetailInfoFifthClass]? = nil) {
            self.labelValue = labelValue
            self.labelCount = labelCount
            self.labelPercentage = labelPercentage
            self.childLabelList = childLabelList
        }

        enum CodingKeys: String, CodingKey {
            case labelValue = "LabelValue"
            case labelCount = "LabelCount"
            case labelPercentage = "LabelPercentage"
            case childLabelList = "ChildLabelList"
        }
    }

    /// 二级标签
    public struct TextLabelDistributionDetailInfoSecondClass: TCInputModel, TCOutputModel {
        /// 标签名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelValue: String?

        /// 标签个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelCount: UInt64?

        /// 标签占比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelPercentage: Float?

        /// 子标签分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let childLabelList: [TextLabelDistributionDetailInfoThirdClass]?

        public init(labelValue: String? = nil, labelCount: UInt64? = nil, labelPercentage: Float? = nil, childLabelList: [TextLabelDistributionDetailInfoThirdClass]? = nil) {
            self.labelValue = labelValue
            self.labelCount = labelCount
            self.labelPercentage = labelPercentage
            self.childLabelList = childLabelList
        }

        enum CodingKeys: String, CodingKey {
            case labelValue = "LabelValue"
            case labelCount = "LabelCount"
            case labelPercentage = "LabelPercentage"
            case childLabelList = "ChildLabelList"
        }
    }

    /// 三级标签
    public struct TextLabelDistributionDetailInfoThirdClass: TCInputModel, TCOutputModel {
        /// 标签名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelValue: String?

        /// 标签个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelCount: UInt64?

        /// 标签占比
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelPercentage: Float?

        /// 子标签分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let childLabelList: [TextLabelDistributionDetailInfoFourthClass]?

        public init(labelValue: String? = nil, labelCount: UInt64? = nil, labelPercentage: Float? = nil, childLabelList: [TextLabelDistributionDetailInfoFourthClass]? = nil) {
            self.labelValue = labelValue
            self.labelCount = labelCount
            self.labelPercentage = labelPercentage
            self.childLabelList = childLabelList
        }

        enum CodingKeys: String, CodingKey {
            case labelValue = "LabelValue"
            case labelCount = "LabelCount"
            case labelPercentage = "LabelPercentage"
            case childLabelList = "ChildLabelList"
        }
    }

    /// 文本标签
    public struct TextLabelDistributionInfo: TCInputModel, TCOutputModel {
        /// 文本分类题目名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let theme: String?

        /// 一级标签分布
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classLabelList: [TextLabelDistributionDetailInfoFirstClass]?

        public init(theme: String? = nil, classLabelList: [TextLabelDistributionDetailInfoFirstClass]? = nil) {
            self.theme = theme
            self.classLabelList = classLabelList
        }

        enum CodingKeys: String, CodingKey {
            case theme = "Theme"
            case classLabelList = "ClassLabelList"
        }
    }

    /// 训练数据
    public struct TrainingDataPoint: TCInputModel, TCOutputModel {
        public init() {
        }
    }

    /// 训练指标
    public struct TrainingMetric: TCOutputModel {
        /// 指标名
        public let metricName: String

        /// 数据值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let values: [TrainingDataPoint]?

        /// 上报的Epoch. 可能为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let epochs: [TrainingDataPoint]?

        /// 上报的Step. 可能为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let steps: [TrainingDataPoint]?

        /// 上报的TotalSteps. 可能为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalSteps: [TrainingDataPoint]?

        enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case values = "Values"
            case epochs = "Epochs"
            case steps = "Steps"
            case totalSteps = "TotalSteps"
        }
    }

    /// 模型列表
    public struct TrainingModelDTO: TCOutputModel {
        /// 模型id
        public let trainingModelId: String

        /// 模型名称
        public let trainingModelName: String

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 模型创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        enum CodingKeys: String, CodingKey {
            case trainingModelId = "TrainingModelId"
            case trainingModelName = "TrainingModelName"
            case tags = "Tags"
            case createTime = "CreateTime"
        }
    }

    /// 模型版本列表
    public struct TrainingModelVersionDTO: TCOutputModel {
        /// 模型id
        public let trainingModelId: String

        /// 模型版本id
        public let trainingModelVersionId: String

        /// 模型版本
        public let trainingModelVersion: String

        /// 模型来源
        public let trainingModelSource: String

        /// 创建时间
        public let trainingModelCreateTime: String

        /// 创建人uin
        public let trainingModelCreator: String

        /// 算法框架
        public let algorithmFramework: String

        /// 推理环境
        public let reasoningEnvironment: String

        /// 推理环境来源
        public let reasoningEnvironmentSource: String

        /// 模型指标
        public let trainingModelIndex: String

        /// 训练任务名称
        public let trainingJobName: String

        /// 模型cos路径
        public let trainingModelCosPath: CosPathInfo

        /// 模型名称
        public let trainingModelName: String

        /// 训练任务id
        public let trainingJobId: String

        /// 自定义推理环境
        public let reasoningImageInfo: ImageInfo

        /// 模型版本创建时间
        public let createTime: String

        /// 模型处理状态
        /// STATUS_SUCCESS：导入成功，STATUS_FAILED：导入失败 ，STATUS_RUNNING：导入中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingModelStatus: String?

        /// 模型处理进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingModelProgress: UInt64?

        /// 模型错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingModelErrorMsg: String?

        /// 模型格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingModelFormat: String?

        /// 模型版本类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionType: String?

        /// GPU类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gpuType: String?

        /// 模型自动清理开关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoClean: String?

        /// 模型清理周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelCleanPeriod: UInt64?

        /// 模型数量保留上限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxReservedModels: UInt64?

        /// 模型热更新目录
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modelHotUpdatePath: CosPathInfo?

        enum CodingKeys: String, CodingKey {
            case trainingModelId = "TrainingModelId"
            case trainingModelVersionId = "TrainingModelVersionId"
            case trainingModelVersion = "TrainingModelVersion"
            case trainingModelSource = "TrainingModelSource"
            case trainingModelCreateTime = "TrainingModelCreateTime"
            case trainingModelCreator = "TrainingModelCreator"
            case algorithmFramework = "AlgorithmFramework"
            case reasoningEnvironment = "ReasoningEnvironment"
            case reasoningEnvironmentSource = "ReasoningEnvironmentSource"
            case trainingModelIndex = "TrainingModelIndex"
            case trainingJobName = "TrainingJobName"
            case trainingModelCosPath = "TrainingModelCosPath"
            case trainingModelName = "TrainingModelName"
            case trainingJobId = "TrainingJobId"
            case reasoningImageInfo = "ReasoningImageInfo"
            case createTime = "CreateTime"
            case trainingModelStatus = "TrainingModelStatus"
            case trainingModelProgress = "TrainingModelProgress"
            case trainingModelErrorMsg = "TrainingModelErrorMsg"
            case trainingModelFormat = "TrainingModelFormat"
            case versionType = "VersionType"
            case gpuType = "GPUType"
            case autoClean = "AutoClean"
            case modelCleanPeriod = "ModelCleanPeriod"
            case maxReservedModels = "MaxReservedModels"
            case modelHotUpdatePath = "ModelHotUpdatePath"
        }
    }

    /// 训练任务详情
    public struct TrainingTaskDetail: TCOutputModel {
        /// 训练任务ID
        public let id: String

        /// 训练任务名称
        public let name: String

        /// 主账号uin
        public let uin: String

        /// 子账号uin
        public let subUin: String

        /// 地域
        public let region: String

        /// 训练框架名称，eg：SPARK、PYSARK、TENSORFLOW、PYTORCH
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameworkName: String?

        /// 训练框架版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameworkVersion: String?

        /// 框架运行环境
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameworkEnvironment: String?

        /// 计费模式
        public let chargeType: String

        /// 预付费专用资源组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupId: String?

        /// 资源配置
        public let resourceConfigInfos: [ResourceConfigInfo]

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 训练模式，eg：PS_WORKER、DDP、MPI、HOROVOD
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingMode: String?

        /// 代码包
        public let codePackagePath: CosPathInfo

        /// 启动命令信息
        public let startCmdInfo: StartCmdInfo

        /// 数据来源，eg：DATASET、COS
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataSource: String?

        /// 数据配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dataConfigs: [DataConfig]?

        /// 调优参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tuningParameters: String?

        /// 训练输出
        public let output: CosPathInfo

        /// 是否上报日志
        public let logEnable: Bool

        /// 日志配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logConfig: LogConfig?

        /// VPC ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 自定义镜像信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageInfo: ImageInfo?

        /// 运行时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runtimeInSeconds: UInt64?

        /// 创建时间
        public let createTime: String

        /// 训练开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        public let chargeStatus: String

        /// 最近一次实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestInstanceId: String?

        /// TensorBoard ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tensorBoardId: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failureReason: String?

        /// 更新时间
        public let updateTime: String

        /// 训练结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 计费金额信息，eg：2.00元/小时 (for后付费)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingInfo: String?

        /// 预付费专用资源组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupName: String?

        /// 任务信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 任务状态，eg：STARTING启动中、RUNNING运行中、STOPPING停止中、STOPPED已停止、FAILED异常、SUCCEED已完成
        public let status: String

        /// 回调地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let callbackUrl: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case uin = "Uin"
            case subUin = "SubUin"
            case region = "Region"
            case frameworkName = "FrameworkName"
            case frameworkVersion = "FrameworkVersion"
            case frameworkEnvironment = "FrameworkEnvironment"
            case chargeType = "ChargeType"
            case resourceGroupId = "ResourceGroupId"
            case resourceConfigInfos = "ResourceConfigInfos"
            case tags = "Tags"
            case trainingMode = "TrainingMode"
            case codePackagePath = "CodePackagePath"
            case startCmdInfo = "StartCmdInfo"
            case dataSource = "DataSource"
            case dataConfigs = "DataConfigs"
            case tuningParameters = "TuningParameters"
            case output = "Output"
            case logEnable = "LogEnable"
            case logConfig = "LogConfig"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case imageInfo = "ImageInfo"
            case runtimeInSeconds = "RuntimeInSeconds"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case chargeStatus = "ChargeStatus"
            case latestInstanceId = "LatestInstanceId"
            case tensorBoardId = "TensorBoardId"
            case remark = "Remark"
            case failureReason = "FailureReason"
            case updateTime = "UpdateTime"
            case endTime = "EndTime"
            case billingInfo = "BillingInfo"
            case resourceGroupName = "ResourceGroupName"
            case message = "Message"
            case status = "Status"
            case callbackUrl = "CallbackUrl"
        }
    }

    /// 出参类型
    public struct TrainingTaskSetItem: TCOutputModel {
        /// 训练任务ID
        public let id: String

        /// 训练任务名称
        public let name: String

        /// 框架名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameworkName: String?

        /// 训练框架版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameworkVersion: String?

        /// 框架运行环境
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frameworkEnvironment: String?

        /// 计费模式
        public let chargeType: String

        /// 计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        public let chargeStatus: String

        /// 预付费专用资源组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceGroupId: String?

        /// 资源配置
        public let resourceConfigInfos: [ResourceConfigInfo]

        /// 训练模式eg：PS_WORKER、DDP、MPI、HOROVOD
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trainingMode: String?

        /// 任务状态，eg：STARTING启动中、RUNNING运行中、STOPPING停止中、STOPPED已停止、FAILED异常、SUCCEED已完成
        public let status: String

        /// 运行时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runtimeInSeconds: UInt64?

        /// 创建时间
        public let createTime: String

        /// 训练开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 训练结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 训练输出
        public let output: CosPathInfo

        /// 失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failureReason: String?

        /// 更新时间
        public let updateTime: String

        /// 计费金额信息，eg：2.00元/小时 (for后付费)
        public let billingInfo: String

        /// 预付费专用资源组名称
        public let resourceGroupName: String

        /// 自定义镜像信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageInfo: ImageInfo?

        /// 任务信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        /// 标签配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 回调地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let callbackUrl: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case frameworkName = "FrameworkName"
            case frameworkVersion = "FrameworkVersion"
            case frameworkEnvironment = "FrameworkEnvironment"
            case chargeType = "ChargeType"
            case chargeStatus = "ChargeStatus"
            case resourceGroupId = "ResourceGroupId"
            case resourceConfigInfos = "ResourceConfigInfos"
            case trainingMode = "TrainingMode"
            case status = "Status"
            case runtimeInSeconds = "RuntimeInSeconds"
            case createTime = "CreateTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case output = "Output"
            case failureReason = "FailureReason"
            case updateTime = "UpdateTime"
            case billingInfo = "BillingInfo"
            case resourceGroupName = "ResourceGroupName"
            case imageInfo = "ImageInfo"
            case message = "Message"
            case tags = "Tags"
            case callbackUrl = "CallbackUrl"
        }
    }

    /// 外部挂载信息
    public struct VolumeMount: TCInputModel, TCOutputModel {
        /// cfs的配置信息
        public let cfsConfig: CFSConfig

        /// 挂载源类型
        public let volumeSourceType: String?

        public init(cfsConfig: CFSConfig, volumeSourceType: String? = nil) {
            self.cfsConfig = cfsConfig
            self.volumeSourceType = volumeSourceType
        }

        enum CodingKeys: String, CodingKey {
            case cfsConfig = "CFSConfig"
            case volumeSourceType = "VolumeSourceType"
        }
    }

    /// 服务的权重
    public struct WeightEntry: TCInputModel, TCOutputModel {
        /// 服务id
        public let serviceId: String

        /// 流量权重值，同 ServiceGroup 下 总和应为 100
        public let weight: UInt64

        public init(serviceId: String, weight: UInt64) {
            self.serviceId = serviceId
            self.weight = weight
        }

        enum CodingKeys: String, CodingKey {
            case serviceId = "ServiceId"
            case weight = "Weight"
        }
    }

    /// 工作负载的状态
    public struct WorkloadStatus: TCInputModel, TCOutputModel {
        /// 当前实例数
        public let replicas: Int64

        /// 更新的实例数
        public let updatedReplicas: Int64

        /// 就绪的实例数
        public let readyReplicas: Int64

        /// 可用的实例数
        public let availableReplicas: Int64

        /// 不可用的实例数
        public let unavailableReplicas: Int64

        /// Normal	正常运行中
        /// Abnormal	服务异常，例如容器启动失败等
        /// Waiting	服务等待中，例如容器下载镜像过程等
        /// Stopped   已停止
        /// Pending 启动中
        /// Stopping 停止中
        public let status: String

        /// 工作负载的状况信息
        public let statefulSetCondition: [StatefulSetCondition]?

        /// 工作负载历史的状况信息
        public let conditions: [StatefulSetCondition]?

        public init(replicas: Int64, updatedReplicas: Int64, readyReplicas: Int64, availableReplicas: Int64, unavailableReplicas: Int64, status: String, statefulSetCondition: [StatefulSetCondition]? = nil, conditions: [StatefulSetCondition]? = nil) {
            self.replicas = replicas
            self.updatedReplicas = updatedReplicas
            self.readyReplicas = readyReplicas
            self.availableReplicas = availableReplicas
            self.unavailableReplicas = unavailableReplicas
            self.status = status
            self.statefulSetCondition = statefulSetCondition
            self.conditions = conditions
        }

        enum CodingKeys: String, CodingKey {
            case replicas = "Replicas"
            case updatedReplicas = "UpdatedReplicas"
            case readyReplicas = "ReadyReplicas"
            case availableReplicas = "AvailableReplicas"
            case unavailableReplicas = "UnavailableReplicas"
            case status = "Status"
            case statefulSetCondition = "StatefulSetCondition"
            case conditions = "Conditions"
        }
    }
}
