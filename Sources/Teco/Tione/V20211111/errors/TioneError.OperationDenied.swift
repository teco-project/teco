//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTioneError {
    public struct OperationDenied: TCTioneErrorType {
        enum Code: String {
            case balanceInsufficient = "OperationDenied.BalanceInsufficient"
            case billingException = "OperationDenied.BillingException"
            case billingStatusResourceInsufficient = "OperationDenied.BillingStatusResourceInsufficient"
            case ipIllegal = "OperationDenied.IpIllegal"
            case miyingBalanceInsufficient = "OperationDenied.MIYINGBalanceInsufficient"
            case networkCidrIllegal = "OperationDenied.NetworkCidrIllegal"
            case notAllow = "OperationDenied.NotAllow"
            case notSupportSaveImage = "OperationDenied.NotSupportSaveImage"
            case resourceGroupInsufficient = "OperationDenied.ResourceGroupInsufficient"
            case subnetIllegal = "OperationDenied.SubnetIllegal"
            case whitelistQuotaExceed = "OperationDenied.WhitelistQuotaExceed"
            case other = "OperationDenied"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 余额不足，创建/更新失败。
        ///
        /// 请充值并查看服务使用的冻结规则
        public static var balanceInsufficient: OperationDenied {
            OperationDenied(.balanceInsufficient)
        }

        public static var billingException: OperationDenied {
            OperationDenied(.billingException)
        }

        /// 按量计费资源售罄。
        public static var billingStatusResourceInsufficient: OperationDenied {
            OperationDenied(.billingStatusResourceInsufficient)
        }

        /// IP不合法。
        public static var ipIllegal: OperationDenied {
            OperationDenied(.ipIllegal)
        }

        /// 觅影资源包余额不足，请先充值。
        public static var miyingBalanceInsufficient: OperationDenied {
            OperationDenied(.miyingBalanceInsufficient)
        }

        /// 网段不合法。
        public static var networkCidrIllegal: OperationDenied {
            OperationDenied(.networkCidrIllegal)
        }

        public static var notAllow: OperationDenied {
            OperationDenied(.notAllow)
        }

        public static var notSupportSaveImage: OperationDenied {
            OperationDenied(.notSupportSaveImage)
        }

        /// 预付费资源组余量不足。
        public static var resourceGroupInsufficient: OperationDenied {
            OperationDenied(.resourceGroupInsufficient)
        }

        /// 子网不合法。
        public static var subnetIllegal: OperationDenied {
            OperationDenied(.subnetIllegal)
        }

        /// 白名单免费配额不足。
        public static var whitelistQuotaExceed: OperationDenied {
            OperationDenied(.whitelistQuotaExceed)
        }

        /// 操作被拒绝。
        public static var other: OperationDenied {
            OperationDenied(.other)
        }

        public func asTioneError() -> TCTioneError {
            let code: TCTioneError.Code
            switch self.error {
            case .balanceInsufficient:
                code = .operationDenied_BalanceInsufficient
            case .billingException:
                code = .operationDenied_BillingException
            case .billingStatusResourceInsufficient:
                code = .operationDenied_BillingStatusResourceInsufficient
            case .ipIllegal:
                code = .operationDenied_IpIllegal
            case .miyingBalanceInsufficient:
                code = .operationDenied_MIYINGBalanceInsufficient
            case .networkCidrIllegal:
                code = .operationDenied_NetworkCidrIllegal
            case .notAllow:
                code = .operationDenied_NotAllow
            case .notSupportSaveImage:
                code = .operationDenied_NotSupportSaveImage
            case .resourceGroupInsufficient:
                code = .operationDenied_ResourceGroupInsufficient
            case .subnetIllegal:
                code = .operationDenied_SubnetIllegal
            case .whitelistQuotaExceed:
                code = .operationDenied_WhitelistQuotaExceed
            case .other:
                code = .operationDenied
            }
            return TCTioneError(code, context: self.context)
        }
    }
}
