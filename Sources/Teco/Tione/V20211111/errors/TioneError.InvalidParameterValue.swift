//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCTioneError {
    public struct InvalidParameterValue: TCTioneErrorType {
        enum Code: String {
            case aiMarketPublicAlgoVersionNotExist = "InvalidParameterValue.AIMarketPublicAlgoVersionNotExist"
            case badName = "InvalidParameterValue.BadName"
            case clsConfigRequired = "InvalidParameterValue.ClsConfigRequired"
            case codeRepoDuplicated = "InvalidParameterValue.CodeRepoDuplicated"
            case codeRepoNotFound = "InvalidParameterValue.CodeRepoNotFound"
            case datasetNumLimitExceeded = "InvalidParameterValue.DatasetNumLimitExceeded"
            case dcAnnotationType = "InvalidParameterValue.DCAnnotationType"
            case dcCosPathInfo = "InvalidParameterValue.DCCosPathInfo"
            case dcDatasetAnnotationNotMatch = "InvalidParameterValue.DCDatasetAnnotationNotMatch"
            case dcDatasetIdNotExist = "InvalidParameterValue.DCDatasetIdNotExist"
            case dcDatasetNameExist = "InvalidParameterValue.DCDatasetNameExist"
            case dcDatasetType = "InvalidParameterValue.DCDatasetType"
            case dcFilterValues = "InvalidParameterValue.DCFilterValues"
            case duplicateName = "InvalidParameterValue.DuplicateName"
            case frameworkVersionNotSupport = "InvalidParameterValue.FrameworkVersionNotSupport"
            case getCFSMountIPFailed = "InvalidParameterValue.GetCFSMountIPFailed"
            case imageNotFound = "InvalidParameterValue.ImageNotFound"
            case invalidFilter = "InvalidParameterValue.InvalidFilter"
            case lifecycleNotFound = "InvalidParameterValue.LifecycleNotFound"
            case limitExceeded = "InvalidParameterValue.LimitExceeded"
            case notAllow = "InvalidParameterValue.NotAllow"
            case notAllowedToCreateFreeVolumeNotebookWithBareMetalResourceGroup = "InvalidParameterValue.NotAllowedToCreateFreeVolumeNotebookWithBareMetalResourceGroup"
            case notAllowedToCreateNotebookWithBareMetalResourceGroup = "InvalidParameterValue.NotAllowedToCreateNotebookWithBareMetalResourceGroup"
            case pageLimitExceeded = "InvalidParameterValue.PageLimitExceeded"
            case rdmaConfigIllegal = "InvalidParameterValue.RDMAConfigIllegal"
            case resourceConfigIllegal = "InvalidParameterValue.ResourceConfigIllegal"
            case subnetNotFound = "InvalidParameterValue.SubnetNotFound"
            case topicNotFound = "InvalidParameterValue.TopicNotFound"
            case unsupportedDataConfig = "InvalidParameterValue.UnsupportedDataConfig"
            case volumeShrinkNotAllow = "InvalidParameterValue.VolumeShrinkNotAllow"
            case other = "InvalidParameterValue"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// AI市场公共算法版本Id不存在
        public static var aiMarketPublicAlgoVersionNotExist: InvalidParameterValue {
            InvalidParameterValue(.aiMarketPublicAlgoVersionNotExist)
        }

        /// 名称不合法。
        public static var badName: InvalidParameterValue {
            InvalidParameterValue(.badName)
        }

        /// 请设置日志集、日志主题ID。
        public static var clsConfigRequired: InvalidParameterValue {
            InvalidParameterValue(.clsConfigRequired)
        }

        /// 存储库重复配置，请移除重复的存储库配置后重试。
        ///
        /// 请移除重复的存储库配置后重试
        public static var codeRepoDuplicated: InvalidParameterValue {
            InvalidParameterValue(.codeRepoDuplicated)
        }

        /// 存储库不存在。
        public static var codeRepoNotFound: InvalidParameterValue {
            InvalidParameterValue(.codeRepoNotFound)
        }

        /// 数据集数量超过限制。
        public static var datasetNumLimitExceeded: InvalidParameterValue {
            InvalidParameterValue(.datasetNumLimitExceeded)
        }

        /// 不支持的标注类型。
        public static var dcAnnotationType: InvalidParameterValue {
            InvalidParameterValue(.dcAnnotationType)
        }

        /// 存储桶参数错误。
        public static var dcCosPathInfo: InvalidParameterValue {
            InvalidParameterValue(.dcCosPathInfo)
        }

        /// 数据集标注状态不匹配。
        public static var dcDatasetAnnotationNotMatch: InvalidParameterValue {
            InvalidParameterValue(.dcDatasetAnnotationNotMatch)
        }

        /// 数据集Id不存在。
        public static var dcDatasetIdNotExist: InvalidParameterValue {
            InvalidParameterValue(.dcDatasetIdNotExist)
        }

        /// 数据集重名已存在。
        public static var dcDatasetNameExist: InvalidParameterValue {
            InvalidParameterValue(.dcDatasetNameExist)
        }

        /// 不支持的数据集类型。
        public static var dcDatasetType: InvalidParameterValue {
            InvalidParameterValue(.dcDatasetType)
        }

        /// 不支持的过滤参数。
        public static var dcFilterValues: InvalidParameterValue {
            InvalidParameterValue(.dcFilterValues)
        }

        /// 实例名称冲突，请更换名称后重试。
        public static var duplicateName: InvalidParameterValue {
            InvalidParameterValue(.duplicateName)
        }

        /// 训练框架对应的版本不支持，请阅读文档查看TIONE目前支持的框架和版本。
        ///
        /// 查看文档支持对应的框架和版本
        public static var frameworkVersionNotSupport: InvalidParameterValue {
            InvalidParameterValue(.frameworkVersionNotSupport)
        }

        public static var getCFSMountIPFailed: InvalidParameterValue {
            InvalidParameterValue(.getCFSMountIPFailed)
        }

        /// 训练任务镜像不存在。
        public static var imageNotFound: InvalidParameterValue {
            InvalidParameterValue(.imageNotFound)
        }

        /// 无效的过滤器。
        ///
        /// 检查过滤器参数
        public static var invalidFilter: InvalidParameterValue {
            InvalidParameterValue(.invalidFilter)
        }

        /// 生命周期脚本无效。
        ///
        /// 请选择正确的生命周期脚本。
        public static var lifecycleNotFound: InvalidParameterValue {
            InvalidParameterValue(.lifecycleNotFound)
        }

        /// 参数值数量超过限制。
        ///
        /// 减少参数值数量
        public static var limitExceeded: InvalidParameterValue {
            InvalidParameterValue(.limitExceeded)
        }

        /// 操作不允许。
        public static var notAllow: InvalidParameterValue {
            InvalidParameterValue(.notAllow)
        }

        public static var notAllowedToCreateFreeVolumeNotebookWithBareMetalResourceGroup: InvalidParameterValue {
            InvalidParameterValue(.notAllowedToCreateFreeVolumeNotebookWithBareMetalResourceGroup)
        }

        public static var notAllowedToCreateNotebookWithBareMetalResourceGroup: InvalidParameterValue {
            InvalidParameterValue(.notAllowedToCreateNotebookWithBareMetalResourceGroup)
        }

        public static var pageLimitExceeded: InvalidParameterValue {
            InvalidParameterValue(.pageLimitExceeded)
        }

        public static var rdmaConfigIllegal: InvalidParameterValue {
            InvalidParameterValue(.rdmaConfigIllegal)
        }

        /// 资源配置不合法
        public static var resourceConfigIllegal: InvalidParameterValue {
            InvalidParameterValue(.resourceConfigIllegal)
        }

        /// 子网不存在。
        public static var subnetNotFound: InvalidParameterValue {
            InvalidParameterValue(.subnetNotFound)
        }

        /// 未找到当前日志主题。
        public static var topicNotFound: InvalidParameterValue {
            InvalidParameterValue(.topicNotFound)
        }

        /// 裸金属类型资源组不支持配置输入数据
        public static var unsupportedDataConfig: InvalidParameterValue {
            InvalidParameterValue(.unsupportedDataConfig)
        }

        /// Notebook卷大小只能增加，如需减小容量请重新创建实例。
        public static var volumeShrinkNotAllow: InvalidParameterValue {
            InvalidParameterValue(.volumeShrinkNotAllow)
        }

        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }

        public func asTioneError() -> TCTioneError {
            let code: TCTioneError.Code
            switch self.error {
            case .aiMarketPublicAlgoVersionNotExist:
                code = .invalidParameterValue_AIMarketPublicAlgoVersionNotExist
            case .badName:
                code = .invalidParameterValue_BadName
            case .clsConfigRequired:
                code = .invalidParameterValue_ClsConfigRequired
            case .codeRepoDuplicated:
                code = .invalidParameterValue_CodeRepoDuplicated
            case .codeRepoNotFound:
                code = .invalidParameterValue_CodeRepoNotFound
            case .datasetNumLimitExceeded:
                code = .invalidParameterValue_DatasetNumLimitExceeded
            case .dcAnnotationType:
                code = .invalidParameterValue_DCAnnotationType
            case .dcCosPathInfo:
                code = .invalidParameterValue_DCCosPathInfo
            case .dcDatasetAnnotationNotMatch:
                code = .invalidParameterValue_DCDatasetAnnotationNotMatch
            case .dcDatasetIdNotExist:
                code = .invalidParameterValue_DCDatasetIdNotExist
            case .dcDatasetNameExist:
                code = .invalidParameterValue_DCDatasetNameExist
            case .dcDatasetType:
                code = .invalidParameterValue_DCDatasetType
            case .dcFilterValues:
                code = .invalidParameterValue_DCFilterValues
            case .duplicateName:
                code = .invalidParameterValue_DuplicateName
            case .frameworkVersionNotSupport:
                code = .invalidParameterValue_FrameworkVersionNotSupport
            case .getCFSMountIPFailed:
                code = .invalidParameterValue_GetCFSMountIPFailed
            case .imageNotFound:
                code = .invalidParameterValue_ImageNotFound
            case .invalidFilter:
                code = .invalidParameterValue_InvalidFilter
            case .lifecycleNotFound:
                code = .invalidParameterValue_LifecycleNotFound
            case .limitExceeded:
                code = .invalidParameterValue_LimitExceeded
            case .notAllow:
                code = .invalidParameterValue_NotAllow
            case .notAllowedToCreateFreeVolumeNotebookWithBareMetalResourceGroup:
                code = .invalidParameterValue_NotAllowedToCreateFreeVolumeNotebookWithBareMetalResourceGroup
            case .notAllowedToCreateNotebookWithBareMetalResourceGroup:
                code = .invalidParameterValue_NotAllowedToCreateNotebookWithBareMetalResourceGroup
            case .pageLimitExceeded:
                code = .invalidParameterValue_PageLimitExceeded
            case .rdmaConfigIllegal:
                code = .invalidParameterValue_RDMAConfigIllegal
            case .resourceConfigIllegal:
                code = .invalidParameterValue_ResourceConfigIllegal
            case .subnetNotFound:
                code = .invalidParameterValue_SubnetNotFound
            case .topicNotFound:
                code = .invalidParameterValue_TopicNotFound
            case .unsupportedDataConfig:
                code = .invalidParameterValue_UnsupportedDataConfig
            case .volumeShrinkNotAllow:
                code = .invalidParameterValue_VolumeShrinkNotAllow
            case .other:
                code = .invalidParameterValue
            }
            return TCTioneError(code, context: self.context)
        }
    }
}
