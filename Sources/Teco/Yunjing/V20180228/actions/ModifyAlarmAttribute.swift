//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Yunjing {
    /// ModifyAlarmAttribute请求参数结构体
    public struct ModifyAlarmAttributeRequest: TCRequest {
        /// 告警项目。
        /// - Offline：防护软件离线
        /// - Malware：发现木马文件
        /// - NonlocalLogin：发现异地登录行为
        /// - CrackSuccess：被暴力破解成功
        public let attribute: String

        /// 告警项目属性。
        /// - CLOSE：关闭
        /// - OPEN：打开
        public let value: String

        public init(attribute: String, value: String) {
            self.attribute = attribute
            self.value = value
        }

        enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case value = "Value"
        }
    }

    /// ModifyAlarmAttribute返回参数结构体
    public struct ModifyAlarmAttributeResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改告警设置
    ///
    /// 本接口（ModifyAlarmAttribute）用于修改告警设置。
    @inlinable @discardableResult
    public func modifyAlarmAttribute(_ input: ModifyAlarmAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmAttributeResponse> {
        self.client.execute(action: "ModifyAlarmAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改告警设置
    ///
    /// 本接口（ModifyAlarmAttribute）用于修改告警设置。
    @inlinable @discardableResult
    public func modifyAlarmAttribute(_ input: ModifyAlarmAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmAttributeResponse {
        try await self.client.execute(action: "ModifyAlarmAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改告警设置
    ///
    /// 本接口（ModifyAlarmAttribute）用于修改告警设置。
    @inlinable @discardableResult
    public func modifyAlarmAttribute(attribute: String, value: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAlarmAttributeResponse> {
        self.modifyAlarmAttribute(.init(attribute: attribute, value: value), region: region, logger: logger, on: eventLoop)
    }

    /// 修改告警设置
    ///
    /// 本接口（ModifyAlarmAttribute）用于修改告警设置。
    @inlinable @discardableResult
    public func modifyAlarmAttribute(attribute: String, value: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAlarmAttributeResponse {
        try await self.modifyAlarmAttribute(.init(attribute: attribute, value: value), region: region, logger: logger, on: eventLoop)
    }
}
