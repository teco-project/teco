//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Yunjing {
    /// DescribeWeeklyReportMalwares请求参数结构体
    public struct DescribeWeeklyReportMalwaresRequest: TCRequestModel {
        /// 专业周报开始时间。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCDateEncoding public var beginDate: Date
        
        /// 返回数量，默认为10，最大值为100。
        public let limit: UInt64?
        
        /// 偏移量，默认为0。
        public let offset: UInt64?
        
        public init (beginDate: Date, limit: UInt64? = nil, offset: UInt64? = nil) {
            self.beginDate = beginDate
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case beginDate = "BeginDate"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeWeeklyReportMalwares返回参数结构体
    public struct DescribeWeeklyReportMalwaresResponse: TCResponseModel {
        /// 专业周报木马数据。
        public let weeklyReportMalwares: [WeeklyReportMalware]
        
        /// 记录总数。
        public let totalCount: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case weeklyReportMalwares = "WeeklyReportMalwares"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
    
    /// 获取专业周报木马数据
    ///
    /// 本接口 (DescribeWeeklyReportMalwares) 用于获取专业周报木马数据。
    @inlinable
    public func describeWeeklyReportMalwares(_ input: DescribeWeeklyReportMalwaresRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeWeeklyReportMalwaresResponse > {
        self.client.execute(action: "DescribeWeeklyReportMalwares", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取专业周报木马数据
    ///
    /// 本接口 (DescribeWeeklyReportMalwares) 用于获取专业周报木马数据。
    @inlinable
    public func describeWeeklyReportMalwares(_ input: DescribeWeeklyReportMalwaresRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWeeklyReportMalwaresResponse {
        try await self.client.execute(action: "DescribeWeeklyReportMalwares", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取专业周报木马数据
    ///
    /// 本接口 (DescribeWeeklyReportMalwares) 用于获取专业周报木马数据。
    @inlinable
    public func describeWeeklyReportMalwares(beginDate: Date, limit: UInt64? = nil, offset: UInt64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeWeeklyReportMalwaresResponse > {
        self.describeWeeklyReportMalwares(DescribeWeeklyReportMalwaresRequest(beginDate: beginDate, limit: limit, offset: offset), logger: logger, on: eventLoop)
    }
    
    /// 获取专业周报木马数据
    ///
    /// 本接口 (DescribeWeeklyReportMalwares) 用于获取专业周报木马数据。
    @inlinable
    public func describeWeeklyReportMalwares(beginDate: Date, limit: UInt64? = nil, offset: UInt64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWeeklyReportMalwaresResponse {
        try await self.describeWeeklyReportMalwares(DescribeWeeklyReportMalwaresRequest(beginDate: beginDate, limit: limit, offset: offset), logger: logger, on: eventLoop)
    }
}
