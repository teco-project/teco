//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Yunjing {
    /// DescribeVulScanResult请求参数结构体
    public struct DescribeVulScanResultRequest: TCRequestModel {
        public init () {
        }
    }
    
    /// DescribeVulScanResult返回参数结构体
    public struct DescribeVulScanResultResponse: TCResponseModel {
        /// 漏洞数量。
        public let vulNum: UInt64
        
        /// 专业版机器数。
        public let proVersionNum: UInt64
        
        /// 受影响的专业版主机数。
        public let impactedHostNum: UInt64
        
        /// 主机总数。
        public let hostNum: UInt64
        
        /// 基础版机器数。
        public let basicVersionNum: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case vulNum = "VulNum"
            case proVersionNum = "ProVersionNum"
            case impactedHostNum = "ImpactedHostNum"
            case hostNum = "HostNum"
            case basicVersionNum = "BasicVersionNum"
            case requestId = "RequestId"
        }
    }
    
    /// 获取漏洞检测结果
    ///
    /// 本接口 (DescribeVulScanResult) 用于获取漏洞检测结果。
    @inlinable
    public func describeVulScanResult(_ input: DescribeVulScanResultRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeVulScanResultResponse > {
        self.client.execute(action: "DescribeVulScanResult", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取漏洞检测结果
    ///
    /// 本接口 (DescribeVulScanResult) 用于获取漏洞检测结果。
    @inlinable
    public func describeVulScanResult(_ input: DescribeVulScanResultRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulScanResultResponse {
        try await self.client.execute(action: "DescribeVulScanResult", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取漏洞检测结果
    ///
    /// 本接口 (DescribeVulScanResult) 用于获取漏洞检测结果。
    @inlinable
    public func describeVulScanResult(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeVulScanResultResponse > {
        self.describeVulScanResult(DescribeVulScanResultRequest(), logger: logger, on: eventLoop)
    }
    
    /// 获取漏洞检测结果
    ///
    /// 本接口 (DescribeVulScanResult) 用于获取漏洞检测结果。
    @inlinable
    public func describeVulScanResult(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulScanResultResponse {
        try await self.describeVulScanResult(DescribeVulScanResultRequest(), logger: logger, on: eventLoop)
    }
}
