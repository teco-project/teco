//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Yunjing {
    /// ExportBruteAttacks请求参数结构体
    public struct ExportBruteAttacksRequest: TCRequestModel {
        public init() {
        }
    }

    /// ExportBruteAttacks返回参数结构体
    public struct ExportBruteAttacksResponse: TCResponseModel {
        /// 导出文件下载链接地址。
        public let downloadUrl: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case downloadUrl = "DownloadUrl"
            case requestId = "RequestId"
        }
    }

    /// 导出密码破解记录
    ///
    /// 本接口 (ExportBruteAttacks) 用于导出密码破解记录成CSV文件。
    @inlinable
    public func exportBruteAttacks(_ input: ExportBruteAttacksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportBruteAttacksResponse> {
        self.client.execute(action: "ExportBruteAttacks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导出密码破解记录
    ///
    /// 本接口 (ExportBruteAttacks) 用于导出密码破解记录成CSV文件。
    @inlinable
    public func exportBruteAttacks(_ input: ExportBruteAttacksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportBruteAttacksResponse {
        try await self.client.execute(action: "ExportBruteAttacks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导出密码破解记录
    ///
    /// 本接口 (ExportBruteAttacks) 用于导出密码破解记录成CSV文件。
    @inlinable
    public func exportBruteAttacks(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExportBruteAttacksResponse> {
        self.exportBruteAttacks(ExportBruteAttacksRequest(), region: region, logger: logger, on: eventLoop)
    }

    /// 导出密码破解记录
    ///
    /// 本接口 (ExportBruteAttacks) 用于导出密码破解记录成CSV文件。
    @inlinable
    public func exportBruteAttacks(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExportBruteAttacksResponse {
        try await self.exportBruteAttacks(ExportBruteAttacksRequest(), region: region, logger: logger, on: eventLoop)
    }
}
