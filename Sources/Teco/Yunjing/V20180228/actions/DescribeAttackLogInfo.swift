//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Yunjing {
    /// DescribeAttackLogInfo请求参数结构体
    public struct DescribeAttackLogInfoRequest: TCRequestModel {
        /// 日志ID
        public let id: UInt64
        
        public init (id: UInt64) {
            self.id = id
        }
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }
    
    /// DescribeAttackLogInfo返回参数结构体
    public struct DescribeAttackLogInfoResponse: TCResponseModel {
        /// 日志ID
        public let id: UInt64
        
        /// 主机ID
        public let quuid: String
        
        /// 攻击来源端口
        public let srcPort: UInt64
        
        /// 攻击来源IP
        public let srcIp: String
        
        /// 攻击目标端口
        public let dstPort: UInt64
        
        /// 攻击目标IP
        public let dstIp: String
        
        /// 攻击方法
        public let httpMethod: String
        
        /// 攻击目标主机
        public let httpHost: String
        
        /// 攻击头信息
        public let httpHead: String
        
        /// 攻击者浏览器标识
        public let httpUserAgent: String
        
        /// 请求源
        public let httpReferer: String
        
        /// 威胁类型
        public let vulType: String
        
        /// 攻击路径
        public let httpCgi: String
        
        /// 攻击参数
        public let httpParam: String
        
        /// 攻击时间
        public let createdAt: String
        
        /// 攻击内容
        public let httpContent: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case quuid = "Quuid"
            case srcPort = "SrcPort"
            case srcIp = "SrcIp"
            case dstPort = "DstPort"
            case dstIp = "DstIp"
            case httpMethod = "HttpMethod"
            case httpHost = "HttpHost"
            case httpHead = "HttpHead"
            case httpUserAgent = "HttpUserAgent"
            case httpReferer = "HttpReferer"
            case vulType = "VulType"
            case httpCgi = "HttpCgi"
            case httpParam = "HttpParam"
            case createdAt = "CreatedAt"
            case httpContent = "HttpContent"
            case requestId = "RequestId"
        }
    }
    
    /// 网络攻击日志详情
    @inlinable
    public func describeAttackLogInfo(_ input: DescribeAttackLogInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAttackLogInfoResponse > {
        self.client.execute(action: "DescribeAttackLogInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 网络攻击日志详情
    @inlinable
    public func describeAttackLogInfo(_ input: DescribeAttackLogInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAttackLogInfoResponse {
        try await self.client.execute(action: "DescribeAttackLogInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 网络攻击日志详情
    @inlinable
    public func describeAttackLogInfo(id: UInt64, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAttackLogInfoResponse > {
        self.describeAttackLogInfo(DescribeAttackLogInfoRequest(id: id), logger: logger, on: eventLoop)
    }
    
    /// 网络攻击日志详情
    @inlinable
    public func describeAttackLogInfo(id: UInt64, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAttackLogInfoResponse {
        try await self.describeAttackLogInfo(DescribeAttackLogInfoRequest(id: id), logger: logger, on: eventLoop)
    }
}
