//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Yunjing {
    /// DescribeVuls请求参数结构体
    public struct DescribeVulsRequest: TCRequestModel {
        /// 漏洞类型。
        /// <li>WEB：Web应用漏洞</li>
        /// <li>SYSTEM：系统组件漏洞</li>
        /// <li>BASELINE：安全基线</li>
        public let vulType: String
        
        /// 返回数量，默认为10，最大值为100。
        public let limit: UInt64?
        
        /// 偏移量，默认为0。
        public let offset: UInt64?
        
        /// 过滤条件。
        /// <li>Status - String - 是否必填：否 - 状态筛选（UN_OPERATED: 待处理 | FIXED：已修复）
        /// Status过滤条件值只能取其一，不能是“或”逻辑。
        public let filters: [Filter]?
        
        public init (vulType: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil) {
            self.vulType = vulType
            self.limit = limit
            self.offset = offset
            self.filters = filters
        }
        
        enum CodingKeys: String, CodingKey {
            case vulType = "VulType"
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
        }
    }
    
    /// DescribeVuls返回参数结构体
    public struct DescribeVulsResponse: TCResponseModel {
        /// 漏洞数量。
        public let totalCount: UInt64
        
        /// 漏洞列表数组。
        public let vuls: [Vul]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case vuls = "Vuls"
            case requestId = "RequestId"
        }
    }
    
    /// 获取漏洞列表
    ///
    /// 本接口 (DescribeVuls) 用于获取漏洞列表数据。
    @inlinable
    public func describeVuls(_ input: DescribeVulsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeVulsResponse > {
        self.client.execute(action: "DescribeVuls", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取漏洞列表
    ///
    /// 本接口 (DescribeVuls) 用于获取漏洞列表数据。
    @inlinable
    public func describeVuls(_ input: DescribeVulsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulsResponse {
        try await self.client.execute(action: "DescribeVuls", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取漏洞列表
    ///
    /// 本接口 (DescribeVuls) 用于获取漏洞列表数据。
    @inlinable
    public func describeVuls(vulType: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeVulsResponse > {
        self.describeVuls(DescribeVulsRequest(vulType: vulType, limit: limit, offset: offset, filters: filters), logger: logger, on: eventLoop)
    }
    
    /// 获取漏洞列表
    ///
    /// 本接口 (DescribeVuls) 用于获取漏洞列表数据。
    @inlinable
    public func describeVuls(vulType: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulsResponse {
        try await self.describeVuls(DescribeVulsRequest(vulType: vulType, limit: limit, offset: offset, filters: filters), logger: logger, on: eventLoop)
    }
}
