//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Yunjing {
    /// CloseProVersion请求参数结构体
    public struct CloseProVersionRequest: TCRequestModel {
        /// 主机唯一标识Uuid。
        /// 黑石的InstanceId，CVM的Uuid
        public let quuid: String?

        public init(quuid: String? = nil) {
            self.quuid = quuid
        }

        enum CodingKeys: String, CodingKey {
            case quuid = "Quuid"
        }
    }

    /// CloseProVersion返回参数结构体
    public struct CloseProVersionResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 关闭专业版
    ///
    /// 本接口 (CloseProVersion) 用于关闭专业版。
    @inlinable @discardableResult
    public func closeProVersion(_ input: CloseProVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CloseProVersionResponse> {
        self.client.execute(action: "CloseProVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 关闭专业版
    ///
    /// 本接口 (CloseProVersion) 用于关闭专业版。
    @inlinable @discardableResult
    public func closeProVersion(_ input: CloseProVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CloseProVersionResponse {
        try await self.client.execute(action: "CloseProVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 关闭专业版
    ///
    /// 本接口 (CloseProVersion) 用于关闭专业版。
    @inlinable @discardableResult
    public func closeProVersion(quuid: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CloseProVersionResponse> {
        self.closeProVersion(CloseProVersionRequest(quuid: quuid), region: region, logger: logger, on: eventLoop)
    }

    /// 关闭专业版
    ///
    /// 本接口 (CloseProVersion) 用于关闭专业版。
    @inlinable @discardableResult
    public func closeProVersion(quuid: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CloseProVersionResponse {
        try await self.closeProVersion(CloseProVersionRequest(quuid: quuid), region: region, logger: logger, on: eventLoop)
    }
}
