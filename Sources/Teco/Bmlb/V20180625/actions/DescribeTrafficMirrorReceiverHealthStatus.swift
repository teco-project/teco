//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmlb {
    /// DescribeTrafficMirrorReceiverHealthStatus请求参数结构体
    public struct DescribeTrafficMirrorReceiverHealthStatusRequest: TCRequestModel {
        /// 查询所在的流量镜像ID。
        public let trafficMirrorId: String

        /// 流量镜像接收机实例ID和端口数组。
        public let receiverSet: [DescribeTrafficMirrorReceiver]

        public init(trafficMirrorId: String, receiverSet: [DescribeTrafficMirrorReceiver]) {
            self.trafficMirrorId = trafficMirrorId
            self.receiverSet = receiverSet
        }

        enum CodingKeys: String, CodingKey {
            case trafficMirrorId = "TrafficMirrorId"
            case receiverSet = "ReceiverSet"
        }
    }

    /// DescribeTrafficMirrorReceiverHealthStatus返回参数结构体
    public struct DescribeTrafficMirrorReceiverHealthStatusResponse: TCResponseModel {
        /// 内网IP和端口对应的状态。
        public let receiversStatusSet: [TrafficMirrorReciversStatus]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case receiversStatusSet = "ReceiversStatusSet"
            case requestId = "RequestId"
        }
    }

    /// 获取流量镜像接收机健康状态
    ///
    /// 获取流量镜像接收机健康状态。
    @inlinable
    public func describeTrafficMirrorReceiverHealthStatus(_ input: DescribeTrafficMirrorReceiverHealthStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTrafficMirrorReceiverHealthStatusResponse> {
        self.client.execute(action: "DescribeTrafficMirrorReceiverHealthStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取流量镜像接收机健康状态
    ///
    /// 获取流量镜像接收机健康状态。
    @inlinable
    public func describeTrafficMirrorReceiverHealthStatus(_ input: DescribeTrafficMirrorReceiverHealthStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTrafficMirrorReceiverHealthStatusResponse {
        try await self.client.execute(action: "DescribeTrafficMirrorReceiverHealthStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取流量镜像接收机健康状态
    ///
    /// 获取流量镜像接收机健康状态。
    @inlinable
    public func describeTrafficMirrorReceiverHealthStatus(trafficMirrorId: String, receiverSet: [DescribeTrafficMirrorReceiver], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTrafficMirrorReceiverHealthStatusResponse> {
        let input = DescribeTrafficMirrorReceiverHealthStatusRequest(trafficMirrorId: trafficMirrorId, receiverSet: receiverSet)
        return self.client.execute(action: "DescribeTrafficMirrorReceiverHealthStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取流量镜像接收机健康状态
    ///
    /// 获取流量镜像接收机健康状态。
    @inlinable
    public func describeTrafficMirrorReceiverHealthStatus(trafficMirrorId: String, receiverSet: [DescribeTrafficMirrorReceiver], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTrafficMirrorReceiverHealthStatusResponse {
        let input = DescribeTrafficMirrorReceiverHealthStatusRequest(trafficMirrorId: trafficMirrorId, receiverSet: receiverSet)
        return try await self.client.execute(action: "DescribeTrafficMirrorReceiverHealthStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
