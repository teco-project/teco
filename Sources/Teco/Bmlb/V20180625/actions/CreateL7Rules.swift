//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmlb {
    /// CreateL7Rules请求参数结构体
    public struct CreateL7RulesRequest: TCRequestModel {
        /// 负载均衡实例ID，可通过接口DescribeLoadBalancers查询。
        public let loadBalancerId: String

        /// 七层监听器实例ID，可通过接口DescribeL7Listeners查询。
        public let listenerId: String

        /// 七层转发规则信息数组，可以创建多个七层转发规则。目前一个七层监听器下面最多允许创建50个七层转发域名，而每一个转发域名下最多可以创建100个转发规则。目前只能单条创建，不能批量创建。
        public let ruleSet: [CreateL7Rule]

        public init(loadBalancerId: String, listenerId: String, ruleSet: [CreateL7Rule]) {
            self.loadBalancerId = loadBalancerId
            self.listenerId = listenerId
            self.ruleSet = ruleSet
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case listenerId = "ListenerId"
            case ruleSet = "RuleSet"
        }
    }

    /// CreateL7Rules返回参数结构体
    public struct CreateL7RulesResponse: TCResponseModel {
        /// 任务ID。该接口为异步任务，可根据本参数调用DescribeLoadBalancerTaskResult接口来查询任务操作结果。
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 创建黑石负载均衡七层转发规则
    ///
    /// 创建黑石负载均衡七层转发规则。
    @inlinable
    public func createL7Rules(_ input: CreateL7RulesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateL7RulesResponse> {
        self.client.execute(action: "CreateL7Rules", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建黑石负载均衡七层转发规则
    ///
    /// 创建黑石负载均衡七层转发规则。
    @inlinable
    public func createL7Rules(_ input: CreateL7RulesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateL7RulesResponse {
        try await self.client.execute(action: "CreateL7Rules", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建黑石负载均衡七层转发规则
    ///
    /// 创建黑石负载均衡七层转发规则。
    @inlinable
    public func createL7Rules(loadBalancerId: String, listenerId: String, ruleSet: [CreateL7Rule], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateL7RulesResponse> {
        self.createL7Rules(CreateL7RulesRequest(loadBalancerId: loadBalancerId, listenerId: listenerId, ruleSet: ruleSet), logger: logger, on: eventLoop)
    }

    /// 创建黑石负载均衡七层转发规则
    ///
    /// 创建黑石负载均衡七层转发规则。
    @inlinable
    public func createL7Rules(loadBalancerId: String, listenerId: String, ruleSet: [CreateL7Rule], logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateL7RulesResponse {
        try await self.createL7Rules(CreateL7RulesRequest(loadBalancerId: loadBalancerId, listenerId: listenerId, ruleSet: ruleSet), logger: logger, on: eventLoop)
    }
}
