//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmlb {
    /// 设置流量镜像的别名
    ///
    /// 设置流量镜像的别名。
    @inlinable
    public func setTrafficMirrorAlias(_ input: SetTrafficMirrorAliasRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < SetTrafficMirrorAliasResponse > {
        self.client.execute(action: "SetTrafficMirrorAlias", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 设置流量镜像的别名
    ///
    /// 设置流量镜像的别名。
    @inlinable
    public func setTrafficMirrorAlias(_ input: SetTrafficMirrorAliasRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetTrafficMirrorAliasResponse {
        try await self.client.execute(action: "SetTrafficMirrorAlias", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// SetTrafficMirrorAlias请求参数结构体
    public struct SetTrafficMirrorAliasRequest: TCRequestModel {
        /// 流量镜像实例ID。
        public let trafficMirrorId: String
        
        /// 流量镜像实例别名。
        public let alias: String
        
        public init (trafficMirrorId: String, alias: String) {
            self.trafficMirrorId = trafficMirrorId
            self.alias = alias
        }
        
        enum CodingKeys: String, CodingKey {
            case trafficMirrorId = "TrafficMirrorId"
            case alias = "Alias"
        }
    }
    
    /// SetTrafficMirrorAlias返回参数结构体
    public struct SetTrafficMirrorAliasResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}