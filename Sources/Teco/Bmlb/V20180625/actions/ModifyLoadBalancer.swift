//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Bmlb {
    /// ModifyLoadBalancer请求参数结构体
    public struct ModifyLoadBalancerRequest: TCRequestModel {
        /// 负载均衡实例ID，可通过接口DescribeLoadBalancers查询。
        public let loadBalancerId: String

        /// 负载均衡器名称，规则：1-20个英文、汉字、数字、连接线“-”或下划线“_”。
        public let loadBalancerName: String?

        /// 域名前缀，负载均衡的域名由用户输入的域名前缀与配置文件中的域名后缀一起组合而成，保证是唯一的域名。规则：1-20个小写英文字母、数字或连接线“-”。内网类型的负载均衡不能配置该字段。
        public let domainPrefix: String?

        public init(loadBalancerId: String, loadBalancerName: String? = nil, domainPrefix: String? = nil) {
            self.loadBalancerId = loadBalancerId
            self.loadBalancerName = loadBalancerName
            self.domainPrefix = domainPrefix
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case domainPrefix = "DomainPrefix"
        }
    }

    /// ModifyLoadBalancer返回参数结构体
    public struct ModifyLoadBalancerResponse: TCResponseModel {
        /// 任务ID。该接口为异步任务，可根据本参数调用DescribeLoadBalancerTaskResult接口来查询任务操作结果。
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 修改黑石负载均衡实例的基本配置信息
    ///
    /// 根据输入参数来修改黑石负载均衡实例的基本配置信息。可能的信息包括负载均衡实例的名称，域名前缀。
    @inlinable
    public func modifyLoadBalancer(_ input: ModifyLoadBalancerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLoadBalancerResponse> {
        self.client.execute(action: "ModifyLoadBalancer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改黑石负载均衡实例的基本配置信息
    ///
    /// 根据输入参数来修改黑石负载均衡实例的基本配置信息。可能的信息包括负载均衡实例的名称，域名前缀。
    @inlinable
    public func modifyLoadBalancer(_ input: ModifyLoadBalancerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLoadBalancerResponse {
        try await self.client.execute(action: "ModifyLoadBalancer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改黑石负载均衡实例的基本配置信息
    ///
    /// 根据输入参数来修改黑石负载均衡实例的基本配置信息。可能的信息包括负载均衡实例的名称，域名前缀。
    @inlinable
    public func modifyLoadBalancer(loadBalancerId: String, loadBalancerName: String? = nil, domainPrefix: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyLoadBalancerResponse> {
        self.modifyLoadBalancer(.init(loadBalancerId: loadBalancerId, loadBalancerName: loadBalancerName, domainPrefix: domainPrefix), region: region, logger: logger, on: eventLoop)
    }

    /// 修改黑石负载均衡实例的基本配置信息
    ///
    /// 根据输入参数来修改黑石负载均衡实例的基本配置信息。可能的信息包括负载均衡实例的名称，域名前缀。
    @inlinable
    public func modifyLoadBalancer(loadBalancerId: String, loadBalancerName: String? = nil, domainPrefix: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyLoadBalancerResponse {
        try await self.modifyLoadBalancer(.init(loadBalancerId: loadBalancerId, loadBalancerName: loadBalancerName, domainPrefix: domainPrefix), region: region, logger: logger, on: eventLoop)
    }
}
