//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore
import TecoPaginationHelpers

extension Bmlb {
    /// DescribeLoadBalancers请求参数结构体
    public struct DescribeLoadBalancersRequest: TCPaginatedRequest {
        /// 负载均衡器ID数组
        public let loadBalancerIds: [String]?

        /// 负载均衡的类型 : open表示公网LB类型，internal表示内网LB类型
        public let loadBalancerType: String?

        /// 负载均衡器名称
        public let loadBalancerName: String?

        /// 负载均衡域名。规则：1-60个小写英文字母、数字、点号“.”或连接线“-”。内网类型的负载均衡不能配置该字段
        public let domain: String?

        /// 负载均衡获得的公网IP地址,支持多个
        public let loadBalancerVips: [String]?

        /// 数据偏移量，默认为0
        public let offset: UInt64?

        /// 返回数据长度，默认为20
        public let limit: UInt64?

        /// 模糊查找名称、域名、VIP
        public let searchKey: String?

        /// 排序字段，支持：loadBalancerName,createTime,domain,loadBalancerType
        public let orderBy: String?

        /// 1倒序，0顺序，默认顺序
        public let orderType: Int64?

        /// 项目ID
        public let projectId: UInt64?

        /// 是否筛选独占集群，0表示非独占集群，1表示四层独占集群，2表示七层独占集群，3表示四层和七层独占集群，4表示共享容灾
        public let exclusive: UInt64?

        /// 该负载均衡对应的tgw集群（fullnat,tunnel,dnat）
        public let tgwSetType: String?

        /// 该负载均衡对应的所在的私有网络ID
        public let vpcId: String?

        /// 'CONFLIST' 查询带confId的LB列表，'CONFID' 查询某个confId绑定的LB列表
        public let queryType: String?

        /// 个性化配置ID
        public let confId: String?

        public init(loadBalancerIds: [String]? = nil, loadBalancerType: String? = nil, loadBalancerName: String? = nil, domain: String? = nil, loadBalancerVips: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, searchKey: String? = nil, orderBy: String? = nil, orderType: Int64? = nil, projectId: UInt64? = nil, exclusive: UInt64? = nil, tgwSetType: String? = nil, vpcId: String? = nil, queryType: String? = nil, confId: String? = nil) {
            self.loadBalancerIds = loadBalancerIds
            self.loadBalancerType = loadBalancerType
            self.loadBalancerName = loadBalancerName
            self.domain = domain
            self.loadBalancerVips = loadBalancerVips
            self.offset = offset
            self.limit = limit
            self.searchKey = searchKey
            self.orderBy = orderBy
            self.orderType = orderType
            self.projectId = projectId
            self.exclusive = exclusive
            self.tgwSetType = tgwSetType
            self.vpcId = vpcId
            self.queryType = queryType
            self.confId = confId
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerIds = "LoadBalancerIds"
            case loadBalancerType = "LoadBalancerType"
            case loadBalancerName = "LoadBalancerName"
            case domain = "Domain"
            case loadBalancerVips = "LoadBalancerVips"
            case offset = "Offset"
            case limit = "Limit"
            case searchKey = "SearchKey"
            case orderBy = "OrderBy"
            case orderType = "OrderType"
            case projectId = "ProjectId"
            case exclusive = "Exclusive"
            case tgwSetType = "TgwSetType"
            case vpcId = "VpcId"
            case queryType = "QueryType"
            case confId = "ConfId"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeLoadBalancersResponse) -> DescribeLoadBalancersRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeLoadBalancersRequest(loadBalancerIds: self.loadBalancerIds, loadBalancerType: self.loadBalancerType, loadBalancerName: self.loadBalancerName, domain: self.domain, loadBalancerVips: self.loadBalancerVips, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, searchKey: self.searchKey, orderBy: self.orderBy, orderType: self.orderType, projectId: self.projectId, exclusive: self.exclusive, tgwSetType: self.tgwSetType, vpcId: self.vpcId, queryType: self.queryType, confId: self.confId)
        }
    }

    /// DescribeLoadBalancers返回参数结构体
    public struct DescribeLoadBalancersResponse: TCPaginatedResponse {
        /// 返回负载均衡信息列表。
        public let loadBalancerSet: [LoadBalancer]

        /// 符合条件的负载均衡总数。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case loadBalancerSet = "LoadBalancerSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [LoadBalancer] {
            self.loadBalancerSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取黑石负载均衡实例列表
    @inlinable
    public func describeLoadBalancers(_ input: DescribeLoadBalancersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLoadBalancersResponse> {
        self.client.execute(action: "DescribeLoadBalancers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取黑石负载均衡实例列表
    @inlinable
    public func describeLoadBalancers(_ input: DescribeLoadBalancersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLoadBalancersResponse {
        try await self.client.execute(action: "DescribeLoadBalancers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取黑石负载均衡实例列表
    @inlinable
    public func describeLoadBalancers(loadBalancerIds: [String]? = nil, loadBalancerType: String? = nil, loadBalancerName: String? = nil, domain: String? = nil, loadBalancerVips: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, searchKey: String? = nil, orderBy: String? = nil, orderType: Int64? = nil, projectId: UInt64? = nil, exclusive: UInt64? = nil, tgwSetType: String? = nil, vpcId: String? = nil, queryType: String? = nil, confId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLoadBalancersResponse> {
        self.describeLoadBalancers(.init(loadBalancerIds: loadBalancerIds, loadBalancerType: loadBalancerType, loadBalancerName: loadBalancerName, domain: domain, loadBalancerVips: loadBalancerVips, offset: offset, limit: limit, searchKey: searchKey, orderBy: orderBy, orderType: orderType, projectId: projectId, exclusive: exclusive, tgwSetType: tgwSetType, vpcId: vpcId, queryType: queryType, confId: confId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取黑石负载均衡实例列表
    @inlinable
    public func describeLoadBalancers(loadBalancerIds: [String]? = nil, loadBalancerType: String? = nil, loadBalancerName: String? = nil, domain: String? = nil, loadBalancerVips: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, searchKey: String? = nil, orderBy: String? = nil, orderType: Int64? = nil, projectId: UInt64? = nil, exclusive: UInt64? = nil, tgwSetType: String? = nil, vpcId: String? = nil, queryType: String? = nil, confId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLoadBalancersResponse {
        try await self.describeLoadBalancers(.init(loadBalancerIds: loadBalancerIds, loadBalancerType: loadBalancerType, loadBalancerName: loadBalancerName, domain: domain, loadBalancerVips: loadBalancerVips, offset: offset, limit: limit, searchKey: searchKey, orderBy: orderBy, orderType: orderType, projectId: projectId, exclusive: exclusive, tgwSetType: tgwSetType, vpcId: vpcId, queryType: queryType, confId: confId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取黑石负载均衡实例列表
    @inlinable
    public func describeLoadBalancersPaginated(_ input: DescribeLoadBalancersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [LoadBalancer])> {
        self.client.paginate(input: input, region: region, command: self.describeLoadBalancers, logger: logger, on: eventLoop)
    }

    /// 获取黑石负载均衡实例列表
    @inlinable @discardableResult
    public func describeLoadBalancersPaginated(_ input: DescribeLoadBalancersRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeLoadBalancersResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeLoadBalancers, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取黑石负载均衡实例列表
    ///
    /// - Returns: `AsyncSequence`s of `LoadBalancer` and `DescribeLoadBalancersResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeLoadBalancersPaginator(_ input: DescribeLoadBalancersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeLoadBalancersRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeLoadBalancers, logger: logger, on: eventLoop)
    }
}
