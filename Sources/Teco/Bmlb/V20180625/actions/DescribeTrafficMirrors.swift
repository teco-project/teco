//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bmlb {
    /// 获取流量镜像实例的列表信息
    ///
    /// 获取流量镜像实例的列表信息。
    @inlinable
    public func describeTrafficMirrors(_ input: DescribeTrafficMirrorsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeTrafficMirrorsResponse > {
        self.client.execute(action: "DescribeTrafficMirrors", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取流量镜像实例的列表信息
    ///
    /// 获取流量镜像实例的列表信息。
    @inlinable
    public func describeTrafficMirrors(_ input: DescribeTrafficMirrorsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTrafficMirrorsResponse {
        try await self.client.execute(action: "DescribeTrafficMirrors", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeTrafficMirrors请求参数结构体
    public struct DescribeTrafficMirrorsRequest: TCRequestModel {
        /// 流量镜像实例ID的数组，支持批量查询
        public let trafficMirrorIds: [String]?
        
        /// 流量镜像实例别名数组。
        public let aliases: [String]?
        
        /// 流量镜像实例所属的私有网络ID数组，形如：vpc-xxx。
        public let vpcIds: [String]?
        
        /// 分页的偏移量，也即从第几条记录开始查询
        public let offset: Int64?
        
        /// 单次查询返回的条目数，默认值：500。
        public let limit: Int64?
        
        /// 排序字段。trafficMirrorId或者createTime。
        public let orderField: String?
        
        /// 排序方式，取值：0:增序(默认)，1:降序
        public let order: Int64?
        
        /// 模糊匹配trafficMirrorId或者alias字段。
        public let searchKey: String?
        
        public init (trafficMirrorIds: [String]?, aliases: [String]?, vpcIds: [String]?, offset: Int64?, limit: Int64?, orderField: String?, order: Int64?, searchKey: String?) {
            self.trafficMirrorIds = trafficMirrorIds
            self.aliases = aliases
            self.vpcIds = vpcIds
            self.offset = offset
            self.limit = limit
            self.orderField = orderField
            self.order = order
            self.searchKey = searchKey
        }
        
        enum CodingKeys: String, CodingKey {
            case trafficMirrorIds = "TrafficMirrorIds"
            case aliases = "Aliases"
            case vpcIds = "VpcIds"
            case offset = "Offset"
            case limit = "Limit"
            case orderField = "OrderField"
            case order = "Order"
            case searchKey = "SearchKey"
        }
    }
    
    /// DescribeTrafficMirrors返回参数结构体
    public struct DescribeTrafficMirrorsResponse: TCResponseModel {
        /// 流量镜像总数。
        public let totalCount: Int64
        
        /// 对象数组。数组元素为流量镜像信息，具体结构描述如list结构所示。
        public let trafficMirrorSet: [TrafficMirror]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case trafficMirrorSet = "TrafficMirrorSet"
            case requestId = "RequestId"
        }
    }
}
