//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCIssError {
    public struct ResourceInUse: TCIssErrorType {
        enum Code: String {
            case channelRepeatAdd = "ResourceInUse.ChannelRepeatAdd"
            case planDeleting = "ResourceInUse.PlanDeleting"
            case planLinkTemplate = "ResourceInUse.PlanLinkTemplate"
            case planNameRepeat = "ResourceInUse.PlanNameRepeat"
            case retrieveTaskExecuting = "ResourceInUse.RetrieveTaskExecuting"
            case retrieveTaskNameRepeat = "ResourceInUse.RetrieveTaskNameRepeat"
            case templateNameRepeat = "ResourceInUse.TemplateNameRepeat"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var channelRepeatAdd: ResourceInUse {
            ResourceInUse(.channelRepeatAdd)
        }

        public static var planDeleting: ResourceInUse {
            ResourceInUse(.planDeleting)
        }

        public static var planLinkTemplate: ResourceInUse {
            ResourceInUse(.planLinkTemplate)
        }

        public static var planNameRepeat: ResourceInUse {
            ResourceInUse(.planNameRepeat)
        }

        public static var retrieveTaskExecuting: ResourceInUse {
            ResourceInUse(.retrieveTaskExecuting)
        }

        public static var retrieveTaskNameRepeat: ResourceInUse {
            ResourceInUse(.retrieveTaskNameRepeat)
        }

        public static var templateNameRepeat: ResourceInUse {
            ResourceInUse(.templateNameRepeat)
        }

        public func asIssError() -> TCIssError {
            let code: TCIssError.Code
            switch self.error {
            case .channelRepeatAdd:
                code = .resourceInUse_ChannelRepeatAdd
            case .planDeleting:
                code = .resourceInUse_PlanDeleting
            case .planLinkTemplate:
                code = .resourceInUse_PlanLinkTemplate
            case .planNameRepeat:
                code = .resourceInUse_PlanNameRepeat
            case .retrieveTaskExecuting:
                code = .resourceInUse_RetrieveTaskExecuting
            case .retrieveTaskNameRepeat:
                code = .resourceInUse_RetrieveTaskNameRepeat
            case .templateNameRepeat:
                code = .resourceInUse_TemplateNameRepeat
            }
            return TCIssError(code, context: self.context)
        }
    }
}
