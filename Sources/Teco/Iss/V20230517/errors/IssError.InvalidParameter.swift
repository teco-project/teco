//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCIssError {
    public struct InvalidParameter: TCIssErrorType {
        enum Code: String {
            case downloadUrlError = "InvalidParameter.DownloadUrlError"
            case downloadUrlHasExpired = "InvalidParameter.DownloadUrlHasExpired"
            case invalidAction = "InvalidParameter.InvalidAction"
            case invalidBodyFormat = "InvalidParameter.InvalidBodyFormat"
            case invalidChannels = "InvalidParameter.InvalidChannels"
            case invalidLifeRuleParam = "InvalidParameter.InvalidLifeRuleParam"
            case invalidOrganizationParam = "InvalidParameter.InvalidOrganizationParam"
            case invalidParameterFormat = "InvalidParameter.InvalidParameterFormat"
            case invalidTimeSection = "InvalidParameter.InvalidTimeSection"
            case requiredHeaderParameterEmpty = "InvalidParameter.RequiredHeaderParameterEmpty"
            case taskIdNotExist = "InvalidParameter.TaskIdNotExist"
            case other = "InvalidParameter"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var downloadUrlError: InvalidParameter {
            InvalidParameter(.downloadUrlError)
        }

        public static var downloadUrlHasExpired: InvalidParameter {
            InvalidParameter(.downloadUrlHasExpired)
        }

        public static var invalidAction: InvalidParameter {
            InvalidParameter(.invalidAction)
        }

        public static var invalidBodyFormat: InvalidParameter {
            InvalidParameter(.invalidBodyFormat)
        }

        public static var invalidChannels: InvalidParameter {
            InvalidParameter(.invalidChannels)
        }

        public static var invalidLifeRuleParam: InvalidParameter {
            InvalidParameter(.invalidLifeRuleParam)
        }

        public static var invalidOrganizationParam: InvalidParameter {
            InvalidParameter(.invalidOrganizationParam)
        }

        public static var invalidParameterFormat: InvalidParameter {
            InvalidParameter(.invalidParameterFormat)
        }

        public static var invalidTimeSection: InvalidParameter {
            InvalidParameter(.invalidTimeSection)
        }

        public static var requiredHeaderParameterEmpty: InvalidParameter {
            InvalidParameter(.requiredHeaderParameterEmpty)
        }

        public static var taskIdNotExist: InvalidParameter {
            InvalidParameter(.taskIdNotExist)
        }

        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }

        public func asIssError() -> TCIssError {
            let code: TCIssError.Code
            switch self.error {
            case .downloadUrlError:
                code = .invalidParameter_DownloadUrlError
            case .downloadUrlHasExpired:
                code = .invalidParameter_DownloadUrlHasExpired
            case .invalidAction:
                code = .invalidParameter_InvalidAction
            case .invalidBodyFormat:
                code = .invalidParameter_InvalidBodyFormat
            case .invalidChannels:
                code = .invalidParameter_InvalidChannels
            case .invalidLifeRuleParam:
                code = .invalidParameter_InvalidLifeRuleParam
            case .invalidOrganizationParam:
                code = .invalidParameter_InvalidOrganizationParam
            case .invalidParameterFormat:
                code = .invalidParameter_InvalidParameterFormat
            case .invalidTimeSection:
                code = .invalidParameter_InvalidTimeSection
            case .requiredHeaderParameterEmpty:
                code = .invalidParameter_RequiredHeaderParameterEmpty
            case .taskIdNotExist:
                code = .invalidParameter_TaskIdNotExist
            case .other:
                code = .invalidParameter
            }
            return TCIssError(code, context: self.context)
        }
    }
}
