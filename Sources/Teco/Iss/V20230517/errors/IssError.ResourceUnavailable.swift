//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCIssError {
    public struct ResourceUnavailable: TCIssErrorType {
        enum Code: String {
            case channelOffline = "ResourceUnavailable.ChannelOffline"
            case devDisable = "ResourceUnavailable.DevDisable"
            case devNoRegister = "ResourceUnavailable.DevNoRegister"
            case devOffline = "ResourceUnavailable.DevOffline"
            case domainNotRecord = "ResourceUnavailable.DomainNotRecord"
            case videoArchived = "ResourceUnavailable.VideoArchived"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var channelOffline: ResourceUnavailable {
            ResourceUnavailable(.channelOffline)
        }

        public static var devDisable: ResourceUnavailable {
            ResourceUnavailable(.devDisable)
        }

        public static var devNoRegister: ResourceUnavailable {
            ResourceUnavailable(.devNoRegister)
        }

        public static var devOffline: ResourceUnavailable {
            ResourceUnavailable(.devOffline)
        }

        public static var domainNotRecord: ResourceUnavailable {
            ResourceUnavailable(.domainNotRecord)
        }

        public static var videoArchived: ResourceUnavailable {
            ResourceUnavailable(.videoArchived)
        }

        public func asIssError() -> TCIssError {
            let code: TCIssError.Code
            switch self.error {
            case .channelOffline:
                code = .resourceUnavailable_ChannelOffline
            case .devDisable:
                code = .resourceUnavailable_DevDisable
            case .devNoRegister:
                code = .resourceUnavailable_DevNoRegister
            case .devOffline:
                code = .resourceUnavailable_DevOffline
            case .domainNotRecord:
                code = .resourceUnavailable_DomainNotRecord
            case .videoArchived:
                code = .resourceUnavailable_VideoArchived
            }
            return TCIssError(code, context: self.context)
        }
    }
}
