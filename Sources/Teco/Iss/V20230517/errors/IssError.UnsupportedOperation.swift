//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCIssError {
    public struct UnsupportedOperation: TCIssErrorType {
        enum Code: String {
            case orgLinkDev = "UnsupportedOperation.OrgLinkDev"
            case orgLinkOrg = "UnsupportedOperation.OrgLinkOrg"
            case scaleAndPosBothExist = "UnsupportedOperation.ScaleAndPosBothExist"
            case streamTypeOrResolution = "UnsupportedOperation.StreamTypeOrResolution"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var orgLinkDev: UnsupportedOperation {
            UnsupportedOperation(.orgLinkDev)
        }

        public static var orgLinkOrg: UnsupportedOperation {
            UnsupportedOperation(.orgLinkOrg)
        }

        public static var scaleAndPosBothExist: UnsupportedOperation {
            UnsupportedOperation(.scaleAndPosBothExist)
        }

        public static var streamTypeOrResolution: UnsupportedOperation {
            UnsupportedOperation(.streamTypeOrResolution)
        }

        public func asIssError() -> TCIssError {
            let code: TCIssError.Code
            switch self.error {
            case .orgLinkDev:
                code = .unsupportedOperation_OrgLinkDev
            case .orgLinkOrg:
                code = .unsupportedOperation_OrgLinkOrg
            case .scaleAndPosBothExist:
                code = .unsupportedOperation_ScaleAndPosBothExist
            case .streamTypeOrResolution:
                code = .unsupportedOperation_StreamTypeOrResolution
            }
            return TCIssError(code, context: self.context)
        }
    }
}
