//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCIssError {
    public struct ResourceNotFound: TCIssErrorType {
        enum Code: String {
            case aiTaskNotExisted = "ResourceNotFound.AITaskNotExisted"
            case channelNotExist = "ResourceNotFound.ChannelNotExist"
            case deviceNotExist = "ResourceNotFound.DeviceNotExist"
            case notFoundCluster = "ResourceNotFound.NotFoundCluster"
            case organizationIdNotExist = "ResourceNotFound.OrganizationIdNotExist"
            case planNotExist = "ResourceNotFound.PlanNotExist"
            case retrieveTaskNotExist = "ResourceNotFound.RetrieveTaskNotExist"
            case templateNotExist = "ResourceNotFound.TemplateNotExist"
            case videoNotFound = "ResourceNotFound.VideoNotFound"
            case other = "ResourceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var aiTaskNotExisted: ResourceNotFound {
            ResourceNotFound(.aiTaskNotExisted)
        }

        public static var channelNotExist: ResourceNotFound {
            ResourceNotFound(.channelNotExist)
        }

        public static var deviceNotExist: ResourceNotFound {
            ResourceNotFound(.deviceNotExist)
        }

        public static var notFoundCluster: ResourceNotFound {
            ResourceNotFound(.notFoundCluster)
        }

        public static var organizationIdNotExist: ResourceNotFound {
            ResourceNotFound(.organizationIdNotExist)
        }

        public static var planNotExist: ResourceNotFound {
            ResourceNotFound(.planNotExist)
        }

        public static var retrieveTaskNotExist: ResourceNotFound {
            ResourceNotFound(.retrieveTaskNotExist)
        }

        public static var templateNotExist: ResourceNotFound {
            ResourceNotFound(.templateNotExist)
        }

        public static var videoNotFound: ResourceNotFound {
            ResourceNotFound(.videoNotFound)
        }

        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }

        public func asIssError() -> TCIssError {
            let code: TCIssError.Code
            switch self.error {
            case .aiTaskNotExisted:
                code = .resourceNotFound_AITaskNotExisted
            case .channelNotExist:
                code = .resourceNotFound_ChannelNotExist
            case .deviceNotExist:
                code = .resourceNotFound_DeviceNotExist
            case .notFoundCluster:
                code = .resourceNotFound_NotFoundCluster
            case .organizationIdNotExist:
                code = .resourceNotFound_OrganizationIdNotExist
            case .planNotExist:
                code = .resourceNotFound_PlanNotExist
            case .retrieveTaskNotExist:
                code = .resourceNotFound_RetrieveTaskNotExist
            case .templateNotExist:
                code = .resourceNotFound_TemplateNotExist
            case .videoNotFound:
                code = .resourceNotFound_VideoNotFound
            case .other:
                code = .resourceNotFound
            }
            return TCIssError(code, context: self.context)
        }
    }
}
