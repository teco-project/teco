//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ListGatewayDevices请求参数结构体
    public struct ListGatewayDevicesRequest: TCPaginatedRequest {
        /// 网关索引ID（从获取网关列表接口ListGateways中获取）
        public let gatewayId: String

        /// 分页页数
        public let pageNumber: Int64?

        /// 分页大小
        public let pageSize: Int64?

        public init(gatewayId: String, pageNumber: Int64? = nil, pageSize: Int64? = nil) {
            self.gatewayId = gatewayId
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListGatewayDevicesResponse) -> ListGatewayDevicesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(gatewayId: self.gatewayId, pageNumber: (self.pageNumber ?? 0) + 1, pageSize: self.pageSize)
        }
    }

    /// ListGatewayDevices返回参数结构体
    public struct ListGatewayDevicesResponse: TCPaginatedResponse {
        /// 返回数据
        public let data: ListGatewayDevicesData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``GatewayDevice`` list from the paginated response.
        public func getItems() -> [GatewayDevice] {
            self.data.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data.totalCount
        }
    }

    /// 查询网关下设备列表
    ///
    /// 用于查询网关下挂载的设备列表。
    @inlinable
    public func listGatewayDevices(_ input: ListGatewayDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListGatewayDevicesResponse> {
        self.client.execute(action: "ListGatewayDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询网关下设备列表
    ///
    /// 用于查询网关下挂载的设备列表。
    @inlinable
    public func listGatewayDevices(_ input: ListGatewayDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListGatewayDevicesResponse {
        try await self.client.execute(action: "ListGatewayDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询网关下设备列表
    ///
    /// 用于查询网关下挂载的设备列表。
    @inlinable
    public func listGatewayDevices(gatewayId: String, pageNumber: Int64? = nil, pageSize: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListGatewayDevicesResponse> {
        self.listGatewayDevices(.init(gatewayId: gatewayId, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 查询网关下设备列表
    ///
    /// 用于查询网关下挂载的设备列表。
    @inlinable
    public func listGatewayDevices(gatewayId: String, pageNumber: Int64? = nil, pageSize: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListGatewayDevicesResponse {
        try await self.listGatewayDevices(.init(gatewayId: gatewayId, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 查询网关下设备列表
    ///
    /// 用于查询网关下挂载的设备列表。
    @inlinable
    public func listGatewayDevicesPaginated(_ input: ListGatewayDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [GatewayDevice])> {
        self.client.paginate(input: input, region: region, command: self.listGatewayDevices, logger: logger, on: eventLoop)
    }

    /// 查询网关下设备列表
    ///
    /// 用于查询网关下挂载的设备列表。
    @inlinable @discardableResult
    public func listGatewayDevicesPaginated(_ input: ListGatewayDevicesRequest, region: TCRegion? = nil, onResponse: @escaping (ListGatewayDevicesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listGatewayDevices, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询网关下设备列表
    ///
    /// 用于查询网关下挂载的设备列表。
    ///
    /// - Returns: `AsyncSequence`s of ``GatewayDevice`` and ``ListGatewayDevicesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func listGatewayDevicesPaginator(_ input: ListGatewayDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListGatewayDevicesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listGatewayDevices, logger: logger, on: eventLoop)
    }
}
