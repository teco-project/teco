//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Iss {
    /// ListOrganizationChannels请求参数结构体
    public struct ListOrganizationChannelsRequest: TCPaginatedRequest {
        /// 组织ID
        public let organizationId: String

        /// 每页最大数量
        public let pageSize: Int64

        /// 第几页
        public let pageNumber: Int64

        /// 查询条件，则按照设备名称查询
        /// 查询条件同时只有一个生效。长度不超过32字节
        public let deviceName: String?

        /// 查询条件，则按照通道名称查询
        /// 查询条件同时只有一个生效。长度不超过32字节
        public let channelName: String?

        public init(organizationId: String, pageSize: Int64, pageNumber: Int64, deviceName: String? = nil, channelName: String? = nil) {
            self.organizationId = organizationId
            self.pageSize = pageSize
            self.pageNumber = pageNumber
            self.deviceName = deviceName
            self.channelName = channelName
        }

        enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
            case deviceName = "DeviceName"
            case channelName = "ChannelName"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListOrganizationChannelsResponse) -> ListOrganizationChannelsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return ListOrganizationChannelsRequest(organizationId: self.organizationId, pageSize: self.pageSize, pageNumber: self.pageNumber + 1, deviceName: self.deviceName, channelName: self.channelName)
        }
    }

    /// 查询组织目录下的通道列表返回数据
    public struct ListOrganizationChannelsResponse: TCPaginatedResponse {
        /// 第几页
        public let pageNumber: Int64?

        /// 当前页的设备数量
        public let pageSize: Int64?

        /// 本次查询的设备通道总数
        public let totalCount: Int64?

        /// 设备通道信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let list: [OrganizationChannelInfo]?

        enum CodingKeys: String, CodingKey {
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case totalCount = "TotalCount"
            case list = "List"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [OrganizationChannelInfo] {
            self.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询组织目录下的通道列表
    ///
    /// 用于查询组织目录下的通道列表
    @inlinable
    public func listOrganizationChannels(_ input: ListOrganizationChannelsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListOrganizationChannelsResponse> {
        self.client.execute(action: "ListOrganizationChannels", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询组织目录下的通道列表
    ///
    /// 用于查询组织目录下的通道列表
    @inlinable
    public func listOrganizationChannels(_ input: ListOrganizationChannelsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationChannelsResponse {
        try await self.client.execute(action: "ListOrganizationChannels", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询组织目录下的通道列表
    ///
    /// 用于查询组织目录下的通道列表
    @inlinable
    public func listOrganizationChannels(organizationId: String, pageSize: Int64, pageNumber: Int64, deviceName: String? = nil, channelName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListOrganizationChannelsResponse> {
        self.listOrganizationChannels(.init(organizationId: organizationId, pageSize: pageSize, pageNumber: pageNumber, deviceName: deviceName, channelName: channelName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询组织目录下的通道列表
    ///
    /// 用于查询组织目录下的通道列表
    @inlinable
    public func listOrganizationChannels(organizationId: String, pageSize: Int64, pageNumber: Int64, deviceName: String? = nil, channelName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationChannelsResponse {
        try await self.listOrganizationChannels(.init(organizationId: organizationId, pageSize: pageSize, pageNumber: pageNumber, deviceName: deviceName, channelName: channelName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询组织目录下的通道列表
    ///
    /// 用于查询组织目录下的通道列表
    @inlinable
    public func listOrganizationChannelsPaginated(_ input: ListOrganizationChannelsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [OrganizationChannelInfo])> {
        self.client.paginate(input: input, region: region, command: self.listOrganizationChannels, logger: logger, on: eventLoop)
    }

    /// 查询组织目录下的通道列表
    ///
    /// 用于查询组织目录下的通道列表
    @inlinable @discardableResult
    public func listOrganizationChannelsPaginated(_ input: ListOrganizationChannelsRequest, region: TCRegion? = nil, onResponse: @escaping (ListOrganizationChannelsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listOrganizationChannels, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询组织目录下的通道列表
    ///
    /// 用于查询组织目录下的通道列表
    ///
    /// - Returns: `AsyncSequence`s of `OrganizationChannelInfo` and `ListOrganizationChannelsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func listOrganizationChannelsPaginator(_ input: ListOrganizationChannelsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListOrganizationChannelsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listOrganizationChannels, logger: logger, on: eventLoop)
    }
}
