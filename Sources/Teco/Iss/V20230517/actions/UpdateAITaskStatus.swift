//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// UpdateAITaskStatus请求参数结构体
    public struct UpdateAITaskStatusRequest: TCRequestModel {
        /// AI 任务 ID
        public let taskId: String

        /// AI 任务状态。"on"代表开启了 AI 分析任务，"off"代表停止AI分析任务
        public let status: String

        public init(taskId: String, status: String) {
            self.taskId = taskId
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
        }
    }

    /// UpdateAITaskStatus返回参数结构体
    public struct UpdateAITaskStatusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新 AI 任务状态
    @inlinable @discardableResult
    public func updateAITaskStatus(_ input: UpdateAITaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateAITaskStatusResponse> {
        self.client.execute(action: "UpdateAITaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新 AI 任务状态
    @inlinable @discardableResult
    public func updateAITaskStatus(_ input: UpdateAITaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateAITaskStatusResponse {
        try await self.client.execute(action: "UpdateAITaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新 AI 任务状态
    @inlinable @discardableResult
    public func updateAITaskStatus(taskId: String, status: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateAITaskStatusResponse> {
        self.updateAITaskStatus(.init(taskId: taskId, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 更新 AI 任务状态
    @inlinable @discardableResult
    public func updateAITaskStatus(taskId: String, status: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateAITaskStatusResponse {
        try await self.updateAITaskStatus(.init(taskId: taskId, status: status), region: region, logger: logger, on: eventLoop)
    }
}
