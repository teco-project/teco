//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// AddOrganization请求参数结构体
    public struct AddOrganizationRequest: TCRequest {
        /// 组织名称（仅支持中文、英文、数字、_、-的组合，长度不超过16个字符，且组织名称不能重复）
        public let name: String

        /// 组织父节点 ID（从查询组织接口DescribeOrganization中获取，填0代表根组织）
        public let parentId: String

        public init(name: String, parentId: String) {
            self.name = name
            self.parentId = parentId
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case parentId = "ParentId"
        }
    }

    /// AddOrganization返回参数结构体
    public struct AddOrganizationResponse: TCResponse {
        /// 增加组织接口返回数据
        public let data: AddOrgData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 新增组织
    ///
    /// 用于新增组织。
    @inlinable
    public func addOrganization(_ input: AddOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddOrganizationResponse> {
        self.client.execute(action: "AddOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增组织
    ///
    /// 用于新增组织。
    @inlinable
    public func addOrganization(_ input: AddOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddOrganizationResponse {
        try await self.client.execute(action: "AddOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增组织
    ///
    /// 用于新增组织。
    @inlinable
    public func addOrganization(name: String, parentId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddOrganizationResponse> {
        self.addOrganization(.init(name: name, parentId: parentId), region: region, logger: logger, on: eventLoop)
    }

    /// 新增组织
    ///
    /// 用于新增组织。
    @inlinable
    public func addOrganization(name: String, parentId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddOrganizationResponse {
        try await self.addOrganization(.init(name: name, parentId: parentId), region: region, logger: logger, on: eventLoop)
    }
}
