//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// UpdateDeviceStatus请求参数结构体
    public struct UpdateDeviceStatusRequest: TCRequest {
        /// 设备 ID（从获取设备列表接口ListDevices中获取）
        public let deviceId: String

        /// 禁用启用状态码（2：启用，3:禁用）
        public let status: Int64

        public init(deviceId: String, status: Int64) {
            self.deviceId = deviceId
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case status = "Status"
        }
    }

    /// UpdateDeviceStatus返回参数结构体
    public struct UpdateDeviceStatusResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 禁用-启用设备
    ///
    /// 用于启用/禁用设备，禁用后拒绝设备注册。
    @inlinable @discardableResult
    public func updateDeviceStatus(_ input: UpdateDeviceStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateDeviceStatusResponse> {
        self.client.execute(action: "UpdateDeviceStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 禁用-启用设备
    ///
    /// 用于启用/禁用设备，禁用后拒绝设备注册。
    @inlinable @discardableResult
    public func updateDeviceStatus(_ input: UpdateDeviceStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDeviceStatusResponse {
        try await self.client.execute(action: "UpdateDeviceStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 禁用-启用设备
    ///
    /// 用于启用/禁用设备，禁用后拒绝设备注册。
    @inlinable @discardableResult
    public func updateDeviceStatus(deviceId: String, status: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateDeviceStatusResponse> {
        self.updateDeviceStatus(.init(deviceId: deviceId, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 禁用-启用设备
    ///
    /// 用于启用/禁用设备，禁用后拒绝设备注册。
    @inlinable @discardableResult
    public func updateDeviceStatus(deviceId: String, status: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDeviceStatusResponse {
        try await self.updateDeviceStatus(.init(deviceId: deviceId, status: status), region: region, logger: logger, on: eventLoop)
    }
}
