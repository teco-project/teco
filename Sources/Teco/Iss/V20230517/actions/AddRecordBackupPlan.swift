//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// AddRecordBackupPlan请求参数结构体
    public struct AddRecordBackupPlanRequest: TCRequest {
        /// 录制模板ID（录像计划关联的模板ID，从查询录像上云模板列表接口ListRecordBackupTemplates中获取）
        public let templateId: String

        /// 录像计划名称（仅支持中文、英文、数字、_、-，长度不超过32个字符，计划名称全局唯一，不能为空，不能重复）
        public let planName: String

        /// 录像计划描述（仅支持中文、英文、数字、_、-，长度不超过128个字符）
        public let describe: String

        /// 生命周期（录像文件生命周期设置，管理文件冷、热存储的时间）
        public let lifeCycle: LifeCycleData

        /// 通道及通道所属设备（添加录像的设备的通道信息，一次添加通道总数不超过5000个，包括组织目录下的通道数量）
        public let channels: [ChannelInfo]?

        /// 添加组织目录下所有设备通道（Json数组，可以为空，通道总数量不超过5000个（包括Channel字段的数量））
        public let organizationId: [String]?

        public init(templateId: String, planName: String, describe: String, lifeCycle: LifeCycleData, channels: [ChannelInfo]? = nil, organizationId: [String]? = nil) {
            self.templateId = templateId
            self.planName = planName
            self.describe = describe
            self.lifeCycle = lifeCycle
            self.channels = channels
            self.organizationId = organizationId
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case planName = "PlanName"
            case describe = "Describe"
            case lifeCycle = "LifeCycle"
            case channels = "Channels"
            case organizationId = "OrganizationId"
        }
    }

    /// AddRecordBackupPlan返回参数结构体
    public struct AddRecordBackupPlanResponse: TCResponse {
        /// 返回数据
        public let data: AddRecordBackupPlanData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 新增录像上云计划
    ///
    /// 用于新增录像上云计划 （当前仅适用于通过GB28181协议和网关接入的设备/视频通道）
    @inlinable
    public func addRecordBackupPlan(_ input: AddRecordBackupPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordBackupPlanResponse> {
        self.client.execute(action: "AddRecordBackupPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增录像上云计划
    ///
    /// 用于新增录像上云计划 （当前仅适用于通过GB28181协议和网关接入的设备/视频通道）
    @inlinable
    public func addRecordBackupPlan(_ input: AddRecordBackupPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordBackupPlanResponse {
        try await self.client.execute(action: "AddRecordBackupPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增录像上云计划
    ///
    /// 用于新增录像上云计划 （当前仅适用于通过GB28181协议和网关接入的设备/视频通道）
    @inlinable
    public func addRecordBackupPlan(templateId: String, planName: String, describe: String, lifeCycle: LifeCycleData, channels: [ChannelInfo]? = nil, organizationId: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordBackupPlanResponse> {
        self.addRecordBackupPlan(.init(templateId: templateId, planName: planName, describe: describe, lifeCycle: lifeCycle, channels: channels, organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }

    /// 新增录像上云计划
    ///
    /// 用于新增录像上云计划 （当前仅适用于通过GB28181协议和网关接入的设备/视频通道）
    @inlinable
    public func addRecordBackupPlan(templateId: String, planName: String, describe: String, lifeCycle: LifeCycleData, channels: [ChannelInfo]? = nil, organizationId: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordBackupPlanResponse {
        try await self.addRecordBackupPlan(.init(templateId: templateId, planName: planName, describe: describe, lifeCycle: lifeCycle, channels: channels, organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }
}
