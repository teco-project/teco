//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeRecordPlan请求参数结构体
    public struct DescribeRecordPlanRequest: TCRequestModel {
        /// 实时上云计划ID
        public let planId: String

        public init(planId: String) {
            self.planId = planId
        }

        enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
        }
    }

    /// DescribeRecordPlan返回参数结构体
    public struct DescribeRecordPlanResponse: TCResponseModel {
        /// 返回结果
        public let data: RecordPlanBaseInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询实时上云计划详情
    ///
    /// 用于查询实时上云计划详情
    @inlinable
    public func describeRecordPlan(_ input: DescribeRecordPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordPlanResponse> {
        self.client.execute(action: "DescribeRecordPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实时上云计划详情
    ///
    /// 用于查询实时上云计划详情
    @inlinable
    public func describeRecordPlan(_ input: DescribeRecordPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordPlanResponse {
        try await self.client.execute(action: "DescribeRecordPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实时上云计划详情
    ///
    /// 用于查询实时上云计划详情
    @inlinable
    public func describeRecordPlan(planId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordPlanResponse> {
        self.describeRecordPlan(.init(planId: planId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实时上云计划详情
    ///
    /// 用于查询实时上云计划详情
    @inlinable
    public func describeRecordPlan(planId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordPlanResponse {
        try await self.describeRecordPlan(.init(planId: planId), region: region, logger: logger, on: eventLoop)
    }
}
