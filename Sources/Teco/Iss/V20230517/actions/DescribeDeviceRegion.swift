//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeDeviceRegion请求参数结构体
    public struct DescribeDeviceRegionRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeDeviceRegion返回参数结构体
    public struct DescribeDeviceRegionResponse: TCResponseModel {
        /// 返回数据
        public let data: [DescribeDeviceRegion]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询设备可用服务节点
    ///
    /// 用于添加设备时，查询设备可以使用的服务节点，查询结果为已经绑定了域名的服务节点。
    @inlinable
    public func describeDeviceRegion(_ input: DescribeDeviceRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeviceRegionResponse> {
        self.client.execute(action: "DescribeDeviceRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询设备可用服务节点
    ///
    /// 用于添加设备时，查询设备可以使用的服务节点，查询结果为已经绑定了域名的服务节点。
    @inlinable
    public func describeDeviceRegion(_ input: DescribeDeviceRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeviceRegionResponse {
        try await self.client.execute(action: "DescribeDeviceRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询设备可用服务节点
    ///
    /// 用于添加设备时，查询设备可以使用的服务节点，查询结果为已经绑定了域名的服务节点。
    @inlinable
    public func describeDeviceRegion(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeviceRegionResponse> {
        self.describeDeviceRegion(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询设备可用服务节点
    ///
    /// 用于添加设备时，查询设备可以使用的服务节点，查询结果为已经绑定了域名的服务节点。
    @inlinable
    public func describeDeviceRegion(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeviceRegionResponse {
        try await self.describeDeviceRegion(.init(), region: region, logger: logger, on: eventLoop)
    }
}
