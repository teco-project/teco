//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeDomain请求参数结构体
    public struct DescribeDomainRequest: TCRequestModel {
        public init() {
        }
    }

    /// 查询域名详情数据
    public struct DescribeDomainResponse: TCResponseModel {
        /// 域名ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 播放域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let playDomain: String?

        /// CNAME 记录值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internalDomain: String?

        /// 是否上传证书（0：否，1：是）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let haveCert: Int64?

        /// 服务节点 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        /// 服务节点名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        /// 用户ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case playDomain = "PlayDomain"
            case internalDomain = "InternalDomain"
            case haveCert = "HaveCert"
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case appId = "AppId"
        }
    }

    /// 查询域名
    ///
    /// 用于查询添加的域名列表。
    @inlinable
    public func describeDomain(_ input: DescribeDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainResponse> {
        self.client.execute(action: "DescribeDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询域名
    ///
    /// 用于查询添加的域名列表。
    @inlinable
    public func describeDomain(_ input: DescribeDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainResponse {
        try await self.client.execute(action: "DescribeDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询域名
    ///
    /// 用于查询添加的域名列表。
    @inlinable
    public func describeDomain(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainResponse> {
        self.describeDomain(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询域名
    ///
    /// 用于查询添加的域名列表。
    @inlinable
    public func describeDomain(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainResponse {
        try await self.describeDomain(.init(), region: region, logger: logger, on: eventLoop)
    }
}
