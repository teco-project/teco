//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeRecordSlice请求参数结构体
    public struct DescribeRecordSliceRequest: TCRequest {
        /// 通道ID
        public let channelId: String

        /// 检索开始时间，UTC秒数，例如：1662114146，开始和结束时间段最长为一天，且不能跨天
        public let startTime: UInt64

        /// 检索结束时间，UTC秒数，例如：1662114246，开始和结束时间段最长为一天，且不能跨天
        public let endTime: UInt64

        public init(channelId: String, startTime: UInt64, endTime: UInt64) {
            self.channelId = channelId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeRecordSlice返回参数结构体
    public struct DescribeRecordSliceResponse: TCResponse {
        /// 云录像切片信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [RecordSliceInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询云端录像切片信息列表
    ///
    /// 平台支持将数据以TS切片的形式存入客户自有COS桶，该接口用于支持客户快捷查询切片信息列表
    /// （注意：只支持标准存储类型的查询）
    @inlinable
    public func describeRecordSlice(_ input: DescribeRecordSliceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordSliceResponse> {
        self.client.execute(action: "DescribeRecordSlice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云端录像切片信息列表
    ///
    /// 平台支持将数据以TS切片的形式存入客户自有COS桶，该接口用于支持客户快捷查询切片信息列表
    /// （注意：只支持标准存储类型的查询）
    @inlinable
    public func describeRecordSlice(_ input: DescribeRecordSliceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordSliceResponse {
        try await self.client.execute(action: "DescribeRecordSlice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云端录像切片信息列表
    ///
    /// 平台支持将数据以TS切片的形式存入客户自有COS桶，该接口用于支持客户快捷查询切片信息列表
    /// （注意：只支持标准存储类型的查询）
    @inlinable
    public func describeRecordSlice(channelId: String, startTime: UInt64, endTime: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordSliceResponse> {
        self.describeRecordSlice(.init(channelId: channelId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云端录像切片信息列表
    ///
    /// 平台支持将数据以TS切片的形式存入客户自有COS桶，该接口用于支持客户快捷查询切片信息列表
    /// （注意：只支持标准存储类型的查询）
    @inlinable
    public func describeRecordSlice(channelId: String, startTime: UInt64, endTime: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordSliceResponse {
        try await self.describeRecordSlice(.init(channelId: channelId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
