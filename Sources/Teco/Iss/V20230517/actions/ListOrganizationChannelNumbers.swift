//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ListOrganizationChannelNumbers请求参数结构体
    public struct ListOrganizationChannelNumbersRequest: TCRequest {
        /// 组织ID，json数组格式，最多一次支持10个组织
        public let organizationId: [String]

        public init(organizationId: [String]) {
            self.organizationId = organizationId
        }

        enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
        }
    }

    /// 组织目录下的未添加到实时上云计划中的通道数量返回数据
    public struct ListOrganizationChannelNumbersResponse: TCResponse {
        private let data: Wrapped

        private struct Wrapped: Codable {
            public let totalCount: Int64

            public let notInPlanCount: Int64?

            enum CodingKeys: String, CodingKey {
                case totalCount = "TotalCount"
                case notInPlanCount = "NotInPlanCount"
            }
        }

        /// 组织下通道总数
        public var totalCount: Int64 {
            self.data.totalCount
        }

        /// 组织下未添加到计划的通道总数
        public var notInPlanCount: Int64? {
            self.data.notInPlanCount
        }

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询组织目录下的未添加到实时上云计划中的通道数量
    ///
    /// 用于查询组织目录下的未添加到实时上云计划中的通道数量
    @inlinable
    public func listOrganizationChannelNumbers(_ input: ListOrganizationChannelNumbersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListOrganizationChannelNumbersResponse> {
        self.client.execute(action: "ListOrganizationChannelNumbers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询组织目录下的未添加到实时上云计划中的通道数量
    ///
    /// 用于查询组织目录下的未添加到实时上云计划中的通道数量
    @inlinable
    public func listOrganizationChannelNumbers(_ input: ListOrganizationChannelNumbersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationChannelNumbersResponse {
        try await self.client.execute(action: "ListOrganizationChannelNumbers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询组织目录下的未添加到实时上云计划中的通道数量
    ///
    /// 用于查询组织目录下的未添加到实时上云计划中的通道数量
    @inlinable
    public func listOrganizationChannelNumbers(organizationId: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListOrganizationChannelNumbersResponse> {
        self.listOrganizationChannelNumbers(.init(organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询组织目录下的未添加到实时上云计划中的通道数量
    ///
    /// 用于查询组织目录下的未添加到实时上云计划中的通道数量
    @inlinable
    public func listOrganizationChannelNumbers(organizationId: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationChannelNumbersResponse {
        try await self.listOrganizationChannelNumbers(.init(organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }
}
