//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeVideoDownloadUrl请求参数结构体
    public struct DescribeVideoDownloadUrlRequest: TCRequest {
        /// 通道 ID
        public let channelId: String

        /// 下载的开始时间，UTC 秒数，开始和结束时间段最长为30分钟，且不能跨天
        public let beginTime: String

        /// 下载的结束时间，UTC 秒数，开始和结束时间段最长为30分钟，且不能跨天
        public let endTime: String

        /// 文件格式，"mp4"：mp4格式，"ts"：ts文件格式
        public let fileType: String

        /// 响应data中是否携带实际下载录像的开始时间与结束时间
        public let isRespActualTime: Bool?

        public init(channelId: String, beginTime: String, endTime: String, fileType: String, isRespActualTime: Bool? = nil) {
            self.channelId = channelId
            self.beginTime = beginTime
            self.endTime = endTime
            self.fileType = fileType
            self.isRespActualTime = isRespActualTime
        }

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case fileType = "FileType"
            case isRespActualTime = "IsRespActualTime"
        }
    }

    /// DescribeVideoDownloadUrl返回参数结构体
    public struct DescribeVideoDownloadUrlResponse: TCResponse {
        /// 返回的数据结构
        public let data: DescribeVideoDownloadUrlData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取云端录像下载URL地址
    ///
    /// 用于获取云录像下载 url
    @inlinable
    public func describeVideoDownloadUrl(_ input: DescribeVideoDownloadUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVideoDownloadUrlResponse> {
        self.client.execute(action: "DescribeVideoDownloadUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取云端录像下载URL地址
    ///
    /// 用于获取云录像下载 url
    @inlinable
    public func describeVideoDownloadUrl(_ input: DescribeVideoDownloadUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVideoDownloadUrlResponse {
        try await self.client.execute(action: "DescribeVideoDownloadUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取云端录像下载URL地址
    ///
    /// 用于获取云录像下载 url
    @inlinable
    public func describeVideoDownloadUrl(channelId: String, beginTime: String, endTime: String, fileType: String, isRespActualTime: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVideoDownloadUrlResponse> {
        self.describeVideoDownloadUrl(.init(channelId: channelId, beginTime: beginTime, endTime: endTime, fileType: fileType, isRespActualTime: isRespActualTime), region: region, logger: logger, on: eventLoop)
    }

    /// 获取云端录像下载URL地址
    ///
    /// 用于获取云录像下载 url
    @inlinable
    public func describeVideoDownloadUrl(channelId: String, beginTime: String, endTime: String, fileType: String, isRespActualTime: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVideoDownloadUrlResponse {
        try await self.describeVideoDownloadUrl(.init(channelId: channelId, beginTime: beginTime, endTime: endTime, fileType: fileType, isRespActualTime: isRespActualTime), region: region, logger: logger, on: eventLoop)
    }
}
