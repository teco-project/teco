//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ControlDevicePTZ请求参数结构体
    public struct ControlDevicePTZRequest: TCRequest {
        /// 通道 ID（从通道查询接口DescribeDeviceChannel中获取）
        public let channelId: String

        /// 命令类型（上:up,下:down,左:left,右:right
        /// 上左:leftup,上右:rightup,下左:leftdown,下右:rightdown
        /// 放大:zoomin,缩小:zoomout
        /// 聚焦远:focusfar,聚焦近:focusnear
        /// 光圈放大:irisin,光圈缩小:irisout）
        public let type: String

        /// 命令描述（速度值范围1-8）
        public let speed: Int64

        public init(channelId: String, type: String, speed: Int64) {
            self.channelId = channelId
            self.type = type
            self.speed = speed
        }

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case type = "Type"
            case speed = "Speed"
        }
    }

    /// ControlDevicePTZ返回参数结构体
    public struct ControlDevicePTZResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// ptz 控制
    ///
    /// 用于设备通道云台控制，包括转动、变倍、变焦、光圈等。
    @inlinable @discardableResult
    public func controlDevicePTZ(_ input: ControlDevicePTZRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDevicePTZResponse> {
        self.client.execute(action: "ControlDevicePTZ", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// ptz 控制
    ///
    /// 用于设备通道云台控制，包括转动、变倍、变焦、光圈等。
    @inlinable @discardableResult
    public func controlDevicePTZ(_ input: ControlDevicePTZRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDevicePTZResponse {
        try await self.client.execute(action: "ControlDevicePTZ", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// ptz 控制
    ///
    /// 用于设备通道云台控制，包括转动、变倍、变焦、光圈等。
    @inlinable @discardableResult
    public func controlDevicePTZ(channelId: String, type: String, speed: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDevicePTZResponse> {
        self.controlDevicePTZ(.init(channelId: channelId, type: type, speed: speed), region: region, logger: logger, on: eventLoop)
    }

    /// ptz 控制
    ///
    /// 用于设备通道云台控制，包括转动、变倍、变焦、光圈等。
    @inlinable @discardableResult
    public func controlDevicePTZ(channelId: String, type: String, speed: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDevicePTZResponse {
        try await self.controlDevicePTZ(.init(channelId: channelId, type: type, speed: speed), region: region, logger: logger, on: eventLoop)
    }
}
