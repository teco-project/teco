//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ListAITasks请求参数结构体
    public struct ListAITasksRequest: TCRequestModel {
        /// 是否包含通道列表。"true"代表包含通道列表，"false"代表不包含通道列表，默认为 false
        public let isContainChannelList: Bool?

        /// 是否包含AI配置。"true"代表包含任务配置，"false"代表不包含任务配置，默认为 false。
        public let isContainTemplate: Bool?

        /// 页码。默认为1
        public let pageNumber: UInt64?

        /// 每页数量。可选值1～200，默认为20
        public let pageSize: UInt64?

        public init(isContainChannelList: Bool? = nil, isContainTemplate: Bool? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil) {
            self.isContainChannelList = isContainChannelList
            self.isContainTemplate = isContainTemplate
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case isContainChannelList = "IsContainChannelList"
            case isContainTemplate = "IsContainTemplate"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }
    }

    /// ListAITasks返回参数结构体
    public struct ListAITasksResponse: TCResponseModel {
        /// AI 任务数量
        public let totalCount: UInt64

        /// AI任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: ListAITaskData?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取AI任务列表
    @inlinable
    public func listAITasks(_ input: ListAITasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListAITasksResponse> {
        self.client.execute(action: "ListAITasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取AI任务列表
    @inlinable
    public func listAITasks(_ input: ListAITasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAITasksResponse {
        try await self.client.execute(action: "ListAITasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取AI任务列表
    @inlinable
    public func listAITasks(isContainChannelList: Bool? = nil, isContainTemplate: Bool? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListAITasksResponse> {
        self.listAITasks(.init(isContainChannelList: isContainChannelList, isContainTemplate: isContainTemplate, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 获取AI任务列表
    @inlinable
    public func listAITasks(isContainChannelList: Bool? = nil, isContainTemplate: Bool? = nil, pageNumber: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAITasksResponse {
        try await self.listAITasks(.init(isContainChannelList: isContainChannelList, isContainTemplate: isContainTemplate, pageNumber: pageNumber, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }
}
