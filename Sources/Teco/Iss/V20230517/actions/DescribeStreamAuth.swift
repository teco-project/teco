//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeStreamAuth请求参数结构体
    public struct DescribeStreamAuthRequest: TCRequestModel {
        public init() {
        }
    }

    /// 查询推拉流鉴权返回数据结构
    public struct DescribeStreamAuthResponse: TCResponseModel {
        /// 鉴权配置ID（uuid）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 是否开播放鉴权（1:开启,0:关闭）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pullState: Int64?

        /// 播放密钥（仅支持字母数字，长度0-10位）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pullSecret: String?

        /// 播放过期时间（单位：分钟）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pullExpired: Int64?

        /// 是否开启推流鉴权（1:开启,0:关闭）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pushState: Int64?

        /// 推流密钥（仅支持字母数字，长度0-10位）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pushSecret: String?

        /// 推流过期时间（单位：分钟）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pushExpired: Int64?

        /// 用户ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case pullState = "PullState"
            case pullSecret = "PullSecret"
            case pullExpired = "PullExpired"
            case pushState = "PushState"
            case pushSecret = "PushSecret"
            case pushExpired = "PushExpired"
            case appId = "AppId"
        }
    }

    /// 查询推拉流鉴权配置
    ///
    /// 用于查询推拉流鉴权配置。
    @inlinable
    public func describeStreamAuth(_ input: DescribeStreamAuthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStreamAuthResponse> {
        self.client.execute(action: "DescribeStreamAuth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询推拉流鉴权配置
    ///
    /// 用于查询推拉流鉴权配置。
    @inlinable
    public func describeStreamAuth(_ input: DescribeStreamAuthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStreamAuthResponse {
        try await self.client.execute(action: "DescribeStreamAuth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询推拉流鉴权配置
    ///
    /// 用于查询推拉流鉴权配置。
    @inlinable
    public func describeStreamAuth(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStreamAuthResponse> {
        self.describeStreamAuth(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询推拉流鉴权配置
    ///
    /// 用于查询推拉流鉴权配置。
    @inlinable
    public func describeStreamAuth(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStreamAuthResponse {
        try await self.describeStreamAuth(.init(), region: region, logger: logger, on: eventLoop)
    }
}
