//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// UpdateDeviceOrganization请求参数结构体
    public struct UpdateDeviceOrganizationRequest: TCRequest {
        /// 设备 ID 数组（从获取设备列表接口ListDevices中获取）
        public let deviceIds: [String]

        /// 组织 ID（从查询组织接口DescribeOrganization中获取）
        public let organizationId: String

        public init(deviceIds: [String], organizationId: String) {
            self.deviceIds = deviceIds
            self.organizationId = organizationId
        }

        enum CodingKeys: String, CodingKey {
            case deviceIds = "DeviceIds"
            case organizationId = "OrganizationId"
        }
    }

    /// UpdateDeviceOrganization返回参数结构体
    public struct UpdateDeviceOrganizationResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 批量修改设备组织
    ///
    /// 用于批量更改设备的组织。
    @inlinable @discardableResult
    public func updateDeviceOrganization(_ input: UpdateDeviceOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateDeviceOrganizationResponse> {
        self.client.execute(action: "UpdateDeviceOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量修改设备组织
    ///
    /// 用于批量更改设备的组织。
    @inlinable @discardableResult
    public func updateDeviceOrganization(_ input: UpdateDeviceOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDeviceOrganizationResponse {
        try await self.client.execute(action: "UpdateDeviceOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量修改设备组织
    ///
    /// 用于批量更改设备的组织。
    @inlinable @discardableResult
    public func updateDeviceOrganization(deviceIds: [String], organizationId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateDeviceOrganizationResponse> {
        self.updateDeviceOrganization(.init(deviceIds: deviceIds, organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }

    /// 批量修改设备组织
    ///
    /// 用于批量更改设备的组织。
    @inlinable @discardableResult
    public func updateDeviceOrganization(deviceIds: [String], organizationId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDeviceOrganizationResponse {
        try await self.updateDeviceOrganization(.init(deviceIds: deviceIds, organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }
}
