//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// UpdateRecordBackupPlan请求参数结构体
    public struct UpdateRecordBackupPlanRequest: TCRequestModel {
        /// 计划ID
        public let planId: String

        /// 修改的内容
        public let mod: UpdateRecordBackupPlanModify

        public init(planId: String, mod: UpdateRecordBackupPlanModify) {
            self.planId = planId
            self.mod = mod
        }

        enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
            case mod = "Mod"
        }
    }

    /// 修改录像上云计划返回数据
    public struct UpdateRecordBackupPlanResponse: TCResponseModel {
        /// 录像上云计划ID
        public let planId: String

        /// 录像上云计划名称
        public let planName: String

        /// 录像上云模板ID
        public let templateId: String

        /// 录像上云计划描述
        public let describe: String

        /// 云文件生命周期
        public let lifeCycle: LifeCycleData

        /// 录像上云计划状态，1:正常使用中，0:删除中，无法使用
        public let status: Int64

        /// 通道数量
        public let channelCount: Int64

        /// 创建时间
        public let createAt: String

        /// 修改时间
        public let updateAt: String

        enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
            case planName = "PlanName"
            case templateId = "TemplateId"
            case describe = "Describe"
            case lifeCycle = "LifeCycle"
            case status = "Status"
            case channelCount = "ChannelCount"
            case createAt = "CreateAt"
            case updateAt = "UpdateAt"
        }
    }

    /// 修改录像上云计划
    ///
    /// 用于修改录像上云计划。
    @inlinable
    public func updateRecordBackupPlan(_ input: UpdateRecordBackupPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateRecordBackupPlanResponse> {
        self.client.execute(action: "UpdateRecordBackupPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改录像上云计划
    ///
    /// 用于修改录像上云计划。
    @inlinable
    public func updateRecordBackupPlan(_ input: UpdateRecordBackupPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateRecordBackupPlanResponse {
        try await self.client.execute(action: "UpdateRecordBackupPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改录像上云计划
    ///
    /// 用于修改录像上云计划。
    @inlinable
    public func updateRecordBackupPlan(planId: String, mod: UpdateRecordBackupPlanModify, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateRecordBackupPlanResponse> {
        self.updateRecordBackupPlan(.init(planId: planId, mod: mod), region: region, logger: logger, on: eventLoop)
    }

    /// 修改录像上云计划
    ///
    /// 用于修改录像上云计划。
    @inlinable
    public func updateRecordBackupPlan(planId: String, mod: UpdateRecordBackupPlanModify, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateRecordBackupPlanResponse {
        try await self.updateRecordBackupPlan(.init(planId: planId, mod: mod), region: region, logger: logger, on: eventLoop)
    }
}
