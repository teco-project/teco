//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// AddRecordRetrieveTask请求参数结构体
    public struct AddRecordRetrieveTaskRequest: TCRequest {
        /// 任务名称，仅支持中文、英文、数字、_、-，长度不超过32个字符，模板名称全局唯一，不能为空，不能重复
        public let taskName: String

        /// 取回录像的开始时间，UTC秒数，例如：1662114146，开始和结束时间段最长为一天，且不能跨天
        public let startTime: UInt64

        /// 取回录像的结束时间，UTC秒数，例如：1662114146，开始和结束时间段最长为一天，且不能跨天
        public let endTime: UInt64

        /// 取回模式， 1:极速模式，其他暂不支持
        public let mode: Int64

        /// 取回录像副本有效期，最小为1天，最大为365天
        public let expiration: Int64

        /// 设备通道，一个任务最多32个设备通道
        public let channels: [ChannelInfo]

        /// 取回任务描述
        public let describe: String?

        public init(taskName: String, startTime: UInt64, endTime: UInt64, mode: Int64, expiration: Int64, channels: [ChannelInfo], describe: String? = nil) {
            self.taskName = taskName
            self.startTime = startTime
            self.endTime = endTime
            self.mode = mode
            self.expiration = expiration
            self.channels = channels
            self.describe = describe
        }

        enum CodingKeys: String, CodingKey {
            case taskName = "TaskName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case mode = "Mode"
            case expiration = "Expiration"
            case channels = "Channels"
            case describe = "Describe"
        }
    }

    /// AddRecordRetrieveTask返回参数结构体
    public struct AddRecordRetrieveTaskResponse: TCResponse {
        /// 返回结果
        public let data: AddRecordRetrieveTaskData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 新建取回任务
    ///
    /// 用于新建取回任务
    @inlinable
    public func addRecordRetrieveTask(_ input: AddRecordRetrieveTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordRetrieveTaskResponse> {
        self.client.execute(action: "AddRecordRetrieveTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新建取回任务
    ///
    /// 用于新建取回任务
    @inlinable
    public func addRecordRetrieveTask(_ input: AddRecordRetrieveTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordRetrieveTaskResponse {
        try await self.client.execute(action: "AddRecordRetrieveTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新建取回任务
    ///
    /// 用于新建取回任务
    @inlinable
    public func addRecordRetrieveTask(taskName: String, startTime: UInt64, endTime: UInt64, mode: Int64, expiration: Int64, channels: [ChannelInfo], describe: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordRetrieveTaskResponse> {
        self.addRecordRetrieveTask(.init(taskName: taskName, startTime: startTime, endTime: endTime, mode: mode, expiration: expiration, channels: channels, describe: describe), region: region, logger: logger, on: eventLoop)
    }

    /// 新建取回任务
    ///
    /// 用于新建取回任务
    @inlinable
    public func addRecordRetrieveTask(taskName: String, startTime: UInt64, endTime: UInt64, mode: Int64, expiration: Int64, channels: [ChannelInfo], describe: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordRetrieveTaskResponse {
        try await self.addRecordRetrieveTask(.init(taskName: taskName, startTime: startTime, endTime: endTime, mode: mode, expiration: expiration, channels: channels, describe: describe), region: region, logger: logger, on: eventLoop)
    }
}
