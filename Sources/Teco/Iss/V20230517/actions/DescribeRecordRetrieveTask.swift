//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeRecordRetrieveTask请求参数结构体
    public struct DescribeRecordRetrieveTaskRequest: TCRequestModel {
        /// 云录像取回任务ID
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
        }
    }

    /// 查询云录像取回任务详情返回数据
    public struct DescribeRecordRetrieveTaskResponse: TCResponseModel {
        /// 取回任务ID
        public let taskId: String

        /// 取回任务名称
        public let taskName: String

        /// 取回录像的开始时间
        public let startTime: UInt64

        /// 取回录像的结束时间
        public let endTime: UInt64

        /// 取回模式，1:极速模式，其他暂不支持
        public let mode: Int64

        /// 副本有效期
        public let expiration: Int64

        /// 任务状态，0:已取回，1:取回中，2:待取回
        public let status: Int64

        /// 取回容量，单位MB
        public let capacity: Float

        /// 任务的设备通道id
        public let channels: [RecordRetrieveTaskChannelInfo]

        /// 任务描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let describe: String?

        /// 任务通道数量
        public let channelCount: Int64

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskName = "TaskName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case mode = "Mode"
            case expiration = "Expiration"
            case status = "Status"
            case capacity = "Capacity"
            case channels = "Channels"
            case describe = "Describe"
            case channelCount = "ChannelCount"
        }
    }

    /// 查询取回任务详情
    ///
    /// 用于查询云录像取回任务详情
    @inlinable
    public func describeRecordRetrieveTask(_ input: DescribeRecordRetrieveTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordRetrieveTaskResponse> {
        self.client.execute(action: "DescribeRecordRetrieveTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询取回任务详情
    ///
    /// 用于查询云录像取回任务详情
    @inlinable
    public func describeRecordRetrieveTask(_ input: DescribeRecordRetrieveTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordRetrieveTaskResponse {
        try await self.client.execute(action: "DescribeRecordRetrieveTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询取回任务详情
    ///
    /// 用于查询云录像取回任务详情
    @inlinable
    public func describeRecordRetrieveTask(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordRetrieveTaskResponse> {
        self.describeRecordRetrieveTask(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询取回任务详情
    ///
    /// 用于查询云录像取回任务详情
    @inlinable
    public func describeRecordRetrieveTask(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordRetrieveTaskResponse {
        try await self.describeRecordRetrieveTask(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
