//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// BatchOperateDevice请求参数结构体
    public struct BatchOperateDeviceRequest: TCRequest {
        /// 设备 ID 数组（从获取设备列表接口ListDevices中获取）
        public let deviceIds: [String]

        /// 操作命令（enable：启用；disable：禁用；delete：删除）
        public let cmd: String

        public init(deviceIds: [String], cmd: String) {
            self.deviceIds = deviceIds
            self.cmd = cmd
        }

        enum CodingKeys: String, CodingKey {
            case deviceIds = "DeviceIds"
            case cmd = "Cmd"
        }
    }

    /// BatchOperateDevice返回参数结构体
    public struct BatchOperateDeviceResponse: TCResponse {
        /// 返回结果
        public let data: BatchOperateDeviceData?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 批量操作设备
    ///
    /// 用于批量操作（启用，禁用，删除）设备
    @inlinable
    public func batchOperateDevice(_ input: BatchOperateDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchOperateDeviceResponse> {
        self.client.execute(action: "BatchOperateDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量操作设备
    ///
    /// 用于批量操作（启用，禁用，删除）设备
    @inlinable
    public func batchOperateDevice(_ input: BatchOperateDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchOperateDeviceResponse {
        try await self.client.execute(action: "BatchOperateDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量操作设备
    ///
    /// 用于批量操作（启用，禁用，删除）设备
    @inlinable
    public func batchOperateDevice(deviceIds: [String], cmd: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchOperateDeviceResponse> {
        self.batchOperateDevice(.init(deviceIds: deviceIds, cmd: cmd), region: region, logger: logger, on: eventLoop)
    }

    /// 批量操作设备
    ///
    /// 用于批量操作（启用，禁用，删除）设备
    @inlinable
    public func batchOperateDevice(deviceIds: [String], cmd: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchOperateDeviceResponse {
        try await self.batchOperateDevice(.init(deviceIds: deviceIds, cmd: cmd), region: region, logger: logger, on: eventLoop)
    }
}
