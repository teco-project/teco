//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ControlRecordTimeline请求参数结构体
    public struct ControlRecordTimelineRequest: TCRequestModel {
        /// 通道 ID（从通道查询接口DescribeDeviceChannel中获取）
        public let channelId: String

        /// 起始时间
        public let start: Int64

        /// 结束时间
        public let end: Int64

        public init(channelId: String, start: Int64, end: Int64) {
            self.channelId = channelId
            self.start = start
            self.end = end
        }

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case start = "Start"
            case end = "End"
        }
    }

    /// ControlRecordTimeline返回参数结构体
    public struct ControlRecordTimelineResponse: TCResponseModel {
        /// 返回数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [Timeline]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询本地录像时间轴
    ///
    /// 用于查询设备本地录像时间轴信息，为NVR/IPC本地存储的录像。
    @inlinable
    public func controlRecordTimeline(_ input: ControlRecordTimelineRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlRecordTimelineResponse> {
        self.client.execute(action: "ControlRecordTimeline", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询本地录像时间轴
    ///
    /// 用于查询设备本地录像时间轴信息，为NVR/IPC本地存储的录像。
    @inlinable
    public func controlRecordTimeline(_ input: ControlRecordTimelineRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlRecordTimelineResponse {
        try await self.client.execute(action: "ControlRecordTimeline", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询本地录像时间轴
    ///
    /// 用于查询设备本地录像时间轴信息，为NVR/IPC本地存储的录像。
    @inlinable
    public func controlRecordTimeline(channelId: String, start: Int64, end: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlRecordTimelineResponse> {
        self.controlRecordTimeline(.init(channelId: channelId, start: start, end: end), region: region, logger: logger, on: eventLoop)
    }

    /// 查询本地录像时间轴
    ///
    /// 用于查询设备本地录像时间轴信息，为NVR/IPC本地存储的录像。
    @inlinable
    public func controlRecordTimeline(channelId: String, start: Int64, end: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlRecordTimelineResponse {
        try await self.controlRecordTimeline(.init(channelId: channelId, start: start, end: end), region: region, logger: logger, on: eventLoop)
    }
}
