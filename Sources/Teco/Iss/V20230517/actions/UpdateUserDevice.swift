//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// UpdateUserDevice请求参数结构体
    public struct UpdateUserDeviceRequest: TCRequestModel {
        /// 设备ID（从获取设备列表接口ListDevices中获取）
        public let deviceId: String

        /// 设备名称（仅支持中文、英文、数字、_、-，长度不超过32个字符）
        public let name: String?

        /// 设备流传输协议，仅国标设备有效，填0则不做更改（1:UDP,2:TCP）
        public let transportProtocol: Int64?

        /// 设备密码（仅国标，网关设备支持）
        public let password: String?

        /// 设备描述（仅支持中文、英文、数字、_、-，长度不超过128位）
        public let description: String?

        /// 设备接入Ip（仅网关接入支持）
        public let ip: String?

        /// 设备Port（仅网关接入支持）
        public let port: Int64?

        /// 设备用户名（仅网关接入支持）
        public let username: String?

        public init(deviceId: String, name: String? = nil, transportProtocol: Int64? = nil, password: String? = nil, description: String? = nil, ip: String? = nil, port: Int64? = nil, username: String? = nil) {
            self.deviceId = deviceId
            self.name = name
            self.transportProtocol = transportProtocol
            self.password = password
            self.description = description
            self.ip = ip
            self.port = port
            self.username = username
        }

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case name = "Name"
            case transportProtocol = "TransportProtocol"
            case password = "Password"
            case description = "Description"
            case ip = "Ip"
            case port = "Port"
            case username = "Username"
        }
    }

    /// UpdateUserDevice返回参数结构体
    public struct UpdateUserDeviceResponse: TCResponseModel {
        /// 返回数据
        public let data: UpdateDeviceResponse

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 修改设备
    ///
    /// 用于修改设备的配置信息。
    @inlinable
    public func updateUserDevice(_ input: UpdateUserDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateUserDeviceResponse> {
        self.client.execute(action: "UpdateUserDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改设备
    ///
    /// 用于修改设备的配置信息。
    @inlinable
    public func updateUserDevice(_ input: UpdateUserDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateUserDeviceResponse {
        try await self.client.execute(action: "UpdateUserDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改设备
    ///
    /// 用于修改设备的配置信息。
    @inlinable
    public func updateUserDevice(deviceId: String, name: String? = nil, transportProtocol: Int64? = nil, password: String? = nil, description: String? = nil, ip: String? = nil, port: Int64? = nil, username: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateUserDeviceResponse> {
        self.updateUserDevice(.init(deviceId: deviceId, name: name, transportProtocol: transportProtocol, password: password, description: description, ip: ip, port: port, username: username), region: region, logger: logger, on: eventLoop)
    }

    /// 修改设备
    ///
    /// 用于修改设备的配置信息。
    @inlinable
    public func updateUserDevice(deviceId: String, name: String? = nil, transportProtocol: Int64? = nil, password: String? = nil, description: String? = nil, ip: String? = nil, port: Int64? = nil, username: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateUserDeviceResponse {
        try await self.updateUserDevice(.init(deviceId: deviceId, name: name, transportProtocol: transportProtocol, password: password, description: description, ip: ip, port: port, username: username), region: region, logger: logger, on: eventLoop)
    }
}
