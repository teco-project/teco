//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeUserDevice请求参数结构体
    public struct DescribeUserDeviceRequest: TCRequestModel {
        /// 设备ID（从获取设备列表接口ListDevices中获取）
        public let deviceId: String

        public init(deviceId: String) {
            self.deviceId = deviceId
        }

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
        }
    }

    /// DescribeUserDevice返回参数结构体
    public struct DescribeUserDeviceResponse: TCResponseModel {
        /// 返回结果
        public let data: DescribeDeviceResponse

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询设备详情
    ///
    /// 用于查询设备的详细信息。
    @inlinable
    public func describeUserDevice(_ input: DescribeUserDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUserDeviceResponse> {
        self.client.execute(action: "DescribeUserDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询设备详情
    ///
    /// 用于查询设备的详细信息。
    @inlinable
    public func describeUserDevice(_ input: DescribeUserDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUserDeviceResponse {
        try await self.client.execute(action: "DescribeUserDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询设备详情
    ///
    /// 用于查询设备的详细信息。
    @inlinable
    public func describeUserDevice(deviceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUserDeviceResponse> {
        self.describeUserDevice(.init(deviceId: deviceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询设备详情
    ///
    /// 用于查询设备的详细信息。
    @inlinable
    public func describeUserDevice(deviceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUserDeviceResponse {
        try await self.describeUserDevice(.init(deviceId: deviceId), region: region, logger: logger, on: eventLoop)
    }
}
