//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeGatewayVersion请求参数结构体
    public struct DescribeGatewayVersionRequest: TCRequest {
        /// 网关索引ID（从获取网关列表接口ListGateways中获取）
        public let gatewayId: String

        public init(gatewayId: String) {
            self.gatewayId = gatewayId
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
        }
    }

    /// 查询网关服务版本信息返回数据
    public struct DescribeGatewayVersionResponse: TCResponse {
        private let data: Wrapped

        private struct Wrapped: Codable {
            public let services: [DescribeGatewayVersion]?

            enum CodingKeys: String, CodingKey {
                case services = "Services"
            }
        }

        /// 网关服务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public var services: [DescribeGatewayVersion]? {
            self.data.services
        }

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询网关服务版本
    @inlinable @discardableResult
    public func describeGatewayVersion(_ input: DescribeGatewayVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayVersionResponse> {
        self.client.execute(action: "DescribeGatewayVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询网关服务版本
    @inlinable @discardableResult
    public func describeGatewayVersion(_ input: DescribeGatewayVersionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayVersionResponse {
        try await self.client.execute(action: "DescribeGatewayVersion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询网关服务版本
    @inlinable @discardableResult
    public func describeGatewayVersion(gatewayId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayVersionResponse> {
        self.describeGatewayVersion(.init(gatewayId: gatewayId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询网关服务版本
    @inlinable @discardableResult
    public func describeGatewayVersion(gatewayId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayVersionResponse {
        try await self.describeGatewayVersion(.init(gatewayId: gatewayId), region: region, logger: logger, on: eventLoop)
    }
}
