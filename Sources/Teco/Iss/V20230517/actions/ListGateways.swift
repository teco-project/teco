//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Iss {
    /// ListGateways请求参数结构体
    public struct ListGatewaysRequest: TCPaginatedRequest {
        /// 页码，默认为1
        public let pageNumber: Int64?

        /// 每页数量，默认为20
        public let pageSize: Int64?

        /// 网关名称
        public let name: String?

        /// 服务节点ID
        public let clusterId: String?

        /// 网关状态（0：离线，1 ：在线）
        public let status: Int64?

        public init(pageNumber: Int64? = nil, pageSize: Int64? = nil, name: String? = nil, clusterId: String? = nil, status: Int64? = nil) {
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.name = name
            self.clusterId = clusterId
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case name = "Name"
            case clusterId = "ClusterId"
            case status = "Status"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListGatewaysResponse) -> ListGatewaysRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(pageNumber: (self.pageNumber ?? 0) + 1, pageSize: self.pageSize, name: self.name, clusterId: self.clusterId, status: self.status)
        }
    }

    /// ListGateways返回参数结构体
    public struct ListGatewaysResponse: TCPaginatedResponse {
        /// 返回数据
        public let data: ListGatewaysData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``GatewaysData`` list from the paginated response.
        public func getItems() -> [GatewaysData] {
            self.data.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data.totalCount
        }
    }

    /// 获取网关列表
    ///
    /// 用于获取网关列表。
    @inlinable
    public func listGateways(_ input: ListGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListGatewaysResponse> {
        self.client.execute(action: "ListGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取网关列表
    ///
    /// 用于获取网关列表。
    @inlinable
    public func listGateways(_ input: ListGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListGatewaysResponse {
        try await self.client.execute(action: "ListGateways", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取网关列表
    ///
    /// 用于获取网关列表。
    @inlinable
    public func listGateways(pageNumber: Int64? = nil, pageSize: Int64? = nil, name: String? = nil, clusterId: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListGatewaysResponse> {
        self.listGateways(.init(pageNumber: pageNumber, pageSize: pageSize, name: name, clusterId: clusterId, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 获取网关列表
    ///
    /// 用于获取网关列表。
    @inlinable
    public func listGateways(pageNumber: Int64? = nil, pageSize: Int64? = nil, name: String? = nil, clusterId: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListGatewaysResponse {
        try await self.listGateways(.init(pageNumber: pageNumber, pageSize: pageSize, name: name, clusterId: clusterId, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 获取网关列表
    ///
    /// 用于获取网关列表。
    @inlinable
    public func listGatewaysPaginated(_ input: ListGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [GatewaysData])> {
        self.client.paginate(input: input, region: region, command: self.listGateways, logger: logger, on: eventLoop)
    }

    /// 获取网关列表
    ///
    /// 用于获取网关列表。
    @inlinable @discardableResult
    public func listGatewaysPaginated(_ input: ListGatewaysRequest, region: TCRegion? = nil, onResponse: @escaping (ListGatewaysResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listGateways, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取网关列表
    ///
    /// 用于获取网关列表。
    ///
    /// - Returns: `AsyncSequence`s of ``GatewaysData`` and ``ListGatewaysResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func listGatewaysPaginator(_ input: ListGatewaysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListGatewaysRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listGateways, logger: logger, on: eventLoop)
    }
}
