//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ListRecordPlans请求参数结构体
    public struct ListRecordPlansRequest: TCRequest {
        public init() {
        }
    }

    /// ListRecordPlans返回参数结构体
    public struct ListRecordPlansResponse: TCResponse {
        /// 返回结果，存在计划时，为Json数组格式，不存在计划时，字段数据为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [RecordPlanBaseInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询实时上云计划列表
    ///
    /// 用于查询实时上云计划列表
    @inlinable
    public func listRecordPlans(_ input: ListRecordPlansRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListRecordPlansResponse> {
        self.client.execute(action: "ListRecordPlans", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实时上云计划列表
    ///
    /// 用于查询实时上云计划列表
    @inlinable
    public func listRecordPlans(_ input: ListRecordPlansRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListRecordPlansResponse {
        try await self.client.execute(action: "ListRecordPlans", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实时上云计划列表
    ///
    /// 用于查询实时上云计划列表
    @inlinable
    public func listRecordPlans(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListRecordPlansResponse> {
        self.listRecordPlans(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实时上云计划列表
    ///
    /// 用于查询实时上云计划列表
    @inlinable
    public func listRecordPlans(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListRecordPlansResponse {
        try await self.listRecordPlans(.init(), region: region, logger: logger, on: eventLoop)
    }
}
