//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeRecordFile请求参数结构体
    public struct DescribeRecordFileRequest: TCRequest {
        /// 通道所属设备ID
        public let deviceId: String

        /// 通道ID
        public let channelId: String

        /// 检索开始时间，UTC秒数，例如：1662114146，开始和结束时间段最长为一天，且不能跨天
        public let startTime: UInt64

        /// 检索结束时间，UTC秒数，例如：1662114246，开始和结束时间段最长为一天，且不能跨天
        public let endTime: UInt64

        public init(deviceId: String, channelId: String, startTime: UInt64, endTime: UInt64) {
            self.deviceId = deviceId
            self.channelId = channelId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case channelId = "ChannelId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeRecordFile返回参数结构体
    public struct DescribeRecordFileResponse: TCResponse {
        /// 返回结果
        public let data: DescribeRecordFileData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询云端录像时间轴
    ///
    /// 用于查询设备云端录像时间轴信息（即为视频上云后设置录像计划后云存储的录像）
    @inlinable
    public func describeRecordFile(_ input: DescribeRecordFileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordFileResponse> {
        self.client.execute(action: "DescribeRecordFile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云端录像时间轴
    ///
    /// 用于查询设备云端录像时间轴信息（即为视频上云后设置录像计划后云存储的录像）
    @inlinable
    public func describeRecordFile(_ input: DescribeRecordFileRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordFileResponse {
        try await self.client.execute(action: "DescribeRecordFile", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云端录像时间轴
    ///
    /// 用于查询设备云端录像时间轴信息（即为视频上云后设置录像计划后云存储的录像）
    @inlinable
    public func describeRecordFile(deviceId: String, channelId: String, startTime: UInt64, endTime: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordFileResponse> {
        self.describeRecordFile(.init(deviceId: deviceId, channelId: channelId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云端录像时间轴
    ///
    /// 用于查询设备云端录像时间轴信息（即为视频上云后设置录像计划后云存储的录像）
    @inlinable
    public func describeRecordFile(deviceId: String, channelId: String, startTime: UInt64, endTime: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordFileResponse {
        try await self.describeRecordFile(.init(deviceId: deviceId, channelId: channelId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
