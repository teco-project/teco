//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ControlDeviceStream请求参数结构体
    public struct ControlDeviceStreamRequest: TCRequest {
        /// 通道 ID（从通道查询接口DescribeDeviceChannel中获取）
        public let channelId: String

        /// 流类型（1:主码流；
        /// 2:子码流（不可以和 Resolution 同时下发））
        public let streamType: String?

        /// 分辨率（1:QCIF；
        /// 2:CIF；
        /// 3:4CIF；
        /// 4:D1；
        /// 5:720P；
        /// 6:1080P/I；
        /// 自定义的19201080等等（需设备支持）（不可以和 StreamType 同时下发））
        public let resolution: String?

        public init(channelId: String, streamType: String? = nil, resolution: String? = nil) {
            self.channelId = channelId
            self.streamType = streamType
            self.resolution = resolution
        }

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case streamType = "StreamType"
            case resolution = "Resolution"
        }
    }

    /// 获取开流地址返回数据
    public struct ControlDeviceStreamResponse: TCResponse {
        private let data: Wrapped

        private struct Wrapped: Codable {
            public let flv: String?

            public let hls: String?

            public let rtmp: String?

            enum CodingKeys: String, CodingKey {
                case flv = "Flv"
                case hls = "Hls"
                case rtmp = "Rtmp"
            }
        }

        /// flv 流地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public var flv: String? {
            self.data.flv
        }

        /// hls 流地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public var hls: String? {
            self.data.hls
        }

        /// rtmp 流地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public var rtmp: String? {
            self.data.rtmp
        }

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取开流地址
    ///
    /// 用于获取设备的实时开流地址。
    @inlinable
    public func controlDeviceStream(_ input: ControlDeviceStreamRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDeviceStreamResponse> {
        self.client.execute(action: "ControlDeviceStream", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取开流地址
    ///
    /// 用于获取设备的实时开流地址。
    @inlinable
    public func controlDeviceStream(_ input: ControlDeviceStreamRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDeviceStreamResponse {
        try await self.client.execute(action: "ControlDeviceStream", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取开流地址
    ///
    /// 用于获取设备的实时开流地址。
    @inlinable
    public func controlDeviceStream(channelId: String, streamType: String? = nil, resolution: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDeviceStreamResponse> {
        self.controlDeviceStream(.init(channelId: channelId, streamType: streamType, resolution: resolution), region: region, logger: logger, on: eventLoop)
    }

    /// 获取开流地址
    ///
    /// 用于获取设备的实时开流地址。
    @inlinable
    public func controlDeviceStream(channelId: String, streamType: String? = nil, resolution: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDeviceStreamResponse {
        try await self.controlDeviceStream(.init(channelId: channelId, streamType: streamType, resolution: resolution), region: region, logger: logger, on: eventLoop)
    }
}
