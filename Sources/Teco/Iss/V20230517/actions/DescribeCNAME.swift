//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeCNAME请求参数结构体
    public struct DescribeCNAMERequest: TCRequestModel {
        /// 服务节点 ID（从查询域名可绑定服务节点接口DescribeDomainRegion中获取）
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    /// DescribeCNAME返回参数结构体
    public struct DescribeCNAMEResponse: TCResponseModel {
        /// CNAME 记录值
        public let data: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 根据服务节点获取 CNAME
    ///
    /// 用于根据服务节点获取 CNAME 值。
    @inlinable
    public func describeCNAME(_ input: DescribeCNAMERequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCNAMEResponse> {
        self.client.execute(action: "DescribeCNAME", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据服务节点获取 CNAME
    ///
    /// 用于根据服务节点获取 CNAME 值。
    @inlinable
    public func describeCNAME(_ input: DescribeCNAMERequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCNAMEResponse {
        try await self.client.execute(action: "DescribeCNAME", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据服务节点获取 CNAME
    ///
    /// 用于根据服务节点获取 CNAME 值。
    @inlinable
    public func describeCNAME(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCNAMEResponse> {
        self.describeCNAME(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 根据服务节点获取 CNAME
    ///
    /// 用于根据服务节点获取 CNAME 值。
    @inlinable
    public func describeCNAME(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCNAMEResponse {
        try await self.describeCNAME(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
