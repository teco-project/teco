//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// CheckDomain请求参数结构体
    public struct CheckDomainRequest: TCRequest {
        /// 播放域名
        public let playDomain: String

        /// CNAME 记录值
        public let internalDomain: String

        public init(playDomain: String, internalDomain: String) {
            self.playDomain = playDomain
            self.internalDomain = internalDomain
        }

        enum CodingKeys: String, CodingKey {
            case playDomain = "PlayDomain"
            case internalDomain = "InternalDomain"
        }
    }

    /// CheckDomain返回参数结构体
    public struct CheckDomainResponse: TCResponse {
        /// 是否备案
        public let data: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 检测域名是否备案
    ///
    /// 用于检测域名是否备案。
    @inlinable
    public func checkDomain(_ input: CheckDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckDomainResponse> {
        self.client.execute(action: "CheckDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 检测域名是否备案
    ///
    /// 用于检测域名是否备案。
    @inlinable
    public func checkDomain(_ input: CheckDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckDomainResponse {
        try await self.client.execute(action: "CheckDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 检测域名是否备案
    ///
    /// 用于检测域名是否备案。
    @inlinable
    public func checkDomain(playDomain: String, internalDomain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckDomainResponse> {
        self.checkDomain(.init(playDomain: playDomain, internalDomain: internalDomain), region: region, logger: logger, on: eventLoop)
    }

    /// 检测域名是否备案
    ///
    /// 用于检测域名是否备案。
    @inlinable
    public func checkDomain(playDomain: String, internalDomain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckDomainResponse {
        try await self.checkDomain(.init(playDomain: playDomain, internalDomain: internalDomain), region: region, logger: logger, on: eventLoop)
    }
}
