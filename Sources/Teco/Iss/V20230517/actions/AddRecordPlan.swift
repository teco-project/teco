//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// AddRecordPlan请求参数结构体
    public struct AddRecordPlanRequest: TCRequest {
        /// 实时上云计划名称，仅支持中文、英文、数字、_、-，长度不超过32个字符，计划名称全局唯一，不能为空，不能重复
        public let planName: String

        /// 实时上云模板ID
        public let templateId: String

        /// 生命周期
        public let lifeCycle: LifeCycleData

        /// 上云计划描述，仅支持中文、英文、数字、_、-，长度不超过128个字符
        public let describe: String?

        /// 码流类型，default:不指定码流类型，以设备默认推送类型为主， main:主码流，sub:子码流，其他根据设备能力集自定义，不填按默认类型处理，长度不能超过32个字节
        public let streamType: String?

        /// 添加录像的设备的通道信息，一次添加通道总数不超过5000个，包括组织目录下的通道数量
        public let channels: [ChannelInfo]?

        /// 添加组织目录下所有设备通道，Json数组，可以为空，通道总数量不超过5000个（包括Channel字段的数量）
        public let organizationId: [String]?

        public init(planName: String, templateId: String, lifeCycle: LifeCycleData, describe: String? = nil, streamType: String? = nil, channels: [ChannelInfo]? = nil, organizationId: [String]? = nil) {
            self.planName = planName
            self.templateId = templateId
            self.lifeCycle = lifeCycle
            self.describe = describe
            self.streamType = streamType
            self.channels = channels
            self.organizationId = organizationId
        }

        enum CodingKeys: String, CodingKey {
            case planName = "PlanName"
            case templateId = "TemplateId"
            case lifeCycle = "LifeCycle"
            case describe = "Describe"
            case streamType = "StreamType"
            case channels = "Channels"
            case organizationId = "OrganizationId"
        }
    }

    /// AddRecordPlan返回参数结构体
    public struct AddRecordPlanResponse: TCResponse {
        /// 返回结果
        public let data: RecordPlanOptData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 新增实时上云计划
    ///
    /// 用于新增实时上云计划
    @inlinable
    public func addRecordPlan(_ input: AddRecordPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordPlanResponse> {
        self.client.execute(action: "AddRecordPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增实时上云计划
    ///
    /// 用于新增实时上云计划
    @inlinable
    public func addRecordPlan(_ input: AddRecordPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordPlanResponse {
        try await self.client.execute(action: "AddRecordPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增实时上云计划
    ///
    /// 用于新增实时上云计划
    @inlinable
    public func addRecordPlan(planName: String, templateId: String, lifeCycle: LifeCycleData, describe: String? = nil, streamType: String? = nil, channels: [ChannelInfo]? = nil, organizationId: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordPlanResponse> {
        self.addRecordPlan(.init(planName: planName, templateId: templateId, lifeCycle: lifeCycle, describe: describe, streamType: streamType, channels: channels, organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }

    /// 新增实时上云计划
    ///
    /// 用于新增实时上云计划
    @inlinable
    public func addRecordPlan(planName: String, templateId: String, lifeCycle: LifeCycleData, describe: String? = nil, streamType: String? = nil, channels: [ChannelInfo]? = nil, organizationId: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordPlanResponse {
        try await self.addRecordPlan(.init(planName: planName, templateId: templateId, lifeCycle: lifeCycle, describe: describe, streamType: streamType, channels: channels, organizationId: organizationId), region: region, logger: logger, on: eventLoop)
    }
}
