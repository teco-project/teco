//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// UpdateGateway请求参数结构体
    public struct UpdateGatewayRequest: TCRequest {
        /// 网关索引ID（从获取网关列表ListGateways接口中获取）
        public let gatewayId: String

        /// 仅支持中文、英文、数网关名称，字、_、-，长度不超过32个字符
        public let name: String?

        /// 网关描述，仅支持中文、英文、数字、_、-，长度不超过128个字符
        public let description: String?

        public init(gatewayId: String, name: String? = nil, description: String? = nil) {
            self.gatewayId = gatewayId
            self.name = name
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case name = "Name"
            case description = "Description"
        }
    }

    /// UpdateGateway返回参数结构体
    public struct UpdateGatewayResponse: TCResponse {
        /// 返回数据
        public let data: UpdateGatewayData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 修改网关信息
    ///
    /// 用于修改网关信息（支持对网关名称和描述的修改）。
    @inlinable
    public func updateGateway(_ input: UpdateGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateGatewayResponse> {
        self.client.execute(action: "UpdateGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改网关信息
    ///
    /// 用于修改网关信息（支持对网关名称和描述的修改）。
    @inlinable
    public func updateGateway(_ input: UpdateGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateGatewayResponse {
        try await self.client.execute(action: "UpdateGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改网关信息
    ///
    /// 用于修改网关信息（支持对网关名称和描述的修改）。
    @inlinable
    public func updateGateway(gatewayId: String, name: String? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateGatewayResponse> {
        self.updateGateway(.init(gatewayId: gatewayId, name: name, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 修改网关信息
    ///
    /// 用于修改网关信息（支持对网关名称和描述的修改）。
    @inlinable
    public func updateGateway(gatewayId: String, name: String? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateGatewayResponse {
        try await self.updateGateway(.init(gatewayId: gatewayId, name: name, description: description), region: region, logger: logger, on: eventLoop)
    }
}
