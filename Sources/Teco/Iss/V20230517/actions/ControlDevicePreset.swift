//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// ControlDevicePreset请求参数结构体
    public struct ControlDevicePresetRequest: TCRequestModel {
        /// 通道 ID（从通道查询接口DescribeDeviceChannel中获取）
        public let channelId: String

        /// 命令（goto:预置位调用；
        /// set:预置位设置；
        /// del:预置位删除）
        public let cmd: String

        /// 预置位索引（只支持1-10的索引位置，超出报错）
        public let index: Int64

        public init(channelId: String, cmd: String, index: Int64) {
            self.channelId = channelId
            self.cmd = cmd
            self.index = index
        }

        enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case cmd = "Cmd"
            case index = "Index"
        }
    }

    /// ControlDevicePreset返回参数结构体
    public struct ControlDevicePresetResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 预置位操作
    ///
    /// 用于操作设备预置位，包括设置、删除、调用。
    @inlinable @discardableResult
    public func controlDevicePreset(_ input: ControlDevicePresetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDevicePresetResponse> {
        self.client.execute(action: "ControlDevicePreset", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 预置位操作
    ///
    /// 用于操作设备预置位，包括设置、删除、调用。
    @inlinable @discardableResult
    public func controlDevicePreset(_ input: ControlDevicePresetRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDevicePresetResponse {
        try await self.client.execute(action: "ControlDevicePreset", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 预置位操作
    ///
    /// 用于操作设备预置位，包括设置、删除、调用。
    @inlinable @discardableResult
    public func controlDevicePreset(channelId: String, cmd: String, index: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ControlDevicePresetResponse> {
        self.controlDevicePreset(.init(channelId: channelId, cmd: cmd, index: index), region: region, logger: logger, on: eventLoop)
    }

    /// 预置位操作
    ///
    /// 用于操作设备预置位，包括设置、删除、调用。
    @inlinable @discardableResult
    public func controlDevicePreset(channelId: String, cmd: String, index: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ControlDevicePresetResponse {
        try await self.controlDevicePreset(.init(channelId: channelId, cmd: cmd, index: index), region: region, logger: logger, on: eventLoop)
    }
}
