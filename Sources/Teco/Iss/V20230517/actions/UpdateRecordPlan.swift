//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// UpdateRecordPlan请求参数结构体
    public struct UpdateRecordPlanRequest: TCRequestModel {
        /// 计划ID
        public let planId: String

        /// 修改计划的内容
        public let mod: UpdateRecordPlanData

        public init(planId: String, mod: UpdateRecordPlanData) {
            self.planId = planId
            self.mod = mod
        }

        enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
            case mod = "Mod"
        }
    }

    /// UpdateRecordPlan返回参数结构体
    public struct UpdateRecordPlanResponse: TCResponseModel {
        /// 返回结果
        public let data: RecordPlanOptResponse

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 修改实时上云计划
    ///
    /// 用于修改实时上云计划
    @inlinable
    public func updateRecordPlan(_ input: UpdateRecordPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateRecordPlanResponse> {
        self.client.execute(action: "UpdateRecordPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实时上云计划
    ///
    /// 用于修改实时上云计划
    @inlinable
    public func updateRecordPlan(_ input: UpdateRecordPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateRecordPlanResponse {
        try await self.client.execute(action: "UpdateRecordPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实时上云计划
    ///
    /// 用于修改实时上云计划
    @inlinable
    public func updateRecordPlan(planId: String, mod: UpdateRecordPlanData, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateRecordPlanResponse> {
        self.updateRecordPlan(.init(planId: planId, mod: mod), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实时上云计划
    ///
    /// 用于修改实时上云计划
    @inlinable
    public func updateRecordPlan(planId: String, mod: UpdateRecordPlanData, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateRecordPlanResponse {
        try await self.updateRecordPlan(.init(planId: planId, mod: mod), region: region, logger: logger, on: eventLoop)
    }
}
