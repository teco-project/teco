//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// DescribeGateway请求参数结构体
    public struct DescribeGatewayRequest: TCRequestModel {
        /// 网关索引ID（从获取网关列表接口ListGateways中获取）
        public let gatewayId: String

        public init(gatewayId: String) {
            self.gatewayId = gatewayId
        }

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
        }
    }

    /// 查询网关信息返回结果
    public struct DescribeGatewayResponse: TCResponseModel {
        /// 网关索引ID，用于网关查询，更新，删除操作
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gatewayId: String?

        /// 网关编码，由网关设备生成的唯一编码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gwId: String?

        /// 网关名称，仅支持中文、英文、数字、_、-，长度不超过32个字符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 网关描述，仅支持中文、英文、数字、_、-，长度不超过128个字符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 服务节点id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        /// 服务节点名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        /// 网关状态，0：离线，1:在线
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 网关版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: [GatewayVersion]?

        /// 网关下挂设备数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deviceNum: Int64?

        /// 激活时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createdAt: String?

        /// 所属地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case gwId = "GwId"
            case name = "Name"
            case description = "Description"
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case status = "Status"
            case version = "Version"
            case deviceNum = "DeviceNum"
            case createdAt = "CreatedAt"
            case region = "Region"
        }
    }

    /// 获取网关详情
    ///
    /// 用于获取网关详情。
    @inlinable
    public func describeGateway(_ input: DescribeGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayResponse> {
        self.client.execute(action: "DescribeGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取网关详情
    ///
    /// 用于获取网关详情。
    @inlinable
    public func describeGateway(_ input: DescribeGatewayRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayResponse {
        try await self.client.execute(action: "DescribeGateway", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取网关详情
    ///
    /// 用于获取网关详情。
    @inlinable
    public func describeGateway(gatewayId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGatewayResponse> {
        self.describeGateway(.init(gatewayId: gatewayId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取网关详情
    ///
    /// 用于获取网关详情。
    @inlinable
    public func describeGateway(gatewayId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGatewayResponse {
        try await self.describeGateway(.init(gatewayId: gatewayId), region: region, logger: logger, on: eventLoop)
    }
}
