//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iss {
    /// AddRecordTemplate请求参数结构体
    public struct AddRecordTemplateRequest: TCRequestModel {
        /// 模板名称， 仅支持中文、英文、数字、_、-，长度不超过32个字符，模板名称全局唯一，不能为空，不能重复
        public let templateName: String

        /// 上云时间段，按周进行设置，支持一天设置多个时间段，每个时间段不小于10分钟
        public let timeSections: [RecordTemplateTimeSections]

        public init(templateName: String, timeSections: [RecordTemplateTimeSections]) {
            self.templateName = templateName
            self.timeSections = timeSections
        }

        enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case timeSections = "TimeSections"
        }
    }

    /// AddRecordTemplate返回参数结构体
    public struct AddRecordTemplateResponse: TCResponseModel {
        /// 返回结果
        public let data: RecordTemplateInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 新增实时上云模板
    ///
    /// 用于新增实时上云模板
    @inlinable
    public func addRecordTemplate(_ input: AddRecordTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordTemplateResponse> {
        self.client.execute(action: "AddRecordTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增实时上云模板
    ///
    /// 用于新增实时上云模板
    @inlinable
    public func addRecordTemplate(_ input: AddRecordTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordTemplateResponse {
        try await self.client.execute(action: "AddRecordTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增实时上云模板
    ///
    /// 用于新增实时上云模板
    @inlinable
    public func addRecordTemplate(templateName: String, timeSections: [RecordTemplateTimeSections], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddRecordTemplateResponse> {
        self.addRecordTemplate(.init(templateName: templateName, timeSections: timeSections), region: region, logger: logger, on: eventLoop)
    }

    /// 新增实时上云模板
    ///
    /// 用于新增实时上云模板
    @inlinable
    public func addRecordTemplate(templateName: String, timeSections: [RecordTemplateTimeSections], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddRecordTemplateResponse {
        try await self.addRecordTemplate(.init(templateName: templateName, timeSections: timeSections), region: region, logger: logger, on: eventLoop)
    }
}
