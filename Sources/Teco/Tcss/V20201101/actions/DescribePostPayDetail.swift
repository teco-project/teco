//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Tcss {
    /// DescribePostPayDetail请求参数结构体
    public struct DescribePostPayDetailRequest: TCPaginatedRequest {
        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        public init(limit: UInt64? = nil, offset: UInt64? = nil) {
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribePostPayDetailResponse) -> DescribePostPayDetailRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribePostPayDetailRequest(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribePostPayDetail返回参数结构体
    public struct DescribePostPayDetailResponse: TCPaginatedResponse {
        /// 弹性计费扣费详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let softQuotaDayDetail: [SoftQuotaDayInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case softQuotaDayDetail = "SoftQuotaDayDetail"
            case requestId = "RequestId"
        }

        /// Extract the total count from the paginated response.
        public func getItems() -> [SoftQuotaDayInfo] {
            self.softQuotaDayDetail ?? []
        }
    }

    /// 查询后付费详情
    ///
    /// DescribePostPayDetail  查询后付费详情
    @inlinable
    public func describePostPayDetail(_ input: DescribePostPayDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePostPayDetailResponse> {
        self.client.execute(action: "DescribePostPayDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询后付费详情
    ///
    /// DescribePostPayDetail  查询后付费详情
    @inlinable
    public func describePostPayDetail(_ input: DescribePostPayDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePostPayDetailResponse {
        try await self.client.execute(action: "DescribePostPayDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询后付费详情
    ///
    /// DescribePostPayDetail  查询后付费详情
    @inlinable
    public func describePostPayDetail(limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePostPayDetailResponse> {
        let input = DescribePostPayDetailRequest(limit: limit, offset: offset)
        return self.client.execute(action: "DescribePostPayDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询后付费详情
    ///
    /// DescribePostPayDetail  查询后付费详情
    @inlinable
    public func describePostPayDetail(limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePostPayDetailResponse {
        let input = DescribePostPayDetailRequest(limit: limit, offset: offset)
        return try await self.client.execute(action: "DescribePostPayDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
