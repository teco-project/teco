//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// CreateVirusScanAgain请求参数结构体
    public struct CreateVirusScanAgainRequest: TCRequestModel {
        /// 任务id
        public let taskId: String

        /// 需要扫描的容器id集合
        public let containerIds: [String]?

        /// 是否是扫描全部超时的
        public let timeoutAll: Bool?

        /// 重新设置的超时时长
        public let timeout: UInt64?

        public init(taskId: String, containerIds: [String]? = nil, timeoutAll: Bool? = nil, timeout: UInt64? = nil) {
            self.taskId = taskId
            self.containerIds = containerIds
            self.timeoutAll = timeoutAll
            self.timeout = timeout
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case containerIds = "ContainerIds"
            case timeoutAll = "TimeoutAll"
            case timeout = "Timeout"
        }
    }

    /// CreateVirusScanAgain返回参数结构体
    public struct CreateVirusScanAgainResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 运行时文件查杀重新检测
    @inlinable @discardableResult
    public func createVirusScanAgain(_ input: CreateVirusScanAgainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVirusScanAgainResponse> {
        self.client.execute(action: "CreateVirusScanAgain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 运行时文件查杀重新检测
    @inlinable @discardableResult
    public func createVirusScanAgain(_ input: CreateVirusScanAgainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVirusScanAgainResponse {
        try await self.client.execute(action: "CreateVirusScanAgain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 运行时文件查杀重新检测
    @inlinable @discardableResult
    public func createVirusScanAgain(taskId: String, containerIds: [String]? = nil, timeoutAll: Bool? = nil, timeout: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVirusScanAgainResponse> {
        let input = CreateVirusScanAgainRequest(taskId: taskId, containerIds: containerIds, timeoutAll: timeoutAll, timeout: timeout)
        return self.client.execute(action: "CreateVirusScanAgain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 运行时文件查杀重新检测
    @inlinable @discardableResult
    public func createVirusScanAgain(taskId: String, containerIds: [String]? = nil, timeoutAll: Bool? = nil, timeout: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVirusScanAgainResponse {
        let input = CreateVirusScanAgainRequest(taskId: taskId, containerIds: containerIds, timeoutAll: timeoutAll, timeout: timeout)
        return try await self.client.execute(action: "CreateVirusScanAgain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
