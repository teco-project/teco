//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcss {
    /// CreateAssetImageRegistryScanTaskOneKey请求参数结构体
    public struct CreateAssetImageRegistryScanTaskOneKeyRequest: TCRequestModel {
        /// 是否扫描全部镜像
        public let all: Bool?

        /// 扫描的镜像列表
        public let images: [ImageInfo]?

        /// 扫描类型数组
        public let scanType: [String]?

        /// 扫描的镜像列表Id
        public let id: [UInt64]?

        public init(all: Bool? = nil, images: [ImageInfo]? = nil, scanType: [String]? = nil, id: [UInt64]? = nil) {
            self.all = all
            self.images = images
            self.scanType = scanType
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case all = "All"
            case images = "Images"
            case scanType = "ScanType"
            case id = "Id"
        }
    }

    /// CreateAssetImageRegistryScanTaskOneKey返回参数结构体
    public struct CreateAssetImageRegistryScanTaskOneKeyResponse: TCResponseModel {
        /// 扫描任务id
        public let taskID: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskID = "TaskID"
            case requestId = "RequestId"
        }
    }

    /// 镜像仓库创建镜像一键扫描任务
    @inlinable
    public func createAssetImageRegistryScanTaskOneKey(_ input: CreateAssetImageRegistryScanTaskOneKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAssetImageRegistryScanTaskOneKeyResponse> {
        self.client.execute(action: "CreateAssetImageRegistryScanTaskOneKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 镜像仓库创建镜像一键扫描任务
    @inlinable
    public func createAssetImageRegistryScanTaskOneKey(_ input: CreateAssetImageRegistryScanTaskOneKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetImageRegistryScanTaskOneKeyResponse {
        try await self.client.execute(action: "CreateAssetImageRegistryScanTaskOneKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 镜像仓库创建镜像一键扫描任务
    @inlinable
    public func createAssetImageRegistryScanTaskOneKey(all: Bool? = nil, images: [ImageInfo]? = nil, scanType: [String]? = nil, id: [UInt64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAssetImageRegistryScanTaskOneKeyResponse> {
        self.createAssetImageRegistryScanTaskOneKey(.init(all: all, images: images, scanType: scanType, id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 镜像仓库创建镜像一键扫描任务
    @inlinable
    public func createAssetImageRegistryScanTaskOneKey(all: Bool? = nil, images: [ImageInfo]? = nil, scanType: [String]? = nil, id: [UInt64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAssetImageRegistryScanTaskOneKeyResponse {
        try await self.createAssetImageRegistryScanTaskOneKey(.init(all: all, images: images, scanType: scanType, id: id), region: region, logger: logger, on: eventLoop)
    }
}
