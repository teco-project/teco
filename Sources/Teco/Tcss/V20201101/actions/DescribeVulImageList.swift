//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Tcss {
    /// DescribeVulImageList请求参数结构体
    public struct DescribeVulImageListRequest: TCPaginatedRequest {
        /// 漏洞PocID
        public let pocID: String

        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 过滤条件。
        /// - OnlyAffectedNewestImage- Bool- 是否必填：否 - 仅展示影响最新版本镜像的漏洞
        /// - ImageID- string - 是否必填：否 - 镜像ID
        /// - ImageName- String -是否必填: 否 - 镜像名称
        /// - HostIP- string -是否必填: 否 - 内网IP
        /// - PublicIP- string -是否必填: 否 - 外网IP
        /// - ComponentName- string -是否必填: 否 - 组件名称
        /// - ComponentVersion- string -是否必填: 否 - 组件版本
        /// - HostName- string -是否必填: 否 - 主机名称
        public let filters: [RunTimeFilters]?

        /// 排序方式
        public let order: String?

        /// 排序字段
        public let by: String?

        public init(pocID: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [RunTimeFilters]? = nil, order: String? = nil, by: String? = nil) {
            self.pocID = pocID
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.order = order
            self.by = by
        }

        enum CodingKeys: String, CodingKey {
            case pocID = "PocID"
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case order = "Order"
            case by = "By"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeVulImageListResponse) -> DescribeVulImageListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeVulImageListRequest(pocID: self.pocID, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters, order: self.order, by: self.by)
        }
    }

    /// DescribeVulImageList返回参数结构体
    public struct DescribeVulImageListResponse: TCPaginatedResponse {
        /// 受影响的镜像列表
        public let list: [VulAffectedImageInfo]

        /// 镜像总数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``VulAffectedImageInfo`` list from the paginated response.
        public func getItems() -> [VulAffectedImageInfo] {
            self.list
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询漏洞影响的镜像列表
    @inlinable
    public func describeVulImageList(_ input: DescribeVulImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulImageListResponse> {
        self.client.execute(action: "DescribeVulImageList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的镜像列表
    @inlinable
    public func describeVulImageList(_ input: DescribeVulImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulImageListResponse {
        try await self.client.execute(action: "DescribeVulImageList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询漏洞影响的镜像列表
    @inlinable
    public func describeVulImageList(pocID: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [RunTimeFilters]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulImageListResponse> {
        self.describeVulImageList(.init(pocID: pocID, limit: limit, offset: offset, filters: filters, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的镜像列表
    @inlinable
    public func describeVulImageList(pocID: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [RunTimeFilters]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulImageListResponse {
        try await self.describeVulImageList(.init(pocID: pocID, limit: limit, offset: offset, filters: filters, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的镜像列表
    @inlinable
    public func describeVulImageListPaginated(_ input: DescribeVulImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [VulAffectedImageInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeVulImageList, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的镜像列表
    @inlinable @discardableResult
    public func describeVulImageListPaginated(_ input: DescribeVulImageListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeVulImageListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeVulImageList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的镜像列表
    ///
    /// - Returns: `AsyncSequence`s of ``VulAffectedImageInfo`` and ``DescribeVulImageListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeVulImageListPaginator(_ input: DescribeVulImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeVulImageListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeVulImageList, logger: logger, on: eventLoop)
    }
}
