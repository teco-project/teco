//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// ModifySecLogKafkaUIN请求参数结构体
    public struct ModifySecLogKafkaUINRequest: TCRequestModel {
        /// 目标UIN
        public let dstUIN: String?

        public init(dstUIN: String? = nil) {
            self.dstUIN = dstUIN
        }

        enum CodingKeys: String, CodingKey {
            case dstUIN = "DstUIN"
        }
    }

    /// ModifySecLogKafkaUIN返回参数结构体
    public struct ModifySecLogKafkaUINResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改安全日志kafkaUIN
    @inlinable @discardableResult
    public func modifySecLogKafkaUIN(_ input: ModifySecLogKafkaUINRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifySecLogKafkaUINResponse> {
        self.client.execute(action: "ModifySecLogKafkaUIN", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改安全日志kafkaUIN
    @inlinable @discardableResult
    public func modifySecLogKafkaUIN(_ input: ModifySecLogKafkaUINRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifySecLogKafkaUINResponse {
        try await self.client.execute(action: "ModifySecLogKafkaUIN", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改安全日志kafkaUIN
    @inlinable @discardableResult
    public func modifySecLogKafkaUIN(dstUIN: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifySecLogKafkaUINResponse> {
        self.modifySecLogKafkaUIN(.init(dstUIN: dstUIN), region: region, logger: logger, on: eventLoop)
    }

    /// 修改安全日志kafkaUIN
    @inlinable @discardableResult
    public func modifySecLogKafkaUIN(dstUIN: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifySecLogKafkaUINResponse {
        try await self.modifySecLogKafkaUIN(.init(dstUIN: dstUIN), region: region, logger: logger, on: eventLoop)
    }
}
