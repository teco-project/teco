//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// 查询逃逸白名单
    ///
    /// 查询逃逸白名单
    @inlinable
    public func describeEscapeWhiteList(_ input: DescribeEscapeWhiteListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeEscapeWhiteListResponse > {
        self.client.execute(action: "DescribeEscapeWhiteList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询逃逸白名单
    ///
    /// 查询逃逸白名单
    @inlinable
    public func describeEscapeWhiteList(_ input: DescribeEscapeWhiteListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEscapeWhiteListResponse {
        try await self.client.execute(action: "DescribeEscapeWhiteList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeEscapeWhiteList请求参数结构体
    public struct DescribeEscapeWhiteListRequest: TCRequestModel {
        /// 过滤条件。
        /// <li>EventType- String - 是否必填：否 - 加白事件类型，ESCAPE_CGROUPS：利用cgroup机制逃逸，ESCAPE_TAMPER_SENSITIVE_FILE：篡改敏感文件逃逸， ESCAPE_DOCKER_API：访问Docker API接口逃逸，ESCAPE_VUL_OCCURRED：逃逸漏洞利用，MOUNT_SENSITIVE_PTAH：敏感路径挂载，PRIVILEGE_CONTAINER_START：特权容器， PRIVILEGE：程序提权逃逸</li>
        /// <li>ImageName- string - 是否必填：否 - 镜像名称。</li>
        /// <li>ImageID- string - 是否必填：否 - 镜像ID。</li>
        public let filters: [RunTimeFilters]?
        
        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?
        
        /// 偏移量，默认为0。
        public let offset: UInt64?
        
        /// 排序方式：asc/desc
        public let order: String?
        
        /// 排序字段：主机数量：HostCount，容器数量：ContainerCount，更新时间：UpdateTime
        public let by: String?
        
        public init (filters: [RunTimeFilters]?, limit: UInt64?, offset: UInt64?, order: String?, by: String?) {
            self.filters = filters
            self.limit = limit
            self.offset = offset
            self.order = order
            self.by = by
        }
        
        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
            case order = "Order"
            case by = "By"
        }
    }
    
    /// DescribeEscapeWhiteList返回参数结构体
    public struct DescribeEscapeWhiteListResponse: TCResponseModel {
        /// 总数量
        public let totalCount: Int64
        
        /// 逃逸白名单列表
        public let list: [EscapeWhiteListInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case list = "List"
            case requestId = "RequestId"
        }
    }
}