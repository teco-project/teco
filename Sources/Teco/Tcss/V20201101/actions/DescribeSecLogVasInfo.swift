//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// DescribeSecLogVasInfo请求参数结构体
    public struct DescribeSecLogVasInfoRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeSecLogVasInfo返回参数结构体
    public struct DescribeSecLogVasInfoResponse: TCResponseModel {
        /// 购买状态
        /// 待购: Pending
        /// 已购: Normal
        /// 隔离: Isolate
        public let buyStatus: String

        /// 存储时长(月)
        public let logSaveMonth: Int64

        /// 起始时间
        public let startTime: String

        /// 截止时间
        public let endTime: String

        /// 存储容量(GB)
        public let logCapacity: UInt64

        /// 资源ID
        public let resourceID: String

        /// 是否曾经购买过(false:未曾 true:曾经购买过)
        public let isPurchased: Bool

        /// 试用存储容量(GB)
        public let trialCapacity: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case buyStatus = "BuyStatus"
            case logSaveMonth = "LogSaveMonth"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case logCapacity = "LogCapacity"
            case resourceID = "ResourceID"
            case isPurchased = "IsPurchased"
            case trialCapacity = "TrialCapacity"
            case requestId = "RequestId"
        }
    }

    /// 查询安全日志商品信息
    @inlinable
    public func describeSecLogVasInfo(_ input: DescribeSecLogVasInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecLogVasInfoResponse> {
        self.client.execute(action: "DescribeSecLogVasInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询安全日志商品信息
    @inlinable
    public func describeSecLogVasInfo(_ input: DescribeSecLogVasInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecLogVasInfoResponse {
        try await self.client.execute(action: "DescribeSecLogVasInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询安全日志商品信息
    @inlinable
    public func describeSecLogVasInfo(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecLogVasInfoResponse> {
        self.describeSecLogVasInfo(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询安全日志商品信息
    @inlinable
    public func describeSecLogVasInfo(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecLogVasInfoResponse {
        try await self.describeSecLogVasInfo(.init(), region: region, logger: logger, on: eventLoop)
    }
}
