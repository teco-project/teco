//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcss {
    /// DescribeAbnormalProcessLevelSummary请求参数结构体
    public struct DescribeAbnormalProcessLevelSummaryRequest: TCRequest {
        public init() {
        }
    }

    /// DescribeAbnormalProcessLevelSummary返回参数结构体
    public struct DescribeAbnormalProcessLevelSummaryResponse: TCResponse {
        /// 异常进程高危待处理事件数
        public let highLevelEventCount: Int64

        /// 异常进程中危待处理事件数
        public let mediumLevelEventCount: Int64

        /// 异常进程低危待处理事件数
        public let lowLevelEventCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case highLevelEventCount = "HighLevelEventCount"
            case mediumLevelEventCount = "MediumLevelEventCount"
            case lowLevelEventCount = "LowLevelEventCount"
            case requestId = "RequestId"
        }
    }

    /// 统计异常进程各威胁等级待处理事件数
    @inlinable
    public func describeAbnormalProcessLevelSummary(_ input: DescribeAbnormalProcessLevelSummaryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAbnormalProcessLevelSummaryResponse> {
        self.client.execute(action: "DescribeAbnormalProcessLevelSummary", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 统计异常进程各威胁等级待处理事件数
    @inlinable
    public func describeAbnormalProcessLevelSummary(_ input: DescribeAbnormalProcessLevelSummaryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAbnormalProcessLevelSummaryResponse {
        try await self.client.execute(action: "DescribeAbnormalProcessLevelSummary", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 统计异常进程各威胁等级待处理事件数
    @inlinable
    public func describeAbnormalProcessLevelSummary(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAbnormalProcessLevelSummaryResponse> {
        self.describeAbnormalProcessLevelSummary(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 统计异常进程各威胁等级待处理事件数
    @inlinable
    public func describeAbnormalProcessLevelSummary(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAbnormalProcessLevelSummaryResponse {
        try await self.describeAbnormalProcessLevelSummary(.init(), region: region, logger: logger, on: eventLoop)
    }
}
