//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// DescribeExportJobManageList请求参数结构体
    public struct DescribeExportJobManageListRequest: TCRequestModel {
        /// 过滤条件。
        /// <li>ExportStatus- string -是否必填: 否 - 导出状态 RUNNING: 导出中 SUCCESS:导出完成 FAILURE:失败
        /// <li>ExportSource- string -是否必填: 否 - 导出来源 LocalImage: 本地镜像
        /// </li>
        public let filters: [RunTimeFilters]?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?

        /// 排序方式
        public let order: String?

        /// 排序字段
        /// InsertTime: 创建时间
        public let by: String?

        public init(filters: [RunTimeFilters]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, order: String? = nil, by: String? = nil) {
            self.filters = filters
            self.offset = offset
            self.limit = limit
            self.order = order
            self.by = by
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
            case order = "Order"
            case by = "By"
        }
    }

    /// DescribeExportJobManageList返回参数结构体
    public struct DescribeExportJobManageListResponse: TCResponseModel {
        /// 总数
        public let totalCount: UInt64

        /// 任务列表
        public let list: [ExportJobInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case list = "List"
            case requestId = "RequestId"
        }
    }

    /// 查询导出任务管理列表
    @inlinable
    public func describeExportJobManageList(_ input: DescribeExportJobManageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExportJobManageListResponse> {
        self.client.execute(action: "DescribeExportJobManageList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询导出任务管理列表
    @inlinable
    public func describeExportJobManageList(_ input: DescribeExportJobManageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExportJobManageListResponse {
        try await self.client.execute(action: "DescribeExportJobManageList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询导出任务管理列表
    @inlinable
    public func describeExportJobManageList(filters: [RunTimeFilters]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExportJobManageListResponse> {
        self.describeExportJobManageList(DescribeExportJobManageListRequest(filters: filters, offset: offset, limit: limit, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 查询导出任务管理列表
    @inlinable
    public func describeExportJobManageList(filters: [RunTimeFilters]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExportJobManageListResponse {
        try await self.describeExportJobManageList(DescribeExportJobManageListRequest(filters: filters, offset: offset, limit: limit, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }
}
