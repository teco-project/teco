//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// 查询漏洞扫描忽略的仓库镜像列表
    ///
    /// 查询漏洞扫描忽略的仓库镜像列表
    @inlinable
    public func describeVulIgnoreRegistryImageList(_ input: DescribeVulIgnoreRegistryImageListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeVulIgnoreRegistryImageListResponse > {
        self.client.execute(action: "DescribeVulIgnoreRegistryImageList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询漏洞扫描忽略的仓库镜像列表
    ///
    /// 查询漏洞扫描忽略的仓库镜像列表
    @inlinable
    public func describeVulIgnoreRegistryImageList(_ input: DescribeVulIgnoreRegistryImageListRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulIgnoreRegistryImageListResponse {
        try await self.client.execute(action: "DescribeVulIgnoreRegistryImageList", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeVulIgnoreRegistryImageList请求参数结构体
    public struct DescribeVulIgnoreRegistryImageListRequest: TCRequestModel {
        /// 漏洞PocID
        public let pocID: String
        
        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?
        
        /// 偏移量，默认为0。
        public let offset: UInt64?
        
        public init (pocID: String, limit: UInt64?, offset: UInt64?) {
            self.pocID = pocID
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case pocID = "PocID"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeVulIgnoreRegistryImageList返回参数结构体
    public struct DescribeVulIgnoreRegistryImageListResponse: TCResponseModel {
        /// 总数量
        public let totalCount: Int64
        
        /// 镜像列表
        public let list: [VulIgnoreRegistryImage]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case list = "List"
            case requestId = "RequestId"
        }
    }
}