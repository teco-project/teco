//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Tcss {
    /// DescribeVirusList请求参数结构体
    public struct DescribeVirusListRequest: TCPaginatedRequest {
        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 过滤条件。
        /// <li>FileName - String - 是否必填：否 - 文件名称</li>
        /// <li>FilePath - String - 是否必填：否 - 文件路径</li>
        /// <li>VirusName - String - 是否必填：否 - 病毒名称</li>
        /// <li>ContainerName- String - 是否必填：是 - 容器名称</li>
        /// <li>ContainerId- string - 是否必填：否 - 容器id</li>
        /// <li>ImageName- string - 是否必填：否 - 镜像名称</li>
        /// <li>ImageId- string - 是否必填：否 - 镜像id</li>
        /// <li>IsRealTime- int - 是否必填：否 - 过滤是否实时监控数据</li>
        /// <li>TaskId- string - 是否必填：否 - 任务ID</li>
        /// <li>ContainerNetStatus - String -是否必填: 否 -  容器网络状态筛选 NORMAL ISOLATED ISOLATING RESTORING RESTORE_FAILED</li>
        /// <li>TimeRange - string -是否必填: 否 - 时间范围筛选 ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
        /// <li>ContainerStatus - string -是否必填: 否 - 容器状态 RUNNING PAUSED STOPPED CREATED DESTROYED RESTARTING REMOVING</li>
        /// <li>AutoIsolateMode - string -是否必填: 否 - 隔离方式 MANUAL AUTO</li>
        /// <li>MD5 - string -是否必填: 否 - md5 </li>
        public let filters: [RunTimeFilters]?

        /// 排序方式
        public let order: String?

        /// 排序字段
        public let by: String?

        public init(limit: UInt64? = nil, offset: UInt64? = nil, filters: [RunTimeFilters]? = nil, order: String? = nil, by: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.order = order
            self.by = by
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case order = "Order"
            case by = "By"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeVirusListResponse) -> DescribeVirusListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeVirusListRequest(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters, order: self.order, by: self.by)
        }
    }

    /// DescribeVirusList返回参数结构体
    public struct DescribeVirusListResponse: TCPaginatedResponse {
        /// 木马列表
        public let list: [VirusInfo]

        /// 总数量
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [VirusInfo] {
            self.list
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询运行时文件查杀事件列表
    @inlinable
    public func describeVirusList(_ input: DescribeVirusListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVirusListResponse> {
        self.client.execute(action: "DescribeVirusList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询运行时文件查杀事件列表
    @inlinable
    public func describeVirusList(_ input: DescribeVirusListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVirusListResponse {
        try await self.client.execute(action: "DescribeVirusList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询运行时文件查杀事件列表
    @inlinable
    public func describeVirusList(limit: UInt64? = nil, offset: UInt64? = nil, filters: [RunTimeFilters]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVirusListResponse> {
        let input = DescribeVirusListRequest(limit: limit, offset: offset, filters: filters, order: order, by: by)
        return self.client.execute(action: "DescribeVirusList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询运行时文件查杀事件列表
    @inlinable
    public func describeVirusList(limit: UInt64? = nil, offset: UInt64? = nil, filters: [RunTimeFilters]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVirusListResponse {
        let input = DescribeVirusListRequest(limit: limit, offset: offset, filters: filters, order: order, by: by)
        return try await self.client.execute(action: "DescribeVirusList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询运行时文件查杀事件列表
    @inlinable
    public func describeVirusListPaginated(_ input: DescribeVirusListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [VirusInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeVirusList, logger: logger, on: eventLoop)
    }

    /// 查询运行时文件查杀事件列表
    @inlinable
    public func describeVirusListPaginated(_ input: DescribeVirusListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeVirusListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeVirusList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询运行时文件查杀事件列表
    @inlinable
    public func describeVirusListPaginator(_ input: DescribeVirusListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<DescribeVirusListRequest, DescribeVirusListResponse>.ResultSequence, responses: TCClient.Paginator<DescribeVirusListRequest, DescribeVirusListResponse>.ResponseSequence) {
        let results = TCClient.Paginator<DescribeVirusListRequest, DescribeVirusListResponse>.ResultSequence(input: input, region: region, command: self.describeVirusList, logger: logger, on: eventLoop)
        let responses = TCClient.Paginator<DescribeVirusListRequest, DescribeVirusListResponse>.ResponseSequence(input: input, region: region, command: self.describeVirusList, logger: logger, on: eventLoop)
        return (results, responses)
    }
}
