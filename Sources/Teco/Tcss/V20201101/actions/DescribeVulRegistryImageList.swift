//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Tcss {
    /// DescribeVulRegistryImageList请求参数结构体
    public struct DescribeVulRegistryImageListRequest: TCPaginatedRequest {
        /// 漏洞ID
        public let pocID: String

        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?

        /// 偏移量，默认为0。
        public let offset: UInt64?

        /// 过滤条件。
        /// OnlyAffectedNewestImage bool 是否影响最新镜像
        /// ImageDigest 镜像Digest，支持模糊查询
        /// ImageId 镜像ID，支持模糊查询
        /// Namespace 命名空间，支持模糊查询
        /// ImageTag 镜像版本，支持模糊查询
        /// InstanceName 实例名称，支持模糊查询
        /// ImageName 镜像名，支持模糊查询
        /// ImageRepoAddress 镜像地址，支持模糊查询
        public let filters: [AssetFilters]?

        /// 排序方式
        public let order: String?

        /// 排序字段
        public let by: String?

        public init(pocID: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [AssetFilters]? = nil, order: String? = nil, by: String? = nil) {
            self.pocID = pocID
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.order = order
            self.by = by
        }

        enum CodingKeys: String, CodingKey {
            case pocID = "PocID"
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case order = "Order"
            case by = "By"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeVulRegistryImageListResponse) -> DescribeVulRegistryImageListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeVulRegistryImageListRequest(pocID: self.pocID, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters, order: self.order, by: self.by)
        }
    }

    /// DescribeVulRegistryImageList返回参数结构体
    public struct DescribeVulRegistryImageListResponse: TCPaginatedResponse {
        /// 镜像总数
        public let totalCount: Int64

        /// 仓库镜像列表
        public let list: [VulAffectedRegistryImageInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case list = "List"
            case requestId = "RequestId"
        }

        /// Extract the returned ``VulAffectedRegistryImageInfo`` list from the paginated response.
        public func getItems() -> [VulAffectedRegistryImageInfo] {
            self.list
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询漏洞影响的仓库镜像列表
    @inlinable
    public func describeVulRegistryImageList(_ input: DescribeVulRegistryImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulRegistryImageListResponse> {
        self.client.execute(action: "DescribeVulRegistryImageList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的仓库镜像列表
    @inlinable
    public func describeVulRegistryImageList(_ input: DescribeVulRegistryImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulRegistryImageListResponse {
        try await self.client.execute(action: "DescribeVulRegistryImageList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询漏洞影响的仓库镜像列表
    @inlinable
    public func describeVulRegistryImageList(pocID: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [AssetFilters]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVulRegistryImageListResponse> {
        self.describeVulRegistryImageList(.init(pocID: pocID, limit: limit, offset: offset, filters: filters, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的仓库镜像列表
    @inlinable
    public func describeVulRegistryImageList(pocID: String, limit: UInt64? = nil, offset: UInt64? = nil, filters: [AssetFilters]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVulRegistryImageListResponse {
        try await self.describeVulRegistryImageList(.init(pocID: pocID, limit: limit, offset: offset, filters: filters, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的仓库镜像列表
    @inlinable
    public func describeVulRegistryImageListPaginated(_ input: DescribeVulRegistryImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [VulAffectedRegistryImageInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeVulRegistryImageList, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的仓库镜像列表
    @inlinable @discardableResult
    public func describeVulRegistryImageListPaginated(_ input: DescribeVulRegistryImageListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeVulRegistryImageListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeVulRegistryImageList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询漏洞影响的仓库镜像列表
    ///
    /// - Returns: `AsyncSequence`s of `VulAffectedRegistryImageInfo` and `DescribeVulRegistryImageListResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeVulRegistryImageListPaginator(_ input: DescribeVulRegistryImageListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeVulRegistryImageListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeVulRegistryImageList, logger: logger, on: eventLoop)
    }
}
