//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// DescribeAffectedClusterCount请求参数结构体
    public struct DescribeAffectedClusterCountRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeAffectedClusterCount返回参数结构体
    public struct DescribeAffectedClusterCountResponse: TCResponseModel {
        /// 严重风险的集群数量
        public let seriousRiskClusterCount: UInt64

        /// 高危风险的集群数量
        public let highRiskClusterCount: UInt64

        /// 中危风险的集群数量
        public let middleRiskClusterCount: UInt64

        /// 低危风险的集群数量
        public let hintRiskClusterCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case seriousRiskClusterCount = "SeriousRiskClusterCount"
            case highRiskClusterCount = "HighRiskClusterCount"
            case middleRiskClusterCount = "MiddleRiskClusterCount"
            case hintRiskClusterCount = "HintRiskClusterCount"
            case requestId = "RequestId"
        }
    }

    /// 获取受影响的集群数量
    ///
    /// 获取受影响的集群数量，返回数量
    @inlinable
    public func describeAffectedClusterCount(_ input: DescribeAffectedClusterCountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAffectedClusterCountResponse> {
        self.client.execute(action: "DescribeAffectedClusterCount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取受影响的集群数量
    ///
    /// 获取受影响的集群数量，返回数量
    @inlinable
    public func describeAffectedClusterCount(_ input: DescribeAffectedClusterCountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAffectedClusterCountResponse {
        try await self.client.execute(action: "DescribeAffectedClusterCount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取受影响的集群数量
    ///
    /// 获取受影响的集群数量，返回数量
    @inlinable
    public func describeAffectedClusterCount(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAffectedClusterCountResponse> {
        self.describeAffectedClusterCount(DescribeAffectedClusterCountRequest(), region: region, logger: logger, on: eventLoop)
    }

    /// 获取受影响的集群数量
    ///
    /// 获取受影响的集群数量，返回数量
    @inlinable
    public func describeAffectedClusterCount(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAffectedClusterCountResponse {
        try await self.describeAffectedClusterCount(DescribeAffectedClusterCountRequest(), region: region, logger: logger, on: eventLoop)
    }
}
