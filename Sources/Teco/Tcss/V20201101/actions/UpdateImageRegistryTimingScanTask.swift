//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcss {
    /// UpdateImageRegistryTimingScanTask请求参数结构体
    public struct UpdateImageRegistryTimingScanTaskRequest: TCRequest {
        /// 定时扫描周期
        public let scanPeriod: UInt64

        /// 定时扫描开关
        public let enable: Bool

        /// 定时扫描的时间
        public let scanTime: String

        /// 扫描木马类型数组
        public let scanType: [String]?

        /// 扫描镜像
        public let images: [ImageInfo]?

        /// 是否扫描所有
        @available(*, deprecated)
        public let all: Bool? = nil

        /// 扫描镜像Id
        public let id: [UInt64]?

        /// 是否扫描最新版本
        public let latest: Bool?

        /// 是否存在运行中的容器
        public let containerRunning: Bool?

        /// 扫描结束时间
        public let scanEndTime: String?

        /// 扫描范围 0全部镜像，1自选镜像，2推荐扫描镜像
        public let scanScope: UInt64?

        /// 仓库类型 tcr,ccr,harbor
        public let registryType: [String]?

        /// 命名空间
        public let namespace: [String]?

        public init(scanPeriod: UInt64, enable: Bool, scanTime: String, scanType: [String]? = nil, images: [ImageInfo]? = nil, id: [UInt64]? = nil, latest: Bool? = nil, containerRunning: Bool? = nil, scanEndTime: String? = nil, scanScope: UInt64? = nil, registryType: [String]? = nil, namespace: [String]? = nil) {
            self.scanPeriod = scanPeriod
            self.enable = enable
            self.scanTime = scanTime
            self.scanType = scanType
            self.images = images
            self.id = id
            self.latest = latest
            self.containerRunning = containerRunning
            self.scanEndTime = scanEndTime
            self.scanScope = scanScope
            self.registryType = registryType
            self.namespace = namespace
        }

        @available(*, deprecated, renamed: "init(scanPeriod:enable:scanTime:scanType:images:id:latest:containerRunning:scanEndTime:scanScope:registryType:namespace:)", message: "'all' is deprecated in 'UpdateImageRegistryTimingScanTaskRequest'. Setting this parameter has no effect.")
        public init(scanPeriod: UInt64, enable: Bool, scanTime: String, scanType: [String]? = nil, images: [ImageInfo]? = nil, all: Bool? = nil, id: [UInt64]? = nil, latest: Bool? = nil, containerRunning: Bool? = nil, scanEndTime: String? = nil, scanScope: UInt64? = nil, registryType: [String]? = nil, namespace: [String]? = nil) {
            self.scanPeriod = scanPeriod
            self.enable = enable
            self.scanTime = scanTime
            self.scanType = scanType
            self.images = images
            self.id = id
            self.latest = latest
            self.containerRunning = containerRunning
            self.scanEndTime = scanEndTime
            self.scanScope = scanScope
            self.registryType = registryType
            self.namespace = namespace
        }

        enum CodingKeys: String, CodingKey {
            case scanPeriod = "ScanPeriod"
            case enable = "Enable"
            case scanTime = "ScanTime"
            case scanType = "ScanType"
            case images = "Images"
            case all = "All"
            case id = "Id"
            case latest = "Latest"
            case containerRunning = "ContainerRunning"
            case scanEndTime = "ScanEndTime"
            case scanScope = "ScanScope"
            case registryType = "RegistryType"
            case namespace = "Namespace"
        }
    }

    /// UpdateImageRegistryTimingScanTask返回参数结构体
    public struct UpdateImageRegistryTimingScanTaskResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 镜像仓库更新定时任务
    @inlinable @discardableResult
    public func updateImageRegistryTimingScanTask(_ input: UpdateImageRegistryTimingScanTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateImageRegistryTimingScanTaskResponse> {
        self.client.execute(action: "UpdateImageRegistryTimingScanTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 镜像仓库更新定时任务
    @inlinable @discardableResult
    public func updateImageRegistryTimingScanTask(_ input: UpdateImageRegistryTimingScanTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateImageRegistryTimingScanTaskResponse {
        try await self.client.execute(action: "UpdateImageRegistryTimingScanTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 镜像仓库更新定时任务
    @inlinable @discardableResult
    public func updateImageRegistryTimingScanTask(scanPeriod: UInt64, enable: Bool, scanTime: String, scanType: [String]? = nil, images: [ImageInfo]? = nil, id: [UInt64]? = nil, latest: Bool? = nil, containerRunning: Bool? = nil, scanEndTime: String? = nil, scanScope: UInt64? = nil, registryType: [String]? = nil, namespace: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateImageRegistryTimingScanTaskResponse> {
        self.updateImageRegistryTimingScanTask(.init(scanPeriod: scanPeriod, enable: enable, scanTime: scanTime, scanType: scanType, images: images, id: id, latest: latest, containerRunning: containerRunning, scanEndTime: scanEndTime, scanScope: scanScope, registryType: registryType, namespace: namespace), region: region, logger: logger, on: eventLoop)
    }

    /// 镜像仓库更新定时任务
    @available(*, deprecated, renamed: "updateImageRegistryTimingScanTask(scanPeriod:enable:scanTime:scanType:images:id:latest:containerRunning:scanEndTime:scanScope:registryType:namespace:region:logger:on:)", message: "'all' is deprecated. Setting this parameter has no effect.")
    @inlinable @discardableResult
    public func updateImageRegistryTimingScanTask(scanPeriod: UInt64, enable: Bool, scanTime: String, scanType: [String]? = nil, images: [ImageInfo]? = nil, all: Bool? = nil, id: [UInt64]? = nil, latest: Bool? = nil, containerRunning: Bool? = nil, scanEndTime: String? = nil, scanScope: UInt64? = nil, registryType: [String]? = nil, namespace: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateImageRegistryTimingScanTaskResponse> {
        self.updateImageRegistryTimingScanTask(.init(scanPeriod: scanPeriod, enable: enable, scanTime: scanTime, scanType: scanType, images: images, all: all, id: id, latest: latest, containerRunning: containerRunning, scanEndTime: scanEndTime, scanScope: scanScope, registryType: registryType, namespace: namespace), region: region, logger: logger, on: eventLoop)
    }

    /// 镜像仓库更新定时任务
    @inlinable @discardableResult
    public func updateImageRegistryTimingScanTask(scanPeriod: UInt64, enable: Bool, scanTime: String, scanType: [String]? = nil, images: [ImageInfo]? = nil, id: [UInt64]? = nil, latest: Bool? = nil, containerRunning: Bool? = nil, scanEndTime: String? = nil, scanScope: UInt64? = nil, registryType: [String]? = nil, namespace: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateImageRegistryTimingScanTaskResponse {
        try await self.updateImageRegistryTimingScanTask(.init(scanPeriod: scanPeriod, enable: enable, scanTime: scanTime, scanType: scanType, images: images, id: id, latest: latest, containerRunning: containerRunning, scanEndTime: scanEndTime, scanScope: scanScope, registryType: registryType, namespace: namespace), region: region, logger: logger, on: eventLoop)
    }

    /// 镜像仓库更新定时任务
    @available(*, deprecated, renamed: "updateImageRegistryTimingScanTask(scanPeriod:enable:scanTime:scanType:images:id:latest:containerRunning:scanEndTime:scanScope:registryType:namespace:region:logger:on:)", message: "'all' is deprecated. Setting this parameter has no effect.")
    @inlinable @discardableResult
    public func updateImageRegistryTimingScanTask(scanPeriod: UInt64, enable: Bool, scanTime: String, scanType: [String]? = nil, images: [ImageInfo]? = nil, all: Bool? = nil, id: [UInt64]? = nil, latest: Bool? = nil, containerRunning: Bool? = nil, scanEndTime: String? = nil, scanScope: UInt64? = nil, registryType: [String]? = nil, namespace: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateImageRegistryTimingScanTaskResponse {
        try await self.updateImageRegistryTimingScanTask(.init(scanPeriod: scanPeriod, enable: enable, scanTime: scanTime, scanType: scanType, images: images, all: all, id: id, latest: latest, containerRunning: containerRunning, scanEndTime: scanEndTime, scanScope: scanScope, registryType: registryType, namespace: namespace), region: region, logger: logger, on: eventLoop)
    }
}
