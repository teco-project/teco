//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcss {
    /// ModifyVirusAutoIsolateExampleSwitch请求参数结构体
    public struct ModifyVirusAutoIsolateExampleSwitchRequest: TCRequestModel {
        /// 文件Md5值
        public let md5: String

        /// 开关(开:true 关: false)
        public let status: Bool

        public init(md5: String, status: Bool) {
            self.md5 = md5
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case md5 = "MD5"
            case status = "Status"
        }
    }

    /// ModifyVirusAutoIsolateExampleSwitch返回参数结构体
    public struct ModifyVirusAutoIsolateExampleSwitchResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改木马自动隔离样本开关
    @inlinable @discardableResult
    public func modifyVirusAutoIsolateExampleSwitch(_ input: ModifyVirusAutoIsolateExampleSwitchRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVirusAutoIsolateExampleSwitchResponse> {
        self.client.execute(action: "ModifyVirusAutoIsolateExampleSwitch", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改木马自动隔离样本开关
    @inlinable @discardableResult
    public func modifyVirusAutoIsolateExampleSwitch(_ input: ModifyVirusAutoIsolateExampleSwitchRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVirusAutoIsolateExampleSwitchResponse {
        try await self.client.execute(action: "ModifyVirusAutoIsolateExampleSwitch", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改木马自动隔离样本开关
    @inlinable @discardableResult
    public func modifyVirusAutoIsolateExampleSwitch(md5: String, status: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVirusAutoIsolateExampleSwitchResponse> {
        self.modifyVirusAutoIsolateExampleSwitch(.init(md5: md5, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 修改木马自动隔离样本开关
    @inlinable @discardableResult
    public func modifyVirusAutoIsolateExampleSwitch(md5: String, status: Bool, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVirusAutoIsolateExampleSwitchResponse {
        try await self.modifyVirusAutoIsolateExampleSwitch(.init(md5: md5, status: status), region: region, logger: logger, on: eventLoop)
    }
}
