//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tcss {
    /// DescribeRiskDnsEventDetail请求参数结构体
    public struct DescribeRiskDnsEventDetailRequest: TCRequest {
        /// 事件ID
        public let eventID: UInt64

        public init(eventID: UInt64) {
            self.eventID = eventID
        }

        enum CodingKeys: String, CodingKey {
            case eventID = "EventID"
        }
    }

    /// DescribeRiskDnsEventDetail返回参数结构体
    public struct DescribeRiskDnsEventDetailResponse: TCResponse {
        /// 事件ID
        public let eventID: UInt64

        /// 事件类型，恶意域名请求：DOMAIN，恶意IP请求：IP
        public let eventType: String

        /// 恶意请求次数
        public let eventCount: UInt64

        /// 首次发现时间
        public let foundTime: String

        /// 最近生成时间
        public let latestFoundTime: String

        /// 容器ID
        public let containerID: String

        /// 容器名称
        public let containerName: String

        /// 隔离状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        public let containerNetStatus: String

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        public let containerStatus: String

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// "NODE_DESTROYED"      //节点已销毁
        /// "CONTAINER_EXITED"    //容器已退出
        /// "CONTAINER_DESTROYED" //容器已销毁
        /// "SHARED_HOST"         // 容器与主机共享网络
        /// "RESOURCE_LIMIT"      //隔离操作资源超限
        /// "UNKNOW"              // 原因未知
        public let containerNetSubStatus: String

        /// 容器隔离操作来源
        public let containerIsolateOperationSrc: String

        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 主机名称
        public let hostName: String

        /// 内网IP
        public let hostIP: String

        /// 外网IP
        public let publicIP: String

        /// 节点名称
        public let podName: String

        /// 事件描述
        public let description: String

        /// 解决方案
        public let solution: String

        /// 参考链接
        public let reference: [String]

        /// 恶意域名或IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let address: String?

        /// 恶意IP所属城市
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let city: String?

        /// 命中规则类型
        /// SYSTEM：系统规则
        ///  USER：用户自定义
        public let matchRuleType: String

        /// 标签特征
        public let featureLabel: String

        /// 进程权限
        public let processAuthority: String

        /// 进程md5
        public let processMd5: String

        /// 进程启动用户
        public let processStartUser: String

        /// 进程用户组
        public let processUserGroup: String

        /// 进程路径
        public let processPath: String

        /// 进程树
        public let processTree: String

        /// 进程命令行参数
        public let processParam: String

        /// 父进程启动用户
        public let parentProcessStartUser: String

        /// 父进程用户组
        public let parentProcessUserGroup: String

        /// 父进程路径
        public let parentProcessPath: String

        /// 父进程命令行参数
        public let parentProcessParam: String

        /// 祖先进程启动用户
        public let ancestorProcessStartUser: String

        /// 祖先进程用户组
        public let ancestorProcessUserGroup: String

        /// 祖先进程路径
        public let ancestorProcessPath: String

        /// 祖先进程命令行参数
        public let ancestorProcessParam: String

        /// 主机ID
        public let hostID: String

        /// 事件状态
        /// EVENT_UNDEAL： 待处理
        /// EVENT_DEALED：已处理
        /// EVENT_IGNORE： 已忽略
        /// EVENT_ADD_WHITE：已加白
        public let eventStatus: String

        /// 操作时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationTime: String?

        /// 备注
        public let remark: String

        /// 节点类型
        public let nodeType: String

        /// 节点名称
        public let nodeName: String

        /// 节点子网ID
        public let nodeSubNetID: String

        /// 节点子网名称
        public let nodeSubNetName: String

        /// 节点子网网段
        public let nodeSubNetCIDR: String

        /// 集群ID
        public let clusterID: String

        /// podip
        public let podIP: String

        /// pod状态
        public let podStatus: String

        /// 节点唯一id
        public let nodeUniqueID: String

        /// 节点ID名称
        public let nodeID: String

        /// 集群名称
        public let clusterName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case eventID = "EventID"
            case eventType = "EventType"
            case eventCount = "EventCount"
            case foundTime = "FoundTime"
            case latestFoundTime = "LatestFoundTime"
            case containerID = "ContainerID"
            case containerName = "ContainerName"
            case containerNetStatus = "ContainerNetStatus"
            case containerStatus = "ContainerStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case imageID = "ImageID"
            case imageName = "ImageName"
            case hostName = "HostName"
            case hostIP = "HostIP"
            case publicIP = "PublicIP"
            case podName = "PodName"
            case description = "Description"
            case solution = "Solution"
            case reference = "Reference"
            case address = "Address"
            case city = "City"
            case matchRuleType = "MatchRuleType"
            case featureLabel = "FeatureLabel"
            case processAuthority = "ProcessAuthority"
            case processMd5 = "ProcessMd5"
            case processStartUser = "ProcessStartUser"
            case processUserGroup = "ProcessUserGroup"
            case processPath = "ProcessPath"
            case processTree = "ProcessTree"
            case processParam = "ProcessParam"
            case parentProcessStartUser = "ParentProcessStartUser"
            case parentProcessUserGroup = "ParentProcessUserGroup"
            case parentProcessPath = "ParentProcessPath"
            case parentProcessParam = "ParentProcessParam"
            case ancestorProcessStartUser = "AncestorProcessStartUser"
            case ancestorProcessUserGroup = "AncestorProcessUserGroup"
            case ancestorProcessPath = "AncestorProcessPath"
            case ancestorProcessParam = "AncestorProcessParam"
            case hostID = "HostID"
            case eventStatus = "EventStatus"
            case operationTime = "OperationTime"
            case remark = "Remark"
            case nodeType = "NodeType"
            case nodeName = "NodeName"
            case nodeSubNetID = "NodeSubNetID"
            case nodeSubNetName = "NodeSubNetName"
            case nodeSubNetCIDR = "NodeSubNetCIDR"
            case clusterID = "ClusterID"
            case podIP = "PodIP"
            case podStatus = "PodStatus"
            case nodeUniqueID = "NodeUniqueID"
            case nodeID = "NodeID"
            case clusterName = "ClusterName"
            case requestId = "RequestId"
        }
    }

    /// 查询恶意请求事件详情
    @inlinable
    public func describeRiskDnsEventDetail(_ input: DescribeRiskDnsEventDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRiskDnsEventDetailResponse> {
        self.client.execute(action: "DescribeRiskDnsEventDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询恶意请求事件详情
    @inlinable
    public func describeRiskDnsEventDetail(_ input: DescribeRiskDnsEventDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRiskDnsEventDetailResponse {
        try await self.client.execute(action: "DescribeRiskDnsEventDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询恶意请求事件详情
    @inlinable
    public func describeRiskDnsEventDetail(eventID: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRiskDnsEventDetailResponse> {
        self.describeRiskDnsEventDetail(.init(eventID: eventID), region: region, logger: logger, on: eventLoop)
    }

    /// 查询恶意请求事件详情
    @inlinable
    public func describeRiskDnsEventDetail(eventID: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRiskDnsEventDetailResponse {
        try await self.describeRiskDnsEventDetail(.init(eventID: eventID), region: region, logger: logger, on: eventLoop)
    }
}
