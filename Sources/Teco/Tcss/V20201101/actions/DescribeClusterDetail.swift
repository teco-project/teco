//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// DescribeClusterDetail请求参数结构体
    public struct DescribeClusterDetailRequest: TCRequestModel {
        /// 集群id
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    /// DescribeClusterDetail返回参数结构体
    public struct DescribeClusterDetailResponse: TCResponseModel {
        /// 集群id
        public let clusterId: String

        /// 集群名字
        public let clusterName: String

        /// 当前集群扫描任务的进度，100表示扫描完成.
        public let scanTaskProgress: Int64

        /// 集群版本
        public let clusterVersion: String

        /// 运行时组件
        public let containerRuntime: String

        /// 集群节点数
        public let clusterNodeNum: UInt64

        /// 集群状态 (Running 运行中 Creating 创建中 Abnormal 异常 )
        public let clusterStatus: String

        /// 集群类型：为托管集群MANAGED_CLUSTER、独立集群INDEPENDENT_CLUSTER
        public let clusterType: String

        /// 集群区域
        public let region: String

        /// 严重风险检查项的数量
        public let seriousRiskCount: UInt64

        /// 高风险检查项的数量
        public let highRiskCount: UInt64

        /// 中风险检查项的数量
        public let middleRiskCount: UInt64

        /// 提示风险检查项的数量
        public let hintRiskCount: UInt64

        /// 检查任务的状态
        public let checkStatus: String

        /// 防御容器状态
        public let defenderStatus: String

        /// 扫描任务创建时间
        public let taskCreateTime: String

        /// 网络类型.PublicNetwork为公网类型,VPCNetwork为VPC网络
        public let networkType: String

        /// API Server地址
        public let apiServerAddress: String

        /// 节点数
        public let nodeCount: UInt64

        /// 命名空间数
        public let namespaceCount: UInt64

        /// 工作负载数
        public let workloadCount: UInt64

        /// Pod数量
        public let podCount: UInt64

        /// Service数量
        public let serviceCount: UInt64

        /// Ingress数量
        public let ingressCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case scanTaskProgress = "ScanTaskProgress"
            case clusterVersion = "ClusterVersion"
            case containerRuntime = "ContainerRuntime"
            case clusterNodeNum = "ClusterNodeNum"
            case clusterStatus = "ClusterStatus"
            case clusterType = "ClusterType"
            case region = "Region"
            case seriousRiskCount = "SeriousRiskCount"
            case highRiskCount = "HighRiskCount"
            case middleRiskCount = "MiddleRiskCount"
            case hintRiskCount = "HintRiskCount"
            case checkStatus = "CheckStatus"
            case defenderStatus = "DefenderStatus"
            case taskCreateTime = "TaskCreateTime"
            case networkType = "NetworkType"
            case apiServerAddress = "ApiServerAddress"
            case nodeCount = "NodeCount"
            case namespaceCount = "NamespaceCount"
            case workloadCount = "WorkloadCount"
            case podCount = "PodCount"
            case serviceCount = "ServiceCount"
            case ingressCount = "IngressCount"
            case requestId = "RequestId"
        }
    }

    /// 查询单个集群的详细信息
    @inlinable
    public func describeClusterDetail(_ input: DescribeClusterDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterDetailResponse> {
        self.client.execute(action: "DescribeClusterDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询单个集群的详细信息
    @inlinable
    public func describeClusterDetail(_ input: DescribeClusterDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterDetailResponse {
        try await self.client.execute(action: "DescribeClusterDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询单个集群的详细信息
    @inlinable
    public func describeClusterDetail(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterDetailResponse> {
        self.describeClusterDetail(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询单个集群的详细信息
    @inlinable
    public func describeClusterDetail(clusterId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterDetailResponse {
        try await self.describeClusterDetail(.init(clusterId: clusterId), region: region, logger: logger, on: eventLoop)
    }
}
