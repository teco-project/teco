//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// DescribeSecLogAlertMsg请求参数结构体
    public struct DescribeSecLogAlertMsgRequest: TCRequestModel {
        /// 告警类型
        /// 日志储量告警: log_reserve_full
        /// 日志存储时间告警: log_save_day_limit
        /// kafka实例/公网域名不可用: kafka_instance_domain_unavailable
        /// kafka 用户名密码错误: kafka_user_passwd_wrong
        /// kafka后台报错字段: kafka_field_wrong
        public let type: [String]?

        public init(type: [String]? = nil) {
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    /// DescribeSecLogAlertMsg返回参数结构体
    public struct DescribeSecLogAlertMsgResponse: TCResponseModel {
        /// 告警消息队列
        public let list: [SecLogAlertMsgInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case requestId = "RequestId"
        }
    }

    /// 查询安全日志告警信息
    @inlinable
    public func describeSecLogAlertMsg(_ input: DescribeSecLogAlertMsgRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecLogAlertMsgResponse> {
        self.client.execute(action: "DescribeSecLogAlertMsg", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询安全日志告警信息
    @inlinable
    public func describeSecLogAlertMsg(_ input: DescribeSecLogAlertMsgRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecLogAlertMsgResponse {
        try await self.client.execute(action: "DescribeSecLogAlertMsg", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询安全日志告警信息
    @inlinable
    public func describeSecLogAlertMsg(type: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSecLogAlertMsgResponse> {
        self.describeSecLogAlertMsg(DescribeSecLogAlertMsgRequest(type: type), region: region, logger: logger, on: eventLoop)
    }

    /// 查询安全日志告警信息
    @inlinable
    public func describeSecLogAlertMsg(type: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecLogAlertMsgResponse {
        try await self.describeSecLogAlertMsg(DescribeSecLogAlertMsgRequest(type: type), region: region, logger: logger, on: eventLoop)
    }
}
