//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// 查询安全日志投递kafka可选项
    @inlinable
    public func describeSecLogDeliveryKafkaOptions(_ input: DescribeSecLogDeliveryKafkaOptionsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeSecLogDeliveryKafkaOptionsResponse > {
        self.client.execute(action: "DescribeSecLogDeliveryKafkaOptions", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询安全日志投递kafka可选项
    @inlinable
    public func describeSecLogDeliveryKafkaOptions(_ input: DescribeSecLogDeliveryKafkaOptionsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSecLogDeliveryKafkaOptionsResponse {
        try await self.client.execute(action: "DescribeSecLogDeliveryKafkaOptions", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeSecLogDeliveryKafkaOptions请求参数结构体
    public struct DescribeSecLogDeliveryKafkaOptionsRequest: TCRequestModel {
        /// 地域，若为空则返回所有可选地域
        public let regionID: String?
        
        public init (regionID: String?) {
            self.regionID = regionID
        }
        
        enum CodingKeys: String, CodingKey {
            case regionID = "RegionID"
        }
    }
    
    /// DescribeSecLogDeliveryKafkaOptions返回参数结构体
    public struct DescribeSecLogDeliveryKafkaOptionsResponse: TCResponseModel {
        /// 实例列表
        public let instanceList: [CKafkaInstanceInfo]
        
        /// 地域列表
        public let regionList: [RegionInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case instanceList = "InstanceList"
            case regionList = "RegionList"
            case requestId = "RequestId"
        }
    }
}
