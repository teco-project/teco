//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// SetCheckMode请求参数结构体
    public struct SetCheckModeRequest: TCRequestModel {
        /// 要设置的集群ID列表
        public let clusterIds: [String]

        /// 集群检查模式(正常模式"Cluster_Normal"、主动模式"Cluster_Actived"、不设置"Cluster_Unset")
        public let clusterCheckMode: String?

        /// 0不设置 1打开 2关闭
        public let clusterAutoCheck: UInt64?

        public init(clusterIds: [String], clusterCheckMode: String? = nil, clusterAutoCheck: UInt64? = nil) {
            self.clusterIds = clusterIds
            self.clusterCheckMode = clusterCheckMode
            self.clusterAutoCheck = clusterAutoCheck
        }

        enum CodingKeys: String, CodingKey {
            case clusterIds = "ClusterIds"
            case clusterCheckMode = "ClusterCheckMode"
            case clusterAutoCheck = "ClusterAutoCheck"
        }
    }

    /// SetCheckMode返回参数结构体
    public struct SetCheckModeResponse: TCResponseModel {
        /// "Succ"表示设置成功，"Failed"表示设置失败
        public let setCheckResult: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case setCheckResult = "SetCheckResult"
            case requestId = "RequestId"
        }
    }

    /// 设置检测模式和自动检查
    @inlinable
    public func setCheckMode(_ input: SetCheckModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SetCheckModeResponse> {
        self.client.execute(action: "SetCheckMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置检测模式和自动检查
    @inlinable
    public func setCheckMode(_ input: SetCheckModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetCheckModeResponse {
        try await self.client.execute(action: "SetCheckMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置检测模式和自动检查
    @inlinable
    public func setCheckMode(clusterIds: [String], clusterCheckMode: String? = nil, clusterAutoCheck: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SetCheckModeResponse> {
        self.setCheckMode(.init(clusterIds: clusterIds, clusterCheckMode: clusterCheckMode, clusterAutoCheck: clusterAutoCheck), region: region, logger: logger, on: eventLoop)
    }

    /// 设置检测模式和自动检查
    @inlinable
    public func setCheckMode(clusterIds: [String], clusterCheckMode: String? = nil, clusterAutoCheck: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SetCheckModeResponse {
        try await self.setCheckMode(.init(clusterIds: clusterIds, clusterCheckMode: clusterCheckMode, clusterAutoCheck: clusterAutoCheck), region: region, logger: logger, on: eventLoop)
    }
}
