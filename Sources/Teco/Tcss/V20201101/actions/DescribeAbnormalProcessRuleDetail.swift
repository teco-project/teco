//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// 查询运行时异常进程策略详细信息
    ///
    /// 查询运行时异常策略详细信息
    @inlinable
    public func describeAbnormalProcessRuleDetail(_ input: DescribeAbnormalProcessRuleDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAbnormalProcessRuleDetailResponse > {
        self.client.execute(action: "DescribeAbnormalProcessRuleDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询运行时异常进程策略详细信息
    ///
    /// 查询运行时异常策略详细信息
    @inlinable
    public func describeAbnormalProcessRuleDetail(_ input: DescribeAbnormalProcessRuleDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAbnormalProcessRuleDetailResponse {
        try await self.client.execute(action: "DescribeAbnormalProcessRuleDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeAbnormalProcessRuleDetail请求参数结构体
    public struct DescribeAbnormalProcessRuleDetailRequest: TCRequestModel {
        /// 策略唯一id
        public let ruleId: String?
        
        /// 镜像id, 在添加白名单的时候使用
        public let imageId: String?
        
        /// 需要返回的数量，默认为10，最大值为100
        public let limit: UInt64?
        
        /// 偏移量，默认为0。
        public let offset: UInt64?
        
        public init (ruleId: String?, imageId: String?, limit: UInt64?, offset: UInt64?) {
            self.ruleId = ruleId
            self.imageId = imageId
            self.limit = limit
            self.offset = offset
        }
        
        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case imageId = "ImageId"
            case limit = "Limit"
            case offset = "Offset"
        }
    }
    
    /// DescribeAbnormalProcessRuleDetail返回参数结构体
    public struct DescribeAbnormalProcessRuleDetailResponse: TCResponseModel {
        /// 异常进程策略详细信息
        public let ruleDetail: AbnormalProcessRuleInfo
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case ruleDetail = "RuleDetail"
            case requestId = "RequestId"
        }
    }
}