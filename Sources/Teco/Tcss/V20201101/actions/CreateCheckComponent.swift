//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// 安装检查组件
    ///
    /// 安装检查组件，创建防护容器
    @inlinable
    public func createCheckComponent(_ input: CreateCheckComponentRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateCheckComponentResponse > {
        self.client.execute(action: "CreateCheckComponent", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 安装检查组件
    ///
    /// 安装检查组件，创建防护容器
    @inlinable
    public func createCheckComponent(_ input: CreateCheckComponentRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCheckComponentResponse {
        try await self.client.execute(action: "CreateCheckComponent", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateCheckComponent请求参数结构体
    public struct CreateCheckComponentRequest: TCRequestModel {
        /// 要安装的集群列表信息
        public let clusterInfoList: [ClusterCreateComponentItem]
        
        public init (clusterInfoList: [ClusterCreateComponentItem]) {
            self.clusterInfoList = clusterInfoList
        }
        
        enum CodingKeys: String, CodingKey {
            case clusterInfoList = "ClusterInfoList"
        }
    }
    
    /// CreateCheckComponent返回参数结构体
    public struct CreateCheckComponentResponse: TCResponseModel {
        /// "InstallSucc"表示安装成功，"InstallFailed"表示安装失败
        public let installResult: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case installResult = "InstallResult"
            case requestId = "RequestId"
        }
    }
}
