//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tcss {
    /// ModifyVulDefenceSetting请求参数结构体
    public struct ModifyVulDefenceSettingRequest: TCRequestModel {
        /// 是否开启:0: 关闭 1:开启
        public let isEnabled: Int64

        /// 漏洞防御主机范围:0：自选 1: 全部主机。IsEnabled为1时必填
        public let scope: Int64?

        /// 自选漏洞防御主机,Scope为0时必填
        public let hostIDs: [String]?

        public init(isEnabled: Int64, scope: Int64? = nil, hostIDs: [String]? = nil) {
            self.isEnabled = isEnabled
            self.scope = scope
            self.hostIDs = hostIDs
        }

        enum CodingKeys: String, CodingKey {
            case isEnabled = "IsEnabled"
            case scope = "Scope"
            case hostIDs = "HostIDs"
        }
    }

    /// ModifyVulDefenceSetting返回参数结构体
    public struct ModifyVulDefenceSettingResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 编辑漏洞防御设置
    @inlinable @discardableResult
    public func modifyVulDefenceSetting(_ input: ModifyVulDefenceSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVulDefenceSettingResponse> {
        self.client.execute(action: "ModifyVulDefenceSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑漏洞防御设置
    @inlinable @discardableResult
    public func modifyVulDefenceSetting(_ input: ModifyVulDefenceSettingRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVulDefenceSettingResponse {
        try await self.client.execute(action: "ModifyVulDefenceSetting", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑漏洞防御设置
    @inlinable @discardableResult
    public func modifyVulDefenceSetting(isEnabled: Int64, scope: Int64? = nil, hostIDs: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVulDefenceSettingResponse> {
        self.modifyVulDefenceSetting(.init(isEnabled: isEnabled, scope: scope, hostIDs: hostIDs), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑漏洞防御设置
    @inlinable @discardableResult
    public func modifyVulDefenceSetting(isEnabled: Int64, scope: Int64? = nil, hostIDs: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVulDefenceSettingResponse {
        try await self.modifyVulDefenceSetting(.init(isEnabled: isEnabled, scope: scope, hostIDs: hostIDs), region: region, logger: logger, on: eventLoop)
    }
}
