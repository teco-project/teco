//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Tcss {
    /// 灰度项目配置
    public struct ABTestConfig: TCOutputModel {
        /// 灰度项目名称
        public let projectName: String

        /// true：正在灰度，false：不在灰度
        public let status: Bool

        enum CodingKeys: String, CodingKey {
            case projectName = "ProjectName"
            case status = "Status"
        }
    }

    /// 容器运行时安全，子策略信息
    public struct AbnormalProcessChildRuleInfo: TCInputModel, TCOutputModel {
        /// 策略模式，   RULE_MODE_RELEASE: 放行
        ///    RULE_MODE_ALERT: 告警
        ///    RULE_MODE_HOLDUP:拦截
        public let ruleMode: String

        /// 进程路径
        public let processPath: String

        /// 子策略id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: String?

        /// 威胁等级，HIGH:高，MIDDLE:中，LOW:低
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleLevel: String?

        public init(ruleMode: String, processPath: String, ruleId: String? = nil, ruleLevel: String? = nil) {
            self.ruleMode = ruleMode
            self.processPath = processPath
            self.ruleId = ruleId
            self.ruleLevel = ruleLevel
        }

        enum CodingKeys: String, CodingKey {
            case ruleMode = "RuleMode"
            case processPath = "ProcessPath"
            case ruleId = "RuleId"
            case ruleLevel = "RuleLevel"
        }
    }

    /// 运行时容器访问控制事件描述信息
    public struct AbnormalProcessEventDescription: TCOutputModel {
        /// 事件规则
        public let description: String

        /// 解决方案
        public let solution: String

        /// 事件备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 命中规则详细信息
        public let matchRule: AbnormalProcessChildRuleInfo

        /// 命中规则名称，PROXY_TOOL：代理软件，TRANSFER_CONTROL：横向渗透，ATTACK_CMD：恶意命令，REVERSE_SHELL：反弹shell，FILELESS：无文件程序执行，RISK_CMD：高危命令，ABNORMAL_CHILD_PROC：敏感服务异常子进程启动，USER_DEFINED_RULE：用户自定义规则
        public let ruleName: String

        /// 命中规则的id
        public let ruleId: String

        /// 事件最后一次处理的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationTime: String?

        /// 命中策略名称：SYSTEM_DEFINED_RULE （系统策略）或  用户自定义的策略名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?

        enum CodingKeys: String, CodingKey {
            case description = "Description"
            case solution = "Solution"
            case remark = "Remark"
            case matchRule = "MatchRule"
            case ruleName = "RuleName"
            case ruleId = "RuleId"
            case operationTime = "OperationTime"
            case groupName = "GroupName"
        }
    }

    /// 容器运行时安全异常进程信息
    public struct AbnormalProcessEventInfo: TCOutputModel {
        /// 进程目录
        public let processPath: String

        /// 事件类型，MALICE_PROCESS_START:恶意进程启动
        public let eventType: String

        /// 命中规则名称，PROXY_TOOL：代理软件，TRANSFER_CONTROL：横向渗透，ATTACK_CMD：恶意命令，REVERSE_SHELL：反弹shell，FILELESS：无文件程序执行，RISK_CMD：高危命令，ABNORMAL_CHILD_PROC：敏感服务异常子进程启动，USER_DEFINED_RULE：用户自定义规则
        public let matchRuleName: String

        /// 生成时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var foundTime: Date

        /// 容器名
        public let containerName: String

        /// 镜像名
        public let imageName: String

        /// 动作执行结果，    BEHAVIOR_NONE: 无
        ///     BEHAVIOR_ALERT: 告警
        ///     BEHAVIOR_RELEASE：放行
        ///     BEHAVIOR_HOLDUP_FAILED:拦截失败
        ///     BEHAVIOR_HOLDUP_SUCCESSED：拦截失败
        public let behavior: String

        /// 状态，EVENT_UNDEAL:事件未处理
        ///     EVENT_DEALED:事件已经处理
        ///     EVENT_INGNORE：事件已经忽略
        public let status: String

        /// 事件记录的唯一id
        public let id: String

        /// 镜像id，用于跳转
        public let imageId: String

        /// 容器id，用于跳转
        public let containerId: String

        /// 事件解决方案
        public let solution: String

        /// 事件详细描述
        public let description: String

        /// 命中策略id
        public let matchRuleId: String

        /// 命中规则行为：
        /// RULE_MODE_RELEASE 放行
        /// RULE_MODE_ALERT  告警
        /// RULE_MODE_HOLDUP 拦截
        public let matchAction: String

        /// 命中规则进程信息
        public let matchProcessPath: String

        /// 规则是否存在
        public let ruleExist: Bool

        /// 事件数量
        public let eventCount: Int64

        /// 最近生成时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var latestFoundTime: Date

        /// 规则组Id
        public let ruleId: String

        /// 命中策略名称：SYSTEM_DEFINED_RULE （系统策略）或  用户自定义的策略名字
        public let matchGroupName: String

        /// 命中规则等级，HIGH：高危，MIDDLE：中危，LOW：低危。
        public let matchRuleLevel: String

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetStatus: String?

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// "NODE_DESTROYED"      //节点已销毁
        /// "CONTAINER_EXITED"    //容器已退出
        /// "CONTAINER_DESTROYED" //容器已销毁
        /// "SHARED_HOST"         // 容器与主机共享网络
        /// "RESOURCE_LIMIT"      //隔离操作资源超限
        /// "UNKNOW"              // 原因未知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetSubStatus: String?

        /// 容器隔离操作来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerIsolateOperationSrc: String?

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        public let containerStatus: String

        enum CodingKeys: String, CodingKey {
            case processPath = "ProcessPath"
            case eventType = "EventType"
            case matchRuleName = "MatchRuleName"
            case foundTime = "FoundTime"
            case containerName = "ContainerName"
            case imageName = "ImageName"
            case behavior = "Behavior"
            case status = "Status"
            case id = "Id"
            case imageId = "ImageId"
            case containerId = "ContainerId"
            case solution = "Solution"
            case description = "Description"
            case matchRuleId = "MatchRuleId"
            case matchAction = "MatchAction"
            case matchProcessPath = "MatchProcessPath"
            case ruleExist = "RuleExist"
            case eventCount = "EventCount"
            case latestFoundTime = "LatestFoundTime"
            case ruleId = "RuleId"
            case matchGroupName = "MatchGroupName"
            case matchRuleLevel = "MatchRuleLevel"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case containerStatus = "ContainerStatus"
        }
    }

    /// 待处理异常进程事件趋势
    public struct AbnormalProcessEventTendencyInfo: TCOutputModel {
        /// 日期
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var date: Date

        /// 待处理代理软件事件数
        public let proxyToolEventCount: Int64

        /// 待处理横向参透事件数
        public let transferControlEventCount: Int64

        /// 待处理恶意命令事件数
        public let attackCmdEventCount: Int64

        /// 待处理反弹shell事件数
        public let reverseShellEventCount: Int64

        /// 待处理无文件程序执行事件数
        public let filelessEventCount: Int64

        /// 待处理高危命令事件数
        public let riskCmdEventCount: Int64

        /// 待处理敏感服务异常子进程启动事件数
        public let abnormalChildProcessEventCount: Int64

        /// 待处理自定义规则事件数
        public let userDefinedRuleEventCount: Int64

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case proxyToolEventCount = "ProxyToolEventCount"
            case transferControlEventCount = "TransferControlEventCount"
            case attackCmdEventCount = "AttackCmdEventCount"
            case reverseShellEventCount = "ReverseShellEventCount"
            case filelessEventCount = "FilelessEventCount"
            case riskCmdEventCount = "RiskCmdEventCount"
            case abnormalChildProcessEventCount = "AbnormalChildProcessEventCount"
            case userDefinedRuleEventCount = "UserDefinedRuleEventCount"
        }
    }

    /// 运行时安全，异常进程检测策略
    public struct AbnormalProcessRuleInfo: TCInputModel, TCOutputModel {
        /// true:策略启用，false:策略禁用
        public let isEnable: Bool

        /// 生效镜像id，空数组代表全部镜像
        public let imageIds: [String]

        /// 用户策略的子策略数组
        public let childRules: [AbnormalProcessChildRuleInfo]

        /// 策略名字
        public let ruleName: String

        /// 策略id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: String?

        /// 系统策略的子策略数组
        public let systemChildRules: [AbnormalProcessSystemChildRuleInfo]?

        /// 是否是系统默认策略
        public let isDefault: Bool?

        public init(isEnable: Bool, imageIds: [String], childRules: [AbnormalProcessChildRuleInfo], ruleName: String, ruleId: String? = nil, systemChildRules: [AbnormalProcessSystemChildRuleInfo]? = nil, isDefault: Bool? = nil) {
            self.isEnable = isEnable
            self.imageIds = imageIds
            self.childRules = childRules
            self.ruleName = ruleName
            self.ruleId = ruleId
            self.systemChildRules = systemChildRules
            self.isDefault = isDefault
        }

        enum CodingKeys: String, CodingKey {
            case isEnable = "IsEnable"
            case imageIds = "ImageIds"
            case childRules = "ChildRules"
            case ruleName = "RuleName"
            case ruleId = "RuleId"
            case systemChildRules = "SystemChildRules"
            case isDefault = "IsDefault"
        }
    }

    /// 异常进程系统策略的子策略信息
    public struct AbnormalProcessSystemChildRuleInfo: TCInputModel, TCOutputModel {
        /// 子策略Id
        public let ruleId: String

        /// 子策略状态，true为开启，false为关闭
        public let isEnable: Bool

        /// 策略模式,  RULE_MODE_RELEASE: 放行
        ///    RULE_MODE_ALERT: 告警
        ///    RULE_MODE_HOLDUP:拦截
        public let ruleMode: String

        /// 子策略检测的行为类型
        /// PROXY_TOOL： 代理软件
        /// TRANSFER_CONTROL：横向渗透
        /// ATTACK_CMD： 恶意命令
        /// REVERSE_SHELL：反弹shell
        /// FILELESS：无文件程序执行
        /// RISK_CMD：高危命令
        /// ABNORMAL_CHILD_PROC: 敏感服务异常子进程启动
        public let ruleType: String

        /// 威胁等级，HIGH:高，MIDDLE:中，LOW:低
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleLevel: String?

        public init(ruleId: String, isEnable: Bool, ruleMode: String, ruleType: String, ruleLevel: String? = nil) {
            self.ruleId = ruleId
            self.isEnable = isEnable
            self.ruleMode = ruleMode
            self.ruleType = ruleType
            self.ruleLevel = ruleLevel
        }

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case isEnable = "IsEnable"
            case ruleMode = "RuleMode"
            case ruleType = "RuleType"
            case ruleLevel = "RuleLevel"
        }
    }

    /// 容器运行时安全，访问控制子策略信息
    public struct AccessControlChildRuleInfo: TCInputModel, TCOutputModel {
        /// 策略模式,  RULE_MODE_RELEASE: 放行
        ///    RULE_MODE_ALERT: 告警
        ///    RULE_MODE_HOLDUP:拦截
        public let ruleMode: String

        /// 进程路径
        public let processPath: String

        /// 被访问文件路径，仅仅在访问控制生效
        public let targetFilePath: String

        /// 子策略id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: String?

        public init(ruleMode: String, processPath: String, targetFilePath: String, ruleId: String? = nil) {
            self.ruleMode = ruleMode
            self.processPath = processPath
            self.targetFilePath = targetFilePath
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case ruleMode = "RuleMode"
            case processPath = "ProcessPath"
            case targetFilePath = "TargetFilePath"
            case ruleId = "RuleId"
        }
    }

    /// 运行时容器访问控制事件描述信息
    public struct AccessControlEventDescription: TCOutputModel {
        /// 事件规则
        public let description: String

        /// 解决方案
        public let solution: String

        /// 事件备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 命中规则详细信息
        public let matchRule: AccessControlChildRuleInfo

        /// 命中规则名字
        public let ruleName: String

        /// 命中规则id
        public let ruleId: String

        /// 事件最后一次处理的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationTime: String?

        enum CodingKeys: String, CodingKey {
            case description = "Description"
            case solution = "Solution"
            case remark = "Remark"
            case matchRule = "MatchRule"
            case ruleName = "RuleName"
            case ruleId = "RuleId"
            case operationTime = "OperationTime"
        }
    }

    /// 容器运行时安全访问控制事件信息
    public struct AccessControlEventInfo: TCOutputModel {
        /// 进程名称
        public let processName: String

        /// 命中规则名称
        public let matchRuleName: String

        /// 生成时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var foundTime: Date

        /// 容器名
        public let containerName: String

        /// 镜像名
        public let imageName: String

        /// 动作执行结果，   BEHAVIOR_NONE: 无
        ///     BEHAVIOR_ALERT: 告警
        ///     BEHAVIOR_RELEASE：放行
        ///     BEHAVIOR_HOLDUP_FAILED:拦截失败
        ///     BEHAVIOR_HOLDUP_SUCCESSED：拦截失败
        public let behavior: String

        /// 状态0:未处理  “EVENT_UNDEAL”:事件未处理
        ///     "EVENT_DEALED":事件已经处理
        ///     "EVENT_INGNORE"：事件已经忽略
        public let status: String

        /// 事件记录的唯一id
        public let id: String

        /// 文件名称
        public let fileName: String

        /// 事件类型， FILE_ABNORMAL_READ:文件异常读取
        public let eventType: String

        /// 镜像id, 用于跳转
        public let imageId: String

        /// 容器id, 用于跳转
        public let containerId: String

        /// 事件解决方案
        public let solution: String

        /// 事件详细描述
        public let description: String

        /// 命中策略id
        public let matchRuleId: String

        /// 命中规则行为：
        /// RULE_MODE_RELEASE 放行
        /// RULE_MODE_ALERT  告警
        /// RULE_MODE_HOLDUP 拦截
        public let matchAction: String

        /// 命中规则进程信息
        public let matchProcessPath: String

        /// 命中规则文件信息
        public let matchFilePath: String

        /// 文件路径，包含名字
        public let filePath: String

        /// 规则是否存在
        public let ruleExist: Bool

        /// 事件数量
        public let eventCount: Int64

        /// 最近生成时间
        public let latestFoundTime: String

        /// 规则组id
        public let ruleId: String

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        public let containerNetStatus: String

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// "NODE_DESTROYED"      //节点已销毁
        /// "CONTAINER_EXITED"    //容器已退出
        /// "CONTAINER_DESTROYED" //容器已销毁
        /// "SHARED_HOST"         // 容器与主机共享网络
        /// "RESOURCE_LIMIT"      //隔离操作资源超限
        /// "UNKNOW"              // 原因未知
        public let containerNetSubStatus: String

        /// 容器隔离操作来源
        public let containerIsolateOperationSrc: String

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        public let containerStatus: String

        enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
            case matchRuleName = "MatchRuleName"
            case foundTime = "FoundTime"
            case containerName = "ContainerName"
            case imageName = "ImageName"
            case behavior = "Behavior"
            case status = "Status"
            case id = "Id"
            case fileName = "FileName"
            case eventType = "EventType"
            case imageId = "ImageId"
            case containerId = "ContainerId"
            case solution = "Solution"
            case description = "Description"
            case matchRuleId = "MatchRuleId"
            case matchAction = "MatchAction"
            case matchProcessPath = "MatchProcessPath"
            case matchFilePath = "MatchFilePath"
            case filePath = "FilePath"
            case ruleExist = "RuleExist"
            case eventCount = "EventCount"
            case latestFoundTime = "LatestFoundTime"
            case ruleId = "RuleId"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case containerStatus = "ContainerStatus"
        }
    }

    /// 容器运行时，访问控制策略信息
    public struct AccessControlRuleInfo: TCInputModel, TCOutputModel {
        /// 开关,true:开启，false:禁用
        public let isEnable: Bool

        /// 生效惊现id，空数组代表全部镜像
        public let imageIds: [String]

        /// 用户策略的子策略数组
        public let childRules: [AccessControlChildRuleInfo]

        /// 策略名字
        public let ruleName: String

        /// 策略id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: String?

        /// 系统策略的子策略数组
        public let systemChildRules: [AccessControlSystemChildRuleInfo]?

        /// 是否是系统默认策略
        public let isDefault: Bool?

        public init(isEnable: Bool, imageIds: [String], childRules: [AccessControlChildRuleInfo], ruleName: String, ruleId: String? = nil, systemChildRules: [AccessControlSystemChildRuleInfo]? = nil, isDefault: Bool? = nil) {
            self.isEnable = isEnable
            self.imageIds = imageIds
            self.childRules = childRules
            self.ruleName = ruleName
            self.ruleId = ruleId
            self.systemChildRules = systemChildRules
            self.isDefault = isDefault
        }

        enum CodingKeys: String, CodingKey {
            case isEnable = "IsEnable"
            case imageIds = "ImageIds"
            case childRules = "ChildRules"
            case ruleName = "RuleName"
            case ruleId = "RuleId"
            case systemChildRules = "SystemChildRules"
            case isDefault = "IsDefault"
        }
    }

    /// 容器运行时安全，访问控制系统策略的子策略信息
    public struct AccessControlSystemChildRuleInfo: TCInputModel, TCOutputModel {
        /// 子策略Id
        public let ruleId: String

        /// 策略模式,  RULE_MODE_RELEASE: 放行
        ///    RULE_MODE_ALERT: 告警
        ///    RULE_MODE_HOLDUP:拦截
        public let ruleMode: String

        /// 子策略状态，true为开启，false为关闭
        public let isEnable: Bool

        /// 子策略检测的入侵行为类型
        /// CHANGE_CRONTAB：篡改计划任务
        /// CHANGE_SYS_BIN：篡改系统程序
        /// CHANGE_USRCFG：篡改用户配置
        public let ruleType: String

        public init(ruleId: String, ruleMode: String, isEnable: Bool, ruleType: String) {
            self.ruleId = ruleId
            self.ruleMode = ruleMode
            self.isEnable = isEnable
            self.ruleType = ruleType
        }

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case ruleMode = "RuleMode"
            case isEnable = "IsEnable"
            case ruleType = "RuleType"
        }
    }

    /// 受影响的节点类型结构体
    public struct AffectedNodeItem: TCOutputModel {
        /// 集群ID
        public let clusterId: String

        /// 集群名字
        public let clusterName: String

        /// 实例id
        public let instanceId: String

        /// 内网ip地址
        public let privateIpAddresses: String

        /// 节点的角色，Master、Work等
        public let instanceRole: String

        /// k8s版本
        public let clusterVersion: String

        /// 运行时组件,docker或者containerd
        public let containerRuntime: String

        /// 区域
        public let region: String

        /// 检查结果的验证信息
        public let verifyInfo: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case instanceId = "InstanceId"
            case privateIpAddresses = "PrivateIpAddresses"
            case instanceRole = "InstanceRole"
            case clusterVersion = "ClusterVersion"
            case containerRuntime = "ContainerRuntime"
            case region = "Region"
            case verifyInfo = "VerifyInfo"
        }
    }

    /// 集群安全检查受影响的工作负载Item
    public struct AffectedWorkloadItem: TCOutputModel {
        /// 集群Id
        public let clusterId: String

        /// 集群名字
        public let clusterName: String

        /// 工作负载名称
        public let workloadName: String

        /// 工作负载类型
        public let workloadType: String

        /// 区域
        public let region: String

        /// 检测结果的验证信息
        public let verifyInfo: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case workloadName = "WorkloadName"
            case workloadType = "WorkloadType"
            case region = "Region"
            case verifyInfo = "VerifyInfo"
        }
    }

    /// 集群列表Item
    public struct AssetClusterListItem: TCOutputModel {
        /// 集群ID
        public let clusterID: String

        /// 集群名称
        public let clusterName: String

        /// 集群状态
        /// CSR_RUNNING: 运行中
        /// CSR_EXCEPTION:异常
        /// CSR_DEL:已经删除
        public let status: String

        /// 绑定规则名称
        public let bindRuleName: String

        /// 集群类型:
        /// CT_TKE: TKE集群
        /// CT_USER_CREATE: 用户自建集群
        public let clusterType: String

        enum CodingKeys: String, CodingKey {
            case clusterID = "ClusterID"
            case clusterName = "ClusterName"
            case status = "Status"
            case bindRuleName = "BindRuleName"
            case clusterType = "ClusterType"
        }
    }

    /// 容器安全
    /// 描述键值对过滤器，用于条件过滤查询。例如过滤ID、名称、状态等
    /// 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
    /// 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct AssetFilters: TCInputModel {
        /// 过滤键的名称
        public let name: String

        /// 一个或者多个过滤值。
        public let values: [String]

        /// 是否模糊查询
        public let exactMatch: Bool?

        public init(name: String, values: [String], exactMatch: Bool? = nil) {
            self.name = name
            self.values = values
            self.exactMatch = exactMatch
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case exactMatch = "ExactMatch"
        }
    }

    /// 容器安全资产镜像简略信息
    public struct AssetSimpleImageInfo: TCOutputModel {
        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 关联容器个数
        public let containerCnt: UInt64

        /// 最后扫描时间
        public let scanTime: String

        /// 镜像大小
        public let size: UInt64

        enum CodingKeys: String, CodingKey {
            case imageID = "ImageID"
            case imageName = "ImageName"
            case containerCnt = "ContainerCnt"
            case scanTime = "ScanTime"
            case size = "Size"
        }
    }

    /// 镜像自动授权结果信息
    public struct AutoAuthorizedImageInfo: TCOutputModel {
        /// 镜像id
        public let imageId: String

        /// 镜像名称
        public let imageName: String

        /// 授权时间
        public let authorizedTime: String

        /// 授权结果，SUCCESS:成功，REACH_LIMIT:达到授权上限，LICENSE_INSUFFICIENT:授权数不足'
        public let status: String

        /// 是否授权，1：是，0：否
        public let isAuthorized: UInt64

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case imageName = "ImageName"
            case authorizedTime = "AuthorizedTime"
            case status = "Status"
            case isAuthorized = "IsAuthorized"
        }
    }

    /// 自动授权镜像规则授权范围主机列表
    public struct AutoAuthorizedRuleHostInfo: TCOutputModel {
        /// 主机id
        public let hostID: String

        /// 主机ip即内网ip
        public let hostIP: String

        /// 主机名称
        public let hostName: String

        /// 镜像个数
        public let imageCnt: UInt64

        /// 容器个数
        public let containerCnt: UInt64

        /// 外网ip
        public let publicIp: String

        /// 主机实例ID
        public let instanceID: String

        /// 主机来源：["CVM", "ECM", "LH", "BM"]  中的之一为腾讯云服务器；["Other"]之一非腾讯云服务器；
        public let machineType: String

        /// docker 版本
        public let dockerVersion: String

        /// agent运行状态
        public let status: String

        enum CodingKeys: String, CodingKey {
            case hostID = "HostID"
            case hostIP = "HostIP"
            case hostName = "HostName"
            case imageCnt = "ImageCnt"
            case containerCnt = "ContainerCnt"
            case publicIp = "PublicIp"
            case instanceID = "InstanceID"
            case machineType = "MachineType"
            case dockerVersion = "DockerVersion"
            case status = "Status"
        }
    }

    /// 安全日志kafka可选信息
    public struct CKafkaInstanceInfo: TCInputModel, TCOutputModel {
        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceID: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 主题列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicList: [CKafkaTopicInfo]?

        /// 路由列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let routeList: [CkafkaRouteInfo]?

        /// kafka版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kafkaVersion: String?

        public init(instanceID: String? = nil, instanceName: String? = nil, topicList: [CKafkaTopicInfo]? = nil, routeList: [CkafkaRouteInfo]? = nil, kafkaVersion: String? = nil) {
            self.instanceID = instanceID
            self.instanceName = instanceName
            self.topicList = topicList
            self.routeList = routeList
            self.kafkaVersion = kafkaVersion
        }

        enum CodingKeys: String, CodingKey {
            case instanceID = "InstanceID"
            case instanceName = "InstanceName"
            case topicList = "TopicList"
            case routeList = "RouteList"
            case kafkaVersion = "KafkaVersion"
        }
    }

    /// Ckafka topic信息
    public struct CKafkaTopicInfo: TCInputModel, TCOutputModel {
        /// 主题ID
        public let topicID: String

        /// 主题名称
        public let topicName: String

        public init(topicID: String, topicName: String) {
            self.topicID = topicID
            self.topicName = topicName
        }

        enum CodingKeys: String, CodingKey {
            case topicID = "TopicID"
            case topicName = "TopicName"
        }
    }

    /// ckafkal路由详情
    public struct CkafkaRouteInfo: TCInputModel, TCOutputModel {
        /// 路由ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let routeID: Int64?

        /// 域名名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// 域名端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domainPort: UInt64?

        /// 虚拟ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 虚拟ip类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vipType: Int64?

        /// 接入类型
        /// // 0：PLAINTEXT (明文方式，没有带用户信息老版本及社区版本都支持)
        /// 	// 1：SASL_PLAINTEXT（明文方式，不过在数据开始时，会通过SASL方式登录鉴权，仅社区版本支持）
        /// 	// 2：SSL（SSL加密通信，没有带用户信息，老版本及社区版本都支持）
        /// 	// 3：SASL_SSL（SSL加密通信，在数据开始时，会通过SASL方式登录鉴权，仅社区版本支持）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessType: Int64?

        public init(routeID: Int64? = nil, domain: String? = nil, domainPort: UInt64? = nil, vip: String? = nil, vipType: Int64? = nil, accessType: Int64? = nil) {
            self.routeID = routeID
            self.domain = domain
            self.domainPort = domainPort
            self.vip = vip
            self.vipType = vipType
            self.accessType = accessType
        }

        enum CodingKeys: String, CodingKey {
            case routeID = "RouteID"
            case domain = "Domain"
            case domainPort = "DomainPort"
            case vip = "Vip"
            case vipType = "VipType"
            case accessType = "AccessType"
        }
    }

    /// cls日志集信息
    public struct ClsLogsetInfo: TCInputModel, TCOutputModel {
        /// 日志集ID
        public let logsetID: String

        /// 日志集名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logsetName: String?

        /// cls主题列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicList: [ClsTopicInfo]?

        public init(logsetID: String, logsetName: String? = nil, topicList: [ClsTopicInfo]? = nil) {
            self.logsetID = logsetID
            self.logsetName = logsetName
            self.topicList = topicList
        }

        enum CodingKeys: String, CodingKey {
            case logsetID = "LogsetID"
            case logsetName = "LogsetName"
            case topicList = "TopicList"
        }
    }

    /// cls主题信息
    public struct ClsTopicInfo: TCOutputModel {
        /// 主题ID
        public let topicID: String

        /// 主题名称
        public let topicName: String

        enum CodingKeys: String, CodingKey {
            case topicID = "TopicID"
            case topicName = "TopicName"
        }
    }

    /// 表示一条集群安全检测项的详细信息
    public struct ClusterCheckItem: TCOutputModel {
        /// 唯一的检测项的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkItemId: Int64?

        /// 风险项的名称
        public let name: String

        /// 检测项详细描述。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let itemDetail: String?

        /// 威胁等级。严重Serious,高危High,中危Middle,提示Hint
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: String?

        /// 检查对象、风险对象.Runc,Kubelet,Containerd,Pods
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskTarget: String?

        /// 风险类别,漏洞风险CVERisk,配置风险ConfigRisk
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskType: String?

        /// 检测项所属的风险类型,权限提升:PrivilegePromotion,拒绝服务:RefuseService,目录穿越:DirectoryEscape,未授权访问:UnauthorizedAccess,权限许可和访问控制问题:PrivilegeAndAccessControl,敏感信息泄露:SensitiveInfoLeak
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskAttribute: String?

        /// 风险特征,Tag.存在EXP:ExistEXP,存在POD:ExistPOC,无需重启:NoNeedReboot, 服务重启:ServerRestart,远程信息泄露:RemoteInfoLeak,远程拒绝服务:RemoteRefuseService,远程利用:RemoteExploit,远程执行:RemoteExecute
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskProperty: String?

        /// CVE编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cveNumber: String?

        /// 披露时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let discoverTime: String?

        /// 解决方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let solution: String?

        /// CVSS信息,用于画图
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvss: String?

        /// CVSS分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvssScore: String?

        /// 参考连接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let relateLink: String?

        /// 影响类型，为Node或者Workload
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let affectedType: String?

        /// 受影响的版本信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let affectedVersion: String?

        /// 忽略的资产数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoredAssetNum: Int64?

        /// 是否忽略该检测项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isIgnored: Bool?

        /// 受影响评估
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskAssessment: String?

        enum CodingKeys: String, CodingKey {
            case checkItemId = "CheckItemId"
            case name = "Name"
            case itemDetail = "ItemDetail"
            case riskLevel = "RiskLevel"
            case riskTarget = "RiskTarget"
            case riskType = "RiskType"
            case riskAttribute = "RiskAttribute"
            case riskProperty = "RiskProperty"
            case cveNumber = "CVENumber"
            case discoverTime = "DiscoverTime"
            case solution = "Solution"
            case cvss = "CVSS"
            case cvssScore = "CVSSScore"
            case relateLink = "RelateLink"
            case affectedType = "AffectedType"
            case affectedVersion = "AffectedVersion"
            case ignoredAssetNum = "IgnoredAssetNum"
            case isIgnored = "IsIgnored"
            case riskAssessment = "RiskAssessment"
        }
    }

    /// 集群检查任务入参
    public struct ClusterCheckTaskItem: TCInputModel {
        /// 指定要扫描的集群ID
        public let clusterId: String

        /// 集群所属地域
        public let clusterRegion: String

        /// 指定要扫描的节点IP
        public let nodeIp: String?

        /// 按照要扫描的workload名字
        public let workloadName: String?

        public init(clusterId: String, clusterRegion: String, nodeIp: String? = nil, workloadName: String? = nil) {
            self.clusterId = clusterId
            self.clusterRegion = clusterRegion
            self.nodeIp = nodeIp
            self.workloadName = workloadName
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterRegion = "ClusterRegion"
            case nodeIp = "NodeIp"
            case workloadName = "WorkloadName"
        }
    }

    /// CreateCheckComponent的入口参数,用于批量安装防御容器
    public struct ClusterCreateComponentItem: TCInputModel {
        /// 要安装组件的集群ID。
        public let clusterId: String

        /// 该集群对应的地域
        public let clusterRegion: String

        public init(clusterId: String, clusterRegion: String) {
            self.clusterId = clusterId
            self.clusterRegion = clusterRegion
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterRegion = "ClusterRegion"
        }
    }

    /// 集群资产返回的结构体
    public struct ClusterInfoItem: TCOutputModel {
        /// 集群id
        public let clusterId: String

        /// 集群名字
        public let clusterName: String

        /// 集群版本
        public let clusterVersion: String

        /// 集群操作系统
        public let clusterOs: String

        /// 集群类型
        public let clusterType: String

        /// 集群节点数
        public let clusterNodeNum: UInt64

        /// 集群区域
        public let region: String

        /// 监控组件的状态，为Defender_Uninstall、Defender_Normal、Defender_Error、Defender_Installing
        public let defenderStatus: String

        /// 集群状态
        public let clusterStatus: String

        /// 集群的检测模式，为Cluster_Normal或者Cluster_Actived.
        public let clusterCheckMode: String

        /// 是否自动定期检测
        public let clusterAutoCheck: Bool

        /// 防护容器部署失败原因，为UserDaemonSetNotReady时,和UnreadyNodeNum转成"N个节点防御容器为就绪"，其他错误直接展示
        public let defenderErrorReason: String

        /// 防御容器没有ready状态的节点数量
        public let unreadyNodeNum: UInt64

        /// 严重风险检查项的数量
        public let seriousRiskCount: Int64

        /// 高风险检查项的数量
        public let highRiskCount: Int64

        /// 中风险检查项的数量
        public let middleRiskCount: Int64

        /// 提示风险检查项的数量
        public let hintRiskCount: Int64

        /// 检查失败原因
        public let checkFailReason: String

        /// 检查状态,为Task_Running, NoRisk, HasRisk, Uncheck, Task_Error
        public let checkStatus: String

        /// 任务创建时间,检查时间
        public let taskCreateTime: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case clusterVersion = "ClusterVersion"
            case clusterOs = "ClusterOs"
            case clusterType = "ClusterType"
            case clusterNodeNum = "ClusterNodeNum"
            case region = "Region"
            case defenderStatus = "DefenderStatus"
            case clusterStatus = "ClusterStatus"
            case clusterCheckMode = "ClusterCheckMode"
            case clusterAutoCheck = "ClusterAutoCheck"
            case defenderErrorReason = "DefenderErrorReason"
            case unreadyNodeNum = "UnreadyNodeNum"
            case seriousRiskCount = "SeriousRiskCount"
            case highRiskCount = "HighRiskCount"
            case middleRiskCount = "MiddleRiskCount"
            case hintRiskCount = "HintRiskCount"
            case checkFailReason = "CheckFailReason"
            case checkStatus = "CheckStatus"
            case taskCreateTime = "TaskCreateTime"
        }
    }

    /// 风险项是检查完之后，有问题的检测项，并且加了一些检查结果信息。
    public struct ClusterRiskItem: TCOutputModel {
        /// 检测项相关信息
        public let checkItem: ClusterCheckItem

        /// 验证信息
        public let verifyInfo: String

        /// 事件描述,检查的错误信息
        public let errorMessage: String

        /// 受影响的集群数量
        public let affectedClusterCount: UInt64

        /// 受影响的节点数量
        public let affectedNodeCount: UInt64

        enum CodingKeys: String, CodingKey {
            case checkItem = "CheckItem"
            case verifyInfo = "VerifyInfo"
            case errorMessage = "ErrorMessage"
            case affectedClusterCount = "AffectedClusterCount"
            case affectedNodeCount = "AffectedNodeCount"
        }
    }

    /// 表示检测项所影响的资产的信息。
    public struct ComplianceAffectedAsset: TCOutputModel {
        /// 为客户分配的唯一的资产项的ID。
        public let customerAssetId: UInt64

        /// 资产项的名称。
        public let assetName: String

        /// 资产项的类型
        public let assetType: String

        /// 检测状态
        ///
        /// CHECK_INIT, 待检测
        ///
        /// CHECK_RUNNING, 检测中
        ///
        /// CHECK_FINISHED, 检测完成
        ///
        /// CHECK_FAILED, 检测失败
        public let checkStatus: String

        /// 节点名称。
        public let nodeName: String

        /// 上次检测的时间，格式为”YYYY-MM-DD HH:m::SS“。
        ///
        /// 如果没有检测过，此处为”0000-00-00 00:00:00“。
        public let lastCheckTime: String

        /// 检测结果。取值为：
        ///
        /// RESULT_FAILED: 未通过
        ///
        /// RESULT_PASSED: 通过
        public let checkResult: String

        /// 主机IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostIP: String?

        /// 镜像的tag
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageTag: String?

        /// 检查项验证信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let verifyInfo: String?

        enum CodingKeys: String, CodingKey {
            case customerAssetId = "CustomerAssetId"
            case assetName = "AssetName"
            case assetType = "AssetType"
            case checkStatus = "CheckStatus"
            case nodeName = "NodeName"
            case lastCheckTime = "LastCheckTime"
            case checkResult = "CheckResult"
            case hostIP = "HostIP"
            case imageTag = "ImageTag"
            case verifyInfo = "VerifyInfo"
        }
    }

    /// 表示一项资产的详情。
    public struct ComplianceAssetDetailInfo: TCOutputModel {
        /// 客户资产的ID。
        public let customerAssetId: UInt64

        /// 资产类别。
        public let assetType: String

        /// 资产的名称。
        public let assetName: String

        /// 资产所属的节点的名称。
        public let nodeName: String

        /// 资产所在的主机的名称。
        public let hostName: String

        /// 资产所在的主机的IP。
        public let hostIP: String

        /// 检测状态
        /// CHECK_INIT, 待检测
        /// CHECK_RUNNING, 检测中
        /// CHECK_FINISHED, 检测完成
        /// CHECK_FAILED, 检测失败
        public let checkStatus: String

        /// 此类资产通过的检测项的数目。
        public let passedPolicyItemCount: UInt64

        /// 此类资产未通过的检测的数目。
        public let failedPolicyItemCount: UInt64

        /// 上次检测的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var lastCheckTime: Date?

        /// 检测结果：
        /// RESULT_FAILED: 未通过。
        /// RESULT_PASSED: 通过。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkResult: String?

        /// 资产的运行状态。
        public let assetStatus: String

        /// 创建资产的时间。
        /// ASSET_NORMAL: 正常运行，
        /// ASSET_PAUSED: 暂停运行，
        /// ASSET_STOPPED: 停止运行，
        /// ASSET_ABNORMAL: 异常
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var assetCreateTime: Date

        enum CodingKeys: String, CodingKey {
            case customerAssetId = "CustomerAssetId"
            case assetType = "AssetType"
            case assetName = "AssetName"
            case nodeName = "NodeName"
            case hostName = "HostName"
            case hostIP = "HostIP"
            case checkStatus = "CheckStatus"
            case passedPolicyItemCount = "PassedPolicyItemCount"
            case failedPolicyItemCount = "FailedPolicyItemCount"
            case lastCheckTime = "LastCheckTime"
            case checkResult = "CheckResult"
            case assetStatus = "AssetStatus"
            case assetCreateTime = "AssetCreateTime"
        }
    }

    /// 表示一项资产的信息。
    public struct ComplianceAssetInfo: TCOutputModel {
        /// 客户资产的ID。
        public let customerAssetId: UInt64

        /// 资产类别。
        public let assetType: String

        /// 资产的名称。
        public let assetName: String

        /// 当资产为镜像时，这个字段为镜像Tag。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageTag: String?

        /// 资产所在的主机IP。
        public let hostIP: String

        /// 资产所属的节点的名称
        public let nodeName: String

        /// 检测状态
        ///
        /// CHECK_INIT, 待检测
        ///
        /// CHECK_RUNNING, 检测中
        ///
        /// CHECK_FINISHED, 检测完成
        ///
        /// CHECK_FAILED, 检测失败
        public let checkStatus: String

        /// 此类资产通过的检测项的数目。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let passedPolicyItemCount: UInt64?

        /// 此类资产未通过的检测的数目。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedPolicyItemCount: UInt64?

        /// 上次检测的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var lastCheckTime: Date?

        /// 检测结果：
        /// RESULT_FAILED: 未通过。
        /// RESULT_PASSED: 通过。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkResult: String?

        enum CodingKeys: String, CodingKey {
            case customerAssetId = "CustomerAssetId"
            case assetType = "AssetType"
            case assetName = "AssetName"
            case imageTag = "ImageTag"
            case hostIP = "HostIP"
            case nodeName = "NodeName"
            case checkStatus = "CheckStatus"
            case passedPolicyItemCount = "PassedPolicyItemCount"
            case failedPolicyItemCount = "FailedPolicyItemCount"
            case lastCheckTime = "LastCheckTime"
            case checkResult = "CheckResult"
        }
    }

    /// 表示一条检测项的信息。
    public struct ComplianceAssetPolicyItem: TCOutputModel {
        /// 为客户分配的唯一的检测项的ID。
        public let customerPolicyItemId: UInt64

        /// 检测项的原始ID
        public let basePolicyItemId: UInt64

        /// 检测项的名称。
        public let name: String

        /// 检测项所属的类型的名称
        public let category: String

        /// 所属的合规标准的ID
        public let benchmarkStandardId: UInt64

        /// 所属的合规标准的名称
        public let benchmarkStandardName: String

        /// 威胁等级
        public let riskLevel: String

        /// 检测状态
        /// CHECK_INIT, 待检测
        /// CHECK_RUNNING, 检测中
        /// CHECK_FINISHED, 检测完成
        /// CHECK_FAILED, 检测失败
        public let checkStatus: String

        /// 检测结果
        /// RESULT_PASSED: 通过
        /// RESULT_FAILED: 未通过
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkResult: String?

        /// 检测项对应的白名单项的ID。如果存在且非0，表示检测项被用户忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let whitelistId: UInt64?

        /// 处理建议。
        public let fixSuggestion: String

        /// 最近检测的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastCheckTime: String?

        /// 验证信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let verifyInfo: String?

        enum CodingKeys: String, CodingKey {
            case customerPolicyItemId = "CustomerPolicyItemId"
            case basePolicyItemId = "BasePolicyItemId"
            case name = "Name"
            case category = "Category"
            case benchmarkStandardId = "BenchmarkStandardId"
            case benchmarkStandardName = "BenchmarkStandardName"
            case riskLevel = "RiskLevel"
            case checkStatus = "CheckStatus"
            case checkResult = "CheckResult"
            case whitelistId = "WhitelistId"
            case fixSuggestion = "FixSuggestion"
            case lastCheckTime = "LastCheckTime"
            case verifyInfo = "VerifyInfo"
        }
    }

    /// 资产+检查项ids 集合单元
    public struct ComplianceAssetPolicySetItem: TCInputModel {
        /// 资产ID
        public let customerAssetItemId: UInt64

        /// 需要忽略指定资产内的检查项ID列表，为空表示所有
        public let customerPolicyItemIdSet: [UInt64]?

        public init(customerAssetItemId: UInt64, customerPolicyItemIdSet: [UInt64]? = nil) {
            self.customerAssetItemId = customerAssetItemId
            self.customerPolicyItemIdSet = customerPolicyItemIdSet
        }

        enum CodingKeys: String, CodingKey {
            case customerAssetItemId = "CustomerAssetItemId"
            case customerPolicyItemIdSet = "CustomerPolicyItemIdSet"
        }
    }

    /// 表示一类资产的总览信息。
    public struct ComplianceAssetSummary: TCOutputModel {
        /// 资产类别。
        public let assetType: String

        /// 是否为客户的首次检测。与CheckStatus配合使用。
        public let isCustomerFirstCheck: Bool

        /// 检测状态
        ///
        /// CHECK_UNINIT, 用户未启用此功能
        ///
        /// CHECK_INIT, 待检测
        ///
        /// CHECK_RUNNING, 检测中
        ///
        /// CHECK_FINISHED, 检测完成
        ///
        /// CHECK_FAILED, 检测失败
        public let checkStatus: String

        /// 此类别的检测进度，为 0~100 的数。若未在检测中，无此字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkProgress: Float?

        /// 此类资产通过的检测项的数目。
        public let passedPolicyItemCount: UInt64

        /// 此类资产未通过的检测的数目。
        public let failedPolicyItemCount: UInt64

        /// 此类资产下未通过的严重级别的检测项的数目。
        public let failedCriticalPolicyItemCount: UInt64

        /// 此类资产下未通过的高危检测项的数目。
        public let failedHighRiskPolicyItemCount: UInt64

        /// 此类资产下未通过的中危检测项的数目。
        public let failedMediumRiskPolicyItemCount: UInt64

        /// 此类资产下未通过的低危检测项的数目。
        public let failedLowRiskPolicyItemCount: UInt64

        /// 此类资产下提示级别的检测项的数目。
        public let noticePolicyItemCount: UInt64

        /// 通过检测的资产的数目。
        public let passedAssetCount: UInt64

        /// 未通过检测的资产的数目。
        public let failedAssetCount: UInt64

        /// 此类资产的合规率，0~100的数。
        public let assetPassedRate: Float

        /// 检测失败的资产的数目。
        public let scanFailedAssetCount: UInt64

        /// 上次检测的耗时，单位为秒。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkCostTime: Float?

        /// 上次检测的时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var lastCheckTime: Date?

        /// 定时检测规则。
        public let periodRule: CompliancePeriodTaskRule

        /// 已开启的检查项总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let openPolicyItemCount: UInt64?

        /// 已忽略的检查项总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoredPolicyItemCount: UInt64?

        enum CodingKeys: String, CodingKey {
            case assetType = "AssetType"
            case isCustomerFirstCheck = "IsCustomerFirstCheck"
            case checkStatus = "CheckStatus"
            case checkProgress = "CheckProgress"
            case passedPolicyItemCount = "PassedPolicyItemCount"
            case failedPolicyItemCount = "FailedPolicyItemCount"
            case failedCriticalPolicyItemCount = "FailedCriticalPolicyItemCount"
            case failedHighRiskPolicyItemCount = "FailedHighRiskPolicyItemCount"
            case failedMediumRiskPolicyItemCount = "FailedMediumRiskPolicyItemCount"
            case failedLowRiskPolicyItemCount = "FailedLowRiskPolicyItemCount"
            case noticePolicyItemCount = "NoticePolicyItemCount"
            case passedAssetCount = "PassedAssetCount"
            case failedAssetCount = "FailedAssetCount"
            case assetPassedRate = "AssetPassedRate"
            case scanFailedAssetCount = "ScanFailedAssetCount"
            case checkCostTime = "CheckCostTime"
            case lastCheckTime = "LastCheckTime"
            case periodRule = "PeriodRule"
            case openPolicyItemCount = "OpenPolicyItemCount"
            case ignoredPolicyItemCount = "IgnoredPolicyItemCount"
        }
    }

    /// 表示一个合规标准的信息。
    public struct ComplianceBenchmarkStandard: TCOutputModel {
        /// 合规标准的ID
        public let standardId: UInt64

        /// 合规标准的名称
        public let name: String

        /// 合规标准包含的数目
        public let policyItemCount: UInt64

        /// 是否启用此标准
        public let enabled: Bool

        /// 标准的描述
        public let description: String

        enum CodingKeys: String, CodingKey {
            case standardId = "StandardId"
            case name = "Name"
            case policyItemCount = "PolicyItemCount"
            case enabled = "Enabled"
            case description = "Description"
        }
    }

    /// 表示是否启用合规标准。
    public struct ComplianceBenchmarkStandardEnable: TCInputModel {
        /// 合规标准的ID。
        public let standardId: UInt64

        /// 是否启用合规标准
        public let enable: Bool

        public init(standardId: UInt64, enable: Bool) {
            self.standardId = standardId
            self.enable = enable
        }

        enum CodingKeys: String, CodingKey {
            case standardId = "StandardId"
            case enable = "Enable"
        }
    }

    /// 表示容器资产专属的详情。
    public struct ComplianceContainerDetailInfo: TCOutputModel {
        /// 容器在主机上的ID。
        public let containerId: String

        /// 容器所属的Pod的名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let podName: String?

        enum CodingKeys: String, CodingKey {
            case containerId = "ContainerId"
            case podName = "PodName"
        }
    }

    /// 键值对过滤器，用于条件过滤查询。例如过滤ID、名称、状态等 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct ComplianceFilters: TCInputModel {
        /// 过滤键的名称
        public let name: String

        /// 一个或者多个过滤值。
        public let values: [String]

        /// 是否模糊查询。默认为是。
        public let exactMatch: Bool?

        public init(name: String, values: [String], exactMatch: Bool? = nil) {
            self.name = name
            self.values = values
            self.exactMatch = exactMatch
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case exactMatch = "ExactMatch"
        }
    }

    /// 表示主机资产专属的详情。
    public struct ComplianceHostDetailInfo: TCOutputModel {
        /// 主机上的Docker版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dockerVersion: String?

        /// 主机上的K8S的版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let k8sVersion: String?

        enum CodingKeys: String, CodingKey {
            case dockerVersion = "DockerVersion"
            case k8sVersion = "K8SVersion"
        }
    }

    /// 表示镜像资产专属的详情。
    public struct ComplianceImageDetailInfo: TCOutputModel {
        /// 镜像在主机上的ID。
        public let imageId: String

        /// 镜像的名称。
        public let imageName: String

        /// 镜像的Tag。
        public let imageTag: String

        /// 镜像所在远程仓库的路径。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let repository: String?

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case imageName = "ImageName"
            case imageTag = "ImageTag"
            case repository = "Repository"
        }
    }

    /// 表示K8S资产专属的详情。
    public struct ComplianceK8SDetailInfo: TCOutputModel {
        /// K8S集群的名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        /// K8S集群的版本。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterVersion: String?

        enum CodingKeys: String, CodingKey {
            case clusterName = "ClusterName"
            case clusterVersion = "ClusterVersion"
        }
    }

    /// 表示一个合规基线检测定时任务的信息。
    public struct CompliancePeriodTask: TCOutputModel {
        /// 周期任务的ID
        public let periodTaskId: UInt64

        /// 资产类型。
        /// ASSET_CONTAINER, 容器
        /// ASSET_IMAGE, 镜像
        /// ASSET_HOST, 主机
        /// ASSET_K8S, K8S资产
        public let assetType: String

        /// 最近一次触发的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var lastTriggerTime: Date?

        /// 总的检查项数目
        public let totalPolicyItemCount: UInt64

        /// 周期设置
        public let periodRule: CompliancePeriodTaskRule

        /// 合规标准列表
        public let benchmarkStandardSet: [ComplianceBenchmarkStandard]

        enum CodingKeys: String, CodingKey {
            case periodTaskId = "PeriodTaskId"
            case assetType = "AssetType"
            case lastTriggerTime = "LastTriggerTime"
            case totalPolicyItemCount = "TotalPolicyItemCount"
            case periodRule = "PeriodRule"
            case benchmarkStandardSet = "BenchmarkStandardSet"
        }
    }

    /// 表示一个定时任务的周期设置
    public struct CompliancePeriodTaskRule: TCInputModel, TCOutputModel {
        /// 执行的频率（几天一次），取值为：1,3,7。
        public let frequency: UInt64

        /// 在这天的什么时间执行，格式为：HH:mm:SS。
        public let executionTime: String

        /// 是否开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enable: Bool?

        public init(frequency: UInt64, executionTime: String, enable: Bool? = nil) {
            self.frequency = frequency
            self.executionTime = executionTime
            self.enable = enable
        }

        enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
            case executionTime = "ExecutionTime"
            case enable = "Enable"
        }
    }

    /// 检查项+资产ids 的集合单元
    public struct CompliancePolicyAssetSetItem: TCInputModel {
        /// 检查项ID
        public let customerPolicyItemId: UInt64

        /// 需要忽略指定检查项内的资产ID列表，为空表示所有
        public let customerAssetItemIdSet: [UInt64]?

        public init(customerPolicyItemId: UInt64, customerAssetItemIdSet: [UInt64]? = nil) {
            self.customerPolicyItemId = customerPolicyItemId
            self.customerAssetItemIdSet = customerAssetItemIdSet
        }

        enum CodingKeys: String, CodingKey {
            case customerPolicyItemId = "CustomerPolicyItemId"
            case customerAssetItemIdSet = "CustomerAssetItemIdSet"
        }
    }

    /// 表示一条检测项对应的汇总信息。
    public struct CompliancePolicyItemSummary: TCOutputModel {
        /// 为客户分配的唯一的检测项的ID。
        public let customerPolicyItemId: UInt64

        /// 检测项的原始ID。
        public let basePolicyItemId: UInt64

        /// 检测项的名称。
        public let name: String

        /// 检测项所属的类型，枚举字符串。
        public let category: String

        /// 所属的合规标准
        public let benchmarkStandardName: String

        /// 威胁等级。RISK_CRITICAL, RISK_HIGH, RISK_MEDIUM, RISK_LOW, RISK_NOTICE。
        public let riskLevel: String

        /// 检测项所属的资产类型
        public let assetType: String

        /// 最近检测的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var lastCheckTime: Date?

        /// 检测状态
        ///
        /// CHECK_INIT, 待检测
        ///
        /// CHECK_RUNNING, 检测中
        ///
        /// CHECK_FINISHED, 检测完成
        ///
        /// CHECK_FAILED, 检测失败
        public let checkStatus: String

        /// 检测结果。RESULT_PASSED: 通过
        ///
        /// RESULT_FAILED: 未通过
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkResult: String?

        /// 通过检测的资产的数目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let passedAssetCount: UInt64?

        /// 未通过检测的资产的数目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedAssetCount: UInt64?

        /// 检测项对应的白名单项的ID。如果存在且非0，表示检测项被用户忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let whitelistId: UInt64?

        /// 处理建议。
        public let fixSuggestion: String

        /// 所属的合规标准的ID
        public let benchmarkStandardId: UInt64

        /// 检测项适用的版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let applicableVersion: String?

        enum CodingKeys: String, CodingKey {
            case customerPolicyItemId = "CustomerPolicyItemId"
            case basePolicyItemId = "BasePolicyItemId"
            case name = "Name"
            case category = "Category"
            case benchmarkStandardName = "BenchmarkStandardName"
            case riskLevel = "RiskLevel"
            case assetType = "AssetType"
            case lastCheckTime = "LastCheckTime"
            case checkStatus = "CheckStatus"
            case checkResult = "CheckResult"
            case passedAssetCount = "PassedAssetCount"
            case failedAssetCount = "FailedAssetCount"
            case whitelistId = "WhitelistId"
            case fixSuggestion = "FixSuggestion"
            case benchmarkStandardId = "BenchmarkStandardId"
            case applicableVersion = "ApplicableVersion"
        }
    }

    /// 表示检测失败的资产的信息。
    public struct ComplianceScanFailedAsset: TCOutputModel {
        /// 客户资产的ID。
        public let customerAssetId: UInt64

        /// 资产类别。
        public let assetType: String

        /// 检测状态
        /// CHECK_INIT, 待检测
        /// CHECK_RUNNING, 检测中
        /// CHECK_FINISHED, 检测完成
        /// CHECK_FAILED, 检测失败
        public let checkStatus: String

        /// 资产的名称。
        public let assetName: String

        /// 资产检测失败的原因。
        public let failureReason: String

        /// 检测失败的处理建议。
        public let suggestion: String

        /// 检测的时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var checkTime: Date

        enum CodingKeys: String, CodingKey {
            case customerAssetId = "CustomerAssetId"
            case assetType = "AssetType"
            case checkStatus = "CheckStatus"
            case assetName = "AssetName"
            case failureReason = "FailureReason"
            case suggestion = "Suggestion"
            case checkTime = "CheckTime"
        }
    }

    /// 表示一条白名单记录。
    public struct ComplianceWhitelistItem: TCOutputModel {
        /// 白名单项的ID。
        public let whitelistItemId: UInt64

        /// 客户检测项的ID。
        public let customerPolicyItemId: UInt64

        /// 检测项的名称。
        public let name: String

        /// 合规标准的名称。
        public let standardName: String

        /// 合规标准的ID。
        public let standardId: UInt64

        /// 检测项影响的资产的数目。
        public let affectedAssetCount: UInt64

        /// 最后更新的时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var lastUpdateTime: Date

        /// 加入到白名单的时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var insertTime: Date

        enum CodingKeys: String, CodingKey {
            case whitelistItemId = "WhitelistItemId"
            case customerPolicyItemId = "CustomerPolicyItemId"
            case name = "Name"
            case standardName = "StandardName"
            case standardId = "StandardId"
            case affectedAssetCount = "AffectedAssetCount"
            case lastUpdateTime = "LastUpdateTime"
            case insertTime = "InsertTime"
        }
    }

    /// 容器组件信息
    public struct ComponentInfo: TCOutputModel {
        /// 名称
        public let name: String

        /// 版本
        public let version: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
        }
    }

    /// 组件信息
    public struct ComponentsInfo: TCOutputModel {
        /// 组件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let component: String?

        /// 组件版本信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        enum CodingKeys: String, CodingKey {
            case component = "Component"
            case version = "Version"
        }
    }

    /// 容器列表集合
    public struct ContainerInfo: TCOutputModel {
        /// 容器id
        public let containerID: String

        /// 容器名称
        public let containerName: String

        /// 容器运行状态
        public let status: String

        /// 创建时间
        public let createTime: String

        /// 运行用户
        public let runAs: String

        /// 命令行
        public let cmd: String

        /// CPU使用率 *1000
        public let cpuUsage: UInt64

        /// 内存使用 kb
        public let ramUsage: UInt64

        /// 镜像名称
        public let imageName: String

        /// 镜像id
        public let imageID: String

        /// 镜像id
        public let pod: String

        /// 主机id
        public let hostID: String

        /// 主机ip
        public let hostIP: String

        /// 更新时间
        public let updateTime: String

        /// 主机名称
        public let hostName: String

        /// 外网ip
        public let publicIp: String

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        public let netStatus: String

        /// 网络子状态
        public let netSubStatus: String

        /// 隔离来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolateSource: String?

        /// 隔离时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isolateTime: String?

        enum CodingKeys: String, CodingKey {
            case containerID = "ContainerID"
            case containerName = "ContainerName"
            case status = "Status"
            case createTime = "CreateTime"
            case runAs = "RunAs"
            case cmd = "Cmd"
            case cpuUsage = "CPUUsage"
            case ramUsage = "RamUsage"
            case imageName = "ImageName"
            case imageID = "ImageID"
            case pod = "POD"
            case hostID = "HostID"
            case hostIP = "HostIP"
            case updateTime = "UpdateTime"
            case hostName = "HostName"
            case publicIp = "PublicIp"
            case netStatus = "NetStatus"
            case netSubStatus = "NetSubStatus"
            case isolateSource = "IsolateSource"
            case isolateTime = "IsolateTime"
        }
    }

    /// 容器挂载信息
    public struct ContainerMount: TCOutputModel {
        /// 挂载类型 bind
        public let type: String

        /// 宿主机路径
        public let source: String

        /// 容器内路径
        public let destination: String

        /// 模式
        public let mode: String

        /// 读写权限
        public let rw: Bool

        /// 传播类型
        public let propagation: String

        /// 名称
        public let name: String

        /// 驱动
        public let driver: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case source = "Source"
            case destination = "Destination"
            case mode = "Mode"
            case rw = "RW"
            case propagation = "Propagation"
            case name = "Name"
            case driver = "Driver"
        }
    }

    /// 容器网络信息
    public struct ContainerNetwork: TCOutputModel {
        /// endpoint id
        public let endpointID: String

        /// 模式:bridge
        public let mode: String

        /// 网络名称
        public let name: String

        /// 网络ID
        public let networkID: String

        /// 网关
        public let gateway: String

        /// IPV4地址
        public let ipv4: String

        /// IPV6地址
        public let ipv6: String

        /// MAC 地址
        public let mac: String

        enum CodingKeys: String, CodingKey {
            case endpointID = "EndpointID"
            case mode = "Mode"
            case name = "Name"
            case networkID = "NetworkID"
            case gateway = "Gateway"
            case ipv4 = "Ipv4"
            case ipv6 = "Ipv6"
            case mac = "MAC"
        }
    }

    /// 应急漏洞列表信息
    public struct EmergencyVulInfo: TCOutputModel {
        /// 漏洞名称
        public let name: String

        /// 漏洞标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// CVSS V3分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvssv3Score: Float?

        /// 风险等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// CVE编号
        public let cveid: String

        /// 漏洞类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let category: String?

        /// 漏洞披露时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let submitTime: String?

        /// 最近发现时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestFoundTime: String?

        /// 应急漏洞风险情况：NOT_SCAN：未扫描，SCANNING：扫描中，SCANNED_NOT_RISK：已扫描，暂未风险 ，SCANNED_RISK：已扫描存在风险
        public let status: String

        /// 漏洞ID
        public let id: Int64

        /// 漏洞PocID
        public let pocID: String

        /// 防御状态，NO_DEFENDED:未防御，DEFENDED:已防御
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceStatus: String?

        /// 漏洞防御主机范围: MANUAL:自选主机节点，ALL:全部
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceScope: String?

        /// 漏洞防御主机数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceHostCount: Int64?

        /// 已防御攻击次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defendedCount: Int64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case tags = "Tags"
            case cvssv3Score = "CVSSV3Score"
            case level = "Level"
            case cveid = "CVEID"
            case category = "Category"
            case submitTime = "SubmitTime"
            case latestFoundTime = "LatestFoundTime"
            case status = "Status"
            case id = "ID"
            case pocID = "PocID"
            case defenceStatus = "DefenceStatus"
            case defenceScope = "DefenceScope"
            case defenceHostCount = "DefenceHostCount"
            case defendedCount = "DefendedCount"
        }
    }

    /// 运行时容器逃逸事件描述信息
    public struct EscapeEventDescription: TCOutputModel {
        /// 事件规则
        public let description: String

        /// 解决方案
        public let solution: String

        /// 事件备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 事件最后一次处理的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationTime: String?

        enum CodingKeys: String, CodingKey {
            case description = "Description"
            case solution = "Solution"
            case remark = "Remark"
            case operationTime = "OperationTime"
        }
    }

    /// 容器逃逸事件列表
    public struct EscapeEventInfo: TCOutputModel {
        /// 事件类型
        ///    ESCAPE_HOST_ACESS_FILE:宿主机文件访问逃逸
        ///    ESCAPE_MOUNT_NAMESPACE:MountNamespace逃逸
        ///    ESCAPE_PRIVILEDGE:程序提权逃逸
        ///    ESCAPE_PRIVILEDGE_CONTAINER_START:特权容器启动逃逸
        ///    ESCAPE_MOUNT_SENSITIVE_PTAH:敏感路径挂载
        ///    ESCAPE_SYSCALL:Syscall逃逸
        public let eventType: String

        /// 容器名
        public let containerName: String

        /// 镜像名
        public let imageName: String

        /// 状态，EVENT_UNDEAL:未处理，EVENT_DEALED:已处理，EVENT_INGNORE:忽略
        public let status: String

        /// 事件记录的唯一id
        public let eventId: String

        /// 节点名称
        public let nodeName: String

        /// pod(实例)的名字
        public let podName: String

        /// 生成时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var foundTime: Date

        /// 事件名字，
        /// 宿主机文件访问逃逸、
        /// Syscall逃逸、
        /// MountNamespace逃逸、
        /// 程序提权逃逸、
        /// 特权容器启动逃逸、
        /// 敏感路径挂载
        public let eventName: String

        /// 镜像id，用于跳转
        public let imageId: String

        /// 容器id，用于跳转
        public let containerId: String

        /// 事件解决方案
        public let solution: String

        /// 事件描述
        public let description: String

        /// 事件数量
        public let eventCount: Int64

        /// 最近生成时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var latestFoundTime: Date

        /// 节点IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeIP: String?

        /// 主机IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostID: String?

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetStatus: String?

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// "NODE_DESTROYED"      //节点已销毁
        /// "CONTAINER_EXITED"    //容器已退出
        /// "CONTAINER_DESTROYED" //容器已销毁
        /// "SHARED_HOST"         // 容器与主机共享网络
        /// "RESOURCE_LIMIT"      //隔离操作资源超限
        /// "UNKNOW"              // 原因未知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetSubStatus: String?

        /// 容器隔离操作来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerIsolateOperationSrc: String?

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        public let containerStatus: String

        enum CodingKeys: String, CodingKey {
            case eventType = "EventType"
            case containerName = "ContainerName"
            case imageName = "ImageName"
            case status = "Status"
            case eventId = "EventId"
            case nodeName = "NodeName"
            case podName = "PodName"
            case foundTime = "FoundTime"
            case eventName = "EventName"
            case imageId = "ImageId"
            case containerId = "ContainerId"
            case solution = "Solution"
            case description = "Description"
            case eventCount = "EventCount"
            case latestFoundTime = "LatestFoundTime"
            case nodeIP = "NodeIP"
            case hostID = "HostID"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case containerStatus = "ContainerStatus"
        }
    }

    /// 待处理逃逸事件趋势
    public struct EscapeEventTendencyInfo: TCOutputModel {
        /// 待处理风险容器事件总数
        public let riskContainerEventCount: Int64

        /// 待处理程序特权事件总数
        public let processPrivilegeEventCount: Int64

        /// 待处理容器逃逸事件总数
        public let containerEscapeEventCount: Int64

        /// 日期
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var date: Date

        enum CodingKeys: String, CodingKey {
            case riskContainerEventCount = "RiskContainerEventCount"
            case processPrivilegeEventCount = "ProcessPrivilegeEventCount"
            case containerEscapeEventCount = "ContainerEscapeEventCount"
            case date = "Date"
        }
    }

    /// 容器逃逸扫描策略开关信息
    public struct EscapeRule: TCOutputModel {
        /// 规则类型
        /// ESCAPE_HOST_ACESS_FILE:宿主机文件访问逃逸
        ///    ESCAPE_MOUNT_NAMESPACE:MountNamespace逃逸
        ///    ESCAPE_PRIVILEDGE:程序提权逃逸
        ///    ESCAPE_PRIVILEDGE_CONTAINER_START:特权容器启动逃逸
        ///    ESCAPE_MOUNT_SENSITIVE_PTAH:敏感路径挂载
        /// ESCAPE_SYSCALL:Syscall逃逸
        public let type: String

        /// 规则名称
        /// 宿主机文件访问逃逸、
        /// Syscall逃逸、
        /// MountNamespace逃逸、
        /// 程序提权逃逸、
        /// 特权容器启动逃逸、
        /// 敏感路径挂载
        public let name: String

        /// 是否打开：false否 ，true是
        public let isEnable: Bool

        /// 规则组别。RISK_CONTAINER：风险容器，PROCESS_PRIVILEGE：程序特权，CONTAINER_ESCAPE：容器逃逸
        public let group: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case name = "Name"
            case isEnable = "IsEnable"
            case group = "Group"
        }
    }

    /// 修改容器逃逸扫描策略开关信息
    public struct EscapeRuleEnabled: TCInputModel {
        /// 规则类型
        ///    ESCAPE_HOST_ACESS_FILE:宿主机文件访问逃逸
        ///    ESCAPE_MOUNT_NAMESPACE:MountNamespace逃逸
        ///    ESCAPE_PRIVILEDGE:程序提权逃逸
        ///    ESCAPE_PRIVILEDGE_CONTAINER_START:特权容器启动逃逸
        ///    ESCAPE_MOUNT_SENSITIVE_PTAH:敏感路径挂载
        ///    ESCAPE_SYSCALL:Syscall逃逸
        public let type: String

        /// 是否打开：false否 ，true是
        public let isEnable: Bool

        public init(type: String, isEnable: Bool) {
            self.type = type
            self.isEnable = isEnable
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case isEnable = "IsEnable"
        }
    }

    /// 逃逸白名单
    public struct EscapeWhiteListInfo: TCOutputModel {
        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 白名单记录ID
        public let id: Int64

        /// 关联主机数量
        public let hostCount: Int64

        /// 关联容器数量
        public let containerCount: Int64

        /// 加白事件类型
        public let eventType: [String]

        /// 创建时间
        public let insertTime: String

        /// 更新时间
        public let updateTime: String

        /// 镜像大小
        public let imageSize: Int64

        enum CodingKeys: String, CodingKey {
            case imageID = "ImageID"
            case imageName = "ImageName"
            case id = "ID"
            case hostCount = "HostCount"
            case containerCount = "ContainerCount"
            case eventType = "EventType"
            case insertTime = "InsertTime"
            case updateTime = "UpdateTime"
            case imageSize = "ImageSize"
        }
    }

    /// 导出任务详情
    public struct ExportJobInfo: TCOutputModel {
        /// 任务ID
        public let jobID: String

        /// 任务名称
        public let jobName: String

        /// 来源
        public let source: String

        /// 导出状态
        public let exportStatus: String

        /// 导出进度
        public let exportProgress: Int64

        /// 失败原因
        public let failureMsg: String

        /// 超时时间
        public let timeout: String

        /// 插入时间
        public let insertTime: String

        enum CodingKeys: String, CodingKey {
            case jobID = "JobID"
            case jobName = "JobName"
            case source = "Source"
            case exportStatus = "ExportStatus"
            case exportProgress = "ExportProgress"
            case failureMsg = "FailureMsg"
            case timeout = "Timeout"
            case insertTime = "InsertTime"
        }
    }

    /// 容器安全运行时，文件属性信息
    public struct FileAttributeInfo: TCOutputModel {
        /// 文件名
        public let fileName: String

        /// 文件类型
        public let fileType: String

        /// 文件大小(字节)
        public let fileSize: UInt64

        /// 文件路径
        public let filePath: String

        /// 文件创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var fileCreateTime: Date

        /// 最近被篡改文件创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var latestTamperedFileMTime: Date

        /// 新文件内容
        public let newFile: String

        /// 新旧文件的差异
        public let fileDiff: String

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case fileType = "FileType"
            case fileSize = "FileSize"
            case filePath = "FilePath"
            case fileCreateTime = "FileCreateTime"
            case latestTamperedFileMTime = "LatestTamperedFileMTime"
            case newFile = "NewFile"
            case fileDiff = "FileDiff"
        }
    }

    /// 容器安全主机列表
    public struct HostInfo: TCOutputModel {
        /// 主机id
        public let hostID: String

        /// 主机ip即内网ip
        public let hostIP: String

        /// 主机名称
        public let hostName: String

        /// 业务组
        public let group: String

        /// docker 版本
        public let dockerVersion: String

        /// docker 文件系统类型
        public let dockerFileSystemDriver: String

        /// 镜像个数
        public let imageCnt: UInt64

        /// 容器个数
        public let containerCnt: UInt64

        /// agent运行状态
        public let status: String

        /// 是否是Containerd
        public let isContainerd: Bool

        /// 主机来源：["CVM", "ECM", "LH", "BM"]  中的之一为腾讯云服务器；["Other"]之一非腾讯云服务器；
        public let machineType: String

        /// 外网ip
        public let publicIp: String

        /// 主机uuid
        public let uuid: String

        /// 主机实例ID
        public let instanceID: String

        /// 地域ID
        public let regionID: Int64

        /// 所属项目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let project: ProjectInfo?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [TagInfo]?

        enum CodingKeys: String, CodingKey {
            case hostID = "HostID"
            case hostIP = "HostIP"
            case hostName = "HostName"
            case group = "Group"
            case dockerVersion = "DockerVersion"
            case dockerFileSystemDriver = "DockerFileSystemDriver"
            case imageCnt = "ImageCnt"
            case containerCnt = "ContainerCnt"
            case status = "Status"
            case isContainerd = "IsContainerd"
            case machineType = "MachineType"
            case publicIp = "PublicIp"
            case uuid = "Uuid"
            case instanceID = "InstanceID"
            case regionID = "RegionID"
            case project = "Project"
            case tags = "Tags"
        }
    }

    /// 镜像自动授权任务信息
    public struct ImageAutoAuthorizedTask: TCOutputModel {
        /// 任务id
        public let taskId: Int64

        /// 授权方式，AUTO:自动授权，MANUAL:手动授权
        public let type: String

        /// 任务日期
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var authorizedDate: Date

        /// 镜像来源，LOCAL:本地镜像，REGISTRY:仓库镜像
        public let source: String

        /// 最近授权时间
        public let lastAuthorizedTime: String

        /// 自动授权成功数
        public let successCount: Int64

        /// 自动授权失败数
        public let failCount: Int64

        /// 最近任务失败码，REACH_LIMIT:达到授权上限，LICENSE_INSUFFICIENT:授权数不足
        public let latestFailCode: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case type = "Type"
            case authorizedDate = "AuthorizedDate"
            case source = "Source"
            case lastAuthorizedTime = "LastAuthorizedTime"
            case successCount = "SuccessCount"
            case failCount = "FailCount"
            case latestFailCode = "LatestFailCode"
        }
    }

    /// 容器安全镜像组件信息
    public struct ImageComponent: TCOutputModel {
        /// 组件名称
        public let name: String

        /// 组件版本
        public let version: String

        /// 组件路径
        public let path: String

        /// 组件类型
        public let type: String

        /// 组件漏洞数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vulCount: UInt64?

        /// 镜像ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageID: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
            case path = "Path"
            case type = "Type"
            case vulCount = "VulCount"
            case imageID = "ImageID"
        }
    }

    /// 容器安全 主机镜像关联列表
    public struct ImageHost: TCOutputModel {
        /// 镜像id
        public let imageID: String

        /// 主机id
        public let hostID: String

        enum CodingKeys: String, CodingKey {
            case imageID = "ImageID"
            case hostID = "HostID"
        }
    }

    /// 基本镜像信息
    public struct ImageInfo: TCInputModel {
        /// 实例名称
        public let instanceName: String

        /// 命名空间
        public let namespace: String

        /// 镜像名称
        public let imageName: String

        /// 镜像tag
        public let imageTag: String

        /// 强制扫描
        public let force: String

        /// 镜像id
        public let imageDigest: String?

        /// 仓库类型
        public let registryType: String?

        /// 镜像仓库地址
        public let imageRepoAddress: String?

        /// 实例id
        public let instanceId: String?

        public init(instanceName: String, namespace: String, imageName: String, imageTag: String, force: String, imageDigest: String? = nil, registryType: String? = nil, imageRepoAddress: String? = nil, instanceId: String? = nil) {
            self.instanceName = instanceName
            self.namespace = namespace
            self.imageName = imageName
            self.imageTag = imageTag
            self.force = force
            self.imageDigest = imageDigest
            self.registryType = registryType
            self.imageRepoAddress = imageRepoAddress
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceName = "InstanceName"
            case namespace = "Namespace"
            case imageName = "ImageName"
            case imageTag = "ImageTag"
            case force = "Force"
            case imageDigest = "ImageDigest"
            case registryType = "RegistryType"
            case imageRepoAddress = "ImageRepoAddress"
            case instanceId = "InstanceId"
        }
    }

    /// 基本镜像信息
    public struct ImageProgress: TCOutputModel {
        /// 镜像id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageId: String?

        /// 仓库类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registryType: String?

        /// 镜像仓库地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageRepoAddress: String?

        /// 实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 命名空间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespace: String?

        /// 仓库名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageName: String?

        /// 镜像tag
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageTag: String?

        /// 镜像扫描状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanStatus: String?

        /// 镜像cve扫描进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cveProgress: UInt64?

        /// 镜像敏感扫描进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskProgress: UInt64?

        /// 镜像木马扫描进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let virusProgress: UInt64?

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case registryType = "RegistryType"
            case imageRepoAddress = "ImageRepoAddress"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case namespace = "Namespace"
            case imageName = "ImageName"
            case imageTag = "ImageTag"
            case scanStatus = "ScanStatus"
            case cveProgress = "CveProgress"
            case riskProgress = "RiskProgress"
            case virusProgress = "VirusProgress"
        }
    }

    /// 容器安全镜像仓库列表
    public struct ImageRepoInfo: TCOutputModel {
        /// 镜像Digest
        public let imageDigest: String

        /// 镜像仓库地址
        public let imageRepoAddress: String

        /// 仓库类型
        public let registryType: String

        /// 镜像名称
        public let imageName: String

        /// 镜像版本
        public let imageTag: String

        /// 镜像大小
        public let imageSize: UInt64

        /// 最近扫描时间
        public let scanTime: String

        /// 扫描状态
        public let scanStatus: String

        /// 安全漏洞数
        public let vulCnt: UInt64

        /// 木马病毒数
        public let virusCnt: UInt64

        /// 风险行为数
        public let riskCnt: UInt64

        /// 敏感信息数
        public let sentiveInfoCnt: UInt64

        /// 是否可信镜像
        public let isTrustImage: Bool

        /// 镜像系统
        public let osName: String

        /// 木马扫描错误
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanVirusError: String?

        /// 漏洞扫描错误
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanVulError: String?

        /// 实例id
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 命名空间
        public let namespace: String

        /// 高危扫描错误
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanRiskError: String?

        /// 敏感信息扫描进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanVirusProgress: UInt64?

        /// 木马扫描进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanVulProgress: UInt64?

        /// 漏洞扫描进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanRiskProgress: UInt64?

        /// 剩余扫描时间秒
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanRemainTime: UInt64?

        /// cve扫描状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cveStatus: String?

        /// 高危扫描状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskStatus: String?

        /// 木马扫描状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let virusStatus: String?

        /// 总进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let progress: UInt64?

        /// 授权状态
        public let isAuthorized: UInt64

        /// 仓库区域
        public let registryRegion: String

        /// 列表id
        public let id: UInt64

        /// 镜像Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageId: String?

        /// 镜像创建的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var imageCreateTime: Date?

        /// 是否为镜像的最新版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isLatestImage: Bool?

        enum CodingKeys: String, CodingKey {
            case imageDigest = "ImageDigest"
            case imageRepoAddress = "ImageRepoAddress"
            case registryType = "RegistryType"
            case imageName = "ImageName"
            case imageTag = "ImageTag"
            case imageSize = "ImageSize"
            case scanTime = "ScanTime"
            case scanStatus = "ScanStatus"
            case vulCnt = "VulCnt"
            case virusCnt = "VirusCnt"
            case riskCnt = "RiskCnt"
            case sentiveInfoCnt = "SentiveInfoCnt"
            case isTrustImage = "IsTrustImage"
            case osName = "OsName"
            case scanVirusError = "ScanVirusError"
            case scanVulError = "ScanVulError"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case namespace = "Namespace"
            case scanRiskError = "ScanRiskError"
            case scanVirusProgress = "ScanVirusProgress"
            case scanVulProgress = "ScanVulProgress"
            case scanRiskProgress = "ScanRiskProgress"
            case scanRemainTime = "ScanRemainTime"
            case cveStatus = "CveStatus"
            case riskStatus = "RiskStatus"
            case virusStatus = "VirusStatus"
            case progress = "Progress"
            case isAuthorized = "IsAuthorized"
            case registryRegion = "RegistryRegion"
            case id = "Id"
            case imageId = "ImageId"
            case imageCreateTime = "ImageCreateTime"
            case isLatestImage = "IsLatestImage"
        }
    }

    /// 容器安全镜像高危行为信息
    public struct ImageRisk: TCOutputModel {
        /// 高危行为
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let behavior: UInt64?

        /// 种类
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: UInt64?

        /// 风险等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let desc: String?

        /// 解决方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instructionContent: String?

        enum CodingKeys: String, CodingKey {
            case behavior = "Behavior"
            case type = "Type"
            case level = "Level"
            case desc = "Desc"
            case instructionContent = "InstructionContent"
        }
    }

    /// 镜像风险详情
    public struct ImageRiskInfo: TCOutputModel {
        /// 行为
        public let behavior: UInt64

        /// 类型
        public let type: UInt64

        /// 级别
        public let level: UInt64

        /// 详情
        public let desc: String

        /// 解决方案
        public let instructionContent: String

        enum CodingKeys: String, CodingKey {
            case behavior = "Behavior"
            case type = "Type"
            case level = "Level"
            case desc = "Desc"
            case instructionContent = "InstructionContent"
        }
    }

    /// 运行时安全事件趋势信息
    public struct ImageRiskTendencyInfo: TCOutputModel {
        /// 趋势列表
        public let imageRiskSet: [RunTimeTendencyInfo]

        /// 风险类型：
        /// IRT_VULNERABILITY : 安全漏洞
        /// IRT_MALWARE_VIRUS: 木马病毒
        /// IRT_RISK:敏感信息
        public let imageRiskType: String

        enum CodingKeys: String, CodingKey {
            case imageRiskSet = "ImageRiskSet"
            case imageRiskType = "ImageRiskType"
        }
    }

    /// 镜像列表
    public struct ImageSimpleInfo: TCOutputModel {
        /// 镜像id
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 镜像大小
        public let size: UInt64

        /// 类型
        public let imageType: String

        /// 关联容器数
        public let containerCnt: Int64

        enum CodingKeys: String, CodingKey {
            case imageID = "ImageID"
            case imageName = "ImageName"
            case size = "Size"
            case imageType = "ImageType"
            case containerCnt = "ContainerCnt"
        }
    }

    /// 容器安全镜像病毒信息
    public struct ImageVirus: TCOutputModel {
        /// 路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let path: String?

        /// 风险等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: String?

        /// 分类
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let category: String?

        /// 病毒名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let virusName: String?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let desc: String?

        /// 解决方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let solution: String?

        /// 文件类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileType: String?

        /// 文件路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileName: String?

        /// 文件md5
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileMd5: String?

        /// 大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileSize: UInt64?

        /// 首次发现时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let firstScanTime: String?

        /// 最近扫描时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestScanTime: String?

        enum CodingKeys: String, CodingKey {
            case path = "Path"
            case riskLevel = "RiskLevel"
            case category = "Category"
            case virusName = "VirusName"
            case tags = "Tags"
            case desc = "Desc"
            case solution = "Solution"
            case fileType = "FileType"
            case fileName = "FileName"
            case fileMd5 = "FileMd5"
            case fileSize = "FileSize"
            case firstScanTime = "FirstScanTime"
            case latestScanTime = "LatestScanTime"
        }
    }

    /// 容器安全镜像病毒信息
    public struct ImageVirusInfo: TCOutputModel {
        /// 路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let path: String?

        /// 风险等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: UInt64?

        /// 病毒名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let virusName: String?

        /// 标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let desc: String?

        /// 修护建议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let solution: String?

        /// 大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let size: UInt64?

        /// 首次发现时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let firstScanTime: String?

        /// 最近扫描时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestScanTime: String?

        /// 文件md5
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let md5: String?

        /// 文件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileName: String?

        /// 检测平台
        /// 1: 云查杀引擎
        /// 2: tav
        /// 3: binaryAi
        /// 4: 异常行为
        /// 5: 威胁情报
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkPlatform: [String]?

        enum CodingKeys: String, CodingKey {
            case path = "Path"
            case riskLevel = "RiskLevel"
            case virusName = "VirusName"
            case tags = "Tags"
            case desc = "Desc"
            case solution = "Solution"
            case size = "Size"
            case firstScanTime = "FirstScanTime"
            case latestScanTime = "LatestScanTime"
            case md5 = "Md5"
            case fileName = "FileName"
            case checkPlatform = "CheckPlatform"
        }
    }

    /// 容器安全镜像漏洞信息
    public struct ImageVul: TCOutputModel {
        /// 漏洞id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cveid: String?

        /// 观点验证程序id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pocid: String?

        /// 漏洞名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 涉及组件信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let components: [ComponentsInfo]?

        /// 分类
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let category: String?

        /// 分类2
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryType: String?

        /// 风险等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let des: String?

        /// 解决方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let officialSolution: String?

        /// 引用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reference: String?

        /// 防御方案
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenseSolution: String?

        /// 提交时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let submitTime: String?

        /// Cvss分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvssScore: String?

        /// Cvss信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvssVector: String?

        /// 是否建议修复
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isSuggest: String?

        /// 修复版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fixedVersions: String?

        /// 漏洞标签:"CanBeFixed","DynamicLevelPoc","DynamicLevelExp"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tag: [String]?

        /// 组件名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let component: String?

        /// 组件版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        enum CodingKeys: String, CodingKey {
            case cveid = "CVEID"
            case pocid = "POCID"
            case name = "Name"
            case components = "Components"
            case category = "Category"
            case categoryType = "CategoryType"
            case level = "Level"
            case des = "Des"
            case officialSolution = "OfficialSolution"
            case reference = "Reference"
            case defenseSolution = "DefenseSolution"
            case submitTime = "SubmitTime"
            case cvssScore = "CvssScore"
            case cvssVector = "CvssVector"
            case isSuggest = "IsSuggest"
            case fixedVersions = "FixedVersions"
            case tag = "Tag"
            case component = "Component"
            case version = "Version"
        }
    }

    /// 查询镜像绑定的运行时规则信息
    public struct ImagesBindRuleInfo: TCOutputModel {
        /// 镜像id
        public let imageId: String

        /// 镜像名称
        public let imageName: String

        /// 关联容器数量
        public let containerCnt: Int64

        /// 绑定规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: String?

        /// 规则名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleName: String?

        /// 镜像大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageSize: Int64?

        /// 最近扫描时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanTime: String?

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case imageName = "ImageName"
            case containerCnt = "ContainerCnt"
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case imageSize = "ImageSize"
            case scanTime = "ScanTime"
        }
    }

    /// 容器安全镜像列表
    public struct ImagesInfo: TCOutputModel {
        /// 镜像id
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 创建时间
        public let createTime: String

        /// 镜像大小
        public let size: UInt64

        /// 主机个数
        public let hostCnt: UInt64

        /// 容器个数
        public let containerCnt: UInt64

        /// 扫描时间
        public let scanTime: String

        /// 漏洞个数
        public let vulCnt: UInt64

        /// 病毒个数
        public let virusCnt: UInt64

        /// 敏感信息个数
        public let riskCnt: UInt64

        /// 是否信任镜像
        public let isTrustImage: Bool

        /// 镜像系统
        public let osName: String

        /// agent镜像扫描错误
        public let agentError: String

        /// 后端镜像扫描错误
        public let scanError: String

        /// 扫描状态
        public let scanStatus: String

        /// 木马扫描错误信息
        public let scanVirusError: String

        /// 漏洞扫描错误信息
        public let scanVulError: String

        /// 风险扫描错误信息
        public let scanRiskError: String

        /// 是否是重点关注镜像，为0不是，非0是
        public let isSuggest: UInt64

        /// 是否授权，1是0否
        public let isAuthorized: UInt64

        /// 组件个数
        public let componentCnt: UInt64

        enum CodingKeys: String, CodingKey {
            case imageID = "ImageID"
            case imageName = "ImageName"
            case createTime = "CreateTime"
            case size = "Size"
            case hostCnt = "HostCnt"
            case containerCnt = "ContainerCnt"
            case scanTime = "ScanTime"
            case vulCnt = "VulCnt"
            case virusCnt = "VirusCnt"
            case riskCnt = "RiskCnt"
            case isTrustImage = "IsTrustImage"
            case osName = "OsName"
            case agentError = "AgentError"
            case scanError = "ScanError"
            case scanStatus = "ScanStatus"
            case scanVirusError = "ScanVirusError"
            case scanVulError = "ScanVulError"
            case scanRiskError = "ScanRiskError"
            case isSuggest = "IsSuggest"
            case isAuthorized = "IsAuthorized"
            case componentCnt = "ComponentCnt"
        }
    }

    /// 容器安全镜像漏洞
    public struct ImagesVul: TCOutputModel {
        /// 漏洞id
        public let cveid: String

        /// 漏洞名称
        public let name: String

        /// 组件
        public let component: String

        /// 版本
        public let version: String

        /// 分类
        public let category: String

        /// 分类2
        public let categoryType: String

        /// 风险等级
        public let level: UInt64

        /// 描述
        public let des: String

        /// 解决方案
        public let officialSolution: String

        /// 引用
        public let reference: String

        /// 防御方案
        public let defenseSolution: String

        /// 提交时间
        public let submitTime: String

        /// CVSS V3分数
        public let cvssv3Score: Float

        /// CVSS V3描述
        public let cvssv3Desc: String

        /// 是否是重点关注：true：是，false：不是
        public let isSuggest: Bool

        /// 修复版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fixedVersions: String?

        /// 漏洞标签:"CanBeFixed","DynamicLevelPoc","DynamicLevelExp"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tag: [String]?

        enum CodingKeys: String, CodingKey {
            case cveid = "CVEID"
            case name = "Name"
            case component = "Component"
            case version = "Version"
            case category = "Category"
            case categoryType = "CategoryType"
            case level = "Level"
            case des = "Des"
            case officialSolution = "OfficialSolution"
            case reference = "Reference"
            case defenseSolution = "DefenseSolution"
            case submitTime = "SubmitTime"
            case cvssv3Score = "CVSSV3Score"
            case cvssv3Desc = "CVSSV3Desc"
            case isSuggest = "IsSuggest"
            case fixedVersions = "FixedVersions"
            case tag = "Tag"
        }
    }

    /// k8sApi异常事件详情
    public struct K8sApiAbnormalEventInfo: TCOutputModel {
        /// 命中规则名称
        public let matchRuleName: String

        /// 命中规则类型
        public let matchRuleType: String

        /// 告警等级
        public let riskLevel: String

        /// 集群ID
        public let clusterID: String

        /// 集群名称
        public let clusterName: String

        /// 集群运行状态
        public let clusterRunningStatus: String

        /// 初次生成时间
        public let firstCreateTime: String

        /// 最近一次生成时间
        public let lastCreateTime: String

        /// 告警数量
        public let alarmCount: UInt64

        /// 状态
        /// "EVENT_UNDEAL":未处理
        /// "EVENT_DEALED": 已处理
        /// "EVENT_IGNORE": 忽略
        /// "EVENT_DEL": 删除
        /// "EVENT_ADD_WHITE": 加白
        public let status: String

        /// 集群masterIP
        public let clusterMasterIP: String

        /// k8s版本
        public let k8sVersion: String

        /// 运行时组件
        public let runningComponent: [String]

        /// 描述
        public let desc: String

        /// 建议
        public let suggestion: String

        /// 请求信息
        public let info: String

        /// 规则ID
        public let matchRuleID: String

        /// 高亮字段数组
        public let highLightFields: [String]

        /// 命中规则
        public let matchRule: K8sApiAbnormalRuleScopeInfo

        enum CodingKeys: String, CodingKey {
            case matchRuleName = "MatchRuleName"
            case matchRuleType = "MatchRuleType"
            case riskLevel = "RiskLevel"
            case clusterID = "ClusterID"
            case clusterName = "ClusterName"
            case clusterRunningStatus = "ClusterRunningStatus"
            case firstCreateTime = "FirstCreateTime"
            case lastCreateTime = "LastCreateTime"
            case alarmCount = "AlarmCount"
            case status = "Status"
            case clusterMasterIP = "ClusterMasterIP"
            case k8sVersion = "K8sVersion"
            case runningComponent = "RunningComponent"
            case desc = "Desc"
            case suggestion = "Suggestion"
            case info = "Info"
            case matchRuleID = "MatchRuleID"
            case highLightFields = "HighLightFields"
            case matchRule = "MatchRule"
        }
    }

    /// k8sapi异常事件列表Item
    public struct K8sApiAbnormalEventListItem: TCOutputModel {
        /// 事件ID
        public let id: UInt64

        /// 命中规则类型
        public let matchRuleType: String

        /// 威胁等级
        public let riskLevel: String

        /// 集群ID
        public let clusterID: String

        /// 集群名称
        public let clusterName: String

        /// 集群运行状态
        public let clusterRunningStatus: String

        /// 初次生成时间
        public let firstCreateTime: String

        /// 最近一次生成时间
        public let lastCreateTime: String

        /// 告警数量
        public let alarmCount: UInt64

        /// 状态
        public let status: String

        /// 规则类型
        public let ruleType: String

        /// 描述信息
        public let desc: String

        /// 解决方案
        public let suggestion: String

        /// 规则名称
        public let ruleName: String

        /// 命中规则
        public let matchRule: K8sApiAbnormalRuleScopeInfo

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case matchRuleType = "MatchRuleType"
            case riskLevel = "RiskLevel"
            case clusterID = "ClusterID"
            case clusterName = "ClusterName"
            case clusterRunningStatus = "ClusterRunningStatus"
            case firstCreateTime = "FirstCreateTime"
            case lastCreateTime = "LastCreateTime"
            case alarmCount = "AlarmCount"
            case status = "Status"
            case ruleType = "RuleType"
            case desc = "Desc"
            case suggestion = "Suggestion"
            case ruleName = "RuleName"
            case matchRule = "MatchRule"
        }
    }

    /// k8a api 异常请求规则详情
    public struct K8sApiAbnormalRuleInfo: TCInputModel, TCOutputModel {
        /// 规则名称
        public let ruleName: String

        /// 状态
        public let status: Bool

        /// 规则信息列表
        public let ruleInfoList: [K8sApiAbnormalRuleScopeInfo]

        /// 生效集群IDSet
        public let effectClusterIDSet: [String]

        /// 规则类型
        /// RT_SYSTEM 系统规则
        /// RT_USER 用户自定义
        public let ruleType: String

        /// 是否所有集群生效
        public let effectAllCluster: Bool

        /// 规则ID
        public let ruleID: String?

        public init(ruleName: String, status: Bool, ruleInfoList: [K8sApiAbnormalRuleScopeInfo], effectClusterIDSet: [String], ruleType: String, effectAllCluster: Bool, ruleID: String? = nil) {
            self.ruleName = ruleName
            self.status = status
            self.ruleInfoList = ruleInfoList
            self.effectClusterIDSet = effectClusterIDSet
            self.ruleType = ruleType
            self.effectAllCluster = effectAllCluster
            self.ruleID = ruleID
        }

        enum CodingKeys: String, CodingKey {
            case ruleName = "RuleName"
            case status = "Status"
            case ruleInfoList = "RuleInfoList"
            case effectClusterIDSet = "EffectClusterIDSet"
            case ruleType = "RuleType"
            case effectAllCluster = "EffectAllCluster"
            case ruleID = "RuleID"
        }
    }

    /// k8s api 异常请求规则列表Item
    public struct K8sApiAbnormalRuleListItem: TCOutputModel {
        /// 规则ID
        public let ruleID: String

        /// 规则名称
        public let ruleName: String

        /// 规则类型
        /// RT_SYSTEM 系统规则
        /// RT_USER 用户自定义
        public let ruleType: String

        /// 受影响集群总数
        public let effectClusterCount: UInt64

        /// 更新时间
        public let updateTime: String

        /// 编辑账号
        public let oprUin: String

        /// 状态
        public let status: Bool

        enum CodingKeys: String, CodingKey {
            case ruleID = "RuleID"
            case ruleName = "RuleName"
            case ruleType = "RuleType"
            case effectClusterCount = "EffectClusterCount"
            case updateTime = "UpdateTime"
            case oprUin = "OprUin"
            case status = "Status"
        }
    }

    /// k8s api 异常事件规则配置范围
    public struct K8sApiAbnormalRuleScopeInfo: TCInputModel, TCOutputModel {
        /// 范围
        /// 系统事件:
        /// ANONYMOUS_ACCESS: 匿名访问
        /// ABNORMAL_UA_REQ: 异常UA请求
        /// ANONYMOUS_ABNORMAL_PERMISSION: 匿名用户权限异动
        /// GET_CREDENTIALS: 凭据信息获取
        /// MOUNT_SENSITIVE_PATH: 敏感路径挂载
        /// COMMAND_RUN: 命令执行
        /// PRIVILEGE_CONTAINER: 特权容器
        /// EXCEPTION_CRONTAB_TASK: 异常定时任务
        /// STATICS_POD: 静态pod创建
        /// ABNORMAL_CREATE_POD: 异常pod创建
        /// USER_DEFINED: 用户自定义
        public let scope: String

        /// 动作(RULE_MODE_ALERT: 告警 RULE_MODE_RELEASE:放行)
        public let action: String

        /// 威胁等级 HIGH:高级 MIDDLE: 中级 LOW:低级 NOTICE:提示
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: String?

        /// 开关状态(true:开 false:关) 适用于系统规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Bool?

        /// 是否被删除 适用于自定义规则入参
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isDelete: Bool?

        public init(scope: String, action: String, riskLevel: String? = nil, status: Bool? = nil, isDelete: Bool? = nil) {
            self.scope = scope
            self.action = action
            self.riskLevel = riskLevel
            self.status = status
            self.isDelete = isDelete
        }

        enum CodingKeys: String, CodingKey {
            case scope = "Scope"
            case action = "Action"
            case riskLevel = "RiskLevel"
            case status = "Status"
            case isDelete = "IsDelete"
        }
    }

    /// k8sapi异常请求趋势Item
    public struct K8sApiAbnormalTendencyItem: TCOutputModel {
        /// 日期
        public let date: String

        /// 异常UA请求事件数
        public let exceptionUARequestCount: UInt64

        /// 匿名用户权限事件数
        public let anonymousUserRightCount: UInt64

        /// 凭据信息获取事件数
        public let credentialInformationObtainCount: UInt64

        /// 敏感数据挂载事件数
        public let sensitiveDataMountCount: UInt64

        /// 命令执行事件数
        public let cmdExecCount: UInt64

        /// 异常定时任务事件数
        public let abnormalScheduledTaskCount: UInt64

        /// 静态Pod创建数
        public let staticsPodCreateCount: UInt64

        /// 可疑容器创建数
        public let doubtfulContainerCreateCount: UInt64

        /// 自定义规则事件数
        public let userDefinedRuleCount: UInt64

        /// 匿名访问事件数
        public let anonymousAccessCount: UInt64

        /// 特权容器事件数
        public let privilegeContainerCount: UInt64

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case exceptionUARequestCount = "ExceptionUARequestCount"
            case anonymousUserRightCount = "AnonymousUserRightCount"
            case credentialInformationObtainCount = "CredentialInformationObtainCount"
            case sensitiveDataMountCount = "SensitiveDataMountCount"
            case cmdExecCount = "CmdExecCount"
            case abnormalScheduledTaskCount = "AbnormalScheduledTaskCount"
            case staticsPodCreateCount = "StaticsPodCreateCount"
            case doubtfulContainerCreateCount = "DoubtfulContainerCreateCount"
            case userDefinedRuleCount = "UserDefinedRuleCount"
            case anonymousAccessCount = "AnonymousAccessCount"
            case privilegeContainerCount = "PrivilegeContainerCount"
        }
    }

    /// 漏洞扫描新增和取消忽略漏洞入参
    public struct ModifyIgnoreVul: TCInputModel {
        /// 漏洞PocID
        public let pocID: String

        /// 忽略的镜像ID，空表示全部
        public let imageIDs: [String]?

        /// 当有镜像时
        /// 镜像类型: LOCAL 本地镜像 REGISTRY 仓库镜像
        public let imageType: String?

        public init(pocID: String, imageIDs: [String]? = nil, imageType: String? = nil) {
            self.pocID = pocID
            self.imageIDs = imageIDs
            self.imageType = imageType
        }

        enum CodingKeys: String, CodingKey {
            case pocID = "PocID"
            case imageIDs = "ImageIDs"
            case imageType = "ImageType"
        }
    }

    /// 网络集群资产审计返回结构体
    public struct NetworkAuditRecord: TCOutputModel {
        /// 集群id
        public let clusterId: String

        /// 集群名字
        public let clusterName: String

        /// 集群区域
        public let region: String

        /// 动作
        public let action: String

        /// 操作人
        public let operation: String

        /// 策略名
        public let networkPolicyName: String

        /// 操作时间
        public let operationTime: String

        /// 操作人appid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: Int64?

        /// 操作人uin
        public let uin: String

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case region = "Region"
            case action = "Action"
            case operation = "Operation"
            case networkPolicyName = "NetworkPolicyName"
            case operationTime = "OperationTime"
            case appId = "AppId"
            case uin = "Uin"
        }
    }

    /// 网络集群资产返回的结构体
    public struct NetworkClusterInfoItem: TCOutputModel {
        /// 集群id
        public let clusterId: String

        /// 集群名字
        public let clusterName: String

        /// 集群版本
        public let clusterVersion: String

        /// 集群操作系统
        public let clusterOs: String

        /// 集群类型
        public let clusterType: String

        /// 集群区域
        public let region: String

        /// 集群网络插件
        public let networkPolicyPlugin: String

        /// 集群状态
        public let clusterStatus: String

        /// 总策略数量
        public let totalRuleCount: Int64

        /// 已开启策略数量
        public let enableRuleCount: Int64

        /// 集群网络插件状态，正常：Running 不正常：Error
        public let networkPolicyPluginStatus: String

        /// 集群网络插件错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkPolicyPluginError: String?

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case clusterVersion = "ClusterVersion"
            case clusterOs = "ClusterOs"
            case clusterType = "ClusterType"
            case region = "Region"
            case networkPolicyPlugin = "NetworkPolicyPlugin"
            case clusterStatus = "ClusterStatus"
            case totalRuleCount = "TotalRuleCount"
            case enableRuleCount = "EnableRuleCount"
            case networkPolicyPluginStatus = "NetworkPolicyPluginStatus"
            case networkPolicyPluginError = "NetworkPolicyPluginError"
        }
    }

    /// 网络集群网络空间返回的结构体
    public struct NetworkClusterNamespaceInfo: TCOutputModel {
        /// 网络空间标签
        public let labels: String

        /// 网络空间名字
        public let name: String

        enum CodingKeys: String, CodingKey {
            case labels = "Labels"
            case name = "Name"
        }
    }

    /// 网络集群网络空间标签返回的结构体
    public struct NetworkClusterNamespaceLabelInfo: TCOutputModel {
        /// 网络空间标签
        public let labels: String

        /// 网络空间名字
        public let name: String

        enum CodingKeys: String, CodingKey {
            case labels = "Labels"
            case name = "Name"
        }
    }

    /// 网络集群pod返回的结构体
    public struct NetworkClusterPodInfo: TCOutputModel {
        /// pod名字
        public let podName: String

        /// pod空间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespace: String?

        /// pod标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labels: String?

        /// pod类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workloadKind: String?

        enum CodingKeys: String, CodingKey {
            case podName = "PodName"
            case namespace = "Namespace"
            case labels = "Labels"
            case workloadKind = "WorkloadKind"
        }
    }

    /// 网络集群策略自定义规则
    public struct NetworkCustomPolicy: TCInputModel, TCOutputModel {
        /// 网络策略方向，分为FROM和TO
        public let direction: String

        /// 网络策略策略端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ports: [NetworkPorts]?

        /// 网络策略策略对象
        ///
        /// 开启待确认：PublishedNoConfirm
        ///
        /// 开启已确认：PublishedConfirmed
        ///
        /// 关闭中：unPublishing
        ///
        /// 开启中：Publishing
        ///
        /// 待开启：unPublishEdit
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let peer: [NetworkPeer]?

        public init(direction: String, ports: [NetworkPorts]? = nil, peer: [NetworkPeer]? = nil) {
            self.direction = direction
            self.ports = ports
            self.peer = peer
        }

        enum CodingKeys: String, CodingKey {
            case direction = "Direction"
            case ports = "Ports"
            case peer = "Peer"
        }
    }

    /// 网络集群策略自定义规则
    public struct NetworkPeer: TCInputModel, TCOutputModel {
        /// 对象类型：
        ///
        /// 命名空间：NamespaceSelector，代表NamespaceSelector有值
        ///
        /// pod类型：PodSelector，代表NamespaceSelector和PodSelector都有值
        ///
        /// ip类型：IPBlock，代表只有IPBlock有值
        public let peerType: String

        /// 空间选择器
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let namespaceSelector: String?

        /// pod选择器
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let podSelector: String?

        /// Ip选择器
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipBlock: String?

        public init(peerType: String, namespaceSelector: String? = nil, podSelector: String? = nil, ipBlock: String? = nil) {
            self.peerType = peerType
            self.namespaceSelector = namespaceSelector
            self.podSelector = podSelector
            self.ipBlock = ipBlock
        }

        enum CodingKeys: String, CodingKey {
            case peerType = "PeerType"
            case namespaceSelector = "NamespaceSelector"
            case podSelector = "PodSelector"
            case ipBlock = "IPBlock"
        }
    }

    /// 网络集群策略返回的结构体
    public struct NetworkPolicyInfoItem: TCOutputModel {
        /// 网络策略名
        public let name: String

        /// 网络策略描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 发布状态：
        ///
        /// 开启待确认：PublishedNoConfirm
        ///
        /// 开启已确认：PublishedConfirmed
        ///
        /// 关闭中：unPublishing
        ///
        /// 开启中：Publishing
        ///
        /// 待开启：unPublishEdit
        public let publishStatus: String

        /// 策略类型：
        ///
        /// 自动发现：System
        ///
        /// 手动添加：Manual
        public let policySourceType: String

        /// 策略空间
        public let namespace: String

        /// 策略创建日期
        public let policyCreateTime: String

        /// 策略类型
        ///
        /// kube-router：KubeRouter
        ///
        /// cilium：Cilium
        public let networkPolicyPlugin: String

        /// 策略发布结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publishResult: String?

        /// 入站规则
        ///
        /// 全部允许：1
        ///
        /// 全部拒绝 ：2
        ///
        /// 自定义：3
        public let fromPolicyRule: Int64

        /// 入站规则
        ///
        /// 全部允许：1
        ///
        /// 全部拒绝 ：2
        ///
        /// 自定义：3
        public let toPolicyRule: Int64

        /// 作用对象
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let podSelector: String?

        /// 网络策略Id
        public let id: UInt64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case publishStatus = "PublishStatus"
            case policySourceType = "PolicySourceType"
            case namespace = "Namespace"
            case policyCreateTime = "PolicyCreateTime"
            case networkPolicyPlugin = "NetworkPolicyPlugin"
            case publishResult = "PublishResult"
            case fromPolicyRule = "FromPolicyRule"
            case toPolicyRule = "ToPolicyRule"
            case podSelector = "PodSelector"
            case id = "Id"
        }
    }

    /// 网络集群策略自定义规则端口
    public struct NetworkPorts: TCInputModel, TCOutputModel {
        /// 网络策略协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 网络策略策略端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        public init(protocol: String? = nil, port: String? = nil) {
            self.`protocol` = `protocol`
            self.port = port
        }

        enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case port = "Port"
        }
    }

    /// 容器安全端口信息列表
    public struct PortInfo: TCOutputModel {
        /// 类型
        public let type: String

        /// 对外ip
        public let publicIP: String

        /// 主机端口
        public let publicPort: UInt64

        /// 容器端口
        public let containerPort: UInt64

        /// 容器Pid
        public let containerPID: UInt64

        /// 容器名
        public let containerName: String

        /// 主机id
        public let hostID: String

        /// 主机ip
        public let hostIP: String

        /// 进程名称
        public let processName: String

        /// 容器内监听地址
        public let listenContainer: String

        /// 容器外监听地址
        public let listenHost: String

        /// 运行账号
        public let runAs: String

        /// 主机名称
        public let hostName: String

        /// 外网ip
        public let publicIp: String

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case publicIP = "PublicIP"
            case publicPort = "PublicPort"
            case containerPort = "ContainerPort"
            case containerPID = "ContainerPID"
            case containerName = "ContainerName"
            case hostID = "HostID"
            case hostIP = "HostIP"
            case processName = "ProcessName"
            case listenContainer = "ListenContainer"
            case listenHost = "ListenHost"
            case runAs = "RunAs"
            case hostName = "HostName"
            case publicIp = "PublicIp"
        }
    }

    /// 运行时安全，进程基础信息
    public struct ProcessBaseInfo: TCOutputModel {
        /// 进程启动用户
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processStartUser: String?

        /// 进程用户组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processUserGroup: String?

        /// 进程路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processPath: String?

        /// 进程命令行参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processParam: String?

        enum CodingKeys: String, CodingKey {
            case processStartUser = "ProcessStartUser"
            case processUserGroup = "ProcessUserGroup"
            case processPath = "ProcessPath"
            case processParam = "ProcessParam"
        }
    }

    /// 运行是安全详情，进程基础信息
    public struct ProcessDetailBaseInfo: TCOutputModel {
        /// 进程名称
        public let processName: String

        /// 进程pid
        public let processId: UInt64

        /// 进程启动用户
        public let processStartUser: String

        /// 进程用户组
        public let processUserGroup: String

        /// 进程路径
        public let processPath: String

        /// 进程命令行参数
        public let processParam: String

        enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
            case processId = "ProcessId"
            case processStartUser = "ProcessStartUser"
            case processUserGroup = "ProcessUserGroup"
            case processPath = "ProcessPath"
            case processParam = "ProcessParam"
        }
    }

    /// 运行是安全详情，进程信息
    public struct ProcessDetailInfo: TCOutputModel {
        /// 进程名称
        public let processName: String

        /// 进程权限
        public let processAuthority: String

        /// 进程pid
        public let processId: UInt64

        /// 进程启动用户
        public let processStartUser: String

        /// 进程用户组
        public let processUserGroup: String

        /// 进程路径
        public let processPath: String

        /// 进程树
        public let processTree: String

        /// 进程md5
        public let processMd5: String

        /// 进程命令行参数
        public let processParam: String

        enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
            case processAuthority = "ProcessAuthority"
            case processId = "ProcessId"
            case processStartUser = "ProcessStartUser"
            case processUserGroup = "ProcessUserGroup"
            case processPath = "ProcessPath"
            case processTree = "ProcessTree"
            case processMd5 = "ProcessMd5"
            case processParam = "ProcessParam"
        }
    }

    /// 容器安全进程列表
    public struct ProcessInfo: TCOutputModel {
        /// 进程启动时间
        public let startTime: String

        /// 运行用户
        public let runAs: String

        /// 命令行参数
        public let cmdLine: String

        /// Exe路径
        public let exe: String

        /// 主机PID
        public let pid: UInt64

        /// 容器内pid
        public let containerPID: UInt64

        /// 容器名称
        public let containerName: String

        /// 主机id
        public let hostID: String

        /// 主机ip
        public let hostIP: String

        /// 进程名称
        public let processName: String

        /// 主机名称
        public let hostName: String

        /// 外网ip
        public let publicIp: String

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case runAs = "RunAs"
            case cmdLine = "CmdLine"
            case exe = "Exe"
            case pid = "PID"
            case containerPID = "ContainerPID"
            case containerName = "ContainerName"
            case hostID = "HostID"
            case hostIP = "HostIP"
            case processName = "ProcessName"
            case hostName = "HostName"
            case publicIp = "PublicIp"
        }
    }

    /// 主机所属项目
    public struct ProjectInfo: TCOutputModel {
        /// 项目名称
        public let projectName: String

        /// 项目ID
        public let projectID: Int64

        enum CodingKeys: String, CodingKey {
            case projectName = "ProjectName"
            case projectID = "ProjectID"
        }
    }

    /// 促销活动内容
    public struct PromotionActivityContent: TCOutputModel {
        /// 月数
        public let monthNum: UInt64

        /// 核数最低限量
        public let coresCountLimit: UInt64

        /// 专业版折扣
        public let professionalDiscount: UInt64

        /// 附赠镜像数
        public let imageAuthorizationNum: UInt64

        enum CodingKeys: String, CodingKey {
            case monthNum = "MonthNum"
            case coresCountLimit = "CoresCountLimit"
            case professionalDiscount = "ProfessionalDiscount"
            case imageAuthorizationNum = "ImageAuthorizationNum"
        }
    }

    /// 漏洞防御插件 rasp信息
    public struct RaspInfo: TCOutputModel {
        /// rasp名称
        public let name: String

        /// rasp  描述
        public let value: String

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    /// 地域信息
    public struct RegionInfo: TCOutputModel {
        /// 地域标识
        public let region: String

        /// 地域名称
        public let regionName: String

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionName = "RegionName"
        }
    }

    /// 运行时容器反弹shell事件描述信息
    public struct ReverseShellEventDescription: TCOutputModel {
        /// 描述信息
        public let description: String

        /// 解决方案
        public let solution: String

        /// 事件备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 目标地址
        public let dstAddress: String

        /// 事件最后一次处理的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationTime: String?

        enum CodingKeys: String, CodingKey {
            case description = "Description"
            case solution = "Solution"
            case remark = "Remark"
            case dstAddress = "DstAddress"
            case operationTime = "OperationTime"
        }
    }

    /// 容器安全运行时高危系统调用信息
    public struct ReverseShellEventInfo: TCOutputModel {
        /// 进程名称
        public let processName: String

        /// 进程路径
        public let processPath: String

        /// 镜像id
        public let imageId: String

        /// 容器id
        public let containerId: String

        /// 镜像名
        public let imageName: String

        /// 容器名
        public let containerName: String

        /// 生成时间
        public let foundTime: String

        /// 事件解决方案
        public let solution: String

        /// 事件详细描述
        public let description: String

        /// 状态，EVENT_UNDEAL:事件未处理
        ///     EVENT_DEALED:事件已经处理
        ///     EVENT_INGNORE：事件已经忽略
        ///     EVENT_ADD_WHITE：时间已经加白
        public let status: String

        /// 事件id
        public let eventId: String

        /// 备注
        public let remark: String

        /// 父进程名
        public let pProcessName: String

        /// 事件数量
        public let eventCount: Int64

        /// 最近生成时间
        public let latestFoundTime: String

        /// 目标地址
        public let dstAddress: String

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        public let containerNetStatus: String

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// 	"NODE_DESTROYED"      //节点已销毁
        /// 	"CONTAINER_EXITED"    //容器已退出
        /// 	"CONTAINER_DESTROYED" //容器已销毁
        /// 	"SHARED_HOST"         // 容器与主机共享网络
        /// 	"RESOURCE_LIMIT"      //隔离操作资源超限
        /// 	"UNKNOW"              // 原因未知
        public let containerNetSubStatus: String

        /// 容器隔离操作来源
        public let containerIsolateOperationSrc: String

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        public let containerStatus: String

        enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
            case processPath = "ProcessPath"
            case imageId = "ImageId"
            case containerId = "ContainerId"
            case imageName = "ImageName"
            case containerName = "ContainerName"
            case foundTime = "FoundTime"
            case solution = "Solution"
            case description = "Description"
            case status = "Status"
            case eventId = "EventId"
            case remark = "Remark"
            case pProcessName = "PProcessName"
            case eventCount = "EventCount"
            case latestFoundTime = "LatestFoundTime"
            case dstAddress = "DstAddress"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case containerStatus = "ContainerStatus"
        }
    }

    /// 反弹shell白名单信息
    public struct ReverseShellWhiteListBaseInfo: TCOutputModel {
        /// 白名单id
        public let id: String

        /// 镜像数量
        public let imageCount: UInt64

        /// 连接进程名字
        public let processName: String

        /// 目标地址ip
        public let dstIp: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 目标端口
        public let dstPort: String

        /// 是否是全局白名单，true全局
        public let isGlobal: Bool

        /// 镜像id数组，为空代表全部
        public let imageIds: [String]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case imageCount = "ImageCount"
            case processName = "ProcessName"
            case dstIp = "DstIp"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case dstPort = "DstPort"
            case isGlobal = "IsGlobal"
            case imageIds = "ImageIds"
        }
    }

    /// 反弹shell白名单信息
    public struct ReverseShellWhiteListInfo: TCInputModel, TCOutputModel {
        /// 目标IP
        public let dstIp: String

        /// 目标端口
        public let dstPort: String

        /// 目标进程
        public let processName: String

        /// 镜像id数组，为空代表全部
        public let imageIds: [String]

        /// 白名单id，如果新建则id为空
        public let id: String?

        public init(dstIp: String, dstPort: String, processName: String, imageIds: [String], id: String? = nil) {
            self.dstIp = dstIp
            self.dstPort = dstPort
            self.processName = processName
            self.imageIds = imageIds
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case dstIp = "DstIp"
            case dstPort = "DstPort"
            case processName = "ProcessName"
            case imageIds = "ImageIds"
            case id = "Id"
        }
    }

    /// 运行时容器高危系统调用事件描述信息
    public struct RiskSyscallEventDescription: TCOutputModel {
        /// 描述信息
        public let description: String

        /// 解决方案
        public let solution: String

        /// 事件备注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 系统调用名称
        public let syscallName: String

        /// 事件最后一次处理的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationTime: String?

        enum CodingKeys: String, CodingKey {
            case description = "Description"
            case solution = "Solution"
            case remark = "Remark"
            case syscallName = "SyscallName"
            case operationTime = "OperationTime"
        }
    }

    /// 容器安全运行时高危系统调用信息
    public struct RiskSyscallEventInfo: TCOutputModel {
        /// 进程名称
        public let processName: String

        /// 进程路径
        public let processPath: String

        /// 镜像id
        public let imageId: String

        /// 容器id
        public let containerId: String

        /// 镜像名
        public let imageName: String

        /// 容器名
        public let containerName: String

        /// 生成时间
        public let foundTime: String

        /// 事件解决方案
        public let solution: String

        /// 事件详细描述
        public let description: String

        /// 系统调用名称
        public let syscallName: String

        /// 状态，EVENT_UNDEAL:事件未处理
        ///     EVENT_DEALED:事件已经处理
        ///     EVENT_INGNORE：事件已经忽略
        ///     EVENT_ADD_WHITE：时间已经加白
        public let status: String

        /// 事件id
        public let eventId: String

        /// 节点名称
        public let nodeName: String

        /// pod(实例)的名字
        public let podName: String

        /// 备注
        public let remark: String

        /// 系统监控名称是否存在
        public let ruleExist: Bool

        /// 事件数量
        public let eventCount: Int64

        /// 最近生成时间
        public let latestFoundTime: String

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        public let containerNetStatus: String

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// "NODE_DESTROYED"      //节点已销毁
        /// "CONTAINER_EXITED"    //容器已退出
        /// "CONTAINER_DESTROYED" //容器已销毁
        /// "SHARED_HOST"         // 容器与主机共享网络
        /// "RESOURCE_LIMIT"      //隔离操作资源超限
        /// "UNKNOW"              // 原因未知
        public let containerNetSubStatus: String

        /// 容器隔离操作来源
        public let containerIsolateOperationSrc: String

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        public let containerStatus: String

        enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
            case processPath = "ProcessPath"
            case imageId = "ImageId"
            case containerId = "ContainerId"
            case imageName = "ImageName"
            case containerName = "ContainerName"
            case foundTime = "FoundTime"
            case solution = "Solution"
            case description = "Description"
            case syscallName = "SyscallName"
            case status = "Status"
            case eventId = "EventId"
            case nodeName = "NodeName"
            case podName = "PodName"
            case remark = "Remark"
            case ruleExist = "RuleExist"
            case eventCount = "EventCount"
            case latestFoundTime = "LatestFoundTime"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case containerStatus = "ContainerStatus"
        }
    }

    /// 高危系统调用白名单信息
    public struct RiskSyscallWhiteListBaseInfo: TCOutputModel {
        /// 白名单id
        public let id: String

        /// 镜像数量
        public let imageCount: UInt64

        /// 连接进程路径
        public let processPath: String

        /// 系统调用名称列表
        public let syscallNames: [String]

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 是否是全局白名单，true全局
        public let isGlobal: Bool

        /// 镜像id数组
        public let imageIds: [String]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case imageCount = "ImageCount"
            case processPath = "ProcessPath"
            case syscallNames = "SyscallNames"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case isGlobal = "IsGlobal"
            case imageIds = "ImageIds"
        }
    }

    /// 高危系统调用白名单信息
    public struct RiskSyscallWhiteListInfo: TCInputModel, TCOutputModel {
        /// 镜像id数组，为空代表全部
        public let imageIds: [String]

        /// 系统调用名称，通过DescribeRiskSyscallNames接口获取枚举列表
        public let syscallNames: [String]?

        /// 目标进程
        public let processPath: String?

        /// 白名单id，如果新建则id为空
        public let id: String?

        public init(imageIds: [String], syscallNames: [String]? = nil, processPath: String? = nil, id: String? = nil) {
            self.imageIds = imageIds
            self.syscallNames = syscallNames
            self.processPath = processPath
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case imageIds = "ImageIds"
            case syscallNames = "SyscallNames"
            case processPath = "ProcessPath"
            case id = "Id"
        }
    }

    /// 运行时安全，策略基本信息
    public struct RuleBaseInfo: TCOutputModel {
        /// true: 默认策略，false:自定义策略
        public let isDefault: Bool

        /// 策略生效镜像数量
        public let effectImageCount: UInt64

        /// 策略Id
        public let ruleId: String

        /// 策略更新时间, 存在为空的情况
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 策略名字
        public let ruleName: String

        /// 编辑用户名称
        public let editUserName: String

        /// true: 策略启用，false：策略禁用
        public let isEnable: Bool

        enum CodingKeys: String, CodingKey {
            case isDefault = "IsDefault"
            case effectImageCount = "EffectImageCount"
            case ruleId = "RuleId"
            case updateTime = "UpdateTime"
            case ruleName = "RuleName"
            case editUserName = "EditUserName"
            case isEnable = "IsEnable"
        }
    }

    /// 运行时安全事件基本信息
    public struct RunTimeEventBaseInfo: TCOutputModel {
        /// 事件唯一ID
        public let eventId: String

        /// 事件发现时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var foundTime: Date

        /// 容器id
        public let containerId: String

        /// 容器名称
        public let containerName: String

        /// 镜像id
        public let imageId: String

        /// 镜像名称
        public let imageName: String

        /// 节点名称
        public let nodeName: String

        /// Pod名称
        public let podName: String

        /// 状态， “EVENT_UNDEAL”:事件未处理
        ///     "EVENT_DEALED":事件已经处理
        ///     "EVENT_INGNORE"：事件已经忽略
        public let status: String

        /// 事件名称：
        /// 宿主机文件访问逃逸、
        /// Syscall逃逸、
        /// MountNamespace逃逸、
        /// 程序提权逃逸、
        /// 特权容器启动逃逸、
        /// 敏感路径挂载
        /// 恶意进程启动
        /// 文件篡改
        public let eventName: String

        /// 事件类型
        ///    ESCAPE_HOST_ACESS_FILE:宿主机文件访问逃逸
        ///    ESCAPE_MOUNT_NAMESPACE:MountNamespace逃逸
        ///    ESCAPE_PRIVILEDGE:程序提权逃逸
        ///    ESCAPE_PRIVILEDGE_CONTAINER_START:特权容器启动逃逸
        ///    ESCAPE_MOUNT_SENSITIVE_PTAH:敏感路径挂载
        ///    ESCAPE_SYSCALL:Syscall逃逸
        public let eventType: String

        /// 事件数量
        public let eventCount: Int64

        /// 最近生成时间
        public let latestFoundTime: String

        /// 内网ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostIP: String?

        /// 外网ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientIP: String?

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetStatus: String?

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// "NODE_DESTROYED"      //节点已销毁
        /// "CONTAINER_EXITED"    //容器已退出
        /// "CONTAINER_DESTROYED" //容器已销毁
        /// "SHARED_HOST"         // 容器与主机共享网络
        /// "RESOURCE_LIMIT"      //隔离操作资源超限
        /// "UNKNOW"              // 原因未知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetSubStatus: String?

        /// 容器隔离操作来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerIsolateOperationSrc: String?

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case foundTime = "FoundTime"
            case containerId = "ContainerId"
            case containerName = "ContainerName"
            case imageId = "ImageId"
            case imageName = "ImageName"
            case nodeName = "NodeName"
            case podName = "PodName"
            case status = "Status"
            case eventName = "EventName"
            case eventType = "EventType"
            case eventCount = "EventCount"
            case latestFoundTime = "LatestFoundTime"
            case hostIP = "HostIP"
            case clientIP = "ClientIP"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
        }
    }

    /// 容器安全
    /// 描述键值对过滤器，用于条件过滤查询。例如过滤ID、名称、状态等
    /// 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
    /// 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct RunTimeFilters: TCInputModel {
        /// 过滤键的名称
        public let name: String

        /// 一个或者多个过滤值。
        public let values: [String]

        /// 是否模糊查询
        public let exactMatch: Bool?

        public init(name: String, values: [String], exactMatch: Bool? = nil) {
            self.name = name
            self.values = values
            self.exactMatch = exactMatch
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case exactMatch = "ExactMatch"
        }
    }

    /// 运行时风险信息
    public struct RunTimeRiskInfo: TCOutputModel {
        /// 数量
        public let cnt: UInt64

        /// 风险等级：
        /// CRITICAL: 严重
        /// HIGH: 高
        /// MEDIUM：中
        /// LOW: 低
        public let level: String

        enum CodingKeys: String, CodingKey {
            case cnt = "Cnt"
            case level = "Level"
        }
    }

    /// 运行时趋势信息
    public struct RunTimeTendencyInfo: TCOutputModel {
        /// 当天时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var curTime: Date

        /// 当前数量
        public let cnt: UInt64

        enum CodingKeys: String, CodingKey {
            case curTime = "CurTime"
            case cnt = "Cnt"
        }
    }

    /// 扫描忽略的漏洞
    public struct ScanIgnoreVul: TCOutputModel {
        /// 漏洞名称
        public let vulName: String

        /// 漏洞CVEID
        public let cveid: String

        /// 漏洞PocID
        public let pocID: String

        /// 忽略的仓库镜像数
        public let registryImageCount: Int64

        /// 更新时间
        public let updateTime: String

        /// 是否忽略所有镜像：0：否/1：是
        public let isIgnoreAll: Int64

        /// 忽略的本地镜像数
        public let localImageCount: Int64

        enum CodingKeys: String, CodingKey {
            case vulName = "VulName"
            case cveid = "CVEID"
            case pocID = "PocID"
            case registryImageCount = "RegistryImageCount"
            case updateTime = "UpdateTime"
            case isIgnoreAll = "IsIgnoreAll"
            case localImageCount = "LocalImageCount"
        }
    }

    /// 快速搜索模板
    public struct SearchTemplate: TCInputModel, TCOutputModel {
        /// 检索名称
        public let name: String

        /// 检索索引类型
        public let logType: String

        /// 检索语句
        public let condition: String

        /// 时间范围
        public let timeRange: String

        /// 转换的检索语句内容
        public let query: String

        /// 检索方式。输入框检索：standard,过滤，检索：simple
        public let flag: String

        /// 展示数据
        public let displayData: String

        /// 规则ID
        public let id: UInt64?

        public init(name: String, logType: String, condition: String, timeRange: String, query: String, flag: String, displayData: String, id: UInt64? = nil) {
            self.name = name
            self.logType = logType
            self.condition = condition
            self.timeRange = timeRange
            self.query = query
            self.flag = flag
            self.displayData = displayData
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case logType = "LogType"
            case condition = "Condition"
            case timeRange = "TimeRange"
            case query = "Query"
            case flag = "Flag"
            case displayData = "DisplayData"
            case id = "Id"
        }
    }

    /// 安全日志告警信息
    public struct SecLogAlertMsgInfo: TCOutputModel {
        /// 告警类型
        public let msgType: String

        /// 告警值
        public let msgValue: String

        /// 状态(0:关闭 1:开启)
        public let state: Bool

        enum CodingKeys: String, CodingKey {
            case msgType = "MsgType"
            case msgValue = "MsgValue"
            case state = "State"
        }
    }

    /// 安全日志-日志投递cls设置信息
    public struct SecLogDeliveryClsSettingInfo: TCInputModel, TCOutputModel {
        /// 日志类型
        public let logType: String

        /// 投递状态(true:开启 false:关闭)
        public let state: Bool

        /// 区域
        public let region: String

        /// 日志集
        public let logSet: String

        /// 主题ID
        public let topicID: String

        /// 日志集名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logSetName: String?

        /// 主题名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicName: String?

        public init(logType: String, state: Bool, region: String, logSet: String, topicID: String, logSetName: String? = nil, topicName: String? = nil) {
            self.logType = logType
            self.state = state
            self.region = region
            self.logSet = logSet
            self.topicID = topicID
            self.logSetName = logSetName
            self.topicName = topicName
        }

        enum CodingKeys: String, CodingKey {
            case logType = "LogType"
            case state = "State"
            case region = "Region"
            case logSet = "LogSet"
            case topicID = "TopicID"
            case logSetName = "LogSetName"
            case topicName = "TopicName"
        }
    }

    /// 安全日志日志投递kafka设置详情
    public struct SecLogDeliveryKafkaSettingInfo: TCInputModel, TCOutputModel {
        /// 日志类型
        public let logType: String

        /// 主题ID
        public let topicID: String

        /// 主题名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicName: String?

        /// 投递状态(false:关 true:开)
        public let state: Bool

        public init(logType: String, topicID: String, topicName: String, state: Bool) {
            self.logType = logType
            self.topicID = topicID
            self.topicName = topicName
            self.state = state
        }

        enum CodingKeys: String, CodingKey {
            case logType = "LogType"
            case topicID = "TopicID"
            case topicName = "TopicName"
            case state = "State"
        }
    }

    /// 安全日志接入详情
    public struct SecLogJoinInfo: TCOutputModel {
        /// 已接入数量
        public let count: UInt64

        /// 是否已接入(true:已接入 false:未接入)
        public let isJoined: Bool

        /// 日志类型(
        /// 容器bash:  "container_bash"
        /// 容器启动: "container_launch"
        /// k8sApi: "k8s_api"
        /// )
        public let logType: String

        enum CodingKeys: String, CodingKey {
            case count = "Count"
            case isJoined = "IsJoined"
            case logType = "LogType"
        }
    }

    /// 安全日志接入对象详情
    public struct SecLogJoinObjectInfo: TCOutputModel {
        /// 主机ID
        public let hostID: String

        /// 主机名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostName: String?

        /// 主机IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostIP: String?

        /// 主机状态
        public let hostStatus: String

        /// 集群ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterID: String?

        /// 集群名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        /// 外网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIP: String?

        /// 接入状态(true:已接入  false:未接入)
        public let joinState: Bool

        /// 集群版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterVersion: String?

        /// 集群主节点地址
        public let clusterMainAddress: String

        enum CodingKeys: String, CodingKey {
            case hostID = "HostID"
            case hostName = "HostName"
            case hostIP = "HostIP"
            case hostStatus = "HostStatus"
            case clusterID = "ClusterID"
            case clusterName = "ClusterName"
            case publicIP = "PublicIP"
            case joinState = "JoinState"
            case clusterVersion = "ClusterVersion"
            case clusterMainAddress = "ClusterMainAddress"
        }
    }

    /// 运行时安全事件趋势信息
    public struct SecTendencyEventInfo: TCOutputModel {
        /// 趋势列表
        public let eventSet: [RunTimeTendencyInfo]

        /// 事件类型：
        /// ET_ESCAPE : 容器逃逸
        /// ET_REVERSE_SHELL: 反弹shell
        /// ET_RISK_SYSCALL:高危系统调用
        /// ET_ABNORMAL_PROCESS: 异常进程
        /// ET_ACCESS_CONTROL 文件篡改
        /// ET_VIRUS 木马事件
        /// ET_MALICIOUS_CONNECTION 恶意外连事件
        public let eventType: String

        enum CodingKeys: String, CodingKey {
            case eventSet = "EventSet"
            case eventType = "EventType"
        }
    }

    /// 容器安全服务信息列表
    public struct ServiceInfo: TCOutputModel {
        /// 服务id
        public let serviceID: String

        /// 主机id
        public let hostID: String

        /// 主机ip
        public let hostIP: String

        /// 容器名
        public let containerName: String

        /// 服务名 例如nginx/redis
        public let type: String

        /// 版本
        public let version: String

        /// 账号
        public let runAs: String

        /// 监听端口
        public let listen: [String]

        /// 配置
        public let config: String

        /// 关联进程数
        public let processCnt: UInt64

        /// 访问日志
        public let accessLog: String

        /// 错误日志
        public let errorLog: String

        /// 数据目录
        public let dataPath: String

        /// web目录
        public let webRoot: String

        /// 关联的进程id
        public let pids: [UInt64]

        /// 服务类型 app,web,db
        public let mainType: String

        /// 执行文件
        public let exe: String

        /// 服务命令行参数
        public let parameter: String

        /// 容器id
        public let containerId: String

        /// 主机名称
        public let hostName: String

        /// 外网ip
        public let publicIp: String

        enum CodingKeys: String, CodingKey {
            case serviceID = "ServiceID"
            case hostID = "HostID"
            case hostIP = "HostIP"
            case containerName = "ContainerName"
            case type = "Type"
            case version = "Version"
            case runAs = "RunAs"
            case listen = "Listen"
            case config = "Config"
            case processCnt = "ProcessCnt"
            case accessLog = "AccessLog"
            case errorLog = "ErrorLog"
            case dataPath = "DataPath"
            case webRoot = "WebRoot"
            case pids = "Pids"
            case mainType = "MainType"
            case exe = "Exe"
            case parameter = "Parameter"
            case containerId = "ContainerId"
            case hostName = "HostName"
            case publicIp = "PublicIp"
        }
    }

    /// 后付费详情
    public struct SoftQuotaDayInfo: TCOutputModel {
        /// 扣费时间
        public let payTime: String

        /// 计费核数
        public let coresCnt: UInt64

        enum CodingKeys: String, CodingKey {
            case payTime = "PayTime"
            case coresCnt = "CoresCnt"
        }
    }

    /// 支持防御的漏洞
    public struct SupportDefenceVul: TCOutputModel {
        /// 漏洞PocID
        public let pocID: String

        /// 漏洞名称
        public let name: String

        /// 漏洞标签
        public let tags: [String]

        /// 漏洞CVSS
        public let cvssv3Score: Float

        /// 漏洞威胁等级
        public let level: String

        /// 漏洞CVEID
        public let cveid: String

        /// 漏洞披露时间
        public let submitTime: String

        enum CodingKeys: String, CodingKey {
            case pocID = "PocID"
            case name = "Name"
            case tags = "Tags"
            case cvssv3Score = "CVSSV3Score"
            case level = "Level"
            case cveid = "CVEID"
            case submitTime = "SubmitTime"
        }
    }

    /// 主机标签信息
    public struct TagInfo: TCOutputModel {
        /// 标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 未授权核数趋势
    public struct UnauthorizedCoresTendency: TCOutputModel {
        /// 日期
        public let dateTime: String

        /// 未授权的核数
        public let coresCount: Int64

        enum CodingKeys: String, CodingKey {
            case dateTime = "DateTime"
            case coresCount = "CoresCount"
        }
    }

    /// 木马自动隔离样本信息
    public struct VirusAutoIsolateSampleInfo: TCOutputModel {
        /// 文件MD5值
        public let md5: String

        /// 病毒名
        public let virusName: String

        /// 最近编辑时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifyTime: Date

        /// 自动隔离开关(true:开 false:关)
        public let autoIsolateSwitch: Bool

        enum CodingKeys: String, CodingKey {
            case md5 = "MD5"
            case virusName = "VirusName"
            case modifyTime = "ModifyTime"
            case autoIsolateSwitch = "AutoIsolateSwitch"
        }
    }

    /// 运行时木马列表信息
    public struct VirusInfo: TCOutputModel {
        /// 文件名称
        public let fileName: String

        /// 文件路径
        public let filePath: String

        /// 病毒名称
        public let virusName: String

        /// 创建时间
        public let createTime: String

        /// 更新时间
        public let modifyTime: String

        /// 容器名称
        public let containerName: String

        /// 容器id
        public let containerId: String

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        public let containerStatus: String

        /// 镜像名称
        public let imageName: String

        /// 镜像id
        public let imageId: String

        /// DEAL_NONE:文件待处理
        /// DEAL_IGNORE:已经忽略
        /// DEAL_ADD_WHITELIST:加白
        /// DEAL_DEL:文件已经删除
        /// DEAL_ISOLATE:已经隔离
        /// DEAL_ISOLATING:隔离中
        /// DEAL_ISOLATE_FAILED:隔离失败
        /// DEAL_RECOVERING:恢复中
        /// DEAL_RECOVER_FAILED: 恢复失败
        public let status: String

        /// 事件id
        public let id: String

        /// 事件描述
        public let harmDescribe: String

        /// 建议方案
        public let suggestScheme: String

        /// 失败子状态:
        /// FILE_NOT_FOUND:文件不存在
        /// FILE_ABNORMAL:文件异常
        /// FILE_ABNORMAL_DEAL_RECOVER:恢复文件时，文件异常
        /// BACKUP_FILE_NOT_FOUND:备份文件不存在
        /// CONTAINER_NOT_FOUND_DEAL_ISOLATE:隔离时，容器不存在
        /// CONTAINER_NOT_FOUND_DEAL_RECOVER:恢复时，容器不存在
        /// TIMEOUT: 超时
        /// TOO_MANY: 任务过多
        /// OFFLINE: 离线
        /// INTERNAL: 服务内部错误
        /// VALIDATION: 参数非法
        public let subStatus: String

        /// 网络状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        public let containerNetStatus: String

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// 	"NODE_DESTROYED"      //节点已销毁
        /// 	"CONTAINER_EXITED"    //容器已退出
        /// 	"CONTAINER_DESTROYED" //容器已销毁
        /// 	"SHARED_HOST"         // 容器与主机共享网络
        /// 	"RESOURCE_LIMIT"      //隔离操作资源超限
        /// 	"UNKNOW"              // 原因未知
        public let containerNetSubStatus: String

        /// 容器隔离操作来源
        public let containerIsolateOperationSrc: String

        /// md5值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let md5: String?

        /// 风险等级 RISK_CRITICAL, RISK_HIGH, RISK_MEDIUM, RISK_LOW, RISK_NOTICE。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let riskLevel: String?

        /// 检测平台
        /// 1: 云查杀引擎
        /// 2: tav
        /// 3: binaryAi
        /// 4: 异常行为
        /// 5: 威胁情报
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkPlatform: [String]?

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case filePath = "FilePath"
            case virusName = "VirusName"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
            case containerName = "ContainerName"
            case containerId = "ContainerId"
            case containerStatus = "ContainerStatus"
            case imageName = "ImageName"
            case imageId = "ImageId"
            case status = "Status"
            case id = "Id"
            case harmDescribe = "HarmDescribe"
            case suggestScheme = "SuggestScheme"
            case subStatus = "SubStatus"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case md5 = "MD5"
            case riskLevel = "RiskLevel"
            case checkPlatform = "CheckPlatform"
        }
    }

    /// 运行时文件查杀任务容器列表信息
    public struct VirusTaskInfo: TCOutputModel {
        /// 容器名称
        public let containerName: String

        /// 容器id
        public let containerId: String

        /// 镜像名称
        public let imageName: String

        /// 镜像Id
        public let imageId: String

        /// 主机名称
        public let hostName: String

        /// 主机ip
        public let hostIp: String

        /// 扫描状态：
        /// WAIT: 等待扫描
        /// FAILED: 失败
        /// SCANNING: 扫描中
        /// FINISHED: 结束
        /// CANCELING: 取消中
        /// CANCELED: 已取消
        /// CANCEL_FAILED： 取消失败
        public let status: String

        /// 检测开始时间
        public let startTime: String

        /// 检测结束时间
        public let endTime: String

        /// 风险个数
        public let riskCnt: UInt64

        /// 事件id
        public let id: String

        /// 错误原因:
        /// SEND_SUCCESSED: 下发成功
        /// SCAN_WAIT: agent排队扫描等待中
        /// OFFLINE: 离线
        /// SEND_FAILED:下发失败
        /// TIMEOUT: 超时
        /// LOW_AGENT_VERSION: 客户端版本过低
        /// AGENT_NOT_FOUND: 镜像所属客户端版不存在
        /// TOO_MANY: 任务过多
        /// VALIDATION: 参数非法
        /// INTERNAL: 服务内部错误
        /// MISC: 其他错误
        /// UNAUTH: 所在镜像未授权
        /// SEND_CANCEL_SUCCESSED:下发成功
        public let errorMsg: String

        enum CodingKeys: String, CodingKey {
            case containerName = "ContainerName"
            case containerId = "ContainerId"
            case imageName = "ImageName"
            case imageId = "ImageId"
            case hostName = "HostName"
            case hostIp = "HostIp"
            case status = "Status"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case riskCnt = "RiskCnt"
            case id = "Id"
            case errorMsg = "ErrorMsg"
        }
    }

    /// 木马趋势详情
    public struct VirusTendencyInfo: TCOutputModel {
        /// 日期
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var date: Date

        /// 待处理事件总数
        public let pendingEventCount: UInt64

        /// 风险容器总数
        public let riskContainerCount: UInt64

        /// 事件总数
        public let eventCount: UInt64

        /// 隔离事件总数
        public let isolateEventCount: UInt64

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case pendingEventCount = "PendingEventCount"
            case riskContainerCount = "RiskContainerCount"
            case eventCount = "EventCount"
            case isolateEventCount = "IsolateEventCount"
        }
    }

    /// 受漏洞影响的组件信息
    public struct VulAffectedComponentInfo: TCOutputModel {
        /// 组件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 组件版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: [String]?

        /// 组件修复版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fixedVersion: [String]?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
            case fixedVersion = "FixedVersion"
        }
    }

    /// 受漏洞影响的容器信息
    public struct VulAffectedContainerInfo: TCOutputModel {
        /// 内网IP
        public let hostIP: String

        /// 容器ID
        public let containerID: String

        /// 容器名称
        public let containerName: String

        /// Pod名称
        public let podName: String

        /// PodIP值
        public let podIP: String

        /// 主机名称
        public let hostName: String

        /// 主机ID
        public let hostID: String

        /// 外网IP
        public let publicIP: String

        enum CodingKeys: String, CodingKey {
            case hostIP = "HostIP"
            case containerID = "ContainerID"
            case containerName = "ContainerName"
            case podName = "PodName"
            case podIP = "PodIP"
            case hostName = "HostName"
            case hostID = "HostID"
            case publicIP = "PublicIP"
        }
    }

    /// 受漏洞影响的组件信息
    public struct VulAffectedImageComponentInfo: TCOutputModel {
        /// 组件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 组件版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        /// 组件修复版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fixedVersion: String?

        /// 组件路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let path: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
            case fixedVersion = "FixedVersion"
            case path = "Path"
        }
    }

    /// 受漏洞影响的镜像信息
    public struct VulAffectedImageInfo: TCOutputModel {
        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 关联的主机数
        public let hostCount: Int64

        /// 关联的容器数
        public let containerCount: Int64

        /// 组件列表
        public let componentList: [VulAffectedImageComponentInfo]

        enum CodingKeys: String, CodingKey {
            case imageID = "ImageID"
            case imageName = "ImageName"
            case hostCount = "HostCount"
            case containerCount = "ContainerCount"
            case componentList = "ComponentList"
        }
    }

    /// 漏洞防御事件详情
    public struct VulDefenceEvent: TCOutputModel {
        /// 漏洞CVEID
        public let cveid: String

        /// 漏洞名称
        public let vulName: String

        /// 漏洞PocID
        public let pocID: String

        /// 入侵状态
        public let eventType: String

        /// 攻击源IP
        public let sourceIP: String

        /// 攻击源ip地址所在城市
        public let city: String

        /// 事件数量
        public let eventCount: Int64

        /// 容器ID
        public let containerID: String

        /// 容器名称
        public let containerName: String

        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 处理状态
        public let status: String

        /// 事件ID
        public let eventID: Int64

        /// 首次发现时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 隔离状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        public let containerNetStatus: String

        /// 最近发现时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mergeTime: String?

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerStatus: String?

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// 	"NODE_DESTROYED"      //节点已销毁
        /// 	"CONTAINER_EXITED"    //容器已退出
        /// 	"CONTAINER_DESTROYED" //容器已销毁
        /// 	"SHARED_HOST"         // 容器与主机共享网络
        /// 	"RESOURCE_LIMIT"      //隔离操作资源超限
        /// 	"UNKNOW"              // 原因未知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetSubStatus: String?

        /// 容器隔离操作来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerIsolateOperationSrc: String?

        /// 主机QUUID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quuid: String?

        /// 主机内网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostIP: String?

        /// 主机名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostName: String?

        enum CodingKeys: String, CodingKey {
            case cveid = "CVEID"
            case vulName = "VulName"
            case pocID = "PocID"
            case eventType = "EventType"
            case sourceIP = "SourceIP"
            case city = "City"
            case eventCount = "EventCount"
            case containerID = "ContainerID"
            case containerName = "ContainerName"
            case imageID = "ImageID"
            case imageName = "ImageName"
            case status = "Status"
            case eventID = "EventID"
            case createTime = "CreateTime"
            case containerNetStatus = "ContainerNetStatus"
            case mergeTime = "MergeTime"
            case containerStatus = "ContainerStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case quuid = "QUUID"
            case hostIP = "HostIP"
            case hostName = "HostName"
        }
    }

    /// 漏洞防御事件详情
    public struct VulDefenceEventDetail: TCOutputModel {
        /// 漏洞CVEID
        public let cveid: String

        /// 漏洞名称
        public let vulName: String

        /// 漏洞PocID
        public let pocID: String

        /// 入侵状态
        public let eventType: String

        /// 攻击源IP
        public let sourceIP: String

        /// 攻击源ip地址所在城市
        public let city: String

        /// 事件数量
        public let eventCount: Int64

        /// 容器ID
        public let containerID: String

        /// 容器名称
        public let containerName: String

        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 处理状态
        public let status: String

        /// 攻击源端口
        public let sourcePort: [String]

        /// 事件ID
        public let eventID: Int64

        /// 主机名称
        public let hostName: String

        /// 主机内网IP
        public let hostIP: String

        /// 主机外网IP
        public let publicIP: String

        /// Pod名称
        public let podName: String

        /// 危害描述
        public let description: String

        /// 修复建议
        public let officialSolution: String

        /// 攻击包
        public let networkPayload: String

        /// 进程PID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pid: Int64?

        /// 进程主类名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mainClass: String?

        /// 堆栈信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stackTrace: String?

        /// 监听账号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverAccount: String?

        /// 监听端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverPort: String?

        /// 进程路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverExe: String?

        /// 进程命令行参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverArg: String?

        /// 主机QUUID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let quuid: String?

        /// 隔离状态
        /// 未隔离  	NORMAL
        /// 已隔离		ISOLATED
        /// 隔离中		ISOLATING
        /// 隔离失败	ISOLATE_FAILED
        /// 解除隔离中  RESTORING
        /// 解除隔离失败 RESTORE_FAILED
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetStatus: String?

        /// 容器子状态
        /// "AGENT_OFFLINE"       //Agent离线
        /// 	"NODE_DESTROYED"      //节点已销毁
        /// 	"CONTAINER_EXITED"    //容器已退出
        /// 	"CONTAINER_DESTROYED" //容器已销毁
        /// 	"SHARED_HOST"         // 容器与主机共享网络
        /// 	"RESOURCE_LIMIT"      //隔离操作资源超限
        /// 	"UNKNOW"              // 原因未知
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerNetSubStatus: String?

        /// 容器隔离操作来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerIsolateOperationSrc: String?

        /// 容器状态
        /// 正在运行: RUNNING
        /// 暂停: PAUSED
        /// 停止: STOPPED
        /// 已经创建: CREATED
        /// 已经销毁: DESTROYED
        /// 正在重启中: RESTARTING
        /// 迁移中: REMOVING
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerStatus: String?

        /// 接口Url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jndiUrl: String?

        /// rasp detail
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let raspDetail: [RaspInfo]?

        enum CodingKeys: String, CodingKey {
            case cveid = "CVEID"
            case vulName = "VulName"
            case pocID = "PocID"
            case eventType = "EventType"
            case sourceIP = "SourceIP"
            case city = "City"
            case eventCount = "EventCount"
            case containerID = "ContainerID"
            case containerName = "ContainerName"
            case imageID = "ImageID"
            case imageName = "ImageName"
            case status = "Status"
            case sourcePort = "SourcePort"
            case eventID = "EventID"
            case hostName = "HostName"
            case hostIP = "HostIP"
            case publicIP = "PublicIP"
            case podName = "PodName"
            case description = "Description"
            case officialSolution = "OfficialSolution"
            case networkPayload = "NetworkPayload"
            case pid = "PID"
            case mainClass = "MainClass"
            case stackTrace = "StackTrace"
            case serverAccount = "ServerAccount"
            case serverPort = "ServerPort"
            case serverExe = "ServerExe"
            case serverArg = "ServerArg"
            case quuid = "QUUID"
            case containerNetStatus = "ContainerNetStatus"
            case containerNetSubStatus = "ContainerNetSubStatus"
            case containerIsolateOperationSrc = "ContainerIsolateOperationSrc"
            case containerStatus = "ContainerStatus"
            case jndiUrl = "JNDIUrl"
            case raspDetail = "RaspDetail"
        }
    }

    /// 漏洞防御攻击事件趋势
    public struct VulDefenceEventTendency: TCOutputModel {
        /// 日期
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var date: Date

        /// 事件数量
        public let eventCount: Int64

        enum CodingKeys: String, CodingKey {
            case date = "Date"
            case eventCount = "EventCount"
        }
    }

    /// 漏洞防御的主机信息
    public struct VulDefenceHost: TCOutputModel {
        /// 主机名称
        public let hostName: String

        /// 主机ip即内网ip
        public let hostIP: String

        /// 主机QUUID
        public let hostID: String

        /// 插件状态，正常：SUCCESS，异常：FAIL， NO_DEFENDED:未防御
        public let status: String

        /// 外网ip
        public let publicIP: String

        /// 首次开启时间
        public let createTime: String

        /// 更新时间
        public let modifyTime: String

        enum CodingKeys: String, CodingKey {
            case hostName = "HostName"
            case hostIP = "HostIP"
            case hostID = "HostID"
            case status = "Status"
            case publicIP = "PublicIP"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
        }
    }

    /// 漏洞防护的插件信息
    public struct VulDefencePlugin: TCOutputModel {
        /// java进程pid
        public let pid: Int64

        /// 进程主类名
        public let mainClass: String

        /// 插件运行状态：注入中:INJECTING，注入成功：SUCCESS，注入失败：FAIL，插件超时：TIMEOUT，插件退出：QUIT
        public let status: String

        /// 错误日志
        public let errorLog: String

        enum CodingKeys: String, CodingKey {
            case pid = "PID"
            case mainClass = "MainClass"
            case status = "Status"
            case errorLog = "ErrorLog"
        }
    }

    /// 漏洞详情信息
    public struct VulDetailInfo: TCOutputModel {
        /// CVE编号
        public let cveid: String

        /// 漏洞名称
        public let name: String

        /// 漏洞标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// 漏洞类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let categoryType: String?

        /// 漏洞威胁等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// 漏洞披露时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let submitTime: String?

        /// 漏洞描述
        public let description: String

        /// CVSS V3描述
        public let cvssv3Desc: String

        /// 漏洞修复建议
        public let officialSolution: String

        /// 缓解措施
        public let defenseSolution: String

        /// 参考链接
        public let reference: [String]

        /// CVSS V3分数
        public let cvssv3Score: Float

        /// 受漏洞影响的组件列表
        public let componentList: [VulAffectedComponentInfo]

        /// 影响本地镜像数
        public let localImageCount: Int64

        /// 影响容器数
        public let containerCount: Int64

        /// 影响仓库镜像数
        public let registryImageCount: Int64

        /// 漏洞子类型
        public let category: String

        /// 影响最新本地镜像数
        public let localNewestImageCount: Int64

        /// 影响最新仓库镜像数
        public let registryNewestImageCount: Int64

        /// 漏洞PocID
        public let pocID: String

        /// 防御状态，NO_DEFENDED:未防御，DEFENDED:已防御
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceStatus: String?

        /// 漏洞防御主机范围: MANUAL:自选主机节点，ALL:全部
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceScope: String?

        /// 漏洞防御主机数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceHostCount: Int64?

        /// 已防御攻击次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defendedCount: Int64?

        /// 是否已扫描，NOT_SCAN:未扫描,SCANNED:已扫描
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanStatus: String?

        enum CodingKeys: String, CodingKey {
            case cveid = "CVEID"
            case name = "Name"
            case tags = "Tags"
            case categoryType = "CategoryType"
            case level = "Level"
            case submitTime = "SubmitTime"
            case description = "Description"
            case cvssv3Desc = "CVSSV3Desc"
            case officialSolution = "OfficialSolution"
            case defenseSolution = "DefenseSolution"
            case reference = "Reference"
            case cvssv3Score = "CVSSV3Score"
            case componentList = "ComponentList"
            case localImageCount = "LocalImageCount"
            case containerCount = "ContainerCount"
            case registryImageCount = "RegistryImageCount"
            case category = "Category"
            case localNewestImageCount = "LocalNewestImageCount"
            case registryNewestImageCount = "RegistryNewestImageCount"
            case pocID = "PocID"
            case defenceStatus = "DefenceStatus"
            case defenceScope = "DefenceScope"
            case defenceHostCount = "DefenceHostCount"
            case defendedCount = "DefendedCount"
            case scanStatus = "ScanStatus"
        }
    }

    /// 漏洞扫描忽略的本地镜像
    public struct VulIgnoreLocalImage: TCOutputModel {
        /// 记录ID
        public let id: Int64

        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 镜像大小
        public let imageSize: Int64

        /// 漏洞PocID
        public let pocID: String

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case imageID = "ImageID"
            case imageName = "ImageName"
            case imageSize = "ImageSize"
            case pocID = "PocID"
        }
    }

    /// 漏洞扫描忽略的仓库镜像
    public struct VulIgnoreRegistryImage: TCOutputModel {
        /// 记录ID
        public let id: Int64

        /// 仓库名称
        public let registryName: String

        /// 镜像版本
        public let imageVersion: String

        /// 仓库地址
        public let registryPath: String

        /// 镜像ID
        public let imageID: String

        /// 漏洞PocID
        public let pocID: String

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case registryName = "RegistryName"
            case imageVersion = "ImageVersion"
            case registryPath = "RegistryPath"
            case imageID = "ImageID"
            case pocID = "PocID"
        }
    }

    /// 漏洞列表信息
    public struct VulInfo: TCOutputModel {
        /// 漏洞名称
        public let name: String

        /// 漏洞标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// CVSS V3分数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvssv3Score: Float?

        /// 风险等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// CVE编号
        public let cveid: String

        /// 漏洞子类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let category: String?

        /// 首次发现时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let foundTime: String?

        /// 最近发现时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let latestFoundTime: String?

        /// 漏洞ID
        public let id: Int64

        /// 影响本地镜像数
        public let localImageCount: Int64

        /// 影响容器数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containerCount: Int64?

        /// 影响仓库镜像数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let registryImageCount: Int64?

        /// 漏洞PocID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pocID: String?

        /// 防御状态，NO_DEFENDED:未防御，DEFENDED:已防御
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceStatus: String?

        /// 漏洞防御主机范围: MANUAL:自选主机节点，ALL:全部
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceScope: String?

        /// 漏洞防御主机数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defenceHostCount: Int64?

        /// 已防御攻击次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defendedCount: Int64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case tags = "Tags"
            case cvssv3Score = "CVSSV3Score"
            case level = "Level"
            case cveid = "CVEID"
            case category = "Category"
            case foundTime = "FoundTime"
            case latestFoundTime = "LatestFoundTime"
            case id = "ID"
            case localImageCount = "LocalImageCount"
            case containerCount = "ContainerCount"
            case registryImageCount = "RegistryImageCount"
            case pocID = "PocID"
            case defenceStatus = "DefenceStatus"
            case defenceScope = "DefenceScope"
            case defenceHostCount = "DefenceHostCount"
            case defendedCount = "DefendedCount"
        }
    }

    /// 漏洞扫描的镜像信息
    public struct VulScanImageInfo: TCOutputModel {
        /// 镜像ID
        public let imageID: String

        /// 镜像名称
        public let imageName: String

        /// 镜像大小
        public let size: Float

        /// 任务状态:SCANNING:扫描中 FAILED:失败 FINISHED:完成 CANCELED:取消
        public let scanStatus: String

        /// 扫描时长
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanDuration: Float?

        /// 高危漏洞数
        public let highLevelVulCount: Int64

        /// 中危漏洞数
        public let mediumLevelVulCount: Int64

        /// 低危漏洞数
        public let lowLevelVulCount: Int64

        /// 严重漏洞数
        public let criticalLevelVulCount: Int64

        /// 本地镜像漏洞扫描任务ID
        public let taskID: Int64

        /// 漏洞扫描的开始时间
        public let scanStartTime: String

        /// 漏洞扫描的结束时间
        public let scanEndTime: String

        /// 失败原因:TIMEOUT:超时 TOO_MANY:任务过多 OFFLINE:离线
        public let errorStatus: String

        enum CodingKeys: String, CodingKey {
            case imageID = "ImageID"
            case imageName = "ImageName"
            case size = "Size"
            case scanStatus = "ScanStatus"
            case scanDuration = "ScanDuration"
            case highLevelVulCount = "HighLevelVulCount"
            case mediumLevelVulCount = "MediumLevelVulCount"
            case lowLevelVulCount = "LowLevelVulCount"
            case criticalLevelVulCount = "CriticalLevelVulCount"
            case taskID = "TaskID"
            case scanStartTime = "ScanStartTime"
            case scanEndTime = "ScanEndTime"
            case errorStatus = "ErrorStatus"
        }
    }

    /// 漏洞趋势信息
    public struct VulTendencyInfo: TCOutputModel {
        /// 漏洞趋势列表
        public let vulSet: [RunTimeTendencyInfo]

        /// 漏洞影响的镜像类型：
        /// LOCAL：本地镜像
        /// REGISTRY: 仓库镜像
        public let imageType: String

        enum CodingKeys: String, CodingKey {
            case vulSet = "VulSet"
            case imageType = "ImageType"
        }
    }

    /// 漏洞Top排名信息
    public struct VulTopRankingInfo: TCOutputModel {
        /// 漏洞名称
        public let vulName: String

        /// 威胁等级,CRITICAL:严重 HIGH:高/MIDDLE:中/LOW:低
        public let level: String

        /// 影响的镜像数
        public let affectedImageCount: Int64

        /// 影响的容器数
        public let affectedContainerCount: Int64

        /// 漏洞ID
        public let id: Int64

        /// 漏洞PocID
        public let pocID: String

        enum CodingKeys: String, CodingKey {
            case vulName = "VulName"
            case level = "Level"
            case affectedImageCount = "AffectedImageCount"
            case affectedContainerCount = "AffectedContainerCount"
            case id = "ID"
            case pocID = "PocID"
        }
    }

    /// 告警配置策略
    public struct WarningRule: TCInputModel, TCOutputModel {
        /// 告警事件类型：
        /// 镜像仓库安全-木马：IMG_REG_VIRUS
        /// 镜像仓库安全-漏洞：IMG_REG_VUL
        /// 镜像仓库安全-敏感信息：IMG_REG_RISK
        /// 镜像安全-木马：IMG_VIRUS
        /// 镜像安全-漏洞：IMG_VUL
        /// 镜像安全-敏感信息：IMG_RISK
        /// 镜像安全-镜像拦截：IMG_INTERCEPT
        /// 运行时安全-容器逃逸：RUNTIME_ESCAPE
        /// 运行时安全-异常进程：RUNTIME_FILE
        /// 运行时安全-异常文件访问：RUNTIME_PROCESS
        /// 运行时安全-高危系统调用：RUNTIME_SYSCALL
        /// 运行时安全-反弹Shell：RUNTIME_REVERSE_SHELL
        /// 运行时安全-木马：RUNTIME_VIRUS
        public let type: String

        /// 开关状态：
        /// 打开：ON
        /// 关闭：OFF
        public let `switch`: String

        /// 告警开始时间，格式: HH:mm
        public let beginTime: String

        /// 告警结束时间，格式: HH:mm
        public let endTime: String

        /// 告警等级策略控制，二进制位每位代表一个含义，值以字符串类型传递
        /// 控制开关分为高、中、低，则二进制位分别为：第1位:低，第2位:中，第3位:高，0表示关闭、1表示打开。
        /// 如：高危和中危打开告警，低危关闭告警，则二进制值为：110
        /// 告警类型不区分等级控制，则传1。
        public let controlBits: String

        public init(type: String, switch: String, beginTime: String, endTime: String, controlBits: String) {
            self.type = type
            self.`switch` = `switch`
            self.beginTime = beginTime
            self.endTime = endTime
            self.controlBits = controlBits
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case `switch` = "Switch"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case controlBits = "ControlBits"
        }
    }
}
