//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTcssError {
    public struct InvalidParameter: TCTcssErrorType {
        enum Code: String {
            case errIpNoValid = "InvalidParameter.ErrIpNoValid"
            case invalidFormat = "InvalidParameter.InvalidFormat"
            case missingParameter = "InvalidParameter.MissingParameter"
            case parsingError = "InvalidParameter.ParsingError"
            case portNoValid = "InvalidParameter.PortNoValid"
            case reverShellKeyFieldAllEmpty = "InvalidParameter.ReverShellKeyFieldAllEmpty"
            case ruleInfoInValid = "InvalidParameter.RuleInfoInValid"
            case other = "InvalidParameter"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// IP格式不合法。
        public static var errIpNoValid: InvalidParameter {
            InvalidParameter(.errIpNoValid)
        }

        /// 参数格式错误。
        ///
        /// 修正参数格式。
        public static var invalidFormat: InvalidParameter {
            InvalidParameter(.invalidFormat)
        }

        /// 缺少必须参数。
        ///
        /// 修正输入
        public static var missingParameter: InvalidParameter {
            InvalidParameter(.missingParameter)
        }

        /// 参数解析错误。
        ///
        /// 修正输入参数
        public static var parsingError: InvalidParameter {
            InvalidParameter(.parsingError)
        }

        /// 端口格式不合法。
        public static var portNoValid: InvalidParameter {
            InvalidParameter(.portNoValid)
        }

        /// 进程名/目标IP/目标端口，不能同时为空。
        public static var reverShellKeyFieldAllEmpty: InvalidParameter {
            InvalidParameter(.reverShellKeyFieldAllEmpty)
        }

        /// 前规则信息参数非法。
        public static var ruleInfoInValid: InvalidParameter {
            InvalidParameter(.ruleInfoInValid)
        }

        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }

        public func asTcssError() -> TCTcssError {
            let code: TCTcssError.Code
            switch self.error {
            case .errIpNoValid:
                code = .invalidParameter_ErrIpNoValid
            case .invalidFormat:
                code = .invalidParameter_InvalidFormat
            case .missingParameter:
                code = .invalidParameter_MissingParameter
            case .parsingError:
                code = .invalidParameter_ParsingError
            case .portNoValid:
                code = .invalidParameter_PortNoValid
            case .reverShellKeyFieldAllEmpty:
                code = .invalidParameter_ReverShellKeyFieldAllEmpty
            case .ruleInfoInValid:
                code = .invalidParameter_RuleInfoInValid
            case .other:
                code = .invalidParameter
            }
            return TCTcssError(code, context: self.context)
        }
    }
}
