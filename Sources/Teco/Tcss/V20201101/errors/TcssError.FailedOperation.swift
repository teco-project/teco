//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTcssError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case agentOffline = "FailedOperation.AgentOffline"
            case authorizedNotEnough = "FailedOperation.AuthorizedNotEnough"
            case dataValueNotCorrect = "FailedOperation.DataValueNotCorrect"
            case errAlreadyScanning = "FailedOperation.ErrAlreadyScanning"
            case errRuleNotFind = "FailedOperation.ErrRuleNotFind"
            case notifyPolicyChangeFailed = "FailedOperation.NotifyPolicyChangeFailed"
            case ruleConfigTooMany = "FailedOperation.RuleConfigTooMany"
            case ruleInfoRepeat = "FailedOperation.RuleInfoRepeat"
            case ruleNameRepeat = "FailedOperation.RuleNameRepeat"
            case ruleNotFind = "FailedOperation.RuleNotFind"
            case ruleSelectImageOutRange = "FailedOperation.RuleSelectImageOutRange"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 客户端已离线。
        public static var agentOffline: FailedOperation {
            FailedOperation(.agentOffline)
        }
        
        /// 授权数不足。
        public static var authorizedNotEnough: FailedOperation {
            FailedOperation(.authorizedNotEnough)
        }
        
        /// 响应数据值不正确。
        public static var dataValueNotCorrect: FailedOperation {
            FailedOperation(.dataValueNotCorrect)
        }
        
        /// 在扫描中或无扫描权限建议授权后扫描。
        public static var errAlreadyScanning: FailedOperation {
            FailedOperation(.errAlreadyScanning)
        }
        
        /// 当前规则信息未找到。
        public static var errRuleNotFind: FailedOperation {
            FailedOperation(.errRuleNotFind)
        }
        
        /// 通知策略变更失败。
        public static var notifyPolicyChangeFailed: FailedOperation {
            FailedOperation(.notifyPolicyChangeFailed)
        }
        
        /// 子规则配置过多。
        public static var ruleConfigTooMany: FailedOperation {
            FailedOperation(.ruleConfigTooMany)
        }
        
        /// 规则信息存在重复。
        public static var ruleInfoRepeat: FailedOperation {
            FailedOperation(.ruleInfoRepeat)
        }
        
        /// 规则名字存在重复。
        public static var ruleNameRepeat: FailedOperation {
            FailedOperation(.ruleNameRepeat)
        }
        
        /// 当前规则信息未找到。
        public static var ruleNotFind: FailedOperation {
            FailedOperation(.ruleNotFind)
        }
        
        /// 选择镜像数量过多。
        public static var ruleSelectImageOutRange: FailedOperation {
            FailedOperation(.ruleSelectImageOutRange)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCTcssError.FailedOperation: Equatable {
    public static func == (lhs: TCTcssError.FailedOperation, rhs: TCTcssError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTcssError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTcssError.FailedOperation {
    public func toTcssError() -> TCTcssError {
        guard let code = TCTcssError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTcssError(code, context: self.context)
    }
}