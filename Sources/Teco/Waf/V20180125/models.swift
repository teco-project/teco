//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Waf {
    /// DescribeAccessIndex
    public struct AccessFullTextInfo: TCOutputModel {
        /// 是否大小写敏感
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let caseSensitive: Bool?

        /// 全文索引的分词符，字符串中每个字符代表一个分词符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tokenizer: String?

        /// 是否包含中文
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containZH: Bool?

        enum CodingKeys: String, CodingKey {
            case caseSensitive = "CaseSensitive"
            case tokenizer = "Tokenizer"
            case containZH = "ContainZH"
        }
    }

    /// 用于接口DescribeAccessHistogram 的出参
    public struct AccessHistogramItem: TCOutputModel {
        /// 时间，单位ms
        public let bTime: Int64

        /// 日志条数
        public let count: Int64

        enum CodingKeys: String, CodingKey {
            case bTime = "BTime"
            case count = "Count"
        }
    }

    /// 用于 DescribeAccessIndex 的出参
    public struct AccessKeyValueInfo: TCOutputModel {
        /// 需要配置键值或者元字段索引的字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 字段的索引描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: AccessValueInfo?

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 单条日志数据描述
    public struct AccessLogInfo: TCOutputModel {
        /// 日志时间，单位ms
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let time: Int64?

        /// 日志主题ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicId: String?

        /// 日志主题名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topicName: String?

        /// 日志来源IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: String?

        /// 日志文件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileName: String?

        /// 日志上报请求包的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pkgId: String?

        /// 请求包内日志的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pkgLogId: String?

        /// 日志内容的Json序列化字符串
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logJson: String?

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case topicId = "TopicId"
            case topicName = "TopicName"
            case source = "Source"
            case fileName = "FileName"
            case pkgId = "PkgId"
            case pkgLogId = "PkgLogId"
            case logJson = "LogJson"
        }
    }

    /// 日志KeyValue对
    public struct AccessLogItem: TCOutputModel {
        /// 日记Key
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let key: String?

        /// 日志Value
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 日志KeyValue对数组，用于搜索访问日志
    public struct AccessLogItems: TCOutputModel {
        /// 分析结果返回的KV数据对
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: [AccessLogItem]?

        enum CodingKeys: String, CodingKey {
            case data = "Data"
        }
    }

    /// DescribeAccessIndex接口的出参数
    public struct AccessRuleInfo: TCOutputModel {
        /// 全文索引配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fullText: AccessFullTextInfo?

        /// 键值索引配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyValue: AccessRuleKeyValueInfo?

        /// 元字段索引配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tag: AccessRuleTagInfo?

        enum CodingKeys: String, CodingKey {
            case fullText = "FullText"
            case keyValue = "KeyValue"
            case tag = "Tag"
        }
    }

    /// DescribeAccessIndex接口的出参
    public struct AccessRuleKeyValueInfo: TCOutputModel {
        /// 是否大小写敏感
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let caseSensitive: Bool?

        /// 需要建立索引的键值对信息；最大只能配置100个键值对
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyValues: [AccessKeyValueInfo]?

        enum CodingKeys: String, CodingKey {
            case caseSensitive = "CaseSensitive"
            case keyValues = "KeyValues"
        }
    }

    /// DescribeAccessIndex接口的出参
    public struct AccessRuleTagInfo: TCOutputModel {
        /// 是否大小写敏感
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let caseSensitive: Bool?

        /// 标签索引配置中的字段信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyValues: [AccessKeyValueInfo]?

        enum CodingKeys: String, CodingKey {
            case caseSensitive = "CaseSensitive"
            case keyValues = "KeyValues"
        }
    }

    /// 用于DescribeAccessIndex接口的出参
    public struct AccessValueInfo: TCOutputModel {
        /// 字段类型，目前支持的类型有：long、text、double
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 字段的分词符，只有当字段类型为text时才有意义；输入字符串中的每个字符代表一个分词符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tokenizer: String?

        /// 字段是否开启分析功能
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sqlFlag: Bool?

        /// 是否包含中文
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let containZH: Bool?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case tokenizer = "Tokenizer"
            case sqlFlag = "SqlFlag"
            case containZH = "ContainZH"
        }
    }

    /// 攻击日志详情
    public struct AttackLogInfo: TCOutputModel {
        /// 攻击日志的详情内容
        public let content: String

        /// CLS返回内容
        public let fileName: String

        /// CLS返回内容
        public let source: String

        /// CLS返回内容
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$timeStamp`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var timeStamp: Date

        enum CodingKeys: String, CodingKey {
            case content = "Content"
            case fileName = "FileName"
            case source = "Source"
            case timeStamp = "TimeStamp"
        }
    }

    /// Waf 攻击自动封禁详情
    public struct AutoDenyDetail: TCInputModel, TCOutputModel {
        /// 攻击封禁类型标签
        public let attackTags: [String]

        /// 攻击次数阈值
        public let attackThreshold: Int64

        /// 自动封禁状态
        public let defenseStatus: Int64

        /// 攻击时间阈值
        public let timeThreshold: Int64

        /// 自动封禁时间
        public let denyTimeThreshold: Int64

        /// 最后更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$lastUpdateTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastUpdateTime: Date?

        public init(attackTags: [String], attackThreshold: Int64, defenseStatus: Int64, timeThreshold: Int64, denyTimeThreshold: Int64, lastUpdateTime: Date? = nil) {
            self.attackTags = attackTags
            self.attackThreshold = attackThreshold
            self.defenseStatus = defenseStatus
            self.timeThreshold = timeThreshold
            self.denyTimeThreshold = denyTimeThreshold
            self._lastUpdateTime = .init(wrappedValue: lastUpdateTime)
        }

        enum CodingKeys: String, CodingKey {
            case attackTags = "AttackTags"
            case attackThreshold = "AttackThreshold"
            case defenseStatus = "DefenseStatus"
            case timeThreshold = "TimeThreshold"
            case denyTimeThreshold = "DenyTimeThreshold"
            case lastUpdateTime = "LastUpdateTime"
        }
    }

    /// 多域名黑白名单describe返回
    public struct BatchIpAccessControlData: TCOutputModel {
        /// 总数
        public let totalCount: UInt64

        /// 黑白名单条目
        public let res: [BatchIpAccessControlItem]

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case res = "Res"
        }
    }

    /// 多域名黑白名单列表Ip
    public struct BatchIpAccessControlItem: TCOutputModel {
        /// mongo表自增Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 黑名单42或白名单40
        public let actionType: Int64

        /// 黑白名单的IP
        public let ip: String

        /// 备注
        public let note: String

        /// 添加路径
        public let source: String

        /// 修改时间
        public let tsVersion: UInt64

        /// 超时时间
        public let validTs: Int64

        /// 域名列表
        public let hosts: [String]

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case actionType = "ActionType"
            case ip = "Ip"
            case note = "Note"
            case source = "Source"
            case tsVersion = "TsVersion"
            case validTs = "ValidTs"
            case hosts = "Hosts"
        }
    }

    /// Bot资源信息
    public struct BotPkg: TCInputModel, TCOutputModel {
        /// 资源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceIds: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: Int64?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let beginTime: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 申请数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inquireNum: Int64?

        /// 使用数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedNum: Int64?

        /// 子产品code
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 续费标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: UInt64?

        /// 购买页bot6折
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let botCPWaf: Int64?

        /// 控制台买bot5折
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let botNPWaf: Int64?

        public init(resourceIds: String? = nil, status: Int64? = nil, region: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, inquireNum: Int64? = nil, usedNum: Int64? = nil, type: String? = nil, renewFlag: UInt64? = nil, botCPWaf: Int64? = nil, botNPWaf: Int64? = nil) {
            self.resourceIds = resourceIds
            self.status = status
            self.region = region
            self.beginTime = beginTime
            self.endTime = endTime
            self.inquireNum = inquireNum
            self.usedNum = usedNum
            self.type = type
            self.renewFlag = renewFlag
            self.botCPWaf = botCPWaf
            self.botNPWaf = botNPWaf
        }

        enum CodingKeys: String, CodingKey {
            case resourceIds = "ResourceIds"
            case status = "Status"
            case region = "Region"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case inquireNum = "InquireNum"
            case usedNum = "UsedNum"
            case type = "Type"
            case renewFlag = "RenewFlag"
            case botCPWaf = "BotCPWaf"
            case botNPWaf = "BotNPWaf"
        }
    }

    /// bot的qps详情
    public struct BotQPS: TCOutputModel {
        /// 资源id
        public let resourceIds: String

        /// 有效时间
        public let validTime: String

        /// 资源数量
        public let count: UInt64

        /// 资源所在地区
        public let region: String

        /// 使用qps的最大值
        public let maxBotQPS: UInt64

        /// 续费标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: UInt64?

        enum CodingKeys: String, CodingKey {
            case resourceIds = "ResourceIds"
            case validTime = "ValidTime"
            case count = "Count"
            case region = "Region"
            case maxBotQPS = "MaxBotQPS"
            case renewFlag = "RenewFlag"
        }
    }

    /// bot的趋势图对象
    public struct BotStatPointItem: TCOutputModel {
        /// 横坐标
        public let timeStamp: String

        /// value的所属对象
        public let key: String

        /// 纵列表
        public let value: Int64

        /// Key对应的页面展示内容
        public let label: String

        enum CodingKeys: String, CodingKey {
            case timeStamp = "TimeStamp"
            case key = "Key"
            case value = "Value"
            case label = "Label"
        }
    }

    /// 数据封装
    public struct CCRuleData: TCOutputModel {
        /// cc规则
        public let res: [CCRuleItem]

        /// 规则数目
        public let totalCount: Int64

        enum CodingKeys: String, CodingKey {
            case res = "Res"
            case totalCount = "TotalCount"
        }
    }

    /// cc规则
    public struct CCRuleItem: TCOutputModel {
        /// 动作
        public let actionType: UInt64

        /// 高级模式
        public let advance: UInt64

        /// 时间周期
        public let interval: UInt64

        /// 限制次数
        public let limit: UInt64

        /// 匹配方法
        public let matchFunc: UInt64

        /// 名称
        public let name: String

        /// 优先级
        public let priority: UInt64

        /// 状态
        public let status: Int64

        /// 更新时间戳
        public let tsVersion: UInt64

        /// 匹配url
        public let url: String

        /// 策略动作有效时间
        public let validTime: UInt64

        /// 高级参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let optionsArr: String?

        enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case advance = "Advance"
            case interval = "Interval"
            case limit = "Limit"
            case matchFunc = "MatchFunc"
            case name = "Name"
            case priority = "Priority"
            case status = "Status"
            case tsVersion = "TsVersion"
            case url = "Url"
            case validTime = "ValidTime"
            case optionsArr = "OptionsArr"
        }
    }

    /// 防篡改url元素
    public struct CacheUrlItem: TCOutputModel {
        /// Id
        public let id: String

        /// 名称
        public let name: String

        /// 域名
        public let domain: String

        /// uri
        public let uri: String

        /// 协议
        public let `protocol`: String

        /// 状态
        public let status: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case domain = "Domain"
            case uri = "Uri"
            case `protocol` = "Protocol"
            case status = "Status"
        }
    }

    /// 防篡改url元素
    public struct CacheUrlItems: TCOutputModel {
        /// 标识
        public let id: UInt64

        /// 名字
        public let name: String

        /// 域名
        public let domain: String

        /// 网址
        public let uri: String

        /// 协议
        public let `protocol`: String

        /// 状态
        public let status: UInt64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case domain = "Domain"
            case uri = "Uri"
            case `protocol` = "Protocol"
            case status = "Status"
        }
    }

    /// CDC场景下负载均衡WAF的集群信息
    public struct CdcCluster: TCInputModel, TCOutputModel {
        /// cdc的集群id
        public let id: String

        /// cdc的集群名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        public init(id: String, name: String) {
            self.id = id
            self.name = name
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
        }
    }

    /// CDC场景下负载均衡WAF的地域信息
    public struct CdcRegion: TCInputModel, TCOutputModel {
        /// 地域
        public let region: String

        /// 该地域对应的集群信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusters: [CdcCluster]?

        public init(region: String, clusters: [CdcCluster]) {
            self.region = region
            self.clusters = clusters
        }

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case clusters = "Clusters"
        }
    }

    /// clb域名详情
    public struct ClbDomainsInfo: TCOutputModel {
        /// 域名
        public let domain: String

        /// 域名id
        public let domainId: String

        /// 实例id
        public let instanceId: String

        /// 实例名
        public let instanceName: String

        /// waf类型
        public let edition: String

        /// 是否是cdn
        public let isCdn: UInt64

        /// 负载均衡算法
        public let loadBalancerSet: [LoadBalancerPackageNew]

        /// 镜像模式
        public let flowMode: UInt64

        /// 绑定clb状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let state: Int64?

        /// 负载均衡类型，clb或者apisix
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let albType: String?

        /// IsCdn=3时，表示自定义header
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipHeaders: [String]?

        /// cdc类型会增加集群信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcClusters: String?

        /// 云类型:public:公有云；private:私有云;hybrid:混合云
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cloudType: String?

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case edition = "Edition"
            case isCdn = "IsCdn"
            case loadBalancerSet = "LoadBalancerSet"
            case flowMode = "FlowMode"
            case state = "State"
            case albType = "AlbType"
            case ipHeaders = "IpHeaders"
            case cdcClusters = "CdcClusters"
            case cloudType = "CloudType"
        }
    }

    /// CLB查询对应绑定的WAF状态的结果参数
    public struct ClbHostResult: TCOutputModel {
        /// WAF绑定的监听器实例
        public let loadBalancer: LoadBalancer

        /// WAF绑定的域名
        public let domain: String

        /// WAF绑定的实例ID
        public let domainId: String

        /// 是否有绑定WAF，1：绑定了WAF，0：没有绑定WAF
        public let status: UInt64

        /// 绑定了WAF的情况下，WAF流量模式，1：清洗模式，0：镜像模式（默认）
        public let flowMode: UInt64

        enum CodingKeys: String, CodingKey {
            case loadBalancer = "LoadBalancer"
            case domain = "Domain"
            case domainId = "DomainId"
            case status = "Status"
            case flowMode = "FlowMode"
        }
    }

    /// CLB回调WAF接口（获取、删除）的参数
    public struct ClbHostsParams: TCInputModel {
        /// 负载均衡实例ID，如果不传次参数则默认认为操作的是整个AppId的监听器，如果此参数不为空则认为操作的是对应负载均衡实例。
        public let loadBalancerId: String

        /// 负载均衡监听器ID，，如果不传次参数则默认认为操作的是整个负载均衡实例，如果此参数不为空则认为操作的是对应负载均衡监听器。
        public let listenerId: String?

        /// WAF实例ID，，如果不传次参数则默认认为操作的是整个负载均衡监听器实例，如果此参数不为空则认为操作的是对应负载均衡监听器的某一个具体的域名。
        public let domainId: String?

        public init(loadBalancerId: String, listenerId: String? = nil, domainId: String? = nil) {
            self.loadBalancerId = loadBalancerId
            self.listenerId = listenerId
            self.domainId = domainId
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case listenerId = "ListenerId"
            case domainId = "DomainId"
        }
    }

    /// 计费下单响应实体
    public struct DealData: TCOutputModel {
        /// 订单号列表，元素个数与请求包的goods数组的元素个数一致，商品详情与订单按顺序对应
        public let dealNames: [String]

        /// 大订单号，一个大订单号下可以有多个子订单，说明是同一次下单[{},{}]
        public let bigDealId: String

        enum CodingKeys: String, CodingKey {
            case dealNames = "DealNames"
            case bigDealId = "BigDealId"
        }
    }

    /// DescribeAntiInfoLeakRules返回的规则列表元素
    public struct DescribeAntiInfoLeakRulesRuleItem: TCOutputModel {
        /// 规则ID
        public let ruleId: String

        /// 规则名称
        public let name: String

        /// 规则状态
        public let status: String

        /// 规则动作类型
        public let actionType: String

        /// 规则创建时间
        public let createTime: String

        /// 详细的规则
        public let strategies: [DescribeAntiInfoLeakRulesStrategyItem]

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case name = "Name"
            case status = "Status"
            case actionType = "ActionType"
            case createTime = "CreateTime"
            case strategies = "Strategies"
        }
    }

    /// DescribeAntiInfoLeakRules返回的规则元素中的具体的规则元素
    public struct DescribeAntiInfoLeakRulesStrategyItem: TCOutputModel {
        /// 字段
        public let field: String

        /// 条件
        public let compareFunc: String

        /// 内容
        public let content: String

        enum CodingKeys: String, CodingKey {
            case field = "Field"
            case compareFunc = "CompareFunc"
            case content = "Content"
        }
    }

    /// 出参
    public struct DescribeAntiLeakageItem: TCOutputModel {
        /// 规则ID
        public let ruleId: UInt64

        /// 名称
        public let name: String

        /// 状态值
        public let status: UInt64

        /// 动作
        public let action: String

        /// 创建时间
        public let createTime: String

        /// 匹配条件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategies: [DescribeAntiInfoLeakRulesStrategyItem]?

        /// 匹配的URL
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uri: String?

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case name = "Name"
            case status = "Status"
            case action = "Action"
            case createTime = "CreateTime"
            case strategies = "Strategies"
            case uri = "Uri"
        }
    }

    /// DescribeCustomRules接口回包中的复杂类型
    public struct DescribeCustomRulesRspRuleListItem: TCOutputModel {
        /// 动作类型
        public let actionType: String

        /// 跳过的策略
        public let bypass: String

        /// 创建时间
        public let createTime: String

        /// 过期时间
        public let expireTime: String

        /// 策略名称
        public let name: String

        /// 重定向地址
        public let redirect: String

        /// 策略ID
        public let ruleId: String

        /// 优先级
        public let sortId: String

        /// 状态
        public let status: String

        /// 策略详情
        public let strategies: [Strategy]

        /// 事件id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventId: String?

        enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case bypass = "Bypass"
            case createTime = "CreateTime"
            case expireTime = "ExpireTime"
            case name = "Name"
            case redirect = "Redirect"
            case ruleId = "RuleId"
            case sortId = "SortId"
            case status = "Status"
            case strategies = "Strategies"
            case eventId = "EventId"
        }
    }

    /// domain列表
    public struct DomainInfo: TCInputModel, TCOutputModel {
        /// 域名
        public let domain: String

        /// 域名ID
        public let domainId: String

        /// 实例ID
        public let instanceId: String

        /// cname地址
        public let cname: String

        /// 实例类型,sparta-waf表示saaswaf实例域名,clb-waf表示clbwaf实例域名,cdc-clb-waf表示CDC环境下clbwaf实例域名,cdn-waf表示cdnwaf实例域名
        public let edition: String

        /// 地域
        public let region: String

        /// 实例名
        public let instanceName: String

        /// 日志包
        public let clsStatus: UInt64

        /// clbwaf使用模式,0镜像模式 1清洗模式
        public let flowMode: UInt64

        /// waf开关,0关闭 1开启
        public let status: UInt64

        /// 规则引擎防护模式,0观察模式 1拦截模式
        public let mode: UInt64

        /// 规则引擎和AI引擎防护模式联合状态,10规则引擎观察&&AI引擎关闭模式 11规则引擎观察&&AI引擎观察模式 12规则引擎观察&&AI引擎拦截模式 20规则引擎拦截&&AI引擎关闭模式 21规则引擎拦截&&AI引擎观察模式 22规则引擎拦截&&AI引擎拦截模式
        public let engine: UInt64

        /// CC列表
        public let ccList: [String]

        /// 回源ip
        public let rsList: [String]

        /// 服务端口配置
        public let ports: [PortInfo]

        /// 负载均衡器
        public let loadBalancerSet: [LoadBalancerPackageNew]

        /// 用户id
        public let appId: UInt64

        /// clbwaf域名监听器状态,0操作成功 4正在绑定LB 6正在解绑LB 7解绑LB失败 8绑定LB失败 10内部错误
        public let state: Int64

        /// 创建时间
        public let createTime: String?

        /// Ipv6开关状态,0关闭 1开启
        public let ipv6Status: Int64?

        /// BOT开关状态,0关闭 1开启
        public let botStatus: Int64?

        /// 版本信息
        public let level: Int64?

        /// 是否开启投递CLS功能,0关闭 1开启
        public let postCLSStatus: Int64?

        /// 是否开启投递CKafka功能,0关闭 1开启
        public let postCKafkaStatus: Int64?

        /// cdc实例域名接入的集群信息,非cdc实例忽略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcClusters: String?

        /// api安全开关状态,0关闭 1开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let apiStatus: Int64?

        /// 应用型负载均衡类型,clb或者apisix，默认clb
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let albType: String?

        /// 安全组状态,0不展示 1非腾讯云源站 2安全组绑定失败 3安全组发生变更
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sgState: Int64?

        /// 安全组状态的详细解释
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sgDetail: String?

        /// 域名类型:hybrid表示混合云域名，public表示公有云域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cloudType: String?

        public init(domain: String, domainId: String, instanceId: String, cname: String, edition: String, region: String, instanceName: String, clsStatus: UInt64, flowMode: UInt64, status: UInt64, mode: UInt64, engine: UInt64, ccList: [String], rsList: [String], ports: [PortInfo], loadBalancerSet: [LoadBalancerPackageNew], appId: UInt64, state: Int64, createTime: String? = nil, ipv6Status: Int64? = nil, botStatus: Int64? = nil, level: Int64? = nil, postCLSStatus: Int64? = nil, postCKafkaStatus: Int64? = nil, cdcClusters: String? = nil, apiStatus: Int64? = nil, albType: String? = nil, sgState: Int64? = nil, sgDetail: String? = nil, cloudType: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.instanceId = instanceId
            self.cname = cname
            self.edition = edition
            self.region = region
            self.instanceName = instanceName
            self.clsStatus = clsStatus
            self.flowMode = flowMode
            self.status = status
            self.mode = mode
            self.engine = engine
            self.ccList = ccList
            self.rsList = rsList
            self.ports = ports
            self.loadBalancerSet = loadBalancerSet
            self.appId = appId
            self.state = state
            self.createTime = createTime
            self.ipv6Status = ipv6Status
            self.botStatus = botStatus
            self.level = level
            self.postCLSStatus = postCLSStatus
            self.postCKafkaStatus = postCKafkaStatus
            self.cdcClusters = cdcClusters
            self.apiStatus = apiStatus
            self.albType = albType
            self.sgState = sgState
            self.sgDetail = sgDetail
            self.cloudType = cloudType
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case instanceId = "InstanceId"
            case cname = "Cname"
            case edition = "Edition"
            case region = "Region"
            case instanceName = "InstanceName"
            case clsStatus = "ClsStatus"
            case flowMode = "FlowMode"
            case status = "Status"
            case mode = "Mode"
            case engine = "Engine"
            case ccList = "CCList"
            case rsList = "RsList"
            case ports = "Ports"
            case loadBalancerSet = "LoadBalancerSet"
            case appId = "AppId"
            case state = "State"
            case createTime = "CreateTime"
            case ipv6Status = "Ipv6Status"
            case botStatus = "BotStatus"
            case level = "Level"
            case postCLSStatus = "PostCLSStatus"
            case postCKafkaStatus = "PostCKafkaStatus"
            case cdcClusters = "CdcClusters"
            case apiStatus = "ApiStatus"
            case albType = "AlbType"
            case sgState = "SgState"
            case sgDetail = "SgDetail"
            case cloudType = "CloudType"
        }
    }

    /// clb-waf 域名扩展套餐
    public struct DomainPackageNew: TCInputModel, TCOutputModel {
        /// 资源ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceIds: String?

        /// 过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validTime: String?

        /// 是否自动续费，1：自动续费，0：不自动续费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: UInt64?

        /// 套餐购买个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: UInt64?

        /// 套餐购买地域，clb-waf暂时没有用到
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        public init(resourceIds: String? = nil, validTime: String? = nil, renewFlag: UInt64? = nil, count: UInt64? = nil, region: String? = nil) {
            self.resourceIds = resourceIds
            self.validTime = validTime
            self.renewFlag = renewFlag
            self.count = count
            self.region = region
        }

        enum CodingKeys: String, CodingKey {
            case resourceIds = "ResourceIds"
            case validTime = "ValidTime"
            case renewFlag = "RenewFlag"
            case count = "Count"
            case region = "Region"
        }
    }

    /// 唯一定位Domain
    public struct DomainURI: TCInputModel, TCOutputModel {
        /// 域名
        public let domain: String

        /// 版本
        public let edition: String

        public init(domain: String, edition: String) {
            self.domain = domain
            self.edition = edition
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case edition = "Edition"
        }
    }

    /// saas域名详情
    public struct DomainsPartInfo: TCOutputModel {
        /// 域名
        public let domain: String

        /// 域名id
        public let domainId: String

        /// 实例id
        public let instanceId: String

        /// 类型
        public let edition: String

        /// 实例名
        public let instanceName: String

        /// 证书
        public let cert: String

        /// 创建时间
        public let createTime: String

        /// AI防御模式
        public let engine: UInt64

        /// 是否开启httpRewrite
        public let httpsRewrite: UInt64

        /// https回源端口
        public let httpsUpstreamPort: String

        /// 是否是cdn
        public let isCdn: UInt64

        /// 是否开启gray
        public let isGray: UInt64

        /// 是否是http2
        public let isHttp2: UInt64

        /// 是否开启websocket
        public let isWebsocket: UInt64

        /// 负载均衡
        public let loadBalance: UInt64

        /// 防御模式
        public let mode: UInt64

        /// 私钥
        public let privateKey: String

        /// ssl id
        public let sslId: String

        /// 回源域名
        public let upstreamDomain: String

        /// 回源类型
        public let upstreamType: UInt64

        /// 回源ip
        public let srcList: [String]

        /// 服务端口配置
        public let ports: [PortInfo]

        /// 证书类型
        public let certType: UInt64

        /// 回源方式
        public let upstreamScheme: String

        /// 日志包
        public let cls: UInt64

        /// 一级cname
        public let cname: String

        /// 是否长连接
        public let isKeepAlive: UInt64

        /// 是否开启主动健康检测，1表示开启，0表示不开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let activeCheck: UInt64?

        /// TLS版本信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tlsVersion: Int64?

        /// 加密套件信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ciphers: [Int64]?

        /// 模板
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cipherTemplate: Int64?

        /// 300s
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyReadTimeout: Int64?

        /// 300s
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxySendTimeout: Int64?

        /// 0:关闭SNI；1:开启SNI，SNI=源请求host；2:开启SNI，SNI=修改为源站host；3：开启SNI，自定义host，SNI=SniHost；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sniType: Int64?

        /// SniType=3时，需要填此参数，表示自定义的host；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sniHost: String?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let weights: [String]?

        /// IsCdn=3时，表示自定义header
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipHeaders: [String]?

        /// 0:关闭xff重置；1:开启xff重置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let xffReset: Int64?

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case instanceId = "InstanceId"
            case edition = "Edition"
            case instanceName = "InstanceName"
            case cert = "Cert"
            case createTime = "CreateTime"
            case engine = "Engine"
            case httpsRewrite = "HttpsRewrite"
            case httpsUpstreamPort = "HttpsUpstreamPort"
            case isCdn = "IsCdn"
            case isGray = "IsGray"
            case isHttp2 = "IsHttp2"
            case isWebsocket = "IsWebsocket"
            case loadBalance = "LoadBalance"
            case mode = "Mode"
            case privateKey = "PrivateKey"
            case sslId = "SSLId"
            case upstreamDomain = "UpstreamDomain"
            case upstreamType = "UpstreamType"
            case srcList = "SrcList"
            case ports = "Ports"
            case certType = "CertType"
            case upstreamScheme = "UpstreamScheme"
            case cls = "Cls"
            case cname = "Cname"
            case isKeepAlive = "IsKeepAlive"
            case activeCheck = "ActiveCheck"
            case tlsVersion = "TLSVersion"
            case ciphers = "Ciphers"
            case cipherTemplate = "CipherTemplate"
            case proxyReadTimeout = "ProxyReadTimeout"
            case proxySendTimeout = "ProxySendTimeout"
            case sniType = "SniType"
            case sniHost = "SniHost"
            case weights = "Weights"
            case ipHeaders = "IpHeaders"
            case xffReset = "XFFReset"
        }
    }

    /// 下载攻击日志记录数据项
    public struct DownloadAttackRecordInfo: TCOutputModel {
        /// 记录ID
        public let id: UInt64

        /// 下载任务名
        public let taskName: String

        /// 任务ID
        public let taskId: String

        /// 域名
        public let host: String

        /// 当前下载任务的日志条数
        public let count: UInt64

        /// 下载任务运行状态：-1-下载超时，0-下载等待，1-下载完成，2-下载失败，4-正在下载
        public let status: Int64

        /// 下载文件URL
        public let url: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$createTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 最后更新修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$modifyTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var modifyTime: Date

        /// 过期时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$expireTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var expireTime: Date

        /// 下载任务需下载的日志总条数
        public let totalCount: UInt64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case taskName = "TaskName"
            case taskId = "TaskId"
            case host = "Host"
            case count = "Count"
            case status = "Status"
            case url = "Url"
            case createTime = "CreateTime"
            case modifyTime = "ModifyTime"
            case expireTime = "ExpireTime"
            case totalCount = "TotalCount"
        }
    }

    /// DescribeAccessExports接口
    public struct ExportAccessInfo: TCOutputModel {
        /// 日志导出任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exportId: String?

        /// 日志导出查询语句
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let query: String?

        /// 日志导出文件名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileName: String?

        /// 日志文件大小
        public let fileSize: Int64

        /// 日志导出时间排序
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let order: String?

        /// 日志导出格式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let format: String?

        /// 日志导出数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: UInt64?

        /// 日志下载状态。Processing:导出正在进行中，Complete:导出完成，Failed:导出失败，Expired:日志导出已过期（三天有效期）
        public let status: String

        /// 日志导出起始时间
        public let from: Int64

        /// 日志导出结束时间
        public let to: Int64

        /// 日志导出路径
        public let cosPath: String

        /// 日志导出创建时间
        public let createTime: String

        enum CodingKeys: String, CodingKey {
            case exportId = "ExportId"
            case query = "Query"
            case fileName = "FileName"
            case fileSize = "FileSize"
            case order = "Order"
            case format = "Format"
            case count = "Count"
            case status = "Status"
            case from = "From"
            case to = "To"
            case cosPath = "CosPath"
            case createTime = "CreateTime"
        }
    }

    /// 过滤数组
    public struct FiltersItemNew: TCInputModel, TCOutputModel {
        /// 字段名
        public let name: String

        /// 过滤值
        public let values: [String]

        /// 是否精确查找
        public let exactMatch: Bool

        public init(name: String, values: [String], exactMatch: Bool) {
            self.name = name
            self.values = values
            self.exactMatch = exactMatch
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case exactMatch = "ExactMatch"
        }
    }

    /// 域名列表
    public struct FindAllDomainDetail: TCOutputModel {
        /// 用户id
        public let appid: UInt64

        /// 域名
        public let domain: String

        /// 域名ip
        public let ips: [String]

        /// 发现时间
        public let findTime: String

        /// 实例id
        public let instanceId: String

        /// 域名id
        public let domainId: String

        /// waf类型
        public let edition: String

        /// 是否接入waf
        public let isWafDomain: UInt64

        enum CodingKeys: String, CodingKey {
            case appid = "Appid"
            case domain = "Domain"
            case ips = "Ips"
            case findTime = "FindTime"
            case instanceId = "InstanceId"
            case domainId = "DomainId"
            case edition = "Edition"
            case isWafDomain = "IsWafDomain"
        }
    }

    /// 业务安全资源信息
    public struct FraudPkg: TCInputModel, TCOutputModel {
        /// 资源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceIds: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: Int64?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let beginTime: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 申请数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inquireNum: Int64?

        /// 使用数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedNum: Int64?

        /// 续费标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: UInt64?

        public init(resourceIds: String? = nil, status: Int64? = nil, region: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, inquireNum: Int64? = nil, usedNum: Int64? = nil, renewFlag: UInt64? = nil) {
            self.resourceIds = resourceIds
            self.status = status
            self.region = region
            self.beginTime = beginTime
            self.endTime = endTime
            self.inquireNum = inquireNum
            self.usedNum = usedNum
            self.renewFlag = renewFlag
        }

        enum CodingKeys: String, CodingKey {
            case resourceIds = "ResourceIds"
            case status = "Status"
            case region = "Region"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case inquireNum = "InquireNum"
            case usedNum = "UsedNum"
            case renewFlag = "RenewFlag"
        }
    }

    /// 计费下单接口出入参Goods
    public struct GoodNews: TCInputModel, TCOutputModel {
        /// 商品数量
        public let goodsNum: Int64

        /// 商品明细
        public let goodsDetail: GoodsDetailNew

        /// 订单类型ID，用来唯一标识一个业务的一种场景（总共三种场景：新购、配置变更、续费）
        /// 高级版: 102375(新购),102376(续费),102377(变配)
        /// 企业版 : 102378(新购),102379(续费),102380(变配)
        /// 旗舰版 : 102369(新购),102370(续费),102371(变配)
        /// 域名包 : 102372(新购),102373(续费),102374(变配)
        /// 业务扩展包 : 101040(新购),101041(续费),101042(变配)
        ///
        /// 高级版-CLB: 新购 101198  续费 101199 变配 101200
        /// 企业版-CLB 101204(新购),101205(续费),101206(变配)
        /// 旗舰版-CLB : 101201(新购),101202(续费),101203(变配)
        /// 域名包-CLB: 101207(新购),101208(续费),101209(变配)
        /// 业务扩展包-CLB: 101210(新购),101211(续费),101212(变配)
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let goodsCategoryId: Int64?

        /// 购买waf实例区域ID
        /// 1 表示购买大陆资源;
        /// 9表示购买非中国大陆资源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: Int64?

        public init(goodsNum: Int64, goodsDetail: GoodsDetailNew, goodsCategoryId: Int64? = nil, regionId: Int64? = nil) {
            self.goodsNum = goodsNum
            self.goodsDetail = goodsDetail
            self.goodsCategoryId = goodsCategoryId
            self.regionId = regionId
        }

        enum CodingKeys: String, CodingKey {
            case goodsNum = "GoodsNum"
            case goodsDetail = "GoodsDetail"
            case goodsCategoryId = "GoodsCategoryId"
            case regionId = "RegionId"
        }
    }

    /// 产品明细
    public struct GoodsDetailNew: TCInputModel, TCOutputModel {
        /// 时间间隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeSpan: Int64?

        /// 单位，支持购买d、m、y 即（日、月、年）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timeUnit: String?

        /// 子产品标签,。新购，续费必传，变配时放在oldConfig newConfig里面
        ///
        /// Saas 高级版 ：sp_wsm_waf_premium
        /// Saas企业版 ：sp_wsm_waf_enterprise
        /// Saas旗舰版 ：sp_wsm_waf_ultimate
        /// Saas 业务扩展包：sp_wsm_waf_qpsep
        /// Saas 域名扩展包：sp_wsm_waf_domain
        ///
        /// 高级版-CLB:sp_wsm_waf_premium_clb
        /// 企业版-CLB : sp_wsm_waf_enterprise_clb
        /// 旗舰版-CLB:sp_wsm_waf_ultimate_clb
        ///  业务扩展包-CLB：sp_wsm_waf_qpsep_clb
        /// 域名扩展包-CLB：sp_wsm_waf_domain_clb
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subProductCode: String?

        /// 业务产品申请的pid（对应一个定价公式），通过pid计费查询到定价模型
        /// 高级版 ：1000827
        /// 企业版 ：1000830
        /// 旗舰版 ：1000832
        /// 域名包 : 1000834
        /// 业务扩展包 : 1000481
        /// 高级版-CLB:1001150
        /// 企业版-CLB : 1001152
        /// 旗舰版-CLB:1001154
        /// 域名包-CLB: 1001156
        /// 业务扩展包-CLB : 1001160
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pid: Int64?

        /// waf实例名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 1:自动续费，0:不自动续费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoRenewFlag: Int64?

        /// waf购买的实际地域信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realRegion: Int64?

        /// 计费细项标签数组
        /// Saas 高级版  sv_wsm_waf_package_premium
        /// Saas 企业版  sv_wsm_waf_package_enterprise
        /// Saas 旗舰版  sv_wsm_waf_package_ultimate
        /// Saas 非中国大陆高级版  sv_wsm_waf_package_premium_intl
        /// Saas 非中国大陆企业版   sv_wsm_waf_package_enterprise_intl
        /// Saas 非中国大陆旗舰版  sv_wsm_waf_package_ultimate _intl
        /// Saas 业务扩展包  sv_wsm_waf_qps_ep
        /// Saas 域名扩展包  sv_wsm_waf_domain
        ///
        /// 高级版CLB   sv_wsm_waf_package_premium_clb
        /// 企业版CLB  sv_wsm_waf_package_enterprise_clb
        /// 旗舰版CLB   sv_wsm_waf_package_ultimate_clb
        /// 非中国大陆高级版 CLB sv_wsm_waf_package_premium_clb_intl
        /// 非中国大陆企业版CLB   sv_wsm_waf_package_premium_clb_intl
        /// 非中国大陆旗舰版CLB  sv_wsm_waf_package_ultimate_clb _intl
        /// 业务扩展包CLB sv_wsm_waf_qps_ep_clb
        /// 域名扩展包CLB  sv_wsm_waf_domain_clb
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelTypes: [String]?

        /// 计费细项标签数量，一般和SvLabelType一一对应
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let labelCounts: [Int64]?

        /// 变配使用，实例到期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let curDeadline: String?

        /// 对存在的实例购买bot 或api 安全
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        public init(timeSpan: Int64? = nil, timeUnit: String? = nil, subProductCode: String? = nil, pid: Int64? = nil, instanceName: String? = nil, autoRenewFlag: Int64? = nil, realRegion: Int64? = nil, labelTypes: [String]? = nil, labelCounts: [Int64]? = nil, curDeadline: String? = nil, instanceId: String? = nil) {
            self.timeSpan = timeSpan
            self.timeUnit = timeUnit
            self.subProductCode = subProductCode
            self.pid = pid
            self.instanceName = instanceName
            self.autoRenewFlag = autoRenewFlag
            self.realRegion = realRegion
            self.labelTypes = labelTypes
            self.labelCounts = labelCounts
            self.curDeadline = curDeadline
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case timeSpan = "TimeSpan"
            case timeUnit = "TimeUnit"
            case subProductCode = "SubProductCode"
            case pid = "Pid"
            case instanceName = "InstanceName"
            case autoRenewFlag = "AutoRenewFlag"
            case realRegion = "RealRegion"
            case labelTypes = "LabelTypes"
            case labelCounts = "LabelCounts"
            case curDeadline = "CurDeadline"
            case instanceId = "InstanceId"
        }
    }

    /// CLB-WAF删除域名参数
    public struct HostDel: TCInputModel {
        /// 域名
        public let domain: String

        /// 域名ID
        public let domainId: String

        /// 实例类型
        public let instanceID: String?

        public init(domain: String, domainId: String, instanceID: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.instanceID = instanceID
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case instanceID = "InstanceID"
        }
    }

    /// clb-waf防护域名
    public struct HostRecord: TCInputModel, TCOutputModel {
        /// 域名
        public let domain: String

        /// 域名ID
        public let domainId: String

        /// 主域名，入参时为空
        public let mainDomain: String

        /// 规则引擎防护模式，0 观察模式，1拦截模式
        public let mode: UInt64

        /// waf和LD的绑定，0：没有绑定，1：绑定
        public let status: UInt64

        /// 域名状态，0：正常，1：未检测到流量，2：即将过期，3：过期
        public let state: UInt64

        /// 规则引擎和AI引擎防护模式联合状态,10规则引擎观察&&AI引擎关闭模式 11规则引擎观察&&AI引擎观察模式 12规则引擎观察&&AI引擎拦截模式 20规则引擎拦截&&AI引擎关闭模式 21规则引擎拦截&&AI引擎观察模式 22规则引擎拦截&&AI引擎拦截模式
        public let engine: UInt64

        /// 是否开启代理，0：不开启，1：开启
        public let isCdn: UInt64

        /// 绑定的LB列表
        public let loadBalancerSet: [LoadBalancer]

        /// 域名绑定的LB的地域，以,分割多个地域
        public let region: String

        /// 产品分类，取值为：sparta-waf、clb-waf、cdn-waf
        public let edition: String

        /// WAF的流量模式，1：清洗模式，0：镜像模式
        public let flowMode: UInt64

        /// 是否开启访问日志，1：开启，0：关闭
        public let clsStatus: UInt64

        /// 防护等级，可选值100,200,300
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: UInt64?

        /// 域名需要下发到的cdc集群列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcClusters: [String]?

        /// 应用型负载均衡类型: clb或者apisix，默认clb
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let albType: String?

        /// IsCdn=3时，需要填此参数，表示自定义header
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipHeaders: [String]?

        /// 规则引擎类型， 1: menshen,   2:tiga
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineType: Int64?

        /// 云类型:public:公有云；private:私有云;hybrid:混合云
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cloudType: String?

        public init(domain: String, domainId: String, mainDomain: String, mode: UInt64, status: UInt64, state: UInt64, engine: UInt64, isCdn: UInt64, loadBalancerSet: [LoadBalancer], region: String, edition: String, flowMode: UInt64, clsStatus: UInt64, level: UInt64? = nil, cdcClusters: [String]? = nil, albType: String? = nil, ipHeaders: [String]? = nil, engineType: Int64? = nil, cloudType: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.mainDomain = mainDomain
            self.mode = mode
            self.status = status
            self.state = state
            self.engine = engine
            self.isCdn = isCdn
            self.loadBalancerSet = loadBalancerSet
            self.region = region
            self.edition = edition
            self.flowMode = flowMode
            self.clsStatus = clsStatus
            self.level = level
            self.cdcClusters = cdcClusters
            self.albType = albType
            self.ipHeaders = ipHeaders
            self.engineType = engineType
            self.cloudType = cloudType
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case mainDomain = "MainDomain"
            case mode = "Mode"
            case status = "Status"
            case state = "State"
            case engine = "Engine"
            case isCdn = "IsCdn"
            case loadBalancerSet = "LoadBalancerSet"
            case region = "Region"
            case edition = "Edition"
            case flowMode = "FlowMode"
            case clsStatus = "ClsStatus"
            case level = "Level"
            case cdcClusters = "CdcClusters"
            case albType = "AlbType"
            case ipHeaders = "IpHeaders"
            case engineType = "EngineType"
            case cloudType = "CloudType"
        }
    }

    /// 设置WAF状态的结构体
    public struct HostStatus: TCInputModel {
        /// 域名
        public let domain: String

        /// 域名ID
        public let domainId: String

        /// WAF的开关，1：开，0：关
        public let status: UInt64

        /// 实例ID
        public let instanceID: String?

        public init(domain: String, domainId: String, status: UInt64, instanceID: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.status = status
            self.instanceID = instanceID
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case status = "Status"
            case instanceID = "InstanceID"
        }
    }

    /// 混合云节点资源信息
    public struct HybridPkg: TCInputModel, TCOutputModel {
        /// 资源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceIds: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: Int64?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let beginTime: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 申请数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inquireNum: Int64?

        /// 使用数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedNum: Int64?

        /// 续费标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: UInt64?

        public init(resourceIds: String? = nil, status: Int64? = nil, region: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, inquireNum: Int64? = nil, usedNum: Int64? = nil, renewFlag: UInt64? = nil) {
            self.resourceIds = resourceIds
            self.status = status
            self.region = region
            self.beginTime = beginTime
            self.endTime = endTime
            self.inquireNum = inquireNum
            self.usedNum = usedNum
            self.renewFlag = renewFlag
        }

        enum CodingKeys: String, CodingKey {
            case resourceIds = "ResourceIds"
            case status = "Status"
            case region = "Region"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case inquireNum = "InquireNum"
            case usedNum = "UsedNum"
            case renewFlag = "RenewFlag"
        }
    }

    /// 一个实例的详细信息
    public struct InstanceInfo: TCInputModel, TCOutputModel {
        /// id
        public let instanceId: String

        /// Name
        public let instanceName: String

        /// 资源id
        public let resourceIds: String

        /// 地域
        public let region: String

        /// 付费模式
        public let payMode: UInt64

        /// 自动续费
        public let renewFlag: UInt64

        /// 弹性计费
        public let mode: UInt64

        /// 套餐版本
        public let level: UInt64

        /// 过期时间
        public let validTime: String

        /// 开始时间
        public let beginTime: String

        /// 已用
        public let domainCount: UInt64

        /// 上限
        public let subDomainLimit: UInt64

        /// 已用
        public let mainDomainCount: UInt64

        /// 上限
        public let mainDomainLimit: UInt64

        /// 峰值
        public let maxQPS: UInt64

        /// qps套餐
        public let qps: QPSPackageNew

        /// 域名套餐
        public let domainPkg: DomainPackageNew

        /// 用户appid
        public let appId: UInt64

        /// clb或saas
        public let edition: String

        /// 业务安全包
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fraudPkg: FraudPkg?

        /// Bot资源包
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let botPkg: BotPkg?

        /// bot的qps详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let botQPS: BotQPS?

        /// qps弹性计费上限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let elasticBilling: UInt64?

        /// 攻击日志投递开关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let attackLogPost: Int64?

        /// 带宽峰值，单位为B/s(字节每秒)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxBandwidth: UInt64?

        /// api安全是否购买
        public let apiSecurity: UInt64?

        /// 购买的qps规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let qpsStandard: UInt64?

        /// 购买的带宽规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bandwidthStandard: UInt64?

        /// 实例状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// 实例沙箱值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sandboxQps: UInt64?

        /// 是否api 安全试用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isAPISecurityTrial: UInt64?

        /// 重保包
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let majorEventsPkg: MajorEventsPkg?

        /// 混合云子节点包
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hybridPkg: HybridPkg?

        public init(instanceId: String, instanceName: String, resourceIds: String, region: String, payMode: UInt64, renewFlag: UInt64, mode: UInt64, level: UInt64, validTime: String, beginTime: String, domainCount: UInt64, subDomainLimit: UInt64, mainDomainCount: UInt64, mainDomainLimit: UInt64, maxQPS: UInt64, qps: QPSPackageNew, domainPkg: DomainPackageNew, appId: UInt64, edition: String, fraudPkg: FraudPkg? = nil, botPkg: BotPkg? = nil, botQPS: BotQPS? = nil, elasticBilling: UInt64? = nil, attackLogPost: Int64? = nil, maxBandwidth: UInt64? = nil, apiSecurity: UInt64? = nil, qpsStandard: UInt64? = nil, bandwidthStandard: UInt64? = nil, status: UInt64? = nil, sandboxQps: UInt64? = nil, isAPISecurityTrial: UInt64? = nil, majorEventsPkg: MajorEventsPkg? = nil, hybridPkg: HybridPkg? = nil) {
            self.instanceId = instanceId
            self.instanceName = instanceName
            self.resourceIds = resourceIds
            self.region = region
            self.payMode = payMode
            self.renewFlag = renewFlag
            self.mode = mode
            self.level = level
            self.validTime = validTime
            self.beginTime = beginTime
            self.domainCount = domainCount
            self.subDomainLimit = subDomainLimit
            self.mainDomainCount = mainDomainCount
            self.mainDomainLimit = mainDomainLimit
            self.maxQPS = maxQPS
            self.qps = qps
            self.domainPkg = domainPkg
            self.appId = appId
            self.edition = edition
            self.fraudPkg = fraudPkg
            self.botPkg = botPkg
            self.botQPS = botQPS
            self.elasticBilling = elasticBilling
            self.attackLogPost = attackLogPost
            self.maxBandwidth = maxBandwidth
            self.apiSecurity = apiSecurity
            self.qpsStandard = qpsStandard
            self.bandwidthStandard = bandwidthStandard
            self.status = status
            self.sandboxQps = sandboxQps
            self.isAPISecurityTrial = isAPISecurityTrial
            self.majorEventsPkg = majorEventsPkg
            self.hybridPkg = hybridPkg
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case resourceIds = "ResourceIds"
            case region = "Region"
            case payMode = "PayMode"
            case renewFlag = "RenewFlag"
            case mode = "Mode"
            case level = "Level"
            case validTime = "ValidTime"
            case beginTime = "BeginTime"
            case domainCount = "DomainCount"
            case subDomainLimit = "SubDomainLimit"
            case mainDomainCount = "MainDomainCount"
            case mainDomainLimit = "MainDomainLimit"
            case maxQPS = "MaxQPS"
            case qps = "QPS"
            case domainPkg = "DomainPkg"
            case appId = "AppId"
            case edition = "Edition"
            case fraudPkg = "FraudPkg"
            case botPkg = "BotPkg"
            case botQPS = "BotQPS"
            case elasticBilling = "ElasticBilling"
            case attackLogPost = "AttackLogPost"
            case maxBandwidth = "MaxBandwidth"
            case apiSecurity = "APISecurity"
            case qpsStandard = "QpsStandard"
            case bandwidthStandard = "BandwidthStandard"
            case status = "Status"
            case sandboxQps = "SandboxQps"
            case isAPISecurityTrial = "IsAPISecurityTrial"
            case majorEventsPkg = "MajorEventsPkg"
            case hybridPkg = "HybridPkg"
        }
    }

    /// 数据封装
    public struct IpAccessControlData: TCOutputModel {
        /// ip黑白名单
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let res: [IpAccessControlItem]?

        /// 计数
        public let totalCount: UInt64

        enum CodingKeys: String, CodingKey {
            case res = "Res"
            case totalCount = "TotalCount"
        }
    }

    /// ip黑白名单
    public struct IpAccessControlItem: TCOutputModel {
        /// mongo表自增Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: String?

        /// 动作
        public let actionType: UInt64

        /// ip
        public let ip: String

        /// 备注
        public let note: String

        /// 来源
        public let source: String

        /// 更新时间戳
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tsVersion: UInt64?

        /// 有效截止时间戳
        public let validTs: UInt64

        /// 生效状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validStatus: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case actionType = "ActionType"
            case ip = "Ip"
            case note = "Note"
            case source = "Source"
            case tsVersion = "TsVersion"
            case validTs = "ValidTs"
            case validStatus = "ValidStatus"
        }
    }

    /// ip封堵状态数据
    public struct IpHitItem: TCOutputModel {
        /// 动作
        public let action: UInt64

        /// 类别
        public let category: String

        /// ip
        public let ip: String

        /// 规则名称
        public let name: String

        /// 时间戳
        public let tsVersion: UInt64

        /// 有效截止时间戳
        public let validTs: UInt64

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case category = "Category"
            case ip = "Ip"
            case name = "Name"
            case tsVersion = "TsVersion"
            case validTs = "ValidTs"
        }
    }

    /// 封装参数
    public struct IpHitItemsData: TCOutputModel {
        /// 数组封装
        public let res: [IpHitItem]

        /// 总数目
        public let totalCount: UInt64

        enum CodingKeys: String, CodingKey {
            case res = "Res"
            case totalCount = "TotalCount"
        }
    }

    /// 负载均衡的监听器
    public struct LoadBalancer: TCInputModel, TCOutputModel {
        /// 负载均衡LD的ID
        public let loadBalancerId: String

        /// 负载均衡LD的名称
        public let loadBalancerName: String

        /// 负载均衡监听器的ID
        public let listenerId: String

        /// 负载均衡监听器的名称
        public let listenerName: String

        /// 负载均衡实例的IP
        public let vip: String

        /// 负载均衡实例的端口
        public let vport: UInt64

        /// 负载均衡LD的地域
        public let region: String

        /// 监听器协议，http、https
        public let `protocol`: String

        /// 负载均衡监听器所在的zone
        public let zone: String

        /// 负载均衡的VPCID，公网为-1，内网按实际填写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numericalVpcId: Int64?

        /// 负载均衡的网络类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerType: String?

        /// 负载均衡的域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerDomain: String?

        public init(loadBalancerId: String, loadBalancerName: String, listenerId: String, listenerName: String, vip: String, vport: UInt64, region: String, protocol: String, zone: String, numericalVpcId: Int64? = nil, loadBalancerType: String? = nil, loadBalancerDomain: String? = nil) {
            self.loadBalancerId = loadBalancerId
            self.loadBalancerName = loadBalancerName
            self.listenerId = listenerId
            self.listenerName = listenerName
            self.vip = vip
            self.vport = vport
            self.region = region
            self.protocol = `protocol`
            self.zone = zone
            self.numericalVpcId = numericalVpcId
            self.loadBalancerType = loadBalancerType
            self.loadBalancerDomain = loadBalancerDomain
        }

        enum CodingKeys: String, CodingKey {
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case vip = "Vip"
            case vport = "Vport"
            case region = "Region"
            case `protocol` = "Protocol"
            case zone = "Zone"
            case numericalVpcId = "NumericalVpcId"
            case loadBalancerType = "LoadBalancerType"
            case loadBalancerDomain = "LoadBalancerDomain"
        }
    }

    /// 负载均衡器
    public struct LoadBalancerPackageNew: TCInputModel, TCOutputModel {
        /// 监听id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerId: String?

        /// 监听名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let listenerName: String?

        /// 负载均衡id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerId: String?

        /// 负载均衡名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerName: String?

        /// 协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 地区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 接入IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// 接入端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vport: UInt64?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// VPCID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numericalVpcId: Int64?

        /// CLB类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerType: String?

        /// 负载均衡器的域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let loadBalancerDomain: String?

        public init(listenerId: String, listenerName: String, loadBalancerId: String, loadBalancerName: String, protocol: String, region: String, vip: String, vport: UInt64, zone: String, numericalVpcId: Int64, loadBalancerType: String, loadBalancerDomain: String? = nil) {
            self.listenerId = listenerId
            self.listenerName = listenerName
            self.loadBalancerId = loadBalancerId
            self.loadBalancerName = loadBalancerName
            self.protocol = `protocol`
            self.region = region
            self.vip = vip
            self.vport = vport
            self.zone = zone
            self.numericalVpcId = numericalVpcId
            self.loadBalancerType = loadBalancerType
            self.loadBalancerDomain = loadBalancerDomain
        }

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case loadBalancerId = "LoadBalancerId"
            case loadBalancerName = "LoadBalancerName"
            case `protocol` = "Protocol"
            case region = "Region"
            case vip = "Vip"
            case vport = "Vport"
            case zone = "Zone"
            case numericalVpcId = "NumericalVpcId"
            case loadBalancerType = "LoadBalancerType"
            case loadBalancerDomain = "LoadBalancerDomain"
        }
    }

    /// 攻击日志统计详情
    public struct LogHistogramInfo: TCOutputModel {
        /// 日志条数
        public let count: Int64

        /// 时间戳
        public let timeStamp: Int64

        enum CodingKeys: String, CodingKey {
            case count = "Count"
            case timeStamp = "TimeStamp"
        }
    }

    /// 重保防护资源信息
    public struct MajorEventsPkg: TCInputModel, TCOutputModel {
        /// 资源id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceIds: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: Int64?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let beginTime: String?

        /// 结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 申请数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inquireNum: Int64?

        /// 使用数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let usedNum: Int64?

        /// 续费标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: UInt64?

        /// 计费项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingItem: String?

        /// 护网包状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hwState: Int64?

        public init(resourceIds: String? = nil, status: Int64? = nil, region: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, inquireNum: Int64? = nil, usedNum: Int64? = nil, renewFlag: UInt64? = nil, billingItem: String? = nil, hwState: Int64? = nil) {
            self.resourceIds = resourceIds
            self.status = status
            self.region = region
            self.beginTime = beginTime
            self.endTime = endTime
            self.inquireNum = inquireNum
            self.usedNum = usedNum
            self.renewFlag = renewFlag
            self.billingItem = billingItem
            self.hwState = hwState
        }

        enum CodingKeys: String, CodingKey {
            case resourceIds = "ResourceIds"
            case status = "Status"
            case region = "Region"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case inquireNum = "InquireNum"
            case usedNum = "UsedNum"
            case renewFlag = "RenewFlag"
            case billingItem = "BillingItem"
            case hwState = "HWState"
        }
    }

    /// 公共翻页参数
    public struct PageInfo: TCInputModel {
        /// 页码
        public let pageNumber: String

        /// 页条目数量
        public let pageSize: String

        public init(pageNumber: String, pageSize: String) {
            self.pageNumber = pageNumber
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
        }
    }

    /// PeakPoints数组项
    public struct PeakPointsItem: TCOutputModel {
        /// 秒级别时间戳
        public let time: UInt64

        /// QPS
        public let access: UInt64

        /// 上行带宽峰值，单位B
        public let up: UInt64

        /// 下行带宽峰值，单位B
        public let down: UInt64

        /// Web攻击次数
        public let attack: UInt64

        /// CC攻击次数
        public let cc: UInt64

        /// Bot qps
        public let botAccess: UInt64

        /// WAF返回给客户端状态码5xx次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusServerError: UInt64?

        /// WAF返回给客户端状态码4xx次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusClientError: UInt64?

        /// WAF返回给客户端状态码302次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusRedirect: UInt64?

        /// WAF返回给客户端状态码202次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusOk: UInt64?

        /// 源站返回给WAF状态码5xx次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamServerError: UInt64?

        /// 源站返回给WAF状态码4xx次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamClientError: UInt64?

        /// 源站返回给WAF状态码302次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upstreamRedirect: UInt64?

        /// 黑名单次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let blackIP: UInt64?

        /// 防篡改次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tamper: UInt64?

        /// 信息防泄露次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let leak: UInt64?

        /// 访问控制
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let acl: UInt64?

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case access = "Access"
            case up = "Up"
            case down = "Down"
            case attack = "Attack"
            case cc = "Cc"
            case botAccess = "BotAccess"
            case statusServerError = "StatusServerError"
            case statusClientError = "StatusClientError"
            case statusRedirect = "StatusRedirect"
            case statusOk = "StatusOk"
            case upstreamServerError = "UpstreamServerError"
            case upstreamClientError = "UpstreamClientError"
            case upstreamRedirect = "UpstreamRedirect"
            case blackIP = "BlackIP"
            case tamper = "Tamper"
            case leak = "Leak"
            case acl = "ACL"
        }
    }

    /// 服务端口配置
    public struct PortInfo: TCInputModel, TCOutputModel {
        /// Nginx的服务器id
        public let nginxServerId: UInt64

        /// 监听端口配置
        public let port: String

        /// 与端口对应的协议
        public let `protocol`: String

        /// 回源端口
        public let upstreamPort: String

        /// 回源协议
        public let upstreamProtocol: String

        public init(nginxServerId: UInt64, port: String, protocol: String, upstreamPort: String, upstreamProtocol: String) {
            self.nginxServerId = nginxServerId
            self.port = port
            self.protocol = `protocol`
            self.upstreamPort = upstreamPort
            self.upstreamProtocol = upstreamProtocol
        }

        enum CodingKeys: String, CodingKey {
            case nginxServerId = "NginxServerId"
            case port = "Port"
            case `protocol` = "Protocol"
            case upstreamPort = "UpstreamPort"
            case upstreamProtocol = "UpstreamProtocol"
        }
    }

    /// 防护域名端口配置信息
    public struct PortItem: TCInputModel, TCOutputModel {
        /// 监听端口配置
        public let port: String

        /// 与Port一一对应，表示端口对应的协议
        public let `protocol`: String

        /// 与Port一一对应,  表示回源端口
        public let upstreamPort: String

        /// 与Port一一对应,  表示回源协议
        public let upstreamProtocol: String

        /// Nginx的服务器ID
        public let nginxServerId: String

        public init(port: String, protocol: String, upstreamPort: String, upstreamProtocol: String, nginxServerId: String) {
            self.port = port
            self.protocol = `protocol`
            self.upstreamPort = upstreamPort
            self.upstreamProtocol = upstreamProtocol
            self.nginxServerId = nginxServerId
        }

        enum CodingKeys: String, CodingKey {
            case port = "Port"
            case `protocol` = "Protocol"
            case upstreamPort = "UpstreamPort"
            case upstreamProtocol = "UpstreamProtocol"
            case nginxServerId = "NginxServerId"
        }
    }

    /// clb-waf QPS套餐 New
    public struct QPSPackageNew: TCInputModel, TCOutputModel {
        /// 资源ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceIds: String?

        /// 过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let validTime: String?

        /// 是否自动续费，1：自动续费，0：不自动续费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: Int64?

        /// 套餐购买个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: Int64?

        /// 套餐购买地域，clb-waf暂时没有用到
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 计费项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingItem: String?

        public init(resourceIds: String? = nil, validTime: String? = nil, renewFlag: Int64? = nil, count: Int64? = nil, region: String? = nil, billingItem: String? = nil) {
            self.resourceIds = resourceIds
            self.validTime = validTime
            self.renewFlag = renewFlag
            self.count = count
            self.region = region
            self.billingItem = billingItem
        }

        enum CodingKeys: String, CodingKey {
            case resourceIds = "ResourceIds"
            case validTime = "ValidTime"
            case renewFlag = "RenewFlag"
            case count = "Count"
            case region = "Region"
            case billingItem = "BillingItem"
        }
    }

    /// 获取弹性qps的默认相关值
    public struct QpsData: TCOutputModel {
        /// 弹性qps默认值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let elasticBillingDefault: UInt64?

        /// 弹性qps最小值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let elasticBillingMin: UInt64?

        /// 弹性qps最大值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let elasticBillingMax: UInt64?

        /// 业务扩展包最大qps
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let qpsExtendMax: UInt64?

        /// 海外业务扩展包最大qps
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let qpsExtendIntlMax: UInt64?

        enum CodingKeys: String, CodingKey {
            case elasticBillingDefault = "ElasticBillingDefault"
            case elasticBillingMin = "ElasticBillingMin"
            case elasticBillingMax = "ElasticBillingMax"
            case qpsExtendMax = "QPSExtendMax"
            case qpsExtendIntlMax = "QPSExtendIntlMax"
        }
    }

    /// 响应体的返回码
    public struct ResponseCode: TCOutputModel {
        /// 如果成功则返回Success，失败则返回云api定义的错误码
        public let code: String

        /// 如果成功则返回Success，失败则返回WAF定义的二级错误码
        public let message: String

        enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    /// 规则白名单
    public struct RuleList: TCOutputModel {
        /// 规则Id
        public let id: UInt64

        /// 规则列表的id
        public let rules: [UInt64]

        /// 请求url
        public let url: String

        /// 请求的方法
        public let function: String

        /// 时间戳
        public let time: String

        /// 开关状态
        public let status: UInt64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case rules = "Rules"
            case url = "Url"
            case function = "Function"
            case time = "Time"
            case status = "Status"
        }
    }

    /// 接入列表查询复杂条件
    public struct SearchItem: TCInputModel {
        /// 日志开关
        public let clsStatus: String?

        /// waf开关
        public let status: String?

        /// 流量模式
        public let flowMode: String?

        public init(clsStatus: String? = nil, status: String? = nil, flowMode: String? = nil) {
            self.clsStatus = clsStatus
            self.status = status
            self.flowMode = flowMode
        }

        enum CodingKeys: String, CodingKey {
            case clsStatus = "ClsStatus"
            case status = "Status"
            case flowMode = "FlowMode"
        }
    }

    /// 参数包装
    public struct SessionData: TCOutputModel {
        /// session定义
        public let res: [SessionItem]

        enum CodingKeys: String, CodingKey {
            case res = "Res"
        }
    }

    /// session定义
    public struct SessionItem: TCOutputModel {
        /// 匹配类型
        public let category: String

        /// 起始模式
        public let keyOrStartMat: String

        /// 结束模式
        public let endMat: String

        /// 起始偏移
        public let startOffset: String

        /// 结束偏移
        public let endOffset: String

        /// 数据源
        public let source: String

        /// 更新时间戳
        public let tsVersion: String

        enum CodingKeys: String, CodingKey {
            case category = "Category"
            case keyOrStartMat = "KeyOrStartMat"
            case endMat = "EndMat"
            case startOffset = "StartOffset"
            case endOffset = "EndOffset"
            case source = "Source"
            case tsVersion = "TsVersion"
        }
    }

    /// waf斯巴达-编辑防护域名中的端口结构
    public struct SpartaProtectionPort: TCInputModel {
        /// nginx Id
        public let nginxServerId: UInt64

        /// 端口
        public let port: String

        /// 协议
        public let `protocol`: String

        /// 后端端口
        public let upstreamPort: String

        /// 后端协议
        public let upstreamProtocol: String

        public init(nginxServerId: UInt64, port: String, protocol: String, upstreamPort: String, upstreamProtocol: String) {
            self.nginxServerId = nginxServerId
            self.port = port
            self.protocol = `protocol`
            self.upstreamPort = upstreamPort
            self.upstreamProtocol = upstreamProtocol
        }

        enum CodingKeys: String, CodingKey {
            case nginxServerId = "NginxServerId"
            case port = "Port"
            case `protocol` = "Protocol"
            case upstreamPort = "UpstreamPort"
            case upstreamProtocol = "UpstreamProtocol"
        }
    }

    /// 自定义规则的匹配条件结构体
    public struct Strategy: TCInputModel, TCOutputModel {
        /// 匹配字段
        ///
        ///     匹配字段不同，相应的匹配参数、逻辑符号、匹配内容有所不同
        /// 具体如下所示：
        ///
        /// | 匹配字段 | 匹配参数 | 逻辑符号 | 匹配内容 |
        /// |---|---|---|---|
        /// | IP（来源IP） | 不支持参数 | ipmatch（匹配）<br>ipnmatch（不匹配） | 多个IP以英文逗号隔开,最多20个 |
        /// | IPV6（来源IPv6） | 不支持参数 | ipmatch（匹配）<br>ipnmatch（不匹配） | 支持单个IPV6地址 |
        /// | Referer（Referer） | 不支持参数 | empty（内容为空）<br>null（不存在）<br>eq（等于）<br>neq（不等于）<br>contains（包含）<br>ncontains（不包含）<br>len_eq（长度等于）<br>len_gt（长度大于）<br>len_lt（长度小于）<br>strprefix（前缀匹配）<br>strsuffix（后缀匹配）<br>rematch（正则匹配） | 请输入内容,512个字符以内 |
        /// | URL（请求路径） | 不支持参数 | eq（等于）<br>neq（不等于）<br>contains（包含）<br>ncontains（不包含）<br>len_eq（长度等于）<br>len_gt（长度大于）<br>len_lt（长度小于）<br>strprefix（前缀匹配）<br>strsuffix（后缀匹配）<br>rematch（正则匹配） | 请以/开头,512个字符以内 |
        /// | UserAgent（UserAgent） | 不支持参数 | 同匹配字段_Referer_逻辑符号 | 请输入内容,512个字符以内 |
        /// | HTTP_METHOD（HTTP请求方法） | 不支持参数 | eq（等于）<br>neq（不等于） | 请输入方法名称,建议大写 |
        /// | QUERY_STRING（请求字符串） | 不支持参数 | 同匹配字段_请求路径_逻辑符号 | 请输入内容,512个字符以内 |
        /// | GET（GET参数值） | 支持参数录入 | contains（包含）<br>ncontains（不包含）<br>len_eq（长度等于）<br>len_gt（长度大于）<br>len_lt（长度小于）<br>strprefix（前缀匹配）<br>strsuffix（后缀匹配） | 请输入内容,512个字符以内 |
        /// | GET_PARAMS_NAMES（GET参数名） | 不支持参数 | exsit（存在参数）<br>nexsit（不存在参数）<br>len_eq（长度等于）<br>len_gt（长度大于）<br>len_lt（长度小于）<br>strprefix（前缀匹配）<br>strsuffix（后缀匹配） | 请输入内容,512个字符以内 |
        /// | POST（POST参数值） | 支持参数录入 | 同匹配字段_GET参数值_逻辑符号 | 请输入内容,512个字符以内 |
        /// | GET_POST_NAMES（POST参数名） | 不支持参数 | 同匹配字段_GET参数名_逻辑符号 | 请输入内容,512个字符以内 |
        /// | POST_BODY（完整BODY） | 不支持参数 | 同匹配字段_请求路径_逻辑符号 | 请输入BODY内容,512个字符以内 |
        /// | COOKIE（Cookie） | 不支持参数 | empty（内容为空）<br>null（不存在）<br>rematch（正则匹配） | _暂不支持_ |
        /// | GET_COOKIES_NAMES（Cookie参数名） | 不支持参数 | 同匹配字段_GET参数名_逻辑符号 | 请输入内容,512个字符以内 |
        /// | ARGS_COOKIE（Cookie参数值） | 支持参数录入 | 同匹配字段_GET参数值_逻辑符号 | 请输入内容,512个字符以内 |
        /// | GET_HEADERS_NAMES（Header参数名） | 不支持参数 | exsit（存在参数）<br>nexsit（不存在参数）<br>len_eq（长度等于）<br>len_gt（长度大于）<br>len_lt（长度小于）<br>strprefix（前缀匹配）<br>strsuffix（后缀匹配）<br>rematch（正则匹配） | 请输入内容,建议小写,512个字符以内 |
        /// | ARGS_HEADER（Header参数值） | 支持参数录入 | contains（包含）<br>ncontains（不包含）<br>len_eq（长度等于）<br>len_gt（长度大于）<br>len_lt（长度小于）<br>strprefix（前缀匹配）<br>strsuffix（后缀匹配）<br>rematch（正则匹配） | 请输入内容,512个字符以内 |
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let field: String?

        /// 逻辑符号
        ///
        ///     逻辑符号一共分为以下几种类型：
        ///         empty （ 内容为空）
        ///         null （不存在）
        ///         eq （ 等于）
        ///         neq （ 不等于）
        ///         contains （ 包含）
        ///         ncontains （ 不包含）
        ///         strprefix （ 前缀匹配）
        ///         strsuffix （ 后缀匹配）
        ///         len_eq （ 长度等于）
        ///         len_gt （ 长度大于）
        ///         len_lt （ 长度小于）
        ///         ipmatch （ 属于）
        ///         ipnmatch （ 不属于）
        ///     各匹配字段对应的逻辑符号不同，详见上述匹配字段表格
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let compareFunc: String?

        /// 匹配内容
        ///
        ///     目前 当匹配字段为COOKIE（Cookie）时，不需要输入 匹配内容
        /// 其他都需要
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let content: String?

        /// 匹配参数
        ///
        ///     配置参数一共分2种类型 不支持参数与支持参数
        ///     当匹配字段为以下4个时，匹配参数才能录入，否则不支持该参数
        ///         GET（GET参数值）
        ///
        ///         POST（POST参数值）
        ///
        ///         ARGS_COOKIE（Cookie参数值）
        ///
        ///         ARGS_HEADER（Header参数值）
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let arg: String?

        public init(field: String, compareFunc: String, content: String, arg: String) {
            self.field = field
            self.compareFunc = compareFunc
            self.content = content
            self.arg = arg
        }

        enum CodingKeys: String, CodingKey {
            case field = "Field"
            case compareFunc = "CompareFunc"
            case content = "Content"
            case arg = "Arg"
        }
    }

    /// 防信息泄露的匹配条件结构体
    public struct StrategyForAntiInfoLeak: TCInputModel {
        /// 匹配条件，returncode（响应码）、keywords（关键字）、information（敏感信息）
        public let field: String

        /// 逻辑符号，固定取值为contains
        public let compareFunc: String

        /// 匹配内容。
        /// 以下三个对应Field为information时可取的匹配内容：
        /// idcard（身份证）、phone（手机号）、bankcard（银行卡）。
        /// 以下为对应Field为returncode时可取的匹配内容：
        /// 400（状态码400）、403（状态码403）、404（状态码404）、4xx（其它4xx状态码）、500（状态码500）、501（状态码501）、502（状态码502）、504（状态码504）、5xx（其它5xx状态码）。
        /// 当对应Field为keywords时由用户自己输入匹配内容。
        public let content: String

        public init(field: String, compareFunc: String, content: String) {
            self.field = field
            self.compareFunc = compareFunc
            self.content = content
        }

        enum CodingKeys: String, CodingKey {
            case field = "Field"
            case compareFunc = "CompareFunc"
            case content = "Content"
        }
    }

    /// TLS 加密套件
    public struct TLSCiphers: TCOutputModel {
        /// TLS版本ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionId: Int64?

        /// 加密套件ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cipherId: Int64?

        /// 加密套件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cipherName: String?

        enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case cipherId = "CipherId"
            case cipherName = "CipherName"
        }
    }

    /// TLS信息
    public struct TLSVersion: TCOutputModel {
        /// TLSVERSION的ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionId: Int64?

        /// TLSVERSION的NAME
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionName: String?

        enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case versionName = "VersionName"
        }
    }

    /// 需要开启/关闭API安全的 实例+域名 组合实体
    public struct TargetEntity: TCInputModel {
        /// 实例ID
        public let instanceId: String?

        /// 域名
        public let domain: String?

        public init(instanceId: String? = nil, domain: String? = nil) {
            self.instanceId = instanceId
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case domain = "Domain"
        }
    }

    /// saas和clb信息
    public struct UserDomainInfo: TCOutputModel {
        /// 用户id
        public let appid: UInt64

        /// 域名
        public let domain: String

        /// 域名id
        public let domainId: String

        /// 实例id
        public let instanceId: String

        /// 实例名
        public let instanceName: String

        /// waf类型
        public let edition: String

        /// 版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// 指定域名访问日志字段的开关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let writeConfig: String?

        /// 指定域名是否写cls的开关 1:写 0:不写
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cls: UInt64?

        /// 标记是否是混合云接入。hybrid表示混合云接入域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cloudType: String?

        enum CodingKeys: String, CodingKey {
            case appid = "Appid"
            case domain = "Domain"
            case domainId = "DomainId"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case edition = "Edition"
            case level = "Level"
            case writeConfig = "WriteConfig"
            case cls = "Cls"
            case cloudType = "CloudType"
        }
    }

    /// Vip信息
    public struct VipInfo: TCOutputModel {
        /// Virtual IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// waf实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        enum CodingKeys: String, CodingKey {
            case vip = "Vip"
            case instanceId = "InstanceId"
        }
    }

    /// waf模块的规格
    public struct WafRuleLimit: TCOutputModel {
        /// 自定义CC的规格
        public let cc: UInt64

        /// 自定义策略的规格
        public let customRule: UInt64

        /// 黑白名单的规格
        public let ipControl: UInt64

        /// 信息防泄漏的规格
        public let antiLeak: UInt64

        /// 防篡改的规格
        public let antiTamper: UInt64

        /// 紧急CC的规格
        public let autoCC: UInt64

        /// 地域封禁的规格
        public let areaBan: UInt64

        /// 自定义CC中配置session
        public let ccSession: UInt64

        /// AI的规格
        public let ai: UInt64

        /// 精准白名单的规格
        public let customWhite: UInt64

        /// api安全的规格
        public let apiSecurity: UInt64

        /// 客户端流量标记的规格
        public let clientMsg: UInt64

        /// 流量标记的规格
        public let trafficMarking: UInt64

        enum CodingKeys: String, CodingKey {
            case cc = "CC"
            case customRule = "CustomRule"
            case ipControl = "IPControl"
            case antiLeak = "AntiLeak"
            case antiTamper = "AntiTamper"
            case autoCC = "AutoCC"
            case areaBan = "AreaBan"
            case ccSession = "CCSession"
            case ai = "AI"
            case customWhite = "CustomWhite"
            case apiSecurity = "ApiSecurity"
            case clientMsg = "ClientMsg"
            case trafficMarking = "TrafficMarking"
        }
    }

    /// 当前WAF威胁情报封禁模块详情
    public struct WafThreatenIntelligenceDetails: TCInputModel, TCOutputModel {
        /// 封禁属性标签
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [String]?

        /// 封禁模组启用状态
        public let defenseStatus: Int64?

        /// 最后更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$lastUpdateTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastUpdateTime: Date?

        public init(tags: [String]? = nil, defenseStatus: Int64? = nil, lastUpdateTime: Date? = nil) {
            self.tags = tags
            self.defenseStatus = defenseStatus
            self._lastUpdateTime = .init(wrappedValue: lastUpdateTime)
        }

        enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case defenseStatus = "DefenseStatus"
            case lastUpdateTime = "LastUpdateTime"
        }
    }
}
