//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Waf {
    /// ModifyWafThreatenIntelligence请求参数结构体
    public struct ModifyWafThreatenIntelligenceRequest: TCRequestModel {
        /// 配置WAF威胁情报封禁模块详情
        public let wafThreatenIntelligenceDetails: WafThreatenIntelligenceDetails

        public init(wafThreatenIntelligenceDetails: WafThreatenIntelligenceDetails) {
            self.wafThreatenIntelligenceDetails = wafThreatenIntelligenceDetails
        }

        enum CodingKeys: String, CodingKey {
            case wafThreatenIntelligenceDetails = "WafThreatenIntelligenceDetails"
        }
    }

    /// ModifyWafThreatenIntelligence返回参数结构体
    public struct ModifyWafThreatenIntelligenceResponse: TCResponseModel {
        /// 当前WAF威胁情报封禁模块详情
        public let wafThreatenIntelligenceDetails: WafThreatenIntelligenceDetails

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case wafThreatenIntelligenceDetails = "WafThreatenIntelligenceDetails"
            case requestId = "RequestId"
        }
    }

    /// 配置WAF威胁情报封禁模块详情
    @inlinable
    public func modifyWafThreatenIntelligence(_ input: ModifyWafThreatenIntelligenceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyWafThreatenIntelligenceResponse> {
        self.client.execute(action: "ModifyWafThreatenIntelligence", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 配置WAF威胁情报封禁模块详情
    @inlinable
    public func modifyWafThreatenIntelligence(_ input: ModifyWafThreatenIntelligenceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyWafThreatenIntelligenceResponse {
        try await self.client.execute(action: "ModifyWafThreatenIntelligence", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 配置WAF威胁情报封禁模块详情
    @inlinable
    public func modifyWafThreatenIntelligence(wafThreatenIntelligenceDetails: WafThreatenIntelligenceDetails, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyWafThreatenIntelligenceResponse> {
        self.modifyWafThreatenIntelligence(ModifyWafThreatenIntelligenceRequest(wafThreatenIntelligenceDetails: wafThreatenIntelligenceDetails), region: region, logger: logger, on: eventLoop)
    }

    /// 配置WAF威胁情报封禁模块详情
    @inlinable
    public func modifyWafThreatenIntelligence(wafThreatenIntelligenceDetails: WafThreatenIntelligenceDetails, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyWafThreatenIntelligenceResponse {
        try await self.modifyWafThreatenIntelligence(ModifyWafThreatenIntelligenceRequest(wafThreatenIntelligenceDetails: wafThreatenIntelligenceDetails), region: region, logger: logger, on: eventLoop)
    }
}
