//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeHostLimit请求参数结构体
    public struct DescribeHostLimitRequest: TCRequest {
        /// 添加的域名
        public let domain: String

        /// 实例id
        public let instanceID: String?

        /// 流量来源
        public let albType: String?

        public init(domain: String, instanceID: String? = nil, albType: String? = nil) {
            self.domain = domain
            self.instanceID = instanceID
            self.albType = albType
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case instanceID = "InstanceID"
            case albType = "AlbType"
        }
    }

    /// DescribeHostLimit返回参数结构体
    public struct DescribeHostLimitResponse: TCResponse {
        /// 成功返回的状态码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let success: ResponseCode?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case success = "Success"
            case requestId = "RequestId"
        }
    }

    /// 验证添加的域名是否已经存在
    ///
    /// 添加域名的首先验证是否购买了套餐，是否没有达到购买套餐的限制，域名是否已经添加
    @inlinable
    public func describeHostLimit(_ input: DescribeHostLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostLimitResponse> {
        self.client.execute(action: "DescribeHostLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 验证添加的域名是否已经存在
    ///
    /// 添加域名的首先验证是否购买了套餐，是否没有达到购买套餐的限制，域名是否已经添加
    @inlinable
    public func describeHostLimit(_ input: DescribeHostLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostLimitResponse {
        try await self.client.execute(action: "DescribeHostLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 验证添加的域名是否已经存在
    ///
    /// 添加域名的首先验证是否购买了套餐，是否没有达到购买套餐的限制，域名是否已经添加
    @inlinable
    public func describeHostLimit(domain: String, instanceID: String? = nil, albType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostLimitResponse> {
        self.describeHostLimit(.init(domain: domain, instanceID: instanceID, albType: albType), region: region, logger: logger, on: eventLoop)
    }

    /// 验证添加的域名是否已经存在
    ///
    /// 添加域名的首先验证是否购买了套餐，是否没有达到购买套餐的限制，域名是否已经添加
    @inlinable
    public func describeHostLimit(domain: String, instanceID: String? = nil, albType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostLimitResponse {
        try await self.describeHostLimit(.init(domain: domain, instanceID: instanceID, albType: albType), region: region, logger: logger, on: eventLoop)
    }
}
