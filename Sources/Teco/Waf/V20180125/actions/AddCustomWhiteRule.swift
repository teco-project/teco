//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// AddCustomWhiteRule请求参数结构体
    public struct AddCustomWhiteRuleRequest: TCRequest {
        /// 规则名称
        public let name: String

        /// 优先级
        public let sortId: String

        /// 过期时间
        public let expireTime: String

        /// 策略详情
        public let strategies: [Strategy]

        /// 需要添加策略的域名
        public let domain: String

        /// 放行的详情
        public let bypass: String

        public init(name: String, sortId: String, expireTime: String, strategies: [Strategy], domain: String, bypass: String) {
            self.name = name
            self.sortId = sortId
            self.expireTime = expireTime
            self.strategies = strategies
            self.domain = domain
            self.bypass = bypass
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sortId = "SortId"
            case expireTime = "ExpireTime"
            case strategies = "Strategies"
            case domain = "Domain"
            case bypass = "Bypass"
        }
    }

    /// AddCustomWhiteRule返回参数结构体
    public struct AddCustomWhiteRuleResponse: TCResponse {
        /// 操作的状态码，如果所有的资源操作成功则返回的是成功的状态码，如果有资源操作失败则需要解析Message的内容来查看哪个资源失败
        public let success: ResponseCode

        /// 添加成功的规则ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleId: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case success = "Success"
            case ruleId = "RuleId"
            case requestId = "RequestId"
        }
    }

    /// 添加精准白名单规则
    ///
    /// 增加精准白名单规则
    @inlinable
    public func addCustomWhiteRule(_ input: AddCustomWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddCustomWhiteRuleResponse> {
        self.client.execute(action: "AddCustomWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加精准白名单规则
    ///
    /// 增加精准白名单规则
    @inlinable
    public func addCustomWhiteRule(_ input: AddCustomWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddCustomWhiteRuleResponse {
        try await self.client.execute(action: "AddCustomWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加精准白名单规则
    ///
    /// 增加精准白名单规则
    @inlinable
    public func addCustomWhiteRule(name: String, sortId: String, expireTime: String, strategies: [Strategy], domain: String, bypass: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddCustomWhiteRuleResponse> {
        self.addCustomWhiteRule(.init(name: name, sortId: sortId, expireTime: expireTime, strategies: strategies, domain: domain, bypass: bypass), region: region, logger: logger, on: eventLoop)
    }

    /// 添加精准白名单规则
    ///
    /// 增加精准白名单规则
    @inlinable
    public func addCustomWhiteRule(name: String, sortId: String, expireTime: String, strategies: [Strategy], domain: String, bypass: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddCustomWhiteRuleResponse {
        try await self.addCustomWhiteRule(.init(name: name, sortId: sortId, expireTime: expireTime, strategies: strategies, domain: domain, bypass: bypass), region: region, logger: logger, on: eventLoop)
    }
}
