//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyAntiInfoLeakRules请求参数结构体
    public struct ModifyAntiInfoLeakRulesRequest: TCRequest {
        /// 规则ID
        public let ruleId: UInt64

        /// 规则名称
        public let name: String

        /// 域名
        public let domain: String

        /// Action 值
        public let actionType: UInt64

        /// 策略数组
        public let strategies: [StrategyForAntiInfoLeak]

        public init(ruleId: UInt64, name: String, domain: String, actionType: UInt64, strategies: [StrategyForAntiInfoLeak]) {
            self.ruleId = ruleId
            self.name = name
            self.domain = domain
            self.actionType = actionType
            self.strategies = strategies
        }

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case name = "Name"
            case domain = "Domain"
            case actionType = "ActionType"
            case strategies = "Strategies"
        }
    }

    /// ModifyAntiInfoLeakRules返回参数结构体
    public struct ModifyAntiInfoLeakRulesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 编辑信息防泄漏规则
    @inlinable @discardableResult
    public func modifyAntiInfoLeakRules(_ input: ModifyAntiInfoLeakRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAntiInfoLeakRulesResponse> {
        self.client.execute(action: "ModifyAntiInfoLeakRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑信息防泄漏规则
    @inlinable @discardableResult
    public func modifyAntiInfoLeakRules(_ input: ModifyAntiInfoLeakRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAntiInfoLeakRulesResponse {
        try await self.client.execute(action: "ModifyAntiInfoLeakRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑信息防泄漏规则
    @inlinable @discardableResult
    public func modifyAntiInfoLeakRules(ruleId: UInt64, name: String, domain: String, actionType: UInt64, strategies: [StrategyForAntiInfoLeak], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAntiInfoLeakRulesResponse> {
        self.modifyAntiInfoLeakRules(.init(ruleId: ruleId, name: name, domain: domain, actionType: actionType, strategies: strategies), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑信息防泄漏规则
    @inlinable @discardableResult
    public func modifyAntiInfoLeakRules(ruleId: UInt64, name: String, domain: String, actionType: UInt64, strategies: [StrategyForAntiInfoLeak], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAntiInfoLeakRulesResponse {
        try await self.modifyAntiInfoLeakRules(.init(ruleId: ruleId, name: name, domain: domain, actionType: actionType, strategies: strategies), region: region, logger: logger, on: eventLoop)
    }
}
