//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyInstanceQpsLimit请求参数结构体
    public struct ModifyInstanceQpsLimitRequest: TCRequest {
        /// 套餐实例id
        public let instanceId: String

        /// qps上限
        public let qpsLimit: Int64

        public init(instanceId: String, qpsLimit: Int64) {
            self.instanceId = instanceId
            self.qpsLimit = qpsLimit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case qpsLimit = "QpsLimit"
        }
    }

    /// ModifyInstanceQpsLimit返回参数结构体
    public struct ModifyInstanceQpsLimitResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置套餐实例的弹性qps上限
    @inlinable @discardableResult
    public func modifyInstanceQpsLimit(_ input: ModifyInstanceQpsLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceQpsLimitResponse> {
        self.client.execute(action: "ModifyInstanceQpsLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置套餐实例的弹性qps上限
    @inlinable @discardableResult
    public func modifyInstanceQpsLimit(_ input: ModifyInstanceQpsLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceQpsLimitResponse {
        try await self.client.execute(action: "ModifyInstanceQpsLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置套餐实例的弹性qps上限
    @inlinable @discardableResult
    public func modifyInstanceQpsLimit(instanceId: String, qpsLimit: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceQpsLimitResponse> {
        self.modifyInstanceQpsLimit(.init(instanceId: instanceId, qpsLimit: qpsLimit), region: region, logger: logger, on: eventLoop)
    }

    /// 设置套餐实例的弹性qps上限
    @inlinable @discardableResult
    public func modifyInstanceQpsLimit(instanceId: String, qpsLimit: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceQpsLimitResponse {
        try await self.modifyInstanceQpsLimit(.init(instanceId: instanceId, qpsLimit: qpsLimit), region: region, logger: logger, on: eventLoop)
    }
}
