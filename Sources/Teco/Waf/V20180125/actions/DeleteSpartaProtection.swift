//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DeleteSpartaProtection请求参数结构体
    public struct DeleteSpartaProtectionRequest: TCRequest {
        /// 域名列表
        public let domains: [String]

        /// 实例类型
        public let edition: String?

        /// 实例id
        public let instanceID: String?

        public init(domains: [String], edition: String? = nil, instanceID: String? = nil) {
            self.domains = domains
            self.edition = edition
            self.instanceID = instanceID
        }

        enum CodingKeys: String, CodingKey {
            case domains = "Domains"
            case edition = "Edition"
            case instanceID = "InstanceID"
        }
    }

    /// DeleteSpartaProtection返回参数结构体
    public struct DeleteSpartaProtectionResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除Saas型WAF防护域名
    ///
    /// Saas型WAF删除防护域名
    @inlinable @discardableResult
    public func deleteSpartaProtection(_ input: DeleteSpartaProtectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteSpartaProtectionResponse> {
        self.client.execute(action: "DeleteSpartaProtection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除Saas型WAF防护域名
    ///
    /// Saas型WAF删除防护域名
    @inlinable @discardableResult
    public func deleteSpartaProtection(_ input: DeleteSpartaProtectionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteSpartaProtectionResponse {
        try await self.client.execute(action: "DeleteSpartaProtection", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除Saas型WAF防护域名
    ///
    /// Saas型WAF删除防护域名
    @inlinable @discardableResult
    public func deleteSpartaProtection(domains: [String], edition: String? = nil, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteSpartaProtectionResponse> {
        self.deleteSpartaProtection(.init(domains: domains, edition: edition, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }

    /// 删除Saas型WAF防护域名
    ///
    /// Saas型WAF删除防护域名
    @inlinable @discardableResult
    public func deleteSpartaProtection(domains: [String], edition: String? = nil, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteSpartaProtectionResponse {
        try await self.deleteSpartaProtection(.init(domains: domains, edition: edition, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }
}
