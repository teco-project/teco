//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyCustomWhiteRule请求参数结构体
    public struct ModifyCustomWhiteRuleRequest: TCRequestModel {
        /// 编辑的域名
        public let domain: String

        /// 编辑的规则ID
        public let ruleId: UInt64

        /// 编辑的规则名称
        public let ruleName: String

        /// 放行时是否继续执行其它检查逻辑，继续执行地域封禁防护：geoip、继续执行CC策略防护：cc、继续执行WEB应用防护：owasp、继续执行AI引擎防护：ai、继续执行信息防泄漏防护：antileakage。如果多个勾选那么以,串接。
        public let bypass: String

        /// 优先级，1~100的整数，数字越小，代表这条规则的执行优先级越高。
        public let sortId: UInt64

        /// 规则生效截止时间，0：永久生效，其它值为对应时间的时间戳。
        public let expireTime: UInt64

        /// 匹配条件数组
        public let strategies: [Strategy]

        public init(domain: String, ruleId: UInt64, ruleName: String, bypass: String, sortId: UInt64, expireTime: UInt64, strategies: [Strategy]) {
            self.domain = domain
            self.ruleId = ruleId
            self.ruleName = ruleName
            self.bypass = bypass
            self.sortId = sortId
            self.expireTime = expireTime
            self.strategies = strategies
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case ruleId = "RuleId"
            case ruleName = "RuleName"
            case bypass = "Bypass"
            case sortId = "SortId"
            case expireTime = "ExpireTime"
            case strategies = "Strategies"
        }
    }

    /// ModifyCustomWhiteRule返回参数结构体
    public struct ModifyCustomWhiteRuleResponse: TCResponseModel {
        /// 操作的状态码，如果所有的资源操作成功则返回的是成功的状态码，如果有资源操作失败则需要解析Message的内容来查看哪个资源失败
        public let success: ResponseCode

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case success = "Success"
            case requestId = "RequestId"
        }
    }

    /// 编辑精准白名单
    @inlinable
    public func modifyCustomWhiteRule(_ input: ModifyCustomWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCustomWhiteRuleResponse> {
        self.client.execute(action: "ModifyCustomWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑精准白名单
    @inlinable
    public func modifyCustomWhiteRule(_ input: ModifyCustomWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCustomWhiteRuleResponse {
        try await self.client.execute(action: "ModifyCustomWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑精准白名单
    @inlinable
    public func modifyCustomWhiteRule(domain: String, ruleId: UInt64, ruleName: String, bypass: String, sortId: UInt64, expireTime: UInt64, strategies: [Strategy], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCustomWhiteRuleResponse> {
        self.modifyCustomWhiteRule(.init(domain: domain, ruleId: ruleId, ruleName: ruleName, bypass: bypass, sortId: sortId, expireTime: expireTime, strategies: strategies), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑精准白名单
    @inlinable
    public func modifyCustomWhiteRule(domain: String, ruleId: UInt64, ruleName: String, bypass: String, sortId: UInt64, expireTime: UInt64, strategies: [Strategy], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCustomWhiteRuleResponse {
        try await self.modifyCustomWhiteRule(.init(domain: domain, ruleId: ruleId, ruleName: ruleName, bypass: bypass, sortId: sortId, expireTime: expireTime, strategies: strategies), region: region, logger: logger, on: eventLoop)
    }
}
