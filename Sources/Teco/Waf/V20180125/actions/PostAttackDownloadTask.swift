//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Waf {
    /// PostAttackDownloadTask请求参数结构体
    public struct PostAttackDownloadTaskRequest: TCRequest {
        /// 查询的域名，所有域名使用all
        public let domain: String

        /// 查询起始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$startTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 查询结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$endTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// Lucene语法
        public let queryString: String

        /// 任务名称
        public let taskName: String

        /// 默认为desc，可以取值desc和asc
        public let sort: String?

        /// 下载的日志条数
        public let count: Int64?

        public init(domain: String, startTime: Date, endTime: Date, queryString: String, taskName: String, sort: String? = nil, count: Int64? = nil) {
            self.domain = domain
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.queryString = queryString
            self.taskName = taskName
            self.sort = sort
            self.count = count
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case queryString = "QueryString"
            case taskName = "TaskName"
            case sort = "Sort"
            case count = "Count"
        }
    }

    /// PostAttackDownloadTask返回参数结构体
    public struct PostAttackDownloadTaskResponse: TCResponse {
        /// 任务task id
        public let flow: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flow = "Flow"
            case requestId = "RequestId"
        }
    }

    /// 创建搜索下载攻击日志任务
    ///
    /// 创建搜索下载攻击日志任务，使用CLS新版本的搜索下载getlog接口
    @inlinable
    public func postAttackDownloadTask(_ input: PostAttackDownloadTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<PostAttackDownloadTaskResponse> {
        self.client.execute(action: "PostAttackDownloadTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建搜索下载攻击日志任务
    ///
    /// 创建搜索下载攻击日志任务，使用CLS新版本的搜索下载getlog接口
    @inlinable
    public func postAttackDownloadTask(_ input: PostAttackDownloadTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PostAttackDownloadTaskResponse {
        try await self.client.execute(action: "PostAttackDownloadTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建搜索下载攻击日志任务
    ///
    /// 创建搜索下载攻击日志任务，使用CLS新版本的搜索下载getlog接口
    @inlinable
    public func postAttackDownloadTask(domain: String, startTime: Date, endTime: Date, queryString: String, taskName: String, sort: String? = nil, count: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<PostAttackDownloadTaskResponse> {
        self.postAttackDownloadTask(.init(domain: domain, startTime: startTime, endTime: endTime, queryString: queryString, taskName: taskName, sort: sort, count: count), region: region, logger: logger, on: eventLoop)
    }

    /// 创建搜索下载攻击日志任务
    ///
    /// 创建搜索下载攻击日志任务，使用CLS新版本的搜索下载getlog接口
    @inlinable
    public func postAttackDownloadTask(domain: String, startTime: Date, endTime: Date, queryString: String, taskName: String, sort: String? = nil, count: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> PostAttackDownloadTaskResponse {
        try await self.postAttackDownloadTask(.init(domain: domain, startTime: startTime, endTime: endTime, queryString: queryString, taskName: taskName, sort: sort, count: count), region: region, logger: logger, on: eventLoop)
    }
}
