//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// UpsertSession请求参数结构体
    public struct UpsertSessionRequest: TCRequest {
        /// 域名
        public let domain: String

        /// session来源位置
        public let source: String

        /// 提取类别
        public let category: String

        /// 提取key或者起始匹配模式
        public let keyOrStartMat: String

        /// 结束匹配模式
        public let endMat: String

        /// 起始偏移位置
        public let startOffset: String

        /// 结束偏移位置
        public let endOffset: String

        /// 版本
        public let edition: String?

        /// Session名
        public let sessionName: String?

        /// Session对应ID
        public let sessionID: Int64?

        public init(domain: String, source: String, category: String, keyOrStartMat: String, endMat: String, startOffset: String, endOffset: String, edition: String? = nil, sessionName: String? = nil, sessionID: Int64? = nil) {
            self.domain = domain
            self.source = source
            self.category = category
            self.keyOrStartMat = keyOrStartMat
            self.endMat = endMat
            self.startOffset = startOffset
            self.endOffset = endOffset
            self.edition = edition
            self.sessionName = sessionName
            self.sessionID = sessionID
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case source = "Source"
            case category = "Category"
            case keyOrStartMat = "KeyOrStartMat"
            case endMat = "EndMat"
            case startOffset = "StartOffset"
            case endOffset = "EndOffset"
            case edition = "Edition"
            case sessionName = "SessionName"
            case sessionID = "SessionID"
        }
    }

    /// UpsertSession返回参数结构体
    public struct UpsertSessionResponse: TCResponse {
        /// 结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// Waf  会话定义 Upsert接口
    @inlinable
    public func upsertSession(_ input: UpsertSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpsertSessionResponse> {
        self.client.execute(action: "UpsertSession", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Waf  会话定义 Upsert接口
    @inlinable
    public func upsertSession(_ input: UpsertSessionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpsertSessionResponse {
        try await self.client.execute(action: "UpsertSession", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// Waf  会话定义 Upsert接口
    @inlinable
    public func upsertSession(domain: String, source: String, category: String, keyOrStartMat: String, endMat: String, startOffset: String, endOffset: String, edition: String? = nil, sessionName: String? = nil, sessionID: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpsertSessionResponse> {
        self.upsertSession(.init(domain: domain, source: source, category: category, keyOrStartMat: keyOrStartMat, endMat: endMat, startOffset: startOffset, endOffset: endOffset, edition: edition, sessionName: sessionName, sessionID: sessionID), region: region, logger: logger, on: eventLoop)
    }

    /// Waf  会话定义 Upsert接口
    @inlinable
    public func upsertSession(domain: String, source: String, category: String, keyOrStartMat: String, endMat: String, startOffset: String, endOffset: String, edition: String? = nil, sessionName: String? = nil, sessionID: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpsertSessionResponse {
        try await self.upsertSession(.init(domain: domain, source: source, category: category, keyOrStartMat: keyOrStartMat, endMat: endMat, startOffset: startOffset, endOffset: endOffset, edition: edition, sessionName: sessionName, sessionID: sessionID), region: region, logger: logger, on: eventLoop)
    }
}
