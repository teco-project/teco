//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeCustomRuleList请求参数结构体
    public struct DescribeCustomRuleListRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 偏移
        public let offset: UInt64

        /// 容量
        public let limit: UInt64

        /// 过滤数组,name可以是如下的值： RuleID,RuleName,Match
        public let filters: [FiltersItemNew]?

        /// asc或者desc
        public let order: String?

        /// exp_ts或者mod_ts
        public let by: String?

        public init(domain: String, offset: UInt64, limit: UInt64, filters: [FiltersItemNew]? = nil, order: String? = nil, by: String? = nil) {
            self.domain = domain
            self.offset = offset
            self.limit = limit
            self.filters = filters
            self.order = order
            self.by = by
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case offset = "Offset"
            case limit = "Limit"
            case filters = "Filters"
            case order = "Order"
            case by = "By"
        }
    }

    /// DescribeCustomRuleList返回参数结构体
    public struct DescribeCustomRuleListResponse: TCResponse {
        /// 规则详情
        public let ruleList: [DescribeCustomRulesRspRuleListItem]

        /// 规则条数
        public let totalCount: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ruleList = "RuleList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询访问控制规则
    ///
    /// 获取防护配置中的访问控制策略列表
    @inlinable
    public func describeCustomRuleList(_ input: DescribeCustomRuleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomRuleListResponse> {
        self.client.execute(action: "DescribeCustomRuleList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询访问控制规则
    ///
    /// 获取防护配置中的访问控制策略列表
    @inlinable
    public func describeCustomRuleList(_ input: DescribeCustomRuleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomRuleListResponse {
        try await self.client.execute(action: "DescribeCustomRuleList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询访问控制规则
    ///
    /// 获取防护配置中的访问控制策略列表
    @inlinable
    public func describeCustomRuleList(domain: String, offset: UInt64, limit: UInt64, filters: [FiltersItemNew]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomRuleListResponse> {
        self.describeCustomRuleList(.init(domain: domain, offset: offset, limit: limit, filters: filters, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }

    /// 查询访问控制规则
    ///
    /// 获取防护配置中的访问控制策略列表
    @inlinable
    public func describeCustomRuleList(domain: String, offset: UInt64, limit: UInt64, filters: [FiltersItemNew]? = nil, order: String? = nil, by: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomRuleListResponse {
        try await self.describeCustomRuleList(.init(domain: domain, offset: offset, limit: limit, filters: filters, order: order, by: by), region: region, logger: logger, on: eventLoop)
    }
}
