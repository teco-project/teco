//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyInstanceName请求参数结构体
    public struct ModifyInstanceNameRequest: TCRequest {
        /// 新名称
        public let instanceName: String

        /// 实例id
        public let instanceID: String

        /// 版本
        public let edition: String

        public init(instanceName: String, instanceID: String, edition: String) {
            self.instanceName = instanceName
            self.instanceID = instanceID
            self.edition = edition
        }

        enum CodingKeys: String, CodingKey {
            case instanceName = "InstanceName"
            case instanceID = "InstanceID"
            case edition = "Edition"
        }
    }

    /// ModifyInstanceName返回参数结构体
    public struct ModifyInstanceNameResponse: TCResponse {
        /// 修改状态：0为成功
        public let modifyCode: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case modifyCode = "ModifyCode"
            case requestId = "RequestId"
        }
    }

    /// 修改实例名称
    ///
    /// 修改实例的名称
    @inlinable
    public func modifyInstanceName(_ input: ModifyInstanceNameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceNameResponse> {
        self.client.execute(action: "ModifyInstanceName", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例名称
    ///
    /// 修改实例的名称
    @inlinable
    public func modifyInstanceName(_ input: ModifyInstanceNameRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceNameResponse {
        try await self.client.execute(action: "ModifyInstanceName", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例名称
    ///
    /// 修改实例的名称
    @inlinable
    public func modifyInstanceName(instanceName: String, instanceID: String, edition: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceNameResponse> {
        self.modifyInstanceName(.init(instanceName: instanceName, instanceID: instanceID, edition: edition), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实例名称
    ///
    /// 修改实例的名称
    @inlinable
    public func modifyInstanceName(instanceName: String, instanceID: String, edition: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceNameResponse {
        try await self.modifyInstanceName(.init(instanceName: instanceName, instanceID: instanceID, edition: edition), region: region, logger: logger, on: eventLoop)
    }
}
