//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyInstanceRenewFlag请求参数结构体
    public struct ModifyInstanceRenewFlagRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 续费开关
        public let renewFlag: Int64

        public init(instanceId: String, renewFlag: Int64) {
            self.instanceId = instanceId
            self.renewFlag = renewFlag
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case renewFlag = "RenewFlag"
        }
    }

    /// ModifyInstanceRenewFlag返回参数结构体
    public struct ModifyInstanceRenewFlagResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改实例的自动续费开关
    @inlinable @discardableResult
    public func modifyInstanceRenewFlag(_ input: ModifyInstanceRenewFlagRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceRenewFlagResponse> {
        self.client.execute(action: "ModifyInstanceRenewFlag", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例的自动续费开关
    @inlinable @discardableResult
    public func modifyInstanceRenewFlag(_ input: ModifyInstanceRenewFlagRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceRenewFlagResponse {
        try await self.client.execute(action: "ModifyInstanceRenewFlag", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例的自动续费开关
    @inlinable @discardableResult
    public func modifyInstanceRenewFlag(instanceId: String, renewFlag: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceRenewFlagResponse> {
        self.modifyInstanceRenewFlag(.init(instanceId: instanceId, renewFlag: renewFlag), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实例的自动续费开关
    @inlinable @discardableResult
    public func modifyInstanceRenewFlag(instanceId: String, renewFlag: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceRenewFlagResponse {
        try await self.modifyInstanceRenewFlag(.init(instanceId: instanceId, renewFlag: renewFlag), region: region, logger: logger, on: eventLoop)
    }
}
