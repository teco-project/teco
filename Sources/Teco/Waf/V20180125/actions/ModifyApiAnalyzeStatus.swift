//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyApiAnalyzeStatus请求参数结构体
    public struct ModifyApiAnalyzeStatusRequest: TCRequest {
        /// 开关状态
        public let status: UInt64

        /// 域名
        public let domain: String?

        /// 实例id
        public let instanceId: String?

        /// 需要批量开启的实体列表
        public let targetList: [TargetEntity]?

        public init(status: UInt64, domain: String? = nil, instanceId: String? = nil, targetList: [TargetEntity]? = nil) {
            self.status = status
            self.domain = domain
            self.instanceId = instanceId
            self.targetList = targetList
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case domain = "Domain"
            case instanceId = "InstanceId"
            case targetList = "TargetList"
        }
    }

    /// ModifyApiAnalyzeStatus返回参数结构体
    public struct ModifyApiAnalyzeStatusResponse: TCResponse {
        /// 已经开启的数量,如果返回值为3（大于支持的域名开启数量），则表示开启失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: Int64?

        /// 不支持开启的域名列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unSupportedList: [String]?

        /// 开启/关闭失败的域名列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failDomainList: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case count = "Count"
            case unSupportedList = "UnSupportedList"
            case failDomainList = "FailDomainList"
            case requestId = "RequestId"
        }
    }

    /// api分析页面开关
    @inlinable
    public func modifyApiAnalyzeStatus(_ input: ModifyApiAnalyzeStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyApiAnalyzeStatusResponse> {
        self.client.execute(action: "ModifyApiAnalyzeStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// api分析页面开关
    @inlinable
    public func modifyApiAnalyzeStatus(_ input: ModifyApiAnalyzeStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyApiAnalyzeStatusResponse {
        try await self.client.execute(action: "ModifyApiAnalyzeStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// api分析页面开关
    @inlinable
    public func modifyApiAnalyzeStatus(status: UInt64, domain: String? = nil, instanceId: String? = nil, targetList: [TargetEntity]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyApiAnalyzeStatusResponse> {
        self.modifyApiAnalyzeStatus(.init(status: status, domain: domain, instanceId: instanceId, targetList: targetList), region: region, logger: logger, on: eventLoop)
    }

    /// api分析页面开关
    @inlinable
    public func modifyApiAnalyzeStatus(status: UInt64, domain: String? = nil, instanceId: String? = nil, targetList: [TargetEntity]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyApiAnalyzeStatusResponse {
        try await self.modifyApiAnalyzeStatus(.init(status: status, domain: domain, instanceId: instanceId, targetList: targetList), region: region, logger: logger, on: eventLoop)
    }
}
