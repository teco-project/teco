//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyAntiFakeUrl请求参数结构体
    public struct ModifyAntiFakeUrlRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 名称
        public let name: String

        /// uri
        public let uri: String

        /// ID
        public let id: Int64

        public init(domain: String, name: String, uri: String, id: Int64) {
            self.domain = domain
            self.name = name
            self.uri = uri
            self.id = id
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case name = "Name"
            case uri = "Uri"
            case id = "Id"
        }
    }

    /// ModifyAntiFakeUrl返回参数结构体
    public struct ModifyAntiFakeUrlResponse: TCResponse {
        /// 结果
        public let result: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 编辑防篡改url
    @inlinable
    public func modifyAntiFakeUrl(_ input: ModifyAntiFakeUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAntiFakeUrlResponse> {
        self.client.execute(action: "ModifyAntiFakeUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑防篡改url
    @inlinable
    public func modifyAntiFakeUrl(_ input: ModifyAntiFakeUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAntiFakeUrlResponse {
        try await self.client.execute(action: "ModifyAntiFakeUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑防篡改url
    @inlinable
    public func modifyAntiFakeUrl(domain: String, name: String, uri: String, id: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAntiFakeUrlResponse> {
        self.modifyAntiFakeUrl(.init(domain: domain, name: name, uri: uri, id: id), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑防篡改url
    @inlinable
    public func modifyAntiFakeUrl(domain: String, name: String, uri: String, id: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAntiFakeUrlResponse {
        try await self.modifyAntiFakeUrl(.init(domain: domain, name: name, uri: uri, id: id), region: region, logger: logger, on: eventLoop)
    }
}
