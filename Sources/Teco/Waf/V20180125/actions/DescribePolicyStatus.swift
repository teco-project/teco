//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribePolicyStatus请求参数结构体
    public struct DescribePolicyStatusRequest: TCRequest {
        /// 域名
        public let domain: String

        /// clb-waf或者saas-waf
        public let edition: String

        public init(domain: String, edition: String) {
            self.domain = domain
            self.edition = edition
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case edition = "Edition"
        }
    }

    /// DescribePolicyStatus返回参数结构体
    public struct DescribePolicyStatusResponse: TCResponse {
        /// 实例ID
        public let instanceId: String

        /// 防护状态
        public let status: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 获取防护状态以及生效的实例id
    @inlinable
    public func describePolicyStatus(_ input: DescribePolicyStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePolicyStatusResponse> {
        self.client.execute(action: "DescribePolicyStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取防护状态以及生效的实例id
    @inlinable
    public func describePolicyStatus(_ input: DescribePolicyStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePolicyStatusResponse {
        try await self.client.execute(action: "DescribePolicyStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取防护状态以及生效的实例id
    @inlinable
    public func describePolicyStatus(domain: String, edition: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePolicyStatusResponse> {
        self.describePolicyStatus(.init(domain: domain, edition: edition), region: region, logger: logger, on: eventLoop)
    }

    /// 获取防护状态以及生效的实例id
    @inlinable
    public func describePolicyStatus(domain: String, edition: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePolicyStatusResponse {
        try await self.describePolicyStatus(.init(domain: domain, edition: edition), region: region, logger: logger, on: eventLoop)
    }
}
