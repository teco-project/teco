//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyProtectionStatus请求参数结构体
    public struct ModifyProtectionStatusRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 状态
        public let status: UInt64

        /// WAF的版本，clb-waf代表负载均衡WAF、sparta-waf代表SaaS WAF，默认是sparta-waf。
        public let edition: String?

        public init(domain: String, status: UInt64, edition: String? = nil) {
            self.domain = domain
            self.status = status
            self.edition = edition
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case status = "Status"
            case edition = "Edition"
        }
    }

    /// ModifyProtectionStatus返回参数结构体
    public struct ModifyProtectionStatusResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// waf斯巴达-waf开关
    @inlinable @discardableResult
    public func modifyProtectionStatus(_ input: ModifyProtectionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProtectionStatusResponse> {
        self.client.execute(action: "ModifyProtectionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// waf斯巴达-waf开关
    @inlinable @discardableResult
    public func modifyProtectionStatus(_ input: ModifyProtectionStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProtectionStatusResponse {
        try await self.client.execute(action: "ModifyProtectionStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// waf斯巴达-waf开关
    @inlinable @discardableResult
    public func modifyProtectionStatus(domain: String, status: UInt64, edition: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProtectionStatusResponse> {
        self.modifyProtectionStatus(.init(domain: domain, status: status, edition: edition), region: region, logger: logger, on: eventLoop)
    }

    /// waf斯巴达-waf开关
    @inlinable @discardableResult
    public func modifyProtectionStatus(domain: String, status: UInt64, edition: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProtectionStatusResponse {
        try await self.modifyProtectionStatus(.init(domain: domain, status: status, edition: edition), region: region, logger: logger, on: eventLoop)
    }
}
