//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// AddDomainWhiteRule请求参数结构体
    public struct AddDomainWhiteRuleRequest: TCRequestModel {
        /// 需要添加的域名
        public let domain: String?

        /// 需要添加的规则
        public let rules: [UInt64]?

        /// 需要添加的规则url
        public let url: String?

        /// 规则的方法
        public let function: String?

        /// 规则的开关，0表示规则关闭，1表示规则打开
        public let status: UInt64?

        public init(domain: String? = nil, rules: [UInt64]? = nil, url: String? = nil, function: String? = nil, status: UInt64? = nil) {
            self.domain = domain
            self.rules = rules
            self.url = url
            self.function = function
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case rules = "Rules"
            case url = "Url"
            case function = "Function"
            case status = "Status"
        }
    }

    /// AddDomainWhiteRule返回参数结构体
    public struct AddDomainWhiteRuleResponse: TCResponseModel {
        /// 规则id
        public let id: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case requestId = "RequestId"
        }
    }

    /// 增加域名规则白名单
    @inlinable
    public func addDomainWhiteRule(_ input: AddDomainWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddDomainWhiteRuleResponse> {
        self.client.execute(action: "AddDomainWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 增加域名规则白名单
    @inlinable
    public func addDomainWhiteRule(_ input: AddDomainWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddDomainWhiteRuleResponse {
        try await self.client.execute(action: "AddDomainWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 增加域名规则白名单
    @inlinable
    public func addDomainWhiteRule(domain: String? = nil, rules: [UInt64]? = nil, url: String? = nil, function: String? = nil, status: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddDomainWhiteRuleResponse> {
        self.addDomainWhiteRule(.init(domain: domain, rules: rules, url: url, function: function, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 增加域名规则白名单
    @inlinable
    public func addDomainWhiteRule(domain: String? = nil, rules: [UInt64]? = nil, url: String? = nil, function: String? = nil, status: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddDomainWhiteRuleResponse {
        try await self.addDomainWhiteRule(.init(domain: domain, rules: rules, url: url, function: function, status: status), region: region, logger: logger, on: eventLoop)
    }
}
