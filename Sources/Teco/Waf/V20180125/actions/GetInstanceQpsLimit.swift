//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// GetInstanceQpsLimit请求参数结构体
    public struct GetInstanceQpsLimitRequest: TCRequest {
        /// 套餐实例id
        public let instanceId: String

        /// 套餐类型
        public let type: String?

        public init(instanceId: String, type: String? = nil) {
            self.instanceId = instanceId
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case type = "Type"
        }
    }

    /// GetInstanceQpsLimit返回参数结构体
    public struct GetInstanceQpsLimitResponse: TCResponse {
        /// 弹性qps相关值集合
        public let qpsData: QpsData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case qpsData = "QpsData"
            case requestId = "RequestId"
        }
    }

    /// 获取套餐实例的弹性qps上限
    @inlinable
    public func getInstanceQpsLimit(_ input: GetInstanceQpsLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetInstanceQpsLimitResponse> {
        self.client.execute(action: "GetInstanceQpsLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取套餐实例的弹性qps上限
    @inlinable
    public func getInstanceQpsLimit(_ input: GetInstanceQpsLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetInstanceQpsLimitResponse {
        try await self.client.execute(action: "GetInstanceQpsLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取套餐实例的弹性qps上限
    @inlinable
    public func getInstanceQpsLimit(instanceId: String, type: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetInstanceQpsLimitResponse> {
        self.getInstanceQpsLimit(.init(instanceId: instanceId, type: type), region: region, logger: logger, on: eventLoop)
    }

    /// 获取套餐实例的弹性qps上限
    @inlinable
    public func getInstanceQpsLimit(instanceId: String, type: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetInstanceQpsLimitResponse {
        try await self.getInstanceQpsLimit(.init(instanceId: instanceId, type: type), region: region, logger: logger, on: eventLoop)
    }
}
