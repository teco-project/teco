//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeAccessExports请求参数结构体
    public struct DescribeAccessExportsRequest: TCPaginatedRequest {
        /// 客户要查询的日志主题ID，每个客户都有对应的一个主题
        public let topicId: String

        /// 分页的偏移量，默认值为0
        public let offset: Int64?

        /// 分页单页限制数目，默认值为20，最大值100
        public let limit: Int64?

        public init(topicId: String, offset: Int64? = nil, limit: Int64? = nil) {
            self.topicId = topicId
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeAccessExportsResponse) -> DescribeAccessExportsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(topicId: self.topicId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeAccessExports返回参数结构体
    public struct DescribeAccessExportsResponse: TCPaginatedResponse {
        /// 日志导出ID。
        public let totalCount: Int64

        /// 日志导出列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exports: [ExportAccessInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case exports = "Exports"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ExportAccessInfo`` list from the paginated response.
        public func getItems() -> [ExportAccessInfo] {
            self.exports ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取访问日志导出列表
    ///
    /// 本接口用于获取访问日志导出列表
    @inlinable
    public func describeAccessExports(_ input: DescribeAccessExportsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessExportsResponse> {
        self.client.execute(action: "DescribeAccessExports", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取访问日志导出列表
    ///
    /// 本接口用于获取访问日志导出列表
    @inlinable
    public func describeAccessExports(_ input: DescribeAccessExportsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessExportsResponse {
        try await self.client.execute(action: "DescribeAccessExports", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取访问日志导出列表
    ///
    /// 本接口用于获取访问日志导出列表
    @inlinable
    public func describeAccessExports(topicId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessExportsResponse> {
        self.describeAccessExports(.init(topicId: topicId, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取访问日志导出列表
    ///
    /// 本接口用于获取访问日志导出列表
    @inlinable
    public func describeAccessExports(topicId: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessExportsResponse {
        try await self.describeAccessExports(.init(topicId: topicId, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取访问日志导出列表
    ///
    /// 本接口用于获取访问日志导出列表
    @inlinable
    public func describeAccessExportsPaginated(_ input: DescribeAccessExportsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [ExportAccessInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeAccessExports, logger: logger, on: eventLoop)
    }

    /// 获取访问日志导出列表
    ///
    /// 本接口用于获取访问日志导出列表
    @inlinable @discardableResult
    public func describeAccessExportsPaginated(_ input: DescribeAccessExportsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeAccessExportsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeAccessExports, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取访问日志导出列表
    ///
    /// 本接口用于获取访问日志导出列表
    ///
    /// - Returns: `AsyncSequence`s of ``ExportAccessInfo`` and ``DescribeAccessExportsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeAccessExportsPaginator(_ input: DescribeAccessExportsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeAccessExportsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeAccessExports, logger: logger, on: eventLoop)
    }
}
