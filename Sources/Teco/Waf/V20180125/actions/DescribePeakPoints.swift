//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Waf {
    /// DescribePeakPoints请求参数结构体
    public struct DescribePeakPointsRequest: TCRequest {
        /// 查询起始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var fromTime: Date

        /// 查询终止时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var toTime: Date

        /// 查询的域名，如果查询所有域名数据，该参数不填写
        public let domain: String?

        /// 只有两个值有效，sparta-waf，clb-waf，不传则不过滤
        public let edition: String?

        /// WAF实例ID，不传则不过滤
        public let instanceID: String?

        /// 十一个值可选：
        /// access-峰值qps趋势图
        /// botAccess- bot峰值qps趋势图
        /// down-下行峰值带宽趋势图
        /// up-上行峰值带宽趋势图
        /// attack-Web攻击总数趋势图
        /// cc-CC攻击总数趋势图
        /// bw-黑IP攻击总数趋势图
        /// tamper-防篡改攻击总数趋势图
        /// leak-防泄露攻击总数趋势图
        /// acl-访问控制攻击总数趋势图
        /// http_status-状态码各次数趋势图
        public let metricName: String?

        public init(fromTime: Date, toTime: Date, domain: String? = nil, edition: String? = nil, instanceID: String? = nil, metricName: String? = nil) {
            self._fromTime = .init(wrappedValue: fromTime)
            self._toTime = .init(wrappedValue: toTime)
            self.domain = domain
            self.edition = edition
            self.instanceID = instanceID
            self.metricName = metricName
        }

        enum CodingKeys: String, CodingKey {
            case fromTime = "FromTime"
            case toTime = "ToTime"
            case domain = "Domain"
            case edition = "Edition"
            case instanceID = "InstanceID"
            case metricName = "MetricName"
        }
    }

    /// DescribePeakPoints返回参数结构体
    public struct DescribePeakPointsResponse: TCResponse {
        /// 数据点
        public let points: [PeakPointsItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case points = "Points"
            case requestId = "RequestId"
        }
    }

    /// 查询业务和攻击概要趋势
    @inlinable
    public func describePeakPoints(_ input: DescribePeakPointsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePeakPointsResponse> {
        self.client.execute(action: "DescribePeakPoints", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询业务和攻击概要趋势
    @inlinable
    public func describePeakPoints(_ input: DescribePeakPointsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePeakPointsResponse {
        try await self.client.execute(action: "DescribePeakPoints", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询业务和攻击概要趋势
    @inlinable
    public func describePeakPoints(fromTime: Date, toTime: Date, domain: String? = nil, edition: String? = nil, instanceID: String? = nil, metricName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePeakPointsResponse> {
        self.describePeakPoints(.init(fromTime: fromTime, toTime: toTime, domain: domain, edition: edition, instanceID: instanceID, metricName: metricName), region: region, logger: logger, on: eventLoop)
    }

    /// 查询业务和攻击概要趋势
    @inlinable
    public func describePeakPoints(fromTime: Date, toTime: Date, domain: String? = nil, edition: String? = nil, instanceID: String? = nil, metricName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePeakPointsResponse {
        try await self.describePeakPoints(.init(fromTime: fromTime, toTime: toTime, domain: domain, edition: edition, instanceID: instanceID, metricName: metricName), region: region, logger: logger, on: eventLoop)
    }
}
