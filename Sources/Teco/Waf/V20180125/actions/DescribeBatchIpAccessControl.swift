//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeBatchIpAccessControl请求参数结构体
    public struct DescribeBatchIpAccessControlRequest: TCRequest {
        /// 筛选条件，支持 ActionType 40/42，Ip：ip地址，Domain：域名三类
        public let filters: [FiltersItemNew]

        /// 偏移
        public let offSet: UInt64?

        /// 限制
        public let limit: UInt64?

        /// 排序参数
        public let sort: String?

        public init(filters: [FiltersItemNew], offSet: UInt64? = nil, limit: UInt64? = nil, sort: String? = nil) {
            self.filters = filters
            self.offSet = offSet
            self.limit = limit
            self.sort = sort
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case offSet = "OffSet"
            case limit = "Limit"
            case sort = "Sort"
        }
    }

    /// DescribeBatchIpAccessControl返回参数结构体
    public struct DescribeBatchIpAccessControlResponse: TCResponse {
        /// 输出
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: BatchIpAccessControlData?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// Waf 多域名ip黑白名单查询
    @inlinable
    public func describeBatchIpAccessControl(_ input: DescribeBatchIpAccessControlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBatchIpAccessControlResponse> {
        self.client.execute(action: "DescribeBatchIpAccessControl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Waf 多域名ip黑白名单查询
    @inlinable
    public func describeBatchIpAccessControl(_ input: DescribeBatchIpAccessControlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBatchIpAccessControlResponse {
        try await self.client.execute(action: "DescribeBatchIpAccessControl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// Waf 多域名ip黑白名单查询
    @inlinable
    public func describeBatchIpAccessControl(filters: [FiltersItemNew], offSet: UInt64? = nil, limit: UInt64? = nil, sort: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBatchIpAccessControlResponse> {
        self.describeBatchIpAccessControl(.init(filters: filters, offSet: offSet, limit: limit, sort: sort), region: region, logger: logger, on: eventLoop)
    }

    /// Waf 多域名ip黑白名单查询
    @inlinable
    public func describeBatchIpAccessControl(filters: [FiltersItemNew], offSet: UInt64? = nil, limit: UInt64? = nil, sort: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBatchIpAccessControlResponse {
        try await self.describeBatchIpAccessControl(.init(filters: filters, offSet: offSet, limit: limit, sort: sort), region: region, logger: logger, on: eventLoop)
    }
}
