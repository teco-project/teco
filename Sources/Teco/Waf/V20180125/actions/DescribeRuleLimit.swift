//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeRuleLimit请求参数结构体
    public struct DescribeRuleLimitRequest: TCRequest {
        /// 域名
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
        }
    }

    /// DescribeRuleLimit返回参数结构体
    public struct DescribeRuleLimitResponse: TCResponse {
        /// waf模块的规格
        public let res: WafRuleLimit

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case res = "Res"
            case requestId = "RequestId"
        }
    }

    /// 获取规格限制
    ///
    /// 获取各个模块具体的规格限制
    @inlinable
    public func describeRuleLimit(_ input: DescribeRuleLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleLimitResponse> {
        self.client.execute(action: "DescribeRuleLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取规格限制
    ///
    /// 获取各个模块具体的规格限制
    @inlinable
    public func describeRuleLimit(_ input: DescribeRuleLimitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleLimitResponse {
        try await self.client.execute(action: "DescribeRuleLimit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取规格限制
    ///
    /// 获取各个模块具体的规格限制
    @inlinable
    public func describeRuleLimit(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleLimitResponse> {
        self.describeRuleLimit(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }

    /// 获取规格限制
    ///
    /// 获取各个模块具体的规格限制
    @inlinable
    public func describeRuleLimit(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleLimitResponse {
        try await self.describeRuleLimit(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }
}
