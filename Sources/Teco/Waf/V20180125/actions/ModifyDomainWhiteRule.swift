//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyDomainWhiteRule请求参数结构体
    public struct ModifyDomainWhiteRuleRequest: TCRequestModel {
        /// 需要更改的规则的域名
        public let domain: String

        /// 白名单id
        public let id: UInt64

        /// 规则的id列表
        public let rules: [UInt64]

        /// 规则匹配路径
        public let url: String

        /// 规则匹配方法
        public let function: String

        /// 规则的开关状态
        public let status: UInt64

        public init(domain: String, id: UInt64, rules: [UInt64], url: String, function: String, status: UInt64) {
            self.domain = domain
            self.id = id
            self.rules = rules
            self.url = url
            self.function = function
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case id = "Id"
            case rules = "Rules"
            case url = "Url"
            case function = "Function"
            case status = "Status"
        }
    }

    /// ModifyDomainWhiteRule返回参数结构体
    public struct ModifyDomainWhiteRuleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更改某一条规则
    @inlinable @discardableResult
    public func modifyDomainWhiteRule(_ input: ModifyDomainWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDomainWhiteRuleResponse> {
        self.client.execute(action: "ModifyDomainWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更改某一条规则
    @inlinable @discardableResult
    public func modifyDomainWhiteRule(_ input: ModifyDomainWhiteRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDomainWhiteRuleResponse {
        try await self.client.execute(action: "ModifyDomainWhiteRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更改某一条规则
    @inlinable @discardableResult
    public func modifyDomainWhiteRule(domain: String, id: UInt64, rules: [UInt64], url: String, function: String, status: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDomainWhiteRuleResponse> {
        self.modifyDomainWhiteRule(.init(domain: domain, id: id, rules: rules, url: url, function: function, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 更改某一条规则
    @inlinable @discardableResult
    public func modifyDomainWhiteRule(domain: String, id: UInt64, rules: [UInt64], url: String, function: String, status: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDomainWhiteRuleResponse {
        try await self.modifyDomainWhiteRule(.init(domain: domain, id: id, rules: rules, url: url, function: function, status: status), region: region, logger: logger, on: eventLoop)
    }
}
