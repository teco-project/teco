//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DeleteCCRule请求参数结构体
    public struct DeleteCCRuleRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 规则名称
        public let name: String

        /// clb-waf或者sparta-waf
        public let edition: String?

        /// 规则Id
        public let ruleId: Int64?

        public init(domain: String, name: String, edition: String? = nil, ruleId: Int64? = nil) {
            self.domain = domain
            self.name = name
            self.edition = edition
            self.ruleId = ruleId
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case name = "Name"
            case edition = "Edition"
            case ruleId = "RuleId"
        }
    }

    /// DeleteCCRule返回参数结构体
    public struct DeleteCCRuleResponse: TCResponse {
        /// 一般为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: String?

        /// 操作的规则Id
        public let ruleId: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case ruleId = "RuleId"
            case requestId = "RequestId"
        }
    }

    /// Waf  CC V2 Delete接口
    @inlinable
    public func deleteCCRule(_ input: DeleteCCRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCCRuleResponse> {
        self.client.execute(action: "DeleteCCRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Waf  CC V2 Delete接口
    @inlinable
    public func deleteCCRule(_ input: DeleteCCRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCCRuleResponse {
        try await self.client.execute(action: "DeleteCCRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// Waf  CC V2 Delete接口
    @inlinable
    public func deleteCCRule(domain: String, name: String, edition: String? = nil, ruleId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCCRuleResponse> {
        self.deleteCCRule(.init(domain: domain, name: name, edition: edition, ruleId: ruleId), region: region, logger: logger, on: eventLoop)
    }

    /// Waf  CC V2 Delete接口
    @inlinable
    public func deleteCCRule(domain: String, name: String, edition: String? = nil, ruleId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCCRuleResponse {
        try await self.deleteCCRule(.init(domain: domain, name: name, edition: edition, ruleId: ruleId), region: region, logger: logger, on: eventLoop)
    }
}
