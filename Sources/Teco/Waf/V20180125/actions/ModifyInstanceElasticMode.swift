//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyInstanceElasticMode请求参数结构体
    public struct ModifyInstanceElasticModeRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 弹性计费开关
        public let mode: Int64

        public init(instanceId: String, mode: Int64) {
            self.instanceId = instanceId
            self.mode = mode
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case mode = "Mode"
        }
    }

    /// ModifyInstanceElasticMode返回参数结构体
    public struct ModifyInstanceElasticModeResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改实例的QPS弹性计费开关
    @inlinable @discardableResult
    public func modifyInstanceElasticMode(_ input: ModifyInstanceElasticModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceElasticModeResponse> {
        self.client.execute(action: "ModifyInstanceElasticMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例的QPS弹性计费开关
    @inlinable @discardableResult
    public func modifyInstanceElasticMode(_ input: ModifyInstanceElasticModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceElasticModeResponse {
        try await self.client.execute(action: "ModifyInstanceElasticMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例的QPS弹性计费开关
    @inlinable @discardableResult
    public func modifyInstanceElasticMode(instanceId: String, mode: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceElasticModeResponse> {
        self.modifyInstanceElasticMode(.init(instanceId: instanceId, mode: mode), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实例的QPS弹性计费开关
    @inlinable @discardableResult
    public func modifyInstanceElasticMode(instanceId: String, mode: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceElasticModeResponse {
        try await self.modifyInstanceElasticMode(.init(instanceId: instanceId, mode: mode), region: region, logger: logger, on: eventLoop)
    }
}
