//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeHosts请求参数结构体
    public struct DescribeHostsRequest: TCRequest {
        /// 防护域名，如果是要查询某一具体的防护域名则传入此参数，要求是准确的域名，此参数不支持模糊搜索
        public let domain: String?

        /// 防护域名ID，如果是要查询某一具体的防护域名则传入此参数，要求是准确的域名ID，此参数不支持模糊搜索
        public let domainId: String?

        /// 搜索条件，根据此参数对域名做模糊搜索
        public let search: String?

        /// 复杂的搜索条件
        public let item: SearchItem?

        /// 实例id
        public let instanceID: String?

        public init(domain: String? = nil, domainId: String? = nil, search: String? = nil, item: SearchItem? = nil, instanceID: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.search = search
            self.item = item
            self.instanceID = instanceID
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case search = "Search"
            case item = "Item"
            case instanceID = "InstanceID"
        }
    }

    /// DescribeHosts返回参数结构体
    public struct DescribeHostsResponse: TCResponse {
        /// 防护域名列表的长度
        public let totalCount: UInt64

        /// 防护域名的列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hostList: [HostRecord]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case hostList = "HostList"
            case requestId = "RequestId"
        }
    }

    /// 获取防护域名列表
    ///
    /// clb-waf中获取防护域名列表
    @inlinable
    public func describeHosts(_ input: DescribeHostsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostsResponse> {
        self.client.execute(action: "DescribeHosts", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取防护域名列表
    ///
    /// clb-waf中获取防护域名列表
    @inlinable
    public func describeHosts(_ input: DescribeHostsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostsResponse {
        try await self.client.execute(action: "DescribeHosts", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取防护域名列表
    ///
    /// clb-waf中获取防护域名列表
    @inlinable
    public func describeHosts(domain: String? = nil, domainId: String? = nil, search: String? = nil, item: SearchItem? = nil, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostsResponse> {
        self.describeHosts(.init(domain: domain, domainId: domainId, search: search, item: item, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }

    /// 获取防护域名列表
    ///
    /// clb-waf中获取防护域名列表
    @inlinable
    public func describeHosts(domain: String? = nil, domainId: String? = nil, search: String? = nil, item: SearchItem? = nil, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostsResponse {
        try await self.describeHosts(.init(domain: domain, domainId: domainId, search: search, item: item, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }
}
