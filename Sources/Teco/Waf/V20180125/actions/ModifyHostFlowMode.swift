//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyHostFlowMode请求参数结构体
    public struct ModifyHostFlowModeRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 域名ID
        public let domainId: String

        /// WAF流量模式，1：清洗模式，0：镜像模式（默认）
        public let flowMode: UInt64

        /// 实例ID
        public let instanceID: String?

        public init(domain: String, domainId: String, flowMode: UInt64, instanceID: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.flowMode = flowMode
            self.instanceID = instanceID
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case flowMode = "FlowMode"
            case instanceID = "InstanceID"
        }
    }

    /// ModifyHostFlowMode返回参数结构体
    public struct ModifyHostFlowModeResponse: TCResponse {
        /// 成功的状态码
        public let success: ResponseCode

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case success = "Success"
            case requestId = "RequestId"
        }
    }

    /// 设置防护域名的流量模式
    ///
    /// clb-waf 设置防护域名的流量模式
    @inlinable
    public func modifyHostFlowMode(_ input: ModifyHostFlowModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyHostFlowModeResponse> {
        self.client.execute(action: "ModifyHostFlowMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置防护域名的流量模式
    ///
    /// clb-waf 设置防护域名的流量模式
    @inlinable
    public func modifyHostFlowMode(_ input: ModifyHostFlowModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyHostFlowModeResponse {
        try await self.client.execute(action: "ModifyHostFlowMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置防护域名的流量模式
    ///
    /// clb-waf 设置防护域名的流量模式
    @inlinable
    public func modifyHostFlowMode(domain: String, domainId: String, flowMode: UInt64, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyHostFlowModeResponse> {
        self.modifyHostFlowMode(.init(domain: domain, domainId: domainId, flowMode: flowMode, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }

    /// 设置防护域名的流量模式
    ///
    /// clb-waf 设置防护域名的流量模式
    @inlinable
    public func modifyHostFlowMode(domain: String, domainId: String, flowMode: UInt64, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyHostFlowModeResponse {
        try await self.modifyHostFlowMode(.init(domain: domain, domainId: domainId, flowMode: flowMode, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }
}
