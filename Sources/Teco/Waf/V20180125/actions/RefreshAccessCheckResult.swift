//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// RefreshAccessCheckResult请求参数结构体
    public struct RefreshAccessCheckResultRequest: TCRequest {
        /// 域名
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
        }
    }

    /// RefreshAccessCheckResult返回参数结构体
    public struct RefreshAccessCheckResultResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 刷新接入检查的结果
    ///
    /// 刷新接入检查的结果，后台会生成接入检查任务
    @inlinable @discardableResult
    public func refreshAccessCheckResult(_ input: RefreshAccessCheckResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RefreshAccessCheckResultResponse> {
        self.client.execute(action: "RefreshAccessCheckResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 刷新接入检查的结果
    ///
    /// 刷新接入检查的结果，后台会生成接入检查任务
    @inlinable @discardableResult
    public func refreshAccessCheckResult(_ input: RefreshAccessCheckResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RefreshAccessCheckResultResponse {
        try await self.client.execute(action: "RefreshAccessCheckResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 刷新接入检查的结果
    ///
    /// 刷新接入检查的结果，后台会生成接入检查任务
    @inlinable @discardableResult
    public func refreshAccessCheckResult(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RefreshAccessCheckResultResponse> {
        self.refreshAccessCheckResult(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }

    /// 刷新接入检查的结果
    ///
    /// 刷新接入检查的结果，后台会生成接入检查任务
    @inlinable @discardableResult
    public func refreshAccessCheckResult(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RefreshAccessCheckResultResponse {
        try await self.refreshAccessCheckResult(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }
}
