//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeAccessHistogram请求参数结构体
    public struct DescribeAccessHistogramRequest: TCRequest {
        /// 老版本查询的日志主题ID，新版本传空字符串即可
        public let topicId: String

        /// 要查询的日志的起始时间，Unix时间戳，单位ms
        public let from: Int64

        /// 要查询的日志的结束时间，Unix时间戳，单位ms
        public let to: Int64

        /// 查询语句，语句长度最大为4096
        public let query: String

        /// 柱状图间隔时间差，单位ms
        public let interval: Int64?

        public init(topicId: String, from: Int64, to: Int64, query: String, interval: Int64? = nil) {
            self.topicId = topicId
            self.from = from
            self.to = to
            self.query = query
            self.interval = interval
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case from = "From"
            case to = "To"
            case query = "Query"
            case interval = "Interval"
        }
    }

    /// DescribeAccessHistogram返回参数结构体
    public struct DescribeAccessHistogramResponse: TCResponse {
        /// 柱状图间隔时间差，单位ms
        public let interval: Int64

        /// 满足条件的日志条数
        public let totalCount: Int64

        /// 注意：此字段可能返回 null，表示取不到有效值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let histogramInfos: [AccessHistogramItem]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case interval = "Interval"
            case totalCount = "TotalCount"
            case histogramInfos = "HistogramInfos"
            case requestId = "RequestId"
        }
    }

    /// 访问日志柱状趋势图
    ///
    /// 本接口用于访问日志柱状趋势图
    @inlinable
    public func describeAccessHistogram(_ input: DescribeAccessHistogramRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessHistogramResponse> {
        self.client.execute(action: "DescribeAccessHistogram", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 访问日志柱状趋势图
    ///
    /// 本接口用于访问日志柱状趋势图
    @inlinable
    public func describeAccessHistogram(_ input: DescribeAccessHistogramRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessHistogramResponse {
        try await self.client.execute(action: "DescribeAccessHistogram", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 访问日志柱状趋势图
    ///
    /// 本接口用于访问日志柱状趋势图
    @inlinable
    public func describeAccessHistogram(topicId: String, from: Int64, to: Int64, query: String, interval: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessHistogramResponse> {
        self.describeAccessHistogram(.init(topicId: topicId, from: from, to: to, query: query, interval: interval), region: region, logger: logger, on: eventLoop)
    }

    /// 访问日志柱状趋势图
    ///
    /// 本接口用于访问日志柱状趋势图
    @inlinable
    public func describeAccessHistogram(topicId: String, from: Int64, to: Int64, query: String, interval: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessHistogramResponse {
        try await self.describeAccessHistogram(.init(topicId: topicId, from: from, to: to, query: query, interval: interval), region: region, logger: logger, on: eventLoop)
    }
}
