//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeAntiInfoLeakageRules请求参数结构体
    public struct DescribeAntiInfoLeakageRulesRequest: TCRequest {
        /// 域名
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
        }
    }

    /// DescribeAntiInfoLeakageRules返回参数结构体
    public struct DescribeAntiInfoLeakageRulesResponse: TCResponse {
        /// 记录条数
        public let total: UInt64

        /// 规则列表
        public let ruleList: [DescribeAntiLeakageItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case ruleList = "RuleList"
            case requestId = "RequestId"
        }
    }

    /// 获取信息防泄漏规则列表
    ///
    /// 取得信息防泄漏规则列表
    @inlinable
    public func describeAntiInfoLeakageRules(_ input: DescribeAntiInfoLeakageRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAntiInfoLeakageRulesResponse> {
        self.client.execute(action: "DescribeAntiInfoLeakageRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取信息防泄漏规则列表
    ///
    /// 取得信息防泄漏规则列表
    @inlinable
    public func describeAntiInfoLeakageRules(_ input: DescribeAntiInfoLeakageRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAntiInfoLeakageRulesResponse {
        try await self.client.execute(action: "DescribeAntiInfoLeakageRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取信息防泄漏规则列表
    ///
    /// 取得信息防泄漏规则列表
    @inlinable
    public func describeAntiInfoLeakageRules(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAntiInfoLeakageRulesResponse> {
        self.describeAntiInfoLeakageRules(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }

    /// 获取信息防泄漏规则列表
    ///
    /// 取得信息防泄漏规则列表
    @inlinable
    public func describeAntiInfoLeakageRules(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAntiInfoLeakageRulesResponse {
        try await self.describeAntiInfoLeakageRules(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }
}
