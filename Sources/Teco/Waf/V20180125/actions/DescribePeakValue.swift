//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Waf {
    /// DescribePeakValue请求参数结构体
    public struct DescribePeakValueRequest: TCRequest {
        /// 查询起始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$fromTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var fromTime: Date

        /// 查询结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$toTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var toTime: Date

        /// 需要查询的域名，当前用户所有域名可以不传
        public let domain: String?

        /// 只有两个值有效，sparta-waf，clb-waf，不传则不过滤
        public let edition: String?

        /// WAF实例ID，不传则不过滤
        public let instanceID: String?

        /// 五个值可选：
        /// access-峰值qps
        /// down-下行峰值带宽
        /// up-上行峰值带宽
        /// attack-Web攻击总数
        /// cc-CC攻击总数趋势图
        public let metricName: String?

        public init(fromTime: Date, toTime: Date, domain: String? = nil, edition: String? = nil, instanceID: String? = nil, metricName: String? = nil) {
            self._fromTime = .init(wrappedValue: fromTime)
            self._toTime = .init(wrappedValue: toTime)
            self.domain = domain
            self.edition = edition
            self.instanceID = instanceID
            self.metricName = metricName
        }

        enum CodingKeys: String, CodingKey {
            case fromTime = "FromTime"
            case toTime = "ToTime"
            case domain = "Domain"
            case edition = "Edition"
            case instanceID = "InstanceID"
            case metricName = "MetricName"
        }
    }

    /// DescribePeakValue返回参数结构体
    public struct DescribePeakValueResponse: TCResponse {
        /// QPS峰值
        public let access: UInt64

        /// 上行带宽峰值，单位B
        public let up: UInt64

        /// 下行带宽峰值，单位B
        public let down: UInt64

        /// Web攻击总数
        public let attack: UInt64

        /// CC攻击总数
        public let cc: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case access = "Access"
            case up = "Up"
            case down = "Down"
            case attack = "Attack"
            case cc = "Cc"
            case requestId = "RequestId"
        }
    }

    /// 获取业务和攻击概览峰值
    @inlinable
    public func describePeakValue(_ input: DescribePeakValueRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePeakValueResponse> {
        self.client.execute(action: "DescribePeakValue", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取业务和攻击概览峰值
    @inlinable
    public func describePeakValue(_ input: DescribePeakValueRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePeakValueResponse {
        try await self.client.execute(action: "DescribePeakValue", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取业务和攻击概览峰值
    @inlinable
    public func describePeakValue(fromTime: Date, toTime: Date, domain: String? = nil, edition: String? = nil, instanceID: String? = nil, metricName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePeakValueResponse> {
        self.describePeakValue(.init(fromTime: fromTime, toTime: toTime, domain: domain, edition: edition, instanceID: instanceID, metricName: metricName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取业务和攻击概览峰值
    @inlinable
    public func describePeakValue(fromTime: Date, toTime: Date, domain: String? = nil, edition: String? = nil, instanceID: String? = nil, metricName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePeakValueResponse {
        try await self.describePeakValue(.init(fromTime: fromTime, toTime: toTime, domain: domain, edition: edition, instanceID: instanceID, metricName: metricName), region: region, logger: logger, on: eventLoop)
    }
}
