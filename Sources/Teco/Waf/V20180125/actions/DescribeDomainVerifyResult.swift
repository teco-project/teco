//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeDomainVerifyResult请求参数结构体
    public struct DescribeDomainVerifyResultRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 实例id
        public let instanceID: String

        public init(domain: String, instanceID: String) {
            self.domain = domain
            self.instanceID = instanceID
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case instanceID = "InstanceID"
        }
    }

    /// DescribeDomainVerifyResult返回参数结构体
    public struct DescribeDomainVerifyResultResponse: TCResponse {
        /// 结果描述；如果可以添加返回空字符串
        public let msg: String

        /// 检验状态：0表示可以添加，大于0为不能添加
        public let verifyCode: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case msg = "Msg"
            case verifyCode = "VerifyCode"
            case requestId = "RequestId"
        }
    }

    /// 获取添加域名操作的结果
    @inlinable
    public func describeDomainVerifyResult(_ input: DescribeDomainVerifyResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainVerifyResultResponse> {
        self.client.execute(action: "DescribeDomainVerifyResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取添加域名操作的结果
    @inlinable
    public func describeDomainVerifyResult(_ input: DescribeDomainVerifyResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainVerifyResultResponse {
        try await self.client.execute(action: "DescribeDomainVerifyResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取添加域名操作的结果
    @inlinable
    public func describeDomainVerifyResult(domain: String, instanceID: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainVerifyResultResponse> {
        self.describeDomainVerifyResult(.init(domain: domain, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }

    /// 获取添加域名操作的结果
    @inlinable
    public func describeDomainVerifyResult(domain: String, instanceID: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainVerifyResultResponse {
        try await self.describeDomainVerifyResult(.init(domain: domain, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }
}
