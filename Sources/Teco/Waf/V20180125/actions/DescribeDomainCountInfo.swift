//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeDomainCountInfo请求参数结构体
    public struct DescribeDomainCountInfoRequest: TCRequest {
        public init() {
        }
    }

    /// DescribeDomainCountInfo返回参数结构体
    public struct DescribeDomainCountInfoResponse: TCResponse {
        /// 域名总数
        public let allDomain: UInt64

        /// 最近发现时间
        public let updateTime: String

        /// 接入域名总数
        public let wafDomainCount: UInt64

        /// 剩下配额
        public let leftDomainCount: UInt64

        /// 开启防护域名数
        public let openWafDomain: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case allDomain = "AllDomain"
            case updateTime = "UpdateTime"
            case wafDomainCount = "WafDomainCount"
            case leftDomainCount = "LeftDomainCount"
            case openWafDomain = "OpenWafDomain"
            case requestId = "RequestId"
        }
    }

    /// 获取域名概况
    @inlinable
    public func describeDomainCountInfo(_ input: DescribeDomainCountInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainCountInfoResponse> {
        self.client.execute(action: "DescribeDomainCountInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取域名概况
    @inlinable
    public func describeDomainCountInfo(_ input: DescribeDomainCountInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainCountInfoResponse {
        try await self.client.execute(action: "DescribeDomainCountInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取域名概况
    @inlinable
    public func describeDomainCountInfo(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainCountInfoResponse> {
        self.describeDomainCountInfo(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 获取域名概况
    @inlinable
    public func describeDomainCountInfo(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainCountInfoResponse {
        try await self.describeDomainCountInfo(.init(), region: region, logger: logger, on: eventLoop)
    }
}
