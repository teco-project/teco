//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeHost请求参数结构体
    public struct DescribeHostRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 域名ID
        public let domainId: String

        /// 实例ID
        public let instanceID: String?

        public init(domain: String, domainId: String, instanceID: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.instanceID = instanceID
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case instanceID = "InstanceID"
        }
    }

    /// DescribeHost返回参数结构体
    public struct DescribeHostResponse: TCResponse {
        /// 域名详情
        public let host: HostRecord

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case host = "Host"
            case requestId = "RequestId"
        }
    }

    /// 获取防护域名详情
    ///
    /// clb-waf获取防护域名详情
    @inlinable
    public func describeHost(_ input: DescribeHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostResponse> {
        self.client.execute(action: "DescribeHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取防护域名详情
    ///
    /// clb-waf获取防护域名详情
    @inlinable
    public func describeHost(_ input: DescribeHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostResponse {
        try await self.client.execute(action: "DescribeHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取防护域名详情
    ///
    /// clb-waf获取防护域名详情
    @inlinable
    public func describeHost(domain: String, domainId: String, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostResponse> {
        self.describeHost(.init(domain: domain, domainId: domainId, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }

    /// 获取防护域名详情
    ///
    /// clb-waf获取防护域名详情
    @inlinable
    public func describeHost(domain: String, domainId: String, instanceID: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostResponse {
        try await self.describeHost(.init(domain: domain, domainId: domainId, instanceID: instanceID), region: region, logger: logger, on: eventLoop)
    }
}
