//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifySpartaProtectionMode请求参数结构体
    public struct ModifySpartaProtectionModeRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 防护状态：
        /// 10：规则观察&&AI关闭模式，11：规则观察&&AI观察模式，12：规则观察&&AI拦截模式
        /// 20：规则拦截&&AI关闭模式，21：规则拦截&&AI观察模式，22：规则拦截&&AI拦截模式
        public let mode: UInt64

        /// WAF的版本，clb-waf代表负载均衡WAF、sparta-waf代表SaaS WAF，默认是sparta-waf。
        public let edition: String?

        /// 0是修改规则引擎状态，1是修改AI的状态
        public let type: UInt64?

        public init(domain: String, mode: UInt64, edition: String? = nil, type: UInt64? = nil) {
            self.domain = domain
            self.mode = mode
            self.edition = edition
            self.type = type
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case mode = "Mode"
            case edition = "Edition"
            case type = "Type"
        }
    }

    /// ModifySpartaProtectionMode返回参数结构体
    public struct ModifySpartaProtectionModeResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置waf防护状态
    @inlinable @discardableResult
    public func modifySpartaProtectionMode(_ input: ModifySpartaProtectionModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifySpartaProtectionModeResponse> {
        self.client.execute(action: "ModifySpartaProtectionMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置waf防护状态
    @inlinable @discardableResult
    public func modifySpartaProtectionMode(_ input: ModifySpartaProtectionModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifySpartaProtectionModeResponse {
        try await self.client.execute(action: "ModifySpartaProtectionMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置waf防护状态
    @inlinable @discardableResult
    public func modifySpartaProtectionMode(domain: String, mode: UInt64, edition: String? = nil, type: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifySpartaProtectionModeResponse> {
        self.modifySpartaProtectionMode(.init(domain: domain, mode: mode, edition: edition, type: type), region: region, logger: logger, on: eventLoop)
    }

    /// 设置waf防护状态
    @inlinable @discardableResult
    public func modifySpartaProtectionMode(domain: String, mode: UInt64, edition: String? = nil, type: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifySpartaProtectionModeResponse {
        try await self.modifySpartaProtectionMode(.init(domain: domain, mode: mode, edition: edition, type: type), region: region, logger: logger, on: eventLoop)
    }
}
