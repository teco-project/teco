//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeAntiInfoLeakRules请求参数结构体
    public struct DescribeAntiInfoLeakRulesRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 动作类型
        public let actionType: Int64?

        /// 翻页
        public let pageInfo: PageInfo?

        public init(domain: String, actionType: Int64? = nil, pageInfo: PageInfo? = nil) {
            self.domain = domain
            self.actionType = actionType
            self.pageInfo = pageInfo
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case actionType = "ActionType"
            case pageInfo = "PageInfo"
        }
    }

    /// DescribeAntiInfoLeakRules返回参数结构体
    public struct DescribeAntiInfoLeakRulesResponse: TCResponse {
        /// 记录条数
        public let totalCount: String

        /// 规则列表
        public let ruleList: [DescribeAntiInfoLeakRulesRuleItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case ruleList = "RuleList"
            case requestId = "RequestId"
        }
    }

    /// 获取信息防泄漏规则列表【老接口】
    ///
    /// 获取信息防泄漏规则列表
    @available(*, unavailable, message: "老接口已经不再使用。")
    @inlinable
    public func describeAntiInfoLeakRules(_ input: DescribeAntiInfoLeakRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAntiInfoLeakRulesResponse> {
        fatalError("'DescribeAntiInfoLeakRules' is no longer available.")
    }

    /// 获取信息防泄漏规则列表【老接口】
    ///
    /// 获取信息防泄漏规则列表
    @available(*, unavailable, message: "老接口已经不再使用。")
    @inlinable
    public func describeAntiInfoLeakRules(_ input: DescribeAntiInfoLeakRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAntiInfoLeakRulesResponse {
        fatalError("'DescribeAntiInfoLeakRules' is no longer available.")
    }

    /// 获取信息防泄漏规则列表【老接口】
    ///
    /// 获取信息防泄漏规则列表
    @available(*, unavailable, message: "老接口已经不再使用。")
    @inlinable
    public func describeAntiInfoLeakRules(domain: String, actionType: Int64? = nil, pageInfo: PageInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAntiInfoLeakRulesResponse> {
        fatalError("'DescribeAntiInfoLeakRules' is no longer available.")
    }

    /// 获取信息防泄漏规则列表【老接口】
    ///
    /// 获取信息防泄漏规则列表
    @available(*, unavailable, message: "老接口已经不再使用。")
    @inlinable
    public func describeAntiInfoLeakRules(domain: String, actionType: Int64? = nil, pageInfo: PageInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAntiInfoLeakRulesResponse {
        fatalError("'DescribeAntiInfoLeakRules' is no longer available.")
    }
}
