//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyHostMode请求参数结构体
    public struct ModifyHostModeRequest: TCRequest {
        /// 域名
        public let domain: String

        /// 域名ID
        public let domainId: String

        /// 防护状态：
        /// 10：规则观察&&AI关闭模式，11：规则观察&&AI观察模式，12：规则观察&&AI拦截模式
        /// 20：规则拦截&&AI关闭模式，21：规则拦截&&AI观察模式，22：规则拦截&&AI拦截模式
        public let mode: UInt64

        /// 0:修改防护模式，1:修改AI
        public let type: UInt64?

        /// 实例ID
        public let instanceID: String?

        /// 实例类型
        public let edition: String?

        public init(domain: String, domainId: String, mode: UInt64, type: UInt64? = nil, instanceID: String? = nil, edition: String? = nil) {
            self.domain = domain
            self.domainId = domainId
            self.mode = mode
            self.type = type
            self.instanceID = instanceID
            self.edition = edition
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case domainId = "DomainId"
            case mode = "Mode"
            case type = "Type"
            case instanceID = "InstanceID"
            case edition = "Edition"
        }
    }

    /// ModifyHostMode返回参数结构体
    public struct ModifyHostModeResponse: TCResponse {
        /// 操作的状态码，如果所有的资源操作成功则返回的是成功的状态码，如果有资源操作失败则需要解析Message的内容来查看哪个资源失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let success: ResponseCode?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case success = "Success"
            case requestId = "RequestId"
        }
    }

    /// 设置防护域名防护状态
    ///
    /// clb-waf设置防护域名防护状态
    @inlinable
    public func modifyHostMode(_ input: ModifyHostModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyHostModeResponse> {
        self.client.execute(action: "ModifyHostMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置防护域名防护状态
    ///
    /// clb-waf设置防护域名防护状态
    @inlinable
    public func modifyHostMode(_ input: ModifyHostModeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyHostModeResponse {
        try await self.client.execute(action: "ModifyHostMode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置防护域名防护状态
    ///
    /// clb-waf设置防护域名防护状态
    @inlinable
    public func modifyHostMode(domain: String, domainId: String, mode: UInt64, type: UInt64? = nil, instanceID: String? = nil, edition: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyHostModeResponse> {
        self.modifyHostMode(.init(domain: domain, domainId: domainId, mode: mode, type: type, instanceID: instanceID, edition: edition), region: region, logger: logger, on: eventLoop)
    }

    /// 设置防护域名防护状态
    ///
    /// clb-waf设置防护域名防护状态
    @inlinable
    public func modifyHostMode(domain: String, domainId: String, mode: UInt64, type: UInt64? = nil, instanceID: String? = nil, edition: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyHostModeResponse {
        try await self.modifyHostMode(.init(domain: domain, domainId: domainId, mode: mode, type: type, instanceID: instanceID, edition: edition), region: region, logger: logger, on: eventLoop)
    }
}
