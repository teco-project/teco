//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Waf {
    /// ModifyAreaBanStatus请求参数结构体
    public struct ModifyAreaBanStatusRequest: TCRequestModel {
        /// 修要修改的域名
        public let domain: String

        /// 状态值，0表示关闭，1表示开启
        public let status: Int64

        public init(domain: String, status: Int64) {
            self.domain = domain
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case status = "Status"
        }
    }

    /// ModifyAreaBanStatus返回参数结构体
    public struct ModifyAreaBanStatusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改地域封禁状态
    ///
    /// 修改防护域名的地域封禁状态
    @inlinable @discardableResult
    public func modifyAreaBanStatus(_ input: ModifyAreaBanStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAreaBanStatusResponse> {
        self.client.execute(action: "ModifyAreaBanStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改地域封禁状态
    ///
    /// 修改防护域名的地域封禁状态
    @inlinable @discardableResult
    public func modifyAreaBanStatus(_ input: ModifyAreaBanStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAreaBanStatusResponse {
        try await self.client.execute(action: "ModifyAreaBanStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改地域封禁状态
    ///
    /// 修改防护域名的地域封禁状态
    @inlinable @discardableResult
    public func modifyAreaBanStatus(domain: String, status: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAreaBanStatusResponse> {
        self.modifyAreaBanStatus(.init(domain: domain, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 修改地域封禁状态
    ///
    /// 修改防护域名的地域封禁状态
    @inlinable @discardableResult
    public func modifyAreaBanStatus(domain: String, status: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAreaBanStatusResponse {
        try await self.modifyAreaBanStatus(.init(domain: domain, status: status), region: region, logger: logger, on: eventLoop)
    }
}
