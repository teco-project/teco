//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeFindDomainList请求参数结构体
    public struct DescribeFindDomainListRequest: TCPaginatedRequest {
        /// 分页
        public let offset: UInt64

        /// 每页容量
        public let limit: UInt64

        /// 过滤条件
        public let key: String

        /// 是否接入waf
        public let isWafDomain: String

        /// 排序参数
        public let by: String?

        /// 排序方式
        public let order: String?

        public init(offset: UInt64, limit: UInt64, key: String, isWafDomain: String, by: String? = nil, order: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.key = key
            self.isWafDomain = isWafDomain
            self.by = by
            self.order = order
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case key = "Key"
            case isWafDomain = "IsWafDomain"
            case by = "By"
            case order = "Order"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeFindDomainListResponse) -> DescribeFindDomainListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(offset: self.offset + .init(response.getItems().count), limit: self.limit, key: self.key, isWafDomain: self.isWafDomain, by: self.by, order: self.order)
        }
    }

    /// DescribeFindDomainList返回参数结构体
    public struct DescribeFindDomainListResponse: TCPaginatedResponse {
        /// 域名总数
        public let total: UInt64

        /// 域名信息列表
        public let list: [FindAllDomainDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case list = "List"
            case requestId = "RequestId"
        }

        /// Extract the returned ``FindAllDomainDetail`` list from the paginated response.
        public func getItems() -> [FindAllDomainDetail] {
            self.list
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 获取发现域名列表接口
    @inlinable
    public func describeFindDomainList(_ input: DescribeFindDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFindDomainListResponse> {
        self.client.execute(action: "DescribeFindDomainList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取发现域名列表接口
    @inlinable
    public func describeFindDomainList(_ input: DescribeFindDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFindDomainListResponse {
        try await self.client.execute(action: "DescribeFindDomainList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取发现域名列表接口
    @inlinable
    public func describeFindDomainList(offset: UInt64, limit: UInt64, key: String, isWafDomain: String, by: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFindDomainListResponse> {
        self.describeFindDomainList(.init(offset: offset, limit: limit, key: key, isWafDomain: isWafDomain, by: by, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 获取发现域名列表接口
    @inlinable
    public func describeFindDomainList(offset: UInt64, limit: UInt64, key: String, isWafDomain: String, by: String? = nil, order: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFindDomainListResponse {
        try await self.describeFindDomainList(.init(offset: offset, limit: limit, key: key, isWafDomain: isWafDomain, by: by, order: order), region: region, logger: logger, on: eventLoop)
    }

    /// 获取发现域名列表接口
    @inlinable
    public func describeFindDomainListPaginated(_ input: DescribeFindDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [FindAllDomainDetail])> {
        self.client.paginate(input: input, region: region, command: self.describeFindDomainList, logger: logger, on: eventLoop)
    }

    /// 获取发现域名列表接口
    @inlinable @discardableResult
    public func describeFindDomainListPaginated(_ input: DescribeFindDomainListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeFindDomainListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeFindDomainList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取发现域名列表接口
    ///
    /// - Returns: `AsyncSequence`s of ``FindAllDomainDetail`` and ``DescribeFindDomainListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeFindDomainListPaginator(_ input: DescribeFindDomainListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeFindDomainListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeFindDomainList, logger: logger, on: eventLoop)
    }
}
