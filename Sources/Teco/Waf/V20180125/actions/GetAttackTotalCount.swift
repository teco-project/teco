//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Waf {
    /// GetAttackTotalCount请求参数结构体
    public struct GetAttackTotalCountRequest: TCRequest {
        /// 起始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$startTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date

        /// 结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$endTime`) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date

        /// 查询的域名，全部域名不指定
        public let domain: String

        /// 查询条件，默认为""
        public let queryString: String

        public init(startTime: Date, endTime: Date, domain: String, queryString: String) {
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.domain = domain
            self.queryString = queryString
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case domain = "Domain"
            case queryString = "QueryString"
        }
    }

    /// GetAttackTotalCount返回参数结构体
    public struct GetAttackTotalCountResponse: TCResponse {
        /// 攻击总次数
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 攻击总次数
    ///
    /// 按照条件查询展示攻击总次数
    @inlinable
    public func getAttackTotalCount(_ input: GetAttackTotalCountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAttackTotalCountResponse> {
        self.client.execute(action: "GetAttackTotalCount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 攻击总次数
    ///
    /// 按照条件查询展示攻击总次数
    @inlinable
    public func getAttackTotalCount(_ input: GetAttackTotalCountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAttackTotalCountResponse {
        try await self.client.execute(action: "GetAttackTotalCount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 攻击总次数
    ///
    /// 按照条件查询展示攻击总次数
    @inlinable
    public func getAttackTotalCount(startTime: Date, endTime: Date, domain: String, queryString: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetAttackTotalCountResponse> {
        self.getAttackTotalCount(.init(startTime: startTime, endTime: endTime, domain: domain, queryString: queryString), region: region, logger: logger, on: eventLoop)
    }

    /// 攻击总次数
    ///
    /// 按照条件查询展示攻击总次数
    @inlinable
    public func getAttackTotalCount(startTime: Date, endTime: Date, domain: String, queryString: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAttackTotalCountResponse {
        try await self.getAttackTotalCount(.init(startTime: startTime, endTime: endTime, domain: domain, queryString: queryString), region: region, logger: logger, on: eventLoop)
    }
}
