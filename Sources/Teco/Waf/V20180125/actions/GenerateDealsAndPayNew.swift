//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// GenerateDealsAndPayNew请求参数结构体
    public struct GenerateDealsAndPayNewRequest: TCRequest {
        /// 计费下单入参
        public let goods: [GoodNews]

        public init(goods: [GoodNews]) {
            self.goods = goods
        }

        enum CodingKeys: String, CodingKey {
            case goods = "Goods"
        }
    }

    /// GenerateDealsAndPayNew返回参数结构体
    public struct GenerateDealsAndPayNewResponse: TCResponse {
        /// 计费下单响应结构体
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: DealData?

        /// 1:成功，0:失败
        public let status: Int64

        /// 返回message
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let returnMessage: String?

        /// 购买的实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case status = "Status"
            case returnMessage = "ReturnMessage"
            case instanceId = "InstanceId"
            case requestId = "RequestId"
        }
    }

    /// 计费资源购买、续费下单接口
    @inlinable
    public func generateDealsAndPayNew(_ input: GenerateDealsAndPayNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GenerateDealsAndPayNewResponse> {
        self.client.execute(action: "GenerateDealsAndPayNew", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 计费资源购买、续费下单接口
    @inlinable
    public func generateDealsAndPayNew(_ input: GenerateDealsAndPayNewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GenerateDealsAndPayNewResponse {
        try await self.client.execute(action: "GenerateDealsAndPayNew", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 计费资源购买、续费下单接口
    @inlinable
    public func generateDealsAndPayNew(goods: [GoodNews], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GenerateDealsAndPayNewResponse> {
        self.generateDealsAndPayNew(.init(goods: goods), region: region, logger: logger, on: eventLoop)
    }

    /// 计费资源购买、续费下单接口
    @inlinable
    public func generateDealsAndPayNew(goods: [GoodNews], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GenerateDealsAndPayNewResponse {
        try await self.generateDealsAndPayNew(.init(goods: goods), region: region, logger: logger, on: eventLoop)
    }
}
