//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DeleteHost请求参数结构体
    public struct DeleteHostRequest: TCRequest {
        /// 删除的域名列表
        public let hostsDel: [HostDel]

        public init(hostsDel: [HostDel]) {
            self.hostsDel = hostsDel
        }

        enum CodingKeys: String, CodingKey {
            case hostsDel = "HostsDel"
        }
    }

    /// DeleteHost返回参数结构体
    public struct DeleteHostResponse: TCResponse {
        /// 操作的状态码，如果所有的资源操作成功则返回的是成功的状态码，如果有资源操作失败则需要解析Message的内容来查看哪个资源失败
        public let success: ResponseCode

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case success = "Success"
            case requestId = "RequestId"
        }
    }

    /// 删除CLB-WAF防护域名
    ///
    /// 删除CLB-WAF防护域名
    /// 支持批量操作
    @inlinable
    public func deleteHost(_ input: DeleteHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteHostResponse> {
        self.client.execute(action: "DeleteHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除CLB-WAF防护域名
    ///
    /// 删除CLB-WAF防护域名
    /// 支持批量操作
    @inlinable
    public func deleteHost(_ input: DeleteHostRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteHostResponse {
        try await self.client.execute(action: "DeleteHost", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除CLB-WAF防护域名
    ///
    /// 删除CLB-WAF防护域名
    /// 支持批量操作
    @inlinable
    public func deleteHost(hostsDel: [HostDel], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteHostResponse> {
        self.deleteHost(.init(hostsDel: hostsDel), region: region, logger: logger, on: eventLoop)
    }

    /// 删除CLB-WAF防护域名
    ///
    /// 删除CLB-WAF防护域名
    /// 支持批量操作
    @inlinable
    public func deleteHost(hostsDel: [HostDel], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteHostResponse {
        try await self.deleteHost(.init(hostsDel: hostsDel), region: region, logger: logger, on: eventLoop)
    }
}
