//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// DescribeAccessFastAnalysis请求参数结构体
    public struct DescribeAccessFastAnalysisRequest: TCRequest {
        /// 客户要查询的日志主题ID，每个客户都有对应的一个主题
        public let topicId: String

        /// 要查询的日志的起始时间，Unix时间戳，单位ms
        public let from: Int64

        /// 要查询的日志的结束时间，Unix时间戳，单位ms
        public let to: Int64

        /// 查询语句，语句长度最大为4096，由于本接口是分析接口，如果无过滤条件，必须传 * 表示匹配所有，参考CLS的分析统计语句的文档
        public let query: String

        /// 需要分析统计的字段名
        public let fieldName: String

        /// 排序字段,升序asc,降序desc，默认降序desc
        public let sort: String?

        /// 返回的top数，默认返回top5
        public let count: Int64?

        public init(topicId: String, from: Int64, to: Int64, query: String, fieldName: String, sort: String? = nil, count: Int64? = nil) {
            self.topicId = topicId
            self.from = from
            self.to = to
            self.query = query
            self.fieldName = fieldName
            self.sort = sort
            self.count = count
        }

        enum CodingKeys: String, CodingKey {
            case topicId = "TopicId"
            case from = "From"
            case to = "To"
            case query = "Query"
            case fieldName = "FieldName"
            case sort = "Sort"
            case count = "Count"
        }
    }

    /// DescribeAccessFastAnalysis返回参数结构体
    public struct DescribeAccessFastAnalysisResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 访问日志快速分析统计
    ///
    /// 本接口用于访问日志的快速分析
    @inlinable @discardableResult
    public func describeAccessFastAnalysis(_ input: DescribeAccessFastAnalysisRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessFastAnalysisResponse> {
        self.client.execute(action: "DescribeAccessFastAnalysis", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 访问日志快速分析统计
    ///
    /// 本接口用于访问日志的快速分析
    @inlinable @discardableResult
    public func describeAccessFastAnalysis(_ input: DescribeAccessFastAnalysisRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessFastAnalysisResponse {
        try await self.client.execute(action: "DescribeAccessFastAnalysis", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 访问日志快速分析统计
    ///
    /// 本接口用于访问日志的快速分析
    @inlinable @discardableResult
    public func describeAccessFastAnalysis(topicId: String, from: Int64, to: Int64, query: String, fieldName: String, sort: String? = nil, count: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessFastAnalysisResponse> {
        self.describeAccessFastAnalysis(.init(topicId: topicId, from: from, to: to, query: query, fieldName: fieldName, sort: sort, count: count), region: region, logger: logger, on: eventLoop)
    }

    /// 访问日志快速分析统计
    ///
    /// 本接口用于访问日志的快速分析
    @inlinable @discardableResult
    public func describeAccessFastAnalysis(topicId: String, from: Int64, to: Int64, query: String, fieldName: String, sort: String? = nil, count: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessFastAnalysisResponse {
        try await self.describeAccessFastAnalysis(.init(topicId: topicId, from: from, to: to, query: query, fieldName: fieldName, sort: sort, count: count), region: region, logger: logger, on: eventLoop)
    }
}
