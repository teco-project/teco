//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Waf {
    /// ModifyDomainIpv6Status请求参数结构体
    public struct ModifyDomainIpv6StatusRequest: TCRequest {
        /// 需要修改的域名所属的实例ID
        public let instanceId: String

        /// 需要修改的域名
        public let domain: String

        /// 需要修改的域名ID
        public let domainId: String

        /// 修改域名的Ipv6开关为Status （1:开启 2:关闭）
        public let status: Int64

        public init(instanceId: String, domain: String, domainId: String, status: Int64) {
            self.instanceId = instanceId
            self.domain = domain
            self.domainId = domainId
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case domain = "Domain"
            case domainId = "DomainId"
            case status = "Status"
        }
    }

    /// ModifyDomainIpv6Status返回参数结构体
    public struct ModifyDomainIpv6StatusResponse: TCResponse {
        /// 返回的状态 （0: 操作失败 1:操作成功 2:企业版以上不支持 3:企业版以下不支持 ）
        public let ipv6Status: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ipv6Status = "Ipv6Status"
            case requestId = "RequestId"
        }
    }

    /// 切换ipv6开关
    @inlinable
    public func modifyDomainIpv6Status(_ input: ModifyDomainIpv6StatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDomainIpv6StatusResponse> {
        self.client.execute(action: "ModifyDomainIpv6Status", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 切换ipv6开关
    @inlinable
    public func modifyDomainIpv6Status(_ input: ModifyDomainIpv6StatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDomainIpv6StatusResponse {
        try await self.client.execute(action: "ModifyDomainIpv6Status", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 切换ipv6开关
    @inlinable
    public func modifyDomainIpv6Status(instanceId: String, domain: String, domainId: String, status: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDomainIpv6StatusResponse> {
        self.modifyDomainIpv6Status(.init(instanceId: instanceId, domain: domain, domainId: domainId, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 切换ipv6开关
    @inlinable
    public func modifyDomainIpv6Status(instanceId: String, domain: String, domainId: String, status: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDomainIpv6StatusResponse {
        try await self.modifyDomainIpv6Status(.init(instanceId: instanceId, domain: domain, domainId: domainId, status: status), region: region, logger: logger, on: eventLoop)
    }
}
