//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCBmaError {
    public struct FailedOperation: TCBmaErrorType {
        enum Code: String {
            case companyNameWrong = "FailedOperation.CompanyNameWrong"
            case existCompany = "FailedOperation.ExistCompany"
            case existDetectTarget = "FailedOperation.ExistDetectTarget"
            case existSoftware = "FailedOperation.ExistSoftware"
            case reuseResource = "FailedOperation.ReuseResource"
            case smsVerify = "FailedOperation.SmsVerify"
            case unusableResource = "FailedOperation.UnusableResource"
            case other = "FailedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 操作失败，企业名称有误。
        public static var companyNameWrong: FailedOperation {
            FailedOperation(.companyNameWrong)
        }

        /// 操作失败，已存在企业信息。
        public static var existCompany: FailedOperation {
            FailedOperation(.existCompany)
        }

        /// 操作失败，已存在检测对象。
        public static var existDetectTarget: FailedOperation {
            FailedOperation(.existDetectTarget)
        }

        /// 操作失败，已存在软件信息。
        public static var existSoftware: FailedOperation {
            FailedOperation(.existSoftware)
        }

        /// 该资源已使用，请勿重复使用。
        public static var reuseResource: FailedOperation {
            FailedOperation(.reuseResource)
        }

        /// 操作失败，验证码错误。
        public static var smsVerify: FailedOperation {
            FailedOperation(.smsVerify)
        }

        /// 操作失败，资源不可用。
        public static var unusableResource: FailedOperation {
            FailedOperation(.unusableResource)
        }

        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }

        public func asBmaError() -> TCBmaError {
            let code: TCBmaError.Code
            switch self.error {
            case .companyNameWrong:
                code = .failedOperation_CompanyNameWrong
            case .existCompany:
                code = .failedOperation_ExistCompany
            case .existDetectTarget:
                code = .failedOperation_ExistDetectTarget
            case .existSoftware:
                code = .failedOperation_ExistSoftware
            case .reuseResource:
                code = .failedOperation_ReuseResource
            case .smsVerify:
                code = .failedOperation_SmsVerify
            case .unusableResource:
                code = .failedOperation_UnusableResource
            case .other:
                code = .failedOperation
            }
            return TCBmaError(code, context: self.context)
        }
    }
}
