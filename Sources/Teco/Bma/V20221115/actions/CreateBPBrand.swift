//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Bma {
    /// CreateBPBrand请求参数结构体
    public struct CreateBPBrandRequest: TCRequestModel {
        /// 品牌名称
        public let brandName: String

        /// 企业名称
        public let companyName: String?

        /// 联系电话
        public let phone: String?

        /// 营业执照
        public let license: String?

        /// 授权书
        public let authorization: String?

        /// 商标名称
        public let trademarkNames: [String]?

        /// 商标证明
        public let trademarks: [String]?

        /// 是否涉及转让: 0-不转让 1-转让
        public let isTransfers: [String]?

        /// 转让证明
        public let transfers: [String]?

        /// 保护网址
        public let protectURLs: [String]?

        /// 保护应用
        public let protectAPPs: [String]?

        /// 保护公众号
        public let protectOfficialAccounts: [String]?

        /// 保护小程序
        public let protectMiniPrograms: [String]?

        public init(brandName: String, companyName: String? = nil, phone: String? = nil, license: String? = nil, authorization: String? = nil, trademarkNames: [String]? = nil, trademarks: [String]? = nil, isTransfers: [String]? = nil, transfers: [String]? = nil, protectURLs: [String]? = nil, protectAPPs: [String]? = nil, protectOfficialAccounts: [String]? = nil, protectMiniPrograms: [String]? = nil) {
            self.brandName = brandName
            self.companyName = companyName
            self.phone = phone
            self.license = license
            self.authorization = authorization
            self.trademarkNames = trademarkNames
            self.trademarks = trademarks
            self.isTransfers = isTransfers
            self.transfers = transfers
            self.protectURLs = protectURLs
            self.protectAPPs = protectAPPs
            self.protectOfficialAccounts = protectOfficialAccounts
            self.protectMiniPrograms = protectMiniPrograms
        }

        enum CodingKeys: String, CodingKey {
            case brandName = "BrandName"
            case companyName = "CompanyName"
            case phone = "Phone"
            case license = "License"
            case authorization = "Authorization"
            case trademarkNames = "TrademarkNames"
            case trademarks = "Trademarks"
            case isTransfers = "IsTransfers"
            case transfers = "Transfers"
            case protectURLs = "ProtectURLs"
            case protectAPPs = "ProtectAPPs"
            case protectOfficialAccounts = "ProtectOfficialAccounts"
            case protectMiniPrograms = "ProtectMiniPrograms"
        }
    }

    /// CreateBPBrand返回参数结构体
    public struct CreateBPBrandResponse: TCResponseModel {
        /// 企业id
        public let companyId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case companyId = "CompanyId"
            case requestId = "RequestId"
        }
    }

    /// 添加品牌
    @inlinable
    public func createBPBrand(_ input: CreateBPBrandRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBPBrandResponse> {
        self.client.execute(action: "CreateBPBrand", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加品牌
    @inlinable
    public func createBPBrand(_ input: CreateBPBrandRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBPBrandResponse {
        try await self.client.execute(action: "CreateBPBrand", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加品牌
    @inlinable
    public func createBPBrand(brandName: String, companyName: String? = nil, phone: String? = nil, license: String? = nil, authorization: String? = nil, trademarkNames: [String]? = nil, trademarks: [String]? = nil, isTransfers: [String]? = nil, transfers: [String]? = nil, protectURLs: [String]? = nil, protectAPPs: [String]? = nil, protectOfficialAccounts: [String]? = nil, protectMiniPrograms: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBPBrandResponse> {
        self.createBPBrand(.init(brandName: brandName, companyName: companyName, phone: phone, license: license, authorization: authorization, trademarkNames: trademarkNames, trademarks: trademarks, isTransfers: isTransfers, transfers: transfers, protectURLs: protectURLs, protectAPPs: protectAPPs, protectOfficialAccounts: protectOfficialAccounts, protectMiniPrograms: protectMiniPrograms), region: region, logger: logger, on: eventLoop)
    }

    /// 添加品牌
    @inlinable
    public func createBPBrand(brandName: String, companyName: String? = nil, phone: String? = nil, license: String? = nil, authorization: String? = nil, trademarkNames: [String]? = nil, trademarks: [String]? = nil, isTransfers: [String]? = nil, transfers: [String]? = nil, protectURLs: [String]? = nil, protectAPPs: [String]? = nil, protectOfficialAccounts: [String]? = nil, protectMiniPrograms: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBPBrandResponse {
        try await self.createBPBrand(.init(brandName: brandName, companyName: companyName, phone: phone, license: license, authorization: authorization, trademarkNames: trademarkNames, trademarks: trademarks, isTransfers: isTransfers, transfers: transfers, protectURLs: protectURLs, protectAPPs: protectAPPs, protectOfficialAccounts: protectOfficialAccounts, protectMiniPrograms: protectMiniPrograms), region: region, logger: logger, on: eventLoop)
    }
}
