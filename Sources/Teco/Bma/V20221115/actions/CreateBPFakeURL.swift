//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Bma {
    /// CreateBPFakeURL请求参数结构体
    public struct CreateBPFakeURLRequest: TCRequestModel {
        /// 企业id
        public let companyId: Int64

        /// 仿冒网址
        public let fakeURL: String

        /// 仿冒网址截图
        public let fakeURLSnapshots: [String]?

        /// 备注
        public let note: String?

        public init(companyId: Int64, fakeURL: String, fakeURLSnapshots: [String]? = nil, note: String? = nil) {
            self.companyId = companyId
            self.fakeURL = fakeURL
            self.fakeURLSnapshots = fakeURLSnapshots
            self.note = note
        }

        enum CodingKeys: String, CodingKey {
            case companyId = "CompanyId"
            case fakeURL = "FakeURL"
            case fakeURLSnapshots = "FakeURLSnapshots"
            case note = "Note"
        }
    }

    /// CreateBPFakeURL返回参数结构体
    public struct CreateBPFakeURLResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 仿冒网址举报
    @inlinable @discardableResult
    public func createBPFakeURL(_ input: CreateBPFakeURLRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBPFakeURLResponse> {
        self.client.execute(action: "CreateBPFakeURL", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 仿冒网址举报
    @inlinable @discardableResult
    public func createBPFakeURL(_ input: CreateBPFakeURLRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBPFakeURLResponse {
        try await self.client.execute(action: "CreateBPFakeURL", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 仿冒网址举报
    @inlinable @discardableResult
    public func createBPFakeURL(companyId: Int64, fakeURL: String, fakeURLSnapshots: [String]? = nil, note: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBPFakeURLResponse> {
        self.createBPFakeURL(.init(companyId: companyId, fakeURL: fakeURL, fakeURLSnapshots: fakeURLSnapshots, note: note), region: region, logger: logger, on: eventLoop)
    }

    /// 仿冒网址举报
    @inlinable @discardableResult
    public func createBPFakeURL(companyId: Int64, fakeURL: String, fakeURLSnapshots: [String]? = nil, note: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBPFakeURLResponse {
        try await self.createBPFakeURL(.init(companyId: companyId, fakeURL: fakeURL, fakeURLSnapshots: fakeURLSnapshots, note: note), region: region, logger: logger, on: eventLoop)
    }
}
