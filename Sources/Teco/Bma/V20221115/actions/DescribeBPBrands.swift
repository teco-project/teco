//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bma {
    /// DescribeBPBrands请求参数结构体
    public struct DescribeBPBrandsRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeBPBrands返回参数结构体
    public struct DescribeBPBrandsResponse: TCResponseModel {
        /// 品牌信息
        public let brands: [BrandData]

        /// 品牌审核通知栏状态：0 不显示 1 显示
        public let noticeStatus: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case brands = "Brands"
            case noticeStatus = "NoticeStatus"
            case requestId = "RequestId"
        }
    }

    /// 查询品牌列表
    @inlinable
    public func describeBPBrands(_ input: DescribeBPBrandsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBPBrandsResponse> {
        self.client.execute(action: "DescribeBPBrands", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询品牌列表
    @inlinable
    public func describeBPBrands(_ input: DescribeBPBrandsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBPBrandsResponse {
        try await self.client.execute(action: "DescribeBPBrands", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询品牌列表
    @inlinable
    public func describeBPBrands(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBPBrandsResponse> {
        self.describeBPBrands(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询品牌列表
    @inlinable
    public func describeBPBrands(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBPBrandsResponse {
        try await self.describeBPBrands(.init(), region: region, logger: logger, on: eventLoop)
    }
}
