//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bma {
    /// DescribeBPCompanyInfo请求参数结构体
    public struct DescribeBPCompanyInfoRequest: TCRequestModel {
        public init () {
        }
    }
    
    /// DescribeBPCompanyInfo返回参数结构体
    public struct DescribeBPCompanyInfoResponse: TCResponseModel {
        /// 企业名称
        public let companyName: String
        
        /// 电话号码
        public let phone: String
        
        /// 营业执照
        public let licenseName: String
        
        /// 营业执照审核状态 1-审核中 2-审核未通过，3、审核通过
        public let licenseStatus: Int64
        
        /// 营业执照备注
        public let licenseNote: String
        
        /// 授权书
        public let authorizationName: String
        
        /// 授权书审核状态
        public let authorizationStatus: Int64
        
        /// 授权书备注
        public let authorizationNote: String
        
        /// 品牌信息
        public let brandDatas: [BrandData]
        
        /// 企业ID
        public let companyId: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case companyName = "CompanyName"
            case phone = "Phone"
            case licenseName = "LicenseName"
            case licenseStatus = "LicenseStatus"
            case licenseNote = "LicenseNote"
            case authorizationName = "AuthorizationName"
            case authorizationStatus = "AuthorizationStatus"
            case authorizationNote = "AuthorizationNote"
            case brandDatas = "BrandDatas"
            case companyId = "CompanyId"
            case requestId = "RequestId"
        }
    }
    
    /// 查询企业信息
    @inlinable
    public func describeBPCompanyInfo(_ input: DescribeBPCompanyInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeBPCompanyInfoResponse > {
        self.client.execute(action: "DescribeBPCompanyInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询企业信息
    @inlinable
    public func describeBPCompanyInfo(_ input: DescribeBPCompanyInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBPCompanyInfoResponse {
        try await self.client.execute(action: "DescribeBPCompanyInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
