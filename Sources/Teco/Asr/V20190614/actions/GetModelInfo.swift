//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Asr {
    /// GetModelInfo请求参数结构体
    public struct GetModelInfoRequest: TCRequestModel {
        /// 模型id
        public let modelId: String

        public init(modelId: String) {
            self.modelId = modelId
        }

        enum CodingKeys: String, CodingKey {
            case modelId = "ModelId"
        }
    }

    /// GetModelInfo返回参数结构体
    public struct GetModelInfoResponse: TCResponseModel {
        /// 模型信息
        public let data: Model

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取自学习模型信息
    ///
    /// 通过自学习模型id获取自学习模型详细信息
    @inlinable
    public func getModelInfo(_ input: GetModelInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetModelInfoResponse> {
        self.client.execute(action: "GetModelInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取自学习模型信息
    ///
    /// 通过自学习模型id获取自学习模型详细信息
    @inlinable
    public func getModelInfo(_ input: GetModelInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetModelInfoResponse {
        try await self.client.execute(action: "GetModelInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取自学习模型信息
    ///
    /// 通过自学习模型id获取自学习模型详细信息
    @inlinable
    public func getModelInfo(modelId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetModelInfoResponse> {
        self.getModelInfo(.init(modelId: modelId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取自学习模型信息
    ///
    /// 通过自学习模型id获取自学习模型详细信息
    @inlinable
    public func getModelInfo(modelId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetModelInfoResponse {
        try await self.getModelInfo(.init(modelId: modelId), region: region, logger: logger, on: eventLoop)
    }
}
