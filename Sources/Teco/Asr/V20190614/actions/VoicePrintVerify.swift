//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Asr {
    /// VoicePrintVerify请求参数结构体
    public struct VoicePrintVerifyRequest: TCRequest {
        /// 音频格式 0: pcm, 1: wav
        public let voiceFormat: Int64

        /// 音频采样率，目前支持16000，单位：Hz，必填
        public let sampleRate: Int64

        /// 说话人id, 说话人唯一标识
        public let voicePrintId: String

        /// 音频数据, base64 编码, 音频时长不能超过30s，数据大小不超过2M
        public let data: String

        public init(voiceFormat: Int64, sampleRate: Int64, voicePrintId: String, data: String) {
            self.voiceFormat = voiceFormat
            self.sampleRate = sampleRate
            self.voicePrintId = voicePrintId
            self.data = data
        }

        enum CodingKeys: String, CodingKey {
            case voiceFormat = "VoiceFormat"
            case sampleRate = "SampleRate"
            case voicePrintId = "VoicePrintId"
            case data = "Data"
        }
    }

    /// VoicePrintVerify返回参数结构体
    public struct VoicePrintVerifyResponse: TCResponse {
        /// 说话人验证数据
        public let data: VoicePrintVerifyData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 说话人认证
    ///
    /// 本接口用于校验传入音频与已注册音频的匹配程度，通过指定说话人ID（VoicePrintId）和一段音频进行音频和说话人的匹配度判断
    @inlinable
    public func voicePrintVerify(_ input: VoicePrintVerifyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VoicePrintVerifyResponse> {
        self.client.execute(action: "VoicePrintVerify", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 说话人认证
    ///
    /// 本接口用于校验传入音频与已注册音频的匹配程度，通过指定说话人ID（VoicePrintId）和一段音频进行音频和说话人的匹配度判断
    @inlinable
    public func voicePrintVerify(_ input: VoicePrintVerifyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VoicePrintVerifyResponse {
        try await self.client.execute(action: "VoicePrintVerify", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 说话人认证
    ///
    /// 本接口用于校验传入音频与已注册音频的匹配程度，通过指定说话人ID（VoicePrintId）和一段音频进行音频和说话人的匹配度判断
    @inlinable
    public func voicePrintVerify(voiceFormat: Int64, sampleRate: Int64, voicePrintId: String, data: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VoicePrintVerifyResponse> {
        self.voicePrintVerify(.init(voiceFormat: voiceFormat, sampleRate: sampleRate, voicePrintId: voicePrintId, data: data), region: region, logger: logger, on: eventLoop)
    }

    /// 说话人认证
    ///
    /// 本接口用于校验传入音频与已注册音频的匹配程度，通过指定说话人ID（VoicePrintId）和一段音频进行音频和说话人的匹配度判断
    @inlinable
    public func voicePrintVerify(voiceFormat: Int64, sampleRate: Int64, voicePrintId: String, data: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VoicePrintVerifyResponse {
        try await self.voicePrintVerify(.init(voiceFormat: voiceFormat, sampleRate: sampleRate, voicePrintId: voicePrintId, data: data), region: region, logger: logger, on: eventLoop)
    }
}
