//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Asr {
    /// VoicePrintDelete请求参数结构体
    public struct VoicePrintDeleteRequest: TCRequestModel {
        /// 说话人id，说话人唯一标识
        public let voicePrintId: String

        public init(voicePrintId: String) {
            self.voicePrintId = voicePrintId
        }

        enum CodingKeys: String, CodingKey {
            case voicePrintId = "VoicePrintId"
        }
    }

    /// VoicePrintDelete返回参数结构体
    public struct VoicePrintDeleteResponse: TCResponseModel {
        /// 说话人基本信息
        public let data: VoicePrintBaseData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 说话人删除
    ///
    /// 本接口用于以删除已经注册的说话人信息（删除之后，原有的说话人ID和说话人音频数据都会失效）
    @inlinable
    public func voicePrintDelete(_ input: VoicePrintDeleteRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VoicePrintDeleteResponse> {
        self.client.execute(action: "VoicePrintDelete", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 说话人删除
    ///
    /// 本接口用于以删除已经注册的说话人信息（删除之后，原有的说话人ID和说话人音频数据都会失效）
    @inlinable
    public func voicePrintDelete(_ input: VoicePrintDeleteRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VoicePrintDeleteResponse {
        try await self.client.execute(action: "VoicePrintDelete", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 说话人删除
    ///
    /// 本接口用于以删除已经注册的说话人信息（删除之后，原有的说话人ID和说话人音频数据都会失效）
    @inlinable
    public func voicePrintDelete(voicePrintId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VoicePrintDeleteResponse> {
        self.voicePrintDelete(.init(voicePrintId: voicePrintId), region: region, logger: logger, on: eventLoop)
    }

    /// 说话人删除
    ///
    /// 本接口用于以删除已经注册的说话人信息（删除之后，原有的说话人ID和说话人音频数据都会失效）
    @inlinable
    public func voicePrintDelete(voicePrintId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VoicePrintDeleteResponse {
        try await self.voicePrintDelete(.init(voicePrintId: voicePrintId), region: region, logger: logger, on: eventLoop)
    }
}
