//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Asr {
    /// 获取热词表
    ///
    /// 用户根据词表的ID可以获取对应的热词表信息
    @inlinable
    public func getAsrVocab(_ input: GetAsrVocabRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetAsrVocabResponse > {
        self.client.execute(action: "GetAsrVocab", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取热词表
    ///
    /// 用户根据词表的ID可以获取对应的热词表信息
    @inlinable
    public func getAsrVocab(_ input: GetAsrVocabRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetAsrVocabResponse {
        try await self.client.execute(action: "GetAsrVocab", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// GetAsrVocab请求参数结构体
    public struct GetAsrVocabRequest: TCRequestModel {
        /// 热词表ID
        public let vocabId: String
        
        public init (vocabId: String) {
            self.vocabId = vocabId
        }
        
        enum CodingKeys: String, CodingKey {
            case vocabId = "VocabId"
        }
    }
    
    /// GetAsrVocab返回参数结构体
    public struct GetAsrVocabResponse: TCResponseModel {
        /// 热词表名称
        public let name: String
        
        /// 热词表描述
        public let description: String
        
        /// 热词表ID
        public let vocabId: String
        
        /// 词权重列表
        public let wordWeights: [HotWord]
        
        /// 词表创建时间
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let createTime: Date
        
        /// 词表更新时间
        // FIXME: Codable support not implemented for datetime_iso yet.
        public let updateTime: Date
        
        /// 热词表状态，1为默认状态即在识别时默认加载该热词表进行识别，0为初始状态
        public let state: Int64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case vocabId = "VocabId"
            case wordWeights = "WordWeights"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case state = "State"
            case requestId = "RequestId"
        }
    }
}
