//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Asr {
    /// VoicePrintUpdate请求参数结构体
    public struct VoicePrintUpdateRequest: TCRequest {
        /// 音频格式 0: pcm, 1: wav
        public let voiceFormat: Int64

        /// 音频采样率 目前仅支持16000 单位Hz
        public let sampleRate: Int64

        /// 说话人id， 说话人唯一标识
        public let voicePrintId: String

        /// 音频数据, base64 编码, 音频时长不能超过30s，数据大小不超过2M
        public let data: String

        /// 说话人昵称  不超过32字节
        public let speakerNick: String?

        public init(voiceFormat: Int64, sampleRate: Int64, voicePrintId: String, data: String, speakerNick: String? = nil) {
            self.voiceFormat = voiceFormat
            self.sampleRate = sampleRate
            self.voicePrintId = voicePrintId
            self.data = data
            self.speakerNick = speakerNick
        }

        enum CodingKeys: String, CodingKey {
            case voiceFormat = "VoiceFormat"
            case sampleRate = "SampleRate"
            case voicePrintId = "VoicePrintId"
            case data = "Data"
            case speakerNick = "SpeakerNick"
        }
    }

    /// VoicePrintUpdate返回参数结构体
    public struct VoicePrintUpdateResponse: TCResponse {
        /// 说话人基础数据
        public let data: VoicePrintBaseData

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 说话人更新
    ///
    /// 本接口用于更新和覆盖已注册的音频数据和说话人昵称，更新后原有的音频数据将失效。
    @inlinable
    public func voicePrintUpdate(_ input: VoicePrintUpdateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VoicePrintUpdateResponse> {
        self.client.execute(action: "VoicePrintUpdate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 说话人更新
    ///
    /// 本接口用于更新和覆盖已注册的音频数据和说话人昵称，更新后原有的音频数据将失效。
    @inlinable
    public func voicePrintUpdate(_ input: VoicePrintUpdateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VoicePrintUpdateResponse {
        try await self.client.execute(action: "VoicePrintUpdate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 说话人更新
    ///
    /// 本接口用于更新和覆盖已注册的音频数据和说话人昵称，更新后原有的音频数据将失效。
    @inlinable
    public func voicePrintUpdate(voiceFormat: Int64, sampleRate: Int64, voicePrintId: String, data: String, speakerNick: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<VoicePrintUpdateResponse> {
        self.voicePrintUpdate(.init(voiceFormat: voiceFormat, sampleRate: sampleRate, voicePrintId: voicePrintId, data: data, speakerNick: speakerNick), region: region, logger: logger, on: eventLoop)
    }

    /// 说话人更新
    ///
    /// 本接口用于更新和覆盖已注册的音频数据和说话人昵称，更新后原有的音频数据将失效。
    @inlinable
    public func voicePrintUpdate(voiceFormat: Int64, sampleRate: Int64, voicePrintId: String, data: String, speakerNick: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> VoicePrintUpdateResponse {
        try await self.voicePrintUpdate(.init(voiceFormat: voiceFormat, sampleRate: sampleRate, voicePrintId: voicePrintId, data: data, speakerNick: speakerNick), region: region, logger: logger, on: eventLoop)
    }
}
