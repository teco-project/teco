//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCAsrError {
    public struct FailedOperation: TCAsrErrorType {
        enum Code: String {
            case checkAuthInfoFailed = "FailedOperation.CheckAuthInfoFailed"
            case errorDownFile = "FailedOperation.ErrorDownFile"
            case errorRecognize = "FailedOperation.ErrorRecognize"
            case noSuchTask = "FailedOperation.NoSuchTask"
            case notExistentVoicePrintId = "FailedOperation.NotExistentVoicePrintId"
            case serviceIsolate = "FailedOperation.ServiceIsolate"
            case userHasNoFreeAmount = "FailedOperation.UserHasNoFreeAmount"
            case userNotRegistered = "FailedOperation.UserNotRegistered"
            case other = "FailedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 鉴权错误。
        public static var checkAuthInfoFailed: FailedOperation {
            FailedOperation(.checkAuthInfoFailed)
        }

        /// 下载音频文件失败。
        public static var errorDownFile: FailedOperation {
            FailedOperation(.errorDownFile)
        }

        /// 识别失败。
        public static var errorRecognize: FailedOperation {
            FailedOperation(.errorRecognize)
        }

        /// 错误的TaskId。
        public static var noSuchTask: FailedOperation {
            FailedOperation(.noSuchTask)
        }

        /// 不存在的声纹id
        public static var notExistentVoicePrintId: FailedOperation {
            FailedOperation(.notExistentVoicePrintId)
        }

        /// 账号因为欠费停止服务，请在腾讯云账户充值。
        public static var serviceIsolate: FailedOperation {
            FailedOperation(.serviceIsolate)
        }

        /// 账号本月免费额度已用完。
        ///
        /// None
        public static var userHasNoFreeAmount: FailedOperation {
            FailedOperation(.userHasNoFreeAmount)
        }

        /// 服务未开通，请在腾讯云官网语音识别控制台开通服务。
        public static var userNotRegistered: FailedOperation {
            FailedOperation(.userNotRegistered)
        }

        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }

        public func asAsrError() -> TCAsrError {
            let code: TCAsrError.Code
            switch self.error {
            case .checkAuthInfoFailed:
                code = .failedOperation_CheckAuthInfoFailed
            case .errorDownFile:
                code = .failedOperation_ErrorDownFile
            case .errorRecognize:
                code = .failedOperation_ErrorRecognize
            case .noSuchTask:
                code = .failedOperation_NoSuchTask
            case .notExistentVoicePrintId:
                code = .failedOperation_NotExistentVoicePrintId
            case .serviceIsolate:
                code = .failedOperation_ServiceIsolate
            case .userHasNoFreeAmount:
                code = .failedOperation_UserHasNoFreeAmount
            case .userNotRegistered:
                code = .failedOperation_UserNotRegistered
            case .other:
                code = .failedOperation
            }
            return TCAsrError(code, context: self.context)
        }
    }
}
