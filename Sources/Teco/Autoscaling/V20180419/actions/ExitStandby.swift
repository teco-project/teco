//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension As {
    /// ExitStandby请求参数结构体
    public struct ExitStandbyRequest: TCRequest {
        /// 伸缩组 ID。
        public let autoScalingGroupId: String

        /// 备用中状态 CVM 实例列表。
        public let instanceIds: [String]

        public init(autoScalingGroupId: String, instanceIds: [String]) {
            self.autoScalingGroupId = autoScalingGroupId
            self.instanceIds = instanceIds
        }

        enum CodingKeys: String, CodingKey {
            case autoScalingGroupId = "AutoScalingGroupId"
            case instanceIds = "InstanceIds"
        }
    }

    /// ExitStandby返回参数结构体
    public struct ExitStandbyResponse: TCResponse {
        /// 伸缩活动ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let activityId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case activityId = "ActivityId"
            case requestId = "RequestId"
        }
    }

    /// 实例退出备用中状态
    ///
    /// 伸缩组内实例退出备用中状态。
    /// * 备用中状态的实例负载均衡器权重值为 0，退出备用中状态后，权重值也会恢复
    /// * 对备用中状态实例进行开关机操作也会使其退出备用中状态
    @inlinable
    public func exitStandby(_ input: ExitStandbyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExitStandbyResponse> {
        self.client.execute(action: "ExitStandby", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 实例退出备用中状态
    ///
    /// 伸缩组内实例退出备用中状态。
    /// * 备用中状态的实例负载均衡器权重值为 0，退出备用中状态后，权重值也会恢复
    /// * 对备用中状态实例进行开关机操作也会使其退出备用中状态
    @inlinable
    public func exitStandby(_ input: ExitStandbyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExitStandbyResponse {
        try await self.client.execute(action: "ExitStandby", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 实例退出备用中状态
    ///
    /// 伸缩组内实例退出备用中状态。
    /// * 备用中状态的实例负载均衡器权重值为 0，退出备用中状态后，权重值也会恢复
    /// * 对备用中状态实例进行开关机操作也会使其退出备用中状态
    @inlinable
    public func exitStandby(autoScalingGroupId: String, instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ExitStandbyResponse> {
        self.exitStandby(.init(autoScalingGroupId: autoScalingGroupId, instanceIds: instanceIds), region: region, logger: logger, on: eventLoop)
    }

    /// 实例退出备用中状态
    ///
    /// 伸缩组内实例退出备用中状态。
    /// * 备用中状态的实例负载均衡器权重值为 0，退出备用中状态后，权重值也会恢复
    /// * 对备用中状态实例进行开关机操作也会使其退出备用中状态
    @inlinable
    public func exitStandby(autoScalingGroupId: String, instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExitStandbyResponse {
        try await self.exitStandby(.init(autoScalingGroupId: autoScalingGroupId, instanceIds: instanceIds), region: region, logger: logger, on: eventLoop)
    }
}
