//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension As {
    /// DescribeLaunchConfigurations请求参数结构体
    public struct DescribeLaunchConfigurationsRequest: TCPaginatedRequest {
        /// 按照一个或者多个启动配置ID查询。启动配置ID形如：`asc-ouy1ax38`。每次请求的上限为100。参数不支持同时指定`LaunchConfigurationIds`和`Filters`
        public let launchConfigurationIds: [String]?

        /// 过滤条件。
        /// <li> launch-configuration-id - String - 是否必填：否 -（过滤条件）按照启动配置ID过滤。</li>
        /// <li> launch-configuration-name - String - 是否必填：否 -（过滤条件）按照启动配置名称过滤。</li>
        /// <li> vague-launch-configuration-name - String - 是否必填：否 -（过滤条件）按照启动配置名称模糊搜索。</li>
        /// <li> tag-key - String - 是否必填：否 -（过滤条件）按照标签键进行过滤。</li>
        /// <li> tag-value - String - 是否必填：否 -（过滤条件）按照标签值进行过滤。</li>
        /// <li> tag:tag-key - String - 是否必填：否 -（过滤条件）按照标签键值对进行过滤。 tag-key使用具体的标签键进行替换。使用请参考示例3
        /// </li>
        /// 每次请求的`Filters`的上限为10，`Filter.Values`的上限为5。参数不支持同时指定`LaunchConfigurationIds`和`Filters`。
        public let filters: [Filter]?

        /// 返回数量，默认为20，最大值为100。关于`Limit`的更进一步介绍请参考 API [简介](https://cloud.tencent.com/document/api/213/15688)中的相关小节。
        public let limit: UInt64?

        /// 偏移量，默认为0。关于`Offset`的更进一步介绍请参考 API [简介](https://cloud.tencent.com/document/api/213/15688)中的相关小节。
        public let offset: UInt64?

        public init(launchConfigurationIds: [String]? = nil, filters: [Filter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil) {
            self.launchConfigurationIds = launchConfigurationIds
            self.filters = filters
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case launchConfigurationIds = "LaunchConfigurationIds"
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeLaunchConfigurationsResponse) -> DescribeLaunchConfigurationsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeLaunchConfigurationsRequest(launchConfigurationIds: self.launchConfigurationIds, filters: self.filters, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribeLaunchConfigurations返回参数结构体
    public struct DescribeLaunchConfigurationsResponse: TCPaginatedResponse {
        /// 符合条件的启动配置数量。
        public let totalCount: UInt64

        /// 启动配置详细信息列表。
        public let launchConfigurationSet: [LaunchConfiguration]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case launchConfigurationSet = "LaunchConfigurationSet"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [LaunchConfiguration] {
            self.launchConfigurationSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询启动配置
    ///
    /// 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。
    ///
    /// * 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
    /// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
    @inlinable
    public func describeLaunchConfigurations(_ input: DescribeLaunchConfigurationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLaunchConfigurationsResponse> {
        self.client.execute(action: "DescribeLaunchConfigurations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询启动配置
    ///
    /// 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。
    ///
    /// * 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
    /// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
    @inlinable
    public func describeLaunchConfigurations(_ input: DescribeLaunchConfigurationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLaunchConfigurationsResponse {
        try await self.client.execute(action: "DescribeLaunchConfigurations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询启动配置
    ///
    /// 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。
    ///
    /// * 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
    /// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
    @inlinable
    public func describeLaunchConfigurations(launchConfigurationIds: [String]? = nil, filters: [Filter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLaunchConfigurationsResponse> {
        self.describeLaunchConfigurations(.init(launchConfigurationIds: launchConfigurationIds, filters: filters, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询启动配置
    ///
    /// 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。
    ///
    /// * 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
    /// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
    @inlinable
    public func describeLaunchConfigurations(launchConfigurationIds: [String]? = nil, filters: [Filter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLaunchConfigurationsResponse {
        try await self.describeLaunchConfigurations(.init(launchConfigurationIds: launchConfigurationIds, filters: filters, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询启动配置
    ///
    /// 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。
    ///
    /// * 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
    /// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
    @inlinable
    public func describeLaunchConfigurationsPaginated(_ input: DescribeLaunchConfigurationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [LaunchConfiguration])> {
        self.client.paginate(input: input, region: region, command: self.describeLaunchConfigurations, logger: logger, on: eventLoop)
    }

    /// 查询启动配置
    ///
    /// 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。
    ///
    /// * 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
    /// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
    @inlinable @discardableResult
    public func describeLaunchConfigurationsPaginated(_ input: DescribeLaunchConfigurationsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeLaunchConfigurationsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeLaunchConfigurations, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询启动配置
    ///
    /// 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。
    ///
    /// * 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
    /// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
    ///
    /// - Returns: `AsyncSequence`s of `LaunchConfiguration` and `DescribeLaunchConfigurationsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeLaunchConfigurationsPaginator(_ input: DescribeLaunchConfigurationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeLaunchConfigurationsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeLaunchConfigurations, logger: logger, on: eventLoop)
    }
}
