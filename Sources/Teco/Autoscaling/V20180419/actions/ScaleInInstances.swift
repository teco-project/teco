//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension As {
    /// ScaleInInstances请求参数结构体
    public struct ScaleInInstancesRequest: TCRequestModel {
        /// 伸缩组ID。
        public let autoScalingGroupId: String

        /// 希望缩容的实例数量。
        public let scaleInNumber: UInt64

        public init(autoScalingGroupId: String, scaleInNumber: UInt64) {
            self.autoScalingGroupId = autoScalingGroupId
            self.scaleInNumber = scaleInNumber
        }

        enum CodingKeys: String, CodingKey {
            case autoScalingGroupId = "AutoScalingGroupId"
            case scaleInNumber = "ScaleInNumber"
        }
    }

    /// ScaleInInstances返回参数结构体
    public struct ScaleInInstancesResponse: TCResponseModel {
        /// 伸缩活动ID。
        public let activityId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case activityId = "ActivityId"
            case requestId = "RequestId"
        }
    }

    /// 指定数量缩容实例
    ///
    /// 为伸缩组指定数量缩容实例，返回缩容活动的 ActivityId。
    /// * 伸缩组需要未处于活动中
    /// * 伸缩组处于停用状态时，该接口也会生效，可参考[停用伸缩组](https://cloud.tencent.com/document/api/377/20435)文档查看伸缩组停用状态的影响范围
    /// * 根据伸缩组的`TerminationPolicies`策略，选择被缩容的实例，可参考[缩容处理](https://cloud.tencent.com/document/product/377/8563)
    /// * 接口只会选择`IN_SERVICE`实例缩容，如果需要缩容其他状态实例，可以使用 [DetachInstances](https://cloud.tencent.com/document/api/377/20436) 或 [RemoveInstances](https://cloud.tencent.com/document/api/377/20431) 接口
    /// * 接口会减少期望实例数，新的期望实例数需要大于等于最小实例数
    /// * 缩容如果失败或者部分成功，最后期望实例数只会扣减实际缩容成功的实例数量
    @inlinable
    public func scaleInInstances(_ input: ScaleInInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleInInstancesResponse> {
        self.client.execute(action: "ScaleInInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 指定数量缩容实例
    ///
    /// 为伸缩组指定数量缩容实例，返回缩容活动的 ActivityId。
    /// * 伸缩组需要未处于活动中
    /// * 伸缩组处于停用状态时，该接口也会生效，可参考[停用伸缩组](https://cloud.tencent.com/document/api/377/20435)文档查看伸缩组停用状态的影响范围
    /// * 根据伸缩组的`TerminationPolicies`策略，选择被缩容的实例，可参考[缩容处理](https://cloud.tencent.com/document/product/377/8563)
    /// * 接口只会选择`IN_SERVICE`实例缩容，如果需要缩容其他状态实例，可以使用 [DetachInstances](https://cloud.tencent.com/document/api/377/20436) 或 [RemoveInstances](https://cloud.tencent.com/document/api/377/20431) 接口
    /// * 接口会减少期望实例数，新的期望实例数需要大于等于最小实例数
    /// * 缩容如果失败或者部分成功，最后期望实例数只会扣减实际缩容成功的实例数量
    @inlinable
    public func scaleInInstances(_ input: ScaleInInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleInInstancesResponse {
        try await self.client.execute(action: "ScaleInInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 指定数量缩容实例
    ///
    /// 为伸缩组指定数量缩容实例，返回缩容活动的 ActivityId。
    /// * 伸缩组需要未处于活动中
    /// * 伸缩组处于停用状态时，该接口也会生效，可参考[停用伸缩组](https://cloud.tencent.com/document/api/377/20435)文档查看伸缩组停用状态的影响范围
    /// * 根据伸缩组的`TerminationPolicies`策略，选择被缩容的实例，可参考[缩容处理](https://cloud.tencent.com/document/product/377/8563)
    /// * 接口只会选择`IN_SERVICE`实例缩容，如果需要缩容其他状态实例，可以使用 [DetachInstances](https://cloud.tencent.com/document/api/377/20436) 或 [RemoveInstances](https://cloud.tencent.com/document/api/377/20431) 接口
    /// * 接口会减少期望实例数，新的期望实例数需要大于等于最小实例数
    /// * 缩容如果失败或者部分成功，最后期望实例数只会扣减实际缩容成功的实例数量
    @inlinable
    public func scaleInInstances(autoScalingGroupId: String, scaleInNumber: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleInInstancesResponse> {
        self.scaleInInstances(ScaleInInstancesRequest(autoScalingGroupId: autoScalingGroupId, scaleInNumber: scaleInNumber), region: region, logger: logger, on: eventLoop)
    }

    /// 指定数量缩容实例
    ///
    /// 为伸缩组指定数量缩容实例，返回缩容活动的 ActivityId。
    /// * 伸缩组需要未处于活动中
    /// * 伸缩组处于停用状态时，该接口也会生效，可参考[停用伸缩组](https://cloud.tencent.com/document/api/377/20435)文档查看伸缩组停用状态的影响范围
    /// * 根据伸缩组的`TerminationPolicies`策略，选择被缩容的实例，可参考[缩容处理](https://cloud.tencent.com/document/product/377/8563)
    /// * 接口只会选择`IN_SERVICE`实例缩容，如果需要缩容其他状态实例，可以使用 [DetachInstances](https://cloud.tencent.com/document/api/377/20436) 或 [RemoveInstances](https://cloud.tencent.com/document/api/377/20431) 接口
    /// * 接口会减少期望实例数，新的期望实例数需要大于等于最小实例数
    /// * 缩容如果失败或者部分成功，最后期望实例数只会扣减实际缩容成功的实例数量
    @inlinable
    public func scaleInInstances(autoScalingGroupId: String, scaleInNumber: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleInInstancesResponse {
        try await self.scaleInInstances(ScaleInInstancesRequest(autoScalingGroupId: autoScalingGroupId, scaleInNumber: scaleInNumber), region: region, logger: logger, on: eventLoop)
    }
}
