//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension As {
    /// DescribeRefreshActivities请求参数结构体
    public struct DescribeRefreshActivitiesRequest: TCPaginatedRequest {
        /// 刷新活动ID列表。ID形如：`asr-5l2ejpfo`。每次请求的上限为100。参数不支持同时指定`RefreshActivityIds`和`Filters`。
        public let refreshActivityIds: [String]?

        /// 过滤条件。
        /// - auto-scaling-group-id - String - 是否必填：否 -（过滤条件）按照伸缩组ID过滤。
        /// - refresh-activity-status-code - String - 是否必填：否 -（过滤条件）按照刷新活动状态过滤。（INIT：初始化中 | RUNNING：运行中 | SUCCESSFUL：活动成功 | FAILED_PAUSE：失败暂停 | AUTO_PAUSE：自动暂停 | MANUAL_PAUSE：手动暂停 | CANCELLED：活动取消 | FAILED：活动失败）
        /// - refresh-activity-type - String - 是否必填：否 -（过滤条件）按照刷新活动类型过滤。（NORMAL：正常刷新活动 | ROLLBACK：回滚刷新活动）
        /// - refresh-activity-id - String - 是否必填：否 -（过滤条件）按照刷新活动ID过滤。
        /// - 每次请求的Filters的上限为10，Filter.Values的上限为5。参数不支持同时指定RefreshActivityIds和Filters。
        public let filters: [Filter]?

        /// 返回数量，默认为20，最大值为100。关于`Limit`的更进一步介绍请参考 API [简介](https://cloud.tencent.com/document/api/213/15688)中的相关小节。
        public let limit: UInt64?

        /// 偏移量，默认为0。关于`Offset`的更进一步介绍请参考 API [简介](https://cloud.tencent.com/document/api/213/15688)中的相关小节。
        public let offset: UInt64?

        public init(refreshActivityIds: [String]? = nil, filters: [Filter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil) {
            self.refreshActivityIds = refreshActivityIds
            self.filters = filters
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case refreshActivityIds = "RefreshActivityIds"
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRefreshActivitiesResponse) -> DescribeRefreshActivitiesRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(refreshActivityIds: self.refreshActivityIds, filters: self.filters, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// DescribeRefreshActivities返回参数结构体
    public struct DescribeRefreshActivitiesResponse: TCPaginatedResponse {
        /// 符合条件的刷新活动数量。
        public let totalCount: UInt64

        /// 符合条件的刷新活动信息集合。
        public let refreshActivitySet: [RefreshActivity]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case refreshActivitySet = "RefreshActivitySet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``RefreshActivity`` list from the paginated response.
        public func getItems() -> [RefreshActivity] {
            self.refreshActivitySet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询实例刷新活动
    ///
    /// 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
    @inlinable
    public func describeRefreshActivities(_ input: DescribeRefreshActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRefreshActivitiesResponse> {
        self.client.execute(action: "DescribeRefreshActivities", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例刷新活动
    ///
    /// 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
    @inlinable
    public func describeRefreshActivities(_ input: DescribeRefreshActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRefreshActivitiesResponse {
        try await self.client.execute(action: "DescribeRefreshActivities", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例刷新活动
    ///
    /// 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
    @inlinable
    public func describeRefreshActivities(refreshActivityIds: [String]? = nil, filters: [Filter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRefreshActivitiesResponse> {
        self.describeRefreshActivities(.init(refreshActivityIds: refreshActivityIds, filters: filters, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例刷新活动
    ///
    /// 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
    @inlinable
    public func describeRefreshActivities(refreshActivityIds: [String]? = nil, filters: [Filter]? = nil, limit: UInt64? = nil, offset: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRefreshActivitiesResponse {
        try await self.describeRefreshActivities(.init(refreshActivityIds: refreshActivityIds, filters: filters, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例刷新活动
    ///
    /// 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
    @inlinable
    public func describeRefreshActivitiesPaginated(_ input: DescribeRefreshActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [RefreshActivity])> {
        self.client.paginate(input: input, region: region, command: self.describeRefreshActivities, logger: logger, on: eventLoop)
    }

    /// 查询实例刷新活动
    ///
    /// 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
    @inlinable @discardableResult
    public func describeRefreshActivitiesPaginated(_ input: DescribeRefreshActivitiesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRefreshActivitiesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRefreshActivities, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询实例刷新活动
    ///
    /// 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
    ///
    /// - Returns: `AsyncSequence`s of ``RefreshActivity`` and ``DescribeRefreshActivitiesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRefreshActivitiesPaginator(_ input: DescribeRefreshActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRefreshActivitiesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRefreshActivities, logger: logger, on: eventLoop)
    }
}
