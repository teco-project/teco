//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension As {
    /// CreateLaunchConfiguration请求参数结构体
    public struct CreateLaunchConfigurationRequest: TCRequestModel {
        /// 启动配置显示名称。名称仅支持中文、英文、数字、下划线、分隔符"-"、小数点，最大长度不能超60个字节。
        public let launchConfigurationName: String

        /// 指定有效的[镜像](https://cloud.tencent.com/document/product/213/4940)ID，格式形如`img-8toqc6s3`。镜像类型分为四种：<br/><li>公共镜像</li><li>自定义镜像</li><li>共享镜像</li><li>服务市场镜像</li><br/>可通过以下方式获取可用的镜像ID：<br/><li>`公共镜像`、`自定义镜像`、`共享镜像`的镜像ID可通过登录[控制台](https://console.cloud.tencent.com/cvm/image?rid=1&imageType=PUBLIC_IMAGE)查询；`服务镜像市场`的镜像ID可通过[云市场](https://market.cloud.tencent.com/list)查询。</li><li>通过调用接口 [DescribeImages](https://cloud.tencent.com/document/api/213/15715) ，取返回信息中的`ImageId`字段。</li>
        public let imageId: String

        /// 启动配置所属项目ID。不填为默认项目。
        /// 注意：伸缩组内实例所属项目ID取伸缩组项目ID，与这里取值无关。
        public let projectId: UInt64?

        /// 实例机型。不同实例机型指定了不同的资源规格，具体取值可通过调用接口 [DescribeInstanceTypeConfigs](https://cloud.tencent.com/document/api/213/15749) 来获得最新的规格表或参见[实例类型](https://cloud.tencent.com/document/product/213/11518)描述。
        /// `InstanceType`和`InstanceTypes`参数互斥，二者必填一个且只能填写一个。
        public let instanceType: String?

        /// 实例系统盘配置信息。若不指定该参数，则按照系统默认值进行分配。
        public let systemDisk: SystemDisk?

        /// 实例数据盘配置信息。若不指定该参数，则默认不购买数据盘，最多支持指定11块数据盘。
        public let dataDisks: [DataDisk]?

        /// 公网带宽相关信息设置。若不指定该参数，则默认公网带宽为0Mbps。
        public let internetAccessible: InternetAccessible?

        /// 实例登录设置。通过该参数可以设置实例的登录方式密码、密钥或保持镜像的原始登录设置。默认情况下会随机生成密码，并以站内信方式知会到用户。
        public let loginSettings: LoginSettings?

        /// 实例所属安全组。该参数可以通过调用 [DescribeSecurityGroups](https://cloud.tencent.com/document/api/215/15808) 的返回值中的`SecurityGroupId`字段来获取。若不指定该参数，则默认不绑定安全组。
        public let securityGroupIds: [String]?

        /// 增强服务。通过该参数可以指定是否开启云安全、云监控等服务。若不指定该参数，则默认开启云监控、云安全服务。
        public let enhancedService: EnhancedService?

        /// 经过 Base64 编码后的自定义数据，最大长度不超过16KB。
        public let userData: String?

        /// 实例计费类型，CVM默认值按照POSTPAID_BY_HOUR处理。
        /// <br><li>POSTPAID_BY_HOUR：按小时后付费
        /// <br><li>SPOTPAID：竞价付费
        /// <br><li>PREPAID：预付费，即包年包月
        public let instanceChargeType: String?

        /// 实例的市场相关选项，如竞价实例相关参数，若指定实例的付费模式为竞价付费则该参数必传。
        public let instanceMarketOptions: InstanceMarketOptionsRequest?

        /// 实例机型列表，不同实例机型指定了不同的资源规格，最多支持10种实例机型。
        /// `InstanceType`和`InstanceTypes`参数互斥，二者必填一个且只能填写一个。
        public let instanceTypes: [String]?

        /// CAM角色名称。可通过DescribeRoleList接口返回值中的roleName获取。
        public let camRoleName: String?

        /// 实例类型校验策略，取值包括 ALL 和 ANY，默认取值为ANY。
        /// <br><li> ALL，所有实例类型（InstanceType）都可用则通过校验，否则校验报错。
        /// <br><li> ANY，存在任何一个实例类型（InstanceType）可用则通过校验，否则校验报错。
        ///
        /// 实例类型不可用的常见原因包括该实例类型售罄、对应云盘售罄等。
        /// 如果 InstanceTypes 中一款机型不存在或者已下线，则无论 InstanceTypesCheckPolicy 采用何种取值，都会校验报错。
        public let instanceTypesCheckPolicy: String?

        /// 标签列表。通过指定该参数，可以为扩容的实例绑定标签。最多支持指定10个标签。
        public let instanceTags: [InstanceTag]?

        /// 标签描述列表。通过指定该参数可以支持绑定标签到启动配置。每个启动配置最多支持30个标签。
        public let tags: [Tag]?

        /// 云服务器主机名（HostName）的相关设置。
        public let hostNameSettings: HostNameSettings?

        /// 云服务器实例名（InstanceName）的相关设置。
        /// 如果用户在启动配置中设置此字段，则伸缩组创建出的实例 InstanceName 参照此字段进行设置，并传递给 CVM；如果用户未在启动配置中设置此字段，则伸缩组创建出的实例 InstanceName 按照“as-{{ 伸缩组AutoScalingGroupName }}”进行设置，并传递给 CVM。
        public let instanceNameSettings: InstanceNameSettings?

        /// 预付费模式，即包年包月相关参数设置。通过该参数可以指定包年包月实例的购买时长、是否设置自动续费等属性。若指定实例的付费模式为预付费则该参数必传。
        public let instanceChargePrepaid: InstanceChargePrepaid?

        /// 云盘类型选择策略，默认取值 ORIGINAL，取值范围：
        /// <br><li>ORIGINAL：使用设置的云盘类型
        /// <br><li>AUTOMATIC：自动选择当前可用的云盘类型
        public let diskTypePolicy: String?

        /// 高性能计算集群ID。<br>
        /// 注意：此字段默认为空。
        public let hpcClusterId: String?

        /// IPv6公网带宽相关信息设置。若新建实例包含IPv6地址，该参数可为新建实例的IPv6地址分配公网带宽。关联启动配置的伸缩组Ipv6AddressCount参数为0时，该参数不会生效。
        public let iPv6InternetAccessible: IPv6InternetAccessible?

        /// 置放群组id，仅支持指定一个。
        public let disasterRecoverGroupIds: [String]?

        public init(launchConfigurationName: String, imageId: String, projectId: UInt64? = nil, instanceType: String? = nil, systemDisk: SystemDisk? = nil, dataDisks: [DataDisk]? = nil, internetAccessible: InternetAccessible? = nil, loginSettings: LoginSettings? = nil, securityGroupIds: [String]? = nil, enhancedService: EnhancedService? = nil, userData: String? = nil, instanceChargeType: String? = nil, instanceMarketOptions: InstanceMarketOptionsRequest? = nil, instanceTypes: [String]? = nil, camRoleName: String? = nil, instanceTypesCheckPolicy: String? = nil, instanceTags: [InstanceTag]? = nil, tags: [Tag]? = nil, hostNameSettings: HostNameSettings? = nil, instanceNameSettings: InstanceNameSettings? = nil, instanceChargePrepaid: InstanceChargePrepaid? = nil, diskTypePolicy: String? = nil, hpcClusterId: String? = nil, iPv6InternetAccessible: IPv6InternetAccessible? = nil, disasterRecoverGroupIds: [String]? = nil) {
            self.launchConfigurationName = launchConfigurationName
            self.imageId = imageId
            self.projectId = projectId
            self.instanceType = instanceType
            self.systemDisk = systemDisk
            self.dataDisks = dataDisks
            self.internetAccessible = internetAccessible
            self.loginSettings = loginSettings
            self.securityGroupIds = securityGroupIds
            self.enhancedService = enhancedService
            self.userData = userData
            self.instanceChargeType = instanceChargeType
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceTypes = instanceTypes
            self.camRoleName = camRoleName
            self.instanceTypesCheckPolicy = instanceTypesCheckPolicy
            self.instanceTags = instanceTags
            self.tags = tags
            self.hostNameSettings = hostNameSettings
            self.instanceNameSettings = instanceNameSettings
            self.instanceChargePrepaid = instanceChargePrepaid
            self.diskTypePolicy = diskTypePolicy
            self.hpcClusterId = hpcClusterId
            self.iPv6InternetAccessible = iPv6InternetAccessible
            self.disasterRecoverGroupIds = disasterRecoverGroupIds
        }

        enum CodingKeys: String, CodingKey {
            case launchConfigurationName = "LaunchConfigurationName"
            case imageId = "ImageId"
            case projectId = "ProjectId"
            case instanceType = "InstanceType"
            case systemDisk = "SystemDisk"
            case dataDisks = "DataDisks"
            case internetAccessible = "InternetAccessible"
            case loginSettings = "LoginSettings"
            case securityGroupIds = "SecurityGroupIds"
            case enhancedService = "EnhancedService"
            case userData = "UserData"
            case instanceChargeType = "InstanceChargeType"
            case instanceMarketOptions = "InstanceMarketOptions"
            case instanceTypes = "InstanceTypes"
            case camRoleName = "CamRoleName"
            case instanceTypesCheckPolicy = "InstanceTypesCheckPolicy"
            case instanceTags = "InstanceTags"
            case tags = "Tags"
            case hostNameSettings = "HostNameSettings"
            case instanceNameSettings = "InstanceNameSettings"
            case instanceChargePrepaid = "InstanceChargePrepaid"
            case diskTypePolicy = "DiskTypePolicy"
            case hpcClusterId = "HpcClusterId"
            case iPv6InternetAccessible = "IPv6InternetAccessible"
            case disasterRecoverGroupIds = "DisasterRecoverGroupIds"
        }
    }

    /// CreateLaunchConfiguration返回参数结构体
    public struct CreateLaunchConfigurationResponse: TCResponseModel {
        /// 当通过本接口来创建启动配置时会返回该参数，表示启动配置ID。
        public let launchConfigurationId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case launchConfigurationId = "LaunchConfigurationId"
            case requestId = "RequestId"
        }
    }

    /// 创建启动配置
    ///
    /// 本接口（CreateLaunchConfiguration）用于创建新的启动配置。
    ///
    /// * 启动配置，可以通过 `ModifyLaunchConfigurationAttributes` 修改少量字段。如需使用新的启动配置，建议重新创建启动配置。
    ///
    /// * 每个项目最多只能创建20个启动配置，详见[使用限制](https://cloud.tencent.com/document/product/377/3120)。
    @inlinable
    public func createLaunchConfiguration(_ input: CreateLaunchConfigurationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLaunchConfigurationResponse> {
        self.client.execute(action: "CreateLaunchConfiguration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建启动配置
    ///
    /// 本接口（CreateLaunchConfiguration）用于创建新的启动配置。
    ///
    /// * 启动配置，可以通过 `ModifyLaunchConfigurationAttributes` 修改少量字段。如需使用新的启动配置，建议重新创建启动配置。
    ///
    /// * 每个项目最多只能创建20个启动配置，详见[使用限制](https://cloud.tencent.com/document/product/377/3120)。
    @inlinable
    public func createLaunchConfiguration(_ input: CreateLaunchConfigurationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLaunchConfigurationResponse {
        try await self.client.execute(action: "CreateLaunchConfiguration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建启动配置
    ///
    /// 本接口（CreateLaunchConfiguration）用于创建新的启动配置。
    ///
    /// * 启动配置，可以通过 `ModifyLaunchConfigurationAttributes` 修改少量字段。如需使用新的启动配置，建议重新创建启动配置。
    ///
    /// * 每个项目最多只能创建20个启动配置，详见[使用限制](https://cloud.tencent.com/document/product/377/3120)。
    @inlinable
    public func createLaunchConfiguration(launchConfigurationName: String, imageId: String, projectId: UInt64? = nil, instanceType: String? = nil, systemDisk: SystemDisk? = nil, dataDisks: [DataDisk]? = nil, internetAccessible: InternetAccessible? = nil, loginSettings: LoginSettings? = nil, securityGroupIds: [String]? = nil, enhancedService: EnhancedService? = nil, userData: String? = nil, instanceChargeType: String? = nil, instanceMarketOptions: InstanceMarketOptionsRequest? = nil, instanceTypes: [String]? = nil, camRoleName: String? = nil, instanceTypesCheckPolicy: String? = nil, instanceTags: [InstanceTag]? = nil, tags: [Tag]? = nil, hostNameSettings: HostNameSettings? = nil, instanceNameSettings: InstanceNameSettings? = nil, instanceChargePrepaid: InstanceChargePrepaid? = nil, diskTypePolicy: String? = nil, hpcClusterId: String? = nil, iPv6InternetAccessible: IPv6InternetAccessible? = nil, disasterRecoverGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateLaunchConfigurationResponse> {
        self.createLaunchConfiguration(.init(launchConfigurationName: launchConfigurationName, imageId: imageId, projectId: projectId, instanceType: instanceType, systemDisk: systemDisk, dataDisks: dataDisks, internetAccessible: internetAccessible, loginSettings: loginSettings, securityGroupIds: securityGroupIds, enhancedService: enhancedService, userData: userData, instanceChargeType: instanceChargeType, instanceMarketOptions: instanceMarketOptions, instanceTypes: instanceTypes, camRoleName: camRoleName, instanceTypesCheckPolicy: instanceTypesCheckPolicy, instanceTags: instanceTags, tags: tags, hostNameSettings: hostNameSettings, instanceNameSettings: instanceNameSettings, instanceChargePrepaid: instanceChargePrepaid, diskTypePolicy: diskTypePolicy, hpcClusterId: hpcClusterId, iPv6InternetAccessible: iPv6InternetAccessible, disasterRecoverGroupIds: disasterRecoverGroupIds), region: region, logger: logger, on: eventLoop)
    }

    /// 创建启动配置
    ///
    /// 本接口（CreateLaunchConfiguration）用于创建新的启动配置。
    ///
    /// * 启动配置，可以通过 `ModifyLaunchConfigurationAttributes` 修改少量字段。如需使用新的启动配置，建议重新创建启动配置。
    ///
    /// * 每个项目最多只能创建20个启动配置，详见[使用限制](https://cloud.tencent.com/document/product/377/3120)。
    @inlinable
    public func createLaunchConfiguration(launchConfigurationName: String, imageId: String, projectId: UInt64? = nil, instanceType: String? = nil, systemDisk: SystemDisk? = nil, dataDisks: [DataDisk]? = nil, internetAccessible: InternetAccessible? = nil, loginSettings: LoginSettings? = nil, securityGroupIds: [String]? = nil, enhancedService: EnhancedService? = nil, userData: String? = nil, instanceChargeType: String? = nil, instanceMarketOptions: InstanceMarketOptionsRequest? = nil, instanceTypes: [String]? = nil, camRoleName: String? = nil, instanceTypesCheckPolicy: String? = nil, instanceTags: [InstanceTag]? = nil, tags: [Tag]? = nil, hostNameSettings: HostNameSettings? = nil, instanceNameSettings: InstanceNameSettings? = nil, instanceChargePrepaid: InstanceChargePrepaid? = nil, diskTypePolicy: String? = nil, hpcClusterId: String? = nil, iPv6InternetAccessible: IPv6InternetAccessible? = nil, disasterRecoverGroupIds: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateLaunchConfigurationResponse {
        try await self.createLaunchConfiguration(.init(launchConfigurationName: launchConfigurationName, imageId: imageId, projectId: projectId, instanceType: instanceType, systemDisk: systemDisk, dataDisks: dataDisks, internetAccessible: internetAccessible, loginSettings: loginSettings, securityGroupIds: securityGroupIds, enhancedService: enhancedService, userData: userData, instanceChargeType: instanceChargeType, instanceMarketOptions: instanceMarketOptions, instanceTypes: instanceTypes, camRoleName: camRoleName, instanceTypesCheckPolicy: instanceTypesCheckPolicy, instanceTags: instanceTags, tags: tags, hostNameSettings: hostNameSettings, instanceNameSettings: instanceNameSettings, instanceChargePrepaid: instanceChargePrepaid, diskTypePolicy: diskTypePolicy, hpcClusterId: hpcClusterId, iPv6InternetAccessible: iPv6InternetAccessible, disasterRecoverGroupIds: disasterRecoverGroupIds), region: region, logger: logger, on: eventLoop)
    }
}
