//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension As {
    /// RollbackInstanceRefresh请求参数结构体
    public struct RollbackInstanceRefreshRequest: TCRequest {
        /// 伸缩组ID。
        public let autoScalingGroupId: String

        /// 刷新设置。
        public let refreshSettings: RefreshSettings

        /// 原始刷新活动 ID。
        public let originRefreshActivityId: String

        /// 刷新模式，目前仅支持滚动更新，默认值为 ROLLING_UPDATE_RESET。
        public let refreshMode: String?

        public init(autoScalingGroupId: String, refreshSettings: RefreshSettings, originRefreshActivityId: String, refreshMode: String? = nil) {
            self.autoScalingGroupId = autoScalingGroupId
            self.refreshSettings = refreshSettings
            self.originRefreshActivityId = originRefreshActivityId
            self.refreshMode = refreshMode
        }

        enum CodingKeys: String, CodingKey {
            case autoScalingGroupId = "AutoScalingGroupId"
            case refreshSettings = "RefreshSettings"
            case originRefreshActivityId = "OriginRefreshActivityId"
            case refreshMode = "RefreshMode"
        }
    }

    /// RollbackInstanceRefresh返回参数结构体
    public struct RollbackInstanceRefreshResponse: TCResponse {
        /// 刷新活动 ID。
        public let refreshActivityId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case refreshActivityId = "RefreshActivityId"
            case requestId = "RequestId"
        }
    }

    /// 回滚实例刷新
    ///
    /// 回滚操作会生成一个新的实例刷新活动，该活动也支持分批次刷新以及暂停、恢复、取消操作，接口返回回滚活动的 RefreshActivityId。
    /// * 原活动中待刷新实例变更为已取消，忽略不存在实例，其他状态实例进入回滚流程
    /// * 原活动中正在刷新的实例不会立刻终止，刷新结束后再执行回滚活动
    /// * 暂停状态或最近一次成功的刷新活动支持回滚，其他状态不支持回滚
    /// * 原活动刷新方式为重装实例时，对于 ImageId参数，会自动恢复到回滚前镜像 ID；对于 UserData、EnhancedService、LoginSettings、 HostName 参数，依然会从启动配置中读取，需用户在回滚前自行修改启动配置
    @inlinable
    public func rollbackInstanceRefresh(_ input: RollbackInstanceRefreshRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RollbackInstanceRefreshResponse> {
        self.client.execute(action: "RollbackInstanceRefresh", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 回滚实例刷新
    ///
    /// 回滚操作会生成一个新的实例刷新活动，该活动也支持分批次刷新以及暂停、恢复、取消操作，接口返回回滚活动的 RefreshActivityId。
    /// * 原活动中待刷新实例变更为已取消，忽略不存在实例，其他状态实例进入回滚流程
    /// * 原活动中正在刷新的实例不会立刻终止，刷新结束后再执行回滚活动
    /// * 暂停状态或最近一次成功的刷新活动支持回滚，其他状态不支持回滚
    /// * 原活动刷新方式为重装实例时，对于 ImageId参数，会自动恢复到回滚前镜像 ID；对于 UserData、EnhancedService、LoginSettings、 HostName 参数，依然会从启动配置中读取，需用户在回滚前自行修改启动配置
    @inlinable
    public func rollbackInstanceRefresh(_ input: RollbackInstanceRefreshRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RollbackInstanceRefreshResponse {
        try await self.client.execute(action: "RollbackInstanceRefresh", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 回滚实例刷新
    ///
    /// 回滚操作会生成一个新的实例刷新活动，该活动也支持分批次刷新以及暂停、恢复、取消操作，接口返回回滚活动的 RefreshActivityId。
    /// * 原活动中待刷新实例变更为已取消，忽略不存在实例，其他状态实例进入回滚流程
    /// * 原活动中正在刷新的实例不会立刻终止，刷新结束后再执行回滚活动
    /// * 暂停状态或最近一次成功的刷新活动支持回滚，其他状态不支持回滚
    /// * 原活动刷新方式为重装实例时，对于 ImageId参数，会自动恢复到回滚前镜像 ID；对于 UserData、EnhancedService、LoginSettings、 HostName 参数，依然会从启动配置中读取，需用户在回滚前自行修改启动配置
    @inlinable
    public func rollbackInstanceRefresh(autoScalingGroupId: String, refreshSettings: RefreshSettings, originRefreshActivityId: String, refreshMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RollbackInstanceRefreshResponse> {
        self.rollbackInstanceRefresh(.init(autoScalingGroupId: autoScalingGroupId, refreshSettings: refreshSettings, originRefreshActivityId: originRefreshActivityId, refreshMode: refreshMode), region: region, logger: logger, on: eventLoop)
    }

    /// 回滚实例刷新
    ///
    /// 回滚操作会生成一个新的实例刷新活动，该活动也支持分批次刷新以及暂停、恢复、取消操作，接口返回回滚活动的 RefreshActivityId。
    /// * 原活动中待刷新实例变更为已取消，忽略不存在实例，其他状态实例进入回滚流程
    /// * 原活动中正在刷新的实例不会立刻终止，刷新结束后再执行回滚活动
    /// * 暂停状态或最近一次成功的刷新活动支持回滚，其他状态不支持回滚
    /// * 原活动刷新方式为重装实例时，对于 ImageId参数，会自动恢复到回滚前镜像 ID；对于 UserData、EnhancedService、LoginSettings、 HostName 参数，依然会从启动配置中读取，需用户在回滚前自行修改启动配置
    @inlinable
    public func rollbackInstanceRefresh(autoScalingGroupId: String, refreshSettings: RefreshSettings, originRefreshActivityId: String, refreshMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RollbackInstanceRefreshResponse {
        try await self.rollbackInstanceRefresh(.init(autoScalingGroupId: autoScalingGroupId, refreshSettings: refreshSettings, originRefreshActivityId: originRefreshActivityId, refreshMode: refreshMode), region: region, logger: logger, on: eventLoop)
    }
}
