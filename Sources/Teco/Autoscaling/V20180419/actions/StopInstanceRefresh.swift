//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension As {
    /// StopInstanceRefresh请求参数结构体
    public struct StopInstanceRefreshRequest: TCRequest {
        /// 伸缩组ID。
        public let autoScalingGroupId: String

        /// 刷新活动ID。
        public let refreshActivityId: String

        public init(autoScalingGroupId: String, refreshActivityId: String) {
            self.autoScalingGroupId = autoScalingGroupId
            self.refreshActivityId = refreshActivityId
        }

        enum CodingKeys: String, CodingKey {
            case autoScalingGroupId = "AutoScalingGroupId"
            case refreshActivityId = "RefreshActivityId"
        }
    }

    /// StopInstanceRefresh返回参数结构体
    public struct StopInstanceRefreshResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 暂停实例刷新
    ///
    /// 暂停正在执行的实例刷新活动。
    /// * 暂停状态下，伸缩组也会处于停用中状态
    /// * 当前正在更新的实例不会暂停，待更新的实例会暂停更新
    @inlinable @discardableResult
    public func stopInstanceRefresh(_ input: StopInstanceRefreshRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopInstanceRefreshResponse> {
        self.client.execute(action: "StopInstanceRefresh", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 暂停实例刷新
    ///
    /// 暂停正在执行的实例刷新活动。
    /// * 暂停状态下，伸缩组也会处于停用中状态
    /// * 当前正在更新的实例不会暂停，待更新的实例会暂停更新
    @inlinable @discardableResult
    public func stopInstanceRefresh(_ input: StopInstanceRefreshRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopInstanceRefreshResponse {
        try await self.client.execute(action: "StopInstanceRefresh", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 暂停实例刷新
    ///
    /// 暂停正在执行的实例刷新活动。
    /// * 暂停状态下，伸缩组也会处于停用中状态
    /// * 当前正在更新的实例不会暂停，待更新的实例会暂停更新
    @inlinable @discardableResult
    public func stopInstanceRefresh(autoScalingGroupId: String, refreshActivityId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopInstanceRefreshResponse> {
        self.stopInstanceRefresh(.init(autoScalingGroupId: autoScalingGroupId, refreshActivityId: refreshActivityId), region: region, logger: logger, on: eventLoop)
    }

    /// 暂停实例刷新
    ///
    /// 暂停正在执行的实例刷新活动。
    /// * 暂停状态下，伸缩组也会处于停用中状态
    /// * 当前正在更新的实例不会暂停，待更新的实例会暂停更新
    @inlinable @discardableResult
    public func stopInstanceRefresh(autoScalingGroupId: String, refreshActivityId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopInstanceRefreshResponse {
        try await self.stopInstanceRefresh(.init(autoScalingGroupId: autoScalingGroupId, refreshActivityId: refreshActivityId), region: region, logger: logger, on: eventLoop)
    }
}
