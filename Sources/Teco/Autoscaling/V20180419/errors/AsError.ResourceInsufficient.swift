//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCAsError {
    public struct ResourceInsufficient: TCAsErrorType {
        enum Code: String {
            case autoScalingGroupAboveMaxSize = "ResourceInsufficient.AutoScalingGroupAboveMaxSize"
            case autoScalingGroupBelowMinSize = "ResourceInsufficient.AutoScalingGroupBelowMinSize"
            case inServiceInstanceAboveMaxSize = "ResourceInsufficient.InServiceInstanceAboveMaxSize"
            case inServiceInstanceBelowMinSize = "ResourceInsufficient.InServiceInstanceBelowMinSize"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 超过伸缩组最大实例数。
        public static var autoScalingGroupAboveMaxSize: ResourceInsufficient {
            ResourceInsufficient(.autoScalingGroupAboveMaxSize)
        }

        /// 少于伸缩组最小实例数。
        public static var autoScalingGroupBelowMinSize: ResourceInsufficient {
            ResourceInsufficient(.autoScalingGroupBelowMinSize)
        }

        /// 伸缩组内实例数超过最大实例数。
        public static var inServiceInstanceAboveMaxSize: ResourceInsufficient {
            ResourceInsufficient(.inServiceInstanceAboveMaxSize)
        }

        /// 伸缩组内实例数低于最小实例数。
        public static var inServiceInstanceBelowMinSize: ResourceInsufficient {
            ResourceInsufficient(.inServiceInstanceBelowMinSize)
        }

        public func asAsError() -> TCAsError {
            let code: TCAsError.Code
            switch self.error {
            case .autoScalingGroupAboveMaxSize:
                code = .resourceInsufficient_AutoScalingGroupAboveMaxSize
            case .autoScalingGroupBelowMinSize:
                code = .resourceInsufficient_AutoScalingGroupBelowMinSize
            case .inServiceInstanceAboveMaxSize:
                code = .resourceInsufficient_InServiceInstanceAboveMaxSize
            case .inServiceInstanceBelowMinSize:
                code = .resourceInsufficient_InServiceInstanceBelowMinSize
            }
            return TCAsError(code, context: self.context)
        }
    }
}
