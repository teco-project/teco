//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCAsError {
    public struct ResourceInUse: TCAsErrorType {
        enum Code: String {
            case activityInProgress = "ResourceInUse.ActivityInProgress"
            case autoScalingGroupNotActive = "ResourceInUse.AutoScalingGroupNotActive"
            case instanceInGroup = "ResourceInUse.InstanceInGroup"
            case launchConfigurationIdInUse = "ResourceInUse.LaunchConfigurationIdInUse"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 伸缩组正在执行伸缩活动。
        public static var activityInProgress: ResourceInUse {
            ResourceInUse(.activityInProgress)
        }

        /// 伸缩组处于禁用状态。
        public static var autoScalingGroupNotActive: ResourceInUse {
            ResourceInUse(.autoScalingGroupNotActive)
        }

        /// 伸缩组内尚有正常实例。
        public static var instanceInGroup: ResourceInUse {
            ResourceInUse(.instanceInGroup)
        }

        /// 指定的启动配置仍在伸缩组中使用。
        public static var launchConfigurationIdInUse: ResourceInUse {
            ResourceInUse(.launchConfigurationIdInUse)
        }

        public func asAsError() -> TCAsError {
            let code: TCAsError.Code
            switch self.error {
            case .activityInProgress:
                code = .resourceInUse_ActivityInProgress
            case .autoScalingGroupNotActive:
                code = .resourceInUse_AutoScalingGroupNotActive
            case .instanceInGroup:
                code = .resourceInUse_InstanceInGroup
            case .launchConfigurationIdInUse:
                code = .resourceInUse_LaunchConfigurationIdInUse
            }
            return TCAsError(code, context: self.context)
        }
    }
}
