//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCAsError {
    public struct ResourceInUse: TCErrorType {
        enum Code: String {
            case activityInProgress = "ResourceInUse.ActivityInProgress"
            case autoScalingGroupNotActive = "ResourceInUse.AutoScalingGroupNotActive"
            case instanceInGroup = "ResourceInUse.InstanceInGroup"
            case launchConfigurationIdInUse = "ResourceInUse.LaunchConfigurationIdInUse"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 伸缩组正在执行伸缩活动。
        public static var activityInProgress: ResourceInUse {
            ResourceInUse(.activityInProgress)
        }
        
        /// 伸缩组处于禁用状态。
        public static var autoScalingGroupNotActive: ResourceInUse {
            ResourceInUse(.autoScalingGroupNotActive)
        }
        
        /// 伸缩组内尚有正常实例。
        public static var instanceInGroup: ResourceInUse {
            ResourceInUse(.instanceInGroup)
        }
        
        /// 指定的启动配置仍在伸缩组中使用。
        public static var launchConfigurationIdInUse: ResourceInUse {
            ResourceInUse(.launchConfigurationIdInUse)
        }
    }
}

extension TCAsError.ResourceInUse: Equatable {
    public static func == (lhs: TCAsError.ResourceInUse, rhs: TCAsError.ResourceInUse) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCAsError.ResourceInUse: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCAsError.ResourceInUse {
    /// - Returns: ``TCAsError`` that holds the same error and context.
    public func toAsError() -> TCAsError {
        guard let code = TCAsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCAsError(code, context: self.context)
    }
}

extension TCAsError.ResourceInUse {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
