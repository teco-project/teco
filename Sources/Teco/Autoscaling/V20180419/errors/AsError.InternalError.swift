//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCAsError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case callCmqError = "InternalError.CallCmqError"
            case callError = "InternalError.CallError"
            case callLbError = "InternalError.CallLbError"
            case callMonitorError = "InternalError.CallMonitorError"
            case callNotificationError = "InternalError.CallNotificationError"
            case callStsError = "InternalError.CallStsError"
            case callTATError = "InternalError.CallTATError"
            case callTagError = "InternalError.CallTagError"
            case callTvpcError = "InternalError.CallTvpcError"
            case callVpcError = "InternalError.CallVpcError"
            case calleeError = "InternalError.CalleeError"
            case requestError = "InternalError.RequestError"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// Cmq 接口调用失败。
        public static var callCmqError: InternalError {
            InternalError(.callCmqError)
        }
        
        /// 内部接口调用失败。
        public static var callError: InternalError {
            InternalError(.callError)
        }
        
        /// LB 接口调用失败。
        public static var callLbError: InternalError {
            InternalError(.callLbError)
        }
        
        /// Monitor接口调用失败。
        public static var callMonitorError: InternalError {
            InternalError(.callMonitorError)
        }
        
        /// 通知服务接口调用失败。
        public static var callNotificationError: InternalError {
            InternalError(.callNotificationError)
        }
        
        /// STS 接口调用失败。
        public static var callStsError: InternalError {
            InternalError(.callStsError)
        }
        
        public static var callTATError: InternalError {
            InternalError(.callTATError)
        }
        
        /// Tag 接口调用失败。
        public static var callTagError: InternalError {
            InternalError(.callTagError)
        }
        
        /// Tvpc 接口调用失败。
        public static var callTvpcError: InternalError {
            InternalError(.callTvpcError)
        }
        
        /// VPC接口调用失败。
        public static var callVpcError: InternalError {
            InternalError(.callVpcError)
        }
        
        /// 调用其他服务异常。
        public static var calleeError: InternalError {
            InternalError(.calleeError)
        }
        
        /// 内部请求错误。
        public static var requestError: InternalError {
            InternalError(.requestError)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCAsError.InternalError: Equatable {
    public static func == (lhs: TCAsError.InternalError, rhs: TCAsError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCAsError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCAsError.InternalError {
    public func toAsError() -> TCAsError {
        guard let code = TCAsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCAsError(code, context: self.context)
    }
}