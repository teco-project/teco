//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEsError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case clusterResourceLimitError = "FailedOperation.ClusterResourceLimitError"
            case diskCountParamError = "FailedOperation.DiskCountParamError"
            case errorClusterState = "FailedOperation.ErrorClusterState"
            case errorClusterStateNoReplication = "FailedOperation.ErrorClusterStateNoReplication"
            case errorClusterStateUnhealth = "FailedOperation.ErrorClusterStateUnhealth"
            case noPayment = "FailedOperation.NoPayment"
            case notAuthenticated = "FailedOperation.NotAuthenticated"
            case unsupportResetNodeTypeAndScaleoutDisk = "FailedOperation.UnsupportResetNodeTypeAndScaleoutDisk"
            case unsupportResetScaledownAndModifyDisk = "FailedOperation.UnsupportResetScaledownAndModifyDisk"
            case unsupportReverseRegulationNodeTypeAndDisk = "FailedOperation.UnsupportReverseRegulationNodeTypeAndDisk"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 集群资源配额限制错误。
        public static var clusterResourceLimitError: FailedOperation {
            FailedOperation(.clusterResourceLimitError)
        }
        
        /// 节点磁盘块数参数检查失败。
        public static var diskCountParamError: FailedOperation {
            FailedOperation(.diskCountParamError)
        }
        
        /// 集群状态错误。
        public static var errorClusterState: FailedOperation {
            FailedOperation(.errorClusterState)
        }
        
        /// 集群索引没有副本存在。
        public static var errorClusterStateNoReplication: FailedOperation {
            FailedOperation(.errorClusterStateNoReplication)
        }
        
        /// 集群状态不健康。
        public static var errorClusterStateUnhealth: FailedOperation {
            FailedOperation(.errorClusterStateUnhealth)
        }
        
        /// 账户未绑定信用卡或paypal，无法支付。
        public static var noPayment: FailedOperation {
            FailedOperation(.noPayment)
        }
        
        /// 用户未实名认证。
        public static var notAuthenticated: FailedOperation {
            FailedOperation(.notAuthenticated)
        }
        
        /// 不支持在滚动重启扩容计算资源同时扩容磁盘数量。
        public static var unsupportResetNodeTypeAndScaleoutDisk: FailedOperation {
            FailedOperation(.unsupportResetNodeTypeAndScaleoutDisk)
        }
        
        /// 不支持滚动缩容计算资源同时修改磁盘大小。
        public static var unsupportResetScaledownAndModifyDisk: FailedOperation {
            FailedOperation(.unsupportResetScaledownAndModifyDisk)
        }
        
        /// 不支持反向调节节点配置和磁盘容量。
        public static var unsupportReverseRegulationNodeTypeAndDisk: FailedOperation {
            FailedOperation(.unsupportReverseRegulationNodeTypeAndDisk)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCEsError.FailedOperation: Equatable {
    public static func == (lhs: TCEsError.FailedOperation, rhs: TCEsError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEsError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEsError.FailedOperation {
    public func toEsError() -> TCEsError {
        guard let code = TCEsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEsError(code, context: self.context)
    }
}