//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCEsError {
    public struct LimitExceeded: TCEsErrorType {
        enum Code: String {
            case clusterNum = "LimitExceeded.ClusterNum"
            case diagnoseCount = "LimitExceeded.DiagnoseCount"
            case nodeNumOrIndices = "LimitExceeded.NodeNumOrIndices"
            case pluginInstall = "LimitExceeded.PluginInstall"
            case resourceLimit = "LimitExceeded.ResourceLimit"
            case updateItemLimit = "LimitExceeded.UpdateItemLimit"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var clusterNum: LimitExceeded {
            LimitExceeded(.clusterNum)
        }

        public static var diagnoseCount: LimitExceeded {
            LimitExceeded(.diagnoseCount)
        }

        public static var nodeNumOrIndices: LimitExceeded {
            LimitExceeded(.nodeNumOrIndices)
        }

        public static var pluginInstall: LimitExceeded {
            LimitExceeded(.pluginInstall)
        }

        public static var resourceLimit: LimitExceeded {
            LimitExceeded(.resourceLimit)
        }

        public static var updateItemLimit: LimitExceeded {
            LimitExceeded(.updateItemLimit)
        }

        public func asEsError() -> TCEsError {
            let code: TCEsError.Code
            switch self.error {
            case .clusterNum:
                code = .limitExceeded_ClusterNum
            case .diagnoseCount:
                code = .limitExceeded_DiagnoseCount
            case .nodeNumOrIndices:
                code = .limitExceeded_NodeNumOrIndices
            case .pluginInstall:
                code = .limitExceeded_PluginInstall
            case .resourceLimit:
                code = .limitExceeded_ResourceLimit
            case .updateItemLimit:
                code = .limitExceeded_UpdateItemLimit
            }
            return TCEsError(code, context: self.context)
        }
    }
}
