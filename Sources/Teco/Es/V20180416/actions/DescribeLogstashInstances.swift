//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Es {
    /// DescribeLogstashInstances请求参数结构体
    public struct DescribeLogstashInstancesRequest: TCPaginatedRequest {
        /// 实例所属可用区，不传则默认所有可用区
        public let zone: String?

        /// 实例ID列表
        public let instanceIds: [String]?

        /// 实例名称列表
        public let instanceNames: [String]?

        /// 分页起始值, 默认值0
        public let offset: UInt64?

        /// 分页大小，默认值20
        public let limit: UInt64?

        /// 排序字段
        /// - 1：实例ID
        /// - 2：实例名称
        /// - 3：可用区
        /// - 4：创建时间
        /// 若orderKey未传递则按创建时间降序排序
        public let orderByKey: UInt64?

        /// 排序方式
        /// - 0：升序
        /// - 1：降序
        /// 若传递了orderByKey未传递orderByType, 则默认升序
        public let orderByType: UInt64?

        /// VpcId 筛选项
        public let vpcIds: [String]?

        /// 标签信息列表
        public let tagList: [TagInfo]?

        public init(zone: String? = nil, instanceIds: [String]? = nil, instanceNames: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, orderByKey: UInt64? = nil, orderByType: UInt64? = nil, vpcIds: [String]? = nil, tagList: [TagInfo]? = nil) {
            self.zone = zone
            self.instanceIds = instanceIds
            self.instanceNames = instanceNames
            self.offset = offset
            self.limit = limit
            self.orderByKey = orderByKey
            self.orderByType = orderByType
            self.vpcIds = vpcIds
            self.tagList = tagList
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case instanceIds = "InstanceIds"
            case instanceNames = "InstanceNames"
            case offset = "Offset"
            case limit = "Limit"
            case orderByKey = "OrderByKey"
            case orderByType = "OrderByType"
            case vpcIds = "VpcIds"
            case tagList = "TagList"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeLogstashInstancesResponse) -> DescribeLogstashInstancesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(zone: self.zone, instanceIds: self.instanceIds, instanceNames: self.instanceNames, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, orderByKey: self.orderByKey, orderByType: self.orderByType, vpcIds: self.vpcIds, tagList: self.tagList)
        }
    }

    /// DescribeLogstashInstances返回参数结构体
    public struct DescribeLogstashInstancesResponse: TCPaginatedResponse {
        /// 返回的实例个数
        public let totalCount: UInt64

        /// 实例详细信息列表
        public let instanceList: [LogstashInstanceInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case instanceList = "InstanceList"
            case requestId = "RequestId"
        }

        /// Extract the returned ``LogstashInstanceInfo`` list from the paginated response.
        public func getItems() -> [LogstashInstanceInfo] {
            self.instanceList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取Logstash实例列表
    ///
    /// 查询用户该地域下符合条件的所有Logstash实例
    @inlinable
    public func describeLogstashInstances(_ input: DescribeLogstashInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLogstashInstancesResponse> {
        self.client.execute(action: "DescribeLogstashInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取Logstash实例列表
    ///
    /// 查询用户该地域下符合条件的所有Logstash实例
    @inlinable
    public func describeLogstashInstances(_ input: DescribeLogstashInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLogstashInstancesResponse {
        try await self.client.execute(action: "DescribeLogstashInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取Logstash实例列表
    ///
    /// 查询用户该地域下符合条件的所有Logstash实例
    @inlinable
    public func describeLogstashInstances(zone: String? = nil, instanceIds: [String]? = nil, instanceNames: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, orderByKey: UInt64? = nil, orderByType: UInt64? = nil, vpcIds: [String]? = nil, tagList: [TagInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLogstashInstancesResponse> {
        self.describeLogstashInstances(.init(zone: zone, instanceIds: instanceIds, instanceNames: instanceNames, offset: offset, limit: limit, orderByKey: orderByKey, orderByType: orderByType, vpcIds: vpcIds, tagList: tagList), region: region, logger: logger, on: eventLoop)
    }

    /// 获取Logstash实例列表
    ///
    /// 查询用户该地域下符合条件的所有Logstash实例
    @inlinable
    public func describeLogstashInstances(zone: String? = nil, instanceIds: [String]? = nil, instanceNames: [String]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, orderByKey: UInt64? = nil, orderByType: UInt64? = nil, vpcIds: [String]? = nil, tagList: [TagInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLogstashInstancesResponse {
        try await self.describeLogstashInstances(.init(zone: zone, instanceIds: instanceIds, instanceNames: instanceNames, offset: offset, limit: limit, orderByKey: orderByKey, orderByType: orderByType, vpcIds: vpcIds, tagList: tagList), region: region, logger: logger, on: eventLoop)
    }

    /// 获取Logstash实例列表
    ///
    /// 查询用户该地域下符合条件的所有Logstash实例
    @inlinable
    public func describeLogstashInstancesPaginated(_ input: DescribeLogstashInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [LogstashInstanceInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeLogstashInstances, logger: logger, on: eventLoop)
    }

    /// 获取Logstash实例列表
    ///
    /// 查询用户该地域下符合条件的所有Logstash实例
    @inlinable @discardableResult
    public func describeLogstashInstancesPaginated(_ input: DescribeLogstashInstancesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeLogstashInstancesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeLogstashInstances, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取Logstash实例列表
    ///
    /// 查询用户该地域下符合条件的所有Logstash实例
    ///
    /// - Returns: `AsyncSequence`s of ``LogstashInstanceInfo`` and ``DescribeLogstashInstancesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeLogstashInstancesPaginator(_ input: DescribeLogstashInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeLogstashInstancesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeLogstashInstances, logger: logger, on: eventLoop)
    }
}
