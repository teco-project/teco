//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Es {
    /// DescribeIndexMeta请求参数结构体
    public struct DescribeIndexMetaRequest: TCRequest {
        /// ES集群ID
        public let instanceId: String

        /// 索引类型。auto：自治索引；normal：普通索引
        public let indexType: String

        /// 索引名，若填空则获取所有索引
        public let indexName: String

        /// 集群访问用户名
        public let username: String?

        /// 集群访问密码
        public let password: String?

        public init(instanceId: String, indexType: String, indexName: String, username: String? = nil, password: String? = nil) {
            self.instanceId = instanceId
            self.indexType = indexType
            self.indexName = indexName
            self.username = username
            self.password = password
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case indexType = "IndexType"
            case indexName = "IndexName"
            case username = "Username"
            case password = "Password"
        }
    }

    /// DescribeIndexMeta返回参数结构体
    public struct DescribeIndexMetaResponse: TCResponse {
        /// 索引元数据字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexMetaField: IndexMetaField?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case indexMetaField = "IndexMetaField"
            case requestId = "RequestId"
        }
    }

    /// 获取索引元数据
    @inlinable
    public func describeIndexMeta(_ input: DescribeIndexMetaRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIndexMetaResponse> {
        self.client.execute(action: "DescribeIndexMeta", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取索引元数据
    @inlinable
    public func describeIndexMeta(_ input: DescribeIndexMetaRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIndexMetaResponse {
        try await self.client.execute(action: "DescribeIndexMeta", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取索引元数据
    @inlinable
    public func describeIndexMeta(instanceId: String, indexType: String, indexName: String, username: String? = nil, password: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIndexMetaResponse> {
        self.describeIndexMeta(.init(instanceId: instanceId, indexType: indexType, indexName: indexName, username: username, password: password), region: region, logger: logger, on: eventLoop)
    }

    /// 获取索引元数据
    @inlinable
    public func describeIndexMeta(instanceId: String, indexType: String, indexName: String, username: String? = nil, password: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIndexMetaResponse {
        try await self.describeIndexMeta(.init(instanceId: instanceId, indexType: indexType, indexName: indexName, username: username, password: password), region: region, logger: logger, on: eventLoop)
    }
}
