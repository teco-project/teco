//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Es {
    /// DescribeInstanceOperations请求参数结构体
    public struct DescribeInstanceOperationsRequest: TCPaginatedRequest {
        /// 集群实例ID
        public let instanceId: String

        /// 起始时间, e.g. "2019-03-07 16:30:39"
        public let startTime: String

        /// 结束时间, e.g. "2019-03-30 20:18:03"
        public let endTime: String

        /// 分页起始值
        public let offset: UInt64

        /// 分页大小
        public let limit: UInt64

        public init(instanceId: String, startTime: String, endTime: String, offset: UInt64, limit: UInt64) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeInstanceOperationsResponse) -> DescribeInstanceOperationsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeInstanceOperationsRequest(instanceId: self.instanceId, startTime: self.startTime, endTime: self.endTime, offset: self.offset + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeInstanceOperations返回参数结构体
    public struct DescribeInstanceOperationsResponse: TCPaginatedResponse {
        /// 操作记录总数
        public let totalCount: UInt64

        /// 操作记录
        public let operations: [Operation]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case operations = "Operations"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Operation] {
            self.operations
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询实例操作记录
    ///
    /// 查询实例指定条件下的操作记录
    @inlinable
    public func describeInstanceOperations(_ input: DescribeInstanceOperationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceOperationsResponse> {
        self.client.execute(action: "DescribeInstanceOperations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例操作记录
    ///
    /// 查询实例指定条件下的操作记录
    @inlinable
    public func describeInstanceOperations(_ input: DescribeInstanceOperationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceOperationsResponse {
        try await self.client.execute(action: "DescribeInstanceOperations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例操作记录
    ///
    /// 查询实例指定条件下的操作记录
    @inlinable
    public func describeInstanceOperations(instanceId: String, startTime: String, endTime: String, offset: UInt64, limit: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceOperationsResponse> {
        let input = DescribeInstanceOperationsRequest(instanceId: instanceId, startTime: startTime, endTime: endTime, offset: offset, limit: limit)
        return self.client.execute(action: "DescribeInstanceOperations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例操作记录
    ///
    /// 查询实例指定条件下的操作记录
    @inlinable
    public func describeInstanceOperations(instanceId: String, startTime: String, endTime: String, offset: UInt64, limit: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceOperationsResponse {
        let input = DescribeInstanceOperationsRequest(instanceId: instanceId, startTime: startTime, endTime: endTime, offset: offset, limit: limit)
        return try await self.client.execute(action: "DescribeInstanceOperations", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例操作记录
    ///
    /// 查询实例指定条件下的操作记录
    @inlinable
    public func describeInstanceOperationsPaginated(_ input: DescribeInstanceOperationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [Operation])> {
        self.client.paginate(input: input, region: region, command: self.describeInstanceOperations, logger: logger, on: eventLoop)
    }

    /// 查询实例操作记录
    ///
    /// 查询实例指定条件下的操作记录
    @inlinable @discardableResult
    public func describeInstanceOperationsPaginated(_ input: DescribeInstanceOperationsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeInstanceOperationsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeInstanceOperations, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询实例操作记录
    ///
    /// 查询实例指定条件下的操作记录
    ///
    /// - Returns: `AsyncSequence`s of `Operation` and `DescribeInstanceOperationsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeInstanceOperationsPaginator(_ input: DescribeInstanceOperationsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeInstanceOperationsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeInstanceOperations, logger: logger, on: eventLoop)
    }
}
