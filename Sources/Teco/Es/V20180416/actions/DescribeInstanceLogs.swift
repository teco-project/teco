//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Es {
    /// DescribeInstanceLogs请求参数结构体
    public struct DescribeInstanceLogsRequest: TCPaginatedRequest {
        /// 集群实例ID
        public let instanceId: String

        /// 日志类型，默认值为1
        /// - 1, 主日志
        /// - 2, 搜索慢日志
        /// - 3, 索引慢日志
        /// - 4, GC日志
        public let logType: UInt64?

        /// 搜索词，支持LUCENE语法，如 level:WARN、ip:1.1.1.1、message:test-index等
        public let searchKey: String?

        /// 日志开始时间，格式为YYYY-MM-DD HH:MM:SS, 如2019-01-22 20:15:53
        public let startTime: String?

        /// 日志结束时间，格式为YYYY-MM-DD HH:MM:SS, 如2019-01-22 20:15:53
        public let endTime: String?

        /// 分页起始值, 默认值为0
        public let offset: UInt64?

        /// 分页大小，默认值为100，最大值100
        public let limit: UInt64?

        /// 时间排序方式，默认值为0
        /// - 0, 降序
        /// - 1, 升序
        public let orderByType: UInt64?

        public init(instanceId: String, logType: UInt64? = nil, searchKey: String? = nil, startTime: String? = nil, endTime: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, orderByType: UInt64? = nil) {
            self.instanceId = instanceId
            self.logType = logType
            self.searchKey = searchKey
            self.startTime = startTime
            self.endTime = endTime
            self.offset = offset
            self.limit = limit
            self.orderByType = orderByType
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case logType = "LogType"
            case searchKey = "SearchKey"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
            case orderByType = "OrderByType"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeInstanceLogsResponse) -> DescribeInstanceLogsRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(instanceId: self.instanceId, logType: self.logType, searchKey: self.searchKey, startTime: self.startTime, endTime: self.endTime, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, orderByType: self.orderByType)
        }
    }

    /// DescribeInstanceLogs返回参数结构体
    public struct DescribeInstanceLogsResponse: TCPaginatedResponse {
        /// 返回的日志条数
        public let totalCount: UInt64

        /// 日志详细信息列表
        public let instanceLogList: [InstanceLog]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case instanceLogList = "InstanceLogList"
            case requestId = "RequestId"
        }

        /// Extract the returned ``InstanceLog`` list from the paginated response.
        public func getItems() -> [InstanceLog] {
            self.instanceLogList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询ES集群日志
    ///
    /// 查询用户该地域下符合条件的ES集群的日志
    @inlinable
    public func describeInstanceLogs(_ input: DescribeInstanceLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceLogsResponse> {
        self.client.execute(action: "DescribeInstanceLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询ES集群日志
    ///
    /// 查询用户该地域下符合条件的ES集群的日志
    @inlinable
    public func describeInstanceLogs(_ input: DescribeInstanceLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceLogsResponse {
        try await self.client.execute(action: "DescribeInstanceLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询ES集群日志
    ///
    /// 查询用户该地域下符合条件的ES集群的日志
    @inlinable
    public func describeInstanceLogs(instanceId: String, logType: UInt64? = nil, searchKey: String? = nil, startTime: String? = nil, endTime: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, orderByType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceLogsResponse> {
        self.describeInstanceLogs(.init(instanceId: instanceId, logType: logType, searchKey: searchKey, startTime: startTime, endTime: endTime, offset: offset, limit: limit, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询ES集群日志
    ///
    /// 查询用户该地域下符合条件的ES集群的日志
    @inlinable
    public func describeInstanceLogs(instanceId: String, logType: UInt64? = nil, searchKey: String? = nil, startTime: String? = nil, endTime: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, orderByType: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceLogsResponse {
        try await self.describeInstanceLogs(.init(instanceId: instanceId, logType: logType, searchKey: searchKey, startTime: startTime, endTime: endTime, offset: offset, limit: limit, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询ES集群日志
    ///
    /// 查询用户该地域下符合条件的ES集群的日志
    @inlinable
    public func describeInstanceLogsPaginated(_ input: DescribeInstanceLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [InstanceLog])> {
        self.client.paginate(input: input, region: region, command: self.describeInstanceLogs, logger: logger, on: eventLoop)
    }

    /// 查询ES集群日志
    ///
    /// 查询用户该地域下符合条件的ES集群的日志
    @inlinable @discardableResult
    public func describeInstanceLogsPaginated(_ input: DescribeInstanceLogsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeInstanceLogsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeInstanceLogs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询ES集群日志
    ///
    /// 查询用户该地域下符合条件的ES集群的日志
    ///
    /// - Returns: `AsyncSequence`s of ``InstanceLog`` and ``DescribeInstanceLogsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeInstanceLogsPaginator(_ input: DescribeInstanceLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeInstanceLogsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeInstanceLogs, logger: logger, on: eventLoop)
    }
}
