//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Es {
    /// UpgradeInstance请求参数结构体
    public struct UpgradeInstanceRequest: TCRequest {
        /// 实例ID
        public let instanceId: String

        /// 目标ES版本，支持：”6.4.3“, "6.8.2"，"7.5.1", "7.10.1", "7.14.2"
        public let esVersion: String

        /// 是否只做升级检查，默认值为false
        public let checkOnly: Bool?

        /// 目标商业特性版本：
        /// - oss 开源版
        /// - basic 基础版
        /// 当前仅在5.6.4升级6.x版本时使用，默认值为basic
        public let licenseType: String?

        /// 6.8（及以上版本）基础版是否开启xpack security认证
        /// - 1：不开启
        /// - 2：开启
        public let basicSecurityType: UInt64?

        /// 升级方式：
        /// - scale 蓝绿变更
        /// - restart 滚动重启
        /// 默认值为scale
        public let upgradeMode: String?

        /// 升级版本前是否对集群进行备份，默认不备份
        public let cosBackup: Bool?

        /// 滚动模式时，是否跳过检查，进行强制重启。默认值为false
        public let skipCheckForceRestart: Bool?

        public init(instanceId: String, esVersion: String, checkOnly: Bool? = nil, licenseType: String? = nil, basicSecurityType: UInt64? = nil, upgradeMode: String? = nil, cosBackup: Bool? = nil, skipCheckForceRestart: Bool? = nil) {
            self.instanceId = instanceId
            self.esVersion = esVersion
            self.checkOnly = checkOnly
            self.licenseType = licenseType
            self.basicSecurityType = basicSecurityType
            self.upgradeMode = upgradeMode
            self.cosBackup = cosBackup
            self.skipCheckForceRestart = skipCheckForceRestart
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case esVersion = "EsVersion"
            case checkOnly = "CheckOnly"
            case licenseType = "LicenseType"
            case basicSecurityType = "BasicSecurityType"
            case upgradeMode = "UpgradeMode"
            case cosBackup = "CosBackup"
            case skipCheckForceRestart = "SkipCheckForceRestart"
        }
    }

    /// UpgradeInstance返回参数结构体
    public struct UpgradeInstanceResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 升级ES集群版本
    @inlinable @discardableResult
    public func upgradeInstance(_ input: UpgradeInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeInstanceResponse> {
        self.client.execute(action: "UpgradeInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 升级ES集群版本
    @inlinable @discardableResult
    public func upgradeInstance(_ input: UpgradeInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeInstanceResponse {
        try await self.client.execute(action: "UpgradeInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 升级ES集群版本
    @inlinable @discardableResult
    public func upgradeInstance(instanceId: String, esVersion: String, checkOnly: Bool? = nil, licenseType: String? = nil, basicSecurityType: UInt64? = nil, upgradeMode: String? = nil, cosBackup: Bool? = nil, skipCheckForceRestart: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeInstanceResponse> {
        self.upgradeInstance(.init(instanceId: instanceId, esVersion: esVersion, checkOnly: checkOnly, licenseType: licenseType, basicSecurityType: basicSecurityType, upgradeMode: upgradeMode, cosBackup: cosBackup, skipCheckForceRestart: skipCheckForceRestart), region: region, logger: logger, on: eventLoop)
    }

    /// 升级ES集群版本
    @inlinable @discardableResult
    public func upgradeInstance(instanceId: String, esVersion: String, checkOnly: Bool? = nil, licenseType: String? = nil, basicSecurityType: UInt64? = nil, upgradeMode: String? = nil, cosBackup: Bool? = nil, skipCheckForceRestart: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeInstanceResponse {
        try await self.upgradeInstance(.init(instanceId: instanceId, esVersion: esVersion, checkOnly: checkOnly, licenseType: licenseType, basicSecurityType: basicSecurityType, upgradeMode: upgradeMode, cosBackup: cosBackup, skipCheckForceRestart: skipCheckForceRestart), region: region, logger: logger, on: eventLoop)
    }
}
