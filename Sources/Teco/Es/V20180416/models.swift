//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Es {
    /// 后备索引元数据字段
    public struct BackingIndexMetaField: TCOutputModel {
        /// 后备索引名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexName: String?

        /// 后备索引状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexStatus: String?

        /// 后备索引存储大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexStorage: Int64?

        /// 后备索引当前生命周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexPhrase: String?

        /// 后备索引创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexCreateTime: String?

        enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case indexStatus = "IndexStatus"
            case indexStorage = "IndexStorage"
            case indexPhrase = "IndexPhrase"
            case indexCreateTime = "IndexCreateTime"
        }
    }

    /// 集群维度视图数据
    public struct ClusterView: TCOutputModel {
        /// 集群健康状态
        public let health: Float?

        /// 集群是否可见
        public let visible: Float

        /// 集群是否熔断
        public let `break`: Float

        /// 平均磁盘使用率
        public let avgDiskUsage: Float

        /// 平均内存使用率
        public let avgMemUsage: Float

        /// 平均cpu使用率
        public let avgCpuUsage: Float

        /// 集群总存储大小
        public let totalDiskSize: UInt64

        /// 客户端请求节点
        public let targetNodeTypes: [String]

        /// 在线节点数
        public let nodeNum: Int64

        /// 总节点数
        public let totalNodeNum: Int64

        /// 数据节点数
        public let dataNodeNum: Int64

        /// 索引数
        public let indexNum: Int64

        /// 文档数
        public let docNum: Int64

        /// 磁盘已使用字节数
        public let diskUsedInBytes: Int64

        /// 分片个数
        public let shardNum: Int64

        /// 主分片个数
        public let primaryShardNum: Int64

        /// 迁移中的分片个数
        public let relocatingShardNum: Int64

        /// 初始化中的分片个数
        public let initializingShardNum: Int64

        /// 未分配的分片个数
        public let unassignedShardNum: Int64

        /// 企业版COS存储容量大小，单位GB
        public let totalCosStorage: Int64

        /// 企业版集群可搜索快照cos存放的bucket名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let searchableSnapshotCosBucket: String?

        /// 企业版集群可搜索快照cos所属appid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let searchableSnapshotCosAppId: String?

        enum CodingKeys: String, CodingKey {
            case health = "Health"
            case visible = "Visible"
            case `break` = "Break"
            case avgDiskUsage = "AvgDiskUsage"
            case avgMemUsage = "AvgMemUsage"
            case avgCpuUsage = "AvgCpuUsage"
            case totalDiskSize = "TotalDiskSize"
            case targetNodeTypes = "TargetNodeTypes"
            case nodeNum = "NodeNum"
            case totalNodeNum = "TotalNodeNum"
            case dataNodeNum = "DataNodeNum"
            case indexNum = "IndexNum"
            case docNum = "DocNum"
            case diskUsedInBytes = "DiskUsedInBytes"
            case shardNum = "ShardNum"
            case primaryShardNum = "PrimaryShardNum"
            case relocatingShardNum = "RelocatingShardNum"
            case initializingShardNum = "InitializingShardNum"
            case unassignedShardNum = "UnassignedShardNum"
            case totalCosStorage = "TotalCosStorage"
            case searchableSnapshotCosBucket = "SearchableSnapshotCosBucket"
            case searchableSnapshotCosAppId = "SearchableSnapshotCosAppId"
        }
    }

    /// ES cos自动备份信息
    public struct CosBackup: TCInputModel, TCOutputModel {
        /// 是否开启cos自动备份
        public let isAutoBackup: Bool

        /// 自动备份执行时间（精确到小时）, e.g. "22:00"
        public let backupTime: String

        public init(isAutoBackup: Bool, backupTime: String) {
            self.isAutoBackup = isAutoBackup
            self.backupTime = backupTime
        }

        enum CodingKeys: String, CodingKey {
            case isAutoBackup = "IsAutoBackup"
            case backupTime = "BackupTime"
        }
    }

    /// ik插件词典信息
    public struct DictInfo: TCInputModel, TCOutputModel {
        /// 词典键值
        public let key: String

        /// 词典名称
        public let name: String

        /// 词典大小，单位B
        public let size: UInt64

        public init(key: String, name: String, size: UInt64) {
            self.key = key
            self.name = name
            self.size = size
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case name = "Name"
            case size = "Size"
        }
    }

    /// ES集群配置项
    public struct EsAcl: TCInputModel, TCOutputModel {
        /// kibana访问黑名单
        public let blackIpList: [String]?

        /// kibana访问白名单
        public let whiteIpList: [String]?

        public init(blackIpList: [String]? = nil, whiteIpList: [String]? = nil) {
            self.blackIpList = blackIpList
            self.whiteIpList = whiteIpList
        }

        enum CodingKeys: String, CodingKey {
            case blackIpList = "BlackIpList"
            case whiteIpList = "WhiteIpList"
        }
    }

    /// 配置组信息
    public struct EsConfigSetInfo: TCInputModel, TCOutputModel {
        /// 配置组类型，如ldap,ad等
        public let type: String

        /// "{\"order\":0,\"url\":\"ldap://10.0.1.72:389\",\"bind_dn\":\"cn=admin,dc=tencent,dc=com\",\"user_search.base_dn\":\"dc=tencent,dc=com\",\"user_search.filter\":\"(cn={0})\",\"group_search.base_dn\":\"dc=tencent,dc=com\"}"
        public let esConfig: String

        public init(type: String, esConfig: String) {
            self.type = type
            self.esConfig = esConfig
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case esConfig = "EsConfig"
        }
    }

    /// ES 词库信息
    public struct EsDictionaryInfo: TCInputModel, TCOutputModel {
        /// 启用词词典列表
        public let mainDict: [DictInfo]

        /// 停用词词典列表
        public let stopwords: [DictInfo]

        /// QQ分词词典列表
        public let qqDict: [DictInfo]

        /// 同义词词典列表
        public let synonym: [DictInfo]

        /// 更新词典类型
        public let updateType: String

        public init(mainDict: [DictInfo], stopwords: [DictInfo], qqDict: [DictInfo], synonym: [DictInfo], updateType: String) {
            self.mainDict = mainDict
            self.stopwords = stopwords
            self.qqDict = qqDict
            self.synonym = synonym
            self.updateType = updateType
        }

        enum CodingKeys: String, CodingKey {
            case mainDict = "MainDict"
            case stopwords = "Stopwords"
            case qqDict = "QQDict"
            case synonym = "Synonym"
            case updateType = "UpdateType"
        }
    }

    /// ES公网访问控制信息
    public struct EsPublicAcl: TCInputModel {
        /// 访问黑名单
        public let blackIpList: [String]?

        /// 访问白名单
        public let whiteIpList: [String]?

        public init(blackIpList: [String]? = nil, whiteIpList: [String]? = nil) {
            self.blackIpList = blackIpList
            self.whiteIpList = whiteIpList
        }

        enum CodingKeys: String, CodingKey {
            case blackIpList = "BlackIpList"
            case whiteIpList = "WhiteIpList"
        }
    }

    /// 索引元数据字段
    public struct IndexMetaField: TCOutputModel {
        /// 索引类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexType: String?

        /// 索引名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexName: String?

        /// 索引状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexStatus: String?

        /// 索引存储大小，单位Byte
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexStorage: Int64?

        /// 索引创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexCreateTime: String?

        /// 后备索引
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backingIndices: [BackingIndexMetaField]?

        /// 索引所属集群ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterId: String?

        /// 索引所属集群名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        /// 索引所属集群版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterVersion: String?

        /// 索引生命周期字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexPolicyField: IndexPolicyField?

        /// 索引自治字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexOptionsField: IndexOptionsField?

        /// 索引配置字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexSettingsField: IndexSettingsField?

        /// 索引所属集群APP ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appId: UInt64?

        /// 索引文档数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let indexDocs: UInt64?

        enum CodingKeys: String, CodingKey {
            case indexType = "IndexType"
            case indexName = "IndexName"
            case indexStatus = "IndexStatus"
            case indexStorage = "IndexStorage"
            case indexCreateTime = "IndexCreateTime"
            case backingIndices = "BackingIndices"
            case clusterId = "ClusterId"
            case clusterName = "ClusterName"
            case clusterVersion = "ClusterVersion"
            case indexPolicyField = "IndexPolicyField"
            case indexOptionsField = "IndexOptionsField"
            case indexSettingsField = "IndexSettingsField"
            case appId = "AppId"
            case indexDocs = "IndexDocs"
        }
    }

    /// 索引自治字段
    public struct IndexOptionsField: TCInputModel, TCOutputModel {
        /// 过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireMaxAge: String?

        /// 过期大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireMaxSize: String?

        /// 滚动周期
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rolloverMaxAge: String?

        /// 是否开启动态滚动
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rolloverDynamic: String?

        /// 是否开启动态分片
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let shardNumDynamic: String?

        /// 时间分区字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let timestampField: String?

        /// 写入模式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let writeMode: String?

        public init(expireMaxAge: String? = nil, expireMaxSize: String? = nil, rolloverMaxAge: String? = nil, rolloverDynamic: String? = nil, shardNumDynamic: String? = nil, timestampField: String? = nil, writeMode: String? = nil) {
            self.expireMaxAge = expireMaxAge
            self.expireMaxSize = expireMaxSize
            self.rolloverMaxAge = rolloverMaxAge
            self.rolloverDynamic = rolloverDynamic
            self.shardNumDynamic = shardNumDynamic
            self.timestampField = timestampField
            self.writeMode = writeMode
        }

        enum CodingKeys: String, CodingKey {
            case expireMaxAge = "ExpireMaxAge"
            case expireMaxSize = "ExpireMaxSize"
            case rolloverMaxAge = "RolloverMaxAge"
            case rolloverDynamic = "RolloverDynamic"
            case shardNumDynamic = "ShardNumDynamic"
            case timestampField = "TimestampField"
            case writeMode = "WriteMode"
        }
    }

    /// 索引生命周期字段
    public struct IndexPolicyField: TCInputModel, TCOutputModel {
        /// 是否开启warm阶段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmEnable: String?

        /// warm阶段转入时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmMinAge: String?

        /// 是否开启cold阶段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldEnable: String?

        /// cold阶段转入时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldMinAge: String?

        /// 是否开启frozen阶段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenEnable: String?

        /// frozen阶段转入时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenMinAge: String?

        /// /
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldAction: String?

        public init(warmEnable: String? = nil, warmMinAge: String? = nil, coldEnable: String? = nil, coldMinAge: String? = nil, frozenEnable: String? = nil, frozenMinAge: String? = nil, coldAction: String? = nil) {
            self.warmEnable = warmEnable
            self.warmMinAge = warmMinAge
            self.coldEnable = coldEnable
            self.coldMinAge = coldMinAge
            self.frozenEnable = frozenEnable
            self.frozenMinAge = frozenMinAge
            self.coldAction = coldAction
        }

        enum CodingKeys: String, CodingKey {
            case warmEnable = "WarmEnable"
            case warmMinAge = "WarmMinAge"
            case coldEnable = "ColdEnable"
            case coldMinAge = "ColdMinAge"
            case frozenEnable = "FrozenEnable"
            case frozenMinAge = "FrozenMinAge"
            case coldAction = "ColdAction"
        }
    }

    /// 索引配置字段
    public struct IndexSettingsField: TCInputModel, TCOutputModel {
        /// 索引主分片数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numberOfShards: String?

        /// 索引副本分片数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let numberOfReplicas: String?

        /// 索引刷新频率
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let refreshInterval: String?

        public init(numberOfShards: String? = nil, numberOfReplicas: String? = nil, refreshInterval: String? = nil) {
            self.numberOfShards = numberOfShards
            self.numberOfReplicas = numberOfReplicas
            self.refreshInterval = refreshInterval
        }

        enum CodingKeys: String, CodingKey {
            case numberOfShards = "NumberOfShards"
            case numberOfReplicas = "NumberOfReplicas"
            case refreshInterval = "RefreshInterval"
        }
    }

    /// 实例详细信息
    public struct InstanceInfo: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 地域
        public let region: String

        /// 可用区
        public let zone: String

        /// 用户ID
        public let appId: UInt64

        /// 用户UIN
        public let uin: String

        /// 实例所属VPC的UID
        public let vpcUid: String

        /// 实例所属子网的UID
        public let subnetUid: String

        /// 实例状态，0:处理中,1:正常,-1停止,-2:销毁中,-3:已销毁, 2:创建集群时初始化中
        public let status: Int64

        /// 自动续费标识。取值范围：
        /// RENEW_FLAG_AUTO：自动续费
        /// RENEW_FLAG_MANUAL：不自动续费
        /// 默认取值：
        /// RENEW_FLAG_DEFAULT：不自动续费
        /// 若该参数指定为 RENEW_FLAG_AUTO，在账户余额充足的情况下，实例到期后将按月自动续费。
        public let renewFlag: String

        /// 实例计费模式。取值范围：  PREPAID：表示预付费，即包年包月  POSTPAID_BY_HOUR：表示后付费，即按量计费  CDHPAID：CDH付费，即只对CDH计费，不对CDH上的实例计费。
        public let chargeType: String

        /// 包年包月购买时长,单位:月
        public let chargePeriod: UInt64

        /// 节点规格
        /// - ES.S1.SMALL2：1核2G
        /// - ES.S1.MEDIUM4：2核4G
        /// - ES.S1.MEDIUM8：2核8G
        /// - ES.S1.LARGE16：4核16G
        /// - ES.S1.2XLARGE32：8核32G
        /// - ES.S1.4XLARGE32：16核32G
        /// - ES.S1.4XLARGE64：16核64G
        public let nodeType: String

        /// 节点个数
        public let nodeNum: UInt64

        /// 节点CPU核数
        public let cpuNum: UInt64

        /// 节点内存大小，单位GB
        public let memSize: UInt64

        /// 节点磁盘类型
        public let diskType: String

        /// 节点磁盘大小，单位GB
        public let diskSize: UInt64

        /// ES域名
        public let esDomain: String

        /// ES VIP
        public let esVip: String

        /// ES端口
        public let esPort: UInt64

        /// Kibana访问url
        public let kibanaUrl: String

        /// ES版本号
        public let esVersion: String

        /// ES配置项
        public let esConfig: String

        /// Kibana访问控制配置
        public let esAcl: EsAcl

        /// 实例创建时间
        public let createTime: String

        /// 实例最后修改操作时间
        public let updateTime: String

        /// 实例到期时间
        public let deadline: String

        /// 实例类型（实例类型标识，当前只有1,2两种）
        public let instanceType: UInt64

        /// Ik分词器配置
        public let ikConfig: EsDictionaryInfo

        /// 专用主节点配置
        public let masterNodeInfo: MasterNodeInfo

        /// cos自动备份配置
        public let cosBackup: CosBackup

        /// 是否允许cos自动备份
        public let allowCosBackup: Bool

        /// 实例拥有的标签列表
        public let tagList: [TagInfo]

        /// License类型
        /// - oss：开源版
        /// - basic：基础版
        /// - platinum：白金版
        /// 默认值platinum
        public let licenseType: String

        /// 是否为冷热集群
        /// - true: 冷热集群
        /// - false: 非冷热集群
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableHotWarmMode: Bool?

        /// 温节点规格
        /// - ES.S1.SMALL2：1核2G
        /// - ES.S1.MEDIUM4：2核4G
        /// - ES.S1.MEDIUM8：2核8G
        /// - ES.S1.LARGE16：4核16G
        /// - ES.S1.2XLARGE32：8核32G
        /// - ES.S1.4XLARGE32：16核32G
        /// - ES.S1.4XLARGE64：16核64G
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmNodeType: String?

        /// 温节点个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmNodeNum: UInt64?

        /// 温节点CPU核数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmCpuNum: UInt64?

        /// 温节点内存内存大小，单位GB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmMemSize: UInt64?

        /// 温节点磁盘类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmDiskType: String?

        /// 温节点磁盘大小，单位GB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let warmDiskSize: UInt64?

        /// 集群节点信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeInfoList: [NodeInfo]?

        /// Es公网地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esPublicUrl: String?

        /// 多可用区网络信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let multiZoneInfo: [ZoneDetail]?

        /// 部署模式
        /// - 0：单可用区
        /// - 1：多可用区
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deployMode: UInt64?

        /// ES公网访问状态
        /// - OPEN：开启
        /// - CLOSE：关闭
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicAccess: String?

        /// ES公网访问控制配置
        public let esPublicAcl: EsAcl

        /// Kibana内网地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kibanaPrivateUrl: String?

        /// Kibana公网访问状态
        /// - OPEN：开启
        /// - CLOSE：关闭
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kibanaPublicAccess: String?

        /// Kibana内网访问状态
        /// - OPEN：开启
        /// - CLOSE：关闭
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kibanaPrivateAccess: String?

        /// 6.8（及以上版本）基础版是否开启xpack security认证
        /// - 1：不开启
        /// - 2：开启
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityType: UInt64?

        /// 场景化模板类型：0、不开启；1、通用场景；2、日志场景；3、搜索场景
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sceneType: Int64?

        /// Kibana配置项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kibanaConfig: String?

        /// Kibana节点信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kibanaNodeInfo: KibanaNodeInfo?

        /// 可视化节点配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let webNodeTypeInfo: WebNodeTypeInfo?

        /// JDK类型，oracle或kona
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jdk: String?

        /// 集群网络通讯协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 安全组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityGroups: [String]?

        /// 冷节点规格
        /// - ES.S1.SMALL2：1核2G
        /// - ES.S1.MEDIUM4：2核4G
        /// - ES.S1.MEDIUM8：2核8G
        /// - ES.S1.LARGE16：4核16G
        /// - ES.S1.2XLARGE32：8核32G
        /// - ES.S1.4XLARGE32：16核32G
        /// - ES.S1.4XLARGE64：16核64G
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldNodeType: String?

        /// 冷节点个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldNodeNum: UInt64?

        /// 冷节点CPU核数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldCpuNum: UInt64?

        /// 冷节点内存大小，单位GB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldMemSize: UInt64?

        /// 冷节点磁盘类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldDiskType: String?

        /// 冷节点磁盘大小，单位GB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let coldDiskSize: UInt64?

        /// 冻节点规格
        /// - ES.S1.SMALL2：1核2G
        /// - ES.S1.MEDIUM4：2核4G
        /// - ES.S1.MEDIUM8：2核8G
        /// - ES.S1.LARGE16：4核16G
        /// - ES.S1.2XLARGE32：8核32G
        /// - ES.S1.4XLARGE32：16核32G
        /// - ES.S1.4XLARGE64：16核64G
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenNodeType: String?

        /// 冻节点个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenNodeNum: UInt64?

        /// 冻节点CPU核数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenCpuNum: UInt64?

        /// 冻节点内存大小，单位GB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenMemSize: UInt64?

        /// 冻节点磁盘类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenDiskType: String?

        /// 冻节点磁盘大小，单位GB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let frozenDiskSize: UInt64?

        /// 集群健康状态 -1 未知；0 Green; 1 Yellow; 2 Red
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthStatus: Int64?

        /// https集群内网url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esPrivateUrl: String?

        /// https集群内网域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esPrivateDomain: String?

        /// 集群的配置组信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let esConfigSets: [EsConfigSetInfo]?

        /// 集群可维护时间段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationDuration: OperationDuration?

        /// web节点列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let optionalWebServiceInfos: [OptionalWebServiceInfo]?

        /// 自治索引开关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let autoIndexEnabled: Bool?

        /// 是否支持存储计算分离
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableHybridStorage: Bool?

        /// 流程进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processPercent: Float?

        /// Kibana的altering外网告警策略
        /// - OPEN：开启
        /// - CLOSE：关闭
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kibanaAlteringPublicAccess: String?

        /// 本月是否有内核可以更新：false-无，true-有
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasKernelUpgrade: Bool?

        /// cdcId，使用cdc子网时传递
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcId: String?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case region = "Region"
            case zone = "Zone"
            case appId = "AppId"
            case uin = "Uin"
            case vpcUid = "VpcUid"
            case subnetUid = "SubnetUid"
            case status = "Status"
            case renewFlag = "RenewFlag"
            case chargeType = "ChargeType"
            case chargePeriod = "ChargePeriod"
            case nodeType = "NodeType"
            case nodeNum = "NodeNum"
            case cpuNum = "CpuNum"
            case memSize = "MemSize"
            case diskType = "DiskType"
            case diskSize = "DiskSize"
            case esDomain = "EsDomain"
            case esVip = "EsVip"
            case esPort = "EsPort"
            case kibanaUrl = "KibanaUrl"
            case esVersion = "EsVersion"
            case esConfig = "EsConfig"
            case esAcl = "EsAcl"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case deadline = "Deadline"
            case instanceType = "InstanceType"
            case ikConfig = "IkConfig"
            case masterNodeInfo = "MasterNodeInfo"
            case cosBackup = "CosBackup"
            case allowCosBackup = "AllowCosBackup"
            case tagList = "TagList"
            case licenseType = "LicenseType"
            case enableHotWarmMode = "EnableHotWarmMode"
            case warmNodeType = "WarmNodeType"
            case warmNodeNum = "WarmNodeNum"
            case warmCpuNum = "WarmCpuNum"
            case warmMemSize = "WarmMemSize"
            case warmDiskType = "WarmDiskType"
            case warmDiskSize = "WarmDiskSize"
            case nodeInfoList = "NodeInfoList"
            case esPublicUrl = "EsPublicUrl"
            case multiZoneInfo = "MultiZoneInfo"
            case deployMode = "DeployMode"
            case publicAccess = "PublicAccess"
            case esPublicAcl = "EsPublicAcl"
            case kibanaPrivateUrl = "KibanaPrivateUrl"
            case kibanaPublicAccess = "KibanaPublicAccess"
            case kibanaPrivateAccess = "KibanaPrivateAccess"
            case securityType = "SecurityType"
            case sceneType = "SceneType"
            case kibanaConfig = "KibanaConfig"
            case kibanaNodeInfo = "KibanaNodeInfo"
            case webNodeTypeInfo = "WebNodeTypeInfo"
            case jdk = "Jdk"
            case `protocol` = "Protocol"
            case securityGroups = "SecurityGroups"
            case coldNodeType = "ColdNodeType"
            case coldNodeNum = "ColdNodeNum"
            case coldCpuNum = "ColdCpuNum"
            case coldMemSize = "ColdMemSize"
            case coldDiskType = "ColdDiskType"
            case coldDiskSize = "ColdDiskSize"
            case frozenNodeType = "FrozenNodeType"
            case frozenNodeNum = "FrozenNodeNum"
            case frozenCpuNum = "FrozenCpuNum"
            case frozenMemSize = "FrozenMemSize"
            case frozenDiskType = "FrozenDiskType"
            case frozenDiskSize = "FrozenDiskSize"
            case healthStatus = "HealthStatus"
            case esPrivateUrl = "EsPrivateUrl"
            case esPrivateDomain = "EsPrivateDomain"
            case esConfigSets = "EsConfigSets"
            case operationDuration = "OperationDuration"
            case optionalWebServiceInfos = "OptionalWebServiceInfos"
            case autoIndexEnabled = "AutoIndexEnabled"
            case enableHybridStorage = "EnableHybridStorage"
            case processPercent = "ProcessPercent"
            case kibanaAlteringPublicAccess = "KibanaAlteringPublicAccess"
            case hasKernelUpgrade = "HasKernelUpgrade"
            case cdcId = "CdcId"
        }
    }

    /// ES集群日志详细信息
    public struct InstanceLog: TCOutputModel {
        /// 日志时间
        public let time: String

        /// 日志级别
        public let level: String

        /// 集群节点ip
        public let ip: String

        /// 日志内容
        public let message: String

        /// 集群节点ID
        public let nodeID: String?

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case level = "Level"
            case ip = "Ip"
            case message = "Message"
            case nodeID = "NodeID"
        }
    }

    /// OperationDetail使用此结构的数组描述新旧配置
    public struct KeyValue: TCOutputModel {
        /// 键
        public let key: String

        /// 值
        public let value: String

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    /// 实例Kibana节点相关信息
    public struct KibanaNodeInfo: TCOutputModel {
        /// Kibana节点规格
        public let kibanaNodeType: String

        /// Kibana节点个数
        public let kibanaNodeNum: UInt64

        /// Kibana节点CPU数
        public let kibanaNodeCpuNum: UInt64

        /// Kibana节点内存GB
        public let kibanaNodeMemSize: UInt64

        /// Kibana节点磁盘类型
        public let kibanaNodeDiskType: String

        /// Kibana节点磁盘大小
        public let kibanaNodeDiskSize: UInt64

        enum CodingKeys: String, CodingKey {
            case kibanaNodeType = "KibanaNodeType"
            case kibanaNodeNum = "KibanaNodeNum"
            case kibanaNodeCpuNum = "KibanaNodeCpuNum"
            case kibanaNodeMemSize = "KibanaNodeMemSize"
            case kibanaNodeDiskType = "KibanaNodeDiskType"
            case kibanaNodeDiskSize = "KibanaNodeDiskSize"
        }
    }

    /// Kibana视图数据
    public struct KibanaView: TCOutputModel {
        /// Kibana节点IP
        public let ip: String

        /// 节点总磁盘大小
        public let diskSize: Int64

        /// 磁盘使用率
        public let diskUsage: Float

        /// 节点内存大小
        public let memSize: Int64

        /// 内存使用率
        public let memUsage: Float

        /// 节点cpu个数
        public let cpuNum: Int64

        /// cpu使用率
        public let cpuUsage: Float

        /// 可用区
        public let zone: String

        /// ts-0noqayxu-az6-hot-03222010-0
        public let nodeId: String?

        enum CodingKeys: String, CodingKey {
            case ip = "Ip"
            case diskSize = "DiskSize"
            case diskUsage = "DiskUsage"
            case memSize = "MemSize"
            case memUsage = "MemUsage"
            case cpuNum = "CpuNum"
            case cpuUsage = "CpuUsage"
            case zone = "Zone"
            case nodeId = "NodeId"
        }
    }

    /// 节点本地盘信息
    public struct LocalDiskInfo: TCInputModel, TCOutputModel {
        /// 本地盘类型
        /// - LOCAL_SATA：大数据型
        /// - NVME_SSD：高IO型
        public let localDiskType: String

        /// 本地盘单盘大小
        public let localDiskSize: UInt64

        /// 本地盘块数
        public let localDiskCount: UInt64

        public init(localDiskType: String, localDiskSize: UInt64, localDiskCount: UInt64) {
            self.localDiskType = localDiskType
            self.localDiskSize = localDiskSize
            self.localDiskCount = localDiskCount
        }

        enum CodingKeys: String, CodingKey {
            case localDiskType = "LocalDiskType"
            case localDiskSize = "LocalDiskSize"
            case localDiskCount = "LocalDiskCount"
        }
    }

    /// Logstash绑定的ES集群信息
    public struct LogstashBindedES: TCInputModel {
        /// ES集群ID
        public let esInstanceId: String

        /// ES集群用户名
        public let esUserName: String

        /// ES集群密码
        public let esPassword: String

        public init(esInstanceId: String, esUserName: String, esPassword: String) {
            self.esInstanceId = esInstanceId
            self.esUserName = esUserName
            self.esPassword = esPassword
        }

        enum CodingKeys: String, CodingKey {
            case esInstanceId = "ESInstanceId"
            case esUserName = "ESUserName"
            case esPassword = "ESPassword"
        }
    }

    /// Logstash扩展文件信息
    public struct LogstashExtendedFile: TCInputModel {
        /// 扩展文件名称
        public let name: String

        /// 扩展文件大小，单位B
        public let size: UInt64

        public init(name: String, size: UInt64) {
            self.name = name
            self.size = size
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case size = "Size"
        }
    }

    /// Logstash实例详细信息
    public struct LogstashInstanceInfo: TCOutputModel {
        /// 实例ID
        public let instanceId: String

        /// 实例名称
        public let instanceName: String

        /// 地域
        public let region: String

        /// 可用区
        public let zone: String

        /// 用户ID
        public let appId: UInt64

        /// 用户UIN
        public let uin: String

        /// 实例所属VPC的ID
        public let vpcId: String

        /// 实例所属子网的ID
        public let subnetId: String

        /// 实例状态，0:处理中,1:正常,-1停止,-2:销毁中,-3:已销毁
        public let status: Int64

        /// 实例计费模式。取值范围：  PREPAID：表示预付费，即包年包月  POSTPAID_BY_HOUR：表示后付费，即按量计费  CDHPAID：CDH付费，即只对CDH计费，不对CDH上的实例计费。
        public let chargeType: String

        /// 包年包月购买时长,单位:月
        public let chargePeriod: UInt64

        /// 自动续费标识。取值范围：  NOTIFY_AND_AUTO_RENEW：通知过期且自动续费  NOTIFY_AND_MANUAL_RENEW：通知过期不自动续费  DISABLE_NOTIFY_AND_MANUAL_RENEW：不通知过期不自动续费  默认取值：NOTIFY_AND_AUTO_RENEW。若该参数指定为NOTIFY_AND_AUTO_RENEW，在账户余额充足的情况下，实例到期后将按月自动续费。
        public let renewFlag: String

        /// 节点规格
        /// - LOGSTASH.S1.SMALL2：1核2G
        /// - LOGSTASH.S1.MEDIUM4：2核4G
        /// - LOGSTASH.S1.MEDIUM8：2核8G
        /// - LOGSTASH.S1.LARGE16：4核16G
        /// - LOGSTASH.S1.2XLARGE32：8核32G
        /// - LOGSTASH.S1.4XLARGE32：16核32G
        /// - LOGSTASH.S1.4XLARGE64：16核64G
        public let nodeType: String

        /// 节点个数
        public let nodeNum: UInt64

        /// 节点磁盘类型
        public let diskType: String

        /// 节点磁盘大小，单位GB
        public let diskSize: UInt64

        /// Logstash版本号
        public let logstashVersion: String

        /// License类型
        /// - oss：开源版
        /// - xpack：基础版
        /// 默认值xpack
        public let licenseType: String

        /// 实例创建时间
        public let createTime: String

        /// 实例最后修改操作时间
        public let updateTime: String

        /// 实例到期时间
        public let deadline: String

        /// 实例节点类型
        public let nodes: [LogstashNodeInfo]

        /// 实例绑定的ES集群ID
        public let bindedESInstanceId: String

        /// 实例的YML配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ymlConfig: String?

        /// 扩展文件列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let extendedFiles: [LogstashExtendedFile]?

        /// 可维护时间段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operationDuration: OperationDuration?

        /// CPU数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpuNum: UInt64?

        /// 实例标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagList: [TagInfo]?

        /// 内存大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memSize: UInt64?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case region = "Region"
            case zone = "Zone"
            case appId = "AppId"
            case uin = "Uin"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case chargeType = "ChargeType"
            case chargePeriod = "ChargePeriod"
            case renewFlag = "RenewFlag"
            case nodeType = "NodeType"
            case nodeNum = "NodeNum"
            case diskType = "DiskType"
            case diskSize = "DiskSize"
            case logstashVersion = "LogstashVersion"
            case licenseType = "LicenseType"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case deadline = "Deadline"
            case nodes = "Nodes"
            case bindedESInstanceId = "BindedESInstanceId"
            case ymlConfig = "YMLConfig"
            case extendedFiles = "ExtendedFiles"
            case operationDuration = "OperationDuration"
            case cpuNum = "CpuNum"
            case tagList = "TagList"
            case memSize = "MemSize"
        }
    }

    /// Logstash节点信息
    public struct LogstashNodeInfo: TCOutputModel {
        /// 节点ID
        public let nodeId: String

        /// 节点IP
        public let ip: String

        /// 节点端口
        public let port: UInt64

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case ip = "Ip"
            case port = "Port"
        }
    }

    /// Logstash管道信息
    public struct LogstashPipeline: TCOutputModel {
        /// 管道ID
        public let pipelineId: String

        /// 管道描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pipelineDesc: String?

        /// 管道配置内容
        public let config: String

        /// 管道的Worker数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workers: UInt64?

        /// 管道批处理大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let batchSize: UInt64?

        /// 管道批处理延迟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let batchDelay: UInt64?

        /// 管道缓冲队列类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueType: String?

        /// 管道缓冲队列大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueMaxBytes: String?

        /// 管道缓冲队列检查点写入数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueCheckPointWrites: UInt64?

        enum CodingKeys: String, CodingKey {
            case pipelineId = "PipelineId"
            case pipelineDesc = "PipelineDesc"
            case config = "Config"
            case workers = "Workers"
            case batchSize = "BatchSize"
            case batchDelay = "BatchDelay"
            case queueType = "QueueType"
            case queueMaxBytes = "QueueMaxBytes"
            case queueCheckPointWrites = "QueueCheckPointWrites"
        }
    }

    /// Logstash管道信息
    public struct LogstashPipelineInfo: TCOutputModel {
        /// 管道ID
        public let pipelineId: String

        /// 管道描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pipelineDesc: String?

        /// 管道配置内容
        public let config: String

        /// 管道状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 管道的Worker数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let workers: UInt64?

        /// 管道批处理大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let batchSize: UInt64?

        /// 管道批处理延迟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let batchDelay: UInt64?

        /// 管道缓冲队列类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueType: String?

        /// 管道缓冲队列大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueMaxBytes: String?

        /// 管道缓冲队列检查点写入数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let queueCheckPointWrites: UInt64?

        enum CodingKeys: String, CodingKey {
            case pipelineId = "PipelineId"
            case pipelineDesc = "PipelineDesc"
            case config = "Config"
            case status = "Status"
            case workers = "Workers"
            case batchSize = "BatchSize"
            case batchDelay = "BatchDelay"
            case queueType = "QueueType"
            case queueMaxBytes = "QueueMaxBytes"
            case queueCheckPointWrites = "QueueCheckPointWrites"
        }
    }

    /// 实例专用主节点相关信息
    public struct MasterNodeInfo: TCOutputModel {
        /// 是否启用了专用主节点
        public let enableDedicatedMaster: Bool

        /// 专用主节点规格
        /// - ES.S1.SMALL2：1核2G
        /// - ES.S1.MEDIUM4：2核4G
        /// - ES.S1.MEDIUM8：2核8G
        /// - ES.S1.LARGE16：4核16G
        /// - ES.S1.2XLARGE32：8核32G
        /// - ES.S1.4XLARGE32：16核32G
        /// - ES.S1.4XLARGE64：16核64G
        public let masterNodeType: String

        /// 专用主节点个数
        public let masterNodeNum: UInt64

        /// 专用主节点CPU核数
        public let masterNodeCpuNum: UInt64

        /// 专用主节点内存大小，单位GB
        public let masterNodeMemSize: UInt64

        /// 专用主节点磁盘大小，单位GB
        public let masterNodeDiskSize: UInt64

        /// 专用主节点磁盘类型
        public let masterNodeDiskType: String

        enum CodingKeys: String, CodingKey {
            case enableDedicatedMaster = "EnableDedicatedMaster"
            case masterNodeType = "MasterNodeType"
            case masterNodeNum = "MasterNodeNum"
            case masterNodeCpuNum = "MasterNodeCpuNum"
            case masterNodeMemSize = "MasterNodeMemSize"
            case masterNodeDiskSize = "MasterNodeDiskSize"
            case masterNodeDiskType = "MasterNodeDiskType"
        }
    }

    /// 集群中一种节点类型（如热数据节点，冷数据节点，专用主节点等）的规格描述信息，包括节点类型，节点个数，节点规格，磁盘类型，磁盘大小等, Type不指定时默认为热数据节点；如果节点为master节点，则DiskType和DiskSize参数会被忽略（主节点无数据盘）
    public struct NodeInfo: TCInputModel, TCOutputModel {
        /// 节点数量
        public let nodeNum: UInt64

        /// 节点规格
        /// - ES.S1.SMALL2：1核2G
        /// - ES.S1.MEDIUM4：2核4G
        /// - ES.S1.MEDIUM8：2核8G
        /// - ES.S1.LARGE16：4核16G
        /// - ES.S1.2XLARGE32：8核32G
        /// - ES.S1.4XLARGE32：16核32G
        /// - ES.S1.4XLARGE64：16核64G
        public let nodeType: String

        /// 节点类型
        /// - hotData: 热数据节点
        /// - warmData: 冷数据节点
        /// - dedicatedMaster: 专用主节点
        ///
        /// 默认值为hotData
        public let type: String?

        /// 节点磁盘类型
        /// - CLOUD_SSD：SSD云硬盘
        /// - CLOUD_PREMIUM：高硬能云硬盘
        /// 默认值CLOUD_SSD
        public let diskType: String?

        /// 节点磁盘容量（单位GB）
        public let diskSize: UInt64?

        /// 节点本地盘信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let localDiskInfo: LocalDiskInfo?

        /// 节点磁盘块数
        public let diskCount: UInt64?

        /// 节点磁盘是否加密 0: 不加密，1: 加密；默认不加密
        public let diskEncrypt: UInt64?

        /// cpu数目
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cpuNum: UInt64?

        /// 内存大小，单位GB
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memSize: Int64?

        /// /
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let diskEnhance: Int64?

        public init(nodeNum: UInt64, nodeType: String, type: String? = nil, diskType: String? = nil, diskSize: UInt64? = nil, localDiskInfo: LocalDiskInfo? = nil, diskCount: UInt64? = nil, diskEncrypt: UInt64? = nil, cpuNum: UInt64? = nil, memSize: Int64? = nil, diskEnhance: Int64? = nil) {
            self.nodeNum = nodeNum
            self.nodeType = nodeType
            self.type = type
            self.diskType = diskType
            self.diskSize = diskSize
            self.localDiskInfo = localDiskInfo
            self.diskCount = diskCount
            self.diskEncrypt = diskEncrypt
            self.cpuNum = cpuNum
            self.memSize = memSize
            self.diskEnhance = diskEnhance
        }

        enum CodingKeys: String, CodingKey {
            case nodeNum = "NodeNum"
            case nodeType = "NodeType"
            case type = "Type"
            case diskType = "DiskType"
            case diskSize = "DiskSize"
            case localDiskInfo = "LocalDiskInfo"
            case diskCount = "DiskCount"
            case diskEncrypt = "DiskEncrypt"
            case cpuNum = "CpuNum"
            case memSize = "MemSize"
            case diskEnhance = "DiskEnhance"
        }
    }

    /// 节点维度视图数据
    public struct NodeView: TCOutputModel {
        /// 节点ID
        public let nodeId: String

        /// 节点IP
        public let nodeIp: String

        /// 节点是否可见
        public let visible: Float

        /// 是否熔断
        public let `break`: Float

        /// 节点总磁盘大小
        public let diskSize: Int64

        /// 磁盘使用率
        public let diskUsage: Float

        /// 节点内存大小，单位GB
        public let memSize: Int64

        /// 内存使用率
        public let memUsage: Float

        /// 节点cpu个数
        public let cpuNum: Int64

        /// cpu使用率
        public let cpuUsage: Float

        /// 可用区
        public let zone: String

        /// 节点角色
        public let nodeRole: String

        /// 节点HTTP IP
        public let nodeHttpIp: String

        /// JVM内存使用率
        public let jvmMemUsage: Float

        /// 节点分片数
        public let shardNum: Int64

        /// 节点上磁盘ID列表
        public let diskIds: [String]

        /// 是否为隐藏可用区
        public let hidden: Bool

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case nodeIp = "NodeIp"
            case visible = "Visible"
            case `break` = "Break"
            case diskSize = "DiskSize"
            case diskUsage = "DiskUsage"
            case memSize = "MemSize"
            case memUsage = "MemUsage"
            case cpuNum = "CpuNum"
            case cpuUsage = "CpuUsage"
            case zone = "Zone"
            case nodeRole = "NodeRole"
            case nodeHttpIp = "NodeHttpIp"
            case jvmMemUsage = "JvmMemUsage"
            case shardNum = "ShardNum"
            case diskIds = "DiskIds"
            case hidden = "Hidden"
        }
    }

    /// ES集群操作详细信息
    public struct Operation: TCOutputModel {
        /// 操作唯一id
        public let id: UInt64

        /// 操作开始时间
        public let startTime: String

        /// 操作类型
        public let type: String

        /// 操作详情
        public let detail: OperationDetail

        /// 操作结果
        public let result: String

        /// 流程任务信息
        public let tasks: [TaskDetail]

        /// 操作进度
        public let progress: Float

        /// 操作者Uin
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subAccountUin: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case startTime = "StartTime"
            case type = "Type"
            case detail = "Detail"
            case result = "Result"
            case tasks = "Tasks"
            case progress = "Progress"
            case subAccountUin = "SubAccountUin"
        }
    }

    /// 操作详情
    public struct OperationDetail: TCOutputModel {
        /// 实例原始配置信息
        public let oldInfo: [KeyValue]

        /// 实例更新后配置信息
        public let newInfo: [KeyValue]

        enum CodingKeys: String, CodingKey {
            case oldInfo = "OldInfo"
            case newInfo = "NewInfo"
        }
    }

    /// 集群可运维时间
    public struct OperationDuration: TCInputModel, TCOutputModel {
        /// 维护周期，表示周一到周日，可取值[0, 6]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let periods: [UInt64]?

        /// 维护开始时间
        public let timeStart: String

        /// 维护结束时间
        public let timeEnd: String

        /// 时区，以UTC形式表示
        public let timeZone: String

        public init(periods: [UInt64], timeStart: String, timeEnd: String, timeZone: String) {
            self.periods = periods
            self.timeStart = timeStart
            self.timeEnd = timeEnd
            self.timeZone = timeZone
        }

        enum CodingKeys: String, CodingKey {
            case periods = "Periods"
            case timeStart = "TimeStart"
            case timeEnd = "TimeEnd"
            case timeZone = "TimeZone"
        }
    }

    /// 集群可运维时间
    public struct OperationDurationUpdated: TCInputModel, TCOutputModel {
        /// 维护周期，表示周一到周日，可取值[0, 6]
        public let periods: [UInt64]

        /// 维护开始时间
        public let timeStart: String

        /// 维护结束时间
        public let timeEnd: String

        /// 时区，以UTC形式表示
        public let timeZone: String

        /// ES集群ID数组
        public let moreInstances: [String]?

        public init(periods: [UInt64], timeStart: String, timeEnd: String, timeZone: String, moreInstances: [String]? = nil) {
            self.periods = periods
            self.timeStart = timeStart
            self.timeEnd = timeEnd
            self.timeZone = timeZone
            self.moreInstances = moreInstances
        }

        enum CodingKeys: String, CodingKey {
            case periods = "Periods"
            case timeStart = "TimeStart"
            case timeEnd = "TimeEnd"
            case timeZone = "TimeZone"
            case moreInstances = "MoreInstances"
        }
    }

    /// 可选web组件信息
    public struct OptionalWebServiceInfo: TCOutputModel {
        /// 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 公网url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicUrl: String?

        /// 内网url
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateUrl: String?

        /// 公网访问权限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicAccess: String?

        /// 内网访问权限
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateAccess: String?

        /// 版本号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case status = "Status"
            case publicUrl = "PublicUrl"
            case privateUrl = "PrivateUrl"
            case publicAccess = "PublicAccess"
            case privateAccess = "PrivateAccess"
            case version = "Version"
        }
    }

    /// 任务进度详情
    public struct ProcessDetail: TCOutputModel {
        /// 已完成数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let completed: Int64?

        /// 剩余数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remain: Int64?

        /// 总数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 任务类型：
        /// 60：重启型任务
        /// 70：分片迁移型任务
        /// 80：节点变配任务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskType: Int64?

        enum CodingKeys: String, CodingKey {
            case completed = "Completed"
            case remain = "Remain"
            case total = "Total"
            case taskType = "TaskType"
        }
    }

    /// 实例操作记录流程任务中的子任务信息（如升级检查任务中的各个检查项）
    public struct SubTaskDetail: TCOutputModel {
        /// 子任务名
        public let name: String

        /// 子任务结果
        public let result: Bool

        /// 子任务错误信息
        public let errMsg: String

        /// 子任务类型
        public let type: String

        /// 子任务状态，0处理中 1成功 -1失败
        public let status: Int64

        /// 升级检查失败的索引名
        public let failedIndices: [String]

        /// 子任务结束时间
        public let finishTime: String

        /// 子任务等级，1警告 2失败
        public let level: Int64

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case result = "Result"
            case errMsg = "ErrMsg"
            case type = "Type"
            case status = "Status"
            case failedIndices = "FailedIndices"
            case finishTime = "FinishTime"
            case level = "Level"
        }
    }

    /// 实例标签信息
    public struct TagInfo: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 实例操作记录中的流程任务信息
    public struct TaskDetail: TCOutputModel {
        /// 任务名
        public let name: String

        /// 任务进度
        public let progress: Float

        /// 任务完成时间
        public let finishTime: String

        /// 子任务
        public let subTasks: [SubTaskDetail]

        /// 任务花费时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let elapsedTime: Int64?

        /// 任务进度详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processInfo: ProcessDetail?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case progress = "Progress"
            case finishTime = "FinishTime"
            case subTasks = "SubTasks"
            case elapsedTime = "ElapsedTime"
            case processInfo = "ProcessInfo"
        }
    }

    /// 可视化节点配置
    public struct WebNodeTypeInfo: TCInputModel, TCOutputModel {
        /// 可视化节点个数，固定为1
        public let nodeNum: UInt64

        /// 可视化节点规格
        public let nodeType: String

        public init(nodeNum: UInt64, nodeType: String) {
            self.nodeNum = nodeNum
            self.nodeType = nodeType
        }

        enum CodingKeys: String, CodingKey {
            case nodeNum = "NodeNum"
            case nodeType = "NodeType"
        }
    }

    /// 多可用区部署时可用区的详细信息
    public struct ZoneDetail: TCInputModel, TCOutputModel {
        /// 可用区
        public let zone: String

        /// 子网ID
        public let subnetId: String

        public init(zone: String, subnetId: String) {
            self.zone = zone
            self.subnetId = subnetId
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case subnetId = "SubnetId"
        }
    }
}
