//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTiiaError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case balanceInsufficient = "FailedOperation.BalanceInsufficient"
            case downLoadError = "FailedOperation.DownLoadError"
            case downloadError = "FailedOperation.DownloadError"
            case emptyImageError = "FailedOperation.EmptyImageError"
            case imageDecodeFailed = "FailedOperation.ImageDecodeFailed"
            case imageDeleteFailed = "FailedOperation.ImageDeleteFailed"
            case imageDownloadError = "FailedOperation.ImageDownloadError"
            case imageEntityCountExceed = "FailedOperation.ImageEntityCountExceed"
            case imageGroupEmpty = "FailedOperation.ImageGroupEmpty"
            case imageNotFoundInfo = "FailedOperation.ImageNotFoundInfo"
            case imageNotSupported = "FailedOperation.ImageNotSupported"
            case imageNumExceed = "FailedOperation.ImageNumExceed"
            case imageResolutionExceed = "FailedOperation.ImageResolutionExceed"
            case imageSearchInvalid = "FailedOperation.ImageSearchInvalid"
            case imageSizeExceed = "FailedOperation.ImageSizeExceed"
            case imageUnQualified = "FailedOperation.ImageUnQualified"
            case imageUrlInvalid = "FailedOperation.ImageUrlInvalid"
            case innerError = "FailedOperation.InnerError"
            case invokeChargeError = "FailedOperation.InvokeChargeError"
            case noBodyInPhoto = "FailedOperation.NoBodyInPhoto"
            case noObjectDetected = "FailedOperation.NoObjectDetected"
            case parameterEmpty = "FailedOperation.ParameterEmpty"
            case recognizeFailded = "FailedOperation.RecognizeFailded"
            case requestError = "FailedOperation.RequestError"
            case requestTimeout = "FailedOperation.RequestTimeout"
            case rpcFail = "FailedOperation.RpcFail"
            case serverError = "FailedOperation.ServerError"
            case tooLargeFileError = "FailedOperation.TooLargeFileError"
            case unKnowError = "FailedOperation.UnKnowError"
            case unOpenError = "FailedOperation.UnOpenError"
            case unknown = "FailedOperation.Unknown"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 余额不足，开通失败，请充值后再开通。
        public static var balanceInsufficient: FailedOperation {
            FailedOperation(.balanceInsufficient)
        }
        
        /// 文件下载失败。
        public static var downLoadError: FailedOperation {
            FailedOperation(.downLoadError)
        }
        
        /// 文件下载错误。
        public static var downloadError: FailedOperation {
            FailedOperation(.downloadError)
        }
        
        /// 图片内容为空。
        public static var emptyImageError: FailedOperation {
            FailedOperation(.emptyImageError)
        }
        
        /// 图片解码失败。
        public static var imageDecodeFailed: FailedOperation {
            FailedOperation(.imageDecodeFailed)
        }
        
        /// 图片删除失败。
        public static var imageDeleteFailed: FailedOperation {
            FailedOperation(.imageDeleteFailed)
        }
        
        /// 图片下载错误。
        public static var imageDownloadError: FailedOperation {
            FailedOperation(.imageDownloadError)
        }
        
        /// 超出Entity数量限制。
        public static var imageEntityCountExceed: FailedOperation {
            FailedOperation(.imageEntityCountExceed)
        }
        
        /// 图库为空。
        public static var imageGroupEmpty: FailedOperation {
            FailedOperation(.imageGroupEmpty)
        }
        
        /// 未找到图片信息。
        public static var imageNotFoundInfo: FailedOperation {
            FailedOperation(.imageNotFoundInfo)
        }
        
        /// 不支持的图片文件。
        public static var imageNotSupported: FailedOperation {
            FailedOperation(.imageNotSupported)
        }
        
        /// 超出图库限制。
        public static var imageNumExceed: FailedOperation {
            FailedOperation(.imageNumExceed)
        }
        
        /// 图片分辨率过大。
        public static var imageResolutionExceed: FailedOperation {
            FailedOperation(.imageResolutionExceed)
        }
        
        /// 未查询到结果。
        public static var imageSearchInvalid: FailedOperation {
            FailedOperation(.imageSearchInvalid)
        }
        
        /// base64编码后的图片数据过大。
        public static var imageSizeExceed: FailedOperation {
            FailedOperation(.imageSizeExceed)
        }
        
        /// 图片不满足检测要求。
        public static var imageUnQualified: FailedOperation {
            FailedOperation(.imageUnQualified)
        }
        
        /// url地址不合法，无法下载。
        public static var imageUrlInvalid: FailedOperation {
            FailedOperation(.imageUrlInvalid)
        }
        
        /// 内部错误。
        public static var innerError: FailedOperation {
            FailedOperation(.innerError)
        }
        
        /// 调用计费返回失败。
        public static var invokeChargeError: FailedOperation {
            FailedOperation(.invokeChargeError)
        }
        
        public static var noBodyInPhoto: FailedOperation {
            FailedOperation(.noBodyInPhoto)
        }
        
        /// 未检测到目标。
        public static var noObjectDetected: FailedOperation {
            FailedOperation(.noObjectDetected)
        }
        
        /// 参数为空。
        public static var parameterEmpty: FailedOperation {
            FailedOperation(.parameterEmpty)
        }
        
        /// 车辆识别失败。
        public static var recognizeFailded: FailedOperation {
            FailedOperation(.recognizeFailded)
        }
        
        /// 后端服务请求失败。
        public static var requestError: FailedOperation {
            FailedOperation(.requestError)
        }
        
        /// 后端服务超时。
        public static var requestTimeout: FailedOperation {
            FailedOperation(.requestTimeout)
        }
        
        /// RPC请求失败，一般为算法微服务故障。
        public static var rpcFail: FailedOperation {
            FailedOperation(.rpcFail)
        }
        
        /// 算法服务异常，请重试。
        public static var serverError: FailedOperation {
            FailedOperation(.serverError)
        }
        
        /// 文件太大。
        public static var tooLargeFileError: FailedOperation {
            FailedOperation(.tooLargeFileError)
        }
        
        /// 内部错误。
        public static var unKnowError: FailedOperation {
            FailedOperation(.unKnowError)
        }
        
        /// 服务未开通。
        public static var unOpenError: FailedOperation {
            FailedOperation(.unOpenError)
        }
        
        /// 未知错误。
        public static var unknown: FailedOperation {
            FailedOperation(.unknown)
        }
    }
}

extension TCTiiaError.FailedOperation: Equatable {
    public static func == (lhs: TCTiiaError.FailedOperation, rhs: TCTiiaError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTiiaError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTiiaError.FailedOperation {
    /// - Returns: ``TCTiiaError`` that holds the same error and context.
    public func toTiiaError() -> TCTiiaError {
        guard let code = TCTiiaError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTiiaError(code, context: self.context)
    }
}

extension TCTiiaError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
