//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTiiaError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case briefTooLong = "InvalidParameterValue.BriefTooLong"
            case customContentTooLong = "InvalidParameterValue.CustomContentTooLong"
            case entityIdEmpty = "InvalidParameterValue.EntityIdEmpty"
            case entityIdTooLong = "InvalidParameterValue.EntityIdTooLong"
            case filterInvalid = "InvalidParameterValue.FilterInvalid"
            case filterSizeExceed = "InvalidParameterValue.FilterSizeExceed"
            case imageEmpty = "InvalidParameterValue.ImageEmpty"
            case imageGroupIdAlreadyExist = "InvalidParameterValue.ImageGroupIdAlreadyExist"
            case imageGroupIdIllegal = "InvalidParameterValue.ImageGroupIdIllegal"
            case imageGroupIdNotExist = "InvalidParameterValue.ImageGroupIdNotExist"
            case imageGroupIdTooLong = "InvalidParameterValue.ImageGroupIdTooLong"
            case imageGroupNameEmpty = "InvalidParameterValue.ImageGroupNameEmpty"
            case imageGroupNameTooLong = "InvalidParameterValue.ImageGroupNameTooLong"
            case invalidParameterValueLimit = "InvalidParameterValue.InvalidParameterValueLimit"
            case limitExceed = "InvalidParameterValue.LimitExceed"
            case picNameAlreadyExist = "InvalidParameterValue.PicNameAlreadyExist"
            case picNameEmpty = "InvalidParameterValue.PicNameEmpty"
            case picNameTooLong = "InvalidParameterValue.PicNameTooLong"
            case tagsKeysExceed = "InvalidParameterValue.TagsKeysExceed"
            case tagsValueIllegal = "InvalidParameterValue.TagsValueIllegal"
            case tagsValueSizeExceed = "InvalidParameterValue.TagsValueSizeExceed"
            case urlIllegal = "InvalidParameterValue.UrlIllegal"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 图库简介过长。
        public static var briefTooLong: InvalidParameterValue {
            InvalidParameterValue(.briefTooLong)
        }
        
        /// 自定义内容过长。
        public static var customContentTooLong: InvalidParameterValue {
            InvalidParameterValue(.customContentTooLong)
        }
        
        /// 物品ID为空。
        public static var entityIdEmpty: InvalidParameterValue {
            InvalidParameterValue(.entityIdEmpty)
        }
        
        /// 物品ID超出长度限制。
        public static var entityIdTooLong: InvalidParameterValue {
            InvalidParameterValue(.entityIdTooLong)
        }
        
        /// Filter参数不合法。
        public static var filterInvalid: InvalidParameterValue {
            InvalidParameterValue(.filterInvalid)
        }
        
        /// Filter参数过长。
        public static var filterSizeExceed: InvalidParameterValue {
            InvalidParameterValue(.filterSizeExceed)
        }
        
        /// 图片为空。
        public static var imageEmpty: InvalidParameterValue {
            InvalidParameterValue(.imageEmpty)
        }
        
        /// 图库ID已存在。
        public static var imageGroupIdAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.imageGroupIdAlreadyExist)
        }
        
        /// 图库ID不合法。
        public static var imageGroupIdIllegal: InvalidParameterValue {
            InvalidParameterValue(.imageGroupIdIllegal)
        }
        
        /// 图库ID不存在。
        public static var imageGroupIdNotExist: InvalidParameterValue {
            InvalidParameterValue(.imageGroupIdNotExist)
        }
        
        /// 图库ID超出长度限制。
        public static var imageGroupIdTooLong: InvalidParameterValue {
            InvalidParameterValue(.imageGroupIdTooLong)
        }
        
        /// 图库名称为空。
        public static var imageGroupNameEmpty: InvalidParameterValue {
            InvalidParameterValue(.imageGroupNameEmpty)
        }
        
        /// 图库名称超出长度限制。
        public static var imageGroupNameTooLong: InvalidParameterValue {
            InvalidParameterValue(.imageGroupNameTooLong)
        }
        
        /// 参数值错误。
        public static var invalidParameterValueLimit: InvalidParameterValue {
            InvalidParameterValue(.invalidParameterValueLimit)
        }
        
        /// 返回数量不在合法范围内。
        public static var limitExceed: InvalidParameterValue {
            InvalidParameterValue(.limitExceed)
        }
        
        /// 图片已经存在。
        public static var picNameAlreadyExist: InvalidParameterValue {
            InvalidParameterValue(.picNameAlreadyExist)
        }
        
        /// 图片名称为空。
        public static var picNameEmpty: InvalidParameterValue {
            InvalidParameterValue(.picNameEmpty)
        }
        
        /// 图片名称超出长度限制。
        public static var picNameTooLong: InvalidParameterValue {
            InvalidParameterValue(.picNameTooLong)
        }
        
        /// 标签数量过多。
        public static var tagsKeysExceed: InvalidParameterValue {
            InvalidParameterValue(.tagsKeysExceed)
        }
        
        /// 标签值类型不合法。
        public static var tagsValueIllegal: InvalidParameterValue {
            InvalidParameterValue(.tagsValueIllegal)
        }
        
        /// 标签值长度过长。
        public static var tagsValueSizeExceed: InvalidParameterValue {
            InvalidParameterValue(.tagsValueSizeExceed)
        }
        
        /// URL格式不合法。
        public static var urlIllegal: InvalidParameterValue {
            InvalidParameterValue(.urlIllegal)
        }
    }
}

extension TCTiiaError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCTiiaError.InvalidParameterValue, rhs: TCTiiaError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTiiaError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTiiaError.InvalidParameterValue {
    /// - Returns: ``TCTiiaError`` that holds the same error and context.
    public func toTiiaError() -> TCTiiaError {
        guard let code = TCTiiaError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTiiaError(code, context: self.context)
    }
}

extension TCTiiaError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
