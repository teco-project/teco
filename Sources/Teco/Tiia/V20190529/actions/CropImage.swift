//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tiia {
    /// CropImage请求参数结构体
    public struct CropImageRequest: TCRequestModel {
        /// 需要裁剪区域的宽度，与Height共同组成所需裁剪的图片宽高比例。
        /// 输入数字请大于0、小于图片宽度的像素值。
        public let width: Int64

        /// 需要裁剪区域的高度，与Width共同组成所需裁剪的图片宽高比例。
        /// 输入数字请大于0、小于图片高度的像素值。
        /// 宽高比例（Width : Height）会简化为最简分数，即如果Width输入10、Height输入20，会简化为1：2。
        /// Width : Height建议取值在[1, 2.5]之间，超过这个范围可能会影响效果。
        public let height: Int64

        /// 图片URL地址。
        /// 图片限制：
        /// • 图片格式：PNG、JPG、JPEG。
        /// • 图片大小：所下载图片经Base64编码后不超过4M。图片下载时间不超过3秒。
        /// 建议：
        /// • 图片像素：大于50*50像素，否则影响识别效果。
        /// • 长宽比：长边：短边<5。
        /// 接口响应时间会受到图片下载时间的影响，建议使用更可靠的存储服务，推荐将图片存储在腾讯云COS。
        public let imageUrl: String?

        /// 图片经过Base64编码的内容。最大不超过4M。与ImageUrl同时存在时优先使用ImageUrl字段。
        /// 注意：图片需要Base64编码，并且要去掉编码头部。
        public let imageBase64: String?

        public init(width: Int64, height: Int64, imageUrl: String? = nil, imageBase64: String? = nil) {
            self.width = width
            self.height = height
            self.imageUrl = imageUrl
            self.imageBase64 = imageBase64
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
            case imageUrl = "ImageUrl"
            case imageBase64 = "ImageBase64"
        }
    }

    /// CropImage返回参数结构体
    public struct CropImageResponse: TCResponseModel {
        /// 裁剪区域左上角X坐标值
        public let x: Int64

        /// 裁剪区域左上角Y坐标值
        public let y: Int64

        /// 裁剪区域的宽度，单位为像素
        public let width: Int64

        /// 裁剪区域的高度，单位为像素
        public let height: Int64

        /// 原图宽度，单位为像素
        public let originalWidth: Int64

        /// 原图高度，单位为像素
        public let originalHeight: Int64

        /// 0：抠图正常；
        /// 1：原图过长，指原图的高度是宽度的1.8倍以上；
        /// 2：原图过宽，指原图的宽度是高度的1.8倍以上；
        /// 3：抠图区域过长，指抠图的高度是主体备选框高度的1.6倍以上；
        /// 4：抠图区域过宽，指当没有检测到人脸时，抠图区域宽度是检测出的原图主体区域宽度的1.6倍以上；
        /// 5：纯色图，指裁剪区域视觉较为单一、缺乏主体部分 ；
        /// 6：宽高比异常，指Width : Height取值超出[1, 2.5]的范围；
        /// 以上是辅助决策的参考建议，可以根据业务需求选择采纳或忽视。
        public let cropResult: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case x = "X"
            case y = "Y"
            case width = "Width"
            case height = "Height"
            case originalWidth = "OriginalWidth"
            case originalHeight = "OriginalHeight"
            case cropResult = "CropResult"
            case requestId = "RequestId"
        }
    }

    /// 图片智能裁剪
    ///
    /// 根据输入的裁剪比例，智能判断一张图片的最佳裁剪区域，确保原图的主体区域不受影响，以适应不同平台、设备的展示要求，避免简单拉伸带来的变形。
    /// >
    /// - 可前往 [图像处理](https://cloud.tencent.com/document/product/1590) 产品文档中查看更多产品信息。
    /// - 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
    @inlinable
    public func cropImage(_ input: CropImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CropImageResponse> {
        self.client.execute(action: "CropImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 图片智能裁剪
    ///
    /// 根据输入的裁剪比例，智能判断一张图片的最佳裁剪区域，确保原图的主体区域不受影响，以适应不同平台、设备的展示要求，避免简单拉伸带来的变形。
    /// >
    /// - 可前往 [图像处理](https://cloud.tencent.com/document/product/1590) 产品文档中查看更多产品信息。
    /// - 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
    @inlinable
    public func cropImage(_ input: CropImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CropImageResponse {
        try await self.client.execute(action: "CropImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 图片智能裁剪
    ///
    /// 根据输入的裁剪比例，智能判断一张图片的最佳裁剪区域，确保原图的主体区域不受影响，以适应不同平台、设备的展示要求，避免简单拉伸带来的变形。
    /// >
    /// - 可前往 [图像处理](https://cloud.tencent.com/document/product/1590) 产品文档中查看更多产品信息。
    /// - 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
    @inlinable
    public func cropImage(width: Int64, height: Int64, imageUrl: String? = nil, imageBase64: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CropImageResponse> {
        self.cropImage(CropImageRequest(width: width, height: height, imageUrl: imageUrl, imageBase64: imageBase64), region: region, logger: logger, on: eventLoop)
    }

    /// 图片智能裁剪
    ///
    /// 根据输入的裁剪比例，智能判断一张图片的最佳裁剪区域，确保原图的主体区域不受影响，以适应不同平台、设备的展示要求，避免简单拉伸带来的变形。
    /// >
    /// - 可前往 [图像处理](https://cloud.tencent.com/document/product/1590) 产品文档中查看更多产品信息。
    /// - 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
    @inlinable
    public func cropImage(width: Int64, height: Int64, imageUrl: String? = nil, imageBase64: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CropImageResponse {
        try await self.cropImage(CropImageRequest(width: width, height: height, imageUrl: imageUrl, imageBase64: imageBase64), region: region, logger: logger, on: eventLoop)
    }
}
