//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCGaapError {
    public struct InvalidParameterValue: TCGaapErrorType {
        enum Code: String {
            case certificateContentNotMatchKey = "InvalidParameterValue.CertificateContentNotMatchKey"
            case certificateNotMatchDomain = "InvalidParameterValue.CertificateNotMatchDomain"
            case domainInIcpBlacklist = "InvalidParameterValue.DomainInIcpBlacklist"
            case domainNotRegister = "InvalidParameterValue.DomainNotRegister"
            case duplicateRS = "InvalidParameterValue.DuplicateRS"
            case duplicatedListenerPort = "InvalidParameterValue.DuplicatedListenerPort"
            case featureConflict = "InvalidParameterValue.FeatureConflict"
            case globalDomainHitBanBlacklist = "InvalidParameterValue.GlobalDomainHitBanBlacklist"
            case hitBanBlacklist = "InvalidParameterValue.HitBanBlacklist"
            case hitBlacklist = "InvalidParameterValue.HitBlacklist"
            case invalidBandwidth = "InvalidParameterValue.InvalidBandwidth"
            case invalidCertificateContent = "InvalidParameterValue.InvalidCertificateContent"
            case invalidCertificateId = "InvalidParameterValue.InvalidCertificateId"
            case invalidCertificateKey = "InvalidParameterValue.InvalidCertificateKey"
            case invalidConcurrency = "InvalidParameterValue.InvalidConcurrency"
            case invalidListenerPort = "InvalidParameterValue.InvalidListenerPort"
            case invalidTags = "InvalidParameterValue.InvalidTags"
            case l7DomainHitBanBlacklist = "InvalidParameterValue.L7DomainHitBanBlacklist"
            case projectIdNotBelong = "InvalidParameterValue.ProjectIdNotBelong"
            case proxyAndGroupFeatureConflict = "InvalidParameterValue.ProxyAndGroupFeatureConflict"
            case proxyAndRegionFeatureConflict = "InvalidParameterValue.ProxyAndRegionFeatureConflict"
            case realServerNotBelong = "InvalidParameterValue.RealServerNotBelong"
            case unknownAccessRegion = "InvalidParameterValue.UnknownAccessRegion"
            case unknownDestRegion = "InvalidParameterValue.UnknownDestRegion"
            case other = "InvalidParameterValue"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var certificateContentNotMatchKey: InvalidParameterValue {
            InvalidParameterValue(.certificateContentNotMatchKey)
        }

        /// Https证书与域名不匹配。
        public static var certificateNotMatchDomain: InvalidParameterValue {
            InvalidParameterValue(.certificateNotMatchDomain)
        }

        /// 域名在ICP黑名单内。
        public static var domainInIcpBlacklist: InvalidParameterValue {
            InvalidParameterValue(.domainInIcpBlacklist)
        }

        /// 域名未备案。
        public static var domainNotRegister: InvalidParameterValue {
            InvalidParameterValue(.domainNotRegister)
        }

        /// RealServer已存在。
        public static var duplicateRS: InvalidParameterValue {
            InvalidParameterValue(.duplicateRS)
        }

        /// 监听器端口已存在。
        public static var duplicatedListenerPort: InvalidParameterValue {
            InvalidParameterValue(.duplicatedListenerPort)
        }

        /// 无法同时开启所设置的特性。
        public static var featureConflict: InvalidParameterValue {
            InvalidParameterValue(.featureConflict)
        }

        /// 该默认入口被封禁，无法添加。
        public static var globalDomainHitBanBlacklist: InvalidParameterValue {
            InvalidParameterValue(.globalDomainHitBanBlacklist)
        }

        /// 资源已被录入封禁黑名单。
        public static var hitBanBlacklist: InvalidParameterValue {
            InvalidParameterValue(.hitBanBlacklist)
        }

        /// header黑名单限制。
        public static var hitBlacklist: InvalidParameterValue {
            InvalidParameterValue(.hitBlacklist)
        }

        /// 带宽值不在可选范围内。
        public static var invalidBandwidth: InvalidParameterValue {
            InvalidParameterValue(.invalidBandwidth)
        }

        /// 解析失败，请检查证书内容格式。
        public static var invalidCertificateContent: InvalidParameterValue {
            InvalidParameterValue(.invalidCertificateContent)
        }

        /// 证书不可用。
        public static var invalidCertificateId: InvalidParameterValue {
            InvalidParameterValue(.invalidCertificateId)
        }

        /// 解析失败，请检查证书密钥格式。
        public static var invalidCertificateKey: InvalidParameterValue {
            InvalidParameterValue(.invalidCertificateKey)
        }

        /// 并发量值不在可选范围内。
        public static var invalidConcurrency: InvalidParameterValue {
            InvalidParameterValue(.invalidConcurrency)
        }

        /// 该监听器端口不可用。
        public static var invalidListenerPort: InvalidParameterValue {
            InvalidParameterValue(.invalidListenerPort)
        }

        /// 未找到或无权限访问该标签
        public static var invalidTags: InvalidParameterValue {
            InvalidParameterValue(.invalidTags)
        }

        /// 该域名被封禁，无法添加。
        public static var l7DomainHitBanBlacklist: InvalidParameterValue {
            InvalidParameterValue(.l7DomainHitBanBlacklist)
        }

        /// 项目不属于该用户。
        public static var projectIdNotBelong: InvalidParameterValue {
            InvalidParameterValue(.projectIdNotBelong)
        }

        /// 该通道组下无法支持该通道所需的特性。
        public static var proxyAndGroupFeatureConflict: InvalidParameterValue {
            InvalidParameterValue(.proxyAndGroupFeatureConflict)
        }

        /// 该地区不支持通道所设置的特性。
        public static var proxyAndRegionFeatureConflict: InvalidParameterValue {
            InvalidParameterValue(.proxyAndRegionFeatureConflict)
        }

        /// 源站不属于该用户。
        public static var realServerNotBelong: InvalidParameterValue {
            InvalidParameterValue(.realServerNotBelong)
        }

        /// 未找到或无权限访问的加速区域。
        public static var unknownAccessRegion: InvalidParameterValue {
            InvalidParameterValue(.unknownAccessRegion)
        }

        /// 未找到或无权限访问的源站区域。
        public static var unknownDestRegion: InvalidParameterValue {
            InvalidParameterValue(.unknownDestRegion)
        }

        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }

        public func asGaapError() -> TCGaapError {
            let code: TCGaapError.Code
            switch self.error {
            case .certificateContentNotMatchKey:
                code = .invalidParameterValue_CertificateContentNotMatchKey
            case .certificateNotMatchDomain:
                code = .invalidParameterValue_CertificateNotMatchDomain
            case .domainInIcpBlacklist:
                code = .invalidParameterValue_DomainInIcpBlacklist
            case .domainNotRegister:
                code = .invalidParameterValue_DomainNotRegister
            case .duplicateRS:
                code = .invalidParameterValue_DuplicateRS
            case .duplicatedListenerPort:
                code = .invalidParameterValue_DuplicatedListenerPort
            case .featureConflict:
                code = .invalidParameterValue_FeatureConflict
            case .globalDomainHitBanBlacklist:
                code = .invalidParameterValue_GlobalDomainHitBanBlacklist
            case .hitBanBlacklist:
                code = .invalidParameterValue_HitBanBlacklist
            case .hitBlacklist:
                code = .invalidParameterValue_HitBlacklist
            case .invalidBandwidth:
                code = .invalidParameterValue_InvalidBandwidth
            case .invalidCertificateContent:
                code = .invalidParameterValue_InvalidCertificateContent
            case .invalidCertificateId:
                code = .invalidParameterValue_InvalidCertificateId
            case .invalidCertificateKey:
                code = .invalidParameterValue_InvalidCertificateKey
            case .invalidConcurrency:
                code = .invalidParameterValue_InvalidConcurrency
            case .invalidListenerPort:
                code = .invalidParameterValue_InvalidListenerPort
            case .invalidTags:
                code = .invalidParameterValue_InvalidTags
            case .l7DomainHitBanBlacklist:
                code = .invalidParameterValue_L7DomainHitBanBlacklist
            case .projectIdNotBelong:
                code = .invalidParameterValue_ProjectIdNotBelong
            case .proxyAndGroupFeatureConflict:
                code = .invalidParameterValue_ProxyAndGroupFeatureConflict
            case .proxyAndRegionFeatureConflict:
                code = .invalidParameterValue_ProxyAndRegionFeatureConflict
            case .realServerNotBelong:
                code = .invalidParameterValue_RealServerNotBelong
            case .unknownAccessRegion:
                code = .invalidParameterValue_UnknownAccessRegion
            case .unknownDestRegion:
                code = .invalidParameterValue_UnknownDestRegion
            case .other:
                code = .invalidParameterValue
            }
            return TCGaapError(code, context: self.context)
        }
    }
}
