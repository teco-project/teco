//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Gaap {
    /// DescribeHTTPSListeners请求参数结构体
    public struct DescribeHTTPSListenersRequest: TCPaginatedRequest {
        /// 过滤条件，通道ID
        public let proxyId: String?

        /// 过滤条件，根据监听器ID进行精确查询。
        public let listenerId: String?

        /// 过滤条件，根据监听器名称进行精确查询。
        public let listenerName: String?

        /// 过滤条件，根据监听器端口进行精确查询。
        public let port: UInt64?

        /// 偏移量， 默认为0
        public let offset: UInt64?

        /// 限制数量，默认为20
        public let limit: UInt64?

        /// 过滤条件，支持按照端口或监听器名称进行模糊查询
        public let searchValue: String?

        /// 过滤条件，通道组ID
        public let groupId: String?

        /// 支持Http3的开关，其中：
        /// 0，表示不需要支持Http3接入；
        /// 1，表示需要支持Http3接入。
        /// 注意：如果支持了Http3的功能，那么该监听器会占用对应的UDP接入端口，不可再创建相同端口的UDP监听器。
        /// 该功能的启停无法在监听器创建完毕后再修改。
        public let http3Supported: Int64?

        public init(proxyId: String? = nil, listenerId: String? = nil, listenerName: String? = nil, port: UInt64? = nil, offset: UInt64? = nil, limit: UInt64? = nil, searchValue: String? = nil, groupId: String? = nil, http3Supported: Int64? = nil) {
            self.proxyId = proxyId
            self.listenerId = listenerId
            self.listenerName = listenerName
            self.port = port
            self.offset = offset
            self.limit = limit
            self.searchValue = searchValue
            self.groupId = groupId
            self.http3Supported = http3Supported
        }

        enum CodingKeys: String, CodingKey {
            case proxyId = "ProxyId"
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case port = "Port"
            case offset = "Offset"
            case limit = "Limit"
            case searchValue = "SearchValue"
            case groupId = "GroupId"
            case http3Supported = "Http3Supported"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeHTTPSListenersResponse) -> DescribeHTTPSListenersRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeHTTPSListenersRequest(proxyId: self.proxyId, listenerId: self.listenerId, listenerName: self.listenerName, port: self.port, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, searchValue: self.searchValue, groupId: self.groupId, http3Supported: self.http3Supported)
        }
    }

    /// DescribeHTTPSListeners返回参数结构体
    public struct DescribeHTTPSListenersResponse: TCPaginatedResponse {
        /// 监听器数量
        public let totalCount: UInt64

        /// HTTPS监听器列表
        public let listenerSet: [HTTPSListener]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case listenerSet = "ListenerSet"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [HTTPSListener] {
            self.listenerSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询HTTPS监听器信息
    ///
    /// 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
    @inlinable
    public func describeHTTPSListeners(_ input: DescribeHTTPSListenersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHTTPSListenersResponse> {
        self.client.execute(action: "DescribeHTTPSListeners", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询HTTPS监听器信息
    ///
    /// 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
    @inlinable
    public func describeHTTPSListeners(_ input: DescribeHTTPSListenersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHTTPSListenersResponse {
        try await self.client.execute(action: "DescribeHTTPSListeners", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询HTTPS监听器信息
    ///
    /// 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
    @inlinable
    public func describeHTTPSListeners(proxyId: String? = nil, listenerId: String? = nil, listenerName: String? = nil, port: UInt64? = nil, offset: UInt64? = nil, limit: UInt64? = nil, searchValue: String? = nil, groupId: String? = nil, http3Supported: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHTTPSListenersResponse> {
        self.describeHTTPSListeners(.init(proxyId: proxyId, listenerId: listenerId, listenerName: listenerName, port: port, offset: offset, limit: limit, searchValue: searchValue, groupId: groupId, http3Supported: http3Supported), region: region, logger: logger, on: eventLoop)
    }

    /// 查询HTTPS监听器信息
    ///
    /// 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
    @inlinable
    public func describeHTTPSListeners(proxyId: String? = nil, listenerId: String? = nil, listenerName: String? = nil, port: UInt64? = nil, offset: UInt64? = nil, limit: UInt64? = nil, searchValue: String? = nil, groupId: String? = nil, http3Supported: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHTTPSListenersResponse {
        try await self.describeHTTPSListeners(.init(proxyId: proxyId, listenerId: listenerId, listenerName: listenerName, port: port, offset: offset, limit: limit, searchValue: searchValue, groupId: groupId, http3Supported: http3Supported), region: region, logger: logger, on: eventLoop)
    }

    /// 查询HTTPS监听器信息
    ///
    /// 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
    @inlinable
    public func describeHTTPSListenersPaginated(_ input: DescribeHTTPSListenersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [HTTPSListener])> {
        self.client.paginate(input: input, region: region, command: self.describeHTTPSListeners, logger: logger, on: eventLoop)
    }

    /// 查询HTTPS监听器信息
    ///
    /// 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
    @inlinable @discardableResult
    public func describeHTTPSListenersPaginated(_ input: DescribeHTTPSListenersRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeHTTPSListenersResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeHTTPSListeners, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询HTTPS监听器信息
    ///
    /// 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
    ///
    /// - Returns: `AsyncSequence`s of `HTTPSListener` and `DescribeHTTPSListenersResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeHTTPSListenersPaginator(_ input: DescribeHTTPSListenersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeHTTPSListenersRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeHTTPSListeners, logger: logger, on: eventLoop)
    }
}
