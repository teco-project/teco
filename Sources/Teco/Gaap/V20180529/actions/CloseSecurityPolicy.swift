//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Gaap {
    /// CloseSecurityPolicy请求参数结构体
    public struct CloseSecurityPolicyRequest: TCRequestModel {
        /// 通道ID
        public let proxyId: String?

        /// 安全组策略ID
        public let policyId: String?

        public init(proxyId: String? = nil, policyId: String? = nil) {
            self.proxyId = proxyId
            self.policyId = policyId
        }

        enum CodingKeys: String, CodingKey {
            case proxyId = "ProxyId"
            case policyId = "PolicyId"
        }
    }

    /// CloseSecurityPolicy返回参数结构体
    public struct CloseSecurityPolicyResponse: TCResponseModel {
        /// 异步流程ID，可以通过DescribeAsyncTaskStatus 查询流程执行进展和状态
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 关闭安全策略
    @inlinable
    public func closeSecurityPolicy(_ input: CloseSecurityPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CloseSecurityPolicyResponse> {
        self.client.execute(action: "CloseSecurityPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 关闭安全策略
    @inlinable
    public func closeSecurityPolicy(_ input: CloseSecurityPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CloseSecurityPolicyResponse {
        try await self.client.execute(action: "CloseSecurityPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 关闭安全策略
    @inlinable
    public func closeSecurityPolicy(proxyId: String? = nil, policyId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CloseSecurityPolicyResponse> {
        self.closeSecurityPolicy(.init(proxyId: proxyId, policyId: policyId), region: region, logger: logger, on: eventLoop)
    }

    /// 关闭安全策略
    @inlinable
    public func closeSecurityPolicy(proxyId: String? = nil, policyId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CloseSecurityPolicyResponse {
        try await self.closeSecurityPolicy(.init(proxyId: proxyId, policyId: policyId), region: region, logger: logger, on: eventLoop)
    }
}
