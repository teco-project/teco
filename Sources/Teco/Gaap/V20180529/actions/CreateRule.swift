//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Gaap {
    /// CreateRule请求参数结构体
    public struct CreateRuleRequest: TCRequest {
        /// 7层监听器ID
        public let listenerId: String

        /// 转发规则的域名
        public let domain: String

        /// 转发规则的路径
        public let path: String

        /// 转发规则对应源站的类型，支持IP和DOMAIN类型。
        public let realServerType: String

        /// 监听器源站访问策略，其中：rr表示轮询；wrr表示加权轮询；lc表示最小连接数。
        public let scheduler: String

        /// 规则是否开启健康检查，1开启，0关闭。
        public let healthCheck: UInt64

        /// 源站健康检查相关参数
        public let checkParams: RuleCheckParams?

        /// 加速通道转发到源站的协议类型：支持HTTP或HTTPS。
        /// 不传递该字段时表示使用对应监听器的ForwardProtocol。
        public let forwardProtocol: String?

        /// 回源Host。加速通道转发到源站的host，不设置该参数时，使用默认的host设置，即客户端发起的http请求的host。
        public let forwardHost: String?

        /// 服务器名称指示（ServerNameIndication，简称SNI）开关。ON表示开启，OFF表示关闭。创建HTTP监听器转发规则时，SNI功能默认关闭。
        public let serverNameIndicationSwitch: String?

        /// 服务器名称指示（ServerNameIndication，简称SNI），当SNI开关打开时，该字段必填。
        public let serverNameIndication: String?

        /// HTTP强制跳转HTTPS。输入当前规则对应的域名与地址。
        public let forcedRedirect: String?

        public init(listenerId: String, domain: String, path: String, realServerType: String, scheduler: String, healthCheck: UInt64, checkParams: RuleCheckParams? = nil, forwardProtocol: String? = nil, forwardHost: String? = nil, serverNameIndicationSwitch: String? = nil, serverNameIndication: String? = nil, forcedRedirect: String? = nil) {
            self.listenerId = listenerId
            self.domain = domain
            self.path = path
            self.realServerType = realServerType
            self.scheduler = scheduler
            self.healthCheck = healthCheck
            self.checkParams = checkParams
            self.forwardProtocol = forwardProtocol
            self.forwardHost = forwardHost
            self.serverNameIndicationSwitch = serverNameIndicationSwitch
            self.serverNameIndication = serverNameIndication
            self.forcedRedirect = forcedRedirect
        }

        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case domain = "Domain"
            case path = "Path"
            case realServerType = "RealServerType"
            case scheduler = "Scheduler"
            case healthCheck = "HealthCheck"
            case checkParams = "CheckParams"
            case forwardProtocol = "ForwardProtocol"
            case forwardHost = "ForwardHost"
            case serverNameIndicationSwitch = "ServerNameIndicationSwitch"
            case serverNameIndication = "ServerNameIndication"
            case forcedRedirect = "ForcedRedirect"
        }
    }

    /// CreateRule返回参数结构体
    public struct CreateRuleResponse: TCResponse {
        /// 创建转发规则成功返回规则ID
        public let ruleId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case requestId = "RequestId"
        }
    }

    /// 创建监听器转发规则
    ///
    /// 该接口（CreateRule）用于创建HTTP/HTTPS监听器转发规则。
    @inlinable
    public func createRule(_ input: CreateRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRuleResponse> {
        self.client.execute(action: "CreateRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建监听器转发规则
    ///
    /// 该接口（CreateRule）用于创建HTTP/HTTPS监听器转发规则。
    @inlinable
    public func createRule(_ input: CreateRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRuleResponse {
        try await self.client.execute(action: "CreateRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建监听器转发规则
    ///
    /// 该接口（CreateRule）用于创建HTTP/HTTPS监听器转发规则。
    @inlinable
    public func createRule(listenerId: String, domain: String, path: String, realServerType: String, scheduler: String, healthCheck: UInt64, checkParams: RuleCheckParams? = nil, forwardProtocol: String? = nil, forwardHost: String? = nil, serverNameIndicationSwitch: String? = nil, serverNameIndication: String? = nil, forcedRedirect: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRuleResponse> {
        self.createRule(.init(listenerId: listenerId, domain: domain, path: path, realServerType: realServerType, scheduler: scheduler, healthCheck: healthCheck, checkParams: checkParams, forwardProtocol: forwardProtocol, forwardHost: forwardHost, serverNameIndicationSwitch: serverNameIndicationSwitch, serverNameIndication: serverNameIndication, forcedRedirect: forcedRedirect), region: region, logger: logger, on: eventLoop)
    }

    /// 创建监听器转发规则
    ///
    /// 该接口（CreateRule）用于创建HTTP/HTTPS监听器转发规则。
    @inlinable
    public func createRule(listenerId: String, domain: String, path: String, realServerType: String, scheduler: String, healthCheck: UInt64, checkParams: RuleCheckParams? = nil, forwardProtocol: String? = nil, forwardHost: String? = nil, serverNameIndicationSwitch: String? = nil, serverNameIndication: String? = nil, forcedRedirect: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRuleResponse {
        try await self.createRule(.init(listenerId: listenerId, domain: domain, path: path, realServerType: realServerType, scheduler: scheduler, healthCheck: healthCheck, checkParams: checkParams, forwardProtocol: forwardProtocol, forwardHost: forwardHost, serverNameIndicationSwitch: serverNameIndicationSwitch, serverNameIndication: serverNameIndication, forcedRedirect: forcedRedirect), region: region, logger: logger, on: eventLoop)
    }
}
