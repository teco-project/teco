//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Gaap {
    /// DescribeGroupDomainConfig请求参数结构体
    public struct DescribeGroupDomainConfigRequest: TCRequestModel {
        /// 通道组ID。
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    /// DescribeGroupDomainConfig返回参数结构体
    public struct DescribeGroupDomainConfigResponse: TCResponseModel {
        /// 域名解析就近接入配置列表。
        public let accessRegionList: [DomainAccessRegionDict]

        /// 默认访问Ip。
        public let defaultDnsIp: String

        /// 通道组ID。
        public let groupId: String

        /// 接入地域的配置的总数。
        public let accessRegionCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case accessRegionList = "AccessRegionList"
            case defaultDnsIp = "DefaultDnsIp"
            case groupId = "GroupId"
            case accessRegionCount = "AccessRegionCount"
            case requestId = "RequestId"
        }
    }

    /// 获取通道组域名解析配置详情（废弃）
    ///
    /// 本接口（DescribeGroupDomainConfig）用于获取通道组域名解析配置详情。
    @inlinable
    public func describeGroupDomainConfig(_ input: DescribeGroupDomainConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGroupDomainConfigResponse> {
        self.client.execute(action: "DescribeGroupDomainConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取通道组域名解析配置详情（废弃）
    ///
    /// 本接口（DescribeGroupDomainConfig）用于获取通道组域名解析配置详情。
    @inlinable
    public func describeGroupDomainConfig(_ input: DescribeGroupDomainConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGroupDomainConfigResponse {
        try await self.client.execute(action: "DescribeGroupDomainConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取通道组域名解析配置详情（废弃）
    ///
    /// 本接口（DescribeGroupDomainConfig）用于获取通道组域名解析配置详情。
    @inlinable
    public func describeGroupDomainConfig(groupId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeGroupDomainConfigResponse> {
        self.describeGroupDomainConfig(DescribeGroupDomainConfigRequest(groupId: groupId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取通道组域名解析配置详情（废弃）
    ///
    /// 本接口（DescribeGroupDomainConfig）用于获取通道组域名解析配置详情。
    @inlinable
    public func describeGroupDomainConfig(groupId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeGroupDomainConfigResponse {
        try await self.describeGroupDomainConfig(DescribeGroupDomainConfigRequest(groupId: groupId), region: region, logger: logger, on: eventLoop)
    }
}
