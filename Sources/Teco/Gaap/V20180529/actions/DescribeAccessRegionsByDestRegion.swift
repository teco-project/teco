//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Gaap {
    /// DescribeAccessRegionsByDestRegion请求参数结构体
    public struct DescribeAccessRegionsByDestRegionRequest: TCRequest {
        /// 源站区域：接口DescribeDestRegions返回DestRegionSet中的RegionId字段值
        public let destRegion: String

        /// IP版本，可取值：IPv4、IPv6，默认值IPv4
        public let ipAddressVersion: String?

        /// 通道套餐类型，Thunder表示标准通道组，Accelerator表示游戏加速器通道，CrossBorder表示跨境通道。
        public let packageType: String?

        public init(destRegion: String, ipAddressVersion: String? = nil, packageType: String? = nil) {
            self.destRegion = destRegion
            self.ipAddressVersion = ipAddressVersion
            self.packageType = packageType
        }

        enum CodingKeys: String, CodingKey {
            case destRegion = "DestRegion"
            case ipAddressVersion = "IPAddressVersion"
            case packageType = "PackageType"
        }
    }

    /// DescribeAccessRegionsByDestRegion返回参数结构体
    public struct DescribeAccessRegionsByDestRegionResponse: TCResponse {
        /// 可用加速区域数量
        public let totalCount: Int64

        /// 可用加速区域信息列表
        public let accessRegionSet: [AccessRegionDetial]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case accessRegionSet = "AccessRegionSet"
            case requestId = "RequestId"
        }
    }

    /// 根据源站区域查询可用加速区域
    ///
    /// 本接口（DescribeAccessRegionsByDestRegion）根据源站区域查询可用的加速区域列表。
    @inlinable
    public func describeAccessRegionsByDestRegion(_ input: DescribeAccessRegionsByDestRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessRegionsByDestRegionResponse> {
        self.client.execute(action: "DescribeAccessRegionsByDestRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据源站区域查询可用加速区域
    ///
    /// 本接口（DescribeAccessRegionsByDestRegion）根据源站区域查询可用的加速区域列表。
    @inlinable
    public func describeAccessRegionsByDestRegion(_ input: DescribeAccessRegionsByDestRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessRegionsByDestRegionResponse {
        try await self.client.execute(action: "DescribeAccessRegionsByDestRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据源站区域查询可用加速区域
    ///
    /// 本接口（DescribeAccessRegionsByDestRegion）根据源站区域查询可用的加速区域列表。
    @inlinable
    public func describeAccessRegionsByDestRegion(destRegion: String, ipAddressVersion: String? = nil, packageType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAccessRegionsByDestRegionResponse> {
        self.describeAccessRegionsByDestRegion(.init(destRegion: destRegion, ipAddressVersion: ipAddressVersion, packageType: packageType), region: region, logger: logger, on: eventLoop)
    }

    /// 根据源站区域查询可用加速区域
    ///
    /// 本接口（DescribeAccessRegionsByDestRegion）根据源站区域查询可用的加速区域列表。
    @inlinable
    public func describeAccessRegionsByDestRegion(destRegion: String, ipAddressVersion: String? = nil, packageType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAccessRegionsByDestRegionResponse {
        try await self.describeAccessRegionsByDestRegion(.init(destRegion: destRegion, ipAddressVersion: ipAddressVersion, packageType: packageType), region: region, logger: logger, on: eventLoop)
    }
}
