//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Gaap {
    /// 通道组加速地域列表，包括加速地域，以及该加速地域对应的带宽和并发配置。
    public struct AccessConfiguration: TCInputModel {
        /// 加速地域。
        public let accessRegion: String
        
        /// 通道带宽上限，单位：Mbps。
        public let bandwidth: UInt64
        
        /// 通道并发量上限，表示同时在线的连接数，单位：万。
        public let concurrent: UInt64
        
        /// 网络类型，可取值：normal、cn2，默认值为normal
        public let networkType: String?
        
        public init (accessRegion: String, bandwidth: UInt64, concurrent: UInt64, networkType: String?) {
            self.accessRegion = accessRegion
            self.bandwidth = bandwidth
            self.concurrent = concurrent
            self.networkType = networkType
        }
        
        enum CodingKeys: String, CodingKey {
            case accessRegion = "AccessRegion"
            case bandwidth = "Bandwidth"
            case concurrent = "Concurrent"
            case networkType = "NetworkType"
        }
    }
    
    /// 根据源站查询的可用加速区域信息及对应的可选带宽和并发量。
    public struct AccessRegionDetial: TCOutputModel {
        /// 区域ID
        public let regionId: String
        
        /// 区域的中文或英文名称
        public let regionName: String
        
        /// 可选的并发量取值数组
        public let concurrentList: [Int64]
        
        /// 可选的带宽取值数组
        public let bandwidthList: [Int64]
        
        /// 机房所属大区
        public let regionArea: String
        
        /// 机房所属大区名
        public let regionAreaName: String
        
        /// 机房类型, dc表示DataCenter数据中心, ec表示EdgeComputing边缘节点
        public let idcType: String
        
        /// 特性位图，每个bit位代表一种特性，其中：
        /// 0，表示不支持该特性；
        /// 1，表示支持该特性。
        /// 特性位图含义如下（从右往左）：
        /// 第1个bit，支持4层加速；
        /// 第2个bit，支持7层加速；
        /// 第3个bit，支持Http3接入；
        /// 第4个bit，支持IPv6；
        /// 第5个bit，支持精品BGP接入；
        /// 第6个bit，支持三网接入；
        /// 第7个bit，支持接入段Qos加速。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let featureBitmap: Int64?
        
        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case regionName = "RegionName"
            case concurrentList = "ConcurrentList"
            case bandwidthList = "BandwidthList"
            case regionArea = "RegionArea"
            case regionAreaName = "RegionAreaName"
            case idcType = "IDCType"
            case featureBitmap = "FeatureBitmap"
        }
    }
    
    /// 域名就近接入配置
    public struct AccessRegionDomainConf: TCInputModel {
        /// 地域ID。
        public let regionId: String
        
        /// 就近接入区域国家内部编码，编码列表可通过DescribeCountryAreaMapping接口获取。
        public let nationCountryInnerList: [String]?
        
        public init (regionId: String, nationCountryInnerList: [String]?) {
            self.regionId = regionId
            self.nationCountryInnerList = nationCountryInnerList
        }
        
        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case nationCountryInnerList = "NationCountryInnerList"
        }
    }
    
    /// 带宽梯度价格
    public struct BandwidthPriceGradient: TCOutputModel {
        /// 带宽范围。
        public let bandwidthRange: [Int64]
        
        /// 在对应带宽范围内的单宽单价，单位：元/Mbps/天。
        public let bandwidthUnitPrice: Float
        
        /// 带宽折扣价，单位：元/Mbps/天。
        public let discountBandwidthUnitPrice: Float
        
        enum CodingKeys: String, CodingKey {
            case bandwidthRange = "BandwidthRange"
            case bandwidthUnitPrice = "BandwidthUnitPrice"
            case discountBandwidthUnitPrice = "DiscountBandwidthUnitPrice"
        }
    }
    
    /// 已绑定的源站信息
    public struct BindRealServer: TCOutputModel {
        /// 源站ID
        public let realServerId: String
        
        /// 源站IP或者域名
        public let realServerIP: String
        
        /// 该源站所占权重
        public let realServerWeight: Int64
        
        /// 源站健康检查状态，其中：
        /// 0表示正常；
        /// 1表示异常。
        /// 未开启健康检查状态时，该状态始终为正常。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerStatus: Int64?
        
        /// 源站的端口号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerPort: Int64?
        
        /// 当源站为域名时，域名被解析成一个或者多个IP，该字段表示其中异常的IP列表。状态异常，但该字段为空时，表示域名解析异常。
        public let downIPList: [String]
        
        /// 源站主备角色：master表示主，slave表示备，该参数必须在监听器打开了源站主备模式。
        public let realServerFailoverRole: String
        
        enum CodingKeys: String, CodingKey {
            case realServerId = "RealServerId"
            case realServerIP = "RealServerIP"
            case realServerWeight = "RealServerWeight"
            case realServerStatus = "RealServerStatus"
            case realServerPort = "RealServerPort"
            case downIPList = "DownIPList"
            case realServerFailoverRole = "RealServerFailoverRole"
        }
    }
    
    /// 添加源站的源站信息返回值
    public struct BindRealServerInfo: TCOutputModel {
        /// 源站的IP或域名
        public let realServerIP: String
        
        /// 源站ID
        public let realServerId: String
        
        /// 源站名称
        public let realServerName: String
        
        /// 项目ID
        public let projectId: Int64
        
        /// 标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [TagPair]?
        
        enum CodingKeys: String, CodingKey {
            case realServerIP = "RealServerIP"
            case realServerId = "RealServerId"
            case realServerName = "RealServerName"
            case projectId = "ProjectId"
            case tagSet = "TagSet"
        }
    }
    
    /// 接口扩展参数
    public struct Capacity: TCInputModel {
        /// 电信鉴权的Token
        public let ctccToken: String?
        
        /// 终端所处在的省份，建议不填写由服务端自动获取，若需填写请填写带有省、市、自治区、特别行政区等后缀的省份中文全称
        public let province: String?
        
        public init (ctccToken: String?, province: String?) {
            self.ctccToken = ctccToken
            self.province = province
        }
        
        enum CodingKeys: String, CodingKey {
            case ctccToken = "CTCCToken"
            case province = "Province"
        }
    }
    
    /// 服务器证书
    public struct Certificate: TCOutputModel {
        /// 证书ID
        public let certificateId: String
        
        /// 证书名称（旧参数，请使用CertificateAlias）。
        public let certificateName: String
        
        /// 证书类型。
        public let certificateType: Int64
        
        /// 证书名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificateAlias: String?
        
        /// 证书创建时间，采用Unix时间戳的方式，表示从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
        public let createTime: UInt64
        
        /// 证书生效起始时间，采用Unix时间戳的方式，表示从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let beginTime: UInt64?
        
        /// 证书过期时间，采用Unix时间戳的方式，表示从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: UInt64?
        
        /// 证书签发者通用名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let issuerCN: String?
        
        /// 证书主题通用名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subjectCN: String?
        
        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
            case certificateName = "CertificateName"
            case certificateType = "CertificateType"
            case certificateAlias = "CertificateAlias"
            case createTime = "CreateTime"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case issuerCN = "IssuerCN"
            case subjectCN = "SubjectCN"
        }
    }
    
    /// 证书别名信息
    public struct CertificateAliasInfo: TCOutputModel {
        /// 证书ID
        public let certificateId: String
        
        /// 证书别名
        public let certificateAlias: String
        
        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
            case certificateAlias = "CertificateAlias"
        }
    }
    
    /// 证书详情，包括证书ID， 证书名字，证书类型，证书内容以及密钥内容。
    public struct CertificateDetail: TCOutputModel {
        /// 证书ID。
        public let certificateId: String
        
        /// 证书类型。
        public let certificateType: Int64
        
        /// 证书名字。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificateAlias: String?
        
        /// 证书内容。
        public let certificateContent: String
        
        /// 密钥内容。仅当证书类型为SSL证书时，返回该字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificateKey: String?
        
        /// 创建时间，采用Unix时间戳的方式，表示从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: UInt64?
        
        /// 证书生效起始时间，采用Unix时间戳的方式，表示从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let beginTime: UInt64?
        
        /// 证书过期时间，采用Unix时间戳的方式，表示从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: UInt64?
        
        /// 证书签发者通用名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let issuerCN: String?
        
        /// 证书主题通用名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subjectCN: String?
        
        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
            case certificateType = "CertificateType"
            case certificateAlias = "CertificateAlias"
            case certificateContent = "CertificateContent"
            case certificateKey = "CertificateKey"
            case createTime = "CreateTime"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case issuerCN = "IssuerCN"
            case subjectCN = "SubjectCN"
        }
    }
    
    /// 国家地区映射关系（名称和编码）
    public struct CountryAreaMap: TCOutputModel {
        /// 国家名称。
        public let nationCountryName: String
        
        /// 国家编码。
        public let nationCountryInnerCode: String
        
        /// 地区名称。
        public let geographicalZoneName: String
        
        /// 地区编码。
        public let geographicalZoneInnerCode: String
        
        /// 大洲名称。
        public let continentName: String
        
        /// 大洲编码。
        public let continentInnerCode: String
        
        /// 标注信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?
        
        enum CodingKeys: String, CodingKey {
            case nationCountryName = "NationCountryName"
            case nationCountryInnerCode = "NationCountryInnerCode"
            case geographicalZoneName = "GeographicalZoneName"
            case geographicalZoneInnerCode = "GeographicalZoneInnerCode"
            case continentName = "ContinentName"
            case continentInnerCode = "ContinentInnerCode"
            case remark = "Remark"
        }
    }
    
    /// 网络加速的目标地址信息
    public struct DestAddressInfo: TCInputModel, TCOutputModel {
        /// 加速的目标IP，可多ip一起加速
        public let destIp: [String]
        
        public init (destIp: [String]) {
            self.destIp = destIp
        }
        
        enum CodingKeys: String, CodingKey {
            case destIp = "DestIp"
        }
    }
    
    /// 终端设备信息
    public struct DeviceInfo: TCInputModel {
        /// 设备数据卡所属的运营商
        /// 1：移动
        /// 2：电信
        /// 3：联通
        /// 4：广电
        /// 99：其他
        public let vendor: Int64?
        
        /// 设备操作系统
        /// 1：Android
        /// 2： IOS
        /// 99：其他
        public let os: Int64?
        
        /// 设备唯一标识
        /// IOS 填写 IDFV
        /// Android 填写 IMEI
        public let deviceId: String?
        
        /// 用户手机号码
        public let phoneNum: String?
        
        /// 无线信息
        /// 1：4G
        /// 2：5G
        /// 3：WIFI
        /// 99：其他
        public let wireless: Int64?
        
        public init (vendor: Int64?, os: Int64?, deviceId: String?, phoneNum: String?, wireless: Int64?) {
            self.vendor = vendor
            self.os = os
            self.deviceId = deviceId
            self.phoneNum = phoneNum
            self.wireless = wireless
        }
        
        enum CodingKeys: String, CodingKey {
            case vendor = "Vendor"
            case os = "OS"
            case deviceId = "DeviceId"
            case phoneNum = "PhoneNum"
            case wireless = "Wireless"
        }
    }
    
    /// 统一域名信息
    public struct Domain: TCOutputModel {
        /// 域名ID
        public let domainId: String
        
        /// 完整域名记录
        public let fullDomain: String
        
        /// 别名
        public let alias: String
        
        /// 类型
        public let type: String
        
        /// 状态，1表示关闭，0表示开启，2表示关闭中，3表示开启中
        public let status: UInt64
        
        /// 所属项目
        public let projectId: Int64
        
        /// 默认入口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultValue: String?
        
        /// 通道数量
        public let proxyCount: UInt64
        
        /// 创建时间，使用UNIX时间戳
        public let createTime: UInt64
        
        /// 更新时间，使用UNIX时间戳
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: UInt64?
        
        /// 标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [TagPair]?
        
        /// 封禁解封状态：BANNED表示已封禁，RECOVER表示已解封或未封禁，BANNING表示封禁中，RECOVERING表示解封中，BAN_FAILED表示封禁失败，RECOVER_FAILED表示解封失败。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let banStatus: String?
        
        enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case fullDomain = "FullDomain"
            case alias = "Alias"
            case type = "Type"
            case status = "Status"
            case projectId = "ProjectId"
            case defaultValue = "DefaultValue"
            case proxyCount = "ProxyCount"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case tagSet = "TagSet"
            case banStatus = "BanStatus"
        }
    }
    
    /// 域名解析就近访问配置详情
    public struct DomainAccessRegionDict: TCOutputModel {
        /// 就近接入区域
        public let nationCountryInnerList: [NationCountryInnerInfo]
        
        /// 加速区域通道列表
        public let proxyList: [ProxyIdDict]
        
        /// 加速区域ID
        public let regionId: String
        
        /// 加速区域内部编码
        public let geographicalZoneInnerCode: String
        
        /// 加速区域所属大洲内部编码
        public let continentInnerCode: String
        
        /// 加速区域别名
        public let regionName: String
        
        enum CodingKeys: String, CodingKey {
            case nationCountryInnerList = "NationCountryInnerList"
            case proxyList = "ProxyList"
            case regionId = "RegionId"
            case geographicalZoneInnerCode = "GeographicalZoneInnerCode"
            case continentInnerCode = "ContinentInnerCode"
            case regionName = "RegionName"
        }
    }
    
    /// 域名的定制错误响应配置
    public struct DomainErrorPageInfo: TCOutputModel {
        /// 错误定制响应的配置ID
        public let errorPageId: String
        
        /// 监听器ID
        public let listenerId: String
        
        /// 域名
        public let domain: String
        
        /// 原始错误码
        public let errorNos: [Int64]
        
        /// 新的错误码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newErrorNo: Int64?
        
        /// 需要清理的响应头
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clearHeaders: [String]?
        
        /// 需要设置的响应头
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let setHeaders: [HttpHeaderParam]?
        
        /// 设置的响应体(不包括 HTTP头)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let body: String?
        
        /// 规则状态,0为成功
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?
        
        enum CodingKeys: String, CodingKey {
            case errorPageId = "ErrorPageId"
            case listenerId = "ListenerId"
            case domain = "Domain"
            case errorNos = "ErrorNos"
            case newErrorNo = "NewErrorNo"
            case clearHeaders = "ClearHeaders"
            case setHeaders = "SetHeaders"
            case body = "Body"
            case status = "Status"
        }
    }
    
    /// 按照域名分类的7层监听器转发规则信息
    public struct DomainRuleSet: TCOutputModel {
        /// 转发规则域名。
        public let domain: String
        
        /// 该域名对应的转发规则列表。
        public let ruleSet: [RuleInfo]
        
        /// 该域名对应的服务器证书ID，值为default时，表示使用默认证书（监听器配置的证书）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificateId: String?
        
        /// 该域名对应服务器证书名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificateAlias: String?
        
        /// 该域名对应的客户端证书ID，值为default时，表示使用默认证书（监听器配置的证书）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientCertificateId: String?
        
        /// 该域名对应客户端证书名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientCertificateAlias: String?
        
        /// 该域名对应基础认证配置ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let basicAuthConfId: String?
        
        /// 基础认证开关，其中：
        /// 0，表示未开启；
        /// 1，表示已开启。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let basicAuth: Int64?
        
        /// 该域名对应基础认证配置名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let basicAuthConfAlias: String?
        
        /// 该域名对应源站认证证书ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerCertificateId: String?
        
        /// 源站认证开关，其中：
        /// 0，表示未开启；
        /// 1，表示已开启。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerAuth: Int64?
        
        /// 该域名对应源站认证证书名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerCertificateAlias: String?
        
        /// 该域名对应通道认证证书ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gaapCertificateId: String?
        
        /// 通道认证开关，其中：
        /// 0，表示未开启；
        /// 1，表示已开启。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gaapAuth: Int64?
        
        /// 该域名对应通道认证证书名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let gaapCertificateAlias: String?
        
        /// 源站认证域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerCertificateDomain: String?
        
        /// 多客户端证书时，返回多个证书的id和别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polyClientCertificateAliasInfo: [CertificateAliasInfo]?
        
        /// 多源站证书时，返回多个证书的id和别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polyRealServerCertificateAliasInfo: [CertificateAliasInfo]?
        
        /// 域名的状态。
        /// 0表示运行中，
        /// 1表示变更中，
        /// 2表示删除中。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domainStatus: UInt64?
        
        /// 封禁解封状态：BANNED表示已封禁，RECOVER表示已解封或未封禁，BANNING表示封禁中，RECOVERING表示解封中，BAN_FAILED表示封禁失败，RECOVER_FAILED表示解封失败。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let banStatus: String?
        
        /// Http3特性标识，其中：
        /// 0表示关闭；
        /// 1表示启用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let http3Supported: Int64?
        
        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case ruleSet = "RuleSet"
            case certificateId = "CertificateId"
            case certificateAlias = "CertificateAlias"
            case clientCertificateId = "ClientCertificateId"
            case clientCertificateAlias = "ClientCertificateAlias"
            case basicAuthConfId = "BasicAuthConfId"
            case basicAuth = "BasicAuth"
            case basicAuthConfAlias = "BasicAuthConfAlias"
            case realServerCertificateId = "RealServerCertificateId"
            case realServerAuth = "RealServerAuth"
            case realServerCertificateAlias = "RealServerCertificateAlias"
            case gaapCertificateId = "GaapCertificateId"
            case gaapAuth = "GaapAuth"
            case gaapCertificateAlias = "GaapCertificateAlias"
            case realServerCertificateDomain = "RealServerCertificateDomain"
            case polyClientCertificateAliasInfo = "PolyClientCertificateAliasInfo"
            case polyRealServerCertificateAliasInfo = "PolyRealServerCertificateAliasInfo"
            case domainStatus = "DomainStatus"
            case banStatus = "BanStatus"
            case http3Supported = "Http3Supported"
        }
    }
    
    /// 过滤条件
    public struct Filter: TCInputModel {
        /// 过滤条件
        public let name: String
        
        /// 过滤值
        public let values: [String]
        
        public init (name: String, values: [String]) {
            self.name = name
            self.values = values
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }
    
    /// 统一域名解析的DNS记录
    public struct GlobalDns: TCOutputModel {
        /// 解析记录ID
        public let dnsRecordId: UInt64
        
        /// 域名就近接入地域信息列表
        public let countryAreaList: [CountryAreaMap]
        
        /// 域名解析对应的通道接入点信息列表
        public let accessList: [ProxyAccessInfo]
        
        /// 解析状态：1表示运行中，2表示创建中，3表示修改中，4表示删除中
        public let status: Int64
        
        enum CodingKeys: String, CodingKey {
            case dnsRecordId = "DnsRecordId"
            case countryAreaList = "CountryAreaList"
            case accessList = "AccessList"
            case status = "Status"
        }
    }
    
    /// 可以显示统计数据的通道组和对应通道信息
    public struct GroupStatisticsInfo: TCOutputModel {
        /// 通道组ID
        public let groupId: String
        
        /// 通道组名称
        public let groupName: String
        
        /// 通道组下通道列表
        public let proxySet: [ProxySimpleInfo]
        
        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
            case proxySet = "ProxySet"
        }
    }
    
    /// HTTP类型监听器信息
    public struct HTTPListener: TCOutputModel {
        /// 监听器ID
        public let listenerId: String
        
        /// 监听器名称
        public let listenerName: String
        
        /// 监听器端口
        public let port: UInt64
        
        /// 监听器创建时间，Unix时间戳
        public let createTime: UInt64
        
        /// 监听器协议， HTTP表示HTTP，HTTPS表示HTTPS，此结构取值HTTP
        public let `protocol`: String
        
        /// 监听器状态，其中：
        /// 0表示运行中；
        /// 1表示创建中；
        /// 2表示销毁中；
        /// 3表示源站调整中；
        /// 4表示配置变更中。
        public let listenerStatus: UInt64
        
        /// 监听器的通道ID，如果监听器属于通道组，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyId: String?
        
        /// 监听器的通道组ID，如果监听器属于通道，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?
        
        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case port = "Port"
            case createTime = "CreateTime"
            case `protocol` = "Protocol"
            case listenerStatus = "ListenerStatus"
            case proxyId = "ProxyId"
            case groupId = "GroupId"
        }
    }
    
    /// HTTPS类型监听器信息
    public struct HTTPSListener: TCOutputModel {
        /// 监听器ID
        public let listenerId: String
        
        /// 监听器名称
        public let listenerName: String
        
        /// 监听器端口
        public let port: UInt64
        
        /// 监听器协议， HTTP表示HTTP，HTTPS表示HTTPS，此结构取值HTTPS
        public let `protocol`: String
        
        /// 监听器状态，其中：
        /// 0表示运行中；
        /// 1表示创建中；
        /// 2表示销毁中；
        /// 3表示源站调整中；
        /// 4表示配置变更中。
        public let listenerStatus: UInt64
        
        /// 监听器服务器SSL证书ID
        public let certificateId: String
        
        /// 监听器后端转发源站协议
        public let forwardProtocol: String
        
        /// 监听器创建时间，Unix时间戳
        public let createTime: UInt64
        
        /// 服务器SSL证书的别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let certificateAlias: String?
        
        /// 监听器客户端CA证书ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientCertificateId: String?
        
        /// 监听器认证方式。其中，
        /// 0表示单向认证；
        /// 1表示双向认证。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let authType: Int64?
        
        /// 客户端CA证书别名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientCertificateAlias: String?
        
        /// 多客户端CA证书别名信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let polyClientCertificateAliasInfo: [CertificateAliasInfo]?
        
        /// 是否支持Http3，其中：
        /// 0，不支持Http3接入；
        /// 1，持Http3接入。
        /// 注意：如果支持了Http3的功能，那么该监听器会占用对应的UDP接入端口，不可再创建相同端口的UDP监听器。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let http3Supported: Int64?
        
        /// 监听器的通道ID，如果监听器属于通道组，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyId: String?
        
        /// 监听器的通道组ID，如果监听器属于通道，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?
        
        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case port = "Port"
            case `protocol` = "Protocol"
            case listenerStatus = "ListenerStatus"
            case certificateId = "CertificateId"
            case forwardProtocol = "ForwardProtocol"
            case createTime = "CreateTime"
            case certificateAlias = "CertificateAlias"
            case clientCertificateId = "ClientCertificateId"
            case authType = "AuthType"
            case clientCertificateAlias = "ClientCertificateAlias"
            case polyClientCertificateAliasInfo = "PolyClientCertificateAliasInfo"
            case http3Supported = "Http3Supported"
            case proxyId = "ProxyId"
            case groupId = "GroupId"
        }
    }
    
    /// 描述HTTP的包头参数
    public struct HttpHeaderParam: TCInputModel, TCOutputModel {
        /// HTTP头名
        public let headerName: String
        
        /// HTTP头值
        public let headerValue: String
        
        public init (headerName: String, headerValue: String) {
            self.headerName = headerName
            self.headerValue = headerValue
        }
        
        enum CodingKeys: String, CodingKey {
            case headerName = "HeaderName"
            case headerValue = "HeaderValue"
        }
    }
    
    /// ip信息详情
    public struct IPDetail: TCInputModel, TCOutputModel {
        /// IP字符串
        public let ip: String
        
        /// 供应商，BGP表示默认，CMCC表示中国移动，CUCC表示中国联通，CTCC表示中国电信
        public let provider: String
        
        /// 带宽
        public let bandwidth: Int64
        
        public init (ip: String, provider: String, bandwidth: Int64) {
            self.ip = ip
            self.provider = provider
            self.bandwidth = bandwidth
        }
        
        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case provider = "Provider"
            case bandwidth = "Bandwidth"
        }
    }
    
    /// 内部接口使用，返回可以查询统计数据的监听器信息
    public struct ListenerInfo: TCOutputModel {
        /// 监听器ID
        public let listenerId: String
        
        /// 监听器名称
        public let listenerName: String
        
        /// 监听器监听端口
        public let port: UInt64
        
        /// 监听器协议类型
        public let `protocol`: String
        
        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case port = "Port"
            case `protocol` = "Protocol"
        }
    }
    
    /// 单指标的统计数据
    public struct MetricStatisticsInfo: TCOutputModel {
        /// 指标名称
        public let metricName: String
        
        /// 指标统计数据
        public let metricData: [StatisticsDataInfo]
        
        enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case metricData = "MetricData"
        }
    }
    
    /// 就近接入的国家地区详情
    public struct NationCountryInnerInfo: TCOutputModel {
        /// 国家名
        public let nationCountryName: String
        
        /// 国家内部编码
        public let nationCountryInnerCode: String
        
        enum CodingKeys: String, CodingKey {
            case nationCountryName = "NationCountryName"
            case nationCountryInnerCode = "NationCountryInnerCode"
        }
    }
    
    /// 新添加源站信息
    public struct NewRealServer: TCOutputModel {
        /// 源站ID
        public let realServerId: String
        
        /// 源站ip或域名
        public let realServerIP: String
        
        enum CodingKeys: String, CodingKey {
            case realServerId = "RealServerId"
            case realServerIP = "RealServerIP"
        }
    }
    
    /// 加速通道接入点详细信息(包含id、地域、ip等）
    public struct ProxyAccessInfo: TCOutputModel {
        /// 地域ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: String?
        
        /// 地域名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionName: String?
        
        /// 通道ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyId: String?
        
        /// 通道接入ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?
        
        /// 三网通道VIP列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vipList: [IPDetail]?
        
        /// 接入点IDC类型。ec或dc
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceRegionIdcType: String?
        
        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case regionName = "RegionName"
            case proxyId = "ProxyId"
            case vip = "Vip"
            case vipList = "VipList"
            case sourceRegionIdcType = "SourceRegionIdcType"
        }
    }
    
    /// 通道组详情信息
    public struct ProxyGroupDetail: TCOutputModel {
        /// 创建时间
        public let createTime: Int64
        
        /// 项目ID
        public let projectId: Int64
        
        /// 通道组中通道数量
        public let proxyNum: Int64
        
        /// 通道组状态：
        /// 0表示正常运行；
        /// 1表示创建中；
        /// 4表示销毁中；
        /// 11表示迁移中；
        /// 12表示部分部署中。
        public let status: Int64
        
        /// 归属Uin
        public let ownerUin: String
        
        /// 创建Uin
        public let createUin: String
        
        /// 通道名称
        public let groupName: String
        
        /// 通道组域名解析默认IP
        public let dnsDefaultIp: String
        
        /// 通道组域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?
        
        /// 目标地域
        public let realServerRegionInfo: RegionDetail
        
        /// 是否老通道组，2018-08-03之前创建的通道组为老通道组
        public let isOldGroup: Bool
        
        /// 通道组ID
        public let groupId: String
        
        /// 标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [TagPair]?
        
        /// 安全策略ID，当设置了安全策略时，存在该字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyId: String?
        
        /// 通道组版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?
        
        /// 通道获取客户端IP的方式，0表示TOA，1表示Proxy Protocol
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientIPMethod: [Int64]?
        
        /// IP版本，可取值：IPv4、IPv6，默认值IPv4
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipAddressVersion: String?
        
        /// 通道组套餐类型：Thunder表示标准通道组，Accelerator表示银牌加速通道组，CrossBorder表示跨境通道组。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageType: String?
        
        /// 支持Http3特性的标识，其中：
        /// 0表示关闭；
        /// 1表示启用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let http3Supported: Int64?
        
        /// 特性位图，每个bit位代表一种特性，其中：
        /// 0，表示不支持该特性；
        /// 1，表示支持该特性。
        /// 特性位图含义如下（从右往左）：
        /// 第1个bit，支持4层加速；
        /// 第2个bit，支持7层加速；
        /// 第3个bit，支持Http3接入；
        /// 第4个bit，支持IPv6；
        /// 第5个bit，支持精品BGP接入；
        /// 第6个bit，支持三网接入；
        /// 第7个bit，支持接入段Qos加速。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let featureBitmap: Int64?
        
        enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case projectId = "ProjectId"
            case proxyNum = "ProxyNum"
            case status = "Status"
            case ownerUin = "OwnerUin"
            case createUin = "CreateUin"
            case groupName = "GroupName"
            case dnsDefaultIp = "DnsDefaultIp"
            case domain = "Domain"
            case realServerRegionInfo = "RealServerRegionInfo"
            case isOldGroup = "IsOldGroup"
            case groupId = "GroupId"
            case tagSet = "TagSet"
            case policyId = "PolicyId"
            case version = "Version"
            case clientIPMethod = "ClientIPMethod"
            case ipAddressVersion = "IPAddressVersion"
            case packageType = "PackageType"
            case http3Supported = "Http3Supported"
            case featureBitmap = "FeatureBitmap"
        }
    }
    
    /// 通道组详情列表
    public struct ProxyGroupInfo: TCOutputModel {
        /// 通道组id
        public let groupId: String
        
        /// 通道组域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?
        
        /// 通道组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupName: String?
        
        /// 项目ID
        public let projectId: Int64
        
        /// 目标地域
        public let realServerRegionInfo: RegionDetail
        
        /// 通道组状态。
        /// 其中，
        /// RUNNING表示运行中；
        /// CREATING表示创建中；
        /// DESTROYING表示销毁中；
        /// MOVING表示通道迁移中；
        /// CHANGING表示部分部署中。
        public let status: String
        
        /// 标签列表。
        public let tagSet: [TagPair]
        
        /// 通道组版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?
        
        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: UInt64?
        
        /// 通道组是否包含微软通道
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyType: UInt64?
        
        /// 支持Http3特性的标识，其中：
        /// 0表示关闭；
        /// 1表示启用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let http3Supported: Int64?
        
        /// 特性位图，每个bit位代表一种特性，其中：
        /// 0，表示不支持该特性；
        /// 1，表示支持该特性。
        /// 特性位图含义如下（从右往左）：
        /// 第1个bit，支持4层加速；
        /// 第2个bit，支持7层加速；
        /// 第3个bit，支持Http3接入；
        /// 第4个bit，支持IPv6；
        /// 第5个bit，支持精品BGP接入；
        /// 第6个bit，支持三网接入；
        /// 第7个bit，支持接入段Qos加速。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let featureBitmap: Int64?
        
        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case domain = "Domain"
            case groupName = "GroupName"
            case projectId = "ProjectId"
            case realServerRegionInfo = "RealServerRegionInfo"
            case status = "Status"
            case tagSet = "TagSet"
            case version = "Version"
            case createTime = "CreateTime"
            case proxyType = "ProxyType"
            case http3Supported = "Http3Supported"
            case featureBitmap = "FeatureBitmap"
        }
    }
    
    /// 通道ID
    public struct ProxyIdDict: TCInputModel, TCOutputModel {
        /// 通道ID
        public let proxyId: String
        
        public init (proxyId: String) {
            self.proxyId = proxyId
        }
        
        enum CodingKeys: String, CodingKey {
            case proxyId = "ProxyId"
        }
    }
    
    /// 通道信息
    public struct ProxyInfo: TCOutputModel {
        /// （旧参数，请使用ProxyId）通道实例ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?
        
        /// 创建时间，采用Unix时间戳的方式，表示从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
        public let createTime: UInt64
        
        /// 项目ID。
        public let projectId: Int64
        
        /// 通道名称。
        public let proxyName: String
        
        /// 接入地域。
        public let accessRegion: String
        
        /// 源站地域。
        public let realServerRegion: String
        
        /// 带宽，单位：Mbps。
        public let bandwidth: Int64
        
        /// 并发，单位：万个/秒。
        public let concurrent: Int64
        
        /// 通道状态。其中：
        /// RUNNING表示运行中；
        /// CREATING表示创建中；
        /// DESTROYING表示销毁中；
        /// OPENING表示开启中；
        /// CLOSING表示关闭中；
        /// CLOSED表示已关闭；
        /// ADJUSTING表示配置变更中；
        /// ISOLATING表示隔离中；
        /// ISOLATED表示已隔离；
        /// CLONING表示复制中；
        /// RECOVERING表示通道维护中；
        /// MOVING表示迁移中。
        public let status: String
        
        /// 接入域名。
        public let domain: String
        
        /// 接入IP。
        public let ip: String
        
        /// 通道版本号：1.0，2.0，3.0。
        public let version: String
        
        /// （新参数）通道实例ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyId: String?
        
        /// 1，该通道可缩扩容；0，该通道无法缩扩容。
        public let scalarable: Int64
        
        /// 支持的协议类型。
        public let supportProtocols: [String]
        
        /// 通道组ID，当通道归属于某一通道组时，存在该字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?
        
        /// 安全策略ID，当设置了安全策略时，存在该字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyId: String?
        
        /// 接入地域详细信息，包括地域ID和地域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessRegionInfo: RegionDetail
        
        /// 源站地域详细信息，包括地域ID和地域名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerRegionInfo: RegionDetail
        
        /// 通道转发IP
        public let forwardIP: String
        
        /// 标签列表，不存在标签时，该字段为空列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagSet: [TagPair]?
        
        /// 是否支持安全组配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportSecurity: Int64?
        
        /// 计费类型: 0表示按带宽计费  1表示按流量计费。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let billingType: Int64?
        
        /// 关联了解析的域名列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let relatedGlobalDomains: [String]?
        
        /// 配置变更时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifyConfigTime: UInt64?
        
        /// 通道类型，100表示THUNDER通道，103表示微软合作通道
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyType: UInt64?
        
        /// 通道获取客户端IP的方式，0表示TOA，1表示Proxy Protocol
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientIPMethod: [Int64]?
        
        /// IP版本：IPv4、IPv6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipAddressVersion: String?
        
        /// 网络类型：normal表示常规BGP，cn2表示精品BGP，triple表示三网，secure_eip表示定制安全EIP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkType: String?
        
        /// 通道套餐类型：Thunder表示标准通道，Accelerator表示银牌加速通道，
        /// CrossBorder表示跨境通道。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let packageType: String?
        
        /// 封禁解封状态：BANNED表示已封禁，RECOVER表示已解封或未封禁，BANNING表示封禁中，RECOVERING表示解封中，BAN_FAILED表示封禁失败，RECOVER_FAILED表示解封失败。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let banStatus: String?
        
        /// IP列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipList: [IPDetail]?
        
        /// 支持Http3协议的标识，其中：
        /// 0表示关闭；
        /// 1表示启用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let http3Supported: Int64?
        
        /// 是否在封禁黑名单中，其中：0表示不在黑名单中，1表示在黑名单中。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let inBanBlacklist: Int64?
        
        /// 特性位图，每个bit位代表一种特性，其中：
        /// 0，表示不支持该特性；
        /// 1，表示支持该特性。
        /// 特性位图含义如下（从右往左）：
        /// 第1个bit，支持4层加速；
        /// 第2个bit，支持7层加速；
        /// 第3个bit，支持Http3接入；
        /// 第4个bit，支持IPv6；
        /// 第5个bit，支持精品BGP接入；
        /// 第6个bit，支持三网接入；
        /// 第7个bit，支持接入段Qos加速。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let featureBitmap: Int64?
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case createTime = "CreateTime"
            case projectId = "ProjectId"
            case proxyName = "ProxyName"
            case accessRegion = "AccessRegion"
            case realServerRegion = "RealServerRegion"
            case bandwidth = "Bandwidth"
            case concurrent = "Concurrent"
            case status = "Status"
            case domain = "Domain"
            case ip = "IP"
            case version = "Version"
            case proxyId = "ProxyId"
            case scalarable = "Scalarable"
            case supportProtocols = "SupportProtocols"
            case groupId = "GroupId"
            case policyId = "PolicyId"
            case accessRegionInfo = "AccessRegionInfo"
            case realServerRegionInfo = "RealServerRegionInfo"
            case forwardIP = "ForwardIP"
            case tagSet = "TagSet"
            case supportSecurity = "SupportSecurity"
            case billingType = "BillingType"
            case relatedGlobalDomains = "RelatedGlobalDomains"
            case modifyConfigTime = "ModifyConfigTime"
            case proxyType = "ProxyType"
            case clientIPMethod = "ClientIPMethod"
            case ipAddressVersion = "IPAddressVersion"
            case networkType = "NetworkType"
            case packageType = "PackageType"
            case banStatus = "BanStatus"
            case ipList = "IPList"
            case http3Supported = "Http3Supported"
            case inBanBlacklist = "InBanBlacklist"
            case featureBitmap = "FeatureBitmap"
        }
    }
    
    /// 内部接口使用，返回可以查询统计数据的通道和对应的监听器信息
    public struct ProxySimpleInfo: TCOutputModel {
        /// 通道ID
        public let proxyId: String
        
        /// 通道名称
        public let proxyName: String
        
        /// 监听器列表
        public let listenerList: [ListenerInfo]
        
        enum CodingKeys: String, CodingKey {
            case proxyId = "ProxyId"
            case proxyName = "ProxyName"
            case listenerList = "ListenerList"
        }
    }
    
    /// 通道状态信息
    public struct ProxyStatus: TCOutputModel {
        /// 通道实例ID。
        public let instanceId: String
        
        /// 通道状态。
        /// 其中：
        /// RUNNING表示运行中；
        /// CREATING表示创建中；
        /// DESTROYING表示销毁中；
        /// OPENING表示开启中；
        /// CLOSING表示关闭中；
        /// CLOSED表示已关闭；
        /// ADJUSTING表示配置变更中；
        /// ISOLATING表示隔离中；
        /// ISOLATED表示已隔离；
        /// MOVING表示迁移中。
        public let status: String
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case status = "Status"
        }
    }
    
    /// 查询监听器或者规则相关的源站信息，不包括tag信息
    public struct RealServer: TCOutputModel {
        /// 源站的IP或域名
        public let realServerIP: String
        
        /// 源站ID
        public let realServerId: String
        
        /// 源站名称
        public let realServerName: String
        
        /// 项目ID
        public let projectId: UInt64
        
        /// 是否在封禁黑名单中，其中：0表示不在黑名单中，1表示在黑名单中。
        public let inBanBlacklist: Int64
        
        enum CodingKeys: String, CodingKey {
            case realServerIP = "RealServerIP"
            case realServerId = "RealServerId"
            case realServerName = "RealServerName"
            case projectId = "ProjectId"
            case inBanBlacklist = "InBanBlacklist"
        }
    }
    
    /// 绑定的源站信息
    public struct RealServerBindSetReq: TCInputModel {
        /// 源站id
        public let realServerId: String
        
        /// 源站端口
        public let realServerPort: UInt64
        
        /// 源站IP
        public let realServerIP: String
        
        /// 源站权重
        public let realServerWeight: UInt64?
        
        /// 源站主备角色：master表示主，slave表示备，该参数必须在监听器打开了源站主备模式。
        public let realServerFailoverRole: String?
        
        public init (realServerId: String, realServerPort: UInt64, realServerIP: String, realServerWeight: UInt64?, realServerFailoverRole: String?) {
            self.realServerId = realServerId
            self.realServerPort = realServerPort
            self.realServerIP = realServerIP
            self.realServerWeight = realServerWeight
            self.realServerFailoverRole = realServerFailoverRole
        }
        
        enum CodingKeys: String, CodingKey {
            case realServerId = "RealServerId"
            case realServerPort = "RealServerPort"
            case realServerIP = "RealServerIP"
            case realServerWeight = "RealServerWeight"
            case realServerFailoverRole = "RealServerFailoverRole"
        }
    }
    
    /// 源站绑定信息查询，BindStatus， 0: 未被绑定 1：被规则或者监听器绑定
    public struct RealServerStatus: TCOutputModel {
        /// 源站ID。
        public let realServerId: String
        
        /// 0表示未被绑定 1表示被规则或者监听器绑定。
        public let bindStatus: Int64
        
        /// 绑定此源站的通道ID，没有绑定时为空字符串。
        public let proxyId: String
        
        /// 绑定此源站的通道组ID，没有绑定时为空字符串。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?
        
        enum CodingKeys: String, CodingKey {
            case realServerId = "RealServerId"
            case bindStatus = "BindStatus"
            case proxyId = "ProxyId"
            case groupId = "GroupId"
        }
    }
    
    /// 区域信息详情
    public struct RegionDetail: TCOutputModel {
        /// 区域ID
        public let regionId: String
        
        /// 区域英文名或中文名
        public let regionName: String
        
        /// 机房所属大区
        public let regionArea: String
        
        /// 机房所属大区名
        public let regionAreaName: String
        
        /// 机房类型, dc表示DataCenter数据中心, ec表示EdgeComputing边缘节点
        public let idcType: String
        
        /// 特性位图，每个bit位代表一种特性，其中：
        /// 0，表示不支持该特性；
        /// 1，表示支持该特性。
        /// 特性位图含义如下（从右往左）：
        /// 第1个bit，支持4层加速；
        /// 第2个bit，支持7层加速；
        /// 第3个bit，支持Http3接入；
        /// 第4个bit，支持IPv6；
        /// 第5个bit，支持精品BGP接入；
        /// 第6个bit，支持三网接入；
        /// 第7个bit，支持接入段Qos加速。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let featureBitmap: UInt64?
        
        enum CodingKeys: String, CodingKey {
            case regionId = "RegionId"
            case regionName = "RegionName"
            case regionArea = "RegionArea"
            case regionAreaName = "RegionAreaName"
            case idcType = "IDCType"
            case featureBitmap = "FeatureBitmap"
        }
    }
    
    /// 7层监听器转发规则健康检查相关参数
    public struct RuleCheckParams: TCInputModel, TCOutputModel {
        /// 健康检查的时间间隔
        public let delayLoop: UInt64
        
        /// 健康检查的响应超时时间
        public let connectTimeout: UInt64
        
        /// 健康检查的检查路径
        public let path: String
        
        /// 健康检查的方法，GET/HEAD
        public let method: String
        
        /// 确认源站正常的返回码，可选范围[100, 200, 300, 400, 500]
        public let statusCode: [UInt64]
        
        /// 健康检查的检查域名。
        /// 当调用ModifyRuleAttribute时，不支持修改该参数。
        public let domain: String?
        
        /// 源站服务失败统计频率
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedCountInter: UInt64?
        
        /// 源站健康性检查阀值，超过该阀值会屏蔽服务
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedThreshold: UInt64?
        
        /// 源站健康性检测超出阀值后，屏蔽的时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let blockInter: UInt64?
        
        public init (delayLoop: UInt64, connectTimeout: UInt64, path: String, method: String, statusCode: [UInt64], domain: String?, failedCountInter: UInt64?, failedThreshold: UInt64?, blockInter: UInt64?) {
            self.delayLoop = delayLoop
            self.connectTimeout = connectTimeout
            self.path = path
            self.method = method
            self.statusCode = statusCode
            self.domain = domain
            self.failedCountInter = failedCountInter
            self.failedThreshold = failedThreshold
            self.blockInter = blockInter
        }
        
        enum CodingKeys: String, CodingKey {
            case delayLoop = "DelayLoop"
            case connectTimeout = "ConnectTimeout"
            case path = "Path"
            case method = "Method"
            case statusCode = "StatusCode"
            case domain = "Domain"
            case failedCountInter = "FailedCountInter"
            case failedThreshold = "FailedThreshold"
            case blockInter = "BlockInter"
        }
    }
    
    /// 7层监听器转发规则信息
    public struct RuleInfo: TCOutputModel {
        /// 规则信息
        public let ruleId: String
        
        /// 监听器信息
        public let listenerId: String
        
        /// 规则域名
        public let domain: String
        
        /// 规则路径
        public let path: String
        
        /// 源站类型
        public let realServerType: String
        
        /// 监听器源站访问策略，其中：rr表示轮询；wrr表示加权轮询；lc表示最小连接数；lrtt表示最小时延。
        public let scheduler: String
        
        /// 是否开启健康检查标志，1表示开启，0表示关闭
        public let healthCheck: UInt64
        
        /// 规则状态，0表示运行中，1表示创建中，2表示销毁中，3表示绑定解绑源站中，4表示配置更新中
        public let ruleStatus: UInt64
        
        /// 健康检查相关参数
        public let checkParams: RuleCheckParams
        
        /// 已绑定的源站相关信息
        public let realServerSet: [BindRealServer]
        
        /// 源站的服务状态，0表示异常，1表示正常。
        /// 未开启健康检查时，该状态始终未正常。
        /// 只要有一个源站健康状态为异常时，该状态为异常，具体源站的状态请查看RealServerSet。
        public let bindStatus: UInt64
        
        /// 通道转发到源站的请求所携带的host，其中default表示直接转发接收到的host。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let forwardHost: String?
        
        /// 服务器名称指示（ServerNameIndication，简称SNI）开关。ON表示开启，OFF表示关闭。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverNameIndicationSwitch: String?
        
        /// 服务器名称指示（ServerNameIndication，简称SNI），当SNI开关打开时，该字段必填。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serverNameIndication: String?
        
        /// 强转HTTPS指示，当传递值为https:时表示强转为https
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let forcedRedirect: String?
        
        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case listenerId = "ListenerId"
            case domain = "Domain"
            case path = "Path"
            case realServerType = "RealServerType"
            case scheduler = "Scheduler"
            case healthCheck = "HealthCheck"
            case ruleStatus = "RuleStatus"
            case checkParams = "CheckParams"
            case realServerSet = "RealServerSet"
            case bindStatus = "BindStatus"
            case forwardHost = "ForwardHost"
            case serverNameIndicationSwitch = "ServerNameIndicationSwitch"
            case serverNameIndication = "ServerNameIndication"
            case forcedRedirect = "ForcedRedirect"
        }
    }
    
    /// 安全策略规则（入参）
    public struct SecurityPolicyRuleIn: TCInputModel {
        /// 请求来源IP或IP段。
        public let sourceCidr: String
        
        /// 策略：允许（ACCEPT）或拒绝（DROP）
        public let action: String
        
        /// 规则别名
        public let aliasName: String?
        
        /// 协议：TCP或UDP，ALL表示所有协议
        public let `protocol`: String?
        
        /// 目标端口，填写格式举例：
        /// 单个端口: 80
        /// 多个端口: 80,443
        /// 连续端口: 3306-20000
        /// 所有端口: ALL
        public let destPortRange: String?
        
        public init (sourceCidr: String, action: String, aliasName: String?, `protocol`: String?, destPortRange: String?) {
            self.sourceCidr = sourceCidr
            self.action = action
            self.aliasName = aliasName
            self.`protocol` = `protocol`
            self.destPortRange = destPortRange
        }
        
        enum CodingKeys: String, CodingKey {
            case sourceCidr = "SourceCidr"
            case action = "Action"
            case aliasName = "AliasName"
            case `protocol` = "Protocol"
            case destPortRange = "DestPortRange"
        }
    }
    
    /// 安全策略规则（出参）
    public struct SecurityPolicyRuleOut: TCOutputModel {
        /// 策略：允许（ACCEPT）或拒绝（DROP）
        public let action: String
        
        /// 请求来源Ip或Ip段
        public let sourceCidr: String
        
        /// 规则别名
        public let aliasName: String
        
        /// 目标端口范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let destPortRange: String?
        
        /// 规则ID
        public let ruleId: String
        
        /// 要匹配的协议类型（TCP/UDP）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?
        
        /// 安全策略ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let policyId: String?
        
        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case sourceCidr = "SourceCidr"
            case aliasName = "AliasName"
            case destPortRange = "DestPortRange"
            case ruleId = "RuleId"
            case `protocol` = "Protocol"
            case policyId = "PolicyId"
        }
    }
    
    /// 网络加速的原地址信息
    public struct SrcAddressInfo: TCInputModel {
        /// 内网Ip4地址
        public let srcIpv4: String
        
        /// 公网Ip4地址
        public let srcPublicIpv4: String
        
        public init (srcIpv4: String, srcPublicIpv4: String) {
            self.srcIpv4 = srcIpv4
            self.srcPublicIpv4 = srcPublicIpv4
        }
        
        enum CodingKeys: String, CodingKey {
            case srcIpv4 = "SrcIpv4"
            case srcPublicIpv4 = "SrcPublicIpv4"
        }
    }
    
    /// 统计数据信息
    public struct StatisticsDataInfo: TCOutputModel {
        /// 对应的时间点
        public let time: UInt64
        
        /// 统计数据值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: Float?
        
        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case data = "Data"
        }
    }
    
    /// TCP类型监听器信息
    public struct TCPListener: TCOutputModel {
        /// 监听器ID
        public let listenerId: String
        
        /// 监听器名称
        public let listenerName: String
        
        /// 监听器端口
        public let port: UInt64
        
        /// 监听器转发源站端口，仅对版本为1.0的通道有效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerPort: UInt64?
        
        /// 监听器绑定源站类型
        public let realServerType: String
        
        /// 监听器协议， TCP
        public let `protocol`: String
        
        /// 监听器状态，其中：
        /// 0表示运行中；
        /// 1表示创建中；
        /// 2表示销毁中；
        /// 3表示源站调整中；
        /// 4表示配置变更中。
        public let listenerStatus: UInt64
        
        /// 监听器源站访问策略，其中：rr表示轮询；wrr表示加权轮询；lc表示最小连接数；lrtt表示最小时延。
        public let scheduler: String
        
        /// 源站健康检查响应超时时间，单位：秒
        public let connectTimeout: UInt64
        
        /// 源站健康检查时间间隔，单位：秒
        public let delayLoop: UInt64
        
        /// 监听器是否开启健康检查，其中：
        /// 0表示关闭；
        /// 1表示开启
        public let healthCheck: UInt64
        
        /// 监听器绑定的源站状态， 其中：
        /// 0表示异常；
        /// 1表示正常。
        public let bindStatus: UInt64
        
        /// 监听器绑定的源站信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerSet: [BindRealServer]?
        
        /// 监听器创建时间，Unix时间戳
        public let createTime: UInt64
        
        /// 监听器获取客户端 IP 的方式，0表示TOA, 1表示Proxy Protocol
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clientIPMethod: UInt64?
        
        /// 健康阈值，表示连续检查成功多少次后认定源站健康。范围为1到10
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthyThreshold: UInt64?
        
        /// 不健康阈值，表示连续检查失败多少次数后认为源站不健康。范围为1到10
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unhealthyThreshold: UInt64?
        
        /// 源站是否开启主备模式：1开启，0关闭，DOMAIN类型源站不支持开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failoverSwitch: UInt64?
        
        /// 是否开启会话保持选项：0关闭， 非0开启，非0值为会话保持时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionPersist: UInt64?
        
        /// 监听器的通道ID，如果监听器属于通道组，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyId: String?
        
        /// 监听器的通道组ID，如果监听器属于通道，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?
        
        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case port = "Port"
            case realServerPort = "RealServerPort"
            case realServerType = "RealServerType"
            case `protocol` = "Protocol"
            case listenerStatus = "ListenerStatus"
            case scheduler = "Scheduler"
            case connectTimeout = "ConnectTimeout"
            case delayLoop = "DelayLoop"
            case healthCheck = "HealthCheck"
            case bindStatus = "BindStatus"
            case realServerSet = "RealServerSet"
            case createTime = "CreateTime"
            case clientIPMethod = "ClientIPMethod"
            case healthyThreshold = "HealthyThreshold"
            case unhealthyThreshold = "UnhealthyThreshold"
            case failoverSwitch = "FailoverSwitch"
            case sessionPersist = "SessionPersist"
            case proxyId = "ProxyId"
            case groupId = "GroupId"
        }
    }
    
    /// 标签键值对
    public struct TagPair: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String
        
        /// 标签值
        public let tagValue: String
        
        public init (tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }
        
        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }
    
    /// 标签对应资源信息
    public struct TagResourceInfo: TCOutputModel {
        /// 资源类型，其中：
        /// Proxy表示通道，
        /// ProxyGroup表示通道组，
        /// RealServer表示源站
        public let resourceType: String
        
        /// 资源ID
        public let resourceId: String
        
        enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceId = "ResourceId"
        }
    }
    
    /// UDP类型监听器信息
    public struct UDPListener: TCOutputModel {
        /// 监听器ID
        public let listenerId: String
        
        /// 监听器名称
        public let listenerName: String
        
        /// 监听器端口
        public let port: UInt64
        
        /// 监听器转发源站端口，仅V1版本通道或通道组监听器有效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realServerPort: UInt64?
        
        /// 监听器绑定源站类型
        public let realServerType: String
        
        /// 监听器协议， UDP
        public let `protocol`: String
        
        /// 监听器状态，其中：
        /// 0表示运行中；
        /// 1表示创建中；
        /// 2表示销毁中；
        /// 3表示源站调整中；
        /// 4表示配置变更中。
        public let listenerStatus: UInt64
        
        /// 监听器源站访问策略，其中：rr表示轮询；wrr表示加权轮询；lc表示最小连接数；lrtt表示最小时延。
        public let scheduler: String
        
        /// 监听器绑定源站状态， 0表示正常，1表示IP异常，2表示域名解析异常
        public let bindStatus: UInt64
        
        /// 监听器绑定的源站信息
        public let realServerSet: [BindRealServer]
        
        /// 监听器创建时间，Unix时间戳
        public let createTime: UInt64
        
        /// 是否开启会话保持选项：0关闭， 非0开启，非0值为会话保持时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sessionPersist: UInt64?
        
        /// 源站健康检查时间间隔，单位：秒。时间间隔取值在[5，300]之间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delayLoop: UInt64?
        
        /// 源站健康检查响应超时时间，单位：秒。超时时间取值在[2，60]之间。超时时间应小于健康检查时间间隔DelayLoop。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectTimeout: UInt64?
        
        /// 健康阈值，表示连续检查成功多少次后认定源站健康。范围为1到10
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthyThreshold: UInt64?
        
        /// 不健康阈值，表示连续检查失败多少次数后认为源站不健康。范围为1到10
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unhealthyThreshold: UInt64?
        
        /// 源站是否开启主备模式：1开启，0关闭，DOMAIN类型源站不支持开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failoverSwitch: Int64?
        
        /// 源站是否开启健康检查：1开启，0关闭。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let healthCheck: UInt64?
        
        /// UDP源站健康类型。PORT表示检查端口，PING表示PING。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkType: String?
        
        /// UDP源站健康检查探测端口。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let checkPort: Int64?
        
        /// UDP源站健康检查端口探测报文类型：TEXT表示文本。仅在健康检查类型为PORT时使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let contextType: String?
        
        /// UDP源站健康检查端口探测发送报文。仅在健康检查类型为PORT时使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sendContext: String?
        
        /// UDP源站健康检查端口探测接收报文。仅在健康检查类型为PORT时使用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recvContext: String?
        
        /// 监听器的通道ID，如果监听器属于通道组，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyId: String?
        
        /// 监听器的通道组ID，如果监听器属于通道，则为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let groupId: String?
        
        enum CodingKeys: String, CodingKey {
            case listenerId = "ListenerId"
            case listenerName = "ListenerName"
            case port = "Port"
            case realServerPort = "RealServerPort"
            case realServerType = "RealServerType"
            case `protocol` = "Protocol"
            case listenerStatus = "ListenerStatus"
            case scheduler = "Scheduler"
            case bindStatus = "BindStatus"
            case realServerSet = "RealServerSet"
            case createTime = "CreateTime"
            case sessionPersist = "SessionPersist"
            case delayLoop = "DelayLoop"
            case connectTimeout = "ConnectTimeout"
            case healthyThreshold = "HealthyThreshold"
            case unhealthyThreshold = "UnhealthyThreshold"
            case failoverSwitch = "FailoverSwitch"
            case healthCheck = "HealthCheck"
            case checkType = "CheckType"
            case checkPort = "CheckPort"
            case contextType = "ContextType"
            case sendContext = "SendContext"
            case recvContext = "RecvContext"
            case proxyId = "ProxyId"
            case groupId = "GroupId"
        }
    }
}