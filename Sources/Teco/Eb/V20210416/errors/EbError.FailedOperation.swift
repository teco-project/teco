//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEbError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case addPrivateLink = "FailedOperation.AddPrivateLink"
            case authenticateUserFailed = "FailedOperation.AuthenticateUserFailed"
            case createTrigger = "FailedOperation.CreateTrigger"
            case deleteConnection = "FailedOperation.DeleteConnection"
            case deletePrivateLink = "FailedOperation.DeletePrivateLink"
            case deleteRule = "FailedOperation.DeleteRule"
            case errorFilter = "FailedOperation.ErrorFilter"
            case esInternalError = "FailedOperation.ESInternalError"
            case esRequestFailed = "FailedOperation.ESRequestFailed"
            case esTemplateConflict = "FailedOperation.ESTemplateConflict"
            case registerCLSService = "FailedOperation.RegisterCLSService"
            case serviceError = "FailedOperation.ServiceError"
            case tagResource = "FailedOperation.TagResource"
            case tagResourceAllocateQuotas = "FailedOperation.TagResourceAllocateQuotas"
            case unTagResource = "FailedOperation.UnTagResource"
            case updateConnection = "FailedOperation.UpdateConnection"
            case updateRule = "FailedOperation.UpdateRule"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var addPrivateLink: FailedOperation {
            FailedOperation(.addPrivateLink)
        }
        
        public static var authenticateUserFailed: FailedOperation {
            FailedOperation(.authenticateUserFailed)
        }
        
        /// 投递目标创建失败，请检查函数状态。
        public static var createTrigger: FailedOperation {
            FailedOperation(.createTrigger)
        }
        
        /// 删除连接器失败，请检查资源状态。
        public static var deleteConnection: FailedOperation {
            FailedOperation(.deleteConnection)
        }
        
        public static var deletePrivateLink: FailedOperation {
            FailedOperation(.deletePrivateLink)
        }
        
        /// 规则删除失败，请检查资源信息，确认是资源否存在或状态正常。
        public static var deleteRule: FailedOperation {
            FailedOperation(.deleteRule)
        }
        
        /// 规则与事件不匹配，请修正后再试。
        public static var errorFilter: FailedOperation {
            FailedOperation(.errorFilter)
        }
        
        public static var esInternalError: FailedOperation {
            FailedOperation(.esInternalError)
        }
        
        public static var esRequestFailed: FailedOperation {
            FailedOperation(.esRequestFailed)
        }
        
        public static var esTemplateConflict: FailedOperation {
            FailedOperation(.esTemplateConflict)
        }
        
        public static var registerCLSService: FailedOperation {
            FailedOperation(.registerCLSService)
        }
        
        /// ServiceError操作失败，请检查资源信息。
        public static var serviceError: FailedOperation {
            FailedOperation(.serviceError)
        }
        
        public static var tagResource: FailedOperation {
            FailedOperation(.tagResource)
        }
        
        public static var tagResourceAllocateQuotas: FailedOperation {
            FailedOperation(.tagResourceAllocateQuotas)
        }
        
        public static var unTagResource: FailedOperation {
            FailedOperation(.unTagResource)
        }
        
        /// 连接器更新失败，请检查资源信息，确认是资源否存在或状态正常。
        public static var updateConnection: FailedOperation {
            FailedOperation(.updateConnection)
        }
        
        /// 规则更新失败，请检查资源信息，确认是资源否存在或状态正常。
        public static var updateRule: FailedOperation {
            FailedOperation(.updateRule)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCEbError.FailedOperation: Equatable {
    public static func == (lhs: TCEbError.FailedOperation, rhs: TCEbError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEbError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEbError.FailedOperation {
    public func toEbError() -> TCEbError {
        guard let code = TCEbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEbError(code, context: self.context)
    }
}