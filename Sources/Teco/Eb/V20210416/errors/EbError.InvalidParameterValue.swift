//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEbError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case ampParams = "InvalidParameterValue.AMPParams"
            case batchEventCount = "InvalidParameterValue.BatchEventCount"
            case batchTimeout = "InvalidParameterValue.BatchTimeout"
            case cKafkaTargetParams = "InvalidParameterValue.CKafkaTargetParams"
            case callbackType = "InvalidParameterValue.CallbackType"
            case callbackWeComURL = "InvalidParameterValue.CallbackWeComURL"
            case connectionDescription = "InvalidParameterValue.ConnectionDescription"
            case connectionId = "InvalidParameterValue.ConnectionId"
            case connectionName = "InvalidParameterValue.ConnectionName"
            case deadLetterConfig = "InvalidParameterValue.DeadLetterConfig"
            case description = "InvalidParameterValue.Description"
            case dtsParams = "InvalidParameterValue.DTSParams"
            case elasticSearchTargetParams = "InvalidParameterValue.ElasticSearchTargetParams"
            case eventBusId = "InvalidParameterValue.EventBusId"
            case eventBusName = "InvalidParameterValue.EventBusName"
            case eventPattern = "InvalidParameterValue.EventPattern"
            case eventTraceConfig = "InvalidParameterValue.EventTraceConfig"
            case filters = "InvalidParameterValue.Filters"
            case invalidApiRequestConfig = "InvalidParameterValue.InvalidApiRequestConfig"
            case invalidEvent = "InvalidParameterValue.InvalidEvent"
            case invalidEventBus = "InvalidParameterValue.InvalidEventBus"
            case invalidFilterRule = "InvalidParameterValue.InvalidFilterRule"
            case invalidPattern = "InvalidParameterValue.InvalidPattern"
            case limit = "InvalidParameterValue.Limit"
            case linkMode = "InvalidParameterValue.LinkMode"
            case noticeReceiverChannel = "InvalidParameterValue.NoticeReceiverChannel"
            case noticeReceiverTimeWindow = "InvalidParameterValue.NoticeReceiverTimeWindow"
            case noticeReceiverUserIds = "InvalidParameterValue.NoticeReceiverUserIds"
            case noticeReceiverUserType = "InvalidParameterValue.NoticeReceiverUserType"
            case offset = "InvalidParameterValue.Offset"
            case order = "InvalidParameterValue.Order"
            case orderBy = "InvalidParameterValue.OrderBy"
            case qualifier = "InvalidParameterValue.Qualifier"
            case ruleId = "InvalidParameterValue.RuleId"
            case ruleName = "InvalidParameterValue.RuleName"
            case tags = "InvalidParameterValue.Tags"
            case targetDescription = "InvalidParameterValue.TargetDescription"
            case targetId = "InvalidParameterValue.TargetId"
            case transformationID = "InvalidParameterValue.TransformationID"
            case transformations = "InvalidParameterValue.Transformations"
            case type = "InvalidParameterValue.Type"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// AMPParams取值与规范不符，请修正后再试。
        public static var ampParams: InvalidParameterValue {
            InvalidParameterValue(.ampParams)
        }
        
        /// BatchEventCount取值与规范不符，请修正后再试。
        public static var batchEventCount: InvalidParameterValue {
            InvalidParameterValue(.batchEventCount)
        }
        
        /// BatchTimeout取值与规范不符，请修正后再试。
        public static var batchTimeout: InvalidParameterValue {
            InvalidParameterValue(.batchTimeout)
        }
        
        /// Ckafka 目标配置参数取值与规范不符，请修正后再试。
        public static var cKafkaTargetParams: InvalidParameterValue {
            InvalidParameterValue(.cKafkaTargetParams)
        }
        
        /// CallbackType取值与规范不符，请修正后再试。
        public static var callbackType: InvalidParameterValue {
            InvalidParameterValue(.callbackType)
        }
        
        /// CallbackWeComURL取值与规范不符，请修正后再试。
        public static var callbackWeComURL: InvalidParameterValue {
            InvalidParameterValue(.callbackWeComURL)
        }
        
        /// ConnectionDescription取值与规范不符，请修正后再试。
        public static var connectionDescription: InvalidParameterValue {
            InvalidParameterValue(.connectionDescription)
        }
        
        /// ConnectionId取值与规范不符，请修正后再试。
        public static var connectionId: InvalidParameterValue {
            InvalidParameterValue(.connectionId)
        }
        
        /// ConnectionName取值与规范不符，请修正后再试。
        public static var connectionName: InvalidParameterValue {
            InvalidParameterValue(.connectionName)
        }
        
        /// 死信队列配置参数取值与规范不符，请修正后再试。
        public static var deadLetterConfig: InvalidParameterValue {
            InvalidParameterValue(.deadLetterConfig)
        }
        
        /// Description取值与规范不符，请修正后再试。
        public static var description: InvalidParameterValue {
            InvalidParameterValue(.description)
        }
        
        /// DTSParams取值与规范不符，请修正后再试。
        public static var dtsParams: InvalidParameterValue {
            InvalidParameterValue(.dtsParams)
        }
        
        public static var elasticSearchTargetParams: InvalidParameterValue {
            InvalidParameterValue(.elasticSearchTargetParams)
        }
        
        /// EventBusId取值与规范不符，请修正后再试。
        public static var eventBusId: InvalidParameterValue {
            InvalidParameterValue(.eventBusId)
        }
        
        /// EventBusName取值与规范不符，请修正后再试。
        public static var eventBusName: InvalidParameterValue {
            InvalidParameterValue(.eventBusName)
        }
        
        /// EventPattern取值与规范不符，请修正后再试。
        public static var eventPattern: InvalidParameterValue {
            InvalidParameterValue(.eventPattern)
        }
        
        /// 链路追踪配置参数取值与规范不符，请修正后再试。
        public static var eventTraceConfig: InvalidParameterValue {
            InvalidParameterValue(.eventTraceConfig)
        }
        
        /// Filters取值与规范不符，请修正后再试。
        public static var filters: InvalidParameterValue {
            InvalidParameterValue(.filters)
        }
        
        /// InvalidApiRequestConfig取值与规范不符，请修正后再试。
        public static var invalidApiRequestConfig: InvalidParameterValue {
            InvalidParameterValue(.invalidApiRequestConfig)
        }
        
        /// 事件格式非法，请修正后再试。
        public static var invalidEvent: InvalidParameterValue {
            InvalidParameterValue(.invalidEvent)
        }
        
        /// 非法的事件集，请检查后重试。
        public static var invalidEventBus: InvalidParameterValue {
            InvalidParameterValue(.invalidEventBus)
        }
        
        /// 事件模式格式错误，请修正后再试。
        public static var invalidFilterRule: InvalidParameterValue {
            InvalidParameterValue(.invalidFilterRule)
        }
        
        /// 非法的匹配规则，请检查后重试。
        public static var invalidPattern: InvalidParameterValue {
            InvalidParameterValue(.invalidPattern)
        }
        
        /// Limit取值与规范不符，请修正后再试。
        public static var limit: InvalidParameterValue {
            InvalidParameterValue(.limit)
        }
        
        public static var linkMode: InvalidParameterValue {
            InvalidParameterValue(.linkMode)
        }
        
        /// NoticeReceiverChannel取值与规范不符，请修正后再试。
        public static var noticeReceiverChannel: InvalidParameterValue {
            InvalidParameterValue(.noticeReceiverChannel)
        }
        
        /// NoticeReceiverTimeWindow取值与规范不符，请修正后再试。
        public static var noticeReceiverTimeWindow: InvalidParameterValue {
            InvalidParameterValue(.noticeReceiverTimeWindow)
        }
        
        /// NoticeReceiverUserIds取值与规范不符，请修正后再试。
        public static var noticeReceiverUserIds: InvalidParameterValue {
            InvalidParameterValue(.noticeReceiverUserIds)
        }
        
        /// NoticeReceiverUserType取值与规范不符，请修正后再试。
        public static var noticeReceiverUserType: InvalidParameterValue {
            InvalidParameterValue(.noticeReceiverUserType)
        }
        
        /// Offset取值与规范不符，请修正后再试。
        public static var offset: InvalidParameterValue {
            InvalidParameterValue(.offset)
        }
        
        /// Order取值与规范不符，请修正后再试。
        public static var order: InvalidParameterValue {
            InvalidParameterValue(.order)
        }
        
        /// OrderBy取值与规范不符，请修正后再试。
        public static var orderBy: InvalidParameterValue {
            InvalidParameterValue(.orderBy)
        }
        
        /// Qualifier取值与规范不符，请修正后再试。
        public static var qualifier: InvalidParameterValue {
            InvalidParameterValue(.qualifier)
        }
        
        /// RuleId取值与规范不符，请修正后再试。
        public static var ruleId: InvalidParameterValue {
            InvalidParameterValue(.ruleId)
        }
        
        /// RuleName取值与规范不符，请修正后再试。
        public static var ruleName: InvalidParameterValue {
            InvalidParameterValue(.ruleName)
        }
        
        public static var tags: InvalidParameterValue {
            InvalidParameterValue(.tags)
        }
        
        /// TargetDescription取值与规范不符，请修正后再试。
        public static var targetDescription: InvalidParameterValue {
            InvalidParameterValue(.targetDescription)
        }
        
        /// TargetId取值与规范不符，请修正后再试。
        public static var targetId: InvalidParameterValue {
            InvalidParameterValue(.targetId)
        }
        
        /// 数据转换配置参数取值与规范不符，请修正后再试。
        public static var transformationID: InvalidParameterValue {
            InvalidParameterValue(.transformationID)
        }
        
        /// 数据转换任务创建失败，配置参数取值与规范不符，请修正后再试。
        public static var transformations: InvalidParameterValue {
            InvalidParameterValue(.transformations)
        }
        
        /// Type取值与规范不符，请修正后再试。
        public static var type: InvalidParameterValue {
            InvalidParameterValue(.type)
        }
    }
}

extension TCEbError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCEbError.InvalidParameterValue, rhs: TCEbError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEbError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEbError.InvalidParameterValue {
    public func toEbError() -> TCEbError {
        guard let code = TCEbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEbError(code, context: self.context)
    }
}