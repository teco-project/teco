//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEbError {
    public struct LimitExceeded: TCEbErrorType {
        enum Code: String {
            case bannedAccount = "LimitExceeded.BannedAccount"
            case clusterPrivateLinkExceeded = "LimitExceeded.ClusterPrivateLinkExceeded"
            case connection = "LimitExceeded.Connection"
            case eventBus = "LimitExceeded.EventBus"
            case insufficientBalance = "LimitExceeded.InsufficientBalance"
            case logset = "LimitExceeded.Logset"
            case resourceLimit = "LimitExceeded.ResourceLimit"
            case routeOverLimit = "LimitExceeded.RouteOverLimit"
            case rule = "LimitExceeded.Rule"
            case target = "LimitExceeded.Target"
            case trigger = "LimitExceeded.Trigger"
            case userPrivateLinkExceeded = "LimitExceeded.UserPrivateLinkExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 事件投递失败，因欠费或违规等原因，账号已被禁用，请联系官网账户端客服处理。
        public static var bannedAccount: LimitExceeded {
            LimitExceeded(.bannedAccount)
        }
        
        public static var clusterPrivateLinkExceeded: LimitExceeded {
            LimitExceeded(.clusterPrivateLinkExceeded)
        }
        
        /// Connection数量达到限制，可提交工单申请提升限制。
        public static var connection: LimitExceeded {
            LimitExceeded(.connection)
        }
        
        /// EventBus数量达到限制，可提交工单申请提升限制。
        public static var eventBus: LimitExceeded {
            LimitExceeded(.eventBus)
        }
        
        /// 资源创建失败，可冻结余额不足，请充值后重新创建。
        public static var insufficientBalance: LimitExceeded {
            LimitExceeded(.insufficientBalance)
        }
        
        /// Logset数量达到限制，可提交工单申请提升限制。
        public static var logset: LimitExceeded {
            LimitExceeded(.logset)
        }
        
        /// ResourceLimit数量达到限制，可提交工单申请提升限制。
        public static var resourceLimit: LimitExceeded {
            LimitExceeded(.resourceLimit)
        }
        
        /// RouteOverLimit数量达到限制，可提交工单申请提升限制。
        public static var routeOverLimit: LimitExceeded {
            LimitExceeded(.routeOverLimit)
        }
        
        /// Rule数量达到限制，可提交工单申请提升限制。
        public static var rule: LimitExceeded {
            LimitExceeded(.rule)
        }
        
        /// Target数量达到限制，可提交工单申请提升限制。
        public static var target: LimitExceeded {
            LimitExceeded(.target)
        }
        
        /// 投递目标创建失败，函数触发器数量达到限制，可提交工单申请提升限制。
        public static var trigger: LimitExceeded {
            LimitExceeded(.trigger)
        }
        
        public static var userPrivateLinkExceeded: LimitExceeded {
            LimitExceeded(.userPrivateLinkExceeded)
        }
        
        public func asEbError() -> TCEbError {
            let code: TCEbError.Code
            switch self.error {
            case .bannedAccount: 
                code = .limitExceeded_BannedAccount
            case .clusterPrivateLinkExceeded: 
                code = .limitExceeded_ClusterPrivateLinkExceeded
            case .connection: 
                code = .limitExceeded_Connection
            case .eventBus: 
                code = .limitExceeded_EventBus
            case .insufficientBalance: 
                code = .limitExceeded_InsufficientBalance
            case .logset: 
                code = .limitExceeded_Logset
            case .resourceLimit: 
                code = .limitExceeded_ResourceLimit
            case .routeOverLimit: 
                code = .limitExceeded_RouteOverLimit
            case .rule: 
                code = .limitExceeded_Rule
            case .target: 
                code = .limitExceeded_Target
            case .trigger: 
                code = .limitExceeded_Trigger
            case .userPrivateLinkExceeded: 
                code = .limitExceeded_UserPrivateLinkExceeded
            }
            return TCEbError(code, context: self.context)
        }
    }
}
