//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEbError {
    public struct OperationDenied: TCErrorType {
        enum Code: String {
            case accountNotExists = "OperationDenied.AccountNotExists"
            case defaultCLSResourceUnsupported = "OperationDenied.DefaultCLSResourceUnsupported"
            case esVersionUnsupported = "OperationDenied.ESVersionUnsupported"
            case eventBusResourceIsLocked = "OperationDenied.EventBusResourceIsLocked"
            case resourceImmutable = "OperationDenied.ResourceImmutable"
            case unsupportedOperation = "OperationDenied.UnsupportedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 投递目标创建失败，检测到当前账号不存在，请确认您的账号状态。
        public static var accountNotExists: OperationDenied {
            OperationDenied(.accountNotExists)
        }
        
        /// 不允许在自定义事件集上创建基于EB默认日志集的CLS事件目标。
        public static var defaultCLSResourceUnsupported: OperationDenied {
            OperationDenied(.defaultCLSResourceUnsupported)
        }
        
        public static var esVersionUnsupported: OperationDenied {
            OperationDenied(.esVersionUnsupported)
        }
        
        public static var eventBusResourceIsLocked: OperationDenied {
            OperationDenied(.eventBusResourceIsLocked)
        }
        
        /// 操作失败，该资源不可修改或删除。
        public static var resourceImmutable: OperationDenied {
            OperationDenied(.resourceImmutable)
        }
        
        /// 当前用户账号类型暂不支持操作，请提交工单处理。
        public static var unsupportedOperation: OperationDenied {
            OperationDenied(.unsupportedOperation)
        }
    }
}

extension TCEbError.OperationDenied: Equatable {
    public static func == (lhs: TCEbError.OperationDenied, rhs: TCEbError.OperationDenied) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEbError.OperationDenied: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEbError.OperationDenied {
    /// - Returns: ``TCEbError`` that holds the same error and context.
    public func toEbError() -> TCEbError {
        guard let code = TCEbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEbError(code, context: self.context)
    }
}

extension TCEbError.OperationDenied {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
