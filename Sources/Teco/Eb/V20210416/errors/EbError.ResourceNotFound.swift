//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEbError {
    public struct ResourceNotFound: TCEbErrorType {
        enum Code: String {
            case connection = "ResourceNotFound.Connection"
            case eventBus = "ResourceNotFound.EventBus"
            case eventBusNotFound = "ResourceNotFound.EventBusNotFound"
            case function = "ResourceNotFound.Function"
            case invalidApi = "ResourceNotFound.InvalidApi"
            case invalidService = "ResourceNotFound.InvalidService"
            case namespace = "ResourceNotFound.Namespace"
            case netAssociation = "ResourceNotFound.NetAssociation"
            case privateLinkResource = "ResourceNotFound.PrivateLinkResource"
            case role = "ResourceNotFound.Role"
            case rule = "ResourceNotFound.Rule"
            case tag = "ResourceNotFound.Tag"
            case target = "ResourceNotFound.Target"
            case transformation = "ResourceNotFound.Transformation"
            case version = "ResourceNotFound.Version"
            case other = "ResourceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 未找到指定的Connection，请创建后再试。
        public static var connection: ResourceNotFound {
            ResourceNotFound(.connection)
        }

        /// 未找到指定事件集，请创建后再试。
        public static var eventBus: ResourceNotFound {
            ResourceNotFound(.eventBus)
        }

        /// 事件集不存在或未配置规则，请检查后再试。
        public static var eventBusNotFound: ResourceNotFound {
            ResourceNotFound(.eventBusNotFound)
        }

        /// 未找到指定的Function，请创建后再试。
        public static var function: ResourceNotFound {
            ResourceNotFound(.function)
        }

        /// 连接器删除失败，未找到指定 API 。
        public static var invalidApi: ResourceNotFound {
            ResourceNotFound(.invalidApi)
        }

        /// 连接器操作失败，未找到指定 API 网关服务。
        public static var invalidService: ResourceNotFound {
            ResourceNotFound(.invalidService)
        }

        /// 投递目标创建失败，未找到指定的命名空间，请创建后再试。
        public static var namespace: ResourceNotFound {
            ResourceNotFound(.namespace)
        }

        public static var netAssociation: ResourceNotFound {
            ResourceNotFound(.netAssociation)
        }

        public static var privateLinkResource: ResourceNotFound {
            ResourceNotFound(.privateLinkResource)
        }

        /// 未找到指定的服务角色，请创建后再试。
        public static var role: ResourceNotFound {
            ResourceNotFound(.role)
        }

        /// 未找到指定的Rule，请创建后再试。
        public static var rule: ResourceNotFound {
            ResourceNotFound(.rule)
        }

        public static var tag: ResourceNotFound {
            ResourceNotFound(.tag)
        }

        /// 未找到指定的Target，请创建后再试。
        public static var target: ResourceNotFound {
            ResourceNotFound(.target)
        }

        /// 未找到指定的转换任务，请创建后再试。
        public static var transformation: ResourceNotFound {
            ResourceNotFound(.transformation)
        }

        /// 投递目标创建失败，未找到指定的服务版本，请创建后再试。
        public static var version: ResourceNotFound {
            ResourceNotFound(.version)
        }

        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }

        public func asEbError() -> TCEbError {
            let code: TCEbError.Code
            switch self.error {
            case .connection:
                code = .resourceNotFound_Connection
            case .eventBus:
                code = .resourceNotFound_EventBus
            case .eventBusNotFound:
                code = .resourceNotFound_EventBusNotFound
            case .function:
                code = .resourceNotFound_Function
            case .invalidApi:
                code = .resourceNotFound_InvalidApi
            case .invalidService:
                code = .resourceNotFound_InvalidService
            case .namespace:
                code = .resourceNotFound_Namespace
            case .netAssociation:
                code = .resourceNotFound_NetAssociation
            case .privateLinkResource:
                code = .resourceNotFound_PrivateLinkResource
            case .role:
                code = .resourceNotFound_Role
            case .rule:
                code = .resourceNotFound_Rule
            case .tag:
                code = .resourceNotFound_Tag
            case .target:
                code = .resourceNotFound_Target
            case .transformation:
                code = .resourceNotFound_Transformation
            case .version:
                code = .resourceNotFound_Version
            case .other:
                code = .resourceNotFound
            }
            return TCEbError(code, context: self.context)
        }
    }
}
