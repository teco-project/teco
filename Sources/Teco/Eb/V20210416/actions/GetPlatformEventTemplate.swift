//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Eb {
    /// GetPlatformEventTemplate请求参数结构体
    public struct GetPlatformEventTemplateRequest: TCRequest {
        /// 平台产品事件类型
        public let eventType: String

        public init(eventType: String) {
            self.eventType = eventType
        }

        enum CodingKeys: String, CodingKey {
            case eventType = "EventType"
        }
    }

    /// GetPlatformEventTemplate返回参数结构体
    public struct GetPlatformEventTemplateResponse: TCResponse {
        /// 平台产品事件模板
        public let eventTemplate: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case eventTemplate = "EventTemplate"
            case requestId = "RequestId"
        }
    }

    /// 获取平台产品事件模板
    @inlinable
    public func getPlatformEventTemplate(_ input: GetPlatformEventTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetPlatformEventTemplateResponse> {
        self.client.execute(action: "GetPlatformEventTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取平台产品事件模板
    @inlinable
    public func getPlatformEventTemplate(_ input: GetPlatformEventTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetPlatformEventTemplateResponse {
        try await self.client.execute(action: "GetPlatformEventTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取平台产品事件模板
    @inlinable
    public func getPlatformEventTemplate(eventType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetPlatformEventTemplateResponse> {
        self.getPlatformEventTemplate(.init(eventType: eventType), region: region, logger: logger, on: eventLoop)
    }

    /// 获取平台产品事件模板
    @inlinable
    public func getPlatformEventTemplate(eventType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetPlatformEventTemplateResponse {
        try await self.getPlatformEventTemplate(.init(eventType: eventType), region: region, logger: logger, on: eventLoop)
    }
}
