//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Eb {
    /// SearchLog请求参数结构体
    public struct SearchLogRequest: TCRequest {
        /// 起始时间unix 毫秒时间戳
        public let startTime: Int64

        /// 结束时间unix 毫秒时间戳
        public let endTime: Int64

        /// 事件集ID
        public let eventBusId: String

        /// 页码
        public let page: Int64

        /// 每页数据大小
        public let limit: Int64

        /// 筛选条件
        public let filter: [LogFilter]?

        /// 排序数组
        public let orderFields: [String]?

        /// 排序方式，asc 从旧到新，desc 从新到旧
        public let orderBy: String?

        public init(startTime: Int64, endTime: Int64, eventBusId: String, page: Int64, limit: Int64, filter: [LogFilter]? = nil, orderFields: [String]? = nil, orderBy: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.eventBusId = eventBusId
            self.page = page
            self.limit = limit
            self.filter = filter
            self.orderFields = orderFields
            self.orderBy = orderBy
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case eventBusId = "EventBusId"
            case page = "Page"
            case limit = "Limit"
            case filter = "Filter"
            case orderFields = "OrderFields"
            case orderBy = "OrderBy"
        }
    }

    /// SearchLog返回参数结构体
    public struct SearchLogResponse: TCResponse {
        /// 日志总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 每页日志条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let limit: Int64?

        /// 页码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let page: Int64?

        /// 日志检索结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let results: [SearchLogResult]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case limit = "Limit"
            case page = "Page"
            case results = "Results"
            case requestId = "RequestId"
        }
    }

    /// 日志检索
    @inlinable
    public func searchLog(_ input: SearchLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchLogResponse> {
        self.client.execute(action: "SearchLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 日志检索
    @inlinable
    public func searchLog(_ input: SearchLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchLogResponse {
        try await self.client.execute(action: "SearchLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 日志检索
    @inlinable
    public func searchLog(startTime: Int64, endTime: Int64, eventBusId: String, page: Int64, limit: Int64, filter: [LogFilter]? = nil, orderFields: [String]? = nil, orderBy: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchLogResponse> {
        self.searchLog(.init(startTime: startTime, endTime: endTime, eventBusId: eventBusId, page: page, limit: limit, filter: filter, orderFields: orderFields, orderBy: orderBy), region: region, logger: logger, on: eventLoop)
    }

    /// 日志检索
    @inlinable
    public func searchLog(startTime: Int64, endTime: Int64, eventBusId: String, page: Int64, limit: Int64, filter: [LogFilter]? = nil, orderFields: [String]? = nil, orderBy: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchLogResponse {
        try await self.searchLog(.init(startTime: startTime, endTime: endTime, eventBusId: eventBusId, page: page, limit: limit, filter: filter, orderFields: orderFields, orderBy: orderBy), region: region, logger: logger, on: eventLoop)
    }
}
