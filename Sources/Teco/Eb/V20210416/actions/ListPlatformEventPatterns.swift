//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Eb {
    /// ListPlatformEventPatterns请求参数结构体
    public struct ListPlatformEventPatternsRequest: TCRequest {
        /// 平台产品类型
        public let productType: String

        public init(productType: String) {
            self.productType = productType
        }

        enum CodingKeys: String, CodingKey {
            case productType = "ProductType"
        }
    }

    /// ListPlatformEventPatterns返回参数结构体
    public struct ListPlatformEventPatternsResponse: TCResponse {
        /// 平台产品事件匹配规则
        public let eventPatterns: [PlatformEventSummary]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case eventPatterns = "EventPatterns"
            case requestId = "RequestId"
        }
    }

    /// 获取平台产品事件匹配规则
    @inlinable
    public func listPlatformEventPatterns(_ input: ListPlatformEventPatternsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListPlatformEventPatternsResponse> {
        self.client.execute(action: "ListPlatformEventPatterns", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取平台产品事件匹配规则
    @inlinable
    public func listPlatformEventPatterns(_ input: ListPlatformEventPatternsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListPlatformEventPatternsResponse {
        try await self.client.execute(action: "ListPlatformEventPatterns", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取平台产品事件匹配规则
    @inlinable
    public func listPlatformEventPatterns(productType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListPlatformEventPatternsResponse> {
        self.listPlatformEventPatterns(.init(productType: productType), region: region, logger: logger, on: eventLoop)
    }

    /// 获取平台产品事件匹配规则
    @inlinable
    public func listPlatformEventPatterns(productType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListPlatformEventPatternsResponse {
        try await self.listPlatformEventPatterns(.init(productType: productType), region: region, logger: logger, on: eventLoop)
    }
}
