//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Organization {
    /// ListOrganizationNodeMembers请求参数结构体
    public struct ListOrganizationNodeMembersRequest: TCPaginatedRequest {
        /// 企业组织单元ID
        public let nodeId: UInt64

        /// 偏移量
        public let offset: UInt64?

        /// 限制数目
        public let limit: UInt64?

        public init(nodeId: UInt64, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.nodeId = nodeId
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListOrganizationNodeMembersResponse) -> ListOrganizationNodeMembersRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(nodeId: self.nodeId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// ListOrganizationNodeMembers返回参数结构体
    public struct ListOrganizationNodeMembersResponse: TCPaginatedResponse {
        /// 总数目
        public let totalCount: UInt64

        /// 成员列表
        public let members: [OrgMember]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case members = "Members"
            case requestId = "RequestId"
        }

        /// Extract the returned ``OrgMember`` list from the paginated response.
        public func getItems() -> [OrgMember] {
            self.members
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取企业组织单元成员列表
    @inlinable
    public func listOrganizationNodeMembers(_ input: ListOrganizationNodeMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListOrganizationNodeMembersResponse> {
        self.client.execute(action: "ListOrganizationNodeMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取企业组织单元成员列表
    @inlinable
    public func listOrganizationNodeMembers(_ input: ListOrganizationNodeMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationNodeMembersResponse {
        try await self.client.execute(action: "ListOrganizationNodeMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取企业组织单元成员列表
    @inlinable
    public func listOrganizationNodeMembers(nodeId: UInt64, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListOrganizationNodeMembersResponse> {
        self.listOrganizationNodeMembers(.init(nodeId: nodeId, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取企业组织单元成员列表
    @inlinable
    public func listOrganizationNodeMembers(nodeId: UInt64, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationNodeMembersResponse {
        try await self.listOrganizationNodeMembers(.init(nodeId: nodeId, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取企业组织单元成员列表
    @inlinable
    public func listOrganizationNodeMembersPaginated(_ input: ListOrganizationNodeMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [OrgMember])> {
        self.client.paginate(input: input, region: region, command: self.listOrganizationNodeMembers, logger: logger, on: eventLoop)
    }

    /// 获取企业组织单元成员列表
    @inlinable @discardableResult
    public func listOrganizationNodeMembersPaginated(_ input: ListOrganizationNodeMembersRequest, region: TCRegion? = nil, onResponse: @escaping (ListOrganizationNodeMembersResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listOrganizationNodeMembers, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取企业组织单元成员列表
    ///
    /// - Returns: `AsyncSequence`s of ``OrgMember`` and ``ListOrganizationNodeMembersResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func listOrganizationNodeMembersPaginator(_ input: ListOrganizationNodeMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListOrganizationNodeMembersRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listOrganizationNodeMembers, logger: logger, on: eventLoop)
    }
}
