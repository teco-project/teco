//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Organization {
    /// 退出企业组织
    ///
    /// 退出企业组织
    @inlinable
    public func quitOrganization(_ input: QuitOrganizationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < QuitOrganizationResponse > {
        self.client.execute(action: "QuitOrganization", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 退出企业组织
    ///
    /// 退出企业组织
    @inlinable
    public func quitOrganization(_ input: QuitOrganizationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QuitOrganizationResponse {
        try await self.client.execute(action: "QuitOrganization", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// QuitOrganization请求参数结构体
    public struct QuitOrganizationRequest: TCRequestModel {
        /// 企业组织ID
        public let orgId: UInt64
        
        public init (orgId: UInt64) {
            self.orgId = orgId
        }
        
        enum CodingKeys: String, CodingKey {
            case orgId = "OrgId"
        }
    }
    
    /// QuitOrganization返回参数结构体
    public struct QuitOrganizationResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}