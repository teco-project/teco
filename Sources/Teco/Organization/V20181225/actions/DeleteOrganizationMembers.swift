//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Organization {
    /// DeleteOrganizationMembers请求参数结构体
    public struct DeleteOrganizationMembersRequest: TCRequestModel {
        /// 被删除成员的UIN列表
        public let uins: [UInt64]
        
        public init (uins: [UInt64]) {
            self.uins = uins
        }
        
        enum CodingKeys: String, CodingKey {
            case uins = "Uins"
        }
    }
    
    /// DeleteOrganizationMembers返回参数结构体
    public struct DeleteOrganizationMembersResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 批量删除企业组织成员
    @inlinable
    public func deleteOrganizationMembers(_ input: DeleteOrganizationMembersRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DeleteOrganizationMembersResponse > {
        self.client.execute(action: "DeleteOrganizationMembers", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 批量删除企业组织成员
    @inlinable
    public func deleteOrganizationMembers(_ input: DeleteOrganizationMembersRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteOrganizationMembersResponse {
        try await self.client.execute(action: "DeleteOrganizationMembers", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
