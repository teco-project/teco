//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCOrganizationError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case memberIdentityNotExist = "ResourceNotFound.MemberIdentityNotExist"
            case memberNotExist = "ResourceNotFound.MemberNotExist"
            case memberPolicyNotExist = "ResourceNotFound.MemberPolicyNotExist"
            case organizationMemberNotExist = "ResourceNotFound.OrganizationMemberNotExist"
            case organizationNodeNotExist = "ResourceNotFound.OrganizationNodeNotExist"
            case organizationNotExist = "ResourceNotFound.OrganizationNotExist"
            case organizationServiceNotExist = "ResourceNotFound.OrganizationServiceNotExist"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 成员可授权身份不存在。
        public static var memberIdentityNotExist: ResourceNotFound {
            ResourceNotFound(.memberIdentityNotExist)
        }
        
        /// 成员不存在。
        public static var memberNotExist: ResourceNotFound {
            ResourceNotFound(.memberNotExist)
        }
        
        /// 组织成员策略不存在。
        public static var memberPolicyNotExist: ResourceNotFound {
            ResourceNotFound(.memberPolicyNotExist)
        }
        
        /// 组织成员不存在。
        public static var organizationMemberNotExist: ResourceNotFound {
            ResourceNotFound(.organizationMemberNotExist)
        }
        
        /// 组织节点不在。
        public static var organizationNodeNotExist: ResourceNotFound {
            ResourceNotFound(.organizationNodeNotExist)
        }
        
        /// 企业组织不存在。
        public static var organizationNotExist: ResourceNotFound {
            ResourceNotFound(.organizationNotExist)
        }
        
        /// 集团服务不存在。
        public static var organizationServiceNotExist: ResourceNotFound {
            ResourceNotFound(.organizationServiceNotExist)
        }
    }
}

extension TCOrganizationError.ResourceNotFound: Equatable {
    public static func == (lhs: TCOrganizationError.ResourceNotFound, rhs: TCOrganizationError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCOrganizationError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCOrganizationError.ResourceNotFound {
    /// - Returns: ``TCOrganizationError`` that holds the same error and context.
    public func toOrganizationError() -> TCOrganizationError {
        guard let code = TCOrganizationError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCOrganizationError(code, context: self.context)
    }
}

extension TCOrganizationError.ResourceNotFound {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
