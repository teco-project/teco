//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCOrganizationError {
    public struct UnsupportedOperation: TCErrorType {
        enum Code: String {
            case addDelegatePayerNotAllow = "UnsupportedOperation.AddDelegatePayerNotAllow"
            case addDiscountInheritNotAllow = "UnsupportedOperation.AddDiscountInheritNotAllow"
            case createMemberNotAllowDelete = "UnsupportedOperation.CreateMemberNotAllowDelete"
            case inconsistentUserTypes = "UnsupportedOperation.InconsistentUserTypes"
            case managementSystemError = "UnsupportedOperation.ManagementSystemError"
            case memberAccountArrears = "UnsupportedOperation.MemberAccountArrears"
            case memberDiscountInheritExisted = "UnsupportedOperation.MemberDiscountInheritExisted"
            case memberExistAccountLevelDiscountInherit = "UnsupportedOperation.MemberExistAccountLevelDiscountInherit"
            case memberExistOperateProcessNotAllowDelete = "UnsupportedOperation.MemberExistOperateProcessNotAllowDelete"
            case memberExistServiceNotAllowDelete = "UnsupportedOperation.MemberExistServiceNotAllowDelete"
            case memberIsAgent = "UnsupportedOperation.MemberIsAgent"
            case orderInProgressExisted = "UnsupportedOperation.OrderInProgressExisted"
            case ownerDiscountInheritExisted = "UnsupportedOperation.OwnerDiscountInheritExisted"
            case payerArrearsAndNoCreditAccount = "UnsupportedOperation.PayerArrearsAndNoCreditAccount"
            case payerExistAccountLevelDiscountInherit = "UnsupportedOperation.PayerExistAccountLevelDiscountInherit"
            case other = "UnsupportedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 不允许添加代付关系。
        public static var addDelegatePayerNotAllow: UnsupportedOperation {
            UnsupportedOperation(.addDelegatePayerNotAllow)
        }
        
        /// 不允许添加优惠继承关系。
        public static var addDiscountInheritNotAllow: UnsupportedOperation {
            UnsupportedOperation(.addDiscountInheritNotAllow)
        }
        
        /// 创建的成员不允许删除。
        public static var createMemberNotAllowDelete: UnsupportedOperation {
            UnsupportedOperation(.createMemberNotAllowDelete)
        }
        
        /// 用户类型不一致。
        public static var inconsistentUserTypes: UnsupportedOperation {
            UnsupportedOperation(.inconsistentUserTypes)
        }
        
        /// 调用经管系统报错。
        public static var managementSystemError: UnsupportedOperation {
            UnsupportedOperation(.managementSystemError)
        }
        
        /// 成员账户欠费。
        public static var memberAccountArrears: UnsupportedOperation {
            UnsupportedOperation(.memberAccountArrears)
        }
        
        /// 成员存在优惠继承。
        public static var memberDiscountInheritExisted: UnsupportedOperation {
            UnsupportedOperation(.memberDiscountInheritExisted)
        }
        
        /// 成员存在账户级优惠。
        public static var memberExistAccountLevelDiscountInherit: UnsupportedOperation {
            UnsupportedOperation(.memberExistAccountLevelDiscountInherit)
        }
        
        public static var memberExistOperateProcessNotAllowDelete: UnsupportedOperation {
            UnsupportedOperation(.memberExistOperateProcessNotAllowDelete)
        }
        
        /// 组织成员被委派集团服务，不允许退出。
        public static var memberExistServiceNotAllowDelete: UnsupportedOperation {
            UnsupportedOperation(.memberExistServiceNotAllowDelete)
        }
        
        /// 成员是代理商或代客。
        public static var memberIsAgent: UnsupportedOperation {
            UnsupportedOperation(.memberIsAgent)
        }
        
        /// 存在在途订单。
        public static var orderInProgressExisted: UnsupportedOperation {
            UnsupportedOperation(.orderInProgressExisted)
        }
        
        /// 管理员存在优惠继承。
        public static var ownerDiscountInheritExisted: UnsupportedOperation {
            UnsupportedOperation(.ownerDiscountInheritExisted)
        }
        
        /// 代付者欠费且未开通信用账户。
        public static var payerArrearsAndNoCreditAccount: UnsupportedOperation {
            UnsupportedOperation(.payerArrearsAndNoCreditAccount)
        }
        
        /// 代付者存在账户级优惠。
        public static var payerExistAccountLevelDiscountInherit: UnsupportedOperation {
            UnsupportedOperation(.payerExistAccountLevelDiscountInherit)
        }
        
        /// 操作不支持。
        public static var other: UnsupportedOperation {
            UnsupportedOperation(.other)
        }
    }
}

extension TCOrganizationError.UnsupportedOperation: Equatable {
    public static func == (lhs: TCOrganizationError.UnsupportedOperation, rhs: TCOrganizationError.UnsupportedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCOrganizationError.UnsupportedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCOrganizationError.UnsupportedOperation {
    /// - Returns: ``TCOrganizationError`` that holds the same error and context.
    public func toOrganizationError() -> TCOrganizationError {
        guard let code = TCOrganizationError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCOrganizationError(code, context: self.context)
    }
}

extension TCOrganizationError.UnsupportedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
