//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Organization {
    /// DescribeOrganizationFinancialByMember请求参数结构体
    public struct DescribeOrganizationFinancialByMemberRequest: TCPaginatedRequest {
        /// 查询开始月份。格式：yyyy-mm，例如：2021-01。
        public let month: String

        /// 限制数目。取值范围：1~50，默认值：10
        public let limit: Int64?

        /// 偏移量。取值是limit的整数倍，默认值 : 0
        public let offset: Int64?

        /// 查询结束月份。格式：yyyy-mm，例如：2021-01,默认值为查询开始月份。
        public let endMonth: String?

        /// 查询成员列表。 最大100个
        public let memberUins: [Int64]?

        /// 查询产品列表。 最大100个
        public let productCodes: [String]?

        public init(month: String, limit: Int64? = nil, offset: Int64? = nil, endMonth: String? = nil, memberUins: [Int64]? = nil, productCodes: [String]? = nil) {
            self.month = month
            self.limit = limit
            self.offset = offset
            self.endMonth = endMonth
            self.memberUins = memberUins
            self.productCodes = productCodes
        }

        enum CodingKeys: String, CodingKey {
            case month = "Month"
            case limit = "Limit"
            case offset = "Offset"
            case endMonth = "EndMonth"
            case memberUins = "MemberUins"
            case productCodes = "ProductCodes"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeOrganizationFinancialByMemberResponse) -> DescribeOrganizationFinancialByMemberRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeOrganizationFinancialByMemberRequest(month: self.month, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), endMonth: self.endMonth, memberUins: self.memberUins, productCodes: self.productCodes)
        }
    }

    /// DescribeOrganizationFinancialByMember返回参数结构体
    public struct DescribeOrganizationFinancialByMemberResponse: TCPaginatedResponse {
        /// 当月总消耗。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCost: Float?

        /// 成员消耗详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [OrgMemberFinancial]?

        /// 总数目。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCost = "TotalCost"
            case items = "Items"
            case total = "Total"
            case requestId = "RequestId"
        }

        /// Extract the returned ``OrgMemberFinancial`` list from the paginated response.
        public func getItems() -> [OrgMemberFinancial] {
            self.items ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 以成员维度获取组织财务信息
    @inlinable
    public func describeOrganizationFinancialByMember(_ input: DescribeOrganizationFinancialByMemberRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationFinancialByMemberResponse> {
        self.client.execute(action: "DescribeOrganizationFinancialByMember", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 以成员维度获取组织财务信息
    @inlinable
    public func describeOrganizationFinancialByMember(_ input: DescribeOrganizationFinancialByMemberRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationFinancialByMemberResponse {
        try await self.client.execute(action: "DescribeOrganizationFinancialByMember", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 以成员维度获取组织财务信息
    @inlinable
    public func describeOrganizationFinancialByMember(month: String, limit: Int64? = nil, offset: Int64? = nil, endMonth: String? = nil, memberUins: [Int64]? = nil, productCodes: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationFinancialByMemberResponse> {
        self.describeOrganizationFinancialByMember(.init(month: month, limit: limit, offset: offset, endMonth: endMonth, memberUins: memberUins, productCodes: productCodes), region: region, logger: logger, on: eventLoop)
    }

    /// 以成员维度获取组织财务信息
    @inlinable
    public func describeOrganizationFinancialByMember(month: String, limit: Int64? = nil, offset: Int64? = nil, endMonth: String? = nil, memberUins: [Int64]? = nil, productCodes: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationFinancialByMemberResponse {
        try await self.describeOrganizationFinancialByMember(.init(month: month, limit: limit, offset: offset, endMonth: endMonth, memberUins: memberUins, productCodes: productCodes), region: region, logger: logger, on: eventLoop)
    }

    /// 以成员维度获取组织财务信息
    @inlinable
    public func describeOrganizationFinancialByMemberPaginated(_ input: DescribeOrganizationFinancialByMemberRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [OrgMemberFinancial])> {
        self.client.paginate(input: input, region: region, command: self.describeOrganizationFinancialByMember, logger: logger, on: eventLoop)
    }

    /// 以成员维度获取组织财务信息
    @inlinable @discardableResult
    public func describeOrganizationFinancialByMemberPaginated(_ input: DescribeOrganizationFinancialByMemberRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeOrganizationFinancialByMemberResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeOrganizationFinancialByMember, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 以成员维度获取组织财务信息
    ///
    /// - Returns: `AsyncSequence`s of ``OrgMemberFinancial`` and ``DescribeOrganizationFinancialByMemberResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeOrganizationFinancialByMemberPaginator(_ input: DescribeOrganizationFinancialByMemberRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeOrganizationFinancialByMemberRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeOrganizationFinancialByMember, logger: logger, on: eventLoop)
    }
}
