//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Organization {
    /// DescribeOrganizationFinancialByMonth请求参数结构体
    public struct DescribeOrganizationFinancialByMonthRequest: TCRequestModel {
        /// 查询月数。取值范围：1~6，默认值：6
        public let limit: Int64?

        /// 查询结束月份。格式：yyyy-mm，例如：2021-01
        public let endMonth: String?

        /// 查询成员列表。 最大100个
        public let memberUins: [Int64]?

        /// 查询产品列表。 最大100个
        public let productCodes: [String]?

        public init(limit: Int64? = nil, endMonth: String? = nil, memberUins: [Int64]? = nil, productCodes: [String]? = nil) {
            self.limit = limit
            self.endMonth = endMonth
            self.memberUins = memberUins
            self.productCodes = productCodes
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case endMonth = "EndMonth"
            case memberUins = "MemberUins"
            case productCodes = "ProductCodes"
        }
    }

    /// DescribeOrganizationFinancialByMonth返回参数结构体
    public struct DescribeOrganizationFinancialByMonthResponse: TCResponseModel {
        /// 产品消耗详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [OrgFinancialByMonth]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case requestId = "RequestId"
        }
    }

    /// 以月维度获取组织财务信息趋势
    @inlinable
    public func describeOrganizationFinancialByMonth(_ input: DescribeOrganizationFinancialByMonthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationFinancialByMonthResponse> {
        self.client.execute(action: "DescribeOrganizationFinancialByMonth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 以月维度获取组织财务信息趋势
    @inlinable
    public func describeOrganizationFinancialByMonth(_ input: DescribeOrganizationFinancialByMonthRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationFinancialByMonthResponse {
        try await self.client.execute(action: "DescribeOrganizationFinancialByMonth", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 以月维度获取组织财务信息趋势
    @inlinable
    public func describeOrganizationFinancialByMonth(limit: Int64? = nil, endMonth: String? = nil, memberUins: [Int64]? = nil, productCodes: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationFinancialByMonthResponse> {
        self.describeOrganizationFinancialByMonth(.init(limit: limit, endMonth: endMonth, memberUins: memberUins, productCodes: productCodes), region: region, logger: logger, on: eventLoop)
    }

    /// 以月维度获取组织财务信息趋势
    @inlinable
    public func describeOrganizationFinancialByMonth(limit: Int64? = nil, endMonth: String? = nil, memberUins: [Int64]? = nil, productCodes: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationFinancialByMonthResponse {
        try await self.describeOrganizationFinancialByMonth(.init(limit: limit, endMonth: endMonth, memberUins: memberUins, productCodes: productCodes), region: region, logger: logger, on: eventLoop)
    }
}
