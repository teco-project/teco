//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Organization {
    /// DeleteOrganizationMemberAuthIdentity请求参数结构体
    public struct DeleteOrganizationMemberAuthIdentityRequest: TCRequest {
        /// 成员uin。
        public let memberUin: UInt64

        /// 身份Id。
        public let identityId: UInt64

        public init(memberUin: UInt64, identityId: UInt64) {
            self.memberUin = memberUin
            self.identityId = identityId
        }

        enum CodingKeys: String, CodingKey {
            case memberUin = "MemberUin"
            case identityId = "IdentityId"
        }
    }

    /// DeleteOrganizationMemberAuthIdentity返回参数结构体
    public struct DeleteOrganizationMemberAuthIdentityResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除组织成员访问授权
    @inlinable @discardableResult
    public func deleteOrganizationMemberAuthIdentity(_ input: DeleteOrganizationMemberAuthIdentityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteOrganizationMemberAuthIdentityResponse> {
        self.client.execute(action: "DeleteOrganizationMemberAuthIdentity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除组织成员访问授权
    @inlinable @discardableResult
    public func deleteOrganizationMemberAuthIdentity(_ input: DeleteOrganizationMemberAuthIdentityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteOrganizationMemberAuthIdentityResponse {
        try await self.client.execute(action: "DeleteOrganizationMemberAuthIdentity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除组织成员访问授权
    @inlinable @discardableResult
    public func deleteOrganizationMemberAuthIdentity(memberUin: UInt64, identityId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteOrganizationMemberAuthIdentityResponse> {
        self.deleteOrganizationMemberAuthIdentity(.init(memberUin: memberUin, identityId: identityId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除组织成员访问授权
    @inlinable @discardableResult
    public func deleteOrganizationMemberAuthIdentity(memberUin: UInt64, identityId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteOrganizationMemberAuthIdentityResponse {
        try await self.deleteOrganizationMemberAuthIdentity(.init(memberUin: memberUin, identityId: identityId), region: region, logger: logger, on: eventLoop)
    }
}
