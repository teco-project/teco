//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Organization {
    /// DescribeOrganizationMemberAuthIdentities请求参数结构体
    public struct DescribeOrganizationMemberAuthIdentitiesRequest: TCRequestModel {
        /// 偏移量。
        public let offset: Int64

        /// 限制数目。最大50
        public let limit: Int64

        /// 组织成员Uin。
        public let memberUin: Int64

        public init(offset: Int64, limit: Int64, memberUin: Int64) {
            self.offset = offset
            self.limit = limit
            self.memberUin = memberUin
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case memberUin = "MemberUin"
        }
    }

    /// DescribeOrganizationMemberAuthIdentities返回参数结构体
    public struct DescribeOrganizationMemberAuthIdentitiesResponse: TCResponseModel {
        /// 列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [OrgMemberAuthIdentity]?

        /// 总数目。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case total = "Total"
            case requestId = "RequestId"
        }
    }

    /// 获取组织成员可被管理的身份列表
    @inlinable
    public func describeOrganizationMemberAuthIdentities(_ input: DescribeOrganizationMemberAuthIdentitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationMemberAuthIdentitiesResponse> {
        self.client.execute(action: "DescribeOrganizationMemberAuthIdentities", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取组织成员可被管理的身份列表
    @inlinable
    public func describeOrganizationMemberAuthIdentities(_ input: DescribeOrganizationMemberAuthIdentitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationMemberAuthIdentitiesResponse {
        try await self.client.execute(action: "DescribeOrganizationMemberAuthIdentities", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取组织成员可被管理的身份列表
    @inlinable
    public func describeOrganizationMemberAuthIdentities(offset: Int64, limit: Int64, memberUin: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationMemberAuthIdentitiesResponse> {
        self.describeOrganizationMemberAuthIdentities(DescribeOrganizationMemberAuthIdentitiesRequest(offset: offset, limit: limit, memberUin: memberUin), region: region, logger: logger, on: eventLoop)
    }

    /// 获取组织成员可被管理的身份列表
    @inlinable
    public func describeOrganizationMemberAuthIdentities(offset: Int64, limit: Int64, memberUin: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationMemberAuthIdentitiesResponse {
        try await self.describeOrganizationMemberAuthIdentities(DescribeOrganizationMemberAuthIdentitiesRequest(offset: offset, limit: limit, memberUin: memberUin), region: region, logger: logger, on: eventLoop)
    }
}
