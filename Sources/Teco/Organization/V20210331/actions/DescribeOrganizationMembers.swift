//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Organization {
    /// DescribeOrganizationMembers请求参数结构体
    public struct DescribeOrganizationMembersRequest: TCPaginatedRequest {
        /// 偏移量。取值是limit的整数倍，默认值 : 0
        public let offset: UInt64

        /// 限制数目。取值范围：1~50，默认值：10
        public let limit: UInt64

        /// 国际站：en，国内站：zh
        public let lang: String?

        /// 成员名称或者成员ID搜索。
        public let searchKey: String?

        /// 主体名称搜索。
        public let authName: String?

        /// 可信服务产品简称。可信服务管理员查询时必须指定
        public let product: String?

        public init(offset: UInt64, limit: UInt64, lang: String? = nil, searchKey: String? = nil, authName: String? = nil, product: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.lang = lang
            self.searchKey = searchKey
            self.authName = authName
            self.product = product
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case lang = "Lang"
            case searchKey = "SearchKey"
            case authName = "AuthName"
            case product = "Product"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeOrganizationMembersResponse) -> DescribeOrganizationMembersRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(offset: self.offset + .init(response.getItems().count), limit: self.limit, lang: self.lang, searchKey: self.searchKey, authName: self.authName, product: self.product)
        }
    }

    /// DescribeOrganizationMembers返回参数结构体
    public struct DescribeOrganizationMembersResponse: TCPaginatedResponse {
        /// 成员列表。
        public let items: [OrgMember]

        /// 总数目。
        public let total: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case items = "Items"
            case total = "Total"
            case requestId = "RequestId"
        }

        /// Extract the returned ``OrgMember`` list from the paginated response.
        public func getItems() -> [OrgMember] {
            self.items
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 获取企业组织成员列表
    @inlinable
    public func describeOrganizationMembers(_ input: DescribeOrganizationMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationMembersResponse> {
        self.client.execute(action: "DescribeOrganizationMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取企业组织成员列表
    @inlinable
    public func describeOrganizationMembers(_ input: DescribeOrganizationMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationMembersResponse {
        try await self.client.execute(action: "DescribeOrganizationMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取企业组织成员列表
    @inlinable
    public func describeOrganizationMembers(offset: UInt64, limit: UInt64, lang: String? = nil, searchKey: String? = nil, authName: String? = nil, product: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationMembersResponse> {
        self.describeOrganizationMembers(.init(offset: offset, limit: limit, lang: lang, searchKey: searchKey, authName: authName, product: product), region: region, logger: logger, on: eventLoop)
    }

    /// 获取企业组织成员列表
    @inlinable
    public func describeOrganizationMembers(offset: UInt64, limit: UInt64, lang: String? = nil, searchKey: String? = nil, authName: String? = nil, product: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationMembersResponse {
        try await self.describeOrganizationMembers(.init(offset: offset, limit: limit, lang: lang, searchKey: searchKey, authName: authName, product: product), region: region, logger: logger, on: eventLoop)
    }

    /// 获取企业组织成员列表
    @inlinable
    public func describeOrganizationMembersPaginated(_ input: DescribeOrganizationMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [OrgMember])> {
        self.client.paginate(input: input, region: region, command: self.describeOrganizationMembers, logger: logger, on: eventLoop)
    }

    /// 获取企业组织成员列表
    @inlinable @discardableResult
    public func describeOrganizationMembersPaginated(_ input: DescribeOrganizationMembersRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeOrganizationMembersResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeOrganizationMembers, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取企业组织成员列表
    ///
    /// - Returns: `AsyncSequence`s of ``OrgMember`` and ``DescribeOrganizationMembersResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeOrganizationMembersPaginator(_ input: DescribeOrganizationMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeOrganizationMembersRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeOrganizationMembers, logger: logger, on: eventLoop)
    }
}
