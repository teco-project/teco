//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Organization {
    /// CreateOrganizationMemberAuthIdentity请求参数结构体
    public struct CreateOrganizationMemberAuthIdentityRequest: TCRequest {
        /// 成员uin列表。最多10个
        public let memberUins: [UInt64]

        /// 身份Id列表。最多5个
        public let identityIds: [UInt64]

        public init(memberUins: [UInt64], identityIds: [UInt64]) {
            self.memberUins = memberUins
            self.identityIds = identityIds
        }

        enum CodingKeys: String, CodingKey {
            case memberUins = "MemberUins"
            case identityIds = "IdentityIds"
        }
    }

    /// CreateOrganizationMemberAuthIdentity返回参数结构体
    public struct CreateOrganizationMemberAuthIdentityResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 添加组织成员访问授权
    @inlinable @discardableResult
    public func createOrganizationMemberAuthIdentity(_ input: CreateOrganizationMemberAuthIdentityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationMemberAuthIdentityResponse> {
        self.client.execute(action: "CreateOrganizationMemberAuthIdentity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加组织成员访问授权
    @inlinable @discardableResult
    public func createOrganizationMemberAuthIdentity(_ input: CreateOrganizationMemberAuthIdentityRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationMemberAuthIdentityResponse {
        try await self.client.execute(action: "CreateOrganizationMemberAuthIdentity", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加组织成员访问授权
    @inlinable @discardableResult
    public func createOrganizationMemberAuthIdentity(memberUins: [UInt64], identityIds: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationMemberAuthIdentityResponse> {
        self.createOrganizationMemberAuthIdentity(.init(memberUins: memberUins, identityIds: identityIds), region: region, logger: logger, on: eventLoop)
    }

    /// 添加组织成员访问授权
    @inlinable @discardableResult
    public func createOrganizationMemberAuthIdentity(memberUins: [UInt64], identityIds: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationMemberAuthIdentityResponse {
        try await self.createOrganizationMemberAuthIdentity(.init(memberUins: memberUins, identityIds: identityIds), region: region, logger: logger, on: eventLoop)
    }
}
