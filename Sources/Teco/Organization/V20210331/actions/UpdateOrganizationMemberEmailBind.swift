//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Organization {
    /// UpdateOrganizationMemberEmailBind请求参数结构体
    public struct UpdateOrganizationMemberEmailBindRequest: TCRequest {
        /// 成员Uin
        public let memberUin: Int64

        /// 绑定ID
        public let bindId: Int64

        /// 邮箱
        public let email: String

        /// 国际区号
        public let countryCode: String

        /// 手机号
        public let phone: String

        public init(memberUin: Int64, bindId: Int64, email: String, countryCode: String, phone: String) {
            self.memberUin = memberUin
            self.bindId = bindId
            self.email = email
            self.countryCode = countryCode
            self.phone = phone
        }

        enum CodingKeys: String, CodingKey {
            case memberUin = "MemberUin"
            case bindId = "BindId"
            case email = "Email"
            case countryCode = "CountryCode"
            case phone = "Phone"
        }
    }

    /// UpdateOrganizationMemberEmailBind返回参数结构体
    public struct UpdateOrganizationMemberEmailBindResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改绑定成员邮箱
    @inlinable @discardableResult
    public func updateOrganizationMemberEmailBind(_ input: UpdateOrganizationMemberEmailBindRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateOrganizationMemberEmailBindResponse> {
        self.client.execute(action: "UpdateOrganizationMemberEmailBind", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改绑定成员邮箱
    @inlinable @discardableResult
    public func updateOrganizationMemberEmailBind(_ input: UpdateOrganizationMemberEmailBindRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateOrganizationMemberEmailBindResponse {
        try await self.client.execute(action: "UpdateOrganizationMemberEmailBind", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改绑定成员邮箱
    @inlinable @discardableResult
    public func updateOrganizationMemberEmailBind(memberUin: Int64, bindId: Int64, email: String, countryCode: String, phone: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateOrganizationMemberEmailBindResponse> {
        self.updateOrganizationMemberEmailBind(.init(memberUin: memberUin, bindId: bindId, email: email, countryCode: countryCode, phone: phone), region: region, logger: logger, on: eventLoop)
    }

    /// 修改绑定成员邮箱
    @inlinable @discardableResult
    public func updateOrganizationMemberEmailBind(memberUin: Int64, bindId: Int64, email: String, countryCode: String, phone: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateOrganizationMemberEmailBindResponse {
        try await self.updateOrganizationMemberEmailBind(.init(memberUin: memberUin, bindId: bindId, email: email, countryCode: countryCode, phone: phone), region: region, logger: logger, on: eventLoop)
    }
}
