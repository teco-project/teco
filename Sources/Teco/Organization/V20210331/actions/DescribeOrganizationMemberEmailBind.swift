//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Organization {
    /// DescribeOrganizationMemberEmailBind请求参数结构体
    public struct DescribeOrganizationMemberEmailBindRequest: TCRequestModel {
        /// 成员Uin
        public let memberUin: Int64

        public init(memberUin: Int64) {
            self.memberUin = memberUin
        }

        enum CodingKeys: String, CodingKey {
            case memberUin = "MemberUin"
        }
    }

    /// DescribeOrganizationMemberEmailBind返回参数结构体
    public struct DescribeOrganizationMemberEmailBindResponse: TCResponseModel {
        /// 绑定ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bindId: UInt64?

        /// 申请时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let applyTime: String?

        /// 邮箱地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let email: String?

        /// 手机号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phone: String?

        /// 绑定状态    未绑定：Unbound，待激活：Valid，绑定成功：Success，绑定失败：Failed
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bindStatus: String?

        /// 绑定时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bindTime: String?

        /// 失败说明
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 安全手机绑定状态  未绑定：0，已绑定：1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneBind: UInt64?

        /// 国际区号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let countryCode: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case bindId = "BindId"
            case applyTime = "ApplyTime"
            case email = "Email"
            case phone = "Phone"
            case bindStatus = "BindStatus"
            case bindTime = "BindTime"
            case description = "Description"
            case phoneBind = "PhoneBind"
            case countryCode = "CountryCode"
            case requestId = "RequestId"
        }
    }

    /// 查询成员邮箱绑定详细信息
    @inlinable
    public func describeOrganizationMemberEmailBind(_ input: DescribeOrganizationMemberEmailBindRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationMemberEmailBindResponse> {
        self.client.execute(action: "DescribeOrganizationMemberEmailBind", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询成员邮箱绑定详细信息
    @inlinable
    public func describeOrganizationMemberEmailBind(_ input: DescribeOrganizationMemberEmailBindRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationMemberEmailBindResponse {
        try await self.client.execute(action: "DescribeOrganizationMemberEmailBind", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询成员邮箱绑定详细信息
    @inlinable
    public func describeOrganizationMemberEmailBind(memberUin: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrganizationMemberEmailBindResponse> {
        self.describeOrganizationMemberEmailBind(.init(memberUin: memberUin), region: region, logger: logger, on: eventLoop)
    }

    /// 查询成员邮箱绑定详细信息
    @inlinable
    public func describeOrganizationMemberEmailBind(memberUin: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrganizationMemberEmailBindResponse {
        try await self.describeOrganizationMemberEmailBind(.init(memberUin: memberUin), region: region, logger: logger, on: eventLoop)
    }
}
