//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Organization {
    /// UpdateOrganizationMember请求参数结构体
    public struct UpdateOrganizationMemberRequest: TCRequest {
        /// 成员Uin。
        public let memberUin: UInt64

        /// 成员名称。最大长度为25个字符，支持英文字母、数字、汉字、符号+@、&._[]-:,
        public let name: String?

        /// 备注。最大长度为40个字符
        public let remark: String?

        /// 关系策略类型。PolicyType不为空，PermissionIds不能为空。取值：Financial
        public let policyType: String?

        /// 成员财务权限ID列表。PermissionIds不为空，PolicyType不能为空。
        /// 取值：1-查看账单、2-查看余额、3-资金划拨、4-合并出账、5-开票、6-优惠继承、7-代付费、8-成本分析，如果有值，1、2 默认必须
        public let permissionIds: [UInt64]?

        /// 是否允许成员退出组织。取值：Allow-允许、Denied-不允许
        public let isAllowQuit: String?

        /// 代付者Uin。成员财务权限有代付费时需要，取值为成员对应主体的主体管理员Uin
        public let payUin: String?

        public init(memberUin: UInt64, name: String? = nil, remark: String? = nil, policyType: String? = nil, permissionIds: [UInt64]? = nil, isAllowQuit: String? = nil, payUin: String? = nil) {
            self.memberUin = memberUin
            self.name = name
            self.remark = remark
            self.policyType = policyType
            self.permissionIds = permissionIds
            self.isAllowQuit = isAllowQuit
            self.payUin = payUin
        }

        enum CodingKeys: String, CodingKey {
            case memberUin = "MemberUin"
            case name = "Name"
            case remark = "Remark"
            case policyType = "PolicyType"
            case permissionIds = "PermissionIds"
            case isAllowQuit = "IsAllowQuit"
            case payUin = "PayUin"
        }
    }

    /// UpdateOrganizationMember返回参数结构体
    public struct UpdateOrganizationMemberResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新组织成员信息
    @inlinable @discardableResult
    public func updateOrganizationMember(_ input: UpdateOrganizationMemberRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateOrganizationMemberResponse> {
        self.client.execute(action: "UpdateOrganizationMember", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新组织成员信息
    @inlinable @discardableResult
    public func updateOrganizationMember(_ input: UpdateOrganizationMemberRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateOrganizationMemberResponse {
        try await self.client.execute(action: "UpdateOrganizationMember", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新组织成员信息
    @inlinable @discardableResult
    public func updateOrganizationMember(memberUin: UInt64, name: String? = nil, remark: String? = nil, policyType: String? = nil, permissionIds: [UInt64]? = nil, isAllowQuit: String? = nil, payUin: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateOrganizationMemberResponse> {
        self.updateOrganizationMember(.init(memberUin: memberUin, name: name, remark: remark, policyType: policyType, permissionIds: permissionIds, isAllowQuit: isAllowQuit, payUin: payUin), region: region, logger: logger, on: eventLoop)
    }

    /// 更新组织成员信息
    @inlinable @discardableResult
    public func updateOrganizationMember(memberUin: UInt64, name: String? = nil, remark: String? = nil, policyType: String? = nil, permissionIds: [UInt64]? = nil, isAllowQuit: String? = nil, payUin: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateOrganizationMemberResponse {
        try await self.updateOrganizationMember(.init(memberUin: memberUin, name: name, remark: remark, policyType: policyType, permissionIds: permissionIds, isAllowQuit: isAllowQuit, payUin: payUin), region: region, logger: logger, on: eventLoop)
    }
}
