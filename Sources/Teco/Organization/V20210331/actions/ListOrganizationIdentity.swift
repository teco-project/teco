//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Organization {
    /// 获取组织成员访问身份列表
    ///
    /// 获取组织成员访问身份列表
    @inlinable
    public func listOrganizationIdentity(_ input: ListOrganizationIdentityRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ListOrganizationIdentityResponse > {
        self.client.execute(action: "ListOrganizationIdentity", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取组织成员访问身份列表
    ///
    /// 获取组织成员访问身份列表
    @inlinable
    public func listOrganizationIdentity(_ input: ListOrganizationIdentityRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListOrganizationIdentityResponse {
        try await self.client.execute(action: "ListOrganizationIdentity", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ListOrganizationIdentity请求参数结构体
    public struct ListOrganizationIdentityRequest: TCRequestModel {
        /// 偏移量。
        public let offset: UInt64
        
        /// 限制数目。最大50
        public let limit: UInt64
        
        /// 名称搜索关键字。
        public let searchKey: String?
        
        /// 身份ID搜索。
        public let identityId: UInt64?
        
        public init (offset: UInt64, limit: UInt64, searchKey: String?, identityId: UInt64?) {
            self.offset = offset
            self.limit = limit
            self.searchKey = searchKey
            self.identityId = identityId
        }
        
        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case searchKey = "SearchKey"
            case identityId = "IdentityId"
        }
    }
    
    /// ListOrganizationIdentity返回参数结构体
    public struct ListOrganizationIdentityResponse: TCResponseModel {
        /// 总数。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?
        
        /// 条目详情。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let items: [OrgIdentity]?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case items = "Items"
            case requestId = "RequestId"
        }
    }
}