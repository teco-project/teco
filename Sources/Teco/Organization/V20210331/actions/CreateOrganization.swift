//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Organization {
    /// CreateOrganization请求参数结构体
    public struct CreateOrganizationRequest: TCRequest {
        public init() {
        }
    }

    /// CreateOrganization返回参数结构体
    public struct CreateOrganizationResponse: TCResponse {
        /// 企业组织ID
        public let orgId: UInt64

        /// 创建者昵称
        public let nickName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case orgId = "OrgId"
            case nickName = "NickName"
            case requestId = "RequestId"
        }
    }

    /// 创建企业组织
    @inlinable
    public func createOrganization(_ input: CreateOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationResponse> {
        self.client.execute(action: "CreateOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建企业组织
    @inlinable
    public func createOrganization(_ input: CreateOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationResponse {
        try await self.client.execute(action: "CreateOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建企业组织
    @inlinable
    public func createOrganization(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOrganizationResponse> {
        self.createOrganization(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 创建企业组织
    @inlinable
    public func createOrganization(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOrganizationResponse {
        try await self.createOrganization(.init(), region: region, logger: logger, on: eventLoop)
    }
}
