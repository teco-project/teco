//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCMnaError {
    public struct OperationDenied: TCErrorType {
        enum Code: String {
            case accelerationNotSuggest = "OperationDenied.AccelerationNotSuggest"
            case createQosExceedLimit = "OperationDenied.CreateQosExceedLimit"
            case ctccTokenExpired = "OperationDenied.CTCCTokenExpired"
            case requestQosTimeout = "OperationDenied.RequestQosTimeout"
            case userNonAccelerated = "OperationDenied.UserNonAccelerated"
            case userOutOfCoverage = "OperationDenied.UserOutOfCoverage"
            case vendorReturnError = "OperationDenied.VendorReturnError"
            case vendorServerError = "OperationDenied.VendorServerError"
            case other = "OperationDenied"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 不建议加速。
        public static var accelerationNotSuggest: OperationDenied {
            OperationDenied(.accelerationNotSuggest)
        }
        
        /// 相同加速间隔时间过短。
        public static var createQosExceedLimit: OperationDenied {
            OperationDenied(.createQosExceedLimit)
        }
        
        /// 中国电信加速token过期。
        public static var ctccTokenExpired: OperationDenied {
            OperationDenied(.ctccTokenExpired)
        }
        
        /// 请求运营商加速超时。
        public static var requestQosTimeout: OperationDenied {
            OperationDenied(.requestQosTimeout)
        }
        
        /// 该用户加速已取消，不处于加速状态。
        public static var userNonAccelerated: OperationDenied {
            OperationDenied(.userNonAccelerated)
        }
        
        /// 该用户不在运营商网络可加速范围内
        public static var userOutOfCoverage: OperationDenied {
            OperationDenied(.userOutOfCoverage)
        }
        
        /// 运营商返回结果错误。
        public static var vendorReturnError: OperationDenied {
            OperationDenied(.vendorReturnError)
        }
        
        /// 运营商服务器临时错误。
        public static var vendorServerError: OperationDenied {
            OperationDenied(.vendorServerError)
        }
        
        /// 操作被拒绝。
        public static var other: OperationDenied {
            OperationDenied(.other)
        }
    }
}

extension TCMnaError.OperationDenied: Equatable {
    public static func == (lhs: TCMnaError.OperationDenied, rhs: TCMnaError.OperationDenied) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCMnaError.OperationDenied: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCMnaError.OperationDenied {
    public func toMnaError() -> TCMnaError {
        guard let code = TCMnaError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCMnaError(code, context: self.context)
    }
}