//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mna {
    /// GetMultiFlowStatistic请求参数结构体
    public struct GetMultiFlowStatisticRequest: TCRequest {
        /// 设备id列表，单次最多请求10个设备
        public let deviceIds: [String]

        /// 1659514436
        public let beginTime: Int64

        /// 1659515000
        public let endTime: Int64

        /// 统计流量类型（1：上行流量，2：下行流量）
        public let type: Int64

        /// 统计时间粒度（1：按小时统计，2：按天统计）
        public let timeGranularity: Int64

        public init(deviceIds: [String], beginTime: Int64, endTime: Int64, type: Int64, timeGranularity: Int64) {
            self.deviceIds = deviceIds
            self.beginTime = beginTime
            self.endTime = endTime
            self.type = type
            self.timeGranularity = timeGranularity
        }

        enum CodingKeys: String, CodingKey {
            case deviceIds = "DeviceIds"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case type = "Type"
            case timeGranularity = "TimeGranularity"
        }
    }

    /// GetMultiFlowStatistic返回参数结构体
    public struct GetMultiFlowStatisticResponse: TCResponse {
        /// 批量设备流量信息
        public let flowDetails: [FlowDetails]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowDetails = "FlowDetails"
            case requestId = "RequestId"
        }
    }

    /// 批量获取设备流量统计
    ///
    /// 批量获取设备流量统计曲线
    @inlinable
    public func getMultiFlowStatistic(_ input: GetMultiFlowStatisticRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetMultiFlowStatisticResponse> {
        self.client.execute(action: "GetMultiFlowStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量获取设备流量统计
    ///
    /// 批量获取设备流量统计曲线
    @inlinable
    public func getMultiFlowStatistic(_ input: GetMultiFlowStatisticRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetMultiFlowStatisticResponse {
        try await self.client.execute(action: "GetMultiFlowStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量获取设备流量统计
    ///
    /// 批量获取设备流量统计曲线
    @inlinable
    public func getMultiFlowStatistic(deviceIds: [String], beginTime: Int64, endTime: Int64, type: Int64, timeGranularity: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetMultiFlowStatisticResponse> {
        self.getMultiFlowStatistic(.init(deviceIds: deviceIds, beginTime: beginTime, endTime: endTime, type: type, timeGranularity: timeGranularity), region: region, logger: logger, on: eventLoop)
    }

    /// 批量获取设备流量统计
    ///
    /// 批量获取设备流量统计曲线
    @inlinable
    public func getMultiFlowStatistic(deviceIds: [String], beginTime: Int64, endTime: Int64, type: Int64, timeGranularity: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetMultiFlowStatisticResponse {
        try await self.getMultiFlowStatistic(.init(deviceIds: deviceIds, beginTime: beginTime, endTime: endTime, type: type, timeGranularity: timeGranularity), region: region, logger: logger, on: eventLoop)
    }
}
