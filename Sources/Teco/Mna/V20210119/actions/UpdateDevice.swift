//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Mna {
    /// 更新设备
    ///
    /// 更新设备信息
    @inlinable
    public func updateDevice(_ input: UpdateDeviceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UpdateDeviceResponse > {
        self.client.execute(action: "UpdateDevice", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 更新设备
    ///
    /// 更新设备信息
    @inlinable
    public func updateDevice(_ input: UpdateDeviceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateDeviceResponse {
        try await self.client.execute(action: "UpdateDevice", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// UpdateDevice请求参数结构体
    public struct UpdateDeviceRequest: TCRequestModel {
        /// 设备id
        public let deviceId: String
        
        /// 设备名称
        public let deviceName: String?
        
        /// 设备备注
        public let remark: String?
        
        /// 更新设备网络信息
        public let updateNetInfo: [Date]?
        
        public init (deviceId: String, deviceName: String?, remark: String?, updateNetInfo: [Date]?) {
            self.deviceId = deviceId
            self.deviceName = deviceName
            self.remark = remark
            self.updateNetInfo = updateNetInfo
        }
        
        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case deviceName = "DeviceName"
            case remark = "Remark"
            case updateNetInfo = "UpdateNetInfo"
        }
    }
    
    /// UpdateDevice返回参数结构体
    public struct UpdateDeviceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}