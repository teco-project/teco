//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Trtc {
    /// 造成异常体验可能的异常事件类型
    public struct AbnormalEvent: TCOutputModel {
        /// 异常事件ID，具体值查看附录：异常体验ID映射表：https://cloud.tencent.com/document/product/647/44916
        public let abnormalEventId: UInt64

        /// 远端用户ID,""：表示异常事件不是由远端用户产生
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let peerId: String?

        enum CodingKeys: String, CodingKey {
            case abnormalEventId = "AbnormalEventId"
            case peerId = "PeerId"
        }
    }

    /// 用户的异常体验及可能的原因
    public struct AbnormalExperience: TCOutputModel {
        /// 用户ID
        public let userId: String

        /// 异常体验ID
        public let experienceId: UInt64

        /// 字符串房间号
        public let roomId: String

        /// 异常事件数组
        public let abnormalEventList: [AbnormalEvent]

        /// 异常事件的上报时间
        public let eventTime: UInt64

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case experienceId = "ExperienceId"
            case roomId = "RoomId"
            case abnormalEventList = "AbnormalEventList"
            case eventTime = "EventTime"
        }
    }

    /// 转推服务加入TRTC房间的机器人参数。
    public struct AgentParams: TCInputModel {
        /// 转推服务在TRTC房间使用的[UserId](https://cloud.tencent.com/document/product/647/46351#userid)，注意这个userId不能与其他TRTC或者转推服务等已经使用的UserId重复，建议可以把房间ID作为userId的标识的一部分。
        public let userId: String

        /// 转推服务加入TRTC房间的用户签名，当前 UserId 对应的验证签名，相当于登录密码，具体计算方法请参考TRTC计算[UserSig](https://cloud.tencent.com/document/product/647/45910#UserSig)的方案。
        public let userSig: String?

        /// 所有参与混流转推的主播持续离开TRTC房间超过MaxIdleTime的时长，自动停止转推，单位：秒。默认值为 30 秒，该值需大于等于 5秒，且小于等于 86400秒(24小时)。
        public let maxIdleTime: UInt64?

        public init(userId: String, userSig: String? = nil, maxIdleTime: UInt64? = nil) {
            self.userId = userId
            self.userSig = userSig
            self.maxIdleTime = maxIdleTime
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userSig = "UserSig"
            case maxIdleTime = "MaxIdleTime"
        }
    }

    /// 音频编码参数。
    public struct AudioEncode: TCInputModel {
        /// 输出流音频采样率。取值为[48000, 44100, 32000, 24000, 16000, 8000]，单位是Hz。
        public let sampleRate: UInt64

        /// 输出流音频声道数，取值范围[1,2]，1表示混流输出音频为单声道，2表示混流输出音频为双声道。
        public let channel: UInt64

        /// 输出流音频码率。取值范围[8,500]，单位为kbps。
        public let bitRate: UInt64

        /// 输出流音频编码类型，取值范围[0, 1, 2]，0为LC-AAC，1为HE-AAC，2为HE-AACv2。默认值为0。当音频编码设置为HE-AACv2时，只支持输出流音频声道数为双声道。HE-AAC和HE-AACv2支持的输出流音频采样率范围为[48000, 44100, 32000, 24000, 16000]。
        public let codec: UInt64?

        public init(sampleRate: UInt64, channel: UInt64, bitRate: UInt64, codec: UInt64? = nil) {
            self.sampleRate = sampleRate
            self.channel = channel
            self.bitRate = bitRate
            self.codec = codec
        }

        enum CodingKeys: String, CodingKey {
            case sampleRate = "SampleRate"
            case channel = "Channel"
            case bitRate = "BitRate"
            case codec = "Codec"
        }
    }

    /// 录制音频转码参数。
    public struct AudioParams: TCInputModel {
        /// 音频采样率:
        /// 1：48000Hz（默认）;
        /// 2：44100Hz
        /// 3：16000Hz。
        public let sampleRate: UInt64

        /// 声道数:
        /// 1：单声道;
        /// 2：双声道（默认）。
        public let channel: UInt64

        /// 音频码率: 取值范围[32000, 128000] ，单位bps，默认64000bps。
        public let bitRate: UInt64

        public init(sampleRate: UInt64, channel: UInt64, bitRate: UInt64) {
            self.sampleRate = sampleRate
            self.channel = channel
            self.bitRate = bitRate
        }

        enum CodingKeys: String, CodingKey {
            case sampleRate = "SampleRate"
            case channel = "Channel"
            case bitRate = "BitRate"
        }
    }

    /// 第三方云存储的账号信息。
    public struct CloudStorage: TCInputModel {
        /// 第三方云储存的供应商:
        /// 0：腾讯云存储 COS，暂不支持其他家。
        public let vendor: UInt64

        /// 第三方云存储的地域信息。
        public let region: String

        /// 第三方存储桶信息。
        public let bucket: String

        /// 第三方存储的access_key账号信息。
        public let accessKey: String

        /// 第三方存储的secret_key账号信息。
        public let secretKey: String

        /// 第三方云存储bucket 的指定位置，由字符串数组组成。合法的字符串范围a~z,A~Z,0~9,'_'和'-'，举个例子，录制文件xxx.m3u8在 ["prefix1", "prefix2"]作用下，会变成prefix1/prefix2/TaskId/xxx.m3u8。
        public let fileNamePrefix: [String]?

        public init(vendor: UInt64, region: String, bucket: String, accessKey: String, secretKey: String, fileNamePrefix: [String]? = nil) {
            self.vendor = vendor
            self.region = region
            self.bucket = bucket
            self.accessKey = accessKey
            self.secretKey = secretKey
            self.fileNamePrefix = fileNamePrefix
        }

        enum CodingKeys: String, CodingKey {
            case vendor = "Vendor"
            case region = "Region"
            case bucket = "Bucket"
            case accessKey = "AccessKey"
            case secretKey = "SecretKey"
            case fileNamePrefix = "FileNamePrefix"
        }
    }

    /// 点播相关参数。
    public struct CloudVod: TCInputModel {
        /// 腾讯云点播相关参数。
        public let tencentVod: TencentVod?

        public init(tencentVod: TencentVod? = nil) {
            self.tencentVod = tencentVod
        }

        enum CodingKeys: String, CodingKey {
            case tencentVod = "TencentVod"
        }
    }

    /// MCU混流输出流编码参数
    public struct EncodeParams: TCInputModel {
        /// 混流-输出流音频采样率。取值为[48000, 44100, 32000, 24000, 16000, 8000]，单位是Hz。
        public let audioSampleRate: UInt64

        /// 混流-输出流音频码率。取值范围[8,500]，单位为kbps。
        public let audioBitrate: UInt64

        /// 混流-输出流音频声道数，取值范围[1,2]，1表示混流输出音频为单声道，2表示混流输出音频为双声道。
        public let audioChannels: UInt64

        /// 混流-输出流宽，音视频输出时必填。取值范围[0,1920]，单位为像素值。
        public let videoWidth: UInt64?

        /// 混流-输出流高，音视频输出时必填。取值范围[0,1080]，单位为像素值。
        public let videoHeight: UInt64?

        /// 混流-输出流码率，音视频输出时必填。取值范围[1,10000]，单位为kbps。
        public let videoBitrate: UInt64?

        /// 混流-输出流帧率，音视频输出时必填。取值范围[1,60]，表示混流的输出帧率可选范围为1到60fps。
        public let videoFramerate: UInt64?

        /// 混流-输出流gop，音视频输出时必填。取值范围[1,5]，单位为秒。
        public let videoGop: UInt64?

        /// 混流-输出流背景色，取值是十进制整数。常用的颜色有：
        /// 红色：0xff0000，对应的十进制整数是16724736。
        /// 黄色：0xffff00。对应的十进制整数是16776960。
        /// 绿色：0x33cc00。对应的十进制整数是3394560。
        /// 蓝色：0x0066ff。对应的十进制整数是26367。
        /// 黑色：0x000000。对应的十进制整数是0。
        /// 白色：0xFFFFFF。对应的十进制整数是16777215。
        /// 灰色：0x999999。对应的十进制整数是10066329。
        public let backgroundColor: UInt64?

        /// 混流-输出流背景图片，取值为实时音视频控制台上传的图片ID。
        public let backgroundImageId: UInt64?

        /// 混流-输出流音频编码类型，取值范围[0,1, 2]，0为LC-AAC，1为HE-AAC，2为HE-AACv2。默认值为0。当音频编码设置为HE-AACv2时，只支持输出流音频声道数为双声道。HE-AAC和HE-AACv2支持的输出流音频采样率范围为[48000, 44100, 32000, 24000, 16000]
        public let audioCodec: UInt64?

        /// 混流-输出流背景图片URL地址，支持png、jpg、jpeg、bmp格式，暂不支持透明通道。URL链接长度限制为512字节。BackgroundImageUrl和BackgroundImageId参数都填时，以BackgroundImageUrl为准。图片大小限制不超过2MB。
        public let backgroundImageUrl: String?

        public init(audioSampleRate: UInt64, audioBitrate: UInt64, audioChannels: UInt64, videoWidth: UInt64? = nil, videoHeight: UInt64? = nil, videoBitrate: UInt64? = nil, videoFramerate: UInt64? = nil, videoGop: UInt64? = nil, backgroundColor: UInt64? = nil, backgroundImageId: UInt64? = nil, audioCodec: UInt64? = nil, backgroundImageUrl: String? = nil) {
            self.audioSampleRate = audioSampleRate
            self.audioBitrate = audioBitrate
            self.audioChannels = audioChannels
            self.videoWidth = videoWidth
            self.videoHeight = videoHeight
            self.videoBitrate = videoBitrate
            self.videoFramerate = videoFramerate
            self.videoGop = videoGop
            self.backgroundColor = backgroundColor
            self.backgroundImageId = backgroundImageId
            self.audioCodec = audioCodec
            self.backgroundImageUrl = backgroundImageUrl
        }

        enum CodingKeys: String, CodingKey {
            case audioSampleRate = "AudioSampleRate"
            case audioBitrate = "AudioBitrate"
            case audioChannels = "AudioChannels"
            case videoWidth = "VideoWidth"
            case videoHeight = "VideoHeight"
            case videoBitrate = "VideoBitrate"
            case videoFramerate = "VideoFramerate"
            case videoGop = "VideoGop"
            case backgroundColor = "BackgroundColor"
            case backgroundImageId = "BackgroundImageId"
            case audioCodec = "AudioCodec"
            case backgroundImageUrl = "BackgroundImageUrl"
        }
    }

    /// sdk或webrtc的事件列表。
    public struct EventList: TCOutputModel {
        /// 数据内容
        public let content: [EventMessage]

        /// 发送端的userId
        public let peerId: String

        enum CodingKeys: String, CodingKey {
            case content = "Content"
            case peerId = "PeerId"
        }
    }

    /// 事件信息，包括，事件时间戳，事件ID,
    public struct EventMessage: TCOutputModel {
        /// 视频流类型：
        /// 0：与视频无关的事件；
        /// 2：视频为大画面；
        /// 3：视频为小画面；
        /// 7：视频为旁路画面；
        public let type: UInt64

        /// 事件上报的时间戳，unix时间（1589891188801ms)
        public let time: UInt64

        /// 事件Id：分为sdk的事件和webrtc的事件，详情见：附录/事件 ID 映射表：https://cloud.tencent.com/document/product/647/44916
        public let eventId: UInt64

        /// 事件的第一个参数，如视频分辨率宽
        public let paramOne: Int64

        /// 事件的第二个参数，如视频分辨率高
        public let paramTwo: Int64

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case time = "Time"
            case eventId = "EventId"
            case paramOne = "ParamOne"
            case paramTwo = "ParamTwo"
        }
    }

    /// MCU混流布局参数
    public struct LayoutParams: TCInputModel {
        /// 混流布局模板ID，0为悬浮模板(默认);1为九宫格模板;2为屏幕分享模板;3为画中画模板;4为自定义模板。
        public let template: UInt64?

        /// 屏幕分享模板、悬浮模板、画中画模板中有效，代表大画面对应的用户ID。
        public let mainVideoUserId: String?

        /// 屏幕分享模板、悬浮模板、画中画模板中有效，代表大画面对应的流类型，0为摄像头，1为屏幕分享。左侧大画面为web用户时此值填0。
        public let mainVideoStreamType: UInt64?

        /// 画中画模板中有效，代表小画面的布局参数。
        public let smallVideoLayoutParams: SmallVideoLayoutParams?

        /// 屏幕分享模板有效。设置为1时代表大画面居右，小画面居左布局。默认为0。
        public let mainVideoRightAlign: UInt64?

        /// 指定混视频的用户ID列表。设置此参数后，输出流混合此参数中包含用户的音视频，以及其他用户的纯音频。悬浮模板、九宫格、屏幕分享模板有效，最多可设置16个用户。
        public let mixVideoUids: [String]?

        /// 自定义模板中有效，指定用户视频在混合画面中的位置。
        public let presetLayoutConfig: [PresetLayoutConfig]?

        /// 自定义模板中有效，设置为1时代表启用占位图功能，0时代表不启用占位图功能，默认为0。启用占位图功能时，在预设位置的用户没有上行视频时可显示对应的占位图。
        public let placeHolderMode: UInt64?

        /// 悬浮模板、九宫格、屏幕分享模板生效，用于控制纯音频上行是否占用画面布局位置。设置为0是代表后台默认处理方式，悬浮小画面占布局位置，九宫格画面占布局位置、屏幕分享小画面不占布局位置；设置为1时代表纯音频上行占布局位置；设置为2时代表纯音频上行不占布局位置。默认为0。
        public let pureAudioHoldPlaceMode: UInt64?

        /// 水印参数。
        public let waterMarkParams: WaterMarkParams?

        public init(template: UInt64? = nil, mainVideoUserId: String? = nil, mainVideoStreamType: UInt64? = nil, smallVideoLayoutParams: SmallVideoLayoutParams? = nil, mainVideoRightAlign: UInt64? = nil, mixVideoUids: [String]? = nil, presetLayoutConfig: [PresetLayoutConfig]? = nil, placeHolderMode: UInt64? = nil, pureAudioHoldPlaceMode: UInt64? = nil, waterMarkParams: WaterMarkParams? = nil) {
            self.template = template
            self.mainVideoUserId = mainVideoUserId
            self.mainVideoStreamType = mainVideoStreamType
            self.smallVideoLayoutParams = smallVideoLayoutParams
            self.mainVideoRightAlign = mainVideoRightAlign
            self.mixVideoUids = mixVideoUids
            self.presetLayoutConfig = presetLayoutConfig
            self.placeHolderMode = placeHolderMode
            self.pureAudioHoldPlaceMode = pureAudioHoldPlaceMode
            self.waterMarkParams = waterMarkParams
        }

        enum CodingKeys: String, CodingKey {
            case template = "Template"
            case mainVideoUserId = "MainVideoUserId"
            case mainVideoStreamType = "MainVideoStreamType"
            case smallVideoLayoutParams = "SmallVideoLayoutParams"
            case mainVideoRightAlign = "MainVideoRightAlign"
            case mixVideoUids = "MixVideoUids"
            case presetLayoutConfig = "PresetLayoutConfig"
            case placeHolderMode = "PlaceHolderMode"
            case pureAudioHoldPlaceMode = "PureAudioHoldPlaceMode"
            case waterMarkParams = "WaterMarkParams"
        }
    }

    /// 指定动态布局中悬浮布局和屏幕分享布局的大画面信息，只在悬浮布局和屏幕分享布局有效。
    public struct MaxVideoUser: TCInputModel {
        /// 用户媒体流参数。
        public let userMediaStream: UserMediaStream

        public init(userMediaStream: UserMediaStream) {
            self.userMediaStream = userMediaStream
        }

        enum CodingKeys: String, CodingKey {
            case userMediaStream = "UserMediaStream"
        }
    }

    /// 混流转推的音频相关参数。
    public struct McuAudioParams: TCInputModel {
        /// 音频编码参数。
        public let audioEncode: AudioEncode?

        /// 音频用户白名单，start时，为空或不填表示混所有主播音频，填具体值表示混指定主播音频；update时，不填表示不更新，为空表示更新为混所有主播音频，填具体值表示更新为混指定主播音频。
        /// 使用黑白名单时，黑白名单必须同时填写。都不填写时表示不更新。同一个用户同时在黑白名单时，以黑名单为主。
        public let subscribeAudioList: [McuUserInfoParams]?

        /// 音频用户黑名单，为空或不填表示无黑名单，填具体值表示不混指定主播音频。update时，不填表示不更新，为空表示更新为清空黑名单，填具体值表示更新为不混指定主播音频。
        /// 使用黑白名单时，黑白名单必须同时填写。都不填写时表示不更新。同一个用户同时在黑白名单时，以黑名单为主。
        public let unSubscribeAudioList: [McuUserInfoParams]?

        public init(audioEncode: AudioEncode? = nil, subscribeAudioList: [McuUserInfoParams]? = nil, unSubscribeAudioList: [McuUserInfoParams]? = nil) {
            self.audioEncode = audioEncode
            self.subscribeAudioList = subscribeAudioList
            self.unSubscribeAudioList = unSubscribeAudioList
        }

        enum CodingKeys: String, CodingKey {
            case audioEncode = "AudioEncode"
            case subscribeAudioList = "SubscribeAudioList"
            case unSubscribeAudioList = "UnSubscribeAudioList"
        }
    }

    /// 混流自定义裁剪参数
    public struct McuCustomCrop: TCInputModel {
        /// 自定义裁剪起始位置的X偏移，单位为像素值，大于等于0。
        public let locationX: UInt64

        /// 自定义裁剪起始位置的Y偏移，单位为像素值，大于等于0。
        public let locationY: UInt64

        /// 自定义裁剪画面的宽度，单位为像素值，大于0，且LocationX+Width不超过10000
        public let width: UInt64

        /// 自定义裁剪画面的高度，单位为像素值，大于0，且LocationY+Height不超过10000
        public let height: UInt64

        public init(locationX: UInt64, locationY: UInt64, width: UInt64, height: UInt64) {
            self.locationX = locationX
            self.locationY = locationY
            self.width = width
            self.height = height
        }

        enum CodingKeys: String, CodingKey {
            case locationX = "LocationX"
            case locationY = "LocationY"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 回推房间参数。
    public struct McuFeedBackRoomParams: TCInputModel {
        /// 回推房间的RoomId。
        public let roomId: String

        /// 房间类型，必须和回推房间所对应的RoomId类型相同，0为整形房间号，1为字符串房间号。
        public let roomIdType: UInt64

        /// 回推房间使用的UserId(https://cloud.tencent.com/document/product/647/46351#userid)，注意这个userId不能与其他TRTC或者转推服务等已经使用的UserId重复，建议可以把房间ID作为userId的标识的一部分。
        public let userId: String

        /// 回推房间UserId对应的用户签名，相当于登录密码，具体计算方法请参考TRTC计算[UserSig](https://cloud.tencent.com/document/product/647/45910#UserSig)的方案。
        public let userSig: String

        public init(roomId: String, roomIdType: UInt64, userId: String, userSig: String) {
            self.roomId = roomId
            self.roomIdType = roomIdType
            self.userId = userId
            self.userSig = userSig
        }

        enum CodingKeys: String, CodingKey {
            case roomId = "RoomId"
            case roomIdType = "RoomIdType"
            case userId = "UserId"
            case userSig = "UserSig"
        }
    }

    /// 混流布局参数。
    public struct McuLayout: TCInputModel {
        /// 用户媒体流参数。不填时腾讯云后台按照上行主播的进房顺序自动填充。
        public let userMediaStream: UserMediaStream?

        /// 子画面在输出时的宽度，单位为像素值，不填默认为0。
        public let imageWidth: UInt64?

        /// 子画面在输出时的高度，单位为像素值，不填默认为0。
        public let imageHeight: UInt64?

        /// 子画面在输出时的X偏移，单位为像素值，LocationX与ImageWidth之和不能超过混流输出的总宽度，不填默认为0。
        public let locationX: UInt64?

        /// 子画面在输出时的Y偏移，单位为像素值，LocationY与ImageHeight之和不能超过混流输出的总高度，不填默认为0。
        public let locationY: UInt64?

        /// 子画面在输出时的层级，不填默认为0。
        public let zOrder: UInt64?

        /// 子画面在输出时的显示模式：0为裁剪，1为缩放，2为缩放并显示黑底。不填默认为0。
        public let renderMode: UInt64?

        /// 子画面的背景颜色，常用的颜色有：
        /// 红色：0xcc0033。
        /// 黄色：0xcc9900。
        /// 绿色：0xcccc33。
        /// 蓝色：0x99CCFF。
        /// 黑色：0x000000。
        /// 白色：0xFFFFFF。
        /// 灰色：0x999999。
        public let backGroundColor: String?

        /// 子画面的背景图url，填写该参数，当用户关闭摄像头或未进入TRTC房间时，会在布局位置填充为指定图片。若指定图片与布局位置尺寸比例不一致，则会对图片进行拉伸处理，优先级高于BackGroundColor。
        public let backgroundImageUrl: String?

        /// 客户自定义裁剪，针对原始输入流裁剪
        public let customCrop: McuCustomCrop?

        public init(userMediaStream: UserMediaStream? = nil, imageWidth: UInt64? = nil, imageHeight: UInt64? = nil, locationX: UInt64? = nil, locationY: UInt64? = nil, zOrder: UInt64? = nil, renderMode: UInt64? = nil, backGroundColor: String? = nil, backgroundImageUrl: String? = nil, customCrop: McuCustomCrop? = nil) {
            self.userMediaStream = userMediaStream
            self.imageWidth = imageWidth
            self.imageHeight = imageHeight
            self.locationX = locationX
            self.locationY = locationY
            self.zOrder = zOrder
            self.renderMode = renderMode
            self.backGroundColor = backGroundColor
            self.backgroundImageUrl = backgroundImageUrl
            self.customCrop = customCrop
        }

        enum CodingKeys: String, CodingKey {
            case userMediaStream = "UserMediaStream"
            case imageWidth = "ImageWidth"
            case imageHeight = "ImageHeight"
            case locationX = "LocationX"
            case locationY = "LocationY"
            case zOrder = "ZOrder"
            case renderMode = "RenderMode"
            case backGroundColor = "BackGroundColor"
            case backgroundImageUrl = "BackgroundImageUrl"
            case customCrop = "CustomCrop"
        }
    }

    /// 混流布局参数。
    public struct McuLayoutParams: TCInputModel {
        /// 布局模式：动态布局（1：悬浮布局（默认），2：屏幕分享布局，3：九宫格布局），静态布局（4：自定义布局）。
        public let mixLayoutMode: UInt64?

        /// 纯音频上行是否占布局位置，只在动态布局中有效。0表示纯音频不占布局位置，1表示纯音频占布局位置，不填默认为0。
        public let pureAudioHoldPlaceMode: UInt64?

        /// 自定义模板中有效，指定用户视频在混合画面中的位置。
        public let mixLayoutList: [McuLayout]?

        /// 指定动态布局中悬浮布局和屏幕分享布局的大画面信息，只在悬浮布局和屏幕分享布局有效。
        public let maxVideoUser: MaxVideoUser?

        public init(mixLayoutMode: UInt64? = nil, pureAudioHoldPlaceMode: UInt64? = nil, mixLayoutList: [McuLayout]? = nil, maxVideoUser: MaxVideoUser? = nil) {
            self.mixLayoutMode = mixLayoutMode
            self.pureAudioHoldPlaceMode = pureAudioHoldPlaceMode
            self.mixLayoutList = mixLayoutList
            self.maxVideoUser = maxVideoUser
        }

        enum CodingKeys: String, CodingKey {
            case mixLayoutMode = "MixLayoutMode"
            case pureAudioHoldPlaceMode = "PureAudioHoldPlaceMode"
            case mixLayoutList = "MixLayoutList"
            case maxVideoUser = "MaxVideoUser"
        }
    }

    /// 音量布局SEI参数，可以自定义AppData和PayloadType类型。
    /// 该参数内容可以为空，表示携带默认的音量布局SEI。
    public struct McuLayoutVolume: TCInputModel {
        /// AppData的内容，会被写入自定义SEI中的app_data字段，长度需小于4096。
        public let appData: String?

        /// SEI消息的payload_type，默认值100，取值范围100-254（244除外，244为我们内部自定义的时间戳SEI）
        public let payloadType: UInt64?

        public init(appData: String? = nil, payloadType: UInt64? = nil) {
            self.appData = appData
            self.payloadType = payloadType
        }

        enum CodingKeys: String, CodingKey {
            case appData = "AppData"
            case payloadType = "PayloadType"
        }
    }

    /// 自定义透传SEI
    public struct McuPassThrough: TCInputModel {
        /// 透传SEI的payload内容。
        public let payloadContent: String

        /// SEI消息的payload_type，取值范围5、100-254（244除外，244为我们内部自定义的时间戳SEI）。
        public let payloadType: UInt64

        /// PayloadType为5，PayloadUuid必须填写。PayloadType不是5时，不需要填写，填写会被后台忽略。该值必须是32长度的十六进制。
        public let payloadUuid: String?

        public init(payloadContent: String, payloadType: UInt64, payloadUuid: String? = nil) {
            self.payloadContent = payloadContent
            self.payloadType = payloadType
            self.payloadUuid = payloadUuid
        }

        enum CodingKeys: String, CodingKey {
            case payloadContent = "PayloadContent"
            case payloadType = "PayloadType"
            case payloadUuid = "PayloadUuid"
        }
    }

    /// 转推参数。
    public struct McuPublishCdnParam: TCInputModel {
        /// CDN转推URL。
        public let publishCdnUrl: String

        /// 是否是腾讯云CDN，0为转推非腾讯云CDN，1为转推腾讯CDN，不携带该参数默认为1。注意：为避免误产生转推费用，该参数建议明确填写。转推非腾讯云CDN时会产生转推费用，详情参见接口文档说明。
        public let isTencentCdn: UInt64?

        public init(publishCdnUrl: String, isTencentCdn: UInt64? = nil) {
            self.publishCdnUrl = publishCdnUrl
            self.isTencentCdn = isTencentCdn
        }

        enum CodingKeys: String, CodingKey {
            case publishCdnUrl = "PublishCdnUrl"
            case isTencentCdn = "IsTencentCdn"
        }
    }

    /// 混流SEI参数
    public struct McuSeiParams: TCInputModel {
        /// 音量布局SEI
        public let layoutVolume: McuLayoutVolume?

        /// 透传SEI
        public let passThrough: McuPassThrough?

        public init(layoutVolume: McuLayoutVolume? = nil, passThrough: McuPassThrough? = nil) {
            self.layoutVolume = layoutVolume
            self.passThrough = passThrough
        }

        enum CodingKeys: String, CodingKey {
            case layoutVolume = "LayoutVolume"
            case passThrough = "PassThrough"
        }
    }

    /// 混流用户参数
    public struct McuUserInfoParams: TCInputModel {
        /// 用户参数。
        public let userInfo: MixUserInfo

        public init(userInfo: MixUserInfo) {
            self.userInfo = userInfo
        }

        enum CodingKeys: String, CodingKey {
            case userInfo = "UserInfo"
        }
    }

    /// 混流转推的视频相关参数。
    public struct McuVideoParams: TCInputModel {
        /// 输出流视频编码参数。
        public let videoEncode: VideoEncode?

        /// 混流布局参数。
        public let layoutParams: McuLayoutParams?

        /// 整个画布背景颜色，常用的颜色有：
        /// 红色：0xcc0033。
        /// 黄色：0xcc9900。
        /// 绿色：0xcccc33。
        /// 蓝色：0x99CCFF。
        /// 黑色：0x000000。
        /// 白色：0xFFFFFF。
        /// 灰色：0x999999。
        public let backGroundColor: String?

        /// 整个画布的背景图url，优先级高于BackGroundColor。
        public let backgroundImageUrl: String?

        /// 混流布局的水印参数。
        public let waterMarkList: [McuWaterMarkParams]?

        public init(videoEncode: VideoEncode? = nil, layoutParams: McuLayoutParams? = nil, backGroundColor: String? = nil, backgroundImageUrl: String? = nil, waterMarkList: [McuWaterMarkParams]? = nil) {
            self.videoEncode = videoEncode
            self.layoutParams = layoutParams
            self.backGroundColor = backGroundColor
            self.backgroundImageUrl = backgroundImageUrl
            self.waterMarkList = waterMarkList
        }

        enum CodingKeys: String, CodingKey {
            case videoEncode = "VideoEncode"
            case layoutParams = "LayoutParams"
            case backGroundColor = "BackGroundColor"
            case backgroundImageUrl = "BackgroundImageUrl"
            case waterMarkList = "WaterMarkList"
        }
    }

    /// 图片水印参数。
    public struct McuWaterMarkImage: TCInputModel {
        /// 水印图片URL地址，支持png、jpg、jpeg格式。图片大小限制不超过5MB。
        public let waterMarkUrl: String

        /// 水印在输出时的宽。单位为像素值。
        public let waterMarkWidth: UInt64

        /// 水印在输出时的高。单位为像素值。
        public let waterMarkHeight: UInt64

        /// 水印在输出时的X偏移。单位为像素值。
        public let locationX: UInt64

        /// 水印在输出时的Y偏移。单位为像素值。
        public let locationY: UInt64

        /// 水印在输出时的层级，不填默认为0。
        public let zOrder: UInt64?

        public init(waterMarkUrl: String, waterMarkWidth: UInt64, waterMarkHeight: UInt64, locationX: UInt64, locationY: UInt64, zOrder: UInt64? = nil) {
            self.waterMarkUrl = waterMarkUrl
            self.waterMarkWidth = waterMarkWidth
            self.waterMarkHeight = waterMarkHeight
            self.locationX = locationX
            self.locationY = locationY
            self.zOrder = zOrder
        }

        enum CodingKeys: String, CodingKey {
            case waterMarkUrl = "WaterMarkUrl"
            case waterMarkWidth = "WaterMarkWidth"
            case waterMarkHeight = "WaterMarkHeight"
            case locationX = "LocationX"
            case locationY = "LocationY"
            case zOrder = "ZOrder"
        }
    }

    /// 水印参数。
    public struct McuWaterMarkParams: TCInputModel {
        /// 水印类型，0为图片（默认）。
        public let waterMarkType: UInt64?

        /// 图片水印参数。WaterMarkType为0指定。
        public let waterMarkImage: McuWaterMarkImage?

        public init(waterMarkType: UInt64? = nil, waterMarkImage: McuWaterMarkImage? = nil) {
            self.waterMarkType = waterMarkType
            self.waterMarkImage = waterMarkImage
        }

        enum CodingKeys: String, CodingKey {
            case waterMarkType = "WaterMarkType"
            case waterMarkImage = "WaterMarkImage"
        }
    }

    /// 用户自定义混流布局参数列表。
    public struct MixLayout: TCInputModel {
        /// 画布上该画面左上角的 y 轴坐标，取值范围 [0, 1920]，不能超过画布的高。
        public let top: UInt64

        /// 画布上该画面左上角的 x 轴坐标，取值范围 [0, 1920]，不能超过画布的宽。
        public let left: UInt64

        /// 画布上该画面宽度的相对值，取值范围 [0, 1920]，与Left相加不应超过画布的宽。
        public let width: UInt64

        /// 画布上该画面高度的相对值，取值范围 [0, 1920]，与Top相加不应超过画布的高。
        public let height: UInt64

        /// 字符串内容为待显示在该画面的主播对应的UserId，如果不指定，会按照主播加入房间的顺序匹配。
        public let userId: String?

        /// 画布的透明度值，取值范围[0, 255]。0表示不透明，255表示全透明。默认值为0。
        public let alpha: UInt64?

        /// 0 ：拉伸模式，这个模式下整个视频内容会全部显示，并填满子画面，在源视频和目的视频宽高比不一致的时候，画面不会缺少内容，但是画面可能产生形变；
        /// 1 ：剪裁模式（默认），这个模式下会严格按照目的视频的宽高比对源视频剪裁之后再拉伸，并填满子画面画布，在源视频和目的视频宽高比不一致的时候，画面保持不变形，但是会被剪裁；
        /// 2 ：填黑模式，这个模式下会严格保持源视频的宽高比进行等比缩放，在源视频和目的视频宽高比不一致的时候，画面的上下侧边缘或者左右侧边缘会露出子画面画布的背景；
        /// 3 ：智能拉伸模式，这个模式类似剪裁模式，区别是在源视频和目的视频宽高比不一致的时候，限制了最大剪裁比例为画面的宽度或者高度的20%；
        public let renderMode: UInt64?

        /// 对应订阅流的主辅路标识：
        /// 0：主流（默认）；
        /// 1：辅流；
        public let mediaId: UInt64?

        /// 该画布的图层顺序, 这个值越小表示图层越靠后。默认值为0。
        public let imageLayer: UInt64?

        /// 下载的url地址， 只支持jpg， png，大小限制不超过5M，宽高比不一致的处理方案同 RenderMode。
        public let subBackgroundImage: String?

        public init(top: UInt64, left: UInt64, width: UInt64, height: UInt64, userId: String? = nil, alpha: UInt64? = nil, renderMode: UInt64? = nil, mediaId: UInt64? = nil, imageLayer: UInt64? = nil, subBackgroundImage: String? = nil) {
            self.top = top
            self.left = left
            self.width = width
            self.height = height
            self.userId = userId
            self.alpha = alpha
            self.renderMode = renderMode
            self.mediaId = mediaId
            self.imageLayer = imageLayer
            self.subBackgroundImage = subBackgroundImage
        }

        enum CodingKeys: String, CodingKey {
            case top = "Top"
            case left = "Left"
            case width = "Width"
            case height = "Height"
            case userId = "UserId"
            case alpha = "Alpha"
            case renderMode = "RenderMode"
            case mediaId = "MediaId"
            case imageLayer = "ImageLayer"
            case subBackgroundImage = "SubBackgroundImage"
        }
    }

    /// 录制的混流布局参数。
    public struct MixLayoutParams: TCInputModel {
        /// 布局模式:
        /// 1：悬浮布局；
        /// 2：屏幕分享布局；
        /// 3：九宫格布局（默认）；
        /// 4：自定义布局；
        /// 悬浮布局：默认第一个进入房间的主播（也可以指定一个主播）的视频画面会铺满整个屏幕。其他主播的视频画面从左下角开始依次按照进房顺序水平排列，显示为小画面，小画面悬浮于大画面之上。当画面数量小于等于17个时，每行4个（4 x 4排列）。当画面数量大于17个时，重新布局小画面为每行5个（5 x 5）排列。最多支持25个画面，如果用户只发送音频，仍然会占用画面位置。
        /// 屏幕分享布局：指定一个主播在屏幕左侧的大画面位置（如果不指定，那么大画面位置为背景色），其他主播自上而下依次垂直排列于右侧。当画面数量少于17个的时候，右侧每列最多8人，最多占据两列。当画面数量多于17个的时候，超过17个画面的主播从左下角开始依次水平排列。最多支持25个画面，如果主播只发送音频，仍然会占用画面位置。
        /// 九宫格布局：根据主播的数量自动调整每个画面的大小，每个主播的画面大小一致，最多支持25个画面。
        /// 自定义布局：根据需要在MixLayoutList内定制每个主播画面的布局。
        public let mixLayoutMode: UInt64

        /// 如果MixLayoutMode 选择为4自定义布局模式的话，设置此参数为每个主播所对应的布局画面的详细信息，最大不超过25个。
        public let mixLayoutList: [MixLayout]?

        /// 录制背景颜色，RGB的颜色表的16进制表示，每个颜色通过8bit长度标识，默认为黑色。比如橙色对应的RGB为 R:255 G:165 B:0, 那么对应的字符串描述为#FFA500，格式规范：‘#‘开头，后面跟固定RGB的颜色值
        public let backGroundColor: String?

        /// 在布局模式为1：悬浮布局和 2：屏幕分享布局时，设定为显示大视频画面的UserId。不填的话：悬浮布局默认是第一个进房间的主播，屏幕分享布局默认是背景色
        public let maxResolutionUserId: String?

        /// 主辅路标识，
        /// 0：主流（默认）；
        /// 1：辅流（屏幕分享）；
        /// 这个位置的MediaId代表的是对应MaxResolutionUserId的主辅路，MixLayoutList内代表的是自定义用户的主辅路。
        public let mediaId: UInt64?

        /// 下载的url地址， 只支持jpg， png，大小限制不超过5M。
        public let backgroundImageUrl: String?

        /// 设置为1时代表启用占位图功能，0时代表不启用占位图功能，默认为0。启用占位图功能时，在预设位置的用户没有上行视频时可显示对应的占位图。
        public let placeHolderMode: UInt64?

        /// 背景画面宽高比不一致的时候处理方案，与MixLayoufList定义的RenderMode一致。
        public let backgroundImageRenderMode: UInt64?

        /// 子画面占位图url地址， 只支持jpg， png，大小限制不超过5M，宽高比不一致的处理方案同 RenderMode。
        public let defaultSubBackgroundImage: String?

        /// 水印布局参数， 最多支持25个。
        public let waterMarkList: [WaterMark]?

        /// 模板布局下，背景画面宽高比不一致的时候处理方案。自定义布局不生效，与MixLayoufList定义的RenderMode一致。
        public let renderMode: UInt64?

        /// 屏幕分享模板有效。设置为1时代表大画面居右，小画面居左布局。默认为0。
        public let maxResolutionUserAlign: UInt64?

        public init(mixLayoutMode: UInt64, mixLayoutList: [MixLayout]? = nil, backGroundColor: String? = nil, maxResolutionUserId: String? = nil, mediaId: UInt64? = nil, backgroundImageUrl: String? = nil, placeHolderMode: UInt64? = nil, backgroundImageRenderMode: UInt64? = nil, defaultSubBackgroundImage: String? = nil, waterMarkList: [WaterMark]? = nil, renderMode: UInt64? = nil, maxResolutionUserAlign: UInt64? = nil) {
            self.mixLayoutMode = mixLayoutMode
            self.mixLayoutList = mixLayoutList
            self.backGroundColor = backGroundColor
            self.maxResolutionUserId = maxResolutionUserId
            self.mediaId = mediaId
            self.backgroundImageUrl = backgroundImageUrl
            self.placeHolderMode = placeHolderMode
            self.backgroundImageRenderMode = backgroundImageRenderMode
            self.defaultSubBackgroundImage = defaultSubBackgroundImage
            self.waterMarkList = waterMarkList
            self.renderMode = renderMode
            self.maxResolutionUserAlign = maxResolutionUserAlign
        }

        enum CodingKeys: String, CodingKey {
            case mixLayoutMode = "MixLayoutMode"
            case mixLayoutList = "MixLayoutList"
            case backGroundColor = "BackGroundColor"
            case maxResolutionUserId = "MaxResolutionUserId"
            case mediaId = "MediaId"
            case backgroundImageUrl = "BackgroundImageUrl"
            case placeHolderMode = "PlaceHolderMode"
            case backgroundImageRenderMode = "BackgroundImageRenderMode"
            case defaultSubBackgroundImage = "DefaultSubBackgroundImage"
            case waterMarkList = "WaterMarkList"
            case renderMode = "RenderMode"
            case maxResolutionUserAlign = "MaxResolutionUserAlign"
        }
    }

    /// 录制的音视频转码参数。
    public struct MixTranscodeParams: TCInputModel {
        /// 录制视频转码参数，注意如果设置了这个参数，那么里面的字段都是必填的，没有默认值，如果不填这个参数，那么取值为默认值。
        public let videoParams: VideoParams?

        /// 录制音频转码参数，注意如果设置了这个参数，那么里面的字段都是必填的，没有默认值，如果不填这个参数，那么取值为默认值。
        public let audioParams: AudioParams?

        public init(videoParams: VideoParams? = nil, audioParams: AudioParams? = nil) {
            self.videoParams = videoParams
            self.audioParams = audioParams
        }

        enum CodingKeys: String, CodingKey {
            case videoParams = "VideoParams"
            case audioParams = "AudioParams"
        }
    }

    /// TRTC用户参数。
    public struct MixUserInfo: TCInputModel {
        /// 用户ID。
        public let userId: String

        /// 动态布局时房间信息必须和主房间信息保持一致，自定义布局时房间信息必须和MixLayoutList中对应用户的房间信息保持一致，不填时默认与主房间信息一致。
        public let roomId: String?

        /// 房间号类型，0为整形房间号，1为字符串房间号。
        public let roomIdType: UInt64?

        public init(userId: String, roomId: String? = nil, roomIdType: UInt64? = nil) {
            self.userId = userId
            self.roomId = roomId
            self.roomIdType = roomIdType
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case roomId = "RoomId"
            case roomIdType = "RoomIdType"
        }
    }

    /// 旁路转码时长的查询结果
    public struct OneSdkAppIdTranscodeTimeUsagesInfo: TCOutputModel {
        /// 旁路转码时长查询结果数组
        public let sdkAppIdTranscodeTimeUsages: [SdkAppIdTrtcMcuTranscodeTimeUsage]

        /// 查询记录数量
        public let totalNum: UInt64

        /// 所查询的应用ID，可能值为:1-应用的应用ID，2-total，显示为total则表示查询的是所有应用的用量合计值。
        public let sdkAppId: String

        enum CodingKeys: String, CodingKey {
            case sdkAppIdTranscodeTimeUsages = "SdkAppIdTranscodeTimeUsages"
            case totalNum = "TotalNum"
            case sdkAppId = "SdkAppId"
        }
    }

    /// MCU混流的输出参数
    public struct OutputParams: TCInputModel {
        /// 直播流 ID，由用户自定义设置，该流 ID 不能与用户旁路的流 ID 相同。
        public let streamId: String

        /// 取值范围[0,1]， 填0：直播流为音视频(默认); 填1：直播流为纯音频
        public let pureAudioStream: UInt64?

        /// 自定义录制文件名称前缀。请先在实时音视频控制台开通录制功能，https://cloud.tencent.com/document/product/647/50768。
        /// 【注意】该方式仅对旧版云端录制功能的应用生效，新版云端录制功能的应用请用接口CreateCloudRecording发起录制。新、旧云端录制类型判断方式请见：https://cloud.tencent.com/document/product/647/50768#record
        public let recordId: String?

        /// 取值范围[0,1]，填0无实际含义; 填1：指定录制文件格式为mp3。此参数不建议使用，建议在实时音视频控制台配置纯音频录制模板。
        public let recordAudioOnly: UInt64?

        public init(streamId: String, pureAudioStream: UInt64? = nil, recordId: String? = nil, recordAudioOnly: UInt64? = nil) {
            self.streamId = streamId
            self.pureAudioStream = pureAudioStream
            self.recordId = recordId
            self.recordAudioOnly = recordAudioOnly
        }

        enum CodingKeys: String, CodingKey {
            case streamId = "StreamId"
            case pureAudioStream = "PureAudioStream"
            case recordId = "RecordId"
            case recordAudioOnly = "RecordAudioOnly"
        }
    }

    /// 图片列表信息
    public struct PictureInfo: TCOutputModel {
        /// 图片长度
        public let height: UInt64

        /// 图片宽度
        public let width: UInt64

        /// 显示位置x轴方向
        public let xPosition: UInt64

        /// 显示位置y轴方向
        public let yPosition: UInt64

        /// 应用id
        public let sdkAppId: UInt64

        /// 图片id
        public let pictureId: UInt64

        enum CodingKeys: String, CodingKey {
            case height = "Height"
            case width = "Width"
            case xPosition = "XPosition"
            case yPosition = "YPosition"
            case sdkAppId = "SdkAppId"
            case pictureId = "PictureId"
        }
    }

    /// 自定义模板中有效，指定用户视频在混合画面中的位置。
    public struct PresetLayoutConfig: TCInputModel {
        /// 指定显示在该画面上的用户ID。如果不指定用户ID，会按照用户加入房间的顺序自动匹配PresetLayoutConfig中的画面设置。
        public let userId: String?

        /// 当该画面指定用户时，代表用户的流类型。0为摄像头，1为屏幕分享。小画面为web用户时此值填0。
        public let streamType: UInt64?

        /// 该画面在输出时的宽度，单位为像素值，不填默认为0。
        public let imageWidth: UInt64?

        /// 该画面在输出时的高度，单位为像素值，不填默认为0。
        public let imageHeight: UInt64?

        /// 该画面在输出时的X偏移，单位为像素值，LocationX与ImageWidth之和不能超过混流输出的总宽度，不填默认为0。
        public let locationX: UInt64?

        /// 该画面在输出时的Y偏移，单位为像素值，LocationY与ImageHeight之和不能超过混流输出的总高度，不填默认为0。
        public let locationY: UInt64?

        /// 该画面在输出时的层级，不填默认为0。
        public let zOrder: UInt64?

        /// 该画面在输出时的显示模式：0为裁剪，1为缩放，2为缩放并显示黑底。不填默认为0。
        public let renderMode: UInt64?

        /// 该当前位置用户混入的流类型：0为混入音视频，1为只混入视频，2为只混入音频。默认为0，建议配合指定用户ID使用。
        public let mixInputType: UInt64?

        /// 占位图ID。启用占位图功能时，在当前位置的用户没有上行视频时显示占位图。占位图大小不能超过2M，在实时音视频控制台上传并生成，https://cloud.tencent.com/document/product/647/50769
        public let placeImageId: UInt64?

        public init(userId: String? = nil, streamType: UInt64? = nil, imageWidth: UInt64? = nil, imageHeight: UInt64? = nil, locationX: UInt64? = nil, locationY: UInt64? = nil, zOrder: UInt64? = nil, renderMode: UInt64? = nil, mixInputType: UInt64? = nil, placeImageId: UInt64? = nil) {
            self.userId = userId
            self.streamType = streamType
            self.imageWidth = imageWidth
            self.imageHeight = imageHeight
            self.locationX = locationX
            self.locationY = locationY
            self.zOrder = zOrder
            self.renderMode = renderMode
            self.mixInputType = mixInputType
            self.placeImageId = placeImageId
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case streamType = "StreamType"
            case imageWidth = "ImageWidth"
            case imageHeight = "ImageHeight"
            case locationX = "LocationX"
            case locationY = "LocationY"
            case zOrder = "ZOrder"
            case renderMode = "RenderMode"
            case mixInputType = "MixInputType"
            case placeImageId = "PlaceImageId"
        }
    }

    /// 第三方CDN转推参数
    public struct PublishCdnParams: TCInputModel {
        /// 腾讯云直播BizId。
        public let bizId: UInt64

        /// 第三方CDN转推的目的地址，同时只支持转推一个第三方CDN地址。
        public let publishCdnUrls: [String]

        public init(bizId: UInt64, publishCdnUrls: [String]) {
            self.bizId = bizId
            self.publishCdnUrls = publishCdnUrls
        }

        enum CodingKeys: String, CodingKey {
            case bizId = "BizId"
            case publishCdnUrls = "PublishCdnUrls"
        }
    }

    /// Es返回的质量数据
    public struct QualityData: TCOutputModel {
        /// 数据内容
        public let content: [TimeValue]

        /// 用户ID
        public let userId: String

        /// 对端Id,为空时表示上行数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let peerId: String?

        /// 数据类型
        public let dataType: String

        enum CodingKeys: String, CodingKey {
            case content = "Content"
            case userId = "UserId"
            case peerId = "PeerId"
            case dataType = "DataType"
        }
    }

    /// 云端录制控制参数。
    public struct RecordParams: TCInputModel {
        /// 录制模式：
        /// 1：单流录制，分别录制房间的订阅UserId的音频和视频，将录制文件上传至云存储；
        /// 2：混流录制，将房间内订阅UserId的音视频混录成一个音视频文件，将录制文件上传至云存储；
        public let recordMode: UInt64

        /// 房间内持续没有主播的状态超过MaxIdleTime的时长，自动停止录制，单位：秒。默认值为 30 秒，该值需大于等于 5秒，且小于等于 86400秒(24小时)。
        public let maxIdleTime: UInt64?

        /// 录制的媒体流类型：
        /// 0：录制音频+视频流（默认）;
        /// 1：仅录制音频流；
        /// 2：仅录制视频流，
        public let streamType: UInt64?

        /// 指定订阅流白名单或者黑名单。
        public let subscribeStreamUserIds: SubscribeStreamUserIds?

        /// 输出文件的格式，上传到云点播时此参数无效，存储到云点播时请关注TencentVod内的MediaType参数。0：(默认)输出文件为hls格式。1：输出文件格式为hls+mp4。2：输出文件格式为hls+aac 。
        public let outputFormat: UInt64?

        /// 单流录制模式下，用户的音视频是否合并，0：单流音视频不合并（默认）。1：单流音视频合并成一个ts。混流录制此参数无需设置，默认音视频合并。
        public let avMerge: UInt64?

        /// 如果是aac或者mp4文件格式，超过长度限制后，系统会自动拆分视频文件。单位：分钟。默认为1440min（24h），取值范围为1-1440。【单文件限制最大为2G，满足文件大小 >2G 或录制时长度 > 24h任意一个条件，文件都会自动切分】
        /// Hls 格式录制此参数不生效。
        public let maxMediaFileDuration: UInt64?

        public init(recordMode: UInt64, maxIdleTime: UInt64? = nil, streamType: UInt64? = nil, subscribeStreamUserIds: SubscribeStreamUserIds? = nil, outputFormat: UInt64? = nil, avMerge: UInt64? = nil, maxMediaFileDuration: UInt64? = nil) {
            self.recordMode = recordMode
            self.maxIdleTime = maxIdleTime
            self.streamType = streamType
            self.subscribeStreamUserIds = subscribeStreamUserIds
            self.outputFormat = outputFormat
            self.avMerge = avMerge
            self.maxMediaFileDuration = maxMediaFileDuration
        }

        enum CodingKeys: String, CodingKey {
            case recordMode = "RecordMode"
            case maxIdleTime = "MaxIdleTime"
            case streamType = "StreamType"
            case subscribeStreamUserIds = "SubscribeStreamUserIds"
            case outputFormat = "OutputFormat"
            case avMerge = "AvMerge"
            case maxMediaFileDuration = "MaxMediaFileDuration"
        }
    }

    /// 录制的使用信息。
    public struct RecordUsage: TCOutputModel {
        /// 本组数据对应的时间点，格式如:2020-09-07或2020-09-07 00:05:05。
        public let timeKey: String

        /// 视频时长-标清SD，单位：秒。
        public let class1VideoTime: UInt64

        /// 视频时长-高清HD，单位：秒。
        public let class2VideoTime: UInt64

        /// 视频时长-超清HD，单位：秒。
        public let class3VideoTime: UInt64

        /// 语音时长，单位：秒。
        public let audioTime: UInt64

        enum CodingKeys: String, CodingKey {
            case timeKey = "TimeKey"
            case class1VideoTime = "Class1VideoTime"
            case class2VideoTime = "Class2VideoTime"
            case class3VideoTime = "Class3VideoTime"
            case audioTime = "AudioTime"
        }
    }

    /// 房间信息列表
    public struct RoomState: TCOutputModel {
        /// 通话ID（唯一标识一次通话）
        public let commId: String

        /// 房间号
        public let roomString: String

        /// 房间创建时间
        public let createTime: UInt64

        /// 房间销毁时间
        public let destroyTime: UInt64

        /// 房间是否已经结束
        public let isFinished: Bool

        /// 房间创建者Id
        public let userId: String

        enum CodingKeys: String, CodingKey {
            case commId = "CommId"
            case roomString = "RoomString"
            case createTime = "CreateTime"
            case destroyTime = "DestroyTime"
            case isFinished = "IsFinished"
            case userId = "UserId"
        }
    }

    /// 历史规模信息
    public struct ScaleInfomation: TCOutputModel {
        /// 每天开始的时间
        public let time: UInt64

        /// 房间人数，用户重复进入同一个房间为1次
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userNumber: UInt64?

        /// 房间人次，用户每次进入房间为一次
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userCount: UInt64?

        /// sdkappid下一天内的房间数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roomNumbers: UInt64?

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case userNumber = "UserNumber"
            case userCount = "UserCount"
            case roomNumbers = "RoomNumbers"
        }
    }

    /// SdkAppId级别实时音视频的用量数据
    public struct SdkAppIdNewTrtcTimeUsage: TCOutputModel {
        /// SdkAppId的值。
        public let sdkAppId: String

        /// 统计的时间点数据。
        public let trtcTimeUsages: [TrtcTimeNewUsage]

        /// 统计的麦下用量的时间点数据。
        public let audienceTrtcTimeUsages: [TrtcTimeNewUsage]

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case trtcTimeUsages = "TrtcTimeUsages"
            case audienceTrtcTimeUsages = "AudienceTrtcTimeUsages"
        }
    }

    /// SdkAppId级别录制时长数据。
    public struct SdkAppIdRecordUsage: TCOutputModel {
        /// SdkAppId的值。
        public let sdkAppId: String

        /// 统计的时间点数据。
        public let usages: [RecordUsage]

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case usages = "Usages"
        }
    }

    /// 查询旁路转码计费时长。
    /// 查询时间小于等于1天时，返回每5分钟粒度的数据；查询时间大于1天时，返回按天汇总的数据。
    public struct SdkAppIdTrtcMcuTranscodeTimeUsage: TCOutputModel {
        /// 本组数据对应的时间点，格式如：2020-09-07或2020-09-07 00:05:05。
        public let timeKey: String

        /// 语音时长，单位：秒。
        public let audioTime: UInt64

        /// 视频时长-标清SD，单位：秒。
        public let videoTimeSd: UInt64

        /// 视频时长-高清HD，单位：秒。
        public let videoTimeHd: UInt64

        /// 视频时长-全高清FHD，单位：秒。
        public let videoTimeFhd: UInt64

        /// 带宽，单位：Mbps。
        public let flux: Float

        enum CodingKeys: String, CodingKey {
            case timeKey = "TimeKey"
            case audioTime = "AudioTime"
            case videoTimeSd = "VideoTimeSd"
            case videoTimeHd = "VideoTimeHd"
            case videoTimeFhd = "VideoTimeFhd"
            case flux = "Flux"
        }
    }

    /// SeriesInfo类型
    public struct SeriesInfo: TCOutputModel {
        /// 数据列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let columns: [String]?

        /// 数据值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let values: [Int64]?

        enum CodingKeys: String, CodingKey {
            case columns = "Columns"
            case values = "Values"
        }
    }

    /// 单流旁路转推的用户上行信息。
    public struct SingleSubscribeParams: TCInputModel {
        /// 用户媒体流参数。
        public let userMediaStream: UserMediaStream

        public init(userMediaStream: UserMediaStream) {
            self.userMediaStream = userMediaStream
        }

        enum CodingKeys: String, CodingKey {
            case userMediaStream = "UserMediaStream"
        }
    }

    /// 画中画模板中有效，代表小画面的布局参数
    public struct SmallVideoLayoutParams: TCInputModel {
        /// 代表小画面对应的用户ID。
        public let userId: String

        /// 代表小画面对应的流类型，0为摄像头，1为屏幕分享。小画面为web用户时此值填0。
        public let streamType: UInt64

        /// 小画面在输出时的宽度，单位为像素值，不填默认为0。
        public let imageWidth: UInt64?

        /// 小画面在输出时的高度，单位为像素值，不填默认为0。
        public let imageHeight: UInt64?

        /// 小画面在输出时的X偏移，单位为像素值，LocationX与ImageWidth之和不能超过混流输出的总宽度，不填默认为0。
        public let locationX: UInt64?

        /// 小画面在输出时的Y偏移，单位为像素值，LocationY与ImageHeight之和不能超过混流输出的总高度，不填默认为0。
        public let locationY: UInt64?

        public init(userId: String, streamType: UInt64, imageWidth: UInt64? = nil, imageHeight: UInt64? = nil, locationX: UInt64? = nil, locationY: UInt64? = nil) {
            self.userId = userId
            self.streamType = streamType
            self.imageWidth = imageWidth
            self.imageHeight = imageHeight
            self.locationX = locationX
            self.locationY = locationY
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case streamType = "StreamType"
            case imageWidth = "ImageWidth"
            case imageHeight = "ImageHeight"
            case locationX = "LocationX"
            case locationY = "LocationY"
        }
    }

    /// 云端录制查询接口，录制文件的信息
    public struct StorageFile: TCOutputModel {
        /// 录制文件对应的UserId，如果是混流的话的这里返回的是空串。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        /// 录制索引文件名。
        public let fileName: String

        /// 录制文件流信息。
        /// video：视频录制文件
        /// audio：音频录制文件
        /// audio_video：音视频录制文件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let trackType: String?

        /// 录制文件开始Unix时间戳。
        public let beginTimeStamp: UInt64

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case fileName = "FileName"
            case trackType = "TrackType"
            case beginTimeStamp = "BeginTimeStamp"
        }
    }

    /// 第三方存储参数。
    public struct StorageParams: TCInputModel {
        /// 第三方云存储的账号信息（CloudStorage参数暂不可用，请使用CloudVod参数存储至云点播）。
        public let cloudStorage: CloudStorage?

        /// 【必填】腾讯云云点播的账号信息，目前仅支持存储至腾讯云点播VOD。
        public let cloudVod: CloudVod?

        public init(cloudStorage: CloudStorage? = nil, cloudVod: CloudVod? = nil) {
            self.cloudStorage = cloudStorage
            self.cloudVod = cloudVod
        }

        enum CodingKeys: String, CodingKey {
            case cloudStorage = "CloudStorage"
            case cloudVod = "CloudVod"
        }
    }

    /// 指定订阅流白名单或者黑名单，音频的白名单和音频黑名单不能同时设置，视频亦然。同时实际并发订阅的媒体流路数最大支持25路流，混流场景下视频的多画面最大支持24画面。支持通过设置".*$"通配符，来前缀匹配黑白名单的UserId，注意房间里不能有和通配符规则相同的用户，否则将视为订阅具体用户，前缀规则会失效。
    public struct SubscribeStreamUserIds: TCInputModel {
        /// 订阅音频流白名单，指定订阅哪几个UserId的音频流，例如["1", "2", "3"], 代表订阅UserId 1，2，3的音频流；["1.*$"], 代表订阅UserId前缀为1的音频流。默认不填订阅房间内所有的音频流，订阅列表用户数不超过32。
        public let subscribeAudioUserIds: [String]?

        /// 订阅音频流黑名单，指定不订阅哪几个UserId的音频流，例如["1", "2", "3"], 代表不订阅UserId 1，2，3的音频流；["1.*$"], 代表不订阅UserId前缀为1的音频流。默认不填订阅房间内所有音频流，订阅列表用户数不超过32。
        public let unSubscribeAudioUserIds: [String]?

        /// 订阅视频流白名单，指定订阅哪几个UserId的视频流，例如["1", "2", "3"], 代表订阅UserId  1，2，3的视频流；["1.*$"], 代表订阅UserId前缀为1的视频流。默认不填订阅房间内所有视频流，订阅列表用户数不超过32。
        public let subscribeVideoUserIds: [String]?

        /// 订阅视频流黑名单，指定不订阅哪几个UserId的视频流，例如["1", "2", "3"], 代表不订阅UserId  1，2，3的视频流；["1.*$"], 代表不订阅UserId前缀为1的视频流。默认不填订阅房间内所有视频流，订阅列表用户数不超过32。
        public let unSubscribeVideoUserIds: [String]?

        public init(subscribeAudioUserIds: [String]? = nil, unSubscribeAudioUserIds: [String]? = nil, subscribeVideoUserIds: [String]? = nil, unSubscribeVideoUserIds: [String]? = nil) {
            self.subscribeAudioUserIds = subscribeAudioUserIds
            self.unSubscribeAudioUserIds = unSubscribeAudioUserIds
            self.subscribeVideoUserIds = subscribeVideoUserIds
            self.unSubscribeVideoUserIds = unSubscribeVideoUserIds
        }

        enum CodingKeys: String, CodingKey {
            case subscribeAudioUserIds = "SubscribeAudioUserIds"
            case unSubscribeAudioUserIds = "UnSubscribeAudioUserIds"
            case subscribeVideoUserIds = "SubscribeVideoUserIds"
            case unSubscribeVideoUserIds = "UnSubscribeVideoUserIds"
        }
    }

    /// TRTC数据大盘/实时监控 API接口数据出参
    public struct TRTCDataResp: TCOutputModel {
        /// StatementID值，监控仪表盘下固定为0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statementID: Int64?

        /// 查询结果数据，以Columns-Values形式返回。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let series: [SeriesInfo]?

        /// Total值，监控仪表盘功能下固定为1。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: Int64?

        enum CodingKeys: String, CodingKey {
            case statementID = "StatementID"
            case series = "Series"
            case total = "Total"
        }
    }

    /// 腾讯云点播相关参数。
    public struct TencentVod: TCInputModel {
        /// 媒体后续任务处理操作，即完成媒体上传后，可自动发起任务流操作。参数值为任务流模板名，云点播支持 创建任务流模板 并为模板命名。
        public let procedure: String?

        /// 媒体文件过期时间，为当前时间的绝对过期时间；保存一天，就填"86400"，永久保存就填"0"，默认永久保存。
        public let expireTime: UInt64?

        /// 指定上传园区，仅适用于对上传地域有特殊需求的用户。
        public let storageRegion: String?

        /// 分类ID，用于对媒体进行分类管理，可通过 创建分类 接口，创建分类，获得分类 ID。
        /// 默认值：0，表示其他分类。
        public let classId: UInt64?

        /// 点播 子应用 ID。如果要访问子应用中的资源，则将该字段填写为子应用 ID；否则无需填写该字段。
        public let subAppId: UInt64?

        /// 任务流上下文，任务完成回调时透传。
        public let sessionContext: String?

        /// 上传上下文，上传完成回调时透传。
        public let sourceContext: String?

        /// 上传到vod平台的录制文件格式类型，0：mp4(默认), 1: hls, 2:aac(StreamType=1纯音频录制时有效)。
        public let mediaType: UInt64?

        /// 仅支持API录制上传vod，该参数表示用户可以自定义录制文件名前缀，【限制长度为64字节，只允许包含大小写英文字母（a-zA-Z）、数字（0-9）及下划线和连词符】。前缀与自动生成的录制文件名之间用__UserId_u_分开。
        public let userDefineRecordId: String?

        public init(procedure: String? = nil, expireTime: UInt64? = nil, storageRegion: String? = nil, classId: UInt64? = nil, subAppId: UInt64? = nil, sessionContext: String? = nil, sourceContext: String? = nil, mediaType: UInt64? = nil, userDefineRecordId: String? = nil) {
            self.procedure = procedure
            self.expireTime = expireTime
            self.storageRegion = storageRegion
            self.classId = classId
            self.subAppId = subAppId
            self.sessionContext = sessionContext
            self.sourceContext = sourceContext
            self.mediaType = mediaType
            self.userDefineRecordId = userDefineRecordId
        }

        enum CodingKeys: String, CodingKey {
            case procedure = "Procedure"
            case expireTime = "ExpireTime"
            case storageRegion = "StorageRegion"
            case classId = "ClassId"
            case subAppId = "SubAppId"
            case sessionContext = "SessionContext"
            case sourceContext = "SourceContext"
            case mediaType = "MediaType"
            case userDefineRecordId = "UserDefineRecordId"
        }
    }

    /// 返回的质量数据，时间:值
    public struct TimeValue: TCOutputModel {
        /// 时间，unix时间戳（1590065877s)
        public let time: UInt64

        /// 当前时间返回参数取值，如（bigvCapFps在1590065877取值为0，则Value：0 ）
        public let value: Float

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case value = "Value"
        }
    }

    /// 实时音视频用量的某一时间段的统计信息.
    public struct TrtcTimeNewUsage: TCOutputModel {
        /// 时间点。
        public let timeKey: String

        /// 通话人数。仅供参考。在线人数以仪表盘查询结果为准。
        public let voiceUserNum: UInt64

        /// 音视频通话收费时长。单位：秒。
        public let videoTime: UInt64

        /// 标清视频通话收费时长。单位：秒。
        public let class1VideoTime: UInt64

        /// 高清视频通话收费时长。单位：秒。
        public let class2VideoTime: UInt64

        /// 超高清视频通话收费时长。单位：秒。
        public let class3VideoTime: UInt64

        /// 音频通话收费时长。单位：秒。
        public let audioTime: UInt64

        /// 带宽。单位：Mbps。
        public let bandwidth: Float

        /// 2k视频通话收费时长。单位：秒。
        public let video2KTime: UInt64

        /// 4k视频通话收费时长。单位：秒。
        public let video4KTime: UInt64

        enum CodingKeys: String, CodingKey {
            case timeKey = "TimeKey"
            case voiceUserNum = "VoiceUserNum"
            case videoTime = "VideoTime"
            case class1VideoTime = "Class1VideoTime"
            case class2VideoTime = "Class2VideoTime"
            case class3VideoTime = "Class3VideoTime"
            case audioTime = "AudioTime"
            case bandwidth = "Bandwidth"
            case video2KTime = "Video2KTime"
            case video4KTime = "Video4KTime"
        }
    }

    /// 实时音视频用量在某一时间段的统计信息。
    public struct TrtcUsage: TCOutputModel {
        /// 时间点，格式为YYYY-MM-DD HH:mm:ss。多天查询时，HH:mm:ss为00:00:00。
        public let timeKey: String

        /// 用量数组。每个数值含义与UsageKey对应。单位：分钟。
        public let usageValue: [Float]

        enum CodingKeys: String, CodingKey {
            case timeKey = "TimeKey"
            case usageValue = "UsageValue"
        }
    }

    /// 用户信息，包括用户进房时间，退房时间等
    public struct UserInformation: TCOutputModel {
        /// 房间号
        public let roomStr: String

        /// 用户Id
        public let userId: String

        /// 用户进房时间
        public let joinTs: UInt64

        /// 用户退房时间，用户没有退房则返回当前时间
        public let leaveTs: UInt64

        /// 终端类型
        public let deviceType: String

        /// Sdk版本号
        public let sdkVersion: String

        /// 客户端IP地址
        public let clientIp: String

        /// 判断用户是否已经离开房间
        public let finished: Bool

        enum CodingKeys: String, CodingKey {
            case roomStr = "RoomStr"
            case userId = "UserId"
            case joinTs = "JoinTs"
            case leaveTs = "LeaveTs"
            case deviceType = "DeviceType"
            case sdkVersion = "SdkVersion"
            case clientIp = "ClientIp"
            case finished = "Finished"
        }
    }

    /// 用户媒体流参数。
    public struct UserMediaStream: TCInputModel {
        /// TRTC用户参数。
        public let userInfo: MixUserInfo?

        /// 主辅路流类型，0为摄像头，1为屏幕分享，不填默认为0。
        public let streamType: UInt64?

        public init(userInfo: MixUserInfo? = nil, streamType: UInt64? = nil) {
            self.userInfo = userInfo
            self.streamType = streamType
        }

        enum CodingKeys: String, CodingKey {
            case userInfo = "UserInfo"
            case streamType = "StreamType"
        }
    }

    /// 视频编码参数。
    public struct VideoEncode: TCInputModel {
        /// 输出流宽，音视频输出时必填。取值范围[0,1920]，单位为像素值。
        public let width: UInt64

        /// 输出流高，音视频输出时必填。取值范围[0,1080]，单位为像素值。
        public let height: UInt64

        /// 输出流帧率，音视频输出时必填。取值范围[1,60]，表示混流的输出帧率可选范围为1到60fps。
        public let fps: UInt64

        /// 输出流码率，音视频输出时必填。取值范围[1,10000]，单位为kbps。
        public let bitRate: UInt64

        /// 输出流gop，音视频输出时必填。取值范围[1,5]，单位为秒。
        public let gop: UInt64

        public init(width: UInt64, height: UInt64, fps: UInt64, bitRate: UInt64, gop: UInt64) {
            self.width = width
            self.height = height
            self.fps = fps
            self.bitRate = bitRate
            self.gop = gop
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
            case fps = "Fps"
            case bitRate = "BitRate"
            case gop = "Gop"
        }
    }

    /// 录制视频转码参数。
    public struct VideoParams: TCInputModel {
        /// 视频的宽度值，单位为像素，默认值360。不能超过1920，与height的乘积不能超过1920*1080。
        public let width: UInt64

        /// 视频的高度值，单位为像素，默认值640。不能超过1920，与width的乘积不能超过1920*1080。
        public let height: UInt64

        /// 视频的帧率，范围[1, 60]，默认15。
        public let fps: UInt64

        /// 视频的码率,单位是bps，范围[64000, 8192000]，默认550000bps。
        public let bitRate: UInt64

        /// 视频关键帧时间间隔，单位秒，默认值10秒。
        public let gop: UInt64

        public init(width: UInt64, height: UInt64, fps: UInt64, bitRate: UInt64, gop: UInt64) {
            self.width = width
            self.height = height
            self.fps = fps
            self.bitRate = bitRate
            self.gop = gop
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
            case fps = "Fps"
            case bitRate = "BitRate"
            case gop = "Gop"
        }
    }

    /// 水印布局参数
    public struct WaterMark: TCInputModel {
        /// 水印类型，0为图片（默认），1为文字（暂不支持）。
        public let waterMarkType: UInt64?

        /// 水印为图片时的参数列表，水印为图片时校验必填。
        public let waterMarkImage: WaterMarkImage?

        public init(waterMarkType: UInt64? = nil, waterMarkImage: WaterMarkImage? = nil) {
            self.waterMarkType = waterMarkType
            self.waterMarkImage = waterMarkImage
        }

        enum CodingKeys: String, CodingKey {
            case waterMarkType = "WaterMarkType"
            case waterMarkImage = "WaterMarkImage"
        }
    }

    /// 水印类型为图片的参数列表
    public struct WaterMarkImage: TCInputModel {
        /// 下载的url地址， 只支持jpg， png，大小限制不超过5M。
        public let waterMarkUrl: String

        /// 画布上该画面左上角的 y 轴坐标，取值范围 [0, 2560]，不能超过画布的高。
        public let top: UInt64

        /// 画布上该画面左上角的 x 轴坐标，取值范围 [0, 2560]，不能超过画布的宽。
        public let left: UInt64

        /// 画布上该画面宽度的相对值，取值范围 [0, 2560]，与Left相加不应超过画布的宽。
        public let width: UInt64

        /// 画布上该画面高度的相对值，取值范围 [0, 2560]，与Top相加不应超过画布的高。
        public let height: UInt64

        public init(waterMarkUrl: String, top: UInt64, left: UInt64, width: UInt64, height: UInt64) {
            self.waterMarkUrl = waterMarkUrl
            self.top = top
            self.left = left
            self.width = width
            self.height = height
        }

        enum CodingKeys: String, CodingKey {
            case waterMarkUrl = "WaterMarkUrl"
            case top = "Top"
            case left = "Left"
            case width = "Width"
            case height = "Height"
        }
    }

    /// MCU混流水印参数
    public struct WaterMarkParams: TCInputModel {
        /// 混流-水印图片ID。取值为实时音视频控制台上传的图片ID。
        public let waterMarkId: UInt64

        /// 混流-水印宽。单位为像素值。水印宽+X偏移不能超过整个画布宽。
        public let waterMarkWidth: UInt64

        /// 混流-水印高。单位为像素值。水印高+Y偏移不能超过整个画布高。
        public let waterMarkHeight: UInt64

        /// 水印在输出时的X偏移。单位为像素值。水印宽+X偏移不能超过整个画布宽。
        public let locationX: UInt64

        /// 水印在输出时的Y偏移。单位为像素值。水印高+Y偏移不能超过整个画布高。
        public let locationY: UInt64

        /// 混流-水印图片URL地址，支持png、jpg、jpeg、bmp格式，暂不支持透明通道。URL链接长度限制为512字节。WaterMarkUrl和WaterMarkId参数都填时，以WaterMarkUrl为准。图片大小限制不超过2MB。
        public let waterMarkUrl: String?

        public init(waterMarkId: UInt64, waterMarkWidth: UInt64, waterMarkHeight: UInt64, locationX: UInt64, locationY: UInt64, waterMarkUrl: String? = nil) {
            self.waterMarkId = waterMarkId
            self.waterMarkWidth = waterMarkWidth
            self.waterMarkHeight = waterMarkHeight
            self.locationX = locationX
            self.locationY = locationY
            self.waterMarkUrl = waterMarkUrl
        }

        enum CodingKeys: String, CodingKey {
            case waterMarkId = "WaterMarkId"
            case waterMarkWidth = "WaterMarkWidth"
            case waterMarkHeight = "WaterMarkHeight"
            case locationX = "LocationX"
            case locationY = "LocationY"
            case waterMarkUrl = "WaterMarkUrl"
        }
    }
}
