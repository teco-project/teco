//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTrtcError {
    public struct AuthFailure: TCTrtcErrorType {
        enum Code: String {
            case unRealNameAuthenticated = "AuthFailure.UnRealNameAuthenticated"
            case unauthorizedOperation = "AuthFailure.UnauthorizedOperation"
            case unsupportedOperation = "AuthFailure.UnsupportedOperation"
            case other = "AuthFailure"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 未完成实名认证，不允许此操作。
        public static var unRealNameAuthenticated: AuthFailure {
            AuthFailure(.unRealNameAuthenticated)
        }

        /// CAM鉴权失败。
        public static var unauthorizedOperation: AuthFailure {
            AuthFailure(.unauthorizedOperation)
        }

        /// 不支持该操作。
        public static var unsupportedOperation: AuthFailure {
            AuthFailure(.unsupportedOperation)
        }

        /// CAM签名/鉴权错误。
        public static var other: AuthFailure {
            AuthFailure(.other)
        }

        public func asTrtcError() -> TCTrtcError {
            let code: TCTrtcError.Code
            switch self.error {
            case .unRealNameAuthenticated:
                code = .authFailure_UnRealNameAuthenticated
            case .unauthorizedOperation:
                code = .authFailure_UnauthorizedOperation
            case .unsupportedOperation:
                code = .authFailure_UnsupportedOperation
            case .other:
                code = .authFailure
            }
            return TCTrtcError(code, context: self.context)
        }
    }
}
