//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTrtcError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case crInternalError = "InternalError.CRInternalError"
            case dbError = "InternalError.DBError"
            case esQueryError = "InternalError.EsQueryError"
            case getRoomCacheIpError = "InternalError.GetRoomCacheIpError"
            case getRoomFromCacheError = "InternalError.GetRoomFromCacheError"
            case httpParaseFalied = "InternalError.HttpParaseFalied"
            case interfaceErr = "InternalError.InterfaceErr"
            case internalError = "InternalError.InternalError"
            case methodErr = "InternalError.MethodErr"
            case userNotExist = "InternalError.UserNotExist"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 云端录制内部服务错误。
        public static var crInternalError: InternalError {
            InternalError(.crInternalError)
        }
        
        /// 数据库查询异常。
        public static var dbError: InternalError {
            InternalError(.dbError)
        }
        
        /// ES查询异常。
        public static var esQueryError: InternalError {
            InternalError(.esQueryError)
        }
        
        /// 查询房间失败。
        public static var getRoomCacheIpError: InternalError {
            InternalError(.getRoomCacheIpError)
        }
        
        /// 获取房间信息失败。
        public static var getRoomFromCacheError: InternalError {
            InternalError(.getRoomFromCacheError)
        }
        
        /// http请求解析失败。
        public static var httpParaseFalied: InternalError {
            InternalError(.httpParaseFalied)
        }
        
        /// 接口错误。
        public static var interfaceErr: InternalError {
            InternalError(.interfaceErr)
        }
        
        /// 内部错误，请重试。
        public static var internalError: InternalError {
            InternalError(.internalError)
        }
        
        /// 不支持的方法。
        public static var methodErr: InternalError {
            InternalError(.methodErr)
        }
        
        /// 用户不在房间中。
        public static var userNotExist: InternalError {
            InternalError(.userNotExist)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCTrtcError.InternalError: Equatable {
    public static func == (lhs: TCTrtcError.InternalError, rhs: TCTrtcError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTrtcError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTrtcError.InternalError {
    public func toTrtcError() -> TCTrtcError {
        guard let code = TCTrtcError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTrtcError(code, context: self.context)
    }
}