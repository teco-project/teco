//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTrtcError {
    public struct MissingParameter: TCErrorType {
        enum Code: String {
            case accessKey = "MissingParameter.AccessKey"
            case appId = "MissingParameter.AppId"
            case audioEncodeParams = "MissingParameter.AudioEncodeParams"
            case bizId = "MissingParameter.BizId"
            case bucket = "MissingParameter.Bucket"
            case cloudStorage = "MissingParameter.CloudStorage"
            case commId = "MissingParameter.CommId"
            case commIdOrSdkAppId = "MissingParameter.CommIdOrSdkAppId"
            case encodeParams = "MissingParameter.EncodeParams"
            case endTs = "MissingParameter.EndTs"
            case outputParams = "MissingParameter.OutputParams"
            case presetLayoutConfig = "MissingParameter.PresetLayoutConfig"
            case publishCdnParams = "MissingParameter.PublishCdnParams"
            case publishCdnUrls = "MissingParameter.PublishCdnUrls"
            case recordMode = "MissingParameter.RecordMode"
            case recordParams = "MissingParameter.RecordParams"
            case region = "MissingParameter.Region"
            case roomId = "MissingParameter.RoomId"
            case roomNum = "MissingParameter.RoomNum"
            case sdkAppId = "MissingParameter.SdkAppId"
            case secretKey = "MissingParameter.SecretKey"
            case startTs = "MissingParameter.StartTs"
            case storageParams = "MissingParameter.StorageParams"
            case streamId = "MissingParameter.StreamId"
            case streamType = "MissingParameter.StreamType"
            case taskId = "MissingParameter.TaskId"
            case userId = "MissingParameter.UserId"
            case userIds = "MissingParameter.UserIds"
            case userSig = "MissingParameter.UserSig"
            case vendor = "MissingParameter.Vendor"
            case videoEncodeParams = "MissingParameter.VideoEncodeParams"
            case other = "MissingParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 缺少AccessKey参数。
        public static var accessKey: MissingParameter {
            MissingParameter(.accessKey)
        }
        
        /// 缺少AppId参数。
        public static var appId: MissingParameter {
            MissingParameter(.appId)
        }
        
        /// EncodeParams中缺少音频输出参数。
        public static var audioEncodeParams: MissingParameter {
            MissingParameter(.audioEncodeParams)
        }
        
        /// 转推参数中缺少BizId。
        public static var bizId: MissingParameter {
            MissingParameter(.bizId)
        }
        
        /// 缺少Bucket参数。
        public static var bucket: MissingParameter {
            MissingParameter(.bucket)
        }
        
        /// 缺少CloudStorage参数。
        public static var cloudStorage: MissingParameter {
            MissingParameter(.cloudStorage)
        }
        
        /// 缺少CommId参数。
        public static var commId: MissingParameter {
            MissingParameter(.commId)
        }
        
        /// 缺少SdkAppId参数或CommID参数。
        public static var commIdOrSdkAppId: MissingParameter {
            MissingParameter(.commIdOrSdkAppId)
        }
        
        /// 缺少EncodeParams参数。
        public static var encodeParams: MissingParameter {
            MissingParameter(.encodeParams)
        }
        
        /// 缺少endTS_s参数。
        public static var endTs: MissingParameter {
            MissingParameter(.endTs)
        }
        
        /// 缺少OutputParams参数。
        public static var outputParams: MissingParameter {
            MissingParameter(.outputParams)
        }
        
        /// 缺少自定义布局参数。
        public static var presetLayoutConfig: MissingParameter {
            MissingParameter(.presetLayoutConfig)
        }
        
        /// 缺少转推参数。
        public static var publishCdnParams: MissingParameter {
            MissingParameter(.publishCdnParams)
        }
        
        /// 转推参数中缺少转推目的地址。
        public static var publishCdnUrls: MissingParameter {
            MissingParameter(.publishCdnUrls)
        }
        
        /// 缺少RecordMode参数。
        public static var recordMode: MissingParameter {
            MissingParameter(.recordMode)
        }
        
        /// 缺少RecordParams参数。
        public static var recordParams: MissingParameter {
            MissingParameter(.recordParams)
        }
        
        /// 缺少Region参数。
        public static var region: MissingParameter {
            MissingParameter(.region)
        }
        
        /// 缺少RoomId参数。
        public static var roomId: MissingParameter {
            MissingParameter(.roomId)
        }
        
        /// 缺少RoomNum参数。
        public static var roomNum: MissingParameter {
            MissingParameter(.roomNum)
        }
        
        /// 缺少SdkAppId参数。
        public static var sdkAppId: MissingParameter {
            MissingParameter(.sdkAppId)
        }
        
        /// 缺少SecretKey参数。
        public static var secretKey: MissingParameter {
            MissingParameter(.secretKey)
        }
        
        /// 缺少startTS_s参数。
        public static var startTs: MissingParameter {
            MissingParameter(.startTs)
        }
        
        /// 缺少StorageParams参数。
        public static var storageParams: MissingParameter {
            MissingParameter(.storageParams)
        }
        
        /// OutputParams中缺少StreamId参数。
        public static var streamId: MissingParameter {
            MissingParameter(.streamId)
        }
        
        /// 缺少StreamType参数。
        public static var streamType: MissingParameter {
            MissingParameter(.streamType)
        }
        
        /// 缺少TaskId参数。
        public static var taskId: MissingParameter {
            MissingParameter(.taskId)
        }
        
        /// 缺少UserId参数。
        public static var userId: MissingParameter {
            MissingParameter(.userId)
        }
        
        /// 缺少UserIds参数。
        public static var userIds: MissingParameter {
            MissingParameter(.userIds)
        }
        
        /// 缺少UserSig参数。
        public static var userSig: MissingParameter {
            MissingParameter(.userSig)
        }
        
        /// 缺少Vendor参数。
        public static var vendor: MissingParameter {
            MissingParameter(.vendor)
        }
        
        /// EncodeParams中缺少视频输出参数。
        public static var videoEncodeParams: MissingParameter {
            MissingParameter(.videoEncodeParams)
        }
        
        /// 缺少参数错误。
        public static var other: MissingParameter {
            MissingParameter(.other)
        }
    }
}

extension TCTrtcError.MissingParameter: Equatable {
    public static func == (lhs: TCTrtcError.MissingParameter, rhs: TCTrtcError.MissingParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTrtcError.MissingParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTrtcError.MissingParameter {
    public func toTrtcError() -> TCTrtcError {
        guard let code = TCTrtcError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTrtcError(code, context: self.context)
    }
}