//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Ape {
    /// DescribeImages请求参数结构体
    public struct DescribeImagesRequest: TCPaginatedRequest {
        /// 页偏移量
        public let offset: Int64

        /// 页大小
        public let limit: Int64

        /// 搜索关键字
        public let keyword: String

        /// 构图方式，可选以下值：horizontal、vertical、square，分别代表以下含义：横图、竖图、方图
        public let orientation: String?

        /// 图片类型，可选以下值：照片、插画
        public let imageSenseType: String?

        /// 分层图库id数组，可选以下数值：1(基础)，2(精选)，3(高级)
        public let layeredGalleryIds: [Int64]?

        public init(offset: Int64, limit: Int64, keyword: String, orientation: String? = nil, imageSenseType: String? = nil, layeredGalleryIds: [Int64]? = nil) {
            self.offset = offset
            self.limit = limit
            self.keyword = keyword
            self.orientation = orientation
            self.imageSenseType = imageSenseType
            self.layeredGalleryIds = layeredGalleryIds
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case keyword = "Keyword"
            case orientation = "Orientation"
            case imageSenseType = "ImageSenseType"
            case layeredGalleryIds = "LayeredGalleryIds"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeImagesResponse) -> DescribeImagesRequest? {
            guard response.haveMore else {
                return nil
            }
            return DescribeImagesRequest(offset: self.offset + response.limit, limit: self.limit, keyword: self.keyword, orientation: self.orientation, imageSenseType: self.imageSenseType, layeredGalleryIds: self.layeredGalleryIds)
        }
    }

    /// DescribeImages返回参数结构体
    public struct DescribeImagesResponse: TCPaginatedResponse {
        /// 页偏移量
        public let offset: Int64

        /// 页大小
        public let limit: Int64

        /// 总条数
        public let total: Int64

        /// 是否有下一页
        public let haveMore: Bool

        /// 图片信息数组
        public let items: [ImageItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case total = "Total"
            case haveMore = "HaveMore"
            case items = "Items"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [ImageItem] {
            self.items
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 查询图片列表
    ///
    /// 根据关键字搜索图片列表
    @inlinable
    public func describeImages(_ input: DescribeImagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImagesResponse> {
        self.client.execute(action: "DescribeImages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询图片列表
    ///
    /// 根据关键字搜索图片列表
    @inlinable
    public func describeImages(_ input: DescribeImagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImagesResponse {
        try await self.client.execute(action: "DescribeImages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询图片列表
    ///
    /// 根据关键字搜索图片列表
    @inlinable
    public func describeImages(offset: Int64, limit: Int64, keyword: String, orientation: String? = nil, imageSenseType: String? = nil, layeredGalleryIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImagesResponse> {
        let input = DescribeImagesRequest(offset: offset, limit: limit, keyword: keyword, orientation: orientation, imageSenseType: imageSenseType, layeredGalleryIds: layeredGalleryIds)
        return self.client.execute(action: "DescribeImages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询图片列表
    ///
    /// 根据关键字搜索图片列表
    @inlinable
    public func describeImages(offset: Int64, limit: Int64, keyword: String, orientation: String? = nil, imageSenseType: String? = nil, layeredGalleryIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImagesResponse {
        let input = DescribeImagesRequest(offset: offset, limit: limit, keyword: keyword, orientation: orientation, imageSenseType: imageSenseType, layeredGalleryIds: layeredGalleryIds)
        return try await self.client.execute(action: "DescribeImages", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询图片列表
    ///
    /// 根据关键字搜索图片列表
    @inlinable
    public func describeImagesPaginated(_ input: DescribeImagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [ImageItem])> {
        self.client.paginate(input: input, region: region, command: self.describeImages, logger: logger, on: eventLoop)
    }

    /// 查询图片列表
    ///
    /// 根据关键字搜索图片列表
    @inlinable @discardableResult
    public func describeImagesPaginated(_ input: DescribeImagesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeImagesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeImages, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询图片列表
    ///
    /// 根据关键字搜索图片列表
    @inlinable
    public func describeImagesPaginator(_ input: DescribeImagesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeImagesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeImages, logger: logger, on: eventLoop)
    }
}
