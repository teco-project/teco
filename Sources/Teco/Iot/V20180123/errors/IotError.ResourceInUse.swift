//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotError {
    public struct ResourceInUse: TCErrorType {
        enum Code: String {
            case iotApplicationDeviceExists = "ResourceInUse.IotApplicationDeviceExists"
            case iotApplicationUserExists = "ResourceInUse.IotApplicationUserExists"
            case iotDeviceExists = "ResourceInUse.IotDeviceExists"
            case iotOpInProgress = "ResourceInUse.IotOpInProgress"
            case iotProductExists = "ResourceInUse.IotProductExists"
            case iotRuleExists = "ResourceInUse.IotRuleExists"
            case iotTopicExists = "ResourceInUse.IotTopicExists"
            case mqiotResourceExists = "ResourceInUse.MqiotResourceExists"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 设备已绑定。
        public static var iotApplicationDeviceExists: ResourceInUse {
            ResourceInUse(.iotApplicationDeviceExists)
        }
        
        /// 应用用户已存在。
        public static var iotApplicationUserExists: ResourceInUse {
            ResourceInUse(.iotApplicationUserExists)
        }
        
        /// 设备已存在。
        public static var iotDeviceExists: ResourceInUse {
            ResourceInUse(.iotDeviceExists)
        }
        
        /// 正在处理上一个操作。
        public static var iotOpInProgress: ResourceInUse {
            ResourceInUse(.iotOpInProgress)
        }
        
        /// 产品已存在。
        public static var iotProductExists: ResourceInUse {
            ResourceInUse(.iotProductExists)
        }
        
        /// 规则已存在。
        public static var iotRuleExists: ResourceInUse {
            ResourceInUse(.iotRuleExists)
        }
        
        /// Topic已存在。
        public static var iotTopicExists: ResourceInUse {
            ResourceInUse(.iotTopicExists)
        }
        
        /// 资源已存在。
        public static var mqiotResourceExists: ResourceInUse {
            ResourceInUse(.mqiotResourceExists)
        }
    }
}

extension TCIotError.ResourceInUse: Equatable {
    public static func == (lhs: TCIotError.ResourceInUse, rhs: TCIotError.ResourceInUse) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIotError.ResourceInUse: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIotError.ResourceInUse {
    public func toIotError() -> TCIotError {
        guard let code = TCIotError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIotError(code, context: self.context)
    }
}