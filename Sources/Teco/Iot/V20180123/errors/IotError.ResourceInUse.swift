//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCIotError {
    public struct ResourceInUse: TCIotErrorType {
        enum Code: String {
            case iotApplicationDeviceExists = "ResourceInUse.IotApplicationDeviceExists"
            case iotApplicationUserExists = "ResourceInUse.IotApplicationUserExists"
            case iotDeviceExists = "ResourceInUse.IotDeviceExists"
            case iotOpInProgress = "ResourceInUse.IotOpInProgress"
            case iotProductExists = "ResourceInUse.IotProductExists"
            case iotRuleExists = "ResourceInUse.IotRuleExists"
            case iotTopicExists = "ResourceInUse.IotTopicExists"
            case mqiotResourceExists = "ResourceInUse.MqiotResourceExists"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 设备已绑定。
        public static var iotApplicationDeviceExists: ResourceInUse {
            ResourceInUse(.iotApplicationDeviceExists)
        }

        /// 应用用户已存在。
        public static var iotApplicationUserExists: ResourceInUse {
            ResourceInUse(.iotApplicationUserExists)
        }

        /// 设备已存在。
        public static var iotDeviceExists: ResourceInUse {
            ResourceInUse(.iotDeviceExists)
        }

        /// 正在处理上一个操作。
        public static var iotOpInProgress: ResourceInUse {
            ResourceInUse(.iotOpInProgress)
        }

        /// 产品已存在。
        public static var iotProductExists: ResourceInUse {
            ResourceInUse(.iotProductExists)
        }

        /// 规则已存在。
        public static var iotRuleExists: ResourceInUse {
            ResourceInUse(.iotRuleExists)
        }

        /// Topic已存在。
        public static var iotTopicExists: ResourceInUse {
            ResourceInUse(.iotTopicExists)
        }

        /// 资源已存在。
        public static var mqiotResourceExists: ResourceInUse {
            ResourceInUse(.mqiotResourceExists)
        }

        public func asIotError() -> TCIotError {
            let code: TCIotError.Code
            switch self.error {
            case .iotApplicationDeviceExists:
                code = .resourceInUse_IotApplicationDeviceExists
            case .iotApplicationUserExists:
                code = .resourceInUse_IotApplicationUserExists
            case .iotDeviceExists:
                code = .resourceInUse_IotDeviceExists
            case .iotOpInProgress:
                code = .resourceInUse_IotOpInProgress
            case .iotProductExists:
                code = .resourceInUse_IotProductExists
            case .iotRuleExists:
                code = .resourceInUse_IotRuleExists
            case .iotTopicExists:
                code = .resourceInUse_IotTopicExists
            case .mqiotResourceExists:
                code = .resourceInUse_MqiotResourceExists
            }
            return TCIotError(code, context: self.context)
        }
    }
}
