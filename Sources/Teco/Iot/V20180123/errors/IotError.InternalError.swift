//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case iotActionSystemError = "InternalError.IotActionSystemError"
            case iotDbError = "InternalError.IotDbError"
            case iotLogSystemError = "InternalError.IotLogSystemError"
            case iotShadowSystemError = "InternalError.IotShadowSystemError"
            case iotSystemError = "InternalError.IotSystemError"
            case mqiotSystemError = "InternalError.MqiotSystemError"
            case mqruleSystemError = "InternalError.MqruleSystemError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// action系统错误。
        public static var iotActionSystemError: InternalError {
            InternalError(.iotActionSystemError)
        }
        
        /// DB错误。
        public static var iotDbError: InternalError {
            InternalError(.iotDbError)
        }
        
        /// 日志系统错误。
        public static var iotLogSystemError: InternalError {
            InternalError(.iotLogSystemError)
        }
        
        /// shadow系统错误。
        public static var iotShadowSystemError: InternalError {
            InternalError(.iotShadowSystemError)
        }
        
        /// 系统错误。
        public static var iotSystemError: InternalError {
            InternalError(.iotSystemError)
        }
        
        /// Mqiot系统错误。
        public static var mqiotSystemError: InternalError {
            InternalError(.mqiotSystemError)
        }
        
        /// rule系统错误。
        public static var mqruleSystemError: InternalError {
            InternalError(.mqruleSystemError)
        }
    }
}

extension TCIotError.InternalError: Equatable {
    public static func == (lhs: TCIotError.InternalError, rhs: TCIotError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIotError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIotError.InternalError {
    public func toIotError() -> TCIotError {
        guard let code = TCIotError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIotError(code, context: self.context)
    }
}