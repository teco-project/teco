//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case iotApplicationDeviceNotExists = "ResourceNotFound.IotApplicationDeviceNotExists"
            case iotApplicationNotExists = "ResourceNotFound.IotApplicationNotExists"
            case iotApplicationUserNotExists = "ResourceNotFound.IotApplicationUserNotExists"
            case iotDeviceNotExists = "ResourceNotFound.IotDeviceNotExists"
            case iotProductNotExists = "ResourceNotFound.IotProductNotExists"
            case iotRuleNotExists = "ResourceNotFound.IotRuleNotExists"
            case iotSubAccountNotExists = "ResourceNotFound.IotSubAccountNotExists"
            case iotTopicNotExists = "ResourceNotFound.IotTopicNotExists"
            case iotUserNotExists = "ResourceNotFound.IotUserNotExists"
            case mqruleRuleIdNotExists = "ResourceNotFound.MqruleRuleIdNotExists"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 设备未绑定。
        public static var iotApplicationDeviceNotExists: ResourceNotFound {
            ResourceNotFound(.iotApplicationDeviceNotExists)
        }
        
        /// 应用不存在。
        public static var iotApplicationNotExists: ResourceNotFound {
            ResourceNotFound(.iotApplicationNotExists)
        }
        
        /// 应用用户不存在。
        public static var iotApplicationUserNotExists: ResourceNotFound {
            ResourceNotFound(.iotApplicationUserNotExists)
        }
        
        /// 设备不存在。
        public static var iotDeviceNotExists: ResourceNotFound {
            ResourceNotFound(.iotDeviceNotExists)
        }
        
        /// 产品不存在。
        public static var iotProductNotExists: ResourceNotFound {
            ResourceNotFound(.iotProductNotExists)
        }
        
        /// 规则不存在。
        public static var iotRuleNotExists: ResourceNotFound {
            ResourceNotFound(.iotRuleNotExists)
        }
        
        /// 授权子账号不存在。
        public static var iotSubAccountNotExists: ResourceNotFound {
            ResourceNotFound(.iotSubAccountNotExists)
        }
        
        /// Topic不存在。
        public static var iotTopicNotExists: ResourceNotFound {
            ResourceNotFound(.iotTopicNotExists)
        }
        
        /// 用户不存在。
        public static var iotUserNotExists: ResourceNotFound {
            ResourceNotFound(.iotUserNotExists)
        }
        
        /// 规则config id不存在。
        public static var mqruleRuleIdNotExists: ResourceNotFound {
            ResourceNotFound(.mqruleRuleIdNotExists)
        }
    }
}

extension TCIotError.ResourceNotFound: Equatable {
    public static func == (lhs: TCIotError.ResourceNotFound, rhs: TCIotError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIotError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIotError.ResourceNotFound {
    /// - Returns: ``TCIotError`` that holds the same error and context.
    public func toIotError() -> TCIotError {
        guard let code = TCIotError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIotError(code, context: self.context)
    }
}

extension TCIotError.ResourceNotFound {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
