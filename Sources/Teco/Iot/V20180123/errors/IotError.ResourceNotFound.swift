//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotError {
    public struct ResourceNotFound: TCIotErrorType {
        enum Code: String {
            case iotApplicationDeviceNotExists = "ResourceNotFound.IotApplicationDeviceNotExists"
            case iotApplicationNotExists = "ResourceNotFound.IotApplicationNotExists"
            case iotApplicationUserNotExists = "ResourceNotFound.IotApplicationUserNotExists"
            case iotDeviceNotExists = "ResourceNotFound.IotDeviceNotExists"
            case iotProductNotExists = "ResourceNotFound.IotProductNotExists"
            case iotRuleNotExists = "ResourceNotFound.IotRuleNotExists"
            case iotSubAccountNotExists = "ResourceNotFound.IotSubAccountNotExists"
            case iotTopicNotExists = "ResourceNotFound.IotTopicNotExists"
            case iotUserNotExists = "ResourceNotFound.IotUserNotExists"
            case mqruleRuleIdNotExists = "ResourceNotFound.MqruleRuleIdNotExists"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 设备未绑定。
        public static var iotApplicationDeviceNotExists: ResourceNotFound {
            ResourceNotFound(.iotApplicationDeviceNotExists)
        }
        
        /// 应用不存在。
        public static var iotApplicationNotExists: ResourceNotFound {
            ResourceNotFound(.iotApplicationNotExists)
        }
        
        /// 应用用户不存在。
        public static var iotApplicationUserNotExists: ResourceNotFound {
            ResourceNotFound(.iotApplicationUserNotExists)
        }
        
        /// 设备不存在。
        public static var iotDeviceNotExists: ResourceNotFound {
            ResourceNotFound(.iotDeviceNotExists)
        }
        
        /// 产品不存在。
        public static var iotProductNotExists: ResourceNotFound {
            ResourceNotFound(.iotProductNotExists)
        }
        
        /// 规则不存在。
        public static var iotRuleNotExists: ResourceNotFound {
            ResourceNotFound(.iotRuleNotExists)
        }
        
        /// 授权子账号不存在。
        public static var iotSubAccountNotExists: ResourceNotFound {
            ResourceNotFound(.iotSubAccountNotExists)
        }
        
        /// Topic不存在。
        public static var iotTopicNotExists: ResourceNotFound {
            ResourceNotFound(.iotTopicNotExists)
        }
        
        /// 用户不存在。
        public static var iotUserNotExists: ResourceNotFound {
            ResourceNotFound(.iotUserNotExists)
        }
        
        /// 规则config id不存在。
        public static var mqruleRuleIdNotExists: ResourceNotFound {
            ResourceNotFound(.mqruleRuleIdNotExists)
        }
        
        public func asIotError() -> TCIotError {
            let code: TCIotError.Code
            switch self.error {
            case .iotApplicationDeviceNotExists: 
                code = .resourceNotFound_IotApplicationDeviceNotExists
            case .iotApplicationNotExists: 
                code = .resourceNotFound_IotApplicationNotExists
            case .iotApplicationUserNotExists: 
                code = .resourceNotFound_IotApplicationUserNotExists
            case .iotDeviceNotExists: 
                code = .resourceNotFound_IotDeviceNotExists
            case .iotProductNotExists: 
                code = .resourceNotFound_IotProductNotExists
            case .iotRuleNotExists: 
                code = .resourceNotFound_IotRuleNotExists
            case .iotSubAccountNotExists: 
                code = .resourceNotFound_IotSubAccountNotExists
            case .iotTopicNotExists: 
                code = .resourceNotFound_IotTopicNotExists
            case .iotUserNotExists: 
                code = .resourceNotFound_IotUserNotExists
            case .mqruleRuleIdNotExists: 
                code = .resourceNotFound_MqruleRuleIdNotExists
            }
            return TCIotError(code, context: self.context)
        }
    }
}
