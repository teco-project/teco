//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case iotBatchTooMany = "LimitExceeded.IotBatchTooMany"
            case iotDeviceOpTooOften = "LimitExceeded.IotDeviceOpTooOften"
            case iotProductOpTooOften = "LimitExceeded.IotProductOpTooOften"
            case iotProductTooManyTopics = "LimitExceeded.IotProductTooManyTopics"
            case iotRuleOpTooMany = "LimitExceeded.IotRuleOpTooMany"
            case iotRuleOpTooOften = "LimitExceeded.IotRuleOpTooOften"
            case iotTopicOpTooOften = "LimitExceeded.IotTopicOpTooOften"
            case iotUserTooManyProducts = "LimitExceeded.IotUserTooManyProducts"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 批量操作超限。
        public static var iotBatchTooMany: LimitExceeded {
            LimitExceeded(.iotBatchTooMany)
        }
        
        /// 设备操作太频繁。
        public static var iotDeviceOpTooOften: LimitExceeded {
            LimitExceeded(.iotDeviceOpTooOften)
        }
        
        /// 产品操作太频繁。
        public static var iotProductOpTooOften: LimitExceeded {
            LimitExceeded(.iotProductOpTooOften)
        }
        
        /// 产品的Topics数量超限。
        public static var iotProductTooManyTopics: LimitExceeded {
            LimitExceeded(.iotProductTooManyTopics)
        }
        
        /// 规则批量操作超限。
        public static var iotRuleOpTooMany: LimitExceeded {
            LimitExceeded(.iotRuleOpTooMany)
        }
        
        /// 规则操作太频繁。
        public static var iotRuleOpTooOften: LimitExceeded {
            LimitExceeded(.iotRuleOpTooOften)
        }
        
        /// Topic操作太频繁。
        public static var iotTopicOpTooOften: LimitExceeded {
            LimitExceeded(.iotTopicOpTooOften)
        }
        
        /// 用户的产品数超限。
        public static var iotUserTooManyProducts: LimitExceeded {
            LimitExceeded(.iotUserTooManyProducts)
        }
    }
}

extension TCIotError.LimitExceeded: Equatable {
    public static func == (lhs: TCIotError.LimitExceeded, rhs: TCIotError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIotError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIotError.LimitExceeded {
    public func toIotError() -> TCIotError {
        guard let code = TCIotError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIotError(code, context: self.context)
    }
}