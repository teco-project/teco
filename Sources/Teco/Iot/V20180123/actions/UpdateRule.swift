//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iot {
    /// 更新规则
    ///
    /// 更新规则
    @inlinable
    public func updateRule(_ input: UpdateRuleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UpdateRuleResponse > {
        self.client.execute(action: "UpdateRule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 更新规则
    ///
    /// 更新规则
    @inlinable
    public func updateRule(_ input: UpdateRuleRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateRuleResponse {
        try await self.client.execute(action: "UpdateRule", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// UpdateRule请求参数结构体
    public struct UpdateRuleRequest: TCRequestModel {
        /// 规则Id
        public let ruleId: String
        
        /// 名称
        public let name: String?
        
        /// 描述
        public let description: String?
        
        /// 查询
        public let query: RuleQuery
        
        /// 转发动作列表
        public let actions: [Action]?
        
        /// 数据类型（0：文本，1：二进制）
        public let dataType: UInt64?
        
        public init (ruleId: String, name: String?, description: String?, query: RuleQuery, actions: [Action]?, dataType: UInt64?) {
            self.ruleId = ruleId
            self.name = name
            self.description = description
            self.query = query
            self.actions = actions
            self.dataType = dataType
        }
        
        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case name = "Name"
            case description = "Description"
            case query = "Query"
            case actions = "Actions"
            case dataType = "DataType"
        }
    }
    
    /// UpdateRule返回参数结构体
    public struct UpdateRuleResponse: TCResponseModel {
        /// 规则
        public let rule: Rule
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case rule = "Rule"
            case requestId = "RequestId"
        }
    }
}