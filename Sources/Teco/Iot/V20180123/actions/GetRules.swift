//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Iot {
    /// GetRules请求参数结构体
    public struct GetRulesRequest: TCPaginatedRequest {
        /// 偏移
        public let offset: UInt64?

        /// 长度
        public let length: UInt64?

        public init(offset: UInt64? = nil, length: UInt64? = nil) {
            self.offset = offset
            self.length = length
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case length = "Length"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: GetRulesResponse) -> GetRulesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return GetRulesRequest(offset: (self.offset ?? 0) + .init(response.getItems().count), length: self.length)
        }
    }

    /// GetRules返回参数结构体
    public struct GetRulesResponse: TCPaginatedResponse {
        /// 规则列表
        public let rules: [Rule]

        /// 规则总数
        public let total: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case total = "Total"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Rule] {
            self.rules
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 获取转发规则列表
    @inlinable
    public func getRules(_ input: GetRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetRulesResponse> {
        self.client.execute(action: "GetRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取转发规则列表
    @inlinable
    public func getRules(_ input: GetRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetRulesResponse {
        try await self.client.execute(action: "GetRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取转发规则列表
    @inlinable
    public func getRules(offset: UInt64? = nil, length: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetRulesResponse> {
        self.getRules(.init(offset: offset, length: length), region: region, logger: logger, on: eventLoop)
    }

    /// 获取转发规则列表
    @inlinable
    public func getRules(offset: UInt64? = nil, length: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetRulesResponse {
        try await self.getRules(.init(offset: offset, length: length), region: region, logger: logger, on: eventLoop)
    }

    /// 获取转发规则列表
    @inlinable
    public func getRulesPaginated(_ input: GetRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [Rule])> {
        self.client.paginate(input: input, region: region, command: self.getRules, logger: logger, on: eventLoop)
    }

    /// 获取转发规则列表
    @inlinable @discardableResult
    public func getRulesPaginated(_ input: GetRulesRequest, region: TCRegion? = nil, onResponse: @escaping (GetRulesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getRules, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取转发规则列表
    ///
    /// - Returns: `AsyncSequence`s of `Rule` and `GetRulesResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func getRulesPaginator(_ input: GetRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<GetRulesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.getRules, logger: logger, on: eventLoop)
    }
}
