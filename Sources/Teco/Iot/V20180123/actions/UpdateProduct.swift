//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Iot {
    /// UpdateProduct请求参数结构体
    public struct UpdateProductRequest: TCRequest {
        /// 产品Id
        public let productId: String

        /// 产品名称
        public let name: String?

        /// 产品描述
        public let description: String?

        /// 数据模版
        public let dataTemplate: [DataTemplate]?

        public init(productId: String, name: String? = nil, description: String? = nil, dataTemplate: [DataTemplate]? = nil) {
            self.productId = productId
            self.name = name
            self.description = description
            self.dataTemplate = dataTemplate
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case name = "Name"
            case description = "Description"
            case dataTemplate = "DataTemplate"
        }
    }

    /// UpdateProduct返回参数结构体
    public struct UpdateProductResponse: TCResponse {
        /// 更新后的产品信息
        public let product: Product

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case product = "Product"
            case requestId = "RequestId"
        }
    }

    /// 更新产品信息
    ///
    /// 提供修改产品信息及数据模板的能力。
    @inlinable
    public func updateProduct(_ input: UpdateProductRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateProductResponse> {
        self.client.execute(action: "UpdateProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新产品信息
    ///
    /// 提供修改产品信息及数据模板的能力。
    @inlinable
    public func updateProduct(_ input: UpdateProductRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateProductResponse {
        try await self.client.execute(action: "UpdateProduct", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新产品信息
    ///
    /// 提供修改产品信息及数据模板的能力。
    @inlinable
    public func updateProduct(productId: String, name: String? = nil, description: String? = nil, dataTemplate: [DataTemplate]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateProductResponse> {
        self.updateProduct(.init(productId: productId, name: name, description: description, dataTemplate: dataTemplate), region: region, logger: logger, on: eventLoop)
    }

    /// 更新产品信息
    ///
    /// 提供修改产品信息及数据模板的能力。
    @inlinable
    public func updateProduct(productId: String, name: String? = nil, description: String? = nil, dataTemplate: [DataTemplate]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateProductResponse {
        try await self.updateProduct(.init(productId: productId, name: name, description: description, dataTemplate: dataTemplate), region: region, logger: logger, on: eventLoop)
    }
}
