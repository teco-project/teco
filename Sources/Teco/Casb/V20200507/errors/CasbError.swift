//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

/// Service error type returned by `Casb`.
public protocol TCCasbErrorType: TCServiceErrorType {
    /// Get the service error as ``TCCasbError``.
    ///
    /// - Returns: ``TCCasbError`` that holds the same error code and context.
    func asCasbError() -> TCCasbError
}

public struct TCCasbError: TCCasbErrorType {
    enum Code: String {
        case internalError = "InternalError"
        case invalidParameter = "InvalidParameter"
        case resourceInUse = "ResourceInUse"
        case resourceNotFound = "ResourceNotFound"
        case unauthorizedOperation = "UnauthorizedOperation"
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 内部错误。
    public static var internalError: TCCasbError {
        TCCasbError(.internalError)
    }

    /// 参数错误。
    public static var invalidParameter: TCCasbError {
        TCCasbError(.invalidParameter)
    }

    /// 资源被占用。
    public static var resourceInUse: TCCasbError {
        TCCasbError(.resourceInUse)
    }

    /// 资源不存在。
    public static var resourceNotFound: TCCasbError {
        TCCasbError(.resourceNotFound)
    }

    /// 未授权操作。
    public static var unauthorizedOperation: TCCasbError {
        TCCasbError(.unauthorizedOperation)
    }

    public func asCasbError() -> TCCasbError {
        return self
    }
}
