//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCZjError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case accountNotFound = "InvalidParameter.AccountNotFound"
            case licenseMultipleSmsAccount = "InvalidParameter.LicenseMultipleSmsAccount"
            case licenseNotEmpty = "InvalidParameter.LicenseNotEmpty"
            case licenseSmsAccountNotFound = "InvalidParameter.LicenseSmsAccountNotFound"
            case smsPostLinkActionTimeNotNull = "InvalidParameter.SmsPostLinkActionTimeNotNull"
            case smsPostLinkActionType = "InvalidParameter.SmsPostLinkActionType"
            case smsPostLinkActionTypeNotEmpty = "InvalidParameter.SmsPostLinkActionTypeNotEmpty"
            case smsPostLinkActionValueExceedLimit = "InvalidParameter.SmsPostLinkActionValueExceedLimit"
            case smsPostLinkParamsExceedLimit = "InvalidParameter.SmsPostLinkParamsExceedLimit"
            case smsPostLinkTypeKey = "InvalidParameter.SmsPostLinkTypeKey"
            case smsPostLinkTypeKeyNotEmpty = "InvalidParameter.SmsPostLinkTypeKeyNotEmpty"
            case smsPostLinkTypeValueExceedLimit = "InvalidParameter.SmsPostLinkTypeValueExceedLimit"
            case smsPostLinkTypeValueNotEmpty = "InvalidParameter.SmsPostLinkTypeValueNotEmpty"
            case smsSignCheckingInSmsAccount = "InvalidParameter.SmsSignCheckingInSmsAccount"
            case smsSignExistsInSmsAccount = "InvalidParameter.SmsSignExistsInSmsAccount"
            case smsSignPic = "InvalidParameter.SmsSignPic"
            case uinNotEmpty = "InvalidParameter.UinNotEmpty"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 找不到该账号。
        public static var accountNotFound: InvalidParameter {
            InvalidParameter(.accountNotFound)
        }
        
        /// license找到多个对应的短信子账号。
        public static var licenseMultipleSmsAccount: InvalidParameter {
            InvalidParameter(.licenseMultipleSmsAccount)
        }
        
        /// license不能为空。
        public static var licenseNotEmpty: InvalidParameter {
            InvalidParameter(.licenseNotEmpty)
        }
        
        /// license没有对应的短信子账号。
        public static var licenseSmsAccountNotFound: InvalidParameter {
            InvalidParameter(.licenseSmsAccountNotFound)
        }
        
        /// 行为时间不能为空。
        public static var smsPostLinkActionTimeNotNull: InvalidParameter {
            InvalidParameter(.smsPostLinkActionTimeNotNull)
        }
        
        /// 行为类型不合法。
        public static var smsPostLinkActionType: InvalidParameter {
            InvalidParameter(.smsPostLinkActionType)
        }
        
        /// 行为类型不能为空。
        public static var smsPostLinkActionTypeNotEmpty: InvalidParameter {
            InvalidParameter(.smsPostLinkActionTypeNotEmpty)
        }
        
        /// 行为值长度超出限制。
        public static var smsPostLinkActionValueExceedLimit: InvalidParameter {
            InvalidParameter(.smsPostLinkActionValueExceedLimit)
        }
        
        /// 附加参数数量超出限制。
        public static var smsPostLinkParamsExceedLimit: InvalidParameter {
            InvalidParameter(.smsPostLinkParamsExceedLimit)
        }
        
        /// 设备标识类型不合法。
        public static var smsPostLinkTypeKey: InvalidParameter {
            InvalidParameter(.smsPostLinkTypeKey)
        }
        
        /// 设备标识类型不能为空。
        public static var smsPostLinkTypeKeyNotEmpty: InvalidParameter {
            InvalidParameter(.smsPostLinkTypeKeyNotEmpty)
        }
        
        /// 设备标识值长度超出限制。
        public static var smsPostLinkTypeValueExceedLimit: InvalidParameter {
            InvalidParameter(.smsPostLinkTypeValueExceedLimit)
        }
        
        /// 设备标识值不能为空。
        public static var smsPostLinkTypeValueNotEmpty: InvalidParameter {
            InvalidParameter(.smsPostLinkTypeValueNotEmpty)
        }
        
        /// 签名审核中，请等待审核，无需重复创建。
        public static var smsSignCheckingInSmsAccount: InvalidParameter {
            InvalidParameter(.smsSignCheckingInSmsAccount)
        }
        
        /// 当前子账号下已存在该签名。
        public static var smsSignExistsInSmsAccount: InvalidParameter {
            InvalidParameter(.smsSignExistsInSmsAccount)
        }
        
        /// 证明图片不合法。
        public static var smsSignPic: InvalidParameter {
            InvalidParameter(.smsSignPic)
        }
        
        /// Uin不能为空。
        public static var uinNotEmpty: InvalidParameter {
            InvalidParameter(.uinNotEmpty)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
    }
}

extension TCZjError.InvalidParameter: Equatable {
    public static func == (lhs: TCZjError.InvalidParameter, rhs: TCZjError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCZjError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCZjError.InvalidParameter {
    public func toZjError() -> TCZjError {
        guard let code = TCZjError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCZjError(code, context: self.context)
    }
}