//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Zj {
    /// GetCrowdPackList请求参数结构体
    public struct GetCrowdPackListRequest: TCPaginatedRequest {
        /// 商户证书
        public let license: String

        /// 偏移量
        public let offset: Int64

        /// 限制返回数量
        public let limit: Int64

        /// 人群包名称，用于过滤人群包
        public let name: String?

        /// 人群包状态，默认-1，用于过滤人群包
        public let status: Int64?

        public init(license: String, offset: Int64, limit: Int64, name: String? = nil, status: Int64? = nil) {
            self.license = license
            self.offset = offset
            self.limit = limit
            self.name = name
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case license = "License"
            case offset = "Offset"
            case limit = "Limit"
            case name = "Name"
            case status = "Status"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: GetCrowdPackListResponse) -> GetCrowdPackListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return GetCrowdPackListRequest(license: self.license, offset: self.offset + .init(response.getItems().count), limit: self.limit, name: self.name, status: self.status)
        }
    }

    /// GetCrowdPackList返回参数结构体
    public struct GetCrowdPackListResponse: TCPaginatedResponse {
        /// 人群包信息列表
        public let data: SmsGetCrowdPackListResponse

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [SmsGetCrowdPackList] {
            self.data.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data.total
        }
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(_ input: GetCrowdPackListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCrowdPackListResponse> {
        self.client.execute(action: "GetCrowdPackList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(_ input: GetCrowdPackListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetCrowdPackListResponse {
        try await self.client.execute(action: "GetCrowdPackList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(license: String, offset: Int64, limit: Int64, name: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCrowdPackListResponse> {
        let input = GetCrowdPackListRequest(license: license, offset: offset, limit: limit, name: name, status: status)
        return self.client.execute(action: "GetCrowdPackList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(license: String, offset: Int64, limit: Int64, name: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetCrowdPackListResponse {
        let input = GetCrowdPackListRequest(license: license, offset: offset, limit: limit, name: name, status: status)
        return try await self.client.execute(action: "GetCrowdPackList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackListPaginated(_ input: GetCrowdPackListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [SmsGetCrowdPackList])> {
        self.client.paginate(input: input, region: region, command: self.getCrowdPackList, logger: logger, on: eventLoop)
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackListPaginated(_ input: GetCrowdPackListRequest, region: TCRegion? = nil, onResponse: @escaping (GetCrowdPackListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getCrowdPackList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackListPaginator(_ input: GetCrowdPackListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<GetCrowdPackListRequest, GetCrowdPackListResponse>.ResultSequence, responses: TCClient.Paginator<GetCrowdPackListRequest, GetCrowdPackListResponse>.ResponseSequence) {
        let results = TCClient.Paginator<GetCrowdPackListRequest, GetCrowdPackListResponse>.ResultSequence(input: input, region: region, command: self.getCrowdPackList, logger: logger, on: eventLoop)
        let responses = TCClient.Paginator<GetCrowdPackListRequest, GetCrowdPackListResponse>.ResponseSequence(input: input, region: region, command: self.getCrowdPackList, logger: logger, on: eventLoop)
        return (results, responses)
    }
}
