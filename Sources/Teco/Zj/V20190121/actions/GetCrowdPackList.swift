//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Zj {
    /// GetCrowdPackList请求参数结构体
    public struct GetCrowdPackListRequest: TCRequestModel {
        /// 商户证书
        public let license: String

        /// 偏移量
        public let offset: Int64

        /// 限制返回数量
        public let limit: Int64

        /// 人群包名称，用于过滤人群包
        public let name: String?

        /// 人群包状态，默认-1，用于过滤人群包
        public let status: Int64?

        public init(license: String, offset: Int64, limit: Int64, name: String? = nil, status: Int64? = nil) {
            self.license = license
            self.offset = offset
            self.limit = limit
            self.name = name
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case license = "License"
            case offset = "Offset"
            case limit = "Limit"
            case name = "Name"
            case status = "Status"
        }
    }

    /// GetCrowdPackList返回参数结构体
    public struct GetCrowdPackListResponse: TCResponseModel {
        /// 人群包信息列表
        public let data: SmsGetCrowdPackListResponse

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(_ input: GetCrowdPackListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCrowdPackListResponse> {
        self.client.execute(action: "GetCrowdPackList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(_ input: GetCrowdPackListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetCrowdPackListResponse {
        try await self.client.execute(action: "GetCrowdPackList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(license: String, offset: Int64, limit: Int64, name: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCrowdPackListResponse> {
        self.getCrowdPackList(GetCrowdPackListRequest(license: license, offset: offset, limit: limit, name: name, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 获取人群包列表
    ///
    /// 获取人群包列表接口
    @inlinable
    public func getCrowdPackList(license: String, offset: Int64, limit: Int64, name: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetCrowdPackListResponse {
        try await self.getCrowdPackList(GetCrowdPackListRequest(license: license, offset: offset, limit: limit, name: name, status: status), region: region, logger: logger, on: eventLoop)
    }
}
