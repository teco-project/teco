//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Cr {
    /// DownloadRecordList请求参数结构体
    public struct DownloadRecordListRequest: TCRequestModel {
        /// 模块名，本接口取值：Record
        public let module: String

        /// 操作名，本接口取值：DownloadList
        public let operation: String

        /// 录音日期，格式为YYYY-MM-DD
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var bizDate: Date

        /// 实例ID
        public let instId: String

        public init(module: String, operation: String, bizDate: Date, instId: String) {
            self.module = module
            self.operation = operation
            self._bizDate = .init(wrappedValue: bizDate)
            self.instId = instId
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
            case bizDate = "BizDate"
            case instId = "InstId"
        }
    }

    /// DownloadRecordList返回参数结构体
    public struct DownloadRecordListResponse: TCResponseModel {
        /// 录音列表下载地址
        public let recordListUrl: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case recordListUrl = "RecordListUrl"
            case requestId = "RequestId"
        }
    }

    /// 录音查询（文件）
    ///
    /// <p>用于获取录音下载链接清单，次日早上8:00后可查询前日录音清单。</p>
    /// <p>注意：录音清单中的录音下载链接仅次日20:00之前有效，请及时下载。</p>
    @inlinable
    public func downloadRecordList(_ input: DownloadRecordListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DownloadRecordListResponse> {
        self.client.execute(action: "DownloadRecordList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 录音查询（文件）
    ///
    /// <p>用于获取录音下载链接清单，次日早上8:00后可查询前日录音清单。</p>
    /// <p>注意：录音清单中的录音下载链接仅次日20:00之前有效，请及时下载。</p>
    @inlinable
    public func downloadRecordList(_ input: DownloadRecordListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DownloadRecordListResponse {
        try await self.client.execute(action: "DownloadRecordList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 录音查询（文件）
    ///
    /// <p>用于获取录音下载链接清单，次日早上8:00后可查询前日录音清单。</p>
    /// <p>注意：录音清单中的录音下载链接仅次日20:00之前有效，请及时下载。</p>
    @inlinable
    public func downloadRecordList(module: String, operation: String, bizDate: Date, instId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DownloadRecordListResponse> {
        self.downloadRecordList(.init(module: module, operation: operation, bizDate: bizDate, instId: instId), region: region, logger: logger, on: eventLoop)
    }

    /// 录音查询（文件）
    ///
    /// <p>用于获取录音下载链接清单，次日早上8:00后可查询前日录音清单。</p>
    /// <p>注意：录音清单中的录音下载链接仅次日20:00之前有效，请及时下载。</p>
    @inlinable
    public func downloadRecordList(module: String, operation: String, bizDate: Date, instId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DownloadRecordListResponse {
        try await self.downloadRecordList(.init(module: module, operation: operation, bizDate: bizDate, instId: instId), region: region, logger: logger, on: eventLoop)
    }
}
