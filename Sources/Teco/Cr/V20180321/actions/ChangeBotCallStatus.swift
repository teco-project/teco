//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Cr {
    /// ChangeBotCallStatus请求参数结构体
    public struct ChangeBotCallStatusRequest: TCRequestModel {
        /// 模块名。默认值（固定）：AiApi
        public let module: String

        /// 操作名。默认值（固定）：ChangeBotCallStatus
        public let operation: String

        /// 作业变更状态
        /// SUSPEND：暂停；EXECUTE：恢复；
        public let status: String

        /// 作业唯一标识
        public let callId: String

        /// 业务日期
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var bizDate: Date

        /// 任务ID，二者必填一个
        public let botId: String?

        /// 任务名称，二者必填一个
        public let botName: String?

        public init(module: String, operation: String, status: String, callId: String, bizDate: Date, botId: String? = nil, botName: String? = nil) {
            self.module = module
            self.operation = operation
            self.status = status
            self.callId = callId
            self._bizDate = .init(wrappedValue: bizDate)
            self.botId = botId
            self.botName = botName
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
            case status = "Status"
            case callId = "CallId"
            case bizDate = "BizDate"
            case botId = "BotId"
            case botName = "BotName"
        }
    }

    /// ChangeBotCallStatus返回参数结构体
    public struct ChangeBotCallStatusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新机器人任务作业状态
    @inlinable @discardableResult
    public func changeBotCallStatus(_ input: ChangeBotCallStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChangeBotCallStatusResponse> {
        self.client.execute(action: "ChangeBotCallStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新机器人任务作业状态
    @inlinable @discardableResult
    public func changeBotCallStatus(_ input: ChangeBotCallStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChangeBotCallStatusResponse {
        try await self.client.execute(action: "ChangeBotCallStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新机器人任务作业状态
    @inlinable @discardableResult
    public func changeBotCallStatus(module: String, operation: String, status: String, callId: String, bizDate: Date, botId: String? = nil, botName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChangeBotCallStatusResponse> {
        let input = ChangeBotCallStatusRequest(module: module, operation: operation, status: status, callId: callId, bizDate: bizDate, botId: botId, botName: botName)
        return self.client.execute(action: "ChangeBotCallStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新机器人任务作业状态
    @inlinable @discardableResult
    public func changeBotCallStatus(module: String, operation: String, status: String, callId: String, bizDate: Date, botId: String? = nil, botName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChangeBotCallStatusResponse {
        let input = ChangeBotCallStatusRequest(module: module, operation: operation, status: status, callId: callId, bizDate: bizDate, botId: botId, botName: botName)
        return try await self.client.execute(action: "ChangeBotCallStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
