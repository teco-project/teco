//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cr {
    /// QueryBotList请求参数结构体
    public struct QueryBotListRequest: TCRequestModel {
        /// 模块名：AiApi
        public let module: String

        /// 操作名：QueryBotList
        public let operation: String

        public init(module: String, operation: String) {
            self.module = module
            self.operation = operation
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
        }
    }

    /// QueryBotList返回参数结构体
    public struct QueryBotListResponse: TCResponseModel {
        /// 任务列表。
        public let botList: [BotInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case botList = "BotList"
            case requestId = "RequestId"
        }
    }

    /// 查询机器人任务状态列表
    @inlinable
    public func queryBotList(_ input: QueryBotListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryBotListResponse> {
        self.client.execute(action: "QueryBotList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询机器人任务状态列表
    @inlinable
    public func queryBotList(_ input: QueryBotListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryBotListResponse {
        try await self.client.execute(action: "QueryBotList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询机器人任务状态列表
    @inlinable
    public func queryBotList(module: String, operation: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryBotListResponse> {
        self.queryBotList(.init(module: module, operation: operation), region: region, logger: logger, on: eventLoop)
    }

    /// 查询机器人任务状态列表
    @inlinable
    public func queryBotList(module: String, operation: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryBotListResponse {
        try await self.queryBotList(.init(module: module, operation: operation), region: region, logger: logger, on: eventLoop)
    }
}
