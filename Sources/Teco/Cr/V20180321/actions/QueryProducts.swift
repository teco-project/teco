//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cr {
    /// QueryProducts请求参数结构体
    public struct QueryProductsRequest: TCRequestModel {
        /// 模块名。默认值（固定）：Product
        public let module: String

        /// 操作名。默认值（固定）：QueryProducts
        public let operation: String

        /// 实例Id。
        public let instanceId: String

        public init(module: String, operation: String, instanceId: String) {
            self.module = module
            self.operation = operation
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
            case instanceId = "InstanceId"
        }
    }

    /// QueryProducts返回参数结构体
    public struct QueryProductsResponse: TCResponseModel {
        /// 产品信息。
        public let productList: [ProductQueryInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case productList = "ProductList"
            case requestId = "RequestId"
        }
    }

    /// 查询产品列表
    @inlinable
    public func queryProducts(_ input: QueryProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryProductsResponse> {
        self.client.execute(action: "QueryProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询产品列表
    @inlinable
    public func queryProducts(_ input: QueryProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryProductsResponse {
        try await self.client.execute(action: "QueryProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询产品列表
    @inlinable
    public func queryProducts(module: String, operation: String, instanceId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryProductsResponse> {
        self.queryProducts(QueryProductsRequest(module: module, operation: operation, instanceId: instanceId), logger: logger, on: eventLoop)
    }

    /// 查询产品列表
    @inlinable
    public func queryProducts(module: String, operation: String, instanceId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryProductsResponse {
        try await self.queryProducts(QueryProductsRequest(module: module, operation: operation, instanceId: instanceId), logger: logger, on: eventLoop)
    }
}
