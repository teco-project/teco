//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cr {
    /// QueryInstantData请求参数结构体
    public struct QueryInstantDataRequest: TCRequestModel {
        /// 模块名，本接口取值：Data
        public let module: String

        /// 操作名，本接口取值：Query
        public let operation: String

        /// 产品ID
        public let productId: String?

        /// 实例ID，不传默认为系统分配的初始实例
        public let instanceId: String?

        /// 查询类型：callRecord 通话记录
        public let queryModel: String?

        /// 查询参数
        public let data: String?

        public init(module: String, operation: String, productId: String? = nil, instanceId: String? = nil, queryModel: String? = nil, data: String? = nil) {
            self.module = module
            self.operation = operation
            self.productId = productId
            self.instanceId = instanceId
            self.queryModel = queryModel
            self.data = data
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
            case productId = "ProductId"
            case instanceId = "InstanceId"
            case queryModel = "QueryModel"
            case data = "Data"
        }
    }

    /// QueryInstantData返回参数结构体
    public struct QueryInstantDataResponse: TCResponseModel {
        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 返回内容
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 实时数据查询
    @inlinable
    public func queryInstantData(_ input: QueryInstantDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryInstantDataResponse> {
        self.client.execute(action: "QueryInstantData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 实时数据查询
    @inlinable
    public func queryInstantData(_ input: QueryInstantDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryInstantDataResponse {
        try await self.client.execute(action: "QueryInstantData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 实时数据查询
    @inlinable
    public func queryInstantData(module: String, operation: String, productId: String? = nil, instanceId: String? = nil, queryModel: String? = nil, data: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryInstantDataResponse> {
        self.queryInstantData(.init(module: module, operation: operation, productId: productId, instanceId: instanceId, queryModel: queryModel, data: data), region: region, logger: logger, on: eventLoop)
    }

    /// 实时数据查询
    @inlinable
    public func queryInstantData(module: String, operation: String, productId: String? = nil, instanceId: String? = nil, queryModel: String? = nil, data: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryInstantDataResponse {
        try await self.queryInstantData(.init(module: module, operation: operation, productId: productId, instanceId: instanceId, queryModel: queryModel, data: data), region: region, logger: logger, on: eventLoop)
    }
}
