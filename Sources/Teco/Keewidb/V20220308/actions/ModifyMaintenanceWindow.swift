//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Keewidb {
    /// ModifyMaintenanceWindow请求参数结构体
    public struct ModifyMaintenanceWindowRequest: TCRequestModel {
        /// 实例 ID，如：kee-6ubh****。
        public let instanceId: String

        /// 维护时间窗起始时间，如：03:00。
        public let startTime: String

        /// 维护时间窗结束时间，如：06:00。
        public let endTime: String

        public init(instanceId: String, startTime: String, endTime: String) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// ModifyMaintenanceWindow返回参数结构体
    public struct ModifyMaintenanceWindowResponse: TCResponseModel {
        /// 执行结果。<ul><li>success：修改成功。 </li> <li>failed：修改失败。</li></ul>
        public let status: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 修改实例维护时间窗时间
    ///
    /// 本接口（ModifyMaintenanceWindow）修改实例维护时间窗时间。
    @inlinable
    public func modifyMaintenanceWindow(_ input: ModifyMaintenanceWindowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMaintenanceWindowResponse> {
        self.client.execute(action: "ModifyMaintenanceWindow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例维护时间窗时间
    ///
    /// 本接口（ModifyMaintenanceWindow）修改实例维护时间窗时间。
    @inlinable
    public func modifyMaintenanceWindow(_ input: ModifyMaintenanceWindowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMaintenanceWindowResponse {
        try await self.client.execute(action: "ModifyMaintenanceWindow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例维护时间窗时间
    ///
    /// 本接口（ModifyMaintenanceWindow）修改实例维护时间窗时间。
    @inlinable
    public func modifyMaintenanceWindow(instanceId: String, startTime: String, endTime: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMaintenanceWindowResponse> {
        self.modifyMaintenanceWindow(.init(instanceId: instanceId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实例维护时间窗时间
    ///
    /// 本接口（ModifyMaintenanceWindow）修改实例维护时间窗时间。
    @inlinable
    public func modifyMaintenanceWindow(instanceId: String, startTime: String, endTime: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMaintenanceWindowResponse {
        try await self.modifyMaintenanceWindow(.init(instanceId: instanceId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
