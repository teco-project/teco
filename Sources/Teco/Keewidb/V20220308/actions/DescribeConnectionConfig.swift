//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Keewidb {
    /// DescribeConnectionConfig请求参数结构体
    public struct DescribeConnectionConfigRequest: TCRequestModel {
        /// 实例 ID，如：kee-6ubh****。
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeConnectionConfig返回参数结构体
    public struct DescribeConnectionConfigResponse: TCResponseModel {
        /// 单分片入流量带宽限制，单位：MB。
        public let inNetLimit: Int64

        /// 单分片出流量带宽限制，单位：MB。
        public let outNetLimit: Int64

        /// 单分片连接数限制。
        public let clientLimit: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case inNetLimit = "InNetLimit"
            case outNetLimit = "OutNetLimit"
            case clientLimit = "ClientLimit"
            case requestId = "RequestId"
        }
    }

    /// 查询实例连接配置
    ///
    /// 本接口（DescribeConnectionConfig）用于查询实例连接配置，包括出流量和入流量带宽、最大连接数限制。
    @inlinable
    public func describeConnectionConfig(_ input: DescribeConnectionConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeConnectionConfigResponse> {
        self.client.execute(action: "DescribeConnectionConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例连接配置
    ///
    /// 本接口（DescribeConnectionConfig）用于查询实例连接配置，包括出流量和入流量带宽、最大连接数限制。
    @inlinable
    public func describeConnectionConfig(_ input: DescribeConnectionConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConnectionConfigResponse {
        try await self.client.execute(action: "DescribeConnectionConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例连接配置
    ///
    /// 本接口（DescribeConnectionConfig）用于查询实例连接配置，包括出流量和入流量带宽、最大连接数限制。
    @inlinable
    public func describeConnectionConfig(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeConnectionConfigResponse> {
        self.describeConnectionConfig(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例连接配置
    ///
    /// 本接口（DescribeConnectionConfig）用于查询实例连接配置，包括出流量和入流量带宽、最大连接数限制。
    @inlinable
    public func describeConnectionConfig(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConnectionConfigResponse {
        try await self.describeConnectionConfig(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
