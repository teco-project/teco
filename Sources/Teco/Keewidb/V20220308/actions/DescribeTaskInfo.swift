//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Keewidb {
    /// DescribeTaskInfo请求参数结构体
    public struct DescribeTaskInfoRequest: TCRequest {
        /// 任务 ID。
        public let taskId: UInt64

        public init(taskId: UInt64) {
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
        }
    }

    /// DescribeTaskInfo返回参数结构体
    public struct DescribeTaskInfoResponse: TCResponse {
        /// 任务状态。
        /// - preparing：待执行。
        /// - running：执行中。
        /// - succeed：成功。
        /// - failed：失败。
        /// - error：执行出错。
        public let status: String

        /// 任务开始时间。
        public let startTime: String

        /// 任务类型。
        public let taskType: String

        /// 实例的ID。
        public let instanceId: String

        /// 任务信息，错误时显示错误信息。执行中与成功则为空值。
        public let taskMessage: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case startTime = "StartTime"
            case taskType = "TaskType"
            case instanceId = "InstanceId"
            case taskMessage = "TaskMessage"
            case requestId = "RequestId"
        }
    }

    /// 查询异步任务结果
    ///
    /// 本接口（DescribeTaskInfo）用于查询异步任务结果。
    @inlinable
    public func describeTaskInfo(_ input: DescribeTaskInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskInfoResponse> {
        self.client.execute(action: "DescribeTaskInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询异步任务结果
    ///
    /// 本接口（DescribeTaskInfo）用于查询异步任务结果。
    @inlinable
    public func describeTaskInfo(_ input: DescribeTaskInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskInfoResponse {
        try await self.client.execute(action: "DescribeTaskInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询异步任务结果
    ///
    /// 本接口（DescribeTaskInfo）用于查询异步任务结果。
    @inlinable
    public func describeTaskInfo(taskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskInfoResponse> {
        self.describeTaskInfo(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询异步任务结果
    ///
    /// 本接口（DescribeTaskInfo）用于查询异步任务结果。
    @inlinable
    public func describeTaskInfo(taskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskInfoResponse {
        try await self.describeTaskInfo(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
