//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Keewidb {
    /// DescribeInstanceNodeInfo请求参数结构体
    public struct DescribeInstanceNodeInfoRequest: TCRequestModel {
        /// 实例 ID，如：kee-6ubh****。
        public let instanceId: String

        /// 每页输出的节点信息大小。默认为 20。
        public let limit: Int64?

        /// 分页偏移量，取Limit整数倍。计算公式：offset=limit*(页码-1)。
        public let offset: Int64?

        public init(instanceId: String, limit: Int64? = nil, offset: Int64? = nil) {
            self.instanceId = instanceId
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case limit = "Limit"
            case offset = "Offset"
        }
    }

    /// DescribeInstanceNodeInfo返回参数结构体
    public struct DescribeInstanceNodeInfoResponse: TCResponseModel {
        /// Proxy 节点数量。
        public let proxyCount: Int64

        /// Proxy 节点信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxy: [ProxyNodeInfo]?

        /// Redis 节点数量。该参数仅为产品兼容性而保留，并不具有实际意义，可忽略。
        public let redisCount: Int64

        /// Redis 节点信息。该参数仅为产品兼容性而保留，并不具有实际意义，可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let redis: [RedisNodeInfo]?

        /// Tendis 节点数量。该参数仅为产品兼容性而保留，并不具有实际意义，可忽略。
        public let tendisCount: Int64

        /// Tendis 节点信息。该参数仅为产品兼容性而保留，并不具有实际意义，可忽略。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tendis: [InstanceNodeInfo]?

        /// KeewiDB 节点数量。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keeWiDBCount: Int64?

        /// KeewiDB 节点信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keeWiDB: [InstanceNodeInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case proxyCount = "ProxyCount"
            case proxy = "Proxy"
            case redisCount = "RedisCount"
            case redis = "Redis"
            case tendisCount = "TendisCount"
            case tendis = "Tendis"
            case keeWiDBCount = "KeeWiDBCount"
            case keeWiDB = "KeeWiDB"
            case requestId = "RequestId"
        }
    }

    /// 查询实例节点信息
    ///
    /// 本接口（DescribeInstanceNodeInfo）查询实例节点信息。
    @inlinable
    public func describeInstanceNodeInfo(_ input: DescribeInstanceNodeInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceNodeInfoResponse> {
        self.client.execute(action: "DescribeInstanceNodeInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例节点信息
    ///
    /// 本接口（DescribeInstanceNodeInfo）查询实例节点信息。
    @inlinable
    public func describeInstanceNodeInfo(_ input: DescribeInstanceNodeInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceNodeInfoResponse {
        try await self.client.execute(action: "DescribeInstanceNodeInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例节点信息
    ///
    /// 本接口（DescribeInstanceNodeInfo）查询实例节点信息。
    @inlinable
    public func describeInstanceNodeInfo(instanceId: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceNodeInfoResponse> {
        self.describeInstanceNodeInfo(.init(instanceId: instanceId, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例节点信息
    ///
    /// 本接口（DescribeInstanceNodeInfo）查询实例节点信息。
    @inlinable
    public func describeInstanceNodeInfo(instanceId: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceNodeInfoResponse {
        try await self.describeInstanceNodeInfo(.init(instanceId: instanceId, limit: limit, offset: offset), region: region, logger: logger, on: eventLoop)
    }
}
