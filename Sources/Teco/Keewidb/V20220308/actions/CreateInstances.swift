//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Keewidb {
    /// CreateInstances请求参数结构体
    public struct CreateInstancesRequest: TCRequestModel {
        /// 产品版本。
        /// 14：当前仅支持混合存储版。
        public let typeId: UInt64

        /// 私有网络唯一ID。
        /// 请登录控制台在私有网络列表查询，如：vpc-azlk3***。
        public let uniqVpcId: String

        /// 私有网络所属子网唯一ID。
        /// 请登录控制台在私有网络列表查询，如：subnet-8abje***。
        public let uniqSubnetId: String

        /// 计费模式。
        /// - 0：按量计费。
        /// - 1：包年包月。
        public let billingMode: Int64

        /// 实例数量，单次最大购买数量以查询产品售卖规格返回的数量为准。
        public let goodsNum: UInt64

        /// 选择包年包月计费模式（BillingMode 设置为1）时，您需要选择购买实例的时长。单位：月，取值范围 [1,2,3,4,5,6,7,8,9,10,11,12,24,36]。按量计费（BillingMode 设置为0）实例该参数设置为1即可。
        public let period: UInt64

        /// 分片数量，支持选择3、5、6、8、9、10、12、15、16、18、20、21、24、25、27、30、32、33、35、36、39、40、42、45、48、50、51、54、55、56、57、60、63、64分片。
        public let shardNum: Int64

        /// 副本数。当前仅支持设置1个副本节点，即每一个分片仅包含1个主节点与1个副本节点，数据主从实时热备。
        public let replicasNum: Int64

        /// 实例内存容量，单位：GB。
        /// KeeWiDB 内存容量**MachineMemory**与持久内存容量**MemSize**为固定搭配，即2GB内存，固定分配8GB的持久内存，不可选择。具体信息，请参见[产品规格](https://cloud.tencent.com/document/product/1520/80808)。
        public let machineMemory: Int64

        /// 实例所属的可用区ID。
        /// - 具体取值，请参见[地域和可用区](https://cloud.tencent.com/document/product/239/4106)获取。
        /// - 参数**ZoneId**和**ZoneName**至少配置其中一个。
        public let zoneId: UInt64?

        /// 实例所属的可用区名称。
        /// - 具体取值，请参见[地域和可用区](https://cloud.tencent.com/document/product/239/4106)获取。
        /// - 参数**ZoneId**和**ZoneName**至少配置其中一个。
        public let zoneName: String?

        /// 创建实例的名称。
        /// 仅支持长度小于60的中文、英文或者数字，短划线"-"、下划线"_"。
        public let instanceName: String?

        /// 指明创建的实例是否需要支持免密访问。
        /// - true：免密实例。
        /// - false：非免密实例，默认为非免密实例。此时，需要设置访问密码。
        public let noAuth: Bool?

        /// 实例访问密码。
        /// - 当参数**NoAuth**为**true**时，Password为无需设置，否则Password为必填参数。</li>
        /// - 密码复杂度要求：
        ///   - 8-30个字符。
        ///   - 至少包含小写字母、大写字母、数字和字符 ()`~!@#$%^&*-+=_|{}[]:;<>,.?/ 中的2种。
        ///   - 不能以"/"开头。
        public let password: String?

        /// 自定义端口。默认为6379，范围[1024,65535]。
        public let vPort: UInt64?

        /// 包年包月计费的续费模式。
        /// - 0：默认状态，指手动续费。
        /// - 1：自动续费。
        /// - 2：到期不再续费。
        public let autoRenew: UInt64?

        /// 给实例设置安全组 ID 数组。
        public let securityGroupIdList: [String]?

        /// 给实例绑定标签。
        public let resourceTags: [ResourceTag]?

        /// 混合存储版，单分片持久化内存容量，单位：GB。
        /// KeeWiDB 内存容量**MachineMemory**与持久内存容量**MemSize**为固定搭配，即2GB内存，固定分配8GB的持久内存，不可选择。具体信息，请参见[产品规格](https://cloud.tencent.com/document/product/1520/80808)。
        public let memSize: Int64?

        /// 每个分片硬盘的容量。单位：GB。
        /// 每一缓存分片容量，对应的磁盘容量范围不同。具体信息，请参见[产品规格](https://cloud.tencent.com/document/product/1520/80808)。
        public let diskSize: Int64?

        /// 计算 CPU 核数，可忽略不传。CPU 核数与内存为固定搭配，具体信息，请参见[产品规格](https://cloud.tencent.com/document/product/1520/80808)。
        public let machineCpu: Int64?

        /// 项目id，取值以用户账户>用户账户相关接口查询>项目列表返回的projectId为准。
        public let projectId: Int64?

        /// 数据压缩开关。
        /// - ON：开启，默认开启压缩。
        /// - OFF：关闭。
        public let compression: String?

        public init(typeId: UInt64, uniqVpcId: String, uniqSubnetId: String, billingMode: Int64, goodsNum: UInt64, period: UInt64, shardNum: Int64, replicasNum: Int64, machineMemory: Int64, zoneId: UInt64? = nil, zoneName: String? = nil, instanceName: String? = nil, noAuth: Bool? = nil, password: String? = nil, vPort: UInt64? = nil, autoRenew: UInt64? = nil, securityGroupIdList: [String]? = nil, resourceTags: [ResourceTag]? = nil, memSize: Int64? = nil, diskSize: Int64? = nil, machineCpu: Int64? = nil, projectId: Int64? = nil, compression: String? = nil) {
            self.typeId = typeId
            self.uniqVpcId = uniqVpcId
            self.uniqSubnetId = uniqSubnetId
            self.billingMode = billingMode
            self.goodsNum = goodsNum
            self.period = period
            self.shardNum = shardNum
            self.replicasNum = replicasNum
            self.machineMemory = machineMemory
            self.zoneId = zoneId
            self.zoneName = zoneName
            self.instanceName = instanceName
            self.noAuth = noAuth
            self.password = password
            self.vPort = vPort
            self.autoRenew = autoRenew
            self.securityGroupIdList = securityGroupIdList
            self.resourceTags = resourceTags
            self.memSize = memSize
            self.diskSize = diskSize
            self.machineCpu = machineCpu
            self.projectId = projectId
            self.compression = compression
        }

        enum CodingKeys: String, CodingKey {
            case typeId = "TypeId"
            case uniqVpcId = "UniqVpcId"
            case uniqSubnetId = "UniqSubnetId"
            case billingMode = "BillingMode"
            case goodsNum = "GoodsNum"
            case period = "Period"
            case shardNum = "ShardNum"
            case replicasNum = "ReplicasNum"
            case machineMemory = "MachineMemory"
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case instanceName = "InstanceName"
            case noAuth = "NoAuth"
            case password = "Password"
            case vPort = "VPort"
            case autoRenew = "AutoRenew"
            case securityGroupIdList = "SecurityGroupIdList"
            case resourceTags = "ResourceTags"
            case memSize = "MemSize"
            case diskSize = "DiskSize"
            case machineCpu = "MachineCpu"
            case projectId = "ProjectId"
            case compression = "Compression"
        }
    }

    /// CreateInstances返回参数结构体
    public struct CreateInstancesResponse: TCResponseModel {
        /// 交易 ID。
        public let dealId: String

        /// 实例 ID 。
        public let instanceIds: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dealId = "DealId"
            case instanceIds = "InstanceIds"
            case requestId = "RequestId"
        }
    }

    /// 创建数据库实例
    @inlinable
    public func createInstances(_ input: CreateInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInstancesResponse> {
        self.client.execute(action: "CreateInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据库实例
    @inlinable
    public func createInstances(_ input: CreateInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInstancesResponse {
        try await self.client.execute(action: "CreateInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据库实例
    @inlinable
    public func createInstances(typeId: UInt64, uniqVpcId: String, uniqSubnetId: String, billingMode: Int64, goodsNum: UInt64, period: UInt64, shardNum: Int64, replicasNum: Int64, machineMemory: Int64, zoneId: UInt64? = nil, zoneName: String? = nil, instanceName: String? = nil, noAuth: Bool? = nil, password: String? = nil, vPort: UInt64? = nil, autoRenew: UInt64? = nil, securityGroupIdList: [String]? = nil, resourceTags: [ResourceTag]? = nil, memSize: Int64? = nil, diskSize: Int64? = nil, machineCpu: Int64? = nil, projectId: Int64? = nil, compression: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateInstancesResponse> {
        self.createInstances(.init(typeId: typeId, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, billingMode: billingMode, goodsNum: goodsNum, period: period, shardNum: shardNum, replicasNum: replicasNum, machineMemory: machineMemory, zoneId: zoneId, zoneName: zoneName, instanceName: instanceName, noAuth: noAuth, password: password, vPort: vPort, autoRenew: autoRenew, securityGroupIdList: securityGroupIdList, resourceTags: resourceTags, memSize: memSize, diskSize: diskSize, machineCpu: machineCpu, projectId: projectId, compression: compression), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据库实例
    @inlinable
    public func createInstances(typeId: UInt64, uniqVpcId: String, uniqSubnetId: String, billingMode: Int64, goodsNum: UInt64, period: UInt64, shardNum: Int64, replicasNum: Int64, machineMemory: Int64, zoneId: UInt64? = nil, zoneName: String? = nil, instanceName: String? = nil, noAuth: Bool? = nil, password: String? = nil, vPort: UInt64? = nil, autoRenew: UInt64? = nil, securityGroupIdList: [String]? = nil, resourceTags: [ResourceTag]? = nil, memSize: Int64? = nil, diskSize: Int64? = nil, machineCpu: Int64? = nil, projectId: Int64? = nil, compression: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateInstancesResponse {
        try await self.createInstances(.init(typeId: typeId, uniqVpcId: uniqVpcId, uniqSubnetId: uniqSubnetId, billingMode: billingMode, goodsNum: goodsNum, period: period, shardNum: shardNum, replicasNum: replicasNum, machineMemory: machineMemory, zoneId: zoneId, zoneName: zoneName, instanceName: instanceName, noAuth: noAuth, password: password, vPort: vPort, autoRenew: autoRenew, securityGroupIdList: securityGroupIdList, resourceTags: resourceTags, memSize: memSize, diskSize: diskSize, machineCpu: machineCpu, projectId: projectId, compression: compression), region: region, logger: logger, on: eventLoop)
    }
}
