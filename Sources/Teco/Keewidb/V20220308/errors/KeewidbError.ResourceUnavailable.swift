//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCKeewidbError {
    public struct ResourceUnavailable: TCKeewidbErrorType {
        enum Code: String {
            case callOssError = "ResourceUnavailable.CallOssError"
            case instanceConfError = "ResourceUnavailable.InstanceConfError"
            case instanceLockedError = "ResourceUnavailable.InstanceLockedError"
            case instanceStateError = "ResourceUnavailable.InstanceStateError"
            case instanceStatusAbnormal = "ResourceUnavailable.InstanceStatusAbnormal"
            case instanceStatusError = "ResourceUnavailable.InstanceStatusError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 调用后端接口失败。
        public static var callOssError: ResourceUnavailable {
            ResourceUnavailable(.callOssError)
        }

        /// 实例配置错误。
        public static var instanceConfError: ResourceUnavailable {
            ResourceUnavailable(.instanceConfError)
        }

        /// 实例已经被其它流程锁定。
        public static var instanceLockedError: ResourceUnavailable {
            ResourceUnavailable(.instanceLockedError)
        }

        /// 实例状态错误。
        public static var instanceStateError: ResourceUnavailable {
            ResourceUnavailable(.instanceStateError)
        }

        /// 实例状态异常，不能执行对应流程。
        public static var instanceStatusAbnormal: ResourceUnavailable {
            ResourceUnavailable(.instanceStatusAbnormal)
        }

        /// 实例状态异常，不能执行对应操作。
        public static var instanceStatusError: ResourceUnavailable {
            ResourceUnavailable(.instanceStatusError)
        }

        public func asKeewidbError() -> TCKeewidbError {
            let code: TCKeewidbError.Code
            switch self.error {
            case .callOssError:
                code = .resourceUnavailable_CallOssError
            case .instanceConfError:
                code = .resourceUnavailable_InstanceConfError
            case .instanceLockedError:
                code = .resourceUnavailable_InstanceLockedError
            case .instanceStateError:
                code = .resourceUnavailable_InstanceStateError
            case .instanceStatusAbnormal:
                code = .resourceUnavailable_InstanceStatusAbnormal
            case .instanceStatusError:
                code = .resourceUnavailable_InstanceStatusError
            }
            return TCKeewidbError(code, context: self.context)
        }
    }
}
