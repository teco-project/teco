//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mmps {
    /// CreateAppScanTask请求参数结构体
    public struct CreateAppScanTaskRequest: TCRequestModel {
        /// 任务类型, 0:基础版, 1:专家版, 2:本地化
        public let taskType: Int64

        /// 任务来源, 0:小程序诊断, 1:预留字段(暂未使用), 2:app诊断(android);
        public let source: Int64

        /// 小程序AppID
        public let appPackage: String

        /// 应用平台, 0:android, 1:ios, 2:小程序
        public let platform: Int64

        /// 小程序名称
        public let appName: String?

        /// 小程序版本
        public let appVersion: String?

        /// 联系人信息
        public let contactName: String?

        /// 联系电话
        public let telNumber: String?

        /// 公司名称
        public let corpName: String?

        /// 商务对接人员
        public let salesPerson: String?

        /// 公司邮箱
        public let email: String?

        public init(taskType: Int64, source: Int64, appPackage: String, platform: Int64, appName: String? = nil, appVersion: String? = nil, contactName: String? = nil, telNumber: String? = nil, corpName: String? = nil, salesPerson: String? = nil, email: String? = nil) {
            self.taskType = taskType
            self.source = source
            self.appPackage = appPackage
            self.platform = platform
            self.appName = appName
            self.appVersion = appVersion
            self.contactName = contactName
            self.telNumber = telNumber
            self.corpName = corpName
            self.salesPerson = salesPerson
            self.email = email
        }

        enum CodingKeys: String, CodingKey {
            case taskType = "TaskType"
            case source = "Source"
            case appPackage = "AppPackage"
            case platform = "Platform"
            case appName = "AppName"
            case appVersion = "AppVersion"
            case contactName = "ContactName"
            case telNumber = "TelNumber"
            case corpName = "CorpName"
            case salesPerson = "SalesPerson"
            case email = "Email"
        }
    }

    /// CreateAppScanTask返回参数结构体
    public struct CreateAppScanTaskResponse: TCResponseModel {
        /// 返回值, 0:成功, 其他值请查看“返回值”定义
        public let result: Int64

        /// 任务id
        public let taskID: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case taskID = "TaskID"
            case requestId = "RequestId"
        }
    }

    /// 创建小程序隐私合规诊断任务
    @inlinable
    public func createAppScanTask(_ input: CreateAppScanTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAppScanTaskResponse> {
        self.client.execute(action: "CreateAppScanTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建小程序隐私合规诊断任务
    @inlinable
    public func createAppScanTask(_ input: CreateAppScanTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAppScanTaskResponse {
        try await self.client.execute(action: "CreateAppScanTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建小程序隐私合规诊断任务
    @inlinable
    public func createAppScanTask(taskType: Int64, source: Int64, appPackage: String, platform: Int64, appName: String? = nil, appVersion: String? = nil, contactName: String? = nil, telNumber: String? = nil, corpName: String? = nil, salesPerson: String? = nil, email: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAppScanTaskResponse> {
        self.createAppScanTask(CreateAppScanTaskRequest(taskType: taskType, source: source, appPackage: appPackage, platform: platform, appName: appName, appVersion: appVersion, contactName: contactName, telNumber: telNumber, corpName: corpName, salesPerson: salesPerson, email: email), logger: logger, on: eventLoop)
    }

    /// 创建小程序隐私合规诊断任务
    @inlinable
    public func createAppScanTask(taskType: Int64, source: Int64, appPackage: String, platform: Int64, appName: String? = nil, appVersion: String? = nil, contactName: String? = nil, telNumber: String? = nil, corpName: String? = nil, salesPerson: String? = nil, email: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAppScanTaskResponse {
        try await self.createAppScanTask(CreateAppScanTaskRequest(taskType: taskType, source: source, appPackage: appPackage, platform: platform, appName: appName, appVersion: appVersion, contactName: contactName, telNumber: telNumber, corpName: corpName, salesPerson: salesPerson, email: email), logger: logger, on: eventLoop)
    }
}
