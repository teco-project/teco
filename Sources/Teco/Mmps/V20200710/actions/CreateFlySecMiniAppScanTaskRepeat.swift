//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Mmps {
    /// CreateFlySecMiniAppScanTaskRepeat请求参数结构体
    public struct CreateFlySecMiniAppScanTaskRepeatRequest: TCRequestModel {
        /// 小程序AppID
        public let miniAppID: String

        /// 诊断模式 1:基础诊断
        public let mode: Int64

        /// 原任务id
        public let orgTaskID: String

        /// 小程序测试账号(自有账号体系需提供,其他情况不需要)
        public let miniAppTestAccount: String?

        /// 小程序测试密码(自有账号体系需提供,其他情况不需要)
        public let miniAppTestPwd: String?

        /// 诊断扫描版本 0:正式版 1:体验版
        public let scanVersion: Int64?

        public init(miniAppID: String, mode: Int64, orgTaskID: String, miniAppTestAccount: String? = nil, miniAppTestPwd: String? = nil, scanVersion: Int64? = nil) {
            self.miniAppID = miniAppID
            self.mode = mode
            self.orgTaskID = orgTaskID
            self.miniAppTestAccount = miniAppTestAccount
            self.miniAppTestPwd = miniAppTestPwd
            self.scanVersion = scanVersion
        }

        enum CodingKeys: String, CodingKey {
            case miniAppID = "MiniAppID"
            case mode = "Mode"
            case orgTaskID = "OrgTaskID"
            case miniAppTestAccount = "MiniAppTestAccount"
            case miniAppTestPwd = "MiniAppTestPwd"
            case scanVersion = "ScanVersion"
        }
    }

    /// CreateFlySecMiniAppScanTaskRepeat返回参数结构体
    public struct CreateFlySecMiniAppScanTaskRepeatResponse: TCResponseModel {
        /// 返回值, 0:成功, 其他值请查看“返回值”定义
        public let ret: Int64

        /// 任务id
        public let taskID: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ret = "Ret"
            case taskID = "TaskID"
            case requestId = "RequestId"
        }
    }

    /// 重新提交诊断任务
    ///
    /// 重新提交基础诊断任务
    @inlinable
    public func createFlySecMiniAppScanTaskRepeat(_ input: CreateFlySecMiniAppScanTaskRepeatRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlySecMiniAppScanTaskRepeatResponse> {
        self.client.execute(action: "CreateFlySecMiniAppScanTaskRepeat", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 重新提交诊断任务
    ///
    /// 重新提交基础诊断任务
    @inlinable
    public func createFlySecMiniAppScanTaskRepeat(_ input: CreateFlySecMiniAppScanTaskRepeatRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlySecMiniAppScanTaskRepeatResponse {
        try await self.client.execute(action: "CreateFlySecMiniAppScanTaskRepeat", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 重新提交诊断任务
    ///
    /// 重新提交基础诊断任务
    @inlinable
    public func createFlySecMiniAppScanTaskRepeat(miniAppID: String, mode: Int64, orgTaskID: String, miniAppTestAccount: String? = nil, miniAppTestPwd: String? = nil, scanVersion: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlySecMiniAppScanTaskRepeatResponse> {
        self.createFlySecMiniAppScanTaskRepeat(.init(miniAppID: miniAppID, mode: mode, orgTaskID: orgTaskID, miniAppTestAccount: miniAppTestAccount, miniAppTestPwd: miniAppTestPwd, scanVersion: scanVersion), region: region, logger: logger, on: eventLoop)
    }

    /// 重新提交诊断任务
    ///
    /// 重新提交基础诊断任务
    @inlinable
    public func createFlySecMiniAppScanTaskRepeat(miniAppID: String, mode: Int64, orgTaskID: String, miniAppTestAccount: String? = nil, miniAppTestPwd: String? = nil, scanVersion: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlySecMiniAppScanTaskRepeatResponse {
        try await self.createFlySecMiniAppScanTaskRepeat(.init(miniAppID: miniAppID, mode: mode, orgTaskID: orgTaskID, miniAppTestAccount: miniAppTestAccount, miniAppTestPwd: miniAppTestPwd, scanVersion: scanVersion), region: region, logger: logger, on: eventLoop)
    }
}
