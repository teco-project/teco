//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mmps {
    /// DescribeBasicDiagnosisResourceUsageInfo请求参数结构体
    public struct DescribeBasicDiagnosisResourceUsageInfoRequest: TCRequestModel {
        /// 诊断模式 1:基础诊断，2:深度诊断
        public let mode: Int64

        public init(mode: Int64) {
            self.mode = mode
        }

        enum CodingKeys: String, CodingKey {
            case mode = "Mode"
        }
    }

    /// DescribeBasicDiagnosisResourceUsageInfo返回参数结构体
    public struct DescribeBasicDiagnosisResourceUsageInfoResponse: TCResponseModel {
        /// 返回值, 0:成功, 其他值请查看“返回值”定义
        public let ret: Int64

        /// 资源类型
        public let resourceName: String

        /// 资源总数
        public let total: Int64

        /// 资源未使用次数
        public let unusedCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ret = "Ret"
            case resourceName = "ResourceName"
            case total = "Total"
            case unusedCount = "UnusedCount"
            case requestId = "RequestId"
        }
    }

    /// 查询基础诊断资源使用情况
    ///
    /// 查询翼扬安全基础诊断资源使用情况
    @inlinable
    public func describeBasicDiagnosisResourceUsageInfo(_ input: DescribeBasicDiagnosisResourceUsageInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBasicDiagnosisResourceUsageInfoResponse> {
        self.client.execute(action: "DescribeBasicDiagnosisResourceUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询基础诊断资源使用情况
    ///
    /// 查询翼扬安全基础诊断资源使用情况
    @inlinable
    public func describeBasicDiagnosisResourceUsageInfo(_ input: DescribeBasicDiagnosisResourceUsageInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBasicDiagnosisResourceUsageInfoResponse {
        try await self.client.execute(action: "DescribeBasicDiagnosisResourceUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询基础诊断资源使用情况
    ///
    /// 查询翼扬安全基础诊断资源使用情况
    @inlinable
    public func describeBasicDiagnosisResourceUsageInfo(mode: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBasicDiagnosisResourceUsageInfoResponse> {
        let input = DescribeBasicDiagnosisResourceUsageInfoRequest(mode: mode)
        return self.client.execute(action: "DescribeBasicDiagnosisResourceUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询基础诊断资源使用情况
    ///
    /// 查询翼扬安全基础诊断资源使用情况
    @inlinable
    public func describeBasicDiagnosisResourceUsageInfo(mode: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBasicDiagnosisResourceUsageInfoResponse {
        let input = DescribeBasicDiagnosisResourceUsageInfoRequest(mode: mode)
        return try await self.client.execute(action: "DescribeBasicDiagnosisResourceUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
