//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mmps {
    /// DescribeResourceUsageInfo请求参数结构体
    public struct DescribeResourceUsageInfoRequest: TCRequest {
        public init() {
        }
    }

    /// DescribeResourceUsageInfo返回参数结构体
    public struct DescribeResourceUsageInfoResponse: TCResponse {
        /// 返回值, 0:成功, 其他值请查看“返回值”定义
        public let ret: Int64

        /// 安全资源数据列表
        public let data: [ResourceUsageInfoData]

        /// 安全资源数量
        public let total: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ret = "Ret"
            case data = "Data"
            case total = "Total"
            case requestId = "RequestId"
        }
    }

    /// 查询安全资源使用情况
    ///
    /// 查询翼扬安全资源使用情况
    @inlinable
    public func describeResourceUsageInfo(_ input: DescribeResourceUsageInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceUsageInfoResponse> {
        self.client.execute(action: "DescribeResourceUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询安全资源使用情况
    ///
    /// 查询翼扬安全资源使用情况
    @inlinable
    public func describeResourceUsageInfo(_ input: DescribeResourceUsageInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceUsageInfoResponse {
        try await self.client.execute(action: "DescribeResourceUsageInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询安全资源使用情况
    ///
    /// 查询翼扬安全资源使用情况
    @inlinable
    public func describeResourceUsageInfo(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceUsageInfoResponse> {
        self.describeResourceUsageInfo(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询安全资源使用情况
    ///
    /// 查询翼扬安全资源使用情况
    @inlinable
    public func describeResourceUsageInfo(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceUsageInfoResponse {
        try await self.describeResourceUsageInfo(.init(), region: region, logger: logger, on: eventLoop)
    }
}
