//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Hasim {
    /// DescribeLinks请求参数结构体
    public struct DescribeLinksRequest: TCRequestModel {
        /// 云兔卡ID
        public let linkID: Int64?

        /// 运营商ICCID
        public let iccid: String?

        /// 设备码
        public let imei: String?

        /// 卡片状态
        public let status: UInt64?

        /// 运营商 1移动 2联通 3电信
        public let teleOperator: UInt64?

        /// 标签ID
        public let tagID: UInt64?

        /// 策略ID
        public let tacticID: UInt64?

        /// 设备在线状态 0 未激活 1 在线 2 离线
        public let linkedState: Int64?

        /// 标签ID 集合
        public let tagIDs: [Int64]?

        public init(linkID: Int64? = nil, iccid: String? = nil, imei: String? = nil, status: UInt64? = nil, teleOperator: UInt64? = nil, tagID: UInt64? = nil, tacticID: UInt64? = nil, linkedState: Int64? = nil, tagIDs: [Int64]? = nil) {
            self.linkID = linkID
            self.iccid = iccid
            self.imei = imei
            self.status = status
            self.teleOperator = teleOperator
            self.tagID = tagID
            self.tacticID = tacticID
            self.linkedState = linkedState
            self.tagIDs = tagIDs
        }

        enum CodingKeys: String, CodingKey {
            case linkID = "LinkID"
            case iccid = "ICCID"
            case imei = "IMEI"
            case status = "Status"
            case teleOperator = "TeleOperator"
            case tagID = "TagID"
            case tacticID = "TacticID"
            case linkedState = "LinkedState"
            case tagIDs = "TagIDs"
        }
    }

    /// DescribeLinks返回参数结构体
    public struct DescribeLinksResponse: TCResponseModel {
        /// 云兔连接响应信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: LinkInfos?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询云兔连接列表
    @inlinable
    public func describeLinks(_ input: DescribeLinksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLinksResponse> {
        self.client.execute(action: "DescribeLinks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云兔连接列表
    @inlinable
    public func describeLinks(_ input: DescribeLinksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLinksResponse {
        try await self.client.execute(action: "DescribeLinks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云兔连接列表
    @inlinable
    public func describeLinks(linkID: Int64? = nil, iccid: String? = nil, imei: String? = nil, status: UInt64? = nil, teleOperator: UInt64? = nil, tagID: UInt64? = nil, tacticID: UInt64? = nil, linkedState: Int64? = nil, tagIDs: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLinksResponse> {
        self.describeLinks(.init(linkID: linkID, iccid: iccid, imei: imei, status: status, teleOperator: teleOperator, tagID: tagID, tacticID: tacticID, linkedState: linkedState, tagIDs: tagIDs), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云兔连接列表
    @inlinable
    public func describeLinks(linkID: Int64? = nil, iccid: String? = nil, imei: String? = nil, status: UInt64? = nil, teleOperator: UInt64? = nil, tagID: UInt64? = nil, tacticID: UInt64? = nil, linkedState: Int64? = nil, tagIDs: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLinksResponse {
        try await self.describeLinks(.init(linkID: linkID, iccid: iccid, imei: imei, status: status, teleOperator: teleOperator, tagID: tagID, tacticID: tacticID, linkedState: linkedState, tagIDs: tagIDs), region: region, logger: logger, on: eventLoop)
    }
}
