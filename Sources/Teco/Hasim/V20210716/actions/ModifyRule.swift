//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Hasim {
    /// ModifyRule请求参数结构体
    public struct ModifyRuleRequest: TCRequest {
        /// 自动化规则名称
        public let name: String

        /// 规则类型：用量类(101 当月|102有效期内)、位置类(201行政区|202移动距离)、网络质量类(301网络盲点)
        public let type: Int64

        /// 是否激活
        public let isActive: Bool

        /// 触发动作：1 邮件 2 API请求 3 微信 4 停卡 5 地图标识为盲点
        public let notice: Int64

        /// 自动化规则ID
        public let ruleID: Int64

        /// 邮箱
        public let email: String?

        /// 推送的API地址
        public let url: String?

        /// 用量阈值
        public let dataThreshold: Int64?

        /// 行政区类型：1. 省份 2. 城市 3. 区
        public let district: Int64?

        /// 心跳移动距离阈值
        public let distance: Int64?

        /// 信号强度阈值
        public let signalStrength: Int64?

        /// 标签ID集合
        public let tagIDs: [Int64]?

        /// 资费计划
        public let salePlan: String?

        /// 具体的账号
        public let uinAccount: String?

        public init(name: String, type: Int64, isActive: Bool, notice: Int64, ruleID: Int64, email: String? = nil, url: String? = nil, dataThreshold: Int64? = nil, district: Int64? = nil, distance: Int64? = nil, signalStrength: Int64? = nil, tagIDs: [Int64]? = nil, salePlan: String? = nil, uinAccount: String? = nil) {
            self.name = name
            self.type = type
            self.isActive = isActive
            self.notice = notice
            self.ruleID = ruleID
            self.email = email
            self.url = url
            self.dataThreshold = dataThreshold
            self.district = district
            self.distance = distance
            self.signalStrength = signalStrength
            self.tagIDs = tagIDs
            self.salePlan = salePlan
            self.uinAccount = uinAccount
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case isActive = "IsActive"
            case notice = "Notice"
            case ruleID = "RuleID"
            case email = "Email"
            case url = "Url"
            case dataThreshold = "DataThreshold"
            case district = "District"
            case distance = "Distance"
            case signalStrength = "SignalStrength"
            case tagIDs = "TagIDs"
            case salePlan = "SalePlan"
            case uinAccount = "UinAccount"
        }
    }

    /// ModifyRule返回参数结构体
    public struct ModifyRuleResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 编辑自动化规则
    @inlinable @discardableResult
    public func modifyRule(_ input: ModifyRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRuleResponse> {
        self.client.execute(action: "ModifyRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑自动化规则
    @inlinable @discardableResult
    public func modifyRule(_ input: ModifyRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRuleResponse {
        try await self.client.execute(action: "ModifyRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑自动化规则
    @inlinable @discardableResult
    public func modifyRule(name: String, type: Int64, isActive: Bool, notice: Int64, ruleID: Int64, email: String? = nil, url: String? = nil, dataThreshold: Int64? = nil, district: Int64? = nil, distance: Int64? = nil, signalStrength: Int64? = nil, tagIDs: [Int64]? = nil, salePlan: String? = nil, uinAccount: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRuleResponse> {
        self.modifyRule(.init(name: name, type: type, isActive: isActive, notice: notice, ruleID: ruleID, email: email, url: url, dataThreshold: dataThreshold, district: district, distance: distance, signalStrength: signalStrength, tagIDs: tagIDs, salePlan: salePlan, uinAccount: uinAccount), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑自动化规则
    @inlinable @discardableResult
    public func modifyRule(name: String, type: Int64, isActive: Bool, notice: Int64, ruleID: Int64, email: String? = nil, url: String? = nil, dataThreshold: Int64? = nil, district: Int64? = nil, distance: Int64? = nil, signalStrength: Int64? = nil, tagIDs: [Int64]? = nil, salePlan: String? = nil, uinAccount: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRuleResponse {
        try await self.modifyRule(.init(name: name, type: type, isActive: isActive, notice: notice, ruleID: ruleID, email: email, url: url, dataThreshold: dataThreshold, district: district, distance: distance, signalStrength: signalStrength, tagIDs: tagIDs, salePlan: salePlan, uinAccount: uinAccount), region: region, logger: logger, on: eventLoop)
    }
}
