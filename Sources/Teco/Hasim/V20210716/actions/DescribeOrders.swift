//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Hasim {
    /// DescribeOrders请求参数结构体
    public struct DescribeOrdersRequest: TCPaginatedRequest {
        /// 子订单ID
        public let dealName: String?

        /// 审批状态 0全部 1通过 2驳回 3待审核
        public let auditStatus: Int64?

        /// 翻页大小
        public let limit: UInt64?

        /// 翻页偏移
        public let offset: UInt64?

        /// 开始时间,例如2022-06-30 00:00:00
        public let beginTime: String?

        /// 结束时间,例如2022-06-30 00:00:00
        public let endTime: String?

        public init(dealName: String? = nil, auditStatus: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, beginTime: String? = nil, endTime: String? = nil) {
            self.dealName = dealName
            self.auditStatus = auditStatus
            self.limit = limit
            self.offset = offset
            self.beginTime = beginTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case dealName = "DealName"
            case auditStatus = "AuditStatus"
            case limit = "Limit"
            case offset = "Offset"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: DescribeOrdersResponse) -> DescribeOrdersRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeOrdersRequest(dealName: self.dealName, auditStatus: self.auditStatus, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), beginTime: self.beginTime, endTime: self.endTime)
        }
    }

    /// DescribeOrders返回参数结构体
    public struct DescribeOrdersResponse: TCPaginatedResponse {
        /// 订单列表
        public let data: Orders

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [OrderInfo] {
            self.data.list ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.data.total
        }
    }

    /// 查询订单列表
    @inlinable
    public func describeOrders(_ input: DescribeOrdersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrdersResponse> {
        self.client.execute(action: "DescribeOrders", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询订单列表
    @inlinable
    public func describeOrders(_ input: DescribeOrdersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrdersResponse {
        try await self.client.execute(action: "DescribeOrders", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询订单列表
    @inlinable
    public func describeOrders(dealName: String? = nil, auditStatus: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, beginTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrdersResponse> {
        let input = DescribeOrdersRequest(dealName: dealName, auditStatus: auditStatus, limit: limit, offset: offset, beginTime: beginTime, endTime: endTime)
        return self.client.execute(action: "DescribeOrders", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询订单列表
    @inlinable
    public func describeOrders(dealName: String? = nil, auditStatus: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, beginTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrdersResponse {
        let input = DescribeOrdersRequest(dealName: dealName, auditStatus: auditStatus, limit: limit, offset: offset, beginTime: beginTime, endTime: endTime)
        return try await self.client.execute(action: "DescribeOrders", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
