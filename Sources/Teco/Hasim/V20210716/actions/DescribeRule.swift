//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Hasim {
    /// DescribeRule请求参数结构体
    public struct DescribeRuleRequest: TCRequestModel {
        /// 自动化规则ID
        public let ruleID: Int64

        public init(ruleID: Int64) {
            self.ruleID = ruleID
        }

        enum CodingKeys: String, CodingKey {
            case ruleID = "RuleID"
        }
    }

    /// DescribeRule返回参数结构体
    public struct DescribeRuleResponse: TCResponseModel {
        /// 策略信息
        public let data: RuleDetail

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询自动化规则
    @inlinable
    public func describeRule(_ input: DescribeRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleResponse> {
        self.client.execute(action: "DescribeRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询自动化规则
    @inlinable
    public func describeRule(_ input: DescribeRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleResponse {
        try await self.client.execute(action: "DescribeRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询自动化规则
    @inlinable
    public func describeRule(ruleID: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleResponse> {
        self.describeRule(.init(ruleID: ruleID), region: region, logger: logger, on: eventLoop)
    }

    /// 查询自动化规则
    @inlinable
    public func describeRule(ruleID: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleResponse {
        try await self.describeRule(.init(ruleID: ruleID), region: region, logger: logger, on: eventLoop)
    }
}
