//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Hasim {
    /// DescribeLink请求参数结构体
    public struct DescribeLinkRequest: TCRequestModel {
        /// 云兔卡ID
        public let linkID: Int64

        /// 具体的账号
        public let uinAccount: String?

        public init(linkID: Int64, uinAccount: String? = nil) {
            self.linkID = linkID
            self.uinAccount = uinAccount
        }

        enum CodingKeys: String, CodingKey {
            case linkID = "LinkID"
            case uinAccount = "UinAccount"
        }
    }

    /// DescribeLink返回参数结构体
    public struct DescribeLinkResponse: TCResponseModel {
        /// 云兔连接详细信息
        public let data: LinkDetailInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询云兔连接详细信息
    @inlinable
    public func describeLink(_ input: DescribeLinkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLinkResponse> {
        self.client.execute(action: "DescribeLink", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云兔连接详细信息
    @inlinable
    public func describeLink(_ input: DescribeLinkRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLinkResponse {
        try await self.client.execute(action: "DescribeLink", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云兔连接详细信息
    @inlinable
    public func describeLink(linkID: Int64, uinAccount: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLinkResponse> {
        self.describeLink(.init(linkID: linkID, uinAccount: uinAccount), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云兔连接详细信息
    @inlinable
    public func describeLink(linkID: Int64, uinAccount: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLinkResponse {
        try await self.describeLink(.init(linkID: linkID, uinAccount: uinAccount), region: region, logger: logger, on: eventLoop)
    }
}
