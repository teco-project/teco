//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dnspod {
    /// DescribeDomainGroupList请求参数结构体
    public struct DescribeDomainGroupListRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeDomainGroupList返回参数结构体
    public struct DescribeDomainGroupListResponse: TCResponseModel {
        /// 分组列表
        public let groupList: [GroupInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case groupList = "GroupList"
            case requestId = "RequestId"
        }
    }

    /// 获取域名分组列表
    @inlinable
    public func describeDomainGroupList(_ input: DescribeDomainGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainGroupListResponse> {
        self.client.execute(action: "DescribeDomainGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取域名分组列表
    @inlinable
    public func describeDomainGroupList(_ input: DescribeDomainGroupListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainGroupListResponse {
        try await self.client.execute(action: "DescribeDomainGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取域名分组列表
    @inlinable
    public func describeDomainGroupList(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainGroupListResponse> {
        let input = DescribeDomainGroupListRequest()
        return self.client.execute(action: "DescribeDomainGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取域名分组列表
    @inlinable
    public func describeDomainGroupList(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainGroupListResponse {
        let input = DescribeDomainGroupListRequest()
        return try await self.client.execute(action: "DescribeDomainGroupList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
