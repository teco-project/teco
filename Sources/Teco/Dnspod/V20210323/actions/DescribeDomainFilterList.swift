//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Dnspod {
    /// DescribeDomainFilterList请求参数结构体
    public struct DescribeDomainFilterListRequest: TCPaginatedRequest {
        /// 根据域名分组类型获取域名。可取值为 ALL，MINE，SHARE，RECENT。
        /// ALL：全部
        /// MINE：我的域名
        /// SHARE：共享给我的域名
        /// RECENT：最近操作过的域名
        public let type: String

        /// 记录开始的偏移, 第一条记录为 0, 依次类推。默认值为 0。
        public let offset: UInt64?

        /// 要获取的域名数量, 比如获取 20 个, 则为 20。默认值为 5000。如果账户中的域名数量超过了 5000, 将会强制分页并且只返回前 5000 条, 这时需要通过 Offset 和 Limit 参数去获取其它域名。
        public let limit: UInt64?

        /// 根据域名分组 id 获取域名，可通过 DescribeDomain 或 DescribeDomainList 接口 GroupId 字段获取。
        public let groupId: [Int64]?

        /// 根据关键字获取域名。
        public let keyword: String?

        /// 排序字段。可取值为 NAME，STATUS，RECORDS，GRADE，UPDATED_ON。
        /// NAME：域名名称
        /// STATUS：域名状态
        /// RECORDS：记录数量
        /// GRADE：套餐等级
        /// UPDATED_ON：更新时间
        public let sortField: String?

        /// 排序类型，升序：ASC，降序：DESC。
        public let sortType: String?

        /// 根据域名状态获取域名。可取值为 ENABLE，LOCK，PAUSE，SPAM。
        /// ENABLE：正常
        /// LOCK：锁定
        /// PAUSE：暂停
        /// SPAM：封禁
        public let status: [String]?

        /// 根据套餐获取域名，可通过 DescribeDomain 或 DescribeDomainList 接口 Grade 字段获取。
        public let package: [String]?

        /// 根据备注信息获取域名。
        public let remark: String?

        /// 要获取域名的更新时间起始时间点，如 '2021-05-01 03:00:00'。
        public let updatedAtBegin: String?

        /// 要获取域名的更新时间终止时间点，如 '2021-05-10 20:00:00'。
        public let updatedAtEnd: String?

        /// 要获取域名的记录数查询区间起点。
        public let recordCountBegin: UInt64?

        /// 要获取域名的记录数查询区间终点。
        public let recordCountEnd: UInt64?

        /// 项目ID
        public let projectId: Int64?

        /// 标签过滤
        public let tags: [TagItemFilter]?

        public init(type: String, offset: UInt64? = nil, limit: UInt64? = nil, groupId: [Int64]? = nil, keyword: String? = nil, sortField: String? = nil, sortType: String? = nil, status: [String]? = nil, package: [String]? = nil, remark: String? = nil, updatedAtBegin: String? = nil, updatedAtEnd: String? = nil, recordCountBegin: UInt64? = nil, recordCountEnd: UInt64? = nil, projectId: Int64? = nil, tags: [TagItemFilter]? = nil) {
            self.type = type
            self.offset = offset
            self.limit = limit
            self.groupId = groupId
            self.keyword = keyword
            self.sortField = sortField
            self.sortType = sortType
            self.status = status
            self.package = package
            self.remark = remark
            self.updatedAtBegin = updatedAtBegin
            self.updatedAtEnd = updatedAtEnd
            self.recordCountBegin = recordCountBegin
            self.recordCountEnd = recordCountEnd
            self.projectId = projectId
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case offset = "Offset"
            case limit = "Limit"
            case groupId = "GroupId"
            case keyword = "Keyword"
            case sortField = "SortField"
            case sortType = "SortType"
            case status = "Status"
            case package = "Package"
            case remark = "Remark"
            case updatedAtBegin = "UpdatedAtBegin"
            case updatedAtEnd = "UpdatedAtEnd"
            case recordCountBegin = "RecordCountBegin"
            case recordCountEnd = "RecordCountEnd"
            case projectId = "ProjectId"
            case tags = "Tags"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDomainFilterListResponse) -> DescribeDomainFilterListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(type: self.type, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, groupId: self.groupId, keyword: self.keyword, sortField: self.sortField, sortType: self.sortType, status: self.status, package: self.package, remark: self.remark, updatedAtBegin: self.updatedAtBegin, updatedAtEnd: self.updatedAtEnd, recordCountBegin: self.recordCountBegin, recordCountEnd: self.recordCountEnd, projectId: self.projectId, tags: self.tags)
        }
    }

    /// DescribeDomainFilterList返回参数结构体
    public struct DescribeDomainFilterListResponse: TCPaginatedResponse {
        /// 列表页统计信息
        public let domainCountInfo: DomainCountInfo

        /// 域名列表
        public let domainList: [DomainListItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case domainCountInfo = "DomainCountInfo"
            case domainList = "DomainList"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DomainListItem`` list from the paginated response.
        public func getItems() -> [DomainListItem] {
            self.domainList
        }
    }

    /// 获取域名筛选列表
    @inlinable
    public func describeDomainFilterList(_ input: DescribeDomainFilterListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainFilterListResponse> {
        self.client.execute(action: "DescribeDomainFilterList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取域名筛选列表
    @inlinable
    public func describeDomainFilterList(_ input: DescribeDomainFilterListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainFilterListResponse {
        try await self.client.execute(action: "DescribeDomainFilterList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取域名筛选列表
    @inlinable
    public func describeDomainFilterList(type: String, offset: UInt64? = nil, limit: UInt64? = nil, groupId: [Int64]? = nil, keyword: String? = nil, sortField: String? = nil, sortType: String? = nil, status: [String]? = nil, package: [String]? = nil, remark: String? = nil, updatedAtBegin: String? = nil, updatedAtEnd: String? = nil, recordCountBegin: UInt64? = nil, recordCountEnd: UInt64? = nil, projectId: Int64? = nil, tags: [TagItemFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDomainFilterListResponse> {
        self.describeDomainFilterList(.init(type: type, offset: offset, limit: limit, groupId: groupId, keyword: keyword, sortField: sortField, sortType: sortType, status: status, package: package, remark: remark, updatedAtBegin: updatedAtBegin, updatedAtEnd: updatedAtEnd, recordCountBegin: recordCountBegin, recordCountEnd: recordCountEnd, projectId: projectId, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 获取域名筛选列表
    @inlinable
    public func describeDomainFilterList(type: String, offset: UInt64? = nil, limit: UInt64? = nil, groupId: [Int64]? = nil, keyword: String? = nil, sortField: String? = nil, sortType: String? = nil, status: [String]? = nil, package: [String]? = nil, remark: String? = nil, updatedAtBegin: String? = nil, updatedAtEnd: String? = nil, recordCountBegin: UInt64? = nil, recordCountEnd: UInt64? = nil, projectId: Int64? = nil, tags: [TagItemFilter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDomainFilterListResponse {
        try await self.describeDomainFilterList(.init(type: type, offset: offset, limit: limit, groupId: groupId, keyword: keyword, sortField: sortField, sortType: sortType, status: status, package: package, remark: remark, updatedAtBegin: updatedAtBegin, updatedAtEnd: updatedAtEnd, recordCountBegin: recordCountBegin, recordCountEnd: recordCountEnd, projectId: projectId, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 获取域名筛选列表
    @inlinable
    public func describeDomainFilterListPaginated(_ input: DescribeDomainFilterListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [DomainListItem])> {
        self.client.paginate(input: input, region: region, command: self.describeDomainFilterList, logger: logger, on: eventLoop)
    }

    /// 获取域名筛选列表
    @inlinable @discardableResult
    public func describeDomainFilterListPaginated(_ input: DescribeDomainFilterListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDomainFilterListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDomainFilterList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取域名筛选列表
    ///
    /// - Returns: `AsyncSequence`s of ``DomainListItem`` and ``DescribeDomainFilterListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDomainFilterListPaginator(_ input: DescribeDomainFilterListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDomainFilterListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDomainFilterList, logger: logger, on: eventLoop)
    }
}
