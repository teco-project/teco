//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dnspod {
    /// DescribeVASStatistic请求参数结构体
    public struct DescribeVASStatisticRequest: TCRequestModel {
        /// 域名ID
        public let domainId: UInt64

        public init(domainId: UInt64) {
            self.domainId = domainId
        }

        enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
        }
    }

    /// DescribeVASStatistic返回参数结构体
    public struct DescribeVASStatisticResponse: TCResponseModel {
        /// 增值服务用量列表
        public let vasList: [VASStatisticItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case vasList = "VASList"
            case requestId = "RequestId"
        }
    }

    /// 获取域名增值服务用量
    @inlinable
    public func describeVASStatistic(_ input: DescribeVASStatisticRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVASStatisticResponse> {
        self.client.execute(action: "DescribeVASStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取域名增值服务用量
    @inlinable
    public func describeVASStatistic(_ input: DescribeVASStatisticRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVASStatisticResponse {
        try await self.client.execute(action: "DescribeVASStatistic", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取域名增值服务用量
    @inlinable
    public func describeVASStatistic(domainId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeVASStatisticResponse> {
        self.describeVASStatistic(.init(domainId: domainId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取域名增值服务用量
    @inlinable
    public func describeVASStatistic(domainId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeVASStatisticResponse {
        try await self.describeVASStatistic(.init(domainId: domainId), region: region, logger: logger, on: eventLoop)
    }
}
