//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dnspod {
    /// ModifyRecordFields请求参数结构体
    public struct ModifyRecordFieldsRequest: TCRequestModel {
        /// 域名
        public let domain: String

        /// 记录 ID 。
        public let recordId: UInt64

        /// 要修改的记录属性和值，支持：sub_domain，record_line，record_line_id，record_type，value，ttl，status，mx，weight
        public let fieldList: [KeyValue]

        /// 域名 ID 。参数 DomainId 优先级比参数 Domain 高，如果传递参数 DomainId 将忽略参数 Domain 。
        public let domainId: UInt64?

        public init(domain: String, recordId: UInt64, fieldList: [KeyValue], domainId: UInt64? = nil) {
            self.domain = domain
            self.recordId = recordId
            self.fieldList = fieldList
            self.domainId = domainId
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case recordId = "RecordId"
            case fieldList = "FieldList"
            case domainId = "DomainId"
        }
    }

    /// ModifyRecordFields返回参数结构体
    public struct ModifyRecordFieldsResponse: TCResponseModel {
        /// 记录ID
        public let recordId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case recordId = "RecordId"
            case requestId = "RequestId"
        }
    }

    /// 修改记录可选字段
    @inlinable
    public func modifyRecordFields(_ input: ModifyRecordFieldsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRecordFieldsResponse> {
        self.client.execute(action: "ModifyRecordFields", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改记录可选字段
    @inlinable
    public func modifyRecordFields(_ input: ModifyRecordFieldsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRecordFieldsResponse {
        try await self.client.execute(action: "ModifyRecordFields", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改记录可选字段
    @inlinable
    public func modifyRecordFields(domain: String, recordId: UInt64, fieldList: [KeyValue], domainId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyRecordFieldsResponse> {
        let input = ModifyRecordFieldsRequest(domain: domain, recordId: recordId, fieldList: fieldList, domainId: domainId)
        return self.client.execute(action: "ModifyRecordFields", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改记录可选字段
    @inlinable
    public func modifyRecordFields(domain: String, recordId: UInt64, fieldList: [KeyValue], domainId: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyRecordFieldsResponse {
        let input = ModifyRecordFieldsRequest(domain: domain, recordId: recordId, fieldList: fieldList, domainId: domainId)
        return try await self.client.execute(action: "ModifyRecordFields", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
