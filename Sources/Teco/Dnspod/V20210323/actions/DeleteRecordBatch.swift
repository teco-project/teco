//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dnspod {
    /// DeleteRecordBatch请求参数结构体
    public struct DeleteRecordBatchRequest: TCRequestModel {
        /// 解析记录 ID 数组
        public let recordIdList: [UInt64]

        public init(recordIdList: [UInt64]) {
            self.recordIdList = recordIdList
        }

        enum CodingKeys: String, CodingKey {
            case recordIdList = "RecordIdList"
        }
    }

    /// DeleteRecordBatch返回参数结构体
    public struct DeleteRecordBatchResponse: TCResponseModel {
        /// 批量任务 ID
        public let jobId: UInt64

        /// 任务详情
        public let detailList: [DeleteRecordBatchDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case detailList = "DetailList"
            case requestId = "RequestId"
        }
    }

    /// 批量删除解析记录
    @inlinable
    public func deleteRecordBatch(_ input: DeleteRecordBatchRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRecordBatchResponse> {
        self.client.execute(action: "DeleteRecordBatch", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量删除解析记录
    @inlinable
    public func deleteRecordBatch(_ input: DeleteRecordBatchRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRecordBatchResponse {
        try await self.client.execute(action: "DeleteRecordBatch", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量删除解析记录
    @inlinable
    public func deleteRecordBatch(recordIdList: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteRecordBatchResponse> {
        self.deleteRecordBatch(.init(recordIdList: recordIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 批量删除解析记录
    @inlinable
    public func deleteRecordBatch(recordIdList: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteRecordBatchResponse {
        try await self.deleteRecordBatch(.init(recordIdList: recordIdList), region: region, logger: logger, on: eventLoop)
    }
}
