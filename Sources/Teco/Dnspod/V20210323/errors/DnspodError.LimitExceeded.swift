//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDnspodError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case aaaaCountLimit = "LimitExceeded.AAAACountLimit"
            case atNsRecordLimit = "LimitExceeded.AtNsRecordLimit"
            case domainAliasCountExceeded = "LimitExceeded.DomainAliasCountExceeded"
            case domainAliasNumberLimit = "LimitExceeded.DomainAliasNumberLimit"
            case failedLoginLimitExceeded = "LimitExceeded.FailedLoginLimitExceeded"
            case groupNumberLimit = "LimitExceeded.GroupNumberLimit"
            case hiddenUrlExceeded = "LimitExceeded.HiddenUrlExceeded"
            case nsCountLimit = "LimitExceeded.NsCountLimit"
            case recordTtlLimit = "LimitExceeded.RecordTtlLimit"
            case srvCountLimit = "LimitExceeded.SrvCountLimit"
            case subdomainLevelLimit = "LimitExceeded.SubdomainLevelLimit"
            case subdomainRollLimit = "LimitExceeded.SubdomainRollLimit"
            case subdomainWcardLimit = "LimitExceeded.SubdomainWcardLimit"
            case urlCountLimit = "LimitExceeded.UrlCountLimit"
            case other = "LimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// AAAA记录数量超出限制。
        public static var aaaaCountLimit: LimitExceeded {
            LimitExceeded(.aaaaCountLimit)
        }
        
        /// @的NS记录只能设置为默认线路。
        public static var atNsRecordLimit: LimitExceeded {
            LimitExceeded(.atNsRecordLimit)
        }
        
        /// 别名数量已经达到限制。
        public static var domainAliasCountExceeded: LimitExceeded {
            LimitExceeded(.domainAliasCountExceeded)
        }
        
        /// 当前绑定别名数量已达到限制。
        public static var domainAliasNumberLimit: LimitExceeded {
            LimitExceeded(.domainAliasNumberLimit)
        }
        
        /// 登录失败次数过多已被系统封禁。
        public static var failedLoginLimitExceeded: LimitExceeded {
            LimitExceeded(.failedLoginLimitExceeded)
        }
        
        /// 已经达到最大分组数量限制。
        public static var groupNumberLimit: LimitExceeded {
            LimitExceeded(.groupNumberLimit)
        }
        
        /// 该域名使用的套餐不支持隐性URL转发或数量已达上限，如需要使用，请去商城购买。
        public static var hiddenUrlExceeded: LimitExceeded {
            LimitExceeded(.hiddenUrlExceeded)
        }
        
        /// NS记录数量超出限制。
        public static var nsCountLimit: LimitExceeded {
            LimitExceeded(.nsCountLimit)
        }
        
        /// 记录的TTL值超出了限制。
        public static var recordTtlLimit: LimitExceeded {
            LimitExceeded(.recordTtlLimit)
        }
        
        /// SRV记录数量超出限制。
        public static var srvCountLimit: LimitExceeded {
            LimitExceeded(.srvCountLimit)
        }
        
        /// 子域名级数超出限制。
        public static var subdomainLevelLimit: LimitExceeded {
            LimitExceeded(.subdomainLevelLimit)
        }
        
        /// 子域名负载均衡数量超出限制。
        public static var subdomainRollLimit: LimitExceeded {
            LimitExceeded(.subdomainRollLimit)
        }
        
        /// 泛解析级数超出限制。
        public static var subdomainWcardLimit: LimitExceeded {
            LimitExceeded(.subdomainWcardLimit)
        }
        
        /// 该域名的显性URL转发数量已达上限，如需继续使用，请去商城购买。
        public static var urlCountLimit: LimitExceeded {
            LimitExceeded(.urlCountLimit)
        }
        
        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }
    }
}

extension TCDnspodError.LimitExceeded: Equatable {
    public static func == (lhs: TCDnspodError.LimitExceeded, rhs: TCDnspodError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCDnspodError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCDnspodError.LimitExceeded {
    public func toDnspodError() -> TCDnspodError {
        guard let code = TCDnspodError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCDnspodError(code, context: self.context)
    }
}