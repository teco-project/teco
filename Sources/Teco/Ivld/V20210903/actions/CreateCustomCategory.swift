//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ivld {
    /// CreateCustomCategory请求参数结构体
    public struct CreateCustomCategoryRequest: TCRequestModel {
        /// 自定义一级类型
        public let l1Category: String
        
        /// 自定义二级类型
        public let l2Category: String
        
        public init (l1Category: String, l2Category: String) {
            self.l1Category = l1Category
            self.l2Category = l2Category
        }
        
        enum CodingKeys: String, CodingKey {
            case l1Category = "L1Category"
            case l2Category = "L2Category"
        }
    }
    
    /// CreateCustomCategory返回参数结构体
    public struct CreateCustomCategoryResponse: TCResponseModel {
        /// 自定义分类信息ID
        public let categoryId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case categoryId = "CategoryId"
            case requestId = "RequestId"
        }
    }
    
    /// 创建自定义人物分类
    ///
    /// 创建自定义人物分类信息
    /// 当L2Category为空时，将创建一级自定义分类。
    /// 当L1Category与L2Category均不为空时，将创建二级自定义分类。请注意，**只有当一级自定义分类存在时，才可创建二级自定义分类**。
    @inlinable
    public func createCustomCategory(_ input: CreateCustomCategoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateCustomCategoryResponse > {
        self.client.execute(action: "CreateCustomCategory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建自定义人物分类
    ///
    /// 创建自定义人物分类信息
    /// 当L2Category为空时，将创建一级自定义分类。
    /// 当L1Category与L2Category均不为空时，将创建二级自定义分类。请注意，**只有当一级自定义分类存在时，才可创建二级自定义分类**。
    @inlinable
    public func createCustomCategory(_ input: CreateCustomCategoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCustomCategoryResponse {
        try await self.client.execute(action: "CreateCustomCategory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 创建自定义人物分类
    ///
    /// 创建自定义人物分类信息
    /// 当L2Category为空时，将创建一级自定义分类。
    /// 当L1Category与L2Category均不为空时，将创建二级自定义分类。请注意，**只有当一级自定义分类存在时，才可创建二级自定义分类**。
    @inlinable
    public func createCustomCategory(l1Category: String, l2Category: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateCustomCategoryResponse > {
        self.createCustomCategory(CreateCustomCategoryRequest(l1Category: l1Category, l2Category: l2Category), logger: logger, on: eventLoop)
    }
    
    /// 创建自定义人物分类
    ///
    /// 创建自定义人物分类信息
    /// 当L2Category为空时，将创建一级自定义分类。
    /// 当L1Category与L2Category均不为空时，将创建二级自定义分类。请注意，**只有当一级自定义分类存在时，才可创建二级自定义分类**。
    @inlinable
    public func createCustomCategory(l1Category: String, l2Category: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCustomCategoryResponse {
        try await self.createCustomCategory(CreateCustomCategoryRequest(l1Category: l1Category, l2Category: l2Category), logger: logger, on: eventLoop)
    }
}
