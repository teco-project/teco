//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ivld {
    /// CreateCustomPerson请求参数结构体
    public struct CreateCustomPersonRequest: TCRequest {
        /// 自定义人物姓名
        public let name: String

        /// 自定义人物简要信息(仅用于标记，不支持检索)
        public let basicInfo: String

        /// 自定义分类ID，如不存在接口会报错
        public let categoryId: String

        /// 自定义人物图片URL，可支持任意地址，推荐使用COS
        public let imageURL: String?

        /// 原始图片base64编码后的数据
        public let image: String?

        public init(name: String, basicInfo: String, categoryId: String, imageURL: String? = nil, image: String? = nil) {
            self.name = name
            self.basicInfo = basicInfo
            self.categoryId = categoryId
            self.imageURL = imageURL
            self.image = image
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case basicInfo = "BasicInfo"
            case categoryId = "CategoryId"
            case imageURL = "ImageURL"
            case image = "Image"
        }
    }

    /// CreateCustomPerson返回参数结构体
    public struct CreateCustomPersonResponse: TCResponse {
        /// 自定义人物Id
        public let personId: String

        /// 自定义人脸信息
        public let imageInfo: PersonImageInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case personId = "PersonId"
            case imageInfo = "ImageInfo"
            case requestId = "RequestId"
        }
    }

    /// 创建自定义人物
    ///
    /// 创建自定义人物。
    ///
    /// 输入人物名称，基本信息，分类信息与人脸图片，创建自定义人物
    ///
    /// 人脸图片可使用图片数据(base64编码的图片数据)或者图片URL(推荐使用COS以减少下载时间，其他地址也支持)，原始图片优先，也即如果同时指定了图片数据和图片URL，接口将仅使用图片数据
    @inlinable
    public func createCustomPerson(_ input: CreateCustomPersonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCustomPersonResponse> {
        self.client.execute(action: "CreateCustomPerson", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建自定义人物
    ///
    /// 创建自定义人物。
    ///
    /// 输入人物名称，基本信息，分类信息与人脸图片，创建自定义人物
    ///
    /// 人脸图片可使用图片数据(base64编码的图片数据)或者图片URL(推荐使用COS以减少下载时间，其他地址也支持)，原始图片优先，也即如果同时指定了图片数据和图片URL，接口将仅使用图片数据
    @inlinable
    public func createCustomPerson(_ input: CreateCustomPersonRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCustomPersonResponse {
        try await self.client.execute(action: "CreateCustomPerson", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建自定义人物
    ///
    /// 创建自定义人物。
    ///
    /// 输入人物名称，基本信息，分类信息与人脸图片，创建自定义人物
    ///
    /// 人脸图片可使用图片数据(base64编码的图片数据)或者图片URL(推荐使用COS以减少下载时间，其他地址也支持)，原始图片优先，也即如果同时指定了图片数据和图片URL，接口将仅使用图片数据
    @inlinable
    public func createCustomPerson(name: String, basicInfo: String, categoryId: String, imageURL: String? = nil, image: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCustomPersonResponse> {
        self.createCustomPerson(.init(name: name, basicInfo: basicInfo, categoryId: categoryId, imageURL: imageURL, image: image), region: region, logger: logger, on: eventLoop)
    }

    /// 创建自定义人物
    ///
    /// 创建自定义人物。
    ///
    /// 输入人物名称，基本信息，分类信息与人脸图片，创建自定义人物
    ///
    /// 人脸图片可使用图片数据(base64编码的图片数据)或者图片URL(推荐使用COS以减少下载时间，其他地址也支持)，原始图片优先，也即如果同时指定了图片数据和图片URL，接口将仅使用图片数据
    @inlinable
    public func createCustomPerson(name: String, basicInfo: String, categoryId: String, imageURL: String? = nil, image: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateCustomPersonResponse {
        try await self.createCustomPerson(.init(name: name, basicInfo: basicInfo, categoryId: categoryId, imageURL: imageURL, image: image), region: region, logger: logger, on: eventLoop)
    }
}
