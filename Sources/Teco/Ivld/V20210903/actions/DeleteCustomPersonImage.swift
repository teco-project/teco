//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ivld {
    /// DeleteCustomPersonImage请求参数结构体
    public struct DeleteCustomPersonImageRequest: TCRequestModel {
        /// 自定义人物Id
        public let personId: String

        /// 自定义人脸图片Id
        public let imageId: String

        public init(personId: String, imageId: String) {
            self.personId = personId
            self.imageId = imageId
        }

        enum CodingKeys: String, CodingKey {
            case personId = "PersonId"
            case imageId = "ImageId"
        }
    }

    /// DeleteCustomPersonImage返回参数结构体
    public struct DeleteCustomPersonImageResponse: TCResponseModel {
        /// 自定义人物Id
        public let personId: String

        /// 已删除的人物图片Id
        public let imageId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case personId = "PersonId"
            case imageId = "ImageId"
            case requestId = "RequestId"
        }
    }

    /// 删除自定义人脸
    ///
    /// 删除自定义人脸数据
    @inlinable
    public func deleteCustomPersonImage(_ input: DeleteCustomPersonImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCustomPersonImageResponse> {
        self.client.execute(action: "DeleteCustomPersonImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除自定义人脸
    ///
    /// 删除自定义人脸数据
    @inlinable
    public func deleteCustomPersonImage(_ input: DeleteCustomPersonImageRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCustomPersonImageResponse {
        try await self.client.execute(action: "DeleteCustomPersonImage", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除自定义人脸
    ///
    /// 删除自定义人脸数据
    @inlinable
    public func deleteCustomPersonImage(personId: String, imageId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCustomPersonImageResponse> {
        self.deleteCustomPersonImage(DeleteCustomPersonImageRequest(personId: personId, imageId: imageId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除自定义人脸
    ///
    /// 删除自定义人脸数据
    @inlinable
    public func deleteCustomPersonImage(personId: String, imageId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCustomPersonImageResponse {
        try await self.deleteCustomPersonImage(DeleteCustomPersonImageRequest(personId: personId, imageId: imageId), region: region, logger: logger, on: eventLoop)
    }
}
