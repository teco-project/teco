//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ivld {
    /// DescribeTaskDetail请求参数结构体
    public struct DescribeTaskDetailRequest: TCRequest {
        /// 创建任务返回的TaskId
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
        }
    }

    /// DescribeTaskDetail返回参数结构体
    public struct DescribeTaskDetailResponse: TCResponse {
        /// 任务信息，不包含任务结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskInfo: TaskInfo?

        /// 视频任务结果数据，只在视频任务结束时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskData: Data?

        /// 图片任务结果数据，只在图片任务结束时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let imageTaskData: ImageData?

        /// 音频任务结果数据，只在音频任务结束时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let audioTaskData: AudioData?

        /// 文本任务结果数据，只在文本任务结束时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let textTaskData: TextData?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskInfo = "TaskInfo"
            case taskData = "TaskData"
            case imageTaskData = "ImageTaskData"
            case audioTaskData = "AudioTaskData"
            case textTaskData = "TextTaskData"
            case requestId = "RequestId"
        }
    }

    /// 描述任务与任务结果
    ///
    /// 描述任务信息，如果任务成功完成，还将返回任务结果
    @inlinable
    public func describeTaskDetail(_ input: DescribeTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskDetailResponse> {
        self.client.execute(action: "DescribeTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 描述任务与任务结果
    ///
    /// 描述任务信息，如果任务成功完成，还将返回任务结果
    @inlinable
    public func describeTaskDetail(_ input: DescribeTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskDetailResponse {
        try await self.client.execute(action: "DescribeTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 描述任务与任务结果
    ///
    /// 描述任务信息，如果任务成功完成，还将返回任务结果
    @inlinable
    public func describeTaskDetail(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskDetailResponse> {
        self.describeTaskDetail(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 描述任务与任务结果
    ///
    /// 描述任务信息，如果任务成功完成，还将返回任务结果
    @inlinable
    public func describeTaskDetail(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskDetailResponse {
        try await self.describeTaskDetail(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
