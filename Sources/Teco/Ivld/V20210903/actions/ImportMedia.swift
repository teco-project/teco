//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ivld {
    /// ImportMedia请求参数结构体
    public struct ImportMediaRequest: TCRequestModel {
        /// 待分析视频的URL，目前只支持*不带签名的*COS地址，长度最长1KB
        public let url: String

        /// 待分析视频的MD5，为空时不做校验，否则会做MD5校验，长度必须为32B
        public let md5: String?

        /// 待分析视频的名称，指定后可支持筛选，最多64B
        public let name: String?

        /// 当非本人外部视频地址导入时，该字段为转存的cos桶地址且不可为空; 示例：https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${PathPrefix}/  (注意，cos路径需要以/分隔符结尾)。
        /// 推荐采用本主帐号COS桶，如果使用其他帐号COS桶，请确保COS桶可写，否则可导致分析失败
        public let writeBackCosPath: String?

        /// 自定义标签，可用于查询
        public let label: String?

        /// 媒资导入完成的回调地址，该设置优先级高于控制台全局的设置；
        public let callbackURL: String?

        /// 媒资文件类型，详细定义参见[MediaPreknownInfo.MediaType](https://cloud.tencent.com/document/product/1509/65063#MediaPreknownInfo)
        /// 默认为2(视频)
        public let mediaType: Int64?

        public init(url: String, md5: String? = nil, name: String? = nil, writeBackCosPath: String? = nil, label: String? = nil, callbackURL: String? = nil, mediaType: Int64? = nil) {
            self.url = url
            self.md5 = md5
            self.name = name
            self.writeBackCosPath = writeBackCosPath
            self.label = label
            self.callbackURL = callbackURL
            self.mediaType = mediaType
        }

        enum CodingKeys: String, CodingKey {
            case url = "URL"
            case md5 = "MD5"
            case name = "Name"
            case writeBackCosPath = "WriteBackCosPath"
            case label = "Label"
            case callbackURL = "CallbackURL"
            case mediaType = "MediaType"
        }
    }

    /// ImportMedia返回参数结构体
    public struct ImportMediaResponse: TCResponseModel {
        /// 媒资文件在系统中的ID
        public let mediaId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case mediaId = "MediaId"
            case requestId = "RequestId"
        }
    }

    /// 导入媒资文件
    ///
    /// 将URL指向的媒资视频文件导入系统之中。
    /// **请注意，本接口为异步接口**。接口返回MediaId仅代表导入视频任务发起，不代表任务完成，您可调用读接口(DescribeMedia/DescribeMedias)接口查询MediaId
    /// URL字段推荐您使用COS地址，其形式为`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}`，其中`${Bucket}`为您的COS桶名称，Region为COS桶所在[可用区](https://cloud.tencent.com/document/product/213/6091)，`${ObjectKey}`为指向存储在COS桶内的待分析的视频的[ObjectKey](https://cloud.tencent.com/document/product/436/13324)
    /// 另外，目前产品也支持使用外部URL地址，但是当传入URL为非COS地址时，需要您指定额外的WriteBackCosPath以供产品回写结果数据。
    /// 分析完成后，本产品将在您的`${Bucket}`桶内创建名为`${ObjectKey}_${task-create-time}`的目录(`task-create-time`形式为1970-01-01T08:08:08)并将分析结果将回传回该目录，也即，结构化分析结果(包括图片，JSON等数据)将会写回`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}_${task-create-time}`目录
    @inlinable
    public func importMedia(_ input: ImportMediaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ImportMediaResponse> {
        self.client.execute(action: "ImportMedia", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导入媒资文件
    ///
    /// 将URL指向的媒资视频文件导入系统之中。
    /// **请注意，本接口为异步接口**。接口返回MediaId仅代表导入视频任务发起，不代表任务完成，您可调用读接口(DescribeMedia/DescribeMedias)接口查询MediaId
    /// URL字段推荐您使用COS地址，其形式为`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}`，其中`${Bucket}`为您的COS桶名称，Region为COS桶所在[可用区](https://cloud.tencent.com/document/product/213/6091)，`${ObjectKey}`为指向存储在COS桶内的待分析的视频的[ObjectKey](https://cloud.tencent.com/document/product/436/13324)
    /// 另外，目前产品也支持使用外部URL地址，但是当传入URL为非COS地址时，需要您指定额外的WriteBackCosPath以供产品回写结果数据。
    /// 分析完成后，本产品将在您的`${Bucket}`桶内创建名为`${ObjectKey}_${task-create-time}`的目录(`task-create-time`形式为1970-01-01T08:08:08)并将分析结果将回传回该目录，也即，结构化分析结果(包括图片，JSON等数据)将会写回`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}_${task-create-time}`目录
    @inlinable
    public func importMedia(_ input: ImportMediaRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ImportMediaResponse {
        try await self.client.execute(action: "ImportMedia", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导入媒资文件
    ///
    /// 将URL指向的媒资视频文件导入系统之中。
    /// **请注意，本接口为异步接口**。接口返回MediaId仅代表导入视频任务发起，不代表任务完成，您可调用读接口(DescribeMedia/DescribeMedias)接口查询MediaId
    /// URL字段推荐您使用COS地址，其形式为`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}`，其中`${Bucket}`为您的COS桶名称，Region为COS桶所在[可用区](https://cloud.tencent.com/document/product/213/6091)，`${ObjectKey}`为指向存储在COS桶内的待分析的视频的[ObjectKey](https://cloud.tencent.com/document/product/436/13324)
    /// 另外，目前产品也支持使用外部URL地址，但是当传入URL为非COS地址时，需要您指定额外的WriteBackCosPath以供产品回写结果数据。
    /// 分析完成后，本产品将在您的`${Bucket}`桶内创建名为`${ObjectKey}_${task-create-time}`的目录(`task-create-time`形式为1970-01-01T08:08:08)并将分析结果将回传回该目录，也即，结构化分析结果(包括图片，JSON等数据)将会写回`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}_${task-create-time}`目录
    @inlinable
    public func importMedia(url: String, md5: String? = nil, name: String? = nil, writeBackCosPath: String? = nil, label: String? = nil, callbackURL: String? = nil, mediaType: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ImportMediaResponse> {
        self.importMedia(ImportMediaRequest(url: url, md5: md5, name: name, writeBackCosPath: writeBackCosPath, label: label, callbackURL: callbackURL, mediaType: mediaType), logger: logger, on: eventLoop)
    }

    /// 导入媒资文件
    ///
    /// 将URL指向的媒资视频文件导入系统之中。
    /// **请注意，本接口为异步接口**。接口返回MediaId仅代表导入视频任务发起，不代表任务完成，您可调用读接口(DescribeMedia/DescribeMedias)接口查询MediaId
    /// URL字段推荐您使用COS地址，其形式为`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}`，其中`${Bucket}`为您的COS桶名称，Region为COS桶所在[可用区](https://cloud.tencent.com/document/product/213/6091)，`${ObjectKey}`为指向存储在COS桶内的待分析的视频的[ObjectKey](https://cloud.tencent.com/document/product/436/13324)
    /// 另外，目前产品也支持使用外部URL地址，但是当传入URL为非COS地址时，需要您指定额外的WriteBackCosPath以供产品回写结果数据。
    /// 分析完成后，本产品将在您的`${Bucket}`桶内创建名为`${ObjectKey}_${task-create-time}`的目录(`task-create-time`形式为1970-01-01T08:08:08)并将分析结果将回传回该目录，也即，结构化分析结果(包括图片，JSON等数据)将会写回`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}_${task-create-time}`目录
    @inlinable
    public func importMedia(url: String, md5: String? = nil, name: String? = nil, writeBackCosPath: String? = nil, label: String? = nil, callbackURL: String? = nil, mediaType: Int64? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ImportMediaResponse {
        try await self.importMedia(ImportMediaRequest(url: url, md5: md5, name: name, writeBackCosPath: writeBackCosPath, label: label, callbackURL: callbackURL, mediaType: mediaType), logger: logger, on: eventLoop)
    }
}
