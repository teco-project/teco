//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tic {
    /// UpdateStack请求参数结构体
    public struct UpdateStackRequest: TCRequestModel {
        /// 待更新的资源栈ID
        public let stackId: String

        /// 资源栈名称，不得超过60个字符
        public let stackName: String?

        /// 资源栈描述，不得超过200个字符
        public let description: String?

        public init(stackId: String, stackName: String? = nil, description: String? = nil) {
            self.stackId = stackId
            self.stackName = stackName
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case stackId = "StackId"
            case stackName = "StackName"
            case description = "Description"
        }
    }

    /// UpdateStack返回参数结构体
    public struct UpdateStackResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新资源栈
    ///
    /// 本接口（UpdateStack）用于更新资源栈的名称和描述。
    @inlinable
    public func updateStack(_ input: UpdateStackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateStackResponse> {
        self.client.execute(action: "UpdateStack", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新资源栈
    ///
    /// 本接口（UpdateStack）用于更新资源栈的名称和描述。
    @inlinable
    public func updateStack(_ input: UpdateStackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateStackResponse {
        try await self.client.execute(action: "UpdateStack", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新资源栈
    ///
    /// 本接口（UpdateStack）用于更新资源栈的名称和描述。
    @inlinable
    public func updateStack(stackId: String, stackName: String? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateStackResponse> {
        self.updateStack(UpdateStackRequest(stackId: stackId, stackName: stackName, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 更新资源栈
    ///
    /// 本接口（UpdateStack）用于更新资源栈的名称和描述。
    @inlinable
    public func updateStack(stackId: String, stackName: String? = nil, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateStackResponse {
        try await self.updateStack(UpdateStackRequest(stackId: stackId, stackName: stackName, description: description), region: region, logger: logger, on: eventLoop)
    }
}
