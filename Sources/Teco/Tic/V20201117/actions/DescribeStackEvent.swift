//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tic {
    /// DescribeStackEvent请求参数结构体
    public struct DescribeStackEventRequest: TCRequest {
        /// 事件ID
        public let eventId: String

        public init(eventId: String) {
            self.eventId = eventId
        }

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
        }
    }

    /// DescribeStackEvent返回参数结构体
    public struct DescribeStackEventResponse: TCResponse {
        /// 事件ID
        public let eventId: String

        /// 版本ID
        public let versionId: String

        /// 资源栈ID
        public let stackId: String

        /// 事件类型
        public let type: String

        /// 事件状态
        public let status: String

        /// 状态信息
        public let eventMessage: String

        /// 创建时间
        public let createTime: String

        /// 控制台输出文本
        public let consoleLog: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case eventId = "EventId"
            case versionId = "VersionId"
            case stackId = "StackId"
            case type = "Type"
            case status = "Status"
            case eventMessage = "EventMessage"
            case createTime = "CreateTime"
            case consoleLog = "ConsoleLog"
            case requestId = "RequestId"
        }
    }

    /// 获取单个事件详情
    ///
    /// 本接口（DescribeStackEvent）用于获取单个事件详情，尤其是可以得到事件的详细控制台输出文本。
    @inlinable
    public func describeStackEvent(_ input: DescribeStackEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStackEventResponse> {
        self.client.execute(action: "DescribeStackEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取单个事件详情
    ///
    /// 本接口（DescribeStackEvent）用于获取单个事件详情，尤其是可以得到事件的详细控制台输出文本。
    @inlinable
    public func describeStackEvent(_ input: DescribeStackEventRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStackEventResponse {
        try await self.client.execute(action: "DescribeStackEvent", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取单个事件详情
    ///
    /// 本接口（DescribeStackEvent）用于获取单个事件详情，尤其是可以得到事件的详细控制台输出文本。
    @inlinable
    public func describeStackEvent(eventId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeStackEventResponse> {
        self.describeStackEvent(.init(eventId: eventId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取单个事件详情
    ///
    /// 本接口（DescribeStackEvent）用于获取单个事件详情，尤其是可以得到事件的详细控制台输出文本。
    @inlinable
    public func describeStackEvent(eventId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeStackEventResponse {
        try await self.describeStackEvent(.init(eventId: eventId), region: region, logger: logger, on: eventLoop)
    }
}
