//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateRole请求参数结构体
    public struct ChannelCreateRoleRequest: TCRequest {
        /// 角色名称，最大长度为20个字符，仅限中文、字母、数字和下划线组成。
        public let name: String

        /// 代理企业和员工的信息。
        public let agent: Agent

        /// 角色描述，最大长度为50个字符
        public let description: String?

        /// 权限树，权限树内容 PermissionGroups 可参考接口 DescribeIntegrationRoles 的输出
        public let permissionGroups: [PermissionGroup]?

        public init(name: String, agent: Agent, description: String? = nil, permissionGroups: [PermissionGroup]? = nil) {
            self.name = name
            self.agent = agent
            self.description = description
            self.permissionGroups = permissionGroups
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case agent = "Agent"
            case description = "Description"
            case permissionGroups = "PermissionGroups"
        }
    }

    /// ChannelCreateRole返回参数结构体
    public struct ChannelCreateRoleResponse: TCResponse {
        /// 角色id
        public let roleId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case roleId = "RoleId"
            case requestId = "RequestId"
        }
    }

    /// 创建角色
    ///
    /// 此接口（ChannelCreateRole）用来创建企业自定义角色。
    ///
    /// 适用场景1：创建当前企业的自定义角色，并且创建时不进行权限的设置（PermissionGroups 参数不传），角色中的权限内容可通过接口 ChannelModifyRole 完成更新。
    ///
    /// 适用场景2：创建当前企业的自定义角色，并且创建时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelCreateRole(_ input: ChannelCreateRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateRoleResponse> {
        self.client.execute(action: "ChannelCreateRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建角色
    ///
    /// 此接口（ChannelCreateRole）用来创建企业自定义角色。
    ///
    /// 适用场景1：创建当前企业的自定义角色，并且创建时不进行权限的设置（PermissionGroups 参数不传），角色中的权限内容可通过接口 ChannelModifyRole 完成更新。
    ///
    /// 适用场景2：创建当前企业的自定义角色，并且创建时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelCreateRole(_ input: ChannelCreateRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateRoleResponse {
        try await self.client.execute(action: "ChannelCreateRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建角色
    ///
    /// 此接口（ChannelCreateRole）用来创建企业自定义角色。
    ///
    /// 适用场景1：创建当前企业的自定义角色，并且创建时不进行权限的设置（PermissionGroups 参数不传），角色中的权限内容可通过接口 ChannelModifyRole 完成更新。
    ///
    /// 适用场景2：创建当前企业的自定义角色，并且创建时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelCreateRole(name: String, agent: Agent, description: String? = nil, permissionGroups: [PermissionGroup]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateRoleResponse> {
        self.channelCreateRole(.init(name: name, agent: agent, description: description, permissionGroups: permissionGroups), region: region, logger: logger, on: eventLoop)
    }

    /// 创建角色
    ///
    /// 此接口（ChannelCreateRole）用来创建企业自定义角色。
    ///
    /// 适用场景1：创建当前企业的自定义角色，并且创建时不进行权限的设置（PermissionGroups 参数不传），角色中的权限内容可通过接口 ChannelModifyRole 完成更新。
    ///
    /// 适用场景2：创建当前企业的自定义角色，并且创建时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelCreateRole(name: String, agent: Agent, description: String? = nil, permissionGroups: [PermissionGroup]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateRoleResponse {
        try await self.channelCreateRole(.init(name: name, agent: agent, description: description, permissionGroups: permissionGroups), region: region, logger: logger, on: eventLoop)
    }
}
