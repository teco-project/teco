//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreatePrepareFlow请求参数结构体
    public struct ChannelCreatePrepareFlowRequest: TCRequestModel {
        /// 资源id，与ResourceType对应
        public let resourceId: String

        /// 资源类型，1：模板，目前仅支持模板，与ResourceId对应
        public let resourceType: Int64

        /// 合同流程基础信息
        public let flowInfo: BaseFlowInfo

        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 必填
        public let agent: Agent?

        /// 合同流程配置信息，用于配置发起合同时定制化
        public let flowOption: CreateFlowOption?

        /// 合同签署人信息
        public let flowApproverList: [CommonFlowApprover]?

        /// 通过flowid快速获得之前成功通过页面发起的合同生成链接
        public let flowId: String?

        /// 该参数不可用，请通过获取 web 可嵌入接口获取合同流程预览 URL
        @available(*, deprecated)
        public let needPreview: Bool? = nil

        /// 企业机构信息，不用传
        @available(*, deprecated)
        public let organization: OrganizationInfo? = nil

        /// 操作人（用户）信息，不用传
        @available(*, deprecated)
        public let `operator`: UserInfo? = nil

        public init(resourceId: String, resourceType: Int64, flowInfo: BaseFlowInfo, agent: Agent? = nil, flowOption: CreateFlowOption? = nil, flowApproverList: [CommonFlowApprover]? = nil, flowId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.flowInfo = flowInfo
            self.agent = agent
            self.flowOption = flowOption
            self.flowApproverList = flowApproverList
            self.flowId = flowId
        }

        @available(*, deprecated, renamed: "init(resourceId:resourceType:flowInfo:agent:flowOption:flowApproverList:flowId:)", message: "'needPreview', 'organization' and 'operator' are deprecated in 'ChannelCreatePrepareFlowRequest'. Setting these parameters has no effect.")
        public init(resourceId: String, resourceType: Int64, flowInfo: BaseFlowInfo, agent: Agent? = nil, flowOption: CreateFlowOption? = nil, flowApproverList: [CommonFlowApprover]? = nil, flowId: String? = nil, needPreview: Bool? = nil, organization: OrganizationInfo? = nil, operator: UserInfo? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.flowInfo = flowInfo
            self.agent = agent
            self.flowOption = flowOption
            self.flowApproverList = flowApproverList
            self.flowId = flowId
        }

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case flowInfo = "FlowInfo"
            case agent = "Agent"
            case flowOption = "FlowOption"
            case flowApproverList = "FlowApproverList"
            case flowId = "FlowId"
            case needPreview = "NeedPreview"
            case organization = "Organization"
            case `operator` = "Operator"
        }
    }

    /// ChannelCreatePrepareFlow返回参数结构体
    public struct ChannelCreatePrepareFlowResponse: TCResponseModel {
        /// 预发起的合同链接
        public let prepareFlowUrl: String

        /// 合同发起后预览链接
        public let previewFlowUrl: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case prepareFlowUrl = "PrepareFlowUrl"
            case previewFlowUrl = "PreviewFlowUrl"
            case requestId = "RequestId"
        }
    }

    /// 获取模板发起合同web页面
    ///
    /// 创建预发起合同
    /// 通过此接口指定：合同，签署人，填写控件信息，生成预创建合同链接，点击后跳转到web页面完成合同创建并发起
    /// 可指定合同信息不可更改，签署人信息不可更改
    /// 合同发起后，填写及签署流程与现有操作流程一致
    /// 注意：目前仅支持模板发起
    @inlinable
    public func channelCreatePrepareFlow(_ input: ChannelCreatePrepareFlowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreatePrepareFlowResponse> {
        self.client.execute(action: "ChannelCreatePrepareFlow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取模板发起合同web页面
    ///
    /// 创建预发起合同
    /// 通过此接口指定：合同，签署人，填写控件信息，生成预创建合同链接，点击后跳转到web页面完成合同创建并发起
    /// 可指定合同信息不可更改，签署人信息不可更改
    /// 合同发起后，填写及签署流程与现有操作流程一致
    /// 注意：目前仅支持模板发起
    @inlinable
    public func channelCreatePrepareFlow(_ input: ChannelCreatePrepareFlowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreatePrepareFlowResponse {
        try await self.client.execute(action: "ChannelCreatePrepareFlow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取模板发起合同web页面
    ///
    /// 创建预发起合同
    /// 通过此接口指定：合同，签署人，填写控件信息，生成预创建合同链接，点击后跳转到web页面完成合同创建并发起
    /// 可指定合同信息不可更改，签署人信息不可更改
    /// 合同发起后，填写及签署流程与现有操作流程一致
    /// 注意：目前仅支持模板发起
    @inlinable
    public func channelCreatePrepareFlow(resourceId: String, resourceType: Int64, flowInfo: BaseFlowInfo, agent: Agent? = nil, flowOption: CreateFlowOption? = nil, flowApproverList: [CommonFlowApprover]? = nil, flowId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreatePrepareFlowResponse> {
        self.channelCreatePrepareFlow(.init(resourceId: resourceId, resourceType: resourceType, flowInfo: flowInfo, agent: agent, flowOption: flowOption, flowApproverList: flowApproverList, flowId: flowId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取模板发起合同web页面
    ///
    /// 创建预发起合同
    /// 通过此接口指定：合同，签署人，填写控件信息，生成预创建合同链接，点击后跳转到web页面完成合同创建并发起
    /// 可指定合同信息不可更改，签署人信息不可更改
    /// 合同发起后，填写及签署流程与现有操作流程一致
    /// 注意：目前仅支持模板发起
    @available(*, deprecated, renamed: "channelCreatePrepareFlow(resourceId:resourceType:flowInfo:agent:flowOption:flowApproverList:flowId:region:logger:on:)", message: "'needPreview', 'organization' and 'operator' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreatePrepareFlow(resourceId: String, resourceType: Int64, flowInfo: BaseFlowInfo, agent: Agent? = nil, flowOption: CreateFlowOption? = nil, flowApproverList: [CommonFlowApprover]? = nil, flowId: String? = nil, needPreview: Bool? = nil, organization: OrganizationInfo? = nil, operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreatePrepareFlowResponse> {
        self.channelCreatePrepareFlow(.init(resourceId: resourceId, resourceType: resourceType, flowInfo: flowInfo, agent: agent, flowOption: flowOption, flowApproverList: flowApproverList, flowId: flowId, needPreview: needPreview, organization: organization, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }

    /// 获取模板发起合同web页面
    ///
    /// 创建预发起合同
    /// 通过此接口指定：合同，签署人，填写控件信息，生成预创建合同链接，点击后跳转到web页面完成合同创建并发起
    /// 可指定合同信息不可更改，签署人信息不可更改
    /// 合同发起后，填写及签署流程与现有操作流程一致
    /// 注意：目前仅支持模板发起
    @inlinable
    public func channelCreatePrepareFlow(resourceId: String, resourceType: Int64, flowInfo: BaseFlowInfo, agent: Agent? = nil, flowOption: CreateFlowOption? = nil, flowApproverList: [CommonFlowApprover]? = nil, flowId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreatePrepareFlowResponse {
        try await self.channelCreatePrepareFlow(.init(resourceId: resourceId, resourceType: resourceType, flowInfo: flowInfo, agent: agent, flowOption: flowOption, flowApproverList: flowApproverList, flowId: flowId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取模板发起合同web页面
    ///
    /// 创建预发起合同
    /// 通过此接口指定：合同，签署人，填写控件信息，生成预创建合同链接，点击后跳转到web页面完成合同创建并发起
    /// 可指定合同信息不可更改，签署人信息不可更改
    /// 合同发起后，填写及签署流程与现有操作流程一致
    /// 注意：目前仅支持模板发起
    @available(*, deprecated, renamed: "channelCreatePrepareFlow(resourceId:resourceType:flowInfo:agent:flowOption:flowApproverList:flowId:region:logger:on:)", message: "'needPreview', 'organization' and 'operator' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreatePrepareFlow(resourceId: String, resourceType: Int64, flowInfo: BaseFlowInfo, agent: Agent? = nil, flowOption: CreateFlowOption? = nil, flowApproverList: [CommonFlowApprover]? = nil, flowId: String? = nil, needPreview: Bool? = nil, organization: OrganizationInfo? = nil, operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreatePrepareFlowResponse {
        try await self.channelCreatePrepareFlow(.init(resourceId: resourceId, resourceType: resourceType, flowInfo: flowInfo, agent: agent, flowOption: flowOption, flowApproverList: flowApproverList, flowId: flowId, needPreview: needPreview, organization: organization, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }
}
