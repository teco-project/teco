//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateFlowSignUrl请求参数结构体
    public struct ChannelCreateFlowSignUrlRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 必填
        public let agent: Agent

        /// 流程编号
        public let flowId: String

        /// 流程签署人，其中Name和Mobile必传，其他可不传，ApproverType目前只支持PERSON类型的签署人，如果不传默认为该值。还需注意签署人只能有手写签名和时间类型的签署控件，其他类型的填写控件和签署控件暂时都未支持。
        public let flowApproverInfos: [FlowApproverInfo]

        /// 用户信息，暂未开放
        @available(*, deprecated)
        public let `operator`: UserInfo? = nil

        /// 机构信息，暂未开放
        @available(*, deprecated)
        public let organization: OrganizationInfo? = nil

        /// 签署完之后的H5页面的跳转链接，此链接支持http://和https://，最大长度1000个字符。
        public let jumpUrl: String?

        public init(agent: Agent, flowId: String, flowApproverInfos: [FlowApproverInfo], jumpUrl: String? = nil) {
            self.agent = agent
            self.flowId = flowId
            self.flowApproverInfos = flowApproverInfos
            self.jumpUrl = jumpUrl
        }

        @available(*, deprecated, renamed: "init(agent:flowId:flowApproverInfos:jumpUrl:)", message: "'operator' and 'organization' are deprecated in 'ChannelCreateFlowSignUrlRequest'. Setting these parameters has no effect.")
        public init(agent: Agent, flowId: String, flowApproverInfos: [FlowApproverInfo], operator: UserInfo? = nil, organization: OrganizationInfo? = nil, jumpUrl: String? = nil) {
            self.agent = agent
            self.flowId = flowId
            self.flowApproverInfos = flowApproverInfos
            self.jumpUrl = jumpUrl
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case flowId = "FlowId"
            case flowApproverInfos = "FlowApproverInfos"
            case `operator` = "Operator"
            case organization = "Organization"
            case jumpUrl = "JumpUrl"
        }
    }

    /// ChannelCreateFlowSignUrl返回参数结构体
    public struct ChannelCreateFlowSignUrlResponse: TCResponseModel {
        /// 签署人签署链接信息
        public let flowApproverUrlInfos: [FlowApproverUrlInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowApproverUrlInfos = "FlowApproverUrlInfos"
            case requestId = "RequestId"
        }
    }

    /// 获取个人签署H5页面
    ///
    /// 创建个人签署H5签署链接，请联系客户经理申请使用<br/>
    /// 该接口用于发起合同后，生成C端签署人的签署链接<br/>
    /// 注意：该接口目前签署人类型仅支持个人签署方（PERSON）<br/>
    /// 注意：该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件<br/>
    /// 注意：该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入。微信小程序请使用小程序跳转或半屏弹窗的方式<br/>
    @inlinable
    public func channelCreateFlowSignUrl(_ input: ChannelCreateFlowSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateFlowSignUrlResponse> {
        self.client.execute(action: "ChannelCreateFlowSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取个人签署H5页面
    ///
    /// 创建个人签署H5签署链接，请联系客户经理申请使用<br/>
    /// 该接口用于发起合同后，生成C端签署人的签署链接<br/>
    /// 注意：该接口目前签署人类型仅支持个人签署方（PERSON）<br/>
    /// 注意：该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件<br/>
    /// 注意：该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入。微信小程序请使用小程序跳转或半屏弹窗的方式<br/>
    @inlinable
    public func channelCreateFlowSignUrl(_ input: ChannelCreateFlowSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateFlowSignUrlResponse {
        try await self.client.execute(action: "ChannelCreateFlowSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取个人签署H5页面
    ///
    /// 创建个人签署H5签署链接，请联系客户经理申请使用<br/>
    /// 该接口用于发起合同后，生成C端签署人的签署链接<br/>
    /// 注意：该接口目前签署人类型仅支持个人签署方（PERSON）<br/>
    /// 注意：该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件<br/>
    /// 注意：该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入。微信小程序请使用小程序跳转或半屏弹窗的方式<br/>
    @inlinable
    public func channelCreateFlowSignUrl(agent: Agent, flowId: String, flowApproverInfos: [FlowApproverInfo], jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateFlowSignUrlResponse> {
        self.channelCreateFlowSignUrl(.init(agent: agent, flowId: flowId, flowApproverInfos: flowApproverInfos, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }

    /// 获取个人签署H5页面
    ///
    /// 创建个人签署H5签署链接，请联系客户经理申请使用<br/>
    /// 该接口用于发起合同后，生成C端签署人的签署链接<br/>
    /// 注意：该接口目前签署人类型仅支持个人签署方（PERSON）<br/>
    /// 注意：该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件<br/>
    /// 注意：该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入。微信小程序请使用小程序跳转或半屏弹窗的方式<br/>
    @available(*, deprecated, renamed: "channelCreateFlowSignUrl(agent:flowId:flowApproverInfos:jumpUrl:region:logger:on:)", message: "'operator' and 'organization' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreateFlowSignUrl(agent: Agent, flowId: String, flowApproverInfos: [FlowApproverInfo], operator: UserInfo? = nil, organization: OrganizationInfo? = nil, jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateFlowSignUrlResponse> {
        self.channelCreateFlowSignUrl(.init(agent: agent, flowId: flowId, flowApproverInfos: flowApproverInfos, operator: `operator`, organization: organization, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }

    /// 获取个人签署H5页面
    ///
    /// 创建个人签署H5签署链接，请联系客户经理申请使用<br/>
    /// 该接口用于发起合同后，生成C端签署人的签署链接<br/>
    /// 注意：该接口目前签署人类型仅支持个人签署方（PERSON）<br/>
    /// 注意：该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件<br/>
    /// 注意：该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入。微信小程序请使用小程序跳转或半屏弹窗的方式<br/>
    @inlinable
    public func channelCreateFlowSignUrl(agent: Agent, flowId: String, flowApproverInfos: [FlowApproverInfo], jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateFlowSignUrlResponse {
        try await self.channelCreateFlowSignUrl(.init(agent: agent, flowId: flowId, flowApproverInfos: flowApproverInfos, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }

    /// 获取个人签署H5页面
    ///
    /// 创建个人签署H5签署链接，请联系客户经理申请使用<br/>
    /// 该接口用于发起合同后，生成C端签署人的签署链接<br/>
    /// 注意：该接口目前签署人类型仅支持个人签署方（PERSON）<br/>
    /// 注意：该接口可生成签署链接的C端签署人必须仅有手写签名和时间类型的签署控件<br/>
    /// 注意：该接口返回的签署链接是用于APP集成的场景，支持APP打开或浏览器直接打开，不支持微信小程序嵌入。微信小程序请使用小程序跳转或半屏弹窗的方式<br/>
    @available(*, deprecated, renamed: "channelCreateFlowSignUrl(agent:flowId:flowApproverInfos:jumpUrl:region:logger:on:)", message: "'operator' and 'organization' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreateFlowSignUrl(agent: Agent, flowId: String, flowApproverInfos: [FlowApproverInfo], operator: UserInfo? = nil, organization: OrganizationInfo? = nil, jumpUrl: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateFlowSignUrlResponse {
        try await self.channelCreateFlowSignUrl(.init(agent: agent, flowId: flowId, flowApproverInfos: flowApproverInfos, operator: `operator`, organization: organization, jumpUrl: jumpUrl), region: region, logger: logger, on: eventLoop)
    }
}
