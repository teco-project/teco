//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateConvertTaskApi请求参数结构体
    public struct ChannelCreateConvertTaskApiRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 和 Agent.ProxyAppId 均必填。
        public let agent: Agent

        /// 资源类型 取值范围doc,docx,html,xls,xlsx之一
        public let resourceType: String

        /// 资源名称，长度限制为256字符
        public let resourceName: String

        /// 资源Id，通过UploadFiles获取
        public let resourceId: String

        /// 调用方用户信息，不用传
        public let `operator`: UserInfo?

        /// 暂未开放
        public let organization: OrganizationInfo?

        public init(agent: Agent, resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, organization: OrganizationInfo? = nil) {
            self.agent = agent
            self.resourceType = resourceType
            self.resourceName = resourceName
            self.resourceId = resourceId
            self.operator = `operator`
            self.organization = organization
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case resourceType = "ResourceType"
            case resourceName = "ResourceName"
            case resourceId = "ResourceId"
            case `operator` = "Operator"
            case organization = "Organization"
        }
    }

    /// ChannelCreateConvertTaskApi返回参数结构体
    public struct ChannelCreateConvertTaskApiResponse: TCResponseModel {
        /// 任务id
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 创建文件转换任务
    @inlinable
    public func channelCreateConvertTaskApi(_ input: ChannelCreateConvertTaskApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateConvertTaskApiResponse> {
        self.client.execute(action: "ChannelCreateConvertTaskApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建文件转换任务
    @inlinable
    public func channelCreateConvertTaskApi(_ input: ChannelCreateConvertTaskApiRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateConvertTaskApiResponse {
        try await self.client.execute(action: "ChannelCreateConvertTaskApi", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建文件转换任务
    @inlinable
    public func channelCreateConvertTaskApi(agent: Agent, resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateConvertTaskApiResponse> {
        self.channelCreateConvertTaskApi(.init(agent: agent, resourceType: resourceType, resourceName: resourceName, resourceId: resourceId, operator: `operator`, organization: organization), region: region, logger: logger, on: eventLoop)
    }

    /// 创建文件转换任务
    @inlinable
    public func channelCreateConvertTaskApi(agent: Agent, resourceType: String, resourceName: String, resourceId: String, operator: UserInfo? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateConvertTaskApiResponse {
        try await self.channelCreateConvertTaskApi(.init(agent: agent, resourceType: resourceType, resourceName: resourceName, resourceId: resourceId, operator: `operator`, organization: organization), region: region, logger: logger, on: eventLoop)
    }
}
