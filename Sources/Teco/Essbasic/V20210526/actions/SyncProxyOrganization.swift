//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// SyncProxyOrganization请求参数结构体
    public struct SyncProxyOrganizationRequest: TCRequest {
        /// 应用信息
        /// 此接口Agent.AppId、Agent.ProxyOrganizationOpenId必填
        public let agent: Agent

        /// 第三方平台子客企业名称，最大长度64个字符
        public let proxyOrganizationName: String

        /// 营业执照正面照(PNG或JPG) base64格式, 大小不超过5M
        public let businessLicense: String?

        /// 第三方平台子客企业统一社会信用代码，最大长度200个字符
        public let uniformSocialCreditCode: String?

        /// 第三方平台子客企业法人/负责人姓名
        public let proxyLegalName: String?

        /// 暂未开放
        @available(*, deprecated)
        public let `operator`: UserInfo? = nil

        /// 第三方平台子客企业法人/负责人证件类型，默认居民身份证（ID_CARD）类型，暂不支持其他类型
        public let proxyLegalIdCardType: String?

        /// 第三方平台子客企业法人/负责人证件号
        public let proxyLegalIdCardNumber: String?

        public init(agent: Agent, proxyOrganizationName: String, businessLicense: String? = nil, uniformSocialCreditCode: String? = nil, proxyLegalName: String? = nil, proxyLegalIdCardType: String? = nil, proxyLegalIdCardNumber: String? = nil) {
            self.agent = agent
            self.proxyOrganizationName = proxyOrganizationName
            self.businessLicense = businessLicense
            self.uniformSocialCreditCode = uniformSocialCreditCode
            self.proxyLegalName = proxyLegalName
            self.proxyLegalIdCardType = proxyLegalIdCardType
            self.proxyLegalIdCardNumber = proxyLegalIdCardNumber
        }

        @available(*, deprecated, renamed: "init(agent:proxyOrganizationName:businessLicense:uniformSocialCreditCode:proxyLegalName:proxyLegalIdCardType:proxyLegalIdCardNumber:)", message: "'operator' is deprecated in 'SyncProxyOrganizationRequest'. Setting this parameter has no effect.")
        public init(agent: Agent, proxyOrganizationName: String, businessLicense: String? = nil, uniformSocialCreditCode: String? = nil, proxyLegalName: String? = nil, operator: UserInfo? = nil, proxyLegalIdCardType: String? = nil, proxyLegalIdCardNumber: String? = nil) {
            self.agent = agent
            self.proxyOrganizationName = proxyOrganizationName
            self.businessLicense = businessLicense
            self.uniformSocialCreditCode = uniformSocialCreditCode
            self.proxyLegalName = proxyLegalName
            self.proxyLegalIdCardType = proxyLegalIdCardType
            self.proxyLegalIdCardNumber = proxyLegalIdCardNumber
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case proxyOrganizationName = "ProxyOrganizationName"
            case businessLicense = "BusinessLicense"
            case uniformSocialCreditCode = "UniformSocialCreditCode"
            case proxyLegalName = "ProxyLegalName"
            case `operator` = "Operator"
            case proxyLegalIdCardType = "ProxyLegalIdCardType"
            case proxyLegalIdCardNumber = "ProxyLegalIdCardNumber"
        }
    }

    /// SyncProxyOrganization返回参数结构体
    public struct SyncProxyOrganizationResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 同步企业信息
    ///
    /// 此接口（SyncProxyOrganization）用于同步第三方平台子客企业信息，包括企业名称，企业营业执照，企业统一社会信用代码和法人姓名等，便于子客企业在企业激活过程中无需手动上传营业执照或补充企业信息。注意：
    /// 1. 需要在子客企业激活前调用该接口，如果您的企业已经提交企业信息或者企业已经激活，同步的企业信息将不会生效。
    /// 2. 如果您同时传递了营业执照信息和企业名称等信息，在认证过程中将以营业执照中的企业信息为准，请注意企业信息需要和营业执照信息对应。
    @inlinable @discardableResult
    public func syncProxyOrganization(_ input: SyncProxyOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SyncProxyOrganizationResponse> {
        self.client.execute(action: "SyncProxyOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 同步企业信息
    ///
    /// 此接口（SyncProxyOrganization）用于同步第三方平台子客企业信息，包括企业名称，企业营业执照，企业统一社会信用代码和法人姓名等，便于子客企业在企业激活过程中无需手动上传营业执照或补充企业信息。注意：
    /// 1. 需要在子客企业激活前调用该接口，如果您的企业已经提交企业信息或者企业已经激活，同步的企业信息将不会生效。
    /// 2. 如果您同时传递了营业执照信息和企业名称等信息，在认证过程中将以营业执照中的企业信息为准，请注意企业信息需要和营业执照信息对应。
    @inlinable @discardableResult
    public func syncProxyOrganization(_ input: SyncProxyOrganizationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncProxyOrganizationResponse {
        try await self.client.execute(action: "SyncProxyOrganization", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 同步企业信息
    ///
    /// 此接口（SyncProxyOrganization）用于同步第三方平台子客企业信息，包括企业名称，企业营业执照，企业统一社会信用代码和法人姓名等，便于子客企业在企业激活过程中无需手动上传营业执照或补充企业信息。注意：
    /// 1. 需要在子客企业激活前调用该接口，如果您的企业已经提交企业信息或者企业已经激活，同步的企业信息将不会生效。
    /// 2. 如果您同时传递了营业执照信息和企业名称等信息，在认证过程中将以营业执照中的企业信息为准，请注意企业信息需要和营业执照信息对应。
    @inlinable @discardableResult
    public func syncProxyOrganization(agent: Agent, proxyOrganizationName: String, businessLicense: String? = nil, uniformSocialCreditCode: String? = nil, proxyLegalName: String? = nil, proxyLegalIdCardType: String? = nil, proxyLegalIdCardNumber: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SyncProxyOrganizationResponse> {
        self.syncProxyOrganization(.init(agent: agent, proxyOrganizationName: proxyOrganizationName, businessLicense: businessLicense, uniformSocialCreditCode: uniformSocialCreditCode, proxyLegalName: proxyLegalName, proxyLegalIdCardType: proxyLegalIdCardType, proxyLegalIdCardNumber: proxyLegalIdCardNumber), region: region, logger: logger, on: eventLoop)
    }

    /// 同步企业信息
    ///
    /// 此接口（SyncProxyOrganization）用于同步第三方平台子客企业信息，包括企业名称，企业营业执照，企业统一社会信用代码和法人姓名等，便于子客企业在企业激活过程中无需手动上传营业执照或补充企业信息。注意：
    /// 1. 需要在子客企业激活前调用该接口，如果您的企业已经提交企业信息或者企业已经激活，同步的企业信息将不会生效。
    /// 2. 如果您同时传递了营业执照信息和企业名称等信息，在认证过程中将以营业执照中的企业信息为准，请注意企业信息需要和营业执照信息对应。
    @available(*, deprecated, renamed: "syncProxyOrganization(agent:proxyOrganizationName:businessLicense:uniformSocialCreditCode:proxyLegalName:proxyLegalIdCardType:proxyLegalIdCardNumber:region:logger:on:)", message: "'operator' is deprecated. Setting this parameter has no effect.")
    @inlinable @discardableResult
    public func syncProxyOrganization(agent: Agent, proxyOrganizationName: String, businessLicense: String? = nil, uniformSocialCreditCode: String? = nil, proxyLegalName: String? = nil, operator: UserInfo? = nil, proxyLegalIdCardType: String? = nil, proxyLegalIdCardNumber: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SyncProxyOrganizationResponse> {
        self.syncProxyOrganization(.init(agent: agent, proxyOrganizationName: proxyOrganizationName, businessLicense: businessLicense, uniformSocialCreditCode: uniformSocialCreditCode, proxyLegalName: proxyLegalName, operator: `operator`, proxyLegalIdCardType: proxyLegalIdCardType, proxyLegalIdCardNumber: proxyLegalIdCardNumber), region: region, logger: logger, on: eventLoop)
    }

    /// 同步企业信息
    ///
    /// 此接口（SyncProxyOrganization）用于同步第三方平台子客企业信息，包括企业名称，企业营业执照，企业统一社会信用代码和法人姓名等，便于子客企业在企业激活过程中无需手动上传营业执照或补充企业信息。注意：
    /// 1. 需要在子客企业激活前调用该接口，如果您的企业已经提交企业信息或者企业已经激活，同步的企业信息将不会生效。
    /// 2. 如果您同时传递了营业执照信息和企业名称等信息，在认证过程中将以营业执照中的企业信息为准，请注意企业信息需要和营业执照信息对应。
    @inlinable @discardableResult
    public func syncProxyOrganization(agent: Agent, proxyOrganizationName: String, businessLicense: String? = nil, uniformSocialCreditCode: String? = nil, proxyLegalName: String? = nil, proxyLegalIdCardType: String? = nil, proxyLegalIdCardNumber: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncProxyOrganizationResponse {
        try await self.syncProxyOrganization(.init(agent: agent, proxyOrganizationName: proxyOrganizationName, businessLicense: businessLicense, uniformSocialCreditCode: uniformSocialCreditCode, proxyLegalName: proxyLegalName, proxyLegalIdCardType: proxyLegalIdCardType, proxyLegalIdCardNumber: proxyLegalIdCardNumber), region: region, logger: logger, on: eventLoop)
    }

    /// 同步企业信息
    ///
    /// 此接口（SyncProxyOrganization）用于同步第三方平台子客企业信息，包括企业名称，企业营业执照，企业统一社会信用代码和法人姓名等，便于子客企业在企业激活过程中无需手动上传营业执照或补充企业信息。注意：
    /// 1. 需要在子客企业激活前调用该接口，如果您的企业已经提交企业信息或者企业已经激活，同步的企业信息将不会生效。
    /// 2. 如果您同时传递了营业执照信息和企业名称等信息，在认证过程中将以营业执照中的企业信息为准，请注意企业信息需要和营业执照信息对应。
    @available(*, deprecated, renamed: "syncProxyOrganization(agent:proxyOrganizationName:businessLicense:uniformSocialCreditCode:proxyLegalName:proxyLegalIdCardType:proxyLegalIdCardNumber:region:logger:on:)", message: "'operator' is deprecated. Setting this parameter has no effect.")
    @inlinable @discardableResult
    public func syncProxyOrganization(agent: Agent, proxyOrganizationName: String, businessLicense: String? = nil, uniformSocialCreditCode: String? = nil, proxyLegalName: String? = nil, operator: UserInfo? = nil, proxyLegalIdCardType: String? = nil, proxyLegalIdCardNumber: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncProxyOrganizationResponse {
        try await self.syncProxyOrganization(.init(agent: agent, proxyOrganizationName: proxyOrganizationName, businessLicense: businessLicense, uniformSocialCreditCode: uniformSocialCreditCode, proxyLegalName: proxyLegalName, operator: `operator`, proxyLegalIdCardType: proxyLegalIdCardType, proxyLegalIdCardNumber: proxyLegalIdCardNumber), region: region, logger: logger, on: eventLoop)
    }
}
