//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCancelFlow请求参数结构体
    public struct ChannelCancelFlowRequest: TCRequestModel {
        /// 签署流程编号
        public let flowId: String

        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 必填。
        public let agent: Agent?

        /// 撤回原因，最大不超过200字符
        public let cancelMessage: String?

        /// 撤销理由自定义格式；选项：
        /// 0 默认格式
        /// 1 只保留身份信息：展示为【发起方】
        /// 2 保留身份信息+企业名称：展示为【发起方xxx公司】
        /// 3 保留身份信息+企业名称+经办人名称：展示为【发起方xxxx公司-经办人姓名】
        public let cancelMessageFormat: Int64?

        /// 暂未开放
        public let `operator`: UserInfo?

        public init(flowId: String, agent: Agent? = nil, cancelMessage: String? = nil, cancelMessageFormat: Int64? = nil, operator: UserInfo? = nil) {
            self.flowId = flowId
            self.agent = agent
            self.cancelMessage = cancelMessage
            self.cancelMessageFormat = cancelMessageFormat
            self.operator = `operator`
        }

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case agent = "Agent"
            case cancelMessage = "CancelMessage"
            case cancelMessageFormat = "CancelMessageFormat"
            case `operator` = "Operator"
        }
    }

    /// ChannelCancelFlow返回参数结构体
    public struct ChannelCancelFlowResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 撤销签署流程
    ///
    /// 撤销签署流程接口，可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable @discardableResult
    public func channelCancelFlow(_ input: ChannelCancelFlowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCancelFlowResponse> {
        self.client.execute(action: "ChannelCancelFlow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 撤销签署流程
    ///
    /// 撤销签署流程接口，可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable @discardableResult
    public func channelCancelFlow(_ input: ChannelCancelFlowRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCancelFlowResponse {
        try await self.client.execute(action: "ChannelCancelFlow", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 撤销签署流程
    ///
    /// 撤销签署流程接口，可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable @discardableResult
    public func channelCancelFlow(flowId: String, agent: Agent? = nil, cancelMessage: String? = nil, cancelMessageFormat: Int64? = nil, operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCancelFlowResponse> {
        self.channelCancelFlow(.init(flowId: flowId, agent: agent, cancelMessage: cancelMessage, cancelMessageFormat: cancelMessageFormat, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }

    /// 撤销签署流程
    ///
    /// 撤销签署流程接口，可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable @discardableResult
    public func channelCancelFlow(flowId: String, agent: Agent? = nil, cancelMessage: String? = nil, cancelMessageFormat: Int64? = nil, operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCancelFlowResponse {
        try await self.channelCancelFlow(.init(flowId: flowId, agent: agent, cancelMessage: cancelMessage, cancelMessageFormat: cancelMessageFormat, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }
}
