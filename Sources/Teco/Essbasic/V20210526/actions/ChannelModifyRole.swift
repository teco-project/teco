//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelModifyRole请求参数结构体
    public struct ChannelModifyRoleRequest: TCRequest {
        /// 代理企业和员工的信息。
        public let agent: Agent

        /// 角色名称，最大长度为20个字符，仅限中文、字母、数字和下划线组成。
        public let name: String

        /// 角色Id，可通过接口 ChannelDescribeRoles 查询获取
        public let roleId: String

        /// 角色描述，最大长度为50个字符
        public let description: String?

        /// 权限树，权限树内容 PermissionGroups 可参考接口 DescribeIntegrationRoles 的输出
        public let permissionGroups: [PermissionGroup]?

        public init(agent: Agent, name: String, roleId: String, description: String? = nil, permissionGroups: [PermissionGroup]? = nil) {
            self.agent = agent
            self.name = name
            self.roleId = roleId
            self.description = description
            self.permissionGroups = permissionGroups
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case name = "Name"
            case roleId = "RoleId"
            case description = "Description"
            case permissionGroups = "PermissionGroups"
        }
    }

    /// ChannelModifyRole返回参数结构体
    public struct ChannelModifyRoleResponse: TCResponse {
        /// 角色id
        public let roleId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case roleId = "RoleId"
            case requestId = "RequestId"
        }
    }

    /// 更新角色
    ///
    /// 此接口（ChannelModifyRole）用来更新企业自定义角色。
    ///
    /// 适用场景1：更新当前企业的自定义角色的名称或描述等其他信息，更新时不进行权限的设置（PermissionGroups 参数不传）。
    ///
    /// 适用场景2：更新当前企业的自定义角色的权限信息，更新时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelModifyRole(_ input: ChannelModifyRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelModifyRoleResponse> {
        self.client.execute(action: "ChannelModifyRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新角色
    ///
    /// 此接口（ChannelModifyRole）用来更新企业自定义角色。
    ///
    /// 适用场景1：更新当前企业的自定义角色的名称或描述等其他信息，更新时不进行权限的设置（PermissionGroups 参数不传）。
    ///
    /// 适用场景2：更新当前企业的自定义角色的权限信息，更新时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelModifyRole(_ input: ChannelModifyRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelModifyRoleResponse {
        try await self.client.execute(action: "ChannelModifyRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新角色
    ///
    /// 此接口（ChannelModifyRole）用来更新企业自定义角色。
    ///
    /// 适用场景1：更新当前企业的自定义角色的名称或描述等其他信息，更新时不进行权限的设置（PermissionGroups 参数不传）。
    ///
    /// 适用场景2：更新当前企业的自定义角色的权限信息，更新时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelModifyRole(agent: Agent, name: String, roleId: String, description: String? = nil, permissionGroups: [PermissionGroup]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelModifyRoleResponse> {
        self.channelModifyRole(.init(agent: agent, name: name, roleId: roleId, description: description, permissionGroups: permissionGroups), region: region, logger: logger, on: eventLoop)
    }

    /// 更新角色
    ///
    /// 此接口（ChannelModifyRole）用来更新企业自定义角色。
    ///
    /// 适用场景1：更新当前企业的自定义角色的名称或描述等其他信息，更新时不进行权限的设置（PermissionGroups 参数不传）。
    ///
    /// 适用场景2：更新当前企业的自定义角色的权限信息，更新时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 ChannelDescribeRoles 的输出。
    @inlinable
    public func channelModifyRole(agent: Agent, name: String, roleId: String, description: String? = nil, permissionGroups: [PermissionGroup]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelModifyRoleResponse {
        try await self.channelModifyRole(.init(agent: agent, name: name, roleId: roleId, description: description, permissionGroups: permissionGroups), region: region, logger: logger, on: eventLoop)
    }
}
