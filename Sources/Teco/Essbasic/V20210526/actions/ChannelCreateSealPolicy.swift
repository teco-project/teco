//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateSealPolicy请求参数结构体
    public struct ChannelCreateSealPolicyRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 必填。
        public let agent: Agent

        /// 指定印章ID
        public let sealId: String

        /// 指定待授权的用户ID数组,电子签的用户ID
        /// 可以填写OpenId，系统会通过组织+渠道+OpenId查询得到UserId进行授权。
        public let userIds: [String]

        /// 操作人（用户）信息，不用传
        @available(*, deprecated)
        public let `operator`: UserInfo? = nil

        /// 企业机构信息，不用传
        @available(*, deprecated)
        public let organization: OrganizationInfo? = nil

        public init(agent: Agent, sealId: String, userIds: [String]) {
            self.agent = agent
            self.sealId = sealId
            self.userIds = userIds
        }

        @available(*, deprecated, renamed: "init(agent:sealId:userIds:)", message: "'operator' and 'organization' are deprecated in 'ChannelCreateSealPolicyRequest'. Setting these parameters has no effect.")
        public init(agent: Agent, sealId: String, userIds: [String], operator: UserInfo? = nil, organization: OrganizationInfo? = nil) {
            self.agent = agent
            self.sealId = sealId
            self.userIds = userIds
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case sealId = "SealId"
            case userIds = "UserIds"
            case `operator` = "Operator"
            case organization = "Organization"
        }
    }

    /// ChannelCreateSealPolicy返回参数结构体
    public struct ChannelCreateSealPolicyResponse: TCResponseModel {
        /// 最终授权成功的电子签系统用户ID数组。其他的跳过的是已经授权了的。
        /// 请求参数填写OpenId时，返回授权成功的 Openid。
        public let userIds: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case userIds = "UserIds"
            case requestId = "RequestId"
        }
    }

    /// 创建印章授权
    ///
    /// 将指定印章授权给第三方平台子客企业下的某些员工
    @inlinable
    public func channelCreateSealPolicy(_ input: ChannelCreateSealPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateSealPolicyResponse> {
        self.client.execute(action: "ChannelCreateSealPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建印章授权
    ///
    /// 将指定印章授权给第三方平台子客企业下的某些员工
    @inlinable
    public func channelCreateSealPolicy(_ input: ChannelCreateSealPolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateSealPolicyResponse {
        try await self.client.execute(action: "ChannelCreateSealPolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建印章授权
    ///
    /// 将指定印章授权给第三方平台子客企业下的某些员工
    @inlinable
    public func channelCreateSealPolicy(agent: Agent, sealId: String, userIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateSealPolicyResponse> {
        self.channelCreateSealPolicy(.init(agent: agent, sealId: sealId, userIds: userIds), region: region, logger: logger, on: eventLoop)
    }

    /// 创建印章授权
    ///
    /// 将指定印章授权给第三方平台子客企业下的某些员工
    @available(*, deprecated, renamed: "channelCreateSealPolicy(agent:sealId:userIds:region:logger:on:)", message: "'operator' and 'organization' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreateSealPolicy(agent: Agent, sealId: String, userIds: [String], operator: UserInfo? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateSealPolicyResponse> {
        self.channelCreateSealPolicy(.init(agent: agent, sealId: sealId, userIds: userIds, operator: `operator`, organization: organization), region: region, logger: logger, on: eventLoop)
    }

    /// 创建印章授权
    ///
    /// 将指定印章授权给第三方平台子客企业下的某些员工
    @inlinable
    public func channelCreateSealPolicy(agent: Agent, sealId: String, userIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateSealPolicyResponse {
        try await self.channelCreateSealPolicy(.init(agent: agent, sealId: sealId, userIds: userIds), region: region, logger: logger, on: eventLoop)
    }

    /// 创建印章授权
    ///
    /// 将指定印章授权给第三方平台子客企业下的某些员工
    @available(*, deprecated, renamed: "channelCreateSealPolicy(agent:sealId:userIds:region:logger:on:)", message: "'operator' and 'organization' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreateSealPolicy(agent: Agent, sealId: String, userIds: [String], operator: UserInfo? = nil, organization: OrganizationInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateSealPolicyResponse {
        try await self.channelCreateSealPolicy(.init(agent: agent, sealId: sealId, userIds: userIds, operator: `operator`, organization: organization), region: region, logger: logger, on: eventLoop)
    }
}
