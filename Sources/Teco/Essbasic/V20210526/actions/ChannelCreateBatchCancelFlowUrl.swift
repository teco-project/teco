//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateBatchCancelFlowUrl请求参数结构体
    public struct ChannelCreateBatchCancelFlowUrlRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 和 Agent.ProxyAppId 均必填。
        public let agent: Agent

        /// 签署流程Id数组
        public let flowIds: [String]

        /// 暂未开放
        public let `operator`: UserInfo?

        public init(agent: Agent, flowIds: [String], operator: UserInfo? = nil) {
            self.agent = agent
            self.flowIds = flowIds
            self.operator = `operator`
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case flowIds = "FlowIds"
            case `operator` = "Operator"
        }
    }

    /// ChannelCreateBatchCancelFlowUrl返回参数结构体
    public struct ChannelCreateBatchCancelFlowUrlResponse: TCResponseModel {
        /// 批量撤销url
        public let batchCancelFlowUrl: String

        /// 签署流程批量撤销失败原因
        public let failMessages: [String]

        /// 签署撤销url过期时间-年月日-时分秒
        public let urlExpireOn: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case batchCancelFlowUrl = "BatchCancelFlowUrl"
            case failMessages = "FailMessages"
            case urlExpireOn = "UrlExpireOn"
            case requestId = "RequestId"
        }
    }

    /// 根据签署流程id创建批量撤销url
    ///
    /// 指定需要批量撤销的签署流程Id，获取批量撤销链接 - 不建议使用此接口，可使用ChannelBatchCancelFlows
    /// 客户指定需要撤销的签署流程Id，最多100个，超过100不处理；
    /// 接口调用成功返回批量撤销合同的链接，通过链接跳转到电子签小程序完成批量撤销;
    /// 可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable
    public func channelCreateBatchCancelFlowUrl(_ input: ChannelCreateBatchCancelFlowUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateBatchCancelFlowUrlResponse> {
        self.client.execute(action: "ChannelCreateBatchCancelFlowUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据签署流程id创建批量撤销url
    ///
    /// 指定需要批量撤销的签署流程Id，获取批量撤销链接 - 不建议使用此接口，可使用ChannelBatchCancelFlows
    /// 客户指定需要撤销的签署流程Id，最多100个，超过100不处理；
    /// 接口调用成功返回批量撤销合同的链接，通过链接跳转到电子签小程序完成批量撤销;
    /// 可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable
    public func channelCreateBatchCancelFlowUrl(_ input: ChannelCreateBatchCancelFlowUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateBatchCancelFlowUrlResponse {
        try await self.client.execute(action: "ChannelCreateBatchCancelFlowUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据签署流程id创建批量撤销url
    ///
    /// 指定需要批量撤销的签署流程Id，获取批量撤销链接 - 不建议使用此接口，可使用ChannelBatchCancelFlows
    /// 客户指定需要撤销的签署流程Id，最多100个，超过100不处理；
    /// 接口调用成功返回批量撤销合同的链接，通过链接跳转到电子签小程序完成批量撤销;
    /// 可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable
    public func channelCreateBatchCancelFlowUrl(agent: Agent, flowIds: [String], operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateBatchCancelFlowUrlResponse> {
        self.channelCreateBatchCancelFlowUrl(.init(agent: agent, flowIds: flowIds, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }

    /// 根据签署流程id创建批量撤销url
    ///
    /// 指定需要批量撤销的签署流程Id，获取批量撤销链接 - 不建议使用此接口，可使用ChannelBatchCancelFlows
    /// 客户指定需要撤销的签署流程Id，最多100个，超过100不处理；
    /// 接口调用成功返回批量撤销合同的链接，通过链接跳转到电子签小程序完成批量撤销;
    /// 可以撤回：未全部签署完成；不可以撤回（终态）：已全部签署完成、已拒签、已过期、已撤回。
    /// 注意:
    /// 能撤回合同的只能是合同的发起人或者发起企业的超管、法人
    @inlinable
    public func channelCreateBatchCancelFlowUrl(agent: Agent, flowIds: [String], operator: UserInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateBatchCancelFlowUrlResponse {
        try await self.channelCreateBatchCancelFlowUrl(.init(agent: agent, flowIds: flowIds, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }
}
