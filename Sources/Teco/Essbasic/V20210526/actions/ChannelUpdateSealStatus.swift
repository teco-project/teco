//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelUpdateSealStatus请求参数结构体
    public struct ChannelUpdateSealStatusRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 和 Agent.ProxyAppId 均必填。
        public let agent: Agent

        /// 操作的印章状态，DISABLE-停用印章
        public let status: String

        /// 印章ID
        public let sealId: String

        /// 操作者的信息
        public let `operator`: UserInfo?

        /// 更新印章状态原因说明
        public let reason: String?

        public init(agent: Agent, status: String, sealId: String, operator: UserInfo? = nil, reason: String? = nil) {
            self.agent = agent
            self.status = status
            self.sealId = sealId
            self.operator = `operator`
            self.reason = reason
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case status = "Status"
            case sealId = "SealId"
            case `operator` = "Operator"
            case reason = "Reason"
        }
    }

    /// ChannelUpdateSealStatus返回参数结构体
    public struct ChannelUpdateSealStatusResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 更新印章状态
    ///
    /// 本接口（ChannelUpdateSealStatus）用于第三方应用平台为子客企业更新印章状态
    @inlinable @discardableResult
    public func channelUpdateSealStatus(_ input: ChannelUpdateSealStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelUpdateSealStatusResponse> {
        self.client.execute(action: "ChannelUpdateSealStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新印章状态
    ///
    /// 本接口（ChannelUpdateSealStatus）用于第三方应用平台为子客企业更新印章状态
    @inlinable @discardableResult
    public func channelUpdateSealStatus(_ input: ChannelUpdateSealStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelUpdateSealStatusResponse {
        try await self.client.execute(action: "ChannelUpdateSealStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新印章状态
    ///
    /// 本接口（ChannelUpdateSealStatus）用于第三方应用平台为子客企业更新印章状态
    @inlinable @discardableResult
    public func channelUpdateSealStatus(agent: Agent, status: String, sealId: String, operator: UserInfo? = nil, reason: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelUpdateSealStatusResponse> {
        self.channelUpdateSealStatus(.init(agent: agent, status: status, sealId: sealId, operator: `operator`, reason: reason), region: region, logger: logger, on: eventLoop)
    }

    /// 更新印章状态
    ///
    /// 本接口（ChannelUpdateSealStatus）用于第三方应用平台为子客企业更新印章状态
    @inlinable @discardableResult
    public func channelUpdateSealStatus(agent: Agent, status: String, sealId: String, operator: UserInfo? = nil, reason: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelUpdateSealStatusResponse {
        try await self.channelUpdateSealStatus(.init(agent: agent, status: status, sealId: sealId, operator: `operator`, reason: reason), region: region, logger: logger, on: eventLoop)
    }
}
