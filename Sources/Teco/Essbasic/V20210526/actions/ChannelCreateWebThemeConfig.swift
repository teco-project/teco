//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateWebThemeConfig请求参数结构体
    public struct ChannelCreateWebThemeConfigRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 必填。
        public let agent: Agent

        /// 主题类型<br/>EMBED_WEB_THEME：嵌入式主题
        /// <br/>目前只支持EMBED_WEB_THEME，web页面嵌入的主题风格配置
        public let themeType: String

        /// 主题配置
        public let webThemeConfig: WebThemeConfig

        public init(agent: Agent, themeType: String, webThemeConfig: WebThemeConfig) {
            self.agent = agent
            self.themeType = themeType
            self.webThemeConfig = webThemeConfig
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case themeType = "ThemeType"
            case webThemeConfig = "WebThemeConfig"
        }
    }

    /// ChannelCreateWebThemeConfig返回参数结构体
    public struct ChannelCreateWebThemeConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 生成页面主题配置
    @inlinable @discardableResult
    public func channelCreateWebThemeConfig(_ input: ChannelCreateWebThemeConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateWebThemeConfigResponse> {
        self.client.execute(action: "ChannelCreateWebThemeConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 生成页面主题配置
    @inlinable @discardableResult
    public func channelCreateWebThemeConfig(_ input: ChannelCreateWebThemeConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateWebThemeConfigResponse {
        try await self.client.execute(action: "ChannelCreateWebThemeConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 生成页面主题配置
    @inlinable @discardableResult
    public func channelCreateWebThemeConfig(agent: Agent, themeType: String, webThemeConfig: WebThemeConfig, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateWebThemeConfigResponse> {
        self.channelCreateWebThemeConfig(.init(agent: agent, themeType: themeType, webThemeConfig: webThemeConfig), region: region, logger: logger, on: eventLoop)
    }

    /// 生成页面主题配置
    @inlinable @discardableResult
    public func channelCreateWebThemeConfig(agent: Agent, themeType: String, webThemeConfig: WebThemeConfig, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateWebThemeConfigResponse {
        try await self.channelCreateWebThemeConfig(.init(agent: agent, themeType: themeType, webThemeConfig: webThemeConfig), region: region, logger: logger, on: eventLoop)
    }
}
