//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreatePreparedPersonalEsign请求参数结构体
    public struct ChannelCreatePreparedPersonalEsignRequest: TCRequest {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 和 Agent.ProxyAppId 必填。
        public let agent: Agent

        /// 个人用户姓名
        public let userName: String

        /// 身份证件号码
        public let idCardNumber: String

        /// 印章名称
        public let sealName: String

        /// 印章图片的base64，最大不超过 8M
        public let sealImage: String

        /// 操作者信息
        public let `operator`: UserInfo?

        /// 身份证件类型
        public let idCardType: String?

        /// 是否开启印章图片压缩处理，默认不开启，如需开启请设置为 true。当印章超过 2M 时建议开启，开启后图片的 hash 将发生变化。
        public let sealImageCompress: Bool?

        /// 手机号码；当需要开通自动签时，该参数必传
        public let mobile: String?

        /// 是否开通自动签，该功能需联系运营工作人员开通后使用
        public let enableAutoSign: Bool?

        public init(agent: Agent, userName: String, idCardNumber: String, sealName: String, sealImage: String, operator: UserInfo? = nil, idCardType: String? = nil, sealImageCompress: Bool? = nil, mobile: String? = nil, enableAutoSign: Bool? = nil) {
            self.agent = agent
            self.userName = userName
            self.idCardNumber = idCardNumber
            self.sealName = sealName
            self.sealImage = sealImage
            self.operator = `operator`
            self.idCardType = idCardType
            self.sealImageCompress = sealImageCompress
            self.mobile = mobile
            self.enableAutoSign = enableAutoSign
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case userName = "UserName"
            case idCardNumber = "IdCardNumber"
            case sealName = "SealName"
            case sealImage = "SealImage"
            case `operator` = "Operator"
            case idCardType = "IdCardType"
            case sealImageCompress = "SealImageCompress"
            case mobile = "Mobile"
            case enableAutoSign = "EnableAutoSign"
        }
    }

    /// ChannelCreatePreparedPersonalEsign返回参数结构体
    public struct ChannelCreatePreparedPersonalEsignResponse: TCResponse {
        /// 导入的印章 ID
        public let sealId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sealId = "SealId"
            case requestId = "RequestId"
        }
    }

    /// 创建导入处方单个人印章
    ///
    /// 本接口（ChannelCreatePreparedPersonalEsign）用于创建导入个人印章（处方单场景专用，使用此接口请与客户经理确认）。
    @inlinable
    public func channelCreatePreparedPersonalEsign(_ input: ChannelCreatePreparedPersonalEsignRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreatePreparedPersonalEsignResponse> {
        self.client.execute(action: "ChannelCreatePreparedPersonalEsign", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建导入处方单个人印章
    ///
    /// 本接口（ChannelCreatePreparedPersonalEsign）用于创建导入个人印章（处方单场景专用，使用此接口请与客户经理确认）。
    @inlinable
    public func channelCreatePreparedPersonalEsign(_ input: ChannelCreatePreparedPersonalEsignRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreatePreparedPersonalEsignResponse {
        try await self.client.execute(action: "ChannelCreatePreparedPersonalEsign", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建导入处方单个人印章
    ///
    /// 本接口（ChannelCreatePreparedPersonalEsign）用于创建导入个人印章（处方单场景专用，使用此接口请与客户经理确认）。
    @inlinable
    public func channelCreatePreparedPersonalEsign(agent: Agent, userName: String, idCardNumber: String, sealName: String, sealImage: String, operator: UserInfo? = nil, idCardType: String? = nil, sealImageCompress: Bool? = nil, mobile: String? = nil, enableAutoSign: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreatePreparedPersonalEsignResponse> {
        self.channelCreatePreparedPersonalEsign(.init(agent: agent, userName: userName, idCardNumber: idCardNumber, sealName: sealName, sealImage: sealImage, operator: `operator`, idCardType: idCardType, sealImageCompress: sealImageCompress, mobile: mobile, enableAutoSign: enableAutoSign), region: region, logger: logger, on: eventLoop)
    }

    /// 创建导入处方单个人印章
    ///
    /// 本接口（ChannelCreatePreparedPersonalEsign）用于创建导入个人印章（处方单场景专用，使用此接口请与客户经理确认）。
    @inlinable
    public func channelCreatePreparedPersonalEsign(agent: Agent, userName: String, idCardNumber: String, sealName: String, sealImage: String, operator: UserInfo? = nil, idCardType: String? = nil, sealImageCompress: Bool? = nil, mobile: String? = nil, enableAutoSign: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreatePreparedPersonalEsignResponse {
        try await self.channelCreatePreparedPersonalEsign(.init(agent: agent, userName: userName, idCardNumber: idCardNumber, sealName: sealName, sealImage: sealImage, operator: `operator`, idCardType: idCardType, sealImageCompress: sealImageCompress, mobile: mobile, enableAutoSign: enableAutoSign), region: region, logger: logger, on: eventLoop)
    }
}
