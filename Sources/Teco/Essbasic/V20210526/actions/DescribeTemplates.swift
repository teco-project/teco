//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Essbasic {
    /// DescribeTemplates请求参数结构体
    public struct DescribeTemplatesRequest: TCPaginatedRequest {
        /// 渠道应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 和 Agent.ProxyAppId 均必填。
        public let agent: Agent

        /// 模板唯一标识，查询单个模板时使用
        public let templateId: String?

        /// 查询内容：0-模板列表及详情（默认），1-仅模板列表
        public let contentType: Int64?

        /// 查询个数，默认20，最大100；在查询列表的时候有效
        public let limit: UInt64?

        /// 查询偏移位置，默认0；在查询列表的时候有效
        public let offset: UInt64?

        /// 是否返回所有组件信息。默认false，只返回发起方控件；true，返回所有签署方控件
        public let queryAllComponents: Bool?

        /// 模糊搜索模板名称，最大长度200
        public let templateName: String?

        /// 操作者的信息
        public let `operator`: UserInfo?

        /// 是否获取模板预览链接
        public let withPreviewUrl: Bool?

        /// 是否获取模板的PDF文件链接-渠道版需要开启白名单时才能使用。
        public let withPdfUrl: Bool?

        /// 渠道模板ID
        public let channelTemplateId: String?

        public init(agent: Agent, templateId: String? = nil, contentType: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, queryAllComponents: Bool? = nil, templateName: String? = nil, operator: UserInfo? = nil, withPreviewUrl: Bool? = nil, withPdfUrl: Bool? = nil, channelTemplateId: String? = nil) {
            self.agent = agent
            self.templateId = templateId
            self.contentType = contentType
            self.limit = limit
            self.offset = offset
            self.queryAllComponents = queryAllComponents
            self.templateName = templateName
            self.operator = `operator`
            self.withPreviewUrl = withPreviewUrl
            self.withPdfUrl = withPdfUrl
            self.channelTemplateId = channelTemplateId
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case templateId = "TemplateId"
            case contentType = "ContentType"
            case limit = "Limit"
            case offset = "Offset"
            case queryAllComponents = "QueryAllComponents"
            case templateName = "TemplateName"
            case `operator` = "Operator"
            case withPreviewUrl = "WithPreviewUrl"
            case withPdfUrl = "WithPdfUrl"
            case channelTemplateId = "ChannelTemplateId"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTemplatesResponse) -> DescribeTemplatesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeTemplatesRequest(agent: self.agent, templateId: self.templateId, contentType: self.contentType, limit: self.limit, offset: (self.offset ?? 0) + response.limit, queryAllComponents: self.queryAllComponents, templateName: self.templateName, operator: self.operator, withPreviewUrl: self.withPreviewUrl, withPdfUrl: self.withPdfUrl, channelTemplateId: self.channelTemplateId)
        }
    }

    /// DescribeTemplates返回参数结构体
    public struct DescribeTemplatesResponse: TCPaginatedResponse {
        /// 模板详情
        public let templates: [TemplateInfo]

        /// 查询总数
        public let totalCount: Int64

        /// 查询数量
        public let limit: UInt64

        /// 查询起始偏移
        public let offset: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templates = "Templates"
            case totalCount = "TotalCount"
            case limit = "Limit"
            case offset = "Offset"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [TemplateInfo] {
            self.templates
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询模板信息列表
    ///
    /// 通过此接口（DescribeTemplates）查询该子客企业在电子签拥有的有效模板，不包括渠道模板
    @inlinable
    public func describeTemplates(_ input: DescribeTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTemplatesResponse> {
        self.client.execute(action: "DescribeTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询模板信息列表
    ///
    /// 通过此接口（DescribeTemplates）查询该子客企业在电子签拥有的有效模板，不包括渠道模板
    @inlinable
    public func describeTemplates(_ input: DescribeTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTemplatesResponse {
        try await self.client.execute(action: "DescribeTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询模板信息列表
    ///
    /// 通过此接口（DescribeTemplates）查询该子客企业在电子签拥有的有效模板，不包括渠道模板
    @inlinable
    public func describeTemplates(agent: Agent, templateId: String? = nil, contentType: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, queryAllComponents: Bool? = nil, templateName: String? = nil, operator: UserInfo? = nil, withPreviewUrl: Bool? = nil, withPdfUrl: Bool? = nil, channelTemplateId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTemplatesResponse> {
        self.describeTemplates(.init(agent: agent, templateId: templateId, contentType: contentType, limit: limit, offset: offset, queryAllComponents: queryAllComponents, templateName: templateName, operator: `operator`, withPreviewUrl: withPreviewUrl, withPdfUrl: withPdfUrl, channelTemplateId: channelTemplateId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询模板信息列表
    ///
    /// 通过此接口（DescribeTemplates）查询该子客企业在电子签拥有的有效模板，不包括渠道模板
    @inlinable
    public func describeTemplates(agent: Agent, templateId: String? = nil, contentType: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, queryAllComponents: Bool? = nil, templateName: String? = nil, operator: UserInfo? = nil, withPreviewUrl: Bool? = nil, withPdfUrl: Bool? = nil, channelTemplateId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTemplatesResponse {
        try await self.describeTemplates(.init(agent: agent, templateId: templateId, contentType: contentType, limit: limit, offset: offset, queryAllComponents: queryAllComponents, templateName: templateName, operator: `operator`, withPreviewUrl: withPreviewUrl, withPdfUrl: withPdfUrl, channelTemplateId: channelTemplateId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询模板信息列表
    ///
    /// 通过此接口（DescribeTemplates）查询该子客企业在电子签拥有的有效模板，不包括渠道模板
    @inlinable
    public func describeTemplatesPaginated(_ input: DescribeTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [TemplateInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeTemplates, logger: logger, on: eventLoop)
    }

    /// 查询模板信息列表
    ///
    /// 通过此接口（DescribeTemplates）查询该子客企业在电子签拥有的有效模板，不包括渠道模板
    @inlinable @discardableResult
    public func describeTemplatesPaginated(_ input: DescribeTemplatesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTemplatesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTemplates, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询模板信息列表
    ///
    /// 通过此接口（DescribeTemplates）查询该子客企业在电子签拥有的有效模板，不包括渠道模板
    ///
    /// - Returns: `AsyncSequence`s of `TemplateInfo` and `DescribeTemplatesResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTemplatesPaginator(_ input: DescribeTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTemplatesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTemplates, logger: logger, on: eventLoop)
    }
}
