//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ModifyExtendedService请求参数结构体
    public struct ModifyExtendedServiceRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 必填。
        ///
        /// 注: 此接口 参数Agent. ProxyOperator.OpenId 需要传递超管或者法人的OpenId
        public let agent: Agent

        /// 扩展服务类型
        ///   AUTO_SIGN             企业静默签（自动签署）
        ///   OVERSEA_SIGN          企业与港澳台居民*签署合同
        ///   MOBILE_CHECK_APPROVER 使用手机号验证签署方身份
        ///   PAGING_SEAL           骑缝章
        ///   DOWNLOAD_FLOW         授权渠道下载合同
        public let serviceType: String

        /// 操作类型
        /// OPEN:开通
        /// CLOSE:关闭
        public let operate: String

        public init(agent: Agent, serviceType: String, operate: String) {
            self.agent = agent
            self.serviceType = serviceType
            self.operate = operate
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case serviceType = "ServiceType"
            case operate = "Operate"
        }
    }

    /// ModifyExtendedService返回参数结构体
    public struct ModifyExtendedServiceResponse: TCResponseModel {
        /// 操作跳转链接，有效期24小时
        /// 若操作时没有返回跳转链接，表示无需跳转操作，此时会直接开通/关闭服务。
        ///
        /// 当操作类型是 OPEN 且 扩展服务类型是  AUTO_SIGN 或 DOWNLOAD_FLOW 或者 OVERSEA_SIGN 时返回操作链接，
        /// 返回的链接需要平台方自行触达超管或法人，超管或法人点击链接完成服务开通操作。
        public let operateUrl: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case operateUrl = "OperateUrl"
            case requestId = "RequestId"
        }
    }

    /// 修改企业扩展服务
    ///
    /// 修改（操作）企业扩展服务 ，企业经办人需要是企业超管或者法人
    @inlinable
    public func modifyExtendedService(_ input: ModifyExtendedServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyExtendedServiceResponse> {
        self.client.execute(action: "ModifyExtendedService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改企业扩展服务
    ///
    /// 修改（操作）企业扩展服务 ，企业经办人需要是企业超管或者法人
    @inlinable
    public func modifyExtendedService(_ input: ModifyExtendedServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyExtendedServiceResponse {
        try await self.client.execute(action: "ModifyExtendedService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改企业扩展服务
    ///
    /// 修改（操作）企业扩展服务 ，企业经办人需要是企业超管或者法人
    @inlinable
    public func modifyExtendedService(agent: Agent, serviceType: String, operate: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyExtendedServiceResponse> {
        self.modifyExtendedService(.init(agent: agent, serviceType: serviceType, operate: operate), region: region, logger: logger, on: eventLoop)
    }

    /// 修改企业扩展服务
    ///
    /// 修改（操作）企业扩展服务 ，企业经办人需要是企业超管或者法人
    @inlinable
    public func modifyExtendedService(agent: Agent, serviceType: String, operate: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyExtendedServiceResponse {
        try await self.modifyExtendedService(.init(agent: agent, serviceType: serviceType, operate: operate), region: region, logger: logger, on: eventLoop)
    }
}
