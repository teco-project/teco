//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateMultiFlowSignQRCode请求参数结构体
    public struct ChannelCreateMultiFlowSignQRCodeRequest: TCRequest {
        /// 应用相关信息。
        /// 此接口Agent.ProxyOrganizationOpenId、Agent. ProxyOperator.OpenId、Agent.AppId 必填。
        public let agent: Agent

        /// 模版ID
        public let templateId: String

        /// 签署流程名称，最大长度200个字符。
        public let flowName: String

        /// 最大可发起签署流程份数
        ///
        /// 默认5份
        ///
        /// 备注：发起签署流程数量超过此上限后，二维码自动失效。
        public let maxFlowNum: Int64?

        /// 签署流程有效天数 默认7天 最高设置不超过30天
        public let flowEffectiveDay: Int64?

        /// 二维码有效天数 默认7天 最高设置不超过90天
        public let qrEffectiveDay: Int64?

        /// 指定的签署二维码签署人
        ///
        /// 指定后，只允许知道的人操作和签署
        public let restrictions: [ApproverRestriction]?

        /// 已废弃，回调配置统一使用企业应用管理-应用集成-第三方应用中的配置
        ///
        /// 通过一码多扫二维码发起的合同，回调消息可参考文档 https://qian.tencent.com/developers/partner/callback_types_contracts_sign
        ///
        /// 用户通过签署二维码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档 https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83
        @available(*, deprecated)
        public let callbackUrl: String? = nil

        /// 限制二维码用户条件（已弃用）
        @available(*, deprecated)
        public let approverRestrictions: ApproverRestriction? = nil

        /// 暂未开放
        @available(*, deprecated)
        public let `operator`: UserInfo? = nil

        /// 指定签署方经办人控件类型是个人印章签署控件（SIGN_SIGNATURE） 时，可选的签名方式。
        public let approverComponentLimitTypes: [ApproverComponentLimitType]?

        public init(agent: Agent, templateId: String, flowName: String, maxFlowNum: Int64? = nil, flowEffectiveDay: Int64? = nil, qrEffectiveDay: Int64? = nil, restrictions: [ApproverRestriction]? = nil, approverComponentLimitTypes: [ApproverComponentLimitType]? = nil) {
            self.agent = agent
            self.templateId = templateId
            self.flowName = flowName
            self.maxFlowNum = maxFlowNum
            self.flowEffectiveDay = flowEffectiveDay
            self.qrEffectiveDay = qrEffectiveDay
            self.restrictions = restrictions
            self.approverComponentLimitTypes = approverComponentLimitTypes
        }

        @available(*, deprecated, renamed: "init(agent:templateId:flowName:maxFlowNum:flowEffectiveDay:qrEffectiveDay:restrictions:approverComponentLimitTypes:)", message: "'callbackUrl', 'approverRestrictions' and 'operator' are deprecated in 'ChannelCreateMultiFlowSignQRCodeRequest'. Setting these parameters has no effect.")
        public init(agent: Agent, templateId: String, flowName: String, maxFlowNum: Int64? = nil, flowEffectiveDay: Int64? = nil, qrEffectiveDay: Int64? = nil, restrictions: [ApproverRestriction]? = nil, callbackUrl: String? = nil, approverRestrictions: ApproverRestriction? = nil, operator: UserInfo? = nil, approverComponentLimitTypes: [ApproverComponentLimitType]? = nil) {
            self.agent = agent
            self.templateId = templateId
            self.flowName = flowName
            self.maxFlowNum = maxFlowNum
            self.flowEffectiveDay = flowEffectiveDay
            self.qrEffectiveDay = qrEffectiveDay
            self.restrictions = restrictions
            self.approverComponentLimitTypes = approverComponentLimitTypes
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case templateId = "TemplateId"
            case flowName = "FlowName"
            case maxFlowNum = "MaxFlowNum"
            case flowEffectiveDay = "FlowEffectiveDay"
            case qrEffectiveDay = "QrEffectiveDay"
            case restrictions = "Restrictions"
            case callbackUrl = "CallbackUrl"
            case approverRestrictions = "ApproverRestrictions"
            case `operator` = "Operator"
            case approverComponentLimitTypes = "ApproverComponentLimitTypes"
        }
    }

    /// ChannelCreateMultiFlowSignQRCode返回参数结构体
    public struct ChannelCreateMultiFlowSignQRCodeResponse: TCResponse {
        /// 签署二维码对象
        public let qrCode: SignQrCode

        /// 签署链接对象
        public let signUrls: SignUrl

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case qrCode = "QrCode"
            case signUrls = "SignUrls"
            case requestId = "RequestId"
        }
    }

    /// 创建一码多扫签署流程二维码
    ///
    /// 此接口（ChannelCreateMultiFlowSignQRCode）用于创建一码多扫流程签署二维码。 适用场景：无需填写签署人信息，可通过模板id生成签署二维码，签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。
    ///
    /// **本接口适用于发起方没有填写控件的 B2C或者单C模板**
    ///
    /// **若是B2C模板,还要满足以下任意一个条件**
    ///
    /// - 模板中配置的签署顺序是无序
    /// - B端企业的签署方式是静默签署
    /// - B端企业是非首位签署
    ///
    /// 通过一码多扫二维码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
    /// ]( https://qian.tencent.com/developers/partner/callback_types_contracts_sign)
    ///
    /// 用户通过签署二维码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)
    @inlinable
    public func channelCreateMultiFlowSignQRCode(_ input: ChannelCreateMultiFlowSignQRCodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateMultiFlowSignQRCodeResponse> {
        self.client.execute(action: "ChannelCreateMultiFlowSignQRCode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建一码多扫签署流程二维码
    ///
    /// 此接口（ChannelCreateMultiFlowSignQRCode）用于创建一码多扫流程签署二维码。 适用场景：无需填写签署人信息，可通过模板id生成签署二维码，签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。
    ///
    /// **本接口适用于发起方没有填写控件的 B2C或者单C模板**
    ///
    /// **若是B2C模板,还要满足以下任意一个条件**
    ///
    /// - 模板中配置的签署顺序是无序
    /// - B端企业的签署方式是静默签署
    /// - B端企业是非首位签署
    ///
    /// 通过一码多扫二维码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
    /// ]( https://qian.tencent.com/developers/partner/callback_types_contracts_sign)
    ///
    /// 用户通过签署二维码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)
    @inlinable
    public func channelCreateMultiFlowSignQRCode(_ input: ChannelCreateMultiFlowSignQRCodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateMultiFlowSignQRCodeResponse {
        try await self.client.execute(action: "ChannelCreateMultiFlowSignQRCode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建一码多扫签署流程二维码
    ///
    /// 此接口（ChannelCreateMultiFlowSignQRCode）用于创建一码多扫流程签署二维码。 适用场景：无需填写签署人信息，可通过模板id生成签署二维码，签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。
    ///
    /// **本接口适用于发起方没有填写控件的 B2C或者单C模板**
    ///
    /// **若是B2C模板,还要满足以下任意一个条件**
    ///
    /// - 模板中配置的签署顺序是无序
    /// - B端企业的签署方式是静默签署
    /// - B端企业是非首位签署
    ///
    /// 通过一码多扫二维码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
    /// ]( https://qian.tencent.com/developers/partner/callback_types_contracts_sign)
    ///
    /// 用户通过签署二维码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)
    @inlinable
    public func channelCreateMultiFlowSignQRCode(agent: Agent, templateId: String, flowName: String, maxFlowNum: Int64? = nil, flowEffectiveDay: Int64? = nil, qrEffectiveDay: Int64? = nil, restrictions: [ApproverRestriction]? = nil, approverComponentLimitTypes: [ApproverComponentLimitType]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateMultiFlowSignQRCodeResponse> {
        self.channelCreateMultiFlowSignQRCode(.init(agent: agent, templateId: templateId, flowName: flowName, maxFlowNum: maxFlowNum, flowEffectiveDay: flowEffectiveDay, qrEffectiveDay: qrEffectiveDay, restrictions: restrictions, approverComponentLimitTypes: approverComponentLimitTypes), region: region, logger: logger, on: eventLoop)
    }

    /// 创建一码多扫签署流程二维码
    ///
    /// 此接口（ChannelCreateMultiFlowSignQRCode）用于创建一码多扫流程签署二维码。 适用场景：无需填写签署人信息，可通过模板id生成签署二维码，签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。
    ///
    /// **本接口适用于发起方没有填写控件的 B2C或者单C模板**
    ///
    /// **若是B2C模板,还要满足以下任意一个条件**
    ///
    /// - 模板中配置的签署顺序是无序
    /// - B端企业的签署方式是静默签署
    /// - B端企业是非首位签署
    ///
    /// 通过一码多扫二维码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
    /// ]( https://qian.tencent.com/developers/partner/callback_types_contracts_sign)
    ///
    /// 用户通过签署二维码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)
    @available(*, deprecated, renamed: "channelCreateMultiFlowSignQRCode(agent:templateId:flowName:maxFlowNum:flowEffectiveDay:qrEffectiveDay:restrictions:approverComponentLimitTypes:region:logger:on:)", message: "'callbackUrl', 'approverRestrictions' and 'operator' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreateMultiFlowSignQRCode(agent: Agent, templateId: String, flowName: String, maxFlowNum: Int64? = nil, flowEffectiveDay: Int64? = nil, qrEffectiveDay: Int64? = nil, restrictions: [ApproverRestriction]? = nil, callbackUrl: String? = nil, approverRestrictions: ApproverRestriction? = nil, operator: UserInfo? = nil, approverComponentLimitTypes: [ApproverComponentLimitType]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateMultiFlowSignQRCodeResponse> {
        self.channelCreateMultiFlowSignQRCode(.init(agent: agent, templateId: templateId, flowName: flowName, maxFlowNum: maxFlowNum, flowEffectiveDay: flowEffectiveDay, qrEffectiveDay: qrEffectiveDay, restrictions: restrictions, callbackUrl: callbackUrl, approverRestrictions: approverRestrictions, operator: `operator`, approverComponentLimitTypes: approverComponentLimitTypes), region: region, logger: logger, on: eventLoop)
    }

    /// 创建一码多扫签署流程二维码
    ///
    /// 此接口（ChannelCreateMultiFlowSignQRCode）用于创建一码多扫流程签署二维码。 适用场景：无需填写签署人信息，可通过模板id生成签署二维码，签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。
    ///
    /// **本接口适用于发起方没有填写控件的 B2C或者单C模板**
    ///
    /// **若是B2C模板,还要满足以下任意一个条件**
    ///
    /// - 模板中配置的签署顺序是无序
    /// - B端企业的签署方式是静默签署
    /// - B端企业是非首位签署
    ///
    /// 通过一码多扫二维码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
    /// ]( https://qian.tencent.com/developers/partner/callback_types_contracts_sign)
    ///
    /// 用户通过签署二维码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)
    @inlinable
    public func channelCreateMultiFlowSignQRCode(agent: Agent, templateId: String, flowName: String, maxFlowNum: Int64? = nil, flowEffectiveDay: Int64? = nil, qrEffectiveDay: Int64? = nil, restrictions: [ApproverRestriction]? = nil, approverComponentLimitTypes: [ApproverComponentLimitType]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateMultiFlowSignQRCodeResponse {
        try await self.channelCreateMultiFlowSignQRCode(.init(agent: agent, templateId: templateId, flowName: flowName, maxFlowNum: maxFlowNum, flowEffectiveDay: flowEffectiveDay, qrEffectiveDay: qrEffectiveDay, restrictions: restrictions, approverComponentLimitTypes: approverComponentLimitTypes), region: region, logger: logger, on: eventLoop)
    }

    /// 创建一码多扫签署流程二维码
    ///
    /// 此接口（ChannelCreateMultiFlowSignQRCode）用于创建一码多扫流程签署二维码。 适用场景：无需填写签署人信息，可通过模板id生成签署二维码，签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。
    ///
    /// **本接口适用于发起方没有填写控件的 B2C或者单C模板**
    ///
    /// **若是B2C模板,还要满足以下任意一个条件**
    ///
    /// - 模板中配置的签署顺序是无序
    /// - B端企业的签署方式是静默签署
    /// - B端企业是非首位签署
    ///
    /// 通过一码多扫二维码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
    /// ]( https://qian.tencent.com/developers/partner/callback_types_contracts_sign)
    ///
    /// 用户通过签署二维码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)
    @available(*, deprecated, renamed: "channelCreateMultiFlowSignQRCode(agent:templateId:flowName:maxFlowNum:flowEffectiveDay:qrEffectiveDay:restrictions:approverComponentLimitTypes:region:logger:on:)", message: "'callbackUrl', 'approverRestrictions' and 'operator' are deprecated. Setting these parameters has no effect.")
    @inlinable
    public func channelCreateMultiFlowSignQRCode(agent: Agent, templateId: String, flowName: String, maxFlowNum: Int64? = nil, flowEffectiveDay: Int64? = nil, qrEffectiveDay: Int64? = nil, restrictions: [ApproverRestriction]? = nil, callbackUrl: String? = nil, approverRestrictions: ApproverRestriction? = nil, operator: UserInfo? = nil, approverComponentLimitTypes: [ApproverComponentLimitType]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateMultiFlowSignQRCodeResponse {
        try await self.channelCreateMultiFlowSignQRCode(.init(agent: agent, templateId: templateId, flowName: flowName, maxFlowNum: maxFlowNum, flowEffectiveDay: flowEffectiveDay, qrEffectiveDay: qrEffectiveDay, restrictions: restrictions, callbackUrl: callbackUrl, approverRestrictions: approverRestrictions, operator: `operator`, approverComponentLimitTypes: approverComponentLimitTypes), region: region, logger: logger, on: eventLoop)
    }
}
