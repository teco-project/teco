//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelDeleteRole请求参数结构体
    public struct ChannelDeleteRoleRequest: TCRequest {
        /// 代理企业和员工的信息。
        public let agent: Agent

        /// 角色id，最多20个
        public let roleIds: [String]

        public init(agent: Agent, roleIds: [String]) {
            self.agent = agent
            self.roleIds = roleIds
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
            case roleIds = "RoleIds"
        }
    }

    /// ChannelDeleteRole返回参数结构体
    public struct ChannelDeleteRoleResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除角色
    ///
    /// 此接口（ChannelDeleteRole）用来删除企业自定义角色。
    ///
    /// 注意：系统角色不可删除。
    @inlinable @discardableResult
    public func channelDeleteRole(_ input: ChannelDeleteRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelDeleteRoleResponse> {
        self.client.execute(action: "ChannelDeleteRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除角色
    ///
    /// 此接口（ChannelDeleteRole）用来删除企业自定义角色。
    ///
    /// 注意：系统角色不可删除。
    @inlinable @discardableResult
    public func channelDeleteRole(_ input: ChannelDeleteRoleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelDeleteRoleResponse {
        try await self.client.execute(action: "ChannelDeleteRole", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除角色
    ///
    /// 此接口（ChannelDeleteRole）用来删除企业自定义角色。
    ///
    /// 注意：系统角色不可删除。
    @inlinable @discardableResult
    public func channelDeleteRole(agent: Agent, roleIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelDeleteRoleResponse> {
        self.channelDeleteRole(.init(agent: agent, roleIds: roleIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除角色
    ///
    /// 此接口（ChannelDeleteRole）用来删除企业自定义角色。
    ///
    /// 注意：系统角色不可删除。
    @inlinable @discardableResult
    public func channelDeleteRole(agent: Agent, roleIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelDeleteRoleResponse {
        try await self.channelDeleteRole(.init(agent: agent, roleIds: roleIds), region: region, logger: logger, on: eventLoop)
    }
}
