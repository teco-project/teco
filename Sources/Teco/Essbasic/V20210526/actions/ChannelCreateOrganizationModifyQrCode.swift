//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// ChannelCreateOrganizationModifyQrCode请求参数结构体
    public struct ChannelCreateOrganizationModifyQrCodeRequest: TCRequestModel {
        /// 应用相关信息。 此接口Agent.AppId 必填。
        public let agent: Agent

        public init(agent: Agent) {
            self.agent = agent
        }

        enum CodingKeys: String, CodingKey {
            case agent = "Agent"
        }
    }

    /// ChannelCreateOrganizationModifyQrCode返回参数结构体
    public struct ChannelCreateOrganizationModifyQrCodeResponse: TCResponseModel {
        /// 二维码下载链接
        public let qrCodeUrl: String

        /// 二维码失效时间 UNIX 时间戳 精确到秒
        public let expiredTime: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case qrCodeUrl = "QrCodeUrl"
            case expiredTime = "ExpiredTime"
            case requestId = "RequestId"
        }
    }

    /// 生成渠道子客编辑企业信息二维码
    @inlinable
    public func channelCreateOrganizationModifyQrCode(_ input: ChannelCreateOrganizationModifyQrCodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateOrganizationModifyQrCodeResponse> {
        self.client.execute(action: "ChannelCreateOrganizationModifyQrCode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 生成渠道子客编辑企业信息二维码
    @inlinable
    public func channelCreateOrganizationModifyQrCode(_ input: ChannelCreateOrganizationModifyQrCodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateOrganizationModifyQrCodeResponse {
        try await self.client.execute(action: "ChannelCreateOrganizationModifyQrCode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 生成渠道子客编辑企业信息二维码
    @inlinable
    public func channelCreateOrganizationModifyQrCode(agent: Agent, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ChannelCreateOrganizationModifyQrCodeResponse> {
        self.channelCreateOrganizationModifyQrCode(.init(agent: agent), region: region, logger: logger, on: eventLoop)
    }

    /// 生成渠道子客编辑企业信息二维码
    @inlinable
    public func channelCreateOrganizationModifyQrCode(agent: Agent, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ChannelCreateOrganizationModifyQrCodeResponse {
        try await self.channelCreateOrganizationModifyQrCode(.init(agent: agent), region: region, logger: logger, on: eventLoop)
    }
}
