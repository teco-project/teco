//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Essbasic {
    /// 应用相关信息
    public struct Agent: TCInputModel {
        /// 应用的唯一标识。不同的业务系统可以采用不同的AppId，不同AppId下的数据是隔离的。可以由控制台开发者中心-应用集成自主生成。
        public let appId: String

        /// 第三方应用平台自定义，对应第三方平台子客企业的唯一标识。一个第三方平台子客企业主体与子客企业ProxyOrganizationOpenId是一一对应的，不可更改，不可重复使用。（例如，可以使用企业名称的hash值，或者社会统一信用代码的hash值，或者随机hash值，需要第三方应用平台保存），最大64位字符串
        public let proxyOrganizationOpenId: String?

        /// 第三方平台子客企业中的员工/经办人，通过第三方应用平台进入电子签完成实名、且被赋予相关权限后，可以参与到企业资源的管理或签署流程中。
        public let proxyOperator: UserInfo?

        /// 在第三方平台子客企业开通电子签后，会生成唯一的子客应用Id（ProxyAppId）用于代理调用时的鉴权，在子客开通的回调中获取。
        public let proxyAppId: String?

        /// 内部参数，暂未开放使用
        public let proxyOrganizationId: String?

        public init(appId: String, proxyOrganizationOpenId: String? = nil, proxyOperator: UserInfo? = nil, proxyAppId: String? = nil, proxyOrganizationId: String? = nil) {
            self.appId = appId
            self.proxyOrganizationOpenId = proxyOrganizationOpenId
            self.proxyOperator = proxyOperator
            self.proxyAppId = proxyAppId
            self.proxyOrganizationId = proxyOrganizationId
        }

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case proxyOrganizationOpenId = "ProxyOrganizationOpenId"
            case proxyOperator = "ProxyOperator"
            case proxyAppId = "ProxyAppId"
            case proxyOrganizationId = "ProxyOrganizationId"
        }
    }

    /// 签署人个性化能力信息
    public struct ApproverOption: TCInputModel {
        /// 是否隐藏一键签署 false-不隐藏,默认 true-隐藏
        public let hideOneKeySign: Bool?

        public init(hideOneKeySign: Bool? = nil) {
            self.hideOneKeySign = hideOneKeySign
        }

        enum CodingKeys: String, CodingKey {
            case hideOneKeySign = "HideOneKeySign"
        }
    }

    /// 指定签署人限制项
    public struct ApproverRestriction: TCInputModel {
        /// 指定签署人名字
        public let name: String?

        /// 指定签署人手机号
        public let mobile: String?

        /// 指定签署人证件类型
        public let idCardType: String?

        /// 指定签署人证件号码
        public let idCardNumber: String?

        public init(name: String? = nil, mobile: String? = nil, idCardType: String? = nil, idCardNumber: String? = nil) {
            self.name = name
            self.mobile = mobile
            self.idCardType = idCardType
            self.idCardNumber = idCardNumber
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mobile = "Mobile"
            case idCardType = "IdCardType"
            case idCardNumber = "IdCardNumber"
        }
    }

    /// 授权出错信息
    public struct AuthFailMessage: TCOutputModel {
        /// 合作企业Id
        public let proxyOrganizationOpenId: String

        /// 出错信息
        public let message: String

        enum CodingKeys: String, CodingKey {
            case proxyOrganizationOpenId = "ProxyOrganizationOpenId"
            case message = "Message"
        }
    }

    /// 授权用户
    public struct AuthorizedUser: TCOutputModel {
        /// 用户openid
        public let openId: String

        enum CodingKeys: String, CodingKey {
            case openId = "OpenId"
        }
    }

    /// 基础流程信息
    public struct BaseFlowInfo: TCInputModel {
        /// 合同流程名称
        public let flowName: String?

        /// 合同流程类型
        public let flowType: String?

        /// 合同流程描述信息
        public let flowDescription: String?

        /// 合同流程截止时间，unix时间戳
        public let deadline: Int64?

        /// 是否顺序签署(true:无序签,false:顺序签)
        public let unordered: Bool?

        /// 打开智能添加填写区(默认开启，打开:"OPEN" 关闭："CLOSE")
        public let intelligentStatus: String?

        /// 填写控件内容
        public let formFields: [FormField]?

        /// 本企业(发起方企业)是否需要签署审批，true：开启本企业签署审批
        public let needSignReview: Bool?

        /// 用户流程自定义数据参数
        public let userData: String?

        public init(flowName: String, flowType: String, flowDescription: String, deadline: Int64, unordered: Bool? = nil, intelligentStatus: String? = nil, formFields: [FormField]? = nil, needSignReview: Bool? = nil, userData: String? = nil) {
            self.flowName = flowName
            self.flowType = flowType
            self.flowDescription = flowDescription
            self.deadline = deadline
            self.unordered = unordered
            self.intelligentStatus = intelligentStatus
            self.formFields = formFields
            self.needSignReview = needSignReview
            self.userData = userData
        }

        enum CodingKeys: String, CodingKey {
            case flowName = "FlowName"
            case flowType = "FlowType"
            case flowDescription = "FlowDescription"
            case deadline = "Deadline"
            case unordered = "Unordered"
            case intelligentStatus = "IntelligentStatus"
            case formFields = "FormFields"
            case needSignReview = "NeedSignReview"
            case userData = "UserData"
        }
    }

    /// 抄送信息
    public struct CcInfo: TCInputModel {
        /// 被抄送人手机号，大陆11位手机号
        public let mobile: String?

        /// 被抄送人姓名
        public let name: String?

        /// 被抄送人类型
        /// 0--个人. 1--员工
        public let ccType: Int64?

        /// 被抄送人权限
        /// 0--可查看
        /// 1--可查看也可下载
        public let ccPermission: Int64?

        public init(mobile: String? = nil, name: String? = nil, ccType: Int64? = nil, ccPermission: Int64? = nil) {
            self.mobile = mobile
            self.name = name
            self.ccType = ccType
            self.ccPermission = ccPermission
        }

        enum CodingKeys: String, CodingKey {
            case mobile = "Mobile"
            case name = "Name"
            case ccType = "CcType"
            case ccPermission = "CcPermission"
        }
    }

    /// 渠道角色信息
    public struct ChannelRole: TCOutputModel {
        /// 角色id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleId: String?

        /// 角色名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleName: String?

        /// 角色状态：1-启用；2-禁用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleStatus: UInt64?

        enum CodingKeys: String, CodingKey {
            case roleId = "RoleId"
            case roleName = "RoleName"
            case roleStatus = "RoleStatus"
        }
    }

    /// 签署人配置信息
    public struct CommonApproverOption: TCInputModel {
        /// 是否允许修改签署人信息
        public let canEditApprover: Bool?

        public init(canEditApprover: Bool? = nil) {
            self.canEditApprover = canEditApprover
        }

        enum CodingKeys: String, CodingKey {
            case canEditApprover = "CanEditApprover"
        }
    }

    /// 通用签署人信息
    public struct CommonFlowApprover: TCInputModel {
        /// 指定当前签署人为第三方应用集成子客，默认false：当前签署人为第三方应用集成子客，true：当前签署人为saas企业用户
        public let notChannelOrganization: Bool?

        /// 签署人类型,目前支持：0-企业签署人，1-个人签署人，3-企业静默签署人
        public let approverType: Int64?

        /// 企业id
        public let organizationId: String?

        /// 企业OpenId，第三方应用集成非静默签子客企业签署人发起合同毕传
        public let organizationOpenId: String?

        /// 企业名称，第三方应用集成非静默签子客企业签署人必传，saas企业签署人必传
        public let organizationName: String?

        /// 用户id
        public let userId: String?

        /// 用户openId，第三方应用集成非静默签子客企业签署人必传
        public let openId: String?

        /// 签署人名称，saas企业签署人，个人签署人必传
        public let approverName: String?

        /// 签署人手机号，saas企业签署人，个人签署人必传
        public let approverMobile: String?

        /// 签署人Id，使用模板发起是，对应模板配置中的签署人RecipientId
        /// 注意：模板发起时该字段必填
        public let recipientId: String?

        /// 签署前置条件：阅读时长限制，不传默认10s,最大300s，最小3s
        public let preReadTime: Int64?

        /// 签署前置条件：阅读全文限制
        public let isFullText: Bool?

        /// 通知类型：SMS（短信） NONE（不做通知）, 不传 默认SMS
        public let notifyType: String?

        /// 签署人配置
        public let approverOption: CommonApproverOption?

        public init(notChannelOrganization: Bool, approverType: Int64? = nil, organizationId: String? = nil, organizationOpenId: String? = nil, organizationName: String? = nil, userId: String? = nil, openId: String? = nil, approverName: String? = nil, approverMobile: String? = nil, recipientId: String? = nil, preReadTime: Int64? = nil, isFullText: Bool? = nil, notifyType: String? = nil, approverOption: CommonApproverOption? = nil) {
            self.notChannelOrganization = notChannelOrganization
            self.approverType = approverType
            self.organizationId = organizationId
            self.organizationOpenId = organizationOpenId
            self.organizationName = organizationName
            self.userId = userId
            self.openId = openId
            self.approverName = approverName
            self.approverMobile = approverMobile
            self.recipientId = recipientId
            self.preReadTime = preReadTime
            self.isFullText = isFullText
            self.notifyType = notifyType
            self.approverOption = approverOption
        }

        enum CodingKeys: String, CodingKey {
            case notChannelOrganization = "NotChannelOrganization"
            case approverType = "ApproverType"
            case organizationId = "OrganizationId"
            case organizationOpenId = "OrganizationOpenId"
            case organizationName = "OrganizationName"
            case userId = "UserId"
            case openId = "OpenId"
            case approverName = "ApproverName"
            case approverMobile = "ApproverMobile"
            case recipientId = "RecipientId"
            case preReadTime = "PreReadTime"
            case isFullText = "IsFullText"
            case notifyType = "NotifyType"
            case approverOption = "ApproverOption"
        }
    }

    /// 此结构体 (Component) 用于描述控件属性。
    ///
    /// 在通过文件发起合同时，对应的component有三种定位方式
    /// 1. 绝对定位方式
    /// 2. 表单域(FIELD)定位方式
    /// 3. 关键字(KEYWORD)定位方式
    /// 可以参考官网说明
    /// https://cloud.tencent.com/document/product/1323/78346#component-.E4.B8.89.E7.A7.8D.E5.AE.9A.E4.BD.8D.E6.96.B9.E5.BC.8F.E8.AF.B4.E6.98.8E
    public struct Component: TCInputModel, TCOutputModel {
        /// 控件编号
        ///
        /// CreateFlowByTemplates发起合同时优先以ComponentId（不为空）填充；否则以ComponentName填充
        ///
        /// 注：
        /// 当GenerateMode=3时，通过"^"来决定是否使用关键字整词匹配能力。
        /// 例：
        /// 当GenerateMode=3时，如果传入关键字"^甲方签署^"，则会在PDF文件中有且仅有"甲方签署"关键字的地方进行对应操作。
        /// 如传入的关键字为"甲方签署"，则PDF文件中每个出现关键字的位置都会执行相应操作。
        ///
        /// 创建控件时，此值为空
        /// 查询时返回完整结构
        public let componentId: String?

        /// 如果是Component控件类型，则可选的字段为：
        /// TEXT - 普通文本控件，输入文本字符串；
        /// MULTI_LINE_TEXT - 多行文本控件，输入文本字符串；
        /// CHECK_BOX - 勾选框控件，若选中填写ComponentValue 填写 true或者 false 字符串；
        /// FILL_IMAGE - 图片控件，ComponentValue 填写图片的资源 ID；
        /// DYNAMIC_TABLE - 动态表格控件；
        /// ATTACHMENT - 附件控件,ComponentValue 填写福建图片的资源 ID列表，以逗号分割；
        /// SELECTOR - 选择器控件，ComponentValue填写选择的字符串内容；
        /// DATE - 日期控件；默认是格式化为xxxx年xx月xx日字符串；
        /// DISTRICT - 省市区行政区划控件，ComponentValue填写省市区行政区划字符串内容；
        ///
        /// 如果是SignComponent控件类型，则可选的字段为
        /// SIGN_SEAL - 签署印章控件；
        /// SIGN_DATE - 签署日期控件；
        /// SIGN_SIGNATURE - 用户签名控件；
        /// SIGN_PERSONAL_SEAL - 个人签署印章控件（使用文件发起暂不支持此类型）；
        /// SIGN_PAGING_SEAL - 骑缝章；若文件发起，需要对应填充ComponentPosY、ComponentWidth、ComponentHeight
        /// SIGN_OPINION - 签署意见控件，用户需要根据配置的签署意见内容，完成对意见内容的确认;
        /// SIGN_LEGAL_PERSON_SEAL - 企业法定代表人控件。
        ///
        /// 表单域的控件不能作为印章和签名控件
        public let componentType: String?

        /// 控件简称，不能超过30个字符
        public let componentName: String?

        /// 定义控件是否为必填项，默认为false
        public let componentRequired: Bool?

        /// 控件关联的签署方id
        public let componentRecipientId: String?

        /// 控件所属文件的序号 (文档中文件的排列序号，从0开始)
        public let fileIndex: Int64?

        /// 控件生成的方式：
        /// NORMAL - 普通控件
        /// FIELD - 表单域
        /// KEYWORD - 关键字
        public let generateMode: String?

        /// 参数控件宽度，默认100，单位px
        /// 表单域和关键字转换控件不用填
        public let componentWidth: Float?

        /// 参数控件高度，默认100，单位px
        /// 表单域和关键字转换控件不用填
        public let componentHeight: Float?

        /// 参数控件所在页码，从1开始
        public let componentPage: Int64?

        /// 参数控件X位置，单位px
        public let componentPosX: Float?

        /// 参数控件Y位置，单位px
        public let componentPosY: Float?

        /// 参数控件样式，json格式表述
        ///
        /// 不同类型的控件会有部分非通用参数
        ///
        /// TEXT/MULTI_LINE_TEXT控件可以指定
        /// 1 Font：目前只支持黑体、宋体
        /// 2 FontSize： 范围12-72
        /// 3 FontAlign： Left/Right/Center，左对齐/居中/右对齐
        /// 例如：{"FontSize":12}
        ///
        /// ComponentType为FILL_IMAGE时，支持以下参数：
        /// NotMakeImageCenter：bool。是否设置图片居中。false：居中（默认）。 true: 不居中
        /// FillMethod: int. 填充方式。0-铺满（默认）；1-等比例缩放
        ///
        /// ComponentType为SIGN_SIGNATURE类型可以控制签署方式
        /// {“ComponentTypeLimit”: [“xxx”]}
        /// xxx可以为：
        /// HANDWRITE – 手写签名
        /// BORDERLESS_ESIGN – 自动生成无边框腾讯体
        /// OCR_ESIGN -- AI智能识别手写签名
        /// ESIGN -- 个人印章类型
        /// 如：{“ComponentTypeLimit”: [“BORDERLESS_ESIGN”]}
        public let componentExtra: String?

        /// 控件填充vaule，ComponentType和传入值类型对应关系：
        /// TEXT - 文本内容
        /// MULTI_LINE_TEXT - 文本内容
        /// CHECK_BOX - true/false
        /// FILL_IMAGE、ATTACHMENT - 附件的FileId，需要通过UploadFiles接口上传获取
        /// SELECTOR - 选项值
        /// DATE - 默认是格式化为xxxx年xx月xx日
        /// DYNAMIC_TABLE - 传入json格式的表格内容，具体见数据结构FlowInfo：https://cloud.tencent.com/document/api/1420/61525#FlowInfo
        /// SIGN_SEAL - 印章ID
        /// SIGN_PAGING_SEAL - 可以指定印章ID
        ///
        /// 控件值约束说明：
        /// 企业全称控件：
        ///   约束：企业名称中文字符中文括号
        ///   检查正则表达式：/^[\u3400-\u4dbf\u4e00-\u9fa5（）]+$/
        ///
        /// 统一社会信用代码控件：
        ///   检查正则表达式：/^[A-Z0-9]{1,18}$/
        ///
        /// 法人名称控件：
        ///   约束：最大50个字符，2到25个汉字或者1到50个字母
        ///   检查正则表达式：/^([\u3400-\u4dbf\u4e00-\u9fa5.·]{2,25}|[a-zA-Z·,\s-]{1,50})$/
        ///
        /// 签署意见控件：
        ///   约束：签署意见最大长度为50字符
        ///
        /// 签署人手机号控件：
        ///   约束：国内手机号 13,14,15,16,17,18,19号段长度11位
        ///
        /// 签署人身份证控件：
        ///   约束：合法的身份证号码检查
        ///
        /// 控件名称：
        ///   约束：控件名称最大长度为20字符
        ///
        /// 单行文本控件：
        ///   约束：只允许输入中文，英文，数字，中英文标点符号
        ///
        /// 多行文本控件：
        ///   约束：只允许输入中文，英文，数字，中英文标点符号
        ///
        /// 勾选框控件：
        ///   约束：选择填字符串true，不选填字符串false
        ///
        /// 选择器控件：
        ///   约束：同单行文本控件约束，填写选择值中的字符串
        ///
        /// 数字控件：
        ///   约束：请输入有效的数字(可带小数点)
        ///   检查正则表达式：/^(-|\+)?\d+(\.\d+)?$/
        ///
        /// 日期控件：
        ///   约束：格式：yyyy年mm月dd日
        ///
        /// 附件控件：
        ///   约束：JPG或PNG图片，上传数量限制，1到6个，最大6个附件
        ///
        /// 图片控件：
        ///   约束：JPG或PNG图片，填写上传的图片资源ID
        ///
        /// 邮箱控件：
        ///   约束：请输入有效的邮箱地址, w3c标准
        ///   检查正则表达式：/^([A-Za-z0-9_\-.!#$%&])+@([A-Za-z0-9_\-.])+\.([A-Za-z]{2,4})$/
        ///   参考：https://emailregex.com/
        ///
        /// 地址控件：
        ///   同单行文本控件约束
        ///
        /// 省市区控件：
        ///   同单行文本控件约束
        ///
        /// 性别控件：
        ///   同单行文本控件约束，填写选择值中的字符串
        ///
        /// 学历控件：
        ///   同单行文本控件约束，填写选择值中的字符串
        public let componentValue: String?

        /// 日期签署控件的字号，默认为 12
        ///
        /// 签署区日期控件会转换成图片格式并带存证，需要通过字体决定图片大小
        public let componentDateFontSize: Int64?

        /// 控件所属文档的Id, 模块相关接口为空值
        public let documentId: String?

        /// 控件描述，不能超过30个字符
        public let componentDescription: String?

        /// 指定关键字时横坐标偏移量，单位pt
        public let offsetX: Float?

        /// 指定关键字时纵坐标偏移量，单位pt
        public let offsetY: Float?

        /// 平台企业控件ID。
        /// 如果不为空，属于平台企业预设控件；
        public let channelComponentId: String?

        /// 指定关键字排序规则，Positive-正序，Reverse-倒序。传入Positive时会根据关键字在PDF文件内的顺序进行排列。在指定KeywordIndexes时，0代表在PDF内查找内容时，查找到的第一个关键字。
        /// 传入Reverse时会根据关键字在PDF文件内的反序进行排列。在指定KeywordIndexes时，0代表在PDF内查找内容时，查找到的最后一个关键字。
        public let keywordOrder: String?

        /// 指定关键字页码，可选参数，指定页码后，将只在指定的页码内查找关键字，非该页码的关键字将不会查询出来
        public let keywordPage: Int64?

        /// 关键字位置模式，Middle-居中，Below-正下方，Right-正右方，LowerRight-右上角，UpperRight-右下角。示例：如果设置Middle的关键字盖章，则印章的中心会和关键字的中心重合，如果设置Below，则印章在关键字的正下方
        public let relativeLocation: String?

        /// 关键字索引，可选参数，如果一个关键字在PDF文件中存在多个，可以通过关键字索引指定使用第几个关键字作为最后的结果，可指定多个索引。示例[0,2]，说明使用PDF文件内第1个和第3个关键字位置。
        public let keywordIndexes: [Int64]?

        public init(componentId: String? = nil, componentType: String? = nil, componentName: String? = nil, componentRequired: Bool? = nil, componentRecipientId: String? = nil, fileIndex: Int64? = nil, generateMode: String? = nil, componentWidth: Float? = nil, componentHeight: Float? = nil, componentPage: Int64? = nil, componentPosX: Float? = nil, componentPosY: Float? = nil, componentExtra: String? = nil, componentValue: String? = nil, componentDateFontSize: Int64? = nil, documentId: String? = nil, componentDescription: String? = nil, offsetX: Float? = nil, offsetY: Float? = nil, channelComponentId: String? = nil, keywordOrder: String? = nil, keywordPage: Int64? = nil, relativeLocation: String? = nil, keywordIndexes: [Int64]? = nil) {
            self.componentId = componentId
            self.componentType = componentType
            self.componentName = componentName
            self.componentRequired = componentRequired
            self.componentRecipientId = componentRecipientId
            self.fileIndex = fileIndex
            self.generateMode = generateMode
            self.componentWidth = componentWidth
            self.componentHeight = componentHeight
            self.componentPage = componentPage
            self.componentPosX = componentPosX
            self.componentPosY = componentPosY
            self.componentExtra = componentExtra
            self.componentValue = componentValue
            self.componentDateFontSize = componentDateFontSize
            self.documentId = documentId
            self.componentDescription = componentDescription
            self.offsetX = offsetX
            self.offsetY = offsetY
            self.channelComponentId = channelComponentId
            self.keywordOrder = keywordOrder
            self.keywordPage = keywordPage
            self.relativeLocation = relativeLocation
            self.keywordIndexes = keywordIndexes
        }

        enum CodingKeys: String, CodingKey {
            case componentId = "ComponentId"
            case componentType = "ComponentType"
            case componentName = "ComponentName"
            case componentRequired = "ComponentRequired"
            case componentRecipientId = "ComponentRecipientId"
            case fileIndex = "FileIndex"
            case generateMode = "GenerateMode"
            case componentWidth = "ComponentWidth"
            case componentHeight = "ComponentHeight"
            case componentPage = "ComponentPage"
            case componentPosX = "ComponentPosX"
            case componentPosY = "ComponentPosY"
            case componentExtra = "ComponentExtra"
            case componentValue = "ComponentValue"
            case componentDateFontSize = "ComponentDateFontSize"
            case documentId = "DocumentId"
            case componentDescription = "ComponentDescription"
            case offsetX = "OffsetX"
            case offsetY = "OffsetY"
            case channelComponentId = "ChannelComponentId"
            case keywordOrder = "KeywordOrder"
            case keywordPage = "KeywordPage"
            case relativeLocation = "RelativeLocation"
            case keywordIndexes = "KeywordIndexes"
        }
    }

    /// 创建合同配置信息
    public struct CreateFlowOption: TCInputModel {
        /// 是否允许修改合同信息
        public let canEditFlow: Bool?

        public init(canEditFlow: Bool? = nil) {
            self.canEditFlow = canEditFlow
        }

        enum CodingKeys: String, CodingKey {
            case canEditFlow = "CanEditFlow"
        }
    }

    /// 第三方应用集成员工部门信息
    public struct Department: TCOutputModel {
        /// 部门id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let departmentId: String?

        /// 部门名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let departmentName: String?

        enum CodingKeys: String, CodingKey {
            case departmentId = "DepartmentId"
            case departmentName = "DepartmentName"
        }
    }

    /// 签署流程下载信息
    public struct DownloadFlowInfo: TCInputModel {
        /// 文件夹名称
        public let fileName: String

        /// 签署流程的标识数组
        public let flowIdList: [String]

        public init(fileName: String, flowIdList: [String]) {
            self.fileName = fileName
            self.flowIdList = flowIdList
        }

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case flowIdList = "FlowIdList"
        }
    }

    /// 企业扩展服务授权信息
    public struct ExtentServiceAuthInfo: TCOutputModel {
        /// 扩展服务类型
        ///   AUTO_SIGN             企业静默签（自动签署）
        ///   OVERSEA_SIGN          企业与港澳台居民*签署合同
        ///   MOBILE_CHECK_APPROVER 使用手机号验证签署方身份
        ///   PAGING_SEAL           骑缝章
        ///   DOWNLOAD_FLOW         授权渠道下载合同
        public let type: String?

        /// 扩展服务名称
        public let name: String?

        /// 服务状态
        /// ENABLE 开启
        /// DISABLE 关闭
        public let status: String?

        /// 最近操作人openid（经办人openid）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operatorOpenId: String?

        /// 最近操作时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let operateOn: Int64?

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case name = "Name"
            case status = "Status"
            case operatorOpenId = "OperatorOpenId"
            case operateOn = "OperateOn"
        }
    }

    /// 绑定失败的用户角色信息
    public struct FailedCreateRoleData: TCOutputModel {
        /// 用户userId
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        /// 角色RoleId列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleIds: [String]?

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case roleIds = "RoleIds"
        }
    }

    /// 此结构体 (Filter) 用于描述查询过滤条件。
    public struct Filter: TCInputModel {
        /// 查询过滤条件的Key
        public let key: String

        /// 查询过滤条件的Value列表
        public let values: [String]

        public init(key: String, values: [String]) {
            self.key = key
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    /// 签署人的流程信息明细
    public struct FlowApproverDetail: TCOutputModel {
        /// 模板配置时候的签署人id,与控件绑定
        public let receiptId: String

        /// 平台企业的第三方id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyOrganizationOpenId: String?

        /// 平台企业操作人的第三方id
        public let proxyOperatorOpenId: String

        /// 平台企业名称
        public let proxyOrganizationName: String

        /// 签署人手机号
        public let mobile: String

        /// 签署人签署顺序
        public let signOrder: Int64

        /// 签署人姓名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approveName: String?

        /// 当前签署人的状态, 状态如下
        ///
        /// PENDING 流程等待中
        /// FILLPENDING 待填写状态
        /// FILLACCEPT 参与人已经填写
        /// FILLREJECT 参与人解决填写
        /// WAITPICKUP 待签收
        /// ACCEPT 签收
        /// REJECT 拒签
        /// DEADLINE 过期没有处理
        /// CANCEL 取消
        /// FORWARD 已经转他人处理
        /// STOP 流程因为其他原因终止
        /// RELIEVED 已经解除
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approveStatus: String?

        /// 签署人信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approveMessage: String?

        /// 签署人签署时间
        public let approveTime: Int64

        /// 参与者类型 (ORGANIZATION企业/PERSON个人)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approveType: String?

        enum CodingKeys: String, CodingKey {
            case receiptId = "ReceiptId"
            case proxyOrganizationOpenId = "ProxyOrganizationOpenId"
            case proxyOperatorOpenId = "ProxyOperatorOpenId"
            case proxyOrganizationName = "ProxyOrganizationName"
            case mobile = "Mobile"
            case signOrder = "SignOrder"
            case approveName = "ApproveName"
            case approveStatus = "ApproveStatus"
            case approveMessage = "ApproveMessage"
            case approveTime = "ApproveTime"
            case approveType = "ApproveType"
        }
    }

    /// 创建签署流程签署人入参。
    ///
    /// 其中签署方FlowApproverInfo需要传递的参数
    /// 非单C、单B、B2C合同，ApproverType、RecipientId（模板发起合同时）必传，建议都传。其他身份标识
    /// 1-个人：Name、Mobile必传
    /// 2-第三方平台子客企业指定经办人：OpenId必传，OrgName必传、OrgOpenId必传；
    /// 3-第三方平台子客企业不指定经办人：OrgName必传、OrgOpenId必传；
    /// 4-非第三方平台子客企业：Name、Mobile必传，OrgName必传，且NotChannelOrganization=True。
    ///
    /// RecipientId参数：
    /// 从DescribeTemplates接口中，可以得到模板下的签署方Recipient列表，根据模板自定义的Rolename在此结构体中确定其RecipientId
    public struct FlowApproverInfo: TCInputModel {
        /// 签署人姓名，最大长度50个字符
        public let name: String?

        /// 签署人身份证件类型
        /// 1.ID_CARD 居民身份证
        /// 2.HONGKONG_MACAO_AND_TAIWAN 港澳台居民居住证
        /// 3.HONGKONG_AND_MACAO 港澳居民来往内地通行证
        public let idCardType: String?

        /// 签署人证件号
        public let idCardNumber: String?

        /// 签署人手机号，脱敏显示。大陆手机号为11位，暂不支持海外手机号。
        public let mobile: String?

        /// 企业签署方工商营业执照上的企业名称，签署方为非发起方企业场景下必传，最大长度64个字符；
        public let organizationName: String?

        /// 指定签署人非第三方平台子客企业下员工，在ApproverType为ORGANIZATION时指定。
        /// 默认为false，即签署人位于同一个第三方平台应用号下；默认为false，即签署人位于同一个第三方应用号下；
        public let notChannelOrganization: Bool?

        /// 用户侧第三方id，最大长度64个字符
        /// 当签署方为同一第三方平台下的员工时，该字段若不指定，则发起【待领取】的流程
        public let openId: String?

        /// 企业签署方在同一第三方平台应用下的其他合作企业OpenId，签署方为非发起方企业场景下必传，最大长度64个字符；
        public let organizationOpenId: String?

        /// 签署人类型
        /// PERSON-个人/自然人；
        /// PERSON_AUTO_SIGN-个人自动签（定制化场景下使用）；
        /// ORGANIZATION-企业（企业签署方或模板发起时的企业静默签）；
        /// ENTERPRISESERVER-企业静默签（文件发起时的企业静默签字）。
        public let approverType: String?

        /// 签署流程签署人在模板中对应的签署人Id；在非单方签署、以及非B2C签署的场景下必传，用于指定当前签署方在签署流程中的位置；
        public let recipientId: String?

        /// 签署截止时间，默认一年
        public let deadline: Int64?

        /// 签署完回调url，最大长度1000个字符
        public let callbackUrl: String?

        /// 使用PDF文件直接发起合同时，签署人指定的签署控件
        public let signComponents: [Component]?

        /// 个人签署方指定签署控件类型，目前支持：OCR_ESIGN -AI智慧手写签名
        /// HANDWRITE -手写签名
        public let componentLimitType: [String]?

        /// 合同的强制预览时间：3~300s，未指定则按合同页数计算
        public let preReadTime: Int64?

        /// 签署完前端跳转的url，暂未使用
        public let jumpUrl: String?

        /// 签署人个性化能力值
        public let approverOption: ApproverOption?

        /// 当前签署方进行签署操作是否需要企业内部审批，true 则为需要
        public let approverNeedSignReview: Bool?

        /// 签署人查看合同时认证方式, 1-实名查看 2-短信验证码查看(企业签署方不支持该方式) 如果不传默认为1
        /// 查看合同的认证方式 Flow层级的优先于approver层级的
        public let approverVerifyTypes: [Int64]?

        /// 签署人签署合同时的认证方式
        /// 1-人脸认证 2-签署密码 3-运营商三要素(默认为1,2)
        public let approverSignTypes: [Int64]?

        public init(name: String? = nil, idCardType: String? = nil, idCardNumber: String? = nil, mobile: String? = nil, organizationName: String? = nil, notChannelOrganization: Bool? = nil, openId: String? = nil, organizationOpenId: String? = nil, approverType: String? = nil, recipientId: String? = nil, deadline: Int64? = nil, callbackUrl: String? = nil, signComponents: [Component]? = nil, componentLimitType: [String]? = nil, preReadTime: Int64? = nil, jumpUrl: String? = nil, approverOption: ApproverOption? = nil, approverNeedSignReview: Bool? = nil, approverVerifyTypes: [Int64]? = nil, approverSignTypes: [Int64]? = nil) {
            self.name = name
            self.idCardType = idCardType
            self.idCardNumber = idCardNumber
            self.mobile = mobile
            self.organizationName = organizationName
            self.notChannelOrganization = notChannelOrganization
            self.openId = openId
            self.organizationOpenId = organizationOpenId
            self.approverType = approverType
            self.recipientId = recipientId
            self.deadline = deadline
            self.callbackUrl = callbackUrl
            self.signComponents = signComponents
            self.componentLimitType = componentLimitType
            self.preReadTime = preReadTime
            self.jumpUrl = jumpUrl
            self.approverOption = approverOption
            self.approverNeedSignReview = approverNeedSignReview
            self.approverVerifyTypes = approverVerifyTypes
            self.approverSignTypes = approverSignTypes
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case idCardType = "IdCardType"
            case idCardNumber = "IdCardNumber"
            case mobile = "Mobile"
            case organizationName = "OrganizationName"
            case notChannelOrganization = "NotChannelOrganization"
            case openId = "OpenId"
            case organizationOpenId = "OrganizationOpenId"
            case approverType = "ApproverType"
            case recipientId = "RecipientId"
            case deadline = "Deadline"
            case callbackUrl = "CallbackUrl"
            case signComponents = "SignComponents"
            case componentLimitType = "ComponentLimitType"
            case preReadTime = "PreReadTime"
            case jumpUrl = "JumpUrl"
            case approverOption = "ApproverOption"
            case approverNeedSignReview = "ApproverNeedSignReview"
            case approverVerifyTypes = "ApproverVerifyTypes"
            case approverSignTypes = "ApproverSignTypes"
        }
    }

    /// 签署人签署链接信息
    public struct FlowApproverUrlInfo: TCOutputModel {
        /// 签署链接，注意该链接有效期为30分钟，同时需要注意保密，不要外泄给无关用户。
        public let signUrl: String

        /// 签署人手机号
        public let mobile: String

        /// 签署人姓名
        public let name: String

        /// 签署人类型 PERSON-个人
        public let approverType: String

        enum CodingKeys: String, CodingKey {
            case signUrl = "SignUrl"
            case mobile = "Mobile"
            case name = "Name"
            case approverType = "ApproverType"
        }
    }

    /// 此结构体(FlowDetailInfo)描述的是合同(流程)的详细信息
    public struct FlowDetailInfo: TCOutputModel {
        /// 合同(流程)的Id
        public let flowId: String

        /// 合同(流程)的名字
        public let flowName: String

        /// 合同(流程)的类型
        public let flowType: String

        /// 合同(流程)的状态, 状态如下
        ///
        /// INIT 还没发起
        /// PART 部分签署
        /// REJECT 拒签
        /// ALL 全部签署
        /// DEADLINE 流签
        /// CANCEL 取消
        /// RELIEVED 解除
        public let flowStatus: String

        /// 合同(流程)的信息
        public let flowMessage: String

        /// 合同(流程)的创建时间戳
        public let createOn: Int64

        /// 合同(流程)的签署截止时间戳
        public let deadLine: Int64

        /// 用户自定义数据
        public let customData: String

        /// 合同(流程)的签署人数组
        public let flowApproverInfos: [FlowApproverDetail]

        /// 合同(流程)关注方信息列表
        public let ccInfos: [FlowApproverDetail]?

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case flowName = "FlowName"
            case flowType = "FlowType"
            case flowStatus = "FlowStatus"
            case flowMessage = "FlowMessage"
            case createOn = "CreateOn"
            case deadLine = "DeadLine"
            case customData = "CustomData"
            case flowApproverInfos = "FlowApproverInfos"
            case ccInfos = "CcInfos"
        }
    }

    /// 合同组中每个子合同的发起信息
    public struct FlowFileInfo: TCInputModel {
        /// 签署文件资源Id列表，目前仅支持单个文件
        public let fileIds: [String]

        /// 签署流程名称，长度不超过200个字符
        public let flowName: String

        /// 签署流程签约方列表，最多不超过5个参与方
        public let flowApprovers: [FlowApproverInfo]

        /// 签署流程截止时间，十位数时间戳，最大值为33162419560，即3020年
        public let deadline: Int64?

        /// 签署流程的描述，长度不超过1000个字符
        public let flowDescription: String?

        /// 签署流程的类型，长度不超过255个字符
        public let flowType: String?

        /// 签署流程回调地址，长度不超过255个字符
        public let callbackUrl: String?

        /// 第三方应用的业务信息，最大长度1000个字符。发起自动签署时，需设置对应自动签署场景，目前仅支持场景：处方单-E_PRESCRIPTION_AUTO_SIGN
        public let customerData: String?

        /// 合同签署顺序类型(无序签,顺序签)，默认为false，即有序签署
        public let unordered: Bool?

        /// 合同显示的页卡模板，说明：只支持{合同名称}, {发起方企业}, {发起方姓名}, {签署方N企业}, {签署方N姓名}，且N不能超过签署人的数量，N从1开始
        public let customShowMap: String?

        /// 本企业(发起方企业)是否需要签署审批
        public let needSignReview: Bool?

        public init(fileIds: [String], flowName: String, flowApprovers: [FlowApproverInfo], deadline: Int64? = nil, flowDescription: String? = nil, flowType: String? = nil, callbackUrl: String? = nil, customerData: String? = nil, unordered: Bool? = nil, customShowMap: String? = nil, needSignReview: Bool? = nil) {
            self.fileIds = fileIds
            self.flowName = flowName
            self.flowApprovers = flowApprovers
            self.deadline = deadline
            self.flowDescription = flowDescription
            self.flowType = flowType
            self.callbackUrl = callbackUrl
            self.customerData = customerData
            self.unordered = unordered
            self.customShowMap = customShowMap
            self.needSignReview = needSignReview
        }

        enum CodingKeys: String, CodingKey {
            case fileIds = "FileIds"
            case flowName = "FlowName"
            case flowApprovers = "FlowApprovers"
            case deadline = "Deadline"
            case flowDescription = "FlowDescription"
            case flowType = "FlowType"
            case callbackUrl = "CallbackUrl"
            case customerData = "CustomerData"
            case unordered = "Unordered"
            case customShowMap = "CustomShowMap"
            case needSignReview = "NeedSignReview"
        }
    }

    /// 此结构体 (FlowInfo) 用于描述签署流程信息。
    ///
    /// 【数据表格传参说明】
    /// 当模板的 ComponentType='DYNAMIC_TABLE'时（ 第三方应用集成或集成版），FormField.ComponentValue需要传递json格式的字符串参数，用于确定表头&填充数据表格（支持内容的单元格合并）
    /// 输入示例1：
    ///
    /// ```
    /// {
    ///     "headers":[
    ///         {
    ///             "content":"head1"
    ///         },
    ///         {
    ///             "content":"head2"
    ///         },
    ///         {
    ///             "content":"head3"
    ///         }
    ///     ],
    ///     "rowCount":3,
    ///     "body":{
    ///         "cells":[
    ///             {
    ///                 "rowStart":1,
    ///                 "rowEnd":1,
    ///                 "columnStart":1,
    ///                 "columnEnd":1,
    ///                 "content":"123"
    ///             },
    ///             {
    ///                 "rowStart":2,
    ///                 "rowEnd":3,
    ///                 "columnStart":1,
    ///                 "columnEnd":2,
    ///                 "content":"456"
    ///             },
    ///             {
    ///                 "rowStart":3,
    ///                 "rowEnd":3,
    ///                 "columnStart":3,
    ///                 "columnEnd":3,
    ///                 "content":"789"
    ///             }
    ///         ]
    ///     }
    /// }
    ///
    /// ```
    ///
    /// 输入示例2（表格表头宽度比例配置）：
    ///
    /// ```
    /// {
    ///     "headers":[
    ///         {
    ///             "content":"head1",
    ///             "widthPercent": 30
    ///         },
    ///         {
    ///             "content":"head2",
    ///             "widthPercent": 30
    ///         },
    ///         {
    ///             "content":"head3",
    ///             "widthPercent": 40
    ///         }
    ///     ],
    ///     "rowCount":3,
    ///     "body":{
    ///         "cells":[
    ///             {
    ///                 "rowStart":1,
    ///                 "rowEnd":1,
    ///                 "columnStart":1,
    ///                 "columnEnd":1,
    ///                 "content":"123"
    ///             },
    ///             {
    ///                 "rowStart":2,
    ///                 "rowEnd":3,
    ///                 "columnStart":1,
    ///                 "columnEnd":2,
    ///                 "content":"456"
    ///             },
    ///             {
    ///                 "rowStart":3,
    ///                 "rowEnd":3,
    ///                 "columnStart":3,
    ///                 "columnEnd":3,
    ///                 "content":"789"
    ///             }
    ///         ]
    ///     }
    /// }
    ///
    /// ```
    /// 表格参数说明
    ///
    /// | 名称                | 类型    | 描述                                              |
    /// | ------------------- | ------- | ------------------------------------------------- |
    /// | headers             | Array   | 表头：不超过10列，不支持单元格合并，字数不超过100 |
    /// | rowCount            | Integer | 表格内容最大行数                                  |
    /// | cells.N.rowStart    | Integer | 单元格坐标：行起始index                           |
    /// | cells.N.rowEnd      | Integer | 单元格坐标：行结束index                           |
    /// | cells.N.columnStart | Integer | 单元格坐标：列起始index                           |
    /// | cells.N.columnEnd   | Integer | 单元格坐标：列结束index                           |
    /// | cells.N.content     | String  | 单元格内容，字数不超过100                         |
    ///
    /// 表格参数headers说明
    ///
    /// | 名称                | 类型    | 描述                                              |
    /// | ------------------- | ------- | ------------------------------------------------- |
    /// | widthPercent   | Integer | 表头单元格列占总表头的比例，例如1：30表示 此列占表头的30%，不填写时列宽度平均拆分；例如2：总2列，某一列填写40，剩余列可以为空，按照60计算。；例如3：总3列，某一列填写30，剩余2列可以为空，分别为(100-30)/2=35                    |
    /// | content    | String  | 表头单元格内容，字数不超过100                         |
    public struct FlowInfo: TCInputModel {
        /// 合同名字，最大长度200个字符
        public let flowName: String

        /// 签署截止时间戳，超过有效签署时间则该签署流程失败，默认一年
        public let deadline: Int64

        /// 模板ID
        public let templateId: String?

        /// 多个签署人信息，最大支持50个签署方
        public let flowApprovers: [FlowApproverInfo]?

        /// 表单K-V对列表
        public let formFields: [FormField]?

        /// 回调地址，最大长度1000个字符
        public let callbackUrl: String?

        /// 合同类型，如：1. “劳务”；2. “销售”；3. “租赁”；4. “其他”，最大长度200个字符
        public let flowType: String?

        /// 合同描述，最大长度1000个字符
        public let flowDescription: String?

        /// 第三方应用平台的业务信息，最大长度1000个字符。发起自动签署时，需设置对应自动签署场景，目前仅支持场景：处方单-E_PRESCRIPTION_AUTO_SIGN
        public let customerData: String?

        /// 合同显示的页卡模板，说明：只支持{合同名称}, {发起方企业}, {发起方姓名}, {签署方N企业}, {签署方N姓名}，且N不能超过签署人的数量，N从1开始
        public let customShowMap: String?

        /// 被抄送人的信息列表，抄送功能暂不开放
        public let ccInfos: [CcInfo]?

        /// 发起方企业的签署人进行签署操作是否需要企业内部审批。
        /// 若设置为true,审核结果需通过接口 ChannelCreateFlowSignReview 通知电子签，审核通过后，发起方企业签署人方可进行签署操作，否则会阻塞其签署操作。
        ///
        /// 注：企业可以通过此功能与企业内部的审批流程进行关联，支持手动、静默签署合同。
        public let needSignReview: Bool?

        /// 给关注人发送短信通知的类型，0-合同发起时通知 1-签署完成后通知
        public let ccNotifyType: Int64?

        public init(flowName: String, deadline: Int64, templateId: String? = nil, flowApprovers: [FlowApproverInfo]? = nil, formFields: [FormField]? = nil, callbackUrl: String? = nil, flowType: String? = nil, flowDescription: String? = nil, customerData: String? = nil, customShowMap: String? = nil, ccInfos: [CcInfo]? = nil, needSignReview: Bool? = nil, ccNotifyType: Int64? = nil) {
            self.flowName = flowName
            self.deadline = deadline
            self.templateId = templateId
            self.flowApprovers = flowApprovers
            self.formFields = formFields
            self.callbackUrl = callbackUrl
            self.flowType = flowType
            self.flowDescription = flowDescription
            self.customerData = customerData
            self.customShowMap = customShowMap
            self.ccInfos = ccInfos
            self.needSignReview = needSignReview
            self.ccNotifyType = ccNotifyType
        }

        enum CodingKeys: String, CodingKey {
            case flowName = "FlowName"
            case deadline = "Deadline"
            case templateId = "TemplateId"
            case flowApprovers = "FlowApprovers"
            case formFields = "FormFields"
            case callbackUrl = "CallbackUrl"
            case flowType = "FlowType"
            case flowDescription = "FlowDescription"
            case customerData = "CustomerData"
            case customShowMap = "CustomShowMap"
            case ccInfos = "CcInfos"
            case needSignReview = "NeedSignReview"
            case ccNotifyType = "CcNotifyType"
        }
    }

    /// 流程对应资源链接信息
    public struct FlowResourceUrlInfo: TCOutputModel {
        /// 流程对应Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowId: String?

        /// 流程对应资源链接信息数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceUrlInfos: [ResourceUrlInfo]?

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case resourceUrlInfos = "ResourceUrlInfos"
        }
    }

    /// 此结构 (FormField) 用于描述内容控件填充结构。
    public struct FormField: TCInputModel, TCOutputModel {
        /// 控件填充vaule，ComponentType和传入值类型对应关系：
        /// TEXT - 文本内容
        /// MULTI_LINE_TEXT - 文本内容
        /// CHECK_BOX - true/false
        /// FILL_IMAGE、ATTACHMENT - 附件的FileId，需要通过UploadFiles接口上传获取
        /// SELECTOR - 选项值
        /// DYNAMIC_TABLE - 传入json格式的表格内容，具体见数据结构FlowInfo：https://cloud.tencent.com/document/api/1420/61525#FlowInfo
        public let componentValue: String

        /// 表单域或控件的ID，跟ComponentName二选一，不能全为空；
        /// CreateFlowsByTemplates 接口不使用此字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentId: String?

        /// 控件的名字，跟ComponentId二选一，不能全为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let componentName: String?

        public init(componentValue: String, componentId: String? = nil, componentName: String? = nil) {
            self.componentValue = componentValue
            self.componentId = componentId
            self.componentName = componentName
        }

        enum CodingKeys: String, CodingKey {
            case componentValue = "ComponentValue"
            case componentId = "ComponentId"
            case componentName = "ComponentName"
        }
    }

    /// 持有的电子印章信息
    public struct OccupiedSeal: TCOutputModel {
        /// 电子印章编号
        public let sealId: String

        /// 电子印章名称
        public let sealName: String

        /// 电子印章授权时间戳
        public let createOn: Int64

        /// 电子印章授权人
        public let creator: String

        /// 电子印章策略Id
        public let sealPolicyId: String

        /// 印章状态，有以下六种：CHECKING（审核中）SUCCESS（已启用）FAIL（审核拒绝）CHECKING-SADM（待超管审核）DISABLE（已停用）STOPPED（已终止）
        public let sealStatus: String

        /// 审核失败原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failReason: String?

        /// 印章图片url，5分钟内有效
        public let url: String

        /// 印章类型
        public let sealType: String

        /// 用印申请是否为永久授权
        public let isAllTime: Bool

        /// 授权人列表
        public let authorizedUsers: [AuthorizedUser]

        enum CodingKeys: String, CodingKey {
            case sealId = "SealId"
            case sealName = "SealName"
            case createOn = "CreateOn"
            case creator = "Creator"
            case sealPolicyId = "SealPolicyId"
            case sealStatus = "SealStatus"
            case failReason = "FailReason"
            case url = "Url"
            case sealType = "SealType"
            case isAllTime = "IsAllTime"
            case authorizedUsers = "AuthorizedUsers"
        }
    }

    /// 机构信息
    public struct OrganizationInfo: TCInputModel, TCOutputModel {
        /// 用户在渠道的机构编号
        public let organizationOpenId: String

        /// 用户真实的IP
        public let clientIp: String

        /// 机构的代理IP
        public let proxyIp: String

        /// 机构在平台的编号
        public let organizationId: String?

        /// 用户渠道
        public let channel: String?

        public init(organizationOpenId: String, clientIp: String, proxyIp: String, organizationId: String? = nil, channel: String? = nil) {
            self.organizationOpenId = organizationOpenId
            self.clientIp = clientIp
            self.proxyIp = proxyIp
            self.organizationId = organizationId
            self.channel = channel
        }

        enum CodingKeys: String, CodingKey {
            case organizationOpenId = "OrganizationOpenId"
            case clientIp = "ClientIp"
            case proxyIp = "ProxyIp"
            case organizationId = "OrganizationId"
            case channel = "Channel"
        }
    }

    /// 合同文件验签单个结果结构体
    public struct PdfVerifyResult: TCOutputModel {
        /// 验签结果
        public let verifyResult: Int64

        /// 签署平台
        public let signPlatform: String

        /// 签署人名称
        public let signerName: String

        /// 签署时间
        public let signTime: Int64

        /// 签名算法
        public let signAlgorithm: String

        /// 签名证书序列号
        public let certSn: String

        /// 证书起始时间
        public let certNotBefore: Int64

        /// 证书过期时间
        public let certNotAfter: Int64

        /// 签名类型
        public let signType: Int64

        /// 签名域横坐标
        public let componentPosX: Float

        /// 签名域纵坐标
        public let componentPosY: Float

        /// 签名域宽度
        public let componentWidth: Float

        /// 签名域高度
        public let componentHeight: Float

        /// 签名域所在页码
        public let componentPage: Int64

        enum CodingKeys: String, CodingKey {
            case verifyResult = "VerifyResult"
            case signPlatform = "SignPlatform"
            case signerName = "SignerName"
            case signTime = "SignTime"
            case signAlgorithm = "SignAlgorithm"
            case certSn = "CertSn"
            case certNotBefore = "CertNotBefore"
            case certNotAfter = "CertNotAfter"
            case signType = "SignType"
            case componentPosX = "ComponentPosX"
            case componentPosY = "ComponentPosY"
            case componentWidth = "ComponentWidth"
            case componentHeight = "ComponentHeight"
            case componentPage = "ComponentPage"
        }
    }

    /// 合作企业经办人列表信息
    public struct ProxyOrganizationOperator: TCInputModel {
        /// 对应Agent-ProxyOperator-OpenId。第三方应用平台自定义，对子客企业员的唯一标识。一个OpenId在一个子客企业内唯一对应一个真实员工，不可在其他子客企业内重复使用。（例如，可以使用经办人企业名+员工身份证的hash值，需要第三方应用平台保存），最大64位字符串
        public let id: String

        /// 经办人姓名，最大长度50个字符
        public let name: String?

        /// 经办人身份证件类型
        /// 1.ID_CARD 居民身份证
        /// 2.HONGKONG_MACAO_AND_TAIWAN 港澳台居民居住证
        /// 3.HONGKONG_AND_MACAO 港澳居民来往内地通行证
        public let idCardType: String?

        /// 经办人证件号
        public let idCardNumber: String?

        /// 经办人手机号，大陆手机号输入11位，暂不支持海外手机号。
        public let mobile: String?

        /// 默认角色，值为以下三个对应的英文：
        /// 业务管理员：admin
        /// 经办人：channel-normal-operator
        /// 业务员：channel-sales-man
        public let defaultRole: String?

        public init(id: String, name: String? = nil, idCardType: String? = nil, idCardNumber: String? = nil, mobile: String? = nil, defaultRole: String? = nil) {
            self.id = id
            self.name = name
            self.idCardType = idCardType
            self.idCardNumber = idCardNumber
            self.mobile = mobile
            self.defaultRole = defaultRole
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case idCardType = "IdCardType"
            case idCardNumber = "IdCardNumber"
            case mobile = "Mobile"
            case defaultRole = "DefaultRole"
        }
    }

    /// 签署参与者信息
    public struct Recipient: TCInputModel, TCOutputModel {
        /// 签署人唯一标识
        public let recipientId: String?

        /// 签署方类型：ENTERPRISE-企业INDIVIDUAL-自然人
        public let recipientType: String?

        /// 描述
        public let description: String?

        /// 签署方备注信息
        public let roleName: String?

        /// 是否需要校验
        public let requireValidation: Bool?

        /// 是否必须填写
        public let requireSign: Bool?

        /// 签署类型
        public let signType: Int64?

        /// 签署顺序：数字越小优先级越高
        public let routingOrder: Int64?

        /// 是否是发起方
        public let isPromoter: Bool?

        public init(recipientId: String? = nil, recipientType: String? = nil, description: String? = nil, roleName: String? = nil, requireValidation: Bool? = nil, requireSign: Bool? = nil, signType: Int64? = nil, routingOrder: Int64? = nil, isPromoter: Bool? = nil) {
            self.recipientId = recipientId
            self.recipientType = recipientType
            self.description = description
            self.roleName = roleName
            self.requireValidation = requireValidation
            self.requireSign = requireSign
            self.signType = signType
            self.routingOrder = routingOrder
            self.isPromoter = isPromoter
        }

        enum CodingKeys: String, CodingKey {
            case recipientId = "RecipientId"
            case recipientType = "RecipientType"
            case description = "Description"
            case roleName = "RoleName"
            case requireValidation = "RequireValidation"
            case requireSign = "RequireSign"
            case signType = "SignType"
            case routingOrder = "RoutingOrder"
            case isPromoter = "IsPromoter"
        }
    }

    /// 解除协议的签署人，如不指定，默认使用待解除流程（即原流程）中的签署人。
    /// 注意：不支持更换C端（个人身份类型）签署人，如果原流程中含有C端签署人，默认使用原流程中的该签署人。
    ///
    /// 如果需要指定B端（机构身份类型）签署人，其中ReleasedApprover需要传递的参数如下：
    /// ApproverNumber, OrganizationName, ApproverType必传。
    /// 对于其他身份标识
    /// - 子客企业指定经办人：OpenId必传，OrganizationOpenId必传；
    /// - 非子客企业：Name、Mobile必传。
    public struct ReleasedApprover: TCInputModel {
        /// 企业签署方工商营业执照上的企业名称，签署方为非发起方企业场景下必传，最大长度64个字符
        public let organizationName: String

        /// 签署人在原流程中的签署人列表中的顺序序号（从0开始，按顺序依次递增），如果不清楚原流程中的签署人列表，可以通过DescribeFlows接口查看
        public let approverNumber: UInt64

        /// 签署人类型，目前仅支持
        /// ORGANIZATION-企业
        public let approverType: String

        /// 签署人姓名，最大长度50个字符
        public let name: String?

        /// 签署人身份证件类型
        /// 1.ID_CARD 居民身份证
        /// 2.HONGKONG_MACAO_AND_TAIWAN 港澳台居民居住证
        /// 3.HONGKONG_AND_MACAO 港澳居民来往内地通行证
        public let idCardType: String?

        /// 签署人证件号
        public let idCardNumber: String?

        /// 签署人手机号，脱敏显示。大陆手机号为11位，暂不支持海外手机号
        public let mobile: String?

        /// 企业签署方在同一第三方应用下的其他合作企业OpenId，签署方为非发起方企业场景下必传，最大长度64个字符
        public let organizationOpenId: String?

        /// 用户侧第三方id，最大长度64个字符
        /// 当签署方为同一第三方应用下的员工时，该字必传
        public let openId: String?

        public init(organizationName: String, approverNumber: UInt64, approverType: String, name: String? = nil, idCardType: String? = nil, idCardNumber: String? = nil, mobile: String? = nil, organizationOpenId: String? = nil, openId: String? = nil) {
            self.organizationName = organizationName
            self.approverNumber = approverNumber
            self.approverType = approverType
            self.name = name
            self.idCardType = idCardType
            self.idCardNumber = idCardNumber
            self.mobile = mobile
            self.organizationOpenId = organizationOpenId
            self.openId = openId
        }

        enum CodingKeys: String, CodingKey {
            case organizationName = "OrganizationName"
            case approverNumber = "ApproverNumber"
            case approverType = "ApproverType"
            case name = "Name"
            case idCardType = "IdCardType"
            case idCardNumber = "IdCardNumber"
            case mobile = "Mobile"
            case organizationOpenId = "OrganizationOpenId"
            case openId = "OpenId"
        }
    }

    /// 解除协议文档中内容信息，包括但不限于：解除理由、解除后仍然有效的条款-保留条款、原合同事项处理-费用结算、原合同事项处理-其他事项、其他约定等。
    public struct RelieveInfo: TCInputModel {
        /// 解除理由，最大支持200个字
        public let reason: String

        /// 解除后仍然有效的条款，保留条款，最大支持200个字
        public let remainInForceItem: String?

        /// 原合同事项处理-费用结算，最大支持200个字
        public let originalExpenseSettlement: String?

        /// 原合同事项处理-其他事项，最大支持200个字
        public let originalOtherSettlement: String?

        /// 其他约定，最大支持200个字
        public let otherDeals: String?

        public init(reason: String, remainInForceItem: String? = nil, originalExpenseSettlement: String? = nil, originalOtherSettlement: String? = nil, otherDeals: String? = nil) {
            self.reason = reason
            self.remainInForceItem = remainInForceItem
            self.originalExpenseSettlement = originalExpenseSettlement
            self.originalOtherSettlement = originalOtherSettlement
            self.otherDeals = otherDeals
        }

        enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case remainInForceItem = "RemainInForceItem"
            case originalExpenseSettlement = "OriginalExpenseSettlement"
            case originalOtherSettlement = "OriginalOtherSettlement"
            case otherDeals = "OtherDeals"
        }
    }

    /// 催办接口返回详细信息
    public struct RemindFlowRecords: TCOutputModel {
        /// 是否能够催办
        public let canRemind: Bool

        /// 合同id
        public let flowId: String

        /// 催办详情
        public let remindMessage: String

        enum CodingKeys: String, CodingKey {
            case canRemind = "CanRemind"
            case flowId = "FlowId"
            case remindMessage = "RemindMessage"
        }
    }

    /// 资源链接信息
    public struct ResourceUrlInfo: TCOutputModel {
        /// 资源链接地址，过期时间5分钟
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let url: String?

        /// 资源名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 资源类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: String?

        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case name = "Name"
            case type = "Type"
        }
    }

    /// 一码多扫签署二维码对象
    public struct SignQrCode: TCOutputModel {
        /// 二维码id
        public let qrCodeId: String

        /// 二维码url
        public let qrCodeUrl: String

        /// 二维码过期时间
        public let expiredTime: Int64

        enum CodingKeys: String, CodingKey {
            case qrCodeId = "QrCodeId"
            case qrCodeUrl = "QrCodeUrl"
            case expiredTime = "ExpiredTime"
        }
    }

    /// 一码多扫签署二维码签署信息
    public struct SignUrl: TCOutputModel {
        /// 小程序签署链接
        public let appSignUrl: String

        /// 签署链接有效时间
        public let effectiveTime: String

        /// 移动端签署链接
        public let httpSignUrl: String

        enum CodingKeys: String, CodingKey {
            case appSignUrl = "AppSignUrl"
            case effectiveTime = "EffectiveTime"
            case httpSignUrl = "HttpSignUrl"
        }
    }

    /// 签署链接内容
    public struct SignUrlInfo: TCOutputModel {
        /// 签署链接，过期时间为30天
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signUrl: String?

        /// 合同过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deadline: Int64?

        /// 当流程为顺序签署此参数有效时，数字越小优先级越高，暂不支持并行签署 可选
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signOrder: Int64?

        /// 签署人编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let signId: String?

        /// 自定义用户编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customUserId: String?

        /// 用户姓名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 用户手机号码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mobile: String?

        /// 签署参与者机构名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let organizationName: String?

        /// 参与者类型:
        /// ORGANIZATION 企业经办人
        /// PERSON 自然人
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let approverType: String?

        /// 经办人身份证号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let idCardNumber: String?

        /// 签署链接对应流程Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowId: String?

        /// 企业经办人 用户在渠道的编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let openId: String?

        /// 合同组签署链接对应的合同组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowGroupId: String?

        enum CodingKeys: String, CodingKey {
            case signUrl = "SignUrl"
            case deadline = "Deadline"
            case signOrder = "SignOrder"
            case signId = "SignId"
            case customUserId = "CustomUserId"
            case name = "Name"
            case mobile = "Mobile"
            case organizationName = "OrganizationName"
            case approverType = "ApproverType"
            case idCardNumber = "IdCardNumber"
            case flowId = "FlowId"
            case openId = "OpenId"
            case flowGroupId = "FlowGroupId"
        }
    }

    /// 企业员工信息
    public struct Staff: TCOutputModel {
        /// 员工在电子签平台的id
        public let userId: String

        /// 显示的员工名
        public let displayName: String

        /// 员工手机号
        public let mobile: String

        /// 员工邮箱
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let email: String?

        /// 员工在第三方平台id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let openId: String?

        /// 员工角色
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roles: [StaffRole]?

        /// 员工部门
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let department: Department?

        /// 员工是否实名
        public let verified: Bool

        /// 员工创建时间戳
        public let createdOn: Int64

        /// 员工实名时间戳
        public let verifiedOn: Int64

        /// 员工是否离职：0-未离职，1-离职
        public let quiteJob: Int64

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case displayName = "DisplayName"
            case mobile = "Mobile"
            case email = "Email"
            case openId = "OpenId"
            case roles = "Roles"
            case department = "Department"
            case verified = "Verified"
            case createdOn = "CreatedOn"
            case verifiedOn = "VerifiedOn"
            case quiteJob = "QuiteJob"
        }
    }

    /// 第三方应用集成员工角色信息
    public struct StaffRole: TCOutputModel {
        /// 角色id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleId: String?

        /// 角色名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roleName: String?

        enum CodingKeys: String, CodingKey {
            case roleId = "RoleId"
            case roleName = "RoleName"
        }
    }

    /// 同步经办人失败原因
    public struct SyncFailReason: TCOutputModel {
        /// 经办人Id
        public let id: String

        /// 失败原因
        /// 例如：Id不符合规范、证件号码不合法等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let message: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case message = "Message"
        }
    }

    /// 复杂文档合成任务的任务信息
    public struct TaskInfo: TCOutputModel {
        /// 合成任务Id，可以通过 ChannelGetTaskResultApi 接口获取任务信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: String?

        /// 任务状态：READY - 任务已完成；NOTREADY - 任务未完成；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskStatus: String?

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskStatus = "TaskStatus"
        }
    }

    /// 此结构体 (TemplateInfo) 用于描述模板的信息。
    public struct TemplateInfo: TCOutputModel {
        /// 模板ID
        public let templateId: String

        /// 模板名字
        public let templateName: String

        /// 模板描述信息
        public let description: String

        /// 模板控件信息结构
        public let components: [Component]

        /// 模板中的流程参与人信息
        public let recipients: [Recipient]

        /// 签署区模板信息结构
        public let signComponents: [Component]

        /// 模板类型：1-静默签；3-普通模板
        public let templateType: Int64

        /// 是否是发起人 ,已弃用
        public let isPromoter: Bool

        /// 模板的创建者信息
        public let creator: String

        /// 模板创建的时间戳（精确到秒）
        public let createdOn: Int64

        /// 模板的H5预览链接,可以通过浏览器打开此链接预览模板，或者嵌入到iframe中预览模板。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let previewUrl: String?

        /// 第三方应用集成-模板PDF文件链接
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let pdfUrl: String?

        /// 关联的平台企业模板ID
        public let channelTemplateId: String

        /// 关联的平台企业模板名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let channelTemplateName: String?

        /// 0-需要子客企业手动领取平台企业的模板(默认); 1-平台自动设置子客模板
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let channelAutoSave: Int64?

        /// 模板版本，全数字字符。默认为空，初始版本为yyyyMMdd001。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateVersion: String?

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case description = "Description"
            case components = "Components"
            case recipients = "Recipients"
            case signComponents = "SignComponents"
            case templateType = "TemplateType"
            case isPromoter = "IsPromoter"
            case creator = "Creator"
            case createdOn = "CreatedOn"
            case previewUrl = "PreviewUrl"
            case pdfUrl = "PdfUrl"
            case channelTemplateId = "ChannelTemplateId"
            case channelTemplateName = "ChannelTemplateName"
            case channelAutoSave = "ChannelAutoSave"
            case templateVersion = "TemplateVersion"
        }
    }

    /// 此结构体 (UploadFile) 用于描述多文件上传的文件信息。
    public struct UploadFile: TCInputModel {
        /// Base64编码后的文件内容
        public let fileBody: String

        /// 文件名
        public let fileName: String?

        public init(fileBody: String, fileName: String? = nil) {
            self.fileBody = fileBody
            self.fileName = fileName
        }

        enum CodingKeys: String, CodingKey {
            case fileBody = "FileBody"
            case fileName = "FileName"
        }
    }

    /// 用量明细
    public struct UsageDetail: TCOutputModel {
        /// 子客企业唯一标识
        public let proxyOrganizationOpenId: String

        /// 子客企业名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proxyOrganizationName: String?

        /// 日期，当需要汇总数据时日期为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCDateEncoding public var date: Date?

        /// 消耗数量
        public let usage: UInt64

        /// 撤回数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cancel: UInt64?

        /// 消耗渠道
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowChannel: String?

        enum CodingKeys: String, CodingKey {
            case proxyOrganizationOpenId = "ProxyOrganizationOpenId"
            case proxyOrganizationName = "ProxyOrganizationName"
            case date = "Date"
            case usage = "Usage"
            case cancel = "Cancel"
            case flowChannel = "FlowChannel"
        }
    }

    /// 接口调用者信息
    public struct UserInfo: TCInputModel {
        /// 第三方应用平台自定义，对应第三方平台子客企业员的唯一标识。一个OpenId在一个子客企业内唯一对应一个真实员工，不可在其他子客企业内重复使用。（例如，可以使用经办人企业名+员工身份证的hash值，需要第三方应用平台保存），最大64位字符串
        public let openId: String?

        /// 内部参数，暂未开放使用
        public let channel: String?

        /// 内部参数，暂未开放使用
        public let customUserId: String?

        /// 内部参数，暂未开放使用
        public let clientIp: String?

        /// 内部参数，暂未开放使用
        public let proxyIp: String?

        public init(openId: String? = nil, channel: String? = nil, customUserId: String? = nil, clientIp: String? = nil, proxyIp: String? = nil) {
            self.openId = openId
            self.channel = channel
            self.customUserId = customUserId
            self.clientIp = clientIp
            self.proxyIp = proxyIp
        }

        enum CodingKeys: String, CodingKey {
            case openId = "OpenId"
            case channel = "Channel"
            case customUserId = "CustomUserId"
            case clientIp = "ClientIp"
            case proxyIp = "ProxyIp"
        }
    }
}
