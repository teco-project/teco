//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssbasicError {
    public struct OperationDenied: TCErrorType {
        enum Code: String {
            case authTag = "OperationDenied.AuthTag"
            case bannedApplication = "OperationDenied.BannedApplication"
            case byFilesServerSignForbid = "OperationDenied.ByFilesServerSignForbid"
            case downLoadMoreThanOne = "OperationDenied.DownLoadMoreThanOne"
            case errNoResourceAccess = "OperationDenied.ErrNoResourceAccess"
            case fileDeleted = "OperationDenied.FileDeleted"
            case flowHasTerminated = "OperationDenied.FlowHasTerminated"
            case forbid = "OperationDenied.Forbid"
            case invalidApproverAge = "OperationDenied.InvalidApproverAge"
            case noApiAuth = "OperationDenied.NoApiAuth"
            case noFlowPermission = "OperationDenied.NoFlowPermission"
            case noIdentityVerify = "OperationDenied.NoIdentityVerify"
            case noQuota = "OperationDenied.NoQuota"
            case operateType = "OperationDenied.OperateType"
            case operatorHasNoPermission = "OperationDenied.OperatorHasNoPermission"
            case outQueryLimit = "OperationDenied.OutQueryLimit"
            case userNotInOrganization = "OperationDenied.UserNotInOrganization"
            case other = "OperationDenied"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var authTag: OperationDenied {
            OperationDenied(.authTag)
        }
        
        /// 应用号已被禁止。
        public static var bannedApplication: OperationDenied {
            OperationDenied(.bannedApplication)
        }
        
        public static var byFilesServerSignForbid: OperationDenied {
            OperationDenied(.byFilesServerSignForbid)
        }
        
        public static var downLoadMoreThanOne: OperationDenied {
            OperationDenied(.downLoadMoreThanOne)
        }
        
        public static var errNoResourceAccess: OperationDenied {
            OperationDenied(.errNoResourceAccess)
        }
        
        public static var fileDeleted: OperationDenied {
            OperationDenied(.fileDeleted)
        }
        
        public static var flowHasTerminated: OperationDenied {
            OperationDenied(.flowHasTerminated)
        }
        
        /// 禁止操作。
        public static var forbid: OperationDenied {
            OperationDenied(.forbid)
        }
        
        public static var invalidApproverAge: OperationDenied {
            OperationDenied(.invalidApproverAge)
        }
        
        /// 没有API权限。
        public static var noApiAuth: OperationDenied {
            OperationDenied(.noApiAuth)
        }
        
        public static var noFlowPermission: OperationDenied {
            OperationDenied(.noFlowPermission)
        }
        
        /// 未通过个人实名。
        public static var noIdentityVerify: OperationDenied {
            OperationDenied(.noIdentityVerify)
        }
        
        /// 流程配额不足。
        public static var noQuota: OperationDenied {
            OperationDenied(.noQuota)
        }
        
        public static var operateType: OperationDenied {
            OperationDenied(.operateType)
        }
        
        public static var operatorHasNoPermission: OperationDenied {
            OperationDenied(.operatorHasNoPermission)
        }
        
        public static var outQueryLimit: OperationDenied {
            OperationDenied(.outQueryLimit)
        }
        
        /// 用户与企业不对应。
        public static var userNotInOrganization: OperationDenied {
            OperationDenied(.userNotInOrganization)
        }
        
        /// 操作被拒绝。
        public static var other: OperationDenied {
            OperationDenied(.other)
        }
    }
}

extension TCEssbasicError.OperationDenied: Equatable {
    public static func == (lhs: TCEssbasicError.OperationDenied, rhs: TCEssbasicError.OperationDenied) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEssbasicError.OperationDenied: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEssbasicError.OperationDenied {
    public func toEssbasicError() -> TCEssbasicError {
        guard let code = TCEssbasicError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEssbasicError(code, context: self.context)
    }
}