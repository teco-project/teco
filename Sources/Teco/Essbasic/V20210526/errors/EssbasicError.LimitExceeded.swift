//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssbasicError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case callTimes = "LimitExceeded.CallTimes"
            case createFlowNum = "LimitExceeded.CreateFlowNum"
            case fileSize = "LimitExceeded.FileSize"
            case flowIds = "LimitExceeded.FlowIds"
            case flowInfos = "LimitExceeded.FlowInfos"
            case proxyOrganizationOperator = "LimitExceeded.ProxyOrganizationOperator"
            case other = "LimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var callTimes: LimitExceeded {
            LimitExceeded(.callTimes)
        }
        
        public static var createFlowNum: LimitExceeded {
            LimitExceeded(.createFlowNum)
        }
        
        public static var fileSize: LimitExceeded {
            LimitExceeded(.fileSize)
        }
        
        public static var flowIds: LimitExceeded {
            LimitExceeded(.flowIds)
        }
        
        public static var flowInfos: LimitExceeded {
            LimitExceeded(.flowInfos)
        }
        
        public static var proxyOrganizationOperator: LimitExceeded {
            LimitExceeded(.proxyOrganizationOperator)
        }
        
        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }
    }
}

extension TCEssbasicError.LimitExceeded: Equatable {
    public static func == (lhs: TCEssbasicError.LimitExceeded, rhs: TCEssbasicError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEssbasicError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEssbasicError.LimitExceeded {
    public func toEssbasicError() -> TCEssbasicError {
        guard let code = TCEssbasicError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEssbasicError(code, context: self.context)
    }
}