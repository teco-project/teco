//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssbasicError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case ageNotAchieveNormalLegal = "FailedOperation.AgeNotAchieveNormalLegal"
            case authFail = "FailedOperation.AuthFail"
            case existSameSealName = "FailedOperation.ExistSameSealName"
            case flowNumExceed = "FailedOperation.FlowNumExceed"
            case hasAuthorized = "FailedOperation.HasAuthorized"
            case notAvailableSignReview = "FailedOperation.NotAvailableSignReview"
            case qrCodeCreatorSignComponents = "FailedOperation.QrCodeCreatorSignComponents"
            case qrCodeSignUsers = "FailedOperation.QrCodeSignUsers"
            case qrCodeTemplateId = "FailedOperation.QrCodeTemplateId"
            case staffAlreadyVerify = "FailedOperation.StaffAlreadyVerify"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var ageNotAchieveNormalLegal: FailedOperation {
            FailedOperation(.ageNotAchieveNormalLegal)
        }
        
        /// 鉴权失败。
        public static var authFail: FailedOperation {
            FailedOperation(.authFail)
        }
        
        public static var existSameSealName: FailedOperation {
            FailedOperation(.existSameSealName)
        }
        
        public static var flowNumExceed: FailedOperation {
            FailedOperation(.flowNumExceed)
        }
        
        public static var hasAuthorized: FailedOperation {
            FailedOperation(.hasAuthorized)
        }
        
        public static var notAvailableSignReview: FailedOperation {
            FailedOperation(.notAvailableSignReview)
        }
        
        public static var qrCodeCreatorSignComponents: FailedOperation {
            FailedOperation(.qrCodeCreatorSignComponents)
        }
        
        public static var qrCodeSignUsers: FailedOperation {
            FailedOperation(.qrCodeSignUsers)
        }
        
        public static var qrCodeTemplateId: FailedOperation {
            FailedOperation(.qrCodeTemplateId)
        }
        
        /// 员工已实名。
        public static var staffAlreadyVerify: FailedOperation {
            FailedOperation(.staffAlreadyVerify)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCEssbasicError.FailedOperation: Equatable {
    public static func == (lhs: TCEssbasicError.FailedOperation, rhs: TCEssbasicError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEssbasicError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEssbasicError.FailedOperation {
    public func toEssbasicError() -> TCEssbasicError {
        guard let code = TCEssbasicError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEssbasicError(code, context: self.context)
    }
}