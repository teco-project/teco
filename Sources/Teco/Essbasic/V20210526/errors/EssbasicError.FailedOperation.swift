//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssbasicError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case ageNotAchieveNormalLegal = "FailedOperation.AgeNotAchieveNormalLegal"
            case authFail = "FailedOperation.AuthFail"
            case existSameSealName = "FailedOperation.ExistSameSealName"
            case flowNumExceed = "FailedOperation.FlowNumExceed"
            case hasAuthorized = "FailedOperation.HasAuthorized"
            case notAvailableSignReview = "FailedOperation.NotAvailableSignReview"
            case qrCodeCreatorSignComponents = "FailedOperation.QrCodeCreatorSignComponents"
            case qrCodeSignUsers = "FailedOperation.QrCodeSignUsers"
            case qrCodeTemplateId = "FailedOperation.QrCodeTemplateId"
            case staffAlreadyVerify = "FailedOperation.StaffAlreadyVerify"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 请检查签署人证件号是合法年龄，以证件号为准。若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var ageNotAchieveNormalLegal: FailedOperation {
            FailedOperation(.ageNotAchieveNormalLegal)
        }
        
        /// 鉴权失败。
        ///
        /// 请检查参数，确保账号信息正确。再重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var authFail: FailedOperation {
            FailedOperation(.authFail)
        }
        
        public static var existSameSealName: FailedOperation {
            FailedOperation(.existSameSealName)
        }
        
        public static var flowNumExceed: FailedOperation {
            FailedOperation(.flowNumExceed)
        }
        
        public static var hasAuthorized: FailedOperation {
            FailedOperation(.hasAuthorized)
        }
        
        public static var notAvailableSignReview: FailedOperation {
            FailedOperation(.notAvailableSignReview)
        }
        
        /// 请确认是否模板配置存在发起方的填写控件。再重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var qrCodeCreatorSignComponents: FailedOperation {
            FailedOperation(.qrCodeCreatorSignComponents)
        }
        
        /// 请确认模板是否缺少签署人。再重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var qrCodeSignUsers: FailedOperation {
            FailedOperation(.qrCodeSignUsers)
        }
        
        /// 适用的模版仅限于B2C（无序签署，顺序签署时B静默签署，顺序签署时B非首位签署）、单C的模版，且模版中发起方没有填写控件。若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var qrCodeTemplateId: FailedOperation {
            FailedOperation(.qrCodeTemplateId)
        }
        
        /// 员工已实名。
        ///
        /// 员工已实名，如有其他疑问，请联系客服。
        public static var staffAlreadyVerify: FailedOperation {
            FailedOperation(.staffAlreadyVerify)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCEssbasicError.FailedOperation: Equatable {
    public static func == (lhs: TCEssbasicError.FailedOperation, rhs: TCEssbasicError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEssbasicError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEssbasicError.FailedOperation {
    /// - Returns: ``TCEssbasicError`` that holds the same error and context.
    public func toEssbasicError() -> TCEssbasicError {
        guard let code = TCEssbasicError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEssbasicError(code, context: self.context)
    }
}

extension TCEssbasicError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
