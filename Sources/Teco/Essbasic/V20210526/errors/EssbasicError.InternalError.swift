//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCEssbasicError {
    public struct InternalError: TCEssbasicErrorType {
        enum Code: String {
            case api = "InternalError.Api"
            case db = "InternalError.Db"
            case dbConnection = "InternalError.DbConnection"
            case dbInsert = "InternalError.DbInsert"
            case dbRead = "InternalError.DbRead"
            case dbUpdate = "InternalError.DbUpdate"
            case decryption = "InternalError.Decryption"
            case dependsApi = "InternalError.DependsApi"
            case dependsDb = "InternalError.DependsDb"
            case encryption = "InternalError.Encryption"
            case generateId = "InternalError.GenerateId"
            case pdf = "InternalError.Pdf"
            case sealUpload = "InternalError.SealUpload"
            case serialize = "InternalError.Serialize"
            case system = "InternalError.System"
            case thirdParty = "InternalError.ThirdParty"
            case other = "InternalError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 其他API错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var api: InternalError {
            InternalError(.api)
        }

        /// 数据库错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var db: InternalError {
            InternalError(.db)
        }

        /// 数据库连接出错。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var dbConnection: InternalError {
            InternalError(.dbConnection)
        }

        /// 数据库新增记录出错。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var dbInsert: InternalError {
            InternalError(.dbInsert)
        }

        /// 数据库读取失败。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var dbRead: InternalError {
            InternalError(.dbRead)
        }

        /// 数据库更新记录出错。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var dbUpdate: InternalError {
            InternalError(.dbUpdate)
        }

        /// 解密错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var decryption: InternalError {
            InternalError(.decryption)
        }

        /// 依赖的其他api出错。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var dependsApi: InternalError {
            InternalError(.dependsApi)
        }

        /// 数据库异常。
        public static var dependsDb: InternalError {
            InternalError(.dependsDb)
        }

        /// 加密错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var encryption: InternalError {
            InternalError(.encryption)
        }

        /// 生成唯一ID错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var generateId: InternalError {
            InternalError(.generateId)
        }

        /// Pdf合成错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var pdf: InternalError {
            InternalError(.pdf)
        }

        /// 上传印章失败。
        public static var sealUpload: InternalError {
            InternalError(.sealUpload)
        }

        /// 序列化错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var serialize: InternalError {
            InternalError(.serialize)
        }

        /// 系统错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var system: InternalError {
            InternalError(.system)
        }

        /// 第三方错误。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var thirdParty: InternalError {
            InternalError(.thirdParty)
        }

        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }

        public func asEssbasicError() -> TCEssbasicError {
            let code: TCEssbasicError.Code
            switch self.error {
            case .api:
                code = .internalError_Api
            case .db:
                code = .internalError_Db
            case .dbConnection:
                code = .internalError_DbConnection
            case .dbInsert:
                code = .internalError_DbInsert
            case .dbRead:
                code = .internalError_DbRead
            case .dbUpdate:
                code = .internalError_DbUpdate
            case .decryption:
                code = .internalError_Decryption
            case .dependsApi:
                code = .internalError_DependsApi
            case .dependsDb:
                code = .internalError_DependsDb
            case .encryption:
                code = .internalError_Encryption
            case .generateId:
                code = .internalError_GenerateId
            case .pdf:
                code = .internalError_Pdf
            case .sealUpload:
                code = .internalError_SealUpload
            case .serialize:
                code = .internalError_Serialize
            case .system:
                code = .internalError_System
            case .thirdParty:
                code = .internalError_ThirdParty
            case .other:
                code = .internalError
            }
            return TCEssbasicError(code, context: self.context)
        }
    }
}
