//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// CreatePreviewSignUrl请求参数结构体
    public struct CreatePreviewSignUrlRequest: TCRequestModel {
        /// 调用方信息
        public let caller: Caller

        /// URL过期时间戳
        public let deadline: Int64

        /// 目录ID。当 SignUrlType 为 CATALOG 时必填
        public let catalogId: String?

        /// 流程ID。当 SignUrlType 为 FLOW 时必填
        public let flowId: String?

        /// 签署链接类型：
        /// 1. FLOW - 单流程签署 (默认)
        /// 2. CATALOG - 目录签署
        public let signUrlType: String?

        public init(caller: Caller, deadline: Int64, catalogId: String? = nil, flowId: String? = nil, signUrlType: String? = nil) {
            self.caller = caller
            self.deadline = deadline
            self.catalogId = catalogId
            self.flowId = flowId
            self.signUrlType = signUrlType
        }

        enum CodingKeys: String, CodingKey {
            case caller = "Caller"
            case deadline = "Deadline"
            case catalogId = "CatalogId"
            case flowId = "FlowId"
            case signUrlType = "SignUrlType"
        }
    }

    /// CreatePreviewSignUrl返回参数结构体
    public struct CreatePreviewSignUrlResponse: TCResponseModel {
        /// 合同预览URL
        public let previewSignUrl: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case previewSignUrl = "PreviewSignUrl"
            case requestId = "RequestId"
        }
    }

    /// 生成预览签署URL
    ///
    /// 此接口（CreatePreviewSignUrl）用于生成生成预览签署URL。
    ///
    /// 注：调用此接口前，请确保您已提前调用了发送流程接口（SendFlow）指定相关签署方。
    @inlinable
    public func createPreviewSignUrl(_ input: CreatePreviewSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreatePreviewSignUrlResponse> {
        self.client.execute(action: "CreatePreviewSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 生成预览签署URL
    ///
    /// 此接口（CreatePreviewSignUrl）用于生成生成预览签署URL。
    ///
    /// 注：调用此接口前，请确保您已提前调用了发送流程接口（SendFlow）指定相关签署方。
    @inlinable
    public func createPreviewSignUrl(_ input: CreatePreviewSignUrlRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreatePreviewSignUrlResponse {
        try await self.client.execute(action: "CreatePreviewSignUrl", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 生成预览签署URL
    ///
    /// 此接口（CreatePreviewSignUrl）用于生成生成预览签署URL。
    ///
    /// 注：调用此接口前，请确保您已提前调用了发送流程接口（SendFlow）指定相关签署方。
    @inlinable
    public func createPreviewSignUrl(caller: Caller, deadline: Int64, catalogId: String? = nil, flowId: String? = nil, signUrlType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreatePreviewSignUrlResponse> {
        self.createPreviewSignUrl(.init(caller: caller, deadline: deadline, catalogId: catalogId, flowId: flowId, signUrlType: signUrlType), region: region, logger: logger, on: eventLoop)
    }

    /// 生成预览签署URL
    ///
    /// 此接口（CreatePreviewSignUrl）用于生成生成预览签署URL。
    ///
    /// 注：调用此接口前，请确保您已提前调用了发送流程接口（SendFlow）指定相关签署方。
    @inlinable
    public func createPreviewSignUrl(caller: Caller, deadline: Int64, catalogId: String? = nil, flowId: String? = nil, signUrlType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreatePreviewSignUrlResponse {
        try await self.createPreviewSignUrl(.init(caller: caller, deadline: deadline, catalogId: catalogId, flowId: flowId, signUrlType: signUrlType), region: region, logger: logger, on: eventLoop)
    }
}
