//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Essbasic {
    /// CreateServerFlowSign请求参数结构体
    public struct CreateServerFlowSignRequest: TCRequestModel {
        /// 调用方信息
        public let caller: Caller

        /// 流程ID
        public let flowId: String

        /// 签署区域信息
        public let signComponents: [Component]

        /// 客户端IP
        public let sourceIp: String

        public init(caller: Caller, flowId: String, signComponents: [Component], sourceIp: String) {
            self.caller = caller
            self.flowId = flowId
            self.signComponents = signComponents
            self.sourceIp = sourceIp
        }

        enum CodingKeys: String, CodingKey {
            case caller = "Caller"
            case flowId = "FlowId"
            case signComponents = "SignComponents"
            case sourceIp = "SourceIp"
        }
    }

    /// CreateServerFlowSign返回参数结构体
    public struct CreateServerFlowSignResponse: TCResponseModel {
        /// 任务状态：
        /// 0：失败
        /// 1：成功
        public let signStatus: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case signStatus = "SignStatus"
            case requestId = "RequestId"
        }
    }

    /// 流程静默签署
    ///
    /// 此接口（CreateServerFlowSign）用于静默签署文件。
    ///
    /// 注：
    /// 1、此接口为白名单接口，调用前请提前与客服经理或邮件至e-contract@tencent.com进行联系。
    /// 2、仅合同发起者可使用流程静默签署能力。
    @inlinable
    public func createServerFlowSign(_ input: CreateServerFlowSignRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateServerFlowSignResponse> {
        self.client.execute(action: "CreateServerFlowSign", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 流程静默签署
    ///
    /// 此接口（CreateServerFlowSign）用于静默签署文件。
    ///
    /// 注：
    /// 1、此接口为白名单接口，调用前请提前与客服经理或邮件至e-contract@tencent.com进行联系。
    /// 2、仅合同发起者可使用流程静默签署能力。
    @inlinable
    public func createServerFlowSign(_ input: CreateServerFlowSignRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateServerFlowSignResponse {
        try await self.client.execute(action: "CreateServerFlowSign", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 流程静默签署
    ///
    /// 此接口（CreateServerFlowSign）用于静默签署文件。
    ///
    /// 注：
    /// 1、此接口为白名单接口，调用前请提前与客服经理或邮件至e-contract@tencent.com进行联系。
    /// 2、仅合同发起者可使用流程静默签署能力。
    @inlinable
    public func createServerFlowSign(caller: Caller, flowId: String, signComponents: [Component], sourceIp: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateServerFlowSignResponse> {
        let input = CreateServerFlowSignRequest(caller: caller, flowId: flowId, signComponents: signComponents, sourceIp: sourceIp)
        return self.client.execute(action: "CreateServerFlowSign", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 流程静默签署
    ///
    /// 此接口（CreateServerFlowSign）用于静默签署文件。
    ///
    /// 注：
    /// 1、此接口为白名单接口，调用前请提前与客服经理或邮件至e-contract@tencent.com进行联系。
    /// 2、仅合同发起者可使用流程静默签署能力。
    @inlinable
    public func createServerFlowSign(caller: Caller, flowId: String, signComponents: [Component], sourceIp: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateServerFlowSignResponse {
        let input = CreateServerFlowSignRequest(caller: caller, flowId: flowId, signComponents: signComponents, sourceIp: sourceIp)
        return try await self.client.execute(action: "CreateServerFlowSign", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
