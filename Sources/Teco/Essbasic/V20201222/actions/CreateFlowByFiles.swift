//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Essbasic {
    /// CreateFlowByFiles请求参数结构体
    public struct CreateFlowByFilesRequest: TCRequestModel {
        /// 调用方信息
        public let caller: Caller

        /// 流程创建信息
        public let flowInfo: FlowInfo

        /// 文件资源列表 (支持多文件)
        public let fileIds: [String]

        /// 自定义流程id
        public let customId: String?

        public init(caller: Caller, flowInfo: FlowInfo, fileIds: [String], customId: String? = nil) {
            self.caller = caller
            self.flowInfo = flowInfo
            self.fileIds = fileIds
            self.customId = customId
        }

        enum CodingKeys: String, CodingKey {
            case caller = "Caller"
            case flowInfo = "FlowInfo"
            case fileIds = "FileIds"
            case customId = "CustomId"
        }
    }

    /// CreateFlowByFiles返回参数结构体
    public struct CreateFlowByFilesResponse: TCResponseModel {
        /// 流程ID
        public let flowId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 用PDF文件创建流程
    ///
    /// 此接口（CreateFlowByFiles）用于通过PDF文件创建签署流程。
    ///
    /// 注意：调用此接口前，请先调用多文件上传接口 (UploadFiles)，提前上传合同文件。
    @inlinable
    public func createFlowByFiles(_ input: CreateFlowByFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowByFilesResponse> {
        self.client.execute(action: "CreateFlowByFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 用PDF文件创建流程
    ///
    /// 此接口（CreateFlowByFiles）用于通过PDF文件创建签署流程。
    ///
    /// 注意：调用此接口前，请先调用多文件上传接口 (UploadFiles)，提前上传合同文件。
    @inlinable
    public func createFlowByFiles(_ input: CreateFlowByFilesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowByFilesResponse {
        try await self.client.execute(action: "CreateFlowByFiles", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 用PDF文件创建流程
    ///
    /// 此接口（CreateFlowByFiles）用于通过PDF文件创建签署流程。
    ///
    /// 注意：调用此接口前，请先调用多文件上传接口 (UploadFiles)，提前上传合同文件。
    @inlinable
    public func createFlowByFiles(caller: Caller, flowInfo: FlowInfo, fileIds: [String], customId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFlowByFilesResponse> {
        self.createFlowByFiles(.init(caller: caller, flowInfo: flowInfo, fileIds: fileIds, customId: customId), region: region, logger: logger, on: eventLoop)
    }

    /// 用PDF文件创建流程
    ///
    /// 此接口（CreateFlowByFiles）用于通过PDF文件创建签署流程。
    ///
    /// 注意：调用此接口前，请先调用多文件上传接口 (UploadFiles)，提前上传合同文件。
    @inlinable
    public func createFlowByFiles(caller: Caller, flowInfo: FlowInfo, fileIds: [String], customId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFlowByFilesResponse {
        try await self.createFlowByFiles(.init(caller: caller, flowInfo: flowInfo, fileIds: fileIds, customId: customId), region: region, logger: logger, on: eventLoop)
    }
}
