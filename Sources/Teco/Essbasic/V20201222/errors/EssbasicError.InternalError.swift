//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssbasicError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case api = "InternalError.Api"
            case cache = "InternalError.Cache"
            case callback = "InternalError.Callback"
            case db = "InternalError.Db"
            case decryption = "InternalError.Decryption"
            case encryption = "InternalError.Encryption"
            case generateId = "InternalError.GenerateId"
            case mq = "InternalError.Mq"
            case pdf = "InternalError.Pdf"
            case serialize = "InternalError.Serialize"
            case storage = "InternalError.Storage"
            case thirdParty = "InternalError.ThirdParty"
            case unSerialize = "InternalError.UnSerialize"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 其他API错误。
        public static var api: InternalError {
            InternalError(.api)
        }
        
        /// 缓存错误。
        public static var cache: InternalError {
            InternalError(.cache)
        }
        
        /// 回调错误。
        public static var callback: InternalError {
            InternalError(.callback)
        }
        
        /// 数据库错误。
        public static var db: InternalError {
            InternalError(.db)
        }
        
        /// 解密错误。
        public static var decryption: InternalError {
            InternalError(.decryption)
        }
        
        /// 加密错误。
        public static var encryption: InternalError {
            InternalError(.encryption)
        }
        
        /// 生成唯一ID错误。
        public static var generateId: InternalError {
            InternalError(.generateId)
        }
        
        /// MQ错误。
        public static var mq: InternalError {
            InternalError(.mq)
        }
        
        /// Pdf错误。
        public static var pdf: InternalError {
            InternalError(.pdf)
        }
        
        /// 序列化错误。
        public static var serialize: InternalError {
            InternalError(.serialize)
        }
        
        /// 存储错误。
        public static var storage: InternalError {
            InternalError(.storage)
        }
        
        /// 第三方错误。
        public static var thirdParty: InternalError {
            InternalError(.thirdParty)
        }
        
        /// 反序列化错误。
        public static var unSerialize: InternalError {
            InternalError(.unSerialize)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCEssbasicError.InternalError: Equatable {
    public static func == (lhs: TCEssbasicError.InternalError, rhs: TCEssbasicError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEssbasicError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEssbasicError.InternalError {
    public func toEssbasicError() -> TCEssbasicError {
        guard let code = TCEssbasicError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEssbasicError(code, context: self.context)
    }
}