//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEssbasicError {
    public struct FailedOperation: TCEssbasicErrorType {
        enum Code: String {
            case accountAlreadyExists = "FailedOperation.AccountAlreadyExists"
            case accountVerifyFail = "FailedOperation.AccountVerifyFail"
            case authFail = "FailedOperation.AuthFail"
            case dLockFailed = "FailedOperation.DLockFailed"
            case errBindingRepeated = "FailedOperation.ErrBindingRepeated"
            case generateOrgSeal = "FailedOperation.GenerateOrgSeal"
            case generateUserSeal = "FailedOperation.GenerateUserSeal"
            case noRole = "FailedOperation.NoRole"
            case openIdAlreadyExists = "FailedOperation.OpenIdAlreadyExists"
            case orgIdCardNumberAlreadyExists = "FailedOperation.OrgIdCardNumberAlreadyExists"
            case requestLimitExceeded = "FailedOperation.RequestLimitExceeded"
            case requestLimitExceeded1D = "FailedOperation.RequestLimitExceeded1D"
            case requestLimitExceeded1H = "FailedOperation.RequestLimitExceeded1H"
            case requestLimitExceeded30S = "FailedOperation.RequestLimitExceeded30S"
            case other = "FailedOperation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 帐号已存在并实名。
        ///
        /// 请确定账号是否重复，再重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var accountAlreadyExists: FailedOperation {
            FailedOperation(.accountAlreadyExists)
        }

        /// 实名认证错误。
        ///
        /// 当前用户实名认证失败，优先检查参数及重试。若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var accountVerifyFail: FailedOperation {
            FailedOperation(.accountVerifyFail)
        }

        /// 鉴权失败。
        ///
        /// 请检查参数，确保账号信息正确。再重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var authFail: FailedOperation {
            FailedOperation(.authFail)
        }

        /// 加锁失败。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var dLockFailed: FailedOperation {
            FailedOperation(.dLockFailed)
        }

        /// 已绑定其它手机号码或手机号码已被其它终端(微信)绑定。
        ///
        /// 请检查当前账号是否已绑定手机号或当前手机号是否已经被使用。再重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var errBindingRepeated: FailedOperation {
            FailedOperation(.errBindingRepeated)
        }

        /// 生成企业印章失败。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的RequestId。
        public static var generateOrgSeal: FailedOperation {
            FailedOperation(.generateOrgSeal)
        }

        /// 生成个人印章失败。
        ///
        /// 请检查生成个人印章参数，确保用户，印章信息正确；请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var generateUserSeal: FailedOperation {
            FailedOperation(.generateUserSeal)
        }

        /// 无角色。
        ///
        /// 无相关角色权限，请联系管理员进行授权操作。
        public static var noRole: FailedOperation {
            FailedOperation(.noRole)
        }

        /// 注册的OpenId已存在。
        ///
        /// 当前用户已经存在, 请确认。若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var openIdAlreadyExists: FailedOperation {
            FailedOperation(.openIdAlreadyExists)
        }

        /// 注册的企业证件号码已存在。
        ///
        /// 注册的企业证件号码已存在，请确认后再重试。若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var orgIdCardNumberAlreadyExists: FailedOperation {
            FailedOperation(.orgIdCardNumberAlreadyExists)
        }

        /// 请求的次数超过了频率限制。
        ///
        /// 请求的次数超过了频率限制。请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var requestLimitExceeded: FailedOperation {
            FailedOperation(.requestLimitExceeded)
        }

        /// 今日验证码发送量已超出限制，请联系工作人员处理。
        ///
        /// 今日验证码发送量已超出限制，请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var requestLimitExceeded1D: FailedOperation {
            FailedOperation(.requestLimitExceeded1D)
        }

        /// 本小时验证码发送数量超出限制，请稍后重试。
        ///
        /// 请稍后重试，若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var requestLimitExceeded1H: FailedOperation {
            FailedOperation(.requestLimitExceeded1H)
        }

        /// 短信发送频率超出限制，请等待一分钟后重试。
        ///
        /// 短信发送频率超出限制，请等待一分钟后重试。若仍未解决，请联系工作人员 ，并提供有报错的requestid。
        public static var requestLimitExceeded30S: FailedOperation {
            FailedOperation(.requestLimitExceeded30S)
        }

        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }

        public func asEssbasicError() -> TCEssbasicError {
            let code: TCEssbasicError.Code
            switch self.error {
            case .accountAlreadyExists:
                code = .failedOperation_AccountAlreadyExists
            case .accountVerifyFail:
                code = .failedOperation_AccountVerifyFail
            case .authFail:
                code = .failedOperation_AuthFail
            case .dLockFailed:
                code = .failedOperation_DLockFailed
            case .errBindingRepeated:
                code = .failedOperation_ErrBindingRepeated
            case .generateOrgSeal:
                code = .failedOperation_GenerateOrgSeal
            case .generateUserSeal:
                code = .failedOperation_GenerateUserSeal
            case .noRole:
                code = .failedOperation_NoRole
            case .openIdAlreadyExists:
                code = .failedOperation_OpenIdAlreadyExists
            case .orgIdCardNumberAlreadyExists:
                code = .failedOperation_OrgIdCardNumberAlreadyExists
            case .requestLimitExceeded:
                code = .failedOperation_RequestLimitExceeded
            case .requestLimitExceeded1D:
                code = .failedOperation_RequestLimitExceeded1D
            case .requestLimitExceeded1H:
                code = .failedOperation_RequestLimitExceeded1H
            case .requestLimitExceeded30S:
                code = .failedOperation_RequestLimitExceeded30S
            case .other:
                code = .failedOperation
            }
            return TCEssbasicError(code, context: self.context)
        }
    }
}
