//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Soe {
    /// InitOralProcess请求参数结构体
    public struct InitOralProcessRequest: TCRequestModel {
        /// 语音段唯一标识，一段完整语音使用一个SessionId，不同语音段的评测需要使用不同的SessionId。一般使用uuid(通用唯一识别码)来作为它的值，要尽量保证SessionId的唯一性。
        public let sessionId: String

        /// 被评估语音对应的文本，仅支持中文和英文。
        /// 句子模式下不超过个 30 单词或者中文文字，段落模式不超过 120 单词或者中文文字，中文评估使用 utf-8 编码，自由说模式RefText可以不填。
        /// 关于RefText的文本键入要求，请参考[评测模式介绍](https://cloud.tencent.com/document/product/884/56131)。
        /// 如需要在评测模式下使用自定义注音（支持中英文），可以通过设置「TextMode」参数实现，设置方式请参考[音素标注](https://cloud.tencent.com/document/product/884/33698)。
        public let refText: String

        /// 语音输入模式
        /// 0：流式分片
        /// 1：非流式一次性评估
        /// 推荐使用流式分片传输。
        public let workMode: Int64

        /// 评测模式
        /// 0：单词/单字模式（中文评测模式下为单字模式）
        /// 1：句子模式
        /// 2：段落模式
        /// 3：自由说模式
        /// 4：单词音素纠错模式
        /// 5：情景评测模式
        /// 6：句子多分支评测模式
        /// 7：单词实时评测模式
        /// 8：拼音评测模式
        /// 关于每种评测模式的详细介绍，以及适用场景，请参考[评测模式介绍](https://cloud.tencent.com/document/product/884/56131)。
        public let evalMode: Int64

        /// 评价苛刻指数。取值为[1.0 - 4.0]范围内的浮点数，用于平滑不同年龄段的分数。
        /// 1.0：适用于最小年龄段用户，一般对应儿童应用场景；
        /// 4.0：适用于最高年龄段用户，一般对应成人严格打分场景。苛刻度影响范围参考：[苛刻度影响范围](https://cloud.tencent.com/document/product/884/78824#.E8.8B.9B.E5.88.BB.E5.BA.A6)
        public let scoreCoeff: Float

        /// 业务应用ID，与账号应用APPID无关，是用来方便客户管理服务的参数，新的 SoeAppId 可以在[控制台](https://console.cloud.tencent.com/soe)【应用管理】下新建。如果没有新建SoeAppId，请勿填入该参数，否则会报欠费错误。使用指南：[业务应用](https://cloud.tencent.com/document/product/884/78824#.E4.B8.9A.E5.8A.A1.E5.BA.94.E7.94.A8)
        public let soeAppId: String?

        /// 长效session标识，当该参数为1时，session的持续时间为300s，但会一定程度上影响第一个数据包的返回速度，且TransmitOralProcess必须同时为1才可生效。
        public let isLongLifeSession: Int64?

        /// 音频存储模式，此参数已废弃，无需设置，设置与否都默认为0不存储；
        /// 注：有存储需求的用户建议自行存储至腾讯云COS[对象存储](https://cloud.tencent.com/product/cos)使用。
        public let storageMode: Int64?

        /// 输出断句中间结果标识
        /// 0：不输出
        /// 1：输出，通过设置该参数
        /// 可以在评估过程中的分片传输请求中，返回已经评估断句的中间结果，中间结果可用于客户端 UI 更新，输出结果为TransmitOralProcess请求返回结果 SentenceInfoSet 字段。
        public let sentenceInfoEnabled: Int64?

        /// 评估语言
        /// 0：英文（默认）
        /// 1：中文
        public let serverType: Int64?

        /// 异步模式标识
        /// 0：同步模式
        /// 1：异步模式（一般情况不建议使用异步模式）
        /// 可选值参考[服务模式](https://cloud.tencent.com/document/product/884/33697)。
        public let isAsync: Int64?

        /// 输入文本模式
        /// 0: 普通文本
        /// 1：[音素结构](https://cloud.tencent.com/document/product/884/33698)文本
        public let textMode: Int64?

        /// 主题词和关键词
        public let keyword: String?

        public init(sessionId: String, refText: String, workMode: Int64, evalMode: Int64, scoreCoeff: Float, soeAppId: String? = nil, isLongLifeSession: Int64? = nil, storageMode: Int64? = nil, sentenceInfoEnabled: Int64? = nil, serverType: Int64? = nil, isAsync: Int64? = nil, textMode: Int64? = nil, keyword: String? = nil) {
            self.sessionId = sessionId
            self.refText = refText
            self.workMode = workMode
            self.evalMode = evalMode
            self.scoreCoeff = scoreCoeff
            self.soeAppId = soeAppId
            self.isLongLifeSession = isLongLifeSession
            self.storageMode = storageMode
            self.sentenceInfoEnabled = sentenceInfoEnabled
            self.serverType = serverType
            self.isAsync = isAsync
            self.textMode = textMode
            self.keyword = keyword
        }

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case refText = "RefText"
            case workMode = "WorkMode"
            case evalMode = "EvalMode"
            case scoreCoeff = "ScoreCoeff"
            case soeAppId = "SoeAppId"
            case isLongLifeSession = "IsLongLifeSession"
            case storageMode = "StorageMode"
            case sentenceInfoEnabled = "SentenceInfoEnabled"
            case serverType = "ServerType"
            case isAsync = "IsAsync"
            case textMode = "TextMode"
            case keyword = "Keyword"
        }
    }

    /// InitOralProcess返回参数结构体
    public struct InitOralProcessResponse: TCResponseModel {
        /// 语音段唯一标识，一个完整语音一个SessionId
        public let sessionId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case requestId = "RequestId"
        }
    }

    /// 发音评估初始化
    ///
    /// 初始化发音评估过程，每一轮评估前进行调用。语音输入模式分为流式模式和非流式模式，流式模式支持数据分片传输，可以加快评估响应速度。评估模式分为词模式和句子模式，词模式会标注每个音节的详细信息；句子模式会有完整度和流利度的评估。
    @inlinable
    public func initOralProcess(_ input: InitOralProcessRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InitOralProcessResponse> {
        self.client.execute(action: "InitOralProcess", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 发音评估初始化
    ///
    /// 初始化发音评估过程，每一轮评估前进行调用。语音输入模式分为流式模式和非流式模式，流式模式支持数据分片传输，可以加快评估响应速度。评估模式分为词模式和句子模式，词模式会标注每个音节的详细信息；句子模式会有完整度和流利度的评估。
    @inlinable
    public func initOralProcess(_ input: InitOralProcessRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InitOralProcessResponse {
        try await self.client.execute(action: "InitOralProcess", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 发音评估初始化
    ///
    /// 初始化发音评估过程，每一轮评估前进行调用。语音输入模式分为流式模式和非流式模式，流式模式支持数据分片传输，可以加快评估响应速度。评估模式分为词模式和句子模式，词模式会标注每个音节的详细信息；句子模式会有完整度和流利度的评估。
    @inlinable
    public func initOralProcess(sessionId: String, refText: String, workMode: Int64, evalMode: Int64, scoreCoeff: Float, soeAppId: String? = nil, isLongLifeSession: Int64? = nil, storageMode: Int64? = nil, sentenceInfoEnabled: Int64? = nil, serverType: Int64? = nil, isAsync: Int64? = nil, textMode: Int64? = nil, keyword: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InitOralProcessResponse> {
        self.initOralProcess(InitOralProcessRequest(sessionId: sessionId, refText: refText, workMode: workMode, evalMode: evalMode, scoreCoeff: scoreCoeff, soeAppId: soeAppId, isLongLifeSession: isLongLifeSession, storageMode: storageMode, sentenceInfoEnabled: sentenceInfoEnabled, serverType: serverType, isAsync: isAsync, textMode: textMode, keyword: keyword), logger: logger, on: eventLoop)
    }

    /// 发音评估初始化
    ///
    /// 初始化发音评估过程，每一轮评估前进行调用。语音输入模式分为流式模式和非流式模式，流式模式支持数据分片传输，可以加快评估响应速度。评估模式分为词模式和句子模式，词模式会标注每个音节的详细信息；句子模式会有完整度和流利度的评估。
    @inlinable
    public func initOralProcess(sessionId: String, refText: String, workMode: Int64, evalMode: Int64, scoreCoeff: Float, soeAppId: String? = nil, isLongLifeSession: Int64? = nil, storageMode: Int64? = nil, sentenceInfoEnabled: Int64? = nil, serverType: Int64? = nil, isAsync: Int64? = nil, textMode: Int64? = nil, keyword: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InitOralProcessResponse {
        try await self.initOralProcess(InitOralProcessRequest(sessionId: sessionId, refText: refText, workMode: workMode, evalMode: evalMode, scoreCoeff: scoreCoeff, soeAppId: soeAppId, isLongLifeSession: isLongLifeSession, storageMode: storageMode, sentenceInfoEnabled: sentenceInfoEnabled, serverType: serverType, isAsync: isAsync, textMode: textMode, keyword: keyword), logger: logger, on: eventLoop)
    }
}
