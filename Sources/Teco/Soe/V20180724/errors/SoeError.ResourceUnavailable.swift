//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSoeError {
    public struct ResourceUnavailable: TCErrorType {
        enum Code: String {
            case authorizeError = "ResourceUnavailable.AuthorizeError"
            case cannotFindSession = "ResourceUnavailable.CannotFindSession"
            case concurrencyLimit = "ResourceUnavailable.ConcurrencyLimit"
            case initStreamNotSupport = "ResourceUnavailable.InitStreamNotSupport"
            case initStreamUnfinished = "ResourceUnavailable.InitStreamUnfinished"
            case lastSeqUnfinished = "ResourceUnavailable.LastSeqUnfinished"
            case noConversationFound = "ResourceUnavailable.NoConversationFound"
            case noInitBeforeEvaluation = "ResourceUnavailable.NoInitBeforeEvaluation"
            case other = "ResourceUnavailable"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 服务未开通或已欠费。
        public static var authorizeError: ResourceUnavailable {
            ResourceUnavailable(.authorizeError)
        }
        
        /// 评估之前没有初始化或已过期。
        public static var cannotFindSession: ResourceUnavailable {
            ResourceUnavailable(.cannotFindSession)
        }
        
        /// 使用并发超出限制。
        public static var concurrencyLimit: ResourceUnavailable {
            ResourceUnavailable(.concurrencyLimit)
        }
        
        /// 该接口不支持init_stream。
        public static var initStreamNotSupport: ResourceUnavailable {
            ResourceUnavailable(.initStreamNotSupport)
        }
        
        /// 初始化请求未完成，请稍后重试。
        public static var initStreamUnfinished: ResourceUnavailable {
            ResourceUnavailable(.initStreamUnfinished)
        }
        
        /// 前一个分片未处理完，请稍后重试。
        public static var lastSeqUnfinished: ResourceUnavailable {
            ResourceUnavailable(.lastSeqUnfinished)
        }
        
        /// 使用的会话没有找到或已经被释放。
        public static var noConversationFound: ResourceUnavailable {
            ResourceUnavailable(.noConversationFound)
        }
        
        /// 评估之前没有初始化。
        public static var noInitBeforeEvaluation: ResourceUnavailable {
            ResourceUnavailable(.noInitBeforeEvaluation)
        }
        
        /// 资源不可用。
        public static var other: ResourceUnavailable {
            ResourceUnavailable(.other)
        }
    }
}

extension TCSoeError.ResourceUnavailable: Equatable {
    public static func == (lhs: TCSoeError.ResourceUnavailable, rhs: TCSoeError.ResourceUnavailable) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCSoeError.ResourceUnavailable: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCSoeError.ResourceUnavailable {
    /// - Returns: ``TCSoeError`` that holds the same error and context.
    public func toSoeError() -> TCSoeError {
        guard let code = TCSoeError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCSoeError(code, context: self.context)
    }
}

extension TCSoeError.ResourceUnavailable {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
