//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSoeError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case authorizeError = "InvalidParameter.AuthorizeError"
            case errorPhoneme = "InvalidParameter.ErrorPhoneme"
            case initialParameterError = "InvalidParameter.InitialParameterError"
            case invalidAction = "InvalidParameter.InvalidAction"
            case invalidParameter = "InvalidParameter.InvalidParameter"
            case seqIdLimitExceeded = "InvalidParameter.SeqIdLimitExceeded"
            case voiceMsgOversized = "InvalidParameter.VoiceMsgOversized"
            case withoutRealName = "InvalidParameter.WithoutRealName"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 服务未开通或已欠费。
        public static var authorizeError: InvalidParameter {
            InvalidParameter(.authorizeError)
        }
        
        /// 请求参数RefText的音素Json解码失败，请参考API文档使用标准的Json格式。
        public static var errorPhoneme: InvalidParameter {
            InvalidParameter(.errorPhoneme)
        }
        
        /// 初始化参数错误。
        public static var initialParameterError: InvalidParameter {
            InvalidParameter(.initialParameterError)
        }
        
        /// 请求参数Action不合法，请参考API文档检查参数Action的有效性。
        public static var invalidAction: InvalidParameter {
            InvalidParameter(.invalidAction)
        }
        
        /// 请求参数不合法，请参考API文档检查参数的有效性。
        public static var invalidParameter: InvalidParameter {
            InvalidParameter(.invalidParameter)
        }
        
        /// 请求参数SeqId超过最大值限制，请参考API文档检查参数SeqId是否小于3000。
        public static var seqIdLimitExceeded: InvalidParameter {
            InvalidParameter(.seqIdLimitExceeded)
        }
        
        /// 语音数据大于1MB。
        public static var voiceMsgOversized: InvalidParameter {
            InvalidParameter(.voiceMsgOversized)
        }
        
        /// 用户未实名制认证。
        public static var withoutRealName: InvalidParameter {
            InvalidParameter(.withoutRealName)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
    }
}

extension TCSoeError.InvalidParameter: Equatable {
    public static func == (lhs: TCSoeError.InvalidParameter, rhs: TCSoeError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCSoeError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCSoeError.InvalidParameter {
    public func toSoeError() -> TCSoeError {
        guard let code = TCSoeError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCSoeError(code, context: self.context)
    }
}