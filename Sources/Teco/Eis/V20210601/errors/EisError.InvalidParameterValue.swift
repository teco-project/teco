//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEisError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case invalidRuntimeMetricSearchCondition = "InvalidParameterValue.InvalidRuntimeMetricSearchCondition"
            case notSupportedActionForPublicRuntime = "InvalidParameterValue.NotSupportedActionForPublicRuntime"
            case pilotZoneNotSupported = "InvalidParameterValue.PilotZoneNotSupported"
            case runtimeAlreadyDeleted = "InvalidParameterValue.RuntimeAlreadyDeleted"
            case runtimeIdNotExist = "InvalidParameterValue.RuntimeIdNotExist"
            case runtimeMetricRateNotSupport = "InvalidParameterValue.RuntimeMetricRateNotSupport"
            case runtimeNamespaceInvalid = "InvalidParameterValue.RuntimeNamespaceInvalid"
            case runtimeZoneNotExisted = "InvalidParameterValue.RuntimeZoneNotExisted"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 指标查询参数错误。
        public static var invalidRuntimeMetricSearchCondition: InvalidParameterValue {
            InvalidParameterValue(.invalidRuntimeMetricSearchCondition)
        }
        
        /// 共享运行时不支持此操作。
        public static var notSupportedActionForPublicRuntime: InvalidParameterValue {
            InvalidParameterValue(.notSupportedActionForPublicRuntime)
        }
        
        /// 不支持的Zone。
        public static var pilotZoneNotSupported: InvalidParameterValue {
            InvalidParameterValue(.pilotZoneNotSupported)
        }
        
        /// 运行时已删除。
        public static var runtimeAlreadyDeleted: InvalidParameterValue {
            InvalidParameterValue(.runtimeAlreadyDeleted)
        }
        
        /// 运行时不存在。
        public static var runtimeIdNotExist: InvalidParameterValue {
            InvalidParameterValue(.runtimeIdNotExist)
        }
        
        /// 当前指标不支持查询百分比。
        public static var runtimeMetricRateNotSupport: InvalidParameterValue {
            InvalidParameterValue(.runtimeMetricRateNotSupport)
        }
        
        /// 运行时命名空间不合法。
        public static var runtimeNamespaceInvalid: InvalidParameterValue {
            InvalidParameterValue(.runtimeNamespaceInvalid)
        }
        
        /// 运行时地域不存在。
        public static var runtimeZoneNotExisted: InvalidParameterValue {
            InvalidParameterValue(.runtimeZoneNotExisted)
        }
    }
}

extension TCEisError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCEisError.InvalidParameterValue, rhs: TCEisError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEisError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEisError.InvalidParameterValue {
    /// - Returns: ``TCEisError`` that holds the same error and context.
    public func toEisError() -> TCEisError {
        guard let code = TCEisError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEisError(code, context: self.context)
    }
}

extension TCEisError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
