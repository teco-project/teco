//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEisError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case authenticationFailed = "FailedOperation.AuthenticationFailed"
            case innerLogicTimeOut = "FailedOperation.InnerLogicTimeOut"
            case metaCompilerError = "FailedOperation.MetaCompilerError"
            case unSupportedOperationType = "FailedOperation.UnSupportedOperationType"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 鉴权失败。
        public static var authenticationFailed: FailedOperation {
            FailedOperation(.authenticationFailed)
        }
        
        /// 接口处理超时。
        public static var innerLogicTimeOut: FailedOperation {
            FailedOperation(.innerLogicTimeOut)
        }
        
        /// 依赖服务错误。
        public static var metaCompilerError: FailedOperation {
            FailedOperation(.metaCompilerError)
        }
        
        /// 不支持的操作类型。
        public static var unSupportedOperationType: FailedOperation {
            FailedOperation(.unSupportedOperationType)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCEisError.FailedOperation: Equatable {
    public static func == (lhs: TCEisError.FailedOperation, rhs: TCEisError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEisError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEisError.FailedOperation {
    public func toEisError() -> TCEisError {
        guard let code = TCEisError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEisError(code, context: self.context)
    }
}