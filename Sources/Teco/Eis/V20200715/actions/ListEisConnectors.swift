//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Eis {
    /// ListEisConnectors请求参数结构体
    public struct ListEisConnectorsRequest: TCPaginatedRequest {
        /// 连接器名称,非必输，如输入则按照输入值模糊匹配
        public let connectorName: String?

        /// 分页参数,数据偏移量
        public let offset: Int64?

        /// 分页参数,每页显示的条数
        public let limit: Int64?

        public init(connectorName: String? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.connectorName = connectorName
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case connectorName = "ConnectorName"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: ListEisConnectorsResponse) -> ListEisConnectorsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return ListEisConnectorsRequest(connectorName: self.connectorName, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// ListEisConnectors返回参数结构体
    public struct ListEisConnectorsResponse: TCPaginatedResponse {
        /// 连接器总数
        public let totalCount: Int64

        /// 连接器列表
        public let connectors: [EisConnectorSummary]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case connectors = "Connectors"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [EisConnectorSummary] {
            self.connectors
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 获取连接器列表
    ///
    /// 连接器列表
    @inlinable
    public func listEisConnectors(_ input: ListEisConnectorsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListEisConnectorsResponse> {
        self.client.execute(action: "ListEisConnectors", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取连接器列表
    ///
    /// 连接器列表
    @inlinable
    public func listEisConnectors(_ input: ListEisConnectorsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListEisConnectorsResponse {
        try await self.client.execute(action: "ListEisConnectors", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取连接器列表
    ///
    /// 连接器列表
    @inlinable
    public func listEisConnectors(connectorName: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListEisConnectorsResponse> {
        let input = ListEisConnectorsRequest(connectorName: connectorName, offset: offset, limit: limit)
        return self.client.execute(action: "ListEisConnectors", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取连接器列表
    ///
    /// 连接器列表
    @inlinable
    public func listEisConnectors(connectorName: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListEisConnectorsResponse {
        let input = ListEisConnectorsRequest(connectorName: connectorName, offset: offset, limit: limit)
        return try await self.client.execute(action: "ListEisConnectors", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取连接器列表
    ///
    /// 连接器列表
    @inlinable
    public func listEisConnectorsPaginated(_ input: ListEisConnectorsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [EisConnectorSummary])> {
        self.client.paginate(input: input, region: region, command: self.listEisConnectors, logger: logger, on: eventLoop)
    }

    /// 获取连接器列表
    ///
    /// 连接器列表
    @inlinable @discardableResult
    public func listEisConnectorsPaginated(_ input: ListEisConnectorsRequest, region: TCRegion? = nil, onResponse: @escaping (ListEisConnectorsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listEisConnectors, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取连接器列表
    ///
    /// 连接器列表
    @inlinable
    public func listEisConnectorsPaginator(_ input: ListEisConnectorsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> (results: TCClient.Paginator<ListEisConnectorsRequest, ListEisConnectorsResponse>.ResultSequence, responses: TCClient.Paginator<ListEisConnectorsRequest, ListEisConnectorsResponse>.ResponseSequence) {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listEisConnectors, logger: logger, on: eventLoop)
    }
}
