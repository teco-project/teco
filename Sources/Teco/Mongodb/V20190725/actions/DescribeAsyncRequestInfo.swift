//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mongodb {
    /// DescribeAsyncRequestInfo请求参数结构体
    public struct DescribeAsyncRequestInfoRequest: TCRequestModel {
        /// 异步请求Id，涉及到异步流程的接口返回，如CreateBackupDBInstance
        public let asyncRequestId: String
        
        public init (asyncRequestId: String) {
            self.asyncRequestId = asyncRequestId
        }
        
        enum CodingKeys: String, CodingKey {
            case asyncRequestId = "AsyncRequestId"
        }
    }
    
    /// DescribeAsyncRequestInfo返回参数结构体
    public struct DescribeAsyncRequestInfoResponse: TCResponseModel {
        /// 状态。返回参数有：initial-初始化、running-运行中、paused-任务执行失败，已暂停、undoed-任务执行失败，已回滚、failed-任务执行失败, 已终止、success-成功
        public let status: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }
    
    /// 查询异步任务状态接口
    @inlinable
    public func describeAsyncRequestInfo(_ input: DescribeAsyncRequestInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAsyncRequestInfoResponse > {
        self.client.execute(action: "DescribeAsyncRequestInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询异步任务状态接口
    @inlinable
    public func describeAsyncRequestInfo(_ input: DescribeAsyncRequestInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAsyncRequestInfoResponse {
        try await self.client.execute(action: "DescribeAsyncRequestInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询异步任务状态接口
    @inlinable
    public func describeAsyncRequestInfo(asyncRequestId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeAsyncRequestInfoResponse > {
        self.describeAsyncRequestInfo(DescribeAsyncRequestInfoRequest(asyncRequestId: asyncRequestId), logger: logger, on: eventLoop)
    }
    
    /// 查询异步任务状态接口
    @inlinable
    public func describeAsyncRequestInfo(asyncRequestId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAsyncRequestInfoResponse {
        try await self.describeAsyncRequestInfo(DescribeAsyncRequestInfoRequest(asyncRequestId: asyncRequestId), logger: logger, on: eventLoop)
    }
}
