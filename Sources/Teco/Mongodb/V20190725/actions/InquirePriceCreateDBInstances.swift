//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mongodb {
    /// InquirePriceCreateDBInstances请求参数结构体
    public struct InquirePriceCreateDBInstancesRequest: TCRequestModel {
        /// 实例所属区域及可用区信息。格式：ap-guangzhou-2。
        public let zone: String

        /// 每个分片的主从节点数量。<br>取值范围：请通过接口<a href="https://cloud.tencent.com/document/product/240/38567">DescribeSpecInfo</a>查询，其返回的数据结构SpecItems中的参数MinNodeNum与MaxNodeNum分别对应其最小值与最大值。</li></ul>
        public let nodeNum: Int64

        /// 实例内存大小。<ul><li>单位：GB。</li><li>取值范围：请通过接口<a href="https://cloud.tencent.com/document/product/240/38567">DescribeSpecInfo</a>查询，其返回的数据结构SpecItems中的参数CPU与Memory分别对应CPU核数与内存规格。</li></ul>
        public let memory: Int64

        /// 实例硬盘大小。<ul><li>单位：GB。</li><li>取值范围：请通过接口<a href="https://cloud.tencent.com/document/product/240/38567">DescribeSpecInfo</a>查询，其返回的数据结构SpecItems中的参数MinStorage与MaxStorage分别对应其最小磁盘规格与最大磁盘规格。</br>
        public let volume: Int64

        /// 实例版本信息。<ul><li>具体支持的版本，请通过接口<a href="https://cloud.tencent.com/document/product/240/38567">DescribeSpecInfo</a>查询，其返回的数据结构SpecItems中的参数MongoVersionCode为实例所支持的版本信息。</li><li>版本信息与版本号对应关系如下：<ul><li>MONGO_3_WT：MongoDB 3.2 WiredTiger存储引擎版本。</li><li>MONGO_3_ROCKS：MongoDB 3.2 RocksDB存储引擎版本。</li><li>MONGO_36_WT：MongoDB 3.6 WiredTiger存储引擎版本。</li><li>MONGO_40_WT：MongoDB 4.0 WiredTiger存储引擎版本。</li></ul>
        public let mongoVersion: String

        /// 机器类型。<ul><li>HIO：高IO型。</li><li>HIO10G：高IO万兆型。</li></ul>
        public let machineCode: String

        /// 实例数量，取值范围为[1,10]。
        public let goodsNum: Int64

        /// 实例类型。<ul><li>REPLSET：副本集。</li><li>SHARD：分片集群。</li><li>STANDALONE：单节点。</li></ul>
        public let clusterType: String

        /// 副本集个数。<ul><li>创建副本集实例时，该参数固定设置为1。</li><li>创建分片集群时，指分片数量，请通过接口<a href="https://cloud.tencent.com/document/product/240/38567">DescribeSpecInfo</a>查询，其返回的数据结构SpecItems中的参数MinReplicateSetNum与MaxReplicateSetNum分别对应其最小值与最大值。</li><li>若为单节点实例，该参数固定设置为0。</li></ul>
        public let replicateSetNum: Int64

        /// 选择包年包月计费模式时，您需要设定购买实例的时长。即<b>InstanceChargeType</b>设定为<b>PREPAID</b>时，该参数必须配置。<ul><li>单位：月。</li><li>可选值包括[1,2,3,4,5,6,7,8,9,10,11,12,24,36]。</li></ul>
        public let period: Int64?

        /// 实例付费方式。<ul><li>PREPAID：包年包月计费。</li><li>POSTPAID_BY_HOUR：按量计费。</li></ul>
        public let instanceChargeType: String?

        /// 分片实例询价必填参数，指 Mongos CPU核数，取值范围为[1,16]。
        public let mongosCpu: UInt64?

        /// 分片实例询价必填参数，指 Mongos 内存，取值范围为[2,32]，单位：GB。
        public let mongosMemory: UInt64?

        /// 分片实例询价必填参数，指 Mongos 个数，取值范围为[3,32]。
        public let mongosNum: UInt64?

        /// 分片实例询价必填参数，指 ConfigServer CPU核数，取值为1，单位：GB。
        public let configServerCpu: UInt64?

        /// 分片实例询价必填参数，指 ConfigServer 内存大小，取值为2，单位：GB。
        public let configServerMemory: UInt64?

        /// 分片实例询价必填参数，指 ConfigServer 磁盘大小，取值为 20，单位：GB。
        public let configServerVolume: UInt64?

        public init(zone: String, nodeNum: Int64, memory: Int64, volume: Int64, mongoVersion: String, machineCode: String, goodsNum: Int64, clusterType: String, replicateSetNum: Int64, period: Int64? = nil, instanceChargeType: String? = nil, mongosCpu: UInt64? = nil, mongosMemory: UInt64? = nil, mongosNum: UInt64? = nil, configServerCpu: UInt64? = nil, configServerMemory: UInt64? = nil, configServerVolume: UInt64? = nil) {
            self.zone = zone
            self.nodeNum = nodeNum
            self.memory = memory
            self.volume = volume
            self.mongoVersion = mongoVersion
            self.machineCode = machineCode
            self.goodsNum = goodsNum
            self.clusterType = clusterType
            self.replicateSetNum = replicateSetNum
            self.period = period
            self.instanceChargeType = instanceChargeType
            self.mongosCpu = mongosCpu
            self.mongosMemory = mongosMemory
            self.mongosNum = mongosNum
            self.configServerCpu = configServerCpu
            self.configServerMemory = configServerMemory
            self.configServerVolume = configServerVolume
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case nodeNum = "NodeNum"
            case memory = "Memory"
            case volume = "Volume"
            case mongoVersion = "MongoVersion"
            case machineCode = "MachineCode"
            case goodsNum = "GoodsNum"
            case clusterType = "ClusterType"
            case replicateSetNum = "ReplicateSetNum"
            case period = "Period"
            case instanceChargeType = "InstanceChargeType"
            case mongosCpu = "MongosCpu"
            case mongosMemory = "MongosMemory"
            case mongosNum = "MongosNum"
            case configServerCpu = "ConfigServerCpu"
            case configServerMemory = "ConfigServerMemory"
            case configServerVolume = "ConfigServerVolume"
        }
    }

    /// InquirePriceCreateDBInstances返回参数结构体
    public struct InquirePriceCreateDBInstancesResponse: TCResponseModel {
        /// 价格
        public let price: DBInstancePrice

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case price = "Price"
            case requestId = "RequestId"
        }
    }

    /// 创建实例询价
    ///
    /// 本接口（InquirePriceCreateDBInstances）用于创建数据库实例询价。本接口参数中必须传入region参数，否则无法通过校验。本接口仅允许针对购买限制范围内的实例配置进行询价。
    @inlinable
    public func inquirePriceCreateDBInstances(_ input: InquirePriceCreateDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InquirePriceCreateDBInstancesResponse> {
        self.client.execute(action: "InquirePriceCreateDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建实例询价
    ///
    /// 本接口（InquirePriceCreateDBInstances）用于创建数据库实例询价。本接口参数中必须传入region参数，否则无法通过校验。本接口仅允许针对购买限制范围内的实例配置进行询价。
    @inlinable
    public func inquirePriceCreateDBInstances(_ input: InquirePriceCreateDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InquirePriceCreateDBInstancesResponse {
        try await self.client.execute(action: "InquirePriceCreateDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建实例询价
    ///
    /// 本接口（InquirePriceCreateDBInstances）用于创建数据库实例询价。本接口参数中必须传入region参数，否则无法通过校验。本接口仅允许针对购买限制范围内的实例配置进行询价。
    @inlinable
    public func inquirePriceCreateDBInstances(zone: String, nodeNum: Int64, memory: Int64, volume: Int64, mongoVersion: String, machineCode: String, goodsNum: Int64, clusterType: String, replicateSetNum: Int64, period: Int64? = nil, instanceChargeType: String? = nil, mongosCpu: UInt64? = nil, mongosMemory: UInt64? = nil, mongosNum: UInt64? = nil, configServerCpu: UInt64? = nil, configServerMemory: UInt64? = nil, configServerVolume: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InquirePriceCreateDBInstancesResponse> {
        self.inquirePriceCreateDBInstances(InquirePriceCreateDBInstancesRequest(zone: zone, nodeNum: nodeNum, memory: memory, volume: volume, mongoVersion: mongoVersion, machineCode: machineCode, goodsNum: goodsNum, clusterType: clusterType, replicateSetNum: replicateSetNum, period: period, instanceChargeType: instanceChargeType, mongosCpu: mongosCpu, mongosMemory: mongosMemory, mongosNum: mongosNum, configServerCpu: configServerCpu, configServerMemory: configServerMemory, configServerVolume: configServerVolume), region: region, logger: logger, on: eventLoop)
    }

    /// 创建实例询价
    ///
    /// 本接口（InquirePriceCreateDBInstances）用于创建数据库实例询价。本接口参数中必须传入region参数，否则无法通过校验。本接口仅允许针对购买限制范围内的实例配置进行询价。
    @inlinable
    public func inquirePriceCreateDBInstances(zone: String, nodeNum: Int64, memory: Int64, volume: Int64, mongoVersion: String, machineCode: String, goodsNum: Int64, clusterType: String, replicateSetNum: Int64, period: Int64? = nil, instanceChargeType: String? = nil, mongosCpu: UInt64? = nil, mongosMemory: UInt64? = nil, mongosNum: UInt64? = nil, configServerCpu: UInt64? = nil, configServerMemory: UInt64? = nil, configServerVolume: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> InquirePriceCreateDBInstancesResponse {
        try await self.inquirePriceCreateDBInstances(InquirePriceCreateDBInstancesRequest(zone: zone, nodeNum: nodeNum, memory: memory, volume: volume, mongoVersion: mongoVersion, machineCode: machineCode, goodsNum: goodsNum, clusterType: clusterType, replicateSetNum: replicateSetNum, period: period, instanceChargeType: instanceChargeType, mongosCpu: mongosCpu, mongosMemory: mongosMemory, mongosNum: mongosNum, configServerCpu: configServerCpu, configServerMemory: configServerMemory, configServerVolume: configServerVolume), region: region, logger: logger, on: eventLoop)
    }
}
