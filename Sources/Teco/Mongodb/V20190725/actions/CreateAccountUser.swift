//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mongodb {
    /// CreateAccountUser请求参数结构体
    public struct CreateAccountUserRequest: TCRequestModel {
        /// 实例 ID。例如：cmgo-p8vn****。请登录 [MongoDB 控制台](https://console.cloud.tencent.com/mongodb)在实例列表复制实例 ID。
        public let instanceId: String

        /// 新账号名称。其格式要求如下：
        /// - 字符范围[1,32]。
        /// - 可输入[A,Z]、[a,z]、[1,9]范围的字符以及下划线“_”与短划线“-”。
        public let userName: String

        /// 新账号密码。密码复杂度要求如下：
        /// - 字符长度范围[8,32]。
        /// - 至少包含字母、数字和特殊字符（叹号“!”、at"@"、井号“#”、百分号“%”、插入符“^”、星号“*”、小括号“()”、下划线“_”）中的两种。
        public let password: String

        /// mongouser 账号对应的密码。mongouser 为系统默认账号，即为创建实例时，设置的密码。
        public let mongoUserPassword: String

        /// 账号备注信息。
        public let userDesc: String?

        /// 账号的读写权限信息。
        public let authRole: [Auth]?

        public init(instanceId: String, userName: String, password: String, mongoUserPassword: String, userDesc: String? = nil, authRole: [Auth]? = nil) {
            self.instanceId = instanceId
            self.userName = userName
            self.password = password
            self.mongoUserPassword = mongoUserPassword
            self.userDesc = userDesc
            self.authRole = authRole
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case userName = "UserName"
            case password = "Password"
            case mongoUserPassword = "MongoUserPassword"
            case userDesc = "UserDesc"
            case authRole = "AuthRole"
        }
    }

    /// CreateAccountUser返回参数结构体
    public struct CreateAccountUserResponse: TCResponseModel {
        /// 创建任务ID。
        public let flowId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 创建账号
    ///
    /// 本接口（CreateAccountUser）用于自定义实例访问账号。
    @inlinable
    public func createAccountUser(_ input: CreateAccountUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAccountUserResponse> {
        self.client.execute(action: "CreateAccountUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建账号
    ///
    /// 本接口（CreateAccountUser）用于自定义实例访问账号。
    @inlinable
    public func createAccountUser(_ input: CreateAccountUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAccountUserResponse {
        try await self.client.execute(action: "CreateAccountUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建账号
    ///
    /// 本接口（CreateAccountUser）用于自定义实例访问账号。
    @inlinable
    public func createAccountUser(instanceId: String, userName: String, password: String, mongoUserPassword: String, userDesc: String? = nil, authRole: [Auth]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAccountUserResponse> {
        self.createAccountUser(.init(instanceId: instanceId, userName: userName, password: password, mongoUserPassword: mongoUserPassword, userDesc: userDesc, authRole: authRole), region: region, logger: logger, on: eventLoop)
    }

    /// 创建账号
    ///
    /// 本接口（CreateAccountUser）用于自定义实例访问账号。
    @inlinable
    public func createAccountUser(instanceId: String, userName: String, password: String, mongoUserPassword: String, userDesc: String? = nil, authRole: [Auth]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAccountUserResponse {
        try await self.createAccountUser(.init(instanceId: instanceId, userName: userName, password: password, mongoUserPassword: mongoUserPassword, userDesc: userDesc, authRole: authRole), region: region, logger: logger, on: eventLoop)
    }
}
