//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Mongodb {
    /// DescribeDBInstances请求参数结构体
    public struct DescribeDBInstancesRequest: TCPaginatedRequest {
        /// 实例ID列表。例如：cmgo-p8vn****。请登录 [MongoDB 控制台](https://console.cloud.tencent.com/mongodb)在实例列表复制实例 ID。
        public let instanceIds: [String]?

        /// 实例类型。取值范围如下：<ul><li>0：所有实例。</li><li>1：正式实例。</li><li>2：临时实例。</li><li>3：只读实例。</li><li>-1：正式实例、只读、灾备实例。</li></ul>
        public let instanceType: Int64?

        /// 集群类型，取值范围如下：<ul><li>0：副本集实例。</li><li>1：分片实例。</li><li>-1：所有实例。</li></ul>
        public let clusterType: Int64?

        /// 实例状态，取值范围如下所示：<ul><li>0：待初始化。</li><li>1：流程执行中。</li><li>2：实例有效。</li><li>-2：已隔离（包年包月实例）。</li><li>-3：已隔离（按量计费实例）。</li></ul>
        public let status: [Int64]?

        /// 私有网络的 ID。
        /// - 基础网络则无需配置该参数。
        /// - 请登录 [MongoDB 控制台](https://console.cloud.tencent.com/mongodb)在实例列表中，单击私有网络名称，在**私有网络**页面获取其 ID。
        public let vpcId: String?

        /// 私有网络的子网ID。
        /// - 基础网络则无需配置该参数。
        /// - 请登录 [MongoDB 控制台](https://console.cloud.tencent.com/mongodb)在实例列表中，单击私有网络名称，在**私有网络**页面获取其子网 ID。
        public let subnetId: String?

        /// 付费类型，取值范围如下：<ul><li>0：查询按量计费实例。</li><li>1：查询包年包月实例。</li><li>-1：查询按量计费与包年包月实例。</li></ul>
        public let payMode: Int64?

        /// 单次请求返回的数量。默认值为20，取值范围为[1,100]。
        public let limit: UInt64?

        /// 偏移量，默认值为0。
        public let offset: UInt64?

        /// 配置返回结果排序依据的字段。目前支持依据"ProjectId"、"InstanceName"、"CreateTime"排序。
        public let orderBy: String?

        /// 配置返回结果的排序方式。
        /// - ASC：升序。
        /// - DESC：降序。
        public let orderByType: String?

        /// 项目 ID。请登录 [MongoDB 控制台](https://console.cloud.tencent.com/mongodb)，在右上角的账户信息下拉菜单中，选择项目管理查询项目。
        public let projectIds: [UInt64]?

        /// 配置查询搜索的关键词。支持配置为实例ID、实例名称或者内网 IP 地址。
        public let searchKey: String?

        /// 标签信息，包含标签键与标签值。
        public let tags: [TagInfo]?

        public init(instanceIds: [String]? = nil, instanceType: Int64? = nil, clusterType: Int64? = nil, status: [Int64]? = nil, vpcId: String? = nil, subnetId: String? = nil, payMode: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, orderBy: String? = nil, orderByType: String? = nil, projectIds: [UInt64]? = nil, searchKey: String? = nil, tags: [TagInfo]? = nil) {
            self.instanceIds = instanceIds
            self.instanceType = instanceType
            self.clusterType = clusterType
            self.status = status
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.payMode = payMode
            self.limit = limit
            self.offset = offset
            self.orderBy = orderBy
            self.orderByType = orderByType
            self.projectIds = projectIds
            self.searchKey = searchKey
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case instanceType = "InstanceType"
            case clusterType = "ClusterType"
            case status = "Status"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case payMode = "PayMode"
            case limit = "Limit"
            case offset = "Offset"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
            case projectIds = "ProjectIds"
            case searchKey = "SearchKey"
            case tags = "Tags"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDBInstancesResponse) -> DescribeDBInstancesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeDBInstancesRequest(instanceIds: self.instanceIds, instanceType: self.instanceType, clusterType: self.clusterType, status: self.status, vpcId: self.vpcId, subnetId: self.subnetId, payMode: self.payMode, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), orderBy: self.orderBy, orderByType: self.orderByType, projectIds: self.projectIds, searchKey: self.searchKey, tags: self.tags)
        }
    }

    /// DescribeDBInstances返回参数结构体
    public struct DescribeDBInstancesResponse: TCPaginatedResponse {
        /// 符合查询条件的实例总数。
        public let totalCount: UInt64

        /// 实例详细信息列表。
        public let instanceDetails: [InstanceDetail]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case instanceDetails = "InstanceDetails"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [InstanceDetail] {
            self.instanceDetails
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询云数据库实例列表
    ///
    /// 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
    @inlinable
    public func describeDBInstances(_ input: DescribeDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBInstancesResponse> {
        self.client.execute(action: "DescribeDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云数据库实例列表
    ///
    /// 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
    @inlinable
    public func describeDBInstances(_ input: DescribeDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBInstancesResponse {
        try await self.client.execute(action: "DescribeDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云数据库实例列表
    ///
    /// 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
    @inlinable
    public func describeDBInstances(instanceIds: [String]? = nil, instanceType: Int64? = nil, clusterType: Int64? = nil, status: [Int64]? = nil, vpcId: String? = nil, subnetId: String? = nil, payMode: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, orderBy: String? = nil, orderByType: String? = nil, projectIds: [UInt64]? = nil, searchKey: String? = nil, tags: [TagInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBInstancesResponse> {
        self.describeDBInstances(.init(instanceIds: instanceIds, instanceType: instanceType, clusterType: clusterType, status: status, vpcId: vpcId, subnetId: subnetId, payMode: payMode, limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType, projectIds: projectIds, searchKey: searchKey, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云数据库实例列表
    ///
    /// 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
    @inlinable
    public func describeDBInstances(instanceIds: [String]? = nil, instanceType: Int64? = nil, clusterType: Int64? = nil, status: [Int64]? = nil, vpcId: String? = nil, subnetId: String? = nil, payMode: Int64? = nil, limit: UInt64? = nil, offset: UInt64? = nil, orderBy: String? = nil, orderByType: String? = nil, projectIds: [UInt64]? = nil, searchKey: String? = nil, tags: [TagInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBInstancesResponse {
        try await self.describeDBInstances(.init(instanceIds: instanceIds, instanceType: instanceType, clusterType: clusterType, status: status, vpcId: vpcId, subnetId: subnetId, payMode: payMode, limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType, projectIds: projectIds, searchKey: searchKey, tags: tags), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云数据库实例列表
    ///
    /// 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
    @inlinable
    public func describeDBInstancesPaginated(_ input: DescribeDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [InstanceDetail])> {
        self.client.paginate(input: input, region: region, command: self.describeDBInstances, logger: logger, on: eventLoop)
    }

    /// 查询云数据库实例列表
    ///
    /// 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
    @inlinable @discardableResult
    public func describeDBInstancesPaginated(_ input: DescribeDBInstancesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDBInstancesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDBInstances, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询云数据库实例列表
    ///
    /// 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
    ///
    /// - Returns: `AsyncSequence`s of `InstanceDetail` and `DescribeDBInstancesResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDBInstancesPaginator(_ input: DescribeDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDBInstancesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDBInstances, logger: logger, on: eventLoop)
    }
}
