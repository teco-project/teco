//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mongodb {
    /// DeleteAccountUser请求参数结构体
    public struct DeleteAccountUserRequest: TCRequest {
        /// 指定待删除账号的实例 ID。例如：cmgo-p8vn****。请登录 [MongoDB 控制台](https://console.cloud.tencent.com/mongodb)在实例列表复制实例 ID。
        public let instanceId: String

        /// 配置待删除的账号名。
        public let userName: String

        /// 配置 mongouser 对应的密码。mongouser为系统默认账号，输入其对应的密码。
        public let mongoUserPassword: String

        public init(instanceId: String, userName: String, mongoUserPassword: String) {
            self.instanceId = instanceId
            self.userName = userName
            self.mongoUserPassword = mongoUserPassword
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case userName = "UserName"
            case mongoUserPassword = "MongoUserPassword"
        }
    }

    /// DeleteAccountUser返回参数结构体
    public struct DeleteAccountUserResponse: TCResponse {
        /// 账户删除任务ID。
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 删除账号
    ///
    /// 本接口（DeleteAccountUser）用于删除实例的自定义账号。
    @inlinable
    public func deleteAccountUser(_ input: DeleteAccountUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAccountUserResponse> {
        self.client.execute(action: "DeleteAccountUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除账号
    ///
    /// 本接口（DeleteAccountUser）用于删除实例的自定义账号。
    @inlinable
    public func deleteAccountUser(_ input: DeleteAccountUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAccountUserResponse {
        try await self.client.execute(action: "DeleteAccountUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除账号
    ///
    /// 本接口（DeleteAccountUser）用于删除实例的自定义账号。
    @inlinable
    public func deleteAccountUser(instanceId: String, userName: String, mongoUserPassword: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAccountUserResponse> {
        self.deleteAccountUser(.init(instanceId: instanceId, userName: userName, mongoUserPassword: mongoUserPassword), region: region, logger: logger, on: eventLoop)
    }

    /// 删除账号
    ///
    /// 本接口（DeleteAccountUser）用于删除实例的自定义账号。
    @inlinable
    public func deleteAccountUser(instanceId: String, userName: String, mongoUserPassword: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAccountUserResponse {
        try await self.deleteAccountUser(.init(instanceId: instanceId, userName: userName, mongoUserPassword: mongoUserPassword), region: region, logger: logger, on: eventLoop)
    }
}
