//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Mongodb {
    /// 升级云数据库实例（按量计费）
    ///
    /// 本接口(UpgradeDBInstanceHour)用于升级按量计费的MongoDB云数据库实例，可以扩容内存、存储以及oplog
    @inlinable
    public func upgradeDBInstanceHour(_ input: UpgradeDBInstanceHourRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < UpgradeDBInstanceHourResponse > {
        self.client.execute(action: "UpgradeDBInstanceHour", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 升级云数据库实例（按量计费）
    ///
    /// 本接口(UpgradeDBInstanceHour)用于升级按量计费的MongoDB云数据库实例，可以扩容内存、存储以及oplog
    @inlinable
    public func upgradeDBInstanceHour(_ input: UpgradeDBInstanceHourRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeDBInstanceHourResponse {
        try await self.client.execute(action: "UpgradeDBInstanceHour", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// UpgradeDBInstanceHour请求参数结构体
    public struct UpgradeDBInstanceHourRequest: TCRequestModel {
        /// 实例ID，格式如：cmgo-p8vnipr5
        public let instanceId: String
        
        /// 升级后的内存大小，单位：GB
        public let memory: UInt64
        
        /// 升级后的硬盘大小，单位：GB
        public let volume: UInt64
        
        /// 升级后oplog的大小，单位：GB，默认为磁盘空间的10%，允许设置的最小值为磁盘的10%，最大值为磁盘的90%
        public let oplogSize: UInt64?
        
        public init (instanceId: String, memory: UInt64, volume: UInt64, oplogSize: UInt64?) {
            self.instanceId = instanceId
            self.memory = memory
            self.volume = volume
            self.oplogSize = oplogSize
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case memory = "Memory"
            case volume = "Volume"
            case oplogSize = "OplogSize"
        }
    }
    
    /// UpgradeDBInstanceHour返回参数结构体
    public struct UpgradeDBInstanceHourResponse: TCResponseModel {
        /// 订单ID
        public let dealId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case dealId = "DealId"
            case requestId = "RequestId"
        }
    }
}