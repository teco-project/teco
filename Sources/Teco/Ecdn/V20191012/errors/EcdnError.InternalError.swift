//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCEcdnError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case accountSystemError = "InternalError.AccountSystemError"
            case camSystemError = "InternalError.CamSystemError"
            case dataSystemError = "InternalError.DataSystemError"
            case ecdnConfigError = "InternalError.EcdnConfigError"
            case ecdnDbError = "InternalError.EcdnDbError"
            case ecdnSystemError = "InternalError.EcdnSystemError"
            case error = "InternalError.Error"
            case proxyServer = "InternalError.ProxyServer"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 获取用户信息失败，请联系腾讯云工程师进一步排查。
        public static var accountSystemError: InternalError {
            InternalError(.accountSystemError)
        }
        
        /// CAM鉴权错误，请稍后重试。
        public static var camSystemError: InternalError {
            InternalError(.camSystemError)
        }
        
        /// 数据查询错误，请联系腾讯云工程师进一步排查。
        public static var dataSystemError: InternalError {
            InternalError(.dataSystemError)
        }
        
        /// 内部配置服务错误，请重试或联系客服人员解决。
        public static var ecdnConfigError: InternalError {
            InternalError(.ecdnConfigError)
        }
        
        /// 内部数据错误，请联系腾讯云工程师进一步排查。
        public static var ecdnDbError: InternalError {
            InternalError(.ecdnDbError)
        }
        
        /// 系统错误，请联系腾讯云工程师进一步排查。
        public static var ecdnSystemError: InternalError {
            InternalError(.ecdnSystemError)
        }
        
        /// 内部服务错误，请联系腾讯云工程师进一步排查。
        public static var error: InternalError {
            InternalError(.error)
        }
        
        /// 后端服务错误,请稍后重试 。
        public static var proxyServer: InternalError {
            InternalError(.proxyServer)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCEcdnError.InternalError: Equatable {
    public static func == (lhs: TCEcdnError.InternalError, rhs: TCEcdnError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCEcdnError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCEcdnError.InternalError {
    public func toEcdnError() -> TCEcdnError {
        guard let code = TCEcdnError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCEcdnError(code, context: self.context)
    }
}