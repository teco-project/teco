//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Solar {
    /// 修改项目
    ///
    /// 修改项目
    @inlinable
    public func modifyProject(_ input: ModifyProjectRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyProjectResponse > {
        self.client.execute(action: "ModifyProject", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改项目
    ///
    /// 修改项目
    @inlinable
    public func modifyProject(_ input: ModifyProjectRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProjectResponse {
        try await self.client.execute(action: "ModifyProject", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyProject请求参数结构体
    public struct ModifyProjectRequest: TCRequestModel {
        /// 项目ID
        public let projectId: String
        
        /// 项目名称
        public let projectName: String
        
        /// 项目预算
        public let projectBudget: String
        
        /// 项目机构
        public let projectOrg: String
        
        /// 项目简介
        public let projectIntroduction: String
        
        /// 项目机构Id
        public let projectOrgId: String?
        
        public init (projectId: String, projectName: String, projectBudget: String, projectOrg: String, projectIntroduction: String, projectOrgId: String?) {
            self.projectId = projectId
            self.projectName = projectName
            self.projectBudget = projectBudget
            self.projectOrg = projectOrg
            self.projectIntroduction = projectIntroduction
            self.projectOrgId = projectOrgId
        }
        
        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case projectBudget = "ProjectBudget"
            case projectOrg = "ProjectOrg"
            case projectIntroduction = "ProjectIntroduction"
            case projectOrgId = "ProjectOrgId"
        }
    }
    
    /// ModifyProject返回参数结构体
    public struct ModifyProjectResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
}