//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Solar {
    /// DescribeCustomer请求参数结构体
    public struct DescribeCustomerRequest: TCRequest {
        /// 用户ID
        public let userId: String

        public init(userId: String) {
            self.userId = userId
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
        }
    }

    /// DescribeCustomer返回参数结构体
    public struct DescribeCustomerResponse: TCResponse {
        /// 地址列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let addressList: [String]?

        /// 用户id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        /// 头像
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let avatar: String?

        /// 生日
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let birthday: String?

        /// 城市
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let city: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 设备
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let device: String?

        /// 行业
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let industrys: [String]?

        /// 上次登录时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastActiveTime: String?

        /// 是否星标 1是 0否
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let markFlag: String?

        /// 手机型号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let model: String?

        /// 微信openid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let openId: String?

        /// 消费特点
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payFeature: String?

        /// 手机号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phone: String?

        /// 手机号码列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let phoneList: String?

        /// 最近记录省份
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let province: String?

        /// 姓名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let realName: String?

        /// 员工标识 0：非员工 1：员工
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let relChannelFlag: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remark: String?

        /// 性别 1男 2女
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sex: String?

        /// 最初来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceAudienceVo: String?

        /// 关注公众号列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subWechats: [String]?

        /// 微信unionid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unionId: String?

        /// 更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 用户类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userTypes: [String]?

        /// 城市
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wxCity: String?

        /// 国家
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wxCountry: String?

        /// 昵称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wxNickname: String?

        /// 省份
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wxProvince: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case addressList = "AddressList"
            case userId = "UserId"
            case avatar = "Avatar"
            case birthday = "Birthday"
            case city = "City"
            case createTime = "CreateTime"
            case device = "Device"
            case industrys = "Industrys"
            case lastActiveTime = "LastActiveTime"
            case markFlag = "MarkFlag"
            case model = "Model"
            case openId = "OpenId"
            case payFeature = "PayFeature"
            case phone = "Phone"
            case phoneList = "PhoneList"
            case province = "Province"
            case realName = "RealName"
            case relChannelFlag = "RelChannelFlag"
            case remark = "Remark"
            case sex = "Sex"
            case sourceAudienceVo = "SourceAudienceVo"
            case subWechats = "SubWechats"
            case unionId = "UnionId"
            case updateTime = "UpdateTime"
            case userTypes = "UserTypes"
            case wxCity = "WxCity"
            case wxCountry = "WxCountry"
            case wxNickname = "WxNickname"
            case wxProvince = "WxProvince"
            case requestId = "RequestId"
        }
    }

    /// 客户档案查询客户详情
    @inlinable
    public func describeCustomer(_ input: DescribeCustomerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomerResponse> {
        self.client.execute(action: "DescribeCustomer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 客户档案查询客户详情
    @inlinable
    public func describeCustomer(_ input: DescribeCustomerRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomerResponse {
        try await self.client.execute(action: "DescribeCustomer", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 客户档案查询客户详情
    @inlinable
    public func describeCustomer(userId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCustomerResponse> {
        self.describeCustomer(.init(userId: userId), region: region, logger: logger, on: eventLoop)
    }

    /// 客户档案查询客户详情
    @inlinable
    public func describeCustomer(userId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCustomerResponse {
        try await self.describeCustomer(.init(userId: userId), region: region, logger: logger, on: eventLoop)
    }
}
