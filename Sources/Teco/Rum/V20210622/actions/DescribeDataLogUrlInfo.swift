//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Rum {
    /// DescribeDataLogUrlInfo请求参数结构体
    public struct DescribeDataLogUrlInfoRequest: TCRequestModel {
        /// 项目ID
        public let id: Int64

        /// 时间戳
        public let startTime: Int64

        /// 时间戳
        public let endTime: Int64

        public init(id: Int64, startTime: Int64, endTime: Int64) {
            self.id = id
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeDataLogUrlInfo返回参数结构体
    public struct DescribeDataLogUrlInfoResponse: TCResponseModel {
        /// 返回字符串
        public let result: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 获取dataloginfo信息
    ///
    /// 获取loginfo信息
    @inlinable
    public func describeDataLogUrlInfo(_ input: DescribeDataLogUrlInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDataLogUrlInfoResponse> {
        self.client.execute(action: "DescribeDataLogUrlInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取dataloginfo信息
    ///
    /// 获取loginfo信息
    @inlinable
    public func describeDataLogUrlInfo(_ input: DescribeDataLogUrlInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDataLogUrlInfoResponse {
        try await self.client.execute(action: "DescribeDataLogUrlInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取dataloginfo信息
    ///
    /// 获取loginfo信息
    @inlinable
    public func describeDataLogUrlInfo(id: Int64, startTime: Int64, endTime: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDataLogUrlInfoResponse> {
        self.describeDataLogUrlInfo(DescribeDataLogUrlInfoRequest(id: id, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 获取dataloginfo信息
    ///
    /// 获取loginfo信息
    @inlinable
    public func describeDataLogUrlInfo(id: Int64, startTime: Int64, endTime: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDataLogUrlInfoResponse {
        try await self.describeDataLogUrlInfo(DescribeDataLogUrlInfoRequest(id: id, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
