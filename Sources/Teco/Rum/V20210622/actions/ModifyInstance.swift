//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Rum {
    /// ModifyInstance请求参数结构体
    public struct ModifyInstanceRequest: TCRequestModel {
        /// 要修改的实例id
        public let instanceId: String

        /// 新的实例名称(长度最大不超过255)
        public let instanceName: String?

        /// 新的实例描述(长度最大不超过1024)
        public let instanceDesc: String?

        public init(instanceId: String, instanceName: String? = nil, instanceDesc: String? = nil) {
            self.instanceId = instanceId
            self.instanceName = instanceName
            self.instanceDesc = instanceDesc
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceDesc = "InstanceDesc"
        }
    }

    /// ModifyInstance返回参数结构体
    public struct ModifyInstanceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改 RUM 业务系统
    @inlinable @discardableResult
    public func modifyInstance(_ input: ModifyInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceResponse> {
        self.client.execute(action: "ModifyInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改 RUM 业务系统
    @inlinable @discardableResult
    public func modifyInstance(_ input: ModifyInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceResponse {
        try await self.client.execute(action: "ModifyInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改 RUM 业务系统
    @inlinable @discardableResult
    public func modifyInstance(instanceId: String, instanceName: String? = nil, instanceDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceResponse> {
        let input = ModifyInstanceRequest(instanceId: instanceId, instanceName: instanceName, instanceDesc: instanceDesc)
        return self.client.execute(action: "ModifyInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改 RUM 业务系统
    @inlinable @discardableResult
    public func modifyInstance(instanceId: String, instanceName: String? = nil, instanceDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceResponse {
        let input = ModifyInstanceRequest(instanceId: instanceId, instanceName: instanceName, instanceDesc: instanceDesc)
        return try await self.client.execute(action: "ModifyInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
