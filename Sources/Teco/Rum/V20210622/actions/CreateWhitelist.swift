//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Rum {
    /// CreateWhitelist请求参数结构体
    public struct CreateWhitelistRequest: TCRequestModel {
        /// 实例ID：taw-123
        public let instanceID: String

        /// 备注
        public let remark: String

        /// uin：业务方标识
        public let whitelistUin: String

        /// 业务方标识
        public let aid: String?

        public init(instanceID: String, remark: String, whitelistUin: String, aid: String? = nil) {
            self.instanceID = instanceID
            self.remark = remark
            self.whitelistUin = whitelistUin
            self.aid = aid
        }

        enum CodingKeys: String, CodingKey {
            case instanceID = "InstanceID"
            case remark = "Remark"
            case whitelistUin = "WhitelistUin"
            case aid = "Aid"
        }
    }

    /// CreateWhitelist返回参数结构体
    public struct CreateWhitelistResponse: TCResponseModel {
        /// 消息
        public let msg: String

        /// 白名单ID
        public let id: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case msg = "Msg"
            case id = "ID"
            case requestId = "RequestId"
        }
    }

    /// 创建白名单
    @inlinable
    public func createWhitelist(_ input: CreateWhitelistRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWhitelistResponse> {
        self.client.execute(action: "CreateWhitelist", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建白名单
    @inlinable
    public func createWhitelist(_ input: CreateWhitelistRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWhitelistResponse {
        try await self.client.execute(action: "CreateWhitelist", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建白名单
    @inlinable
    public func createWhitelist(instanceID: String, remark: String, whitelistUin: String, aid: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateWhitelistResponse> {
        self.createWhitelist(.init(instanceID: instanceID, remark: remark, whitelistUin: whitelistUin, aid: aid), region: region, logger: logger, on: eventLoop)
    }

    /// 创建白名单
    @inlinable
    public func createWhitelist(instanceID: String, remark: String, whitelistUin: String, aid: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateWhitelistResponse {
        try await self.createWhitelist(.init(instanceID: instanceID, remark: remark, whitelistUin: whitelistUin, aid: aid), region: region, logger: logger, on: eventLoop)
    }
}
