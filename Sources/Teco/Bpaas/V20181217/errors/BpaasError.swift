//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

/// Service error type returned by `Bpaas`.
public protocol TCBpaasErrorType: TCServiceErrorType {
    /// Get the service error as ``TCBpaasError``.
    ///
    /// - Returns: ``TCBpaasError`` that holds the same error code and context.
    func asBpaasError() -> TCBpaasError
}

public struct TCBpaasError: TCBpaasErrorType {
    enum Code: String {
        case failedOperation = "FailedOperation"
        case failedOperation_SendToCkafka = "FailedOperation.SendToCkafka"
        case internalError_CauthError = "InternalError.CauthError"
        case internalError_DbError = "InternalError.DbError"
        case invalidParameter_HasBeenApproved = "InvalidParameter.HasBeenApproved"
        case invalidParameter_IdNotExist = "InvalidParameter.IdNotExist"
        case invalidParameter_IllegalNode = "InvalidParameter.IllegalNode"
        case unauthorizedOperation_PermissionDenied = "UnauthorizedOperation.PermissionDenied"
    }

    /// Error domains affliated to ``TCBpaasError``.
    public static var domains: [TCErrorType.Type] {
        [FailedOperation.self, InternalError.self, InvalidParameter.self, UnauthorizedOperation.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 操作失败。
    public static var failedOperation: TCBpaasError {
        TCBpaasError(.failedOperation)
    }

    /// 数据上报失败。
    public static var failedOperation_SendToCkafka: TCBpaasError {
        TCBpaasError(.failedOperation_SendToCkafka)
    }

    /// 鉴权失败。
    public static var internalError_CauthError: TCBpaasError {
        TCBpaasError(.internalError_CauthError)
    }

    /// 插入db失败。
    public static var internalError_DbError: TCBpaasError {
        TCBpaasError(.internalError_DbError)
    }

    /// 已经审批。
    public static var invalidParameter_HasBeenApproved: TCBpaasError {
        TCBpaasError(.invalidParameter_HasBeenApproved)
    }

    /// id不存在。
    public static var invalidParameter_IdNotExist: TCBpaasError {
        TCBpaasError(.invalidParameter_IdNotExist)
    }

    /// 非法流程节点。
    public static var invalidParameter_IllegalNode: TCBpaasError {
        TCBpaasError(.invalidParameter_IllegalNode)
    }

    /// 没有权限审批。
    public static var unauthorizedOperation_PermissionDenied: TCBpaasError {
        TCBpaasError(.unauthorizedOperation_PermissionDenied)
    }

    public func asBpaasError() -> TCBpaasError {
        return self
    }
}
