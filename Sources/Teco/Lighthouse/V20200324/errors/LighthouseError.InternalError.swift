//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCLighthouseError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case describeDisksReturnableError = "InternalError.DescribeDisksReturnableError"
            case describeInstanceStatus = "InternalError.DescribeInstanceStatus"
            case describeInstancesModification = "InternalError.DescribeInstancesModification"
            case describeInstancesModificationError = "InternalError.DescribeInstancesModificationError"
            case describeInstancesReturnableError = "InternalError.DescribeInstancesReturnableError"
            case describeInstancesTrafficPackagesFailed = "InternalError.DescribeInstancesTrafficPackagesFailed"
            case describeResourcesReturnableError = "InternalError.DescribeResourcesReturnableError"
            case getSnapshotAllocQuotaLockError = "InternalError.GetSnapshotAllocQuotaLockError"
            case invalidActionNotFound = "InternalError.InvalidActionNotFound"
            case invalidBundlePrice = "InternalError.InvalidBundlePrice"
            case invalidCommandNotFound = "InternalError.InvalidCommandNotFound"
            case requestError = "InternalError.RequestError"
            case tradeCallBillingGatewayFailed = "InternalError.TradeCallBillingGatewayFailed"
            case tradeGetPriceFailed = "InternalError.TradeGetPriceFailed"
            case other = "InternalError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 查询磁盘返回了不合法内容。
        public static var describeDisksReturnableError: InternalError {
            InternalError(.describeDisksReturnableError)
        }
        
        /// 查询实例状态失败，请稍后重试。
        public static var describeInstanceStatus: InternalError {
            InternalError(.describeInstanceStatus)
        }
        
        /// 查询实例是否可变配失败。
        public static var describeInstancesModification: InternalError {
            InternalError(.describeInstancesModification)
        }
        
        /// 查询实例是否可变配失败。
        public static var describeInstancesModificationError: InternalError {
            InternalError(.describeInstancesModificationError)
        }
        
        /// 查询实例是否可退还失败。
        public static var describeInstancesReturnableError: InternalError {
            InternalError(.describeInstancesReturnableError)
        }
        
        /// 查询实例流量包错误。
        public static var describeInstancesTrafficPackagesFailed: InternalError {
            InternalError(.describeInstancesTrafficPackagesFailed)
        }
        
        /// 查询资源返回了不符合要求内容。
        public static var describeResourcesReturnableError: InternalError {
            InternalError(.describeResourcesReturnableError)
        }
        
        /// 快照配额锁获取失败。
        public static var getSnapshotAllocQuotaLockError: InternalError {
            InternalError(.getSnapshotAllocQuotaLockError)
        }
        
        /// 无法找到此接口。
        ///
        /// 请确认接口是否存在。
        public static var invalidActionNotFound: InternalError {
            InternalError(.invalidActionNotFound)
        }
        
        /// 套餐价格错误。
        public static var invalidBundlePrice: InternalError {
            InternalError(.invalidBundlePrice)
        }
        
        /// 命令 <code>DescribeInstanceLoginKeyPair</code> 无法找到。
        public static var invalidCommandNotFound: InternalError {
            InternalError(.invalidCommandNotFound)
        }
        
        /// 请求出现错误。
        public static var requestError: InternalError {
            InternalError(.requestError)
        }
        
        /// 调用计费网关服务失败。
        ///
        /// 请稍后再次重试。
        public static var tradeCallBillingGatewayFailed: InternalError {
            InternalError(.tradeCallBillingGatewayFailed)
        }
        
        /// 价格获取失败。
        public static var tradeGetPriceFailed: InternalError {
            InternalError(.tradeGetPriceFailed)
        }
        
        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCLighthouseError.InternalError: Equatable {
    public static func == (lhs: TCLighthouseError.InternalError, rhs: TCLighthouseError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCLighthouseError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCLighthouseError.InternalError {
    /// - Returns: ``TCLighthouseError`` that holds the same error and context.
    public func toLighthouseError() -> TCLighthouseError {
        guard let code = TCLighthouseError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCLighthouseError(code, context: self.context)
    }
}

extension TCLighthouseError.InternalError {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
