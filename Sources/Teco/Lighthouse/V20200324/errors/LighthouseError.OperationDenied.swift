//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCLighthouseError {
    public struct OperationDenied: TCErrorType {
        enum Code: String {
            case bundleNotSupportModify = "OperationDenied.BundleNotSupportModify"
            case diskCreating = "OperationDenied.DiskCreating"
            case diskOperationInProgress = "OperationDenied.DiskOperationInProgress"
            case diskUsageNotSupportOperation = "OperationDenied.DiskUsageNotSupportOperation"
            case instanceCreating = "OperationDenied.InstanceCreating"
            case instanceOperationInProgress = "OperationDenied.InstanceOperationInProgress"
            case operationDeniedCreateSnapshotForStorageBundle = "OperationDenied.OperationDeniedCreateSnapshotForStorageBundle"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 该实例不支持升级套餐操作。
        public static var bundleNotSupportModify: OperationDenied {
            OperationDenied(.bundleNotSupportModify)
        }
        
        /// 磁盘处于创建过程中。
        public static var diskCreating: OperationDenied {
            OperationDenied(.diskCreating)
        }
        
        /// 磁盘正在操作过程中，请稍后重试。
        public static var diskOperationInProgress: OperationDenied {
            OperationDenied(.diskOperationInProgress)
        }
        
        /// 磁盘的云盘类型不支持该操作。
        public static var diskUsageNotSupportOperation: OperationDenied {
            OperationDenied(.diskUsageNotSupportOperation)
        }
        
        /// 禁止对实例进行操作，实例在创建中，不允许进行该操作。
        public static var instanceCreating: OperationDenied {
            OperationDenied(.instanceCreating)
        }
        
        /// 禁止对实例进行操作，实例最近一次的操作尚在进行中。
        public static var instanceOperationInProgress: OperationDenied {
            OperationDenied(.instanceOperationInProgress)
        }
        
        /// 使用存储型套餐的实例不支持创建快照。
        public static var operationDeniedCreateSnapshotForStorageBundle: OperationDenied {
            OperationDenied(.operationDeniedCreateSnapshotForStorageBundle)
        }
    }
}

extension TCLighthouseError.OperationDenied: Equatable {
    public static func == (lhs: TCLighthouseError.OperationDenied, rhs: TCLighthouseError.OperationDenied) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCLighthouseError.OperationDenied: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCLighthouseError.OperationDenied {
    public func toLighthouseError() -> TCLighthouseError {
        guard let code = TCLighthouseError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCLighthouseError(code, context: self.context)
    }
}