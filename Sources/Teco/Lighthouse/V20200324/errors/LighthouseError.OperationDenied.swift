//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCLighthouseError {
    public struct OperationDenied: TCLighthouseErrorType {
        enum Code: String {
            case bundleNotSupportModify = "OperationDenied.BundleNotSupportModify"
            case diskBackupBusy = "OperationDenied.DiskBackupBusy"
            case diskBackupOperationInProgress = "OperationDenied.DiskBackupOperationInProgress"
            case diskBusyForBackupOperation = "OperationDenied.DiskBusyForBackupOperation"
            case diskCreating = "OperationDenied.DiskCreating"
            case diskOperationInProgress = "OperationDenied.DiskOperationInProgress"
            case diskUsageNotSupportOperation = "OperationDenied.DiskUsageNotSupportOperation"
            case instanceCreating = "OperationDenied.InstanceCreating"
            case instanceOperationInProgress = "OperationDenied.InstanceOperationInProgress"
            case operationDeniedCreateSnapshot = "OperationDenied.OperationDeniedCreateSnapshot"
            case operationDeniedCreateSnapshotForStorageBundle = "OperationDenied.OperationDeniedCreateSnapshotForStorageBundle"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 该实例不支持升级套餐操作。
        ///
        /// 请选择其他套餐完成升级套餐操作
        public static var bundleNotSupportModify: OperationDenied {
            OperationDenied(.bundleNotSupportModify)
        }

        /// 磁盘备份点忙，请稍后重新操作。
        public static var diskBackupBusy: OperationDenied {
            OperationDenied(.diskBackupBusy)
        }

        /// 磁盘备份点正在操作过程中，请稍后重试。
        public static var diskBackupOperationInProgress: OperationDenied {
            OperationDenied(.diskBackupOperationInProgress)
        }

        /// 磁盘正在操作备份点过程中，请稍后重新操作。
        public static var diskBusyForBackupOperation: OperationDenied {
            OperationDenied(.diskBusyForBackupOperation)
        }

        /// 磁盘处于创建过程中。
        public static var diskCreating: OperationDenied {
            OperationDenied(.diskCreating)
        }

        /// 磁盘正在操作过程中，请稍后重试。
        public static var diskOperationInProgress: OperationDenied {
            OperationDenied(.diskOperationInProgress)
        }

        /// 磁盘的云盘类型不支持该操作。
        public static var diskUsageNotSupportOperation: OperationDenied {
            OperationDenied(.diskUsageNotSupportOperation)
        }

        /// 禁止对实例进行操作，实例在创建中，不允许进行该操作。
        public static var instanceCreating: OperationDenied {
            OperationDenied(.instanceCreating)
        }

        /// 禁止对实例进行操作，实例最近一次的操作尚在进行中。
        public static var instanceOperationInProgress: OperationDenied {
            OperationDenied(.instanceOperationInProgress)
        }

        /// 禁止创建快照。
        public static var operationDeniedCreateSnapshot: OperationDenied {
            OperationDenied(.operationDeniedCreateSnapshot)
        }

        /// 使用存储型套餐的实例不支持创建快照。
        public static var operationDeniedCreateSnapshotForStorageBundle: OperationDenied {
            OperationDenied(.operationDeniedCreateSnapshotForStorageBundle)
        }

        public func asLighthouseError() -> TCLighthouseError {
            let code: TCLighthouseError.Code
            switch self.error {
            case .bundleNotSupportModify:
                code = .operationDenied_BundleNotSupportModify
            case .diskBackupBusy:
                code = .operationDenied_DiskBackupBusy
            case .diskBackupOperationInProgress:
                code = .operationDenied_DiskBackupOperationInProgress
            case .diskBusyForBackupOperation:
                code = .operationDenied_DiskBusyForBackupOperation
            case .diskCreating:
                code = .operationDenied_DiskCreating
            case .diskOperationInProgress:
                code = .operationDenied_DiskOperationInProgress
            case .diskUsageNotSupportOperation:
                code = .operationDenied_DiskUsageNotSupportOperation
            case .instanceCreating:
                code = .operationDenied_InstanceCreating
            case .instanceOperationInProgress:
                code = .operationDenied_InstanceOperationInProgress
            case .operationDeniedCreateSnapshot:
                code = .operationDenied_OperationDeniedCreateSnapshot
            case .operationDeniedCreateSnapshotForStorageBundle:
                code = .operationDenied_OperationDeniedCreateSnapshotForStorageBundle
            }
            return TCLighthouseError(code, context: self.context)
        }
    }
}
