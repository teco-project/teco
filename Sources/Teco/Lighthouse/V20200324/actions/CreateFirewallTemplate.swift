//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// CreateFirewallTemplate请求参数结构体
    public struct CreateFirewallTemplateRequest: TCRequest {
        /// 模板名称。
        public let templateName: String

        /// 防火墙规则列表。
        public let templateRules: [FirewallRule]?

        public init(templateName: String, templateRules: [FirewallRule]? = nil) {
            self.templateName = templateName
            self.templateRules = templateRules
        }

        enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case templateRules = "TemplateRules"
        }
    }

    /// CreateFirewallTemplate返回参数结构体
    public struct CreateFirewallTemplateResponse: TCResponse {
        /// 防火墙模板ID。
        public let templateId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case requestId = "RequestId"
        }
    }

    /// 创建防火墙模板
    ///
    /// 本接口 (CreateFirewallTemplate) 用于创建防火墙模板。
    @inlinable
    public func createFirewallTemplate(_ input: CreateFirewallTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFirewallTemplateResponse> {
        self.client.execute(action: "CreateFirewallTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建防火墙模板
    ///
    /// 本接口 (CreateFirewallTemplate) 用于创建防火墙模板。
    @inlinable
    public func createFirewallTemplate(_ input: CreateFirewallTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFirewallTemplateResponse {
        try await self.client.execute(action: "CreateFirewallTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建防火墙模板
    ///
    /// 本接口 (CreateFirewallTemplate) 用于创建防火墙模板。
    @inlinable
    public func createFirewallTemplate(templateName: String, templateRules: [FirewallRule]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFirewallTemplateResponse> {
        self.createFirewallTemplate(.init(templateName: templateName, templateRules: templateRules), region: region, logger: logger, on: eventLoop)
    }

    /// 创建防火墙模板
    ///
    /// 本接口 (CreateFirewallTemplate) 用于创建防火墙模板。
    @inlinable
    public func createFirewallTemplate(templateName: String, templateRules: [FirewallRule]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFirewallTemplateResponse {
        try await self.createFirewallTemplate(.init(templateName: templateName, templateRules: templateRules), region: region, logger: logger, on: eventLoop)
    }
}
