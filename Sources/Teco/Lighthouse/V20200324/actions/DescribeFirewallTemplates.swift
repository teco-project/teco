//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// DescribeFirewallTemplates请求参数结构体
    public struct DescribeFirewallTemplatesRequest: TCPaginatedRequest {
        /// 防火墙模板ID列表。
        public let templateIds: [String]?

        /// 过滤器列表。
        /// - template-id
        /// 按照【防火墙模版所属的ID】进行过滤。
        /// 类型：String
        /// 必选：否
        /// - template-name
        /// 按照【防火墙模版所属的名称】进行过滤。
        /// 类型：String
        /// 必选：否
        /// - template-type
        /// 按照【防火墙模版的类型】进行过滤。
        /// 类型：String
        /// 必选：否
        /// 每次请求的 Filters 的上限为 10，Filter.Values 的上限为 100。参数不支持同时指定 TemplateIds 和 Filters。
        public let filters: [Filter]?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        public init(templateIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.templateIds = templateIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case templateIds = "TemplateIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeFirewallTemplatesResponse) -> DescribeFirewallTemplatesRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), (self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(templateIds: self.templateIds, filters: self.filters, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeFirewallTemplates返回参数结构体
    public struct DescribeFirewallTemplatesResponse: TCPaginatedResponse {
        /// 模板总数量。
        public let totalCount: Int64

        /// 防火墙模板列表。
        public let templateSet: [FirewallTemplate]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case templateSet = "TemplateSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``FirewallTemplate`` list from the paginated response.
        public func getItems() -> [FirewallTemplate] {
            self.templateSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询防火墙模板列表
    ///
    /// 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
    @inlinable
    public func describeFirewallTemplates(_ input: DescribeFirewallTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFirewallTemplatesResponse> {
        self.client.execute(action: "DescribeFirewallTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板列表
    ///
    /// 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
    @inlinable
    public func describeFirewallTemplates(_ input: DescribeFirewallTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFirewallTemplatesResponse {
        try await self.client.execute(action: "DescribeFirewallTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询防火墙模板列表
    ///
    /// 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
    @inlinable
    public func describeFirewallTemplates(templateIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFirewallTemplatesResponse> {
        self.describeFirewallTemplates(.init(templateIds: templateIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板列表
    ///
    /// 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
    @inlinable
    public func describeFirewallTemplates(templateIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFirewallTemplatesResponse {
        try await self.describeFirewallTemplates(.init(templateIds: templateIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板列表
    ///
    /// 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
    @inlinable
    public func describeFirewallTemplatesPaginated(_ input: DescribeFirewallTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [FirewallTemplate])> {
        self.client.paginate(input: input, region: region, command: self.describeFirewallTemplates, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板列表
    ///
    /// 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
    @inlinable @discardableResult
    public func describeFirewallTemplatesPaginated(_ input: DescribeFirewallTemplatesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeFirewallTemplatesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeFirewallTemplates, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板列表
    ///
    /// 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
    ///
    /// - Returns: `AsyncSequence`s of ``FirewallTemplate`` and ``DescribeFirewallTemplatesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeFirewallTemplatesPaginator(_ input: DescribeFirewallTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeFirewallTemplatesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeFirewallTemplates, logger: logger, on: eventLoop)
    }
}
