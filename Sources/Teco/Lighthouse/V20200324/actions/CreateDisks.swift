//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// CreateDisks请求参数结构体
    public struct CreateDisksRequest: TCRequest {
        /// 可用区。可通过[DescribeZones](https://cloud.tencent.com/document/product/1207/57513)返回值中的Zone获取。
        public let zone: String

        /// 云硬盘大小, 单位: GB。
        public let diskSize: Int64

        /// 云硬盘介质类型。取值: "CLOUD_PREMIUM"(高性能云盘), "CLOUD_SSD"(SSD云硬盘)。
        public let diskType: String

        /// 云硬盘包年包月相关参数设置。
        public let diskChargePrepaid: DiskChargePrepaid

        /// 云硬盘名称。最大长度60。
        public let diskName: String?

        /// 云硬盘个数。取值范围: [1, 30]。默认值: 1。
        public let diskCount: Int64?

        /// 指定云硬盘备份点配额，不传时默认为不带备份点配额。目前只支持不带或设置1个云硬盘备份点配额。
        public let diskBackupQuota: Int64?

        /// 是否自动使用代金券。默认不使用。
        public let autoVoucher: Bool?

        /// 自动挂载并初始化数据盘。
        public let autoMountConfiguration: AutoMountConfiguration?

        public init(zone: String, diskSize: Int64, diskType: String, diskChargePrepaid: DiskChargePrepaid, diskName: String? = nil, diskCount: Int64? = nil, diskBackupQuota: Int64? = nil, autoVoucher: Bool? = nil, autoMountConfiguration: AutoMountConfiguration? = nil) {
            self.zone = zone
            self.diskSize = diskSize
            self.diskType = diskType
            self.diskChargePrepaid = diskChargePrepaid
            self.diskName = diskName
            self.diskCount = diskCount
            self.diskBackupQuota = diskBackupQuota
            self.autoVoucher = autoVoucher
            self.autoMountConfiguration = autoMountConfiguration
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case diskSize = "DiskSize"
            case diskType = "DiskType"
            case diskChargePrepaid = "DiskChargePrepaid"
            case diskName = "DiskName"
            case diskCount = "DiskCount"
            case diskBackupQuota = "DiskBackupQuota"
            case autoVoucher = "AutoVoucher"
            case autoMountConfiguration = "AutoMountConfiguration"
        }
    }

    /// CreateDisks返回参数结构体
    public struct CreateDisksResponse: TCResponse {
        /// 当通过本接口来创建云硬盘时会返回该参数，表示一个或多个云硬盘ID。返回云硬盘ID列表并不代表云硬盘创建成功。
        ///
        /// 可根据 [DescribeDisks](https://cloud.tencent.com/document/product/1207/66093) 接口查询返回的DiskSet中对应云硬盘的ID的状态来判断创建是否完成；如果云硬盘状态由“PENDING”变为“UNATTACHED”或“ATTACHED”，则为创建成功。
        public let diskIdSet: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case diskIdSet = "DiskIdSet"
            case requestId = "RequestId"
        }
    }

    /// 创建云硬盘
    ///
    /// 本接口(CreateDisks)用于创建一个或多个云硬盘。
    @inlinable
    public func createDisks(_ input: CreateDisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDisksResponse> {
        self.client.execute(action: "CreateDisks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建云硬盘
    ///
    /// 本接口(CreateDisks)用于创建一个或多个云硬盘。
    @inlinable
    public func createDisks(_ input: CreateDisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDisksResponse {
        try await self.client.execute(action: "CreateDisks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建云硬盘
    ///
    /// 本接口(CreateDisks)用于创建一个或多个云硬盘。
    @inlinable
    public func createDisks(zone: String, diskSize: Int64, diskType: String, diskChargePrepaid: DiskChargePrepaid, diskName: String? = nil, diskCount: Int64? = nil, diskBackupQuota: Int64? = nil, autoVoucher: Bool? = nil, autoMountConfiguration: AutoMountConfiguration? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDisksResponse> {
        self.createDisks(.init(zone: zone, diskSize: diskSize, diskType: diskType, diskChargePrepaid: diskChargePrepaid, diskName: diskName, diskCount: diskCount, diskBackupQuota: diskBackupQuota, autoVoucher: autoVoucher, autoMountConfiguration: autoMountConfiguration), region: region, logger: logger, on: eventLoop)
    }

    /// 创建云硬盘
    ///
    /// 本接口(CreateDisks)用于创建一个或多个云硬盘。
    @inlinable
    public func createDisks(zone: String, diskSize: Int64, diskType: String, diskChargePrepaid: DiskChargePrepaid, diskName: String? = nil, diskCount: Int64? = nil, diskBackupQuota: Int64? = nil, autoVoucher: Bool? = nil, autoMountConfiguration: AutoMountConfiguration? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDisksResponse {
        try await self.createDisks(.init(zone: zone, diskSize: diskSize, diskType: diskType, diskChargePrepaid: diskChargePrepaid, diskName: diskName, diskCount: diskCount, diskBackupQuota: diskBackupQuota, autoVoucher: autoVoucher, autoMountConfiguration: autoMountConfiguration), region: region, logger: logger, on: eventLoop)
    }
}
