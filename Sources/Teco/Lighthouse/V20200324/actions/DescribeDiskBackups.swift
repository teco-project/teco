//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Lighthouse {
    /// DescribeDiskBackups请求参数结构体
    public struct DescribeDiskBackupsRequest: TCPaginatedRequest {
        /// 要查询云硬盘备份点的ID列表。参数不支持同时指定 DiskBackupIds 和 Filters。
        public let diskBackupIds: [String]?

        /// 过滤器列表。
        /// <li>disk-backup-id</li>按照【云硬盘备份点 ID】进行过滤。
        /// 类型：String
        /// 必选：否
        /// <li>disk-id</li>按照【云硬盘 ID】进行过滤。
        /// 类型：String
        /// 必选：否
        /// <li>disk-backup-state</li>按照【云硬盘备份点状态】进行过滤。
        /// 类型：String
        /// 必选：否
        /// 取值：参考数据结构[DiskBackup](https://cloud.tencent.com/document/product/1207/47576#DiskBackup)下的DiskBackupState取值。
        /// <li>disk-usage</li>按照【云硬盘类型】进行过滤。
        /// 类型：String
        /// 必选：否
        /// 取值：SYSTEM_DISK或DATA_DISK
        /// 每次请求的 Filters 的上限为 10，Filter.Values 的上限为5。参数不支持同时指定DiskBackupIds 和 Filters。
        public let filters: [Filter]?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        public init(diskBackupIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.diskBackupIds = diskBackupIds
            self.filters = filters
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case diskBackupIds = "DiskBackupIds"
            case filters = "Filters"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDiskBackupsResponse) -> DescribeDiskBackupsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeDiskBackupsRequest(diskBackupIds: self.diskBackupIds, filters: self.filters, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeDiskBackups返回参数结构体
    public struct DescribeDiskBackupsResponse: TCPaginatedResponse {
        /// 云硬盘备份点的数量。
        public let totalCount: Int64

        /// 云硬盘备份点信息列表。
        public let diskBackupSet: [DiskBackup]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case diskBackupSet = "DiskBackupSet"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [DiskBackup] {
            self.diskBackupSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查看云硬盘备份点列表
    ///
    /// 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
    @inlinable
    public func describeDiskBackups(_ input: DescribeDiskBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDiskBackupsResponse> {
        self.client.execute(action: "DescribeDiskBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看云硬盘备份点列表
    ///
    /// 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
    @inlinable
    public func describeDiskBackups(_ input: DescribeDiskBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDiskBackupsResponse {
        try await self.client.execute(action: "DescribeDiskBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看云硬盘备份点列表
    ///
    /// 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
    @inlinable
    public func describeDiskBackups(diskBackupIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDiskBackupsResponse> {
        self.describeDiskBackups(.init(diskBackupIds: diskBackupIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查看云硬盘备份点列表
    ///
    /// 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
    @inlinable
    public func describeDiskBackups(diskBackupIds: [String]? = nil, filters: [Filter]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDiskBackupsResponse {
        try await self.describeDiskBackups(.init(diskBackupIds: diskBackupIds, filters: filters, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查看云硬盘备份点列表
    ///
    /// 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
    @inlinable
    public func describeDiskBackupsPaginated(_ input: DescribeDiskBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [DiskBackup])> {
        self.client.paginate(input: input, region: region, command: self.describeDiskBackups, logger: logger, on: eventLoop)
    }

    /// 查看云硬盘备份点列表
    ///
    /// 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
    @inlinable @discardableResult
    public func describeDiskBackupsPaginated(_ input: DescribeDiskBackupsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDiskBackupsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDiskBackups, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查看云硬盘备份点列表
    ///
    /// 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
    ///
    /// - Returns: `AsyncSequence`s of `DiskBackup` and `DescribeDiskBackupsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDiskBackupsPaginator(_ input: DescribeDiskBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDiskBackupsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDiskBackups, logger: logger, on: eventLoop)
    }
}
