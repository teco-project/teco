//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// DescribeFirewallTemplateRules请求参数结构体
    public struct DescribeFirewallTemplateRulesRequest: TCPaginatedRequest {
        /// 防火墙模板ID。
        public let templateId: String

        /// 防火墙模板规则ID列表。
        public let templateRuleIds: [String]?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        public init(templateId: String, templateRuleIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.templateId = templateId
            self.templateRuleIds = templateRuleIds
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateRuleIds = "TemplateRuleIds"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeFirewallTemplateRulesResponse) -> DescribeFirewallTemplateRulesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(templateId: self.templateId, templateRuleIds: self.templateRuleIds, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeFirewallTemplateRules返回参数结构体
    public struct DescribeFirewallTemplateRulesResponse: TCPaginatedResponse {
        /// 防火墙模板规则总数量。
        public let totalCount: Int64

        /// 防火墙模板规则信息列表。
        public let templateRuleSet: [FirewallTemplateRuleInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case templateRuleSet = "TemplateRuleSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``FirewallTemplateRuleInfo`` list from the paginated response.
        public func getItems() -> [FirewallTemplateRuleInfo] {
            self.templateRuleSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询防火墙模板规则列表
    ///
    /// 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
    @inlinable
    public func describeFirewallTemplateRules(_ input: DescribeFirewallTemplateRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFirewallTemplateRulesResponse> {
        self.client.execute(action: "DescribeFirewallTemplateRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板规则列表
    ///
    /// 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
    @inlinable
    public func describeFirewallTemplateRules(_ input: DescribeFirewallTemplateRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFirewallTemplateRulesResponse {
        try await self.client.execute(action: "DescribeFirewallTemplateRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询防火墙模板规则列表
    ///
    /// 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
    @inlinable
    public func describeFirewallTemplateRules(templateId: String, templateRuleIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFirewallTemplateRulesResponse> {
        self.describeFirewallTemplateRules(.init(templateId: templateId, templateRuleIds: templateRuleIds, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板规则列表
    ///
    /// 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
    @inlinable
    public func describeFirewallTemplateRules(templateId: String, templateRuleIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFirewallTemplateRulesResponse {
        try await self.describeFirewallTemplateRules(.init(templateId: templateId, templateRuleIds: templateRuleIds, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板规则列表
    ///
    /// 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
    @inlinable
    public func describeFirewallTemplateRulesPaginated(_ input: DescribeFirewallTemplateRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [FirewallTemplateRuleInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeFirewallTemplateRules, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板规则列表
    ///
    /// 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
    @inlinable @discardableResult
    public func describeFirewallTemplateRulesPaginated(_ input: DescribeFirewallTemplateRulesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeFirewallTemplateRulesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeFirewallTemplateRules, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询防火墙模板规则列表
    ///
    /// 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
    ///
    /// - Returns: `AsyncSequence`s of ``FirewallTemplateRuleInfo`` and ``DescribeFirewallTemplateRulesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeFirewallTemplateRulesPaginator(_ input: DescribeFirewallTemplateRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeFirewallTemplateRulesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeFirewallTemplateRules, logger: logger, on: eventLoop)
    }
}
