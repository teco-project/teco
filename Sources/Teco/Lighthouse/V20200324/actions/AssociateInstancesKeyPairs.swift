//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// AssociateInstancesKeyPairs请求参数结构体
    public struct AssociateInstancesKeyPairsRequest: TCRequestModel {
        /// 密钥对 ID 列表。每次请求批量密钥对的上限为 100。
        public let keyIds: [String]

        /// 实例 ID 列表。每次请求批量实例的上限为 100。可通过[DescribeInstances](https://cloud.tencent.com/document/api/1207/47573)接口返回值中的InstanceId获取。
        public let instanceIds: [String]

        public init(keyIds: [String], instanceIds: [String]) {
            self.keyIds = keyIds
            self.instanceIds = instanceIds
        }

        enum CodingKeys: String, CodingKey {
            case keyIds = "KeyIds"
            case instanceIds = "InstanceIds"
        }
    }

    /// AssociateInstancesKeyPairs返回参数结构体
    public struct AssociateInstancesKeyPairsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 绑定密钥对
    ///
    /// 本接口（AssociateInstancesKeyPairs）用于绑定用户指定密钥对到实例。
    /// * 只支持 [RUNNING, STOPPED] 状态的 LINUX_UNIX 操作系统的实例。处于 RUNNING 状态的实例会强制关机，然后绑定。
    /// * 将密钥的公钥写入到实例的 SSH 配置当中，用户就可以通过该密钥的私钥来登录实例。
    /// * 如果实例原来绑定过密钥，那么原来的密钥将失效。
    /// * 如果实例原来是通过密码登录，绑定密钥后无法使用密码登录。
    /// * 支持批量操作。每次请求批量实例的上限为 100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func associateInstancesKeyPairs(_ input: AssociateInstancesKeyPairsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssociateInstancesKeyPairsResponse> {
        self.client.execute(action: "AssociateInstancesKeyPairs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定密钥对
    ///
    /// 本接口（AssociateInstancesKeyPairs）用于绑定用户指定密钥对到实例。
    /// * 只支持 [RUNNING, STOPPED] 状态的 LINUX_UNIX 操作系统的实例。处于 RUNNING 状态的实例会强制关机，然后绑定。
    /// * 将密钥的公钥写入到实例的 SSH 配置当中，用户就可以通过该密钥的私钥来登录实例。
    /// * 如果实例原来绑定过密钥，那么原来的密钥将失效。
    /// * 如果实例原来是通过密码登录，绑定密钥后无法使用密码登录。
    /// * 支持批量操作。每次请求批量实例的上限为 100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func associateInstancesKeyPairs(_ input: AssociateInstancesKeyPairsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssociateInstancesKeyPairsResponse {
        try await self.client.execute(action: "AssociateInstancesKeyPairs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 绑定密钥对
    ///
    /// 本接口（AssociateInstancesKeyPairs）用于绑定用户指定密钥对到实例。
    /// * 只支持 [RUNNING, STOPPED] 状态的 LINUX_UNIX 操作系统的实例。处于 RUNNING 状态的实例会强制关机，然后绑定。
    /// * 将密钥的公钥写入到实例的 SSH 配置当中，用户就可以通过该密钥的私钥来登录实例。
    /// * 如果实例原来绑定过密钥，那么原来的密钥将失效。
    /// * 如果实例原来是通过密码登录，绑定密钥后无法使用密码登录。
    /// * 支持批量操作。每次请求批量实例的上限为 100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func associateInstancesKeyPairs(keyIds: [String], instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AssociateInstancesKeyPairsResponse> {
        self.associateInstancesKeyPairs(.init(keyIds: keyIds, instanceIds: instanceIds), region: region, logger: logger, on: eventLoop)
    }

    /// 绑定密钥对
    ///
    /// 本接口（AssociateInstancesKeyPairs）用于绑定用户指定密钥对到实例。
    /// * 只支持 [RUNNING, STOPPED] 状态的 LINUX_UNIX 操作系统的实例。处于 RUNNING 状态的实例会强制关机，然后绑定。
    /// * 将密钥的公钥写入到实例的 SSH 配置当中，用户就可以通过该密钥的私钥来登录实例。
    /// * 如果实例原来绑定过密钥，那么原来的密钥将失效。
    /// * 如果实例原来是通过密码登录，绑定密钥后无法使用密码登录。
    /// * 支持批量操作。每次请求批量实例的上限为 100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func associateInstancesKeyPairs(keyIds: [String], instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AssociateInstancesKeyPairsResponse {
        try await self.associateInstancesKeyPairs(.init(keyIds: keyIds, instanceIds: instanceIds), region: region, logger: logger, on: eventLoop)
    }
}
