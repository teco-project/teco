//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Lighthouse {
    /// IsolateInstances请求参数结构体
    public struct IsolateInstancesRequest: TCRequestModel {
        /// 实例ID列表。一个或多个待操作的实例ID。可通过[DescribeInstances](https://cloud.tencent.com/document/api/1207/47573)接口返回值中的InstanceId获取。每次请求退还实例和数据盘数量总计上限为20。
        public let instanceIds: [String]

        /// 是否退还挂载的数据盘。取值范围：
        /// TRUE：表示退还实例同时退还其挂载的数据盘。
        /// FALSE：表示退还实例同时不再退还其挂载的数据盘。
        /// 默认取值：TRUE。
        public let isolateDataDisk: Bool?

        public init(instanceIds: [String], isolateDataDisk: Bool? = nil) {
            self.instanceIds = instanceIds
            self.isolateDataDisk = isolateDataDisk
        }

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case isolateDataDisk = "IsolateDataDisk"
        }
    }

    /// IsolateInstances返回参数结构体
    public struct IsolateInstancesResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 隔离实例
    ///
    /// 本接口(IsolateInstances)用于退还一个或多个轻量应用服务器实例。
    /// * 只有状态为 RUNNING 或 STOPPED 的实例才可以进行此操作。
    /// * 接口调用成功后，实例会进入SHUTDOWN 状态。
    /// * 支持批量操作。每次请求批量资源（包括实例与数据盘）的上限为 20。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateInstances(_ input: IsolateInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<IsolateInstancesResponse> {
        self.client.execute(action: "IsolateInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 隔离实例
    ///
    /// 本接口(IsolateInstances)用于退还一个或多个轻量应用服务器实例。
    /// * 只有状态为 RUNNING 或 STOPPED 的实例才可以进行此操作。
    /// * 接口调用成功后，实例会进入SHUTDOWN 状态。
    /// * 支持批量操作。每次请求批量资源（包括实例与数据盘）的上限为 20。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateInstances(_ input: IsolateInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> IsolateInstancesResponse {
        try await self.client.execute(action: "IsolateInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 隔离实例
    ///
    /// 本接口(IsolateInstances)用于退还一个或多个轻量应用服务器实例。
    /// * 只有状态为 RUNNING 或 STOPPED 的实例才可以进行此操作。
    /// * 接口调用成功后，实例会进入SHUTDOWN 状态。
    /// * 支持批量操作。每次请求批量资源（包括实例与数据盘）的上限为 20。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateInstances(instanceIds: [String], isolateDataDisk: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<IsolateInstancesResponse> {
        self.isolateInstances(.init(instanceIds: instanceIds, isolateDataDisk: isolateDataDisk), region: region, logger: logger, on: eventLoop)
    }

    /// 隔离实例
    ///
    /// 本接口(IsolateInstances)用于退还一个或多个轻量应用服务器实例。
    /// * 只有状态为 RUNNING 或 STOPPED 的实例才可以进行此操作。
    /// * 接口调用成功后，实例会进入SHUTDOWN 状态。
    /// * 支持批量操作。每次请求批量资源（包括实例与数据盘）的上限为 20。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateInstances(instanceIds: [String], isolateDataDisk: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> IsolateInstancesResponse {
        try await self.isolateInstances(.init(instanceIds: instanceIds, isolateDataDisk: isolateDataDisk), region: region, logger: logger, on: eventLoop)
    }
}
