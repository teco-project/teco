//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Lighthouse {
    /// DescribeFirewallRulesTemplate请求参数结构体
    public struct DescribeFirewallRulesTemplateRequest: TCRequestModel {
        public init () {
        }
    }
    
    /// DescribeFirewallRulesTemplate返回参数结构体
    public struct DescribeFirewallRulesTemplateResponse: TCResponseModel {
        /// 符合条件的防火墙规则数量。
        public let totalCount: Int64
        
        /// 防火墙规则详细信息列表。
        public let firewallRuleSet: [FirewallRuleInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case firewallRuleSet = "FirewallRuleSet"
            case requestId = "RequestId"
        }
    }
    
    /// 查询防火墙规则模板
    ///
    /// 本接口（DescribeFirewallRulesTemplate）用于查询防火墙规则模板。
    @inlinable
    public func describeFirewallRulesTemplate(_ input: DescribeFirewallRulesTemplateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeFirewallRulesTemplateResponse > {
        self.client.execute(action: "DescribeFirewallRulesTemplate", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询防火墙规则模板
    ///
    /// 本接口（DescribeFirewallRulesTemplate）用于查询防火墙规则模板。
    @inlinable
    public func describeFirewallRulesTemplate(_ input: DescribeFirewallRulesTemplateRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFirewallRulesTemplateResponse {
        try await self.client.execute(action: "DescribeFirewallRulesTemplate", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询防火墙规则模板
    ///
    /// 本接口（DescribeFirewallRulesTemplate）用于查询防火墙规则模板。
    @inlinable
    public func describeFirewallRulesTemplate(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeFirewallRulesTemplateResponse > {
        self.describeFirewallRulesTemplate(DescribeFirewallRulesTemplateRequest(), logger: logger, on: eventLoop)
    }
    
    /// 查询防火墙规则模板
    ///
    /// 本接口（DescribeFirewallRulesTemplate）用于查询防火墙规则模板。
    @inlinable
    public func describeFirewallRulesTemplate(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFirewallRulesTemplateResponse {
        try await self.describeFirewallRulesTemplate(DescribeFirewallRulesTemplateRequest(), logger: logger, on: eventLoop)
    }
}
