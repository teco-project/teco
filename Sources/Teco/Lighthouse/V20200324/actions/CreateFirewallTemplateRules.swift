//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// CreateFirewallTemplateRules请求参数结构体
    public struct CreateFirewallTemplateRulesRequest: TCRequest {
        /// 防火墙模板ID。
        public let templateId: String

        /// 防火墙模板规则列表。
        public let templateRules: [FirewallRule]

        public init(templateId: String, templateRules: [FirewallRule]) {
            self.templateId = templateId
            self.templateRules = templateRules
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateRules = "TemplateRules"
        }
    }

    /// CreateFirewallTemplateRules返回参数结构体
    public struct CreateFirewallTemplateRulesResponse: TCResponse {
        /// 规则ID列表。
        public let templateRuleIdSet: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateRuleIdSet = "TemplateRuleIdSet"
            case requestId = "RequestId"
        }
    }

    /// 创建防火墙模板规则
    ///
    /// 本接口 (CreateFirewallTemplateRules) 用于创建防火墙模板规则。
    @inlinable
    public func createFirewallTemplateRules(_ input: CreateFirewallTemplateRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFirewallTemplateRulesResponse> {
        self.client.execute(action: "CreateFirewallTemplateRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建防火墙模板规则
    ///
    /// 本接口 (CreateFirewallTemplateRules) 用于创建防火墙模板规则。
    @inlinable
    public func createFirewallTemplateRules(_ input: CreateFirewallTemplateRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFirewallTemplateRulesResponse {
        try await self.client.execute(action: "CreateFirewallTemplateRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建防火墙模板规则
    ///
    /// 本接口 (CreateFirewallTemplateRules) 用于创建防火墙模板规则。
    @inlinable
    public func createFirewallTemplateRules(templateId: String, templateRules: [FirewallRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFirewallTemplateRulesResponse> {
        self.createFirewallTemplateRules(.init(templateId: templateId, templateRules: templateRules), region: region, logger: logger, on: eventLoop)
    }

    /// 创建防火墙模板规则
    ///
    /// 本接口 (CreateFirewallTemplateRules) 用于创建防火墙模板规则。
    @inlinable
    public func createFirewallTemplateRules(templateId: String, templateRules: [FirewallRule], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFirewallTemplateRulesResponse {
        try await self.createFirewallTemplateRules(.init(templateId: templateId, templateRules: templateRules), region: region, logger: logger, on: eventLoop)
    }
}
