//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// ReplaceFirewallTemplateRule请求参数结构体
    public struct ReplaceFirewallTemplateRuleRequest: TCRequest {
        /// 防火墙模板ID。
        public let templateId: String

        /// 防火墙模板规则ID。
        public let templateRuleId: String

        /// 替换后的防火墙模板规则。
        public let templateRule: FirewallRule

        public init(templateId: String, templateRuleId: String, templateRule: FirewallRule) {
            self.templateId = templateId
            self.templateRuleId = templateRuleId
            self.templateRule = templateRule
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateRuleId = "TemplateRuleId"
            case templateRule = "TemplateRule"
        }
    }

    /// ReplaceFirewallTemplateRule返回参数结构体
    public struct ReplaceFirewallTemplateRuleResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 替换防火墙模板规则
    ///
    /// 本接口 (ReplaceFirewallTemplateRules) 用于替换防火墙模板规则。
    @inlinable @discardableResult
    public func replaceFirewallTemplateRule(_ input: ReplaceFirewallTemplateRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReplaceFirewallTemplateRuleResponse> {
        self.client.execute(action: "ReplaceFirewallTemplateRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 替换防火墙模板规则
    ///
    /// 本接口 (ReplaceFirewallTemplateRules) 用于替换防火墙模板规则。
    @inlinable @discardableResult
    public func replaceFirewallTemplateRule(_ input: ReplaceFirewallTemplateRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReplaceFirewallTemplateRuleResponse {
        try await self.client.execute(action: "ReplaceFirewallTemplateRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 替换防火墙模板规则
    ///
    /// 本接口 (ReplaceFirewallTemplateRules) 用于替换防火墙模板规则。
    @inlinable @discardableResult
    public func replaceFirewallTemplateRule(templateId: String, templateRuleId: String, templateRule: FirewallRule, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ReplaceFirewallTemplateRuleResponse> {
        self.replaceFirewallTemplateRule(.init(templateId: templateId, templateRuleId: templateRuleId, templateRule: templateRule), region: region, logger: logger, on: eventLoop)
    }

    /// 替换防火墙模板规则
    ///
    /// 本接口 (ReplaceFirewallTemplateRules) 用于替换防火墙模板规则。
    @inlinable @discardableResult
    public func replaceFirewallTemplateRule(templateId: String, templateRuleId: String, templateRule: FirewallRule, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ReplaceFirewallTemplateRuleResponse {
        try await self.replaceFirewallTemplateRule(.init(templateId: templateId, templateRuleId: templateRuleId, templateRule: templateRule), region: region, logger: logger, on: eventLoop)
    }
}
