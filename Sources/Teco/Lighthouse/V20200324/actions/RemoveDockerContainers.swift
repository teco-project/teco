//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// RemoveDockerContainers请求参数结构体
    public struct RemoveDockerContainersRequest: TCRequest {
        /// 实例ID。
        public let instanceId: String

        /// 容器ID列表。
        public let containerIds: [String]

        public init(instanceId: String, containerIds: [String]) {
            self.instanceId = instanceId
            self.containerIds = containerIds
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case containerIds = "ContainerIds"
        }
    }

    /// RemoveDockerContainers返回参数结构体
    public struct RemoveDockerContainersResponse: TCResponse {
        /// Docker活动ID。
        public let dockerActivityId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dockerActivityId = "DockerActivityId"
            case requestId = "RequestId"
        }
    }

    /// 删除Docker容器
    ///
    /// 删除实例内的Docker容器，之后可以通过返回的ActivityId调用DescribeDockerActivities接口查询删除情况。
    @inlinable
    public func removeDockerContainers(_ input: RemoveDockerContainersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveDockerContainersResponse> {
        self.client.execute(action: "RemoveDockerContainers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除Docker容器
    ///
    /// 删除实例内的Docker容器，之后可以通过返回的ActivityId调用DescribeDockerActivities接口查询删除情况。
    @inlinable
    public func removeDockerContainers(_ input: RemoveDockerContainersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveDockerContainersResponse {
        try await self.client.execute(action: "RemoveDockerContainers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除Docker容器
    ///
    /// 删除实例内的Docker容器，之后可以通过返回的ActivityId调用DescribeDockerActivities接口查询删除情况。
    @inlinable
    public func removeDockerContainers(instanceId: String, containerIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveDockerContainersResponse> {
        self.removeDockerContainers(.init(instanceId: instanceId, containerIds: containerIds), region: region, logger: logger, on: eventLoop)
    }

    /// 删除Docker容器
    ///
    /// 删除实例内的Docker容器，之后可以通过返回的ActivityId调用DescribeDockerActivities接口查询删除情况。
    @inlinable
    public func removeDockerContainers(instanceId: String, containerIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveDockerContainersResponse {
        try await self.removeDockerContainers(.init(instanceId: instanceId, containerIds: containerIds), region: region, logger: logger, on: eventLoop)
    }
}
