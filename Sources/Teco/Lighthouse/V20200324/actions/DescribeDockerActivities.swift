//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Lighthouse {
    /// DescribeDockerActivities请求参数结构体
    public struct DescribeDockerActivitiesRequest: TCPaginatedRequest {
        /// 实例ID。
        public let instanceId: String

        /// Docker活动ID列表。
        public let activityIds: [String]?

        /// 偏移量，默认为 0。
        public let offset: Int64?

        /// 返回数量，默认为 20，最大值为 100。
        public let limit: Int64?

        /// 活动创建时间的起始值，时间戳秒数。
        public let createdTimeBegin: Int64?

        /// 活动创建时间的结束值，时间戳秒数。
        public let createdTimeEnd: Int64?

        public init(instanceId: String, activityIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil, createdTimeBegin: Int64? = nil, createdTimeEnd: Int64? = nil) {
            self.instanceId = instanceId
            self.activityIds = activityIds
            self.offset = offset
            self.limit = limit
            self.createdTimeBegin = createdTimeBegin
            self.createdTimeEnd = createdTimeEnd
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case activityIds = "ActivityIds"
            case offset = "Offset"
            case limit = "Limit"
            case createdTimeBegin = "CreatedTimeBegin"
            case createdTimeEnd = "CreatedTimeEnd"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeDockerActivitiesResponse) -> DescribeDockerActivitiesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeDockerActivitiesRequest(instanceId: self.instanceId, activityIds: self.activityIds, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, createdTimeBegin: self.createdTimeBegin, createdTimeEnd: self.createdTimeEnd)
        }
    }

    /// DescribeDockerActivities返回参数结构体
    public struct DescribeDockerActivitiesResponse: TCPaginatedResponse {
        /// 总数量。
        public let totalCount: Int64

        /// Docker活动列表。
        public let dockerActivitySet: [DockerActivity]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case dockerActivitySet = "DockerActivitySet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``DockerActivity`` list from the paginated response.
        public func getItems() -> [DockerActivity] {
            self.dockerActivitySet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询Docker活动列表
    ///
    /// 查询实例内的Docker活动列表。
    @inlinable
    public func describeDockerActivities(_ input: DescribeDockerActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDockerActivitiesResponse> {
        self.client.execute(action: "DescribeDockerActivities", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询Docker活动列表
    ///
    /// 查询实例内的Docker活动列表。
    @inlinable
    public func describeDockerActivities(_ input: DescribeDockerActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDockerActivitiesResponse {
        try await self.client.execute(action: "DescribeDockerActivities", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询Docker活动列表
    ///
    /// 查询实例内的Docker活动列表。
    @inlinable
    public func describeDockerActivities(instanceId: String, activityIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil, createdTimeBegin: Int64? = nil, createdTimeEnd: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDockerActivitiesResponse> {
        self.describeDockerActivities(.init(instanceId: instanceId, activityIds: activityIds, offset: offset, limit: limit, createdTimeBegin: createdTimeBegin, createdTimeEnd: createdTimeEnd), region: region, logger: logger, on: eventLoop)
    }

    /// 查询Docker活动列表
    ///
    /// 查询实例内的Docker活动列表。
    @inlinable
    public func describeDockerActivities(instanceId: String, activityIds: [String]? = nil, offset: Int64? = nil, limit: Int64? = nil, createdTimeBegin: Int64? = nil, createdTimeEnd: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDockerActivitiesResponse {
        try await self.describeDockerActivities(.init(instanceId: instanceId, activityIds: activityIds, offset: offset, limit: limit, createdTimeBegin: createdTimeBegin, createdTimeEnd: createdTimeEnd), region: region, logger: logger, on: eventLoop)
    }

    /// 查询Docker活动列表
    ///
    /// 查询实例内的Docker活动列表。
    @inlinable
    public func describeDockerActivitiesPaginated(_ input: DescribeDockerActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [DockerActivity])> {
        self.client.paginate(input: input, region: region, command: self.describeDockerActivities, logger: logger, on: eventLoop)
    }

    /// 查询Docker活动列表
    ///
    /// 查询实例内的Docker活动列表。
    @inlinable @discardableResult
    public func describeDockerActivitiesPaginated(_ input: DescribeDockerActivitiesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeDockerActivitiesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeDockerActivities, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询Docker活动列表
    ///
    /// 查询实例内的Docker活动列表。
    ///
    /// - Returns: `AsyncSequence`s of `DockerActivity` and `DescribeDockerActivitiesResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeDockerActivitiesPaginator(_ input: DescribeDockerActivitiesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeDockerActivitiesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeDockerActivities, logger: logger, on: eventLoop)
    }
}
