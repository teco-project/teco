//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// DescribeDockerContainerConfiguration请求参数结构体
    public struct DescribeDockerContainerConfigurationRequest: TCRequestModel {
        /// 实例ID。
        public let instanceId: String

        /// 容器ID。
        public let containerId: String

        public init(instanceId: String, containerId: String) {
            self.instanceId = instanceId
            self.containerId = containerId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case containerId = "ContainerId"
        }
    }

    /// DescribeDockerContainerConfiguration返回参数结构体
    public struct DescribeDockerContainerConfigurationResponse: TCResponseModel {
        /// Docker容器配置信息。
        public let containerConfiguration: DockerContainerConfiguration

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case containerConfiguration = "ContainerConfiguration"
            case requestId = "RequestId"
        }
    }

    /// 查询Docker容器配置信息
    ///
    /// 查询实例内的Docker容器配置信息
    @inlinable
    public func describeDockerContainerConfiguration(_ input: DescribeDockerContainerConfigurationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDockerContainerConfigurationResponse> {
        self.client.execute(action: "DescribeDockerContainerConfiguration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询Docker容器配置信息
    ///
    /// 查询实例内的Docker容器配置信息
    @inlinable
    public func describeDockerContainerConfiguration(_ input: DescribeDockerContainerConfigurationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDockerContainerConfigurationResponse {
        try await self.client.execute(action: "DescribeDockerContainerConfiguration", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询Docker容器配置信息
    ///
    /// 查询实例内的Docker容器配置信息
    @inlinable
    public func describeDockerContainerConfiguration(instanceId: String, containerId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDockerContainerConfigurationResponse> {
        self.describeDockerContainerConfiguration(.init(instanceId: instanceId, containerId: containerId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询Docker容器配置信息
    ///
    /// 查询实例内的Docker容器配置信息
    @inlinable
    public func describeDockerContainerConfiguration(instanceId: String, containerId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDockerContainerConfigurationResponse {
        try await self.describeDockerContainerConfiguration(.init(instanceId: instanceId, containerId: containerId), region: region, logger: logger, on: eventLoop)
    }
}
