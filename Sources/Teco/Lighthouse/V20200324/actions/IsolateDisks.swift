//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// IsolateDisks请求参数结构体
    public struct IsolateDisksRequest: TCRequest {
        /// 云硬盘ID列表。一个或多个待操作的云硬盘ID。可通过[DescribeDisks](https://cloud.tencent.com/document/product/1207/66093)接口返回值中的DiskId获取。每次请求退还数据盘数量总计上限为20。
        public let diskIds: [String]

        public init(diskIds: [String]) {
            self.diskIds = diskIds
        }

        enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
        }
    }

    /// IsolateDisks返回参数结构体
    public struct IsolateDisksResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 隔离云硬盘
    ///
    /// 本接口(IsolateDisks)用于退还一个或多个轻量应用服务器云硬盘。
    ///
    /// 只有状态为 UNATTACHED 的数据盘才可以进行此操作。
    /// 接口调用成功后，云硬盘会进入SHUTDOWN 状态。
    /// 支持批量操作。每次请求批量资源的上限为 20。
    /// 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。云硬盘操作结果可以通过调用 [DescribeDisks](https://cloud.tencent.com/document/product/1207/66093) 接口查询，如果云硬盘的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateDisks(_ input: IsolateDisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<IsolateDisksResponse> {
        self.client.execute(action: "IsolateDisks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 隔离云硬盘
    ///
    /// 本接口(IsolateDisks)用于退还一个或多个轻量应用服务器云硬盘。
    ///
    /// 只有状态为 UNATTACHED 的数据盘才可以进行此操作。
    /// 接口调用成功后，云硬盘会进入SHUTDOWN 状态。
    /// 支持批量操作。每次请求批量资源的上限为 20。
    /// 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。云硬盘操作结果可以通过调用 [DescribeDisks](https://cloud.tencent.com/document/product/1207/66093) 接口查询，如果云硬盘的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateDisks(_ input: IsolateDisksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> IsolateDisksResponse {
        try await self.client.execute(action: "IsolateDisks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 隔离云硬盘
    ///
    /// 本接口(IsolateDisks)用于退还一个或多个轻量应用服务器云硬盘。
    ///
    /// 只有状态为 UNATTACHED 的数据盘才可以进行此操作。
    /// 接口调用成功后，云硬盘会进入SHUTDOWN 状态。
    /// 支持批量操作。每次请求批量资源的上限为 20。
    /// 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。云硬盘操作结果可以通过调用 [DescribeDisks](https://cloud.tencent.com/document/product/1207/66093) 接口查询，如果云硬盘的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateDisks(diskIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<IsolateDisksResponse> {
        self.isolateDisks(.init(diskIds: diskIds), region: region, logger: logger, on: eventLoop)
    }

    /// 隔离云硬盘
    ///
    /// 本接口(IsolateDisks)用于退还一个或多个轻量应用服务器云硬盘。
    ///
    /// 只有状态为 UNATTACHED 的数据盘才可以进行此操作。
    /// 接口调用成功后，云硬盘会进入SHUTDOWN 状态。
    /// 支持批量操作。每次请求批量资源的上限为 20。
    /// 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。云硬盘操作结果可以通过调用 [DescribeDisks](https://cloud.tencent.com/document/product/1207/66093) 接口查询，如果云硬盘的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func isolateDisks(diskIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> IsolateDisksResponse {
        try await self.isolateDisks(.init(diskIds: diskIds), region: region, logger: logger, on: eventLoop)
    }
}
