//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// ModifyInstancesBundle请求参数结构体
    public struct ModifyInstancesBundleRequest: TCRequestModel {
        /// 实例ID列表。一个或多个待操作的实例ID。可通过[DescribeInstances](https://cloud.tencent.com/document/api/1207/47573)接口返回值中的InstanceId获取。每次请求批量实例的上限为15。
        public let instanceIds: [String]

        /// 待变更的套餐Id。可通过[DescribeBundles](https://cloud.tencent.com/document/api/1207/47575)接口返回值中的BundleId获取。
        public let bundleId: String

        /// 是否自动抵扣代金券。取值范围：
        /// true：表示自动抵扣代金券
        /// false：表示不自动抵扣代金券
        /// 默认取值：false。
        public let autoVoucher: Bool?

        public init(instanceIds: [String], bundleId: String, autoVoucher: Bool? = nil) {
            self.instanceIds = instanceIds
            self.bundleId = bundleId
            self.autoVoucher = autoVoucher
        }

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case bundleId = "BundleId"
            case autoVoucher = "AutoVoucher"
        }
    }

    /// ModifyInstancesBundle返回参数结构体
    public struct ModifyInstancesBundleResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 变更实例套餐
    ///
    /// 本接口(ModifyInstancesBundle)用于变更一个或多个轻量应用服务器实例套餐。
    /// * 只有状态为 RUNNING，STOPPED的实例才可以进行此操作。
    /// * 支持批量操作。每次请求批量实例的上限为 30。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func modifyInstancesBundle(_ input: ModifyInstancesBundleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstancesBundleResponse> {
        self.client.execute(action: "ModifyInstancesBundle", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 变更实例套餐
    ///
    /// 本接口(ModifyInstancesBundle)用于变更一个或多个轻量应用服务器实例套餐。
    /// * 只有状态为 RUNNING，STOPPED的实例才可以进行此操作。
    /// * 支持批量操作。每次请求批量实例的上限为 30。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func modifyInstancesBundle(_ input: ModifyInstancesBundleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstancesBundleResponse {
        try await self.client.execute(action: "ModifyInstancesBundle", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 变更实例套餐
    ///
    /// 本接口(ModifyInstancesBundle)用于变更一个或多个轻量应用服务器实例套餐。
    /// * 只有状态为 RUNNING，STOPPED的实例才可以进行此操作。
    /// * 支持批量操作。每次请求批量实例的上限为 30。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func modifyInstancesBundle(instanceIds: [String], bundleId: String, autoVoucher: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstancesBundleResponse> {
        self.modifyInstancesBundle(.init(instanceIds: instanceIds, bundleId: bundleId, autoVoucher: autoVoucher), region: region, logger: logger, on: eventLoop)
    }

    /// 变更实例套餐
    ///
    /// 本接口(ModifyInstancesBundle)用于变更一个或多个轻量应用服务器实例套餐。
    /// * 只有状态为 RUNNING，STOPPED的实例才可以进行此操作。
    /// * 支持批量操作。每次请求批量实例的上限为 30。
    /// * 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeInstances 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
    @inlinable @discardableResult
    public func modifyInstancesBundle(instanceIds: [String], bundleId: String, autoVoucher: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstancesBundleResponse {
        try await self.modifyInstancesBundle(.init(instanceIds: instanceIds, bundleId: bundleId, autoVoucher: autoVoucher), region: region, logger: logger, on: eventLoop)
    }
}
