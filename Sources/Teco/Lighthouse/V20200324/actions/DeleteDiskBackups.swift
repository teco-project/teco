//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Lighthouse {
    /// DeleteDiskBackups请求参数结构体
    public struct DeleteDiskBackupsRequest: TCRequestModel {
        /// 云硬盘备份点ID列表，可通过 DescribeDiskBackups接口查询。
        public let diskBackupIds: [String]

        public init(diskBackupIds: [String]) {
            self.diskBackupIds = diskBackupIds
        }

        enum CodingKeys: String, CodingKey {
            case diskBackupIds = "DiskBackupIds"
        }
    }

    /// DeleteDiskBackups返回参数结构体
    public struct DeleteDiskBackupsResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除云硬盘备份点
    ///
    /// 本接口（DeleteDiskBackups）用于删除云硬盘备份点。
    /// 云硬盘备份点必须处于 NORMAL 状态，云硬盘备份点状态可以通过 DescribeDiskBackups接口查询，见输出参数中 DiskBackupState 字段解释。
    @inlinable @discardableResult
    public func deleteDiskBackups(_ input: DeleteDiskBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDiskBackupsResponse> {
        self.client.execute(action: "DeleteDiskBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除云硬盘备份点
    ///
    /// 本接口（DeleteDiskBackups）用于删除云硬盘备份点。
    /// 云硬盘备份点必须处于 NORMAL 状态，云硬盘备份点状态可以通过 DescribeDiskBackups接口查询，见输出参数中 DiskBackupState 字段解释。
    @inlinable @discardableResult
    public func deleteDiskBackups(_ input: DeleteDiskBackupsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDiskBackupsResponse {
        try await self.client.execute(action: "DeleteDiskBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除云硬盘备份点
    ///
    /// 本接口（DeleteDiskBackups）用于删除云硬盘备份点。
    /// 云硬盘备份点必须处于 NORMAL 状态，云硬盘备份点状态可以通过 DescribeDiskBackups接口查询，见输出参数中 DiskBackupState 字段解释。
    @inlinable @discardableResult
    public func deleteDiskBackups(diskBackupIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDiskBackupsResponse> {
        let input = DeleteDiskBackupsRequest(diskBackupIds: diskBackupIds)
        return self.client.execute(action: "DeleteDiskBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除云硬盘备份点
    ///
    /// 本接口（DeleteDiskBackups）用于删除云硬盘备份点。
    /// 云硬盘备份点必须处于 NORMAL 状态，云硬盘备份点状态可以通过 DescribeDiskBackups接口查询，见输出参数中 DiskBackupState 字段解释。
    @inlinable @discardableResult
    public func deleteDiskBackups(diskBackupIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDiskBackupsResponse {
        let input = DeleteDiskBackupsRequest(diskBackupIds: diskBackupIds)
        return try await self.client.execute(action: "DeleteDiskBackups", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
