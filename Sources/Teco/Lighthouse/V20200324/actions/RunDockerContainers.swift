//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Lighthouse {
    /// RunDockerContainers请求参数结构体
    public struct RunDockerContainersRequest: TCRequest {
        /// 实例ID。
        public let instanceId: String

        /// 要创建的容器列表。
        public let containers: [DockerContainerConfiguration]

        public init(instanceId: String, containers: [DockerContainerConfiguration]) {
            self.instanceId = instanceId
            self.containers = containers
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case containers = "Containers"
        }
    }

    /// RunDockerContainers返回参数结构体
    public struct RunDockerContainersResponse: TCResponse {
        /// Docker活动ID列表。
        public let dockerActivitySet: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dockerActivitySet = "DockerActivitySet"
            case requestId = "RequestId"
        }
    }

    /// 创建并运行Docker容器
    ///
    /// 创建并运行多个Docker容器，之后可以通过返回的ActivityIds调用DescribeDockerActivities接口查询创建情况。
    @inlinable
    public func runDockerContainers(_ input: RunDockerContainersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RunDockerContainersResponse> {
        self.client.execute(action: "RunDockerContainers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建并运行Docker容器
    ///
    /// 创建并运行多个Docker容器，之后可以通过返回的ActivityIds调用DescribeDockerActivities接口查询创建情况。
    @inlinable
    public func runDockerContainers(_ input: RunDockerContainersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RunDockerContainersResponse {
        try await self.client.execute(action: "RunDockerContainers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建并运行Docker容器
    ///
    /// 创建并运行多个Docker容器，之后可以通过返回的ActivityIds调用DescribeDockerActivities接口查询创建情况。
    @inlinable
    public func runDockerContainers(instanceId: String, containers: [DockerContainerConfiguration], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RunDockerContainersResponse> {
        self.runDockerContainers(.init(instanceId: instanceId, containers: containers), region: region, logger: logger, on: eventLoop)
    }

    /// 创建并运行Docker容器
    ///
    /// 创建并运行多个Docker容器，之后可以通过返回的ActivityIds调用DescribeDockerActivities接口查询创建情况。
    @inlinable
    public func runDockerContainers(instanceId: String, containers: [DockerContainerConfiguration], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RunDockerContainersResponse {
        try await self.runDockerContainers(.init(instanceId: instanceId, containers: containers), region: region, logger: logger, on: eventLoop)
    }
}
