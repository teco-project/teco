//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIottidError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case appId = "InvalidParameterValue.AppId"
            case count = "InvalidParameterValue.Count"
            case data = "InvalidParameterValue.Data"
            case emptyString = "InvalidParameterValue.EmptyString"
            case limit = "InvalidParameterValue.Limit"
            case orderId = "InvalidParameterValue.OrderId"
            case overLimit = "InvalidParameterValue.OverLimit"
            case permissionDenied = "InvalidParameterValue.PermissionDenied"
            case quantity = "InvalidParameterValue.Quantity"
            case tid = "InvalidParameterValue.Tid"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// AppId错误。
        public static var appId: InvalidParameterValue {
            InvalidParameterValue(.appId)
        }
        
        /// 数量错误。
        public static var count: InvalidParameterValue {
            InvalidParameterValue(.count)
        }
        
        /// 验证数据错误。
        public static var data: InvalidParameterValue {
            InvalidParameterValue(.data)
        }
        
        /// 输入字符串为空。
        public static var emptyString: InvalidParameterValue {
            InvalidParameterValue(.emptyString)
        }
        
        /// 超过数量限制。
        public static var limit: InvalidParameterValue {
            InvalidParameterValue(.limit)
        }
        
        /// 订单编号错误。
        public static var orderId: InvalidParameterValue {
            InvalidParameterValue(.orderId)
        }
        
        /// 超过数量限制。
        public static var overLimit: InvalidParameterValue {
            InvalidParameterValue(.overLimit)
        }
        
        /// 无权限操作。
        public static var permissionDenied: InvalidParameterValue {
            InvalidParameterValue(.permissionDenied)
        }
        
        /// 数量错误。
        public static var quantity: InvalidParameterValue {
            InvalidParameterValue(.quantity)
        }
        
        /// TID编码错误。
        public static var tid: InvalidParameterValue {
            InvalidParameterValue(.tid)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCIottidError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCIottidError.InvalidParameterValue, rhs: TCIottidError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIottidError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIottidError.InvalidParameterValue {
    /// - Returns: ``TCIottidError`` that holds the same error and context.
    public func toIottidError() -> TCIottidError {
        guard let code = TCIottidError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIottidError(code, context: self.context)
    }
}

extension TCIottidError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
