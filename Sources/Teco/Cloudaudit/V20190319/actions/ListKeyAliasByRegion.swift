//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Cloudaudit {
    /// ListKeyAliasByRegion请求参数结构体
    public struct ListKeyAliasByRegionRequest: TCPaginatedRequest {
        /// Kms地域
        public let kmsRegion: String

        /// 含义跟 SQL 查询的 Limit 一致，表示本次获最多获取 Limit 个元素。缺省值为10，最大值为200
        public let limit: Int64?

        /// 含义跟 SQL 查询的 Offset 一致，表示本次获取从按一定顺序排列数组的第 Offset 个元素开始，缺省为0
        public let offset: Int64?

        public init(kmsRegion: String, limit: Int64? = nil, offset: Int64? = nil) {
            self.kmsRegion = kmsRegion
            self.limit = limit
            self.offset = offset
        }

        enum CodingKeys: String, CodingKey {
            case kmsRegion = "KmsRegion"
            case limit = "Limit"
            case offset = "Offset"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListKeyAliasByRegionResponse) -> ListKeyAliasByRegionRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return ListKeyAliasByRegionRequest(kmsRegion: self.kmsRegion, limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count))
        }
    }

    /// ListKeyAliasByRegion返回参数结构体
    public struct ListKeyAliasByRegionResponse: TCPaginatedResponse {
        /// CMK的总数量
        public let totalCount: Int64

        /// 密钥别名
        public let keyMetadatas: [KeyMetadata]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case keyMetadatas = "KeyMetadatas"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [KeyMetadata] {
            self.keyMetadatas
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 根据地域获取KMS密钥别名
    @inlinable
    public func listKeyAliasByRegion(_ input: ListKeyAliasByRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListKeyAliasByRegionResponse> {
        self.client.execute(action: "ListKeyAliasByRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据地域获取KMS密钥别名
    @inlinable
    public func listKeyAliasByRegion(_ input: ListKeyAliasByRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKeyAliasByRegionResponse {
        try await self.client.execute(action: "ListKeyAliasByRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据地域获取KMS密钥别名
    @inlinable
    public func listKeyAliasByRegion(kmsRegion: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListKeyAliasByRegionResponse> {
        let input = ListKeyAliasByRegionRequest(kmsRegion: kmsRegion, limit: limit, offset: offset)
        return self.client.execute(action: "ListKeyAliasByRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据地域获取KMS密钥别名
    @inlinable
    public func listKeyAliasByRegion(kmsRegion: String, limit: Int64? = nil, offset: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKeyAliasByRegionResponse {
        let input = ListKeyAliasByRegionRequest(kmsRegion: kmsRegion, limit: limit, offset: offset)
        return try await self.client.execute(action: "ListKeyAliasByRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据地域获取KMS密钥别名
    @inlinable
    public func listKeyAliasByRegionPaginated(_ input: ListKeyAliasByRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [KeyMetadata])> {
        self.client.paginate(input: input, region: region, command: self.listKeyAliasByRegion, logger: logger, on: eventLoop)
    }

    /// 根据地域获取KMS密钥别名
    @inlinable @discardableResult
    public func listKeyAliasByRegionPaginated(_ input: ListKeyAliasByRegionRequest, region: TCRegion? = nil, onResponse: @escaping (ListKeyAliasByRegionResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listKeyAliasByRegion, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 根据地域获取KMS密钥别名
    ///
    /// - Returns: `AsyncSequence`s of `KeyMetadata` and `ListKeyAliasByRegionResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func listKeyAliasByRegionPaginator(_ input: ListKeyAliasByRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListKeyAliasByRegionRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listKeyAliasByRegion, logger: logger, on: eventLoop)
    }
}
