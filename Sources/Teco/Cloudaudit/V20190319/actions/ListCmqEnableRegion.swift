//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudaudit {
    /// ListCmqEnableRegion请求参数结构体
    public struct ListCmqEnableRegionRequest: TCRequest {
        /// 站点类型。zh表示中国区，en表示国际区。默认中国区。
        public let websiteType: String?

        public init(websiteType: String? = nil) {
            self.websiteType = websiteType
        }

        enum CodingKeys: String, CodingKey {
            case websiteType = "WebsiteType"
        }
    }

    /// ListCmqEnableRegion返回参数结构体
    public struct ListCmqEnableRegionResponse: TCResponse {
        /// 云审计支持的cmq的可用区
        public let enableRegions: [CmqRegionInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case enableRegions = "EnableRegions"
            case requestId = "RequestId"
        }
    }

    /// 查询云审计支持的cmq的可用区
    @inlinable
    public func listCmqEnableRegion(_ input: ListCmqEnableRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListCmqEnableRegionResponse> {
        self.client.execute(action: "ListCmqEnableRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询云审计支持的cmq的可用区
    @inlinable
    public func listCmqEnableRegion(_ input: ListCmqEnableRegionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListCmqEnableRegionResponse {
        try await self.client.execute(action: "ListCmqEnableRegion", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询云审计支持的cmq的可用区
    @inlinable
    public func listCmqEnableRegion(websiteType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListCmqEnableRegionResponse> {
        self.listCmqEnableRegion(.init(websiteType: websiteType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询云审计支持的cmq的可用区
    @inlinable
    public func listCmqEnableRegion(websiteType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListCmqEnableRegionResponse {
        try await self.listCmqEnableRegion(.init(websiteType: websiteType), region: region, logger: logger, on: eventLoop)
    }
}
