//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cloudaudit {
    /// DeleteAudit请求参数结构体
    public struct DeleteAuditRequest: TCRequest {
        /// 跟踪集名称
        public let auditName: String

        public init(auditName: String) {
            self.auditName = auditName
        }

        enum CodingKeys: String, CodingKey {
            case auditName = "AuditName"
        }
    }

    /// DeleteAudit返回参数结构体
    public struct DeleteAuditResponse: TCResponse {
        /// 是否删除成功
        public let isSuccess: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case isSuccess = "IsSuccess"
            case requestId = "RequestId"
        }
    }

    /// 删除跟踪集
    @inlinable
    public func deleteAudit(_ input: DeleteAuditRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAuditResponse> {
        self.client.execute(action: "DeleteAudit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除跟踪集
    @inlinable
    public func deleteAudit(_ input: DeleteAuditRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAuditResponse {
        try await self.client.execute(action: "DeleteAudit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除跟踪集
    @inlinable
    public func deleteAudit(auditName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAuditResponse> {
        self.deleteAudit(.init(auditName: auditName), region: region, logger: logger, on: eventLoop)
    }

    /// 删除跟踪集
    @inlinable
    public func deleteAudit(auditName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAuditResponse {
        try await self.deleteAudit(.init(auditName: auditName), region: region, logger: logger, on: eventLoop)
    }
}
