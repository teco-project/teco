//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCloudauditError {
    public struct InternalError: TCCloudauditErrorType {
        enum Code: String {
            case cmqError = "InternalError.CmqError"
            case createAuditError = "InternalError.CreateAuditError"
            case deleteAuditError = "InternalError.DeleteAuditError"
            case describeAuditError = "InternalError.DescribeAuditError"
            case inquireAuditCreditError = "InternalError.InquireAuditCreditError"
            case listAuditsError = "InternalError.ListAuditsError"
            case listCmqEnableRegionError = "InternalError.ListCmqEnableRegionError"
            case listCosEnableRegionError = "InternalError.ListCosEnableRegionError"
            case listKeyAliasByRegionError = "InternalError.ListKeyAliasByRegionError"
            case searchError = "InternalError.SearchError"
            case startLoggingError = "InternalError.StartLoggingError"
            case stopLoggingError = "InternalError.StopLoggingError"
            case updateAuditError = "InternalError.UpdateAuditError"
            case other = "InternalError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 创建cmq时发生异常，可能您准备创建的cmq队列已经存在，也有可能您没有权限或者欠费。
        public static var cmqError: InternalError {
            InternalError(.cmqError)
        }

        /// 创建跟踪集错误，请联系开发人员。
        public static var createAuditError: InternalError {
            InternalError(.createAuditError)
        }

        /// 删除跟踪集失败，请联系开发人员
        public static var deleteAuditError: InternalError {
            InternalError(.deleteAuditError)
        }

        /// 查看跟踪集详情错误，请联系开发人员
        public static var describeAuditError: InternalError {
            InternalError(.describeAuditError)
        }

        /// 查询可创建跟踪集的数量错误，请联系开发人员
        public static var inquireAuditCreditError: InternalError {
            InternalError(.inquireAuditCreditError)
        }

        /// 查询跟踪集概要内部错误，请联系开发人员。
        public static var listAuditsError: InternalError {
            InternalError(.listAuditsError)
        }

        /// 内部错误，请联系开发人员
        public static var listCmqEnableRegionError: InternalError {
            InternalError(.listCmqEnableRegionError)
        }

        /// 内部错误，请联系开发人员
        public static var listCosEnableRegionError: InternalError {
            InternalError(.listCosEnableRegionError)
        }

        /// 内部错误，请联系开发人员
        public static var listKeyAliasByRegionError: InternalError {
            InternalError(.listKeyAliasByRegionError)
        }

        /// 内部错误，请联系开发人员
        public static var searchError: InternalError {
            InternalError(.searchError)
        }

        /// 内部错误，请联系开发人员
        public static var startLoggingError: InternalError {
            InternalError(.startLoggingError)
        }

        /// 内部错误，请联系开发人员
        public static var stopLoggingError: InternalError {
            InternalError(.stopLoggingError)
        }

        /// 内部错误，请联系开发人员
        public static var updateAuditError: InternalError {
            InternalError(.updateAuditError)
        }

        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }

        public func asCloudauditError() -> TCCloudauditError {
            let code: TCCloudauditError.Code
            switch self.error {
            case .cmqError:
                code = .internalError_CmqError
            case .createAuditError:
                code = .internalError_CreateAuditError
            case .deleteAuditError:
                code = .internalError_DeleteAuditError
            case .describeAuditError:
                code = .internalError_DescribeAuditError
            case .inquireAuditCreditError:
                code = .internalError_InquireAuditCreditError
            case .listAuditsError:
                code = .internalError_ListAuditsError
            case .listCmqEnableRegionError:
                code = .internalError_ListCmqEnableRegionError
            case .listCosEnableRegionError:
                code = .internalError_ListCosEnableRegionError
            case .listKeyAliasByRegionError:
                code = .internalError_ListKeyAliasByRegionError
            case .searchError:
                code = .internalError_SearchError
            case .startLoggingError:
                code = .internalError_StartLoggingError
            case .stopLoggingError:
                code = .internalError_StopLoggingError
            case .updateAuditError:
                code = .internalError_UpdateAuditError
            case .other:
                code = .internalError
            }
            return TCCloudauditError(code, context: self.context)
        }
    }
}
