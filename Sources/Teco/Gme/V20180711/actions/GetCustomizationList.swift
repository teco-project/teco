//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Gme {
    /// GetCustomizationList请求参数结构体
    public struct GetCustomizationListRequest: TCRequestModel {
        /// 应用 ID，登录控制台创建应用得到的AppID
        public let bizId: Int64

        public init(bizId: Int64) {
            self.bizId = bizId
        }

        enum CodingKeys: String, CodingKey {
            case bizId = "BizId"
        }
    }

    /// GetCustomizationList返回参数结构体
    public struct GetCustomizationListResponse: TCResponseModel {
        /// 语音消息转文本热句模型配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let customizationConfigs: [CustomizationConfigs]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case customizationConfigs = "CustomizationConfigs"
            case requestId = "RequestId"
        }
    }

    /// 查询语音消息转文本热句模型列表
    @inlinable
    public func getCustomizationList(_ input: GetCustomizationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCustomizationListResponse> {
        self.client.execute(action: "GetCustomizationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询语音消息转文本热句模型列表
    @inlinable
    public func getCustomizationList(_ input: GetCustomizationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetCustomizationListResponse {
        try await self.client.execute(action: "GetCustomizationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询语音消息转文本热句模型列表
    @inlinable
    public func getCustomizationList(bizId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCustomizationListResponse> {
        self.getCustomizationList(.init(bizId: bizId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询语音消息转文本热句模型列表
    @inlinable
    public func getCustomizationList(bizId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetCustomizationListResponse {
        try await self.getCustomizationList(.init(bizId: bizId), region: region, logger: logger, on: eventLoop)
    }
}
