//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Gme {
    /// DescribeRecordInfo请求参数结构体
    public struct DescribeRecordInfoRequest: TCRequest {
        /// 进行中的任务taskid（StartRecord接口返回）。
        public let taskId: UInt64

        /// 应用ID。
        public let bizId: UInt64

        public init(taskId: UInt64, bizId: UInt64) {
            self.taskId = taskId
            self.bizId = bizId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case bizId = "BizId"
        }
    }

    /// DescribeRecordInfo返回参数结构体
    public struct DescribeRecordInfoResponse: TCResponse {
        /// 录制信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let recordInfo: [RecordInfo]?

        /// 录制类型：1代表单流 2代表混流 3代表单流和混流。
        public let recordMode: UInt64

        /// 房间ID。
        public let roomId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case recordInfo = "RecordInfo"
            case recordMode = "RecordMode"
            case roomId = "RoomId"
            case requestId = "RequestId"
        }
    }

    /// 查询录制任务信息
    ///
    /// 查询录制任务信息。
    @inlinable
    public func describeRecordInfo(_ input: DescribeRecordInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordInfoResponse> {
        self.client.execute(action: "DescribeRecordInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询录制任务信息
    ///
    /// 查询录制任务信息。
    @inlinable
    public func describeRecordInfo(_ input: DescribeRecordInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordInfoResponse {
        try await self.client.execute(action: "DescribeRecordInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询录制任务信息
    ///
    /// 查询录制任务信息。
    @inlinable
    public func describeRecordInfo(taskId: UInt64, bizId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordInfoResponse> {
        self.describeRecordInfo(.init(taskId: taskId, bizId: bizId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询录制任务信息
    ///
    /// 查询录制任务信息。
    @inlinable
    public func describeRecordInfo(taskId: UInt64, bizId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordInfoResponse {
        try await self.describeRecordInfo(.init(taskId: taskId, bizId: bizId), region: region, logger: logger, on: eventLoop)
    }
}
