//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Gme {
    /// DescribeApplicationList请求参数结构体
    public struct DescribeApplicationListRequest: TCPaginatedRequest {
        /// 项目ID，0表示默认项目，-1表示所有项目，如果需要查找具体项目下的应用列表，请填入具体项目ID，项目ID在项目管理中查看 https://console.cloud.tencent.com/project
        public let projectId: Int64

        /// 页码ID，0表示第一页，以此后推。默认填0
        public let pageNo: UInt64

        /// 每页展示应用数量。默认填200
        public let pageSize: UInt64

        /// 所查找应用名称的关键字，支持模糊匹配查找。空串表示查询所有应用
        public let searchText: String

        /// 标签列表
        public let tagSet: [Tag]?

        /// 查找过滤关键字列表
        public let filters: [Filter]?

        public init(projectId: Int64, pageNo: UInt64, pageSize: UInt64, searchText: String, tagSet: [Tag]? = nil, filters: [Filter]? = nil) {
            self.projectId = projectId
            self.pageNo = pageNo
            self.pageSize = pageSize
            self.searchText = searchText
            self.tagSet = tagSet
            self.filters = filters
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case pageNo = "PageNo"
            case pageSize = "PageSize"
            case searchText = "SearchText"
            case tagSet = "TagSet"
            case filters = "Filters"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeApplicationListResponse) -> DescribeApplicationListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(projectId: self.projectId, pageNo: self.pageNo + 1, pageSize: self.pageSize, searchText: self.searchText, tagSet: self.tagSet, filters: self.filters)
        }
    }

    /// DescribeApplicationList返回参数结构体
    public struct DescribeApplicationListResponse: TCPaginatedResponse {
        /// 获取应用列表返回
        public let applicationList: [ApplicationList]

        /// 应用总数
        public let total: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case applicationList = "ApplicationList"
            case total = "Total"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ApplicationList`` list from the paginated response.
        public func getItems() -> [ApplicationList] {
            self.applicationList
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.total
        }
    }

    /// 查询某账号下的应用列表
    ///
    /// 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
    @inlinable
    public func describeApplicationList(_ input: DescribeApplicationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeApplicationListResponse> {
        self.client.execute(action: "DescribeApplicationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询某账号下的应用列表
    ///
    /// 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
    @inlinable
    public func describeApplicationList(_ input: DescribeApplicationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApplicationListResponse {
        try await self.client.execute(action: "DescribeApplicationList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询某账号下的应用列表
    ///
    /// 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
    @inlinable
    public func describeApplicationList(projectId: Int64, pageNo: UInt64, pageSize: UInt64, searchText: String, tagSet: [Tag]? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeApplicationListResponse> {
        self.describeApplicationList(.init(projectId: projectId, pageNo: pageNo, pageSize: pageSize, searchText: searchText, tagSet: tagSet, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询某账号下的应用列表
    ///
    /// 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
    @inlinable
    public func describeApplicationList(projectId: Int64, pageNo: UInt64, pageSize: UInt64, searchText: String, tagSet: [Tag]? = nil, filters: [Filter]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApplicationListResponse {
        try await self.describeApplicationList(.init(projectId: projectId, pageNo: pageNo, pageSize: pageSize, searchText: searchText, tagSet: tagSet, filters: filters), region: region, logger: logger, on: eventLoop)
    }

    /// 查询某账号下的应用列表
    ///
    /// 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
    @inlinable
    public func describeApplicationListPaginated(_ input: DescribeApplicationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [ApplicationList])> {
        self.client.paginate(input: input, region: region, command: self.describeApplicationList, logger: logger, on: eventLoop)
    }

    /// 查询某账号下的应用列表
    ///
    /// 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
    @inlinable @discardableResult
    public func describeApplicationListPaginated(_ input: DescribeApplicationListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeApplicationListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeApplicationList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询某账号下的应用列表
    ///
    /// 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
    ///
    /// - Returns: `AsyncSequence`s of ``ApplicationList`` and ``DescribeApplicationListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeApplicationListPaginator(_ input: DescribeApplicationListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeApplicationListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeApplicationList, logger: logger, on: eventLoop)
    }
}
