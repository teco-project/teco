//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Gme {
    /// CreateScanUser请求参数结构体
    public struct CreateScanUserRequest: TCRequest {
        /// 应用ID，登录控制台 - 服务管理创建应用得到的AppID
        public let bizId: UInt64

        /// 需要新增送检的用户号。示例：1234
        /// (若UserId不填，则UserIdString必填；两者选其一；两者都填以UserIdString为准)
        public let userId: UInt64?

        /// 需要新增送检的用户号。示例："1234"
        /// (若UserIdString不填，则UserId必填；两者选其一；两者都填以UserIdString为准)
        public let userIdString: String?

        /// 当前用户送检过期时间，单位：秒。
        /// 若参数不为0，则在过期时间之后，用户不会被送检。
        /// 若参数为0，则送检配置不会自动失效。
        public let expirationTime: UInt64?

        public init(bizId: UInt64, userId: UInt64? = nil, userIdString: String? = nil, expirationTime: UInt64? = nil) {
            self.bizId = bizId
            self.userId = userId
            self.userIdString = userIdString
            self.expirationTime = expirationTime
        }

        enum CodingKeys: String, CodingKey {
            case bizId = "BizId"
            case userId = "UserId"
            case userIdString = "UserIdString"
            case expirationTime = "ExpirationTime"
        }
    }

    /// CreateScanUser返回参数结构体
    public struct CreateScanUserResponse: TCResponse {
        /// 返回结果码
        public let errorCode: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case requestId = "RequestId"
        }
    }

    /// 新增自定义送检用户
    ///
    /// 新增自定义送检用户。**接口使用前提**：目前 CreateScanUser 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
    @inlinable
    public func createScanUser(_ input: CreateScanUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateScanUserResponse> {
        self.client.execute(action: "CreateScanUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增自定义送检用户
    ///
    /// 新增自定义送检用户。**接口使用前提**：目前 CreateScanUser 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
    @inlinable
    public func createScanUser(_ input: CreateScanUserRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateScanUserResponse {
        try await self.client.execute(action: "CreateScanUser", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增自定义送检用户
    ///
    /// 新增自定义送检用户。**接口使用前提**：目前 CreateScanUser 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
    @inlinable
    public func createScanUser(bizId: UInt64, userId: UInt64? = nil, userIdString: String? = nil, expirationTime: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateScanUserResponse> {
        self.createScanUser(.init(bizId: bizId, userId: userId, userIdString: userIdString, expirationTime: expirationTime), region: region, logger: logger, on: eventLoop)
    }

    /// 新增自定义送检用户
    ///
    /// 新增自定义送检用户。**接口使用前提**：目前 CreateScanUser 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
    @inlinable
    public func createScanUser(bizId: UInt64, userId: UInt64? = nil, userIdString: String? = nil, expirationTime: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateScanUserResponse {
        try await self.createScanUser(.init(bizId: bizId, userId: userId, userIdString: userIdString, expirationTime: expirationTime), region: region, logger: logger, on: eventLoop)
    }
}
