//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCGmeError {
    public struct InvalidParameterValue: TCGmeErrorType {
        enum Code: String {
            case invalidBizId = "InvalidParameterValue.InvalidBizId"
            case invalidRecordMode = "InvalidParameterValue.InvalidRecordMode"
            case invalidRoomId = "InvalidParameterValue.InvalidRoomId"
            case invalidSubscribeRecordUserIds = "InvalidParameterValue.InvalidSubscribeRecordUserIds"
            case invalidSubscribeUserIds = "InvalidParameterValue.InvalidSubscribeUserIds"
            case invalidTaskId = "InvalidParameterValue.InvalidTaskId"
            case invalidUNSubscribeUserIds = "InvalidParameterValue.InvalidUNSubscribeUserIds"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// BizId 参数错误
        public static var invalidBizId: InvalidParameterValue {
            InvalidParameterValue(.invalidBizId)
        }

        /// RecordMode参数错误
        public static var invalidRecordMode: InvalidParameterValue {
            InvalidParameterValue(.invalidRecordMode)
        }

        /// RoomId 参数错误
        public static var invalidRoomId: InvalidParameterValue {
            InvalidParameterValue(.invalidRoomId)
        }

        /// 黑白名单格式错误
        public static var invalidSubscribeRecordUserIds: InvalidParameterValue {
            InvalidParameterValue(.invalidSubscribeRecordUserIds)
        }

        /// 白名单个数超过20个
        public static var invalidSubscribeUserIds: InvalidParameterValue {
            InvalidParameterValue(.invalidSubscribeUserIds)
        }

        /// taskid参数错误
        public static var invalidTaskId: InvalidParameterValue {
            InvalidParameterValue(.invalidTaskId)
        }

        /// 黑名单个数超过20个
        public static var invalidUNSubscribeUserIds: InvalidParameterValue {
            InvalidParameterValue(.invalidUNSubscribeUserIds)
        }

        public func asGmeError() -> TCGmeError {
            let code: TCGmeError.Code
            switch self.error {
            case .invalidBizId:
                code = .invalidParameterValue_InvalidBizId
            case .invalidRecordMode:
                code = .invalidParameterValue_InvalidRecordMode
            case .invalidRoomId:
                code = .invalidParameterValue_InvalidRoomId
            case .invalidSubscribeRecordUserIds:
                code = .invalidParameterValue_InvalidSubscribeRecordUserIds
            case .invalidSubscribeUserIds:
                code = .invalidParameterValue_InvalidSubscribeUserIds
            case .invalidTaskId:
                code = .invalidParameterValue_InvalidTaskId
            case .invalidUNSubscribeUserIds:
                code = .invalidParameterValue_InvalidUNSubscribeUserIds
            }
            return TCGmeError(code, context: self.context)
        }
    }
}
