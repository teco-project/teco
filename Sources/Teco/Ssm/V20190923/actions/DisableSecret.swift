//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssm {
    /// DisableSecret请求参数结构体
    public struct DisableSecretRequest: TCRequest {
        /// 指定停用的凭据名称。
        public let secretName: String

        public init(secretName: String) {
            self.secretName = secretName
        }

        enum CodingKeys: String, CodingKey {
            case secretName = "SecretName"
        }
    }

    /// DisableSecret返回参数结构体
    public struct DisableSecretResponse: TCResponse {
        /// 停用的凭据名称。
        public let secretName: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case secretName = "SecretName"
            case requestId = "RequestId"
        }
    }

    /// 停用凭据
    ///
    /// 停用指定的凭据，停用后状态为 Disabled，无法通过接口获取该凭据的明文。
    @inlinable
    public func disableSecret(_ input: DisableSecretRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableSecretResponse> {
        self.client.execute(action: "DisableSecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 停用凭据
    ///
    /// 停用指定的凭据，停用后状态为 Disabled，无法通过接口获取该凭据的明文。
    @inlinable
    public func disableSecret(_ input: DisableSecretRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableSecretResponse {
        try await self.client.execute(action: "DisableSecret", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 停用凭据
    ///
    /// 停用指定的凭据，停用后状态为 Disabled，无法通过接口获取该凭据的明文。
    @inlinable
    public func disableSecret(secretName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DisableSecretResponse> {
        self.disableSecret(.init(secretName: secretName), region: region, logger: logger, on: eventLoop)
    }

    /// 停用凭据
    ///
    /// 停用指定的凭据，停用后状态为 Disabled，无法通过接口获取该凭据的明文。
    @inlinable
    public func disableSecret(secretName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DisableSecretResponse {
        try await self.disableSecret(.init(secretName: secretName), region: region, logger: logger, on: eventLoop)
    }
}
