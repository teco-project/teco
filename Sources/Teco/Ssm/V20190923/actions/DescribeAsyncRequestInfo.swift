//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssm {
    /// DescribeAsyncRequestInfo请求参数结构体
    public struct DescribeAsyncRequestInfoRequest: TCRequestModel {
        /// 异步任务ID号。
        public let flowID: Int64

        public init(flowID: Int64) {
            self.flowID = flowID
        }

        enum CodingKeys: String, CodingKey {
            case flowID = "FlowID"
        }
    }

    /// DescribeAsyncRequestInfo返回参数结构体
    public struct DescribeAsyncRequestInfoResponse: TCResponseModel {
        /// 0:处理中，1:处理成功，2:处理失败
        public let taskStatus: Int64

        /// 任务描述信息。
        public let description: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskStatus = "TaskStatus"
            case description = "Description"
            case requestId = "RequestId"
        }
    }

    /// 查询异步任务的执行结果
    @inlinable
    public func describeAsyncRequestInfo(_ input: DescribeAsyncRequestInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAsyncRequestInfoResponse> {
        self.client.execute(action: "DescribeAsyncRequestInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询异步任务的执行结果
    @inlinable
    public func describeAsyncRequestInfo(_ input: DescribeAsyncRequestInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAsyncRequestInfoResponse {
        try await self.client.execute(action: "DescribeAsyncRequestInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询异步任务的执行结果
    @inlinable
    public func describeAsyncRequestInfo(flowID: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAsyncRequestInfoResponse> {
        self.describeAsyncRequestInfo(.init(flowID: flowID), region: region, logger: logger, on: eventLoop)
    }

    /// 查询异步任务的执行结果
    @inlinable
    public func describeAsyncRequestInfo(flowID: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAsyncRequestInfoResponse {
        try await self.describeAsyncRequestInfo(.init(flowID: flowID), region: region, logger: logger, on: eventLoop)
    }
}
