//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTiwError {
    public struct LimitExceeded: TCTiwErrorType {
        enum Code: String {
            case taskConcurrency = "LimitExceeded.TaskConcurrency"
            case transcodePagesLimitation = "LimitExceeded.TranscodePagesLimitation"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 转码或录制任务并发数量超过限制，请参考错误描述或稍后重试。
        public static var taskConcurrency: LimitExceeded {
            LimitExceeded(.taskConcurrency)
        }

        /// 超过文档最大页数限制，目前不支持超过500页的文件转码，如有特殊需求，请联系客服人员。
        public static var transcodePagesLimitation: LimitExceeded {
            LimitExceeded(.transcodePagesLimitation)
        }

        public func asTiwError() -> TCTiwError {
            let code: TCTiwError.Code
            switch self.error {
            case .taskConcurrency:
                code = .limitExceeded_TaskConcurrency
            case .transcodePagesLimitation:
                code = .limitExceeded_TranscodePagesLimitation
            }
            return TCTiwError(code, context: self.context)
        }
    }
}
