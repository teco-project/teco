//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTiwError {
    public struct InvalidParameter: TCErrorType {
        enum Code: String {
            case bodyParameterTypeUnmatched = "InvalidParameter.BodyParameterTypeUnmatched"
            case callbackAddressFormatError = "InvalidParameter.CallbackAddressFormatError"
            case fileFormatUnsupported = "InvalidParameter.FileFormatUnsupported"
            case invalidExtra = "InvalidParameter.InvalidExtra"
            case recordParameter = "InvalidParameter.RecordParameter"
            case sdkAppIdNotFound = "InvalidParameter.SdkAppIdNotFound"
            case taskNotFound = "InvalidParameter.TaskNotFound"
            case transcodeParameter = "InvalidParameter.TranscodeParameter"
            case urlFormatError = "InvalidParameter.UrlFormatError"
            case other = "InvalidParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 参数类型不匹配。
        public static var bodyParameterTypeUnmatched: InvalidParameter {
            InvalidParameter(.bodyParameterTypeUnmatched)
        }
        
        /// 回调地址格式错误。
        public static var callbackAddressFormatError: InvalidParameter {
            InvalidParameter(.callbackAddressFormatError)
        }
        
        /// 文档后缀名对应的格式不支持。
        public static var fileFormatUnsupported: InvalidParameter {
            InvalidParameter(.fileFormatUnsupported)
        }
        
        /// 额外指定的特殊功能不存在。
        public static var invalidExtra: InvalidParameter {
            InvalidParameter(.invalidExtra)
        }
        
        /// 实时录制参数格式不正确。
        public static var recordParameter: InvalidParameter {
            InvalidParameter(.recordParameter)
        }
        
        /// SdkAppId不存在或格式错误。
        public static var sdkAppIdNotFound: InvalidParameter {
            InvalidParameter(.sdkAppIdNotFound)
        }
        
        /// 需要查询的任务不存在。
        public static var taskNotFound: InvalidParameter {
            InvalidParameter(.taskNotFound)
        }
        
        /// 文档转码参数格式不正确。
        public static var transcodeParameter: InvalidParameter {
            InvalidParameter(.transcodeParameter)
        }
        
        /// 文档下载Url格式错误，请检查请求参数里的Url。
        public static var urlFormatError: InvalidParameter {
            InvalidParameter(.urlFormatError)
        }
        
        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }
    }
}

extension TCTiwError.InvalidParameter: Equatable {
    public static func == (lhs: TCTiwError.InvalidParameter, rhs: TCTiwError.InvalidParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTiwError.InvalidParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTiwError.InvalidParameter {
    public func toTiwError() -> TCTiwError {
        guard let code = TCTiwError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTiwError(code, context: self.context)
    }
}