//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTiwError {
    public struct InvalidParameter: TCTiwErrorType {
        enum Code: String {
            case applicationAlreadyExists = "InvalidParameter.ApplicationAlreadyExists"
            case bodyParameterTypeUnmatched = "InvalidParameter.BodyParameterTypeUnmatched"
            case callbackAddressFormatError = "InvalidParameter.CallbackAddressFormatError"
            case cdnDomainNotFound = "InvalidParameter.CdnDomainNotFound"
            case fileFormatUnsupported = "InvalidParameter.FileFormatUnsupported"
            case invalidExtra = "InvalidParameter.InvalidExtra"
            case invalidTaskType = "InvalidParameter.InvalidTaskType"
            case recordParameter = "InvalidParameter.RecordParameter"
            case sdkAppIdNotFound = "InvalidParameter.SdkAppIdNotFound"
            case taskNotFound = "InvalidParameter.TaskNotFound"
            case timeFormat = "InvalidParameter.TimeFormat"
            case transcodeParameter = "InvalidParameter.TranscodeParameter"
            case unmarshalJSONBodyFail = "InvalidParameter.UnmarshalJSONBodyFail"
            case urlFormatError = "InvalidParameter.UrlFormatError"
            case other = "InvalidParameter"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 创建白板应用时该应用已存在。
        public static var applicationAlreadyExists: InvalidParameter {
            InvalidParameter(.applicationAlreadyExists)
        }

        /// 参数类型不匹配。
        public static var bodyParameterTypeUnmatched: InvalidParameter {
            InvalidParameter(.bodyParameterTypeUnmatched)
        }

        /// 回调地址格式错误。
        public static var callbackAddressFormatError: InvalidParameter {
            InvalidParameter(.callbackAddressFormatError)
        }

        /// 未找到当前CDN域名。
        public static var cdnDomainNotFound: InvalidParameter {
            InvalidParameter(.cdnDomainNotFound)
        }

        /// 文档后缀名对应的格式不支持。
        public static var fileFormatUnsupported: InvalidParameter {
            InvalidParameter(.fileFormatUnsupported)
        }

        /// 额外指定的特殊功能不存在。
        public static var invalidExtra: InvalidParameter {
            InvalidParameter(.invalidExtra)
        }

        /// 设置应用配置任务类型不支持。
        public static var invalidTaskType: InvalidParameter {
            InvalidParameter(.invalidTaskType)
        }

        /// 实时录制参数格式不正确。
        public static var recordParameter: InvalidParameter {
            InvalidParameter(.recordParameter)
        }

        /// SdkAppId不存在或格式错误。
        public static var sdkAppIdNotFound: InvalidParameter {
            InvalidParameter(.sdkAppIdNotFound)
        }

        /// 需要查询的任务不存在。
        public static var taskNotFound: InvalidParameter {
            InvalidParameter(.taskNotFound)
        }

        /// 时间格式不合法解析失败。
        public static var timeFormat: InvalidParameter {
            InvalidParameter(.timeFormat)
        }

        /// 文档转码参数格式不正确。
        public static var transcodeParameter: InvalidParameter {
            InvalidParameter(.transcodeParameter)
        }

        /// 解析JSON失败，可能参数数据类型不匹配。
        public static var unmarshalJSONBodyFail: InvalidParameter {
            InvalidParameter(.unmarshalJSONBodyFail)
        }

        /// 文档下载Url格式错误，请检查请求参数里的Url。
        public static var urlFormatError: InvalidParameter {
            InvalidParameter(.urlFormatError)
        }

        /// 参数错误。
        public static var other: InvalidParameter {
            InvalidParameter(.other)
        }

        public func asTiwError() -> TCTiwError {
            let code: TCTiwError.Code
            switch self.error {
            case .applicationAlreadyExists:
                code = .invalidParameter_ApplicationAlreadyExists
            case .bodyParameterTypeUnmatched:
                code = .invalidParameter_BodyParameterTypeUnmatched
            case .callbackAddressFormatError:
                code = .invalidParameter_CallbackAddressFormatError
            case .cdnDomainNotFound:
                code = .invalidParameter_CdnDomainNotFound
            case .fileFormatUnsupported:
                code = .invalidParameter_FileFormatUnsupported
            case .invalidExtra:
                code = .invalidParameter_InvalidExtra
            case .invalidTaskType:
                code = .invalidParameter_InvalidTaskType
            case .recordParameter:
                code = .invalidParameter_RecordParameter
            case .sdkAppIdNotFound:
                code = .invalidParameter_SdkAppIdNotFound
            case .taskNotFound:
                code = .invalidParameter_TaskNotFound
            case .timeFormat:
                code = .invalidParameter_TimeFormat
            case .transcodeParameter:
                code = .invalidParameter_TranscodeParameter
            case .unmarshalJSONBodyFail:
                code = .invalidParameter_UnmarshalJSONBodyFail
            case .urlFormatError:
                code = .invalidParameter_UrlFormatError
            case .other:
                code = .invalidParameter
            }
            return TCTiwError(code, context: self.context)
        }
    }
}
