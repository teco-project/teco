//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Tiw {
    /// 白板应用
    public struct ApplicationItem: TCOutputModel {
        /// 应用SdkAppId
        public let sdkAppId: Int64

        /// 应用名
        public let appName: String

        /// 创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 标签列表
        public let tagList: [Tag]

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case appName = "AppName"
            case createTime = "CreateTime"
            case tagList = "TagList"
        }
    }

    /// 鉴权参数
    public struct AuthParam: TCInputModel {
        /// 应用SdkAppId
        public let sdkAppId: Int64

        /// 用户ID
        public let userId: String

        /// 用户ID对应的签名
        public let userSig: String

        public init(sdkAppId: Int64, userId: String, userSig: String) {
            self.sdkAppId = sdkAppId
            self.userId = userId
            self.userSig = userSig
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case userId = "UserId"
            case userSig = "UserSig"
        }
    }

    /// 混流画布参数
    public struct Canvas: TCInputModel {
        /// 混流画布宽高配置
        public let layoutParams: LayoutParams

        /// 背景颜色，默认为黑色，格式为RGB格式，如红色为"#FF0000"
        public let backgroundColor: String?

        public init(layoutParams: LayoutParams, backgroundColor: String? = nil) {
            self.layoutParams = layoutParams
            self.backgroundColor = backgroundColor
        }

        enum CodingKeys: String, CodingKey {
            case layoutParams = "LayoutParams"
            case backgroundColor = "BackgroundColor"
        }
    }

    /// 实时录制视频拼接参数
    public struct Concat: TCInputModel {
        /// 是否开启拼接功能
        /// 在开启了视频拼接功能的情况下，实时录制服务会把同一个用户因为暂停导致的多段视频拼接成一个视频
        public let enabled: Bool

        /// 视频拼接时使用的垫片图片下载地址，不填默认用全黑的图片进行视频垫片
        public let image: String?

        public init(enabled: Bool, image: String? = nil) {
            self.enabled = enabled
            self.image = image
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case image = "Image"
        }
    }

    /// 自定义混流布局参数
    public struct CustomLayout: TCInputModel {
        /// 混流画布参数
        public let canvas: Canvas

        /// 流布局参数，每路流的布局不能超出画布区域
        public let inputStreamList: [StreamLayout]

        public init(canvas: Canvas, inputStreamList: [StreamLayout]) {
            self.canvas = canvas
            self.inputStreamList = inputStreamList
        }

        enum CodingKeys: String, CodingKey {
            case canvas = "Canvas"
            case inputStreamList = "InputStreamList"
        }
    }

    /// 画图数据，Time/Value/Details
    public struct DataItem: TCOutputModel {
        /// 时间
        /// 按月格式yyyy-mm
        /// 按天格式yyyy-mm-dd
        /// 按分钟格式 yyyy-mm-dd HH:MM:SS
        public let time: String

        /// 画图所需要的值
        public let value: Int64

        /// 各个具体指标的详情
        public let details: [Detail]

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case value = "Value"
            case details = "Details"
        }
    }

    /// 计费用量数据里，带不同指标Tag的详情
    public struct Detail: TCOutputModel {
        /// 用量指标
        public let tagName: String

        /// 用量权重
        public let weight: Float

        /// 用量的值
        public let value: Float

        enum CodingKeys: String, CodingKey {
            case tagName = "TagName"
            case weight = "Weight"
            case value = "Value"
        }
    }

    /// 实时录制中出现的用户视频流断流次数统计
    public struct Interrupt: TCOutputModel {
        /// 用户ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userId: String?

        /// 视频流断流次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: Int64?

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case count = "Count"
        }
    }

    /// 自定义混流配置布局参数
    public struct LayoutParams: TCInputModel {
        /// 流画面宽，取值范围[2,3000]
        public let width: Int64

        /// 流画面高，取值范围[2,3000]
        public let height: Int64

        /// 当前画面左上角顶点相对于Canvas左上角顶点的x轴偏移量，默认为0，取值范围[0,3000]
        public let x: Int64?

        /// 当前画面左上角顶点相对于Canvas左上角顶点的y轴偏移量，默认为0， 取值范围[0,3000]
        public let y: Int64?

        /// 画面z轴位置，默认为0
        /// z轴确定了重叠画面的遮盖顺序，z轴值大的画面处于顶层
        public let zOrder: Int64?

        public init(width: Int64, height: Int64, x: Int64? = nil, y: Int64? = nil, zOrder: Int64? = nil) {
            self.width = width
            self.height = height
            self.x = x
            self.y = y
            self.zOrder = zOrder
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
            case x = "X"
            case y = "Y"
            case zOrder = "ZOrder"
        }
    }

    /// 混流配置
    public struct MixStream: TCInputModel {
        /// 是否开启混流
        public let enabled: Bool

        /// 是否禁用音频混流
        public let disableAudio: Bool?

        /// 内置混流布局模板ID, 取值 [1, 2], 区别见内置混流布局模板样式示例说明
        /// 在没有填Custom字段时候，ModelId是必填的
        public let modelId: Int64?

        /// 老师用户ID
        /// 此字段只有在ModelId填了的情况下生效
        /// 填写TeacherId的效果是把指定为TeacherId的用户视频流显示在内置模板的第一个小画面中
        public let teacherId: String?

        /// 自定义混流布局参数
        /// 当此字段存在时，ModelId 及 TeacherId 字段将被忽略
        public let custom: CustomLayout?

        public init(enabled: Bool, disableAudio: Bool? = nil, modelId: Int64? = nil, teacherId: String? = nil, custom: CustomLayout? = nil) {
            self.enabled = enabled
            self.disableAudio = disableAudio
            self.modelId = modelId
            self.teacherId = teacherId
            self.custom = custom
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case disableAudio = "DisableAudio"
            case modelId = "ModelId"
            case teacherId = "TeacherId"
            case custom = "Custom"
        }
    }

    /// 拼接视频中被忽略的时间段
    public struct OmittedDuration: TCOutputModel {
        /// 录制暂停时间戳对应的视频播放时间(单位: 毫秒)
        public let videoTime: Int64

        /// 录制暂停时间戳(单位: 毫秒)
        public let pauseTime: Int64

        /// 录制恢复时间戳(单位: 毫秒)
        public let resumeTime: Int64

        enum CodingKeys: String, CodingKey {
            case videoTime = "VideoTime"
            case pauseTime = "PauseTime"
            case resumeTime = "ResumeTime"
        }
    }

    /// PPT错误元素
    public struct PPTErr: TCOutputModel {
        /// 元素名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 0: 不支持的墨迹类型，1: 不支持自动翻页，2: 存在已损坏音视频，3: 存在不可访问资源，4: 只读文件
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 错误详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
            case detail = "Detail"
        }
    }

    /// PPT错误页面列表
    public struct PPTErrSlide: TCOutputModel {
        /// 异常元素存在的页面，由页面类型+页码组成，页码类型包括：幻灯片、幻灯片母版、幻灯片布局等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let page: String?

        /// 错误元素列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errs: [PPTErr]?

        enum CodingKeys: String, CodingKey {
            case page = "Page"
            case errs = "Errs"
        }
    }

    /// 录制控制参数， 用于指定全局录制控制及具体流录制控制参数，比如设置需要对哪些流进行录制，是否只录制小画面等
    public struct RecordControl: TCInputModel {
        /// 设置是否开启录制控制参数，只有设置为true的时候，录制控制参数才生效。
        public let enabled: Bool

        /// 设置是否禁用录制的全局控制参数。一般与`StreamControls`参数配合使用。
        ///
        /// true - 所有流都不录制。
        /// false - 所有流都录制。默认为false。
        ///
        /// 这里的设置对所有流都生效，如果同时在 `StreamControls` 列表中针对指定流设置了控制参数，则优先采用`StreamControls`中设置的控制参数。
        public let disableRecord: Bool?

        /// 设置是否禁用所有流的音频录制的全局控制参数。一般与`StreamControls`参数配合使用。
        ///
        /// true - 所有流的录制都不对音频进行录制。
        /// false - 所有流的录制都需要对音频进行录制。默认为false。
        ///
        /// 这里的设置对所有流都生效，如果同时在 `StreamControls` 列表中针对指定流设置了控制参数，则优先采用`StreamControls`中设置的控制参数。
        public let disableAudio: Bool?

        /// 设置是否所有流都只录制小画面的全局控制参数。一般与`StreamControls`参数配合使用。
        ///
        /// true - 所有流都只录制小画面。设置为true时，请确保上行端在推流的时候同时上行了小画面，否则录制视频可能是黑屏。
        /// false - 所有流都录制大画面，默认为false。
        ///
        /// 这里的设置对所有流都生效，如果同时在 `StreamControls` 列表中针对指定流设置了控制参数，则优先采用`StreamControls`中设置的控制参数。
        public let pullSmallVideo: Bool?

        /// 针对具体流指定控制参数，如果列表为空，则所有流采用全局配置的控制参数进行录制。列表不为空，则列表中指定的流将优先按此列表指定的控制参数进行录制。
        public let streamControls: [StreamControl]?

        public init(enabled: Bool, disableRecord: Bool? = nil, disableAudio: Bool? = nil, pullSmallVideo: Bool? = nil, streamControls: [StreamControl]? = nil) {
            self.enabled = enabled
            self.disableRecord = disableRecord
            self.disableAudio = disableAudio
            self.pullSmallVideo = pullSmallVideo
            self.streamControls = streamControls
        }

        enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case disableRecord = "DisableRecord"
            case disableAudio = "DisableAudio"
            case pullSmallVideo = "PullSmallVideo"
            case streamControls = "StreamControls"
        }
    }

    /// 实时录制结果
    public struct RecordTaskResult: TCOutputModel {
        /// AUTO - 自动停止录制， USER_CALL - 用户主动调用停止录制
        public let finishReason: String

        /// 异常数
        public let exceptionCnt: Int64

        /// 房间号
        public let roomId: Int64

        /// 分组
        public let groupId: String

        /// 录制真实开始时间
        public let recordStartTime: Int64

        /// 录制结束时间
        public let recordStopTime: Int64

        /// 录制总时长
        public let totalTime: Int64

        /// 视频信息列表
        public let videoInfos: [VideoInfo]

        /// 被忽略的视频时间段
        public let omittedDurations: [OmittedDuration]

        /// 详情
        public let details: String

        /// 任务失败错误码
        public let errorCode: Int64

        /// 错误信息
        public let errorMsg: String

        enum CodingKeys: String, CodingKey {
            case finishReason = "FinishReason"
            case exceptionCnt = "ExceptionCnt"
            case roomId = "RoomId"
            case groupId = "GroupId"
            case recordStartTime = "RecordStartTime"
            case recordStopTime = "RecordStopTime"
            case totalTime = "TotalTime"
            case videoInfos = "VideoInfos"
            case omittedDurations = "OmittedDurations"
            case details = "Details"
            case errorCode = "ErrorCode"
            case errorMsg = "ErrorMsg"
        }
    }

    /// 实时录制任务搜索结果
    public struct RecordTaskSearchResult: TCOutputModel {
        /// 任务唯一ID
        public let taskId: String

        /// 实时录制任务状态
        /// - PAUSED: 录制已暂停
        /// - PREPARED: 录制在准备阶段
        /// - RECORDING: 正在录制
        /// - STOPPED：录制已停止
        /// - FINISHED: 录制已结束
        public let status: String

        /// 实时录制房间号
        public let roomId: Int64

        /// 任务创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 用户应用SdkAppId
        public let sdkAppId: Int64

        /// 实时录制结果
        public let result: RecordTaskResult

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case roomId = "RoomId"
            case createTime = "CreateTime"
            case sdkAppId = "SdkAppId"
            case result = "Result"
        }
    }

    /// 日志查询里返回的白板房间数据
    public struct RoomListItem: TCInputModel, TCOutputModel {
        /// 房间ID
        public let roomId: String

        /// 房间在查询时间段内最早出现的时间，Unix时间戳，单位毫秒
        public let startTime: Int64

        /// 房间在查询时间段内最晚出现的时间，Unix时间戳，单位毫秒
        public let endTime: Int64

        /// 房间里成员数
        public let userNumber: Int64

        public init(roomId: String, startTime: Int64, endTime: Int64, userNumber: Int64) {
            self.roomId = roomId
            self.startTime = startTime
            self.endTime = endTime
            self.userNumber = userNumber
        }

        enum CodingKeys: String, CodingKey {
            case roomId = "RoomId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case userNumber = "UserNumber"
        }
    }

    /// 互动白板房间用量信息
    public struct RoomUsageDataItem: TCOutputModel {
        /// 日期，格式为YYYY-MM-DD
        public let time: String

        /// 白板应用SDKAppID
        public let sdkAppId: Int64

        /// 互动白板子产品，请求参数传入的一致
        /// - sp_tiw_board: 互动白板时长
        /// - sp_tiw_ric: 实时录制时长
        public let subProduct: String

        /// 用量值
        /// - 白板时长、实时录制时长单位为分钟
        public let value: Float

        /// 互动白板房间号
        public let roomID: UInt64

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case sdkAppId = "SdkAppId"
            case subProduct = "SubProduct"
            case value = "Value"
            case roomID = "RoomID"
        }
    }

    /// 正在运行的任务列表项
    public struct RunningTaskItem: TCOutputModel {
        /// 应用SdkAppID
        public let sdkAppID: Int64?

        /// 任务ID
        public let taskID: String?

        /// 任务类型
        /// - TranscodeH5: 动态转码任务，文档转HTML5页面
        /// - TranscodeJPG: 静态转码任务，文档转图片
        /// - WhiteboardPush: 白板推流任务
        /// - OnlineRecord: 实时录制任务
        public let taskType: String?

        /// 任务创建时间
        public let createTime: String?

        /// 任务取消时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cancelTime: String?

        /// 任务状态
        /// - QUEUED: 任务正在排队等待执行中
        /// - PROCESSING: 任务正在执行中
        /// - FINISHED: 任务已完成
        public let status: String?

        /// 任务当前进度
        public let progress: Int64?

        /// 转码任务中转码文件的原始URL
        /// 此参数只有任务类型为TranscodeH5、TranscodeJPG类型时才会有有效值。其他任务类型为空字符串。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fileURL: String?

        /// 房间号
        ///
        /// 当任务类型为TranscodeH5、TranscodeJPG时，房间号为0。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roomID: Int64?

        enum CodingKeys: String, CodingKey {
            case sdkAppID = "SdkAppID"
            case taskID = "TaskID"
            case taskType = "TaskType"
            case createTime = "CreateTime"
            case cancelTime = "CancelTime"
            case status = "Status"
            case progress = "Progress"
            case fileURL = "FileURL"
            case roomID = "RoomID"
        }
    }

    /// 板书文件存储cos参数
    public struct SnapshotCOS: TCInputModel {
        /// cos所在腾讯云账号uin
        public let uin: UInt64

        /// cos所在地区
        public let region: String

        /// cos存储桶名称
        public let bucket: String

        /// 板书文件存储根目录
        public let targetDir: String?

        /// CDN加速域名
        public let domain: String?

        public init(uin: UInt64, region: String, bucket: String, targetDir: String? = nil, domain: String? = nil) {
            self.uin = uin
            self.region = region
            self.bucket = bucket
            self.targetDir = targetDir
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case uin = "Uin"
            case region = "Region"
            case bucket = "Bucket"
            case targetDir = "TargetDir"
            case domain = "Domain"
        }
    }

    /// 白板板书结果
    public struct SnapshotResult: TCOutputModel {
        /// 任务执行错误码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorCode: String?

        /// 任务执行错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMessage: String?

        /// 快照生成图片总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?

        /// 快照图片链接列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let snapshots: [String]?

        enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case total = "Total"
            case snapshots = "Snapshots"
        }
    }

    /// 生成白板板书时的白板参数，例如白板宽高等
    public struct SnapshotWhiteboard: TCInputModel {
        /// 白板宽度大小，默认为1280，有效取值范围[0，2560]
        public let width: UInt64?

        /// 白板高度大小，默认为720，有效取值范围[0，2560]
        public let height: UInt64?

        /// 白板初始化参数的JSON转义字符串，透传到白板 SDK
        public let initParams: String?

        public init(width: UInt64? = nil, height: UInt64? = nil, initParams: String? = nil) {
            self.width = width
            self.height = height
            self.initParams = initParams
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
            case initParams = "InitParams"
        }
    }

    /// 指定流录制的控制参数，比如是否禁用音频、视频是录制大画面还是录制小画面等
    public struct StreamControl: TCInputModel {
        /// 视频流ID
        /// 视频流ID的取值含义如下：
        /// 1. tic_record_user - 表示白板视频流
        /// 2. tic_substream - 表示辅路视频流
        /// 3. 特定用户ID - 表示指定用户的视频流
        ///
        /// 在实际录制过程中，视频流ID的匹配规则为前缀匹配，只要真实流ID的前缀与指定的流ID一致就认为匹配成功。
        public let streamId: String

        /// 设置是否对此路流开启录制。
        ///
        /// true - 表示不对这路流进行录制，录制结果将不包含这路流的视频。
        /// false - 表示需要对这路流进行录制，录制结果会包含这路流的视频。
        ///
        /// 默认为 false。
        public let disableRecord: Bool?

        /// 设置是否禁用这路流的音频录制。
        ///
        /// true - 表示不对这路流的音频进行录制，录制结果里这路流的视频将会没有声音。
        /// false - 录制视频会保留音频，如果设置为true，则录制视频会丢弃这路流的音频。
        ///
        /// 默认为 false。
        public let disableAudio: Bool?

        /// 设置当前流录制视频是否只录制小画面。
        ///
        /// true - 录制小画面。设置为true时，请确保上行端同时上行了小画面，否则录制视频可能是黑屏。
        /// false - 录制大画面。
        ///
        /// 默认为 false。
        public let pullSmallVideo: Bool?

        public init(streamId: String, disableRecord: Bool? = nil, disableAudio: Bool? = nil, pullSmallVideo: Bool? = nil) {
            self.streamId = streamId
            self.disableRecord = disableRecord
            self.disableAudio = disableAudio
            self.pullSmallVideo = pullSmallVideo
        }

        enum CodingKeys: String, CodingKey {
            case streamId = "StreamId"
            case disableRecord = "DisableRecord"
            case disableAudio = "DisableAudio"
            case pullSmallVideo = "PullSmallVideo"
        }
    }

    /// 流布局参数
    public struct StreamLayout: TCInputModel {
        /// 流布局配置参数
        public let layoutParams: LayoutParams

        /// 视频流ID
        /// 流ID的取值含义如下：
        /// 1. tic_record_user - 表示当前画面用于显示白板视频流
        /// 2. tic_substream - 表示当前画面用于显示辅路视频流
        /// 3. 特定用户ID - 表示当前画面用于显示指定用户的视频流
        /// 4. 不填 - 表示当前画面用于备选，当有新的视频流加入时，会从这些备选的空位中选择一个没有被占用的位置来显示新的视频流画面
        public let inputStreamId: String?

        /// 背景颜色，默认为黑色，格式为RGB格式，如红色为"#FF0000"
        public let backgroundColor: String?

        /// 视频画面填充模式。
        ///
        /// 0 - 自适应模式，对视频画面进行等比例缩放，在指定区域内显示完整的画面。此模式可能存在黑边。
        /// 1 - 全屏模式，对视频画面进行等比例缩放，让画面填充满整个指定区域。此模式不会存在黑边，但会将超出区域的那一部分画面裁剪掉。
        public let fillMode: Int64?

        public init(layoutParams: LayoutParams, inputStreamId: String? = nil, backgroundColor: String? = nil, fillMode: Int64? = nil) {
            self.layoutParams = layoutParams
            self.inputStreamId = inputStreamId
            self.backgroundColor = backgroundColor
            self.fillMode = fillMode
        }

        enum CodingKeys: String, CodingKey {
            case layoutParams = "LayoutParams"
            case inputStreamId = "InputStreamId"
            case backgroundColor = "BackgroundColor"
            case fillMode = "FillMode"
        }
    }

    /// 标签
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 查询指标返回的时间序列
    public struct TimeValue: TCOutputModel {
        /// Unix时间戳，单位秒
        public let time: UInt64

        /// 查询指标对应当前时间的值
        public let value: Float

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case value = "Value"
        }
    }

    /// 转码任务结果
    public struct TranscodeTaskResult: TCOutputModel {
        /// 转码结果地址
        public let resultUrl: String

        /// 分辨率
        public let resolution: String

        /// 标题（一般为文件名）
        public let title: String

        /// 转码页数
        public let pages: Int64

        /// 缩略图URL前缀，比如，该URL前缀为http://example.com/g0jb42ps49vtebjshilb/，那么动态PPT第1页的缩略图URL为
        /// http://example.com/g0jb42ps49vtebjshilb/1.jpg，其它页以此类推
        ///
        /// 如果发起文档转码请求参数中带了ThumbnailResolution参数，并且转码类型为动态转码，该参数不为空，其余情况该参数为空字符串
        public let thumbnailUrl: String

        /// 动态转码缩略图生成分辨率
        public let thumbnailResolution: String

        /// 转码压缩文件下载的URL，如果发起文档转码请求参数中CompressFileType为空或者不是支持的压缩格式，该参数为空字符串
        public let compressFileUrl: String

        /// 任务失败错误码
        public let errorCode: Int64

        /// 任务失败错误信息
        public let errorMsg: String

        enum CodingKeys: String, CodingKey {
            case resultUrl = "ResultUrl"
            case resolution = "Resolution"
            case title = "Title"
            case pages = "Pages"
            case thumbnailUrl = "ThumbnailUrl"
            case thumbnailResolution = "ThumbnailResolution"
            case compressFileUrl = "CompressFileUrl"
            case errorCode = "ErrorCode"
            case errorMsg = "ErrorMsg"
        }
    }

    /// 转码任务搜索结果
    public struct TranscodeTaskSearchResult: TCOutputModel {
        /// 任务创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 任务唯一ID
        public let taskId: String

        /// 任务的当前状态
        /// - QUEUED: 正在排队等待转换
        /// - PROCESSING: 转换中
        /// - FINISHED: 转换完成
        public let status: String

        /// 转码文件原始名称
        public let originalFilename: String

        /// 用户应用SdkAppId
        public let sdkAppId: Int64

        /// 转码任务结果
        public let result: TranscodeTaskResult

        /// 是否静态转码
        public let isStatic: Bool

        enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case taskId = "TaskId"
            case status = "Status"
            case originalFilename = "OriginalFilename"
            case sdkAppId = "SdkAppId"
            case result = "Result"
            case isStatic = "IsStatic"
        }
    }

    /// 互动白板用量信息
    public struct UsageDataItem: TCOutputModel {
        /// 日期，格式为YYYY-MM-DD
        public let time: String

        /// 白板应用SDKAppID
        public let sdkAppId: Int64

        /// 互动白板子产品，请求参数传入的一致
        /// - sp_tiw_board: 互动白板时长
        /// - sp_tiw_dt: 动态转码页数
        /// - sp_tiw_st: 静态转码页数
        /// - sp_tiw_ric: 实时录制时长
        public let subProduct: String

        /// 用量值
        /// - 静态转码、动态转码单位为页
        /// - 白板时长、实时录制时长单位为分钟
        public let value: Float

        enum CodingKeys: String, CodingKey {
            case time = "Time"
            case sdkAppId = "SdkAppId"
            case subProduct = "SubProduct"
            case value = "Value"
        }
    }

    /// 日志查询里返回的白板用户数据
    public struct UserListItem: TCInputModel, TCOutputModel {
        /// 房间内的用户ID
        public let userId: String

        /// 用户在查询时间段内最早出现的时间，Unix时间戳，单位毫秒
        public let startTime: Int64

        /// 用户在查询时间段内最晚出现的时间，Unix时间戳，单位毫秒
        public let endTime: Int64

        public init(userId: String, startTime: Int64, endTime: Int64) {
            self.userId = userId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 视频信息
    public struct VideoInfo: TCOutputModel {
        /// 视频开始播放的时间（单位：毫秒）
        public let videoPlayTime: Int64

        /// 视频大小（字节）
        public let videoSize: Int64

        /// 视频格式
        public let videoFormat: String

        /// 视频播放时长（单位：毫秒）
        public let videoDuration: Int64

        /// 视频文件URL
        public let videoUrl: String

        /// 视频文件Id
        public let videoId: String

        /// 视频流类型
        /// - 0：摄像头视频
        /// - 1：屏幕分享视频
        /// - 2：白板视频
        /// - 3：混流视频
        /// - 4：纯音频（mp3)
        public let videoType: Int64

        /// 摄像头/屏幕分享视频所属用户的 Id（白板视频为空、混流视频tic_mixstream_房间号_混流布局类型、辅路视频tic_substream_用户Id）
        public let userId: String

        /// 视频分辨率的宽
        public let width: Int64

        /// 视频分辨率的高
        public let height: Int64

        enum CodingKeys: String, CodingKey {
            case videoPlayTime = "VideoPlayTime"
            case videoSize = "VideoSize"
            case videoFormat = "VideoFormat"
            case videoDuration = "VideoDuration"
            case videoUrl = "VideoUrl"
            case videoId = "VideoId"
            case videoType = "VideoType"
            case userId = "UserId"
            case width = "Width"
            case height = "Height"
        }
    }

    /// 实时录制白板参数，例如白板宽高等
    public struct Whiteboard: TCInputModel {
        /// 实时录制结果里白板视频宽，取值必须大于等于2，默认为1280
        public let width: Int64?

        /// 实时录制结果里白板视频高，取值必须大于等于2，默认为960
        public let height: Int64?

        /// 白板初始化参数，透传到白板 SDK
        public let initParam: String?

        public init(width: Int64? = nil, height: Int64? = nil, initParam: String? = nil) {
            self.width = width
            self.height = height
            self.initParam = initParam
        }

        enum CodingKeys: String, CodingKey {
            case width = "Width"
            case height = "Height"
            case initParam = "InitParam"
        }
    }

    /// 白板应用配置，包括资源存储桶，域名，回调地址，回调密钥等
    public struct WhiteboardApplicationConfig: TCInputModel, TCOutputModel {
        /// 任务类型
        ///
        /// recording: 实时录制
        /// transcode: 文档转码
        public let taskType: String

        /// 存储桶名字
        public let bucketName: String

        /// 存储桶地域
        public let bucketLocation: String

        /// 资源在存储桶中的前缀
        public let bucketPrefix: String

        /// 目标CDN域名
        public let resultDomain: String

        /// 回调地址
        public let callback: String

        /// 回调鉴权密钥
        public let callbackKey: String

        /// 配置的应用SdkAppId
        public let sdkAppId: Int64?

        /// IM管理员UserId
        public let adminUserId: String?

        /// IM管理员UserSig
        public let adminUserSig: String?

        public init(taskType: String, bucketName: String, bucketLocation: String, bucketPrefix: String, resultDomain: String, callback: String, callbackKey: String, sdkAppId: Int64? = nil, adminUserId: String? = nil, adminUserSig: String? = nil) {
            self.taskType = taskType
            self.bucketName = bucketName
            self.bucketLocation = bucketLocation
            self.bucketPrefix = bucketPrefix
            self.resultDomain = resultDomain
            self.callback = callback
            self.callbackKey = callbackKey
            self.sdkAppId = sdkAppId
            self.adminUserId = adminUserId
            self.adminUserSig = adminUserSig
        }

        enum CodingKeys: String, CodingKey {
            case taskType = "TaskType"
            case bucketName = "BucketName"
            case bucketLocation = "BucketLocation"
            case bucketPrefix = "BucketPrefix"
            case resultDomain = "ResultDomain"
            case callback = "Callback"
            case callbackKey = "CallbackKey"
            case sdkAppId = "SdkAppId"
            case adminUserId = "AdminUserId"
            case adminUserSig = "AdminUserSig"
        }
    }

    /// 白板推流备份相关请求参数
    public struct WhiteboardPushBackupParam: TCInputModel {
        /// 用于白板推流服务进房的用户ID，
        /// 该ID必须是一个单独的未在SDK中使用的ID，白板推流服务将使用这个用户ID进入房间进行白板推流，若该ID和SDK中使用的ID重复，会导致SDK和录制服务互踢，影响正常推流。
        public let pushUserId: String

        /// 与PushUserId对应的签名
        public let pushUserSig: String

        public init(pushUserId: String, pushUserSig: String) {
            self.pushUserId = pushUserId
            self.pushUserSig = pushUserSig
        }

        enum CodingKeys: String, CodingKey {
            case pushUserId = "PushUserId"
            case pushUserSig = "PushUserSig"
        }
    }

    /// 白板推流任务结果
    public struct WhiteboardPushResult: TCOutputModel {
        /// AUTO - 自动停止推流， USER_CALL - 用户主动调用停止推流
        public let finishReason: String

        /// 异常数
        public let exceptionCnt: Int64

        /// 房间号
        public let roomId: Int64

        /// IM群组ID
        public let groupId: String

        /// 推流真实开始时间
        public let pushStartTime: Int64

        /// 推流结束时间
        public let pushStopTime: Int64

        /// 白板推流首帧对应的IM时间戳，可用于录制回放时IM聊天消息与白板推流视频进行同步对时。
        public let imSyncTime: Int64

        /// 任务失败错误码
        public let errorCode: Int64

        /// 错误信息
        public let errorMsg: String

        enum CodingKeys: String, CodingKey {
            case finishReason = "FinishReason"
            case exceptionCnt = "ExceptionCnt"
            case roomId = "RoomId"
            case groupId = "GroupId"
            case pushStartTime = "PushStartTime"
            case pushStopTime = "PushStopTime"
            case imSyncTime = "IMSyncTime"
            case errorCode = "ErrorCode"
            case errorMsg = "ErrorMsg"
        }
    }

    /// 实时录制任务搜索结果
    public struct WhiteboardPushTaskSearchResult: TCOutputModel {
        /// 任务唯一ID
        public let taskId: String

        /// 白板推流任务状态
        /// - PREPARED: 推流在准备阶段
        /// - PUSHING: 正在推流
        /// - STOPPED：推流已停止
        public let status: String

        /// 白板推流房间号
        public let roomId: Int64

        /// 任务创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date

        /// 用户应用SdkAppId
        public let sdkAppId: Int64

        /// 白板推流结果
        public let result: WhiteboardPushResult

        /// 白板推流用户ID
        public let pushUserId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case roomId = "RoomId"
            case createTime = "CreateTime"
            case sdkAppId = "SdkAppId"
            case result = "Result"
            case pushUserId = "PushUserId"
        }
    }
}
