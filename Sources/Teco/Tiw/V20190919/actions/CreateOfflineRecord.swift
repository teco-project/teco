//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tiw {
    /// CreateOfflineRecord请求参数结构体
    public struct CreateOfflineRecordRequest: TCRequestModel {
        /// 客户的SdkAppId
        public let sdkAppId: Int64

        /// 录制任务对应的房间号
        public let roomId: Int64

        /// 录制任务对应的群组Id
        public let groupId: String?

        /// 混流参数配置
        /// 目前课后录制暂未支持自定义混流布局Custom参数
        public let mixStream: MixStream?

        /// 白板参数配置
        public let whiteboard: Whiteboard?

        public init(sdkAppId: Int64, roomId: Int64, groupId: String? = nil, mixStream: MixStream? = nil, whiteboard: Whiteboard? = nil) {
            self.sdkAppId = sdkAppId
            self.roomId = roomId
            self.groupId = groupId
            self.mixStream = mixStream
            self.whiteboard = whiteboard
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case roomId = "RoomId"
            case groupId = "GroupId"
            case mixStream = "MixStream"
            case whiteboard = "Whiteboard"
        }
    }

    /// CreateOfflineRecord返回参数结构体
    public struct CreateOfflineRecordResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建课后录制任务
    @inlinable @discardableResult
    public func createOfflineRecord(_ input: CreateOfflineRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOfflineRecordResponse> {
        self.client.execute(action: "CreateOfflineRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建课后录制任务
    @inlinable @discardableResult
    public func createOfflineRecord(_ input: CreateOfflineRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOfflineRecordResponse {
        try await self.client.execute(action: "CreateOfflineRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建课后录制任务
    @inlinable @discardableResult
    public func createOfflineRecord(sdkAppId: Int64, roomId: Int64, groupId: String? = nil, mixStream: MixStream? = nil, whiteboard: Whiteboard? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOfflineRecordResponse> {
        self.createOfflineRecord(.init(sdkAppId: sdkAppId, roomId: roomId, groupId: groupId, mixStream: mixStream, whiteboard: whiteboard), region: region, logger: logger, on: eventLoop)
    }

    /// 创建课后录制任务
    @inlinable @discardableResult
    public func createOfflineRecord(sdkAppId: Int64, roomId: Int64, groupId: String? = nil, mixStream: MixStream? = nil, whiteboard: Whiteboard? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOfflineRecordResponse {
        try await self.createOfflineRecord(.init(sdkAppId: sdkAppId, roomId: roomId, groupId: groupId, mixStream: mixStream, whiteboard: whiteboard), region: region, logger: logger, on: eventLoop)
    }
}
