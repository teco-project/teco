//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribeWhiteboardApplicationConfig请求参数结构体
    public struct DescribeWhiteboardApplicationConfigRequest: TCRequestModel {
        /// 客户的SdkAppId
        public let sdkAppId: Int64

        /// 需要查询的任务类型
        /// recording: 实时录制
        /// transcode: 文档转码
        public let taskTypes: [String]

        /// 需要查询配置的SdkAppId列表
        public let sdkAppIds: [Int64]?

        public init(sdkAppId: Int64, taskTypes: [String], sdkAppIds: [Int64]? = nil) {
            self.sdkAppId = sdkAppId
            self.taskTypes = taskTypes
            self.sdkAppIds = sdkAppIds
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case taskTypes = "TaskTypes"
            case sdkAppIds = "SdkAppIds"
        }
    }

    /// DescribeWhiteboardApplicationConfig返回参数结构体
    public struct DescribeWhiteboardApplicationConfigResponse: TCResponseModel {
        /// 客户的SdkAppId
        public let sdkAppId: Int64

        /// 白板应用任务相关配置
        public let configs: [WhiteboardApplicationConfig]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case configs = "Configs"
            case requestId = "RequestId"
        }
    }

    /// 查询白板应用任务相关配置
    ///
    /// 查询白板应用任务相关的配置，包括存储桶、回调等
    @inlinable
    public func describeWhiteboardApplicationConfig(_ input: DescribeWhiteboardApplicationConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWhiteboardApplicationConfigResponse> {
        self.client.execute(action: "DescribeWhiteboardApplicationConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询白板应用任务相关配置
    ///
    /// 查询白板应用任务相关的配置，包括存储桶、回调等
    @inlinable
    public func describeWhiteboardApplicationConfig(_ input: DescribeWhiteboardApplicationConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWhiteboardApplicationConfigResponse {
        try await self.client.execute(action: "DescribeWhiteboardApplicationConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询白板应用任务相关配置
    ///
    /// 查询白板应用任务相关的配置，包括存储桶、回调等
    @inlinable
    public func describeWhiteboardApplicationConfig(sdkAppId: Int64, taskTypes: [String], sdkAppIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWhiteboardApplicationConfigResponse> {
        self.describeWhiteboardApplicationConfig(.init(sdkAppId: sdkAppId, taskTypes: taskTypes, sdkAppIds: sdkAppIds), region: region, logger: logger, on: eventLoop)
    }

    /// 查询白板应用任务相关配置
    ///
    /// 查询白板应用任务相关的配置，包括存储桶、回调等
    @inlinable
    public func describeWhiteboardApplicationConfig(sdkAppId: Int64, taskTypes: [String], sdkAppIds: [Int64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWhiteboardApplicationConfigResponse {
        try await self.describeWhiteboardApplicationConfig(.init(sdkAppId: sdkAppId, taskTypes: taskTypes, sdkAppIds: sdkAppIds), region: region, logger: logger, on: eventLoop)
    }
}
