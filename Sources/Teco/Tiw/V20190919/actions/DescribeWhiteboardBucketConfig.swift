//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribeWhiteboardBucketConfig请求参数结构体
    public struct DescribeWhiteboardBucketConfigRequest: TCRequestModel {
        /// 客户的SdkAppId
        public let sdkAppId: Int64

        /// 需要查询的任务类型
        /// recording: 实时录制
        /// transcode: 文档转码
        public let taskType: String

        public init(sdkAppId: Int64, taskType: String) {
            self.sdkAppId = sdkAppId
            self.taskType = taskType
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case taskType = "TaskType"
        }
    }

    /// DescribeWhiteboardBucketConfig返回参数结构体
    public struct DescribeWhiteboardBucketConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 查询应用资源配置
    ///
    /// 查询文档转码，实时录制存储桶的配置
    @inlinable @discardableResult
    public func describeWhiteboardBucketConfig(_ input: DescribeWhiteboardBucketConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWhiteboardBucketConfigResponse> {
        self.client.execute(action: "DescribeWhiteboardBucketConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询应用资源配置
    ///
    /// 查询文档转码，实时录制存储桶的配置
    @inlinable @discardableResult
    public func describeWhiteboardBucketConfig(_ input: DescribeWhiteboardBucketConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWhiteboardBucketConfigResponse {
        try await self.client.execute(action: "DescribeWhiteboardBucketConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询应用资源配置
    ///
    /// 查询文档转码，实时录制存储桶的配置
    @inlinable @discardableResult
    public func describeWhiteboardBucketConfig(sdkAppId: Int64, taskType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeWhiteboardBucketConfigResponse> {
        self.describeWhiteboardBucketConfig(.init(sdkAppId: sdkAppId, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询应用资源配置
    ///
    /// 查询文档转码，实时录制存储桶的配置
    @inlinable @discardableResult
    public func describeWhiteboardBucketConfig(sdkAppId: Int64, taskType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeWhiteboardBucketConfigResponse {
        try await self.describeWhiteboardBucketConfig(.init(sdkAppId: sdkAppId, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }
}
