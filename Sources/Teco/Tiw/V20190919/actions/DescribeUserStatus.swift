//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribeUserStatus请求参数结构体
    public struct DescribeUserStatusRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeUserStatus返回参数结构体
    public struct DescribeUserStatusResponse: TCResponseModel {
        /// 客户的AppId
        public let appId: Int64

        /// 是否开通过白板（试用或正式）
        ///
        /// 0: 从未开通过白板服务
        /// 1: 已经开通过白板服务
        public let isTiwUser: Int64

        /// 是否开通过互动课堂（试用或正式）
        public let isSaaSUser: Int64

        /// 是否使用白板的课后录制
        public let isTiwOfflineRecordUser: Int64

        /// 用户是否实名认证
        public let isAuthenticated: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case isTiwUser = "IsTiwUser"
            case isSaaSUser = "IsSaaSUser"
            case isTiwOfflineRecordUser = "IsTiwOfflineRecordUser"
            case isAuthenticated = "IsAuthenticated"
            case requestId = "RequestId"
        }
    }

    /// 查询互动白板用户详情
    ///
    /// 查询互动白板用户详情，包括是否开通了互动白板，当前互动白板服务有效期等信息
    @inlinable
    public func describeUserStatus(_ input: DescribeUserStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUserStatusResponse> {
        self.client.execute(action: "DescribeUserStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询互动白板用户详情
    ///
    /// 查询互动白板用户详情，包括是否开通了互动白板，当前互动白板服务有效期等信息
    @inlinable
    public func describeUserStatus(_ input: DescribeUserStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUserStatusResponse {
        try await self.client.execute(action: "DescribeUserStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询互动白板用户详情
    ///
    /// 查询互动白板用户详情，包括是否开通了互动白板，当前互动白板服务有效期等信息
    @inlinable
    public func describeUserStatus(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUserStatusResponse> {
        self.describeUserStatus(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询互动白板用户详情
    ///
    /// 查询互动白板用户详情，包括是否开通了互动白板，当前互动白板服务有效期等信息
    @inlinable
    public func describeUserStatus(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUserStatusResponse {
        try await self.describeUserStatus(.init(), region: region, logger: logger, on: eventLoop)
    }
}
