//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// ModifyWhiteboardApplicationConfig请求参数结构体
    public struct ModifyWhiteboardApplicationConfigRequest: TCRequestModel {
        /// 客户的SdkAppId
        public let sdkAppId: Int64

        /// 白板应用任务相关配置
        public let configs: [WhiteboardApplicationConfig]

        public init(sdkAppId: Int64, configs: [WhiteboardApplicationConfig]) {
            self.sdkAppId = sdkAppId
            self.configs = configs
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case configs = "Configs"
        }
    }

    /// ModifyWhiteboardApplicationConfig返回参数结构体
    public struct ModifyWhiteboardApplicationConfigResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改白板应用任务相关配置
    ///
    /// 修改白板应用任务相关的配置，包括存储桶、回调等
    @inlinable @discardableResult
    public func modifyWhiteboardApplicationConfig(_ input: ModifyWhiteboardApplicationConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyWhiteboardApplicationConfigResponse> {
        self.client.execute(action: "ModifyWhiteboardApplicationConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改白板应用任务相关配置
    ///
    /// 修改白板应用任务相关的配置，包括存储桶、回调等
    @inlinable @discardableResult
    public func modifyWhiteboardApplicationConfig(_ input: ModifyWhiteboardApplicationConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyWhiteboardApplicationConfigResponse {
        try await self.client.execute(action: "ModifyWhiteboardApplicationConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改白板应用任务相关配置
    ///
    /// 修改白板应用任务相关的配置，包括存储桶、回调等
    @inlinable @discardableResult
    public func modifyWhiteboardApplicationConfig(sdkAppId: Int64, configs: [WhiteboardApplicationConfig], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyWhiteboardApplicationConfigResponse> {
        self.modifyWhiteboardApplicationConfig(.init(sdkAppId: sdkAppId, configs: configs), region: region, logger: logger, on: eventLoop)
    }

    /// 修改白板应用任务相关配置
    ///
    /// 修改白板应用任务相关的配置，包括存储桶、回调等
    @inlinable @discardableResult
    public func modifyWhiteboardApplicationConfig(sdkAppId: Int64, configs: [WhiteboardApplicationConfig], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyWhiteboardApplicationConfigResponse {
        try await self.modifyWhiteboardApplicationConfig(.init(sdkAppId: sdkAppId, configs: configs), region: region, logger: logger, on: eventLoop)
    }
}
