//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Tiw {
    /// DescribeUsageSummary请求参数结构体
    public struct DescribeUsageSummaryRequest: TCRequestModel {
        /// 统计时间段的开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var beginTime: Date

        /// 统计时间段的结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 需要获取用量的子产品列表
        public let subProducts: [String]

        /// true: 返回加权后的数据
        /// false: 返回原始数据
        public let isWeighted: Bool?

        public init(beginTime: Date, endTime: Date, subProducts: [String], isWeighted: Bool? = nil) {
            self._beginTime = .init(wrappedValue: beginTime)
            self._endTime = .init(wrappedValue: endTime)
            self.subProducts = subProducts
            self.isWeighted = isWeighted
        }

        enum CodingKeys: String, CodingKey {
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case subProducts = "SubProducts"
            case isWeighted = "IsWeighted"
        }
    }

    /// DescribeUsageSummary返回参数结构体
    public struct DescribeUsageSummaryResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 查询子产品用量统计
    ///
    /// 查询指定时间段内子产品的用量汇总
    @inlinable @discardableResult
    public func describeUsageSummary(_ input: DescribeUsageSummaryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUsageSummaryResponse> {
        self.client.execute(action: "DescribeUsageSummary", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询子产品用量统计
    ///
    /// 查询指定时间段内子产品的用量汇总
    @inlinable @discardableResult
    public func describeUsageSummary(_ input: DescribeUsageSummaryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUsageSummaryResponse {
        try await self.client.execute(action: "DescribeUsageSummary", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询子产品用量统计
    ///
    /// 查询指定时间段内子产品的用量汇总
    @inlinable @discardableResult
    public func describeUsageSummary(beginTime: Date, endTime: Date, subProducts: [String], isWeighted: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUsageSummaryResponse> {
        self.describeUsageSummary(.init(beginTime: beginTime, endTime: endTime, subProducts: subProducts, isWeighted: isWeighted), region: region, logger: logger, on: eventLoop)
    }

    /// 查询子产品用量统计
    ///
    /// 查询指定时间段内子产品的用量汇总
    @inlinable @discardableResult
    public func describeUsageSummary(beginTime: Date, endTime: Date, subProducts: [String], isWeighted: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUsageSummaryResponse {
        try await self.describeUsageSummary(.init(beginTime: beginTime, endTime: endTime, subProducts: subProducts, isWeighted: isWeighted), region: region, logger: logger, on: eventLoop)
    }
}
