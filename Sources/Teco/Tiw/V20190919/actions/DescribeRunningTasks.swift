//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Tiw {
    /// DescribeRunningTasks请求参数结构体
    public struct DescribeRunningTasksRequest: TCPaginatedRequest {
        /// 应用的SdkAppID
        public let sdkAppID: Int64

        /// 指定需要获取的任务类型。
        /// 有效取值如下：
        /// - TranscodeH5: 动态转码任务，文档转HTML5页面
        /// - TranscodeJPG: 静态转码任务，文档转图片
        /// - WhiteboardPush: 白板推流任务
        /// - OnlineRecord: 实时录制任务
        public let taskType: String

        /// 分页获取时的任务偏移量，默认为0。
        public let offset: Int64?

        /// 每次获取任务列表时最大获取任务数，默认值为100。
        /// 有效取值范围：[1, 500]
        public let limit: Int64?

        public init(sdkAppID: Int64, taskType: String, offset: Int64? = nil, limit: Int64? = nil) {
            self.sdkAppID = sdkAppID
            self.taskType = taskType
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppID = "SdkAppID"
            case taskType = "TaskType"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeRunningTasksResponse) -> DescribeRunningTasksRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeRunningTasksRequest(sdkAppID: self.sdkAppID, taskType: self.taskType, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeRunningTasks返回参数结构体
    public struct DescribeRunningTasksResponse: TCPaginatedResponse {
        /// 当前正在执行中的任务总数
        public let total: Int64

        /// 任务信息列表
        public let tasks: [RunningTaskItem]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case tasks = "Tasks"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [RunningTaskItem] {
            self.tasks
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 查询当前执行中的任务列表
    ///
    /// 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
    @inlinable
    public func describeRunningTasks(_ input: DescribeRunningTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRunningTasksResponse> {
        self.client.execute(action: "DescribeRunningTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询当前执行中的任务列表
    ///
    /// 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
    @inlinable
    public func describeRunningTasks(_ input: DescribeRunningTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRunningTasksResponse {
        try await self.client.execute(action: "DescribeRunningTasks", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询当前执行中的任务列表
    ///
    /// 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
    @inlinable
    public func describeRunningTasks(sdkAppID: Int64, taskType: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRunningTasksResponse> {
        self.describeRunningTasks(.init(sdkAppID: sdkAppID, taskType: taskType, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询当前执行中的任务列表
    ///
    /// 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
    @inlinable
    public func describeRunningTasks(sdkAppID: Int64, taskType: String, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRunningTasksResponse {
        try await self.describeRunningTasks(.init(sdkAppID: sdkAppID, taskType: taskType, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询当前执行中的任务列表
    ///
    /// 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
    @inlinable
    public func describeRunningTasksPaginated(_ input: DescribeRunningTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [RunningTaskItem])> {
        self.client.paginate(input: input, region: region, command: self.describeRunningTasks, logger: logger, on: eventLoop)
    }

    /// 查询当前执行中的任务列表
    ///
    /// 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
    @inlinable @discardableResult
    public func describeRunningTasksPaginated(_ input: DescribeRunningTasksRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeRunningTasksResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeRunningTasks, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询当前执行中的任务列表
    ///
    /// 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
    ///
    /// - Returns: `AsyncSequence`s of `RunningTaskItem` and `DescribeRunningTasksResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeRunningTasksPaginator(_ input: DescribeRunningTasksRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeRunningTasksRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeRunningTasks, logger: logger, on: eventLoop)
    }
}
