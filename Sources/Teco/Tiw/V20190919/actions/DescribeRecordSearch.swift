//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tiw {
    /// DescribeRecordSearch请求参数结构体
    public struct DescribeRecordSearchRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeRecordSearch返回参数结构体
    public struct DescribeRecordSearchResponse: TCResponseModel {
        /// 录制任务搜索结果集合
        public let recordTaskSet: [RecordTaskSearchResult]

        /// 录制总任务数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case recordTaskSet = "RecordTaskSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 搜索实时录制任务
    ///
    /// 根据房间号搜索实时录制任务
    @inlinable
    public func describeRecordSearch(_ input: DescribeRecordSearchRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordSearchResponse> {
        self.client.execute(action: "DescribeRecordSearch", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 搜索实时录制任务
    ///
    /// 根据房间号搜索实时录制任务
    @inlinable
    public func describeRecordSearch(_ input: DescribeRecordSearchRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordSearchResponse {
        try await self.client.execute(action: "DescribeRecordSearch", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 搜索实时录制任务
    ///
    /// 根据房间号搜索实时录制任务
    @inlinable
    public func describeRecordSearch(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRecordSearchResponse> {
        self.describeRecordSearch(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 搜索实时录制任务
    ///
    /// 根据房间号搜索实时录制任务
    @inlinable
    public func describeRecordSearch(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRecordSearchResponse {
        try await self.describeRecordSearch(.init(), region: region, logger: logger, on: eventLoop)
    }
}
