//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribePPTCheckCallback请求参数结构体
    public struct DescribePPTCheckCallbackRequest: TCRequest {
        /// 应用的SdkAppId
        public let sdkAppId: Int64

        public init(sdkAppId: Int64) {
            self.sdkAppId = sdkAppId
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
        }
    }

    /// DescribePPTCheckCallback返回参数结构体
    public struct DescribePPTCheckCallbackResponse: TCResponse {
        /// 回调地址
        public let callback: String

        /// 回调鉴权密钥
        public let callbackKey: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case callback = "Callback"
            case callbackKey = "CallbackKey"
            case requestId = "RequestId"
        }
    }

    /// 查询PPT检测任务回调地址
    @inlinable
    public func describePPTCheckCallback(_ input: DescribePPTCheckCallbackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePPTCheckCallbackResponse> {
        self.client.execute(action: "DescribePPTCheckCallback", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询PPT检测任务回调地址
    @inlinable
    public func describePPTCheckCallback(_ input: DescribePPTCheckCallbackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePPTCheckCallbackResponse {
        try await self.client.execute(action: "DescribePPTCheckCallback", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询PPT检测任务回调地址
    @inlinable
    public func describePPTCheckCallback(sdkAppId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePPTCheckCallbackResponse> {
        self.describePPTCheckCallback(.init(sdkAppId: sdkAppId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询PPT检测任务回调地址
    @inlinable
    public func describePPTCheckCallback(sdkAppId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePPTCheckCallbackResponse {
        try await self.describePPTCheckCallback(.init(sdkAppId: sdkAppId), region: region, logger: logger, on: eventLoop)
    }
}
