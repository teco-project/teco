//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribePPTCheck请求参数结构体
    public struct DescribePPTCheckRequest: TCRequest {
        /// 客户的SdkAppId
        public let sdkAppId: Int64

        /// 任务的唯一标识Id
        public let taskId: String

        public init(sdkAppId: Int64, taskId: String) {
            self.sdkAppId = sdkAppId
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case taskId = "TaskId"
        }
    }

    /// DescribePPTCheck返回参数结构体
    public struct DescribePPTCheckResponse: TCResponse {
        /// 任务的唯一标识Id
        public let taskId: String

        /// PPT文件是否正常
        public let isOK: Bool

        /// 修复后的PPT URL，只有创建任务时参数AutoHandleUnsupportedElement=true，才返回此参数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultUrl: String?

        /// 错误PPT页面列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let slides: [PPTErrSlide]?

        /// 任务的当前状态 - QUEUED: 正在排队等待 - PROCESSING: 执行中 - FINISHED: 执行完成
        public let status: String

        /// 当前进度,取值范围为0~100
        public let progress: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case isOK = "IsOK"
            case resultUrl = "ResultUrl"
            case slides = "Slides"
            case status = "Status"
            case progress = "Progress"
            case requestId = "RequestId"
        }
    }

    /// 查询PPT检测任务状态
    ///
    /// 查询PPT检测任务的执行进度或结果
    @inlinable
    public func describePPTCheck(_ input: DescribePPTCheckRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePPTCheckResponse> {
        self.client.execute(action: "DescribePPTCheck", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询PPT检测任务状态
    ///
    /// 查询PPT检测任务的执行进度或结果
    @inlinable
    public func describePPTCheck(_ input: DescribePPTCheckRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePPTCheckResponse {
        try await self.client.execute(action: "DescribePPTCheck", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询PPT检测任务状态
    ///
    /// 查询PPT检测任务的执行进度或结果
    @inlinable
    public func describePPTCheck(sdkAppId: Int64, taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePPTCheckResponse> {
        self.describePPTCheck(.init(sdkAppId: sdkAppId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询PPT检测任务状态
    ///
    /// 查询PPT检测任务的执行进度或结果
    @inlinable
    public func describePPTCheck(sdkAppId: Int64, taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePPTCheckResponse {
        try await self.describePPTCheck(.init(sdkAppId: sdkAppId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
