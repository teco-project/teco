//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribeOnlineRecord请求参数结构体
    public struct DescribeOnlineRecordRequest: TCRequest {
        /// 客户的SdkAppId
        public let sdkAppId: Int64

        /// 实时录制任务Id
        public let taskId: String

        public init(sdkAppId: Int64, taskId: String) {
            self.sdkAppId = sdkAppId
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
            case taskId = "TaskId"
        }
    }

    /// DescribeOnlineRecord返回参数结构体
    public struct DescribeOnlineRecordResponse: TCResponse {
        /// 录制结束原因，
        /// - AUTO: 房间内长时间没有音视频上行及白板操作导致自动停止录制
        /// - USER_CALL: 主动调用了停止录制接口
        /// - EXCEPTION: 录制异常结束
        /// - FORCE_STOP: 强制停止录制，一般是因为暂停超过90分钟或者录制总时长超过24小时。
        public let finishReason: String

        /// 需要查询结果的录制任务Id
        public let taskId: String

        /// 录制任务状态
        /// - PREPARED: 表示录制正在准备中（进房/启动录制服务等操作）
        /// - RECORDING: 表示录制已开始
        /// - PAUSED: 表示录制已暂停
        /// - STOPPED: 表示录制已停止，正在处理并上传视频
        /// - FINISHED: 表示视频处理并上传完成，成功生成录制结果
        public let status: String

        /// 房间号
        public let roomId: Int64

        /// 白板的群组 Id
        public let groupId: String

        /// 录制用户Id
        public let recordUserId: String

        /// 实际开始录制时间，Unix 时间戳，单位秒
        public let recordStartTime: Int64

        /// 实际停止录制时间，Unix 时间戳，单位秒
        public let recordStopTime: Int64

        /// 回放视频总时长（单位：毫秒）
        public let totalTime: Int64

        /// 录制过程中出现异常的次数
        public let exceptionCnt: Int64

        /// 拼接视频中被忽略的时间段，只有开启视频拼接功能的时候，这个参数才是有效的
        public let omittedDurations: [OmittedDuration]

        /// 录制视频列表
        public let videoInfos: [VideoInfo]

        /// 回放URL，需配合信令播放器使用。此字段仅适用于`视频生成模式`
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replayUrl: String?

        /// 视频流在录制过程中断流次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let interrupts: [Interrupt]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case finishReason = "FinishReason"
            case taskId = "TaskId"
            case status = "Status"
            case roomId = "RoomId"
            case groupId = "GroupId"
            case recordUserId = "RecordUserId"
            case recordStartTime = "RecordStartTime"
            case recordStopTime = "RecordStopTime"
            case totalTime = "TotalTime"
            case exceptionCnt = "ExceptionCnt"
            case omittedDurations = "OmittedDurations"
            case videoInfos = "VideoInfos"
            case replayUrl = "ReplayUrl"
            case interrupts = "Interrupts"
            case requestId = "RequestId"
        }
    }

    /// 查询实时录制任务
    ///
    /// 查询录制任务状态与结果
    @inlinable
    public func describeOnlineRecord(_ input: DescribeOnlineRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOnlineRecordResponse> {
        self.client.execute(action: "DescribeOnlineRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实时录制任务
    ///
    /// 查询录制任务状态与结果
    @inlinable
    public func describeOnlineRecord(_ input: DescribeOnlineRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOnlineRecordResponse {
        try await self.client.execute(action: "DescribeOnlineRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实时录制任务
    ///
    /// 查询录制任务状态与结果
    @inlinable
    public func describeOnlineRecord(sdkAppId: Int64, taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOnlineRecordResponse> {
        self.describeOnlineRecord(.init(sdkAppId: sdkAppId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实时录制任务
    ///
    /// 查询录制任务状态与结果
    @inlinable
    public func describeOnlineRecord(sdkAppId: Int64, taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOnlineRecordResponse {
        try await self.describeOnlineRecord(.init(sdkAppId: sdkAppId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
