//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribeOfflineRecordCallback请求参数结构体
    public struct DescribeOfflineRecordCallbackRequest: TCRequest {
        /// 应用的SdkAppId
        public let sdkAppId: Int64

        public init(sdkAppId: Int64) {
            self.sdkAppId = sdkAppId
        }

        enum CodingKeys: String, CodingKey {
            case sdkAppId = "SdkAppId"
        }
    }

    /// DescribeOfflineRecordCallback返回参数结构体
    public struct DescribeOfflineRecordCallbackResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 查询回调地址
    ///
    /// 查询课后录制回调地址
    @available(*, unavailable, message: "课后录制服务已下线")
    @inlinable @discardableResult
    public func describeOfflineRecordCallback(_ input: DescribeOfflineRecordCallbackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOfflineRecordCallbackResponse> {
        fatalError("'DescribeOfflineRecordCallback' is no longer available.")
    }

    /// 查询回调地址
    ///
    /// 查询课后录制回调地址
    @available(*, unavailable, message: "课后录制服务已下线")
    @inlinable @discardableResult
    public func describeOfflineRecordCallback(_ input: DescribeOfflineRecordCallbackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOfflineRecordCallbackResponse {
        fatalError("'DescribeOfflineRecordCallback' is no longer available.")
    }

    /// 查询回调地址
    ///
    /// 查询课后录制回调地址
    @available(*, unavailable, message: "课后录制服务已下线")
    @inlinable @discardableResult
    public func describeOfflineRecordCallback(sdkAppId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOfflineRecordCallbackResponse> {
        fatalError("'DescribeOfflineRecordCallback' is no longer available.")
    }

    /// 查询回调地址
    ///
    /// 查询课后录制回调地址
    @available(*, unavailable, message: "课后录制服务已下线")
    @inlinable @discardableResult
    public func describeOfflineRecordCallback(sdkAppId: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOfflineRecordCallbackResponse {
        fatalError("'DescribeOfflineRecordCallback' is no longer available.")
    }
}
