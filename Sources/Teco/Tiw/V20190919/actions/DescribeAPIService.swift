//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tiw {
    /// DescribeAPIService请求参数结构体
    public struct DescribeAPIServiceRequest: TCRequestModel {
        /// 目前支持的Service为cos:GetService，cdn:DescribeDomainsConfig
        public let service: String

        /// JSON格式的请求参数
        public let data: String?

        public init(service: String, data: String? = nil) {
            self.service = service
            self.data = data
        }

        enum CodingKeys: String, CodingKey {
            case service = "Service"
            case data = "Data"
        }
    }

    /// DescribeAPIService返回参数结构体
    public struct DescribeAPIServiceResponse: TCResponseModel {
        /// Json格式的响应数据
        public let responseData: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case responseData = "ResponseData"
            case requestId = "RequestId"
        }
    }

    /// 获取其他云产品信息
    ///
    /// 通过服务角色调用其他云产品API接口获取信息
    @inlinable
    public func describeAPIService(_ input: DescribeAPIServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAPIServiceResponse> {
        self.client.execute(action: "DescribeAPIService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取其他云产品信息
    ///
    /// 通过服务角色调用其他云产品API接口获取信息
    @inlinable
    public func describeAPIService(_ input: DescribeAPIServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAPIServiceResponse {
        try await self.client.execute(action: "DescribeAPIService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取其他云产品信息
    ///
    /// 通过服务角色调用其他云产品API接口获取信息
    @inlinable
    public func describeAPIService(service: String, data: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAPIServiceResponse> {
        self.describeAPIService(.init(service: service, data: data), region: region, logger: logger, on: eventLoop)
    }

    /// 获取其他云产品信息
    ///
    /// 通过服务角色调用其他云产品API接口获取信息
    @inlinable
    public func describeAPIService(service: String, data: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAPIServiceResponse {
        try await self.describeAPIService(.init(service: service, data: data), region: region, logger: logger, on: eventLoop)
    }
}
