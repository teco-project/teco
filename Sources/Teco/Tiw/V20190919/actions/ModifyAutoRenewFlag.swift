//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tiw {
    /// ModifyAutoRenewFlag请求参数结构体
    public struct ModifyAutoRenewFlagRequest: TCRequestModel {
        /// 资源Id，从DescribeUserResources接口中获取Level=1的正式月功能费的SubProduct，一般为sp_tiw_package
        public let subProduct: String

        /// 资源Id，从DescribeUserResources接口中获取Level=1的正式月功能费资源Id
        public let resourceId: String

        /// 自动续费标记，0表示默认状态(用户未设置，即初始状态)， 1表示自动续费，2表示明确不自动续费(用户设置)，若业务无续费概念或无需自动续 费，需要设置为0
        public let autoRenewFlag: Int64

        public init(subProduct: String, resourceId: String, autoRenewFlag: Int64) {
            self.subProduct = subProduct
            self.resourceId = resourceId
            self.autoRenewFlag = autoRenewFlag
        }

        enum CodingKeys: String, CodingKey {
            case subProduct = "SubProduct"
            case resourceId = "ResourceId"
            case autoRenewFlag = "AutoRenewFlag"
        }
    }

    /// ModifyAutoRenewFlag返回参数结构体
    public struct ModifyAutoRenewFlagResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置自动续费
    ///
    /// 设置白板月功能费自动续费
    @inlinable @discardableResult
    public func modifyAutoRenewFlag(_ input: ModifyAutoRenewFlagRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAutoRenewFlagResponse> {
        self.client.execute(action: "ModifyAutoRenewFlag", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置自动续费
    ///
    /// 设置白板月功能费自动续费
    @inlinable @discardableResult
    public func modifyAutoRenewFlag(_ input: ModifyAutoRenewFlagRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAutoRenewFlagResponse {
        try await self.client.execute(action: "ModifyAutoRenewFlag", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置自动续费
    ///
    /// 设置白板月功能费自动续费
    @inlinable @discardableResult
    public func modifyAutoRenewFlag(subProduct: String, resourceId: String, autoRenewFlag: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyAutoRenewFlagResponse> {
        self.modifyAutoRenewFlag(.init(subProduct: subProduct, resourceId: resourceId, autoRenewFlag: autoRenewFlag), region: region, logger: logger, on: eventLoop)
    }

    /// 设置自动续费
    ///
    /// 设置白板月功能费自动续费
    @inlinable @discardableResult
    public func modifyAutoRenewFlag(subProduct: String, resourceId: String, autoRenewFlag: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyAutoRenewFlagResponse {
        try await self.modifyAutoRenewFlag(.init(subProduct: subProduct, resourceId: resourceId, autoRenewFlag: autoRenewFlag), region: region, logger: logger, on: eventLoop)
    }
}
