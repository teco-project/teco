//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCPostgresError {
    public struct ResourceUnavailable: TCPostgresErrorType {
        enum Code: String {
            case invalidInstanceStatus = "ResourceUnavailable.InvalidInstanceStatus"
            case resourceNoPermission = "ResourceUnavailable.ResourceNoPermission"
            case vpcResourceNotFound = "ResourceUnavailable.VpcResourceNotFound"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 实例状态错误。
        public static var invalidInstanceStatus: ResourceUnavailable {
            ResourceUnavailable(.invalidInstanceStatus)
        }
        
        /// 没有该VPC网络权限。
        public static var resourceNoPermission: ResourceUnavailable {
            ResourceUnavailable(.resourceNoPermission)
        }
        
        /// 没有找到实例所属VPC信息。
        public static var vpcResourceNotFound: ResourceUnavailable {
            ResourceUnavailable(.vpcResourceNotFound)
        }
        
        public func asPostgresError() -> TCPostgresError {
            let code: TCPostgresError.Code
            switch self.error {
            case .invalidInstanceStatus: 
                code = .resourceUnavailable_InvalidInstanceStatus
            case .resourceNoPermission: 
                code = .resourceUnavailable_ResourceNoPermission
            case .vpcResourceNotFound: 
                code = .resourceUnavailable_VpcResourceNotFound
            }
            return TCPostgresError(code, context: self.context)
        }
    }
}
