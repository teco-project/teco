//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Postgres {
    /// 账户信息
    public struct AccountInfo: TCOutputModel {
        /// 实例ID，形如postgres-lnp6j617
        public let dbInstanceId: String

        /// 帐号
        public let userName: String

        /// 帐号备注
        public let remark: String

        /// 帐号状态。 1-创建中，2-正常，3-修改中，4-密码重置中，-1-删除中
        public let status: Int64

        /// 帐号创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 帐号最后一次更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case userName = "UserName"
            case remark = "Remark"
            case status = "Status"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 慢查询分析接口返回的分析详情，按照参数抽象之后进行分类
    public struct AnalysisItems: TCOutputModel {
        /// 慢SQL查询的数据库名
        public let databaseName: String

        /// 慢SQL执行的用户名
        public let userName: String

        /// 抽象参数之后的慢SQL
        public let normalQuery: String

        /// 慢SQL执行的客户端地址
        public let clientAddr: String

        /// 在选定时间范围内慢SQL语句执行的次数
        public let callNum: UInt64

        /// 在选定时间范围内，慢SQL语句执行的次数占所有慢SQL的比例（小数返回）
        public let callPercent: Float

        /// 在选定时间范围内，慢SQL执行的总时间
        public let costTime: Float

        /// 在选定时间范围内，慢SQL语句执行的总时间占所有慢SQL的比例（小数返回）
        public let costPercent: Float

        /// 在选定时间范围内，慢SQL语句执行的耗时最短的时间（单位：ms）
        public let minCostTime: Float

        /// 在选定时间范围内，慢SQL语句执行的耗时最长的时间（单位：ms）
        public let maxCostTime: Float

        /// 在选定时间范围内，慢SQL语句执行的耗时平均时间（单位：ms）
        public let avgCostTime: Float

        /// 在选定时间范围内，慢SQL第一条开始执行的时间戳
        public let firstTime: String

        /// 在选定时间范围内，慢SQL最后一条开始执行的时间戳
        public let lastTime: String

        enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case userName = "UserName"
            case normalQuery = "NormalQuery"
            case clientAddr = "ClientAddr"
            case callNum = "CallNum"
            case callPercent = "CallPercent"
            case costTime = "CostTime"
            case costPercent = "CostPercent"
            case minCostTime = "MinCostTime"
            case maxCostTime = "MaxCostTime"
            case avgCostTime = "AvgCostTime"
            case firstTime = "FirstTime"
            case lastTime = "LastTime"
        }
    }

    /// 备份计划
    public struct BackupPlan: TCOutputModel {
        /// 备份周期
        public let backupPeriod: String

        /// 基础备份保留时长
        public let baseBackupRetentionPeriod: UInt64

        /// 开始备份的最早时间
        public let minBackupStartTime: String

        /// 开始备份的最晚时间
        public let maxBackupStartTime: String

        enum CodingKeys: String, CodingKey {
            case backupPeriod = "BackupPeriod"
            case baseBackupRetentionPeriod = "BaseBackupRetentionPeriod"
            case minBackupStartTime = "MinBackupStartTime"
            case maxBackupStartTime = "MaxBackupStartTime"
        }
    }

    /// 实例备份统计项
    public struct BackupSummary: TCOutputModel {
        /// 实例ID。
        public let dbInstanceId: String

        /// 实例日志备份数量。
        public let logBackupCount: UInt64

        /// 实例日志备份大小。
        public let logBackupSize: UInt64

        /// 手动创建的实例基础备份数量。
        public let manualBaseBackupCount: UInt64

        /// 手动创建的实例基础备份大小。
        public let manualBaseBackupSize: UInt64

        /// 自动创建的实例基础备份数量。
        public let autoBaseBackupCount: UInt64

        /// 自动创建的实例基础备份大小。
        public let autoBaseBackupSize: UInt64

        /// 总备份数量
        public let totalBackupCount: UInt64

        /// 总备份大小
        public let totalBackupSize: UInt64

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case logBackupCount = "LogBackupCount"
            case logBackupSize = "LogBackupSize"
            case manualBaseBackupCount = "ManualBaseBackupCount"
            case manualBaseBackupSize = "ManualBaseBackupSize"
            case autoBaseBackupCount = "AutoBaseBackupCount"
            case autoBaseBackupSize = "AutoBaseBackupSize"
            case totalBackupCount = "TotalBackupCount"
            case totalBackupSize = "TotalBackupSize"
        }
    }

    /// 数据库基础备份信息
    public struct BaseBackup: TCOutputModel {
        /// 实例ID。
        public let dbInstanceId: String

        /// 备份文件唯一标识。
        public let id: String

        /// 备份文件名称。
        public let name: String

        /// 备份方式：物理备份、逻辑备份。
        public let backupMethod: String

        /// 备份模式：自动备份、手动备份。
        public let backupMode: String

        /// 备份任务状态。
        public let state: String

        /// 备份集大小，单位bytes。
        public let size: UInt64

        /// 备份的开始时间。
        public let startTime: String

        /// 备份的结束时间。
        public let finishTime: String

        /// 备份的过期时间。
        public let expireTime: String

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case id = "Id"
            case name = "Name"
            case backupMethod = "BackupMethod"
            case backupMode = "BackupMode"
            case state = "State"
            case size = "Size"
            case startTime = "StartTime"
            case finishTime = "FinishTime"
            case expireTime = "ExpireTime"
        }
    }

    /// 数据库实例规格
    public struct ClassInfo: TCOutputModel {
        /// 规格ID
        public let specCode: String

        /// CPU核数
        public let cpu: UInt64

        /// 内存大小，单位：MB
        public let memory: UInt64

        /// 该规格所支持最大存储容量，单位：GB
        public let maxStorage: UInt64

        /// 该规格所支持最小存储容量，单位：GB
        public let minStorage: UInt64

        /// 该规格的预估QPS
        public let qps: UInt64

        enum CodingKeys: String, CodingKey {
            case specCode = "SpecCode"
            case cpu = "CPU"
            case memory = "Memory"
            case maxStorage = "MaxStorage"
            case minStorage = "MinStorage"
            case qps = "QPS"
        }
    }

    /// 数据库备份信息
    public struct DBBackup: TCOutputModel {
        /// 备份文件唯一标识
        public let id: Int64

        /// 文件生成的开始时间
        public let startTime: String

        /// 文件生成的结束时间
        public let endTime: String

        /// 文件大小(K)
        public let size: Int64

        /// 策略（0-实例备份；1-多库备份）
        public let strategy: Int64

        /// 类型（0-定时）
        public let way: Int64

        /// 备份方式（1-完整）
        public let type: Int64

        /// 状态（1-创建中；2-成功；3-失败）
        public let status: Int64

        /// DB列表
        public let dbList: [String]

        /// 内网下载地址
        public let internalAddr: String

        /// 外网下载地址
        public let externalAddr: String

        /// 备份集ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let setId: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case size = "Size"
            case strategy = "Strategy"
            case way = "Way"
            case type = "Type"
            case status = "Status"
            case dbList = "DbList"
            case internalAddr = "InternalAddr"
            case externalAddr = "ExternalAddr"
            case setId = "SetId"
        }
    }

    /// 描述实例的详细信息
    public struct DBInstance: TCOutputModel {
        /// 实例所属地域，如: ap-guangzhou，对应RegionSet的Region字段
        public let region: String

        /// 实例所属可用区， 如：ap-guangzhou-3，对应ZoneSet的Zone字段
        public let zone: String

        /// 项目ID
        public let projectId: UInt64

        /// 私有网络ID
        public let vpcId: String

        /// 子网ID
        public let subnetId: String

        /// 实例ID
        public let dbInstanceId: String

        /// 实例名称
        public let dbInstanceName: String

        /// 实例状态，分别为：applying（申请中）、init(待初始化)、initing(初始化中)、running(运行中)、limited run（受限运行）、isolated（已隔离）、recycling（回收中）、recycled（已回收）、job running（任务执行中）、offline（下线）、migrating（迁移中）、expanding（扩容中）、waitSwitch（等待切换）、switching（切换中）、readonly（只读）、restarting（重启中）、network changing（网络变更中）、upgrading（内核版本升级中）
        public let dbInstanceStatus: String

        /// 实例分配的内存大小，单位：GB
        public let dbInstanceMemory: UInt64

        /// 实例分配的存储空间大小，单位：GB
        public let dbInstanceStorage: UInt64

        /// 实例分配的CPU数量，单位：个
        public let dbInstanceCpu: UInt64

        /// 售卖规格ID
        public let dbInstanceClass: String

        /// 实例类型，类型有：1、primary（主实例）；2、readonly（只读实例）；3、guard（灾备实例）；4、temp（临时实例）
        public let dbInstanceType: String

        /// 实例版本，目前只支持standard（双机高可用版, 一主一从）
        public let dbInstanceVersion: String

        /// 实例DB字符集
        public let dbCharset: String

        /// PostgreSQL版本
        public let dbVersion: String

        /// 实例创建时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var createTime: Date

        /// 实例执行最后一次更新的时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var updateTime: Date

        /// 实例到期时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var expireTime: Date

        /// 实例隔离时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var isolatedTime: Date

        /// 计费模式，1、prepaid（包年包月,预付费）；2、postpaid（按量计费，后付费）
        public let payType: String

        /// 是否自动续费，1：自动续费，0：不自动续费
        public let autoRenew: UInt64

        /// 实例网络连接信息
        public let dbInstanceNetInfo: [DBInstanceNetInfo]

        /// 机器类型
        public let type: String

        /// 用户的AppId
        public let appId: UInt64

        /// 实例的Uid
        public let uid: UInt64

        /// 实例是否支持Ipv6，1：支持，0：不支持
        public let supportIpv6: UInt64

        /// 实例绑定的标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagList: [Tag]?

        /// 主实例信息，仅在实例为只读实例时返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterDBInstanceId: String?

        /// 只读实例数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let readOnlyInstanceNum: Int64?

        /// 只读实例在只读组中的状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusInReadonlyGroup: String?

        /// 下线时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let offlineTime: String?

        /// 数据库内核版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbKernelVersion: String?

        /// 实例网络信息列表（此字段已废弃）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkAccessList: [NetworkAccess]?

        /// PostgreSQL主要版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMajorVersion: String?

        /// 实例的节点信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbNodeSet: [DBNode]?

        /// 实例是否支持TDE数据加密  0：不支持，1：支持
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isSupportTDE: Int64?

        /// 数据库引擎，支持：
        /// 1、postgresql（云数据库PostgreSQL）；
        /// 2、mssql_compatible（MSSQL兼容-云数据库PostgreSQL）；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbEngine: String?

        /// 数据库引擎的配置信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbEngineConfig: String?

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case zone = "Zone"
            case projectId = "ProjectId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case dbInstanceId = "DBInstanceId"
            case dbInstanceName = "DBInstanceName"
            case dbInstanceStatus = "DBInstanceStatus"
            case dbInstanceMemory = "DBInstanceMemory"
            case dbInstanceStorage = "DBInstanceStorage"
            case dbInstanceCpu = "DBInstanceCpu"
            case dbInstanceClass = "DBInstanceClass"
            case dbInstanceType = "DBInstanceType"
            case dbInstanceVersion = "DBInstanceVersion"
            case dbCharset = "DBCharset"
            case dbVersion = "DBVersion"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case expireTime = "ExpireTime"
            case isolatedTime = "IsolatedTime"
            case payType = "PayType"
            case autoRenew = "AutoRenew"
            case dbInstanceNetInfo = "DBInstanceNetInfo"
            case type = "Type"
            case appId = "AppId"
            case uid = "Uid"
            case supportIpv6 = "SupportIpv6"
            case tagList = "TagList"
            case masterDBInstanceId = "MasterDBInstanceId"
            case readOnlyInstanceNum = "ReadOnlyInstanceNum"
            case statusInReadonlyGroup = "StatusInReadonlyGroup"
            case offlineTime = "OfflineTime"
            case dbKernelVersion = "DBKernelVersion"
            case networkAccessList = "NetworkAccessList"
            case dbMajorVersion = "DBMajorVersion"
            case dbNodeSet = "DBNodeSet"
            case isSupportTDE = "IsSupportTDE"
            case dbEngine = "DBEngine"
            case dbEngineConfig = "DBEngineConfig"
        }
    }

    /// 描述实例的网络连接信息。
    public struct DBInstanceNetInfo: TCOutputModel {
        /// DNS域名
        public let address: String

        /// IP地址
        public let ip: String

        /// 连接Port地址
        public let port: UInt64

        /// 网络类型，1、inner（基础网络内网地址）；2、private（私有网络内网地址）；3、public（基础网络或私有网络的外网地址）；
        public let netType: String

        /// 网络连接状态，1、initing（未开通）；2、opened（已开通）；3、closed（已关闭）；4、opening（开通中）；5、closing（关闭中）；
        public let status: String

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 连接数据库的协议类型，当前支持：postgresql、mssql（MSSQL兼容语法）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let protocolType: String?

        enum CodingKeys: String, CodingKey {
            case address = "Address"
            case ip = "Ip"
            case port = "Port"
            case netType = "NetType"
            case status = "Status"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case protocolType = "ProtocolType"
        }
    }

    /// 描述实例节点信息，包括节点类型、节点所在可用区。
    public struct DBNode: TCInputModel, TCOutputModel {
        /// 节点类型，值可以为：
        /// Primary，代表主节点；
        /// Standby，代表备节点。
        public let role: String

        /// 节点所在可用区，例如 ap-guangzhou-1。
        public let zone: String

        public init(role: String, zone: String) {
            self.role = role
            self.zone = zone
        }

        enum CodingKeys: String, CodingKey {
            case role = "Role"
            case zone = "Zone"
        }
    }

    /// 慢SQL 统计分析接口返回详情
    public struct Detail: TCOutputModel {
        /// 输入时间范围内所有慢sql执行的总时间，单位毫秒（ms）
        public let totalTime: Float

        /// 输入时间范围内所有慢sql总条数
        public let totalCallNum: UInt64

        /// 慢SQL统计分析列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let analysisItems: [AnalysisItems]?

        enum CodingKeys: String, CodingKey {
            case totalTime = "TotalTime"
            case totalCallNum = "TotalCallNum"
            case analysisItems = "AnalysisItems"
        }
    }

    /// 慢SQL耗时分段分析
    public struct DurationAnalysis: TCOutputModel {
        /// 慢SQL耗时，时段
        public let timeSegment: String

        /// 对应时段区间慢SQL 条数
        public let count: Int64

        enum CodingKeys: String, CodingKey {
            case timeSegment = "TimeSegment"
            case count = "Count"
        }
    }

    /// KMS密钥信息
    public struct EncryptionKey: TCOutputModel {
        /// KMS实例加密的KeyId。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyId: String?

        /// KMS实例加密Key的别名。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyAlias: String?

        /// 实例加密密钥DEK的密文。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dekCipherTextBlob: String?

        /// 密钥是否启用，1-启用， 0-未启用。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isEnabled: Int64?

        /// KMS密钥所在地域。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyRegion: String?

        /// DEK密钥创建时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case keyAlias = "KeyAlias"
            case dekCipherTextBlob = "DEKCipherTextBlob"
            case isEnabled = "IsEnabled"
            case keyRegion = "KeyRegion"
            case createTime = "CreateTime"
        }
    }

    /// 错误日志详情
    public struct ErrLogDetail: TCOutputModel {
        /// 用户名
        public let userName: String

        /// 数据库名字
        public let database: String

        /// 错误发生时间
        public let errTime: String

        /// 错误消息
        public let errMsg: String

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case database = "Database"
            case errTime = "ErrTime"
            case errMsg = "ErrMsg"
        }
    }

    /// 参数修改事件信息
    public struct EventInfo: TCOutputModel {
        /// 参数名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paramName: String?

        /// 原参数值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let oldValue: String?

        /// 本次修改期望参数值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let newValue: String?

        /// 后台参数修改开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let modifyTime: String?

        /// 后台参数生效开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let effectiveTime: String?

        /// 修改状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let state: String?

        /// 操作者（一般为用户sub UIN）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `operator`: String?

        /// 时间日志。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventLog: String?

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case oldValue = "OldValue"
            case newValue = "NewValue"
            case modifyTime = "ModifyTime"
            case effectiveTime = "EffectiveTime"
            case state = "State"
            case `operator` = "Operator"
            case eventLog = "EventLog"
        }
    }

    /// 修改参数条目，以参数为维度
    public struct EventItem: TCOutputModel {
        /// 参数名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paramName: String?

        /// 修改事件数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventCount: Int64?

        /// 修改时间详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventDetail: [EventInfo]?

        enum CodingKeys: String, CodingKey {
            case paramName = "ParamName"
            case eventCount = "EventCount"
            case eventDetail = "EventDetail"
        }
    }

    /// 描述键值对过滤器，用于条件过滤查询。例如过滤ID、名称等
    /// * 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
    /// * 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct Filter: TCInputModel {
        /// 过滤键的名称。
        public let name: String?

        /// 一个或者多个过滤值。
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 数据库日志备份信息
    public struct LogBackup: TCOutputModel {
        /// 实例ID。
        public let dbInstanceId: String

        /// 备份文件唯一标识。
        public let id: String

        /// 备份文件名称。
        public let name: String

        /// 备份方式：物理备份、逻辑备份。
        public let backupMethod: String

        /// 备份模式：自动备份、手动备份。
        public let backupMode: String

        /// 备份任务状态。
        public let state: String

        /// 备份集大小，单位bytes。
        public let size: UInt64

        /// 备份的开始时间。
        public let startTime: String

        /// 备份的结束时间。
        public let finishTime: String

        /// 备份的过期时间。
        public let expireTime: String

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case id = "Id"
            case name = "Name"
            case backupMethod = "BackupMethod"
            case backupMode = "BackupMode"
            case state = "State"
            case size = "Size"
            case startTime = "StartTime"
            case finishTime = "FinishTime"
            case expireTime = "ExpireTime"
        }
    }

    /// 网络相关信息。（该数据结构已废弃，网络相关信息使用DBInstanceNetInfo）
    public struct NetworkAccess: TCOutputModel {
        /// 网络资源id，实例id或RO组id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceId: String?

        /// 资源类型，1-实例 2-RO组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceType: UInt64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// IPV4地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip: String?

        /// IPV6地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vip6: String?

        /// 访问端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vport: Int64?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 网络状态，1-申请中，2-使用中，3-删除中，4-已删除
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcStatus: Int64?

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case vpcId = "VpcId"
            case vip = "Vip"
            case vip6 = "Vip6"
            case vport = "Vport"
            case subnetId = "SubnetId"
            case vpcStatus = "VpcStatus"
        }
    }

    /// 单条SlowQuery信息
    public struct NormalQueryItem: TCOutputModel {
        /// 用户名
        public let userName: String

        /// 调用次数
        public let calls: Int64

        /// 粒度点
        public let callsGrids: [Int64]

        /// 花费总时间
        public let costTime: Float

        /// 影响的行数
        public let rows: Int64

        /// 花费最小时间
        public let minCostTime: Float

        /// 花费最大时间
        public let maxCostTime: Float

        /// 最早一条慢SQL时间
        public let firstTime: String

        /// 最晚一条慢SQL时间
        public let lastTime: String

        /// 读共享内存块数
        public let sharedReadBlks: Int64

        /// 写共享内存块数
        public let sharedWriteBlks: Int64

        /// 读io总耗时
        public let readCostTime: Int64

        /// 写io总耗时
        public let writeCostTime: Int64

        /// 数据库名字
        public let databaseName: String

        /// 脱敏后的慢SQL
        public let normalQuery: String

        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case calls = "Calls"
            case callsGrids = "CallsGrids"
            case costTime = "CostTime"
            case rows = "Rows"
            case minCostTime = "MinCostTime"
            case maxCostTime = "MaxCostTime"
            case firstTime = "FirstTime"
            case lastTime = "LastTime"
            case sharedReadBlks = "SharedReadBlks"
            case sharedWriteBlks = "SharedWriteBlks"
            case readCostTime = "ReadCostTime"
            case writeCostTime = "WriteCostTime"
            case databaseName = "DatabaseName"
            case normalQuery = "NormalQuery"
        }
    }

    /// 批量修改参数
    public struct ParamEntry: TCInputModel {
        /// 参数名
        public let name: String

        /// 修改参数值。入参均以字符串形式传递，例如：小数”0.1“、整数”1000“、枚举”replica“
        public let expectedValue: String

        public init(name: String, expectedValue: String) {
            self.name = name
            self.expectedValue = expectedValue
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case expectedValue = "ExpectedValue"
        }
    }

    /// 参数详情
    public struct ParamInfo: TCOutputModel {
        /// 参数ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// 参数名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 参数值类型：integer（整型）、real（浮点型）、bool（布尔型）、enum（枚举类型）、mutil_enum（枚举类型、支持多选）。
        /// 当参数类型为integer（整型）、real（浮点型）时，参数的取值范围根据返回值的Max、Min确定；
        /// 当参数类型为bool（布尔型）时，参数设置值取值范围是true | false；
        /// 当参数类型为enum（枚举类型）、mutil_enum（多枚举类型）时，参数的取值范围由返回值中的EnumValue确定。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paramValueType: String?

        /// 参数值 单位。参数没有单位时，该字段返回空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unit: String?

        /// 参数默认值。以字符串形式返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let defaultValue: String?

        /// 参数当前运行值。以字符串形式返回
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let currentValue: String?

        /// 数值类型（integer、real）参数，取值下界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let max: Float?

        /// 枚举类型参数，取值范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enumValue: [String]?

        /// 数值类型（integer、real）参数，取值上界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let min: Float?

        /// 参数中文描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paramDescriptionCH: String?

        /// 参数英文描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paramDescriptionEN: String?

        /// 参数修改，是否重启生效。（true为需要，false为不需要）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let needReboot: Bool?

        /// 参数中文分类
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classificationCN: String?

        /// 参数英文分类
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let classificationEN: String?

        /// 是否和规格相关。（true为相关，false为不想关）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specRelated: Bool?

        /// 是否为重点参数。（true为重点参数，修改是需要重点关注，可能会影响实例性能）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let advanced: Bool?

        /// 参数最后一次修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastModifyTime: String?

        /// 参数存在主备制约，0：无主备制约关系，1:备机参数值需比主机大，2:主机参数值需比备机大
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let standbyRelated: Int64?

        /// 参数版本关联信息，存储具体内核版本下的具体参数信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let versionRelationSet: [ParamVersionRelation]?

        /// 参数规格关联信息，存储具体规格下具体的参数信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specRelationSet: [ParamSpecRelation]?

        enum CodingKeys: String, CodingKey {
            case id = "ID"
            case name = "Name"
            case paramValueType = "ParamValueType"
            case unit = "Unit"
            case defaultValue = "DefaultValue"
            case currentValue = "CurrentValue"
            case max = "Max"
            case enumValue = "EnumValue"
            case min = "Min"
            case paramDescriptionCH = "ParamDescriptionCH"
            case paramDescriptionEN = "ParamDescriptionEN"
            case needReboot = "NeedReboot"
            case classificationCN = "ClassificationCN"
            case classificationEN = "ClassificationEN"
            case specRelated = "SpecRelated"
            case advanced = "Advanced"
            case lastModifyTime = "LastModifyTime"
            case standbyRelated = "StandbyRelated"
            case versionRelationSet = "VersionRelationSet"
            case specRelationSet = "SpecRelationSet"
        }
    }

    /// 描述各规格下的参数信息
    public struct ParamSpecRelation: TCOutputModel {
        /// 参数名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 参数信息所属规格
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let memory: String?

        /// 参数在该规格下的默认值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        /// 参数值单位。参数没有单位时，该字段返回空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unit: String?

        /// 数值类型（integer、real）参数，取值上界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let max: Float?

        /// 数值类型（integer、real）参数，取值下界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let min: Float?

        /// 枚举类型参数，取值范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enumValue: [String]?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case memory = "Memory"
            case value = "Value"
            case unit = "Unit"
            case max = "Max"
            case min = "Min"
            case enumValue = "EnumValue"
        }
    }

    /// 描述各版本下的参数信息
    public struct ParamVersionRelation: TCOutputModel {
        /// 参数名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 参数信息所属内核版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbKernelVersion: String?

        /// 参数在该版本该规格下的默认值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let value: String?

        /// 参数值单位。参数没有单位时，该字段返回空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unit: String?

        /// 数值类型（integer、real）参数，取值上界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let max: Float?

        /// 数值类型（integer、real）参数，取值下界
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let min: Float?

        /// 枚举类型参数，取值范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enumValue: [String]?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case dbKernelVersion = "DBKernelVersion"
            case value = "Value"
            case unit = "Unit"
            case max = "Max"
            case min = "Min"
            case enumValue = "EnumValue"
        }
    }

    /// 参数模板的基本信息
    public struct ParameterTemplate: TCOutputModel {
        /// 参数模板ID
        public let templateId: String

        /// 参数模板名称
        public let templateName: String

        /// 参数模板适用的数据库版本
        public let dbMajorVersion: String

        /// 参数模板适用的数据库引擎
        public let dbEngine: String

        /// 参数模板描述
        public let templateDescription: String

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case templateName = "TemplateName"
            case dbMajorVersion = "DBMajorVersion"
            case dbEngine = "DBEngine"
            case templateDescription = "TemplateDescription"
        }
    }

    /// 订单详情
    public struct PgDeal: TCOutputModel {
        /// 订单名
        public let dealName: String

        /// 所属用户
        public let ownerUin: String

        /// 订单涉及多少个实例
        public let count: Int64

        /// 付费模式。1-预付费；0-后付费
        public let payMode: Int64

        /// 异步任务流程ID
        public let flowId: Int64

        /// 实例ID数组
        public let dbInstanceIdSet: [String]

        enum CodingKeys: String, CodingKey {
            case dealName = "DealName"
            case ownerUin = "OwnerUin"
            case count = "Count"
            case payMode = "PayMode"
            case flowId = "FlowId"
            case dbInstanceIdSet = "DBInstanceIdSet"
        }
    }

    /// 安全组规则信息
    public struct PolicyRule: TCOutputModel {
        /// 策略，ACCEPT 或者 DROP
        public let action: String

        /// 来源或目的 IP 或 IP 段，例如172.16.0.0/12
        public let cidrIp: String

        /// 端口
        public let portRange: String

        /// 网络协议，支持 UDP、TCP 等
        public let ipProtocol: String

        /// 规则描述
        public let description: String

        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case cidrIp = "CidrIp"
            case portRange = "PortRange"
            case ipProtocol = "IpProtocol"
            case description = "Description"
        }
    }

    /// 慢SQL查询接口返回 慢SQL列表详情
    public struct RawSlowQuery: TCOutputModel {
        /// 慢SQL 语句
        public let rawQuery: String

        /// 慢SQL 查询的数据库
        public let databaseName: String

        /// 慢SQL执行 耗时
        public let duration: Float

        /// 执行慢SQL的客户端
        public let clientAddr: String

        /// 执行慢SQL的用户名
        public let userName: String

        /// 慢SQL执行的开始时间
        public let sessionStartTime: String

        enum CodingKeys: String, CodingKey {
            case rawQuery = "RawQuery"
            case databaseName = "DatabaseName"
            case duration = "Duration"
            case clientAddr = "ClientAddr"
            case userName = "UserName"
            case sessionStartTime = "SessionStartTime"
        }
    }

    /// 只读组信息
    public struct ReadOnlyGroup: TCOutputModel {
        /// 只读组标识
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let readOnlyGroupId: String?

        /// 只读组名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let readOnlyGroupName: String?

        /// 项目id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: UInt64?

        /// 主实例id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterDBInstanceId: String?

        /// 最小保留实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let minDelayEliminateReserve: Int64?

        /// 延迟空间大小阈值
        public let maxReplayLatency: Int64

        /// 延迟大小开关
        public let replayLatencyEliminate: Int64

        /// 延迟时间大小阈值
        public let maxReplayLag: Float

        /// 延迟时间开关
        public let replayLagEliminate: Int64

        /// 虚拟网络id
        public let vpcId: String

        /// 子网id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 地域id
        public let region: String

        /// 地区id
        public let zone: String

        /// 状态
        public let status: String

        /// 实例详细信息
        public let readOnlyDBInstanceList: [DBInstance]

        /// 自动负载均衡开关
        public let rebalance: Int64

        /// 网络信息
        public let dbInstanceNetInfo: [DBInstanceNetInfo]

        /// 只读组网络信息列表（此字段已废弃）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let networkAccessList: [NetworkAccess]?

        enum CodingKeys: String, CodingKey {
            case readOnlyGroupId = "ReadOnlyGroupId"
            case readOnlyGroupName = "ReadOnlyGroupName"
            case projectId = "ProjectId"
            case masterDBInstanceId = "MasterDBInstanceId"
            case minDelayEliminateReserve = "MinDelayEliminateReserve"
            case maxReplayLatency = "MaxReplayLatency"
            case replayLatencyEliminate = "ReplayLatencyEliminate"
            case maxReplayLag = "MaxReplayLag"
            case replayLagEliminate = "ReplayLagEliminate"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case region = "Region"
            case zone = "Zone"
            case status = "Status"
            case readOnlyDBInstanceList = "ReadOnlyDBInstanceList"
            case rebalance = "Rebalance"
            case dbInstanceNetInfo = "DBInstanceNetInfo"
            case networkAccessList = "NetworkAccessList"
        }
    }

    /// 描述地域的编码和状态等信息
    public struct RegionInfo: TCOutputModel {
        /// 该地域对应的英文名称
        public let region: String

        /// 该地域对应的中文名称
        public let regionName: String

        /// 该地域对应的数字编号
        public let regionId: UInt64

        /// 可用状态，UNAVAILABLE表示不可用，AVAILABLE表示可用
        public let regionState: String

        /// 该地域是否支持国际站售卖，0：不支持，1：支持
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportInternational: UInt64?

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionName = "RegionName"
            case regionId = "RegionId"
            case regionState = "RegionState"
            case supportInternational = "SupportInternational"
        }
    }

    /// 安全组信息
    public struct SecurityGroup: TCOutputModel {
        /// 项目Id
        public let projectId: Int64

        /// 创建时间
        public let createTime: String

        /// 入站规则
        public let inbound: [PolicyRule]

        /// 出站规则
        public let outbound: [PolicyRule]

        /// 安全组ID
        public let securityGroupId: String

        /// 安全组名称
        public let securityGroupName: String

        /// 安全组备注
        public let securityGroupDescription: String

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case createTime = "CreateTime"
            case inbound = "Inbound"
            case outbound = "Outbound"
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupDescription = "SecurityGroupDescription"
        }
    }

    /// serverless账号描述
    public struct ServerlessDBAccount: TCOutputModel {
        /// 用户名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbUser: String?

        /// 密码
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbPassword: String?

        /// 连接数限制
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbConnLimit: Int64?

        enum CodingKeys: String, CodingKey {
            case dbUser = "DBUser"
            case dbPassword = "DBPassword"
            case dbConnLimit = "DBConnLimit"
        }
    }

    /// serverless实例描述
    public struct ServerlessDBInstance: TCInputModel, TCOutputModel {
        /// 实例id，唯一标识符
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbInstanceId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbInstanceName: String?

        /// 实例状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbInstanceStatus: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 项目id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let projectId: Int64?

        /// 私有网络Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 字符集
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbCharset: String?

        /// 数据库版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbVersion: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 实例网络信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbInstanceNetInfo: [ServerlessDBInstanceNetInfo]?

        /// 实例账户信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbAccountSet: [ServerlessDBAccount]?

        /// 实例下的db信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbDatabaseList: [String]?

        /// 实例绑定的标签数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tagList: [Tag]?

        /// 数据库内核版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbKernelVersion: String?

        /// 数据库主要版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMajorVersion: String?

        public init(dbInstanceId: String? = nil, dbInstanceName: String? = nil, dbInstanceStatus: String? = nil, region: String? = nil, zone: String? = nil, projectId: Int64? = nil, vpcId: String? = nil, subnetId: String? = nil, dbCharset: String? = nil, dbVersion: String? = nil, createTime: String? = nil, dbInstanceNetInfo: [ServerlessDBInstanceNetInfo]? = nil, dbAccountSet: [ServerlessDBAccount]? = nil, dbDatabaseList: [String]? = nil, tagList: [Tag]? = nil, dbKernelVersion: String? = nil, dbMajorVersion: String? = nil) {
            self.dbInstanceId = dbInstanceId
            self.dbInstanceName = dbInstanceName
            self.dbInstanceStatus = dbInstanceStatus
            self.region = region
            self.zone = zone
            self.projectId = projectId
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.dbCharset = dbCharset
            self.dbVersion = dbVersion
            self.createTime = createTime
            self.dbInstanceNetInfo = dbInstanceNetInfo
            self.dbAccountSet = dbAccountSet
            self.dbDatabaseList = dbDatabaseList
            self.tagList = tagList
            self.dbKernelVersion = dbKernelVersion
            self.dbMajorVersion = dbMajorVersion
        }

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case dbInstanceName = "DBInstanceName"
            case dbInstanceStatus = "DBInstanceStatus"
            case region = "Region"
            case zone = "Zone"
            case projectId = "ProjectId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case dbCharset = "DBCharset"
            case dbVersion = "DBVersion"
            case createTime = "CreateTime"
            case dbInstanceNetInfo = "DBInstanceNetInfo"
            case dbAccountSet = "DBAccountSet"
            case dbDatabaseList = "DBDatabaseList"
            case tagList = "TagList"
            case dbKernelVersion = "DBKernelVersion"
            case dbMajorVersion = "DBMajorVersion"
        }
    }

    /// serverless实例网络信息描述
    public struct ServerlessDBInstanceNetInfo: TCOutputModel {
        /// 地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let address: String?

        /// ip地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// 端口号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: Int64?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 网络类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let netType: String?

        enum CodingKeys: String, CodingKey {
            case address = "Address"
            case ip = "Ip"
            case port = "Port"
            case status = "Status"
            case netType = "NetType"
        }
    }

    /// 慢查询详情
    public struct SlowlogDetail: TCOutputModel {
        /// 花费总时间
        public let totalTime: Float

        /// 调用总次数
        public let totalCalls: Int64

        /// 脱敏后的慢SQL列表
        public let normalQueries: [NormalQueryItem]

        enum CodingKeys: String, CodingKey {
            case totalTime = "TotalTime"
            case totalCalls = "TotalCalls"
            case normalQueries = "NormalQueries"
        }
    }

    /// 描述某个地域下某个可用区的可售卖规格详细信息。
    public struct SpecInfo: TCOutputModel {
        /// 地域英文编码，对应RegionSet的Region字段
        public let region: String

        /// 区域英文编码，对应ZoneSet的Zone字段
        public let zone: String

        /// 规格详细信息列表
        public let specItemInfoList: [SpecItemInfo]

        /// 支持KMS的地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportKMSRegions: [String]?

        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case zone = "Zone"
            case specItemInfoList = "SpecItemInfoList"
            case supportKMSRegions = "SupportKMSRegions"
        }
    }

    /// 描述一种规格的信息
    public struct SpecItemInfo: TCOutputModel {
        /// 规格ID
        public let specCode: String

        /// PostgreSQL的版本编号
        public let version: String

        /// 内核编号对应的完整版本名称
        public let versionName: String

        /// CPU核数
        public let cpu: UInt64

        /// 内存大小，单位：MB
        public let memory: UInt64

        /// 该规格所支持最大存储容量，单位：GB
        public let maxStorage: UInt64

        /// 该规格所支持最小存储容量，单位：GB
        public let minStorage: UInt64

        /// 该规格的预估QPS
        public let qps: UInt64

        /// 【该字段废弃】
        public let pid: UInt64

        /// 机器类型
        public let type: String

        /// PostgreSQL的主要版本编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let majorVersion: String?

        /// PostgreSQL的内核版本编号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kernelVersion: String?

        /// 是否支持TDE数据加密功能，0-不支持，1-支持
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isSupportTDE: Int64?

        enum CodingKeys: String, CodingKey {
            case specCode = "SpecCode"
            case version = "Version"
            case versionName = "VersionName"
            case cpu = "Cpu"
            case memory = "Memory"
            case maxStorage = "MaxStorage"
            case minStorage = "MinStorage"
            case qps = "Qps"
            case pid = "Pid"
            case type = "Type"
            case majorVersion = "MajorVersion"
            case kernelVersion = "KernelVersion"
            case isSupportTDE = "IsSupportTDE"
        }
    }

    /// 实例绑定的标签信息，包含标签键TagKey和标签值TagValue
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签键
        public let tagKey: String

        /// 标签值
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    /// 数据库版本号信息
    public struct Version: TCOutputModel {
        /// 数据库引擎，支持：
        /// 1、postgresql（云数据库PostgreSQL）；
        /// 2、mssql_compatible（MSSQL兼容-云数据库PostgreSQL）；
        public let dbEngine: String

        /// 数据库版本，例如：12.4
        public let dbVersion: String

        /// 数据库主要版本，例如：12
        public let dbMajorVersion: String

        /// 数据库内核版本，例如：v12.4_r1.3
        public let dbKernelVersion: String

        /// 数据库内核支持的特性列表。例如，
        /// TDE：支持数据加密。
        public let supportedFeatureNames: [String]

        /// 数据库版本状态，包括：
        /// AVAILABLE：可用；
        /// DEPRECATED：已弃用。
        public let status: String

        /// 该数据库版本（DBKernelVersion）可以升级到的版本号列表。
        public let availableUpgradeTarget: [String]

        enum CodingKeys: String, CodingKey {
            case dbEngine = "DBEngine"
            case dbVersion = "DBVersion"
            case dbMajorVersion = "DBMajorVersion"
            case dbKernelVersion = "DBKernelVersion"
            case supportedFeatureNames = "SupportedFeatureNames"
            case status = "Status"
            case availableUpgradeTarget = "AvailableUpgradeTarget"
        }
    }

    /// 数据库Xlog信息
    public struct Xlog: TCOutputModel {
        /// 备份文件唯一标识
        public let id: Int64

        /// 文件生成的开始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 文件生成的结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 内网下载地址
        public let internalAddr: String

        /// 外网下载地址
        public let externalAddr: String

        /// 备份文件大小
        public let size: Int64

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case internalAddr = "InternalAddr"
            case externalAddr = "ExternalAddr"
            case size = "Size"
        }
    }

    /// 描述可用区的编码和状态信息
    public struct ZoneInfo: TCOutputModel {
        /// 该可用区的英文名称
        public let zone: String

        /// 该可用区的中文名称
        public let zoneName: String

        /// 该可用区对应的数字编号
        public let zoneId: UInt64

        /// 可用状态包含，
        /// UNAVAILABLE：不可用。
        /// AVAILABLE：可用。
        /// SELLOUT：售罄。
        /// SUPPORTMODIFYONLY：支持变配。
        public let zoneState: String

        /// 该可用区是否支持Ipv6
        public let zoneSupportIpv6: UInt64

        /// 该可用区对应的备可用区集合
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let standbyZoneSet: [String]?

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneName = "ZoneName"
            case zoneId = "ZoneId"
            case zoneState = "ZoneState"
            case zoneSupportIpv6 = "ZoneSupportIpv6"
            case standbyZoneSet = "StandbyZoneSet"
        }
    }
}
