//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Postgres {
    /// CreateParameterTemplate请求参数结构体
    public struct CreateParameterTemplateRequest: TCRequestModel {
        /// 模板名称，长度为1～60个字符，仅支持数字,英文大小写字母、中文以及特殊字符_-./()（）[]+=：:@
        public let templateName: String

        /// 数据库大版本号，例如：11，12，13
        public let dbMajorVersion: String

        /// 数据库引擎，例如：postgresql，mssql_compatible
        public let dbEngine: String

        /// 参数模板描述，长度为0～60个字符，仅支持数字,英文大小写字母、中文以及特殊字符_-./()（）[]+=：:@
        public let templateDescription: String?

        public init(templateName: String, dbMajorVersion: String, dbEngine: String, templateDescription: String? = nil) {
            self.templateName = templateName
            self.dbMajorVersion = dbMajorVersion
            self.dbEngine = dbEngine
            self.templateDescription = templateDescription
        }

        enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case dbMajorVersion = "DBMajorVersion"
            case dbEngine = "DBEngine"
            case templateDescription = "TemplateDescription"
        }
    }

    /// CreateParameterTemplate返回参数结构体
    public struct CreateParameterTemplateResponse: TCResponseModel {
        /// 参数模板ID，用于唯一确认参数模板
        public let templateId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case requestId = "RequestId"
        }
    }

    /// 创建参数模板
    ///
    /// 本接口 (CreateParameterTemplate) 用于创建参数模板。
    @inlinable
    public func createParameterTemplate(_ input: CreateParameterTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateParameterTemplateResponse> {
        self.client.execute(action: "CreateParameterTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建参数模板
    ///
    /// 本接口 (CreateParameterTemplate) 用于创建参数模板。
    @inlinable
    public func createParameterTemplate(_ input: CreateParameterTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateParameterTemplateResponse {
        try await self.client.execute(action: "CreateParameterTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建参数模板
    ///
    /// 本接口 (CreateParameterTemplate) 用于创建参数模板。
    @inlinable
    public func createParameterTemplate(templateName: String, dbMajorVersion: String, dbEngine: String, templateDescription: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateParameterTemplateResponse> {
        self.createParameterTemplate(.init(templateName: templateName, dbMajorVersion: dbMajorVersion, dbEngine: dbEngine, templateDescription: templateDescription), region: region, logger: logger, on: eventLoop)
    }

    /// 创建参数模板
    ///
    /// 本接口 (CreateParameterTemplate) 用于创建参数模板。
    @inlinable
    public func createParameterTemplate(templateName: String, dbMajorVersion: String, dbEngine: String, templateDescription: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateParameterTemplateResponse {
        try await self.createParameterTemplate(.init(templateName: templateName, dbMajorVersion: dbMajorVersion, dbEngine: dbEngine, templateDescription: templateDescription), region: region, logger: logger, on: eventLoop)
    }
}
