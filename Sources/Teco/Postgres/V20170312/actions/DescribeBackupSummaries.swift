//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Postgres {
    /// DescribeBackupSummaries请求参数结构体
    public struct DescribeBackupSummariesRequest: TCPaginatedRequest {
        /// 每页显示数量，取值范围为1-100，默认为返回10条。
        public let limit: UInt64?

        /// 数据偏移量，从0开始。
        public let offset: UInt64?

        /// 按照一个或者多个过滤条件进行查询，目前支持的过滤条件有：
        /// db-instance-id：按照实例ID过滤，类型为string。
        /// db-instance-name：按照实例名过滤，类型为string。
        /// db-instance-ip：按照实例私有网络IP地址过滤，类型为string。
        public let filters: [Filter]?

        /// 排序字段，支持TotalBackupSize,LogBackupSize,ManualBaseBackupSize,AutoBaseBackupSize。
        public let orderBy: String?

        /// 排序方式，包括升序：asc，降序：desc。
        public let orderByType: String?

        public init(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, orderBy: String? = nil, orderByType: String? = nil) {
            self.limit = limit
            self.offset = offset
            self.filters = filters
            self.orderBy = orderBy
            self.orderByType = orderByType
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case filters = "Filters"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeBackupSummariesResponse) -> DescribeBackupSummariesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(limit: self.limit, offset: (self.offset ?? 0) + .init(response.getItems().count), filters: self.filters, orderBy: self.orderBy, orderByType: self.orderByType)
        }
    }

    /// DescribeBackupSummaries返回参数结构体
    public struct DescribeBackupSummariesResponse: TCPaginatedResponse {
        /// 备份统计信息列表。
        public let backupSummarySet: [BackupSummary]

        /// 查询到的所有备份信息数量。
        public let totalCount: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case backupSummarySet = "BackupSummarySet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``BackupSummary`` list from the paginated response.
        public func getItems() -> [BackupSummary] {
            self.backupSummarySet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询备份统计信息
    ///
    /// 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupSummaries(_ input: DescribeBackupSummariesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupSummariesResponse> {
        self.client.execute(action: "DescribeBackupSummaries", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询备份统计信息
    ///
    /// 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupSummaries(_ input: DescribeBackupSummariesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupSummariesResponse {
        try await self.client.execute(action: "DescribeBackupSummaries", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询备份统计信息
    ///
    /// 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupSummaries(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, orderBy: String? = nil, orderByType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupSummariesResponse> {
        self.describeBackupSummaries(.init(limit: limit, offset: offset, filters: filters, orderBy: orderBy, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份统计信息
    ///
    /// 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupSummaries(limit: UInt64? = nil, offset: UInt64? = nil, filters: [Filter]? = nil, orderBy: String? = nil, orderByType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupSummariesResponse {
        try await self.describeBackupSummaries(.init(limit: limit, offset: offset, filters: filters, orderBy: orderBy, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份统计信息
    ///
    /// 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupSummariesPaginated(_ input: DescribeBackupSummariesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [BackupSummary])> {
        self.client.paginate(input: input, region: region, command: self.describeBackupSummaries, logger: logger, on: eventLoop)
    }

    /// 查询备份统计信息
    ///
    /// 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
    @inlinable @discardableResult
    public func describeBackupSummariesPaginated(_ input: DescribeBackupSummariesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeBackupSummariesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeBackupSummaries, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询备份统计信息
    ///
    /// 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
    ///
    /// - Returns: `AsyncSequence`s of ``BackupSummary`` and ``DescribeBackupSummariesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeBackupSummariesPaginator(_ input: DescribeBackupSummariesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeBackupSummariesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeBackupSummaries, logger: logger, on: eventLoop)
    }
}
