//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Postgres {
    /// CreateReadOnlyGroupNetworkAccess请求参数结构体
    public struct CreateReadOnlyGroupNetworkAccessRequest: TCRequestModel {
        /// RO组ID，形如：pgro-4t9c6g7k。
        public let readOnlyGroupId: String

        /// 私有网络统一 ID。
        public let vpcId: String

        /// 子网ID。
        public let subnetId: String

        /// 是否指定分配vip true-指定分配  false-自动分配。
        public let isAssignVip: Bool

        /// 目标VIP地址。
        public let vip: String?

        public init(readOnlyGroupId: String, vpcId: String, subnetId: String, isAssignVip: Bool, vip: String? = nil) {
            self.readOnlyGroupId = readOnlyGroupId
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.isAssignVip = isAssignVip
            self.vip = vip
        }

        enum CodingKeys: String, CodingKey {
            case readOnlyGroupId = "ReadOnlyGroupId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case isAssignVip = "IsAssignVip"
            case vip = "Vip"
        }
    }

    /// CreateReadOnlyGroupNetworkAccess返回参数结构体
    public struct CreateReadOnlyGroupNetworkAccessResponse: TCResponseModel {
        /// 流程ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowId: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 添加RO组网络
    ///
    /// 可对RO组进行网络的添加操作。
    @inlinable
    public func createReadOnlyGroupNetworkAccess(_ input: CreateReadOnlyGroupNetworkAccessRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateReadOnlyGroupNetworkAccessResponse> {
        self.client.execute(action: "CreateReadOnlyGroupNetworkAccess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 添加RO组网络
    ///
    /// 可对RO组进行网络的添加操作。
    @inlinable
    public func createReadOnlyGroupNetworkAccess(_ input: CreateReadOnlyGroupNetworkAccessRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateReadOnlyGroupNetworkAccessResponse {
        try await self.client.execute(action: "CreateReadOnlyGroupNetworkAccess", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 添加RO组网络
    ///
    /// 可对RO组进行网络的添加操作。
    @inlinable
    public func createReadOnlyGroupNetworkAccess(readOnlyGroupId: String, vpcId: String, subnetId: String, isAssignVip: Bool, vip: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateReadOnlyGroupNetworkAccessResponse> {
        self.createReadOnlyGroupNetworkAccess(.init(readOnlyGroupId: readOnlyGroupId, vpcId: vpcId, subnetId: subnetId, isAssignVip: isAssignVip, vip: vip), region: region, logger: logger, on: eventLoop)
    }

    /// 添加RO组网络
    ///
    /// 可对RO组进行网络的添加操作。
    @inlinable
    public func createReadOnlyGroupNetworkAccess(readOnlyGroupId: String, vpcId: String, subnetId: String, isAssignVip: Bool, vip: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateReadOnlyGroupNetworkAccessResponse {
        try await self.createReadOnlyGroupNetworkAccess(.init(readOnlyGroupId: readOnlyGroupId, vpcId: vpcId, subnetId: subnetId, isAssignVip: isAssignVip, vip: vip), region: region, logger: logger, on: eventLoop)
    }
}
