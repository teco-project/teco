//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Postgres {
    /// DescribeParameterTemplates请求参数结构体
    public struct DescribeParameterTemplatesRequest: TCRequestModel {
        /// 过滤条件，目前支持的过滤条件有：TemplateName, TemplateId，DBMajorVersion，DBEngine
        public let filters: [Filter]?

        /// 每页显示数量，[0，100]，默认 20
        public let limit: Int64?

        /// 数据偏移量
        public let offset: Int64?

        /// 排序指标，枚举值，支持：CreateTime，TemplateName，DBMajorVersion
        public let orderBy: String?

        /// 排序方式，枚举值，支持：asc（升序） ，desc（降序）
        public let orderByType: String?

        public init(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil) {
            self.filters = filters
            self.limit = limit
            self.offset = offset
            self.orderBy = orderBy
            self.orderByType = orderByType
        }

        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case limit = "Limit"
            case offset = "Offset"
            case orderBy = "OrderBy"
            case orderByType = "OrderByType"
        }
    }

    /// DescribeParameterTemplates返回参数结构体
    public struct DescribeParameterTemplatesResponse: TCResponseModel {
        /// 符合查询条件的参数模板总数
        public let totalCount: Int64

        /// 参数模板列表
        public let parameterTemplateSet: [ParameterTemplate]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case parameterTemplateSet = "ParameterTemplateSet"
            case requestId = "RequestId"
        }
    }

    /// 查询参数模板列表
    ///
    /// 本接口 (DescribeParameterTemplates) 用于查询参数模板列表。
    @inlinable
    public func describeParameterTemplates(_ input: DescribeParameterTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeParameterTemplatesResponse> {
        self.client.execute(action: "DescribeParameterTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询参数模板列表
    ///
    /// 本接口 (DescribeParameterTemplates) 用于查询参数模板列表。
    @inlinable
    public func describeParameterTemplates(_ input: DescribeParameterTemplatesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeParameterTemplatesResponse {
        try await self.client.execute(action: "DescribeParameterTemplates", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询参数模板列表
    ///
    /// 本接口 (DescribeParameterTemplates) 用于查询参数模板列表。
    @inlinable
    public func describeParameterTemplates(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeParameterTemplatesResponse> {
        self.describeParameterTemplates(DescribeParameterTemplatesRequest(filters: filters, limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询参数模板列表
    ///
    /// 本接口 (DescribeParameterTemplates) 用于查询参数模板列表。
    @inlinable
    public func describeParameterTemplates(filters: [Filter]? = nil, limit: Int64? = nil, offset: Int64? = nil, orderBy: String? = nil, orderByType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeParameterTemplatesResponse {
        try await self.describeParameterTemplates(DescribeParameterTemplatesRequest(filters: filters, limit: limit, offset: offset, orderBy: orderBy, orderByType: orderByType), region: region, logger: logger, on: eventLoop)
    }
}
