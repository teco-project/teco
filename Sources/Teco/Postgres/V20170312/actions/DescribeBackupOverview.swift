//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Postgres {
    /// DescribeBackupOverview请求参数结构体
    public struct DescribeBackupOverviewRequest: TCRequest {
        public init() {
        }
    }

    /// DescribeBackupOverview返回参数结构体
    public struct DescribeBackupOverviewResponse: TCResponse {
        /// 总免费空间大小，单位byte。
        public let totalFreeSize: UInt64

        /// 已使用免费空间大小，单位byte。
        public let usedFreeSize: UInt64

        /// 已使用收费空间大小，单位byte。
        public let usedBillingSize: UInt64

        /// 日志备份数量。
        public let logBackupCount: UInt64

        /// 日志备份大小，单位byte。
        public let logBackupSize: UInt64

        /// 手动创建的基础备份数量。
        public let manualBaseBackupCount: UInt64

        /// 手动创建的基础备份大小，单位byte。
        public let manualBaseBackupSize: UInt64

        /// 自动创建的基础备份数量。
        public let autoBaseBackupCount: UInt64

        /// 自动创建的基础备份大小，单位byte。
        public let autoBaseBackupSize: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalFreeSize = "TotalFreeSize"
            case usedFreeSize = "UsedFreeSize"
            case usedBillingSize = "UsedBillingSize"
            case logBackupCount = "LogBackupCount"
            case logBackupSize = "LogBackupSize"
            case manualBaseBackupCount = "ManualBaseBackupCount"
            case manualBaseBackupSize = "ManualBaseBackupSize"
            case autoBaseBackupCount = "AutoBaseBackupCount"
            case autoBaseBackupSize = "AutoBaseBackupSize"
            case requestId = "RequestId"
        }
    }

    /// 查询备份概览
    ///
    /// 本接口（DescribeBackupOverview）用于查询用户的备份概览信息。返回用户当前备份个数、备份占用容量、免费容量、收费容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupOverview(_ input: DescribeBackupOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupOverviewResponse> {
        self.client.execute(action: "DescribeBackupOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询备份概览
    ///
    /// 本接口（DescribeBackupOverview）用于查询用户的备份概览信息。返回用户当前备份个数、备份占用容量、免费容量、收费容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupOverview(_ input: DescribeBackupOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupOverviewResponse {
        try await self.client.execute(action: "DescribeBackupOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询备份概览
    ///
    /// 本接口（DescribeBackupOverview）用于查询用户的备份概览信息。返回用户当前备份个数、备份占用容量、免费容量、收费容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupOverview(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackupOverviewResponse> {
        self.describeBackupOverview(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份概览
    ///
    /// 本接口（DescribeBackupOverview）用于查询用户的备份概览信息。返回用户当前备份个数、备份占用容量、免费容量、收费容量等信息（容量单位为字节）。
    @inlinable
    public func describeBackupOverview(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackupOverviewResponse {
        try await self.describeBackupOverview(.init(), region: region, logger: logger, on: eventLoop)
    }
}
