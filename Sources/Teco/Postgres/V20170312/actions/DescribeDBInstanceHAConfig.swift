//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Postgres {
    /// DescribeDBInstanceHAConfig请求参数结构体
    public struct DescribeDBInstanceHAConfigRequest: TCRequestModel {
        /// 实例ID
        public let dbInstanceId: String

        public init(dbInstanceId: String) {
            self.dbInstanceId = dbInstanceId
        }

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
        }
    }

    /// DescribeDBInstanceHAConfig返回参数结构体
    public struct DescribeDBInstanceHAConfigResponse: TCResponseModel {
        /// 主从同步方式：
        /// - Semi-sync：半同步
        /// - Async：异步
        public let syncMode: String

        /// 高可用备机最大延迟数据量。备节点延迟数据量小于等于该值，且备节点延迟时间小于等于MaxStandbyLag时，可以切换为主节点。
        /// - 单位：byte
        /// - 参数范围：[1073741824, 322122547200]
        public let maxStandbyLatency: UInt64

        /// 高可用备机最大延迟时间。备节点延迟时间小于等于该值，且备节点延迟数据量小于等于MaxStandbyLatency时，可以切换为主节点。
        /// - 单位：s
        /// - 参数范围：[5, 10]
        public let maxStandbyLag: UInt64

        /// 同步备机最大延迟数据量。备机延迟数据量小于等于该值，且该备机延迟时间小于等于MaxSyncStandbyLag时，则该备机采用同步复制；否则，采用异步复制。
        /// 该参数值针对SyncMode设置为Semi-sync的实例有效。
        /// 异步实例该字段返回null。
        /// 半同步实例禁止退化为异步复制时，该字段返回null。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxSyncStandbyLatency: UInt64?

        /// 同步备机最大延迟时间。备机延迟时间小于等于该值，且该备机延迟数据量小于等于MaxSyncStandbyLatency时，则该备机采用同步复制；否则，采用异步复制。
        /// 该参数值针对SyncMode设置为Semi-sync的实例有效。
        /// 异步实例不返回该字段。
        /// 半同步实例禁止退化为异步复制时，不返回该字段。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxSyncStandbyLag: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case syncMode = "SyncMode"
            case maxStandbyLatency = "MaxStandbyLatency"
            case maxStandbyLag = "MaxStandbyLag"
            case maxSyncStandbyLatency = "MaxSyncStandbyLatency"
            case maxSyncStandbyLag = "MaxSyncStandbyLag"
            case requestId = "RequestId"
        }
    }

    /// 查询实例HA配置
    ///
    /// 本接口（DescribeDBInstanceHAConfig）用于查询实例HA配置信息。其中HA配置信息包括：
    /// - 允许备节点切换为主节点的条件配置
    /// - 半同步实例使用同步复制或异步复制的条件配置
    @inlinable
    public func describeDBInstanceHAConfig(_ input: DescribeDBInstanceHAConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBInstanceHAConfigResponse> {
        self.client.execute(action: "DescribeDBInstanceHAConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询实例HA配置
    ///
    /// 本接口（DescribeDBInstanceHAConfig）用于查询实例HA配置信息。其中HA配置信息包括：
    /// - 允许备节点切换为主节点的条件配置
    /// - 半同步实例使用同步复制或异步复制的条件配置
    @inlinable
    public func describeDBInstanceHAConfig(_ input: DescribeDBInstanceHAConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBInstanceHAConfigResponse {
        try await self.client.execute(action: "DescribeDBInstanceHAConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询实例HA配置
    ///
    /// 本接口（DescribeDBInstanceHAConfig）用于查询实例HA配置信息。其中HA配置信息包括：
    /// - 允许备节点切换为主节点的条件配置
    /// - 半同步实例使用同步复制或异步复制的条件配置
    @inlinable
    public func describeDBInstanceHAConfig(dbInstanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBInstanceHAConfigResponse> {
        self.describeDBInstanceHAConfig(.init(dbInstanceId: dbInstanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询实例HA配置
    ///
    /// 本接口（DescribeDBInstanceHAConfig）用于查询实例HA配置信息。其中HA配置信息包括：
    /// - 允许备节点切换为主节点的条件配置
    /// - 半同步实例使用同步复制或异步复制的条件配置
    @inlinable
    public func describeDBInstanceHAConfig(dbInstanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBInstanceHAConfigResponse {
        try await self.describeDBInstanceHAConfig(.init(dbInstanceId: dbInstanceId), region: region, logger: logger, on: eventLoop)
    }
}
