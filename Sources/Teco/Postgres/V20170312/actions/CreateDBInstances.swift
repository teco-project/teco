//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Postgres {
    /// CreateDBInstances请求参数结构体
    public struct CreateDBInstancesRequest: TCRequest {
        /// 售卖规格ID。该参数可以通过调用DescribeClasses的返回值中的SpecCode字段来获取。
        public let specCode: String

        /// 实例容量大小，单位：GB。
        public let storage: UInt64

        /// 一次性购买的实例数量。取值1-100
        public let instanceCount: UInt64

        /// 购买时长，单位：月。目前只支持1,2,3,4,5,6,7,8,9,10,11,12,24,36这些值，按量计费模式下该参数传1。
        public let period: UInt64

        /// 可用区ID。该参数可以通过调用 DescribeZones 接口的返回值中的Zone字段来获取。
        public let zone: String

        /// 项目ID。
        public let projectId: Int64?

        /// PostgreSQL社区大版本+小版本号。
        /// 一般场景不推荐传入该参数。如需指定，只能传当前大版本号下最新小版本号。
        public let dbVersion: String?

        /// 实例计费类型。目前支持：PREPAID（预付费，即包年包月），POSTPAID_BY_HOUR（后付费，即按量计费）。默认值：PREPAID。
        public let instanceChargeType: String?

        /// 是否自动使用代金券。1（是），0（否），默认不使用。
        public let autoVoucher: UInt64?

        /// 代金券ID列表，目前仅支持指定一张代金券。
        public let voucherIds: [String]?

        /// 私有网络ID。
        public let vpcId: String?

        /// 私有网络子网ID。
        public let subnetId: String?

        /// 续费标记：0-正常续费（默认）；1-自动续费；
        public let autoRenewFlag: Int64?

        /// 活动ID
        public let activityId: Int64?

        /// 实例名(后续支持)
        public let name: String?

        /// 是否需要支持Ipv6，1：是，0：否
        public let needSupportIpv6: UInt64?

        /// 实例需要绑定的Tag信息，默认为空
        public let tagList: [Tag]?

        /// 安全组id
        public let securityGroupIds: [String]?

        /// PostgreSQL大版本号（该参数当前必传），版本信息可从[DescribeDBVersions](https://cloud.tencent.com/document/api/409/89018)获取。目前支持10，11，12，13，14，15这几个大版本，详情见[内核版本概述](https://cloud.tencent.com/document/product/409/67018)。
        /// 输入该参数时，会基于此大版本号创建对应的最新小版本的最新内核版本号实例。
        public let dbMajorVersion: String?

        /// PostgreSQL内核版本号。
        /// 一般场景不推荐传入该参数。如需指定，只能传当前大版本号下最新内核版本号。
        public let dbKernelVersion: String?

        public init(specCode: String, storage: UInt64, instanceCount: UInt64, period: UInt64, zone: String, projectId: Int64? = nil, dbVersion: String? = nil, instanceChargeType: String? = nil, autoVoucher: UInt64? = nil, voucherIds: [String]? = nil, vpcId: String? = nil, subnetId: String? = nil, autoRenewFlag: Int64? = nil, activityId: Int64? = nil, name: String? = nil, needSupportIpv6: UInt64? = nil, tagList: [Tag]? = nil, securityGroupIds: [String]? = nil, dbMajorVersion: String? = nil, dbKernelVersion: String? = nil) {
            self.specCode = specCode
            self.storage = storage
            self.instanceCount = instanceCount
            self.period = period
            self.zone = zone
            self.projectId = projectId
            self.dbVersion = dbVersion
            self.instanceChargeType = instanceChargeType
            self.autoVoucher = autoVoucher
            self.voucherIds = voucherIds
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.autoRenewFlag = autoRenewFlag
            self.activityId = activityId
            self.name = name
            self.needSupportIpv6 = needSupportIpv6
            self.tagList = tagList
            self.securityGroupIds = securityGroupIds
            self.dbMajorVersion = dbMajorVersion
            self.dbKernelVersion = dbKernelVersion
        }

        enum CodingKeys: String, CodingKey {
            case specCode = "SpecCode"
            case storage = "Storage"
            case instanceCount = "InstanceCount"
            case period = "Period"
            case zone = "Zone"
            case projectId = "ProjectId"
            case dbVersion = "DBVersion"
            case instanceChargeType = "InstanceChargeType"
            case autoVoucher = "AutoVoucher"
            case voucherIds = "VoucherIds"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case autoRenewFlag = "AutoRenewFlag"
            case activityId = "ActivityId"
            case name = "Name"
            case needSupportIpv6 = "NeedSupportIpv6"
            case tagList = "TagList"
            case securityGroupIds = "SecurityGroupIds"
            case dbMajorVersion = "DBMajorVersion"
            case dbKernelVersion = "DBKernelVersion"
        }
    }

    /// CreateDBInstances返回参数结构体
    public struct CreateDBInstancesResponse: TCResponse {
        /// 订单号列表。每个实例对应一个订单号。
        public let dealNames: [String]

        /// 冻结流水号
        public let billId: String

        /// 创建成功的实例ID集合，只在后付费情景下有返回值
        public let dbInstanceIdSet: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case dealNames = "DealNames"
            case billId = "BillId"
            case dbInstanceIdSet = "DBInstanceIdSet"
            case requestId = "RequestId"
        }
    }

    /// 创建实例（废弃）
    ///
    /// 本接口（CreateDBInstances）用于创建一个或者多个PostgreSQL实例,仅发货实例不会进行初始化。本接口已废弃，推荐使用接口[CreateInstances](https://cloud.tencent.com/document/api/409/56107)替代。
    @inlinable
    public func createDBInstances(_ input: CreateDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDBInstancesResponse> {
        self.client.execute(action: "CreateDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建实例（废弃）
    ///
    /// 本接口（CreateDBInstances）用于创建一个或者多个PostgreSQL实例,仅发货实例不会进行初始化。本接口已废弃，推荐使用接口[CreateInstances](https://cloud.tencent.com/document/api/409/56107)替代。
    @inlinable
    public func createDBInstances(_ input: CreateDBInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDBInstancesResponse {
        try await self.client.execute(action: "CreateDBInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建实例（废弃）
    ///
    /// 本接口（CreateDBInstances）用于创建一个或者多个PostgreSQL实例,仅发货实例不会进行初始化。本接口已废弃，推荐使用接口[CreateInstances](https://cloud.tencent.com/document/api/409/56107)替代。
    @inlinable
    public func createDBInstances(specCode: String, storage: UInt64, instanceCount: UInt64, period: UInt64, zone: String, projectId: Int64? = nil, dbVersion: String? = nil, instanceChargeType: String? = nil, autoVoucher: UInt64? = nil, voucherIds: [String]? = nil, vpcId: String? = nil, subnetId: String? = nil, autoRenewFlag: Int64? = nil, activityId: Int64? = nil, name: String? = nil, needSupportIpv6: UInt64? = nil, tagList: [Tag]? = nil, securityGroupIds: [String]? = nil, dbMajorVersion: String? = nil, dbKernelVersion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDBInstancesResponse> {
        self.createDBInstances(.init(specCode: specCode, storage: storage, instanceCount: instanceCount, period: period, zone: zone, projectId: projectId, dbVersion: dbVersion, instanceChargeType: instanceChargeType, autoVoucher: autoVoucher, voucherIds: voucherIds, vpcId: vpcId, subnetId: subnetId, autoRenewFlag: autoRenewFlag, activityId: activityId, name: name, needSupportIpv6: needSupportIpv6, tagList: tagList, securityGroupIds: securityGroupIds, dbMajorVersion: dbMajorVersion, dbKernelVersion: dbKernelVersion), region: region, logger: logger, on: eventLoop)
    }

    /// 创建实例（废弃）
    ///
    /// 本接口（CreateDBInstances）用于创建一个或者多个PostgreSQL实例,仅发货实例不会进行初始化。本接口已废弃，推荐使用接口[CreateInstances](https://cloud.tencent.com/document/api/409/56107)替代。
    @inlinable
    public func createDBInstances(specCode: String, storage: UInt64, instanceCount: UInt64, period: UInt64, zone: String, projectId: Int64? = nil, dbVersion: String? = nil, instanceChargeType: String? = nil, autoVoucher: UInt64? = nil, voucherIds: [String]? = nil, vpcId: String? = nil, subnetId: String? = nil, autoRenewFlag: Int64? = nil, activityId: Int64? = nil, name: String? = nil, needSupportIpv6: UInt64? = nil, tagList: [Tag]? = nil, securityGroupIds: [String]? = nil, dbMajorVersion: String? = nil, dbKernelVersion: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDBInstancesResponse {
        try await self.createDBInstances(.init(specCode: specCode, storage: storage, instanceCount: instanceCount, period: period, zone: zone, projectId: projectId, dbVersion: dbVersion, instanceChargeType: instanceChargeType, autoVoucher: autoVoucher, voucherIds: voucherIds, vpcId: vpcId, subnetId: subnetId, autoRenewFlag: autoRenewFlag, activityId: activityId, name: name, needSupportIpv6: needSupportIpv6, tagList: tagList, securityGroupIds: securityGroupIds, dbMajorVersion: dbMajorVersion, dbKernelVersion: dbKernelVersion), region: region, logger: logger, on: eventLoop)
    }
}
