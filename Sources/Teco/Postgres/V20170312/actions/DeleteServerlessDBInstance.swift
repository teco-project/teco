//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Postgres {
    /// DeleteServerlessDBInstance请求参数结构体
    public struct DeleteServerlessDBInstanceRequest: TCRequestModel {
        /// DB实例名称，实例名和实例ID必须至少传一个，如果同时存在，将只以实例ID为准。
        public let dbInstanceName: String?

        /// DB实例ID，实例名和实例ID必须至少传一个，如果同时存在，将只以实例ID为准。
        public let dbInstanceId: String?

        public init(dbInstanceName: String? = nil, dbInstanceId: String? = nil) {
            self.dbInstanceName = dbInstanceName
            self.dbInstanceId = dbInstanceId
        }

        enum CodingKeys: String, CodingKey {
            case dbInstanceName = "DBInstanceName"
            case dbInstanceId = "DBInstanceId"
        }
    }

    /// DeleteServerlessDBInstance返回参数结构体
    public struct DeleteServerlessDBInstanceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除ServerlessDB实例
    ///
    /// 本接口 (DeleteServerlessDBInstance) 用于删除一个ServerlessDB实例。
    @inlinable @discardableResult
    public func deleteServerlessDBInstance(_ input: DeleteServerlessDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteServerlessDBInstanceResponse> {
        self.client.execute(action: "DeleteServerlessDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除ServerlessDB实例
    ///
    /// 本接口 (DeleteServerlessDBInstance) 用于删除一个ServerlessDB实例。
    @inlinable @discardableResult
    public func deleteServerlessDBInstance(_ input: DeleteServerlessDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteServerlessDBInstanceResponse {
        try await self.client.execute(action: "DeleteServerlessDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除ServerlessDB实例
    ///
    /// 本接口 (DeleteServerlessDBInstance) 用于删除一个ServerlessDB实例。
    @inlinable @discardableResult
    public func deleteServerlessDBInstance(dbInstanceName: String? = nil, dbInstanceId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteServerlessDBInstanceResponse> {
        let input = DeleteServerlessDBInstanceRequest(dbInstanceName: dbInstanceName, dbInstanceId: dbInstanceId)
        return self.client.execute(action: "DeleteServerlessDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除ServerlessDB实例
    ///
    /// 本接口 (DeleteServerlessDBInstance) 用于删除一个ServerlessDB实例。
    @inlinable @discardableResult
    public func deleteServerlessDBInstance(dbInstanceName: String? = nil, dbInstanceId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteServerlessDBInstanceResponse {
        let input = DeleteServerlessDBInstanceRequest(dbInstanceName: dbInstanceName, dbInstanceId: dbInstanceId)
        return try await self.client.execute(action: "DeleteServerlessDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
