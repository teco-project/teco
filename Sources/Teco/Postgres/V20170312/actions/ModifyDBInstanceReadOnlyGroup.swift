//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Postgres {
    /// ModifyDBInstanceReadOnlyGroup请求参数结构体
    public struct ModifyDBInstanceReadOnlyGroupRequest: TCRequestModel {
        /// 实例ID
        public let dbInstanceId: String

        /// 当前实例所在只读组ID
        public let readOnlyGroupId: String

        /// 实例修改的目标只读组ID
        public let newReadOnlyGroupId: String

        public init(dbInstanceId: String, readOnlyGroupId: String, newReadOnlyGroupId: String) {
            self.dbInstanceId = dbInstanceId
            self.readOnlyGroupId = readOnlyGroupId
            self.newReadOnlyGroupId = newReadOnlyGroupId
        }

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case readOnlyGroupId = "ReadOnlyGroupId"
            case newReadOnlyGroupId = "NewReadOnlyGroupId"
        }
    }

    /// ModifyDBInstanceReadOnlyGroup返回参数结构体
    public struct ModifyDBInstanceReadOnlyGroupResponse: TCResponseModel {
        /// 流程ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 修改实例所属的只读组
    ///
    /// 本接口（ModifyDBInstanceReadOnlyGroup）用于修改实例所属的只读组
    @inlinable
    public func modifyDBInstanceReadOnlyGroup(_ input: ModifyDBInstanceReadOnlyGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBInstanceReadOnlyGroupResponse> {
        self.client.execute(action: "ModifyDBInstanceReadOnlyGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改实例所属的只读组
    ///
    /// 本接口（ModifyDBInstanceReadOnlyGroup）用于修改实例所属的只读组
    @inlinable
    public func modifyDBInstanceReadOnlyGroup(_ input: ModifyDBInstanceReadOnlyGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBInstanceReadOnlyGroupResponse {
        try await self.client.execute(action: "ModifyDBInstanceReadOnlyGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改实例所属的只读组
    ///
    /// 本接口（ModifyDBInstanceReadOnlyGroup）用于修改实例所属的只读组
    @inlinable
    public func modifyDBInstanceReadOnlyGroup(dbInstanceId: String, readOnlyGroupId: String, newReadOnlyGroupId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBInstanceReadOnlyGroupResponse> {
        self.modifyDBInstanceReadOnlyGroup(.init(dbInstanceId: dbInstanceId, readOnlyGroupId: readOnlyGroupId, newReadOnlyGroupId: newReadOnlyGroupId), region: region, logger: logger, on: eventLoop)
    }

    /// 修改实例所属的只读组
    ///
    /// 本接口（ModifyDBInstanceReadOnlyGroup）用于修改实例所属的只读组
    @inlinable
    public func modifyDBInstanceReadOnlyGroup(dbInstanceId: String, readOnlyGroupId: String, newReadOnlyGroupId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBInstanceReadOnlyGroupResponse {
        try await self.modifyDBInstanceReadOnlyGroup(.init(dbInstanceId: dbInstanceId, readOnlyGroupId: readOnlyGroupId, newReadOnlyGroupId: newReadOnlyGroupId), region: region, logger: logger, on: eventLoop)
    }
}
