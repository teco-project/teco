//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Postgres {
    /// DescribeParameterTemplateAttributes请求参数结构体
    public struct DescribeParameterTemplateAttributesRequest: TCRequestModel {
        /// 参数模板ID
        public let templateId: String

        public init(templateId: String) {
            self.templateId = templateId
        }

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
        }
    }

    /// DescribeParameterTemplateAttributes返回参数结构体
    public struct DescribeParameterTemplateAttributesResponse: TCResponseModel {
        /// 参数模板ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateId: String?

        /// 参数模板包含的参数个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: Int64?

        /// 参数模板包含的参数信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paramInfoSet: [ParamInfo]?

        /// 参数模板名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateName: String?

        /// 参数模板适用的数据库版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbMajorVersion: String?

        /// 参数模板适用的数据库引擎
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbEngine: String?

        /// 参数模板描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let templateDescription: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateId = "TemplateId"
            case totalCount = "TotalCount"
            case paramInfoSet = "ParamInfoSet"
            case templateName = "TemplateName"
            case dbMajorVersion = "DBMajorVersion"
            case dbEngine = "DBEngine"
            case templateDescription = "TemplateDescription"
            case requestId = "RequestId"
        }
    }

    /// 查询参数模板详情
    ///
    /// 本接口（DescribeParameterTemplateAttributes）用于查询某个参数模板的具体内容，包括基本信息和参数信息。
    @inlinable
    public func describeParameterTemplateAttributes(_ input: DescribeParameterTemplateAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeParameterTemplateAttributesResponse> {
        self.client.execute(action: "DescribeParameterTemplateAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询参数模板详情
    ///
    /// 本接口（DescribeParameterTemplateAttributes）用于查询某个参数模板的具体内容，包括基本信息和参数信息。
    @inlinable
    public func describeParameterTemplateAttributes(_ input: DescribeParameterTemplateAttributesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeParameterTemplateAttributesResponse {
        try await self.client.execute(action: "DescribeParameterTemplateAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询参数模板详情
    ///
    /// 本接口（DescribeParameterTemplateAttributes）用于查询某个参数模板的具体内容，包括基本信息和参数信息。
    @inlinable
    public func describeParameterTemplateAttributes(templateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeParameterTemplateAttributesResponse> {
        let input = DescribeParameterTemplateAttributesRequest(templateId: templateId)
        return self.client.execute(action: "DescribeParameterTemplateAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询参数模板详情
    ///
    /// 本接口（DescribeParameterTemplateAttributes）用于查询某个参数模板的具体内容，包括基本信息和参数信息。
    @inlinable
    public func describeParameterTemplateAttributes(templateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeParameterTemplateAttributesResponse {
        let input = DescribeParameterTemplateAttributesRequest(templateId: templateId)
        return try await self.client.execute(action: "DescribeParameterTemplateAttributes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
