//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Postgres {
    /// 创建ServerlessDB实例
    ///
    /// 本接口 (CreateServerlessDBInstance) 用于创建一个ServerlessDB实例，创建成功返回实例ID。
    @inlinable
    public func createServerlessDBInstance(_ input: CreateServerlessDBInstanceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateServerlessDBInstanceResponse > {
        self.client.execute(action: "CreateServerlessDBInstance", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 创建ServerlessDB实例
    ///
    /// 本接口 (CreateServerlessDBInstance) 用于创建一个ServerlessDB实例，创建成功返回实例ID。
    @inlinable
    public func createServerlessDBInstance(_ input: CreateServerlessDBInstanceRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateServerlessDBInstanceResponse {
        try await self.client.execute(action: "CreateServerlessDBInstance", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// CreateServerlessDBInstance请求参数结构体
    public struct CreateServerlessDBInstanceRequest: TCRequestModel {
        /// 可用区ID。公测阶段仅支持ap-shanghai-2、ap-beijing-1,ap-guangzhou-2.
        public let zone: String
        
        /// DB实例名称，同一个账号下该值必须唯一。
        public let dbInstanceName: String
        
        /// PostgreSQL内核版本，目前只支持：10.4。
        public let dbVersion: String
        
        /// PostgreSQL数据库字符集，目前支持UTF8。
        public let dbCharset: String
        
        /// 项目ID。
        public let projectId: UInt64?
        
        /// 私有网络ID。
        public let vpcId: String?
        
        /// 私有网络子网ID。
        public let subnetId: String?
        
        /// 实例需要绑定的标签数组信息
        public let tagList: [Tag]?
        
        public init (zone: String, dbInstanceName: String, dbVersion: String, dbCharset: String, projectId: UInt64?, vpcId: String?, subnetId: String?, tagList: [Tag]?) {
            self.zone = zone
            self.dbInstanceName = dbInstanceName
            self.dbVersion = dbVersion
            self.dbCharset = dbCharset
            self.projectId = projectId
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.tagList = tagList
        }
        
        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case dbInstanceName = "DBInstanceName"
            case dbVersion = "DBVersion"
            case dbCharset = "DBCharset"
            case projectId = "ProjectId"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case tagList = "TagList"
        }
    }
    
    /// CreateServerlessDBInstance返回参数结构体
    public struct CreateServerlessDBInstanceResponse: TCResponseModel {
        /// 实例ID，该ID全局唯一，如：postgres-xxxxx
        public let dbInstanceId: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case requestId = "RequestId"
        }
    }
}
