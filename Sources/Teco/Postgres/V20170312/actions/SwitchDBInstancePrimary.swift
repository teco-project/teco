//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Postgres {
    /// SwitchDBInstancePrimary请求参数结构体
    public struct SwitchDBInstancePrimaryRequest: TCRequestModel {
        /// 实例ID
        public let dbInstanceId: String

        /// 是否强制切换。强制切换时只要备节点可访问，无论主备延迟多大都会发起切换。只有SwitchTag为0时，才可使用立即切换。
        /// - 默认：false
        public let force: Bool?

        /// 指定实例配置完成变更后的切换时间。
        /// - 0：立即切换
        /// - 1：指定时间切换
        /// - 2：维护时间窗口内切换
        /// - 默认值：0
        public let switchTag: UInt64?

        /// 切换开始时间，时间格式：HH:MM:SS，例如：01:00:00。当SwitchTag为0或2时，该参数失效。
        public let switchStartTime: String?

        /// 切换截止时间，时间格式：HH:MM:SS，例如：01:30:00。当SwitchTag为0或2时，该参数失效。SwitchStartTime和SwitchEndTime时间窗口不能小于30分钟。
        public let switchEndTime: String?

        public init(dbInstanceId: String, force: Bool? = nil, switchTag: UInt64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil) {
            self.dbInstanceId = dbInstanceId
            self.force = force
            self.switchTag = switchTag
            self.switchStartTime = switchStartTime
            self.switchEndTime = switchEndTime
        }

        enum CodingKeys: String, CodingKey {
            case dbInstanceId = "DBInstanceId"
            case force = "Force"
            case switchTag = "SwitchTag"
            case switchStartTime = "SwitchStartTime"
            case switchEndTime = "SwitchEndTime"
        }
    }

    /// SwitchDBInstancePrimary返回参数结构体
    public struct SwitchDBInstancePrimaryResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 切换实例主备关系
    ///
    /// 本接口（SwitchDBInstancePrimary）用于切换实例主备关系。
    /// - 通过主动发起切换，可以验证业务能否正确处理实例主备切换的场景
    /// - 通过使用强制切换，可以在备节点延迟不满足切换条件时，强制发起主从切换
    /// - 只有主实例可以执行该操作
    @inlinable @discardableResult
    public func switchDBInstancePrimary(_ input: SwitchDBInstancePrimaryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SwitchDBInstancePrimaryResponse> {
        self.client.execute(action: "SwitchDBInstancePrimary", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 切换实例主备关系
    ///
    /// 本接口（SwitchDBInstancePrimary）用于切换实例主备关系。
    /// - 通过主动发起切换，可以验证业务能否正确处理实例主备切换的场景
    /// - 通过使用强制切换，可以在备节点延迟不满足切换条件时，强制发起主从切换
    /// - 只有主实例可以执行该操作
    @inlinable @discardableResult
    public func switchDBInstancePrimary(_ input: SwitchDBInstancePrimaryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SwitchDBInstancePrimaryResponse {
        try await self.client.execute(action: "SwitchDBInstancePrimary", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 切换实例主备关系
    ///
    /// 本接口（SwitchDBInstancePrimary）用于切换实例主备关系。
    /// - 通过主动发起切换，可以验证业务能否正确处理实例主备切换的场景
    /// - 通过使用强制切换，可以在备节点延迟不满足切换条件时，强制发起主从切换
    /// - 只有主实例可以执行该操作
    @inlinable @discardableResult
    public func switchDBInstancePrimary(dbInstanceId: String, force: Bool? = nil, switchTag: UInt64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SwitchDBInstancePrimaryResponse> {
        self.switchDBInstancePrimary(.init(dbInstanceId: dbInstanceId, force: force, switchTag: switchTag, switchStartTime: switchStartTime, switchEndTime: switchEndTime), region: region, logger: logger, on: eventLoop)
    }

    /// 切换实例主备关系
    ///
    /// 本接口（SwitchDBInstancePrimary）用于切换实例主备关系。
    /// - 通过主动发起切换，可以验证业务能否正确处理实例主备切换的场景
    /// - 通过使用强制切换，可以在备节点延迟不满足切换条件时，强制发起主从切换
    /// - 只有主实例可以执行该操作
    @inlinable @discardableResult
    public func switchDBInstancePrimary(dbInstanceId: String, force: Bool? = nil, switchTag: UInt64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SwitchDBInstancePrimaryResponse {
        try await self.switchDBInstancePrimary(.init(dbInstanceId: dbInstanceId, force: force, switchTag: switchTag, switchStartTime: switchStartTime, switchEndTime: switchEndTime), region: region, logger: logger, on: eventLoop)
    }
}
