//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Goosefs {
    /// AttachFileSystemBucket请求参数结构体
    public struct AttachFileSystemBucketRequest: TCRequestModel {
        public let fileSystemId: String

        /// 关联新Bucket
        public let bucket: MappedBucket

        public init(fileSystemId: String, bucket: MappedBucket) {
            self.fileSystemId = fileSystemId
            self.bucket = bucket
        }

        enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case bucket = "Bucket"
        }
    }

    /// AttachFileSystemBucket返回参数结构体
    public struct AttachFileSystemBucketResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 为文件系统关联Bucket
    @inlinable @discardableResult
    public func attachFileSystemBucket(_ input: AttachFileSystemBucketRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AttachFileSystemBucketResponse> {
        self.client.execute(action: "AttachFileSystemBucket", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 为文件系统关联Bucket
    @inlinable @discardableResult
    public func attachFileSystemBucket(_ input: AttachFileSystemBucketRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachFileSystemBucketResponse {
        try await self.client.execute(action: "AttachFileSystemBucket", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 为文件系统关联Bucket
    @inlinable @discardableResult
    public func attachFileSystemBucket(fileSystemId: String, bucket: MappedBucket, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AttachFileSystemBucketResponse> {
        self.attachFileSystemBucket(.init(fileSystemId: fileSystemId, bucket: bucket), region: region, logger: logger, on: eventLoop)
    }

    /// 为文件系统关联Bucket
    @inlinable @discardableResult
    public func attachFileSystemBucket(fileSystemId: String, bucket: MappedBucket, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AttachFileSystemBucketResponse {
        try await self.attachFileSystemBucket(.init(fileSystemId: fileSystemId, bucket: bucket), region: region, logger: logger, on: eventLoop)
    }
}
