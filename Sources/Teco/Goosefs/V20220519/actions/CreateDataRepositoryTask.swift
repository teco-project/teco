//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Goosefs {
    /// CreateDataRepositoryTask请求参数结构体
    public struct CreateDataRepositoryTaskRequest: TCRequestModel {
        /// 数据流通任务类型, FS_TO_COS(文件系统到COS Bucket),或者COS_TO_FS(COS Bucket到文件系统)
        public let taskType: String

        /// COS存储桶名
        public let bucket: String

        /// 文件系统ID
        public let fileSystemId: String

        /// 对于FS_TO_COS, TaskPath是Bucket映射目录的相对路径, 对于COS_TO_FS是COS上的路径。如果置为空, 则表示全部数据
        public let taskPath: String

        /// 任务名称
        public let taskName: String

        /// 数据流通方式 MSP_AFM 手动加载  RAW_AFM 按需加载
        public let repositoryType: String?

        /// 文件列表下载地址，以http开头
        public let textLocation: String?

        public init(taskType: String, bucket: String, fileSystemId: String, taskPath: String, taskName: String, repositoryType: String? = nil, textLocation: String? = nil) {
            self.taskType = taskType
            self.bucket = bucket
            self.fileSystemId = fileSystemId
            self.taskPath = taskPath
            self.taskName = taskName
            self.repositoryType = repositoryType
            self.textLocation = textLocation
        }

        enum CodingKeys: String, CodingKey {
            case taskType = "TaskType"
            case bucket = "Bucket"
            case fileSystemId = "FileSystemId"
            case taskPath = "TaskPath"
            case taskName = "TaskName"
            case repositoryType = "RepositoryType"
            case textLocation = "TextLocation"
        }
    }

    /// CreateDataRepositoryTask返回参数结构体
    public struct CreateDataRepositoryTaskResponse: TCResponseModel {
        /// 任务ID
        public let taskId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 创建数据流通任务
    ///
    /// 创建数据流通任务,包括从将文件系统的数据上传到存储桶下, 以及从存储桶下载到文件系统里。
    @inlinable
    public func createDataRepositoryTask(_ input: CreateDataRepositoryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDataRepositoryTaskResponse> {
        self.client.execute(action: "CreateDataRepositoryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建数据流通任务
    ///
    /// 创建数据流通任务,包括从将文件系统的数据上传到存储桶下, 以及从存储桶下载到文件系统里。
    @inlinable
    public func createDataRepositoryTask(_ input: CreateDataRepositoryTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDataRepositoryTaskResponse {
        try await self.client.execute(action: "CreateDataRepositoryTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建数据流通任务
    ///
    /// 创建数据流通任务,包括从将文件系统的数据上传到存储桶下, 以及从存储桶下载到文件系统里。
    @inlinable
    public func createDataRepositoryTask(taskType: String, bucket: String, fileSystemId: String, taskPath: String, taskName: String, repositoryType: String? = nil, textLocation: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDataRepositoryTaskResponse> {
        self.createDataRepositoryTask(.init(taskType: taskType, bucket: bucket, fileSystemId: fileSystemId, taskPath: taskPath, taskName: taskName, repositoryType: repositoryType, textLocation: textLocation), region: region, logger: logger, on: eventLoop)
    }

    /// 创建数据流通任务
    ///
    /// 创建数据流通任务,包括从将文件系统的数据上传到存储桶下, 以及从存储桶下载到文件系统里。
    @inlinable
    public func createDataRepositoryTask(taskType: String, bucket: String, fileSystemId: String, taskPath: String, taskName: String, repositoryType: String? = nil, textLocation: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDataRepositoryTaskResponse {
        try await self.createDataRepositoryTask(.init(taskType: taskType, bucket: bucket, fileSystemId: fileSystemId, taskPath: taskPath, taskName: taskName, repositoryType: repositoryType, textLocation: textLocation), region: region, logger: logger, on: eventLoop)
    }
}
