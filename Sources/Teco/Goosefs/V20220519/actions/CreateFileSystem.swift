//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Goosefs {
    /// CreateFileSystem请求参数结构体
    public struct CreateFileSystemRequest: TCRequest {
        /// 文件系统类型, 可填goosefs和goosefsx
        public let type: String

        /// 文件系统名
        public let name: String

        /// 文件系统备注描述
        public let description: String

        /// vpc网络ID
        public let vpcId: String

        /// 子网ID
        public let subnetId: String

        /// 子网所在的可用区
        public let zone: String

        /// 文件系统关联的tag
        public let tag: [Tag]?

        /// GooseFSx构建时要传递的参数
        public let gooseFSxBuildElements: GooseFSxBuildElement?

        public init(type: String, name: String, description: String, vpcId: String, subnetId: String, zone: String, tag: [Tag]? = nil, gooseFSxBuildElements: GooseFSxBuildElement? = nil) {
            self.type = type
            self.name = name
            self.description = description
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.zone = zone
            self.tag = tag
            self.gooseFSxBuildElements = gooseFSxBuildElements
        }

        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case name = "Name"
            case description = "Description"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case zone = "Zone"
            case tag = "Tag"
            case gooseFSxBuildElements = "GooseFSxBuildElements"
        }
    }

    /// CreateFileSystem返回参数结构体
    public struct CreateFileSystemResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建文件系统
    @inlinable @discardableResult
    public func createFileSystem(_ input: CreateFileSystemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFileSystemResponse> {
        self.client.execute(action: "CreateFileSystem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建文件系统
    @inlinable @discardableResult
    public func createFileSystem(_ input: CreateFileSystemRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFileSystemResponse {
        try await self.client.execute(action: "CreateFileSystem", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建文件系统
    @inlinable @discardableResult
    public func createFileSystem(type: String, name: String, description: String, vpcId: String, subnetId: String, zone: String, tag: [Tag]? = nil, gooseFSxBuildElements: GooseFSxBuildElement? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateFileSystemResponse> {
        self.createFileSystem(.init(type: type, name: name, description: description, vpcId: vpcId, subnetId: subnetId, zone: zone, tag: tag, gooseFSxBuildElements: gooseFSxBuildElements), region: region, logger: logger, on: eventLoop)
    }

    /// 创建文件系统
    @inlinable @discardableResult
    public func createFileSystem(type: String, name: String, description: String, vpcId: String, subnetId: String, zone: String, tag: [Tag]? = nil, gooseFSxBuildElements: GooseFSxBuildElement? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateFileSystemResponse {
        try await self.createFileSystem(.init(type: type, name: name, description: description, vpcId: vpcId, subnetId: subnetId, zone: zone, tag: tag, gooseFSxBuildElements: gooseFSxBuildElements), region: region, logger: logger, on: eventLoop)
    }
}
