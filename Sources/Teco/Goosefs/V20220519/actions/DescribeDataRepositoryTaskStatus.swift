//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Goosefs {
    /// DescribeDataRepositoryTaskStatus请求参数结构体
    public struct DescribeDataRepositoryTaskStatusRequest: TCRequestModel {
        /// task id
        public let taskId: String

        /// file system id
        public let fileSystemId: String

        public init(taskId: String, fileSystemId: String) {
            self.taskId = taskId
            self.fileSystemId = fileSystemId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case fileSystemId = "FileSystemId"
        }
    }

    /// DescribeDataRepositoryTaskStatus返回参数结构体
    public struct DescribeDataRepositoryTaskStatusResponse: TCResponseModel {
        /// 任务id
        public let taskId: String

        /// 任务状态 0(初始化中), 1(运行中), 2(已完成), 3(任务失败)
        public let status: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 获取数据流通任务实时状态
    ///
    /// 获取数据流通任务实时状态，用作客户端控制
    @inlinable
    public func describeDataRepositoryTaskStatus(_ input: DescribeDataRepositoryTaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDataRepositoryTaskStatusResponse> {
        self.client.execute(action: "DescribeDataRepositoryTaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取数据流通任务实时状态
    ///
    /// 获取数据流通任务实时状态，用作客户端控制
    @inlinable
    public func describeDataRepositoryTaskStatus(_ input: DescribeDataRepositoryTaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDataRepositoryTaskStatusResponse {
        try await self.client.execute(action: "DescribeDataRepositoryTaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取数据流通任务实时状态
    ///
    /// 获取数据流通任务实时状态，用作客户端控制
    @inlinable
    public func describeDataRepositoryTaskStatus(taskId: String, fileSystemId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDataRepositoryTaskStatusResponse> {
        self.describeDataRepositoryTaskStatus(.init(taskId: taskId, fileSystemId: fileSystemId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取数据流通任务实时状态
    ///
    /// 获取数据流通任务实时状态，用作客户端控制
    @inlinable
    public func describeDataRepositoryTaskStatus(taskId: String, fileSystemId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDataRepositoryTaskStatusResponse {
        try await self.describeDataRepositoryTaskStatus(.init(taskId: taskId, fileSystemId: fileSystemId), region: region, logger: logger, on: eventLoop)
    }
}
