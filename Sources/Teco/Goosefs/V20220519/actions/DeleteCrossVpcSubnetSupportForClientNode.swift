//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Goosefs {
    /// DeleteCrossVpcSubnetSupportForClientNode请求参数结构体
    public struct DeleteCrossVpcSubnetSupportForClientNodeRequest: TCRequest {
        /// 文件系统ID
        public let fileSystemId: String

        /// 子网信息
        public let subnetInfo: SubnetInfo

        public init(fileSystemId: String, subnetInfo: SubnetInfo) {
            self.fileSystemId = fileSystemId
            self.subnetInfo = subnetInfo
        }

        enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case subnetInfo = "SubnetInfo"
        }
    }

    /// DeleteCrossVpcSubnetSupportForClientNode返回参数结构体
    public struct DeleteCrossVpcSubnetSupportForClientNodeResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 为客户端节点删除跨vpc子网访问能力
    @inlinable @discardableResult
    public func deleteCrossVpcSubnetSupportForClientNode(_ input: DeleteCrossVpcSubnetSupportForClientNodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCrossVpcSubnetSupportForClientNodeResponse> {
        self.client.execute(action: "DeleteCrossVpcSubnetSupportForClientNode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 为客户端节点删除跨vpc子网访问能力
    @inlinable @discardableResult
    public func deleteCrossVpcSubnetSupportForClientNode(_ input: DeleteCrossVpcSubnetSupportForClientNodeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCrossVpcSubnetSupportForClientNodeResponse {
        try await self.client.execute(action: "DeleteCrossVpcSubnetSupportForClientNode", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 为客户端节点删除跨vpc子网访问能力
    @inlinable @discardableResult
    public func deleteCrossVpcSubnetSupportForClientNode(fileSystemId: String, subnetInfo: SubnetInfo, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCrossVpcSubnetSupportForClientNodeResponse> {
        self.deleteCrossVpcSubnetSupportForClientNode(.init(fileSystemId: fileSystemId, subnetInfo: subnetInfo), region: region, logger: logger, on: eventLoop)
    }

    /// 为客户端节点删除跨vpc子网访问能力
    @inlinable @discardableResult
    public func deleteCrossVpcSubnetSupportForClientNode(fileSystemId: String, subnetInfo: SubnetInfo, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCrossVpcSubnetSupportForClientNodeResponse {
        try await self.deleteCrossVpcSubnetSupportForClientNode(.init(fileSystemId: fileSystemId, subnetInfo: subnetInfo), region: region, logger: logger, on: eventLoop)
    }
}
