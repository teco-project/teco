//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Market {
    /// GetUsagePlanUsageAmount请求参数结构体
    public struct GetUsagePlanUsageAmountRequest: TCRequestModel {
        /// 用于查询实例的Id
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// GetUsagePlanUsageAmount返回参数结构体
    public struct GetUsagePlanUsageAmountResponse: TCResponseModel {
        /// 最大调用量
        public let maxRequestNum: Int64

        /// 已经调用量
        public let inUseRequestNum: Int64

        /// 剩余调用量
        public let remainingRequestNum: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case maxRequestNum = "MaxRequestNum"
            case inUseRequestNum = "InUseRequestNum"
            case remainingRequestNum = "RemainingRequestNum"
            case requestId = "RequestId"
        }
    }

    /// 查询使用计划使用量
    ///
    /// 该接口可以根据InstanceId查询实例的api的使用情况。
    @inlinable
    public func getUsagePlanUsageAmount(_ input: GetUsagePlanUsageAmountRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetUsagePlanUsageAmountResponse> {
        self.client.execute(action: "GetUsagePlanUsageAmount", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询使用计划使用量
    ///
    /// 该接口可以根据InstanceId查询实例的api的使用情况。
    @inlinable
    public func getUsagePlanUsageAmount(_ input: GetUsagePlanUsageAmountRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetUsagePlanUsageAmountResponse {
        try await self.client.execute(action: "GetUsagePlanUsageAmount", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询使用计划使用量
    ///
    /// 该接口可以根据InstanceId查询实例的api的使用情况。
    @inlinable
    public func getUsagePlanUsageAmount(instanceId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetUsagePlanUsageAmountResponse> {
        self.getUsagePlanUsageAmount(GetUsagePlanUsageAmountRequest(instanceId: instanceId), logger: logger, on: eventLoop)
    }

    /// 查询使用计划使用量
    ///
    /// 该接口可以根据InstanceId查询实例的api的使用情况。
    @inlinable
    public func getUsagePlanUsageAmount(instanceId: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetUsagePlanUsageAmountResponse {
        try await self.getUsagePlanUsageAmount(GetUsagePlanUsageAmountRequest(instanceId: instanceId), logger: logger, on: eventLoop)
    }
}
