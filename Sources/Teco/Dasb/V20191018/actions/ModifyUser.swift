//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Dasb {
    /// ModifyUser请求参数结构体
    public struct ModifyUserRequest: TCRequestModel {
        /// 用户ID
        public let id: UInt64
        
        /// 用户姓名，最大长度20个字符，不能包含空格
        public let realName: String
        
        /// 大陆手机号直接填写，如果是其他国家、地区号码,按照"国家地区代码|手机号"的格式输入。如: "+852|xxxxxxxx"
        public let phone: String
        
        /// 电子邮件
        public let email: String
        
        /// 用户生效时间，如:"2021-09-22T00:00:00+00:00"
        /// 生效、失效时间不填则用户长期有效
        public let validateFrom: Date?
        
        /// 用户失效时间，如:"2021-09-23T00:00:00+00:00"
        /// 生效、失效时间不填则用户长期有效
        public let validateTo: Date?
        
        /// 所属用户组ID集合
        public let groupIdSet: [UInt64]?
        
        /// 认证方式，0 - 本地，1 - LDAP，2 - OAuth 不传则默认为0
        public let authType: UInt64?
        
        /// 访问时间段限制， 由0、1组成的字符串，长度168(7 × 24)，代表该用户在一周中允许访问的时间段。字符串中第N个字符代表在一周中的第N个小时， 0 - 代表不允许访问，1 - 代表允许访问
        public let validateTime: String?
        
        /// 用户所属部门的ID，如1.2.3
        public let departmentId: String?
        
        public init (id: UInt64, realName: String, phone: String, email: String, validateFrom: Date? = nil, validateTo: Date? = nil, groupIdSet: [UInt64]? = nil, authType: UInt64? = nil, validateTime: String? = nil, departmentId: String? = nil) {
            self.id = id
            self.realName = realName
            self.phone = phone
            self.email = email
            self.validateFrom = validateFrom
            self.validateTo = validateTo
            self.groupIdSet = groupIdSet
            self.authType = authType
            self.validateTime = validateTime
            self.departmentId = departmentId
        }
        
        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case realName = "RealName"
            case phone = "Phone"
            case email = "Email"
            case validateFrom = "ValidateFrom"
            case validateTo = "ValidateTo"
            case groupIdSet = "GroupIdSet"
            case authType = "AuthType"
            case validateTime = "ValidateTime"
            case departmentId = "DepartmentId"
        }
    }
    
    /// ModifyUser返回参数结构体
    public struct ModifyUserResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }
    
    /// 修改用户信息
    @inlinable
    public func modifyUser(_ input: ModifyUserRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyUserResponse > {
        self.client.execute(action: "ModifyUser", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改用户信息
    @inlinable
    public func modifyUser(_ input: ModifyUserRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyUserResponse {
        try await self.client.execute(action: "ModifyUser", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
