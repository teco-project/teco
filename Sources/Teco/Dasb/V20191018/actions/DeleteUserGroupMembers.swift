//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dasb {
    /// DeleteUserGroupMembers请求参数结构体
    public struct DeleteUserGroupMembersRequest: TCRequestModel {
        /// 用户组ID
        public let id: UInt64

        /// 需删除的成员用户ID集合
        public let memberIdSet: [UInt64]

        public init(id: UInt64, memberIdSet: [UInt64]) {
            self.id = id
            self.memberIdSet = memberIdSet
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case memberIdSet = "MemberIdSet"
        }
    }

    /// DeleteUserGroupMembers返回参数结构体
    public struct DeleteUserGroupMembersResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除用户组成员
    @inlinable @discardableResult
    public func deleteUserGroupMembers(_ input: DeleteUserGroupMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteUserGroupMembersResponse> {
        self.client.execute(action: "DeleteUserGroupMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除用户组成员
    @inlinable @discardableResult
    public func deleteUserGroupMembers(_ input: DeleteUserGroupMembersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteUserGroupMembersResponse {
        try await self.client.execute(action: "DeleteUserGroupMembers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除用户组成员
    @inlinable @discardableResult
    public func deleteUserGroupMembers(id: UInt64, memberIdSet: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteUserGroupMembersResponse> {
        self.deleteUserGroupMembers(.init(id: id, memberIdSet: memberIdSet), region: region, logger: logger, on: eventLoop)
    }

    /// 删除用户组成员
    @inlinable @discardableResult
    public func deleteUserGroupMembers(id: UInt64, memberIdSet: [UInt64], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteUserGroupMembersResponse {
        try await self.deleteUserGroupMembers(.init(id: id, memberIdSet: memberIdSet), region: region, logger: logger, on: eventLoop)
    }
}
