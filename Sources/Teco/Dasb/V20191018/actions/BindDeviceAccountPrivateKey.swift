//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Dasb {
    /// BindDeviceAccountPrivateKey请求参数结构体
    public struct BindDeviceAccountPrivateKeyRequest: TCRequestModel {
        /// 主机账号ID
        public let id: UInt64

        /// 主机账号私钥，最新长度128字节，最大长度8192字节
        public let privateKey: String

        /// 主机账号私钥口令，最大长度256字节
        public let privateKeyPassword: String?

        public init(id: UInt64, privateKey: String, privateKeyPassword: String? = nil) {
            self.id = id
            self.privateKey = privateKey
            self.privateKeyPassword = privateKeyPassword
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case privateKey = "PrivateKey"
            case privateKeyPassword = "PrivateKeyPassword"
        }
    }

    /// BindDeviceAccountPrivateKey返回参数结构体
    public struct BindDeviceAccountPrivateKeyResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 绑定主机账号私钥
    @inlinable @discardableResult
    public func bindDeviceAccountPrivateKey(_ input: BindDeviceAccountPrivateKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindDeviceAccountPrivateKeyResponse> {
        self.client.execute(action: "BindDeviceAccountPrivateKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 绑定主机账号私钥
    @inlinable @discardableResult
    public func bindDeviceAccountPrivateKey(_ input: BindDeviceAccountPrivateKeyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindDeviceAccountPrivateKeyResponse {
        try await self.client.execute(action: "BindDeviceAccountPrivateKey", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 绑定主机账号私钥
    @inlinable @discardableResult
    public func bindDeviceAccountPrivateKey(id: UInt64, privateKey: String, privateKeyPassword: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BindDeviceAccountPrivateKeyResponse> {
        self.bindDeviceAccountPrivateKey(.init(id: id, privateKey: privateKey, privateKeyPassword: privateKeyPassword), region: region, logger: logger, on: eventLoop)
    }

    /// 绑定主机账号私钥
    @inlinable @discardableResult
    public func bindDeviceAccountPrivateKey(id: UInt64, privateKey: String, privateKeyPassword: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BindDeviceAccountPrivateKeyResponse {
        try await self.bindDeviceAccountPrivateKey(.init(id: id, privateKey: privateKey, privateKeyPassword: privateKeyPassword), region: region, logger: logger, on: eventLoop)
    }
}
