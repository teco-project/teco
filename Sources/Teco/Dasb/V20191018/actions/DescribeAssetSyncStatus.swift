//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dasb {
    /// DescribeAssetSyncStatus请求参数结构体
    public struct DescribeAssetSyncStatusRequest: TCRequestModel {
        /// 查询的资产同步类型。1 -主机资产， 2 - 数据库资产
        public let category: UInt64

        public init(category: UInt64) {
            self.category = category
        }

        enum CodingKeys: String, CodingKey {
            case category = "Category"
        }
    }

    /// DescribeAssetSyncStatus返回参数结构体
    public struct DescribeAssetSyncStatusResponse: TCResponseModel {
        /// 资产同步结果
        public let status: AssetSyncStatus

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 查询资产同步状态
    @inlinable
    public func describeAssetSyncStatus(_ input: DescribeAssetSyncStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetSyncStatusResponse> {
        self.client.execute(action: "DescribeAssetSyncStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询资产同步状态
    @inlinable
    public func describeAssetSyncStatus(_ input: DescribeAssetSyncStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetSyncStatusResponse {
        try await self.client.execute(action: "DescribeAssetSyncStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询资产同步状态
    @inlinable
    public func describeAssetSyncStatus(category: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetSyncStatusResponse> {
        self.describeAssetSyncStatus(.init(category: category), region: region, logger: logger, on: eventLoop)
    }

    /// 查询资产同步状态
    @inlinable
    public func describeAssetSyncStatus(category: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetSyncStatusResponse {
        try await self.describeAssetSyncStatus(.init(category: category), region: region, logger: logger, on: eventLoop)
    }
}
