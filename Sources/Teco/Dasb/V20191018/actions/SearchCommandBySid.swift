//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Dasb {
    /// SearchCommandBySid请求参数结构体
    public struct SearchCommandBySidRequest: TCPaginatedRequest {
        /// 会话Id
        public let sid: String

        /// 命令，可模糊搜索
        public let cmd: String?

        /// Cmd字段是前端传值是否进行base64.
        /// 0:否，1：是
        public let encoding: UInt64?

        /// 偏移量
        public let offset: UInt64?

        /// 每页容量，默认20，最大200
        public let limit: UInt64?

        /// 根据拦截状态进行过滤
        public let auditAction: [UInt64]?

        public init(sid: String, cmd: String? = nil, encoding: UInt64? = nil, offset: UInt64? = nil, limit: UInt64? = nil, auditAction: [UInt64]? = nil) {
            self.sid = sid
            self.cmd = cmd
            self.encoding = encoding
            self.offset = offset
            self.limit = limit
            self.auditAction = auditAction
        }

        enum CodingKeys: String, CodingKey {
            case sid = "Sid"
            case cmd = "Cmd"
            case encoding = "Encoding"
            case offset = "Offset"
            case limit = "Limit"
            case auditAction = "AuditAction"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: SearchCommandBySidResponse) -> SearchCommandBySidRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return SearchCommandBySidRequest(sid: self.sid, cmd: self.cmd, encoding: self.encoding, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, auditAction: self.auditAction)
        }
    }

    /// SearchCommandBySid返回参数结构体
    public struct SearchCommandBySidResponse: TCPaginatedResponse {
        /// 总记录数
        public let totalCount: UInt64

        /// 命令列表
        public let commandSet: [Command]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case commandSet = "CommandSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``Command`` list from the paginated response.
        public func getItems() -> [Command] {
            self.commandSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 根据会话Id搜索Command
    @inlinable
    public func searchCommandBySid(_ input: SearchCommandBySidRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchCommandBySidResponse> {
        self.client.execute(action: "SearchCommandBySid", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 根据会话Id搜索Command
    @inlinable
    public func searchCommandBySid(_ input: SearchCommandBySidRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchCommandBySidResponse {
        try await self.client.execute(action: "SearchCommandBySid", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 根据会话Id搜索Command
    @inlinable
    public func searchCommandBySid(sid: String, cmd: String? = nil, encoding: UInt64? = nil, offset: UInt64? = nil, limit: UInt64? = nil, auditAction: [UInt64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchCommandBySidResponse> {
        self.searchCommandBySid(.init(sid: sid, cmd: cmd, encoding: encoding, offset: offset, limit: limit, auditAction: auditAction), region: region, logger: logger, on: eventLoop)
    }

    /// 根据会话Id搜索Command
    @inlinable
    public func searchCommandBySid(sid: String, cmd: String? = nil, encoding: UInt64? = nil, offset: UInt64? = nil, limit: UInt64? = nil, auditAction: [UInt64]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchCommandBySidResponse {
        try await self.searchCommandBySid(.init(sid: sid, cmd: cmd, encoding: encoding, offset: offset, limit: limit, auditAction: auditAction), region: region, logger: logger, on: eventLoop)
    }

    /// 根据会话Id搜索Command
    @inlinable
    public func searchCommandBySidPaginated(_ input: SearchCommandBySidRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [Command])> {
        self.client.paginate(input: input, region: region, command: self.searchCommandBySid, logger: logger, on: eventLoop)
    }

    /// 根据会话Id搜索Command
    @inlinable @discardableResult
    public func searchCommandBySidPaginated(_ input: SearchCommandBySidRequest, region: TCRegion? = nil, onResponse: @escaping (SearchCommandBySidResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.searchCommandBySid, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 根据会话Id搜索Command
    ///
    /// - Returns: `AsyncSequence`s of ``Command`` and ``SearchCommandBySidResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func searchCommandBySidPaginator(_ input: SearchCommandBySidRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<SearchCommandBySidRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.searchCommandBySid, logger: logger, on: eventLoop)
    }
}
