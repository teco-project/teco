//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Dasb {
    /// DeployResource请求参数结构体
    public struct DeployResourceRequest: TCRequestModel {
        /// 需要开通服务的资源ID
        public let resourceId: String

        /// 需要开通服务的地域
        public let apCode: String

        /// 子网所在可用区
        public let zone: String

        /// 需要开通服务的VPC
        public let vpcId: String

        /// 需要开通服务的子网ID
        public let subnetId: String

        /// 需要开通服务的子网网段
        public let cidrBlock: String

        /// 需要开通服务的VPC名称
        public let vpcName: String?

        /// 需要开通服务的VPC对应的网段
        public let vpcCidrBlock: String?

        /// 需要开通服务的子网名称
        public let subnetName: String?

        public init(resourceId: String, apCode: String, zone: String, vpcId: String, subnetId: String, cidrBlock: String, vpcName: String? = nil, vpcCidrBlock: String? = nil, subnetName: String? = nil) {
            self.resourceId = resourceId
            self.apCode = apCode
            self.zone = zone
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.cidrBlock = cidrBlock
            self.vpcName = vpcName
            self.vpcCidrBlock = vpcCidrBlock
            self.subnetName = subnetName
        }

        enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case apCode = "ApCode"
            case zone = "Zone"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case cidrBlock = "CidrBlock"
            case vpcName = "VpcName"
            case vpcCidrBlock = "VpcCidrBlock"
            case subnetName = "SubnetName"
        }
    }

    /// DeployResource返回参数结构体
    public struct DeployResourceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 开通服务
    ///
    /// 开通服务，初始化资源，只针对新购资源
    @inlinable @discardableResult
    public func deployResource(_ input: DeployResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeployResourceResponse> {
        self.client.execute(action: "DeployResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开通服务
    ///
    /// 开通服务，初始化资源，只针对新购资源
    @inlinable @discardableResult
    public func deployResource(_ input: DeployResourceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeployResourceResponse {
        try await self.client.execute(action: "DeployResource", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开通服务
    ///
    /// 开通服务，初始化资源，只针对新购资源
    @inlinable @discardableResult
    public func deployResource(resourceId: String, apCode: String, zone: String, vpcId: String, subnetId: String, cidrBlock: String, vpcName: String? = nil, vpcCidrBlock: String? = nil, subnetName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeployResourceResponse> {
        self.deployResource(.init(resourceId: resourceId, apCode: apCode, zone: zone, vpcId: vpcId, subnetId: subnetId, cidrBlock: cidrBlock, vpcName: vpcName, vpcCidrBlock: vpcCidrBlock, subnetName: subnetName), region: region, logger: logger, on: eventLoop)
    }

    /// 开通服务
    ///
    /// 开通服务，初始化资源，只针对新购资源
    @inlinable @discardableResult
    public func deployResource(resourceId: String, apCode: String, zone: String, vpcId: String, subnetId: String, cidrBlock: String, vpcName: String? = nil, vpcCidrBlock: String? = nil, subnetName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeployResourceResponse {
        try await self.deployResource(.init(resourceId: resourceId, apCode: apCode, zone: zone, vpcId: vpcId, subnetId: subnetId, cidrBlock: cidrBlock, vpcName: vpcName, vpcCidrBlock: vpcCidrBlock, subnetName: subnetName), region: region, logger: logger, on: eventLoop)
    }
}
