//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dasb {
    /// CreateDeviceAccount请求参数结构体
    public struct CreateDeviceAccountRequest: TCRequestModel {
        /// 主机记录ID
        public let deviceId: UInt64

        /// 账号名
        public let account: String

        public init(deviceId: UInt64, account: String) {
            self.deviceId = deviceId
            self.account = account
        }

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case account = "Account"
        }
    }

    /// CreateDeviceAccount返回参数结构体
    public struct CreateDeviceAccountResponse: TCResponseModel {
        /// 新建成功后返回的记录ID
        public let id: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case requestId = "RequestId"
        }
    }

    /// 新建主机账号
    @inlinable
    public func createDeviceAccount(_ input: CreateDeviceAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDeviceAccountResponse> {
        self.client.execute(action: "CreateDeviceAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新建主机账号
    @inlinable
    public func createDeviceAccount(_ input: CreateDeviceAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDeviceAccountResponse {
        try await self.client.execute(action: "CreateDeviceAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新建主机账号
    @inlinable
    public func createDeviceAccount(deviceId: UInt64, account: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDeviceAccountResponse> {
        self.createDeviceAccount(.init(deviceId: deviceId, account: account), region: region, logger: logger, on: eventLoop)
    }

    /// 新建主机账号
    @inlinable
    public func createDeviceAccount(deviceId: UInt64, account: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDeviceAccountResponse {
        try await self.createDeviceAccount(.init(deviceId: deviceId, account: account), region: region, logger: logger, on: eventLoop)
    }
}
