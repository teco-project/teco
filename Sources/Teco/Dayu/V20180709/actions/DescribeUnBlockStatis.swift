//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Dayu {
    /// DescribeUnBlockStatis请求参数结构体
    public struct DescribeUnBlockStatisRequest: TCRequest {
        public init() {
        }
    }

    /// DescribeUnBlockStatis返回参数结构体
    public struct DescribeUnBlockStatisResponse: TCResponse {
        /// 解封总配额数
        public let total: UInt64

        /// 已使用次数
        public let used: UInt64

        /// 统计起始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$beginTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var beginTime: Date

        /// 统计结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the underlying
        /// string value (through `$endTime`) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case used = "Used"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case requestId = "RequestId"
        }
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(_ input: DescribeUnBlockStatisRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUnBlockStatisResponse> {
        self.client.execute(action: "DescribeUnBlockStatis", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(_ input: DescribeUnBlockStatisRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUnBlockStatisResponse {
        try await self.client.execute(action: "DescribeUnBlockStatis", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUnBlockStatisResponse> {
        self.describeUnBlockStatis(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUnBlockStatisResponse {
        try await self.describeUnBlockStatis(.init(), region: region, logger: logger, on: eventLoop)
    }
}
