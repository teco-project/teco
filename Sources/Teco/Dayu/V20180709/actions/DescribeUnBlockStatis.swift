//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Dayu {
    /// DescribeUnBlockStatis请求参数结构体
    public struct DescribeUnBlockStatisRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeUnBlockStatis返回参数结构体
    public struct DescribeUnBlockStatisResponse: TCResponseModel {
        /// 解封总配额数
        public let total: UInt64

        /// 已使用次数
        public let used: UInt64

        /// 统计起始时间
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var beginTime: Date

        /// 统计结束时间
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCTimestampEncoding public var endTime: Date

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case used = "Used"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
            case requestId = "RequestId"
        }
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(_ input: DescribeUnBlockStatisRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUnBlockStatisResponse> {
        self.client.execute(action: "DescribeUnBlockStatis", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(_ input: DescribeUnBlockStatisRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUnBlockStatisResponse {
        try await self.client.execute(action: "DescribeUnBlockStatis", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUnBlockStatisResponse> {
        self.describeUnBlockStatis(DescribeUnBlockStatisRequest(), logger: logger, on: eventLoop)
    }

    /// 获取黑洞解封次数
    @inlinable
    public func describeUnBlockStatis(logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUnBlockStatisResponse {
        try await self.describeUnBlockStatis(DescribeUnBlockStatisRequest(), logger: logger, on: eventLoop)
    }
}
