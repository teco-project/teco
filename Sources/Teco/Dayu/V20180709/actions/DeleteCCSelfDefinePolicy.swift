//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Dayu {
    /// DeleteCCSelfDefinePolicy请求参数结构体
    public struct DeleteCCSelfDefinePolicyRequest: TCRequestModel {
        /// 大禹子产品代号（bgpip表示高防IP；bgp表示独享包；bgp-multip表示共享包；net表示高防IP专业版）
        public let business: String

        /// 资源ID
        public let id: String

        /// 策略ID
        public let setId: String

        public init(business: String, id: String, setId: String) {
            self.business = business
            self.id = id
            self.setId = setId
        }

        enum CodingKeys: String, CodingKey {
            case business = "Business"
            case id = "Id"
            case setId = "SetId"
        }
    }

    /// DeleteCCSelfDefinePolicy返回参数结构体
    public struct DeleteCCSelfDefinePolicyResponse: TCResponseModel {
        /// 成功码
        public let success: SuccessCode

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case success = "Success"
            case requestId = "RequestId"
        }
    }

    /// 删除CC自定义策略
    @inlinable
    public func deleteCCSelfDefinePolicy(_ input: DeleteCCSelfDefinePolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCCSelfDefinePolicyResponse> {
        self.client.execute(action: "DeleteCCSelfDefinePolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除CC自定义策略
    @inlinable
    public func deleteCCSelfDefinePolicy(_ input: DeleteCCSelfDefinePolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCCSelfDefinePolicyResponse {
        try await self.client.execute(action: "DeleteCCSelfDefinePolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除CC自定义策略
    @inlinable
    public func deleteCCSelfDefinePolicy(business: String, id: String, setId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCCSelfDefinePolicyResponse> {
        self.deleteCCSelfDefinePolicy(.init(business: business, id: id, setId: setId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除CC自定义策略
    @inlinable
    public func deleteCCSelfDefinePolicy(business: String, id: String, setId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCCSelfDefinePolicyResponse {
        try await self.deleteCCSelfDefinePolicy(.init(business: business, id: id, setId: setId), region: region, logger: logger, on: eventLoop)
    }
}
