//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dayu {
    /// DescribePackIndex请求参数结构体
    public struct DescribePackIndexRequest: TCRequestModel {
        /// 大禹子产品代号（bgpip表示高防IP；bgp表示高防包；net表示高防IP专业版）
        public let business: String

        public init(business: String) {
            self.business = business
        }

        enum CodingKeys: String, CodingKey {
            case business = "Business"
        }
    }

    /// DescribePackIndex返回参数结构体
    public struct DescribePackIndexResponse: TCResponseModel {
        /// 字段值，如下：
        /// TotalPackCount：资源数
        /// AttackPackCount：清洗中的资源数
        /// BlockPackCount：封堵中的资源数
        /// ExpiredPackCount：过期的资源数
        /// ExpireingPackCount：即将过期的资源数
        /// IsolatePackCount：隔离中的资源数
        public let data: [KeyValue]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 获取产品总览
    ///
    /// 获取产品总览统计，支持高防包、高防IP、高防IP专业版；
    @inlinable
    public func describePackIndex(_ input: DescribePackIndexRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePackIndexResponse> {
        self.client.execute(action: "DescribePackIndex", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取产品总览
    ///
    /// 获取产品总览统计，支持高防包、高防IP、高防IP专业版；
    @inlinable
    public func describePackIndex(_ input: DescribePackIndexRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePackIndexResponse {
        try await self.client.execute(action: "DescribePackIndex", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取产品总览
    ///
    /// 获取产品总览统计，支持高防包、高防IP、高防IP专业版；
    @inlinable
    public func describePackIndex(business: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribePackIndexResponse> {
        self.describePackIndex(.init(business: business), region: region, logger: logger, on: eventLoop)
    }

    /// 获取产品总览
    ///
    /// 获取产品总览统计，支持高防包、高防IP、高防IP专业版；
    @inlinable
    public func describePackIndex(business: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePackIndexResponse {
        try await self.describePackIndex(.init(business: business), region: region, logger: logger, on: eventLoop)
    }
}
