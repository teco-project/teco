//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCdnError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case camResourceArrayTooLong = "LimitExceeded.CamResourceArrayTooLong"
            case camResourceTooManyTagKey = "LimitExceeded.CamResourceTooManyTagKey"
            case camTagKeyTooLong = "LimitExceeded.CamTagKeyTooLong"
            case camTagKeyTooManyTagValue = "LimitExceeded.CamTagKeyTooManyTagValue"
            case camTagQuotaExceedLimit = "LimitExceeded.CamTagQuotaExceedLimit"
            case camUserTooManyTagKey = "LimitExceeded.CamUserTooManyTagKey"
            case cdnCallingQueryIpTooOften = "LimitExceeded.CdnCallingQueryIpTooOften"
            case cdnClsTooManyTopics = "LimitExceeded.CdnClsTooManyTopics"
            case cdnConfigTooManyCacheRules = "LimitExceeded.CdnConfigTooManyCacheRules"
            case cdnHostOpTooOften = "LimitExceeded.CdnHostOpTooOften"
            case cdnPurgePathExceedBatchLimit = "LimitExceeded.CdnPurgePathExceedBatchLimit"
            case cdnPurgePathExceedDayLimit = "LimitExceeded.CdnPurgePathExceedDayLimit"
            case cdnPurgeUrlExceedBatchLimit = "LimitExceeded.CdnPurgeUrlExceedBatchLimit"
            case cdnPurgeUrlExceedDayLimit = "LimitExceeded.CdnPurgeUrlExceedDayLimit"
            case cdnPushExceedBatchLimit = "LimitExceeded.CdnPushExceedBatchLimit"
            case cdnPushExceedDayLimit = "LimitExceeded.CdnPushExceedDayLimit"
            case cdnQueryIpBatchTooMany = "LimitExceeded.CdnQueryIpBatchTooMany"
            case cdnUserTooManyHosts = "LimitExceeded.CdnUserTooManyHosts"
            case clsLogSizeExceed = "LimitExceeded.ClsLogSizeExceed"
            case clsLogsetExceed = "LimitExceeded.ClsLogsetExceed"
            case clsTopicExceed = "LimitExceeded.ClsTopicExceed"
            case scdnLogTaskExceedDayLimit = "LimitExceeded.ScdnLogTaskExceedDayLimit"
            case other = "LimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 资源数组超过最大值。
        public static var camResourceArrayTooLong: LimitExceeded {
            LimitExceeded(.camResourceArrayTooLong)
        }
        
        /// 单个资源标签键数不能超过50。
        public static var camResourceTooManyTagKey: LimitExceeded {
            LimitExceeded(.camResourceTooManyTagKey)
        }
        
        /// 标签键长度超过最大值。
        public static var camTagKeyTooLong: LimitExceeded {
            LimitExceeded(.camTagKeyTooLong)
        }
        
        /// 单个标签键对应标签值不能超过1000。
        public static var camTagKeyTooManyTagValue: LimitExceeded {
            LimitExceeded(.camTagKeyTooManyTagValue)
        }
        
        public static var camTagQuotaExceedLimit: LimitExceeded {
            LimitExceeded(.camTagQuotaExceedLimit)
        }
        
        /// 单个用户最多1000个不同的key。
        public static var camUserTooManyTagKey: LimitExceeded {
            LimitExceeded(.camUserTooManyTagKey)
        }
        
        /// 查询IP归属操作过于频繁。
        public static var cdnCallingQueryIpTooOften: LimitExceeded {
            LimitExceeded(.cdnCallingQueryIpTooOften)
        }
        
        /// 该账号已经创建了太多主题。
        public static var cdnClsTooManyTopics: LimitExceeded {
            LimitExceeded(.cdnClsTooManyTopics)
        }
        
        /// 缓存配置规则数超出限制。
        public static var cdnConfigTooManyCacheRules: LimitExceeded {
            LimitExceeded(.cdnConfigTooManyCacheRules)
        }
        
        /// 域名操作过于频繁。
        public static var cdnHostOpTooOften: LimitExceeded {
            LimitExceeded(.cdnHostOpTooOften)
        }
        
        /// 刷新的目录数量超过限制。
        public static var cdnPurgePathExceedBatchLimit: LimitExceeded {
            LimitExceeded(.cdnPurgePathExceedBatchLimit)
        }
        
        /// 刷新的目录数量超过每日限制。
        public static var cdnPurgePathExceedDayLimit: LimitExceeded {
            LimitExceeded(.cdnPurgePathExceedDayLimit)
        }
        
        /// 刷新的Url数量超过限制。
        public static var cdnPurgeUrlExceedBatchLimit: LimitExceeded {
            LimitExceeded(.cdnPurgeUrlExceedBatchLimit)
        }
        
        /// 刷新的Url数量超过每日限额。
        public static var cdnPurgeUrlExceedDayLimit: LimitExceeded {
            LimitExceeded(.cdnPurgeUrlExceedDayLimit)
        }
        
        /// 预热的Url数量超过单次限制。
        public static var cdnPushExceedBatchLimit: LimitExceeded {
            LimitExceeded(.cdnPushExceedBatchLimit)
        }
        
        /// 预热的Url数量超过每日限制。
        public static var cdnPushExceedDayLimit: LimitExceeded {
            LimitExceeded(.cdnPushExceedDayLimit)
        }
        
        /// 批量查询IP归属个数超过限制。
        public static var cdnQueryIpBatchTooMany: LimitExceeded {
            LimitExceeded(.cdnQueryIpBatchTooMany)
        }
        
        /// 用户域名数量已达上限，请联系腾讯云工程师处理。
        public static var cdnUserTooManyHosts: LimitExceeded {
            LimitExceeded(.cdnUserTooManyHosts)
        }
        
        /// 日志大小超限。
        public static var clsLogSizeExceed: LimitExceeded {
            LimitExceeded(.clsLogSizeExceed)
        }
        
        /// 日志集数目超出。
        public static var clsLogsetExceed: LimitExceeded {
            LimitExceeded(.clsLogsetExceed)
        }
        
        /// 主题超限。
        public static var clsTopicExceed: LimitExceeded {
            LimitExceeded(.clsTopicExceed)
        }
        
        /// 每日任务数量超出最大值。
        public static var scdnLogTaskExceedDayLimit: LimitExceeded {
            LimitExceeded(.scdnLogTaskExceedDayLimit)
        }
        
        /// 超过配额限制。
        public static var other: LimitExceeded {
            LimitExceeded(.other)
        }
    }
}

extension TCCdnError.LimitExceeded: Equatable {
    public static func == (lhs: TCCdnError.LimitExceeded, rhs: TCCdnError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCdnError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCdnError.LimitExceeded {
    /// - Returns: ``TCCdnError`` that holds the same error and context.
    public func toCdnError() -> TCCdnError {
        guard let code = TCCdnError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCdnError(code, context: self.context)
    }
}

extension TCCdnError.LimitExceeded {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
