//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCdnError {
    public struct ResourceUnavailable: TCErrorType {
        enum Code: String {
            case cdnHostBelongsToOthersInMainland = "ResourceUnavailable.CdnHostBelongsToOthersInMainland"
            case cdnHostBelongsToOthersInOverseas = "ResourceUnavailable.CdnHostBelongsToOthersInOverseas"
            case cdnHostExistsInDsa = "ResourceUnavailable.CdnHostExistsInDsa"
            case cdnHostExistsInTcb = "ResourceUnavailable.CdnHostExistsInTcb"
            case cdnHostIsLocked = "ResourceUnavailable.CdnHostIsLocked"
            case cdnHostIsMalicious = "ResourceUnavailable.CdnHostIsMalicious"
            case cdnHostIsNotOffline = "ResourceUnavailable.CdnHostIsNotOffline"
            case cdnHostIsNotOnline = "ResourceUnavailable.CdnHostIsNotOnline"
            case cdnHostNoIcp = "ResourceUnavailable.CdnHostNoIcp"
            case hostExistInVod = "ResourceUnavailable.HostExistInVod"
            case scdnUserNoPackage = "ResourceUnavailable.ScdnUserNoPackage"
            case scdnUserSuspend = "ResourceUnavailable.ScdnUserSuspend"
            case other = "ResourceUnavailable"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 该域名已在其他处接入中国境内服务地域，如需修改服务地域为全球，需验证取回域名。
        public static var cdnHostBelongsToOthersInMainland: ResourceUnavailable {
            ResourceUnavailable(.cdnHostBelongsToOthersInMainland)
        }
        
        /// 该域名已在其他处接入中国境外服务地域，如需修改服务地域为全球，需验证取回域名。
        public static var cdnHostBelongsToOthersInOverseas: ResourceUnavailable {
            ResourceUnavailable(.cdnHostBelongsToOthersInOverseas)
        }
        
        /// 域名已接入DSA功能。
        public static var cdnHostExistsInDsa: ResourceUnavailable {
            ResourceUnavailable(.cdnHostExistsInDsa)
        }
        
        /// 域名已经在TCB控制台接入。
        public static var cdnHostExistsInTcb: ResourceUnavailable {
            ResourceUnavailable(.cdnHostExistsInTcb)
        }
        
        /// 域名被锁定。
        public static var cdnHostIsLocked: ResourceUnavailable {
            ResourceUnavailable(.cdnHostIsLocked)
        }
        
        /// 该域名有违法违规风险，不可接入。
        public static var cdnHostIsMalicious: ResourceUnavailable {
            ResourceUnavailable(.cdnHostIsMalicious)
        }
        
        /// 域名未下线。
        public static var cdnHostIsNotOffline: ResourceUnavailable {
            ResourceUnavailable(.cdnHostIsNotOffline)
        }
        
        /// 域名已下线，无法提交预热。
        public static var cdnHostIsNotOnline: ResourceUnavailable {
            ResourceUnavailable(.cdnHostIsNotOnline)
        }
        
        /// 域名未备案，请将域名备案。备案同步周期为2小时，若域名已备案，可稍后重新接入。
        public static var cdnHostNoIcp: ResourceUnavailable {
            ResourceUnavailable(.cdnHostNoIcp)
        }
        
        /// 该域名已在云点播内接入，请先在云点播内删除域名后再接入。
        public static var hostExistInVod: ResourceUnavailable {
            ResourceUnavailable(.hostExistInVod)
        }
        
        /// SCDN服务未生效，请购买或续费SCDN套餐后重试。
        public static var scdnUserNoPackage: ResourceUnavailable {
            ResourceUnavailable(.scdnUserNoPackage)
        }
        
        /// SCDN服务未生效，请购买或续费SCDN套餐后重试。
        public static var scdnUserSuspend: ResourceUnavailable {
            ResourceUnavailable(.scdnUserSuspend)
        }
        
        /// 资源不可用。
        public static var other: ResourceUnavailable {
            ResourceUnavailable(.other)
        }
    }
}

extension TCCdnError.ResourceUnavailable: Equatable {
    public static func == (lhs: TCCdnError.ResourceUnavailable, rhs: TCCdnError.ResourceUnavailable) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCdnError.ResourceUnavailable: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCdnError.ResourceUnavailable {
    public func toCdnError() -> TCCdnError {
        guard let code = TCCdnError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCdnError(code, context: self.context)
    }
}