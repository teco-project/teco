//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCdnError {
    public struct UnsupportedOperation: TCCdnErrorType {
        enum Code: String {
            case clsNotAllowed = "UnsupportedOperation.ClsNotAllowed"
            case opNoAuth = "UnsupportedOperation.OpNoAuth"
            case other = "UnsupportedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 不允许操作。
        public static var clsNotAllowed: UnsupportedOperation {
            UnsupportedOperation(.clsNotAllowed)
        }
        
        /// 暂不支持此操作，请联系腾讯云工程师处理。
        public static var opNoAuth: UnsupportedOperation {
            UnsupportedOperation(.opNoAuth)
        }
        
        /// 操作不支持。
        public static var other: UnsupportedOperation {
            UnsupportedOperation(.other)
        }
        
        public func asCdnError() -> TCCdnError {
            let code: TCCdnError.Code
            switch self.error {
            case .clsNotAllowed: 
                code = .unsupportedOperation_ClsNotAllowed
            case .opNoAuth: 
                code = .unsupportedOperation_OpNoAuth
            case .other: 
                code = .unsupportedOperation
            }
            return TCCdnError(code, context: self.context)
        }
    }
}
