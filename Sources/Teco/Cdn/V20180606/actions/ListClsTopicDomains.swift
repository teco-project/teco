//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Cdn {
    /// 获取日志主题下绑定的域名
    ///
    /// ListClsTopicDomains 用于获取某日志主题下绑定的域名列表。
    @inlinable
    public func listClsTopicDomains(_ input: ListClsTopicDomainsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ListClsTopicDomainsResponse > {
        self.client.execute(action: "ListClsTopicDomains", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取日志主题下绑定的域名
    ///
    /// ListClsTopicDomains 用于获取某日志主题下绑定的域名列表。
    @inlinable
    public func listClsTopicDomains(_ input: ListClsTopicDomainsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListClsTopicDomainsResponse {
        try await self.client.execute(action: "ListClsTopicDomains", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ListClsTopicDomains请求参数结构体
    public struct ListClsTopicDomainsRequest: TCRequestModel {
        /// 日志集ID
        public let logsetId: String
        
        /// 日志主题ID
        public let topicId: String
        
        /// 接入渠道，cdn或者ecdn，默认值为cdn
        public let channel: String?
        
        public init (logsetId: String, topicId: String, channel: String?) {
            self.logsetId = logsetId
            self.topicId = topicId
            self.channel = channel
        }
        
        enum CodingKeys: String, CodingKey {
            case logsetId = "LogsetId"
            case topicId = "TopicId"
            case channel = "Channel"
        }
    }
    
    /// ListClsTopicDomains返回参数结构体
    public struct ListClsTopicDomainsResponse: TCResponseModel {
        /// 开发者ID
        public let appId: UInt64
        
        /// 渠道
        public let channel: String
        
        /// 日志集ID
        public let logsetId: String
        
        /// 日志主题ID
        public let topicId: String
        
        /// 域名区域配置，其中可能含有已删除的域名，如果要再传回ManageClsTopicDomains接口，需要结合ListCdnDomains接口排除掉已删除的域名
        public let domainAreaConfigs: [DomainAreaConfig]
        
        /// 日志主题名称
        public let topicName: String
        
        /// 日志主题最近更新时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: Date?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case channel = "Channel"
            case logsetId = "LogsetId"
            case topicId = "TopicId"
            case domainAreaConfigs = "DomainAreaConfigs"
            case topicName = "TopicName"
            case updateTime = "UpdateTime"
            case requestId = "RequestId"
        }
    }
}