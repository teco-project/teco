//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdn {
    /// AddCdnDomain请求参数结构体
    public struct AddCdnDomainRequest: TCRequestModel {
        /// 域名
        public let domain: String

        /// 加速域名业务类型
        /// web：网页小文件
        /// download：下载大文件
        /// media：音视频点播
        /// hybrid:  动静加速
        /// dynamic:  动态加速
        public let serviceType: String

        /// 源站配置
        public let origin: Origin

        /// 项目 ID，默认为 0，代表【默认项目】
        public let projectId: Int64?

        /// IP 黑白名单配置
        public let ipFilter: IpFilter?

        /// IP 限频配置
        public let ipFreqLimit: IpFreqLimit?

        /// 状态码缓存配置
        public let statusCodeCache: StatusCodeCache?

        /// 智能压缩配置
        public let compression: Compression?

        /// 带宽封顶配置
        public let bandwidthAlert: BandwidthAlert?

        /// Range 回源配置
        public let rangeOriginPull: RangeOriginPull?

        /// 301/302 回源跟随配置。
        public let followRedirect: FollowRedirect?

        /// 错误码重定向配置（功能灰度中，尚未全量）
        public let errorPage: ErrorPage?

        /// 请求头部配置
        public let requestHeader: RequestHeader?

        /// 响应头部配置
        public let responseHeader: ResponseHeader?

        /// 下载速度配置
        public let downstreamCapping: DownstreamCapping?

        /// 节点缓存键配置
        public let cacheKey: CacheKey?

        /// 头部缓存配置
        public let responseHeaderCache: ResponseHeaderCache?

        /// 视频拖拽配置
        public let videoSeek: VideoSeek?

        /// 缓存过期时间配置
        public let cache: Cache?

        /// 跨国链路优化配置
        public let originPullOptimization: OriginPullOptimization?

        /// Https 加速配置
        public let https: Https?

        /// 时间戳防盗链配置
        public let authentication: Authentication?

        /// SEO 优化配置
        public let seo: Seo?

        /// 访问协议强制跳转配置
        public let forceRedirect: ForceRedirect?

        /// Referer 防盗链配置
        public let referer: Referer?

        /// 浏览器缓存配置（功能灰度中，尚未全量）
        public let maxAge: MaxAge?

        /// Ipv6 配置（功能灰度中，尚未全量）
        public let ipv6: Ipv6?

        /// 地域属性特殊配置
        /// 适用于域名境内加速、境外加速配置不一致场景
        public let specificConfig: SpecificConfig?

        /// 域名加速区域
        /// mainland：中国境内加速
        /// overseas：中国境外加速
        /// global：全球加速
        /// 使用中国境外加速、全球加速时，需要先开通中国境外加速服务
        public let area: String?

        /// 回源超时配置
        public let originPullTimeout: OriginPullTimeout?

        /// 标签配置
        public let tag: [Tag]?

        /// Ipv6 访问配置
        public let ipv6Access: Ipv6Access?

        /// 离线缓存
        public let offlineCache: OfflineCache?

        /// Quic访问（收费服务，详见计费说明和产品文档）
        public let quic: Quic?

        /// 回源S3私有鉴权
        public let awsPrivateAccess: AwsPrivateAccess?

        /// 回源OSS私有鉴权
        public let ossPrivateAccess: OssPrivateAccess?

        /// 华为云对象存储回源鉴权
        public let hwPrivateAccess: HwPrivateAccess?

        /// 七牛云对象存储回源鉴权
        public let qnPrivateAccess: QnPrivateAccess?

        public init(domain: String, serviceType: String, origin: Origin, projectId: Int64? = nil, ipFilter: IpFilter? = nil, ipFreqLimit: IpFreqLimit? = nil, statusCodeCache: StatusCodeCache? = nil, compression: Compression? = nil, bandwidthAlert: BandwidthAlert? = nil, rangeOriginPull: RangeOriginPull? = nil, followRedirect: FollowRedirect? = nil, errorPage: ErrorPage? = nil, requestHeader: RequestHeader? = nil, responseHeader: ResponseHeader? = nil, downstreamCapping: DownstreamCapping? = nil, cacheKey: CacheKey? = nil, responseHeaderCache: ResponseHeaderCache? = nil, videoSeek: VideoSeek? = nil, cache: Cache? = nil, originPullOptimization: OriginPullOptimization? = nil, https: Https? = nil, authentication: Authentication? = nil, seo: Seo? = nil, forceRedirect: ForceRedirect? = nil, referer: Referer? = nil, maxAge: MaxAge? = nil, ipv6: Ipv6? = nil, specificConfig: SpecificConfig? = nil, area: String? = nil, originPullTimeout: OriginPullTimeout? = nil, tag: [Tag]? = nil, ipv6Access: Ipv6Access? = nil, offlineCache: OfflineCache? = nil, quic: Quic? = nil, awsPrivateAccess: AwsPrivateAccess? = nil, ossPrivateAccess: OssPrivateAccess? = nil, hwPrivateAccess: HwPrivateAccess? = nil, qnPrivateAccess: QnPrivateAccess? = nil) {
            self.domain = domain
            self.serviceType = serviceType
            self.origin = origin
            self.projectId = projectId
            self.ipFilter = ipFilter
            self.ipFreqLimit = ipFreqLimit
            self.statusCodeCache = statusCodeCache
            self.compression = compression
            self.bandwidthAlert = bandwidthAlert
            self.rangeOriginPull = rangeOriginPull
            self.followRedirect = followRedirect
            self.errorPage = errorPage
            self.requestHeader = requestHeader
            self.responseHeader = responseHeader
            self.downstreamCapping = downstreamCapping
            self.cacheKey = cacheKey
            self.responseHeaderCache = responseHeaderCache
            self.videoSeek = videoSeek
            self.cache = cache
            self.originPullOptimization = originPullOptimization
            self.https = https
            self.authentication = authentication
            self.seo = seo
            self.forceRedirect = forceRedirect
            self.referer = referer
            self.maxAge = maxAge
            self.ipv6 = ipv6
            self.specificConfig = specificConfig
            self.area = area
            self.originPullTimeout = originPullTimeout
            self.tag = tag
            self.ipv6Access = ipv6Access
            self.offlineCache = offlineCache
            self.quic = quic
            self.awsPrivateAccess = awsPrivateAccess
            self.ossPrivateAccess = ossPrivateAccess
            self.hwPrivateAccess = hwPrivateAccess
            self.qnPrivateAccess = qnPrivateAccess
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case serviceType = "ServiceType"
            case origin = "Origin"
            case projectId = "ProjectId"
            case ipFilter = "IpFilter"
            case ipFreqLimit = "IpFreqLimit"
            case statusCodeCache = "StatusCodeCache"
            case compression = "Compression"
            case bandwidthAlert = "BandwidthAlert"
            case rangeOriginPull = "RangeOriginPull"
            case followRedirect = "FollowRedirect"
            case errorPage = "ErrorPage"
            case requestHeader = "RequestHeader"
            case responseHeader = "ResponseHeader"
            case downstreamCapping = "DownstreamCapping"
            case cacheKey = "CacheKey"
            case responseHeaderCache = "ResponseHeaderCache"
            case videoSeek = "VideoSeek"
            case cache = "Cache"
            case originPullOptimization = "OriginPullOptimization"
            case https = "Https"
            case authentication = "Authentication"
            case seo = "Seo"
            case forceRedirect = "ForceRedirect"
            case referer = "Referer"
            case maxAge = "MaxAge"
            case ipv6 = "Ipv6"
            case specificConfig = "SpecificConfig"
            case area = "Area"
            case originPullTimeout = "OriginPullTimeout"
            case tag = "Tag"
            case ipv6Access = "Ipv6Access"
            case offlineCache = "OfflineCache"
            case quic = "Quic"
            case awsPrivateAccess = "AwsPrivateAccess"
            case ossPrivateAccess = "OssPrivateAccess"
            case hwPrivateAccess = "HwPrivateAccess"
            case qnPrivateAccess = "QnPrivateAccess"
        }
    }

    /// AddCdnDomain返回参数结构体
    public struct AddCdnDomainResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 新增加速域名
    ///
    /// AddCdnDomain 用于新增内容分发网络加速域名。1分钟内最多可新增100个域名。
    @inlinable @discardableResult
    public func addCdnDomain(_ input: AddCdnDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddCdnDomainResponse> {
        self.client.execute(action: "AddCdnDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增加速域名
    ///
    /// AddCdnDomain 用于新增内容分发网络加速域名。1分钟内最多可新增100个域名。
    @inlinable @discardableResult
    public func addCdnDomain(_ input: AddCdnDomainRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddCdnDomainResponse {
        try await self.client.execute(action: "AddCdnDomain", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增加速域名
    ///
    /// AddCdnDomain 用于新增内容分发网络加速域名。1分钟内最多可新增100个域名。
    @inlinable @discardableResult
    public func addCdnDomain(domain: String, serviceType: String, origin: Origin, projectId: Int64? = nil, ipFilter: IpFilter? = nil, ipFreqLimit: IpFreqLimit? = nil, statusCodeCache: StatusCodeCache? = nil, compression: Compression? = nil, bandwidthAlert: BandwidthAlert? = nil, rangeOriginPull: RangeOriginPull? = nil, followRedirect: FollowRedirect? = nil, errorPage: ErrorPage? = nil, requestHeader: RequestHeader? = nil, responseHeader: ResponseHeader? = nil, downstreamCapping: DownstreamCapping? = nil, cacheKey: CacheKey? = nil, responseHeaderCache: ResponseHeaderCache? = nil, videoSeek: VideoSeek? = nil, cache: Cache? = nil, originPullOptimization: OriginPullOptimization? = nil, https: Https? = nil, authentication: Authentication? = nil, seo: Seo? = nil, forceRedirect: ForceRedirect? = nil, referer: Referer? = nil, maxAge: MaxAge? = nil, ipv6: Ipv6? = nil, specificConfig: SpecificConfig? = nil, area: String? = nil, originPullTimeout: OriginPullTimeout? = nil, tag: [Tag]? = nil, ipv6Access: Ipv6Access? = nil, offlineCache: OfflineCache? = nil, quic: Quic? = nil, awsPrivateAccess: AwsPrivateAccess? = nil, ossPrivateAccess: OssPrivateAccess? = nil, hwPrivateAccess: HwPrivateAccess? = nil, qnPrivateAccess: QnPrivateAccess? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<AddCdnDomainResponse> {
        self.addCdnDomain(AddCdnDomainRequest(domain: domain, serviceType: serviceType, origin: origin, projectId: projectId, ipFilter: ipFilter, ipFreqLimit: ipFreqLimit, statusCodeCache: statusCodeCache, compression: compression, bandwidthAlert: bandwidthAlert, rangeOriginPull: rangeOriginPull, followRedirect: followRedirect, errorPage: errorPage, requestHeader: requestHeader, responseHeader: responseHeader, downstreamCapping: downstreamCapping, cacheKey: cacheKey, responseHeaderCache: responseHeaderCache, videoSeek: videoSeek, cache: cache, originPullOptimization: originPullOptimization, https: https, authentication: authentication, seo: seo, forceRedirect: forceRedirect, referer: referer, maxAge: maxAge, ipv6: ipv6, specificConfig: specificConfig, area: area, originPullTimeout: originPullTimeout, tag: tag, ipv6Access: ipv6Access, offlineCache: offlineCache, quic: quic, awsPrivateAccess: awsPrivateAccess, ossPrivateAccess: ossPrivateAccess, hwPrivateAccess: hwPrivateAccess, qnPrivateAccess: qnPrivateAccess), region: region, logger: logger, on: eventLoop)
    }

    /// 新增加速域名
    ///
    /// AddCdnDomain 用于新增内容分发网络加速域名。1分钟内最多可新增100个域名。
    @inlinable @discardableResult
    public func addCdnDomain(domain: String, serviceType: String, origin: Origin, projectId: Int64? = nil, ipFilter: IpFilter? = nil, ipFreqLimit: IpFreqLimit? = nil, statusCodeCache: StatusCodeCache? = nil, compression: Compression? = nil, bandwidthAlert: BandwidthAlert? = nil, rangeOriginPull: RangeOriginPull? = nil, followRedirect: FollowRedirect? = nil, errorPage: ErrorPage? = nil, requestHeader: RequestHeader? = nil, responseHeader: ResponseHeader? = nil, downstreamCapping: DownstreamCapping? = nil, cacheKey: CacheKey? = nil, responseHeaderCache: ResponseHeaderCache? = nil, videoSeek: VideoSeek? = nil, cache: Cache? = nil, originPullOptimization: OriginPullOptimization? = nil, https: Https? = nil, authentication: Authentication? = nil, seo: Seo? = nil, forceRedirect: ForceRedirect? = nil, referer: Referer? = nil, maxAge: MaxAge? = nil, ipv6: Ipv6? = nil, specificConfig: SpecificConfig? = nil, area: String? = nil, originPullTimeout: OriginPullTimeout? = nil, tag: [Tag]? = nil, ipv6Access: Ipv6Access? = nil, offlineCache: OfflineCache? = nil, quic: Quic? = nil, awsPrivateAccess: AwsPrivateAccess? = nil, ossPrivateAccess: OssPrivateAccess? = nil, hwPrivateAccess: HwPrivateAccess? = nil, qnPrivateAccess: QnPrivateAccess? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> AddCdnDomainResponse {
        try await self.addCdnDomain(AddCdnDomainRequest(domain: domain, serviceType: serviceType, origin: origin, projectId: projectId, ipFilter: ipFilter, ipFreqLimit: ipFreqLimit, statusCodeCache: statusCodeCache, compression: compression, bandwidthAlert: bandwidthAlert, rangeOriginPull: rangeOriginPull, followRedirect: followRedirect, errorPage: errorPage, requestHeader: requestHeader, responseHeader: responseHeader, downstreamCapping: downstreamCapping, cacheKey: cacheKey, responseHeaderCache: responseHeaderCache, videoSeek: videoSeek, cache: cache, originPullOptimization: originPullOptimization, https: https, authentication: authentication, seo: seo, forceRedirect: forceRedirect, referer: referer, maxAge: maxAge, ipv6: ipv6, specificConfig: specificConfig, area: area, originPullTimeout: originPullTimeout, tag: tag, ipv6Access: ipv6Access, offlineCache: offlineCache, quic: quic, awsPrivateAccess: awsPrivateAccess, ossPrivateAccess: ossPrivateAccess, hwPrivateAccess: hwPrivateAccess, qnPrivateAccess: qnPrivateAccess), region: region, logger: logger, on: eventLoop)
    }
}
