//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Cdn {
    /// DescribeScdnTopData请求参数结构体
    public struct DescribeScdnTopDataRequest: TCRequest {
        /// 查询起始时间，如：2018-09-04 10:40:00，返回结果大于等于指定时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date

        /// 查询结束时间，如：2018-09-04 10:40:00，返回结果小于等于指定时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date

        /// 查询的SCDN TOP攻击数据类型：
        /// waf：Web 攻击防护TOP数据
        public let mode: String

        /// 排序对象，支持以下几种形式：
        /// url：攻击目标 url 排序
        /// ip：攻击源 IP 排序
        /// attackType：攻击类型排序
        public let metric: String

        /// 排序使用的指标名称：
        /// request：请求次数
        public let filter: String

        /// 指定域名查询
        public let domain: String?

        /// 指定攻击类型, 仅 Mode=waf 时有效
        /// 不填则查询所有攻击类型的数据总和
        /// AttackType 映射如下:
        ///   other = '未知类型'
        ///   malicious_scan = "恶意扫描"
        ///   sql_inject = "SQL注入攻击"
        ///   xss = "XSS攻击"
        ///   cmd_inject = "命令注入攻击"
        ///   ldap_inject = "LDAP注入攻击"
        ///   ssi_inject = "SSI注入攻击"
        ///   xml_inject = "XML注入攻击"
        ///   web_service = "WEB服务漏洞攻击"
        ///   web_app = "WEB应用漏洞攻击"
        ///   path_traversal = "路径跨越攻击"
        ///   illegal_access_core_file = "核心文件非法访问"
        ///   trojan_horse = "木马后门攻击"
        ///   csrf = "CSRF攻击"
        ///   malicious_file_upload= '恶意文件上传'
        public let attackType: String?

        /// 指定防御模式,仅 Mode=waf 时有效
        /// 不填则查询所有防御模式的数据总和
        /// DefenceMode 映射如下：
        ///   observe = '观察模式'
        ///   intercept = '拦截模式'
        public let defenceMode: String?

        public init(startTime: Date, endTime: Date, mode: String, metric: String, filter: String, domain: String? = nil, attackType: String? = nil, defenceMode: String? = nil) {
            self._startTime = .init(wrappedValue: startTime)
            self._endTime = .init(wrappedValue: endTime)
            self.mode = mode
            self.metric = metric
            self.filter = filter
            self.domain = domain
            self.attackType = attackType
            self.defenceMode = defenceMode
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case mode = "Mode"
            case metric = "Metric"
            case filter = "Filter"
            case domain = "Domain"
            case attackType = "AttackType"
            case defenceMode = "DefenceMode"
        }
    }

    /// DescribeScdnTopData返回参数结构体
    public struct DescribeScdnTopDataResponse: TCResponse {
        /// WAF 攻击类型统计
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topTypeData: [ScdnTypeData]?

        /// TOP 攻击源 IP 统计
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topIpData: [ScdnTopData]?

        /// 查询的SCDN类型，当前仅支持 waf
        public let mode: String

        /// TOP URL 统计
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let topUrlData: [ScdnTopUrlData]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case topTypeData = "TopTypeData"
            case topIpData = "TopIpData"
            case mode = "Mode"
            case topUrlData = "TopUrlData"
            case requestId = "RequestId"
        }
    }

    /// 获取SCDN的Top数据
    @inlinable
    public func describeScdnTopData(_ input: DescribeScdnTopDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeScdnTopDataResponse> {
        self.client.execute(action: "DescribeScdnTopData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取SCDN的Top数据
    @inlinable
    public func describeScdnTopData(_ input: DescribeScdnTopDataRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScdnTopDataResponse {
        try await self.client.execute(action: "DescribeScdnTopData", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取SCDN的Top数据
    @inlinable
    public func describeScdnTopData(startTime: Date, endTime: Date, mode: String, metric: String, filter: String, domain: String? = nil, attackType: String? = nil, defenceMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeScdnTopDataResponse> {
        self.describeScdnTopData(.init(startTime: startTime, endTime: endTime, mode: mode, metric: metric, filter: filter, domain: domain, attackType: attackType, defenceMode: defenceMode), region: region, logger: logger, on: eventLoop)
    }

    /// 获取SCDN的Top数据
    @inlinable
    public func describeScdnTopData(startTime: Date, endTime: Date, mode: String, metric: String, filter: String, domain: String? = nil, attackType: String? = nil, defenceMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScdnTopDataResponse {
        try await self.describeScdnTopData(.init(startTime: startTime, endTime: endTime, mode: mode, metric: metric, filter: filter, domain: domain, attackType: attackType, defenceMode: defenceMode), region: region, logger: logger, on: eventLoop)
    }
}
