//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdn {
    /// DescribeIpStatus请求参数结构体
    public struct DescribeIpStatusRequest: TCRequest {
        /// 加速域名
        public let domain: String

        /// 节点类型：
        /// edge：表示边缘节点
        /// last：表示回源层节点
        /// 不填充情况下，默认返回边缘节点信息
        public let layer: String?

        /// 查询区域：
        /// mainland: 国内节点
        /// overseas: 海外节点
        /// global: 全球节点
        public let area: String?

        /// 是否以IP段的格式返回。
        public let segment: Bool?

        /// 是否查询节点 IPV6 信息。
        public let showIpv6: Bool?

        /// 是否对IPV6进行缩写。
        public let abbreviationIpv6: Bool?

        public init(domain: String, layer: String? = nil, area: String? = nil, segment: Bool? = nil, showIpv6: Bool? = nil, abbreviationIpv6: Bool? = nil) {
            self.domain = domain
            self.layer = layer
            self.area = area
            self.segment = segment
            self.showIpv6 = showIpv6
            self.abbreviationIpv6 = abbreviationIpv6
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case layer = "Layer"
            case area = "Area"
            case segment = "Segment"
            case showIpv6 = "ShowIpv6"
            case abbreviationIpv6 = "AbbreviationIpv6"
        }
    }

    /// DescribeIpStatus返回参数结构体
    public struct DescribeIpStatusResponse: TCResponse {
        /// 节点列表
        public let ips: [IpStatus]

        /// 节点总个数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ips = "Ips"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询域名节点状态
    ///
    /// DescribeIpStatus 用于查询域名所在加速平台的边缘节点、回源节点明细。注意事项：暂不支持查询边缘节点信息并且数据会存在一定延迟。
    ///
    /// > Important: 若您的业务已迁移至 CDN 控制台，请参考[ CDN 接口文档](https://cloud.tencent.com/document/api/228/41954)，使用  CDN 相关API 进行操作。
    @inlinable
    public func describeIpStatus(_ input: DescribeIpStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIpStatusResponse> {
        self.client.execute(action: "DescribeIpStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询域名节点状态
    ///
    /// DescribeIpStatus 用于查询域名所在加速平台的边缘节点、回源节点明细。注意事项：暂不支持查询边缘节点信息并且数据会存在一定延迟。
    ///
    /// > Important: 若您的业务已迁移至 CDN 控制台，请参考[ CDN 接口文档](https://cloud.tencent.com/document/api/228/41954)，使用  CDN 相关API 进行操作。
    @inlinable
    public func describeIpStatus(_ input: DescribeIpStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIpStatusResponse {
        try await self.client.execute(action: "DescribeIpStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询域名节点状态
    ///
    /// DescribeIpStatus 用于查询域名所在加速平台的边缘节点、回源节点明细。注意事项：暂不支持查询边缘节点信息并且数据会存在一定延迟。
    ///
    /// > Important: 若您的业务已迁移至 CDN 控制台，请参考[ CDN 接口文档](https://cloud.tencent.com/document/api/228/41954)，使用  CDN 相关API 进行操作。
    @inlinable
    public func describeIpStatus(domain: String, layer: String? = nil, area: String? = nil, segment: Bool? = nil, showIpv6: Bool? = nil, abbreviationIpv6: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeIpStatusResponse> {
        self.describeIpStatus(.init(domain: domain, layer: layer, area: area, segment: segment, showIpv6: showIpv6, abbreviationIpv6: abbreviationIpv6), region: region, logger: logger, on: eventLoop)
    }

    /// 查询域名节点状态
    ///
    /// DescribeIpStatus 用于查询域名所在加速平台的边缘节点、回源节点明细。注意事项：暂不支持查询边缘节点信息并且数据会存在一定延迟。
    ///
    /// > Important: 若您的业务已迁移至 CDN 控制台，请参考[ CDN 接口文档](https://cloud.tencent.com/document/api/228/41954)，使用  CDN 相关API 进行操作。
    @inlinable
    public func describeIpStatus(domain: String, layer: String? = nil, area: String? = nil, segment: Bool? = nil, showIpv6: Bool? = nil, abbreviationIpv6: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeIpStatusResponse {
        try await self.describeIpStatus(.init(domain: domain, layer: layer, area: area, segment: segment, showIpv6: showIpv6, abbreviationIpv6: abbreviationIpv6), region: region, logger: logger, on: eventLoop)
    }
}
