//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cdn {
    /// DescribeImageConfig请求参数结构体
    public struct DescribeImageConfigRequest: TCRequestModel {
        /// 域名
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
        }
    }

    /// DescribeImageConfig返回参数结构体
    public struct DescribeImageConfigResponse: TCResponseModel {
        /// WebpAdapter配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let webpAdapter: WebpAdapter?

        /// TpgAdapter配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tpgAdapter: TpgAdapter?

        /// GuetzliAdapter配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let guetzliAdapter: GuetzliAdapter?

        /// AvifAdapter配置项
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let avifAdapter: AvifAdapter?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case webpAdapter = "WebpAdapter"
            case tpgAdapter = "TpgAdapter"
            case guetzliAdapter = "GuetzliAdapter"
            case avifAdapter = "AvifAdapter"
            case requestId = "RequestId"
        }
    }

    /// 获取图片优化的配置
    ///
    /// DescribeImageConfig 用于获取域名图片优化的当前配置，支持Webp、TPG、 Guetzli 和 Avif。
    @inlinable
    public func describeImageConfig(_ input: DescribeImageConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageConfigResponse> {
        self.client.execute(action: "DescribeImageConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取图片优化的配置
    ///
    /// DescribeImageConfig 用于获取域名图片优化的当前配置，支持Webp、TPG、 Guetzli 和 Avif。
    @inlinable
    public func describeImageConfig(_ input: DescribeImageConfigRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageConfigResponse {
        try await self.client.execute(action: "DescribeImageConfig", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取图片优化的配置
    ///
    /// DescribeImageConfig 用于获取域名图片优化的当前配置，支持Webp、TPG、 Guetzli 和 Avif。
    @inlinable
    public func describeImageConfig(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeImageConfigResponse> {
        self.describeImageConfig(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }

    /// 获取图片优化的配置
    ///
    /// DescribeImageConfig 用于获取域名图片优化的当前配置，支持Webp、TPG、 Guetzli 和 Avif。
    @inlinable
    public func describeImageConfig(domain: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeImageConfigResponse {
        try await self.describeImageConfig(.init(domain: domain), region: region, logger: logger, on: eventLoop)
    }
}
