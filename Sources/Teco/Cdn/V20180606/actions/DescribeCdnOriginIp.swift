//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdn {
    /// DescribeCdnOriginIp请求参数结构体
    public struct DescribeCdnOriginIpRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeCdnOriginIp返回参数结构体
    public struct DescribeCdnOriginIpResponse: TCResponseModel {
        /// 回源节点IP详情。
        public let ips: [OriginIp]

        /// 回源节点IP总个数。
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ips = "Ips"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询回源节点
    ///
    /// 本接口（DescribeCdnOriginIp）用于查询 CDN 回源节点的IP信息。（注：此接口即将下线，不再进行维护，请通过DescribeIpStatus 接口进行查询）
    @inlinable
    public func describeCdnOriginIp(_ input: DescribeCdnOriginIpRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCdnOriginIpResponse> {
        self.client.execute(action: "DescribeCdnOriginIp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询回源节点
    ///
    /// 本接口（DescribeCdnOriginIp）用于查询 CDN 回源节点的IP信息。（注：此接口即将下线，不再进行维护，请通过DescribeIpStatus 接口进行查询）
    @inlinable
    public func describeCdnOriginIp(_ input: DescribeCdnOriginIpRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCdnOriginIpResponse {
        try await self.client.execute(action: "DescribeCdnOriginIp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询回源节点
    ///
    /// 本接口（DescribeCdnOriginIp）用于查询 CDN 回源节点的IP信息。（注：此接口即将下线，不再进行维护，请通过DescribeIpStatus 接口进行查询）
    @inlinable
    public func describeCdnOriginIp(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCdnOriginIpResponse> {
        let input = DescribeCdnOriginIpRequest()
        return self.client.execute(action: "DescribeCdnOriginIp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询回源节点
    ///
    /// 本接口（DescribeCdnOriginIp）用于查询 CDN 回源节点的IP信息。（注：此接口即将下线，不再进行维护，请通过DescribeIpStatus 接口进行查询）
    @inlinable
    public func describeCdnOriginIp(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCdnOriginIpResponse {
        let input = DescribeCdnOriginIpRequest()
        return try await self.client.execute(action: "DescribeCdnOriginIp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
