//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tdcpg {
    /// RenewCluster请求参数结构体
    public struct RenewClusterRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 续费时间，单位：月。取值范围为[1,60]，默认值为1。
        public let period: UInt64?

        public init(clusterId: String, period: UInt64? = nil) {
            self.clusterId = clusterId
            self.period = period
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case period = "Period"
        }
    }

    /// RenewCluster返回参数结构体
    public struct RenewClusterResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 续费集群
    @inlinable @discardableResult
    public func renewCluster(_ input: RenewClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewClusterResponse> {
        self.client.execute(action: "RenewCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 续费集群
    @inlinable @discardableResult
    public func renewCluster(_ input: RenewClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewClusterResponse {
        try await self.client.execute(action: "RenewCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 续费集群
    @inlinable @discardableResult
    public func renewCluster(clusterId: String, period: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewClusterResponse> {
        self.renewCluster(.init(clusterId: clusterId, period: period), region: region, logger: logger, on: eventLoop)
    }

    /// 续费集群
    @inlinable @discardableResult
    public func renewCluster(clusterId: String, period: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewClusterResponse {
        try await self.renewCluster(.init(clusterId: clusterId, period: period), region: region, logger: logger, on: eventLoop)
    }
}
