//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tdcpg {
    /// RecoverCluster请求参数结构体
    public struct RecoverClusterRequest: TCRequestModel {
        /// 集群ID
        public let clusterId: String

        /// 购买时长，单位：月。取值范围为[1,60]，默认值为1。
        /// 只有当PayMode为PREPAID时生效。
        public let period: UInt64?

        public init(clusterId: String, period: UInt64? = nil) {
            self.clusterId = clusterId
            self.period = period
        }

        enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case period = "Period"
        }
    }

    /// RecoverCluster返回参数结构体
    public struct RecoverClusterResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 恢复集群
    ///
    /// 恢复集群，恢复集群的接入点网络，恢复后继续连接使用数据库。只有当集群状态处于isolated(已隔离)时才生效。
    @inlinable @discardableResult
    public func recoverCluster(_ input: RecoverClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RecoverClusterResponse> {
        self.client.execute(action: "RecoverCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 恢复集群
    ///
    /// 恢复集群，恢复集群的接入点网络，恢复后继续连接使用数据库。只有当集群状态处于isolated(已隔离)时才生效。
    @inlinable @discardableResult
    public func recoverCluster(_ input: RecoverClusterRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverClusterResponse {
        try await self.client.execute(action: "RecoverCluster", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 恢复集群
    ///
    /// 恢复集群，恢复集群的接入点网络，恢复后继续连接使用数据库。只有当集群状态处于isolated(已隔离)时才生效。
    @inlinable @discardableResult
    public func recoverCluster(clusterId: String, period: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RecoverClusterResponse> {
        self.recoverCluster(RecoverClusterRequest(clusterId: clusterId, period: period), region: region, logger: logger, on: eventLoop)
    }

    /// 恢复集群
    ///
    /// 恢复集群，恢复集群的接入点网络，恢复后继续连接使用数据库。只有当集群状态处于isolated(已隔离)时才生效。
    @inlinable @discardableResult
    public func recoverCluster(clusterId: String, period: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverClusterResponse {
        try await self.recoverCluster(RecoverClusterRequest(clusterId: clusterId, period: period), region: region, logger: logger, on: eventLoop)
    }
}
