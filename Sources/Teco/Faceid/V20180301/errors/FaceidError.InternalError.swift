//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCFaceidError {
    public struct InternalError: TCFaceidErrorType {
        enum Code: String {
            case actionLightDark = "InternalError.ActionLightDark"
            case actionLightStrong = "InternalError.ActionLightStrong"
            case actionNodetectFace = "InternalError.ActionNodetectFace"
            case compareLowSimilarity = "InternalError.CompareLowSimilarity"
            case encryptSystemError = "InternalError.EncryptSystemError"
            case lifePhotoPoorQuality = "InternalError.LifePhotoPoorQuality"
            case lifePhotoSizeError = "InternalError.LifePhotoSizeError"
            case unKnown = "InternalError.UnKnown"
            case other = "InternalError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 光线太暗。
        public static var actionLightDark: InternalError {
            InternalError(.actionLightDark)
        }

        /// 光线太强。
        public static var actionLightStrong: InternalError {
            InternalError(.actionLightStrong)
        }

        /// 未能检测到完整人脸。
        public static var actionNodetectFace: InternalError {
            InternalError(.actionNodetectFace)
        }

        /// 比对相似度未达到通过标准。
        public static var compareLowSimilarity: InternalError {
            InternalError(.compareLowSimilarity)
        }

        /// 加密失败。
        public static var encryptSystemError: InternalError {
            InternalError(.encryptSystemError)
        }

        /// 传入图片分辨率太低，请重新上传。
        public static var lifePhotoPoorQuality: InternalError {
            InternalError(.lifePhotoPoorQuality)
        }

        /// 传入图片过大或过小。
        public static var lifePhotoSizeError: InternalError {
            InternalError(.lifePhotoSizeError)
        }

        /// 内部未知错误。
        public static var unKnown: InternalError {
            InternalError(.unKnown)
        }

        /// 内部错误。
        public static var other: InternalError {
            InternalError(.other)
        }

        public func asFaceidError() -> TCFaceidError {
            let code: TCFaceidError.Code
            switch self.error {
            case .actionLightDark:
                code = .internalError_ActionLightDark
            case .actionLightStrong:
                code = .internalError_ActionLightStrong
            case .actionNodetectFace:
                code = .internalError_ActionNodetectFace
            case .compareLowSimilarity:
                code = .internalError_CompareLowSimilarity
            case .encryptSystemError:
                code = .internalError_EncryptSystemError
            case .lifePhotoPoorQuality:
                code = .internalError_LifePhotoPoorQuality
            case .lifePhotoSizeError:
                code = .internalError_LifePhotoSizeError
            case .unKnown:
                code = .internalError_UnKnown
            case .other:
                code = .internalError
            }
            return TCFaceidError(code, context: self.context)
        }
    }
}
