//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Faceid {
    /// DetectAuth请求参数结构体
    public struct DetectAuthRequest: TCRequestModel {
        /// 用于细分客户使用场景，申请开通服务后，可以在腾讯云慧眼人脸核身控制台（https://console.cloud.tencent.com/faceid） 自助接入里面创建，审核通过后即可调用。如有疑问，请添加[腾讯云人脸核身小助手](https://cloud.tencent.com/document/product/1007/56130)进行咨询。
        public let ruleId: String
        
        /// 本接口不需要传递此参数。
        public let terminalType: String?
        
        /// 身份标识（未使用OCR服务时，必须传入）。
        /// 规则：a-zA-Z0-9组合。最长长度32位。
        public let idCard: String?
        
        /// 姓名。（未使用OCR服务时，必须传入）最长长度32位。中文请使用UTF-8编码。
        public let name: String?
        
        /// 认证结束后重定向的回调链接地址。最长长度1024位。
        public let redirectUrl: String?
        
        /// 透传字段，在获取验证结果时返回。
        public let extra: String?
        
        /// 用于人脸比对的照片，图片的Base64值；
        /// Base64编码后的图片数据大小不超过3M，仅支持jpg、png格式。请使用标准的Base64编码方式(带=补位)，编码规范参考RFC4648。
        public let imageBase64: String?
        
        /// 敏感数据加密信息。对传入信息（姓名、身份证号）有加密需求的用户可使用此参数，详情请点击左侧链接。
        public let encryption: Encryption?
        
        /// 意愿核身（朗读模式）使用的文案，若未使用意愿核身（朗读模式），则该字段无需传入。默认为空，最长可接受120的字符串长度。
        public let intentionVerifyText: String?
        
        /// 意愿核身（问答模式）使用的文案，包括：系统语音播报的文本、需要核验的标准文本。当前仅支持一个播报文本+回答文本。
        public let intentionQuestions: [IntentionQuestion]?
        
        /// RuleId相关配置
        public let config: RuleIdConfig?
        
        public init (ruleId: String, terminalType: String? = nil, idCard: String? = nil, name: String? = nil, redirectUrl: String? = nil, extra: String? = nil, imageBase64: String? = nil, encryption: Encryption? = nil, intentionVerifyText: String? = nil, intentionQuestions: [IntentionQuestion]? = nil, config: RuleIdConfig? = nil) {
            self.ruleId = ruleId
            self.terminalType = terminalType
            self.idCard = idCard
            self.name = name
            self.redirectUrl = redirectUrl
            self.extra = extra
            self.imageBase64 = imageBase64
            self.encryption = encryption
            self.intentionVerifyText = intentionVerifyText
            self.intentionQuestions = intentionQuestions
            self.config = config
        }
        
        enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
            case terminalType = "TerminalType"
            case idCard = "IdCard"
            case name = "Name"
            case redirectUrl = "RedirectUrl"
            case extra = "Extra"
            case imageBase64 = "ImageBase64"
            case encryption = "Encryption"
            case intentionVerifyText = "IntentionVerifyText"
            case intentionQuestions = "IntentionQuestions"
            case config = "Config"
        }
    }
    
    /// DetectAuth返回参数结构体
    public struct DetectAuthResponse: TCResponseModel {
        /// 用于发起核身流程的URL，仅微信H5场景使用。
        public let url: String
        
        /// 一次核身流程的标识，有效时间为7,200秒；
        /// 完成核身后，可用该标识获取验证结果信息。
        public let bizToken: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case url = "Url"
            case bizToken = "BizToken"
            case requestId = "RequestId"
        }
    }
    
    /// 实名核身鉴权
    ///
    /// 每次调用人脸核身SaaS化服务前，需先调用本接口获取BizToken，用来串联核身流程，在验证完成后，用于获取验证结果信息。
    @inlinable
    public func detectAuth(_ input: DetectAuthRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DetectAuthResponse > {
        self.client.execute(action: "DetectAuth", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 实名核身鉴权
    ///
    /// 每次调用人脸核身SaaS化服务前，需先调用本接口获取BizToken，用来串联核身流程，在验证完成后，用于获取验证结果信息。
    @inlinable
    public func detectAuth(_ input: DetectAuthRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DetectAuthResponse {
        try await self.client.execute(action: "DetectAuth", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
