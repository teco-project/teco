//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Faceid {
    /// GetDetectInfo请求参数结构体
    public struct GetDetectInfoRequest: TCRequestModel {
        /// 人脸核身流程的标识，调用DetectAuth接口时生成。
        public let bizToken: String

        /// 用于细分客户使用场景，申请开通服务后，可以在腾讯云慧眼人脸核身控制台（https://console.cloud.tencent.com/faceid） 自助接入里面创建，审核通过后即可调用。如有疑问，请加慧眼小助手微信（faceid001）进行咨询。
        public let ruleId: String

        /// 指定拉取的结果信息，取值（0：全部；1：文本类；2：身份证正反面；3：视频最佳截图照片；4：视频）。
        /// 如 134表示拉取文本类、视频最佳截图照片、视频。
        /// 默认值：0
        public let infoType: String?

        public init(bizToken: String, ruleId: String, infoType: String? = nil) {
            self.bizToken = bizToken
            self.ruleId = ruleId
            self.infoType = infoType
        }

        enum CodingKeys: String, CodingKey {
            case bizToken = "BizToken"
            case ruleId = "RuleId"
            case infoType = "InfoType"
        }
    }

    /// GetDetectInfo返回参数结构体
    public struct GetDetectInfoResponse: TCResponseModel {
        /// JSON字符串。
        /// {
        ///   // 文本类信息
        ///   "Text": {
        ///     "ErrCode": null,      // 本次核身最终结果。0为成功
        ///     "ErrMsg": null,       // 本次核身最终结果信息描述。
        ///     "IdCard": "",         // 本次核身最终获得的身份证号。
        ///     "Name": "",           // 本次核身最终获得的姓名。
        ///     "OcrNation": null,    // ocr阶段获取的民族
        ///     "OcrAddress": null,   // ocr阶段获取的地址
        ///     "OcrBirth": null,     // ocr阶段获取的出生信息
        ///     "OcrAuthority": null, // ocr阶段获取的证件签发机关
        ///     "OcrValidDate": null, // ocr阶段获取的证件有效期
        ///     "OcrName": null,      // ocr阶段获取的姓名
        ///     "OcrIdCard": null,    // ocr阶段获取的身份证号
        ///     "OcrGender": null,    // ocr阶段获取的性别
        ///     "LiveStatus": null,   // 活体检测阶段的错误码。0为成功
        ///     "LiveMsg": null,      // 活体检测阶段的错误信息
        ///     "Comparestatus": null,// 一比一阶段的错误码。0为成功
        ///     "Comparemsg": null,   // 一比一阶段的错误信息
        ///     "Sim": null, // 比对相似度
        ///     "Location": null, // 地理位置信息
        ///     "Extra": "",          // DetectAuth结果传进来的Extra信息
        ///     "Detail": {           // 活体一比一信息详情
        ///       "LivenessData": [
        ///             {
        ///               ErrCode: null, // 活体比对验证错误码
        ///               ErrMsg: null, // 活体比对验证错误描述
        ///               ReqTime: null, // 活体验证时间戳
        ///               IdCard: null, // 验证身份证号
        ///               Name: null // 验证姓名
        ///             }
        ///       ]
        ///     }
        ///   },
        ///   // 身份证正反面照片Base64
        ///   "IdCardData": {
        ///     "OcrFront": null,
        ///     "OcrBack": null
        ///   },
        ///   // 视频最佳帧截图Base64
        ///   "BestFrame": {
        ///     "BestFrame": null
        ///   },
        ///   // 活体视频Base64
        ///   "VideoData": {
        ///     "LivenessVideo": null
        ///   }
        /// }
        public let detectInfo: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case detectInfo = "DetectInfo"
            case requestId = "RequestId"
        }
    }

    /// 获取实名核身结果信息
    ///
    /// 完成验证后，用BizToken调用本接口获取结果信息，BizToken生成后三天内（3\*24\*3,600秒）可多次拉取。
    @inlinable
    public func getDetectInfo(_ input: GetDetectInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDetectInfoResponse> {
        self.client.execute(action: "GetDetectInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取实名核身结果信息
    ///
    /// 完成验证后，用BizToken调用本接口获取结果信息，BizToken生成后三天内（3\*24\*3,600秒）可多次拉取。
    @inlinable
    public func getDetectInfo(_ input: GetDetectInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDetectInfoResponse {
        try await self.client.execute(action: "GetDetectInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取实名核身结果信息
    ///
    /// 完成验证后，用BizToken调用本接口获取结果信息，BizToken生成后三天内（3\*24\*3,600秒）可多次拉取。
    @inlinable
    public func getDetectInfo(bizToken: String, ruleId: String, infoType: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDetectInfoResponse> {
        self.getDetectInfo(GetDetectInfoRequest(bizToken: bizToken, ruleId: ruleId, infoType: infoType), logger: logger, on: eventLoop)
    }

    /// 获取实名核身结果信息
    ///
    /// 完成验证后，用BizToken调用本接口获取结果信息，BizToken生成后三天内（3\*24\*3,600秒）可多次拉取。
    @inlinable
    public func getDetectInfo(bizToken: String, ruleId: String, infoType: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDetectInfoResponse {
        try await self.getDetectInfo(GetDetectInfoRequest(bizToken: bizToken, ruleId: ruleId, infoType: infoType), logger: logger, on: eventLoop)
    }
}
