//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Faceid {
    /// BankCardVerification请求参数结构体
    public struct BankCardVerificationRequest: TCRequestModel {
        /// 开户证件号，与CertType参数的证件类型一致，如：身份证，则传入身份证号。
        public let idCard: String

        /// 姓名
        public let name: String

        /// 银行卡
        public let bankCard: String

        /// 证件类型，请确认该证件为开户时使用的证件类型，未用于开户的证件信息不支持验证。
        /// 目前默认：0 身份证，其他证件类型需求可以添加[腾讯云人脸核身小助手](https://cloud.tencent.com/document/product/1007/56130)进行确认。
        public let certType: Int64?

        /// 敏感数据加密信息。对传入信息（姓名、身份证号、银行卡号）有加密需求的用户可使用此参数，详情请点击左侧链接。
        public let encryption: Encryption?

        public init(idCard: String, name: String, bankCard: String, certType: Int64? = nil, encryption: Encryption? = nil) {
            self.idCard = idCard
            self.name = name
            self.bankCard = bankCard
            self.certType = certType
            self.encryption = encryption
        }

        enum CodingKeys: String, CodingKey {
            case idCard = "IdCard"
            case name = "Name"
            case bankCard = "BankCard"
            case certType = "CertType"
            case encryption = "Encryption"
        }
    }

    /// BankCardVerification返回参数结构体
    public struct BankCardVerificationResponse: TCResponseModel {
        /// 认证结果码
        /// 收费结果码：
        /// '0': '认证通过'
        /// '-1': '认证未通过'
        /// '-5': '持卡人信息有误'
        /// '-6': '未开通无卡支付'
        /// '-7': '此卡被没收'
        /// '-8': '无效卡号'
        /// '-9': '此卡无对应发卡行'
        /// '-10': '该卡未初始化或睡眠卡'
        /// '-11': '作弊卡、吞卡'
        /// '-12': '此卡已挂失'
        /// '-13': '该卡已过期'
        /// '-14': '受限制的卡'
        /// '-15': '密码错误次数超限'
        /// '-16': '发卡行不支持此交易'
        /// 不收费结果码：
        /// '-2': '姓名校验不通过'
        /// '-3': '身份证号码有误'
        /// '-4': '银行卡号码有误'
        /// '-17': '验证中心服务繁忙'
        public let result: String

        /// 业务结果描述。
        public let description: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case description = "Description"
            case requestId = "RequestId"
        }
    }

    /// 银行卡三要素核验
    ///
    /// 本接口用于银行卡号、姓名、开户证件号信息的真实性和一致性。
    @inlinable
    public func bankCardVerification(_ input: BankCardVerificationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BankCardVerificationResponse> {
        self.client.execute(action: "BankCardVerification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 银行卡三要素核验
    ///
    /// 本接口用于银行卡号、姓名、开户证件号信息的真实性和一致性。
    @inlinable
    public func bankCardVerification(_ input: BankCardVerificationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BankCardVerificationResponse {
        try await self.client.execute(action: "BankCardVerification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 银行卡三要素核验
    ///
    /// 本接口用于银行卡号、姓名、开户证件号信息的真实性和一致性。
    @inlinable
    public func bankCardVerification(idCard: String, name: String, bankCard: String, certType: Int64? = nil, encryption: Encryption? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BankCardVerificationResponse> {
        let input = BankCardVerificationRequest(idCard: idCard, name: name, bankCard: bankCard, certType: certType, encryption: encryption)
        return self.client.execute(action: "BankCardVerification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 银行卡三要素核验
    ///
    /// 本接口用于银行卡号、姓名、开户证件号信息的真实性和一致性。
    @inlinable
    public func bankCardVerification(idCard: String, name: String, bankCard: String, certType: Int64? = nil, encryption: Encryption? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BankCardVerificationResponse {
        let input = BankCardVerificationRequest(idCard: idCard, name: name, bankCard: bankCard, certType: certType, encryption: encryption)
        return try await self.client.execute(action: "BankCardVerification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
