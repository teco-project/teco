//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Faceid {
    /// CheckBankCardInformation请求参数结构体
    public struct CheckBankCardInformationRequest: TCRequestModel {
        /// 银行卡号。
        public let bankCard: String

        /// 敏感数据加密信息。对传入信息（银行卡号）有加密需求的用户可使用此参数，详情请点击左侧链接。
        public let encryption: Encryption?

        public init(bankCard: String, encryption: Encryption? = nil) {
            self.bankCard = bankCard
            self.encryption = encryption
        }

        enum CodingKeys: String, CodingKey {
            case bankCard = "BankCard"
            case encryption = "Encryption"
        }
    }

    /// CheckBankCardInformation返回参数结构体
    public struct CheckBankCardInformationResponse: TCResponseModel {
        /// 认证结果码，收费情况如下。
        /// 收费结果码：
        /// 0: 查询成功
        /// -1: 未查到信息
        /// 不收费结果码
        /// -2：验证中心服务繁忙
        /// -3：银行卡不存在
        public let result: String

        /// 业务结果描述
        public let description: String

        /// 开户行
        public let accountBank: String

        /// 卡性质：1. 借记卡；2. 贷记卡；3. 预付费卡；4. 准贷记卡
        public let accountType: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case description = "Description"
            case accountBank = "AccountBank"
            case accountType = "AccountType"
            case requestId = "RequestId"
        }
    }

    /// 银行卡基础信息查询
    @inlinable
    public func checkBankCardInformation(_ input: CheckBankCardInformationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckBankCardInformationResponse> {
        self.client.execute(action: "CheckBankCardInformation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 银行卡基础信息查询
    @inlinable
    public func checkBankCardInformation(_ input: CheckBankCardInformationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckBankCardInformationResponse {
        try await self.client.execute(action: "CheckBankCardInformation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 银行卡基础信息查询
    @inlinable
    public func checkBankCardInformation(bankCard: String, encryption: Encryption? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckBankCardInformationResponse> {
        let input = CheckBankCardInformationRequest(bankCard: bankCard, encryption: encryption)
        return self.client.execute(action: "CheckBankCardInformation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 银行卡基础信息查询
    @inlinable
    public func checkBankCardInformation(bankCard: String, encryption: Encryption? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckBankCardInformationResponse {
        let input = CheckBankCardInformationRequest(bankCard: bankCard, encryption: encryption)
        return try await self.client.execute(action: "CheckBankCardInformation", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
