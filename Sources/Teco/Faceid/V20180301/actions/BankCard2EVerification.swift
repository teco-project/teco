//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Faceid {
    /// 银行卡二要素核验
    ///
    /// 本接口用于校验姓名和银行卡号的真实性和一致性。
    @inlinable
    public func bankCard2EVerification(_ input: BankCard2EVerificationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < BankCard2EVerificationResponse > {
        self.client.execute(action: "BankCard2EVerification", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 银行卡二要素核验
    ///
    /// 本接口用于校验姓名和银行卡号的真实性和一致性。
    @inlinable
    public func bankCard2EVerification(_ input: BankCard2EVerificationRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BankCard2EVerificationResponse {
        try await self.client.execute(action: "BankCard2EVerification", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// BankCard2EVerification请求参数结构体
    public struct BankCard2EVerificationRequest: TCRequestModel {
        /// 姓名
        public let name: String
        
        /// 银行卡
        public let bankCard: String
        
        /// 敏感数据加密信息。对传入信息（姓名、银行卡号）有加密需求的用户可使用此参数，详情请点击左侧链接。
        public let encryption: Encryption
        
        public init (name: String, bankCard: String, encryption: Encryption) {
            self.name = name
            self.bankCard = bankCard
            self.encryption = encryption
        }
        
        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case bankCard = "BankCard"
            case encryption = "Encryption"
        }
    }
    
    /// BankCard2EVerification返回参数结构体
    public struct BankCard2EVerificationResponse: TCResponseModel {
        /// 认证结果码
        /// 计费结果码：
        ///   '0': '认证通过'
        ///   '-1': '认证未通过'
        ///  '-4': '持卡人信息有误'
        ///   '-5': '未开通无卡支付'
        ///   '-6': '此卡被没收'
        ///   '-7': '无效卡号'
        ///   '-8': '此卡无对应发卡行'
        ///   '-9': '该卡未初始化或睡眠卡'
        ///   '-10': '作弊卡、吞卡'
        ///   '-11': '此卡已挂失'
        ///   '-12': '该卡已过期'
        ///   '-13': '受限制的卡'
        ///   '-14': '密码错误次数超限'
        ///   '-15': '发卡行不支持此交易'
        /// 不计费结果码：
        ///   '-2': '姓名校验不通过'
        ///   '-3': '银行卡号码有误'
        ///   '-16': '验证中心服务繁忙'
        public let result: String
        
        /// 业务结果描述。
        public let description: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case description = "Description"
            case requestId = "RequestId"
        }
    }
}