//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Faceid {
    /// CheckIdNameDate请求参数结构体
    public struct CheckIdNameDateRequest: TCRequestModel {
        /// 姓名
        public let name: String

        /// 身份证号
        public let idCard: String

        /// 身份证有效期开始时间，格式：YYYYMMDD。如：20210701
        public let validityBegin: String

        /// 身份证有效期到期时间，格式：YYYYMMDD，长期用“00000000”代替；如：20210701
        public let validityEnd: String

        /// 敏感数据加密信息。对传入信息（姓名、身份证号）有加密需求的用户可使用此参数，详情请点击左侧链接。
        public let encryption: Encryption?

        public init(name: String, idCard: String, validityBegin: String, validityEnd: String, encryption: Encryption? = nil) {
            self.name = name
            self.idCard = idCard
            self.validityBegin = validityBegin
            self.validityEnd = validityEnd
            self.encryption = encryption
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case idCard = "IdCard"
            case validityBegin = "ValidityBegin"
            case validityEnd = "ValidityEnd"
            case encryption = "Encryption"
        }
    }

    /// CheckIdNameDate返回参数结构体
    public struct CheckIdNameDateResponse: TCResponseModel {
        /// 认证结果码，收费情况如下。
        /// 收费结果码：
        /// 0: 一致
        /// -1: 不一致
        /// 不收费结果码：
        /// -2: 非法身份证号（长度、校验位等不正确）
        /// -3: 非法姓名（长度、格式等不正确）
        /// -4: 非法有效期（长度、格式等不正确）
        /// -5: 身份信息无效
        /// -6: 证件库服务异常
        /// -7: 证件库中无此身份证记录
        public let result: String

        /// 业务结果描述。
        public let description: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case description = "Description"
            case requestId = "RequestId"
        }
    }

    /// 身份信息及有效期核验
    ///
    /// 本接口用于校验姓名、身份证号、身份证有效期的真实性和一致性。
    @inlinable
    public func checkIdNameDate(_ input: CheckIdNameDateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckIdNameDateResponse> {
        self.client.execute(action: "CheckIdNameDate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 身份信息及有效期核验
    ///
    /// 本接口用于校验姓名、身份证号、身份证有效期的真实性和一致性。
    @inlinable
    public func checkIdNameDate(_ input: CheckIdNameDateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckIdNameDateResponse {
        try await self.client.execute(action: "CheckIdNameDate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 身份信息及有效期核验
    ///
    /// 本接口用于校验姓名、身份证号、身份证有效期的真实性和一致性。
    @inlinable
    public func checkIdNameDate(name: String, idCard: String, validityBegin: String, validityEnd: String, encryption: Encryption? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CheckIdNameDateResponse> {
        self.checkIdNameDate(.init(name: name, idCard: idCard, validityBegin: validityBegin, validityEnd: validityEnd, encryption: encryption), region: region, logger: logger, on: eventLoop)
    }

    /// 身份信息及有效期核验
    ///
    /// 本接口用于校验姓名、身份证号、身份证有效期的真实性和一致性。
    @inlinable
    public func checkIdNameDate(name: String, idCard: String, validityBegin: String, validityEnd: String, encryption: Encryption? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CheckIdNameDateResponse {
        try await self.checkIdNameDate(.init(name: name, idCard: idCard, validityBegin: validityBegin, validityEnd: validityEnd, encryption: encryption), region: region, logger: logger, on: eventLoop)
    }
}
