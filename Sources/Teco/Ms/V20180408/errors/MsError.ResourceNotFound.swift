//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCMsError {
    public struct ResourceNotFound: TCMsErrorType {
        enum Code: String {
            case itemIdNotFound = "ResourceNotFound.ItemIdNotFound"
            case planIdNotFound = "ResourceNotFound.PlanIdNotFound"
            case other = "ResourceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// ItemId不存在。
        public static var itemIdNotFound: ResourceNotFound {
            ResourceNotFound(.itemIdNotFound)
        }

        /// 无法找到指定的加固策略。
        public static var planIdNotFound: ResourceNotFound {
            ResourceNotFound(.planIdNotFound)
        }

        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }

        public func asMsError() -> TCMsError {
            let code: TCMsError.Code
            switch self.error {
            case .itemIdNotFound:
                code = .resourceNotFound_ItemIdNotFound
            case .planIdNotFound:
                code = .resourceNotFound_PlanIdNotFound
            case .other:
                code = .resourceNotFound
            }
            return TCMsError(code, context: self.context)
        }
    }
}
