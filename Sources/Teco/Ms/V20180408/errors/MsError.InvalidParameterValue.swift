//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCMsError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case invalidCoexistItemIdsFilters = "InvalidParameterValue.InvalidCoexistItemIdsFilters"
            case invalidFilter = "InvalidParameterValue.InvalidFilter"
            case invalidItemIds = "InvalidParameterValue.InvalidItemIds"
            case invalidLimit = "InvalidParameterValue.InvalidLimit"
            case invalidOffset = "InvalidParameterValue.InvalidOffset"
            case invalidOrderDirection = "InvalidParameterValue.InvalidOrderDirection"
            case invalidOrderField = "InvalidParameterValue.InvalidOrderField"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 不能同时指定ItemIds和Filters。
        public static var invalidCoexistItemIdsFilters: InvalidParameterValue {
            InvalidParameterValue(.invalidCoexistItemIdsFilters)
        }
        
        /// 无效的过滤器。
        public static var invalidFilter: InvalidParameterValue {
            InvalidParameterValue(.invalidFilter)
        }
        
        /// ItemIds不合法。
        public static var invalidItemIds: InvalidParameterValue {
            InvalidParameterValue(.invalidItemIds)
        }
        
        /// Limit不是有效的数字。
        public static var invalidLimit: InvalidParameterValue {
            InvalidParameterValue(.invalidLimit)
        }
        
        /// Offset不是有效的数字。
        public static var invalidOffset: InvalidParameterValue {
            InvalidParameterValue(.invalidOffset)
        }
        
        /// OrderDirection参数。
        public static var invalidOrderDirection: InvalidParameterValue {
            InvalidParameterValue(.invalidOrderDirection)
        }
        
        /// OrderField取值不合法。
        public static var invalidOrderField: InvalidParameterValue {
            InvalidParameterValue(.invalidOrderField)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCMsError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCMsError.InvalidParameterValue, rhs: TCMsError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCMsError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCMsError.InvalidParameterValue {
    public func toMsError() -> TCMsError {
        guard let code = TCMsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCMsError(code, context: self.context)
    }
}