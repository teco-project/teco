//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ms {
    /// UpdateLocalTaskResult请求参数结构体
    public struct UpdateLocalTaskResultRequest: TCRequest {
        /// 任务id
        public let sid: String

        /// 一级任务code。标记任务状态
        public let resultCode: Int64

        /// 二级错误码
        public let subCode: Int64

        /// 二级错误信息
        public let errMsg: String

        /// 结果
        public let result: String

        public init(sid: String, resultCode: Int64, subCode: Int64, errMsg: String, result: String) {
            self.sid = sid
            self.resultCode = resultCode
            self.subCode = subCode
            self.errMsg = errMsg
            self.result = result
        }

        enum CodingKeys: String, CodingKey {
            case sid = "Sid"
            case resultCode = "ResultCode"
            case subCode = "SubCode"
            case errMsg = "ErrMsg"
            case result = "Result"
        }
    }

    /// UpdateLocalTaskResult返回参数结构体
    public struct UpdateLocalTaskResultResponse: TCResponse {
        /// 标记成功
        public let resultCode: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case resultCode = "ResultCode"
            case requestId = "RequestId"
        }
    }

    /// 更新本地任务结果
    ///
    /// 更新本地任务执行结果
    @inlinable
    public func updateLocalTaskResult(_ input: UpdateLocalTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateLocalTaskResultResponse> {
        self.client.execute(action: "UpdateLocalTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 更新本地任务结果
    ///
    /// 更新本地任务执行结果
    @inlinable
    public func updateLocalTaskResult(_ input: UpdateLocalTaskResultRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateLocalTaskResultResponse {
        try await self.client.execute(action: "UpdateLocalTaskResult", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 更新本地任务结果
    ///
    /// 更新本地任务执行结果
    @inlinable
    public func updateLocalTaskResult(sid: String, resultCode: Int64, subCode: Int64, errMsg: String, result: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateLocalTaskResultResponse> {
        self.updateLocalTaskResult(.init(sid: sid, resultCode: resultCode, subCode: subCode, errMsg: errMsg, result: result), region: region, logger: logger, on: eventLoop)
    }

    /// 更新本地任务结果
    ///
    /// 更新本地任务执行结果
    @inlinable
    public func updateLocalTaskResult(sid: String, resultCode: Int64, subCode: Int64, errMsg: String, result: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateLocalTaskResultResponse {
        try await self.updateLocalTaskResult(.init(sid: sid, resultCode: resultCode, subCode: subCode, errMsg: errMsg, result: result), region: region, logger: logger, on: eventLoop)
    }
}
