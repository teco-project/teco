//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ms {
    /// CancelEncryptTask请求参数结构体
    public struct CancelEncryptTaskRequest: TCRequestModel {
        /// 加固任务结果Id
        public let resultId: String

        public init(resultId: String) {
            self.resultId = resultId
        }

        enum CodingKeys: String, CodingKey {
            case resultId = "ResultId"
        }
    }

    /// CancelEncryptTask返回参数结构体
    public struct CancelEncryptTaskResponse: TCResponseModel {
        /// 1: 取消任务成功 ； -1 ：取消任务失败，原因为任务进程已结束，不能取消。
        public let state: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case state = "State"
            case requestId = "RequestId"
        }
    }

    /// 取消渠道合作加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，取消渠道合作加固中的任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func cancelEncryptTask(_ input: CancelEncryptTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CancelEncryptTaskResponse> {
        fatalError("CancelEncryptTask is no longer available.")
    }

    /// 取消渠道合作加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，取消渠道合作加固中的任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func cancelEncryptTask(_ input: CancelEncryptTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CancelEncryptTaskResponse {
        fatalError("CancelEncryptTask is no longer available.")
    }

    /// 取消渠道合作加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，取消渠道合作加固中的任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func cancelEncryptTask(resultId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CancelEncryptTaskResponse> {
        fatalError("CancelEncryptTask is no longer available.")
    }

    /// 取消渠道合作加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，取消渠道合作加固中的任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func cancelEncryptTask(resultId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CancelEncryptTaskResponse {
        fatalError("CancelEncryptTask is no longer available.")
    }
}
