//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Ms {
    /// DescribeOrderInstances请求参数结构体
    public struct DescribeOrderInstancesRequest: TCPaginatedRequest {
        /// 页码
        public let pageNumber: Int64?

        /// 每页展示数量
        public let pageSize: Int64?

        /// 按某个字段排序，目前仅支持CreateTime排序。
        public let orderField: String?

        /// 升序（asc）还是降序（desc），默认：desc。
        public let orderDirection: String?

        /// （条件过滤字段）平台类型  1.android加固   2.ios源码混淆  3.sdk加固  4.applet小程序加固
        public let platformType: Int64?

        /// （条件过滤字段）订单采购类型 1-免费试用 2-按年收费 3-按次收费
        public let orderType: Int64?

        /// （条件过滤字段）订单审批状态：
        public let approvalStatus: Int64?

        /// （条件过滤字段）资源状态：
        public let resourceStatus: Int64?

        /// （条件过滤字段）订单ID
        public let orderId: String?

        /// （条件过滤字段）资源ID
        public let resourceId: String?

        /// （条件过滤字段）包名，查询android加固订单时使用
        public let appPkgName: String?

        public init(pageNumber: Int64? = nil, pageSize: Int64? = nil, orderField: String? = nil, orderDirection: String? = nil, platformType: Int64? = nil, orderType: Int64? = nil, approvalStatus: Int64? = nil, resourceStatus: Int64? = nil, orderId: String? = nil, resourceId: String? = nil, appPkgName: String? = nil) {
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.orderField = orderField
            self.orderDirection = orderDirection
            self.platformType = platformType
            self.orderType = orderType
            self.approvalStatus = approvalStatus
            self.resourceStatus = resourceStatus
            self.orderId = orderId
            self.resourceId = resourceId
            self.appPkgName = appPkgName
        }

        enum CodingKeys: String, CodingKey {
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case orderField = "OrderField"
            case orderDirection = "OrderDirection"
            case platformType = "PlatformType"
            case orderType = "OrderType"
            case approvalStatus = "ApprovalStatus"
            case resourceStatus = "ResourceStatus"
            case orderId = "OrderId"
            case resourceId = "ResourceId"
            case appPkgName = "AppPkgName"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeOrderInstancesResponse) -> DescribeOrderInstancesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeOrderInstancesRequest(pageNumber: (self.pageNumber ?? 0) + 1, pageSize: self.pageSize, orderField: self.orderField, orderDirection: self.orderDirection, platformType: self.platformType, orderType: self.orderType, approvalStatus: self.approvalStatus, resourceStatus: self.resourceStatus, orderId: self.orderId, resourceId: self.resourceId, appPkgName: self.appPkgName)
        }
    }

    /// DescribeOrderInstances返回参数结构体
    public struct DescribeOrderInstancesResponse: TCPaginatedResponse {
        /// 总记录数
        public let totalCount: Int64

        /// 订单信息
        public let orders: [Orders]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case orders = "Orders"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [Orders] {
            self.orders
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询渠道合作应用加固订单信息
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配。
    /// 接口功能点：
    /// 1.支持多订单分页查询；
    /// 2.支持唯一订单号精准匹配查询；
    /// 3.支持唯一资源号精准匹配查询；
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func describeOrderInstances(_ input: DescribeOrderInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrderInstancesResponse> {
        fatalError("DescribeOrderInstances is no longer available.")
    }

    /// 查询渠道合作应用加固订单信息
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配。
    /// 接口功能点：
    /// 1.支持多订单分页查询；
    /// 2.支持唯一订单号精准匹配查询；
    /// 3.支持唯一资源号精准匹配查询；
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func describeOrderInstances(_ input: DescribeOrderInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrderInstancesResponse {
        fatalError("DescribeOrderInstances is no longer available.")
    }

    /// 查询渠道合作应用加固订单信息
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配。
    /// 接口功能点：
    /// 1.支持多订单分页查询；
    /// 2.支持唯一订单号精准匹配查询；
    /// 3.支持唯一资源号精准匹配查询；
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func describeOrderInstances(pageNumber: Int64? = nil, pageSize: Int64? = nil, orderField: String? = nil, orderDirection: String? = nil, platformType: Int64? = nil, orderType: Int64? = nil, approvalStatus: Int64? = nil, resourceStatus: Int64? = nil, orderId: String? = nil, resourceId: String? = nil, appPkgName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeOrderInstancesResponse> {
        fatalError("DescribeOrderInstances is no longer available.")
    }

    /// 查询渠道合作应用加固订单信息
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配。
    /// 接口功能点：
    /// 1.支持多订单分页查询；
    /// 2.支持唯一订单号精准匹配查询；
    /// 3.支持唯一资源号精准匹配查询；
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func describeOrderInstances(pageNumber: Int64? = nil, pageSize: Int64? = nil, orderField: String? = nil, orderDirection: String? = nil, platformType: Int64? = nil, orderType: Int64? = nil, approvalStatus: Int64? = nil, resourceStatus: Int64? = nil, orderId: String? = nil, resourceId: String? = nil, appPkgName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeOrderInstancesResponse {
        fatalError("DescribeOrderInstances is no longer available.")
    }

    /// 查询渠道合作应用加固订单信息
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配。
    /// 接口功能点：
    /// 1.支持多订单分页查询；
    /// 2.支持唯一订单号精准匹配查询；
    /// 3.支持唯一资源号精准匹配查询；
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func describeOrderInstancesPaginated(_ input: DescribeOrderInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [Orders])> {
        fatalError("DescribeOrderInstances is no longer available.")
    }

    /// 查询渠道合作应用加固订单信息
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配。
    /// 接口功能点：
    /// 1.支持多订单分页查询；
    /// 2.支持唯一订单号精准匹配查询；
    /// 3.支持唯一资源号精准匹配查询；
    @available(*, unavailable, message: "上错服务器了")
    @inlinable @discardableResult
    public func describeOrderInstancesPaginated(_ input: DescribeOrderInstancesRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeOrderInstancesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        fatalError("DescribeOrderInstances is no longer available.")
    }

    /// 查询渠道合作应用加固订单信息
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配。
    /// 接口功能点：
    /// 1.支持多订单分页查询；
    /// 2.支持唯一订单号精准匹配查询；
    /// 3.支持唯一资源号精准匹配查询；
    ///
    /// - Returns: `AsyncSequence`s of `Orders` and `DescribeOrderInstancesResponse` that can be iterated over asynchronously on demand.
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func describeOrderInstancesPaginator(_ input: DescribeOrderInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeOrderInstancesRequest> {
        fatalError("DescribeOrderInstances is no longer available.")
    }
}
