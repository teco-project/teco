//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ms {
    /// RequestLocalTask请求参数结构体
    public struct RequestLocalTaskRequest: TCRequest {
        /// Client Id
        public let clientId: String

        public init(clientId: String) {
            self.clientId = clientId
        }

        enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
        }
    }

    /// RequestLocalTask返回参数结构体
    public struct RequestLocalTaskResponse: TCResponse {
        /// 返回的任务id
        public let sid: String?

        /// 任务文件的mk5
        public let srcFileMd5: String?

        /// 文件大小，可不传
        public let srcFileSize: Int64?

        /// 任务文件的下载地址，必须无鉴权可下载
        public let srcFileUrl: String?

        /// release: 需要INFO-PLIST文件，会生成工具部署安装包，并带有license文件，绑定机器；nobind不需要INFO-PLIST文件，不绑定机器
        public let srcFileType: String?

        /// enterprise
        /// trial
        public let srcFileVersion: String?

        /// 补充字段
        public let encryptParam: String?

        /// 任务状态
        public let encryptState: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sid = "Sid"
            case srcFileMd5 = "SrcFileMd5"
            case srcFileSize = "SrcFileSize"
            case srcFileUrl = "SrcFileUrl"
            case srcFileType = "SrcFileType"
            case srcFileVersion = "SrcFileVersion"
            case encryptParam = "EncryptParam"
            case encryptState = "EncryptState"
            case requestId = "RequestId"
        }
    }

    /// client任务请求地址
    @inlinable
    public func requestLocalTask(_ input: RequestLocalTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RequestLocalTaskResponse> {
        self.client.execute(action: "RequestLocalTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// client任务请求地址
    @inlinable
    public func requestLocalTask(_ input: RequestLocalTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RequestLocalTaskResponse {
        try await self.client.execute(action: "RequestLocalTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// client任务请求地址
    @inlinable
    public func requestLocalTask(clientId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RequestLocalTaskResponse> {
        self.requestLocalTask(.init(clientId: clientId), region: region, logger: logger, on: eventLoop)
    }

    /// client任务请求地址
    @inlinable
    public func requestLocalTask(clientId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RequestLocalTaskResponse {
        try await self.requestLocalTask(.init(clientId: clientId), region: region, logger: logger, on: eventLoop)
    }
}
