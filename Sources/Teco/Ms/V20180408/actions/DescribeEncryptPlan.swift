//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ms {
    /// DescribeEncryptPlan请求参数结构体
    public struct DescribeEncryptPlanRequest: TCRequestModel {
        /// 平台类型  1.android加固   2.ios源码混淆  3.sdk加固  4.applet小程序加固
        public let platformType: Int64

        /// 订单采购类型 1-免费试用 2-按年收费 3-按次收费
        public let orderType: Int64

        /// 1-在线加固；2-输出工具
        public let encryptOpType: Int64

        /// 本次加固使用的资源id
        public let resourceId: String

        /// （条件过滤字段）加固查询时，根据包名查询
        public let appPkgName: String?

        /// （条件过滤字段）加固查询时，根据应用格式查询，枚举值：“apk”、“aab”
        public let appType: String?

        public init(platformType: Int64, orderType: Int64, encryptOpType: Int64, resourceId: String, appPkgName: String? = nil, appType: String? = nil) {
            self.platformType = platformType
            self.orderType = orderType
            self.encryptOpType = encryptOpType
            self.resourceId = resourceId
            self.appPkgName = appPkgName
            self.appType = appType
        }

        enum CodingKeys: String, CodingKey {
            case platformType = "PlatformType"
            case orderType = "OrderType"
            case encryptOpType = "EncryptOpType"
            case resourceId = "ResourceId"
            case appPkgName = "AppPkgName"
            case appType = "AppType"
        }
    }

    /// DescribeEncryptPlan返回参数结构体
    public struct DescribeEncryptPlanResponse: TCResponseModel {
        /// 平台类型整型值
        public let platformType: Int64

        /// 平台类型描述 1.android加固   2.ios源码混淆  3.sdk加固  4.applet小程序加固
        public let platformTypeDesc: String

        /// 1- 在线加固 2-输出工具加固
        public let encryptOpType: Int64

        /// 1- 在线加固 2-输出工具加固
        public let encryptOpTypeDesc: String

        /// 订单收费类型枚举值
        public let orderType: Int64

        /// 订单收费类型描述
        public let orderTypeDesc: String

        /// 资源id
        public let resourceId: String

        /// 上次加固策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let androidPlan: AndroidPlan?

        /// 上次小程序加固策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let appletPlan: AppletPlan?

        /// 上次ios源码混淆加固配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let iosPlan: IOSPlan?

        /// 上次sdk加固配置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sdkPlan: SDKPlan?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case platformType = "PlatformType"
            case platformTypeDesc = "PlatformTypeDesc"
            case encryptOpType = "EncryptOpType"
            case encryptOpTypeDesc = "EncryptOpTypeDesc"
            case orderType = "OrderType"
            case orderTypeDesc = "OrderTypeDesc"
            case resourceId = "ResourceId"
            case androidPlan = "AndroidPlan"
            case appletPlan = "AppletPlan"
            case iosPlan = "IOSPlan"
            case sdkPlan = "SDKPlan"
            case requestId = "RequestId"
        }
    }

    /// 载入渠道合作加固上次使用的加固配置
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。入参中的条件过滤字段均为精准匹配。
    @inlinable
    public func describeEncryptPlan(_ input: DescribeEncryptPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEncryptPlanResponse> {
        self.client.execute(action: "DescribeEncryptPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 载入渠道合作加固上次使用的加固配置
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。入参中的条件过滤字段均为精准匹配。
    @inlinable
    public func describeEncryptPlan(_ input: DescribeEncryptPlanRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEncryptPlanResponse {
        try await self.client.execute(action: "DescribeEncryptPlan", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 载入渠道合作加固上次使用的加固配置
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。入参中的条件过滤字段均为精准匹配。
    @inlinable
    public func describeEncryptPlan(platformType: Int64, orderType: Int64, encryptOpType: Int64, resourceId: String, appPkgName: String? = nil, appType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEncryptPlanResponse> {
        self.describeEncryptPlan(.init(platformType: platformType, orderType: orderType, encryptOpType: encryptOpType, resourceId: resourceId, appPkgName: appPkgName, appType: appType), region: region, logger: logger, on: eventLoop)
    }

    /// 载入渠道合作加固上次使用的加固配置
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。入参中的条件过滤字段均为精准匹配。
    @inlinable
    public func describeEncryptPlan(platformType: Int64, orderType: Int64, encryptOpType: Int64, resourceId: String, appPkgName: String? = nil, appType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEncryptPlanResponse {
        try await self.describeEncryptPlan(.init(platformType: platformType, orderType: orderType, encryptOpType: encryptOpType, resourceId: resourceId, appPkgName: appPkgName, appType: appType), region: region, logger: logger, on: eventLoop)
    }
}
