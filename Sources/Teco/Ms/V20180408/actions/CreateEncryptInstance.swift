//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ms {
    /// CreateEncryptInstance请求参数结构体
    public struct CreateEncryptInstanceRequest: TCRequestModel {
        /// 平台类型  1.android加固   2.ios源码混淆  3.sdk加固  4.applet小程序加固
        public let platformType: Int64

        /// 订单采购类型 1-免费试用 2-按年收费 3-按次收费
        public let orderType: Int64

        /// 1-在线加固、  2-输出工具加固
        public let encryptOpType: Int64

        /// 本次加固使用的资源id
        public let resourceId: String

        /// 渠道合作android加固App信息
        public let androidAppInfo: AndroidAppInfo?

        /// 渠道合作android加固策略信息
        public let androidPlan: AndroidPlan?

        /// 小程序加固信息
        public let appletInfo: AppletInfo?

        public init(platformType: Int64, orderType: Int64, encryptOpType: Int64, resourceId: String, androidAppInfo: AndroidAppInfo? = nil, androidPlan: AndroidPlan? = nil, appletInfo: AppletInfo? = nil) {
            self.platformType = platformType
            self.orderType = orderType
            self.encryptOpType = encryptOpType
            self.resourceId = resourceId
            self.androidAppInfo = androidAppInfo
            self.androidPlan = androidPlan
            self.appletInfo = appletInfo
        }

        enum CodingKeys: String, CodingKey {
            case platformType = "PlatformType"
            case orderType = "OrderType"
            case encryptOpType = "EncryptOpType"
            case resourceId = "ResourceId"
            case androidAppInfo = "AndroidAppInfo"
            case androidPlan = "AndroidPlan"
            case appletInfo = "AppletInfo"
        }
    }

    /// CreateEncryptInstance返回参数结构体
    public struct CreateEncryptInstanceResponse: TCResponseModel {
        /// 加固任务Id
        public let resultId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case resultId = "ResultId"
            case requestId = "RequestId"
        }
    }

    /// 创建渠道合作应用加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，用于创建加固任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func createEncryptInstance(_ input: CreateEncryptInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEncryptInstanceResponse> {
        fatalError("CreateEncryptInstance is no longer available.")
    }

    /// 创建渠道合作应用加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，用于创建加固任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func createEncryptInstance(_ input: CreateEncryptInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEncryptInstanceResponse {
        fatalError("CreateEncryptInstance is no longer available.")
    }

    /// 创建渠道合作应用加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，用于创建加固任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func createEncryptInstance(platformType: Int64, orderType: Int64, encryptOpType: Int64, resourceId: String, androidAppInfo: AndroidAppInfo? = nil, androidPlan: AndroidPlan? = nil, appletInfo: AppletInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEncryptInstanceResponse> {
        fatalError("CreateEncryptInstance is no longer available.")
    }

    /// 创建渠道合作应用加固任务
    ///
    /// 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，用于创建加固任务。
    @available(*, unavailable, message: "上错服务器了")
    @inlinable
    public func createEncryptInstance(platformType: Int64, orderType: Int64, encryptOpType: Int64, resourceId: String, androidAppInfo: AndroidAppInfo? = nil, androidPlan: AndroidPlan? = nil, appletInfo: AppletInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEncryptInstanceResponse {
        fatalError("CreateEncryptInstance is no longer available.")
    }
}
