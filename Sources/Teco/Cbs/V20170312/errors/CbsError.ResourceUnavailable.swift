//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCbsError {
    public struct ResourceUnavailable: TCErrorType {
        enum Code: String {
            case attached = "ResourceUnavailable.Attached"
            case diskSnapshotChainTooLarge = "ResourceUnavailable.DiskSnapshotChainTooLarge"
            case expire = "ResourceUnavailable.Expire"
            case notPortable = "ResourceUnavailable.NotPortable"
            case notSupportRefund = "ResourceUnavailable.NotSupportRefund"
            case notSupported = "ResourceUnavailable.NotSupported"
            case repeatRefund = "ResourceUnavailable.RepeatRefund"
            case snapshotCreating = "ResourceUnavailable.SnapshotCreating"
            case tooManyCreatingSnapshot = "ResourceUnavailable.TooManyCreatingSnapshot"
            case typeError = "ResourceUnavailable.TypeError"
            case zoneNotMatch = "ResourceUnavailable.ZoneNotMatch"
            case other = "ResourceUnavailable"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 云硬盘已挂载至其他云服务器上。
        public static var attached: ResourceUnavailable {
            ResourceUnavailable(.attached)
        }
        
        public static var diskSnapshotChainTooLarge: ResourceUnavailable {
            ResourceUnavailable(.diskSnapshotChainTooLarge)
        }
        
        /// 云硬盘已过期。
        public static var expire: ResourceUnavailable {
            ResourceUnavailable(.expire)
        }
        
        /// 非弹性云硬盘不支持此操作。
        public static var notPortable: ResourceUnavailable {
            ResourceUnavailable(.notPortable)
        }
        
        /// 云盘不支持退还。
        public static var notSupportRefund: ResourceUnavailable {
            ResourceUnavailable(.notSupportRefund)
        }
        
        /// 资源不支持此操作。
        public static var notSupported: ResourceUnavailable {
            ResourceUnavailable(.notSupported)
        }
        
        /// 云硬盘已退还。
        public static var repeatRefund: ResourceUnavailable {
            ResourceUnavailable(.repeatRefund)
        }
        
        /// 快照尚未创建完成，暂时不可使用。
        public static var snapshotCreating: ResourceUnavailable {
            ResourceUnavailable(.snapshotCreating)
        }
        
        /// 全网正在创建的快照数量过多。
        public static var tooManyCreatingSnapshot: ResourceUnavailable {
            ResourceUnavailable(.tooManyCreatingSnapshot)
        }
        
        /// 云硬盘类型错误，如尝试挂载系统盘至云服务器上。
        public static var typeError: ResourceUnavailable {
            ResourceUnavailable(.typeError)
        }
        
        /// 云硬盘与实例不在同一可用区。
        public static var zoneNotMatch: ResourceUnavailable {
            ResourceUnavailable(.zoneNotMatch)
        }
        
        /// 资源不可用。
        public static var other: ResourceUnavailable {
            ResourceUnavailable(.other)
        }
    }
}

extension TCCbsError.ResourceUnavailable: Equatable {
    public static func == (lhs: TCCbsError.ResourceUnavailable, rhs: TCCbsError.ResourceUnavailable) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCbsError.ResourceUnavailable: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCbsError.ResourceUnavailable {
    /// - Returns: ``TCCbsError`` that holds the same error and context.
    public func toCbsError() -> TCCbsError {
        guard let code = TCCbsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCbsError(code, context: self.context)
    }
}

extension TCCbsError.ResourceUnavailable {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
