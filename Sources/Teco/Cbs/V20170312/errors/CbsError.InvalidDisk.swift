//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCbsError {
    public struct InvalidDisk: TCErrorType {
        enum Code: String {
            case alreadyBound = "InvalidDisk.AlreadyBound"
            case busy = "InvalidDisk.Busy"
            case expire = "InvalidDisk.Expire"
            case notPortable = "InvalidDisk.NotPortable"
            case notSupportSnapshot = "InvalidDisk.NotSupportSnapshot"
            case notSupported = "InvalidDisk.NotSupported"
            case snapshotCreating = "InvalidDisk.SnapshotCreating"
            case typeError = "InvalidDisk.TypeError"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 云盘已绑定定期快照策略。
        public static var alreadyBound: InvalidDisk {
            InvalidDisk(.alreadyBound)
        }
        
        /// 云硬盘忙，请稍后重试。
        public static var busy: InvalidDisk {
            InvalidDisk(.busy)
        }
        
        /// 云盘已过期。
        public static var expire: InvalidDisk {
            InvalidDisk(.expire)
        }
        
        /// 不支持非弹性云盘。
        public static var notPortable: InvalidDisk {
            InvalidDisk(.notPortable)
        }
        
        /// 云硬盘没有快照能力。
        public static var notSupportSnapshot: InvalidDisk {
            InvalidDisk(.notSupportSnapshot)
        }
        
        /// 云硬盘不支持该操作。
        public static var notSupported: InvalidDisk {
            InvalidDisk(.notSupported)
        }
        
        /// 云硬盘正在创建快照，请稍后重试。
        public static var snapshotCreating: InvalidDisk {
            InvalidDisk(.snapshotCreating)
        }
        
        /// 云硬盘类型错误。
        public static var typeError: InvalidDisk {
            InvalidDisk(.typeError)
        }
    }
}

extension TCCbsError.InvalidDisk: Equatable {
    public static func == (lhs: TCCbsError.InvalidDisk, rhs: TCCbsError.InvalidDisk) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCbsError.InvalidDisk: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCbsError.InvalidDisk {
    public func toCbsError() -> TCCbsError {
        guard let code = TCCbsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCbsError(code, context: self.context)
    }
}