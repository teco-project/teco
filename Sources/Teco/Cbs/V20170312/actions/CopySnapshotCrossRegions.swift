//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cbs {
    /// CopySnapshotCrossRegions请求参数结构体
    public struct CopySnapshotCrossRegionsRequest: TCRequest {
        /// 快照需要复制到的目标地域，各地域的标准取值可通过接口[DescribeRegions](https://cloud.tencent.com/document/product/213/9456)查询，且只能传入支持快照的地域。
        public let destinationRegions: [String]

        /// 需要跨地域复制的源快照ID，可通过[DescribeSnapshots](/document/product/362/15647)查询。
        public let snapshotId: String?

        /// 新复制快照的名称，如果不传，则默认取值为“Copied 源快照ID from 地域名”。
        public let snapshotName: String?

        public init(destinationRegions: [String], snapshotId: String? = nil, snapshotName: String? = nil) {
            self.destinationRegions = destinationRegions
            self.snapshotId = snapshotId
            self.snapshotName = snapshotName
        }

        enum CodingKeys: String, CodingKey {
            case destinationRegions = "DestinationRegions"
            case snapshotId = "SnapshotId"
            case snapshotName = "SnapshotName"
        }
    }

    /// CopySnapshotCrossRegions返回参数结构体
    public struct CopySnapshotCrossRegionsResponse: TCResponse {
        /// 快照跨地域复制的结果，如果请求下发成功，则返回相应地地域的新快照ID，否则返回Error。
        public let snapshotCopyResultSet: [SnapshotCopyResult]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case snapshotCopyResultSet = "SnapshotCopyResultSet"
            case requestId = "RequestId"
        }
    }

    /// 快照跨地域复制
    ///
    /// 本接口（CopySnapshotCrossRegions）用于快照跨地域复制。
    ///
    /// * 本接口为异步接口，当跨地域复制的请求下发成功后会返回一个新的快照ID，此时快照未立即复制到目标地域，可请求目标地域的[DescribeSnapshots](/document/product/362/15647)接口查询新快照的状态，判断是否复制完成。如果快照的状态为“NORMAL”，表示快照复制完成。
    /// * 本接口实现的快照跨地域复制操作将产生跨地域流量，预计2022年第三季度会针对此功能进行商业化计费；请留意后续站内信公告，避免产生预期外扣费。
    @inlinable
    public func copySnapshotCrossRegions(_ input: CopySnapshotCrossRegionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CopySnapshotCrossRegionsResponse> {
        self.client.execute(action: "CopySnapshotCrossRegions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 快照跨地域复制
    ///
    /// 本接口（CopySnapshotCrossRegions）用于快照跨地域复制。
    ///
    /// * 本接口为异步接口，当跨地域复制的请求下发成功后会返回一个新的快照ID，此时快照未立即复制到目标地域，可请求目标地域的[DescribeSnapshots](/document/product/362/15647)接口查询新快照的状态，判断是否复制完成。如果快照的状态为“NORMAL”，表示快照复制完成。
    /// * 本接口实现的快照跨地域复制操作将产生跨地域流量，预计2022年第三季度会针对此功能进行商业化计费；请留意后续站内信公告，避免产生预期外扣费。
    @inlinable
    public func copySnapshotCrossRegions(_ input: CopySnapshotCrossRegionsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CopySnapshotCrossRegionsResponse {
        try await self.client.execute(action: "CopySnapshotCrossRegions", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 快照跨地域复制
    ///
    /// 本接口（CopySnapshotCrossRegions）用于快照跨地域复制。
    ///
    /// * 本接口为异步接口，当跨地域复制的请求下发成功后会返回一个新的快照ID，此时快照未立即复制到目标地域，可请求目标地域的[DescribeSnapshots](/document/product/362/15647)接口查询新快照的状态，判断是否复制完成。如果快照的状态为“NORMAL”，表示快照复制完成。
    /// * 本接口实现的快照跨地域复制操作将产生跨地域流量，预计2022年第三季度会针对此功能进行商业化计费；请留意后续站内信公告，避免产生预期外扣费。
    @inlinable
    public func copySnapshotCrossRegions(destinationRegions: [String], snapshotId: String? = nil, snapshotName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CopySnapshotCrossRegionsResponse> {
        self.copySnapshotCrossRegions(.init(destinationRegions: destinationRegions, snapshotId: snapshotId, snapshotName: snapshotName), region: region, logger: logger, on: eventLoop)
    }

    /// 快照跨地域复制
    ///
    /// 本接口（CopySnapshotCrossRegions）用于快照跨地域复制。
    ///
    /// * 本接口为异步接口，当跨地域复制的请求下发成功后会返回一个新的快照ID，此时快照未立即复制到目标地域，可请求目标地域的[DescribeSnapshots](/document/product/362/15647)接口查询新快照的状态，判断是否复制完成。如果快照的状态为“NORMAL”，表示快照复制完成。
    /// * 本接口实现的快照跨地域复制操作将产生跨地域流量，预计2022年第三季度会针对此功能进行商业化计费；请留意后续站内信公告，避免产生预期外扣费。
    @inlinable
    public func copySnapshotCrossRegions(destinationRegions: [String], snapshotId: String? = nil, snapshotName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CopySnapshotCrossRegionsResponse {
        try await self.copySnapshotCrossRegions(.init(destinationRegions: destinationRegions, snapshotId: snapshotId, snapshotName: snapshotName), region: region, logger: logger, on: eventLoop)
    }
}
