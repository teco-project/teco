//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCVmsError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case accessUpstreamTimeout = "FailedOperation.AccessUpstreamTimeout"
            case containSensitiveWord = "FailedOperation.ContainSensitiveWord"
            case failResolvePacket = "FailedOperation.FailResolvePacket"
            case insufficientBalanceInVoicePackage = "FailedOperation.InsufficientBalanceInVoicePackage"
            case invalidJsonParameters = "FailedOperation.InvalidJsonParameters"
            case invalidParameters = "FailedOperation.InvalidParameters"
            case jsonParseFail = "FailedOperation.JsonParseFail"
            case parametersOtherError = "FailedOperation.ParametersOtherError"
            case phonenumberUnappliedOrExpired = "FailedOperation.PhonenumberUnappliedOrExpired"
            case templateIncorrectOrUnapproved = "FailedOperation.TemplateIncorrectOrUnapproved"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 访问上下游模块超时。
        public static var accessUpstreamTimeout: FailedOperation {
            FailedOperation(.accessUpstreamTimeout)
        }
        
        /// 语音内容中含有敏感词，请<a href="https://cloud.tencent.com/document/product/1128/37720">联系我们</a>沟通解决。
        public static var containSensitiveWord: FailedOperation {
            FailedOperation(.containSensitiveWord)
        }
        
        /// 后端请求包解析失败，通常由于没有遵守 API 接口说明规范导致的，请参见<a href="https://cloud.tencent.com/document/product/1128/38004#Q7">1004错误详解</a>。
        public static var failResolvePacket: FailedOperation {
            FailedOperation(.failResolvePacket)
        }
        
        /// 套餐包余量不足，请及时<a href="https://cloud.tencent.com/document/product/1128#buyPackage">购买语音套餐包</a>。
        public static var insufficientBalanceInVoicePackage: FailedOperation {
            FailedOperation(.insufficientBalanceInVoicePackage)
        }
        
        /// 无效 JSON，请核查发送的请求是否为标准的 JSON 格式。
        public static var invalidJsonParameters: FailedOperation {
            FailedOperation(.invalidJsonParameters)
        }
        
        /// 无效参数，请核查发送的请求参数是否为对应 API 所需参数。
        public static var invalidParameters: FailedOperation {
            FailedOperation(.invalidParameters)
        }
        
        /// 解析请求包体时候失败。
        public static var jsonParseFail: FailedOperation {
            FailedOperation(.jsonParseFail)
        }
        
        /// 语音未知错误，请<a href="https://cloud.tencent.com/document/product/1128/37720">联系我们</a>沟通解决。
        public static var parametersOtherError: FailedOperation {
            FailedOperation(.parametersOtherError)
        }
        
        /// 未申请号码或申请的号码资源已过期，请及时支付月功能费用和信息服务费用，具体操作请参见<a href="https://cloud.tencent.com/document/product/1128">购买指南</a>。
        public static var phonenumberUnappliedOrExpired: FailedOperation {
            FailedOperation(.phonenumberUnappliedOrExpired)
        }
        
        /// 模板未审核或请求的内容与审核通过的模板内容不匹配，请参见[1014错误详解](https://cloud.tencent.com/document/product/1128/38004
        public static var templateIncorrectOrUnapproved: FailedOperation {
            FailedOperation(.templateIncorrectOrUnapproved)
        }
    }
}

extension TCVmsError.FailedOperation: Equatable {
    public static func == (lhs: TCVmsError.FailedOperation, rhs: TCVmsError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCVmsError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCVmsError.FailedOperation {
    /// - Returns: ``TCVmsError`` that holds the same error and context.
    public func toVmsError() -> TCVmsError {
        guard let code = TCVmsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCVmsError(code, context: self.context)
    }
}

extension TCVmsError.FailedOperation {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
