//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssl {
    /// ModifyCertificateResubmit请求参数结构体
    public struct ModifyCertificateResubmitRequest: TCRequest {
        /// 证书ID。
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
        }
    }

    /// ModifyCertificateResubmit返回参数结构体
    public struct ModifyCertificateResubmitResponse: TCResponse {
        /// 证书ID。
        public let certificateId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
            case requestId = "RequestId"
        }
    }

    /// 证书重新发起申请
    ///
    /// 针对审核失败或审核取消的付费证书，重新发起审核
    @inlinable
    public func modifyCertificateResubmit(_ input: ModifyCertificateResubmitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCertificateResubmitResponse> {
        self.client.execute(action: "ModifyCertificateResubmit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 证书重新发起申请
    ///
    /// 针对审核失败或审核取消的付费证书，重新发起审核
    @inlinable
    public func modifyCertificateResubmit(_ input: ModifyCertificateResubmitRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCertificateResubmitResponse {
        try await self.client.execute(action: "ModifyCertificateResubmit", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 证书重新发起申请
    ///
    /// 针对审核失败或审核取消的付费证书，重新发起审核
    @inlinable
    public func modifyCertificateResubmit(certificateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCertificateResubmitResponse> {
        self.modifyCertificateResubmit(.init(certificateId: certificateId), region: region, logger: logger, on: eventLoop)
    }

    /// 证书重新发起申请
    ///
    /// 针对审核失败或审核取消的付费证书，重新发起审核
    @inlinable
    public func modifyCertificateResubmit(certificateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCertificateResubmitResponse {
        try await self.modifyCertificateResubmit(.init(certificateId: certificateId), region: region, logger: logger, on: eventLoop)
    }
}
