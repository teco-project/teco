//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ssl {
    /// DeleteCertificate请求参数结构体
    public struct DeleteCertificateRequest: TCRequestModel {
        /// 证书 ID。
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
        }
    }

    /// DeleteCertificate返回参数结构体
    public struct DeleteCertificateResponse: TCResponseModel {
        /// 删除结果（true：删除成功，false：删除失败）
        public let deleteResult: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case deleteResult = "DeleteResult"
            case requestId = "RequestId"
        }
    }

    /// 删除证书
    ///
    /// 本接口（DeleteCertificate）用于删除证书。
    @inlinable
    public func deleteCertificate(_ input: DeleteCertificateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCertificateResponse> {
        self.client.execute(action: "DeleteCertificate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除证书
    ///
    /// 本接口（DeleteCertificate）用于删除证书。
    @inlinable
    public func deleteCertificate(_ input: DeleteCertificateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCertificateResponse {
        try await self.client.execute(action: "DeleteCertificate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除证书
    ///
    /// 本接口（DeleteCertificate）用于删除证书。
    @inlinable
    public func deleteCertificate(certificateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteCertificateResponse> {
        self.deleteCertificate(.init(certificateId: certificateId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除证书
    ///
    /// 本接口（DeleteCertificate）用于删除证书。
    @inlinable
    public func deleteCertificate(certificateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteCertificateResponse {
        try await self.deleteCertificate(.init(certificateId: certificateId), region: region, logger: logger, on: eventLoop)
    }
}
