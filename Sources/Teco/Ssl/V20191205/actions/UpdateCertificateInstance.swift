//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssl {
    /// UpdateCertificateInstance请求参数结构体
    public struct UpdateCertificateInstanceRequest: TCRequestModel {
        /// 一键更新新证书ID
        public let certificateId: String

        /// 一键更新原证书ID
        public let oldCertificateId: String

        /// 需要部署的资源类型
        public let resourceTypes: [String]

        /// 需要部署的地域列表（废弃）
        public let regions: [String]?

        /// 云资源需要部署的地域列表
        public let resourceTypesRegions: [ResourceTypeRegions]?

        public init(certificateId: String, oldCertificateId: String, resourceTypes: [String], regions: [String]? = nil, resourceTypesRegions: [ResourceTypeRegions]? = nil) {
            self.certificateId = certificateId
            self.oldCertificateId = oldCertificateId
            self.resourceTypes = resourceTypes
            self.regions = regions
            self.resourceTypesRegions = resourceTypesRegions
        }

        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
            case oldCertificateId = "OldCertificateId"
            case resourceTypes = "ResourceTypes"
            case regions = "Regions"
            case resourceTypesRegions = "ResourceTypesRegions"
        }
    }

    /// UpdateCertificateInstance返回参数结构体
    public struct UpdateCertificateInstanceResponse: TCResponseModel {
        /// 云资源部署任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deployRecordId: UInt64?

        /// 部署状态，1表示部署成功，0表示部署失败
        public let deployStatus: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case deployRecordId = "DeployRecordId"
            case deployStatus = "DeployStatus"
            case requestId = "RequestId"
        }
    }

    /// 一键更新旧证书资源
    @inlinable
    public func updateCertificateInstance(_ input: UpdateCertificateInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateCertificateInstanceResponse> {
        self.client.execute(action: "UpdateCertificateInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 一键更新旧证书资源
    @inlinable
    public func updateCertificateInstance(_ input: UpdateCertificateInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateCertificateInstanceResponse {
        try await self.client.execute(action: "UpdateCertificateInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 一键更新旧证书资源
    @inlinable
    public func updateCertificateInstance(certificateId: String, oldCertificateId: String, resourceTypes: [String], regions: [String]? = nil, resourceTypesRegions: [ResourceTypeRegions]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateCertificateInstanceResponse> {
        self.updateCertificateInstance(.init(certificateId: certificateId, oldCertificateId: oldCertificateId, resourceTypes: resourceTypes, regions: regions, resourceTypesRegions: resourceTypesRegions), region: region, logger: logger, on: eventLoop)
    }

    /// 一键更新旧证书资源
    @inlinable
    public func updateCertificateInstance(certificateId: String, oldCertificateId: String, resourceTypes: [String], regions: [String]? = nil, resourceTypesRegions: [ResourceTypeRegions]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateCertificateInstanceResponse {
        try await self.updateCertificateInstance(.init(certificateId: certificateId, oldCertificateId: oldCertificateId, resourceTypes: resourceTypes, regions: regions, resourceTypesRegions: resourceTypesRegions), region: region, logger: logger, on: eventLoop)
    }
}
