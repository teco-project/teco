//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Ssl {
    /// DescribeHostUpdateRecord请求参数结构体
    public struct DescribeHostUpdateRecordRequest: TCPaginatedRequest {
        /// 分页偏移量，从0开始。
        public let offset: UInt64?

        /// 每页数量，默认10。
        public let limit: UInt64?

        /// 新证书ID
        public let certificateId: String?

        /// 原证书ID
        public let oldCertificateId: String?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, certificateId: String? = nil, oldCertificateId: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.certificateId = certificateId
            self.oldCertificateId = oldCertificateId
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case certificateId = "CertificateId"
            case oldCertificateId = "OldCertificateId"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeHostUpdateRecordResponse) -> DescribeHostUpdateRecordRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, certificateId: self.certificateId, oldCertificateId: self.oldCertificateId)
        }
    }

    /// DescribeHostUpdateRecord返回参数结构体
    public struct DescribeHostUpdateRecordResponse: TCPaginatedResponse {
        /// 总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalCount: UInt64?

        /// 证书部署记录列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deployRecordList: [UpdateRecordInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case deployRecordList = "DeployRecordList"
            case requestId = "RequestId"
        }

        /// Extract the returned ``UpdateRecordInfo`` list from the paginated response.
        public func getItems() -> [UpdateRecordInfo] {
            self.deployRecordList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询证书云资源更新记录列表
    @inlinable
    public func describeHostUpdateRecord(_ input: DescribeHostUpdateRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostUpdateRecordResponse> {
        self.client.execute(action: "DescribeHostUpdateRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询证书云资源更新记录列表
    @inlinable
    public func describeHostUpdateRecord(_ input: DescribeHostUpdateRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostUpdateRecordResponse {
        try await self.client.execute(action: "DescribeHostUpdateRecord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询证书云资源更新记录列表
    @inlinable
    public func describeHostUpdateRecord(offset: UInt64? = nil, limit: UInt64? = nil, certificateId: String? = nil, oldCertificateId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostUpdateRecordResponse> {
        self.describeHostUpdateRecord(.init(offset: offset, limit: limit, certificateId: certificateId, oldCertificateId: oldCertificateId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询证书云资源更新记录列表
    @inlinable
    public func describeHostUpdateRecord(offset: UInt64? = nil, limit: UInt64? = nil, certificateId: String? = nil, oldCertificateId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostUpdateRecordResponse {
        try await self.describeHostUpdateRecord(.init(offset: offset, limit: limit, certificateId: certificateId, oldCertificateId: oldCertificateId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询证书云资源更新记录列表
    @inlinable
    public func describeHostUpdateRecordPaginated(_ input: DescribeHostUpdateRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [UpdateRecordInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeHostUpdateRecord, logger: logger, on: eventLoop)
    }

    /// 查询证书云资源更新记录列表
    @inlinable @discardableResult
    public func describeHostUpdateRecordPaginated(_ input: DescribeHostUpdateRecordRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeHostUpdateRecordResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeHostUpdateRecord, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询证书云资源更新记录列表
    ///
    /// - Returns: `AsyncSequence`s of ``UpdateRecordInfo`` and ``DescribeHostUpdateRecordResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeHostUpdateRecordPaginator(_ input: DescribeHostUpdateRecordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeHostUpdateRecordRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeHostUpdateRecord, logger: logger, on: eventLoop)
    }
}
