//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssl {
    /// UpdateCertificateRecordRollback请求参数结构体
    public struct UpdateCertificateRecordRollbackRequest: TCRequestModel {
        /// 待重试部署记录ID
        public let deployRecordId: Int64?

        public init(deployRecordId: Int64? = nil) {
            self.deployRecordId = deployRecordId
        }

        enum CodingKeys: String, CodingKey {
            case deployRecordId = "DeployRecordId"
        }
    }

    /// UpdateCertificateRecordRollback返回参数结构体
    public struct UpdateCertificateRecordRollbackResponse: TCResponseModel {
        /// 回滚部署记录ID
        public let deployRecordId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case deployRecordId = "DeployRecordId"
            case requestId = "RequestId"
        }
    }

    /// 云资源更新一键回滚
    @inlinable
    public func updateCertificateRecordRollback(_ input: UpdateCertificateRecordRollbackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateCertificateRecordRollbackResponse> {
        self.client.execute(action: "UpdateCertificateRecordRollback", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云资源更新一键回滚
    @inlinable
    public func updateCertificateRecordRollback(_ input: UpdateCertificateRecordRollbackRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateCertificateRecordRollbackResponse {
        try await self.client.execute(action: "UpdateCertificateRecordRollback", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云资源更新一键回滚
    @inlinable
    public func updateCertificateRecordRollback(deployRecordId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateCertificateRecordRollbackResponse> {
        self.updateCertificateRecordRollback(.init(deployRecordId: deployRecordId), region: region, logger: logger, on: eventLoop)
    }

    /// 云资源更新一键回滚
    @inlinable
    public func updateCertificateRecordRollback(deployRecordId: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateCertificateRecordRollbackResponse {
        try await self.updateCertificateRecordRollback(.init(deployRecordId: deployRecordId), region: region, logger: logger, on: eventLoop)
    }
}
