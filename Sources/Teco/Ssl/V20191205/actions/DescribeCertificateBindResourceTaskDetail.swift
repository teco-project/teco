//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssl {
    /// DescribeCertificateBindResourceTaskDetail请求参数结构体
    public struct DescribeCertificateBindResourceTaskDetailRequest: TCRequest {
        /// 任务ID，根据任务ID查询绑定云资源结果
        public let taskId: String

        /// 每页展示数量， 默认10，最大值100; 分页总数为云资源地域下实例总数， 即第一页会拉群每个云资源的地域下面Limit数量实例
        public let limit: String?

        /// 当前偏移量
        public let offset: String?

        /// 查询资源类型的结果详情， 不传则查询所有
        public let resourceTypes: [String]?

        /// 查询地域列表的数据，CLB、TKE、WAF、APIGATEWAY、TCB支持地域查询， 其他资源类型不支持
        public let regions: [String]?

        public init(taskId: String, limit: String? = nil, offset: String? = nil, resourceTypes: [String]? = nil, regions: [String]? = nil) {
            self.taskId = taskId
            self.limit = limit
            self.offset = offset
            self.resourceTypes = resourceTypes
            self.regions = regions
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case limit = "Limit"
            case offset = "Offset"
            case resourceTypes = "ResourceTypes"
            case regions = "Regions"
        }
    }

    /// DescribeCertificateBindResourceTaskDetail返回参数结构体
    public struct DescribeCertificateBindResourceTaskDetailResponse: TCResponse {
        /// 关联clb资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clb: [ClbInstanceList]?

        /// 关联cdn资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdn: [CdnInstanceList]?

        /// 关联waf资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let waf: [WafInstanceList]?

        /// 关联ddos资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ddos: [DdosInstanceList]?

        /// 关联live资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let live: [LiveInstanceList]?

        /// 关联vod资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vod: [VODInstanceList]?

        /// 关联tke资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tke: [TkeInstanceList]?

        /// 关联apigateway资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let apigateway: [ApiGatewayInstanceList]?

        /// 关联tcb资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tcb: [TCBInstanceList]?

        /// 关联teo资源详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let teo: [TeoInstanceList]?

        /// 关联云资源异步查询结果： 0表示查询中， 1表示查询成功。 2表示查询异常； 若状态为1，则查看BindResourceResult结果；若状态为2，则查看Error原因
        public let status: UInt64

        /// 当前结果缓存时间
        public let cacheTime: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clb = "CLB"
            case cdn = "CDN"
            case waf = "WAF"
            case ddos = "DDOS"
            case live = "LIVE"
            case vod = "VOD"
            case tke = "TKE"
            case apigateway = "APIGATEWAY"
            case tcb = "TCB"
            case teo = "TEO"
            case status = "Status"
            case cacheTime = "CacheTime"
            case requestId = "RequestId"
        }
    }

    /// 查询证书关联云资源任务结果 - 返回关联详情
    ///
    /// 查询CreateCertificateBindResourceSyncTask任务结果， 返回证书关联云资源异步任务结果， 支持以下云资源：clb、cdn、waf、live、vod、ddos、tke、apigateway、tcb、teo（edgeOne）
    @inlinable
    public func describeCertificateBindResourceTaskDetail(_ input: DescribeCertificateBindResourceTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCertificateBindResourceTaskDetailResponse> {
        self.client.execute(action: "DescribeCertificateBindResourceTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询证书关联云资源任务结果 - 返回关联详情
    ///
    /// 查询CreateCertificateBindResourceSyncTask任务结果， 返回证书关联云资源异步任务结果， 支持以下云资源：clb、cdn、waf、live、vod、ddos、tke、apigateway、tcb、teo（edgeOne）
    @inlinable
    public func describeCertificateBindResourceTaskDetail(_ input: DescribeCertificateBindResourceTaskDetailRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCertificateBindResourceTaskDetailResponse {
        try await self.client.execute(action: "DescribeCertificateBindResourceTaskDetail", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询证书关联云资源任务结果 - 返回关联详情
    ///
    /// 查询CreateCertificateBindResourceSyncTask任务结果， 返回证书关联云资源异步任务结果， 支持以下云资源：clb、cdn、waf、live、vod、ddos、tke、apigateway、tcb、teo（edgeOne）
    @inlinable
    public func describeCertificateBindResourceTaskDetail(taskId: String, limit: String? = nil, offset: String? = nil, resourceTypes: [String]? = nil, regions: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCertificateBindResourceTaskDetailResponse> {
        self.describeCertificateBindResourceTaskDetail(.init(taskId: taskId, limit: limit, offset: offset, resourceTypes: resourceTypes, regions: regions), region: region, logger: logger, on: eventLoop)
    }

    /// 查询证书关联云资源任务结果 - 返回关联详情
    ///
    /// 查询CreateCertificateBindResourceSyncTask任务结果， 返回证书关联云资源异步任务结果， 支持以下云资源：clb、cdn、waf、live、vod、ddos、tke、apigateway、tcb、teo（edgeOne）
    @inlinable
    public func describeCertificateBindResourceTaskDetail(taskId: String, limit: String? = nil, offset: String? = nil, resourceTypes: [String]? = nil, regions: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeCertificateBindResourceTaskDetailResponse {
        try await self.describeCertificateBindResourceTaskDetail(.init(taskId: taskId, limit: limit, offset: offset, resourceTypes: resourceTypes, regions: regions), region: region, logger: logger, on: eventLoop)
    }
}
