//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ssl {
    /// DescribeDeployedResources请求参数结构体
    public struct DescribeDeployedResourcesRequest: TCRequestModel {
        /// 证书ID
        public let certificateIds: [String]

        /// 资源类型:clb,cdn,live,waf,antiddos
        public let resourceType: String

        public init(certificateIds: [String], resourceType: String) {
            self.certificateIds = certificateIds
            self.resourceType = resourceType
        }

        enum CodingKeys: String, CodingKey {
            case certificateIds = "CertificateIds"
            case resourceType = "ResourceType"
        }
    }

    /// DescribeDeployedResources返回参数结构体
    public struct DescribeDeployedResourcesResponse: TCResponseModel {
        /// 资源详情
        public let deployedResources: [DeployedResources]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case deployedResources = "DeployedResources"
            case requestId = "RequestId"
        }
    }

    /// 证书查询关联资源
    @inlinable
    public func describeDeployedResources(_ input: DescribeDeployedResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeployedResourcesResponse> {
        self.client.execute(action: "DescribeDeployedResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 证书查询关联资源
    @inlinable
    public func describeDeployedResources(_ input: DescribeDeployedResourcesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeployedResourcesResponse {
        try await self.client.execute(action: "DescribeDeployedResources", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 证书查询关联资源
    @inlinable
    public func describeDeployedResources(certificateIds: [String], resourceType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeployedResourcesResponse> {
        self.describeDeployedResources(.init(certificateIds: certificateIds, resourceType: resourceType), region: region, logger: logger, on: eventLoop)
    }

    /// 证书查询关联资源
    @inlinable
    public func describeDeployedResources(certificateIds: [String], resourceType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeployedResourcesResponse {
        try await self.describeDeployedResources(.init(certificateIds: certificateIds, resourceType: resourceType), region: region, logger: logger, on: eventLoop)
    }
}
