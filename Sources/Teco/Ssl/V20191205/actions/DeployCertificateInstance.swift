//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssl {
    /// DeployCertificateInstance请求参数结构体
    public struct DeployCertificateInstanceRequest: TCRequestModel {
        /// 待部署的证书ID
        public let certificateId: String

        /// 需要部署实例列表
        public let instanceIdList: [String]

        /// 部署的云资源类型
        public let resourceType: String?

        /// 部署云资源状态：
        /// 云直播：
        /// -1：域名未关联证书。
        /// 1： 域名https已开启。
        /// 0： 域名https已关闭。
        public let status: Int64?

        public init(certificateId: String, instanceIdList: [String], resourceType: String? = nil, status: Int64? = nil) {
            self.certificateId = certificateId
            self.instanceIdList = instanceIdList
            self.resourceType = resourceType
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
            case instanceIdList = "InstanceIdList"
            case resourceType = "ResourceType"
            case status = "Status"
        }
    }

    /// DeployCertificateInstance返回参数结构体
    public struct DeployCertificateInstanceResponse: TCResponseModel {
        /// 云资源部署任务ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deployRecordId: UInt64?

        /// 部署状态，1表示部署成功，0表示部署失败
        public let deployStatus: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case deployRecordId = "DeployRecordId"
            case deployStatus = "DeployStatus"
            case requestId = "RequestId"
        }
    }

    /// 证书部署到云资源实例列表
    @inlinable
    public func deployCertificateInstance(_ input: DeployCertificateInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeployCertificateInstanceResponse> {
        self.client.execute(action: "DeployCertificateInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 证书部署到云资源实例列表
    @inlinable
    public func deployCertificateInstance(_ input: DeployCertificateInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeployCertificateInstanceResponse {
        try await self.client.execute(action: "DeployCertificateInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 证书部署到云资源实例列表
    @inlinable
    public func deployCertificateInstance(certificateId: String, instanceIdList: [String], resourceType: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeployCertificateInstanceResponse> {
        self.deployCertificateInstance(.init(certificateId: certificateId, instanceIdList: instanceIdList, resourceType: resourceType, status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 证书部署到云资源实例列表
    @inlinable
    public func deployCertificateInstance(certificateId: String, instanceIdList: [String], resourceType: String? = nil, status: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeployCertificateInstanceResponse {
        try await self.deployCertificateInstance(.init(certificateId: certificateId, instanceIdList: instanceIdList, resourceType: resourceType, status: status), region: region, logger: logger, on: eventLoop)
    }
}
