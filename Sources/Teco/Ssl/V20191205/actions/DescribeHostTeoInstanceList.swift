//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ssl {
    /// DescribeHostTeoInstanceList请求参数结构体
    public struct DescribeHostTeoInstanceListRequest: TCPaginatedRequest {
        /// 待部署的证书ID
        public let certificateId: String

        /// 部署资源类型
        public let resourceType: String

        /// 是否查询缓存，1：是； 0：否， 默认为查询缓存，缓存半小时
        public let isCache: UInt64?

        /// 过滤参数列表； FilterKey：domainMatch（查询域名是否匹配的实例列表） FilterValue：1，表示查询匹配； 0，表示查询不匹配； 默认查询匹配
        public let filters: [Filter]?

        /// 已部署的证书ID
        public let oldCertificateId: String?

        /// 分页偏移量，从0开始。
        public let offset: UInt64?

        /// 每页数量，默认10。
        public let limit: UInt64?

        /// 是否异步
        public let asyncCache: Int64?

        public init(certificateId: String, resourceType: String, isCache: UInt64? = nil, filters: [Filter]? = nil, oldCertificateId: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, asyncCache: Int64? = nil) {
            self.certificateId = certificateId
            self.resourceType = resourceType
            self.isCache = isCache
            self.filters = filters
            self.oldCertificateId = oldCertificateId
            self.offset = offset
            self.limit = limit
            self.asyncCache = asyncCache
        }

        enum CodingKeys: String, CodingKey {
            case certificateId = "CertificateId"
            case resourceType = "ResourceType"
            case isCache = "IsCache"
            case filters = "Filters"
            case oldCertificateId = "OldCertificateId"
            case offset = "Offset"
            case limit = "Limit"
            case asyncCache = "AsyncCache"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeHostTeoInstanceListResponse) -> DescribeHostTeoInstanceListRequest? {
            guard case let items = response.getItems(), !items.isEmpty, let totalCount = response.getTotalCount(), .init(self.offset ?? 0) + .init(items.count) >= totalCount else {
                return nil
            }
            return .init(certificateId: self.certificateId, resourceType: self.resourceType, isCache: self.isCache, filters: self.filters, oldCertificateId: self.oldCertificateId, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, asyncCache: self.asyncCache)
        }
    }

    /// DescribeHostTeoInstanceList返回参数结构体
    public struct DescribeHostTeoInstanceListResponse: TCPaginatedResponse {
        /// teo实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceList: [TeoInstanceDetail]?

        /// 总数
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceList = "InstanceList"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TeoInstanceDetail`` list from the paginated response.
        public func getItems() -> [TeoInstanceDetail] {
            self.instanceList ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 查询证书EdgeOne云资源部署实例列表
    @inlinable
    public func describeHostTeoInstanceList(_ input: DescribeHostTeoInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostTeoInstanceListResponse> {
        self.client.execute(action: "DescribeHostTeoInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询证书EdgeOne云资源部署实例列表
    @inlinable
    public func describeHostTeoInstanceList(_ input: DescribeHostTeoInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostTeoInstanceListResponse {
        try await self.client.execute(action: "DescribeHostTeoInstanceList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询证书EdgeOne云资源部署实例列表
    @inlinable
    public func describeHostTeoInstanceList(certificateId: String, resourceType: String, isCache: UInt64? = nil, filters: [Filter]? = nil, oldCertificateId: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, asyncCache: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHostTeoInstanceListResponse> {
        self.describeHostTeoInstanceList(.init(certificateId: certificateId, resourceType: resourceType, isCache: isCache, filters: filters, oldCertificateId: oldCertificateId, offset: offset, limit: limit, asyncCache: asyncCache), region: region, logger: logger, on: eventLoop)
    }

    /// 查询证书EdgeOne云资源部署实例列表
    @inlinable
    public func describeHostTeoInstanceList(certificateId: String, resourceType: String, isCache: UInt64? = nil, filters: [Filter]? = nil, oldCertificateId: String? = nil, offset: UInt64? = nil, limit: UInt64? = nil, asyncCache: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHostTeoInstanceListResponse {
        try await self.describeHostTeoInstanceList(.init(certificateId: certificateId, resourceType: resourceType, isCache: isCache, filters: filters, oldCertificateId: oldCertificateId, offset: offset, limit: limit, asyncCache: asyncCache), region: region, logger: logger, on: eventLoop)
    }

    /// 查询证书EdgeOne云资源部署实例列表
    @inlinable
    public func describeHostTeoInstanceListPaginated(_ input: DescribeHostTeoInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [TeoInstanceDetail])> {
        self.client.paginate(input: input, region: region, command: self.describeHostTeoInstanceList, logger: logger, on: eventLoop)
    }

    /// 查询证书EdgeOne云资源部署实例列表
    @inlinable @discardableResult
    public func describeHostTeoInstanceListPaginated(_ input: DescribeHostTeoInstanceListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeHostTeoInstanceListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeHostTeoInstanceList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询证书EdgeOne云资源部署实例列表
    ///
    /// - Returns: `AsyncSequence`s of ``TeoInstanceDetail`` and ``DescribeHostTeoInstanceListResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeHostTeoInstanceListPaginator(_ input: DescribeHostTeoInstanceListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeHostTeoInstanceListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeHostTeoInstanceList, logger: logger, on: eventLoop)
    }
}
