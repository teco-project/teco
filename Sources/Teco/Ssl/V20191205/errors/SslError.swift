//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

/// Service error type returned by `Ssl`.
public protocol TCSslErrorType: TCServiceErrorType {
    /// Get the service error as ``TCSslError``.
    ///
    /// - Returns: ``TCSslError`` that holds the same error code and context.
    func asSslError() -> TCSslError
}

public struct TCSslError: TCSslErrorType {
    enum Code: String {
        case authFailure = "AuthFailure"
        case authFailure_UnauthorizedOperation = "AuthFailure.UnauthorizedOperation"
        case failedOperation = "FailedOperation"
        case failedOperation_AuthError = "FailedOperation.AuthError"
        case failedOperation_CAMAuthorizedFail = "FailedOperation.CAMAuthorizedFail"
        case failedOperation_CancelOrderFailed = "FailedOperation.CancelOrderFailed"
        case failedOperation_CannotBeDeletedIssued = "FailedOperation.CannotBeDeletedIssued"
        case failedOperation_CannotBeDeletedWithinHour = "FailedOperation.CannotBeDeletedWithinHour"
        case failedOperation_CannotGetOrder = "FailedOperation.CannotGetOrder"
        case failedOperation_CertificateDeployDetailRollbackStatusInvalid = "FailedOperation.CertificateDeployDetailRollbackStatusInvalid"
        case failedOperation_CertificateDeployHasPendingRecord = "FailedOperation.CertificateDeployHasPendingRecord"
        case failedOperation_CertificateDeployInstanceEmpty = "FailedOperation.CertificateDeployInstanceEmpty"
        case failedOperation_CertificateDeployNotExist = "FailedOperation.CertificateDeployNotExist"
        case failedOperation_CertificateDeployRetryStatusInvalid = "FailedOperation.CertificateDeployRetryStatusInvalid"
        case failedOperation_CertificateDeployRollbackStatusInvalid = "FailedOperation.CertificateDeployRollbackStatusInvalid"
        case failedOperation_CertificateExists = "FailedOperation.CertificateExists"
        case failedOperation_CertificateHasRenewed = "FailedOperation.CertificateHasRenewed"
        case failedOperation_CertificateHostDeployCanNotAllow = "FailedOperation.CertificateHostDeployCanNotAllow"
        case failedOperation_CertificateHostResourceInnerInterrupt = "FailedOperation.CertificateHostResourceInnerInterrupt"
        case failedOperation_CertificateHostResourceInstanceHugeLimit = "FailedOperation.CertificateHostResourceInstanceHugeLimit"
        case failedOperation_CertificateHostResourceTypeInvalid = "FailedOperation.CertificateHostResourceTypeInvalid"
        case failedOperation_CertificateHostingTypeNumberLimit = "FailedOperation.CertificateHostingTypeNumberLimit"
        case failedOperation_CertificateInvalid = "FailedOperation.CertificateInvalid"
        case failedOperation_CertificateMismatch = "FailedOperation.CertificateMismatch"
        case failedOperation_CertificateNotAvailable = "FailedOperation.CertificateNotAvailable"
        case failedOperation_CertificateNotDeployInstance = "FailedOperation.CertificateNotDeployInstance"
        case failedOperation_CertificateNotFound = "FailedOperation.CertificateNotFound"
        case failedOperation_CertificateNotFoundOrCantCancel = "FailedOperation.CertificateNotFoundOrCantCancel"
        case failedOperation_CertificateStatusNotAllowResubmit = "FailedOperation.CertificateStatusNotAllowResubmit"
        case failedOperation_ConfirmLetterTooLarge = "FailedOperation.ConfirmLetterTooLarge"
        case failedOperation_ConfirmLetterTooSmall = "FailedOperation.ConfirmLetterTooSmall"
        case failedOperation_DeleteResourceFailed = "FailedOperation.DeleteResourceFailed"
        case failedOperation_ExceedsFreeLimit = "FailedOperation.ExceedsFreeLimit"
        case failedOperation_FileTooLarge = "FailedOperation.FileTooLarge"
        case failedOperation_FileTooSmall = "FailedOperation.FileTooSmall"
        case failedOperation_IllegalManagerStatus = "FailedOperation.IllegalManagerStatus"
        case failedOperation_InvalidCertificateSource = "FailedOperation.InvalidCertificateSource"
        case failedOperation_InvalidCertificateStatusCode = "FailedOperation.InvalidCertificateStatusCode"
        case failedOperation_InvalidConfirmLetterFormat = "FailedOperation.InvalidConfirmLetterFormat"
        case failedOperation_InvalidConfirmLetterFormatWosign = "FailedOperation.InvalidConfirmLetterFormatWosign"
        case failedOperation_InvalidFileType = "FailedOperation.InvalidFileType"
        case failedOperation_InvalidParam = "FailedOperation.InvalidParam"
        case failedOperation_MainDomainCertificateCountLimit = "FailedOperation.MainDomainCertificateCountLimit"
        case failedOperation_ManagerCanNotDeleteCa = "FailedOperation.ManagerCanNotDeleteCa"
        case failedOperation_ManagerCanNotDeleteCert = "FailedOperation.ManagerCanNotDeleteCert"
        case failedOperation_NetworkError = "FailedOperation.NetworkError"
        case failedOperation_NoProjectPermission = "FailedOperation.NoProjectPermission"
        case failedOperation_NoRealNameAuth = "FailedOperation.NoRealNameAuth"
        case failedOperation_OrderAlreadyReplaced = "FailedOperation.OrderAlreadyReplaced"
        case failedOperation_OrderReplaceFailed = "FailedOperation.OrderReplaceFailed"
        case failedOperation_PackageCountLimit = "FailedOperation.PackageCountLimit"
        case failedOperation_PackageExpired = "FailedOperation.PackageExpired"
        case failedOperation_RevokeFailed = "FailedOperation.RevokeFailed"
        case failedOperation_RevokeResourceFailed = "FailedOperation.RevokeResourceFailed"
        case failedOperation_RoleNotFoundAuthorization = "FailedOperation.RoleNotFoundAuthorization"
        case failedOperation_SystemError = "FailedOperation.SystemError"
        case failedOperation_TradeError = "FailedOperation.TradeError"
        case internalError = "InternalError"
        case internalError_BackendResponseEmpty = "InternalError.BackendResponseEmpty"
        case internalError_BackendResponseError = "InternalError.BackendResponseError"
        case invalidParameter = "InvalidParameter"
        case invalidParameterValue = "InvalidParameterValue"
        case invalidParameter_CertificateIdNumberLimit = "InvalidParameter.CertificateIdNumberLimit"
        case invalidParameter_CertificateStatusNotAllowResubmit = "InvalidParameter.CertificateStatusNotAllowResubmit"
        case invalidParameter_CertificatesNumberExceeded = "InvalidParameter.CertificatesNumberExceeded"
        case invalidParameter_ContainsInvalidCertificateId = "InvalidParameter.ContainsInvalidCertificateId"
        case invalidParameter_DomainCountInvalid = "InvalidParameter.DomainCountInvalid"
        case invalidParameter_DomainInvalid = "InvalidParameter.DomainInvalid"
        case invalidParameter_PackageIdsInvalid = "InvalidParameter.PackageIdsInvalid"
        case invalidParameter_PeriodInvalid = "InvalidParameter.PeriodInvalid"
        case invalidParameter_ProductPidInvalid = "InvalidParameter.ProductPidInvalid"
        case invalidParameter_RenewAlgorithmInvalid = "InvalidParameter.RenewAlgorithmInvalid"
        case invalidParameter_RenewCsrInvalid = "InvalidParameter.RenewCsrInvalid"
        case invalidParameter_RenewGenCsrMethodInvalid = "InvalidParameter.RenewGenCsrMethodInvalid"
        case invalidParameter_WithDetailReason = "InvalidParameter.WithDetailReason"
        case limitExceeded_RateLimitExceeded = "LimitExceeded.RateLimitExceeded"
        case missingParameter = "MissingParameter"
        case resourceNotFound_Manager = "ResourceNotFound.Manager"
        case unauthorizedOperation = "UnauthorizedOperation"
        case unknownParameter = "UnknownParameter"
    }

    /// Error domains affliated to ``TCSslError``.
    public static var domains: [TCErrorType.Type] {
        [
            AuthFailure.self,
            FailedOperation.self,
            InternalError.self,
            InvalidParameter.self,
            LimitExceeded.self,
            ResourceNotFound.self
        ]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// CAM签名/鉴权错误。
    public static var authFailure: TCSslError {
        TCSslError(.authFailure)
    }

    /// 操作未授权。
    public static var authFailure_UnauthorizedOperation: TCSslError {
        TCSslError(.authFailure_UnauthorizedOperation)
    }

    /// 操作失败。
    public static var failedOperation: TCSslError {
        TCSslError(.failedOperation)
    }

    /// 请检查是否有权限。
    public static var failedOperation_AuthError: TCSslError {
        TCSslError(.failedOperation_AuthError)
    }

    /// CAM鉴权出现错误。
    public static var failedOperation_CAMAuthorizedFail: TCSslError {
        TCSslError(.failedOperation_CAMAuthorizedFail)
    }

    /// 取消订单失败。
    public static var failedOperation_CancelOrderFailed: TCSslError {
        TCSslError(.failedOperation_CancelOrderFailed)
    }

    /// 该证书已颁发， 不能删除。
    public static var failedOperation_CannotBeDeletedIssued: TCSslError {
        TCSslError(.failedOperation_CannotBeDeletedIssued)
    }

    /// 免费证书申请1小时内不允许删除。
    public static var failedOperation_CannotBeDeletedWithinHour: TCSslError {
        TCSslError(.failedOperation_CannotBeDeletedWithinHour)
    }

    /// 获取订单信息失败，请稍后重试。
    public static var failedOperation_CannotGetOrder: TCSslError {
        TCSslError(.failedOperation_CannotGetOrder)
    }

    /// 记录状态必须完结才可以执行该操作。
    ///
    /// 等待任务完结，再执行回滚操作
    public static var failedOperation_CertificateDeployDetailRollbackStatusInvalid: TCSslError {
        TCSslError(.failedOperation_CertificateDeployDetailRollbackStatusInvalid)
    }

    /// 证书部署有正在进行中的任务，请部署完成后再重试。
    ///
    /// 请部署完成后再重试。
    public static var failedOperation_CertificateDeployHasPendingRecord: TCSslError {
        TCSslError(.failedOperation_CertificateDeployHasPendingRecord)
    }

    /// 已选择的云资源无实例，无法更新，请重新核对后重试。
    public static var failedOperation_CertificateDeployInstanceEmpty: TCSslError {
        TCSslError(.failedOperation_CertificateDeployInstanceEmpty)
    }

    /// 证书部署记录不存在。
    ///
    /// 请重新选择
    public static var failedOperation_CertificateDeployNotExist: TCSslError {
        TCSslError(.failedOperation_CertificateDeployNotExist)
    }

    /// 记录状态必须失败才可以执行该操作。
    ///
    /// 任务状态不为失败不可以重试
    public static var failedOperation_CertificateDeployRetryStatusInvalid: TCSslError {
        TCSslError(.failedOperation_CertificateDeployRetryStatusInvalid)
    }

    /// 必须有部署成功的记录才可以回滚。
    ///
    /// 不可以回滚该记录
    public static var failedOperation_CertificateDeployRollbackStatusInvalid: TCSslError {
        TCSslError(.failedOperation_CertificateDeployRollbackStatusInvalid)
    }

    /// 证书已存在。
    public static var failedOperation_CertificateExists: TCSslError {
        TCSslError(.failedOperation_CertificateExists)
    }

    /// 已替换证书，无法进行托管。
    public static var failedOperation_CertificateHasRenewed: TCSslError {
        TCSslError(.failedOperation_CertificateHasRenewed)
    }

    /// 当前证书不允许使用一键更新的功能。
    public static var failedOperation_CertificateHostDeployCanNotAllow: TCSslError {
        TCSslError(.failedOperation_CertificateHostDeployCanNotAllow)
    }

    /// 当前为内部账号，账号涉及实例资源较多，无法使用部署功能，请联系SSL证书特殊处理。
    ///
    /// 请联系SSL证书特殊处理
    public static var failedOperation_CertificateHostResourceInnerInterrupt: TCSslError {
        TCSslError(.failedOperation_CertificateHostResourceInnerInterrupt)
    }

    /// 当前账号下实例数量过多，无法正常加载，请您切换加载方式。切换后点击“刷新列表”等待一段时间后即可全部加载。
    public static var failedOperation_CertificateHostResourceInstanceHugeLimit: TCSslError {
        TCSslError(.failedOperation_CertificateHostResourceInstanceHugeLimit)
    }

    /// 云资源类型无效。
    public static var failedOperation_CertificateHostResourceTypeInvalid: TCSslError {
        TCSslError(.failedOperation_CertificateHostResourceTypeInvalid)
    }

    /// 证书资源托管数量超过限制。
    public static var failedOperation_CertificateHostingTypeNumberLimit: TCSslError {
        TCSslError(.failedOperation_CertificateHostingTypeNumberLimit)
    }

    /// 证书不符合标准。
    public static var failedOperation_CertificateInvalid: TCSslError {
        TCSslError(.failedOperation_CertificateInvalid)
    }

    /// 证书与私钥不对应。
    public static var failedOperation_CertificateMismatch: TCSslError {
        TCSslError(.failedOperation_CertificateMismatch)
    }

    /// 证书不可用，请检查后再试。
    ///
    /// 重新选择部署证书
    public static var failedOperation_CertificateNotAvailable: TCSslError {
        TCSslError(.failedOperation_CertificateNotAvailable)
    }

    /// 证书不可以部署到实例列表下。
    ///
    /// 重新选择部署实例
    public static var failedOperation_CertificateNotDeployInstance: TCSslError {
        TCSslError(.failedOperation_CertificateNotDeployInstance)
    }

    /// 证书不存在。
    public static var failedOperation_CertificateNotFound: TCSslError {
        TCSslError(.failedOperation_CertificateNotFound)
    }

    /// 该证书不存在或不可取消。
    public static var failedOperation_CertificateNotFoundOrCantCancel: TCSslError {
        TCSslError(.failedOperation_CertificateNotFoundOrCantCancel)
    }

    /// 证书状态不允许重新申请。
    public static var failedOperation_CertificateStatusNotAllowResubmit: TCSslError {
        TCSslError(.failedOperation_CertificateStatusNotAllowResubmit)
    }

    /// 证书确认函文件过大（需小于1.4M）。
    public static var failedOperation_ConfirmLetterTooLarge: TCSslError {
        TCSslError(.failedOperation_ConfirmLetterTooLarge)
    }

    /// 证书确认函文件过小（需大于1KB）。
    public static var failedOperation_ConfirmLetterTooSmall: TCSslError {
        TCSslError(.failedOperation_ConfirmLetterTooSmall)
    }

    /// 证书已关联云资源，无法删除。
    public static var failedOperation_DeleteResourceFailed: TCSslError {
        TCSslError(.failedOperation_DeleteResourceFailed)
    }

    /// 免费证书数量超出限制。
    public static var failedOperation_ExceedsFreeLimit: TCSslError {
        TCSslError(.failedOperation_ExceedsFreeLimit)
    }

    /// 文件尺寸太大（需小于1.4MB）。
    public static var failedOperation_FileTooLarge: TCSslError {
        TCSslError(.failedOperation_FileTooLarge)
    }

    /// 文件尺寸太小，请上传清晰图片。
    public static var failedOperation_FileTooSmall: TCSslError {
        TCSslError(.failedOperation_FileTooSmall)
    }

    /// 公司管理人状态错误。
    public static var failedOperation_IllegalManagerStatus: TCSslError {
        TCSslError(.failedOperation_IllegalManagerStatus)
    }

    /// 证书来源错误。
    public static var failedOperation_InvalidCertificateSource: TCSslError {
        TCSslError(.failedOperation_InvalidCertificateSource)
    }

    /// 证书状态不正确。
    public static var failedOperation_InvalidCertificateStatusCode: TCSslError {
        TCSslError(.failedOperation_InvalidCertificateStatusCode)
    }

    /// 证书确认函格式错误（支持格式为jpg、jpeg、png、pdf）。
    public static var failedOperation_InvalidConfirmLetterFormat: TCSslError {
        TCSslError(.failedOperation_InvalidConfirmLetterFormat)
    }

    /// 证书确认函格式错误（支持格式为jpg、pdf、gif）。
    public static var failedOperation_InvalidConfirmLetterFormatWosign: TCSslError {
        TCSslError(.failedOperation_InvalidConfirmLetterFormatWosign)
    }

    /// 文件格式错误，请重新上传。
    public static var failedOperation_InvalidFileType: TCSslError {
        TCSslError(.failedOperation_InvalidFileType)
    }

    /// 参数有误。
    public static var failedOperation_InvalidParam: TCSslError {
        TCSslError(.failedOperation_InvalidParam)
    }

    /// 该主域（%s）下申请的免费证书数量已达到%s个上限，请购买付费证书。
    ///
    /// 主域申请的免费证书数量已达到20个上限，请购买付费证书
    public static var failedOperation_MainDomainCertificateCountLimit: TCSslError {
        TCSslError(.failedOperation_MainDomainCertificateCountLimit)
    }

    /// 管理人信息已提交CA，不可以删除。
    public static var failedOperation_ManagerCanNotDeleteCa: TCSslError {
        TCSslError(.failedOperation_ManagerCanNotDeleteCa)
    }

    /// 管理人信息已关联证书，不可以删除。
    public static var failedOperation_ManagerCanNotDeleteCert: TCSslError {
        TCSslError(.failedOperation_ManagerCanNotDeleteCert)
    }

    /// 当前 CA 机构访问繁忙，请稍后重试。
    public static var failedOperation_NetworkError: TCSslError {
        TCSslError(.failedOperation_NetworkError)
    }

    /// 您没有该项目的操作权限。
    public static var failedOperation_NoProjectPermission: TCSslError {
        TCSslError(.failedOperation_NoProjectPermission)
    }

    /// 尚未通过实名认证。
    public static var failedOperation_NoRealNameAuth: TCSslError {
        TCSslError(.failedOperation_NoRealNameAuth)
    }

    /// 该订单已重签发。
    public static var failedOperation_OrderAlreadyReplaced: TCSslError {
        TCSslError(.failedOperation_OrderAlreadyReplaced)
    }

    /// 重颁发失败。
    public static var failedOperation_OrderReplaceFailed: TCSslError {
        TCSslError(.failedOperation_OrderReplaceFailed)
    }

    /// 剩余权益点不足。
    public static var failedOperation_PackageCountLimit: TCSslError {
        TCSslError(.failedOperation_PackageCountLimit)
    }

    /// 权益包已过期。
    public static var failedOperation_PackageExpired: TCSslError {
        TCSslError(.failedOperation_PackageExpired)
    }

    /// 证书吊销失败。
    public static var failedOperation_RevokeFailed: TCSslError {
        TCSslError(.failedOperation_RevokeFailed)
    }

    /// 证书已关联云资源，无法吊销。
    public static var failedOperation_RevokeResourceFailed: TCSslError {
        TCSslError(.failedOperation_RevokeResourceFailed)
    }

    /// 角色不存在，请前往授权。
    ///
    /// 服务角色授权
    public static var failedOperation_RoleNotFoundAuthorization: TCSslError {
        TCSslError(.failedOperation_RoleNotFoundAuthorization)
    }

    /// 系统错误。
    ///
    /// 系统错误
    public static var failedOperation_SystemError: TCSslError {
        TCSslError(.failedOperation_SystemError)
    }

    /// 计费中心错误。
    public static var failedOperation_TradeError: TCSslError {
        TCSslError(.failedOperation_TradeError)
    }

    /// 内部错误。
    public static var internalError: TCSslError {
        TCSslError(.internalError)
    }

    /// 后端服务响应为空。
    public static var internalError_BackendResponseEmpty: TCSslError {
        TCSslError(.internalError_BackendResponseEmpty)
    }

    /// 后端服务响应错误。
    public static var internalError_BackendResponseError: TCSslError {
        TCSslError(.internalError_BackendResponseError)
    }

    /// 参数错误。
    public static var invalidParameter: TCSslError {
        TCSslError(.invalidParameter)
    }

    /// 参数取值错误。
    public static var invalidParameterValue: TCSslError {
        TCSslError(.invalidParameterValue)
    }

    /// 查询的证书ID不能超过50个。
    public static var invalidParameter_CertificateIdNumberLimit: TCSslError {
        TCSslError(.invalidParameter_CertificateIdNumberLimit)
    }

    /// 当前证书状态不允许重新提交申请。
    public static var invalidParameter_CertificateStatusNotAllowResubmit: TCSslError {
        TCSslError(.invalidParameter_CertificateStatusNotAllowResubmit)
    }

    /// 证书数量超出限制。
    public static var invalidParameter_CertificatesNumberExceeded: TCSslError {
        TCSslError(.invalidParameter_CertificatesNumberExceeded)
    }

    /// 包含无效的证书ID。
    public static var invalidParameter_ContainsInvalidCertificateId: TCSslError {
        TCSslError(.invalidParameter_ContainsInvalidCertificateId)
    }

    /// 域名数量无效。
    public static var invalidParameter_DomainCountInvalid: TCSslError {
        TCSslError(.invalidParameter_DomainCountInvalid)
    }

    /// 域名无效，请重新输入。
    public static var invalidParameter_DomainInvalid: TCSslError {
        TCSslError(.invalidParameter_DomainInvalid)
    }

    /// 权益点ID列表无效。
    public static var invalidParameter_PackageIdsInvalid: TCSslError {
        TCSslError(.invalidParameter_PackageIdsInvalid)
    }

    /// 证书期限无效。
    public static var invalidParameter_PeriodInvalid: TCSslError {
        TCSslError(.invalidParameter_PeriodInvalid)
    }

    /// 产品PID无效。
    public static var invalidParameter_ProductPidInvalid: TCSslError {
        TCSslError(.invalidParameter_ProductPidInvalid)
    }

    /// 算法无效。
    public static var invalidParameter_RenewAlgorithmInvalid: TCSslError {
        TCSslError(.invalidParameter_RenewAlgorithmInvalid)
    }

    /// CSR无效。
    public static var invalidParameter_RenewCsrInvalid: TCSslError {
        TCSslError(.invalidParameter_RenewCsrInvalid)
    }

    /// 生成CSR方式无效。
    public static var invalidParameter_RenewGenCsrMethodInvalid: TCSslError {
        TCSslError(.invalidParameter_RenewGenCsrMethodInvalid)
    }

    /// 参数有误。
    public static var invalidParameter_WithDetailReason: TCSslError {
        TCSslError(.invalidParameter_WithDetailReason)
    }

    /// 单位时间内接口请求频率达到限制。
    public static var limitExceeded_RateLimitExceeded: TCSslError {
        TCSslError(.limitExceeded_RateLimitExceeded)
    }

    /// 缺少参数错误。
    public static var missingParameter: TCSslError {
        TCSslError(.missingParameter)
    }

    /// 公司管理人不存在。
    public static var resourceNotFound_Manager: TCSslError {
        TCSslError(.resourceNotFound_Manager)
    }

    /// 未授权操作。
    public static var unauthorizedOperation: TCSslError {
        TCSslError(.unauthorizedOperation)
    }

    /// 未知参数错误。
    public static var unknownParameter: TCSslError {
        TCSslError(.unknownParameter)
    }

    public func asSslError() -> TCSslError {
        return self
    }
}
