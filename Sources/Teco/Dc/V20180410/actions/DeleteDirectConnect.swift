//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Dc {
    /// DeleteDirectConnect请求参数结构体
    public struct DeleteDirectConnectRequest: TCRequest {
        /// 物理专线的ID。
        public let directConnectId: String

        public init(directConnectId: String) {
            self.directConnectId = directConnectId
        }

        enum CodingKeys: String, CodingKey {
            case directConnectId = "DirectConnectId"
        }
    }

    /// DeleteDirectConnect返回参数结构体
    public struct DeleteDirectConnectResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除物理专线
    ///
    /// 删除物理专线。
    /// 只能删除处于已连接状态的物理专线。
    @inlinable @discardableResult
    public func deleteDirectConnect(_ input: DeleteDirectConnectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDirectConnectResponse> {
        self.client.execute(action: "DeleteDirectConnect", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除物理专线
    ///
    /// 删除物理专线。
    /// 只能删除处于已连接状态的物理专线。
    @inlinable @discardableResult
    public func deleteDirectConnect(_ input: DeleteDirectConnectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDirectConnectResponse {
        try await self.client.execute(action: "DeleteDirectConnect", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除物理专线
    ///
    /// 删除物理专线。
    /// 只能删除处于已连接状态的物理专线。
    @inlinable @discardableResult
    public func deleteDirectConnect(directConnectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteDirectConnectResponse> {
        self.deleteDirectConnect(.init(directConnectId: directConnectId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除物理专线
    ///
    /// 删除物理专线。
    /// 只能删除处于已连接状态的物理专线。
    @inlinable @discardableResult
    public func deleteDirectConnect(directConnectId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDirectConnectResponse {
        try await self.deleteDirectConnect(.init(directConnectId: directConnectId), region: region, logger: logger, on: eventLoop)
    }
}
