//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Dc {
    /// 查询物理专线列表
    ///
    /// 查询物理专线列表。
    @inlinable
    public func describeDirectConnects(_ input: DescribeDirectConnectsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDirectConnectsResponse > {
        self.client.execute(action: "DescribeDirectConnects", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询物理专线列表
    ///
    /// 查询物理专线列表。
    @inlinable
    public func describeDirectConnects(_ input: DescribeDirectConnectsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDirectConnectsResponse {
        try await self.client.execute(action: "DescribeDirectConnects", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeDirectConnects请求参数结构体
    public struct DescribeDirectConnectsRequest: TCRequestModel {
        /// 过滤条件:
        public let filters: [Filter]?
        
        /// 物理专线 ID数组
        public let directConnectIds: [String]?
        
        /// 偏移量，默认为0
        public let offset: Int64?
        
        /// 返回数量，默认为20，最大值为100
        public let limit: Int64?
        
        public init (filters: [Filter]?, directConnectIds: [String]?, offset: Int64?, limit: Int64?) {
            self.filters = filters
            self.directConnectIds = directConnectIds
            self.offset = offset
            self.limit = limit
        }
        
        enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case directConnectIds = "DirectConnectIds"
            case offset = "Offset"
            case limit = "Limit"
        }
    }
    
    /// DescribeDirectConnects返回参数结构体
    public struct DescribeDirectConnectsResponse: TCResponseModel {
        /// 物理专线列表。
        public let directConnectSet: [DirectConnect]
        
        /// 符合物理专线列表数量。
        public let totalCount: Int64
        
        /// 用户名下物理专线是否都签署了用户协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let allSignLaw: Bool?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case directConnectSet = "DirectConnectSet"
            case totalCount = "TotalCount"
            case allSignLaw = "AllSignLaw"
            case requestId = "RequestId"
        }
    }
}