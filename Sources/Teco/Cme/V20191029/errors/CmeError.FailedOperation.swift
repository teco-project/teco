//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCmeError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case createRecordTask = "FailedOperation.CreateRecordTask"
            case invalidVodUser = "FailedOperation.InvalidVodUser"
            case recordNotSupport = "FailedOperation.RecordNotSupport"
            case streamConnect = "FailedOperation.StreamConnect"
            case switcherOnWorking = "FailedOperation.SwitcherOnWorking"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 创建录制任务失败。
        public static var createRecordTask: FailedOperation {
            FailedOperation(.createRecordTask)
        }
        
        /// 云点播用户无效。
        public static var invalidVodUser: FailedOperation {
            FailedOperation(.invalidVodUser)
        }
        
        /// 直播录制功能暂未对使用腾讯云点播存储的平台开放。
        public static var recordNotSupport: FailedOperation {
            FailedOperation(.recordNotSupport)
        }
        
        /// 转推操作失败。
        public static var streamConnect: FailedOperation {
            FailedOperation(.streamConnect)
        }
        
        /// 非法操作，导播中正在工作中。
        public static var switcherOnWorking: FailedOperation {
            FailedOperation(.switcherOnWorking)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCCmeError.FailedOperation: Equatable {
    public static func == (lhs: TCCmeError.FailedOperation, rhs: TCCmeError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCmeError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCmeError.FailedOperation {
    public func toCmeError() -> TCCmeError {
        guard let code = TCCmeError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCmeError(code, context: self.context)
    }
}