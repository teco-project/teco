//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cme {
    /// ModifyMaterial请求参数结构体
    public struct ModifyMaterialRequest: TCRequestModel {
        /// 平台 Id，指定访问的平台。关于平台概念，请参见文档 [平台](https://cloud.tencent.com/document/product/1156/43767)。
        public let platform: String

        /// 要修改的媒体 Id。
        public let materialId: String

        /// 媒体归属者。
        public let owner: Entity?

        /// 媒体名称，不能超过30个字符，不填则不修改。
        public let name: String?

        /// 媒体分类路径，例如填写"/a/b"，则代表该媒体存储的路径为"/a/b"。若修改分类路径，则 Owner 字段必填。
        public let classPath: String?

        /// 操作者。如不填，默认为 `cmeid_system`，表示平台管理员操作，可以修改任意媒体的信息。如果指定操作者，则操作者必须对媒体有写权限。
        public let `operator`: String?

        public init(platform: String, materialId: String, owner: Entity? = nil, name: String? = nil, classPath: String? = nil, operator: String? = nil) {
            self.platform = platform
            self.materialId = materialId
            self.owner = owner
            self.name = name
            self.classPath = classPath
            self.operator = `operator`
        }

        enum CodingKeys: String, CodingKey {
            case platform = "Platform"
            case materialId = "MaterialId"
            case owner = "Owner"
            case name = "Name"
            case classPath = "ClassPath"
            case `operator` = "Operator"
        }
    }

    /// ModifyMaterial返回参数结构体
    public struct ModifyMaterialResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改媒体信息
    ///
    /// 修改媒体信息，支持修改媒体名称、分类路径、标签等信息。
    @inlinable @discardableResult
    public func modifyMaterial(_ input: ModifyMaterialRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMaterialResponse> {
        self.client.execute(action: "ModifyMaterial", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改媒体信息
    ///
    /// 修改媒体信息，支持修改媒体名称、分类路径、标签等信息。
    @inlinable @discardableResult
    public func modifyMaterial(_ input: ModifyMaterialRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMaterialResponse {
        try await self.client.execute(action: "ModifyMaterial", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改媒体信息
    ///
    /// 修改媒体信息，支持修改媒体名称、分类路径、标签等信息。
    @inlinable @discardableResult
    public func modifyMaterial(platform: String, materialId: String, owner: Entity? = nil, name: String? = nil, classPath: String? = nil, operator: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyMaterialResponse> {
        self.modifyMaterial(.init(platform: platform, materialId: materialId, owner: owner, name: name, classPath: classPath, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }

    /// 修改媒体信息
    ///
    /// 修改媒体信息，支持修改媒体名称、分类路径、标签等信息。
    @inlinable @discardableResult
    public func modifyMaterial(platform: String, materialId: String, owner: Entity? = nil, name: String? = nil, classPath: String? = nil, operator: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyMaterialResponse {
        try await self.modifyMaterial(.init(platform: platform, materialId: materialId, owner: owner, name: name, classPath: classPath, operator: `operator`), region: region, logger: logger, on: eventLoop)
    }
}
