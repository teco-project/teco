//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdwch {
    /// 集群内节点的规格磁盘规格描述
    public struct AttachCBSSpec: TCInputModel, TCOutputModel {
        /// 节点磁盘类型，例如“CLOUD_SSD”\"CLOUD_PREMIUM"
        public let diskType: String?

        /// 磁盘容量，单位G
        public let diskSize: Int64?

        /// 磁盘总数
        public let diskCount: Int64?

        /// 描述
        public let diskDesc: String?

        public init(diskType: String? = nil, diskSize: Int64? = nil, diskCount: Int64? = nil, diskDesc: String? = nil) {
            self.diskType = diskType
            self.diskSize = diskSize
            self.diskCount = diskCount
            self.diskDesc = diskDesc
        }

        enum CodingKeys: String, CodingKey {
            case diskType = "DiskType"
            case diskSize = "DiskSize"
            case diskCount = "DiskCount"
            case diskDesc = "DiskDesc"
        }
    }

    /// 备份表信息
    public struct BackupTableContent: TCInputModel {
        /// 数据库
        public let database: String

        /// 表
        public let table: String

        /// 表总字节数
        public let totalBytes: Int64

        /// 虚拟cluster
        public let vCluster: String?

        /// 表ip
        public let ips: String?

        public init(database: String, table: String, totalBytes: Int64, vCluster: String? = nil, ips: String? = nil) {
            self.database = database
            self.table = table
            self.totalBytes = totalBytes
            self.vCluster = vCluster
            self.ips = ips
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case table = "Table"
            case totalBytes = "TotalBytes"
            case vCluster = "VCluster"
            case ips = "Ips"
        }
    }

    /// 集群计费相关信息
    public struct Charge: TCInputModel, TCOutputModel {
        /// 计费类型，“PREPAID” 预付费，“POSTPAID_BY_HOUR” 后付费
        public let chargeType: String

        /// PREPAID需要传递，是否自动续费，1表示自动续费开启
        public let renewFlag: Int64?

        /// 预付费需要传递，计费时间长度，多少个月
        public let timeSpan: Int64?

        public init(chargeType: String, renewFlag: Int64? = nil, timeSpan: Int64? = nil) {
            self.chargeType = chargeType
            self.renewFlag = renewFlag
            self.timeSpan = timeSpan
        }

        enum CodingKeys: String, CodingKey {
            case chargeType = "ChargeType"
            case renewFlag = "RenewFlag"
            case timeSpan = "TimeSpan"
        }
    }

    /// 新增或是修改ck用户
    public struct CkUserAlterInfo: TCInputModel {
        /// 集群实例id
        public let instanceId: String

        /// 用户名
        public let userName: String

        /// 密码
        public let passWord: String

        /// 描述
        public let describe: String?

        public init(instanceId: String, userName: String, passWord: String, describe: String? = nil) {
            self.instanceId = instanceId
            self.userName = userName
            self.passWord = passWord
            self.describe = describe
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case userName = "UserName"
            case passWord = "PassWord"
            case describe = "Describe"
        }
    }

    /// 用于返回XML格式的配置文件和内容以及其他配置文件有关的信息
    public struct ClusterConfigsInfoFromEMR: TCOutputModel {
        /// 配置文件名称
        public let fileName: String

        /// 配置文件对应的相关属性信息
        public let fileConf: String

        /// 配置文件对应的其他属性信息
        public let keyConf: String

        /// 配置文件的内容，base64编码
        public let oriParam: String

        /// 用于表示当前配置文件是不是有过修改后没有重启，提醒用户需要重启
        public let needRestart: Int64

        /// 保存配置文件的路径
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let filePath: String?

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case fileConf = "FileConf"
            case keyConf = "KeyConf"
            case oriParam = "OriParam"
            case needRestart = "NeedRestart"
            case filePath = "FilePath"
        }
    }

    /// clickhouse vcluster信息
    public struct ClusterInfo: TCOutputModel {
        /// vcluster名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clusterName: String?

        /// 当前cluster的IP列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let nodeIps: [String]?

        enum CodingKeys: String, CodingKey {
            case clusterName = "ClusterName"
            case nodeIps = "NodeIps"
        }
    }

    /// 配置文件修改信息
    public struct ConfigSubmitContext: TCInputModel {
        /// 配置文件名称
        public let fileName: String

        /// 配置文件旧内容，base64编码
        public let oldConfValue: String

        /// 配置文件新内容，base64编码
        public let newConfValue: String

        /// 保存配置文件的路径
        public let filePath: String?

        public init(fileName: String, oldConfValue: String, newConfValue: String, filePath: String? = nil) {
            self.fileName = fileName
            self.oldConfValue = oldConfValue
            self.newConfValue = newConfValue
            self.filePath = filePath
        }

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case oldConfValue = "OldConfValue"
            case newConfValue = "NewConfValue"
            case filePath = "FilePath"
        }
    }

    /// 磁盘规格描述
    public struct DiskSpec: TCOutputModel {
        /// 磁盘类型，例如“CLOUD_SSD", "LOCAL_SSD"等
        public let diskType: String

        /// 磁盘类型说明，例如"云SSD", "本地SSD"等
        public let diskDesc: String

        /// 磁盘最小规格大小，单位G
        public let minDiskSize: Int64

        /// 磁盘最大规格大小，单位G
        public let maxDiskSize: Int64

        /// 磁盘数目
        public let diskCount: Int64

        enum CodingKeys: String, CodingKey {
            case diskType = "DiskType"
            case diskDesc = "DiskDesc"
            case minDiskSize = "MinDiskSize"
            case maxDiskSize = "MaxDiskSize"
            case diskCount = "DiskCount"
        }
    }

    /// 集群配置信息
    public struct InstanceConfigInfo: TCInputModel, TCOutputModel {
        /// 配置项名称
        public let confKey: String

        /// 配置项内容
        public let confValue: String

        /// 默认值
        public let defaultValue: String?

        /// 是否需要重启
        public let needRestart: Bool?

        /// 是否可编辑
        public let editable: Bool?

        /// 配置项解释
        public let confDesc: String?

        /// 文件名称
        public let fileName: String?

        /// 规则名称类型
        public let modifyRuleType: String?

        /// 规则名称内容
        public let modifyRuleValue: String?

        /// 修改人的uin
        public let uin: String?

        /// 修改时间
        public let modifyTime: String?

        public init(confKey: String, confValue: String, defaultValue: String? = nil, needRestart: Bool? = nil, editable: Bool? = nil, confDesc: String? = nil, fileName: String? = nil, modifyRuleType: String? = nil, modifyRuleValue: String? = nil, uin: String? = nil, modifyTime: String? = nil) {
            self.confKey = confKey
            self.confValue = confValue
            self.defaultValue = defaultValue
            self.needRestart = needRestart
            self.editable = editable
            self.confDesc = confDesc
            self.fileName = fileName
            self.modifyRuleType = modifyRuleType
            self.modifyRuleValue = modifyRuleValue
            self.uin = uin
            self.modifyTime = modifyTime
        }

        enum CodingKeys: String, CodingKey {
            case confKey = "ConfKey"
            case confValue = "ConfValue"
            case defaultValue = "DefaultValue"
            case needRestart = "NeedRestart"
            case editable = "Editable"
            case confDesc = "ConfDesc"
            case fileName = "FileName"
            case modifyRuleType = "ModifyRuleType"
            case modifyRuleValue = "ModifyRuleValue"
            case uin = "Uin"
            case modifyTime = "ModifyTime"
        }
    }

    /// KV配置
    public struct InstanceConfigItem: TCInputModel {
        /// key
        public let confKey: String

        /// value
        public let confValue: String

        public init(confKey: String, confValue: String) {
            self.confKey = confKey
            self.confValue = confValue
        }

        enum CodingKeys: String, CodingKey {
            case confKey = "ConfKey"
            case confValue = "ConfValue"
        }
    }

    /// 实例描述信息
    public struct InstanceInfo: TCOutputModel {
        /// 集群实例ID, "cdw-xxxx" 字符串类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 集群实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 状态,
        /// Init 创建中; Serving 运行中；
        /// Deleted已销毁；Deleting 销毁中；
        /// Modify 集群变更中；
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        /// 地域, ap-guangzhou
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 可用区， ap-guangzhou-3
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zone: String?

        /// 私有网络名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 付费类型，"hour", "prepay"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let payMode: String?

        /// 创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let createTime: String?

        /// 过期时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 数据节点描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let masterSummary: NodesSummary?

        /// zookeeper节点描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let commonSummary: NodesSummary?

        /// 高可用，“true" "false"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ha: String?

        /// 访问地址，例如 "10.0.0.1:9000"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let accessInfo: String?

        /// 记录ID，数值型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let id: Int64?

        /// regionId, 表示地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionId: Int64?

        /// 可用区说明，例如 "广州二区"
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneDesc: String?

        /// 错误流程说明信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowMsg: String?

        /// 状态描述，例如“运行中”等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusDesc: String?

        /// 自动续费标记
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let renewFlag: Bool?

        /// 标签列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 监控信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let monitor: String?

        /// 是否开通日志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let hasClsTopic: Bool?

        /// 日志主题ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clsTopicId: String?

        /// 日志集ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let clsLogSetId: String?

        /// 是否支持xml配置管理
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enableXMLConfig: Int64?

        /// 区域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionDesc: String?

        /// 弹性网卡地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eip: String?

        /// 冷热分层系数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosMoveFactor: Int64?

        /// external/local/yunti
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let kind: String?

        /// 是否弹性ck
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isElastic: Bool?

        /// 集群详细状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceStateInfo: InstanceStateInfo?

        /// ZK高可用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let haZk: Bool?

        /// 挂载盘,默认0:没有类型；1:裸盘;2:lvm
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mountDiskType: Int64?

        /// 无
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let chProxyVip: String?

        /// cos buket的名字
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosBucketName: String?

        /// 是否可以挂载云盘
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let canAttachCbs: Bool?

        /// 是否可以挂载云盘阵列
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let canAttachCbsLvm: Bool?

        /// 是否可以挂载cos
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let canAttachCos: Bool?

        /// 服务信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let components: [ServiceInfo]?

        /// 可升级的内核版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let upgradeVersions: String?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case status = "Status"
            case version = "Version"
            case region = "Region"
            case zone = "Zone"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case payMode = "PayMode"
            case createTime = "CreateTime"
            case expireTime = "ExpireTime"
            case masterSummary = "MasterSummary"
            case commonSummary = "CommonSummary"
            case ha = "HA"
            case accessInfo = "AccessInfo"
            case id = "Id"
            case regionId = "RegionId"
            case zoneDesc = "ZoneDesc"
            case flowMsg = "FlowMsg"
            case statusDesc = "StatusDesc"
            case renewFlag = "RenewFlag"
            case tags = "Tags"
            case monitor = "Monitor"
            case hasClsTopic = "HasClsTopic"
            case clsTopicId = "ClsTopicId"
            case clsLogSetId = "ClsLogSetId"
            case enableXMLConfig = "EnableXMLConfig"
            case regionDesc = "RegionDesc"
            case eip = "Eip"
            case cosMoveFactor = "CosMoveFactor"
            case kind = "Kind"
            case isElastic = "IsElastic"
            case instanceStateInfo = "InstanceStateInfo"
            case haZk = "HAZk"
            case mountDiskType = "MountDiskType"
            case chProxyVip = "CHProxyVip"
            case cosBucketName = "CosBucketName"
            case canAttachCbs = "CanAttachCbs"
            case canAttachCbsLvm = "CanAttachCbsLvm"
            case canAttachCos = "CanAttachCos"
            case components = "Components"
            case upgradeVersions = "UpgradeVersions"
        }
    }

    /// 集群状态抽象后的结构体
    public struct InstanceStateInfo: TCOutputModel {
        /// 集群状态，例如：Serving
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceState: String?

        /// 集群操作创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowCreateTime: String?

        /// 集群操作名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowName: String?

        /// 集群操作进度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowProgress: Int64?

        /// 集群状态描述，例如：运行中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceStateDesc: String?

        /// 集群流程错误信息，例如：“创建失败，资源不足”
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowMsg: String?

        /// 当前步骤的名称，例如：”购买资源中“
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let processName: String?

        /// 请求id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let requestId: String?

        enum CodingKeys: String, CodingKey {
            case instanceState = "InstanceState"
            case flowCreateTime = "FlowCreateTime"
            case flowName = "FlowName"
            case flowProgress = "FlowProgress"
            case instanceStateDesc = "InstanceStateDesc"
            case flowMsg = "FlowMsg"
            case processName = "ProcessName"
            case requestId = "RequestId"
        }
    }

    /// kv配置，多层级item
    public struct MapConfigItem: TCOutputModel {
        /// key
        public let confKey: String

        /// 列表
        public let items: [InstanceConfigInfo]

        enum CodingKeys: String, CodingKey {
            case confKey = "ConfKey"
            case items = "Items"
        }
    }

    /// 创建集群时的规格
    public struct NodeSpec: TCInputModel {
        /// 规格名称
        public let specName: String

        /// 数量
        public let count: Int64

        /// 云盘大小
        public let diskSize: Int64

        public init(specName: String, count: Int64, diskSize: Int64) {
            self.specName = specName
            self.count = count
            self.diskSize = diskSize
        }

        enum CodingKeys: String, CodingKey {
            case specName = "SpecName"
            case count = "Count"
            case diskSize = "DiskSize"
        }
    }

    /// 节点角色描述信息
    public struct NodesSummary: TCOutputModel {
        /// 机型，如 S1
        public let spec: String

        /// 节点数目
        public let nodeSize: Int64

        /// cpu核数，单位个
        public let core: Int64

        /// 内存大小，单位G
        public let memory: Int64

        /// 磁盘大小，单位G
        public let disk: Int64

        /// 磁盘类型
        public let diskType: String

        /// 磁盘描述
        public let diskDesc: String

        /// 挂载云盘信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let attachCBSSpec: AttachCBSSpec?

        /// 子产品类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subProductType: String?

        /// 规格对应的核数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specCore: Int64?

        /// 规格对应的内存大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let specMemory: Int64?

        /// 磁盘的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let diskCount: Int64?

        /// 磁盘的最大大小
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let maxDiskSize: Int64?

        /// 是否为加密云盘
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let encrypt: Int64?

        enum CodingKeys: String, CodingKey {
            case spec = "Spec"
            case nodeSize = "NodeSize"
            case core = "Core"
            case memory = "Memory"
            case disk = "Disk"
            case diskType = "DiskType"
            case diskDesc = "DiskDesc"
            case attachCBSSpec = "AttachCBSSpec"
            case subProductType = "SubProductType"
            case specCore = "SpecCore"
            case specMemory = "SpecMemory"
            case diskCount = "DiskCount"
            case maxDiskSize = "MaxDiskSize"
            case encrypt = "Encrypt"
        }
    }

    /// 资源规格描述信息
    public struct ResourceSpec: TCOutputModel {
        /// 规格名称，例如“SCH1"
        public let name: String

        /// cpu核数
        public let cpu: Int64

        /// 内存大小，单位G
        public let mem: Int64

        /// 分类标记，STANDARD/BIGDATA/HIGHIO分别表示标准型/大数据型/高IO
        public let type: String

        /// 系统盘描述信息
        public let systemDisk: DiskSpec

        /// 数据盘描述信息
        public let dataDisk: DiskSpec

        /// 最大节点数目限制
        public let maxNodeSize: Int64

        /// 是否可用，false代表售罄
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let available: Bool?

        /// 规格描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let computeSpecDesc: String?

        /// 规格名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let displayName: String?

        /// 库存数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceQuota: Int64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case cpu = "Cpu"
            case mem = "Mem"
            case type = "Type"
            case systemDisk = "SystemDisk"
            case dataDisk = "DataDisk"
            case maxNodeSize = "MaxNodeSize"
            case available = "Available"
            case computeSpecDesc = "ComputeSpecDesc"
            case displayName = "DisplayName"
            case instanceQuota = "InstanceQuota"
        }
    }

    /// 策略详情
    public struct ScheduleStrategy: TCOutputModel {
        /// 备份桶列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cosBucketName: String?

        /// 备份保留天数
        public let retainDays: Int64

        /// 备份的天
        public let weekDays: String

        /// 备份小时
        public let executeHour: Int64

        /// 策略id
        public let scheduleId: Int64

        enum CodingKeys: String, CodingKey {
            case cosBucketName = "CosBucketName"
            case retainDays = "RetainDays"
            case weekDays = "WeekDays"
            case executeHour = "ExecuteHour"
            case scheduleId = "ScheduleId"
        }
    }

    /// 服务详细信息描述。
    public struct ServiceInfo: TCOutputModel {
        /// 服务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 服务的版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let version: String?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case version = "Version"
        }
    }

    /// 标签描述
    public struct Tag: TCInputModel, TCOutputModel {
        /// 标签的键
        public let tagKey: String

        /// 标签的值
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }
}
