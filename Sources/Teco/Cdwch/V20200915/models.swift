//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdwch {
    /// 备份表信息
    public struct BackupTableContent: TCInputModel {
        /// 数据库
        public let database: String

        /// 表
        public let table: String

        /// 表总字节数
        public let totalBytes: Int64

        /// 虚拟cluster
        public let vCluster: String?

        /// 表ip
        public let ips: String?

        public init(database: String, table: String, totalBytes: Int64, vCluster: String? = nil, ips: String? = nil) {
            self.database = database
            self.table = table
            self.totalBytes = totalBytes
            self.vCluster = vCluster
            self.ips = ips
        }

        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case table = "Table"
            case totalBytes = "TotalBytes"
            case vCluster = "VCluster"
            case ips = "Ips"
        }
    }

    /// 新增或是修改ck用户
    public struct CkUserAlterInfo: TCInputModel {
        /// 集群实例id
        public let instanceId: String

        /// 用户名
        public let userName: String

        /// 密码
        public let passWord: String

        /// 描述
        public let describe: String?

        public init(instanceId: String, userName: String, passWord: String, describe: String? = nil) {
            self.instanceId = instanceId
            self.userName = userName
            self.passWord = passWord
            self.describe = describe
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case userName = "UserName"
            case passWord = "PassWord"
            case describe = "Describe"
        }
    }

    /// 配置文件修改信息
    public struct ConfigSubmitContext: TCInputModel {
        /// 配置文件名称
        public let fileName: String

        /// 配置文件旧内容，base64编码
        public let oldConfValue: String

        /// 配置文件新内容，base64编码
        public let newConfValue: String

        /// 保存配置文件的路径
        public let filePath: String?

        public init(fileName: String, oldConfValue: String, newConfValue: String, filePath: String? = nil) {
            self.fileName = fileName
            self.oldConfValue = oldConfValue
            self.newConfValue = newConfValue
            self.filePath = filePath
        }

        enum CodingKeys: String, CodingKey {
            case fileName = "FileName"
            case oldConfValue = "OldConfValue"
            case newConfValue = "NewConfValue"
            case filePath = "FilePath"
        }
    }

    /// 磁盘规格描述
    public struct DiskSpec: TCOutputModel {
        /// 磁盘类型，例如“CLOUD_SSD", "LOCAL_SSD"等
        public let diskType: String

        /// 磁盘类型说明，例如"云SSD", "本地SSD"等
        public let diskDesc: String

        /// 磁盘最小规格大小，单位G
        public let minDiskSize: Int64

        /// 磁盘最大规格大小，单位G
        public let maxDiskSize: Int64

        /// 磁盘数目
        public let diskCount: Int64

        enum CodingKeys: String, CodingKey {
            case diskType = "DiskType"
            case diskDesc = "DiskDesc"
            case minDiskSize = "MinDiskSize"
            case maxDiskSize = "MaxDiskSize"
            case diskCount = "DiskCount"
        }
    }

    /// 资源规格描述信息
    public struct ResourceSpec: TCOutputModel {
        /// 规格名称，例如“SCH1"
        public let name: String

        /// cpu核数
        public let cpu: Int64

        /// 内存大小，单位G
        public let mem: Int64

        /// 分类标记，STANDARD/BIGDATA/HIGHIO分别表示标准型/大数据型/高IO
        public let type: String

        /// 系统盘描述信息
        public let systemDisk: DiskSpec

        /// 数据盘描述信息
        public let dataDisk: DiskSpec

        /// 最大节点数目限制
        public let maxNodeSize: Int64

        /// 是否可用，false代表售罄
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let available: Bool?

        /// 规格描述信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let computeSpecDesc: String?

        /// 规格名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let displayName: String?

        /// 库存数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceQuota: Int64?

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case cpu = "Cpu"
            case mem = "Mem"
            case type = "Type"
            case systemDisk = "SystemDisk"
            case dataDisk = "DataDisk"
            case maxNodeSize = "MaxNodeSize"
            case available = "Available"
            case computeSpecDesc = "ComputeSpecDesc"
            case displayName = "DisplayName"
            case instanceQuota = "InstanceQuota"
        }
    }
}
