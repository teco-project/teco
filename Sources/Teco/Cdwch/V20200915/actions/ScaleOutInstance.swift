//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdwch {
    /// ScaleOutInstance请求参数结构体
    public struct ScaleOutInstanceRequest: TCRequestModel {
        /// 实例唯一ID
        public let instanceId: String

        /// 节点类型，DATA：clickhouse节点，COMMON：为zookeeper节点
        public let type: String

        /// 调整clickhouse节点数量
        public let nodeCount: Int64

        /// v_cluster分组，
        /// 新增扩容节点将加入到已选择的v_cluster分组中，提交同步VIP生效.
        public let scaleOutCluster: String?

        /// 子网剩余ip数量，用于判断当前实例子网剩余ip数是否能扩容。需要根据实际填写
        public let userSubnetIPNum: Int64?

        /// 同步元数据节点IP （uip），扩容的时候必填
        public let scaleOutNodeIp: String?

        /// 缩容节点shard的节点IP （uip），其中ha集群需要主副节点ip都传入以逗号分隔，缩容的时候必填
        public let reduceShardInfo: [String]?

        public init(instanceId: String, type: String, nodeCount: Int64, scaleOutCluster: String? = nil, userSubnetIPNum: Int64? = nil, scaleOutNodeIp: String? = nil, reduceShardInfo: [String]? = nil) {
            self.instanceId = instanceId
            self.type = type
            self.nodeCount = nodeCount
            self.scaleOutCluster = scaleOutCluster
            self.userSubnetIPNum = userSubnetIPNum
            self.scaleOutNodeIp = scaleOutNodeIp
            self.reduceShardInfo = reduceShardInfo
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case type = "Type"
            case nodeCount = "NodeCount"
            case scaleOutCluster = "ScaleOutCluster"
            case userSubnetIPNum = "UserSubnetIPNum"
            case scaleOutNodeIp = "ScaleOutNodeIp"
            case reduceShardInfo = "ReduceShardInfo"
        }
    }

    /// ScaleOutInstance返回参数结构体
    public struct ScaleOutInstanceResponse: TCResponseModel {
        /// 流程ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowId: String?

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case instanceId = "InstanceId"
            case errorMsg = "ErrorMsg"
            case requestId = "RequestId"
        }
    }

    /// 水平调整实例节点
    ///
    /// 调整clickhouse节点数量
    @inlinable
    public func scaleOutInstance(_ input: ScaleOutInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleOutInstanceResponse> {
        self.client.execute(action: "ScaleOutInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 水平调整实例节点
    ///
    /// 调整clickhouse节点数量
    @inlinable
    public func scaleOutInstance(_ input: ScaleOutInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleOutInstanceResponse {
        try await self.client.execute(action: "ScaleOutInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 水平调整实例节点
    ///
    /// 调整clickhouse节点数量
    @inlinable
    public func scaleOutInstance(instanceId: String, type: String, nodeCount: Int64, scaleOutCluster: String? = nil, userSubnetIPNum: Int64? = nil, scaleOutNodeIp: String? = nil, reduceShardInfo: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ScaleOutInstanceResponse> {
        self.scaleOutInstance(.init(instanceId: instanceId, type: type, nodeCount: nodeCount, scaleOutCluster: scaleOutCluster, userSubnetIPNum: userSubnetIPNum, scaleOutNodeIp: scaleOutNodeIp, reduceShardInfo: reduceShardInfo), region: region, logger: logger, on: eventLoop)
    }

    /// 水平调整实例节点
    ///
    /// 调整clickhouse节点数量
    @inlinable
    public func scaleOutInstance(instanceId: String, type: String, nodeCount: Int64, scaleOutCluster: String? = nil, userSubnetIPNum: Int64? = nil, scaleOutNodeIp: String? = nil, reduceShardInfo: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ScaleOutInstanceResponse {
        try await self.scaleOutInstance(.init(instanceId: instanceId, type: type, nodeCount: nodeCount, scaleOutCluster: scaleOutCluster, userSubnetIPNum: userSubnetIPNum, scaleOutNodeIp: scaleOutNodeIp, reduceShardInfo: reduceShardInfo), region: region, logger: logger, on: eventLoop)
    }
}
