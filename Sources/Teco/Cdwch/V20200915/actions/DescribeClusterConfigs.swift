//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdwch {
    /// DescribeClusterConfigs请求参数结构体
    public struct DescribeClusterConfigsRequest: TCRequestModel {
        /// 集群实例ID
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeClusterConfigs返回参数结构体
    public struct DescribeClusterConfigsResponse: TCResponseModel {
        /// 返回实例的配置文件相关的信息
        public let clusterConfList: [ClusterConfigsInfoFromEMR]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case clusterConfList = "ClusterConfList"
            case requestId = "RequestId"
        }
    }

    /// 获取集群配置文件内容
    ///
    /// 获取集群的最新的几个配置文件（config.xml、metrika.xml、user.xml）的内容，显示给用户
    @inlinable
    public func describeClusterConfigs(_ input: DescribeClusterConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterConfigsResponse> {
        self.client.execute(action: "DescribeClusterConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取集群配置文件内容
    ///
    /// 获取集群的最新的几个配置文件（config.xml、metrika.xml、user.xml）的内容，显示给用户
    @inlinable
    public func describeClusterConfigs(_ input: DescribeClusterConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterConfigsResponse {
        try await self.client.execute(action: "DescribeClusterConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取集群配置文件内容
    ///
    /// 获取集群的最新的几个配置文件（config.xml、metrika.xml、user.xml）的内容，显示给用户
    @inlinable
    public func describeClusterConfigs(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeClusterConfigsResponse> {
        self.describeClusterConfigs(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取集群配置文件内容
    ///
    /// 获取集群的最新的几个配置文件（config.xml、metrika.xml、user.xml）的内容，显示给用户
    @inlinable
    public func describeClusterConfigs(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeClusterConfigsResponse {
        try await self.describeClusterConfigs(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
