//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cdwch {
    /// DescribeInstanceKeyValConfigs请求参数结构体
    public struct DescribeInstanceKeyValConfigsRequest: TCRequestModel {
        /// 集群实例ID
        public let instanceId: String

        /// 搜索的配置项名称
        public let searchConfigName: String?

        public init(instanceId: String, searchConfigName: String? = nil) {
            self.instanceId = instanceId
            self.searchConfigName = searchConfigName
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case searchConfigName = "SearchConfigName"
        }
    }

    /// DescribeInstanceKeyValConfigs返回参数结构体
    public struct DescribeInstanceKeyValConfigsResponse: TCResponseModel {
        /// 参数列表
        public let configItems: [InstanceConfigInfo]

        /// 未配置的参数列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let unConfigItems: [InstanceConfigInfo]?

        /// 配置的多层级参数列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mapConfigItems: [MapConfigItem]?

        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case configItems = "ConfigItems"
            case unConfigItems = "UnConfigItems"
            case mapConfigItems = "MapConfigItems"
            case errorMsg = "ErrorMsg"
            case requestId = "RequestId"
        }
    }

    /// 获取参数列表
    ///
    /// 在集群详情页面获取所有参数列表
    @inlinable
    public func describeInstanceKeyValConfigs(_ input: DescribeInstanceKeyValConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceKeyValConfigsResponse> {
        self.client.execute(action: "DescribeInstanceKeyValConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取参数列表
    ///
    /// 在集群详情页面获取所有参数列表
    @inlinable
    public func describeInstanceKeyValConfigs(_ input: DescribeInstanceKeyValConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceKeyValConfigsResponse {
        try await self.client.execute(action: "DescribeInstanceKeyValConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取参数列表
    ///
    /// 在集群详情页面获取所有参数列表
    @inlinable
    public func describeInstanceKeyValConfigs(instanceId: String, searchConfigName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInstanceKeyValConfigsResponse> {
        self.describeInstanceKeyValConfigs(.init(instanceId: instanceId, searchConfigName: searchConfigName), region: region, logger: logger, on: eventLoop)
    }

    /// 获取参数列表
    ///
    /// 在集群详情页面获取所有参数列表
    @inlinable
    public func describeInstanceKeyValConfigs(instanceId: String, searchConfigName: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInstanceKeyValConfigsResponse {
        try await self.describeInstanceKeyValConfigs(.init(instanceId: instanceId, searchConfigName: searchConfigName), region: region, logger: logger, on: eventLoop)
    }
}
