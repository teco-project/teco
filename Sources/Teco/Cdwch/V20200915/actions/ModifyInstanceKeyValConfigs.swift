//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdwch {
    /// ModifyInstanceKeyValConfigs请求参数结构体
    public struct ModifyInstanceKeyValConfigsRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        /// 新增配置列表
        public let addItems: [InstanceConfigItem]?

        /// 更新配置列表
        public let updateItems: [InstanceConfigItem]?

        /// 删除配置列表
        public let deleteItems: InstanceConfigItem?

        /// 删除配置列表
        public let delItems: [InstanceConfigItem]?

        /// 备注
        public let remark: String?

        public init(instanceId: String, addItems: [InstanceConfigItem]? = nil, updateItems: [InstanceConfigItem]? = nil, deleteItems: InstanceConfigItem? = nil, delItems: [InstanceConfigItem]? = nil, remark: String? = nil) {
            self.instanceId = instanceId
            self.addItems = addItems
            self.updateItems = updateItems
            self.deleteItems = deleteItems
            self.delItems = delItems
            self.remark = remark
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case addItems = "AddItems"
            case updateItems = "UpdateItems"
            case deleteItems = "DeleteItems"
            case delItems = "DelItems"
            case remark = "Remark"
        }
    }

    /// ModifyInstanceKeyValConfigs返回参数结构体
    public struct ModifyInstanceKeyValConfigsResponse: TCResponseModel {
        /// 错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMsg: String?

        /// ID
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errorMsg = "ErrorMsg"
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// KV模式修改配置接口
    @inlinable
    public func modifyInstanceKeyValConfigs(_ input: ModifyInstanceKeyValConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceKeyValConfigsResponse> {
        self.client.execute(action: "ModifyInstanceKeyValConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// KV模式修改配置接口
    @inlinable
    public func modifyInstanceKeyValConfigs(_ input: ModifyInstanceKeyValConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceKeyValConfigsResponse {
        try await self.client.execute(action: "ModifyInstanceKeyValConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// KV模式修改配置接口
    @inlinable
    public func modifyInstanceKeyValConfigs(instanceId: String, addItems: [InstanceConfigItem]? = nil, updateItems: [InstanceConfigItem]? = nil, deleteItems: InstanceConfigItem? = nil, delItems: [InstanceConfigItem]? = nil, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyInstanceKeyValConfigsResponse> {
        self.modifyInstanceKeyValConfigs(.init(instanceId: instanceId, addItems: addItems, updateItems: updateItems, deleteItems: deleteItems, delItems: delItems, remark: remark), region: region, logger: logger, on: eventLoop)
    }

    /// KV模式修改配置接口
    @inlinable
    public func modifyInstanceKeyValConfigs(instanceId: String, addItems: [InstanceConfigItem]? = nil, updateItems: [InstanceConfigItem]? = nil, deleteItems: InstanceConfigItem? = nil, delItems: [InstanceConfigItem]? = nil, remark: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyInstanceKeyValConfigsResponse {
        try await self.modifyInstanceKeyValConfigs(.init(instanceId: instanceId, addItems: addItems, updateItems: updateItems, deleteItems: deleteItems, delItems: delItems, remark: remark), region: region, logger: logger, on: eventLoop)
    }
}
