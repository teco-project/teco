//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cdwch {
    /// OpenBackUp请求参数结构体
    public struct OpenBackUpRequest: TCRequestModel {
        /// 集群id
        public let instanceId: String

        /// OPEN 或者CLOSE
        public let operationType: String

        /// 桶名字
        public let cosBucketName: String

        public init(instanceId: String, operationType: String, cosBucketName: String) {
            self.instanceId = instanceId
            self.operationType = operationType
            self.cosBucketName = cosBucketName
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case operationType = "OperationType"
            case cosBucketName = "CosBucketName"
        }
    }

    /// OpenBackUp返回参数结构体
    public struct OpenBackUpResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 开启或者关闭策略
    @inlinable @discardableResult
    public func openBackUp(_ input: OpenBackUpRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<OpenBackUpResponse> {
        self.client.execute(action: "OpenBackUp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开启或者关闭策略
    @inlinable @discardableResult
    public func openBackUp(_ input: OpenBackUpRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OpenBackUpResponse {
        try await self.client.execute(action: "OpenBackUp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开启或者关闭策略
    @inlinable @discardableResult
    public func openBackUp(instanceId: String, operationType: String, cosBucketName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<OpenBackUpResponse> {
        let input = OpenBackUpRequest(instanceId: instanceId, operationType: operationType, cosBucketName: cosBucketName)
        return self.client.execute(action: "OpenBackUp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开启或者关闭策略
    @inlinable @discardableResult
    public func openBackUp(instanceId: String, operationType: String, cosBucketName: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> OpenBackUpResponse {
        let input = OpenBackUpRequest(instanceId: instanceId, operationType: operationType, cosBucketName: cosBucketName)
        return try await self.client.execute(action: "OpenBackUp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
