//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdwch {
    /// DescribeBackUpJob请求参数结构体
    public struct DescribeBackUpJobRequest: TCPaginatedRequest {
        /// 集群id
        public let instanceId: String

        /// 分页大小
        public let pageSize: Int64?

        /// 页号
        public let pageNum: Int64?

        /// 开始时间
        public let beginTime: String?

        /// 结束时间
        public let endTime: String?

        public init(instanceId: String, pageSize: Int64? = nil, pageNum: Int64? = nil, beginTime: String? = nil, endTime: String? = nil) {
            self.instanceId = instanceId
            self.pageSize = pageSize
            self.pageNum = pageNum
            self.beginTime = beginTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case pageSize = "PageSize"
            case pageNum = "PageNum"
            case beginTime = "BeginTime"
            case endTime = "EndTime"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeBackUpJobResponse) -> DescribeBackUpJobRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(instanceId: self.instanceId, pageSize: self.pageSize, pageNum: (self.pageNum ?? 0) + 1, beginTime: self.beginTime, endTime: self.endTime)
        }
    }

    /// DescribeBackUpJob返回参数结构体
    public struct DescribeBackUpJobResponse: TCPaginatedResponse {
        /// 任务列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let backUpJobs: [BackUpJobDisplay]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case backUpJobs = "BackUpJobs"
            case requestId = "RequestId"
        }

        /// Extract the returned ``BackUpJobDisplay`` list from the paginated response.
        public func getItems() -> [BackUpJobDisplay] {
            self.backUpJobs ?? []
        }
    }

    /// 查询备份任务列表
    @inlinable
    public func describeBackUpJob(_ input: DescribeBackUpJobRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackUpJobResponse> {
        self.client.execute(action: "DescribeBackUpJob", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询备份任务列表
    @inlinable
    public func describeBackUpJob(_ input: DescribeBackUpJobRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackUpJobResponse {
        try await self.client.execute(action: "DescribeBackUpJob", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询备份任务列表
    @inlinable
    public func describeBackUpJob(instanceId: String, pageSize: Int64? = nil, pageNum: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBackUpJobResponse> {
        self.describeBackUpJob(.init(instanceId: instanceId, pageSize: pageSize, pageNum: pageNum, beginTime: beginTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份任务列表
    @inlinable
    public func describeBackUpJob(instanceId: String, pageSize: Int64? = nil, pageNum: Int64? = nil, beginTime: String? = nil, endTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBackUpJobResponse {
        try await self.describeBackUpJob(.init(instanceId: instanceId, pageSize: pageSize, pageNum: pageNum, beginTime: beginTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 查询备份任务列表
    @inlinable
    public func describeBackUpJobPaginated(_ input: DescribeBackUpJobRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Never?, [BackUpJobDisplay])> {
        self.client.paginate(input: input, region: region, command: self.describeBackUpJob, logger: logger, on: eventLoop)
    }

    /// 查询备份任务列表
    @inlinable @discardableResult
    public func describeBackUpJobPaginated(_ input: DescribeBackUpJobRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeBackUpJobResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeBackUpJob, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询备份任务列表
    ///
    /// - Returns: `AsyncSequence`s of ``BackUpJobDisplay`` and ``DescribeBackUpJobResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeBackUpJobPaginator(_ input: DescribeBackUpJobRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeBackUpJobRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeBackUpJob, logger: logger, on: eventLoop)
    }
}
