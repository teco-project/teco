//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cdwch {
    /// ModifyUserNewPrivilege请求参数结构体
    public struct ModifyUserNewPrivilegeRequest: TCRequest {
        /// 实例id
        public let instanceId: String

        /// cluster名称
        public let cluster: String

        /// 用户名
        public let userName: String

        /// 是否所有数据库表
        public let allDatabase: Bool

        /// 全局权限
        public let globalPrivileges: [String]?

        /// 数据库表权限
        public let databasePrivilegeList: [DatabasePrivilegeInfo]?

        public init(instanceId: String, cluster: String, userName: String, allDatabase: Bool, globalPrivileges: [String]? = nil, databasePrivilegeList: [DatabasePrivilegeInfo]? = nil) {
            self.instanceId = instanceId
            self.cluster = cluster
            self.userName = userName
            self.allDatabase = allDatabase
            self.globalPrivileges = globalPrivileges
            self.databasePrivilegeList = databasePrivilegeList
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case cluster = "Cluster"
            case userName = "UserName"
            case allDatabase = "AllDatabase"
            case globalPrivileges = "GlobalPrivileges"
            case databasePrivilegeList = "DatabasePrivilegeList"
        }
    }

    /// ModifyUserNewPrivilege返回参数结构体
    public struct ModifyUserNewPrivilegeResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 新增、修改集群账号cluster权限（新版）
    ///
    /// 针对集群账号的权限做管控（新版）
    @inlinable @discardableResult
    public func modifyUserNewPrivilege(_ input: ModifyUserNewPrivilegeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyUserNewPrivilegeResponse> {
        self.client.execute(action: "ModifyUserNewPrivilege", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增、修改集群账号cluster权限（新版）
    ///
    /// 针对集群账号的权限做管控（新版）
    @inlinable @discardableResult
    public func modifyUserNewPrivilege(_ input: ModifyUserNewPrivilegeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyUserNewPrivilegeResponse {
        try await self.client.execute(action: "ModifyUserNewPrivilege", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增、修改集群账号cluster权限（新版）
    ///
    /// 针对集群账号的权限做管控（新版）
    @inlinable @discardableResult
    public func modifyUserNewPrivilege(instanceId: String, cluster: String, userName: String, allDatabase: Bool, globalPrivileges: [String]? = nil, databasePrivilegeList: [DatabasePrivilegeInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyUserNewPrivilegeResponse> {
        self.modifyUserNewPrivilege(.init(instanceId: instanceId, cluster: cluster, userName: userName, allDatabase: allDatabase, globalPrivileges: globalPrivileges, databasePrivilegeList: databasePrivilegeList), region: region, logger: logger, on: eventLoop)
    }

    /// 新增、修改集群账号cluster权限（新版）
    ///
    /// 针对集群账号的权限做管控（新版）
    @inlinable @discardableResult
    public func modifyUserNewPrivilege(instanceId: String, cluster: String, userName: String, allDatabase: Bool, globalPrivileges: [String]? = nil, databasePrivilegeList: [DatabasePrivilegeInfo]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyUserNewPrivilegeResponse {
        try await self.modifyUserNewPrivilege(.init(instanceId: instanceId, cluster: cluster, userName: userName, allDatabase: allDatabase, globalPrivileges: globalPrivileges, databasePrivilegeList: databasePrivilegeList), region: region, logger: logger, on: eventLoop)
    }
}
