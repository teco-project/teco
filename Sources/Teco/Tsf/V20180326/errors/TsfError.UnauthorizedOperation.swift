//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTsfError {
    public struct UnauthorizedOperation: TCErrorType {
        enum Code: String {
            case camGeneralError = "UnauthorizedOperation.CamGeneralError"
            case camTsfRoleNoPermission = "UnauthorizedOperation.CamTsfRoleNoPermission"
            case camTsfRoleNotExist = "UnauthorizedOperation.CamTsfRoleNotExist"
            case licenseInactive = "UnauthorizedOperation.LicenseInactive"
            case licenseUnauthorized = "UnauthorizedOperation.LicenseUnauthorized"
            case noLicense = "UnauthorizedOperation.NoLicense"
            case noPrivilege = "UnauthorizedOperation.NoPrivilege"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 访问 CAM 系统出错，%s。
        public static var camGeneralError: UnauthorizedOperation {
            UnauthorizedOperation(.camGeneralError)
        }
        
        /// 协作者身份未授权，需要主账号授予协作者权限，参考 TSF 官网文档「快速入门/准备工作」。
        public static var camTsfRoleNoPermission: UnauthorizedOperation {
            UnauthorizedOperation(.camTsfRoleNoPermission)
        }
        
        /// 当前主账号未创建TSF_QCSRole或未对子账号授予预设策略QcloudCamSubaccountsAuthorizeRoleFullAccess。请参考产品文档主账号协作者使用说明。。
        public static var camTsfRoleNotExist: UnauthorizedOperation {
            UnauthorizedOperation(.camTsfRoleNotExist)
        }
        
        /// License未激活。。
        public static var licenseInactive: UnauthorizedOperation {
            UnauthorizedOperation(.licenseInactive)
        }
        
        /// 您所购买的服务不支持该操作。
        public static var licenseUnauthorized: UnauthorizedOperation {
            UnauthorizedOperation(.licenseUnauthorized)
        }
        
        /// 缺少License。。
        public static var noLicense: UnauthorizedOperation {
            UnauthorizedOperation(.noLicense)
        }
        
        /// 用户无权限访问该接口。。
        public static var noPrivilege: UnauthorizedOperation {
            UnauthorizedOperation(.noPrivilege)
        }
    }
}

extension TCTsfError.UnauthorizedOperation: Equatable {
    public static func == (lhs: TCTsfError.UnauthorizedOperation, rhs: TCTsfError.UnauthorizedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTsfError.UnauthorizedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTsfError.UnauthorizedOperation {
    public func toTsfError() -> TCTsfError {
        guard let code = TCTsfError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTsfError(code, context: self.context)
    }
}