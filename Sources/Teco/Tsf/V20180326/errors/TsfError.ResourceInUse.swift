//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCTsfError {
    public struct ResourceInUse: TCTsfErrorType {
        enum Code: String {
            case applicationCannotDelete = "ResourceInUse.ApplicationCannotDelete"
            case cvmcaeMasterCannotDelete = "ResourceInUse.CvmcaeMasterCannotDelete"
            case defaultNamepsaceCannotBeDeleted = "ResourceInUse.DefaultNamepsaceCannotBeDeleted"
            case groupCannotDelete = "ResourceInUse.GroupCannotDelete"
            case groupExists = "ResourceInUse.GroupExists"
            case groupInOperation = "ResourceInUse.GroupInOperation"
            case instanceExists = "ResourceInUse.InstanceExists"
            case instanceHasBeenUsed = "ResourceInUse.InstanceHasBeenUsed"
            case namespaceCannotDelete = "ResourceInUse.NamespaceCannotDelete"
            case nonDefaultNamespaceExists = "ResourceInUse.NonDefaultNamespaceExists"
            case objectExist = "ResourceInUse.ObjectExist"
            case ratelimitRuleExistError = "ResourceInUse.RatelimitRuleExistError"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 此应用下存在资源，无法执行删除操作。
        public static var applicationCannotDelete: ResourceInUse {
            ResourceInUse(.applicationCannotDelete)
        }

        /// 资源仍在使用中 无法删除。
        public static var cvmcaeMasterCannotDelete: ResourceInUse {
            ResourceInUse(.cvmcaeMasterCannotDelete)
        }

        /// 默认命名空间不能被删除。
        public static var defaultNamepsaceCannotBeDeleted: ResourceInUse {
            ResourceInUse(.defaultNamepsaceCannotBeDeleted)
        }

        /// 此分组下存在资源，无法执行删除操作。
        public static var groupCannotDelete: ResourceInUse {
            ResourceInUse(.groupCannotDelete)
        }

        /// 集群下存在分组。
        public static var groupExists: ResourceInUse {
            ResourceInUse(.groupExists)
        }

        /// 部署组在更新中 请稍后再执行该操作。
        public static var groupInOperation: ResourceInUse {
            ResourceInUse(.groupInOperation)
        }

        /// 实例已经存在。
        public static var instanceExists: ResourceInUse {
            ResourceInUse(.instanceExists)
        }

        /// 机器实例已经被使用。
        public static var instanceHasBeenUsed: ResourceInUse {
            ResourceInUse(.instanceHasBeenUsed)
        }

        /// 此命名空间下存在资源，无法执行删除操作。
        public static var namespaceCannotDelete: ResourceInUse {
            ResourceInUse(.namespaceCannotDelete)
        }

        /// 集群下存在非默认命名空间。
        public static var nonDefaultNamespaceExists: ResourceInUse {
            ResourceInUse(.nonDefaultNamespaceExists)
        }

        /// 资源对象已存在。
        public static var objectExist: ResourceInUse {
            ResourceInUse(.objectExist)
        }

        /// 限流规则已存在，请检查规则名和规则配置。
        public static var ratelimitRuleExistError: ResourceInUse {
            ResourceInUse(.ratelimitRuleExistError)
        }

        public func asTsfError() -> TCTsfError {
            let code: TCTsfError.Code
            switch self.error {
            case .applicationCannotDelete:
                code = .resourceInUse_ApplicationCannotDelete
            case .cvmcaeMasterCannotDelete:
                code = .resourceInUse_CvmcaeMasterCannotDelete
            case .defaultNamepsaceCannotBeDeleted:
                code = .resourceInUse_DefaultNamepsaceCannotBeDeleted
            case .groupCannotDelete:
                code = .resourceInUse_GroupCannotDelete
            case .groupExists:
                code = .resourceInUse_GroupExists
            case .groupInOperation:
                code = .resourceInUse_GroupInOperation
            case .instanceExists:
                code = .resourceInUse_InstanceExists
            case .instanceHasBeenUsed:
                code = .resourceInUse_InstanceHasBeenUsed
            case .namespaceCannotDelete:
                code = .resourceInUse_NamespaceCannotDelete
            case .nonDefaultNamespaceExists:
                code = .resourceInUse_NonDefaultNamespaceExists
            case .objectExist:
                code = .resourceInUse_ObjectExist
            case .ratelimitRuleExistError:
                code = .resourceInUse_RatelimitRuleExistError
            }
            return TCTsfError(code, context: self.context)
        }
    }
}
