//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tsf {
    /// CreateApiRateLimitRuleWithDetailResp请求参数结构体
    public struct CreateApiRateLimitRuleWithDetailRespRequest: TCRequest {
        /// Api Id
        public let apiId: String

        /// qps值
        public let maxQps: UInt64

        /// 开启/禁用，enabled/disabled, 不传默认开启
        public let usableStatus: String?

        public init(apiId: String, maxQps: UInt64, usableStatus: String? = nil) {
            self.apiId = apiId
            self.maxQps = maxQps
            self.usableStatus = usableStatus
        }

        enum CodingKeys: String, CodingKey {
            case apiId = "ApiId"
            case maxQps = "MaxQps"
            case usableStatus = "UsableStatus"
        }
    }

    /// CreateApiRateLimitRuleWithDetailResp返回参数结构体
    public struct CreateApiRateLimitRuleWithDetailRespResponse: TCResponse {
        /// 创建的规则 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: ApiRateLimitRule?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 创建API限流规则返回详细信息
    ///
    /// 创建API限流规则,并返回规则信息
    @inlinable
    public func createApiRateLimitRuleWithDetailResp(_ input: CreateApiRateLimitRuleWithDetailRespRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApiRateLimitRuleWithDetailRespResponse> {
        self.client.execute(action: "CreateApiRateLimitRuleWithDetailResp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建API限流规则返回详细信息
    ///
    /// 创建API限流规则,并返回规则信息
    @inlinable
    public func createApiRateLimitRuleWithDetailResp(_ input: CreateApiRateLimitRuleWithDetailRespRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApiRateLimitRuleWithDetailRespResponse {
        try await self.client.execute(action: "CreateApiRateLimitRuleWithDetailResp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建API限流规则返回详细信息
    ///
    /// 创建API限流规则,并返回规则信息
    @inlinable
    public func createApiRateLimitRuleWithDetailResp(apiId: String, maxQps: UInt64, usableStatus: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateApiRateLimitRuleWithDetailRespResponse> {
        self.createApiRateLimitRuleWithDetailResp(.init(apiId: apiId, maxQps: maxQps, usableStatus: usableStatus), region: region, logger: logger, on: eventLoop)
    }

    /// 创建API限流规则返回详细信息
    ///
    /// 创建API限流规则,并返回规则信息
    @inlinable
    public func createApiRateLimitRuleWithDetailResp(apiId: String, maxQps: UInt64, usableStatus: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateApiRateLimitRuleWithDetailRespResponse {
        try await self.createApiRateLimitRuleWithDetailResp(.init(apiId: apiId, maxQps: maxQps, usableStatus: usableStatus), region: region, logger: logger, on: eventLoop)
    }
}
