//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// DescribeInvocationMetricDataDimension请求参数结构体
    public struct DescribeInvocationMetricDataDimensionRequest: TCRequestModel {
        /// 开始时间
        public let startTime: String

        /// 结束时间
        public let endTime: String

        /// 开始index
        public let offset: Int64

        /// 分页大小
        public let limit: Int64

        /// 聚合维度
        public let dimensionName: String

        /// 搜索关键字
        public let searchWord: String?

        /// 维度
        public let metricDimensionValues: [MetricDimensionValue]?

        public init(startTime: String, endTime: String, offset: Int64, limit: Int64, dimensionName: String, searchWord: String? = nil, metricDimensionValues: [MetricDimensionValue]? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.offset = offset
            self.limit = limit
            self.dimensionName = dimensionName
            self.searchWord = searchWord
            self.metricDimensionValues = metricDimensionValues
        }

        enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
            case dimensionName = "DimensionName"
            case searchWord = "SearchWord"
            case metricDimensionValues = "MetricDimensionValues"
        }
    }

    /// DescribeInvocationMetricDataDimension返回参数结构体
    public struct DescribeInvocationMetricDataDimensionResponse: TCResponseModel {
        /// 维度
        public let result: TsfPageDimension

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 查询维度
    @inlinable
    public func describeInvocationMetricDataDimension(_ input: DescribeInvocationMetricDataDimensionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInvocationMetricDataDimensionResponse> {
        self.client.execute(action: "DescribeInvocationMetricDataDimension", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询维度
    @inlinable
    public func describeInvocationMetricDataDimension(_ input: DescribeInvocationMetricDataDimensionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInvocationMetricDataDimensionResponse {
        try await self.client.execute(action: "DescribeInvocationMetricDataDimension", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询维度
    @inlinable
    public func describeInvocationMetricDataDimension(startTime: String, endTime: String, offset: Int64, limit: Int64, dimensionName: String, searchWord: String? = nil, metricDimensionValues: [MetricDimensionValue]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeInvocationMetricDataDimensionResponse> {
        self.describeInvocationMetricDataDimension(DescribeInvocationMetricDataDimensionRequest(startTime: startTime, endTime: endTime, offset: offset, limit: limit, dimensionName: dimensionName, searchWord: searchWord, metricDimensionValues: metricDimensionValues), region: region, logger: logger, on: eventLoop)
    }

    /// 查询维度
    @inlinable
    public func describeInvocationMetricDataDimension(startTime: String, endTime: String, offset: Int64, limit: Int64, dimensionName: String, searchWord: String? = nil, metricDimensionValues: [MetricDimensionValue]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeInvocationMetricDataDimensionResponse {
        try await self.describeInvocationMetricDataDimension(DescribeInvocationMetricDataDimensionRequest(startTime: startTime, endTime: endTime, offset: offset, limit: limit, dimensionName: dimensionName, searchWord: searchWord, metricDimensionValues: metricDimensionValues), region: region, logger: logger, on: eventLoop)
    }
}
