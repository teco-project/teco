//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tsf {
    /// UpdateApiRateLimitRules请求参数结构体
    public struct UpdateApiRateLimitRulesRequest: TCRequestModel {
        /// API ID 列表
        public let apiIds: [String]

        /// 开启/禁用，enabled/disabled
        public let usableStatus: String

        /// QPS值。开启限流规则时，必填
        public let maxQps: Int64?

        public init(apiIds: [String], usableStatus: String, maxQps: Int64? = nil) {
            self.apiIds = apiIds
            self.usableStatus = usableStatus
            self.maxQps = maxQps
        }

        enum CodingKeys: String, CodingKey {
            case apiIds = "ApiIds"
            case usableStatus = "UsableStatus"
            case maxQps = "MaxQps"
        }
    }

    /// UpdateApiRateLimitRules返回参数结构体
    public struct UpdateApiRateLimitRulesResponse: TCResponseModel {
        /// 是否成功
        public let result: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 批量更新API限流规则
    @inlinable
    public func updateApiRateLimitRules(_ input: UpdateApiRateLimitRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateApiRateLimitRulesResponse> {
        self.client.execute(action: "UpdateApiRateLimitRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量更新API限流规则
    @inlinable
    public func updateApiRateLimitRules(_ input: UpdateApiRateLimitRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateApiRateLimitRulesResponse {
        try await self.client.execute(action: "UpdateApiRateLimitRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量更新API限流规则
    @inlinable
    public func updateApiRateLimitRules(apiIds: [String], usableStatus: String, maxQps: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateApiRateLimitRulesResponse> {
        self.updateApiRateLimitRules(.init(apiIds: apiIds, usableStatus: usableStatus, maxQps: maxQps), region: region, logger: logger, on: eventLoop)
    }

    /// 批量更新API限流规则
    @inlinable
    public func updateApiRateLimitRules(apiIds: [String], usableStatus: String, maxQps: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateApiRateLimitRulesResponse {
        try await self.updateApiRateLimitRules(.init(apiIds: apiIds, usableStatus: usableStatus, maxQps: maxQps), region: region, logger: logger, on: eventLoop)
    }
}
