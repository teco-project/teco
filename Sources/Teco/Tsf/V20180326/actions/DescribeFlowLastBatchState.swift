//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tsf {
    /// DescribeFlowLastBatchState请求参数结构体
    public struct DescribeFlowLastBatchStateRequest: TCRequestModel {
        /// 工作流 ID
        public let flowId: String

        public init(flowId: String) {
            self.flowId = flowId
        }

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
        }
    }

    /// DescribeFlowLastBatchState返回参数结构体
    public struct DescribeFlowLastBatchStateResponse: TCResponseModel {
        /// 工作流批次最新状态
        public let result: TaskFlowLastBatchState

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 查询工作流最近一个批次的执行状态
    ///
    /// 查询工作流最新一个批次的状态信息
    @inlinable
    public func describeFlowLastBatchState(_ input: DescribeFlowLastBatchStateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowLastBatchStateResponse> {
        self.client.execute(action: "DescribeFlowLastBatchState", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询工作流最近一个批次的执行状态
    ///
    /// 查询工作流最新一个批次的状态信息
    @inlinable
    public func describeFlowLastBatchState(_ input: DescribeFlowLastBatchStateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowLastBatchStateResponse {
        try await self.client.execute(action: "DescribeFlowLastBatchState", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询工作流最近一个批次的执行状态
    ///
    /// 查询工作流最新一个批次的状态信息
    @inlinable
    public func describeFlowLastBatchState(flowId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFlowLastBatchStateResponse> {
        self.describeFlowLastBatchState(.init(flowId: flowId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询工作流最近一个批次的执行状态
    ///
    /// 查询工作流最新一个批次的状态信息
    @inlinable
    public func describeFlowLastBatchState(flowId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFlowLastBatchStateResponse {
        try await self.describeFlowLastBatchState(.init(flowId: flowId), region: region, logger: logger, on: eventLoop)
    }
}
