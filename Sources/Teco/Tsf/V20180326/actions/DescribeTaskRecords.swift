//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Tsf {
    /// DescribeTaskRecords请求参数结构体
    public struct DescribeTaskRecordsRequest: TCPaginatedRequest {
        /// 翻页偏移量。
        public let offset: UInt64?

        /// 翻页查询单页数量。
        public let limit: UInt64?

        /// 模糊查询关键字，支持任务ID和任务名称。
        public let searchWord: String?

        /// 任务启用状态。enabled/disabled
        public let taskState: String?

        /// 分组ID。
        public let groupId: String?

        /// 任务类型。
        public let taskType: String?

        /// 任务触发类型，UNICAST、BROADCAST。
        public let executeType: String?

        public let ids: [String]?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, searchWord: String? = nil, taskState: String? = nil, groupId: String? = nil, taskType: String? = nil, executeType: String? = nil, ids: [String]? = nil) {
            self.offset = offset
            self.limit = limit
            self.searchWord = searchWord
            self.taskState = taskState
            self.groupId = groupId
            self.taskType = taskType
            self.executeType = executeType
            self.ids = ids
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case searchWord = "SearchWord"
            case taskState = "TaskState"
            case groupId = "GroupId"
            case taskType = "TaskType"
            case executeType = "ExecuteType"
            case ids = "Ids"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTaskRecordsResponse) -> DescribeTaskRecordsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, searchWord: self.searchWord, taskState: self.taskState, groupId: self.groupId, taskType: self.taskType, executeType: self.executeType, ids: self.ids)
        }
    }

    /// DescribeTaskRecords返回参数结构体
    public struct DescribeTaskRecordsResponse: TCPaginatedResponse {
        /// 任务记录列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: TaskRecordPage?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TaskRecord`` list from the paginated response.
        public func getItems() -> [TaskRecord] {
            self.result?.content ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.result?.totalCount
        }
    }

    /// 查询任务列表
    ///
    /// 翻页查询任务列表
    @inlinable
    public func describeTaskRecords(_ input: DescribeTaskRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskRecordsResponse> {
        self.client.execute(action: "DescribeTaskRecords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    ///
    /// 翻页查询任务列表
    @inlinable
    public func describeTaskRecords(_ input: DescribeTaskRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskRecordsResponse {
        try await self.client.execute(action: "DescribeTaskRecords", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询任务列表
    ///
    /// 翻页查询任务列表
    @inlinable
    public func describeTaskRecords(offset: UInt64? = nil, limit: UInt64? = nil, searchWord: String? = nil, taskState: String? = nil, groupId: String? = nil, taskType: String? = nil, executeType: String? = nil, ids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskRecordsResponse> {
        self.describeTaskRecords(.init(offset: offset, limit: limit, searchWord: searchWord, taskState: taskState, groupId: groupId, taskType: taskType, executeType: executeType, ids: ids), region: region, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    ///
    /// 翻页查询任务列表
    @inlinable
    public func describeTaskRecords(offset: UInt64? = nil, limit: UInt64? = nil, searchWord: String? = nil, taskState: String? = nil, groupId: String? = nil, taskType: String? = nil, executeType: String? = nil, ids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskRecordsResponse {
        try await self.describeTaskRecords(.init(offset: offset, limit: limit, searchWord: searchWord, taskState: taskState, groupId: groupId, taskType: taskType, executeType: executeType, ids: ids), region: region, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    ///
    /// 翻页查询任务列表
    @inlinable
    public func describeTaskRecordsPaginated(_ input: DescribeTaskRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [TaskRecord])> {
        self.client.paginate(input: input, region: region, command: self.describeTaskRecords, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    ///
    /// 翻页查询任务列表
    @inlinable @discardableResult
    public func describeTaskRecordsPaginated(_ input: DescribeTaskRecordsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTaskRecordsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTaskRecords, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询任务列表
    ///
    /// 翻页查询任务列表
    ///
    /// - Returns: `AsyncSequence`s of ``TaskRecord`` and ``DescribeTaskRecordsResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTaskRecordsPaginator(_ input: DescribeTaskRecordsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTaskRecordsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTaskRecords, logger: logger, on: eventLoop)
    }
}
