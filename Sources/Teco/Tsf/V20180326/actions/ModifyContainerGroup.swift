//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tsf {
    /// ModifyContainerGroup请求参数结构体
    public struct ModifyContainerGroupRequest: TCRequestModel {
        /// 部署组ID
        public let groupId: String?

        /// 0:公网 1:集群内访问 2：NodePort
        public let accessType: Int64?

        /// ProtocolPorts数组
        public let protocolPorts: [ProtocolPort]?

        /// 更新方式：0:快速更新 1:滚动更新
        public let updateType: Int64?

        /// 更新间隔,单位秒
        public let updateIvl: Int64?

        /// 子网ID
        public let subnetId: String?

        /// 部署组备注
        public let alias: String?

        public init(groupId: String? = nil, accessType: Int64? = nil, protocolPorts: [ProtocolPort]? = nil, updateType: Int64? = nil, updateIvl: Int64? = nil, subnetId: String? = nil, alias: String? = nil) {
            self.groupId = groupId
            self.accessType = accessType
            self.protocolPorts = protocolPorts
            self.updateType = updateType
            self.updateIvl = updateIvl
            self.subnetId = subnetId
            self.alias = alias
        }

        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case accessType = "AccessType"
            case protocolPorts = "ProtocolPorts"
            case updateType = "UpdateType"
            case updateIvl = "UpdateIvl"
            case subnetId = "SubnetId"
            case alias = "Alias"
        }
    }

    /// ModifyContainerGroup返回参数结构体
    public struct ModifyContainerGroupResponse: TCResponseModel {
        /// 更新部署组是否成功。
        /// true：成功。
        /// false：失败。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 修改容器部署组
    @inlinable
    public func modifyContainerGroup(_ input: ModifyContainerGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyContainerGroupResponse> {
        self.client.execute(action: "ModifyContainerGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改容器部署组
    @inlinable
    public func modifyContainerGroup(_ input: ModifyContainerGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyContainerGroupResponse {
        try await self.client.execute(action: "ModifyContainerGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改容器部署组
    @inlinable
    public func modifyContainerGroup(groupId: String? = nil, accessType: Int64? = nil, protocolPorts: [ProtocolPort]? = nil, updateType: Int64? = nil, updateIvl: Int64? = nil, subnetId: String? = nil, alias: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyContainerGroupResponse> {
        self.modifyContainerGroup(.init(groupId: groupId, accessType: accessType, protocolPorts: protocolPorts, updateType: updateType, updateIvl: updateIvl, subnetId: subnetId, alias: alias), region: region, logger: logger, on: eventLoop)
    }

    /// 修改容器部署组
    @inlinable
    public func modifyContainerGroup(groupId: String? = nil, accessType: Int64? = nil, protocolPorts: [ProtocolPort]? = nil, updateType: Int64? = nil, updateIvl: Int64? = nil, subnetId: String? = nil, alias: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyContainerGroupResponse {
        try await self.modifyContainerGroup(.init(groupId: groupId, accessType: accessType, protocolPorts: protocolPorts, updateType: updateType, updateIvl: updateIvl, subnetId: subnetId, alias: alias), region: region, logger: logger, on: eventLoop)
    }
}
