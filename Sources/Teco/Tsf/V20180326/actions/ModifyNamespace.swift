//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// ModifyNamespace请求参数结构体
    public struct ModifyNamespaceRequest: TCRequestModel {
        /// 命名空间ID
        public let namespaceId: String

        /// 命名空间名称
        public let namespaceName: String?

        /// 命名空间备注
        public let namespaceDesc: String?

        /// 是否开启高可用
        public let isHaEnable: String?

        public init(namespaceId: String, namespaceName: String? = nil, namespaceDesc: String? = nil, isHaEnable: String? = nil) {
            self.namespaceId = namespaceId
            self.namespaceName = namespaceName
            self.namespaceDesc = namespaceDesc
            self.isHaEnable = isHaEnable
        }

        enum CodingKeys: String, CodingKey {
            case namespaceId = "NamespaceId"
            case namespaceName = "NamespaceName"
            case namespaceDesc = "NamespaceDesc"
            case isHaEnable = "IsHaEnable"
        }
    }

    /// ModifyNamespace返回参数结构体
    public struct ModifyNamespaceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改命名空间
    @inlinable @discardableResult
    public func modifyNamespace(_ input: ModifyNamespaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyNamespaceResponse> {
        self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改命名空间
    @inlinable @discardableResult
    public func modifyNamespace(_ input: ModifyNamespaceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyNamespaceResponse {
        try await self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改命名空间
    @inlinable @discardableResult
    public func modifyNamespace(namespaceId: String, namespaceName: String? = nil, namespaceDesc: String? = nil, isHaEnable: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyNamespaceResponse> {
        let input = ModifyNamespaceRequest(namespaceId: namespaceId, namespaceName: namespaceName, namespaceDesc: namespaceDesc, isHaEnable: isHaEnable)
        return self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改命名空间
    @inlinable @discardableResult
    public func modifyNamespace(namespaceId: String, namespaceName: String? = nil, namespaceDesc: String? = nil, isHaEnable: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyNamespaceResponse {
        let input = ModifyNamespaceRequest(namespaceId: namespaceId, namespaceName: namespaceName, namespaceDesc: namespaceDesc, isHaEnable: isHaEnable)
        return try await self.client.execute(action: "ModifyNamespace", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
