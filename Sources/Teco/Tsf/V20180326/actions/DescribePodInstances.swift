//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// DescribePodInstances请求参数结构体
    public struct DescribePodInstancesRequest: TCRequestModel {
        /// 实例所属groupId
        public let groupId: String
        
        /// 偏移量，取值从0开始
        public let offset: Int64?
        
        /// 分页个数，默认为20， 取值应为1~50
        public let limit: Int64?
        
        /// 过滤字段
        public let podNameList: [String]?
        
        public init (groupId: String, offset: Int64? = nil, limit: Int64? = nil, podNameList: [String]? = nil) {
            self.groupId = groupId
            self.offset = offset
            self.limit = limit
            self.podNameList = podNameList
        }
        
        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case offset = "Offset"
            case limit = "Limit"
            case podNameList = "PodNameList"
        }
    }
    
    /// DescribePodInstances返回参数结构体
    public struct DescribePodInstancesResponse: TCResponseModel {
        /// 查询的权限数据对象
        public let result: GroupPodResult
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 获取部署组实例列表
    @inlinable
    public func describePodInstances(_ input: DescribePodInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePodInstancesResponse > {
        self.client.execute(action: "DescribePodInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取部署组实例列表
    @inlinable
    public func describePodInstances(_ input: DescribePodInstancesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePodInstancesResponse {
        try await self.client.execute(action: "DescribePodInstances", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
