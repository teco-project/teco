//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// DescribePublicConfigReleaseLogs请求参数结构体
    public struct DescribePublicConfigReleaseLogsRequest: TCRequestModel {
        /// 命名空间ID，不传入时查询全量
        public let namespaceId: String?
        
        /// 偏移量，默认为0
        public let offset: Int64?
        
        /// 每页条数，默认为20
        public let limit: Int64?
        
        public init (namespaceId: String? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.namespaceId = namespaceId
            self.offset = offset
            self.limit = limit
        }
        
        enum CodingKeys: String, CodingKey {
            case namespaceId = "NamespaceId"
            case offset = "Offset"
            case limit = "Limit"
        }
    }
    
    /// DescribePublicConfigReleaseLogs返回参数结构体
    public struct DescribePublicConfigReleaseLogsResponse: TCResponseModel {
        /// 分页后的公共配置项发布历史列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: TsfPageConfigReleaseLog?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 查询公共配置发布历史
    @inlinable
    public func describePublicConfigReleaseLogs(_ input: DescribePublicConfigReleaseLogsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePublicConfigReleaseLogsResponse > {
        self.client.execute(action: "DescribePublicConfigReleaseLogs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询公共配置发布历史
    @inlinable
    public func describePublicConfigReleaseLogs(_ input: DescribePublicConfigReleaseLogsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePublicConfigReleaseLogsResponse {
        try await self.client.execute(action: "DescribePublicConfigReleaseLogs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
