//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// 获取部署组详情
    ///
    ///  获取部署组详情
    @inlinable
    public func describeContainerGroupDeployInfo(_ input: DescribeContainerGroupDeployInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeContainerGroupDeployInfoResponse > {
        self.client.execute(action: "DescribeContainerGroupDeployInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取部署组详情
    ///
    ///  获取部署组详情
    @inlinable
    public func describeContainerGroupDeployInfo(_ input: DescribeContainerGroupDeployInfoRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeContainerGroupDeployInfoResponse {
        try await self.client.execute(action: "DescribeContainerGroupDeployInfo", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeContainerGroupDeployInfo请求参数结构体
    public struct DescribeContainerGroupDeployInfoRequest: TCRequestModel {
        /// 实例所属 groupId
        public let groupId: String
        
        public init (groupId: String) {
            self.groupId = groupId
        }
        
        enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }
    
    /// DescribeContainerGroupDeployInfo返回参数结构体
    public struct DescribeContainerGroupDeployInfoResponse: TCResponseModel {
        /// 获取部署组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: ContainerGroupDeploy
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
