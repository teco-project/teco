//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tsf {
    /// DescribeResourceTaskStatus请求参数结构体
    public struct DescribeResourceTaskStatusRequest: TCRequestModel {
        /// 任务ID
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
        }
    }

    /// DescribeResourceTaskStatus返回参数结构体
    public struct DescribeResourceTaskStatusResponse: TCResponseModel {
        /// 资源任务执行状态结果
        public let result: ResourceTaskStatusResult

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 资源任务的执行状态描述
    ///
    /// 资源任务的执行状态描述接口
    @inlinable
    public func describeResourceTaskStatus(_ input: DescribeResourceTaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceTaskStatusResponse> {
        self.client.execute(action: "DescribeResourceTaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 资源任务的执行状态描述
    ///
    /// 资源任务的执行状态描述接口
    @inlinable
    public func describeResourceTaskStatus(_ input: DescribeResourceTaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceTaskStatusResponse {
        try await self.client.execute(action: "DescribeResourceTaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 资源任务的执行状态描述
    ///
    /// 资源任务的执行状态描述接口
    @inlinable
    public func describeResourceTaskStatus(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceTaskStatusResponse> {
        self.describeResourceTaskStatus(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 资源任务的执行状态描述
    ///
    /// 资源任务的执行状态描述接口
    @inlinable
    public func describeResourceTaskStatus(taskId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceTaskStatusResponse {
        try await self.describeResourceTaskStatus(.init(taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
