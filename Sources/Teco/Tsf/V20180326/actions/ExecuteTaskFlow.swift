//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// ExecuteTaskFlow请求参数结构体
    public struct ExecuteTaskFlowRequest: TCRequestModel {
        /// 工作流 ID
        public let flowId: String?
        
        public init (flowId: String? = nil) {
            self.flowId = flowId
        }
        
        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
        }
    }
    
    /// ExecuteTaskFlow返回参数结构体
    public struct ExecuteTaskFlowResponse: TCResponseModel {
        /// 工作流批次ID
        public let result: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 执行一次工作流
    @inlinable
    public func executeTaskFlow(_ input: ExecuteTaskFlowRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ExecuteTaskFlowResponse > {
        self.client.execute(action: "ExecuteTaskFlow", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 执行一次工作流
    @inlinable
    public func executeTaskFlow(_ input: ExecuteTaskFlowRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ExecuteTaskFlowResponse {
        try await self.client.execute(action: "ExecuteTaskFlow", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
