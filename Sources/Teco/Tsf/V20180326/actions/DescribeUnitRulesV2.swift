//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Tsf {
    /// DescribeUnitRulesV2请求参数结构体
    public struct DescribeUnitRulesV2Request: TCPaginatedRequest {
        /// 网关实体ID
        public let gatewayInstanceId: String

        /// 根据规则名或备注内容模糊查询
        public let searchWord: String?

        /// 启用状态, disabled: 未发布， enabled: 发布
        public let status: String?

        /// 翻页查询偏移量
        public let offset: Int64?

        /// 翻页查询每页记录数
        public let limit: Int64?

        public init(gatewayInstanceId: String, searchWord: String? = nil, status: String? = nil, offset: Int64? = nil, limit: Int64? = nil) {
            self.gatewayInstanceId = gatewayInstanceId
            self.searchWord = searchWord
            self.status = status
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case gatewayInstanceId = "GatewayInstanceId"
            case searchWord = "SearchWord"
            case status = "Status"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeUnitRulesV2Response) -> DescribeUnitRulesV2Request? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeUnitRulesV2Request(gatewayInstanceId: self.gatewayInstanceId, searchWord: self.searchWord, status: self.status, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeUnitRulesV2返回参数结构体
    public struct DescribeUnitRulesV2Response: TCPaginatedResponse {
        /// 分页列表信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: TsfPageUnitRuleV2?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }

        /// Extract the returned ``UnitRule`` list from the paginated response.
        public func getItems() -> [UnitRule] {
            self.result?.content ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.result?.totalCount
        }
    }

    /// 查询单元化规则列表V2
    @inlinable
    public func describeUnitRulesV2(_ input: DescribeUnitRulesV2Request, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUnitRulesV2Response> {
        self.client.execute(action: "DescribeUnitRulesV2", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询单元化规则列表V2
    @inlinable
    public func describeUnitRulesV2(_ input: DescribeUnitRulesV2Request, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUnitRulesV2Response {
        try await self.client.execute(action: "DescribeUnitRulesV2", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询单元化规则列表V2
    @inlinable
    public func describeUnitRulesV2(gatewayInstanceId: String, searchWord: String? = nil, status: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeUnitRulesV2Response> {
        self.describeUnitRulesV2(.init(gatewayInstanceId: gatewayInstanceId, searchWord: searchWord, status: status, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询单元化规则列表V2
    @inlinable
    public func describeUnitRulesV2(gatewayInstanceId: String, searchWord: String? = nil, status: String? = nil, offset: Int64? = nil, limit: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeUnitRulesV2Response {
        try await self.describeUnitRulesV2(.init(gatewayInstanceId: gatewayInstanceId, searchWord: searchWord, status: status, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 查询单元化规则列表V2
    @inlinable
    public func describeUnitRulesV2Paginated(_ input: DescribeUnitRulesV2Request, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [UnitRule])> {
        self.client.paginate(input: input, region: region, command: self.describeUnitRulesV2, logger: logger, on: eventLoop)
    }

    /// 查询单元化规则列表V2
    @inlinable @discardableResult
    public func describeUnitRulesV2Paginated(_ input: DescribeUnitRulesV2Request, region: TCRegion? = nil, onResponse: @escaping (DescribeUnitRulesV2Response, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeUnitRulesV2, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询单元化规则列表V2
    ///
    /// - Returns: `AsyncSequence`s of ``UnitRule`` and ``DescribeUnitRulesV2Response`` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeUnitRulesV2Paginator(_ input: DescribeUnitRulesV2Request, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeUnitRulesV2Request> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeUnitRulesV2, logger: logger, on: eventLoop)
    }
}
