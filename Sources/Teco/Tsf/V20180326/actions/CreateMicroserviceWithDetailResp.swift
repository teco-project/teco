//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tsf {
    /// CreateMicroserviceWithDetailResp请求参数结构体
    public struct CreateMicroserviceWithDetailRespRequest: TCRequestModel {
        /// 命名空间ID
        public let namespaceId: String

        /// 微服务名称
        public let microserviceName: String

        /// 微服务描述信息
        public let microserviceDesc: String?

        public init(namespaceId: String, microserviceName: String, microserviceDesc: String? = nil) {
            self.namespaceId = namespaceId
            self.microserviceName = microserviceName
            self.microserviceDesc = microserviceDesc
        }

        enum CodingKeys: String, CodingKey {
            case namespaceId = "NamespaceId"
            case microserviceName = "MicroserviceName"
            case microserviceDesc = "MicroserviceDesc"
        }
    }

    /// CreateMicroserviceWithDetailResp返回参数结构体
    public struct CreateMicroserviceWithDetailRespResponse: TCResponseModel {
        /// id
        public let result: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 新增微服务返回id
    @inlinable
    public func createMicroserviceWithDetailResp(_ input: CreateMicroserviceWithDetailRespRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateMicroserviceWithDetailRespResponse> {
        self.client.execute(action: "CreateMicroserviceWithDetailResp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 新增微服务返回id
    @inlinable
    public func createMicroserviceWithDetailResp(_ input: CreateMicroserviceWithDetailRespRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateMicroserviceWithDetailRespResponse {
        try await self.client.execute(action: "CreateMicroserviceWithDetailResp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 新增微服务返回id
    @inlinable
    public func createMicroserviceWithDetailResp(namespaceId: String, microserviceName: String, microserviceDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateMicroserviceWithDetailRespResponse> {
        self.createMicroserviceWithDetailResp(.init(namespaceId: namespaceId, microserviceName: microserviceName, microserviceDesc: microserviceDesc), region: region, logger: logger, on: eventLoop)
    }

    /// 新增微服务返回id
    @inlinable
    public func createMicroserviceWithDetailResp(namespaceId: String, microserviceName: String, microserviceDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateMicroserviceWithDetailRespResponse {
        try await self.createMicroserviceWithDetailResp(.init(namespaceId: namespaceId, microserviceName: microserviceName, microserviceDesc: microserviceDesc), region: region, logger: logger, on: eventLoop)
    }
}
