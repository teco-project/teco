//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// 获取某个应用的程序包信息列表
    ///
    /// 无
    @inlinable
    public func describePkgs(_ input: DescribePkgsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePkgsResponse > {
        self.client.execute(action: "DescribePkgs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取某个应用的程序包信息列表
    ///
    /// 无
    @inlinable
    public func describePkgs(_ input: DescribePkgsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePkgsResponse {
        try await self.client.execute(action: "DescribePkgs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribePkgs请求参数结构体
    public struct DescribePkgsRequest: TCRequestModel {
        /// 应用ID（只传入应用ID，返回该应用下所有软件包信息）
        public let applicationId: String
        
        /// 查询关键字（支持根据包ID，包名，包版本号搜索）
        public let searchWord: String?
        
        /// 排序关键字（默认为"UploadTime"：上传时间）
        public let orderBy: String?
        
        /// 升序：0/降序：1（默认降序）
        public let orderType: UInt64?
        
        /// 查询起始偏移
        public let offset: UInt64?
        
        /// 返回数量限制
        public let limit: UInt64?
        
        /// 程序包仓库类型
        public let repositoryType: String?
        
        /// 程序包仓库id
        public let repositoryId: String?
        
        /// 程序包类型数组支持（fatjar jar war tar.gz zip）
        public let packageTypeList: [String]?
        
        public init (applicationId: String, searchWord: String?, orderBy: String?, orderType: UInt64?, offset: UInt64?, limit: UInt64?, repositoryType: String?, repositoryId: String?, packageTypeList: [String]?) {
            self.applicationId = applicationId
            self.searchWord = searchWord
            self.orderBy = orderBy
            self.orderType = orderType
            self.offset = offset
            self.limit = limit
            self.repositoryType = repositoryType
            self.repositoryId = repositoryId
            self.packageTypeList = packageTypeList
        }
        
        enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case searchWord = "SearchWord"
            case orderBy = "OrderBy"
            case orderType = "OrderType"
            case offset = "Offset"
            case limit = "Limit"
            case repositoryType = "RepositoryType"
            case repositoryId = "RepositoryId"
            case packageTypeList = "PackageTypeList"
        }
    }
    
    /// DescribePkgs返回参数结构体
    public struct DescribePkgsResponse: TCResponseModel {
        /// 符合查询程序包信息列表
        public let result: PkgList
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}