//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// DescribeLanes请求参数结构体
    public struct DescribeLanesRequest: TCRequestModel {
        /// 每页展示的条数
        public let limit: Int64?

        /// 翻页偏移量
        public let offset: Int64?

        /// 搜索关键字
        public let searchWord: String?

        /// 无
        public let laneIdList: [String]?

        /// 无
        public let disableProgramAuthCheck: Bool?

        public init(limit: Int64? = nil, offset: Int64? = nil, searchWord: String? = nil, laneIdList: [String]? = nil, disableProgramAuthCheck: Bool? = nil) {
            self.limit = limit
            self.offset = offset
            self.searchWord = searchWord
            self.laneIdList = laneIdList
            self.disableProgramAuthCheck = disableProgramAuthCheck
        }

        enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case offset = "Offset"
            case searchWord = "SearchWord"
            case laneIdList = "LaneIdList"
            case disableProgramAuthCheck = "DisableProgramAuthCheck"
        }
    }

    /// DescribeLanes返回参数结构体
    public struct DescribeLanesResponse: TCResponseModel {
        /// 泳道列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: LaneInfos?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 查询泳道列表
    @inlinable
    public func describeLanes(_ input: DescribeLanesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLanesResponse> {
        self.client.execute(action: "DescribeLanes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询泳道列表
    @inlinable
    public func describeLanes(_ input: DescribeLanesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLanesResponse {
        try await self.client.execute(action: "DescribeLanes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询泳道列表
    @inlinable
    public func describeLanes(limit: Int64? = nil, offset: Int64? = nil, searchWord: String? = nil, laneIdList: [String]? = nil, disableProgramAuthCheck: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeLanesResponse> {
        let input = DescribeLanesRequest(limit: limit, offset: offset, searchWord: searchWord, laneIdList: laneIdList, disableProgramAuthCheck: disableProgramAuthCheck)
        return self.client.execute(action: "DescribeLanes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询泳道列表
    @inlinable
    public func describeLanes(limit: Int64? = nil, offset: Int64? = nil, searchWord: String? = nil, laneIdList: [String]? = nil, disableProgramAuthCheck: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeLanesResponse {
        let input = DescribeLanesRequest(limit: limit, offset: offset, searchWord: searchWord, laneIdList: laneIdList, disableProgramAuthCheck: disableProgramAuthCheck)
        return try await self.client.execute(action: "DescribeLanes", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
