//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// 查询配置发布信息
    ///
    /// 查询配置发布信息
    @inlinable
    public func describeConfigReleases(_ input: DescribeConfigReleasesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeConfigReleasesResponse > {
        self.client.execute(action: "DescribeConfigReleases", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询配置发布信息
    ///
    /// 查询配置发布信息
    @inlinable
    public func describeConfigReleases(_ input: DescribeConfigReleasesRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConfigReleasesResponse {
        try await self.client.execute(action: "DescribeConfigReleases", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeConfigReleases请求参数结构体
    public struct DescribeConfigReleasesRequest: TCRequestModel {
        /// 配置项名称，不传入时查询全量
        public let configName: String?
        
        /// 部署组ID，不传入时查询全量
        public let groupId: String?
        
        /// 命名空间ID，不传入时查询全量
        public let namespaceId: String?
        
        /// 集群ID，不传入时查询全量
        public let clusterId: String?
        
        /// 每页条数
        public let limit: Int64?
        
        /// 偏移量
        public let offset: Int64?
        
        /// 配置ID，不传入时查询全量
        public let configId: String?
        
        /// 应用ID，不传入时查询全量
        public let applicationId: String?
        
        public init (configName: String?, groupId: String?, namespaceId: String?, clusterId: String?, limit: Int64?, offset: Int64?, configId: String?, applicationId: String?) {
            self.configName = configName
            self.groupId = groupId
            self.namespaceId = namespaceId
            self.clusterId = clusterId
            self.limit = limit
            self.offset = offset
            self.configId = configId
            self.applicationId = applicationId
        }
        
        enum CodingKeys: String, CodingKey {
            case configName = "ConfigName"
            case groupId = "GroupId"
            case namespaceId = "NamespaceId"
            case clusterId = "ClusterId"
            case limit = "Limit"
            case offset = "Offset"
            case configId = "ConfigId"
            case applicationId = "ApplicationId"
        }
    }
    
    /// DescribeConfigReleases返回参数结构体
    public struct DescribeConfigReleasesResponse: TCResponseModel {
        /// 分页的配置发布信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: TsfPageConfigRelease
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}