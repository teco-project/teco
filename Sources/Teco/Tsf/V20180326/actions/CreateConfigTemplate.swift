//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tsf {
    /// CreateConfigTemplate请求参数结构体
    public struct CreateConfigTemplateRequest: TCRequestModel {
        /// 配置模板名称
        public let configTemplateName: String

        /// 配置模板对应的微服务框架
        public let configTemplateType: String

        /// 配置模板数据
        public let configTemplateValue: String

        /// 配置模板描述
        public let configTemplateDesc: String?

        /// 无
        public let programIdList: [String]?

        public init(configTemplateName: String, configTemplateType: String, configTemplateValue: String, configTemplateDesc: String? = nil, programIdList: [String]? = nil) {
            self.configTemplateName = configTemplateName
            self.configTemplateType = configTemplateType
            self.configTemplateValue = configTemplateValue
            self.configTemplateDesc = configTemplateDesc
            self.programIdList = programIdList
        }

        enum CodingKeys: String, CodingKey {
            case configTemplateName = "ConfigTemplateName"
            case configTemplateType = "ConfigTemplateType"
            case configTemplateValue = "ConfigTemplateValue"
            case configTemplateDesc = "ConfigTemplateDesc"
            case programIdList = "ProgramIdList"
        }
    }

    /// CreateConfigTemplate返回参数结构体
    public struct CreateConfigTemplateResponse: TCResponseModel {
        /// true：创建成功；false：创建失败
        public let result: Bool

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 创建参数模板
    @inlinable
    public func createConfigTemplate(_ input: CreateConfigTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateConfigTemplateResponse> {
        self.client.execute(action: "CreateConfigTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建参数模板
    @inlinable
    public func createConfigTemplate(_ input: CreateConfigTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConfigTemplateResponse {
        try await self.client.execute(action: "CreateConfigTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建参数模板
    @inlinable
    public func createConfigTemplate(configTemplateName: String, configTemplateType: String, configTemplateValue: String, configTemplateDesc: String? = nil, programIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateConfigTemplateResponse> {
        self.createConfigTemplate(.init(configTemplateName: configTemplateName, configTemplateType: configTemplateType, configTemplateValue: configTemplateValue, configTemplateDesc: configTemplateDesc, programIdList: programIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 创建参数模板
    @inlinable
    public func createConfigTemplate(configTemplateName: String, configTemplateType: String, configTemplateValue: String, configTemplateDesc: String? = nil, programIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateConfigTemplateResponse {
        try await self.createConfigTemplate(.init(configTemplateName: configTemplateName, configTemplateType: configTemplateType, configTemplateValue: configTemplateValue, configTemplateDesc: configTemplateDesc, programIdList: programIdList), region: region, logger: logger, on: eventLoop)
    }
}
