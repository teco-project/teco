//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// 查询日志配置项列表
    @inlinable
    public func describeBusinessLogConfigs(_ input: DescribeBusinessLogConfigsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeBusinessLogConfigsResponse > {
        self.client.execute(action: "DescribeBusinessLogConfigs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询日志配置项列表
    @inlinable
    public func describeBusinessLogConfigs(_ input: DescribeBusinessLogConfigsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBusinessLogConfigsResponse {
        try await self.client.execute(action: "DescribeBusinessLogConfigs", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribeBusinessLogConfigs请求参数结构体
    public struct DescribeBusinessLogConfigsRequest: TCRequestModel {
        /// 偏移量，取值范围大于等于0，默认值为0
        public let offset: UInt64?
        
        /// 单页请求配置数量，取值范围[1, 50]，默认值为10
        public let limit: UInt64?
        
        /// 模糊匹配关键词
        public let searchWord: String?
        
        /// 无
        public let disableProgramAuthCheck: Bool?
        
        /// 无
        public let configIdList: [String]?
        
        public init (offset: UInt64?, limit: UInt64?, searchWord: String?, disableProgramAuthCheck: Bool?, configIdList: [String]?) {
            self.offset = offset
            self.limit = limit
            self.searchWord = searchWord
            self.disableProgramAuthCheck = disableProgramAuthCheck
            self.configIdList = configIdList
        }
        
        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case searchWord = "SearchWord"
            case disableProgramAuthCheck = "DisableProgramAuthCheck"
            case configIdList = "ConfigIdList"
        }
    }
    
    /// DescribeBusinessLogConfigs返回参数结构体
    public struct DescribeBusinessLogConfigsResponse: TCResponseModel {
        /// 业务日志配置列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: TsfPageBusinessLogConfig
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
