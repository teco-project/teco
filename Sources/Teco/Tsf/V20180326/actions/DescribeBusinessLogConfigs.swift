//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore
import TecoPaginationHelpers

extension Tsf {
    /// DescribeBusinessLogConfigs请求参数结构体
    public struct DescribeBusinessLogConfigsRequest: TCPaginatedRequest {
        /// 偏移量，取值范围大于等于0，默认值为0
        public let offset: UInt64?

        /// 单页请求配置数量，取值范围[1, 50]，默认值为10
        public let limit: UInt64?

        /// 模糊匹配关键词
        public let searchWord: String?

        /// 无
        public let disableProgramAuthCheck: Bool?

        /// 无
        public let configIdList: [String]?

        public init(offset: UInt64? = nil, limit: UInt64? = nil, searchWord: String? = nil, disableProgramAuthCheck: Bool? = nil, configIdList: [String]? = nil) {
            self.offset = offset
            self.limit = limit
            self.searchWord = searchWord
            self.disableProgramAuthCheck = disableProgramAuthCheck
            self.configIdList = configIdList
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case searchWord = "SearchWord"
            case disableProgramAuthCheck = "DisableProgramAuthCheck"
            case configIdList = "ConfigIdList"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeBusinessLogConfigsResponse) -> DescribeBusinessLogConfigsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeBusinessLogConfigsRequest(offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit, searchWord: self.searchWord, disableProgramAuthCheck: self.disableProgramAuthCheck, configIdList: self.configIdList)
        }
    }

    /// DescribeBusinessLogConfigs返回参数结构体
    public struct DescribeBusinessLogConfigsResponse: TCPaginatedResponse {
        /// 业务日志配置列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: TsfPageBusinessLogConfig?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [BusinessLogConfig] {
            self.result?.content ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.result?.totalCount
        }
    }

    /// 查询日志配置项列表
    @inlinable
    public func describeBusinessLogConfigs(_ input: DescribeBusinessLogConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBusinessLogConfigsResponse> {
        self.client.execute(action: "DescribeBusinessLogConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询日志配置项列表
    @inlinable
    public func describeBusinessLogConfigs(_ input: DescribeBusinessLogConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBusinessLogConfigsResponse {
        try await self.client.execute(action: "DescribeBusinessLogConfigs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询日志配置项列表
    @inlinable
    public func describeBusinessLogConfigs(offset: UInt64? = nil, limit: UInt64? = nil, searchWord: String? = nil, disableProgramAuthCheck: Bool? = nil, configIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeBusinessLogConfigsResponse> {
        self.describeBusinessLogConfigs(.init(offset: offset, limit: limit, searchWord: searchWord, disableProgramAuthCheck: disableProgramAuthCheck, configIdList: configIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 查询日志配置项列表
    @inlinable
    public func describeBusinessLogConfigs(offset: UInt64? = nil, limit: UInt64? = nil, searchWord: String? = nil, disableProgramAuthCheck: Bool? = nil, configIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeBusinessLogConfigsResponse {
        try await self.describeBusinessLogConfigs(.init(offset: offset, limit: limit, searchWord: searchWord, disableProgramAuthCheck: disableProgramAuthCheck, configIdList: configIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 查询日志配置项列表
    @inlinable
    public func describeBusinessLogConfigsPaginated(_ input: DescribeBusinessLogConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [BusinessLogConfig])> {
        self.client.paginate(input: input, region: region, command: self.describeBusinessLogConfigs, logger: logger, on: eventLoop)
    }

    /// 查询日志配置项列表
    @inlinable @discardableResult
    public func describeBusinessLogConfigsPaginated(_ input: DescribeBusinessLogConfigsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeBusinessLogConfigsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeBusinessLogConfigs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询日志配置项列表
    ///
    /// - Returns: `AsyncSequence`s of `BusinessLogConfig` and `DescribeBusinessLogConfigsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeBusinessLogConfigsPaginator(_ input: DescribeBusinessLogConfigsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeBusinessLogConfigsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeBusinessLogConfigs, logger: logger, on: eventLoop)
    }
}
