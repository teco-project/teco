//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Tsf {
    /// CreateRepository请求参数结构体
    public struct CreateRepositoryRequest: TCRequestModel {
        /// 仓库名称
        public let repositoryName: String

        /// 仓库类型（默认仓库：default，私有仓库：private）
        public let repositoryType: String

        /// 仓库所在桶名称
        public let bucketName: String

        /// 仓库所在桶地域
        public let bucketRegion: String

        /// 目录
        public let directory: String?

        /// 仓库描述
        public let repositoryDesc: String?

        public init(repositoryName: String, repositoryType: String, bucketName: String, bucketRegion: String, directory: String? = nil, repositoryDesc: String? = nil) {
            self.repositoryName = repositoryName
            self.repositoryType = repositoryType
            self.bucketName = bucketName
            self.bucketRegion = bucketRegion
            self.directory = directory
            self.repositoryDesc = repositoryDesc
        }

        enum CodingKeys: String, CodingKey {
            case repositoryName = "RepositoryName"
            case repositoryType = "RepositoryType"
            case bucketName = "BucketName"
            case bucketRegion = "BucketRegion"
            case directory = "Directory"
            case repositoryDesc = "RepositoryDesc"
        }
    }

    /// CreateRepository返回参数结构体
    public struct CreateRepositoryResponse: TCResponseModel {
        /// 创建仓库是否成功
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 创建仓库
    @inlinable
    public func createRepository(_ input: CreateRepositoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRepositoryResponse> {
        self.client.execute(action: "CreateRepository", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建仓库
    @inlinable
    public func createRepository(_ input: CreateRepositoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRepositoryResponse {
        try await self.client.execute(action: "CreateRepository", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建仓库
    @inlinable
    public func createRepository(repositoryName: String, repositoryType: String, bucketName: String, bucketRegion: String, directory: String? = nil, repositoryDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRepositoryResponse> {
        self.createRepository(.init(repositoryName: repositoryName, repositoryType: repositoryType, bucketName: bucketName, bucketRegion: bucketRegion, directory: directory, repositoryDesc: repositoryDesc), region: region, logger: logger, on: eventLoop)
    }

    /// 创建仓库
    @inlinable
    public func createRepository(repositoryName: String, repositoryType: String, bucketName: String, bucketRegion: String, directory: String? = nil, repositoryDesc: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateRepositoryResponse {
        try await self.createRepository(.init(repositoryName: repositoryName, repositoryType: repositoryType, bucketName: bucketName, bucketRegion: bucketRegion, directory: directory, repositoryDesc: repositoryDesc), region: region, logger: logger, on: eventLoop)
    }
}
