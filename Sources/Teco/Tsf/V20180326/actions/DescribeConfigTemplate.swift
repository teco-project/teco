//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tsf {
    /// DescribeConfigTemplate请求参数结构体
    public struct DescribeConfigTemplateRequest: TCRequest {
        public let configTemplateId: String

        public init(configTemplateId: String) {
            self.configTemplateId = configTemplateId
        }

        enum CodingKeys: String, CodingKey {
            case configTemplateId = "ConfigTemplateId"
        }
    }

    /// DescribeConfigTemplate返回参数结构体
    public struct DescribeConfigTemplateResponse: TCResponse {
        /// Result
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: ConfigTemplate?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 导入配置
    @inlinable
    public func describeConfigTemplate(_ input: DescribeConfigTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeConfigTemplateResponse> {
        self.client.execute(action: "DescribeConfigTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 导入配置
    @inlinable
    public func describeConfigTemplate(_ input: DescribeConfigTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConfigTemplateResponse {
        try await self.client.execute(action: "DescribeConfigTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 导入配置
    @inlinable
    public func describeConfigTemplate(configTemplateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeConfigTemplateResponse> {
        self.describeConfigTemplate(.init(configTemplateId: configTemplateId), region: region, logger: logger, on: eventLoop)
    }

    /// 导入配置
    @inlinable
    public func describeConfigTemplate(configTemplateId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeConfigTemplateResponse {
        try await self.describeConfigTemplate(.init(configTemplateId: configTemplateId), region: region, logger: logger, on: eventLoop)
    }
}
