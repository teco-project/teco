//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers
import TecoPaginationHelpers

extension Tsf {
    /// SearchStdoutLog请求参数结构体
    public struct SearchStdoutLogRequest: TCPaginatedRequest {
        /// 机器实例ID
        public let instanceId: String?

        /// 单页请求配置数量，取值范围[1, 500]，默认值为100
        public let limit: Int64?

        /// 检索关键词
        public let searchWords: [String]?

        /// 查询起始时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var startTime: Date?

        /// 部署组ID
        public let groupId: String?

        /// 查询结束时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampEncoding public var endTime: Date?

        /// 请求偏移量，取值范围大于等于0，默认值为
        /// 0
        public let offset: Int64?

        /// 排序规则，默认值"time"
        public let orderBy: String?

        /// 排序方式，取值"asc"或"desc"，默认
        /// 值"desc"
        public let orderType: String?

        /// 检索类型，取值"LUCENE", "REGEXP",
        /// "NORMAL"
        public let searchWordType: String?

        /// 批量请求类型，取值"page"或"scroll"，默认
        /// 值"page"
        public let batchType: String?

        /// 游标ID
        public let scrollId: String?

        public init(instanceId: String? = nil, limit: Int64? = nil, searchWords: [String]? = nil, startTime: Date? = nil, groupId: String? = nil, endTime: Date? = nil, offset: Int64? = nil, orderBy: String? = nil, orderType: String? = nil, searchWordType: String? = nil, batchType: String? = nil, scrollId: String? = nil) {
            self.instanceId = instanceId
            self.limit = limit
            self.searchWords = searchWords
            self._startTime = .init(wrappedValue: startTime)
            self.groupId = groupId
            self._endTime = .init(wrappedValue: endTime)
            self.offset = offset
            self.orderBy = orderBy
            self.orderType = orderType
            self.searchWordType = searchWordType
            self.batchType = batchType
            self.scrollId = scrollId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case limit = "Limit"
            case searchWords = "SearchWords"
            case startTime = "StartTime"
            case groupId = "GroupId"
            case endTime = "EndTime"
            case offset = "Offset"
            case orderBy = "OrderBy"
            case orderType = "OrderType"
            case searchWordType = "SearchWordType"
            case batchType = "BatchType"
            case scrollId = "ScrollId"
        }

        /// Compute the next request based on API response.
        public func getNextPaginatedRequest(with response: SearchStdoutLogResponse) -> SearchStdoutLogRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return SearchStdoutLogRequest(instanceId: self.instanceId, limit: self.limit, searchWords: self.searchWords, startTime: self.startTime, groupId: self.groupId, endTime: self.endTime, offset: (self.offset ?? 0) + .init(response.getItems().count), orderBy: self.orderBy, orderType: self.orderType, searchWordType: self.searchWordType, batchType: self.batchType, scrollId: self.scrollId)
        }
    }

    /// SearchStdoutLog返回参数结构体
    public struct SearchStdoutLogResponse: TCPaginatedResponse {
        /// 标准输出日志列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: TsfPageStdoutLogV2?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }

        /// Extract the total count from the paginated response.
        public func getItems() -> [StdoutLogV2] {
            self.result?.content ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.result?.totalCount
        }
    }

    /// 标准输出日志搜索
    @inlinable
    public func searchStdoutLog(_ input: SearchStdoutLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchStdoutLogResponse> {
        self.client.execute(action: "SearchStdoutLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 标准输出日志搜索
    @inlinable
    public func searchStdoutLog(_ input: SearchStdoutLogRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchStdoutLogResponse {
        try await self.client.execute(action: "SearchStdoutLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 标准输出日志搜索
    @inlinable
    public func searchStdoutLog(instanceId: String? = nil, limit: Int64? = nil, searchWords: [String]? = nil, startTime: Date? = nil, groupId: String? = nil, endTime: Date? = nil, offset: Int64? = nil, orderBy: String? = nil, orderType: String? = nil, searchWordType: String? = nil, batchType: String? = nil, scrollId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SearchStdoutLogResponse> {
        let input = SearchStdoutLogRequest(instanceId: instanceId, limit: limit, searchWords: searchWords, startTime: startTime, groupId: groupId, endTime: endTime, offset: offset, orderBy: orderBy, orderType: orderType, searchWordType: searchWordType, batchType: batchType, scrollId: scrollId)
        return self.client.execute(action: "SearchStdoutLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 标准输出日志搜索
    @inlinable
    public func searchStdoutLog(instanceId: String? = nil, limit: Int64? = nil, searchWords: [String]? = nil, startTime: Date? = nil, groupId: String? = nil, endTime: Date? = nil, offset: Int64? = nil, orderBy: String? = nil, orderType: String? = nil, searchWordType: String? = nil, batchType: String? = nil, scrollId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchStdoutLogResponse {
        let input = SearchStdoutLogRequest(instanceId: instanceId, limit: limit, searchWords: searchWords, startTime: startTime, groupId: groupId, endTime: endTime, offset: offset, orderBy: orderBy, orderType: orderType, searchWordType: searchWordType, batchType: batchType, scrollId: scrollId)
        return try await self.client.execute(action: "SearchStdoutLog", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
