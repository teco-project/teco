//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Tsf {
    /// DescribeApiUseDetail请求参数结构体
    public struct DescribeApiUseDetailRequest: TCRequestModel {
        /// 网关部署组ID
        public let gatewayDeployGroupId: String
        
        /// 网关分组Api ID
        public let apiId: String
        
        /// 查询的日期,格式：yyyy-MM-dd HH:mm:ss
        // FIXME: Codable support not implemented for datetime yet.
        public let startTime: Date
        
        /// 查询的日期,格式：yyyy-MM-dd HH:mm:ss
        // FIXME: Codable support not implemented for datetime yet.
        public let endTime: Date
        
        public init (gatewayDeployGroupId: String, apiId: String, startTime: Date, endTime: Date) {
            self.gatewayDeployGroupId = gatewayDeployGroupId
            self.apiId = apiId
            self.startTime = startTime
            self.endTime = endTime
        }
        
        enum CodingKeys: String, CodingKey {
            case gatewayDeployGroupId = "GatewayDeployGroupId"
            case apiId = "ApiId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }
    
    /// DescribeApiUseDetail返回参数结构体
    public struct DescribeApiUseDetailResponse: TCResponseModel {
        /// 日使用统计对象
        public let result: GroupApiUseStatistics
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
    
    /// 查询网关API监控明细数据
    @inlinable
    public func describeApiUseDetail(_ input: DescribeApiUseDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeApiUseDetailResponse > {
        self.client.execute(action: "DescribeApiUseDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询网关API监控明细数据
    @inlinable
    public func describeApiUseDetail(_ input: DescribeApiUseDetailRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApiUseDetailResponse {
        try await self.client.execute(action: "DescribeApiUseDetail", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 查询网关API监控明细数据
    @inlinable
    public func describeApiUseDetail(gatewayDeployGroupId: String, apiId: String, startTime: Date, endTime: Date, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeApiUseDetailResponse > {
        self.describeApiUseDetail(DescribeApiUseDetailRequest(gatewayDeployGroupId: gatewayDeployGroupId, apiId: apiId, startTime: startTime, endTime: endTime), logger: logger, on: eventLoop)
    }
    
    /// 查询网关API监控明细数据
    @inlinable
    public func describeApiUseDetail(gatewayDeployGroupId: String, apiId: String, startTime: Date, endTime: Date, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeApiUseDetailResponse {
        try await self.describeApiUseDetail(DescribeApiUseDetailRequest(gatewayDeployGroupId: gatewayDeployGroupId, apiId: apiId, startTime: startTime, endTime: endTime), logger: logger, on: eventLoop)
    }
}
