//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// 修改任务
    @inlinable
    public func modifyTask(_ input: ModifyTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < ModifyTaskResponse > {
        self.client.execute(action: "ModifyTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 修改任务
    @inlinable
    public func modifyTask(_ input: ModifyTaskRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTaskResponse {
        try await self.client.execute(action: "ModifyTask", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// ModifyTask请求参数结构体
    public struct ModifyTaskRequest: TCRequestModel {
        /// 任务ID
        public let taskId: String
        
        /// 任务名称
        public let taskName: String?
        
        /// 任务类型
        public let taskType: String?
        
        /// 任务内容
        public let taskContent: String?
        
        /// 任务执行类型
        public let executeType: String?
        
        /// 触发规则
        public let taskRule: TaskRule
        
        /// 超时时间，单位 ms
        public let timeOut: UInt64?
        
        /// 分组ID
        public let groupId: String?
        
        /// 分片数量
        public let shardCount: Int64?
        
        /// 分片参数
        public let shardArguments: [ShardArgument]?
        
        /// 高级设置
        public let advanceSettings: AdvanceSettings
        
        /// 判断任务成功的操作符 GT/GTE
        public let successOperator: String?
        
        /// 判断任务成功率的阈值
        public let successRatio: Int64?
        
        /// 重试次数
        public let retryCount: UInt64?
        
        /// 重试间隔
        public let retryInterval: UInt64?
        
        /// 任务参数，长度限制10000个字符
        public let taskArgument: String?
        
        /// 无
        public let programIdList: [String]?
        
        public init (taskId: String, taskName: String?, taskType: String?, taskContent: String?, executeType: String?, taskRule: TaskRule, timeOut: UInt64?, groupId: String?, shardCount: Int64?, shardArguments: [ShardArgument]?, advanceSettings: AdvanceSettings, successOperator: String?, successRatio: Int64?, retryCount: UInt64?, retryInterval: UInt64?, taskArgument: String?, programIdList: [String]?) {
            self.taskId = taskId
            self.taskName = taskName
            self.taskType = taskType
            self.taskContent = taskContent
            self.executeType = executeType
            self.taskRule = taskRule
            self.timeOut = timeOut
            self.groupId = groupId
            self.shardCount = shardCount
            self.shardArguments = shardArguments
            self.advanceSettings = advanceSettings
            self.successOperator = successOperator
            self.successRatio = successRatio
            self.retryCount = retryCount
            self.retryInterval = retryInterval
            self.taskArgument = taskArgument
            self.programIdList = programIdList
        }
        
        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskName = "TaskName"
            case taskType = "TaskType"
            case taskContent = "TaskContent"
            case executeType = "ExecuteType"
            case taskRule = "TaskRule"
            case timeOut = "TimeOut"
            case groupId = "GroupId"
            case shardCount = "ShardCount"
            case shardArguments = "ShardArguments"
            case advanceSettings = "AdvanceSettings"
            case successOperator = "SuccessOperator"
            case successRatio = "SuccessRatio"
            case retryCount = "RetryCount"
            case retryInterval = "RetryInterval"
            case taskArgument = "TaskArgument"
            case programIdList = "ProgramIdList"
        }
    }
    
    /// ModifyTask返回参数结构体
    public struct ModifyTaskResponse: TCResponseModel {
        /// 更新是否成功
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }
}
