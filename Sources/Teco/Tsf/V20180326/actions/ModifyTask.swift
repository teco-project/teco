//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Tsf {
    /// ModifyTask请求参数结构体
    public struct ModifyTaskRequest: TCRequestModel {
        /// 任务ID
        public let taskId: String

        /// 任务名称
        public let taskName: String?

        /// 任务类型
        public let taskType: String?

        /// 任务内容
        public let taskContent: String?

        /// 任务执行类型
        public let executeType: String?

        /// 触发规则
        public let taskRule: TaskRule?

        /// 超时时间，单位 ms
        public let timeOut: UInt64?

        /// 分组ID
        public let groupId: String?

        /// 分片数量
        public let shardCount: Int64?

        /// 分片参数
        public let shardArguments: [ShardArgument]?

        /// 高级设置
        public let advanceSettings: AdvanceSettings?

        /// 判断任务成功的操作符 GT/GTE
        public let successOperator: String?

        /// 判断任务成功率的阈值
        public let successRatio: Int64?

        /// 重试次数
        public let retryCount: UInt64?

        /// 重试间隔
        public let retryInterval: UInt64?

        /// 任务参数，长度限制10000个字符
        public let taskArgument: String?

        /// 无
        public let programIdList: [String]?

        public init(taskId: String, taskName: String? = nil, taskType: String? = nil, taskContent: String? = nil, executeType: String? = nil, taskRule: TaskRule? = nil, timeOut: UInt64? = nil, groupId: String? = nil, shardCount: Int64? = nil, shardArguments: [ShardArgument]? = nil, advanceSettings: AdvanceSettings? = nil, successOperator: String? = nil, successRatio: Int64? = nil, retryCount: UInt64? = nil, retryInterval: UInt64? = nil, taskArgument: String? = nil, programIdList: [String]? = nil) {
            self.taskId = taskId
            self.taskName = taskName
            self.taskType = taskType
            self.taskContent = taskContent
            self.executeType = executeType
            self.taskRule = taskRule
            self.timeOut = timeOut
            self.groupId = groupId
            self.shardCount = shardCount
            self.shardArguments = shardArguments
            self.advanceSettings = advanceSettings
            self.successOperator = successOperator
            self.successRatio = successRatio
            self.retryCount = retryCount
            self.retryInterval = retryInterval
            self.taskArgument = taskArgument
            self.programIdList = programIdList
        }

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskName = "TaskName"
            case taskType = "TaskType"
            case taskContent = "TaskContent"
            case executeType = "ExecuteType"
            case taskRule = "TaskRule"
            case timeOut = "TimeOut"
            case groupId = "GroupId"
            case shardCount = "ShardCount"
            case shardArguments = "ShardArguments"
            case advanceSettings = "AdvanceSettings"
            case successOperator = "SuccessOperator"
            case successRatio = "SuccessRatio"
            case retryCount = "RetryCount"
            case retryInterval = "RetryInterval"
            case taskArgument = "TaskArgument"
            case programIdList = "ProgramIdList"
        }
    }

    /// ModifyTask返回参数结构体
    public struct ModifyTaskResponse: TCResponseModel {
        /// 更新是否成功
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: Bool?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 修改任务
    @inlinable
    public func modifyTask(_ input: ModifyTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyTaskResponse> {
        self.client.execute(action: "ModifyTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改任务
    @inlinable
    public func modifyTask(_ input: ModifyTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTaskResponse {
        try await self.client.execute(action: "ModifyTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改任务
    @inlinable
    public func modifyTask(taskId: String, taskName: String? = nil, taskType: String? = nil, taskContent: String? = nil, executeType: String? = nil, taskRule: TaskRule? = nil, timeOut: UInt64? = nil, groupId: String? = nil, shardCount: Int64? = nil, shardArguments: [ShardArgument]? = nil, advanceSettings: AdvanceSettings? = nil, successOperator: String? = nil, successRatio: Int64? = nil, retryCount: UInt64? = nil, retryInterval: UInt64? = nil, taskArgument: String? = nil, programIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyTaskResponse> {
        self.modifyTask(.init(taskId: taskId, taskName: taskName, taskType: taskType, taskContent: taskContent, executeType: executeType, taskRule: taskRule, timeOut: timeOut, groupId: groupId, shardCount: shardCount, shardArguments: shardArguments, advanceSettings: advanceSettings, successOperator: successOperator, successRatio: successRatio, retryCount: retryCount, retryInterval: retryInterval, taskArgument: taskArgument, programIdList: programIdList), region: region, logger: logger, on: eventLoop)
    }

    /// 修改任务
    @inlinable
    public func modifyTask(taskId: String, taskName: String? = nil, taskType: String? = nil, taskContent: String? = nil, executeType: String? = nil, taskRule: TaskRule? = nil, timeOut: UInt64? = nil, groupId: String? = nil, shardCount: Int64? = nil, shardArguments: [ShardArgument]? = nil, advanceSettings: AdvanceSettings? = nil, successOperator: String? = nil, successRatio: Int64? = nil, retryCount: UInt64? = nil, retryInterval: UInt64? = nil, taskArgument: String? = nil, programIdList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyTaskResponse {
        try await self.modifyTask(.init(taskId: taskId, taskName: taskName, taskType: taskType, taskContent: taskContent, executeType: executeType, taskRule: taskRule, timeOut: timeOut, groupId: groupId, shardCount: shardCount, shardArguments: shardArguments, advanceSettings: advanceSettings, successOperator: successOperator, successRatio: successRatio, retryCount: retryCount, retryInterval: retryInterval, taskArgument: taskArgument, programIdList: programIdList), region: region, logger: logger, on: eventLoop)
    }
}
