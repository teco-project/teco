//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Trro {
    /// DescribeSessionStatisticsByInterval请求参数结构体
    public struct DescribeSessionStatisticsByIntervalRequest: TCRequestModel {
        /// 项目ID
        public let projectId: String

        /// 统计时间间隔：hour|day|month
        public let statisticInterval: String

        /// 设备ID
        public let deviceId: String?

        /// 起始时间，单位：秒
        public let startTime: UInt64?

        /// 结束时间，单位：秒
        public let endTime: UInt64?

        public init(projectId: String, statisticInterval: String, deviceId: String? = nil, startTime: UInt64? = nil, endTime: UInt64? = nil) {
            self.projectId = projectId
            self.statisticInterval = statisticInterval
            self.deviceId = deviceId
            self.startTime = startTime
            self.endTime = endTime
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case statisticInterval = "StatisticInterval"
            case deviceId = "DeviceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// DescribeSessionStatisticsByInterval返回参数结构体
    public struct DescribeSessionStatisticsByIntervalResponse: TCResponseModel {
        /// 各时间段的会话统计数据
        public let sessionStatistics: [SessionIntervalStatistic]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case sessionStatistics = "SessionStatistics"
            case requestId = "RequestId"
        }
    }

    /// 获取各时间段的会话统计值
    @inlinable
    public func describeSessionStatisticsByInterval(_ input: DescribeSessionStatisticsByIntervalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSessionStatisticsByIntervalResponse> {
        self.client.execute(action: "DescribeSessionStatisticsByInterval", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取各时间段的会话统计值
    @inlinable
    public func describeSessionStatisticsByInterval(_ input: DescribeSessionStatisticsByIntervalRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSessionStatisticsByIntervalResponse {
        try await self.client.execute(action: "DescribeSessionStatisticsByInterval", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取各时间段的会话统计值
    @inlinable
    public func describeSessionStatisticsByInterval(projectId: String, statisticInterval: String, deviceId: String? = nil, startTime: UInt64? = nil, endTime: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeSessionStatisticsByIntervalResponse> {
        self.describeSessionStatisticsByInterval(.init(projectId: projectId, statisticInterval: statisticInterval, deviceId: deviceId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }

    /// 获取各时间段的会话统计值
    @inlinable
    public func describeSessionStatisticsByInterval(projectId: String, statisticInterval: String, deviceId: String? = nil, startTime: UInt64? = nil, endTime: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeSessionStatisticsByIntervalResponse {
        try await self.describeSessionStatisticsByInterval(.init(projectId: projectId, statisticInterval: statisticInterval, deviceId: deviceId, startTime: startTime, endTime: endTime), region: region, logger: logger, on: eventLoop)
    }
}
