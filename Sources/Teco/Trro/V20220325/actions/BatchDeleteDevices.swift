//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trro {
    /// BatchDeleteDevices请求参数结构体
    public struct BatchDeleteDevicesRequest: TCRequest {
        /// 目标删除设备所属项目ID
        public let projectId: String

        /// 目标删除设备的设备ID数组
        public let deviceIds: [String]

        public init(projectId: String, deviceIds: [String]) {
            self.projectId = projectId
            self.deviceIds = deviceIds
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case deviceIds = "DeviceIds"
        }
    }

    /// BatchDeleteDevices返回参数结构体
    public struct BatchDeleteDevicesResponse: TCResponse {
        /// 删除失败的设备ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let failedDeviceIds: [String]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case failedDeviceIds = "FailedDeviceIds"
            case requestId = "RequestId"
        }
    }

    /// 批量删除设备
    ///
    /// 用于批量删除设备
    @inlinable
    public func batchDeleteDevices(_ input: BatchDeleteDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeleteDevicesResponse> {
        self.client.execute(action: "BatchDeleteDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量删除设备
    ///
    /// 用于批量删除设备
    @inlinable
    public func batchDeleteDevices(_ input: BatchDeleteDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeleteDevicesResponse {
        try await self.client.execute(action: "BatchDeleteDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量删除设备
    ///
    /// 用于批量删除设备
    @inlinable
    public func batchDeleteDevices(projectId: String, deviceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeleteDevicesResponse> {
        self.batchDeleteDevices(.init(projectId: projectId, deviceIds: deviceIds), region: region, logger: logger, on: eventLoop)
    }

    /// 批量删除设备
    ///
    /// 用于批量删除设备
    @inlinable
    public func batchDeleteDevices(projectId: String, deviceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeleteDevicesResponse {
        try await self.batchDeleteDevices(.init(projectId: projectId, deviceIds: deviceIds), region: region, logger: logger, on: eventLoop)
    }
}
