//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trro {
    /// ModifyDevice请求参数结构体
    public struct ModifyDeviceRequest: TCRequest {
        /// 要修改设备归属项目的项目ID
        public let projectId: String

        /// 要修改设备的设备ID
        public let deviceId: String

        /// 修改后的设备名称，不填则不修改
        public let deviceName: String?

        /// 修改后的设备认证口令，不填则不修改
        public let deviceToken: String?

        public init(projectId: String, deviceId: String, deviceName: String? = nil, deviceToken: String? = nil) {
            self.projectId = projectId
            self.deviceId = deviceId
            self.deviceName = deviceName
            self.deviceToken = deviceToken
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case deviceId = "DeviceId"
            case deviceName = "DeviceName"
            case deviceToken = "DeviceToken"
        }
    }

    /// ModifyDevice返回参数结构体
    public struct ModifyDeviceResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改设备信息
    ///
    /// 用于修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(_ input: ModifyDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDeviceResponse> {
        self.client.execute(action: "ModifyDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改设备信息
    ///
    /// 用于修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(_ input: ModifyDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDeviceResponse {
        try await self.client.execute(action: "ModifyDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改设备信息
    ///
    /// 用于修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(projectId: String, deviceId: String, deviceName: String? = nil, deviceToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDeviceResponse> {
        self.modifyDevice(.init(projectId: projectId, deviceId: deviceId, deviceName: deviceName, deviceToken: deviceToken), region: region, logger: logger, on: eventLoop)
    }

    /// 修改设备信息
    ///
    /// 用于修改设备信息
    @inlinable @discardableResult
    public func modifyDevice(projectId: String, deviceId: String, deviceName: String? = nil, deviceToken: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDeviceResponse {
        try await self.modifyDevice(.init(projectId: projectId, deviceId: deviceId, deviceName: deviceName, deviceToken: deviceToken), region: region, logger: logger, on: eventLoop)
    }
}
