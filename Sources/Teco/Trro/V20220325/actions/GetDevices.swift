//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trro {
    /// GetDevices请求参数结构体
    public struct GetDevicesRequest: TCPaginatedRequest {
        /// 页码
        public let pageNum: Int64

        /// 页面数量
        public let pageSize: Int64

        /// 项目 ID
        public let projectId: String?

        /// 设备ID
        public let deviceId: String?

        public init(pageNum: Int64, pageSize: Int64, projectId: String? = nil, deviceId: String? = nil) {
            self.pageNum = pageNum
            self.pageSize = pageSize
            self.projectId = projectId
            self.deviceId = deviceId
        }

        enum CodingKeys: String, CodingKey {
            case pageNum = "PageNum"
            case pageSize = "PageSize"
            case projectId = "ProjectId"
            case deviceId = "DeviceId"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: GetDevicesResponse) -> GetDevicesRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(pageNum: self.pageNum + 1, pageSize: self.pageSize, projectId: self.projectId, deviceId: self.deviceId)
        }
    }

    /// GetDevices返回参数结构体
    public struct GetDevicesResponse: TCPaginatedResponse {
        /// 设备授权列表
        public let devices: [Device]

        /// 列表数量
        public let totalCount: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case devices = "Devices"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }

        /// Extract the returned ``Device`` list from the paginated response.
        public func getItems() -> [Device] {
            self.devices
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.totalCount
        }
    }

    /// 设备的授权列表
    ///
    /// 查询用户设备的授权绑定情况
    @inlinable
    public func getDevices(_ input: GetDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDevicesResponse> {
        self.client.execute(action: "GetDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设备的授权列表
    ///
    /// 查询用户设备的授权绑定情况
    @inlinable
    public func getDevices(_ input: GetDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDevicesResponse {
        try await self.client.execute(action: "GetDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设备的授权列表
    ///
    /// 查询用户设备的授权绑定情况
    @inlinable
    public func getDevices(pageNum: Int64, pageSize: Int64, projectId: String? = nil, deviceId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetDevicesResponse> {
        self.getDevices(.init(pageNum: pageNum, pageSize: pageSize, projectId: projectId, deviceId: deviceId), region: region, logger: logger, on: eventLoop)
    }

    /// 设备的授权列表
    ///
    /// 查询用户设备的授权绑定情况
    @inlinable
    public func getDevices(pageNum: Int64, pageSize: Int64, projectId: String? = nil, deviceId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDevicesResponse {
        try await self.getDevices(.init(pageNum: pageNum, pageSize: pageSize, projectId: projectId, deviceId: deviceId), region: region, logger: logger, on: eventLoop)
    }

    /// 设备的授权列表
    ///
    /// 查询用户设备的授权绑定情况
    @inlinable
    public func getDevicesPaginated(_ input: GetDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [Device])> {
        self.client.paginate(input: input, region: region, command: self.getDevices, logger: logger, on: eventLoop)
    }

    /// 设备的授权列表
    ///
    /// 查询用户设备的授权绑定情况
    @inlinable @discardableResult
    public func getDevicesPaginated(_ input: GetDevicesRequest, region: TCRegion? = nil, onResponse: @escaping (GetDevicesResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getDevices, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 设备的授权列表
    ///
    /// 查询用户设备的授权绑定情况
    ///
    /// - Returns: `AsyncSequence`s of ``Device`` and ``GetDevicesResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func getDevicesPaginator(_ input: GetDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<GetDevicesRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.getDevices, logger: logger, on: eventLoop)
    }
}
