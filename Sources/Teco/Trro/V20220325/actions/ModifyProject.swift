//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Trro {
    /// ModifyProject请求参数结构体
    public struct ModifyProjectRequest: TCRequestModel {
        /// 目标修改项目的项目ID
        public let projectId: String

        /// 修改后的项目名称，不填则不修改
        public let projectName: String?

        /// 修改后的项目描述，不填则不修改
        public let projectDescription: String?

        /// 修改后的权限模式，black为黑名单，white为白名单,不填则不修改
        public let policyMode: String?

        public init(projectId: String, projectName: String? = nil, projectDescription: String? = nil, policyMode: String? = nil) {
            self.projectId = projectId
            self.projectName = projectName
            self.projectDescription = projectDescription
            self.policyMode = policyMode
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case projectDescription = "ProjectDescription"
            case policyMode = "PolicyMode"
        }
    }

    /// ModifyProject返回参数结构体
    public struct ModifyProjectResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改项目
    ///
    /// 用于修改项目信息
    @inlinable @discardableResult
    public func modifyProject(_ input: ModifyProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProjectResponse> {
        self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改项目
    ///
    /// 用于修改项目信息
    @inlinable @discardableResult
    public func modifyProject(_ input: ModifyProjectRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProjectResponse {
        try await self.client.execute(action: "ModifyProject", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改项目
    ///
    /// 用于修改项目信息
    @inlinable @discardableResult
    public func modifyProject(projectId: String, projectName: String? = nil, projectDescription: String? = nil, policyMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyProjectResponse> {
        self.modifyProject(.init(projectId: projectId, projectName: projectName, projectDescription: projectDescription, policyMode: policyMode), region: region, logger: logger, on: eventLoop)
    }

    /// 修改项目
    ///
    /// 用于修改项目信息
    @inlinable @discardableResult
    public func modifyProject(projectId: String, projectName: String? = nil, projectDescription: String? = nil, policyMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyProjectResponse {
        try await self.modifyProject(.init(projectId: projectId, projectName: projectName, projectDescription: projectDescription, policyMode: policyMode), region: region, logger: logger, on: eventLoop)
    }
}
