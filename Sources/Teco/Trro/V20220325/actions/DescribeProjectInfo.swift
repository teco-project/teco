//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import Logging
import NIOCore
import TecoCore
import TecoDateHelpers

extension Trro {
    /// DescribeProjectInfo请求参数结构体
    public struct DescribeProjectInfoRequest: TCRequest {
        /// 目标项目ID
        public let projectId: String?

        public init(projectId: String? = nil) {
            self.projectId = projectId
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
        }
    }

    /// DescribeProjectInfo返回参数结构体
    public struct DescribeProjectInfoResponse: TCResponse {
        /// 项目名称
        public let projectName: String

        /// 项目描述
        public let projectDescription: String

        /// 项目权限模式，black为黑名单，white为白名单
        public let policyMode: String

        /// 项目信息修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifyTime: Date

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case projectName = "ProjectName"
            case projectDescription = "ProjectDescription"
            case policyMode = "PolicyMode"
            case modifyTime = "ModifyTime"
            case requestId = "RequestId"
        }
    }

    /// 查询项目信息
    ///
    /// 用于获取项目信息
    @inlinable
    public func describeProjectInfo(_ input: DescribeProjectInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProjectInfoResponse> {
        self.client.execute(action: "DescribeProjectInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询项目信息
    ///
    /// 用于获取项目信息
    @inlinable
    public func describeProjectInfo(_ input: DescribeProjectInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProjectInfoResponse {
        try await self.client.execute(action: "DescribeProjectInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询项目信息
    ///
    /// 用于获取项目信息
    @inlinable
    public func describeProjectInfo(projectId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProjectInfoResponse> {
        self.describeProjectInfo(.init(projectId: projectId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询项目信息
    ///
    /// 用于获取项目信息
    @inlinable
    public func describeProjectInfo(projectId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProjectInfoResponse {
        try await self.describeProjectInfo(.init(projectId: projectId), region: region, logger: logger, on: eventLoop)
    }
}
