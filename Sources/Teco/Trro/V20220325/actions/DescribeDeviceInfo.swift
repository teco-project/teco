//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Trro {
    /// DescribeDeviceInfo请求参数结构体
    public struct DescribeDeviceInfoRequest: TCRequestModel {
        /// 目标设备所属项目ID
        public let projectId: String

        /// 目标设备ID
        public let deviceId: String

        public init(projectId: String, deviceId: String) {
            self.projectId = projectId
            self.deviceId = deviceId
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case deviceId = "DeviceId"
        }
    }

    /// DescribeDeviceInfo返回参数结构体
    public struct DescribeDeviceInfoResponse: TCResponseModel {
        /// 设备名称
        public let deviceName: String

        /// 设备类型，field为现场设备（被控方），remote为远端设备（操控方）
        public let deviceType: String

        /// 设备状态，offline为离线，ready为在线准备，connected为会话中
        public let deviceStatus: String

        /// 设备状态最后更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastReportTime: Date

        /// 设备信息最后修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifyTime: Date

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case deviceType = "DeviceType"
            case deviceStatus = "DeviceStatus"
            case lastReportTime = "LastReportTime"
            case modifyTime = "ModifyTime"
            case requestId = "RequestId"
        }
    }

    /// 查询设备信息
    ///
    /// 用于获取指定设备信息
    @inlinable
    public func describeDeviceInfo(_ input: DescribeDeviceInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeviceInfoResponse> {
        self.client.execute(action: "DescribeDeviceInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询设备信息
    ///
    /// 用于获取指定设备信息
    @inlinable
    public func describeDeviceInfo(_ input: DescribeDeviceInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeviceInfoResponse {
        try await self.client.execute(action: "DescribeDeviceInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询设备信息
    ///
    /// 用于获取指定设备信息
    @inlinable
    public func describeDeviceInfo(projectId: String, deviceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDeviceInfoResponse> {
        self.describeDeviceInfo(.init(projectId: projectId, deviceId: deviceId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询设备信息
    ///
    /// 用于获取指定设备信息
    @inlinable
    public func describeDeviceInfo(projectId: String, deviceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeviceInfoResponse {
        try await self.describeDeviceInfo(.init(projectId: projectId, deviceId: deviceId), region: region, logger: logger, on: eventLoop)
    }
}
