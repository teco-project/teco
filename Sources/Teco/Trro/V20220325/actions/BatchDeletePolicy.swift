//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trro {
    /// BatchDeletePolicy请求参数结构体
    public struct BatchDeletePolicyRequest: TCRequest {
        /// 删除权限配置的项目ID
        public let projectId: String

        /// 删除权限配置的远端设备ID列表
        public let remoteDeviceIds: [String]

        /// 删除权限配置的权限模式, black为黑名单，white为白名单
        public let policyMode: String

        public init(projectId: String, remoteDeviceIds: [String], policyMode: String) {
            self.projectId = projectId
            self.remoteDeviceIds = remoteDeviceIds
            self.policyMode = policyMode
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case remoteDeviceIds = "RemoteDeviceIds"
            case policyMode = "PolicyMode"
        }
    }

    /// BatchDeletePolicy返回参数结构体
    public struct BatchDeletePolicyResponse: TCResponse {
        /// 删除权限配置失败的远端设备ID列表
        public let failedRemoteDeviceIds: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case failedRemoteDeviceIds = "FailedRemoteDeviceIds"
            case requestId = "RequestId"
        }
    }

    /// 批量删除权限
    ///
    /// 用于批量删除修改权限配置
    @inlinable
    public func batchDeletePolicy(_ input: BatchDeletePolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeletePolicyResponse> {
        self.client.execute(action: "BatchDeletePolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量删除权限
    ///
    /// 用于批量删除修改权限配置
    @inlinable
    public func batchDeletePolicy(_ input: BatchDeletePolicyRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeletePolicyResponse {
        try await self.client.execute(action: "BatchDeletePolicy", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量删除权限
    ///
    /// 用于批量删除修改权限配置
    @inlinable
    public func batchDeletePolicy(projectId: String, remoteDeviceIds: [String], policyMode: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<BatchDeletePolicyResponse> {
        self.batchDeletePolicy(.init(projectId: projectId, remoteDeviceIds: remoteDeviceIds, policyMode: policyMode), region: region, logger: logger, on: eventLoop)
    }

    /// 批量删除权限
    ///
    /// 用于批量删除修改权限配置
    @inlinable
    public func batchDeletePolicy(projectId: String, remoteDeviceIds: [String], policyMode: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> BatchDeletePolicyResponse {
        try await self.batchDeletePolicy(.init(projectId: projectId, remoteDeviceIds: remoteDeviceIds, policyMode: policyMode), region: region, logger: logger, on: eventLoop)
    }
}
