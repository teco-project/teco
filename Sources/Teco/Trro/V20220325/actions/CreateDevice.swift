//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Trro {
    /// CreateDevice请求参数结构体
    public struct CreateDeviceRequest: TCRequestModel {
        /// 创建设备所归属的项目ID
        public let projectId: String

        /// 创建设备ID，项目内需要唯一，由小写英文字母、数字和下划线构成，长度不超过18
        public let deviceId: String

        /// 创建设备名称，长度小于24, 可包含中文、数字、英文字母和下划线
        public let deviceName: String

        /// 设备类型，field为现场设备（受控设备），remote为远端设备（操控设备），不填默认为field
        public let deviceType: String

        /// 设备认证口令，由大小写英文字母和数字构成，须为16位
        public let deviceToken: String

        public init(projectId: String, deviceId: String, deviceName: String, deviceType: String, deviceToken: String) {
            self.projectId = projectId
            self.deviceId = deviceId
            self.deviceName = deviceName
            self.deviceType = deviceType
            self.deviceToken = deviceToken
        }

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case deviceId = "DeviceId"
            case deviceName = "DeviceName"
            case deviceType = "DeviceType"
            case deviceToken = "DeviceToken"
        }
    }

    /// CreateDevice返回参数结构体
    public struct CreateDeviceResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 创建设备
    ///
    /// 用于创建设备
    @inlinable @discardableResult
    public func createDevice(_ input: CreateDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDeviceResponse> {
        self.client.execute(action: "CreateDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建设备
    ///
    /// 用于创建设备
    @inlinable @discardableResult
    public func createDevice(_ input: CreateDeviceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDeviceResponse {
        try await self.client.execute(action: "CreateDevice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建设备
    ///
    /// 用于创建设备
    @inlinable @discardableResult
    public func createDevice(projectId: String, deviceId: String, deviceName: String, deviceType: String, deviceToken: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateDeviceResponse> {
        self.createDevice(.init(projectId: projectId, deviceId: deviceId, deviceName: deviceName, deviceType: deviceType, deviceToken: deviceToken), region: region, logger: logger, on: eventLoop)
    }

    /// 创建设备
    ///
    /// 用于创建设备
    @inlinable @discardableResult
    public func createDevice(projectId: String, deviceId: String, deviceName: String, deviceType: String, deviceToken: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDeviceResponse {
        try await self.createDevice(.init(projectId: projectId, deviceId: deviceId, deviceName: deviceName, deviceType: deviceType, deviceToken: deviceToken), region: region, logger: logger, on: eventLoop)
    }
}
