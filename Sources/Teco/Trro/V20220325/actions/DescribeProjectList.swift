//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Trro {
    /// DescribeProjectList请求参数结构体
    public struct DescribeProjectListRequest: TCPaginatedRequest {
        /// 每页返回的最大项目数量，不填默认为10
        public let pageSize: Int64?

        /// 当前页码，不填默认为1（首页）
        public let pageNumber: Int64?

        public init(pageSize: Int64? = nil, pageNumber: Int64? = nil) {
            self.pageSize = pageSize
            self.pageNumber = pageNumber
        }

        enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case pageNumber = "PageNumber"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeProjectListResponse) -> DescribeProjectListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeProjectListRequest(pageSize: self.pageSize, pageNumber: (self.pageNumber ?? 0) + 1)
        }
    }

    /// DescribeProjectList返回参数结构体
    public struct DescribeProjectListResponse: TCPaginatedResponse {
        /// 项目信息数组
        public let projects: [ProjectInfo]

        /// 项目总数
        public let total: Int64

        /// 本次返回的项目数
        public let num: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case projects = "Projects"
            case total = "Total"
            case num = "Num"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ProjectInfo`` list from the paginated response.
        public func getItems() -> [ProjectInfo] {
            self.projects
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 获取项目列表
    ///
    /// 用于获取项目列表
    @inlinable
    public func describeProjectList(_ input: DescribeProjectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProjectListResponse> {
        self.client.execute(action: "DescribeProjectList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取项目列表
    ///
    /// 用于获取项目列表
    @inlinable
    public func describeProjectList(_ input: DescribeProjectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProjectListResponse {
        try await self.client.execute(action: "DescribeProjectList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取项目列表
    ///
    /// 用于获取项目列表
    @inlinable
    public func describeProjectList(pageSize: Int64? = nil, pageNumber: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProjectListResponse> {
        self.describeProjectList(.init(pageSize: pageSize, pageNumber: pageNumber), region: region, logger: logger, on: eventLoop)
    }

    /// 获取项目列表
    ///
    /// 用于获取项目列表
    @inlinable
    public func describeProjectList(pageSize: Int64? = nil, pageNumber: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProjectListResponse {
        try await self.describeProjectList(.init(pageSize: pageSize, pageNumber: pageNumber), region: region, logger: logger, on: eventLoop)
    }

    /// 获取项目列表
    ///
    /// 用于获取项目列表
    @inlinable
    public func describeProjectListPaginated(_ input: DescribeProjectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [ProjectInfo])> {
        self.client.paginate(input: input, region: region, command: self.describeProjectList, logger: logger, on: eventLoop)
    }

    /// 获取项目列表
    ///
    /// 用于获取项目列表
    @inlinable @discardableResult
    public func describeProjectListPaginated(_ input: DescribeProjectListRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeProjectListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeProjectList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取项目列表
    ///
    /// 用于获取项目列表
    ///
    /// - Returns: `AsyncSequence`s of `ProjectInfo` and `DescribeProjectListResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeProjectListPaginator(_ input: DescribeProjectListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeProjectListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeProjectList, logger: logger, on: eventLoop)
    }
}
