//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Trro {
    /// 查询用户设备的授权绑定情况
    public struct Device: TCOutputModel {
        /// 设备ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deviceId: String?

        /// 设备名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let deviceName: String?

        /// 已经绑定license数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let licenseCount: Int64?

        /// 剩余天数：天
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remainDay: Int64?

        /// 过期时间：s
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 服务时长：s
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let duration: String?

        /// 已经绑定licenseId列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let licenseIds: [String]?

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case deviceName = "DeviceName"
            case licenseCount = "LicenseCount"
            case remainDay = "RemainDay"
            case expireTime = "ExpireTime"
            case duration = "Duration"
            case licenseIds = "LicenseIds"
        }
    }

    /// 设备信息
    public struct DeviceInfo: TCOutputModel {
        /// 设备ID
        public let deviceId: String

        /// 设备名称
        public let deviceName: String

        /// 设备状态，offline为离线，ready为在线准备，connected为会话中
        public let deviceStatus: String

        /// 设备类型，field为现场设备（受控方），remote为远端设备（操控方）
        public let deviceType: String

        /// 设备信息最近修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifyTime: Date

        /// 设备状态最近更新时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var lastReportTime: Date

        /// 设备所属项目Id
        public let projectId: String

        enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case deviceName = "DeviceName"
            case deviceStatus = "DeviceStatus"
            case deviceType = "DeviceType"
            case modifyTime = "ModifyTime"
            case lastReportTime = "LastReportTime"
            case projectId = "ProjectId"
        }
    }

    /// 按授权查看的license列表
    public struct License: TCOutputModel {
        /// 该类型的license个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let count: Int64?

        /// license状态：0:未绑定；1:已绑定；2:已停服；3:已退费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 到期时间戳：s
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let expireTime: String?

        /// 服务时长：s
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let duration: String?

        /// 剩余天数：天
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remainDay: Int64?

        /// 该类型的licenseId列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let licenseIds: [String]?

        enum CodingKeys: String, CodingKey {
            case count = "Count"
            case status = "Status"
            case expireTime = "ExpireTime"
            case duration = "Duration"
            case remainDay = "RemainDay"
            case licenseIds = "LicenseIds"
        }
    }

    /// 权限信息
    public struct PolicyInfo: TCOutputModel {
        /// 远端设备ID
        public let remoteDeviceId: String

        /// 关联的现场设备ID
        public let fieldDeviceIds: [String]

        /// 最近添加时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifyTime: Date

        enum CodingKeys: String, CodingKey {
            case remoteDeviceId = "RemoteDeviceId"
            case fieldDeviceIds = "FieldDeviceIds"
            case modifyTime = "ModifyTime"
        }
    }

    /// 项目信息
    public struct ProjectInfo: TCOutputModel {
        /// 项目ID
        public let projectId: String

        /// 项目名称
        public let projectName: String

        /// 项目描述
        public let projectDescription: String

        /// 项目权限模式，black为黑名单，white为白名单
        public let policyMode: String

        /// 项目信息修改时间
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var modifyTime: Date

        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case projectDescription = "ProjectDescription"
            case policyMode = "PolicyMode"
            case modifyTime = "ModifyTime"
        }
    }

    /// 最新会话信息
    public struct RecentSessionInfo: TCOutputModel {
        /// 会话ID
        public let sessionId: String

        /// 远端设备ID
        public let remoteDeviceId: String

        /// 现场设备ID
        public let fieldDeviceId: String

        /// 分辨率
        public let resolution: String

        /// 会话开始时间
        public let startTime: UInt64

        /// 最后更新时间
        public let latestUpdateTime: UInt64

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case remoteDeviceId = "RemoteDeviceId"
            case fieldDeviceId = "FieldDeviceId"
            case resolution = "Resolution"
            case startTime = "StartTime"
            case latestUpdateTime = "LatestUpdateTime"
        }
    }

    /// 会话数据详单（按设备区分）
    public struct SessionDeviceDetail: TCOutputModel {
        /// 设备类型：field或remote
        public let deviceType: String

        /// 起始点位时间，单位：秒
        public let startTime: UInt64

        /// 结束点位时间，单位：秒
        public let endTime: UInt64

        /// 会话ID
        public let sessionId: String

        /// 码率，单位：kbps
        public let rate: [Int64]

        /// 帧率
        public let fps: [Int64]

        /// 丢包率，单位：%
        public let lost: [Float]

        /// 网络时延，单位：ms
        public let networkLatency: [Int64]

        /// 视频时延，单位：ms
        public let videoLatency: [Int64]

        /// CPU使用率，单位：%
        public let cpuUsed: [Float]

        /// 内存使用率，单位：%
        public let memUsed: [Float]

        /// 时间偏移量，单位：秒
        public let timeOffset: [UInt64]

        /// 项目ID
        public let projectId: String

        /// 设备ID
        public let deviceId: String

        enum CodingKeys: String, CodingKey {
            case deviceType = "DeviceType"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case sessionId = "SessionId"
            case rate = "Rate"
            case fps = "Fps"
            case lost = "Lost"
            case networkLatency = "NetworkLatency"
            case videoLatency = "VideoLatency"
            case cpuUsed = "CpuUsed"
            case memUsed = "MemUsed"
            case timeOffset = "TimeOffset"
            case projectId = "ProjectId"
            case deviceId = "DeviceId"
        }
    }

    /// 会话信息
    public struct SessionInfo: TCOutputModel {
        /// 会话ID
        public let sessionId: String

        /// 远端设备ID
        public let remoteDeviceId: String

        /// 现场设备ID
        public let fieldDeviceId: String

        /// 分辨率
        public let resolution: String

        /// 会话开始时间
        public let startTime: UInt64

        /// 会话结束时间
        public let endTime: UInt64

        /// 通话质量：good|normal|bad，对应优良差
        public let quality: String

        enum CodingKeys: String, CodingKey {
            case sessionId = "SessionId"
            case remoteDeviceId = "RemoteDeviceId"
            case fieldDeviceId = "FieldDeviceId"
            case resolution = "Resolution"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case quality = "Quality"
        }
    }

    /// 单位时间间隔的会话统计数据
    public struct SessionIntervalStatistic: TCOutputModel {
        /// 活跃现场设备数
        public let activeFieldDeviceNum: UInt64

        /// 活跃远端设备数
        public let activeRemoteDeviceNum: UInt64

        /// 会话数量
        public let sessionNum: UInt64

        /// 会话时长，单位：分钟
        public let totalDuration: UInt64

        /// 时间戳，单位：秒
        public let startTime: UInt64

        /// 时间戳，单位：秒
        public let endTime: UInt64

        /// 优良会话占比，单位：%
        public let notBadSessionRatio: UInt64

        enum CodingKeys: String, CodingKey {
            case activeFieldDeviceNum = "ActiveFieldDeviceNum"
            case activeRemoteDeviceNum = "ActiveRemoteDeviceNum"
            case sessionNum = "SessionNum"
            case totalDuration = "TotalDuration"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case notBadSessionRatio = "NotBadSessionRatio"
        }
    }
}
