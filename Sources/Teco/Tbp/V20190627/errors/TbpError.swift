//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

/// Service error type returned by `Tbp`.
public protocol TCTbpErrorType: TCServiceErrorType {
    /// Get the service error as ``TCTbpError``.
    ///
    /// - Returns: ``TCTbpError`` that holds the same error code and context.
    func asTbpError() -> TCTbpError
}

public struct TCTbpError: TCTbpErrorType {
    enum Code: String {
        case internalError = "InternalError"
        case internalError_ErrorMms = "InternalError.ErrorMms"
        case internalError_ErrorNlu = "InternalError.ErrorNlu"
        case internalError_ErrorRpc = "InternalError.ErrorRpc"
        case internalError_ErrorWebHook = "InternalError.ErrorWebHook"
        case internalError_NoAppPrivilege = "InternalError.NoAppPrivilege"
        case invalidParameter = "InvalidParameter"
    }

    /// Error domains affliated to ``TCTbpError``.
    public static var domains: [TCErrorType.Type] {
        [InternalError.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 内部错误。
    public static var internalError: TCTbpError {
        TCTbpError(.internalError)
    }

    /// 查询数据库失败，没有对应数据。
    public static var internalError_ErrorMms: TCTbpError {
        TCTbpError(.internalError_ErrorMms)
    }

    /// nlu处理失败。
    public static var internalError_ErrorNlu: TCTbpError {
        TCTbpError(.internalError_ErrorNlu)
    }

    /// rpc调用失败。
    public static var internalError_ErrorRpc: TCTbpError {
        TCTbpError(.internalError_ErrorRpc)
    }

    /// webHook处理失败。
    public static var internalError_ErrorWebHook: TCTbpError {
        TCTbpError(.internalError_ErrorWebHook)
    }

    /// 未开通相关应用访问权限。
    public static var internalError_NoAppPrivilege: TCTbpError {
        TCTbpError(.internalError_NoAppPrivilege)
    }

    /// 参数错误。
    public static var invalidParameter: TCTbpError {
        TCTbpError(.invalidParameter)
    }

    public func asTbpError() -> TCTbpError {
        return self
    }
}
