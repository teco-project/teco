//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCBatchError {
    public struct LimitExceeded: TCBatchErrorType {
        enum Code: String {
            case computeEnvQuota = "LimitExceeded.ComputeEnvQuota"
            case cpuQuota = "LimitExceeded.CpuQuota"
            case jobQuota = "LimitExceeded.JobQuota"
            case taskTemplateQuota = "LimitExceeded.TaskTemplateQuota"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 计算环境配额不足。
        public static var computeEnvQuota: LimitExceeded {
            LimitExceeded(.computeEnvQuota)
        }

        /// CPU配额不足。
        public static var cpuQuota: LimitExceeded {
            LimitExceeded(.cpuQuota)
        }

        /// 作业配额不足。
        public static var jobQuota: LimitExceeded {
            LimitExceeded(.jobQuota)
        }

        /// 任务模板配额不足。
        public static var taskTemplateQuota: LimitExceeded {
            LimitExceeded(.taskTemplateQuota)
        }

        public func asBatchError() -> TCBatchError {
            let code: TCBatchError.Code
            switch self.error {
            case .computeEnvQuota:
                code = .limitExceeded_ComputeEnvQuota
            case .cpuQuota:
                code = .limitExceeded_CpuQuota
            case .jobQuota:
                code = .limitExceeded_JobQuota
            case .taskTemplateQuota:
                code = .limitExceeded_TaskTemplateQuota
            }
            return TCBatchError(code, context: self.context)
        }
    }
}
