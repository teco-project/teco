//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCBatchError {
    public struct UnsupportedOperation: TCErrorType {
        enum Code: String {
            case acceptOtherRequest = "UnsupportedOperation.AcceptOtherRequest"
            case computeEnvAcceptOtherRequest = "UnsupportedOperation.ComputeEnvAcceptOtherRequest"
            case computeEnvOperation = "UnsupportedOperation.ComputeEnvOperation"
            case computeNodeForbidTerminate = "UnsupportedOperation.ComputeNodeForbidTerminate"
            case computeNodeIsTerminating = "UnsupportedOperation.ComputeNodeIsTerminating"
            case instancesNotAllowToAttach = "UnsupportedOperation.InstancesNotAllowToAttach"
            case notEnoughComputeNodesToTerminate = "UnsupportedOperation.NotEnoughComputeNodesToTerminate"
            case terminateOperationWithEnvId = "UnsupportedOperation.TerminateOperationWithEnvId"
            case other = "UnsupportedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 处理其他请求，禁止删除操作。
        public static var acceptOtherRequest: UnsupportedOperation {
            UnsupportedOperation(.acceptOtherRequest)
        }
        
        /// 计算环境正在接受请求。
        public static var computeEnvAcceptOtherRequest: UnsupportedOperation {
            UnsupportedOperation(.computeEnvAcceptOtherRequest)
        }
        
        /// 禁止删除操作。
        public static var computeEnvOperation: UnsupportedOperation {
            UnsupportedOperation(.computeEnvOperation)
        }
        
        /// 禁止终止计算节点。
        public static var computeNodeForbidTerminate: UnsupportedOperation {
            UnsupportedOperation(.computeNodeForbidTerminate)
        }
        
        /// 计算节点停止中。
        public static var computeNodeIsTerminating: UnsupportedOperation {
            UnsupportedOperation(.computeNodeIsTerminating)
        }
        
        /// 不允许将该实例添加到计算环境中。
        public static var instancesNotAllowToAttach: UnsupportedOperation {
            UnsupportedOperation(.instancesNotAllowToAttach)
        }
        
        /// 缩容时，缩容数大于现有计算节点数。
        public static var notEnoughComputeNodesToTerminate: UnsupportedOperation {
            UnsupportedOperation(.notEnoughComputeNodesToTerminate)
        }
        
        /// 指定计算环境的任务实例禁止该操作。
        public static var terminateOperationWithEnvId: UnsupportedOperation {
            UnsupportedOperation(.terminateOperationWithEnvId)
        }
        
        /// 操作不支持。
        public static var other: UnsupportedOperation {
            UnsupportedOperation(.other)
        }
    }
}

extension TCBatchError.UnsupportedOperation: Equatable {
    public static func == (lhs: TCBatchError.UnsupportedOperation, rhs: TCBatchError.UnsupportedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCBatchError.UnsupportedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCBatchError.UnsupportedOperation {
    public func toBatchError() -> TCBatchError {
        guard let code = TCBatchError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCBatchError(code, context: self.context)
    }
}