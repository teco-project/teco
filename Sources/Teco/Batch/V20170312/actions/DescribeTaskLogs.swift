//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore
import TecoPaginationHelpers

extension Batch {
    /// DescribeTaskLogs请求参数结构体
    public struct DescribeTaskLogsRequest: TCPaginatedRequest {
        /// 作业ID
        public let jobId: String

        /// 任务名称
        public let taskName: String

        /// 任务实例集合
        public let taskInstanceIndexes: [UInt64]?

        /// 起始任务实例
        public let offset: UInt64?

        /// 最大任务实例数
        public let limit: UInt64?

        public init(jobId: String, taskName: String, taskInstanceIndexes: [UInt64]? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.jobId = jobId
            self.taskName = taskName
            self.taskInstanceIndexes = taskInstanceIndexes
            self.offset = offset
            self.limit = limit
        }

        enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case taskName = "TaskName"
            case taskInstanceIndexes = "TaskInstanceIndexes"
            case offset = "Offset"
            case limit = "Limit"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: DescribeTaskLogsResponse) -> DescribeTaskLogsRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return DescribeTaskLogsRequest(jobId: self.jobId, taskName: self.taskName, taskInstanceIndexes: self.taskInstanceIndexes, offset: (self.offset ?? 0) + .init(response.getItems().count), limit: self.limit)
        }
    }

    /// DescribeTaskLogs返回参数结构体
    public struct DescribeTaskLogsResponse: TCPaginatedResponse {
        /// 任务实例总数
        public let totalCount: UInt64

        /// 任务实例日志详情集合
        public let taskInstanceLogSet: [TaskInstanceLog]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case taskInstanceLogSet = "TaskInstanceLogSet"
            case requestId = "RequestId"
        }

        /// Extract the returned ``TaskInstanceLog`` list from the paginated response.
        public func getItems() -> [TaskInstanceLog] {
            self.taskInstanceLogSet
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 获取任务日志详情
    ///
    /// 用于获取任务多个实例标准输出和标准错误日志。
    @inlinable
    public func describeTaskLogs(_ input: DescribeTaskLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskLogsResponse> {
        self.client.execute(action: "DescribeTaskLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取任务日志详情
    ///
    /// 用于获取任务多个实例标准输出和标准错误日志。
    @inlinable
    public func describeTaskLogs(_ input: DescribeTaskLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskLogsResponse {
        try await self.client.execute(action: "DescribeTaskLogs", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取任务日志详情
    ///
    /// 用于获取任务多个实例标准输出和标准错误日志。
    @inlinable
    public func describeTaskLogs(jobId: String, taskName: String, taskInstanceIndexes: [UInt64]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeTaskLogsResponse> {
        self.describeTaskLogs(.init(jobId: jobId, taskName: taskName, taskInstanceIndexes: taskInstanceIndexes, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取任务日志详情
    ///
    /// 用于获取任务多个实例标准输出和标准错误日志。
    @inlinable
    public func describeTaskLogs(jobId: String, taskName: String, taskInstanceIndexes: [UInt64]? = nil, offset: UInt64? = nil, limit: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeTaskLogsResponse {
        try await self.describeTaskLogs(.init(jobId: jobId, taskName: taskName, taskInstanceIndexes: taskInstanceIndexes, offset: offset, limit: limit), region: region, logger: logger, on: eventLoop)
    }

    /// 获取任务日志详情
    ///
    /// 用于获取任务多个实例标准输出和标准错误日志。
    @inlinable
    public func describeTaskLogsPaginated(_ input: DescribeTaskLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [TaskInstanceLog])> {
        self.client.paginate(input: input, region: region, command: self.describeTaskLogs, logger: logger, on: eventLoop)
    }

    /// 获取任务日志详情
    ///
    /// 用于获取任务多个实例标准输出和标准错误日志。
    @inlinable @discardableResult
    public func describeTaskLogsPaginated(_ input: DescribeTaskLogsRequest, region: TCRegion? = nil, onResponse: @escaping (DescribeTaskLogsResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.describeTaskLogs, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 获取任务日志详情
    ///
    /// 用于获取任务多个实例标准输出和标准错误日志。
    ///
    /// - Returns: `AsyncSequence`s of `TaskInstanceLog` and `DescribeTaskLogsResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func describeTaskLogsPaginator(_ input: DescribeTaskLogsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<DescribeTaskLogsRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.describeTaskLogs, logger: logger, on: eventLoop)
    }
}
