//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Batch {
    /// DescribeComputeEnv请求参数结构体
    public struct DescribeComputeEnvRequest: TCRequestModel {
        /// 计算环境ID
        public let envId: String

        public init(envId: String) {
            self.envId = envId
        }

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
        }
    }

    /// DescribeComputeEnv返回参数结构体
    public struct DescribeComputeEnvResponse: TCResponseModel {
        /// 计算环境ID
        public let envId: String

        /// 计算环境名称
        public let envName: String

        /// 位置信息
        public let placement: Placement

        /// 计算环境创建时间
        public let createTime: String

        /// 计算节点列表信息
        public let computeNodeSet: [ComputeNode]

        /// 计算节点统计指标
        public let computeNodeMetrics: ComputeNodeMetrics

        /// 计算节点期望个数
        public let desiredComputeNodeCount: UInt64

        /// 计算环境类型
        public let envType: String

        /// 计算环境资源类型，当前为CVM和CPM（黑石）
        public let resourceType: String

        /// 下一步动作
        public let nextAction: String

        /// 用户添加到计算环境中的计算节点个数
        public let attachedComputeNodeCount: UInt64

        /// 计算环境绑定的标签列表。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tags: [Tag]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case envId = "EnvId"
            case envName = "EnvName"
            case placement = "Placement"
            case createTime = "CreateTime"
            case computeNodeSet = "ComputeNodeSet"
            case computeNodeMetrics = "ComputeNodeMetrics"
            case desiredComputeNodeCount = "DesiredComputeNodeCount"
            case envType = "EnvType"
            case resourceType = "ResourceType"
            case nextAction = "NextAction"
            case attachedComputeNodeCount = "AttachedComputeNodeCount"
            case tags = "Tags"
            case requestId = "RequestId"
        }
    }

    /// 获取计算环境详情
    ///
    /// 用于查询计算环境的详细信息
    @inlinable
    public func describeComputeEnv(_ input: DescribeComputeEnvRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeComputeEnvResponse> {
        self.client.execute(action: "DescribeComputeEnv", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取计算环境详情
    ///
    /// 用于查询计算环境的详细信息
    @inlinable
    public func describeComputeEnv(_ input: DescribeComputeEnvRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeComputeEnvResponse {
        try await self.client.execute(action: "DescribeComputeEnv", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取计算环境详情
    ///
    /// 用于查询计算环境的详细信息
    @inlinable
    public func describeComputeEnv(envId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeComputeEnvResponse> {
        self.describeComputeEnv(.init(envId: envId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取计算环境详情
    ///
    /// 用于查询计算环境的详细信息
    @inlinable
    public func describeComputeEnv(envId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeComputeEnvResponse {
        try await self.describeComputeEnv(.init(envId: envId), region: region, logger: logger, on: eventLoop)
    }
}
