//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Batch {
    /// CreateTaskTemplate请求参数结构体
    public struct CreateTaskTemplateRequest: TCRequestModel {
        /// 任务模板名称
        public let taskTemplateName: String

        /// 任务模板内容，参数要求与任务一致
        public let taskTemplateInfo: Task

        /// 任务模板描述
        public let taskTemplateDescription: String?

        /// 标签列表。通过指定该参数可以支持绑定标签到任务模板。每个任务模板最多绑定10个标签。
        public let tags: [Tag]?

        public init(taskTemplateName: String, taskTemplateInfo: Task, taskTemplateDescription: String? = nil, tags: [Tag]? = nil) {
            self.taskTemplateName = taskTemplateName
            self.taskTemplateInfo = taskTemplateInfo
            self.taskTemplateDescription = taskTemplateDescription
            self.tags = tags
        }

        enum CodingKeys: String, CodingKey {
            case taskTemplateName = "TaskTemplateName"
            case taskTemplateInfo = "TaskTemplateInfo"
            case taskTemplateDescription = "TaskTemplateDescription"
            case tags = "Tags"
        }
    }

    /// CreateTaskTemplate返回参数结构体
    public struct CreateTaskTemplateResponse: TCResponseModel {
        /// 任务模板ID
        public let taskTemplateId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskTemplateId = "TaskTemplateId"
            case requestId = "RequestId"
        }
    }

    /// 创建任务模板
    ///
    /// 用于创建任务模板
    @inlinable
    public func createTaskTemplate(_ input: CreateTaskTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateTaskTemplateResponse> {
        self.client.execute(action: "CreateTaskTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建任务模板
    ///
    /// 用于创建任务模板
    @inlinable
    public func createTaskTemplate(_ input: CreateTaskTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTaskTemplateResponse {
        try await self.client.execute(action: "CreateTaskTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建任务模板
    ///
    /// 用于创建任务模板
    @inlinable
    public func createTaskTemplate(taskTemplateName: String, taskTemplateInfo: Task, taskTemplateDescription: String? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateTaskTemplateResponse> {
        let input = CreateTaskTemplateRequest(taskTemplateName: taskTemplateName, taskTemplateInfo: taskTemplateInfo, taskTemplateDescription: taskTemplateDescription, tags: tags)
        return self.client.execute(action: "CreateTaskTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建任务模板
    ///
    /// 用于创建任务模板
    @inlinable
    public func createTaskTemplate(taskTemplateName: String, taskTemplateInfo: Task, taskTemplateDescription: String? = nil, tags: [Tag]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTaskTemplateResponse {
        let input = CreateTaskTemplateRequest(taskTemplateName: taskTemplateName, taskTemplateInfo: taskTemplateInfo, taskTemplateDescription: taskTemplateDescription, tags: tags)
        return try await self.client.execute(action: "CreateTaskTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
