//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cfw {
    /// 访问控制列表对象
    public struct AcListsData: TCOutputModel {
        /// 规则id
        public let id: UInt64

        /// 访问源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceIp: String?

        /// 访问目的
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetIp: String?

        /// 协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategy: UInt64?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: String?

        /// 命中次数
        public let count: UInt64

        /// 执行顺序
        public let orderIndex: UInt64

        /// 告警规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logId: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case sourceIp = "SourceIp"
            case targetIp = "TargetIp"
            case `protocol` = "Protocol"
            case port = "Port"
            case strategy = "Strategy"
            case detail = "Detail"
            case count = "Count"
            case orderIndex = "OrderIndex"
            case logId = "LogId"
        }
    }

    /// AssetZone
    public struct AssetZone: TCOutputModel {
        /// 地域
        public let zone: String

        /// 地域英文
        public let zoneEng: String

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneEng = "ZoneEng"
        }
    }

    /// 企业安全组关联实例信息
    public struct AssociatedInstanceInfo: TCInputModel, TCOutputModel {
        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 实例类型，3是cvm实例,4是clb实例,5是eni实例,6是云数据库
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: UInt64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 私有网络名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcName: String?

        /// 公网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// 关联安全组数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityGroupCount: UInt64?

        public init(instanceId: String, instanceName: String, type: UInt64, vpcId: String, vpcName: String, publicIp: String, ip: String, securityGroupCount: UInt64) {
            self.instanceId = instanceId
            self.instanceName = instanceName
            self.type = type
            self.vpcId = vpcId
            self.vpcName = vpcName
            self.publicIp = publicIp
            self.ip = ip
            self.securityGroupCount = securityGroupCount
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case type = "Type"
            case vpcId = "VpcId"
            case vpcName = "VpcName"
            case publicIp = "PublicIp"
            case ip = "Ip"
            case securityGroupCount = "SecurityGroupCount"
        }
    }

    /// NAT防火墙Dnat规则
    public struct CfwNatDnatRule: TCInputModel {
        /// 网络协议，可选值：TCP、UDP。
        public let ipProtocol: String

        /// 弹性IP。
        public let publicIpAddress: String

        /// 公网端口。
        public let publicPort: Int64

        /// 内网地址。
        public let privateIpAddress: String

        /// 内网端口。
        public let privatePort: Int64

        /// NAT防火墙转发规则描述。
        public let description: String

        public init(ipProtocol: String, publicIpAddress: String, publicPort: Int64, privateIpAddress: String, privatePort: Int64, description: String) {
            self.ipProtocol = ipProtocol
            self.publicIpAddress = publicIpAddress
            self.publicPort = publicPort
            self.privateIpAddress = privateIpAddress
            self.privatePort = privatePort
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case ipProtocol = "IpProtocol"
            case publicIpAddress = "PublicIpAddress"
            case publicPort = "PublicPort"
            case privateIpAddress = "PrivateIpAddress"
            case privatePort = "PrivatePort"
            case description = "Description"
        }
    }

    /// 数据库白名单规则数据
    public struct DatabaseWhiteListRuleData: TCInputModel {
        /// 访问源
        public let sourceIp: String

        /// 访问源类型，1 ip；6 实例；100 资源分组
        public let sourceType: Int64

        /// 访问目的
        public let targetIp: String

        /// 访问目的类型，1 ip；6 实例；100 资源分组
        public let targetType: Int64

        /// 规则描述
        public let detail: String

        /// 是否地域规则，0不是 1是
        public let isRegionRule: Int64

        /// 是否云厂商规则，0不是 1 时
        public let isCloudRule: Int64

        /// 是否启用，0 不启用，1启用
        public let enable: Int64

        /// 地域码1
        public let firstLevelRegionCode: Int64?

        /// 地域码2
        public let secondLevelRegionCode: Int64?

        /// 地域名称1
        public let firstLevelRegionName: String?

        /// 地域名称2
        public let secondLevelRegionName: String?

        /// 云厂商码
        public let cloudCode: String?

        public init(sourceIp: String, sourceType: Int64, targetIp: String, targetType: Int64, detail: String, isRegionRule: Int64, isCloudRule: Int64, enable: Int64, firstLevelRegionCode: Int64? = nil, secondLevelRegionCode: Int64? = nil, firstLevelRegionName: String? = nil, secondLevelRegionName: String? = nil, cloudCode: String? = nil) {
            self.sourceIp = sourceIp
            self.sourceType = sourceType
            self.targetIp = targetIp
            self.targetType = targetType
            self.detail = detail
            self.isRegionRule = isRegionRule
            self.isCloudRule = isCloudRule
            self.enable = enable
            self.firstLevelRegionCode = firstLevelRegionCode
            self.secondLevelRegionCode = secondLevelRegionCode
            self.firstLevelRegionName = firstLevelRegionName
            self.secondLevelRegionName = secondLevelRegionName
            self.cloudCode = cloudCode
        }

        enum CodingKeys: String, CodingKey {
            case sourceIp = "SourceIp"
            case sourceType = "SourceType"
            case targetIp = "TargetIp"
            case targetType = "TargetType"
            case detail = "Detail"
            case isRegionRule = "IsRegionRule"
            case isCloudRule = "IsCloudRule"
            case enable = "Enable"
            case firstLevelRegionCode = "FirstLevelRegionCode"
            case secondLevelRegionCode = "SecondLevelRegionCode"
            case firstLevelRegionName = "FirstLevelRegionName"
            case secondLevelRegionName = "SecondLevelRegionName"
            case cloudCode = "CloudCode"
        }
    }

    /// 设置nat防火墙的vpc dns 接入开关
    public struct DnsVpcSwitch: TCInputModel {
        /// vpc id
        public let vpcId: String

        /// 0：设置为关闭 1:设置为打开
        public let status: Int64

        public init(vpcId: String, status: Int64) {
            self.vpcId = vpcId
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case status = "Status"
        }
    }

    /// 防火墙网段信息
    public struct FwCidrInfo: TCInputModel {
        /// 防火墙使用的网段类型，值VpcSelf/Assis/Custom分别代表自有网段优先/扩展网段优先/自定义
        public let fwCidrType: String

        /// 为每个vpc指定防火墙的网段
        public let fwCidrLst: [FwVpcCidr]?

        /// 其他防火墙占用网段，一般是防火墙需要独占vpc时指定的网段
        public let comFwCidr: String?

        public init(fwCidrType: String, fwCidrLst: [FwVpcCidr]? = nil, comFwCidr: String? = nil) {
            self.fwCidrType = fwCidrType
            self.fwCidrLst = fwCidrLst
            self.comFwCidr = comFwCidr
        }

        enum CodingKeys: String, CodingKey {
            case fwCidrType = "FwCidrType"
            case fwCidrLst = "FwCidrLst"
            case comFwCidr = "ComFwCidr"
        }
    }

    /// vpc的防火墙网段
    public struct FwVpcCidr: TCInputModel, TCOutputModel {
        /// vpc的id
        public let vpcId: String

        /// 防火墙网段，最少/24的网段
        public let fwCidr: String

        public init(vpcId: String, fwCidr: String) {
            self.vpcId = vpcId
            self.fwCidr = fwCidr
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case fwCidr = "FwCidr"
        }
    }

    /// ip防护状态
    public struct IPDefendStatus: TCOutputModel {
        /// ip地址
        public let ip: String

        /// 防护状态   1:防护打开; -1:地址错误; 其他:未防护
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case status = "Status"
        }
    }

    /// // InstanceInfo 实例详情结果
    /// type InstanceInfo struct {
    /// 	AppID        string `json:"AppId" gorm:"column:appid"`
    /// 	Region       string `json:"Region" gorm:"column:region"`
    /// 	VPCID        string `json:"VpcId" gorm:"column:vpc_id"`
    /// 	SubNetID     string `json:"SubnetId" gorm:"column:subnet_id"`
    /// 	InstanceID   string `json:"InstanceId" gorm:"column:instance_id"`
    /// 	InstanceName string `json:"InstanceName" gorm:"column:instance_name"`
    /// 	//InsType common.CVM 3是cvm实例,4是clb实例,5是eni实例,6是mysql,7是redis,8是NAT,9是VPN,10是ES,11是MARIADB,12是KAFKA
    /// 	InsType   int    `json:"InsType" gorm:"column:instance_type"`
    /// 	PublicIP  string `json:"PublicIp" gorm:"column:public_ip"`
    /// 	PrivateIP string `json:"PrivateIp" gorm:"column:ip"`
    ///
    /// 	//规则下发无需管，前端展示用
    /// 	PortNum          string `json:"PortNum" gorm:"column:port_num"`
    /// 	LeakNum          string `json:"LeakNum" gorm:"column:leak_num"`
    /// 	ResourceGroupNum int    `json:"ResourceGroupNum"`
    /// 	VPCName          string `json:"VPCName" gorm:"column:VPCName"`
    /// }
    public struct InstanceInfo: TCOutputModel {
        /// appid信息
        public let appId: String

        /// 地域
        public let region: String

        /// vpcid信息
        public let vpcId: String

        /// vpc名称
        public let vpcName: String

        /// 子网id
        public let subnetId: String

        /// 资产id
        public let instanceId: String

        /// 资产名
        public let instanceName: String

        /// 资产类型
        ///  3是cvm实例,4是clb实例,5是eni实例,6是mysql,7是redis,8是NAT,9是VPN,10是ES,11是MARIADB,12是KAFKA 13 NATFW
        public let insType: Int64

        /// 公网ip
        public let publicIp: String

        /// 内网ip
        public let privateIp: String

        /// 端口数
        public let portNum: String

        /// 漏洞数
        public let leakNum: String

        /// 1，公网 2内网
        public let insSource: String

        /// [a,b]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourcePath: [String]?

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case region = "Region"
            case vpcId = "VpcId"
            case vpcName = "VPCName"
            case subnetId = "SubnetId"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case insType = "InsType"
            case publicIp = "PublicIp"
            case privateIp = "PrivateIp"
            case portNum = "PortNum"
            case leakNum = "LeakNum"
            case insSource = "InsSource"
            case resourcePath = "ResourcePath"
        }
    }

    /// 黑白名单IOC列表
    public struct IocListData: TCInputModel {
        /// 待处置IP地址，IP/Domain字段二选一
        public let ip: String

        /// 只能为0或者1   0代表出站 1代表入站
        public let direction: Int64

        /// 待处置域名，IP/Domain字段二选一
        public let domain: String?

        public init(ip: String, direction: Int64, domain: String? = nil) {
            self.ip = ip
            self.direction = direction
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case direction = "Direction"
            case domain = "Domain"
        }
    }

    /// 统计折线图通用结构体
    public struct IpStatic: TCOutputModel {
        /// 值
        public let num: Int64

        /// 折线图横坐标时间
        public let statTime: String

        enum CodingKeys: String, CodingKey {
            case num = "Num"
            case statTime = "StatTime"
        }
    }

    /// Nat防火墙弹性公网ip列表
    public struct NatFwEipsInfo: TCOutputModel {
        /// 弹性公网ip
        public let eip: String

        /// 所属的Nat网关Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natGatewayId: String?

        /// Nat网关名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natGatewayName: String?

        enum CodingKeys: String, CodingKey {
            case eip = "Eip"
            case natGatewayId = "NatGatewayId"
            case natGatewayName = "NatGatewayName"
        }
    }

    /// nat fw 实例展示的过滤列表
    public struct NatFwFilter: TCInputModel {
        /// 过滤的类型，例如实例id
        public let filterType: String

        /// 过滤的内容，以',' 分隔
        public let filterContent: String

        public init(filterType: String, filterContent: String) {
            self.filterType = filterType
            self.filterContent = filterContent
        }

        enum CodingKeys: String, CodingKey {
            case filterType = "FilterType"
            case filterContent = "FilterContent"
        }
    }

    /// Nat实例类型
    public struct NatFwInstance: TCOutputModel {
        /// nat实例id
        public let natinsId: String

        /// nat实例名称
        public let natinsName: String

        /// 实例所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 0:新增模式，1:接入模式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwMode: Int64?

        /// 0:正常状态， 1: 正在创建
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// nat公网ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natIp: String?

        enum CodingKeys: String, CodingKey {
            case natinsId = "NatinsId"
            case natinsName = "NatinsName"
            case region = "Region"
            case fwMode = "FwMode"
            case status = "Status"
            case natIp = "NatIp"
        }
    }

    /// Nat实例卡片详细信息
    public struct NatInstanceInfo: TCOutputModel {
        /// nat实例id
        public let natinsId: String

        /// nat实例名称
        public let natinsName: String

        /// 实例所在地域
        public let region: String

        /// 0: 新增模式，1:接入模式
        public let fwMode: Int64

        /// 实例带宽大小 Mbps
        public let bandWidth: Int64

        /// 入向带宽峰值 bps
        public let inFlowMax: Int64

        /// 出向带宽峰值 bps
        public let outFlowMax: UInt64

        /// 地域中文信息
        public let regionZh: String

        /// 公网ip数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eipAddress: [String]?

        /// 内外使用ip数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcIp: [String]?

        /// 实例关联子网数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnets: [String]?

        /// 0 :正常 1：正在初始化
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 地域区域信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionDetail: String?

        /// 实例所在可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneZh: String?

        /// 实例所在可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneZhBak: String?

        enum CodingKeys: String, CodingKey {
            case natinsId = "NatinsId"
            case natinsName = "NatinsName"
            case region = "Region"
            case fwMode = "FwMode"
            case bandWidth = "BandWidth"
            case inFlowMax = "InFlowMax"
            case outFlowMax = "OutFlowMax"
            case regionZh = "RegionZh"
            case eipAddress = "EipAddress"
            case vpcIp = "VpcIp"
            case subnets = "Subnets"
            case status = "Status"
            case regionDetail = "RegionDetail"
            case zoneZh = "ZoneZh"
            case zoneZhBak = "ZoneZhBak"
        }
    }

    /// 新增模式传递参数
    public struct NewModeItems: TCInputModel {
        /// 新增模式下接入的vpc列表
        public let vpcList: [String]

        /// 新增模式下绑定的出口弹性公网ip列表，其中Eips和AddCount至少传递一个。
        public let eips: [String]?

        /// 新增模式下新增绑定的出口弹性公网ip个数，其中Eips和AddCount至少传递一个。
        public let addCount: Int64?

        public init(vpcList: [String], eips: [String]? = nil, addCount: Int64? = nil) {
            self.vpcList = vpcList
            self.eips = eips
            self.addCount = addCount
        }

        enum CodingKeys: String, CodingKey {
            case vpcList = "VpcList"
            case eips = "Eips"
            case addCount = "AddCount"
        }
    }

    /// 规则输入对象
    public struct RuleInfoData: TCInputModel {
        /// 执行顺序
        public let orderIndex: UInt64

        /// 访问源
        public let sourceIp: String

        /// 访问目的
        public let targetIp: String

        /// 协议
        public let `protocol`: String

        /// 策略, 0：观察，1：阻断，2：放行
        public let strategy: String

        /// 访问源类型，1是IP，3是域名，4是IP地址模版，5是域名地址模版
        public let sourceType: UInt64

        /// 方向，0：出站，1：入站
        public let direction: UInt64

        /// 描述
        public let detail: String

        /// 访问目的类型，1是IP，3是域名，4是IP地址模版，5是域名地址模版
        public let targetType: UInt64

        /// 端口
        public let port: String?

        /// id值
        public let id: UInt64?

        /// 日志id，从告警处创建必传，其它为空
        public let logId: String?

        /// 城市Code
        public let city: UInt64?

        /// 国家Code
        public let country: UInt64?

        /// 云厂商，支持多个，以逗号分隔， 1:腾讯云（仅中国香港及海外）,2:阿里云,3:亚马逊云,4:华为云,5:微软云
        public let cloudCode: String?

        /// 是否为地域
        public let isRegion: UInt64?

        /// 城市名
        public let cityName: String?

        /// 国家名
        public let countryName: String?

        public init(orderIndex: UInt64, sourceIp: String, targetIp: String, protocol: String, strategy: String, sourceType: UInt64, direction: UInt64, detail: String, targetType: UInt64, port: String? = nil, id: UInt64? = nil, logId: String? = nil, city: UInt64? = nil, country: UInt64? = nil, cloudCode: String? = nil, isRegion: UInt64? = nil, cityName: String? = nil, countryName: String? = nil) {
            self.orderIndex = orderIndex
            self.sourceIp = sourceIp
            self.targetIp = targetIp
            self.`protocol` = `protocol`
            self.strategy = strategy
            self.sourceType = sourceType
            self.direction = direction
            self.detail = detail
            self.targetType = targetType
            self.port = port
            self.id = id
            self.logId = logId
            self.city = city
            self.country = country
            self.cloudCode = cloudCode
            self.isRegion = isRegion
            self.cityName = cityName
            self.countryName = countryName
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case sourceIp = "SourceIp"
            case targetIp = "TargetIp"
            case `protocol` = "Protocol"
            case strategy = "Strategy"
            case sourceType = "SourceType"
            case direction = "Direction"
            case detail = "Detail"
            case targetType = "TargetType"
            case port = "Port"
            case id = "Id"
            case logId = "LogId"
            case city = "City"
            case country = "Country"
            case cloudCode = "CloudCode"
            case isRegion = "IsRegion"
            case cityName = "CityName"
            case countryName = "CountryName"
        }
    }

    /// 新手引导扫描信息
    public struct ScanInfo: TCOutputModel {
        /// 扫描结果信息
        public let scanResultInfo: ScanResultInfo

        /// 扫描状态 0扫描中 1完成  2未勾选自动扫描
        public let scanStatus: Int64

        /// 进度
        public let scanPercent: Float

        /// 预计完成时间
        public let scanTime: String

        enum CodingKeys: String, CodingKey {
            case scanResultInfo = "ScanResultInfo"
            case scanStatus = "ScanStatus"
            case scanPercent = "ScanPercent"
            case scanTime = "ScanTime"
        }
    }

    /// 新手引导扫描结果信息PortNum   int
    /// 	LeakNum   int
    /// 	IPNum     int
    /// 	IPStatus  bool
    /// 	IdpStatus bool
    /// 	BanStatus bool
    public struct ScanResultInfo: TCOutputModel {
        /// 暴露漏洞数量
        public let leakNum: UInt64

        /// 防护ip数量
        public let ipNum: UInt64

        /// 暴露端口数量
        public let portNum: UInt64

        /// 是否开启防护
        public let ipStatus: Bool

        /// 是否拦截攻击
        public let idpStatus: Bool

        /// 是否禁封端口
        public let banStatus: Bool

        enum CodingKeys: String, CodingKey {
            case leakNum = "LeakNum"
            case ipNum = "IPNum"
            case portNum = "PortNum"
            case ipStatus = "IPStatus"
            case idpStatus = "IdpStatus"
            case banStatus = "BanStatus"
        }
    }

    /// 双向下发的企业安全组规则
    public struct SecurityGroupBothWayInfo: TCInputModel, TCOutputModel {
        /// 执行顺序
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orderIndex: UInt64?

        /// 访问源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceId: String?

        /// 访问源类型，默认为0，0: IP, 1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100: 资产分组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceType: UInt64?

        /// 访问目的
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetId: String?

        /// 访问目的类型，默认为0，0: IP, 1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100: 资产分组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetType: UInt64?

        /// 协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 目的端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 策略, 1：阻断，2：放行
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategy: UInt64?

        /// 方向，0：出站，1：入站，默认1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let direction: UInt64?

        /// 地域
        public let region: String

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: String?

        /// 是否开关开启，0：未开启，1：开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// 是否是正常规则，0：正常，1：异常
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isNew: UInt64?

        /// 单/双向下发，0:单向下发，1：双向下发
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bothWay: UInt64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 公网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIp: String?

        /// 掩码地址，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cidr: String?

        /// 端口协议类型参数模板id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceTemplateId: String?

        /// 是否使用端口协议模板，0：否，1：是
        public let protocolPortType: UInt64?

        public init(orderIndex: UInt64, sourceId: String, sourceType: UInt64, targetId: String, targetType: UInt64, protocol: String, port: String, strategy: UInt64, direction: UInt64, region: String, detail: String? = nil, status: UInt64? = nil, isNew: UInt64? = nil, bothWay: UInt64? = nil, vpcId: String? = nil, subnetId: String? = nil, instanceName: String? = nil, publicIp: String? = nil, privateIp: String? = nil, cidr: String? = nil, serviceTemplateId: String? = nil, protocolPortType: UInt64? = nil) {
            self.orderIndex = orderIndex
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.targetId = targetId
            self.targetType = targetType
            self.`protocol` = `protocol`
            self.port = port
            self.strategy = strategy
            self.direction = direction
            self.region = region
            self.detail = detail
            self.status = status
            self.isNew = isNew
            self.bothWay = bothWay
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.instanceName = instanceName
            self.publicIp = publicIp
            self.privateIp = privateIp
            self.cidr = cidr
            self.serviceTemplateId = serviceTemplateId
            self.protocolPortType = protocolPortType
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case sourceId = "SourceId"
            case sourceType = "SourceType"
            case targetId = "TargetId"
            case targetType = "TargetType"
            case `protocol` = "Protocol"
            case port = "Port"
            case strategy = "Strategy"
            case direction = "Direction"
            case region = "Region"
            case detail = "Detail"
            case status = "Status"
            case isNew = "IsNew"
            case bothWay = "BothWay"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case instanceName = "InstanceName"
            case publicIp = "PublicIp"
            case privateIp = "PrivateIp"
            case cidr = "Cidr"
            case serviceTemplateId = "ServiceTemplateId"
            case protocolPortType = "ProtocolPortType"
        }
    }

    /// 安全组列表数据
    public struct SecurityGroupListData: TCInputModel, TCOutputModel {
        /// 执行顺序
        public let orderIndex: UInt64

        /// 访问源
        public let sourceId: String

        /// 访问源类型，默认为0，1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100: 资源组
        public let sourceType: UInt64

        /// 访问目的
        public let targetId: String

        /// 访问目的类型，默认为0，1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100:资源组
        public let targetType: UInt64

        /// 协议
        public let `protocol`: String

        /// 目的端口
        public let port: String

        /// 策略, 1：阻断，2：放行
        public let strategy: UInt64

        /// 描述
        public let detail: String

        /// 单/双向下发，0:单向下发，1：双向下发
        public let bothWay: UInt64

        /// 规则ID
        public let id: UInt64?

        /// 是否开关开启，0：未开启，1：开启
        public let status: UInt64?

        /// 是否是正常规则，0：正常，1：异常
        public let isNew: UInt64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 公网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIp: String?

        /// 掩码地址，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cidr: String?

        /// 端口协议类型参数模板id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceTemplateId: String?

        /// 生成双向下发规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bothWayInfo: [SecurityGroupBothWayInfo]?

        /// 方向，0：出站，1：入站，默认1
        public let direction: UInt64?

        /// 是否使用端口协议模板，0：否，1：是
        public let protocolPortType: UInt64?

        public init(orderIndex: UInt64, sourceId: String, sourceType: UInt64, targetId: String, targetType: UInt64, protocol: String, port: String, strategy: UInt64, detail: String, bothWay: UInt64, id: UInt64? = nil, status: UInt64? = nil, isNew: UInt64? = nil, vpcId: String? = nil, subnetId: String? = nil, instanceName: String? = nil, publicIp: String? = nil, privateIp: String? = nil, cidr: String? = nil, serviceTemplateId: String? = nil, bothWayInfo: [SecurityGroupBothWayInfo]? = nil, direction: UInt64? = nil, protocolPortType: UInt64? = nil) {
            self.orderIndex = orderIndex
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.targetId = targetId
            self.targetType = targetType
            self.`protocol` = `protocol`
            self.port = port
            self.strategy = strategy
            self.detail = detail
            self.bothWay = bothWay
            self.id = id
            self.status = status
            self.isNew = isNew
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.instanceName = instanceName
            self.publicIp = publicIp
            self.privateIp = privateIp
            self.cidr = cidr
            self.serviceTemplateId = serviceTemplateId
            self.bothWayInfo = bothWayInfo
            self.direction = direction
            self.protocolPortType = protocolPortType
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case sourceId = "SourceId"
            case sourceType = "SourceType"
            case targetId = "TargetId"
            case targetType = "TargetType"
            case `protocol` = "Protocol"
            case port = "Port"
            case strategy = "Strategy"
            case detail = "Detail"
            case bothWay = "BothWay"
            case id = "Id"
            case status = "Status"
            case isNew = "IsNew"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case instanceName = "InstanceName"
            case publicIp = "PublicIp"
            case privateIp = "PrivateIp"
            case cidr = "Cidr"
            case serviceTemplateId = "ServiceTemplateId"
            case bothWayInfo = "BothWayInfo"
            case direction = "Direction"
            case protocolPortType = "ProtocolPortType"
        }
    }

    /// 企业安全组规则执行顺序修改对象
    public struct SecurityGroupOrderIndexData: TCInputModel {
        /// 企业安全组规则当前执行顺序
        public let orderIndex: UInt64

        /// 企业安全组规则更新目标执行顺序
        public let newOrderIndex: UInt64

        public init(orderIndex: UInt64, newOrderIndex: UInt64) {
            self.orderIndex = orderIndex
            self.newOrderIndex = newOrderIndex
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case newOrderIndex = "NewOrderIndex"
        }
    }

    /// 安全组规则
    public struct SecurityGroupRule: TCInputModel, TCOutputModel {
        /// 访问源示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板(ipm-dyodhpby)
        /// instance：资产实例(ins-123456)
        /// resourcegroup：资产分组(/全部分组/分组1/子分组1)
        /// tag：资源标签({"Key":"标签key值","Value":"标签Value值"})
        /// region：地域(ap-gaungzhou)
        public let sourceContent: String

        /// 访问源类型，类型可以为以下6种：net|template|instance|resourcegroup|tag|region
        public let sourceType: String

        /// 访问目的示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板(ipm-dyodhpby)
        /// instance：资产实例(ins-123456)
        /// resourcegroup：资产分组(/全部分组/分组1/子分组1)
        /// tag：资源标签({"Key":"标签key值","Value":"标签Value值"})
        /// region：地域(ap-gaungzhou)
        public let destContent: String

        /// 访问目的类型，类型可以为以下6种：net|template|instance|resourcegroup|tag|region
        public let destType: String

        /// 访问控制策略中设置的流量通过云防火墙的方式。取值：
        /// accept：放行
        /// drop：拒绝
        public let ruleAction: String

        /// 描述
        public let description: String

        /// 规则顺序，-1表示最低，1表示最高
        public let orderIndex: String

        /// 协议；TCP/UDP/ICMP/ANY
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 访问控制策略的端口。取值：
        /// -1/-1：全部端口
        /// 80：80端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 端口协议类型参数模板id；协议端口模板id；与Protocol,Port互斥
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceTemplateId: String?

        /// 规则对应的唯一id
        public let id: String?

        /// 规则状态，true表示启用，false表示禁用
        public let enable: String?

        public init(sourceContent: String, sourceType: String, destContent: String, destType: String, ruleAction: String, description: String, orderIndex: String, protocol: String? = nil, port: String? = nil, serviceTemplateId: String? = nil, id: String? = nil, enable: String? = nil) {
            self.sourceContent = sourceContent
            self.sourceType = sourceType
            self.destContent = destContent
            self.destType = destType
            self.ruleAction = ruleAction
            self.description = description
            self.orderIndex = orderIndex
            self.`protocol` = `protocol`
            self.port = port
            self.serviceTemplateId = serviceTemplateId
            self.id = id
            self.enable = enable
        }

        enum CodingKeys: String, CodingKey {
            case sourceContent = "SourceContent"
            case sourceType = "SourceType"
            case destContent = "DestContent"
            case destType = "DestType"
            case ruleAction = "RuleAction"
            case description = "Description"
            case orderIndex = "OrderIndex"
            case `protocol` = "Protocol"
            case port = "Port"
            case serviceTemplateId = "ServiceTemplateId"
            case id = "Id"
            case enable = "Enable"
        }
    }

    /// 执行顺序对象
    public struct SequenceData: TCInputModel {
        /// 规则Id值
        public let id: UInt64

        /// 修改前执行顺序
        public let orderIndex: UInt64

        /// 修改后执行顺序
        public let newOrderIndex: UInt64

        public init(id: UInt64, orderIndex: UInt64, newOrderIndex: UInt64) {
            self.id = id
            self.orderIndex = orderIndex
            self.newOrderIndex = newOrderIndex
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case orderIndex = "OrderIndex"
            case newOrderIndex = "NewOrderIndex"
        }
    }

    /// StaticInfo 告警柱形图统计信息
    public struct StaticInfo: TCOutputModel {
        /// 数
        public let num: Int64

        /// 端口
        public let port: String

        /// ip信息
        public let ip: String

        /// 地址
        public let address: String

        /// 资产id
        public let insID: String

        /// 资产名称
        public let insName: String

        enum CodingKeys: String, CodingKey {
            case num = "Num"
            case port = "Port"
            case ip = "Ip"
            case address = "Address"
            case insID = "InsID"
            case insName = "InsName"
        }
    }

    /// 防火墙开关列表对象
    public struct SwitchListsData: TCOutputModel {
        /// 公网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intranetIp: String?

        /// 实例名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 资产类型
        public let assetType: String

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let area: String?

        /// 防火墙开关
        public let `switch`: Int64

        /// id值
        public let id: UInt64

        /// 公网 IP 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpType: UInt64?

        /// 风险端口数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let portTimes: UInt64?

        /// 最近扫描时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastTime: String?

        /// 扫描深度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanMode: String?

        /// 扫描状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanStatus: UInt64?

        enum CodingKeys: String, CodingKey {
            case publicIp = "PublicIp"
            case intranetIp = "IntranetIp"
            case instanceName = "InstanceName"
            case instanceId = "InstanceId"
            case assetType = "AssetType"
            case area = "Area"
            case `switch` = "Switch"
            case id = "Id"
            case publicIpType = "PublicIpType"
            case portTimes = "PortTimes"
            case lastTime = "LastTime"
            case scanMode = "ScanMode"
            case scanStatus = "ScanStatus"
        }
    }

    /// 告警中心概览数据
    public struct TLogInfo: TCOutputModel {
        /// 失陷主机
        public let outNum: Int64

        /// 待处置告警
        public let handleNum: Int64

        /// 漏洞攻击
        public let vulNum: Int64

        /// 网络探测
        public let networkNum: Int64

        /// 封禁列表
        public let banNum: Int64

        /// 暴力破解
        public let bruteForceNum: Int64

        enum CodingKeys: String, CodingKey {
            case outNum = "OutNum"
            case handleNum = "HandleNum"
            case vulNum = "VulNum"
            case networkNum = "NetworkNum"
            case banNum = "BanNum"
            case bruteForceNum = "BruteForceNum"
        }
    }

    /// 未处置事件详情
    public struct UnHandleEvent: TCOutputModel {
        /// 伪攻击链类型
        public let eventTableListStruct: [UnHandleEventDetail]

        /// 1 是  0否
        public let baseLineUser: UInt64

        /// 1 打开 0 关闭
        public let baseLineInSwitch: UInt64

        /// 1 打开 0 关闭
        public let baseLineOutSwitch: UInt64

        /// vpc间防火墙实例数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcFwCount: UInt64?

        enum CodingKeys: String, CodingKey {
            case eventTableListStruct = "EventTableListStruct"
            case baseLineUser = "BaseLineUser"
            case baseLineInSwitch = "BaseLineInSwitch"
            case baseLineOutSwitch = "BaseLineOutSwitch"
            case vpcFwCount = "VpcFwCount"
        }
    }

    /// 未处置事件信息汇总
    public struct UnHandleEventDetail: TCOutputModel {
        /// 安全事件名称
        public let eventName: String

        /// 未处置事件数量
        public let total: UInt64

        enum CodingKeys: String, CodingKey {
            case eventName = "EventName"
            case total = "Total"
        }
    }

    /// nat防火墙 vpc dns 开关信息
    public struct VpcDnsInfo: TCOutputModel {
        /// vpc id
        public let vpcId: String

        /// vpc 名称
        public let vpcName: String

        /// nat 防火墙模式 0：新增模式， 1: 接入模式
        public let fwMode: Int64

        /// vpc ipv4网段范围 CIDR（Classless Inter-Domain Routing，无类域间路由选择）
        public let vpcIpv4Cidr: String

        /// 外网弹性ip，防火墙 dns解析地址
        public let dnsEip: String

        /// nat网关id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natInsId: String?

        /// nat网关名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natInsName: String?

        /// 0：开关关闭 ， 1: 开关打开
        public let switchStatus: Int64

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case vpcName = "VpcName"
            case fwMode = "FwMode"
            case vpcIpv4Cidr = "VpcIpv4Cidr"
            case dnsEip = "DNSEip"
            case natInsId = "NatInsId"
            case natInsName = "NatInsName"
            case switchStatus = "SwitchStatus"
        }
    }

    /// vpc区域数据详情
    public struct VpcZoneData: TCInputModel {
        /// 可用区
        public let zone: String

        /// vpc节点地域
        public let region: String

        public init(zone: String, region: String) {
            self.zone = zone
            self.region = region
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case region = "Region"
        }
    }
}
