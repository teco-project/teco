//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cfw {
    /// 访问控制列表对象
    public struct AcListsData: TCOutputModel {
        /// 规则id
        public let id: UInt64

        /// 访问源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceIp: String?

        /// 访问目的
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetIp: String?

        /// 协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 策略
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategy: UInt64?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: String?

        /// 命中次数
        public let count: UInt64

        /// 执行顺序
        public let orderIndex: UInt64

        /// 告警规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let logId: String?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case sourceIp = "SourceIp"
            case targetIp = "TargetIp"
            case `protocol` = "Protocol"
            case port = "Port"
            case strategy = "Strategy"
            case detail = "Detail"
            case count = "Count"
            case orderIndex = "OrderIndex"
            case logId = "LogId"
        }
    }

    /// AssetZone
    public struct AssetZone: TCOutputModel {
        /// 地域
        public let zone: String

        /// 地域英文
        public let zoneEng: String

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneEng = "ZoneEng"
        }
    }

    /// 企业安全组关联实例信息
    public struct AssociatedInstanceInfo: TCInputModel, TCOutputModel {
        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 实例类型，3是cvm实例,4是clb实例,5是eni实例,6是云数据库
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: UInt64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 私有网络名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcName: String?

        /// 公网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// 关联安全组数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityGroupCount: UInt64?

        /// 关联安全组规则数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let securityGroupRuleCount: UInt64?

        /// 关联数据库代理Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdbId: String?

        public init(instanceId: String, instanceName: String, type: UInt64, vpcId: String, vpcName: String, publicIp: String, ip: String, securityGroupCount: UInt64, securityGroupRuleCount: UInt64? = nil, cdbId: String? = nil) {
            self.instanceId = instanceId
            self.instanceName = instanceName
            self.type = type
            self.vpcId = vpcId
            self.vpcName = vpcName
            self.publicIp = publicIp
            self.ip = ip
            self.securityGroupCount = securityGroupCount
            self.securityGroupRuleCount = securityGroupRuleCount
            self.cdbId = cdbId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case type = "Type"
            case vpcId = "VpcId"
            case vpcName = "VpcName"
            case publicIp = "PublicIp"
            case ip = "Ip"
            case securityGroupCount = "SecurityGroupCount"
            case securityGroupRuleCount = "SecurityGroupRuleCount"
            case cdbId = "CdbId"
        }
    }

    /// 规则关联的beta任务
    public struct BetaInfoByACL: TCOutputModel {
        /// 任务id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskId: Int64?

        /// 任务名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let taskName: String?

        /// 上次执行时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastTime: String?

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case taskName = "TaskName"
            case lastTime = "LastTime"
        }
    }

    /// 入侵防御放通封禁规则
    public struct BlockIgnoreRule: TCOutputModel {
        /// 域名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        /// IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// 规则ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ioc: String?

        /// 危险等级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let level: String?

        /// 来源事件名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eventName: String?

        /// 方向：1入站，0出站
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let direction: Int64?

        /// 协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 地理位置
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let address: String?

        /// 规则类型：1封禁，2放通
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let action: Int64?

        /// 规则生效开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startTime: String?

        /// 规则生效结束时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endTime: String?

        /// 忽略原因
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ignoreReason: String?

        /// 安全事件来源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let source: String?

        /// 规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uniqueId: String?

        /// 规则命中次数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let matchTimes: Int64?

        /// 国家
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let country: String?

        /// 备注
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let comment: String?

        enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case ip = "IP"
            case ioc = "Ioc"
            case level = "Level"
            case eventName = "EventName"
            case direction = "Direction"
            case `protocol` = "Protocol"
            case address = "Address"
            case action = "Action"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case ignoreReason = "IgnoreReason"
            case source = "Source"
            case uniqueId = "UniqueId"
            case matchTimes = "MatchTimes"
            case country = "Country"
            case comment = "Comment"
        }
    }

    /// NAT防火墙Dnat规则
    public struct CfwNatDnatRule: TCInputModel {
        /// 网络协议，可选值：TCP、UDP。
        public let ipProtocol: String

        /// 弹性IP。
        public let publicIpAddress: String

        /// 公网端口。
        public let publicPort: Int64

        /// 内网地址。
        public let privateIpAddress: String

        /// 内网端口。
        public let privatePort: Int64

        /// NAT防火墙转发规则描述。
        public let description: String

        public init(ipProtocol: String, publicIpAddress: String, publicPort: Int64, privateIpAddress: String, privatePort: Int64, description: String) {
            self.ipProtocol = ipProtocol
            self.publicIpAddress = publicIpAddress
            self.publicPort = publicPort
            self.privateIpAddress = privateIpAddress
            self.privatePort = privatePort
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case ipProtocol = "IpProtocol"
            case publicIpAddress = "PublicIpAddress"
            case publicPort = "PublicPort"
            case privateIpAddress = "PrivateIpAddress"
            case privatePort = "PrivatePort"
            case description = "Description"
        }
    }

    /// 通用的列表检索过滤选项
    public struct CommonFilter: TCInputModel {
        /// 检索的键值
        public let name: String

        /// 检索的值，各检索值间为OR关系
        public let values: [String]

        /// 枚举类型，代表Name与Values之间的匹配关系
        /// enum FilterOperatorType {
        ///     //等于
        ///     FILTER_OPERATOR_TYPE_EQUAL = 1;
        ///     //大于
        ///     FILTER_OPERATOR_TYPE_GREATER = 2;
        ///     //小于
        ///     FILTER_OPERATOR_TYPE_LESS = 3;
        ///     //大于等于
        ///     FILTER_OPERATOR_TYPE_GREATER_EQ = 4;
        ///     //小于等于
        ///     FILTER_OPERATOR_TYPE_LESS_EQ = 5;
        ///     //不等于
        ///     FILTER_OPERATOR_TYPE_NO_EQ = 6;
        ///     //not in
        ///     FILTER_OPERATOR_TYPE_NOT_IN = 8;
        ///     //模糊匹配
        ///     FILTER_OPERATOR_TYPE_FUZZINESS = 9;
        /// }
        public let operatorType: Int64

        public init(name: String, values: [String], operatorType: Int64) {
            self.name = name
            self.values = values
            self.operatorType = operatorType
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
            case operatorType = "OperatorType"
        }
    }

    /// 创建NAT ACL规则参数结构
    public struct CreateNatRuleItem: TCInputModel {
        /// 访问源示例： net：IP/CIDR(192.168.0.2)
        public let sourceContent: String?

        /// 访问源类型：入向规则时类型可以为 ip,net,template,location；出向规则时可以为 ip,net,template,instance,group,tag
        public let sourceType: String?

        /// 访问目的示例： net：IP/CIDR(192.168.0.2) domain：域名规则，例如*.qq.com
        public let targetContent: String?

        /// 访问目的类型：入向规则时类型可以为ip,net,template,instance,group,tag；出向规则时可以为  ip,net,domain,template,location
        public let targetType: String?

        /// 协议，可选的值： TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS
        public let `protocol`: String?

        /// 访问控制策略中设置的流量通过云防火墙的方式。取值： accept：放行 drop：拒绝 log：观察
        public let ruleAction: String?

        /// 访问控制策略的端口。取值： -1/-1：全部端口 80：80端口
        public let port: String?

        /// 规则方向：1，入站；0，出站
        public let direction: UInt64?

        /// 规则序号
        public let orderIndex: Int64?

        /// 规则状态，true表示启用，false表示禁用
        public let enable: String?

        /// 规则对应的唯一id，创建规则时无需填写
        public let uuid: Int64?

        /// 描述
        public let description: String?

        public init(sourceContent: String, sourceType: String, targetContent: String, targetType: String, protocol: String, ruleAction: String, port: String, direction: UInt64, orderIndex: Int64, enable: String, uuid: Int64? = nil, description: String? = nil) {
            self.sourceContent = sourceContent
            self.sourceType = sourceType
            self.targetContent = targetContent
            self.targetType = targetType
            self.protocol = `protocol`
            self.ruleAction = ruleAction
            self.port = port
            self.direction = direction
            self.orderIndex = orderIndex
            self.enable = enable
            self.uuid = uuid
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case sourceContent = "SourceContent"
            case sourceType = "SourceType"
            case targetContent = "TargetContent"
            case targetType = "TargetType"
            case `protocol` = "Protocol"
            case ruleAction = "RuleAction"
            case port = "Port"
            case direction = "Direction"
            case orderIndex = "OrderIndex"
            case enable = "Enable"
            case uuid = "Uuid"
            case description = "Description"
        }
    }

    /// 创建互联网边界规则参数结构
    public struct CreateRuleItem: TCInputModel {
        /// 访问源示例： net：IP/CIDR(192.168.0.2)
        public let sourceContent: String

        /// 访问源类型：入向规则时类型可以为 ip,net,template,location；出向规则时可以为 ip,net,template,instance,group,tag
        public let sourceType: String

        /// 访问目的示例： net：IP/CIDR(192.168.0.2) domain：域名规则，例如*.qq.com
        public let targetContent: String

        /// 访问目的类型：入向规则时类型可以为ip,net,template,instance,group,tag；出向规则时可以为  ip,net,domain,template,location
        public let targetType: String

        /// 协议，可选的值： TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS
        public let `protocol`: String

        /// 访问控制策略中设置的流量通过云防火墙的方式。取值： accept：放行 drop：拒绝 log：观察
        public let ruleAction: String

        /// 访问控制策略的端口。取值： -1/-1：全部端口 80：80端口
        public let port: String

        /// 规则方向：1，入站；0，出站
        public let direction: UInt64

        /// 规则序号
        public let orderIndex: Int64

        /// 规则对应的唯一id，创建规则时无需填写
        public let uuid: Int64?

        /// 规则状态，true表示启用，false表示禁用
        public let enable: String?

        /// 描述
        public let description: String?

        /// all
        public let scope: String?

        /// 0，正常规则添加；1，入侵检测添加
        public let ruleSource: Int64?

        /// 告警Id
        public let logId: String?

        public init(sourceContent: String, sourceType: String, targetContent: String, targetType: String, protocol: String, ruleAction: String, port: String, direction: UInt64, orderIndex: Int64, uuid: Int64? = nil, enable: String? = nil, description: String? = nil, scope: String? = nil, ruleSource: Int64? = nil, logId: String? = nil) {
            self.sourceContent = sourceContent
            self.sourceType = sourceType
            self.targetContent = targetContent
            self.targetType = targetType
            self.protocol = `protocol`
            self.ruleAction = ruleAction
            self.port = port
            self.direction = direction
            self.orderIndex = orderIndex
            self.uuid = uuid
            self.enable = enable
            self.description = description
            self.scope = scope
            self.ruleSource = ruleSource
            self.logId = logId
        }

        enum CodingKeys: String, CodingKey {
            case sourceContent = "SourceContent"
            case sourceType = "SourceType"
            case targetContent = "TargetContent"
            case targetType = "TargetType"
            case `protocol` = "Protocol"
            case ruleAction = "RuleAction"
            case port = "Port"
            case direction = "Direction"
            case orderIndex = "OrderIndex"
            case uuid = "Uuid"
            case enable = "Enable"
            case description = "Description"
            case scope = "Scope"
            case ruleSource = "RuleSource"
            case logId = "LogId"
        }
    }

    /// 数据库白名单规则数据
    public struct DatabaseWhiteListRuleData: TCInputModel {
        /// 访问源
        public let sourceIp: String

        /// 访问源类型，1 ip；6 实例；100 资源分组
        public let sourceType: Int64

        /// 访问目的
        public let targetIp: String

        /// 访问目的类型，1 ip；6 实例；100 资源分组
        public let targetType: Int64

        /// 规则描述
        public let detail: String

        /// 是否地域规则，0不是 1是
        public let isRegionRule: Int64

        /// 是否云厂商规则，0不是 1 时
        public let isCloudRule: Int64

        /// 是否启用，0 不启用，1启用
        public let enable: Int64

        /// 地域码1
        public let firstLevelRegionCode: Int64?

        /// 地域码2
        public let secondLevelRegionCode: Int64?

        /// 地域名称1
        public let firstLevelRegionName: String?

        /// 地域名称2
        public let secondLevelRegionName: String?

        /// 云厂商码
        public let cloudCode: String?

        public init(sourceIp: String, sourceType: Int64, targetIp: String, targetType: Int64, detail: String, isRegionRule: Int64, isCloudRule: Int64, enable: Int64, firstLevelRegionCode: Int64? = nil, secondLevelRegionCode: Int64? = nil, firstLevelRegionName: String? = nil, secondLevelRegionName: String? = nil, cloudCode: String? = nil) {
            self.sourceIp = sourceIp
            self.sourceType = sourceType
            self.targetIp = targetIp
            self.targetType = targetType
            self.detail = detail
            self.isRegionRule = isRegionRule
            self.isCloudRule = isCloudRule
            self.enable = enable
            self.firstLevelRegionCode = firstLevelRegionCode
            self.secondLevelRegionCode = secondLevelRegionCode
            self.firstLevelRegionName = firstLevelRegionName
            self.secondLevelRegionName = secondLevelRegionName
            self.cloudCode = cloudCode
        }

        enum CodingKeys: String, CodingKey {
            case sourceIp = "SourceIp"
            case sourceType = "SourceType"
            case targetIp = "TargetIp"
            case targetType = "TargetType"
            case detail = "Detail"
            case isRegionRule = "IsRegionRule"
            case isCloudRule = "IsCloudRule"
            case enable = "Enable"
            case firstLevelRegionCode = "FirstLevelRegionCode"
            case secondLevelRegionCode = "SecondLevelRegionCode"
            case firstLevelRegionName = "FirstLevelRegionName"
            case secondLevelRegionName = "SecondLevelRegionName"
            case cloudCode = "CloudCode"
        }
    }

    /// 访问控制列表对象
    public struct DescAcItem: TCOutputModel {
        /// 访问源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceContent: String?

        /// 访问目的
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetContent: String?

        /// 协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 访问控制策略中设置的流量通过云防火墙的方式。取值： accept：放行 drop：拒绝 log：观察
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleAction: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 命中次数
        public let count: UInt64

        /// 执行顺序
        public let orderIndex: UInt64

        /// 访问源类型：入向规则时类型可以为 ip,net,template,location；出向规则时可以为 ip,net,template,instance,group,tag
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceType: String?

        /// 访问目的类型：入向规则时类型可以为ip,net,template,instance,group,tag；出向规则时可以为 ip,net,domain,template,location
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetType: String?

        /// 规则对应的唯一id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uuid: UInt64?

        /// 规则有效性
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invalid: UInt64?

        /// 0为正常规则,1为地域规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isRegion: UInt64?

        /// 国家id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let countryCode: UInt64?

        /// 城市id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cityCode: UInt64?

        /// 国家名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let countryName: String?

        /// 省名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cityName: String?

        /// 云厂商code
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cloudCode: String?

        /// 0为正常规则,1为云厂商规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isCloud: UInt64?

        /// 规则状态，true表示启用，false表示禁用
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enable: String?

        /// 规则方向：1，入向；0，出向
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let direction: UInt64?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 内部使用的uuid，一般情况下不会使用到该字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internalUuid: Int64?

        /// 规则状态，查询规则命中详情时该字段有效，0：新增，1: 已删除, 2: 编辑删除
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// 关联任务详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let betaList: [BetaInfoByACL]?

        /// 生效范围：serial，串行；side，旁路；all，全局
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scope: String?

        /// 互联网边界防火墙使用的内部规则id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let internetBorderUuid: String?

        enum CodingKeys: String, CodingKey {
            case sourceContent = "SourceContent"
            case targetContent = "TargetContent"
            case `protocol` = "Protocol"
            case port = "Port"
            case ruleAction = "RuleAction"
            case description = "Description"
            case count = "Count"
            case orderIndex = "OrderIndex"
            case sourceType = "SourceType"
            case targetType = "TargetType"
            case uuid = "Uuid"
            case invalid = "Invalid"
            case isRegion = "IsRegion"
            case countryCode = "CountryCode"
            case cityCode = "CityCode"
            case countryName = "CountryName"
            case cityName = "CityName"
            case cloudCode = "CloudCode"
            case isCloud = "IsCloud"
            case enable = "Enable"
            case direction = "Direction"
            case instanceName = "InstanceName"
            case internalUuid = "InternalUuid"
            case status = "Status"
            case betaList = "BetaList"
            case scope = "Scope"
            case internetBorderUuid = "InternetBorderUuid"
        }
    }

    /// 设置nat防火墙的vpc dns 接入开关
    public struct DnsVpcSwitch: TCInputModel {
        /// vpc id
        public let vpcId: String

        /// 0：设置为关闭 1:设置为打开
        public let status: Int64

        public init(vpcId: String, status: Int64) {
            self.vpcId = vpcId
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case status = "Status"
        }
    }

    /// 边界防火墙公网IP开关列表
    public struct EdgeIpInfo: TCOutputModel {
        /// 公网IP
        public let publicIp: String?

        /// 公网 IP 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpType: Int64?

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 实例名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 内网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intranetIp: String?

        /// 资产类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assetType: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 风险端口数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let portRiskCount: Int64?

        /// 最近扫描时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastScanTime: String?

        /// 是否为region eip
        /// 0 不为region eip，不能选择串行
        /// 1 为region eip 可以选择串行
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isRegionEip: Int64?

        /// EIP 所关联的VPC
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 0: 该地域暂未支持串行
        /// 1: 该用户未在该地域配置串行带宽
        /// 2: 该用户已在该地域配置串行带宽，可以开启串行开关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isSerialRegion: Int64?

        /// 0: 不是公网CLB 可以开启串行开关
        /// 1: 是公网CLB 不可以开启串行开关
        ///
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isPublicClb: Int64?

        /// 0: 开启开关时提示要创建私有连接。
        /// 1: 关闭该开关是提示删除私有连接。
        /// 如果大于 1: 关闭开关 、开启开关不需提示创建删除私有连接。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endpointBindEipNum: Int64?

        /// 扫描深度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanMode: String?

        /// 扫描状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanStatus: Int64?

        /// 开关状态
        /// 0 : 关闭
        /// 1 : 开启
        /// 2 : 开启中
        /// 3 : 关闭中
        /// 4 : 异常
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 私有连接ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endpointId: String?

        /// 私有连接IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endpointIp: String?

        /// 0 : 旁路
        /// 1 : 串行
        /// 2 : 正在模式切换
        public let switchMode: UInt64?

        /// 开关权重
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let switchWeight: Int64?

        enum CodingKeys: String, CodingKey {
            case publicIp = "PublicIp"
            case publicIpType = "PublicIpType"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case intranetIp = "IntranetIp"
            case assetType = "AssetType"
            case region = "Region"
            case portRiskCount = "PortRiskCount"
            case lastScanTime = "LastScanTime"
            case isRegionEip = "IsRegionEip"
            case vpcId = "VpcId"
            case isSerialRegion = "IsSerialRegion"
            case isPublicClb = "IsPublicClb"
            case endpointBindEipNum = "EndpointBindEipNum"
            case scanMode = "ScanMode"
            case scanStatus = "ScanStatus"
            case status = "Status"
            case endpointId = "EndpointId"
            case endpointIp = "EndpointIp"
            case switchMode = "SwitchMode"
            case switchWeight = "SwitchWeight"
        }
    }

    /// 开启、关闭 防火墙互联网边界开关
    public struct EdgeIpSwitch: TCInputModel {
        /// 公网IP
        public let publicIp: String

        /// vpc 中第一个EIP开关打开，需要指定子网创建私有连接
        public let subnetId: String?

        /// 创建私有连接指定IP
        public let endpointIp: String?

        /// 0 : 旁路 1 : 串行
        public let switchMode: Int64?

        public init(publicIp: String, subnetId: String? = nil, endpointIp: String? = nil, switchMode: Int64? = nil) {
            self.publicIp = publicIp
            self.subnetId = subnetId
            self.endpointIp = endpointIp
            self.switchMode = switchMode
        }

        enum CodingKeys: String, CodingKey {
            case publicIp = "PublicIp"
            case subnetId = "SubnetId"
            case endpointIp = "EndpointIp"
            case switchMode = "SwitchMode"
        }
    }

    /// 防火墙网段信息
    public struct FwCidrInfo: TCInputModel {
        /// 防火墙使用的网段类型，值VpcSelf/Assis/Custom分别代表自有网段优先/扩展网段优先/自定义
        public let fwCidrType: String

        /// 为每个vpc指定防火墙的网段
        public let fwCidrLst: [FwVpcCidr]?

        /// 其他防火墙占用网段，一般是防火墙需要独占vpc时指定的网段
        public let comFwCidr: String?

        public init(fwCidrType: String, fwCidrLst: [FwVpcCidr]? = nil, comFwCidr: String? = nil) {
            self.fwCidrType = fwCidrType
            self.fwCidrLst = fwCidrLst
            self.comFwCidr = comFwCidr
        }

        enum CodingKeys: String, CodingKey {
            case fwCidrType = "FwCidrType"
            case fwCidrLst = "FwCidrLst"
            case comFwCidr = "ComFwCidr"
        }
    }

    /// 防火墙部署输入参数列表
    public struct FwDeploy: TCInputModel {
        /// 防火墙部署地域
        public let deployRegion: String

        /// 带宽，单位：Mbps
        public let width: Int64

        /// 异地灾备 1：使用异地灾备；0：不使用异地灾备；为空则默认不使用异地灾备
        public let crossAZone: Int64?

        /// 主可用区，为空则选择默认可用区
        public let zone: String?

        /// 备可用区，为空则选择默认可用区
        public let zoneBak: String?

        /// 若为cdc防火墙时填充该id
        public let cdcId: String?

        public init(deployRegion: String, width: Int64, crossAZone: Int64? = nil, zone: String? = nil, zoneBak: String? = nil, cdcId: String? = nil) {
            self.deployRegion = deployRegion
            self.width = width
            self.crossAZone = crossAZone
            self.zone = zone
            self.zoneBak = zoneBak
            self.cdcId = cdcId
        }

        enum CodingKeys: String, CodingKey {
            case deployRegion = "DeployRegion"
            case width = "Width"
            case crossAZone = "CrossAZone"
            case zone = "Zone"
            case zoneBak = "ZoneBak"
            case cdcId = "CdcId"
        }
    }

    /// 防火墙引流网关信息
    public struct FwGateway: TCOutputModel {
        /// 防火墙网关id
        public let gatewayId: String

        /// 网关所属vpc id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 网关ip地址
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipAddress: String?

        enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case vpcId = "VpcId"
            case ipAddress = "IpAddress"
        }
    }

    /// 多种VPC墙模式开关结构
    public struct FwGroupSwitch: TCInputModel {
        /// 防火墙实例的开关模式 1: 单点互通 2: 多点互通 3: 全互通 4: 自定义路由
        public let switchMode: Int64?

        /// 防火墙开关ID
        /// 支持三种类型
        /// 1. 边开关(单点互通)
        /// 2. 点开关(多点互通)
        /// 3. 全开关(全互通)
        public let switchId: String?

        public init(switchMode: Int64? = nil, switchId: String? = nil) {
            self.switchMode = switchMode
            self.switchId = switchId
        }

        enum CodingKeys: String, CodingKey {
            case switchMode = "SwitchMode"
            case switchId = "SwitchId"
        }
    }

    /// VPC防火墙(组)四种开关展示
    public struct FwGroupSwitchShow: TCOutputModel {
        /// 防火墙开关ID
        public let switchId: String

        /// 防火墙开关NAME
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let switchName: String?

        /// 互通模式
        public let switchMode: Int64?

        /// 开关边连接类型 0：对等连接， 1：云连网
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectType: Int64?

        /// 连接ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectId: String?

        /// 连接名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let connectName: String?

        /// 源实例信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let srcInstancesInfo: [NetInstancesInfo]?

        /// 目的实例信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dstInstancesInfo: [NetInstancesInfo]?

        /// 防火墙(组)数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupId: String?

        /// 防火墙(组)名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupName: String?

        /// 开关状态 0：关 ， 1：开
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enable: Int64?

        /// 开关的状态 0：正常， 1：转换中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 0-非sase实例，忽略，1-未绑定状态，2-已绑定
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let attachWithEdge: Int64?

        /// 对等防火墙和开关状态 0：正常， 1：对等未创建防火墙，2：对等已创建防火墙，未打开开关
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let crossEdgeStatus: Int64?

        /// 网络经过VPC防火墙CVM所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInsRegion: [String]?

        /// 0 观察 1 拦截 2 严格 3 关闭
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipsAction: Int64?

        /// 开关关联的防火墙实例列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInsLst: [VpcFwInstanceShow]?

        /// 开关是否处于bypass状态
        /// 0：正常状态
        /// 1：bypass状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bypassStatus: Int64?

        enum CodingKeys: String, CodingKey {
            case switchId = "SwitchId"
            case switchName = "SwitchName"
            case switchMode = "SwitchMode"
            case connectType = "ConnectType"
            case connectId = "ConnectId"
            case connectName = "ConnectName"
            case srcInstancesInfo = "SrcInstancesInfo"
            case dstInstancesInfo = "DstInstancesInfo"
            case fwGroupId = "FwGroupId"
            case fwGroupName = "FwGroupName"
            case enable = "Enable"
            case status = "Status"
            case attachWithEdge = "AttachWithEdge"
            case crossEdgeStatus = "CrossEdgeStatus"
            case fwInsRegion = "FwInsRegion"
            case ipsAction = "IpsAction"
            case fwInsLst = "FwInsLst"
            case bypassStatus = "BypassStatus"
        }
    }

    /// vpc的防火墙网段
    public struct FwVpcCidr: TCInputModel, TCOutputModel {
        /// vpc的id
        public let vpcId: String

        /// 防火墙网段，最少/24的网段
        public let fwCidr: String

        public init(vpcId: String, fwCidr: String) {
            self.vpcId = vpcId
            self.fwCidr = fwCidr
        }

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case fwCidr = "FwCidr"
        }
    }

    /// ip防护状态
    public struct IPDefendStatus: TCOutputModel {
        /// ip地址
        public let ip: String

        /// 防护状态   1:防护打开; -1:地址错误; 其他:未防护
        public let status: Int64

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case status = "Status"
        }
    }

    /// // InstanceInfo 实例详情结果
    /// type InstanceInfo struct {
    /// 	AppID        string `json:"AppId" gorm:"column:appid"`
    /// 	Region       string `json:"Region" gorm:"column:region"`
    /// 	VPCID        string `json:"VpcId" gorm:"column:vpc_id"`
    /// 	SubNetID     string `json:"SubnetId" gorm:"column:subnet_id"`
    /// 	InstanceID   string `json:"InstanceId" gorm:"column:instance_id"`
    /// 	InstanceName string `json:"InstanceName" gorm:"column:instance_name"`
    /// 	//InsType common.CVM 3是cvm实例,4是clb实例,5是eni实例,6是mysql,7是redis,8是NAT,9是VPN,10是ES,11是MARIADB,12是KAFKA
    /// 	InsType   int    `json:"InsType" gorm:"column:instance_type"`
    /// 	PublicIP  string `json:"PublicIp" gorm:"column:public_ip"`
    /// 	PrivateIP string `json:"PrivateIp" gorm:"column:ip"`
    ///
    /// 	//规则下发无需管，前端展示用
    /// 	PortNum          string `json:"PortNum" gorm:"column:port_num"`
    /// 	LeakNum          string `json:"LeakNum" gorm:"column:leak_num"`
    /// 	ResourceGroupNum int    `json:"ResourceGroupNum"`
    /// 	VPCName          string `json:"VPCName" gorm:"column:VPCName"`
    /// }
    public struct InstanceInfo: TCOutputModel {
        /// appid信息
        public let appId: String

        /// 地域
        public let region: String

        /// vpcid信息
        public let vpcId: String

        /// vpc名称
        public let vpcName: String

        /// 子网id
        public let subnetId: String

        /// 资产id
        public let instanceId: String

        /// 资产名
        public let instanceName: String

        /// 资产类型
        ///  3是cvm实例,4是clb实例,5是eni实例,6是mysql,7是redis,8是NAT,9是VPN,10是ES,11是MARIADB,12是KAFKA 13 NATFW
        public let insType: Int64

        /// 公网ip
        public let publicIp: String

        /// 内网ip
        public let privateIp: String

        /// 端口数
        public let portNum: String

        /// 漏洞数
        public let leakNum: String

        /// 1，公网 2内网
        public let insSource: String

        /// [a,b]
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourcePath: [String]?

        /// 扫描结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let server: [String]?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionKey: String?

        enum CodingKeys: String, CodingKey {
            case appId = "AppId"
            case region = "Region"
            case vpcId = "VpcId"
            case vpcName = "VPCName"
            case subnetId = "SubnetId"
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case insType = "InsType"
            case publicIp = "PublicIp"
            case privateIp = "PrivateIp"
            case portNum = "PortNum"
            case leakNum = "LeakNum"
            case insSource = "InsSource"
            case resourcePath = "ResourcePath"
            case server = "Server"
            case regionKey = "RegionKey"
        }
    }

    /// 入侵防御封禁列表、放通列表添加规则入参
    public struct IntrusionDefenseRule: TCInputModel {
        /// 规则方向，0出站，1入站，3内网间
        public let direction: Int64

        /// 规则结束时间，格式：2006-01-02 15:04:05，必须大于当前时间
        public let endTime: String

        /// 规则IP地址，IP与Domain必填其中之一
        public let ip: String?

        /// 规则域名，IP与Domain必填其中之一
        public let domain: String?

        /// 备注信息，长度不能超过50
        public let comment: String?

        /// 规则开始时间
        public let startTime: String?

        public init(direction: Int64, endTime: String, ip: String? = nil, domain: String? = nil, comment: String? = nil, startTime: String? = nil) {
            self.direction = direction
            self.endTime = endTime
            self.ip = ip
            self.domain = domain
            self.comment = comment
            self.startTime = startTime
        }

        enum CodingKeys: String, CodingKey {
            case direction = "Direction"
            case endTime = "EndTime"
            case ip = "IP"
            case domain = "Domain"
            case comment = "Comment"
            case startTime = "StartTime"
        }
    }

    /// 封禁放通IOC列表
    public struct IocListData: TCInputModel, TCOutputModel {
        /// 待处置IP地址，IP/Domain字段二选一
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ip: String?

        /// 只能为0或者1   0代表出站 1代表入站
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let direction: Int64?

        /// 待处置域名，IP/Domain字段二选一
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let domain: String?

        public init(ip: String? = nil, direction: Int64? = nil, domain: String? = nil) {
            self.ip = ip
            self.direction = direction
            self.domain = domain
        }

        enum CodingKeys: String, CodingKey {
            case ip = "IP"
            case direction = "Direction"
            case domain = "Domain"
        }
    }

    /// 统计折线图通用结构体
    public struct IpStatic: TCOutputModel {
        /// 值
        public let num: Int64

        /// 折线图横坐标时间
        public let statTime: String

        enum CodingKeys: String, CodingKey {
            case num = "Num"
            case statTime = "StatTime"
        }
    }

    /// Nat防火墙弹性公网ip列表
    public struct NatFwEipsInfo: TCOutputModel {
        /// 弹性公网ip
        public let eip: String

        /// 所属的Nat网关Id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natGatewayId: String?

        /// Nat网关名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natGatewayName: String?

        enum CodingKeys: String, CodingKey {
            case eip = "Eip"
            case natGatewayId = "NatGatewayId"
            case natGatewayName = "NatGatewayName"
        }
    }

    /// nat fw 实例展示的过滤列表
    public struct NatFwFilter: TCInputModel {
        /// 过滤的类型，例如实例id
        public let filterType: String

        /// 过滤的内容，以',' 分隔
        public let filterContent: String

        public init(filterType: String, filterContent: String) {
            self.filterType = filterType
            self.filterContent = filterContent
        }

        enum CodingKeys: String, CodingKey {
            case filterType = "FilterType"
            case filterContent = "FilterContent"
        }
    }

    /// Nat实例类型
    public struct NatFwInstance: TCOutputModel {
        /// nat实例id
        public let natinsId: String

        /// nat实例名称
        public let natinsName: String

        /// 实例所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 0:新增模式，1:接入模式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwMode: Int64?

        /// 0:正常状态， 1: 正在创建
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// nat公网ip
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natIp: String?

        enum CodingKeys: String, CodingKey {
            case natinsId = "NatinsId"
            case natinsName = "NatinsName"
            case region = "Region"
            case fwMode = "FwMode"
            case status = "Status"
            case natIp = "NatIp"
        }
    }

    /// Nat实例卡片详细信息
    public struct NatInstanceInfo: TCOutputModel {
        /// nat实例id
        public let natinsId: String

        /// nat实例名称
        public let natinsName: String

        /// 实例所在地域
        public let region: String

        /// 0: 新增模式，1:接入模式
        public let fwMode: Int64

        /// 实例带宽大小 Mbps
        public let bandWidth: Int64

        /// 入向带宽峰值 bps
        public let inFlowMax: Int64

        /// 出向带宽峰值 bps
        public let outFlowMax: UInt64

        /// 地域中文信息
        public let regionZh: String

        /// 公网ip数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let eipAddress: [String]?

        /// 内外使用ip数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcIp: [String]?

        /// 实例关联子网数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnets: [String]?

        /// 0 :正常 1：正在初始化
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 地域区域信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionDetail: String?

        /// 实例所在可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneZh: String?

        /// 实例所在可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneZhBak: String?

        /// 已使用规则数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleUsed: UInt64?

        /// 实例的规则限制最大规格数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleMax: UInt64?

        /// 实例引擎版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineVersion: String?

        /// 引擎是否可升级：0，不可升级；1，可升级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateEnable: Int64?

        /// 是的需要升级引擎 支持 nat拨测 1需要 0不需要
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let needProbeEngineUpdate: Int64?

        enum CodingKeys: String, CodingKey {
            case natinsId = "NatinsId"
            case natinsName = "NatinsName"
            case region = "Region"
            case fwMode = "FwMode"
            case bandWidth = "BandWidth"
            case inFlowMax = "InFlowMax"
            case outFlowMax = "OutFlowMax"
            case regionZh = "RegionZh"
            case eipAddress = "EipAddress"
            case vpcIp = "VpcIp"
            case subnets = "Subnets"
            case status = "Status"
            case regionDetail = "RegionDetail"
            case zoneZh = "ZoneZh"
            case zoneZhBak = "ZoneZhBak"
            case ruleUsed = "RuleUsed"
            case ruleMax = "RuleMax"
            case engineVersion = "EngineVersion"
            case updateEnable = "UpdateEnable"
            case needProbeEngineUpdate = "NeedProbeEngineUpdate"
        }
    }

    /// NAT防火墙开关列表数据
    public struct NatSwitchListData: TCOutputModel {
        /// 列表ID
        public let id: UInt64

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 子网名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetName: String?

        /// IPv4 CIDR
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetCidr: String?

        /// 关联路由ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let routeId: String?

        /// 关联路由名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let routeName: String?

        /// 云服务器个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cvmNum: UInt64?

        /// 所属VPC ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 所属VPC名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcName: String?

        /// 是否生效
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let enable: UInt64?

        /// 开关状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// NAT网关ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natId: String?

        /// NAT网关名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natName: String?

        /// NAT防火墙实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natInsId: String?

        /// NAT防火墙实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natInsName: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 开关是否异常,0:正常,1:异常
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let abnormal: Int64?

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case subnetId = "SubnetId"
            case subnetName = "SubnetName"
            case subnetCidr = "SubnetCidr"
            case routeId = "RouteId"
            case routeName = "RouteName"
            case cvmNum = "CvmNum"
            case vpcId = "VpcId"
            case vpcName = "VpcName"
            case enable = "Enable"
            case status = "Status"
            case natId = "NatId"
            case natName = "NatName"
            case natInsId = "NatInsId"
            case natInsName = "NatInsName"
            case region = "Region"
            case abnormal = "Abnormal"
        }
    }

    /// 网络实例信息
    public struct NetInstancesInfo: TCOutputModel {
        /// 网络实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 网络实例名称
        public let instanceName: String?

        /// 网络cidr (多段以逗号分隔)
        public let instanceCidr: String?

        /// 网络实例所在地域
        public let region: String?

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case instanceCidr = "InstanceCidr"
            case region = "Region"
        }
    }

    /// 新增模式传递参数
    public struct NewModeItems: TCInputModel {
        /// 新增模式下接入的vpc列表
        public let vpcList: [String]

        /// 新增模式下绑定的出口弹性公网ip列表，其中Eips和AddCount至少传递一个。
        public let eips: [String]?

        /// 新增模式下新增绑定的出口弹性公网ip个数，其中Eips和AddCount至少传递一个。
        public let addCount: Int64?

        public init(vpcList: [String], eips: [String]? = nil, addCount: Int64? = nil) {
            self.vpcList = vpcList
            self.eips = eips
            self.addCount = addCount
        }

        enum CodingKeys: String, CodingKey {
            case vpcList = "VpcList"
            case eips = "Eips"
            case addCount = "AddCount"
        }
    }

    /// 规则顺序变更项，由原始id值变为新的id值。
    public struct RuleChangeItem: TCInputModel {
        /// 原始sequence 值
        public let orderIndex: Int64

        /// 新的sequence 值
        public let newOrderIndex: Int64

        public init(orderIndex: Int64, newOrderIndex: Int64) {
            self.orderIndex = orderIndex
            self.newOrderIndex = newOrderIndex
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case newOrderIndex = "NewOrderIndex"
        }
    }

    /// 规则输入对象
    public struct RuleInfoData: TCInputModel {
        /// 执行顺序
        public let orderIndex: UInt64

        /// 访问源
        public let sourceIp: String

        /// 访问目的
        public let targetIp: String

        /// 协议
        public let `protocol`: String

        /// 策略, 0：观察，1：阻断，2：放行
        public let strategy: String

        /// 访问源类型，1是IP，3是域名，4是IP地址模版，5是域名地址模版
        public let sourceType: UInt64

        /// 方向，0：出站，1：入站
        public let direction: UInt64

        /// 描述
        public let detail: String

        /// 访问目的类型，1是IP，3是域名，4是IP地址模版，5是域名地址模版
        public let targetType: UInt64

        /// 端口
        public let port: String?

        /// id值
        public let id: UInt64?

        /// 日志id，从告警处创建必传，其它为空
        public let logId: String?

        /// 城市Code
        public let city: UInt64?

        /// 国家Code
        public let country: UInt64?

        /// 云厂商，支持多个，以逗号分隔， 1:腾讯云（仅中国香港及海外）,2:阿里云,3:亚马逊云,4:华为云,5:微软云
        public let cloudCode: String?

        /// 是否为地域
        public let isRegion: UInt64?

        /// 城市名
        public let cityName: String?

        /// 国家名
        public let countryName: String?

        /// 国家二位iso代码或者省份缩写代码
        public let regionIso: String?

        public init(orderIndex: UInt64, sourceIp: String, targetIp: String, protocol: String, strategy: String, sourceType: UInt64, direction: UInt64, detail: String, targetType: UInt64, port: String? = nil, id: UInt64? = nil, logId: String? = nil, city: UInt64? = nil, country: UInt64? = nil, cloudCode: String? = nil, isRegion: UInt64? = nil, cityName: String? = nil, countryName: String? = nil, regionIso: String? = nil) {
            self.orderIndex = orderIndex
            self.sourceIp = sourceIp
            self.targetIp = targetIp
            self.protocol = `protocol`
            self.strategy = strategy
            self.sourceType = sourceType
            self.direction = direction
            self.detail = detail
            self.targetType = targetType
            self.port = port
            self.id = id
            self.logId = logId
            self.city = city
            self.country = country
            self.cloudCode = cloudCode
            self.isRegion = isRegion
            self.cityName = cityName
            self.countryName = countryName
            self.regionIso = regionIso
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case sourceIp = "SourceIp"
            case targetIp = "TargetIp"
            case `protocol` = "Protocol"
            case strategy = "Strategy"
            case sourceType = "SourceType"
            case direction = "Direction"
            case detail = "Detail"
            case targetType = "TargetType"
            case port = "Port"
            case id = "Id"
            case logId = "LogId"
            case city = "City"
            case country = "Country"
            case cloudCode = "CloudCode"
            case isRegion = "IsRegion"
            case cityName = "CityName"
            case countryName = "CountryName"
            case regionIso = "RegionIso"
        }
    }

    /// 新手引导扫描信息
    public struct ScanInfo: TCOutputModel {
        /// 扫描结果信息
        public let scanResultInfo: ScanResultInfo

        /// 扫描状态 0扫描中 1完成  2未勾选自动扫描
        public let scanStatus: Int64

        /// 进度
        public let scanPercent: Float

        /// 预计完成时间
        public let scanTime: String

        enum CodingKeys: String, CodingKey {
            case scanResultInfo = "ScanResultInfo"
            case scanStatus = "ScanStatus"
            case scanPercent = "ScanPercent"
            case scanTime = "ScanTime"
        }
    }

    /// 新手引导扫描结果信息PortNum   int
    /// 	LeakNum   int
    /// 	IPNum     int
    /// 	IPStatus  bool
    /// 	IdpStatus bool
    /// 	BanStatus bool
    public struct ScanResultInfo: TCOutputModel {
        /// 暴露漏洞数量
        public let leakNum: UInt64

        /// 防护ip数量
        public let ipNum: UInt64

        /// 暴露端口数量
        public let portNum: UInt64

        /// 是否开启防护
        public let ipStatus: Bool

        /// 是否拦截攻击
        public let idpStatus: Bool

        /// 是否禁封端口
        public let banStatus: Bool

        enum CodingKeys: String, CodingKey {
            case leakNum = "LeakNum"
            case ipNum = "IPNum"
            case portNum = "PortNum"
            case ipStatus = "IPStatus"
            case idpStatus = "IdpStatus"
            case banStatus = "BanStatus"
        }
    }

    /// 双向下发的企业安全组规则
    public struct SecurityGroupBothWayInfo: TCInputModel, TCOutputModel {
        /// 执行顺序
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let orderIndex: UInt64?

        /// 访问源
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceId: String?

        /// 访问源类型，默认为0，0: IP, 1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100: 资产分组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceType: UInt64?

        /// 访问目的
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetId: String?

        /// 访问目的类型，默认为0，0: IP, 1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100: 资产分组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let targetType: UInt64?

        /// 协议
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 目的端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 策略, 1：阻断，2：放行
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategy: UInt64?

        /// 方向，0：出站，1：入站，默认1
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let direction: UInt64?

        /// 地域
        public let region: String

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: String?

        /// 是否开关开启，0：未开启，1：开启
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: UInt64?

        /// 是否是正常规则，0：正常，1：异常
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let isNew: UInt64?

        /// 单/双向下发，0:单向下发，1：双向下发
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bothWay: UInt64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 公网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIp: String?

        /// 掩码地址，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cidr: String?

        /// 端口协议类型参数模板id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceTemplateId: String?

        /// 是否使用端口协议模板，0：否，1：是
        public let protocolPortType: UInt64?

        public init(orderIndex: UInt64, sourceId: String, sourceType: UInt64, targetId: String, targetType: UInt64, protocol: String, port: String, strategy: UInt64, direction: UInt64, region: String, detail: String? = nil, status: UInt64? = nil, isNew: UInt64? = nil, bothWay: UInt64? = nil, vpcId: String? = nil, subnetId: String? = nil, instanceName: String? = nil, publicIp: String? = nil, privateIp: String? = nil, cidr: String? = nil, serviceTemplateId: String? = nil, protocolPortType: UInt64? = nil) {
            self.orderIndex = orderIndex
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.targetId = targetId
            self.targetType = targetType
            self.protocol = `protocol`
            self.port = port
            self.strategy = strategy
            self.direction = direction
            self.region = region
            self.detail = detail
            self.status = status
            self.isNew = isNew
            self.bothWay = bothWay
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.instanceName = instanceName
            self.publicIp = publicIp
            self.privateIp = privateIp
            self.cidr = cidr
            self.serviceTemplateId = serviceTemplateId
            self.protocolPortType = protocolPortType
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case sourceId = "SourceId"
            case sourceType = "SourceType"
            case targetId = "TargetId"
            case targetType = "TargetType"
            case `protocol` = "Protocol"
            case port = "Port"
            case strategy = "Strategy"
            case direction = "Direction"
            case region = "Region"
            case detail = "Detail"
            case status = "Status"
            case isNew = "IsNew"
            case bothWay = "BothWay"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case instanceName = "InstanceName"
            case publicIp = "PublicIp"
            case privateIp = "PrivateIp"
            case cidr = "Cidr"
            case serviceTemplateId = "ServiceTemplateId"
            case protocolPortType = "ProtocolPortType"
        }
    }

    /// 安全组列表数据
    public struct SecurityGroupListData: TCInputModel, TCOutputModel {
        /// 执行顺序
        public let orderIndex: UInt64

        /// 访问源
        public let sourceId: String

        /// 访问源类型，默认为0，1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100: 资源组
        public let sourceType: UInt64

        /// 访问目的
        public let targetId: String

        /// 访问目的类型，默认为0，1: VPC, 2: SUBNET, 3: CVM, 4: CLB, 5: ENI, 6: CDB, 7: 参数模板, 100:资源组
        public let targetType: UInt64

        /// 协议
        public let `protocol`: String

        /// 目的端口
        public let port: String

        /// 策略, 1：阻断，2：放行
        public let strategy: UInt64

        /// 描述
        public let detail: String

        /// 单/双向下发，0:单向下发，1：双向下发
        public let bothWay: UInt64

        /// 规则ID
        public let id: UInt64?

        /// 是否开关开启，0：未开启，1：开启
        public let status: UInt64?

        /// 是否是正常规则，0：正常，1：异常
        public let isNew: UInt64?

        /// 私有网络ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcId: String?

        /// 子网ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subnetId: String?

        /// 实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 公网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let privateIp: String?

        /// 掩码地址，多个以英文逗号分隔
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cidr: String?

        /// 端口协议类型参数模板id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceTemplateId: String?

        /// 生成双向下发规则
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bothWayInfo: [SecurityGroupBothWayInfo]?

        /// 方向，0：出站，1：入站，默认1
        public let direction: UInt64?

        /// 是否使用端口协议模板，0：否，1：是
        public let protocolPortType: UInt64?

        /// Uuid
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uuid: String?

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// 资产分组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assetGroupNameIn: String?

        /// 资产分组名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let assetGroupNameOut: String?

        /// 模板名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let parameterName: String?

        public init(orderIndex: UInt64, sourceId: String, sourceType: UInt64, targetId: String, targetType: UInt64, protocol: String, port: String, strategy: UInt64, detail: String, bothWay: UInt64, id: UInt64? = nil, status: UInt64? = nil, isNew: UInt64? = nil, vpcId: String? = nil, subnetId: String? = nil, instanceName: String? = nil, publicIp: String? = nil, privateIp: String? = nil, cidr: String? = nil, serviceTemplateId: String? = nil, bothWayInfo: [SecurityGroupBothWayInfo]? = nil, direction: UInt64? = nil, protocolPortType: UInt64? = nil, uuid: String? = nil, region: String? = nil, assetGroupNameIn: String? = nil, assetGroupNameOut: String? = nil, parameterName: String? = nil) {
            self.orderIndex = orderIndex
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.targetId = targetId
            self.targetType = targetType
            self.protocol = `protocol`
            self.port = port
            self.strategy = strategy
            self.detail = detail
            self.bothWay = bothWay
            self.id = id
            self.status = status
            self.isNew = isNew
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.instanceName = instanceName
            self.publicIp = publicIp
            self.privateIp = privateIp
            self.cidr = cidr
            self.serviceTemplateId = serviceTemplateId
            self.bothWayInfo = bothWayInfo
            self.direction = direction
            self.protocolPortType = protocolPortType
            self.uuid = uuid
            self.region = region
            self.assetGroupNameIn = assetGroupNameIn
            self.assetGroupNameOut = assetGroupNameOut
            self.parameterName = parameterName
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case sourceId = "SourceId"
            case sourceType = "SourceType"
            case targetId = "TargetId"
            case targetType = "TargetType"
            case `protocol` = "Protocol"
            case port = "Port"
            case strategy = "Strategy"
            case detail = "Detail"
            case bothWay = "BothWay"
            case id = "Id"
            case status = "Status"
            case isNew = "IsNew"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case instanceName = "InstanceName"
            case publicIp = "PublicIp"
            case privateIp = "PrivateIp"
            case cidr = "Cidr"
            case serviceTemplateId = "ServiceTemplateId"
            case bothWayInfo = "BothWayInfo"
            case direction = "Direction"
            case protocolPortType = "ProtocolPortType"
            case uuid = "Uuid"
            case region = "Region"
            case assetGroupNameIn = "AssetGroupNameIn"
            case assetGroupNameOut = "AssetGroupNameOut"
            case parameterName = "ParameterName"
        }
    }

    /// 企业安全组规则执行顺序修改对象
    public struct SecurityGroupOrderIndexData: TCInputModel {
        /// 企业安全组规则当前执行顺序
        public let orderIndex: UInt64

        /// 企业安全组规则更新目标执行顺序
        public let newOrderIndex: UInt64

        public init(orderIndex: UInt64, newOrderIndex: UInt64) {
            self.orderIndex = orderIndex
            self.newOrderIndex = newOrderIndex
        }

        enum CodingKeys: String, CodingKey {
            case orderIndex = "OrderIndex"
            case newOrderIndex = "NewOrderIndex"
        }
    }

    /// 安全组规则
    public struct SecurityGroupRule: TCInputModel, TCOutputModel {
        /// 访问源示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板id(ipm-dyodhpby)
        /// instance：资产实例id(ins-123456)
        /// resourcegroup：资产分组id(cfwrg-xxxx)
        /// tag：资源标签({\"Key\":\"标签key值\",\"Value\":\"标签Value值\"})
        /// region：地域(ap-gaungzhou)
        public let sourceContent: String

        /// 访问源类型，类型可以为以下6种：net|template|instance|resourcegroup|tag|region
        public let sourceType: String

        /// 访问目的示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板id(ipm-dyodhpby)
        /// instance：资产实例id(ins-123456)
        /// resourcegroup：资产分组id(cfwrg-xxxx)
        /// tag：资源标签({\"Key\":\"标签key值\",\"Value\":\"标签Value值\"})
        /// region：地域(ap-gaungzhou)
        public let destContent: String

        /// 访问目的类型，类型可以为以下6种：net|template|instance|resourcegroup|tag|region
        public let destType: String

        /// 访问控制策略中设置的流量通过云防火墙的方式。取值：
        /// accept：放行
        /// drop：拒绝
        public let ruleAction: String

        /// 描述
        public let description: String

        /// 规则顺序，-1表示最低，1表示最高，请勿和外层Type冲突（和外层的Type配合使用，当中间插入时，指定添加位置）
        public let orderIndex: String

        /// 协议；TCP/UDP/ICMP/ANY
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 访问控制策略的端口。取值：
        /// -1/-1：全部端口
        /// 80：80端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 端口协议类型参数模板id；协议端口模板id；与Protocol,Port互斥
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let serviceTemplateId: String?

        /// （入参时无需填写，自动生成）规则对应的唯一id
        public let id: String?

        /// （入参时、Enable已弃用；由通用配置中新增规则启用状态控制）
        /// 规则状态，true表示启用，false表示禁用
        public let enable: String?

        public init(sourceContent: String, sourceType: String, destContent: String, destType: String, ruleAction: String, description: String, orderIndex: String, protocol: String? = nil, port: String? = nil, serviceTemplateId: String? = nil, id: String? = nil, enable: String? = nil) {
            self.sourceContent = sourceContent
            self.sourceType = sourceType
            self.destContent = destContent
            self.destType = destType
            self.ruleAction = ruleAction
            self.description = description
            self.orderIndex = orderIndex
            self.protocol = `protocol`
            self.port = port
            self.serviceTemplateId = serviceTemplateId
            self.id = id
            self.enable = enable
        }

        enum CodingKeys: String, CodingKey {
            case sourceContent = "SourceContent"
            case sourceType = "SourceType"
            case destContent = "DestContent"
            case destType = "DestType"
            case ruleAction = "RuleAction"
            case description = "Description"
            case orderIndex = "OrderIndex"
            case `protocol` = "Protocol"
            case port = "Port"
            case serviceTemplateId = "ServiceTemplateId"
            case id = "Id"
            case enable = "Enable"
        }
    }

    /// 安全组规则
    public struct SecurityGroupSimplifyRule: TCOutputModel {
        /// 访问源示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板(ipm-dyodhpby)
        /// instance：资产实例(ins-123456)
        /// resourcegroup：资产分组(/全部分组/分组1/子分组1)
        /// tag：资源标签({"Key":"标签key值","Value":"标签Value值"})
        /// region：地域(ap-gaungzhou)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sourceContent: String?

        /// 访问目的示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板(ipm-dyodhpby)
        /// instance：资产实例(ins-123456)
        /// resourcegroup：资产分组(/全部分组/分组1/子分组1)
        /// tag：资源标签({"Key":"标签key值","Value":"标签Value值"})
        /// region：地域(ap-gaungzhou)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let destContent: String?

        /// 协议；TCP/UDP/ICMP/ANY
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let description: String?

        /// 规则对应的唯一id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleUuid: Int64?

        /// 规则序号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let sequence: Int64?

        enum CodingKeys: String, CodingKey {
            case sourceContent = "SourceContent"
            case destContent = "DestContent"
            case `protocol` = "Protocol"
            case description = "Description"
            case ruleUuid = "RuleUuid"
            case sequence = "Sequence"
        }
    }

    /// 执行顺序对象
    public struct SequenceData: TCInputModel {
        /// 规则Id值
        public let id: UInt64

        /// 修改前执行顺序
        public let orderIndex: UInt64

        /// 修改后执行顺序
        public let newOrderIndex: UInt64

        public init(id: UInt64, orderIndex: UInt64, newOrderIndex: UInt64) {
            self.id = id
            self.orderIndex = orderIndex
            self.newOrderIndex = newOrderIndex
        }

        enum CodingKeys: String, CodingKey {
            case id = "Id"
            case orderIndex = "OrderIndex"
            case newOrderIndex = "NewOrderIndex"
        }
    }

    /// StaticInfo 告警柱形图统计信息
    public struct StaticInfo: TCOutputModel {
        /// 数
        public let num: Int64

        /// 端口
        public let port: String

        /// ip信息
        public let ip: String

        /// 地址
        public let address: String

        /// 资产id
        public let insID: String

        /// 资产名称
        public let insName: String

        enum CodingKeys: String, CodingKey {
            case num = "Num"
            case port = "Port"
            case ip = "Ip"
            case address = "Address"
            case insID = "InsID"
            case insName = "InsName"
        }
    }

    /// 防火墙开关列表对象
    public struct SwitchListsData: TCOutputModel {
        /// 公网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIp: String?

        /// 内网IP
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let intranetIp: String?

        /// 实例名
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceName: String?

        /// 实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceId: String?

        /// 资产类型
        public let assetType: String

        /// 地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let area: String?

        /// 防火墙开关
        public let `switch`: Int64

        /// id值
        public let id: UInt64

        /// 公网 IP 类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let publicIpType: UInt64?

        /// 风险端口数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let portTimes: UInt64?

        /// 最近扫描时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let lastTime: String?

        /// 扫描深度
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanMode: String?

        /// 扫描状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scanStatus: UInt64?

        enum CodingKeys: String, CodingKey {
            case publicIp = "PublicIp"
            case intranetIp = "IntranetIp"
            case instanceName = "InstanceName"
            case instanceId = "InstanceId"
            case assetType = "AssetType"
            case area = "Area"
            case `switch` = "Switch"
            case id = "Id"
            case publicIpType = "PublicIpType"
            case portTimes = "PortTimes"
            case lastTime = "LastTime"
            case scanMode = "ScanMode"
            case scanStatus = "ScanStatus"
        }
    }

    /// 告警中心概览数据
    public struct TLogInfo: TCOutputModel {
        /// 失陷主机
        public let outNum: Int64

        /// 待处置告警
        public let handleNum: Int64

        /// 漏洞攻击
        public let vulNum: Int64

        /// 网络探测
        public let networkNum: Int64

        /// 封禁列表
        public let banNum: Int64

        /// 暴力破解
        public let bruteForceNum: Int64

        enum CodingKeys: String, CodingKey {
            case outNum = "OutNum"
            case handleNum = "HandleNum"
            case vulNum = "VulNum"
            case networkNum = "NetworkNum"
            case banNum = "BanNum"
            case bruteForceNum = "BruteForceNum"
        }
    }

    /// 地址模版列表数据
    public struct TemplateListInfo: TCOutputModel {
        /// 模版ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let uuid: String?

        /// 模版名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let name: String?

        /// 描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let detail: String?

        /// IP模版
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipString: String?

        /// 插入时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let insertTime: String?

        /// 修改时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateTime: String?

        /// 模版类型
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let type: Int64?

        /// 关联规则条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let rulesNum: Int64?

        enum CodingKeys: String, CodingKey {
            case uuid = "Uuid"
            case name = "Name"
            case detail = "Detail"
            case ipString = "IpString"
            case insertTime = "InsertTime"
            case updateTime = "UpdateTime"
            case type = "Type"
            case rulesNum = "RulesNum"
        }
    }

    /// 未处置事件详情
    public struct UnHandleEvent: TCOutputModel {
        /// 伪攻击链类型
        public let eventTableListStruct: [UnHandleEventDetail]

        /// 1 是  0否
        public let baseLineUser: UInt64

        /// 1 打开 0 关闭
        public let baseLineInSwitch: UInt64

        /// 1 打开 0 关闭
        public let baseLineOutSwitch: UInt64

        /// vpc间防火墙实例数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vpcFwCount: UInt64?

        enum CodingKeys: String, CodingKey {
            case eventTableListStruct = "EventTableListStruct"
            case baseLineUser = "BaseLineUser"
            case baseLineInSwitch = "BaseLineInSwitch"
            case baseLineOutSwitch = "BaseLineOutSwitch"
            case vpcFwCount = "VpcFwCount"
        }
    }

    /// 未处置事件信息汇总
    public struct UnHandleEventDetail: TCOutputModel {
        /// 安全事件名称
        public let eventName: String

        /// 未处置事件数量
        public let total: UInt64

        enum CodingKeys: String, CodingKey {
            case eventName = "EventName"
            case total = "Total"
        }
    }

    /// nat防火墙 vpc dns 开关信息
    public struct VpcDnsInfo: TCOutputModel {
        /// vpc id
        public let vpcId: String

        /// vpc 名称
        public let vpcName: String

        /// nat 防火墙模式 0：新增模式， 1: 接入模式
        public let fwMode: Int64

        /// vpc ipv4网段范围 CIDR（Classless Inter-Domain Routing，无类域间路由选择）
        public let vpcIpv4Cidr: String

        /// 外网弹性ip，防火墙 dns解析地址
        public let dnsEip: String

        /// nat网关id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natInsId: String?

        /// nat网关名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let natInsName: String?

        /// 0：开关关闭 ， 1: 开关打开
        public let switchStatus: Int64

        /// 0：未防护， 1: 已防护，2：忽略此字段
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let protectedStatus: UInt64?

        /// 是否支持DNS FW，0-不支持、1-支持
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let supportDNSFW: UInt64?

        enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case vpcName = "VpcName"
            case fwMode = "FwMode"
            case vpcIpv4Cidr = "VpcIpv4Cidr"
            case dnsEip = "DNSEip"
            case natInsId = "NatInsId"
            case natInsName = "NatInsName"
            case switchStatus = "SwitchStatus"
            case protectedStatus = "ProtectedStatus"
            case supportDNSFW = "SupportDNSFW"
        }
    }

    /// VPC防火墙实例的CVM信息
    public struct VpcFwCvmInsInfo: TCInputModel, TCOutputModel {
        /// VPC防火墙实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInsId: String?

        /// CVM所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let region: String?

        /// CVM所在地域中文
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionZh: String?

        /// CVM所在地域详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionDetail: String?

        /// 主机所在可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneZh: String?

        /// 备机所在可用区
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let zoneZhBack: String?

        /// 防火墙CVM带宽值
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let bandWidth: Int64?

        public init(fwInsId: String, region: String? = nil, regionZh: String? = nil, regionDetail: String? = nil, zoneZh: String? = nil, zoneZhBack: String? = nil, bandWidth: Int64? = nil) {
            self.fwInsId = fwInsId
            self.region = region
            self.regionZh = regionZh
            self.regionDetail = regionDetail
            self.zoneZh = zoneZh
            self.zoneZhBack = zoneZhBack
            self.bandWidth = bandWidth
        }

        enum CodingKeys: String, CodingKey {
            case fwInsId = "FwInsId"
            case region = "Region"
            case regionZh = "RegionZh"
            case regionDetail = "RegionDetail"
            case zoneZh = "ZoneZh"
            case zoneZhBack = "ZoneZhBack"
            case bandWidth = "BandWidth"
        }
    }

    /// VPC防火墙(组)及防火墙实例详情信息
    public struct VpcFwGroupInfo: TCOutputModel {
        /// 防火墙(组)ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupId: String?

        /// 防火墙(组)名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupName: String?

        /// 防火墙组涉及到的开关个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwSwitchNum: Int64?

        /// 防火墙(组)部署的地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let regionLst: [String]?

        /// 模式 1：CCN云联网模式；0：私有网络模式 2: sase 模式 3：ccn 高级模式 4: 私有网络(跨租户单边模式)
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let mode: Int64?

        /// 防火墙实例的开关模式 1: 单点互通 2: 多点互通 3: 全互通 4: 自定义路由
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let switchMode: Int64?

        /// VPC防火墙实例卡片信息数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInstanceLst: [VpcFwInstanceInfo]?

        /// 防火墙(状态) 0：正常 1: 初始化或操作中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// auto :自动选择
        /// 如果为网段，则为用户自定义 192.168.0.0/20
        public let fwVpcCidr: String?

        /// cdc专用集群场景时表示部署所属的cdc
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcId: String?

        /// cdc专用集群场景时表示cdc名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let cdcName: String?

        /// 跨租户模式 1管理员 2单边 0 非跨租户
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let crossUserMode: String?

        enum CodingKeys: String, CodingKey {
            case fwGroupId = "FwGroupId"
            case fwGroupName = "FwGroupName"
            case fwSwitchNum = "FwSwitchNum"
            case regionLst = "RegionLst"
            case mode = "Mode"
            case switchMode = "SwitchMode"
            case fwInstanceLst = "FwInstanceLst"
            case status = "Status"
            case fwVpcCidr = "FwVpcCidr"
            case cdcId = "CdcId"
            case cdcName = "CdcName"
            case crossUserMode = "CrossUserMode"
        }
    }

    /// vpc 防火墙下单防火墙实例结构体
    public struct VpcFwInstance: TCInputModel {
        /// 防火墙实例名称
        public let name: String?

        /// 私有网络模式下接入的VpcId列表；仅私有网络模式使用
        public let vpcIds: [String]?

        /// 部署地域信息
        public let fwDeploy: FwDeploy?

        /// 防火墙实例ID (编辑场景传)
        public let fwInsId: String?

        public init(name: String, vpcIds: [String], fwDeploy: FwDeploy, fwInsId: String? = nil) {
            self.name = name
            self.vpcIds = vpcIds
            self.fwDeploy = fwDeploy
            self.fwInsId = fwInsId
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case vpcIds = "VpcIds"
            case fwDeploy = "FwDeploy"
            case fwInsId = "FwInsId"
        }
    }

    /// VPC防火墙实例卡片信息
    public struct VpcFwInstanceInfo: TCInputModel, TCOutputModel {
        /// VPC防火墙实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInsName: String?

        /// VPC防火墙实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInsId: String?

        /// VPC防火墙实例模式 0: 旧VPC模式防火墙 1: CCN模式防火墙
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwMode: Int64?

        /// VPC防火墙接入网络实例个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let joinInsNum: Int64?

        /// VPC防火墙开关个数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwSwitchNum: Int64?

        /// VPC防火墙状态 0:正常 ， 1：创建中 2: 变更中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// VPC防火墙创建时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let time: String?

        /// VPC 相关云联网ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ccnId: [String]?

        /// VPC 相关云联网名称列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ccnName: [String]?

        /// VPC 相关对等连接ID列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let peerConnectionId: [String]?

        /// VPC 相关对等连接名称列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let peerConnectionName: [String]?

        /// VPC防火墙CVM的列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwCvmLst: [VpcFwCvmInsInfo]?

        /// VPC防火墙接入网络实例类型列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let joinInsLst: [VpcFwJoinInstanceType]?

        /// 防火墙网关信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGateway: [FwGateway]?

        /// 防火墙(组)ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupId: String?

        /// 已使用规则数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleUsed: Int64?

        /// 最大规则数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ruleMax: Int64?

        /// 防火墙实例带宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let width: Int64?

        /// 用户VPC墙总带宽
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userVpcWidth: Int64?

        /// 接入的vpc列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let joinInsIdLst: [String]?

        /// 内网间峰值带宽 (单位 bps )
        public let flowMax: Int64?

        /// 实例引擎版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let engineVersion: String?

        /// 引擎是否可升级：0，不可升级；1，可升级
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let updateEnable: Int64?

        public init(fwInsName: String, fwInsId: String, fwMode: Int64, joinInsNum: Int64, fwSwitchNum: Int64, status: Int64, time: String, ccnId: [String]? = nil, ccnName: [String]? = nil, peerConnectionId: [String]? = nil, peerConnectionName: [String]? = nil, fwCvmLst: [VpcFwCvmInsInfo]? = nil, joinInsLst: [VpcFwJoinInstanceType]? = nil, fwGateway: [FwGateway]? = nil, fwGroupId: String? = nil, ruleUsed: Int64? = nil, ruleMax: Int64? = nil, width: Int64? = nil, userVpcWidth: Int64? = nil, joinInsIdLst: [String]? = nil, flowMax: Int64? = nil, engineVersion: String? = nil, updateEnable: Int64? = nil) {
            self.fwInsName = fwInsName
            self.fwInsId = fwInsId
            self.fwMode = fwMode
            self.joinInsNum = joinInsNum
            self.fwSwitchNum = fwSwitchNum
            self.status = status
            self.time = time
            self.ccnId = ccnId
            self.ccnName = ccnName
            self.peerConnectionId = peerConnectionId
            self.peerConnectionName = peerConnectionName
            self.fwCvmLst = fwCvmLst
            self.joinInsLst = joinInsLst
            self.fwGateway = fwGateway
            self.fwGroupId = fwGroupId
            self.ruleUsed = ruleUsed
            self.ruleMax = ruleMax
            self.width = width
            self.userVpcWidth = userVpcWidth
            self.joinInsIdLst = joinInsIdLst
            self.flowMax = flowMax
            self.engineVersion = engineVersion
            self.updateEnable = updateEnable
        }

        enum CodingKeys: String, CodingKey {
            case fwInsName = "FwInsName"
            case fwInsId = "FwInsId"
            case fwMode = "FwMode"
            case joinInsNum = "JoinInsNum"
            case fwSwitchNum = "FwSwitchNum"
            case status = "Status"
            case time = "Time"
            case ccnId = "CcnId"
            case ccnName = "CcnName"
            case peerConnectionId = "PeerConnectionId"
            case peerConnectionName = "PeerConnectionName"
            case fwCvmLst = "FwCvmLst"
            case joinInsLst = "JoinInsLst"
            case fwGateway = "FwGateway"
            case fwGroupId = "FwGroupId"
            case ruleUsed = "RuleUsed"
            case ruleMax = "RuleMax"
            case width = "Width"
            case userVpcWidth = "UserVpcWidth"
            case joinInsIdLst = "JoinInsIdLst"
            case flowMax = "FlowMax"
            case engineVersion = "EngineVersion"
            case updateEnable = "UpdateEnable"
        }
    }

    /// VPC防火墙实例信息
    public struct VpcFwInstanceShow: TCOutputModel {
        /// VPC防火墙实例ID
        public let fwInsId: String?

        /// VPC防火墙实例名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInsName: String?

        /// 网络经过VPC防火墙CVM所在地域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwInsRegion: String?

        enum CodingKeys: String, CodingKey {
            case fwInsId = "FwInsId"
            case fwInsName = "FwInsName"
            case fwInsRegion = "FwInsRegion"
        }
    }

    /// VPC防火墙接入的网络实例类型及数量
    public struct VpcFwJoinInstanceType: TCOutputModel {
        /// 接入实例类型，VPC、DIRECTCONNECT、 VPNGW 等
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let joinType: String?

        /// 接入的对应网络实例类型的数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let num: Int64?

        enum CodingKeys: String, CodingKey {
            case joinType = "JoinType"
            case num = "Num"
        }
    }

    /// VPC内网间规则
    public struct VpcRuleItem: TCInputModel, TCOutputModel {
        /// 访问源示例：
        /// net：IP/CIDR(192.168.0.2)
        public let sourceContent: String

        /// 访问源类型，类型可以为：net
        public let sourceType: String

        /// 访问目的示例：
        /// net：IP/CIDR(192.168.0.2)
        /// domain：域名规则，例如*.qq.com
        public let destContent: String

        /// 访问目的类型，类型可以为：net，domain
        public let destType: String

        /// 协议，可选的值：
        /// TCP
        /// UDP
        /// ICMP
        /// ANY
        /// HTTP
        /// HTTPS
        /// HTTP/HTTPS
        /// SMTP
        /// SMTPS
        /// SMTP/SMTPS
        /// FTP
        /// DNS
        /// TLS/SSL
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let `protocol`: String?

        /// 访问控制策略中设置的流量通过云防火墙的方式。取值：
        /// accept：放行
        /// drop：拒绝
        /// log：观察
        public let ruleAction: String

        /// 访问控制策略的端口。取值：
        /// -1/-1：全部端口
        /// 80：80端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let port: String?

        /// 描述
        public let description: String

        /// 规则顺序，-1表示最低，1表示最高
        public let orderIndex: Int64

        /// 规则对应的唯一id
        public let uuid: Int64

        /// 规则状态，true表示启用，false表示禁用
        public let enable: String

        /// 规则生效的范围，是在哪对vpc之间还是针对所有vpc间生效
        public let edgeId: String

        /// 规则的命中次数，增删改查规则时无需传入此参数，主要用于返回查询结果数据
        public let detectedTimes: Int64?

        /// EdgeId对应的这对VPC间防火墙的描述
        public let edgeName: String?

        /// 内部使用的uuid，一般情况下不会使用到该字段
        public let internalUuid: Int64?

        /// 规则被删除：1，已删除；0，未删除
        public let deleted: Int64?

        /// 规则生效的防火墙实例ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupId: String?

        /// 防火墙名称
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupName: String?

        /// beta任务详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let betaList: [BetaInfoByACL]?

        public init(sourceContent: String, sourceType: String, destContent: String, destType: String, protocol: String, ruleAction: String, port: String, description: String, orderIndex: Int64, uuid: Int64, enable: String, edgeId: String, detectedTimes: Int64? = nil, edgeName: String? = nil, internalUuid: Int64? = nil, deleted: Int64? = nil, fwGroupId: String? = nil, fwGroupName: String? = nil, betaList: [BetaInfoByACL]? = nil) {
            self.sourceContent = sourceContent
            self.sourceType = sourceType
            self.destContent = destContent
            self.destType = destType
            self.protocol = `protocol`
            self.ruleAction = ruleAction
            self.port = port
            self.description = description
            self.orderIndex = orderIndex
            self.uuid = uuid
            self.enable = enable
            self.edgeId = edgeId
            self.detectedTimes = detectedTimes
            self.edgeName = edgeName
            self.internalUuid = internalUuid
            self.deleted = deleted
            self.fwGroupId = fwGroupId
            self.fwGroupName = fwGroupName
            self.betaList = betaList
        }

        enum CodingKeys: String, CodingKey {
            case sourceContent = "SourceContent"
            case sourceType = "SourceType"
            case destContent = "DestContent"
            case destType = "DestType"
            case `protocol` = "Protocol"
            case ruleAction = "RuleAction"
            case port = "Port"
            case description = "Description"
            case orderIndex = "OrderIndex"
            case uuid = "Uuid"
            case enable = "Enable"
            case edgeId = "EdgeId"
            case detectedTimes = "DetectedTimes"
            case edgeName = "EdgeName"
            case internalUuid = "InternalUuid"
            case deleted = "Deleted"
            case fwGroupId = "FwGroupId"
            case fwGroupName = "FwGroupName"
            case betaList = "BetaList"
        }
    }

    /// vpc区域数据详情
    public struct VpcZoneData: TCInputModel {
        /// 可用区
        public let zone: String

        /// vpc节点地域
        public let region: String

        public init(zone: String, region: String) {
            self.zone = zone
            self.region = region
        }

        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case region = "Region"
        }
    }
}
