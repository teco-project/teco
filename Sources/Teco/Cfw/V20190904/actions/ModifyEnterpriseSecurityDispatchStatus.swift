//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// ModifyEnterpriseSecurityDispatchStatus请求参数结构体
    public struct ModifyEnterpriseSecurityDispatchStatusRequest: TCRequestModel {
        /// 状态，0：立即下发，1：停止下发
        public let status: UInt64

        public init(status: UInt64) {
            self.status = status
        }

        enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    /// ModifyEnterpriseSecurityDispatchStatus返回参数结构体
    public struct ModifyEnterpriseSecurityDispatchStatusResponse: TCResponseModel {
        /// 0: 修改成功, 其他: 修改失败
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 修改企业安全组下发状态
    @inlinable
    public func modifyEnterpriseSecurityDispatchStatus(_ input: ModifyEnterpriseSecurityDispatchStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEnterpriseSecurityDispatchStatusResponse> {
        self.client.execute(action: "ModifyEnterpriseSecurityDispatchStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改企业安全组下发状态
    @inlinable
    public func modifyEnterpriseSecurityDispatchStatus(_ input: ModifyEnterpriseSecurityDispatchStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEnterpriseSecurityDispatchStatusResponse {
        try await self.client.execute(action: "ModifyEnterpriseSecurityDispatchStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改企业安全组下发状态
    @inlinable
    public func modifyEnterpriseSecurityDispatchStatus(status: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEnterpriseSecurityDispatchStatusResponse> {
        self.modifyEnterpriseSecurityDispatchStatus(.init(status: status), region: region, logger: logger, on: eventLoop)
    }

    /// 修改企业安全组下发状态
    @inlinable
    public func modifyEnterpriseSecurityDispatchStatus(status: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEnterpriseSecurityDispatchStatusResponse {
        try await self.modifyEnterpriseSecurityDispatchStatus(.init(status: status), region: region, logger: logger, on: eventLoop)
    }
}
