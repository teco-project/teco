//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// ModifyVpcFwGroup请求参数结构体
    public struct ModifyVpcFwGroupRequest: TCRequest {
        /// 编辑的防火墙(组)ID
        public let fwGroupId: String

        /// 修改防火墙(组)名称
        public let name: String?

        /// 编辑的防火墙实例列表
        public let vpcFwInstances: [VpcFwInstance]?

        /// 指定防火墙使用网段信息
        public let fwCidrInfo: FwCidrInfo?

        public init(fwGroupId: String, name: String? = nil, vpcFwInstances: [VpcFwInstance]? = nil, fwCidrInfo: FwCidrInfo? = nil) {
            self.fwGroupId = fwGroupId
            self.name = name
            self.vpcFwInstances = vpcFwInstances
            self.fwCidrInfo = fwCidrInfo
        }

        enum CodingKeys: String, CodingKey {
            case fwGroupId = "FwGroupId"
            case name = "Name"
            case vpcFwInstances = "VpcFwInstances"
            case fwCidrInfo = "FwCidrInfo"
        }
    }

    /// ModifyVpcFwGroup返回参数结构体
    public struct ModifyVpcFwGroupResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 编辑VPC间防火墙(防火墙组)
    @inlinable @discardableResult
    public func modifyVpcFwGroup(_ input: ModifyVpcFwGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcFwGroupResponse> {
        self.client.execute(action: "ModifyVpcFwGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 编辑VPC间防火墙(防火墙组)
    @inlinable @discardableResult
    public func modifyVpcFwGroup(_ input: ModifyVpcFwGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcFwGroupResponse {
        try await self.client.execute(action: "ModifyVpcFwGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 编辑VPC间防火墙(防火墙组)
    @inlinable @discardableResult
    public func modifyVpcFwGroup(fwGroupId: String, name: String? = nil, vpcFwInstances: [VpcFwInstance]? = nil, fwCidrInfo: FwCidrInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcFwGroupResponse> {
        self.modifyVpcFwGroup(.init(fwGroupId: fwGroupId, name: name, vpcFwInstances: vpcFwInstances, fwCidrInfo: fwCidrInfo), region: region, logger: logger, on: eventLoop)
    }

    /// 编辑VPC间防火墙(防火墙组)
    @inlinable @discardableResult
    public func modifyVpcFwGroup(fwGroupId: String, name: String? = nil, vpcFwInstances: [VpcFwInstance]? = nil, fwCidrInfo: FwCidrInfo? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcFwGroupResponse {
        try await self.modifyVpcFwGroup(.init(fwGroupId: fwGroupId, name: name, vpcFwInstances: vpcFwInstances, fwCidrInfo: fwCidrInfo), region: region, logger: logger, on: eventLoop)
    }
}
