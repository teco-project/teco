//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// DescribeFwSyncStatus请求参数结构体
    public struct DescribeFwSyncStatusRequest: TCRequest {
        /// 查询的同步状态类型：Route,同步路由状态
        public let syncType: String?

        public init(syncType: String? = nil) {
            self.syncType = syncType
        }

        enum CodingKeys: String, CodingKey {
            case syncType = "SyncType"
        }
    }

    /// DescribeFwSyncStatus返回参数结构体
    public struct DescribeFwSyncStatusResponse: TCResponse {
        /// 同步状态：1，同步中；0，同步完成
        public let syncStatus: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case syncStatus = "SyncStatus"
            case requestId = "RequestId"
        }
    }

    /// 获取防火墙同步状态
    ///
    /// 获取防火墙同步状态，一般在执行同步操作后查询
    @inlinable
    public func describeFwSyncStatus(_ input: DescribeFwSyncStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFwSyncStatusResponse> {
        self.client.execute(action: "DescribeFwSyncStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取防火墙同步状态
    ///
    /// 获取防火墙同步状态，一般在执行同步操作后查询
    @inlinable
    public func describeFwSyncStatus(_ input: DescribeFwSyncStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFwSyncStatusResponse {
        try await self.client.execute(action: "DescribeFwSyncStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取防火墙同步状态
    ///
    /// 获取防火墙同步状态，一般在执行同步操作后查询
    @inlinable
    public func describeFwSyncStatus(syncType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeFwSyncStatusResponse> {
        self.describeFwSyncStatus(.init(syncType: syncType), region: region, logger: logger, on: eventLoop)
    }

    /// 获取防火墙同步状态
    ///
    /// 获取防火墙同步状态，一般在执行同步操作后查询
    @inlinable
    public func describeFwSyncStatus(syncType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeFwSyncStatusResponse {
        try await self.describeFwSyncStatus(.init(syncType: syncType), region: region, logger: logger, on: eventLoop)
    }
}
