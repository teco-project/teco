//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// DescribeEnterpriseSecurityGroupRule请求参数结构体
    public struct DescribeEnterpriseSecurityGroupRuleRequest: TCRequestModel {
        /// 分页查询时，显示的当前页的页码。
        ///
        /// 默认值为1。
        public let pageNo: String

        /// 分页查询时，显示的每页数据的最大条数。
        ///
        /// 可设置值最大为50。
        public let pageSize: String

        /// 访问源示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板(ipm-dyodhpby)
        /// instance：资产实例(ins-123456)
        /// resourcegroup：资产分组(/全部分组/分组1/子分组1)
        /// tag：资源标签({"Key":"标签key值","Value":"标签Value值"})
        /// region：地域(ap-gaungzhou)
        /// 支持通配
        public let sourceContent: String?

        /// 访问目的示例：
        /// net：IP/CIDR(192.168.0.2)
        /// template：参数模板(ipm-dyodhpby)
        /// instance：资产实例(ins-123456)
        /// resourcegroup：资产分组(/全部分组/分组1/子分组1)
        /// tag：资源标签({"Key":"标签key值","Value":"标签Value值"})
        /// region：地域(ap-gaungzhou)
        /// 支持通配
        public let destContent: String?

        /// 规则描述，支持通配
        public let description: String?

        /// 访问控制策略中设置的流量通过云防火墙的方式。取值：
        /// accept：放行
        /// drop：拒绝
        public let ruleAction: String?

        /// 是否启用规则，默认为启用，取值：
        /// true为启用，false为不启用
        public let enable: String?

        /// 访问控制策略的端口。取值：
        /// -1/-1：全部端口
        /// 80：80端口
        public let port: String?

        /// 协议；TCP/UDP/ICMP/ANY
        public let `protocol`: String?

        /// 端口协议类型参数模板id；协议端口模板id；与Protocol,Port互斥
        public let serviceTemplateId: String?

        public init(pageNo: String, pageSize: String, sourceContent: String? = nil, destContent: String? = nil, description: String? = nil, ruleAction: String? = nil, enable: String? = nil, port: String? = nil, protocol: String? = nil, serviceTemplateId: String? = nil) {
            self.pageNo = pageNo
            self.pageSize = pageSize
            self.sourceContent = sourceContent
            self.destContent = destContent
            self.description = description
            self.ruleAction = ruleAction
            self.enable = enable
            self.port = port
            self.protocol = `protocol`
            self.serviceTemplateId = serviceTemplateId
        }

        enum CodingKeys: String, CodingKey {
            case pageNo = "PageNo"
            case pageSize = "PageSize"
            case sourceContent = "SourceContent"
            case destContent = "DestContent"
            case description = "Description"
            case ruleAction = "RuleAction"
            case enable = "Enable"
            case port = "Port"
            case `protocol` = "Protocol"
            case serviceTemplateId = "ServiceTemplateId"
        }
    }

    /// DescribeEnterpriseSecurityGroupRule返回参数结构体
    public struct DescribeEnterpriseSecurityGroupRuleResponse: TCResponseModel {
        /// 分页查询时，显示的当前页的页码。
        public let pageNo: String

        /// 分页查询时，显示的每页数据的最大条数。
        public let pageSize: String

        /// 访问控制策略列表
        public let rules: [SecurityGroupRule]

        /// 访问控制策略的总数量。
        public let totalCount: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case pageNo = "PageNo"
            case pageSize = "PageSize"
            case rules = "Rules"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }

    /// 查询新企业安全组规则
    @inlinable
    public func describeEnterpriseSecurityGroupRule(_ input: DescribeEnterpriseSecurityGroupRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEnterpriseSecurityGroupRuleResponse> {
        self.client.execute(action: "DescribeEnterpriseSecurityGroupRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询新企业安全组规则
    @inlinable
    public func describeEnterpriseSecurityGroupRule(_ input: DescribeEnterpriseSecurityGroupRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEnterpriseSecurityGroupRuleResponse {
        try await self.client.execute(action: "DescribeEnterpriseSecurityGroupRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询新企业安全组规则
    @inlinable
    public func describeEnterpriseSecurityGroupRule(pageNo: String, pageSize: String, sourceContent: String? = nil, destContent: String? = nil, description: String? = nil, ruleAction: String? = nil, enable: String? = nil, port: String? = nil, protocol: String? = nil, serviceTemplateId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeEnterpriseSecurityGroupRuleResponse> {
        self.describeEnterpriseSecurityGroupRule(.init(pageNo: pageNo, pageSize: pageSize, sourceContent: sourceContent, destContent: destContent, description: description, ruleAction: ruleAction, enable: enable, port: port, protocol: `protocol`, serviceTemplateId: serviceTemplateId), region: region, logger: logger, on: eventLoop)
    }

    /// 查询新企业安全组规则
    @inlinable
    public func describeEnterpriseSecurityGroupRule(pageNo: String, pageSize: String, sourceContent: String? = nil, destContent: String? = nil, description: String? = nil, ruleAction: String? = nil, enable: String? = nil, port: String? = nil, protocol: String? = nil, serviceTemplateId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeEnterpriseSecurityGroupRuleResponse {
        try await self.describeEnterpriseSecurityGroupRule(.init(pageNo: pageNo, pageSize: pageSize, sourceContent: sourceContent, destContent: destContent, description: description, ruleAction: ruleAction, enable: enable, port: port, protocol: `protocol`, serviceTemplateId: serviceTemplateId), region: region, logger: logger, on: eventLoop)
    }
}
