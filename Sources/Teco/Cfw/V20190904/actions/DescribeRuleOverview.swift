//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cfw {
    /// DescribeRuleOverview请求参数结构体
    public struct DescribeRuleOverviewRequest: TCRequestModel {
        /// 方向，0：出站，1：入站
        public let direction: UInt64?

        public init(direction: UInt64? = nil) {
            self.direction = direction
        }

        enum CodingKeys: String, CodingKey {
            case direction = "Direction"
        }
    }

    /// DescribeRuleOverview返回参数结构体
    public struct DescribeRuleOverviewResponse: TCResponseModel {
        /// 规则总数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let allTotal: UInt64?

        /// 阻断策略规则数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let strategyNum: UInt64?

        /// 启用规则数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startRuleNum: UInt64?

        /// 停用规则数量
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stopRuleNum: UInt64?

        /// 剩余配额
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let remainingNum: Int64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case allTotal = "AllTotal"
            case strategyNum = "StrategyNum"
            case startRuleNum = "StartRuleNum"
            case stopRuleNum = "StopRuleNum"
            case remainingNum = "RemainingNum"
            case requestId = "RequestId"
        }
    }

    /// 查询规则列表概况
    @inlinable
    public func describeRuleOverview(_ input: DescribeRuleOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleOverviewResponse> {
        self.client.execute(action: "DescribeRuleOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询规则列表概况
    @inlinable
    public func describeRuleOverview(_ input: DescribeRuleOverviewRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleOverviewResponse {
        try await self.client.execute(action: "DescribeRuleOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询规则列表概况
    @inlinable
    public func describeRuleOverview(direction: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRuleOverviewResponse> {
        let input = DescribeRuleOverviewRequest(direction: direction)
        return self.client.execute(action: "DescribeRuleOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询规则列表概况
    @inlinable
    public func describeRuleOverview(direction: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeRuleOverviewResponse {
        let input = DescribeRuleOverviewRequest(direction: direction)
        return try await self.client.execute(action: "DescribeRuleOverview", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
