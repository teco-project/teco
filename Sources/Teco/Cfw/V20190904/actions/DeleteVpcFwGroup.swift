//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// DeleteVpcFwGroup请求参数结构体
    public struct DeleteVpcFwGroupRequest: TCRequest {
        /// 防火墙(组)Id
        public let fwGroupId: String?

        /// 是否删除整个防火墙(组)
        /// 0：不删除防火墙(组)，只删除单独实例
        /// 1：删除整个防火墙(组)
        public let deleteFwGroup: Int64?

        /// 待删除的防火墙实例数组
        public let vpcFwInsList: [String]?

        public init(fwGroupId: String? = nil, deleteFwGroup: Int64? = nil, vpcFwInsList: [String]? = nil) {
            self.fwGroupId = fwGroupId
            self.deleteFwGroup = deleteFwGroup
            self.vpcFwInsList = vpcFwInsList
        }

        enum CodingKeys: String, CodingKey {
            case fwGroupId = "FwGroupId"
            case deleteFwGroup = "DeleteFwGroup"
            case vpcFwInsList = "VpcFwInsList"
        }
    }

    /// DeleteVpcFwGroup返回参数结构体
    public struct DeleteVpcFwGroupResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 删除防火墙(组)，或者删除其中实例
    @inlinable @discardableResult
    public func deleteVpcFwGroup(_ input: DeleteVpcFwGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteVpcFwGroupResponse> {
        self.client.execute(action: "DeleteVpcFwGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除防火墙(组)，或者删除其中实例
    @inlinable @discardableResult
    public func deleteVpcFwGroup(_ input: DeleteVpcFwGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteVpcFwGroupResponse {
        try await self.client.execute(action: "DeleteVpcFwGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除防火墙(组)，或者删除其中实例
    @inlinable @discardableResult
    public func deleteVpcFwGroup(fwGroupId: String? = nil, deleteFwGroup: Int64? = nil, vpcFwInsList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteVpcFwGroupResponse> {
        self.deleteVpcFwGroup(.init(fwGroupId: fwGroupId, deleteFwGroup: deleteFwGroup, vpcFwInsList: vpcFwInsList), region: region, logger: logger, on: eventLoop)
    }

    /// 删除防火墙(组)，或者删除其中实例
    @inlinable @discardableResult
    public func deleteVpcFwGroup(fwGroupId: String? = nil, deleteFwGroup: Int64? = nil, vpcFwInsList: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteVpcFwGroupResponse {
        try await self.deleteVpcFwGroup(.init(fwGroupId: fwGroupId, deleteFwGroup: deleteFwGroup, vpcFwInsList: vpcFwInsList), region: region, logger: logger, on: eventLoop)
    }
}
