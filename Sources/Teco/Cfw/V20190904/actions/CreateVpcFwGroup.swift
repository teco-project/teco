//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// CreateVpcFwGroup请求参数结构体
    public struct CreateVpcFwGroupRequest: TCRequest {
        /// VPC防火墙(组)名称
        public let name: String

        /// 模式 1：CCN云联网模式；0：私有网络模式 2: sase 模式 3：ccn 高级模式 4: 私有网络(跨租户单边模式)
        public let mode: Int64

        /// 防火墙(组)下的防火墙实例列表
        public let vpcFwInstances: [VpcFwInstance]

        /// 防火墙实例的开关模式
        /// 1: 单点互通
        /// 2: 多点互通
        /// 3: 全互通
        /// 4: 自定义路由
        public let switchMode: Int64

        /// auto 自动选择防火墙网段
        /// 10.10.10.0/24 用户输入的防火墙网段
        public let fwVpcCidr: String

        /// 云联网id ，适用于云联网模式
        public let ccnId: String?

        /// 指定防火墙使用网段信息
        public let fwCidrInfo: FwCidrInfo?

        /// 跨租户管理员模式  1管理员 2多账号
        public let crossUserMode: String?

        public init(name: String, mode: Int64, vpcFwInstances: [VpcFwInstance], switchMode: Int64, fwVpcCidr: String, ccnId: String? = nil, fwCidrInfo: FwCidrInfo? = nil, crossUserMode: String? = nil) {
            self.name = name
            self.mode = mode
            self.vpcFwInstances = vpcFwInstances
            self.switchMode = switchMode
            self.fwVpcCidr = fwVpcCidr
            self.ccnId = ccnId
            self.fwCidrInfo = fwCidrInfo
            self.crossUserMode = crossUserMode
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case mode = "Mode"
            case vpcFwInstances = "VpcFwInstances"
            case switchMode = "SwitchMode"
            case fwVpcCidr = "FwVpcCidr"
            case ccnId = "CcnId"
            case fwCidrInfo = "FwCidrInfo"
            case crossUserMode = "CrossUserMode"
        }
    }

    /// CreateVpcFwGroup返回参数结构体
    public struct CreateVpcFwGroupResponse: TCResponse {
        /// 防火墙组ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let fwGroupId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case fwGroupId = "FwGroupId"
            case requestId = "RequestId"
        }
    }

    /// 创建VPC间防火墙(防火墙组)
    @inlinable
    public func createVpcFwGroup(_ input: CreateVpcFwGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVpcFwGroupResponse> {
        self.client.execute(action: "CreateVpcFwGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建VPC间防火墙(防火墙组)
    @inlinable
    public func createVpcFwGroup(_ input: CreateVpcFwGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVpcFwGroupResponse {
        try await self.client.execute(action: "CreateVpcFwGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建VPC间防火墙(防火墙组)
    @inlinable
    public func createVpcFwGroup(name: String, mode: Int64, vpcFwInstances: [VpcFwInstance], switchMode: Int64, fwVpcCidr: String, ccnId: String? = nil, fwCidrInfo: FwCidrInfo? = nil, crossUserMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVpcFwGroupResponse> {
        self.createVpcFwGroup(.init(name: name, mode: mode, vpcFwInstances: vpcFwInstances, switchMode: switchMode, fwVpcCidr: fwVpcCidr, ccnId: ccnId, fwCidrInfo: fwCidrInfo, crossUserMode: crossUserMode), region: region, logger: logger, on: eventLoop)
    }

    /// 创建VPC间防火墙(防火墙组)
    @inlinable
    public func createVpcFwGroup(name: String, mode: Int64, vpcFwInstances: [VpcFwInstance], switchMode: Int64, fwVpcCidr: String, ccnId: String? = nil, fwCidrInfo: FwCidrInfo? = nil, crossUserMode: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateVpcFwGroupResponse {
        try await self.createVpcFwGroup(.init(name: name, mode: mode, vpcFwInstances: vpcFwInstances, switchMode: switchMode, fwVpcCidr: fwVpcCidr, ccnId: ccnId, fwCidrInfo: fwCidrInfo, crossUserMode: crossUserMode), region: region, logger: logger, on: eventLoop)
    }
}
