//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// ModifyEWRuleStatus请求参数结构体
    public struct ModifyEWRuleStatusRequest: TCRequest {
        /// vpc规则必填，边id
        public let edgeId: String

        /// 是否开关开启，0：未开启，1：开启
        public let status: UInt64

        /// 规则方向，0：出站，1：入站，默认1
        public let direction: UInt64

        /// 更改的规则当前执行顺序
        public let ruleSequence: UInt64

        /// 规则类型，vpc：VPC间规则、nat：Nat边界规则
        public let ruleType: String

        public init(edgeId: String, status: UInt64, direction: UInt64, ruleSequence: UInt64, ruleType: String) {
            self.edgeId = edgeId
            self.status = status
            self.direction = direction
            self.ruleSequence = ruleSequence
            self.ruleType = ruleType
        }

        enum CodingKeys: String, CodingKey {
            case edgeId = "EdgeId"
            case status = "Status"
            case direction = "Direction"
            case ruleSequence = "RuleSequence"
            case ruleType = "RuleType"
        }
    }

    /// ModifyEWRuleStatus返回参数结构体
    public struct ModifyEWRuleStatusResponse: TCResponse {
        /// 状态值，0：修改成功，非0：修改失败
        public let returnCode: Int64

        /// 状态信息，success：查询成功，fail：查询失败
        public let returnMsg: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case returnCode = "ReturnCode"
            case returnMsg = "ReturnMsg"
            case requestId = "RequestId"
        }
    }

    /// 启用停用VPC间规则或Nat边界规则
    ///
    /// 启用停用VPC间规则或Nat边界规则
    /// VPC间规则需指定EdgeId。Nat边界规则需指定地域Region与Direction。
    @inlinable
    public func modifyEWRuleStatus(_ input: ModifyEWRuleStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEWRuleStatusResponse> {
        self.client.execute(action: "ModifyEWRuleStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 启用停用VPC间规则或Nat边界规则
    ///
    /// 启用停用VPC间规则或Nat边界规则
    /// VPC间规则需指定EdgeId。Nat边界规则需指定地域Region与Direction。
    @inlinable
    public func modifyEWRuleStatus(_ input: ModifyEWRuleStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEWRuleStatusResponse {
        try await self.client.execute(action: "ModifyEWRuleStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 启用停用VPC间规则或Nat边界规则
    ///
    /// 启用停用VPC间规则或Nat边界规则
    /// VPC间规则需指定EdgeId。Nat边界规则需指定地域Region与Direction。
    @inlinable
    public func modifyEWRuleStatus(edgeId: String, status: UInt64, direction: UInt64, ruleSequence: UInt64, ruleType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyEWRuleStatusResponse> {
        self.modifyEWRuleStatus(.init(edgeId: edgeId, status: status, direction: direction, ruleSequence: ruleSequence, ruleType: ruleType), region: region, logger: logger, on: eventLoop)
    }

    /// 启用停用VPC间规则或Nat边界规则
    ///
    /// 启用停用VPC间规则或Nat边界规则
    /// VPC间规则需指定EdgeId。Nat边界规则需指定地域Region与Direction。
    @inlinable
    public func modifyEWRuleStatus(edgeId: String, status: UInt64, direction: UInt64, ruleSequence: UInt64, ruleType: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyEWRuleStatusResponse {
        try await self.modifyEWRuleStatus(.init(edgeId: edgeId, status: status, direction: direction, ruleSequence: ruleSequence, ruleType: ruleType), region: region, logger: logger, on: eventLoop)
    }
}
