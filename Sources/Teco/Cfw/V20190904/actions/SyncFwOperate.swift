//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// SyncFwOperate请求参数结构体
    public struct SyncFwOperateRequest: TCRequest {
        /// 同步操作类型：Route，同步防火墙路由
        public let syncType: String

        /// 防火墙类型；nat,nat防火墙;ew,vpc间防火墙
        public let fwType: String?

        public init(syncType: String, fwType: String? = nil) {
            self.syncType = syncType
            self.fwType = fwType
        }

        enum CodingKeys: String, CodingKey {
            case syncType = "SyncType"
            case fwType = "FwType"
        }
    }

    /// SyncFwOperate返回参数结构体
    public struct SyncFwOperateResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 同步防火墙操作
    ///
    /// 同步防火墙操作，包括同步防火墙路由（若vpc，专线网关等增加了Cidr，需要手动同步一下路由使之在防火墙上生效）等。
    @inlinable @discardableResult
    public func syncFwOperate(_ input: SyncFwOperateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SyncFwOperateResponse> {
        self.client.execute(action: "SyncFwOperate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 同步防火墙操作
    ///
    /// 同步防火墙操作，包括同步防火墙路由（若vpc，专线网关等增加了Cidr，需要手动同步一下路由使之在防火墙上生效）等。
    @inlinable @discardableResult
    public func syncFwOperate(_ input: SyncFwOperateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncFwOperateResponse {
        try await self.client.execute(action: "SyncFwOperate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 同步防火墙操作
    ///
    /// 同步防火墙操作，包括同步防火墙路由（若vpc，专线网关等增加了Cidr，需要手动同步一下路由使之在防火墙上生效）等。
    @inlinable @discardableResult
    public func syncFwOperate(syncType: String, fwType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SyncFwOperateResponse> {
        self.syncFwOperate(.init(syncType: syncType, fwType: fwType), region: region, logger: logger, on: eventLoop)
    }

    /// 同步防火墙操作
    ///
    /// 同步防火墙操作，包括同步防火墙路由（若vpc，专线网关等增加了Cidr，需要手动同步一下路由使之在防火墙上生效）等。
    @inlinable @discardableResult
    public func syncFwOperate(syncType: String, fwType: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncFwOperateResponse {
        try await self.syncFwOperate(.init(syncType: syncType, fwType: fwType), region: region, logger: logger, on: eventLoop)
    }
}
