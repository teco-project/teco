//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cfw {
    /// CreateNatFwInstance请求参数结构体
    public struct CreateNatFwInstanceRequest: TCRequestModel {
        /// 防火墙实例名称
        public let name: String

        /// 带宽
        public let width: Int64

        /// 模式 1：接入模式；0：新增模式
        public let mode: Int64

        /// 新增模式传递参数，其中NewModeItems和NatgwList至少传递一种。
        public let newModeItems: NewModeItems?

        /// 接入模式接入的nat网关列表，其中NewModeItems和NatgwList至少传递一种。
        public let natGwList: [String]?

        /// 主可用区，为空则选择默认可用区
        public let zone: String?

        /// 备可用区，为空则选择默认可用区
        public let zoneBak: String?

        /// 异地灾备 1：使用异地灾备；0：不使用异地灾备；为空则默认不使用异地灾备
        public let crossAZone: Int64?

        public init(name: String, width: Int64, mode: Int64, newModeItems: NewModeItems? = nil, natGwList: [String]? = nil, zone: String? = nil, zoneBak: String? = nil, crossAZone: Int64? = nil) {
            self.name = name
            self.width = width
            self.mode = mode
            self.newModeItems = newModeItems
            self.natGwList = natGwList
            self.zone = zone
            self.zoneBak = zoneBak
            self.crossAZone = crossAZone
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case width = "Width"
            case mode = "Mode"
            case newModeItems = "NewModeItems"
            case natGwList = "NatGwList"
            case zone = "Zone"
            case zoneBak = "ZoneBak"
            case crossAZone = "CrossAZone"
        }
    }

    /// CreateNatFwInstance返回参数结构体
    public struct CreateNatFwInstanceResponse: TCResponseModel {
        /// 防火墙实例id
        public let cfwInsId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case cfwInsId = "CfwInsId"
            case requestId = "RequestId"
        }
    }

    /// 创建NAT防火墙实例（Region参数必填）
    @inlinable
    public func createNatFwInstance(_ input: CreateNatFwInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNatFwInstanceResponse> {
        self.client.execute(action: "CreateNatFwInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建NAT防火墙实例（Region参数必填）
    @inlinable
    public func createNatFwInstance(_ input: CreateNatFwInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNatFwInstanceResponse {
        try await self.client.execute(action: "CreateNatFwInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建NAT防火墙实例（Region参数必填）
    @inlinable
    public func createNatFwInstance(name: String, width: Int64, mode: Int64, newModeItems: NewModeItems? = nil, natGwList: [String]? = nil, zone: String? = nil, zoneBak: String? = nil, crossAZone: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNatFwInstanceResponse> {
        self.createNatFwInstance(CreateNatFwInstanceRequest(name: name, width: width, mode: mode, newModeItems: newModeItems, natGwList: natGwList, zone: zone, zoneBak: zoneBak, crossAZone: crossAZone), region: region, logger: logger, on: eventLoop)
    }

    /// 创建NAT防火墙实例（Region参数必填）
    @inlinable
    public func createNatFwInstance(name: String, width: Int64, mode: Int64, newModeItems: NewModeItems? = nil, natGwList: [String]? = nil, zone: String? = nil, zoneBak: String? = nil, crossAZone: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateNatFwInstanceResponse {
        try await self.createNatFwInstance(CreateNatFwInstanceRequest(name: name, width: width, mode: mode, newModeItems: newModeItems, natGwList: natGwList, zone: zone, zoneBak: zoneBak, crossAZone: crossAZone), region: region, logger: logger, on: eventLoop)
    }
}
