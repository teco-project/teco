//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// RemoveAclRule请求参数结构体
    public struct RemoveAclRuleRequest: TCRequest {
        /// 规则的uuid列表，可通过查询规则列表获取，注意：如果传入的是[-1]将删除所有规则
        public let ruleUuid: [Int64]

        /// 规则方向：1，入站；0，出站
        public let direction: UInt64?

        public init(ruleUuid: [Int64], direction: UInt64? = nil) {
            self.ruleUuid = ruleUuid
            self.direction = direction
        }

        enum CodingKeys: String, CodingKey {
            case ruleUuid = "RuleUuid"
            case direction = "Direction"
        }
    }

    /// RemoveAclRule返回参数结构体
    public struct RemoveAclRuleResponse: TCResponse {
        /// 删除成功后返回被删除策略的uuid列表
        public let ruleUuid: [Int64]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case ruleUuid = "RuleUuid"
            case requestId = "RequestId"
        }
    }

    /// 删除互联网边界访问控制规则
    @inlinable
    public func removeAclRule(_ input: RemoveAclRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveAclRuleResponse> {
        self.client.execute(action: "RemoveAclRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除互联网边界访问控制规则
    @inlinable
    public func removeAclRule(_ input: RemoveAclRuleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveAclRuleResponse {
        try await self.client.execute(action: "RemoveAclRule", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除互联网边界访问控制规则
    @inlinable
    public func removeAclRule(ruleUuid: [Int64], direction: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RemoveAclRuleResponse> {
        self.removeAclRule(.init(ruleUuid: ruleUuid, direction: direction), region: region, logger: logger, on: eventLoop)
    }

    /// 删除互联网边界访问控制规则
    @inlinable
    public func removeAclRule(ruleUuid: [Int64], direction: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RemoveAclRuleResponse {
        try await self.removeAclRule(.init(ruleUuid: ruleUuid, direction: direction), region: region, logger: logger, on: eventLoop)
    }
}
