//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// DescribeAssetSync请求参数结构体
    public struct DescribeAssetSyncRequest: TCRequest {
        public init() {
        }
    }

    /// DescribeAssetSync返回参数结构体
    public struct DescribeAssetSyncResponse: TCResponse {
        /// 返回状态
        /// 1 更新中
        /// 2 更新完成
        /// 3 更新失败
        /// 4 更新失败
        public let status: Int64

        /// success 成功
        /// 其他失败
        public let returnMsg: String?

        /// 0 成功
        /// 非0 失败
        public let returnCode: UInt64?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case returnMsg = "ReturnMsg"
            case returnCode = "ReturnCode"
            case requestId = "RequestId"
        }
    }

    /// 资产同步状态查询
    @inlinable
    public func describeAssetSync(_ input: DescribeAssetSyncRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetSyncResponse> {
        self.client.execute(action: "DescribeAssetSync", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 资产同步状态查询
    @inlinable
    public func describeAssetSync(_ input: DescribeAssetSyncRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetSyncResponse {
        try await self.client.execute(action: "DescribeAssetSync", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 资产同步状态查询
    @inlinable
    public func describeAssetSync(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAssetSyncResponse> {
        self.describeAssetSync(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 资产同步状态查询
    @inlinable
    public func describeAssetSync(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAssetSyncResponse {
        try await self.describeAssetSync(.init(), region: region, logger: logger, on: eventLoop)
    }
}
