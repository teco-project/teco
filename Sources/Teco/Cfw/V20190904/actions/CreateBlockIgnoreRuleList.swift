//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// CreateBlockIgnoreRuleList请求参数结构体
    public struct CreateBlockIgnoreRuleListRequest: TCRequest {
        /// 规则列表
        public let rules: [IntrusionDefenseRule]

        /// 规则类型，1封禁，2放通，不支持域名封禁
        public let ruleType: Int64

        /// 是否覆盖重复数据，1覆盖，非1不覆盖，跳过重复数据
        public let coverDuplicate: Int64?

        public init(rules: [IntrusionDefenseRule], ruleType: Int64, coverDuplicate: Int64? = nil) {
            self.rules = rules
            self.ruleType = ruleType
            self.coverDuplicate = coverDuplicate
        }

        enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case ruleType = "RuleType"
            case coverDuplicate = "CoverDuplicate"
        }
    }

    /// CreateBlockIgnoreRuleList返回参数结构体
    public struct CreateBlockIgnoreRuleListResponse: TCResponse {
        /// 成功返回
        public let list: [IocListData]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case list = "List"
            case requestId = "RequestId"
        }
    }

    /// 批量添加入侵防御封禁列表、放通列表规则
    @inlinable
    public func createBlockIgnoreRuleList(_ input: CreateBlockIgnoreRuleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBlockIgnoreRuleListResponse> {
        self.client.execute(action: "CreateBlockIgnoreRuleList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 批量添加入侵防御封禁列表、放通列表规则
    @inlinable
    public func createBlockIgnoreRuleList(_ input: CreateBlockIgnoreRuleListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBlockIgnoreRuleListResponse {
        try await self.client.execute(action: "CreateBlockIgnoreRuleList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 批量添加入侵防御封禁列表、放通列表规则
    @inlinable
    public func createBlockIgnoreRuleList(rules: [IntrusionDefenseRule], ruleType: Int64, coverDuplicate: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateBlockIgnoreRuleListResponse> {
        self.createBlockIgnoreRuleList(.init(rules: rules, ruleType: ruleType, coverDuplicate: coverDuplicate), region: region, logger: logger, on: eventLoop)
    }

    /// 批量添加入侵防御封禁列表、放通列表规则
    @inlinable
    public func createBlockIgnoreRuleList(rules: [IntrusionDefenseRule], ruleType: Int64, coverDuplicate: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateBlockIgnoreRuleListResponse {
        try await self.createBlockIgnoreRuleList(.init(rules: rules, ruleType: ruleType, coverDuplicate: coverDuplicate), region: region, logger: logger, on: eventLoop)
    }
}
