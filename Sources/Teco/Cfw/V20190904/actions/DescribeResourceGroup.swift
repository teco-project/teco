//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// DescribeResourceGroup请求参数结构体
    public struct DescribeResourceGroupRequest: TCRequestModel {
        /// 查询类型 网络结构 vpc，业务识别- resource ，资源标签-tag
        public let queryType: String

        /// 资产组id  全部传0
        public let groupId: String?

        public init(queryType: String, groupId: String? = nil) {
            self.queryType = queryType
            self.groupId = groupId
        }

        enum CodingKeys: String, CodingKey {
            case queryType = "QueryType"
            case groupId = "GroupId"
        }
    }

    /// DescribeResourceGroup返回参数结构体
    public struct DescribeResourceGroupResponse: TCResponseModel {
        /// 返回树形结构
        public let data: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 资产中心资产树信息查询
    ///
    /// DescribeResourceGroup资产中心资产树信息
    @inlinable
    public func describeResourceGroup(_ input: DescribeResourceGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceGroupResponse> {
        self.client.execute(action: "DescribeResourceGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 资产中心资产树信息查询
    ///
    /// DescribeResourceGroup资产中心资产树信息
    @inlinable
    public func describeResourceGroup(_ input: DescribeResourceGroupRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceGroupResponse {
        try await self.client.execute(action: "DescribeResourceGroup", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 资产中心资产树信息查询
    ///
    /// DescribeResourceGroup资产中心资产树信息
    @inlinable
    public func describeResourceGroup(queryType: String, groupId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeResourceGroupResponse> {
        self.describeResourceGroup(.init(queryType: queryType, groupId: groupId), region: region, logger: logger, on: eventLoop)
    }

    /// 资产中心资产树信息查询
    ///
    /// DescribeResourceGroup资产中心资产树信息
    @inlinable
    public func describeResourceGroup(queryType: String, groupId: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeResourceGroupResponse {
        try await self.describeResourceGroup(.init(queryType: queryType, groupId: groupId), region: region, logger: logger, on: eventLoop)
    }
}
