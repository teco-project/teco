//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// DescribeAddressTemplateList请求参数结构体
    public struct DescribeAddressTemplateListRequest: TCRequest {
        /// 偏移量，分页用
        public let offset: Int64?

        /// 条数，分页用
        public let limit: Int64?

        /// 排序字段，取值 'UpdateTime' | 'RulesNum'
        public let by: String?

        /// 排序，取值 'asc'|'desc'
        public let order: String?

        /// 搜索值
        public let searchValue: String?

        /// 检索地址模板唯一id
        public let uuid: String?

        public init(offset: Int64? = nil, limit: Int64? = nil, by: String? = nil, order: String? = nil, searchValue: String? = nil, uuid: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.by = by
            self.order = order
            self.searchValue = searchValue
            self.uuid = uuid
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case by = "By"
            case order = "Order"
            case searchValue = "SearchValue"
            case uuid = "Uuid"
        }
    }

    /// DescribeAddressTemplateList返回参数结构体
    public struct DescribeAddressTemplateListResponse: TCResponse {
        /// 模板总数
        public let total: Int64

        /// 模板列表数据
        public let data: [TemplateListInfo]

        /// 模板名称列表
        public let nameList: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case data = "Data"
            case nameList = "NameList"
            case requestId = "RequestId"
        }
    }

    /// 查询地址模板列表
    @inlinable
    public func describeAddressTemplateList(_ input: DescribeAddressTemplateListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddressTemplateListResponse> {
        self.client.execute(action: "DescribeAddressTemplateList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询地址模板列表
    @inlinable
    public func describeAddressTemplateList(_ input: DescribeAddressTemplateListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddressTemplateListResponse {
        try await self.client.execute(action: "DescribeAddressTemplateList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询地址模板列表
    @inlinable
    public func describeAddressTemplateList(offset: Int64? = nil, limit: Int64? = nil, by: String? = nil, order: String? = nil, searchValue: String? = nil, uuid: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAddressTemplateListResponse> {
        self.describeAddressTemplateList(.init(offset: offset, limit: limit, by: by, order: order, searchValue: searchValue, uuid: uuid), region: region, logger: logger, on: eventLoop)
    }

    /// 查询地址模板列表
    @inlinable
    public func describeAddressTemplateList(offset: Int64? = nil, limit: Int64? = nil, by: String? = nil, order: String? = nil, searchValue: String? = nil, uuid: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAddressTemplateListResponse {
        try await self.describeAddressTemplateList(.init(offset: offset, limit: limit, by: by, order: order, searchValue: searchValue, uuid: uuid), region: region, logger: logger, on: eventLoop)
    }
}
