//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Cfw {
    /// ModifyVpcFwSequenceRules请求参数结构体
    public struct ModifyVpcFwSequenceRulesRequest: TCRequest {
        /// 规则快速排序：OrderIndex，原始序号；NewOrderIndex：新序号
        public let ruleChangeItems: [RuleChangeItem]?

        public init(ruleChangeItems: [RuleChangeItem]? = nil) {
            self.ruleChangeItems = ruleChangeItems
        }

        enum CodingKeys: String, CodingKey {
            case ruleChangeItems = "RuleChangeItems"
        }
    }

    /// ModifyVpcFwSequenceRules返回参数结构体
    public struct ModifyVpcFwSequenceRulesResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// vpc间规则快速排序
    @inlinable @discardableResult
    public func modifyVpcFwSequenceRules(_ input: ModifyVpcFwSequenceRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcFwSequenceRulesResponse> {
        self.client.execute(action: "ModifyVpcFwSequenceRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// vpc间规则快速排序
    @inlinable @discardableResult
    public func modifyVpcFwSequenceRules(_ input: ModifyVpcFwSequenceRulesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcFwSequenceRulesResponse {
        try await self.client.execute(action: "ModifyVpcFwSequenceRules", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// vpc间规则快速排序
    @inlinable @discardableResult
    public func modifyVpcFwSequenceRules(ruleChangeItems: [RuleChangeItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyVpcFwSequenceRulesResponse> {
        self.modifyVpcFwSequenceRules(.init(ruleChangeItems: ruleChangeItems), region: region, logger: logger, on: eventLoop)
    }

    /// vpc间规则快速排序
    @inlinable @discardableResult
    public func modifyVpcFwSequenceRules(ruleChangeItems: [RuleChangeItem]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyVpcFwSequenceRulesResponse {
        try await self.modifyVpcFwSequenceRules(.init(ruleChangeItems: ruleChangeItems), region: region, logger: logger, on: eventLoop)
    }
}
