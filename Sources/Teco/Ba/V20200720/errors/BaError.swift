//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

/// Service error type returned by `Ba`.
public protocol TCBaErrorType: TCServiceErrorType {
    /// Get the service error as ``TCBaError``.
    ///
    /// - Returns: ``TCBaError`` that holds the same error code and context.
    func asBaError() -> TCBaError
}

public struct TCBaError: TCBaErrorType {
    enum Code: String {
        case internalError = "InternalError"
        case internalError_ResourceNotFound = "InternalError.ResourceNotFound"
        case invalidParameter = "InvalidParameter"
        case invalidParameterValue = "InvalidParameterValue"
        case resourceNotFound = "ResourceNotFound"
        case resourceUnavailable = "ResourceUnavailable"
    }

    /// Error domains affliated to ``TCBaError``.
    public static var domains: [TCErrorType.Type] {
        [InternalError.self]
    }

    private let error: Code

    public let context: TCErrorContext?

    public var errorCode: String {
        self.error.rawValue
    }

    /// Initializer used by ``TCClient`` to match an error of this type.
    public init?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }

    /// 内部错误。
    public static var internalError: TCBaError {
        TCBaError(.internalError)
    }

    /// 资源未找到。
    public static var internalError_ResourceNotFound: TCBaError {
        TCBaError(.internalError_ResourceNotFound)
    }

    /// 参数错误。
    public static var invalidParameter: TCBaError {
        TCBaError(.invalidParameter)
    }

    /// 参数取值错误。
    public static var invalidParameterValue: TCBaError {
        TCBaError(.invalidParameterValue)
    }

    /// 资源不存在。
    public static var resourceNotFound: TCBaError {
        TCBaError(.resourceNotFound)
    }

    /// 资源不可用。
    public static var resourceUnavailable: TCBaError {
        TCBaError(.resourceUnavailable)
    }

    public func asBaError() -> TCBaError {
        return self
    }
}
