//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Ba {
    /// SyncIcpOrderWebInfo请求参数结构体
    public struct SyncIcpOrderWebInfoRequest: TCRequestModel {
        /// 备案ICP订单号
        public let icpOrderId: String

        /// 订单里的webId
        public let sourceWebId: String

        /// 订单里的webId 数组(如果传入的webIds含有 订单中不包含的webId，会自动跳过)
        public let targetWebIds: [String]

        /// 网站信息字段名 数组
        public let syncFields: [String]

        /// 是否先判断同步的网站负责人是否一致 (这里会判断 sitePersonName, sitePersonCerType,sitePersonCerNum三个字段完全一致)  默认:true. 非必要 不建议关闭修改该参数默认值
        public let checkSamePerson: Bool?

        public init(icpOrderId: String, sourceWebId: String, targetWebIds: [String], syncFields: [String], checkSamePerson: Bool? = nil) {
            self.icpOrderId = icpOrderId
            self.sourceWebId = sourceWebId
            self.targetWebIds = targetWebIds
            self.syncFields = syncFields
            self.checkSamePerson = checkSamePerson
        }

        enum CodingKeys: String, CodingKey {
            case icpOrderId = "IcpOrderId"
            case sourceWebId = "SourceWebId"
            case targetWebIds = "TargetWebIds"
            case syncFields = "SyncFields"
            case checkSamePerson = "CheckSamePerson"
        }
    }

    /// SyncIcpOrderWebInfo返回参数结构体
    public struct SyncIcpOrderWebInfoResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 同步备案ICP订单网站信息
    ///
    /// 将备案ICP订单下的一个网站信息 同步给订单下其他网站，需要被同步的网站被检查通过(isCheck:true)；
    /// 只有指定的网站信息字段能被同步
    @inlinable @discardableResult
    public func syncIcpOrderWebInfo(_ input: SyncIcpOrderWebInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SyncIcpOrderWebInfoResponse> {
        self.client.execute(action: "SyncIcpOrderWebInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 同步备案ICP订单网站信息
    ///
    /// 将备案ICP订单下的一个网站信息 同步给订单下其他网站，需要被同步的网站被检查通过(isCheck:true)；
    /// 只有指定的网站信息字段能被同步
    @inlinable @discardableResult
    public func syncIcpOrderWebInfo(_ input: SyncIcpOrderWebInfoRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncIcpOrderWebInfoResponse {
        try await self.client.execute(action: "SyncIcpOrderWebInfo", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 同步备案ICP订单网站信息
    ///
    /// 将备案ICP订单下的一个网站信息 同步给订单下其他网站，需要被同步的网站被检查通过(isCheck:true)；
    /// 只有指定的网站信息字段能被同步
    @inlinable @discardableResult
    public func syncIcpOrderWebInfo(icpOrderId: String, sourceWebId: String, targetWebIds: [String], syncFields: [String], checkSamePerson: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SyncIcpOrderWebInfoResponse> {
        self.syncIcpOrderWebInfo(.init(icpOrderId: icpOrderId, sourceWebId: sourceWebId, targetWebIds: targetWebIds, syncFields: syncFields, checkSamePerson: checkSamePerson), region: region, logger: logger, on: eventLoop)
    }

    /// 同步备案ICP订单网站信息
    ///
    /// 将备案ICP订单下的一个网站信息 同步给订单下其他网站，需要被同步的网站被检查通过(isCheck:true)；
    /// 只有指定的网站信息字段能被同步
    @inlinable @discardableResult
    public func syncIcpOrderWebInfo(icpOrderId: String, sourceWebId: String, targetWebIds: [String], syncFields: [String], checkSamePerson: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SyncIcpOrderWebInfoResponse {
        try await self.syncIcpOrderWebInfo(.init(icpOrderId: icpOrderId, sourceWebId: sourceWebId, targetWebIds: targetWebIds, syncFields: syncFields, checkSamePerson: checkSamePerson), region: region, logger: logger, on: eventLoop)
    }
}
