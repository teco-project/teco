//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ic {
    /// RenewCards请求参数结构体
    public struct RenewCardsRequest: TCRequestModel {
        /// 应用ID
        public let sdkappid: UInt64

        /// 续费的iccid
        public let iccids: [String]

        /// 续费的周期（单位：月）
        public let renewNum: UInt64

        public init(sdkappid: UInt64, iccids: [String], renewNum: UInt64) {
            self.sdkappid = sdkappid
            self.iccids = iccids
            self.renewNum = renewNum
        }

        enum CodingKeys: String, CodingKey {
            case sdkappid = "Sdkappid"
            case iccids = "Iccids"
            case renewNum = "RenewNum"
        }
    }

    /// RenewCards返回参数结构体
    public struct RenewCardsResponse: TCResponseModel {
        /// 续费成功的订单id
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: ResRenew?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 卡片续费
    ///
    /// 批量为卡片续费，此接口建议调用至少间隔10s,如果出现返回deal lock failed相关的错误，请过10s再重试。
    /// 续费的必要条件：
    /// 1、单次续费的卡片不可以超过 100张。
    /// 2、接口只支持在控制台购买的卡片进行续费
    /// 3、销户和未激活的卡片不支持续费。
    /// 4、每张物联网卡，续费总周期不能超过24个月
    @inlinable
    public func renewCards(_ input: RenewCardsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewCardsResponse> {
        self.client.execute(action: "RenewCards", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 卡片续费
    ///
    /// 批量为卡片续费，此接口建议调用至少间隔10s,如果出现返回deal lock failed相关的错误，请过10s再重试。
    /// 续费的必要条件：
    /// 1、单次续费的卡片不可以超过 100张。
    /// 2、接口只支持在控制台购买的卡片进行续费
    /// 3、销户和未激活的卡片不支持续费。
    /// 4、每张物联网卡，续费总周期不能超过24个月
    @inlinable
    public func renewCards(_ input: RenewCardsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewCardsResponse {
        try await self.client.execute(action: "RenewCards", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 卡片续费
    ///
    /// 批量为卡片续费，此接口建议调用至少间隔10s,如果出现返回deal lock failed相关的错误，请过10s再重试。
    /// 续费的必要条件：
    /// 1、单次续费的卡片不可以超过 100张。
    /// 2、接口只支持在控制台购买的卡片进行续费
    /// 3、销户和未激活的卡片不支持续费。
    /// 4、每张物联网卡，续费总周期不能超过24个月
    @inlinable
    public func renewCards(sdkappid: UInt64, iccids: [String], renewNum: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RenewCardsResponse> {
        self.renewCards(RenewCardsRequest(sdkappid: sdkappid, iccids: iccids, renewNum: renewNum), region: region, logger: logger, on: eventLoop)
    }

    /// 卡片续费
    ///
    /// 批量为卡片续费，此接口建议调用至少间隔10s,如果出现返回deal lock failed相关的错误，请过10s再重试。
    /// 续费的必要条件：
    /// 1、单次续费的卡片不可以超过 100张。
    /// 2、接口只支持在控制台购买的卡片进行续费
    /// 3、销户和未激活的卡片不支持续费。
    /// 4、每张物联网卡，续费总周期不能超过24个月
    @inlinable
    public func renewCards(sdkappid: UInt64, iccids: [String], renewNum: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RenewCardsResponse {
        try await self.renewCards(RenewCardsRequest(sdkappid: sdkappid, iccids: iccids, renewNum: renewNum), region: region, logger: logger, on: eventLoop)
    }
}
