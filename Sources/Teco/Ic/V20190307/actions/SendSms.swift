//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ic {
    /// SendSms请求参数结构体
    public struct SendSmsRequest: TCRequestModel {
        /// 应用ID
        public let sdkappid: Int64

        /// 卡片ID
        public let iccid: String

        /// 短信内容长度70限制
        public let content: String

        public init(sdkappid: Int64, iccid: String, content: String) {
            self.sdkappid = sdkappid
            self.iccid = iccid
            self.content = content
        }

        enum CodingKeys: String, CodingKey {
            case sdkappid = "Sdkappid"
            case iccid = "Iccid"
            case content = "Content"
        }
    }

    /// SendSms返回参数结构体
    public struct SendSmsResponse: TCResponseModel {
        /// 短信流水信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: SmsSid?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 发送短信息接口
    @inlinable
    public func sendSms(_ input: SendSmsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendSmsResponse> {
        self.client.execute(action: "SendSms", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 发送短信息接口
    @inlinable
    public func sendSms(_ input: SendSmsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendSmsResponse {
        try await self.client.execute(action: "SendSms", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 发送短信息接口
    @inlinable
    public func sendSms(sdkappid: Int64, iccid: String, content: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SendSmsResponse> {
        self.sendSms(SendSmsRequest(sdkappid: sdkappid, iccid: iccid, content: content), region: region, logger: logger, on: eventLoop)
    }

    /// 发送短信息接口
    @inlinable
    public func sendSms(sdkappid: Int64, iccid: String, content: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SendSmsResponse {
        try await self.sendSms(SendSmsRequest(sdkappid: sdkappid, iccid: iccid, content: content), region: region, logger: logger, on: eventLoop)
    }
}
