//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ic {
    /// DescribeApp请求参数结构体
    public struct DescribeAppRequest: TCRequestModel {
        /// 物联卡应用ID
        public let sdkappid: Int64

        public init(sdkappid: Int64) {
            self.sdkappid = sdkappid
        }

        enum CodingKeys: String, CodingKey {
            case sdkappid = "Sdkappid"
        }
    }

    /// DescribeApp返回参数结构体
    public struct DescribeAppResponse: TCResponseModel {
        /// 应用信息详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let data: AppInfo?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case data = "Data"
            case requestId = "RequestId"
        }
    }

    /// 查询应用详情
    ///
    /// 根据应用id查询物联卡应用详情
    @inlinable
    public func describeApp(_ input: DescribeAppRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAppResponse> {
        self.client.execute(action: "DescribeApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询应用详情
    ///
    /// 根据应用id查询物联卡应用详情
    @inlinable
    public func describeApp(_ input: DescribeAppRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAppResponse {
        try await self.client.execute(action: "DescribeApp", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询应用详情
    ///
    /// 根据应用id查询物联卡应用详情
    @inlinable
    public func describeApp(sdkappid: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeAppResponse> {
        self.describeApp(.init(sdkappid: sdkappid), region: region, logger: logger, on: eventLoop)
    }

    /// 查询应用详情
    ///
    /// 根据应用id查询物联卡应用详情
    @inlinable
    public func describeApp(sdkappid: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeAppResponse {
        try await self.describeApp(.init(sdkappid: sdkappid), region: region, logger: logger, on: eventLoop)
    }
}
