//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ds {
    /// DownloadContract请求参数结构体
    public struct DownloadContractRequest: TCRequestModel {
        /// 模块名ContractMng
        public let module: String

        /// 操作名DownloadContract
        public let operation: String

        /// 合同ID
        public let contractResId: String

        public init(module: String, operation: String, contractResId: String) {
            self.module = module
            self.operation = operation
            self.contractResId = contractResId
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
            case contractResId = "ContractResId"
        }
    }

    /// DownloadContract返回参数结构体
    public struct DownloadContractResponse: TCResponseModel {
        /// 任务ID
        public let taskId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 下载合同
    ///
    /// 下载合同接口。调用该接口可以下载签署中和签署完成的合同。接口返回任务号，可调用DescribeTaskStatus接口查看任务执行结果。
    @inlinable
    public func downloadContract(_ input: DownloadContractRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DownloadContractResponse> {
        self.client.execute(action: "DownloadContract", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 下载合同
    ///
    /// 下载合同接口。调用该接口可以下载签署中和签署完成的合同。接口返回任务号，可调用DescribeTaskStatus接口查看任务执行结果。
    @inlinable
    public func downloadContract(_ input: DownloadContractRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DownloadContractResponse {
        try await self.client.execute(action: "DownloadContract", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 下载合同
    ///
    /// 下载合同接口。调用该接口可以下载签署中和签署完成的合同。接口返回任务号，可调用DescribeTaskStatus接口查看任务执行结果。
    @inlinable
    public func downloadContract(module: String, operation: String, contractResId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DownloadContractResponse> {
        self.downloadContract(.init(module: module, operation: operation, contractResId: contractResId), region: region, logger: logger, on: eventLoop)
    }

    /// 下载合同
    ///
    /// 下载合同接口。调用该接口可以下载签署中和签署完成的合同。接口返回任务号，可调用DescribeTaskStatus接口查看任务执行结果。
    @inlinable
    public func downloadContract(module: String, operation: String, contractResId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DownloadContractResponse {
        try await self.downloadContract(.init(module: module, operation: operation, contractResId: contractResId), region: region, logger: logger, on: eventLoop)
    }
}
