//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ds {
    /// DeleteAccount请求参数结构体
    public struct DeleteAccountRequest: TCRequest {
        /// 模块名AccountMng
        public let module: String

        /// 操作名DeleteAccount
        public let operation: String

        /// 帐号ID列表
        public let accountList: [String]

        public init(module: String, operation: String, accountList: [String]) {
            self.module = module
            self.operation = operation
            self.accountList = accountList
        }

        enum CodingKeys: String, CodingKey {
            case module = "Module"
            case operation = "Operation"
            case accountList = "AccountList"
        }
    }

    /// DeleteAccount返回参数结构体
    public struct DeleteAccountResponse: TCResponse {
        /// 删除成功帐号ID列表
        public let delSuccessList: [String]

        /// 删除失败帐号ID列表
        public let delFailedList: [String]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case delSuccessList = "DelSuccessList"
            case delFailedList = "DelFailedList"
            case requestId = "RequestId"
        }
    }

    /// 删除帐号
    ///
    /// 删除企业电子合同平台的最终用户。调用该接口后，腾讯云将删除该用户账号。删除账号后，已经签名的合同不受影响。
    @inlinable
    public func deleteAccount(_ input: DeleteAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAccountResponse> {
        self.client.execute(action: "DeleteAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除帐号
    ///
    /// 删除企业电子合同平台的最终用户。调用该接口后，腾讯云将删除该用户账号。删除账号后，已经签名的合同不受影响。
    @inlinable
    public func deleteAccount(_ input: DeleteAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAccountResponse {
        try await self.client.execute(action: "DeleteAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除帐号
    ///
    /// 删除企业电子合同平台的最终用户。调用该接口后，腾讯云将删除该用户账号。删除账号后，已经签名的合同不受影响。
    @inlinable
    public func deleteAccount(module: String, operation: String, accountList: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteAccountResponse> {
        self.deleteAccount(.init(module: module, operation: operation, accountList: accountList), region: region, logger: logger, on: eventLoop)
    }

    /// 删除帐号
    ///
    /// 删除企业电子合同平台的最终用户。调用该接口后，腾讯云将删除该用户账号。删除账号后，已经签名的合同不受影响。
    @inlinable
    public func deleteAccount(module: String, operation: String, accountList: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteAccountResponse {
        try await self.deleteAccount(.init(module: module, operation: operation, accountList: accountList), region: region, logger: logger, on: eventLoop)
    }
}
