//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDsError {
    public struct ResourceUnavailable: TCErrorType {
        enum Code: String {
            case accountUnavailable = "ResourceUnavailable.AccountUnavailable"
            case contractSignerUnavailable = "ResourceUnavailable.ContractSignerUnavailable"
            case downloadSealError = "ResourceUnavailable.DownloadSealError"
            case subplatUnavailable = "ResourceUnavailable.SubplatUnavailable"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 账户状态已冻结或已注销。
        public static var accountUnavailable: ResourceUnavailable {
            ResourceUnavailable(.accountUnavailable)
        }
        
        /// 合同签署人不存在或状态异常，不能进行合同创建操作。
        public static var contractSignerUnavailable: ResourceUnavailable {
            ResourceUnavailable(.contractSignerUnavailable)
        }
        
        /// 下载签章文件失败，请确保路径正确。
        public static var downloadSealError: ResourceUnavailable {
            ResourceUnavailable(.downloadSealError)
        }
        
        /// 子平台欠费。
        public static var subplatUnavailable: ResourceUnavailable {
            ResourceUnavailable(.subplatUnavailable)
        }
    }
}

extension TCDsError.ResourceUnavailable: Equatable {
    public static func == (lhs: TCDsError.ResourceUnavailable, rhs: TCDsError.ResourceUnavailable) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCDsError.ResourceUnavailable: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCDsError.ResourceUnavailable {
    public func toDsError() -> TCDsError {
        guard let code = TCDsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCDsError(code, context: self.context)
    }
}