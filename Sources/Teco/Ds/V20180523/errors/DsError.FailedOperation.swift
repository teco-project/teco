//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCDsError {
    public struct FailedOperation: TCDsErrorType {
        enum Code: String {
            case accountNotOwnContractError = "FailedOperation.AccountNotOwnContractError"
            case authorizationTimeError = "FailedOperation.AuthorizationTimeError"
            case backendInterfaceError = "FailedOperation.BackendInterfaceError"
            case backendInterfaceResponseContentError = "FailedOperation.BackendInterfaceResponseContentError"
            case backendInterfaceResponseHeaderError = "FailedOperation.BackendInterfaceResponseHeaderError"
            case certTypeError = "FailedOperation.CertTypeError"
            case checkVcodeError = "FailedOperation.CheckVcodeError"
            case contractExpired = "FailedOperation.ContractExpired"
            case contractSignedError = "FailedOperation.ContractSignedError"
            case coordinateError = "FailedOperation.CoordinateError"
            case coordinateOutsidePDF = "FailedOperation.CoordinateOutsidePDF"
            case costAccountError = "FailedOperation.CostAccountError"
            case createContractError = "FailedOperation.CreateContractError"
            case createEnterpriseAccountError = "FailedOperation.CreateEnterpriseAccountError"
            case createPersonalAccountError = "FailedOperation.CreatePersonalAccountError"
            case createSealError = "FailedOperation.CreateSealError"
            case deleteAccountError = "FailedOperation.DeleteAccountError"
            case deleteSealError = "FailedOperation.DeleteSealError"
            case describeSubplatError = "FailedOperation.DescribeSubplatError"
            case describeTaskStatusError = "FailedOperation.DescribeTaskStatusError"
            case downloadSealError = "FailedOperation.DownloadSealError"
            case enterpriseNameFormatError = "FailedOperation.EnterpriseNameFormatError"
            case firstEnterpriseAccountDeleteError = "FailedOperation.FirstEnterpriseAccountDeleteError"
            case formatError = "FailedOperation.FormatError"
            case getPDFSizeFailed = "FailedOperation.GetPDFSizeFailed"
            case identNoFormatError = "FailedOperation.IdentNoFormatError"
            case identTypeError = "FailedOperation.IdentTypeError"
            case imageMeasurementOverLimitError = "FailedOperation.ImageMeasurementOverLimitError"
            case imageNotBase = "FailedOperation.ImageNotBase"
            case imageNotPNG = "FailedOperation.ImageNotPNG"
            case ipFormatError = "FailedOperation.IPFormatError"
            case messageDataIllegal = "FailedOperation.MessageDataIllegal"
            case messageDataOverSize = "FailedOperation.MessageDataOverSize"
            case nameContainsNumber = "FailedOperation.NameContainsNumber"
            case nameIsPureNumber = "FailedOperation.NameIsPureNumber"
            case noPermissionToSign = "FailedOperation.NoPermissionToSign"
            case noVerifyError = "FailedOperation.NoVerifyError"
            case offsetCoordOverLimitError = "FailedOperation.OffsetCoordOverLimitError"
            case repeatedCoordinate = "FailedOperation.RepeatedCoordinate"
            case sealMismatched = "FailedOperation.SealMismatched"
            case sealNumOverLimit = "FailedOperation.SealNumOverLimit"
            case sealsExceed = "FailedOperation.SealsExceed"
            case sendVcodeError = "FailedOperation.SendVcodeError"
            case signContractByCoordinateError = "FailedOperation.SignContractByCoordinateError"
            case signContractByKeywordError = "FailedOperation.SignContractByKeywordError"
            case signFieldNotFound = "FailedOperation.SignFieldNotFound"
            case signPageError = "FailedOperation.SignPageError"
            case signPermissionExisted = "FailedOperation.SignPermissionExisted"
            case smsCodeExpired = "FailedOperation.SMSCodeExpired"
            case smsCodeLengthWrong = "FailedOperation.SMSCodeLengthWrong"
            case transactorNameFormatError = "FailedOperation.TransactorNameFormatError"
            case transactorPhoneFormatError = "FailedOperation.TransactorPhoneFormatError"
            case updateFeeStatusError = "FailedOperation.UpdateFeeStatusError"
            case vcodeChecked = "FailedOperation.VcodeChecked"
            case wrongCertType = "FailedOperation.WrongCertType"
            case wrongIdentNoFormat = "FailedOperation.WrongIdentNoFormat"
            case wrongIdentNoSize = "FailedOperation.WrongIdentNoSize"
            case wrongSMSCode = "FailedOperation.WrongSMSCode"
            case other = "FailedOperation.Other"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 该账号不具有该合同。
        public static var accountNotOwnContractError: FailedOperation {
            FailedOperation(.accountNotOwnContractError)
        }

        /// 授权时间格式错误。
        public static var authorizationTimeError: FailedOperation {
            FailedOperation(.authorizationTimeError)
        }

        /// 后端接口调用失败。
        public static var backendInterfaceError: FailedOperation {
            FailedOperation(.backendInterfaceError)
        }

        /// 后端接口返回内容异常，请检查请求参数。
        public static var backendInterfaceResponseContentError: FailedOperation {
            FailedOperation(.backendInterfaceResponseContentError)
        }

        /// 后端接口返回头异常，请检查请求参数。
        public static var backendInterfaceResponseHeaderError: FailedOperation {
            FailedOperation(.backendInterfaceResponseHeaderError)
        }

        /// 证书类型错误。
        public static var certTypeError: FailedOperation {
            FailedOperation(.certTypeError)
        }

        /// 验证签署验证码失败。
        public static var checkVcodeError: FailedOperation {
            FailedOperation(.checkVcodeError)
        }

        /// 合同已过期。
        public static var contractExpired: FailedOperation {
            FailedOperation(.contractExpired)
        }

        /// 该合同已被签署过。
        public static var contractSignedError: FailedOperation {
            FailedOperation(.contractSignedError)
        }

        /// 坐标值错误，必须保证坐标值为数字。
        public static var coordinateError: FailedOperation {
            FailedOperation(.coordinateError)
        }

        /// 坐标值超出PDF尺寸范围。
        public static var coordinateOutsidePDF: FailedOperation {
            FailedOperation(.coordinateOutsidePDF)
        }

        /// 计费账户问题。
        public static var costAccountError: FailedOperation {
            FailedOperation(.costAccountError)
        }

        /// 合同创建失败。
        public static var createContractError: FailedOperation {
            FailedOperation(.createContractError)
        }

        /// 创建企业账户失败，请检查请求参数。
        public static var createEnterpriseAccountError: FailedOperation {
            FailedOperation(.createEnterpriseAccountError)
        }

        /// 创建个人账户失败。
        public static var createPersonalAccountError: FailedOperation {
            FailedOperation(.createPersonalAccountError)
        }

        /// 新增印章失败。
        public static var createSealError: FailedOperation {
            FailedOperation(.createSealError)
        }

        /// 删除账户失败。
        public static var deleteAccountError: FailedOperation {
            FailedOperation(.deleteAccountError)
        }

        /// 删除印章失败。
        public static var deleteSealError: FailedOperation {
            FailedOperation(.deleteSealError)
        }

        /// 获取子平台信息失败。
        public static var describeSubplatError: FailedOperation {
            FailedOperation(.describeSubplatError)
        }

        /// 查询任务结果失败。
        public static var describeTaskStatusError: FailedOperation {
            FailedOperation(.describeTaskStatusError)
        }

        /// 下载签章文件失败，请确保路径正确。
        public static var downloadSealError: FailedOperation {
            FailedOperation(.downloadSealError)
        }

        /// 企业名称格式错误，不能包含数字。
        public static var enterpriseNameFormatError: FailedOperation {
            FailedOperation(.enterpriseNameFormatError)
        }

        /// 不能删除第一个有效的企业账户。
        public static var firstEnterpriseAccountDeleteError: FailedOperation {
            FailedOperation(.firstEnterpriseAccountDeleteError)
        }

        /// 签署关键字信息中存在格式错误(偏移坐标，签章图片宽/高度都必须为数字)。
        public static var formatError: FailedOperation {
            FailedOperation(.formatError)
        }

        /// 获得PDF页面尺寸失败。
        public static var getPDFSizeFailed: FailedOperation {
            FailedOperation(.getPDFSizeFailed)
        }

        /// 证件号码格式错误，请输入正确的个人/企业证件号码。
        public static var identNoFormatError: FailedOperation {
            FailedOperation(.identNoFormatError)
        }

        /// 证件类型错误，企业证件类型值只允许[0-8]，个人证件类型值为0。
        public static var identTypeError: FailedOperation {
            FailedOperation(.identTypeError)
        }

        /// 图片宽度/高度超过最大像素限制(300px)。
        public static var imageMeasurementOverLimitError: FailedOperation {
            FailedOperation(.imageMeasurementOverLimitError)
        }

        /// 图片数据应为BASE64编码格式。
        public static var imageNotBase: FailedOperation {
            FailedOperation(.imageNotBase)
        }

        /// 图片数据应为PNG格式。
        public static var imageNotPNG: FailedOperation {
            FailedOperation(.imageNotPNG)
        }

        /// 授权IP地址格式错误。
        public static var ipFormatError: FailedOperation {
            FailedOperation(.ipFormatError)
        }

        /// 报文不可包含以下字符 '%&amp;&lt;&gt;。
        public static var messageDataIllegal: FailedOperation {
            FailedOperation(.messageDataIllegal)
        }

        /// 报文数据长度过长。
        public static var messageDataOverSize: FailedOperation {
            FailedOperation(.messageDataOverSize)
        }

        /// 用户名称不能包含数字。
        public static var nameContainsNumber: FailedOperation {
            FailedOperation(.nameContainsNumber)
        }

        /// 企业名称不能为纯数字。
        public static var nameIsPureNumber: FailedOperation {
            FailedOperation(.nameIsPureNumber)
        }

        /// 用户没有开通代签权限。
        public static var noPermissionToSign: FailedOperation {
            FailedOperation(.noPermissionToSign)
        }

        /// 未经短信验证。
        public static var noVerifyError: FailedOperation {
            FailedOperation(.noVerifyError)
        }

        /// 偏移坐标超过最大偏移量，X轴/Y轴最大偏移量为50。
        public static var offsetCoordOverLimitError: FailedOperation {
            FailedOperation(.offsetCoordOverLimitError)
        }

        /// 签名域对角坐标值不能重复。
        public static var repeatedCoordinate: FailedOperation {
            FailedOperation(.repeatedCoordinate)
        }

        /// 印章不匹配。
        public static var sealMismatched: FailedOperation {
            FailedOperation(.sealMismatched)
        }

        /// 印章数超过上限。
        public static var sealNumOverLimit: FailedOperation {
            FailedOperation(.sealNumOverLimit)
        }

        /// 印章数量超出限制。
        public static var sealsExceed: FailedOperation {
            FailedOperation(.sealsExceed)
        }

        /// 发送签署验证码失败。
        public static var sendVcodeError: FailedOperation {
            FailedOperation(.sendVcodeError)
        }

        /// 按坐标签署合同失败。
        public static var signContractByCoordinateError: FailedOperation {
            FailedOperation(.signContractByCoordinateError)
        }

        /// 按关键字签署合同失败。
        public static var signContractByKeywordError: FailedOperation {
            FailedOperation(.signContractByKeywordError)
        }

        /// 根据关键字获得PDF签名域失败。
        public static var signFieldNotFound: FailedOperation {
            FailedOperation(.signFieldNotFound)
        }

        /// 页数必须是自然数。
        public static var signPageError: FailedOperation {
            FailedOperation(.signPageError)
        }

        /// 已经开通代签权限。
        public static var signPermissionExisted: FailedOperation {
            FailedOperation(.signPermissionExisted)
        }

        /// 短信验证码已超时。
        public static var smsCodeExpired: FailedOperation {
            FailedOperation(.smsCodeExpired)
        }

        /// 短信校验码长度错误。
        public static var smsCodeLengthWrong: FailedOperation {
            FailedOperation(.smsCodeLengthWrong)
        }

        /// 经办人姓名格式错误，不能包含数字。
        public static var transactorNameFormatError: FailedOperation {
            FailedOperation(.transactorNameFormatError)
        }

        /// 经办人手机号格式错误，必须为全数字。
        public static var transactorPhoneFormatError: FailedOperation {
            FailedOperation(.transactorPhoneFormatError)
        }

        /// 更新计费状态错误。
        public static var updateFeeStatusError: FailedOperation {
            FailedOperation(.updateFeeStatusError)
        }

        /// 已经开通代签权限。
        public static var vcodeChecked: FailedOperation {
            FailedOperation(.vcodeChecked)
        }

        /// 证书类型为不支持的类型。
        public static var wrongCertType: FailedOperation {
            FailedOperation(.wrongCertType)
        }

        /// 身份证号格式错误。
        public static var wrongIdentNoFormat: FailedOperation {
            FailedOperation(.wrongIdentNoFormat)
        }

        /// 身份证号只能为15或18位字符。
        public static var wrongIdentNoSize: FailedOperation {
            FailedOperation(.wrongIdentNoSize)
        }

        /// 短信验证码不正确。
        public static var wrongSMSCode: FailedOperation {
            FailedOperation(.wrongSMSCode)
        }

        /// 其它。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }

        public func asDsError() -> TCDsError {
            let code: TCDsError.Code
            switch self.error {
            case .accountNotOwnContractError:
                code = .failedOperation_AccountNotOwnContractError
            case .authorizationTimeError:
                code = .failedOperation_AuthorizationTimeError
            case .backendInterfaceError:
                code = .failedOperation_BackendInterfaceError
            case .backendInterfaceResponseContentError:
                code = .failedOperation_BackendInterfaceResponseContentError
            case .backendInterfaceResponseHeaderError:
                code = .failedOperation_BackendInterfaceResponseHeaderError
            case .certTypeError:
                code = .failedOperation_CertTypeError
            case .checkVcodeError:
                code = .failedOperation_CheckVcodeError
            case .contractExpired:
                code = .failedOperation_ContractExpired
            case .contractSignedError:
                code = .failedOperation_ContractSignedError
            case .coordinateError:
                code = .failedOperation_CoordinateError
            case .coordinateOutsidePDF:
                code = .failedOperation_CoordinateOutsidePDF
            case .costAccountError:
                code = .failedOperation_CostAccountError
            case .createContractError:
                code = .failedOperation_CreateContractError
            case .createEnterpriseAccountError:
                code = .failedOperation_CreateEnterpriseAccountError
            case .createPersonalAccountError:
                code = .failedOperation_CreatePersonalAccountError
            case .createSealError:
                code = .failedOperation_CreateSealError
            case .deleteAccountError:
                code = .failedOperation_DeleteAccountError
            case .deleteSealError:
                code = .failedOperation_DeleteSealError
            case .describeSubplatError:
                code = .failedOperation_DescribeSubplatError
            case .describeTaskStatusError:
                code = .failedOperation_DescribeTaskStatusError
            case .downloadSealError:
                code = .failedOperation_DownloadSealError
            case .enterpriseNameFormatError:
                code = .failedOperation_EnterpriseNameFormatError
            case .firstEnterpriseAccountDeleteError:
                code = .failedOperation_FirstEnterpriseAccountDeleteError
            case .formatError:
                code = .failedOperation_FormatError
            case .getPDFSizeFailed:
                code = .failedOperation_GetPDFSizeFailed
            case .identNoFormatError:
                code = .failedOperation_IdentNoFormatError
            case .identTypeError:
                code = .failedOperation_IdentTypeError
            case .imageMeasurementOverLimitError:
                code = .failedOperation_ImageMeasurementOverLimitError
            case .imageNotBase:
                code = .failedOperation_ImageNotBase
            case .imageNotPNG:
                code = .failedOperation_ImageNotPNG
            case .ipFormatError:
                code = .failedOperation_IPFormatError
            case .messageDataIllegal:
                code = .failedOperation_MessageDataIllegal
            case .messageDataOverSize:
                code = .failedOperation_MessageDataOverSize
            case .nameContainsNumber:
                code = .failedOperation_NameContainsNumber
            case .nameIsPureNumber:
                code = .failedOperation_NameIsPureNumber
            case .noPermissionToSign:
                code = .failedOperation_NoPermissionToSign
            case .noVerifyError:
                code = .failedOperation_NoVerifyError
            case .offsetCoordOverLimitError:
                code = .failedOperation_OffsetCoordOverLimitError
            case .repeatedCoordinate:
                code = .failedOperation_RepeatedCoordinate
            case .sealMismatched:
                code = .failedOperation_SealMismatched
            case .sealNumOverLimit:
                code = .failedOperation_SealNumOverLimit
            case .sealsExceed:
                code = .failedOperation_SealsExceed
            case .sendVcodeError:
                code = .failedOperation_SendVcodeError
            case .signContractByCoordinateError:
                code = .failedOperation_SignContractByCoordinateError
            case .signContractByKeywordError:
                code = .failedOperation_SignContractByKeywordError
            case .signFieldNotFound:
                code = .failedOperation_SignFieldNotFound
            case .signPageError:
                code = .failedOperation_SignPageError
            case .signPermissionExisted:
                code = .failedOperation_SignPermissionExisted
            case .smsCodeExpired:
                code = .failedOperation_SMSCodeExpired
            case .smsCodeLengthWrong:
                code = .failedOperation_SMSCodeLengthWrong
            case .transactorNameFormatError:
                code = .failedOperation_TransactorNameFormatError
            case .transactorPhoneFormatError:
                code = .failedOperation_TransactorPhoneFormatError
            case .updateFeeStatusError:
                code = .failedOperation_UpdateFeeStatusError
            case .vcodeChecked:
                code = .failedOperation_VcodeChecked
            case .wrongCertType:
                code = .failedOperation_WrongCertType
            case .wrongIdentNoFormat:
                code = .failedOperation_WrongIdentNoFormat
            case .wrongIdentNoSize:
                code = .failedOperation_WrongIdentNoSize
            case .wrongSMSCode:
                code = .failedOperation_WrongSMSCode
            case .other:
                code = .failedOperation_Other
            }
            return TCDsError(code, context: self.context)
        }
    }
}
