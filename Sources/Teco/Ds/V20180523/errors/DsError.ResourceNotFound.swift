//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCDsError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case accountNotFound = "ResourceNotFound.AccountNotFound"
            case contractNotFound = "ResourceNotFound.ContractNotFound"
            case contractProjectCodeNotFound = "ResourceNotFound.ContractProjectCodeNotFound"
            case initiatorNotFoundError = "ResourceNotFound.InitiatorNotFoundError"
            case sealNotFound = "ResourceNotFound.SealNotFound"
            case subplatIdNotFound = "ResourceNotFound.SubplatIdNotFound"
            case taskNotFound = "ResourceNotFound.TaskNotFound"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 账户不存在或已删除。
        public static var accountNotFound: ResourceNotFound {
            ResourceNotFound(.accountNotFound)
        }
        
        /// 合同ID不存在。
        public static var contractNotFound: ResourceNotFound {
            ResourceNotFound(.contractNotFound)
        }
        
        /// 合同project_code不存在。
        public static var contractProjectCodeNotFound: ResourceNotFound {
            ResourceNotFound(.contractProjectCodeNotFound)
        }
        
        /// 合同发起方账号不存在。
        public static var initiatorNotFoundError: ResourceNotFound {
            ResourceNotFound(.initiatorNotFoundError)
        }
        
        /// 印章不存在。
        public static var sealNotFound: ResourceNotFound {
            ResourceNotFound(.sealNotFound)
        }
        
        /// 子平台ID不存在。
        public static var subplatIdNotFound: ResourceNotFound {
            ResourceNotFound(.subplatIdNotFound)
        }
        
        /// 任务不存在。
        public static var taskNotFound: ResourceNotFound {
            ResourceNotFound(.taskNotFound)
        }
    }
}

extension TCDsError.ResourceNotFound: Equatable {
    public static func == (lhs: TCDsError.ResourceNotFound, rhs: TCDsError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCDsError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCDsError.ResourceNotFound {
    public func toDsError() -> TCDsError {
        guard let code = TCDsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCDsError(code, context: self.context)
    }
}