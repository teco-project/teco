//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Intlpartnersmgt {
    /// QueryVoucherPool请求参数结构体
    public struct QueryVoucherPoolRequest: TCRequestModel {
        public init() {
        }
    }

    /// QueryVoucherPool返回参数结构体
    public struct QueryVoucherPoolResponse: TCResponseModel {
        /// 经销商姓名
        public let agentName: String

        /// 经销商角色类型：1:经销商 2:总经销商 3:二级经销商
        public let accountType: Int64

        /// 总额度
        public let totalQuota: Float

        /// 剩余额度
        public let remainingQuota: Float

        /// 已发放的代金券数量
        public let issuedNum: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case agentName = "AgentName"
            case accountType = "AccountType"
            case totalQuota = "TotalQuota"
            case remainingQuota = "RemainingQuota"
            case issuedNum = "IssuedNum"
            case requestId = "RequestId"
        }
    }

    /// 查询代金券额度池
    @inlinable
    public func queryVoucherPool(_ input: QueryVoucherPoolRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryVoucherPoolResponse> {
        self.client.execute(action: "QueryVoucherPool", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询代金券额度池
    @inlinable
    public func queryVoucherPool(_ input: QueryVoucherPoolRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryVoucherPoolResponse {
        try await self.client.execute(action: "QueryVoucherPool", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询代金券额度池
    @inlinable
    public func queryVoucherPool(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryVoucherPoolResponse> {
        self.queryVoucherPool(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询代金券额度池
    @inlinable
    public func queryVoucherPool(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryVoucherPoolResponse {
        try await self.queryVoucherPool(.init(), region: region, logger: logger, on: eventLoop)
    }
}
