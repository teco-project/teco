//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Intlpartnersmgt {
    /// QueryCreditAllocationHistory请求参数结构体
    public struct QueryCreditAllocationHistoryRequest: TCRequestModel {
        /// 客户uin
        public let clientUin: UInt64

        /// 翻页参数，所在页数
        public let page: UInt64?

        /// 翻页参数，每页数据量
        public let pageSize: UInt64?

        public init(clientUin: UInt64, page: UInt64? = nil, pageSize: UInt64? = nil) {
            self.clientUin = clientUin
            self.page = page
            self.pageSize = pageSize
        }

        enum CodingKeys: String, CodingKey {
            case clientUin = "ClientUin"
            case page = "Page"
            case pageSize = "PageSize"
        }
    }

    /// QueryCreditAllocationHistory返回参数结构体
    public struct QueryCreditAllocationHistoryResponse: TCResponseModel {
        /// 历史信息总条数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let total: UInt64?

        /// 历史信息详细列表数据
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let history: [QueryCreditAllocationHistoryData]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case total = "Total"
            case history = "History"
            case requestId = "RequestId"
        }
    }

    /// 查询信用分配历史记录
    ///
    /// 查询单个客户的全部历史分配记录
    @inlinable
    public func queryCreditAllocationHistory(_ input: QueryCreditAllocationHistoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryCreditAllocationHistoryResponse> {
        self.client.execute(action: "QueryCreditAllocationHistory", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询信用分配历史记录
    ///
    /// 查询单个客户的全部历史分配记录
    @inlinable
    public func queryCreditAllocationHistory(_ input: QueryCreditAllocationHistoryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryCreditAllocationHistoryResponse {
        try await self.client.execute(action: "QueryCreditAllocationHistory", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询信用分配历史记录
    ///
    /// 查询单个客户的全部历史分配记录
    @inlinable
    public func queryCreditAllocationHistory(clientUin: UInt64, page: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryCreditAllocationHistoryResponse> {
        self.queryCreditAllocationHistory(.init(clientUin: clientUin, page: page, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }

    /// 查询信用分配历史记录
    ///
    /// 查询单个客户的全部历史分配记录
    @inlinable
    public func queryCreditAllocationHistory(clientUin: UInt64, page: UInt64? = nil, pageSize: UInt64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryCreditAllocationHistoryResponse {
        try await self.queryCreditAllocationHistory(.init(clientUin: clientUin, page: page, pageSize: pageSize), region: region, logger: logger, on: eventLoop)
    }
}
