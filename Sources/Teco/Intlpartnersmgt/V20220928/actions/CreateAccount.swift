//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Intlpartnersmgt {
    /// CreateAccount请求参数结构体
    public struct CreateAccountRequest: TCRequest {
        /// 新建客户的账户类型标识。本接口取值为：personal或company
        public let accountType: String

        /// 注册邮件地址。需要调用方保证邮件地址的有效性和正确性。
        /// 需要满足邮件的格式。如：account@qq.com
        public let mail: String

        /// 账户密码。
        /// 长度限制：[8,20]。
        /// 需同时包含数字、字母以及特殊符号（!@#$%^&*()等非空格）
        public let password: String

        /// 二次确认密码。必须和Password值相同
        public let confirmPassword: String

        /// 客户手机号码。需要调用方保证手机号码的有效性和正确性。
        /// 长度限制：[1,32]。支持全球手机号。如18888888888
        public let phoneNum: String

        /// 客户的国家/地区代码。取值参考获取国家/地区码接口GetCountryCodes。如852
        public let countryCode: String

        /// 客户的IOS2标准国家/地区代码。参考获取国家/地区码接口GetCountryCodes。需要与CountryCode值对应。如HK
        public let area: String

        /// 拓展字段，默认为空
        public let extended: String?

        public init(accountType: String, mail: String, password: String, confirmPassword: String, phoneNum: String, countryCode: String, area: String, extended: String? = nil) {
            self.accountType = accountType
            self.mail = mail
            self.password = password
            self.confirmPassword = confirmPassword
            self.phoneNum = phoneNum
            self.countryCode = countryCode
            self.area = area
            self.extended = extended
        }

        enum CodingKeys: String, CodingKey {
            case accountType = "AccountType"
            case mail = "Mail"
            case password = "Password"
            case confirmPassword = "ConfirmPassword"
            case phoneNum = "PhoneNum"
            case countryCode = "CountryCode"
            case area = "Area"
            case extended = "Extended"
        }
    }

    /// CreateAccount返回参数结构体
    public struct CreateAccountResponse: TCResponse {
        /// 账号的uin
        public let uin: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case uin = "Uin"
            case requestId = "RequestId"
        }
    }

    /// 创建客户接口
    ///
    /// 在合作伙伴平台，创建腾讯云账号，子客户注册完成后，自动与合作伙伴账号绑定。
    ///
    /// 注意事项：
    ///
    /// 1、创建腾讯云账号，输入的邮箱、手机号，需要合作伙伴做有效性验证。
    ///
    /// 2、客户首次登录需要补充个人信息
    @inlinable
    public func createAccount(_ input: CreateAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAccountResponse> {
        self.client.execute(action: "CreateAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建客户接口
    ///
    /// 在合作伙伴平台，创建腾讯云账号，子客户注册完成后，自动与合作伙伴账号绑定。
    ///
    /// 注意事项：
    ///
    /// 1、创建腾讯云账号，输入的邮箱、手机号，需要合作伙伴做有效性验证。
    ///
    /// 2、客户首次登录需要补充个人信息
    @inlinable
    public func createAccount(_ input: CreateAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAccountResponse {
        try await self.client.execute(action: "CreateAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建客户接口
    ///
    /// 在合作伙伴平台，创建腾讯云账号，子客户注册完成后，自动与合作伙伴账号绑定。
    ///
    /// 注意事项：
    ///
    /// 1、创建腾讯云账号，输入的邮箱、手机号，需要合作伙伴做有效性验证。
    ///
    /// 2、客户首次登录需要补充个人信息
    @inlinable
    public func createAccount(accountType: String, mail: String, password: String, confirmPassword: String, phoneNum: String, countryCode: String, area: String, extended: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateAccountResponse> {
        self.createAccount(.init(accountType: accountType, mail: mail, password: password, confirmPassword: confirmPassword, phoneNum: phoneNum, countryCode: countryCode, area: area, extended: extended), region: region, logger: logger, on: eventLoop)
    }

    /// 创建客户接口
    ///
    /// 在合作伙伴平台，创建腾讯云账号，子客户注册完成后，自动与合作伙伴账号绑定。
    ///
    /// 注意事项：
    ///
    /// 1、创建腾讯云账号，输入的邮箱、手机号，需要合作伙伴做有效性验证。
    ///
    /// 2、客户首次登录需要补充个人信息
    @inlinable
    public func createAccount(accountType: String, mail: String, password: String, confirmPassword: String, phoneNum: String, countryCode: String, area: String, extended: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateAccountResponse {
        try await self.createAccount(.init(accountType: accountType, mail: mail, password: password, confirmPassword: confirmPassword, phoneNum: phoneNum, countryCode: countryCode, area: area, extended: extended), region: region, logger: logger, on: eventLoop)
    }
}
