//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Bm {
    /// DescribeDeviceOperationLog请求参数结构体
    public struct DescribeDeviceOperationLogRequest: TCRequestModel {
        /// 设备实例ID
        public let instanceId: String
        
        /// 查询开始日期
        public let startTime: Date?
        
        /// 查询结束日期
        public let endTime: Date?
        
        /// 偏移量
        public let offset: UInt64?
        
        /// 返回数量
        public let limit: UInt64?
        
        public init (instanceId: String, startTime: Date? = nil, endTime: Date? = nil, offset: UInt64? = nil, limit: UInt64? = nil) {
            self.instanceId = instanceId
            self.startTime = startTime
            self.endTime = endTime
            self.offset = offset
            self.limit = limit
        }
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case offset = "Offset"
            case limit = "Limit"
        }
    }
    
    /// DescribeDeviceOperationLog返回参数结构体
    public struct DescribeDeviceOperationLogResponse: TCResponseModel {
        /// 操作日志列表
        public let deviceOperationLogSet: [DeviceOperationLog]
        
        /// 返回数目
        public let totalCount: UInt64
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case deviceOperationLogSet = "DeviceOperationLogSet"
            case totalCount = "TotalCount"
            case requestId = "RequestId"
        }
    }
    
    /// 查询设备操作日志
    ///
    /// 查询设备操作日志， 如设备重启，重装，设置密码等操作
    @inlinable
    public func describeDeviceOperationLog(_ input: DescribeDeviceOperationLogRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribeDeviceOperationLogResponse > {
        self.client.execute(action: "DescribeDeviceOperationLog", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询设备操作日志
    ///
    /// 查询设备操作日志， 如设备重启，重装，设置密码等操作
    @inlinable
    public func describeDeviceOperationLog(_ input: DescribeDeviceOperationLogRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDeviceOperationLogResponse {
        try await self.client.execute(action: "DescribeDeviceOperationLog", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
