//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Bm {
    /// ModifyCustomImageAttribute请求参数结构体
    public struct ModifyCustomImageAttributeRequest: TCRequestModel {
        /// 镜像ID
        public let imageId: String

        /// 设置新的镜像名
        public let imageName: String?

        /// 设置新的镜像描述
        public let imageDescription: String?

        public init(imageId: String, imageName: String? = nil, imageDescription: String? = nil) {
            self.imageId = imageId
            self.imageName = imageName
            self.imageDescription = imageDescription
        }

        enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case imageName = "ImageName"
            case imageDescription = "ImageDescription"
        }
    }

    /// ModifyCustomImageAttribute返回参数结构体
    public struct ModifyCustomImageAttributeResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 修改自定义镜像属性
    ///
    /// 用于修改自定义镜像名或描述
    @inlinable @discardableResult
    public func modifyCustomImageAttribute(_ input: ModifyCustomImageAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCustomImageAttributeResponse> {
        self.client.execute(action: "ModifyCustomImageAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改自定义镜像属性
    ///
    /// 用于修改自定义镜像名或描述
    @inlinable @discardableResult
    public func modifyCustomImageAttribute(_ input: ModifyCustomImageAttributeRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCustomImageAttributeResponse {
        try await self.client.execute(action: "ModifyCustomImageAttribute", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改自定义镜像属性
    ///
    /// 用于修改自定义镜像名或描述
    @inlinable @discardableResult
    public func modifyCustomImageAttribute(imageId: String, imageName: String? = nil, imageDescription: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyCustomImageAttributeResponse> {
        self.modifyCustomImageAttribute(.init(imageId: imageId, imageName: imageName, imageDescription: imageDescription), region: region, logger: logger, on: eventLoop)
    }

    /// 修改自定义镜像属性
    ///
    /// 用于修改自定义镜像名或描述
    @inlinable @discardableResult
    public func modifyCustomImageAttribute(imageId: String, imageName: String? = nil, imageDescription: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyCustomImageAttributeResponse {
        try await self.modifyCustomImageAttribute(.init(imageId: imageId, imageName: imageName, imageDescription: imageDescription), region: region, logger: logger, on: eventLoop)
    }
}
