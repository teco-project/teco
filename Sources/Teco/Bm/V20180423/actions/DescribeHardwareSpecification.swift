//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Bm {
    /// DescribeHardwareSpecification请求参数结构体
    public struct DescribeHardwareSpecificationRequest: TCRequestModel {
        public init() {
        }
    }

    /// DescribeHardwareSpecification返回参数结构体
    public struct DescribeHardwareSpecificationResponse: TCResponseModel {
        /// CPU型号列表
        public let cpuInfoSet: [CpuInfo]

        /// 内存的取值，单位为G
        public let memSet: [UInt64]

        /// 硬盘型号列表
        public let diskInfoSet: [DiskInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case cpuInfoSet = "CpuInfoSet"
            case memSet = "MemSet"
            case diskInfoSet = "DiskInfoSet"
            case requestId = "RequestId"
        }
    }

    /// 查询自定义机型部件信息
    ///
    /// 查询自定义机型部件信息，包括CpuId对应的型号，DiskTypeId对应的磁盘类型
    @inlinable
    public func describeHardwareSpecification(_ input: DescribeHardwareSpecificationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHardwareSpecificationResponse> {
        self.client.execute(action: "DescribeHardwareSpecification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询自定义机型部件信息
    ///
    /// 查询自定义机型部件信息，包括CpuId对应的型号，DiskTypeId对应的磁盘类型
    @inlinable
    public func describeHardwareSpecification(_ input: DescribeHardwareSpecificationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHardwareSpecificationResponse {
        try await self.client.execute(action: "DescribeHardwareSpecification", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询自定义机型部件信息
    ///
    /// 查询自定义机型部件信息，包括CpuId对应的型号，DiskTypeId对应的磁盘类型
    @inlinable
    public func describeHardwareSpecification(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeHardwareSpecificationResponse> {
        self.describeHardwareSpecification(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询自定义机型部件信息
    ///
    /// 查询自定义机型部件信息，包括CpuId对应的型号，DiskTypeId对应的磁盘类型
    @inlinable
    public func describeHardwareSpecification(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeHardwareSpecificationResponse {
        try await self.describeHardwareSpecification(.init(), region: region, logger: logger, on: eventLoop)
    }
}
