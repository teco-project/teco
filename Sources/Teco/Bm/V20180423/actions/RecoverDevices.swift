//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Bm {
    /// RecoverDevices请求参数结构体
    public struct RecoverDevicesRequest: TCRequestModel {
        /// 需要恢复的物理机ID列表
        public let instanceIds: [String]

        public init(instanceIds: [String]) {
            self.instanceIds = instanceIds
        }

        enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
        }
    }

    /// RecoverDevices返回参数结构体
    public struct RecoverDevicesResponse: TCResponseModel {
        /// 黑石异步任务ID
        public let taskId: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskId = "TaskId"
            case requestId = "RequestId"
        }
    }

    /// 恢复物理机
    ///
    /// 恢复回收站中的物理机（仅限后付费的物理机）
    @inlinable
    public func recoverDevices(_ input: RecoverDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RecoverDevicesResponse> {
        self.client.execute(action: "RecoverDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 恢复物理机
    ///
    /// 恢复回收站中的物理机（仅限后付费的物理机）
    @inlinable
    public func recoverDevices(_ input: RecoverDevicesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverDevicesResponse {
        try await self.client.execute(action: "RecoverDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 恢复物理机
    ///
    /// 恢复回收站中的物理机（仅限后付费的物理机）
    @inlinable
    public func recoverDevices(instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RecoverDevicesResponse> {
        let input = RecoverDevicesRequest(instanceIds: instanceIds)
        return self.client.execute(action: "RecoverDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 恢复物理机
    ///
    /// 恢复回收站中的物理机（仅限后付费的物理机）
    @inlinable
    public func recoverDevices(instanceIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RecoverDevicesResponse {
        let input = RecoverDevicesRequest(instanceIds: instanceIds)
        return try await self.client.execute(action: "RecoverDevices", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
