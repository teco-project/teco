//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCTmtError {
    public struct UnsupportedOperation: TCErrorType {
        enum Code: String {
            case audioDurationExceed = "UnsupportedOperation.AudioDurationExceed"
            case textTooLong = "UnsupportedOperation.TextTooLong"
            case unSupportedTargetLanguage = "UnsupportedOperation.UnSupportedTargetLanguage"
            case unsupportedLanguage = "UnsupportedOperation.UnsupportedLanguage"
            case unsupportedSourceLanguage = "UnsupportedOperation.UnsupportedSourceLanguage"
            case other = "UnsupportedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 音频分片长度超过限制，请保证分片长度小于8s。
        public static var audioDurationExceed: UnsupportedOperation {
            UnsupportedOperation(.audioDurationExceed)
        }
        
        /// 单次请求text超过长度限制，请保证单次请求⻓度低于2000。
        public static var textTooLong: UnsupportedOperation {
            UnsupportedOperation(.textTooLong)
        }
        
        /// 不支持的目标语言，请参照语言列表。
        public static var unSupportedTargetLanguage: UnsupportedOperation {
            UnsupportedOperation(.unSupportedTargetLanguage)
        }
        
        /// 不支持的语言，请参照语言列表。
        public static var unsupportedLanguage: UnsupportedOperation {
            UnsupportedOperation(.unsupportedLanguage)
        }
        
        /// 不支持的源语言，请参照语言列表。
        public static var unsupportedSourceLanguage: UnsupportedOperation {
            UnsupportedOperation(.unsupportedSourceLanguage)
        }
        
        /// 操作不支持。
        public static var other: UnsupportedOperation {
            UnsupportedOperation(.other)
        }
    }
}

extension TCTmtError.UnsupportedOperation: Equatable {
    public static func == (lhs: TCTmtError.UnsupportedOperation, rhs: TCTmtError.UnsupportedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCTmtError.UnsupportedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCTmtError.UnsupportedOperation {
    public func toTmtError() -> TCTmtError {
        guard let code = TCTmtError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCTmtError(code, context: self.context)
    }
}