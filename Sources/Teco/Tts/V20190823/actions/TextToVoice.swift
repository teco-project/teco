//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Tts {
    /// TextToVoice请求参数结构体
    public struct TextToVoiceRequest: TCRequest {
        /// 合成语音的源文本，按UTF-8编码统一计算。
        /// 中文最大支持150个汉字（全角标点符号算一个汉字）；英文最大支持500个字母（半角标点符号算一个字母）。
        public let text: String

        /// 一次请求对应一个SessionId，会原样返回，建议传入类似于uuid的字符串防止重复。
        public let sessionId: String

        /// 音量大小，范围[0，10]，对应音量大小。默认为0，代表正常音量，值越大音量越高。
        public let volume: Float?

        /// 语速，范围：[-2，6]，分别对应不同语速：
        /// - -2代表0.6倍
        /// - -1代表0.8倍
        /// - 0代表1.0倍（默认）
        /// - 1代表1.2倍
        /// - 2代表1.5倍
        /// - 6代表2.5倍
        /// 如果需要更细化的语速，可以保留小数点后 2 位，例如0.5 1.1 1.8等。
        ///
        /// 参数值与实际语速转换，可参考[代码示例](https://sdk-1300466766.cos.ap-shanghai.myqcloud.com/sample/speed_sample.tar.gz)
        public let speed: Float?

        /// 项目id，用户自定义，默认为0。
        public let projectId: Int64?

        /// 模型类型，1-默认模型。
        public let modelType: Int64?

        /// 音色 ID，包括标准音色与精品音色，精品音色拟真度更高，价格不同于标准音色，请参见[购买指南](https://cloud.tencent.com/document/product/1073/34112)。完整的音色 ID 列表请参见[音色列表](https://cloud.tencent.com/document/product/1073/92668)。
        public let voiceType: Int64?

        /// 主语言类型：
        /// - 1-中文（默认）
        /// - 2-英文
        /// - 3-日文
        public let primaryLanguage: Int64?

        /// 音频采样率：
        /// - 24000：24k（部分音色支持，请参见[音色列表](https://cloud.tencent.com/document/product/1073/92668)）
        /// - 16000：16k（默认）
        /// - 8000：8k
        public let sampleRate: UInt64?

        /// 返回音频格式，可取值：wav（默认），mp3，pcm
        public let codec: String?

        /// 是否开启时间戳功能，默认为false。
        public let enableSubtitle: Bool?

        /// 断句敏感阈值，默认值为：0，取值范围：[0,1,2]。该值越大越不容易断句，模型会更倾向于仅按照标点符号断句。此参数建议不要随意调整，可能会影响合成效果。
        public let segmentRate: UInt64?

        /// 控制合成音频的情感，仅支持多情感音色使用。取值: neutral(中性)、sad(悲伤)、happy(高兴)、angry(生气)、fear(恐惧)、news(新闻)、story(故事)、radio(广播)、poetry(诗歌)、call(客服)、撒娇(sajiao)、厌恶(disgusted)、震惊(amaze)、平静(peaceful)、兴奋(exciting)、傲娇(aojiao)、解说(jieshuo)
        public let emotionCategory: String?

        /// 控制合成音频情感程度，取值范围为[50,200],默认为100；只有EmotionCategory不为空时生效；
        public let emotionIntensity: Int64?

        public init(text: String, sessionId: String, volume: Float? = nil, speed: Float? = nil, projectId: Int64? = nil, modelType: Int64? = nil, voiceType: Int64? = nil, primaryLanguage: Int64? = nil, sampleRate: UInt64? = nil, codec: String? = nil, enableSubtitle: Bool? = nil, segmentRate: UInt64? = nil, emotionCategory: String? = nil, emotionIntensity: Int64? = nil) {
            self.text = text
            self.sessionId = sessionId
            self.volume = volume
            self.speed = speed
            self.projectId = projectId
            self.modelType = modelType
            self.voiceType = voiceType
            self.primaryLanguage = primaryLanguage
            self.sampleRate = sampleRate
            self.codec = codec
            self.enableSubtitle = enableSubtitle
            self.segmentRate = segmentRate
            self.emotionCategory = emotionCategory
            self.emotionIntensity = emotionIntensity
        }

        enum CodingKeys: String, CodingKey {
            case text = "Text"
            case sessionId = "SessionId"
            case volume = "Volume"
            case speed = "Speed"
            case projectId = "ProjectId"
            case modelType = "ModelType"
            case voiceType = "VoiceType"
            case primaryLanguage = "PrimaryLanguage"
            case sampleRate = "SampleRate"
            case codec = "Codec"
            case enableSubtitle = "EnableSubtitle"
            case segmentRate = "SegmentRate"
            case emotionCategory = "EmotionCategory"
            case emotionIntensity = "EmotionIntensity"
        }
    }

    /// TextToVoice返回参数结构体
    public struct TextToVoiceResponse: TCResponse {
        /// base64编码的wav/mp3音频数据
        public let audio: String

        /// 一次请求对应一个SessionId
        public let sessionId: String

        /// 时间戳信息，若未开启时间戳，则返回空数组。
        public let subtitles: [Subtitle]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case audio = "Audio"
            case sessionId = "SessionId"
            case subtitles = "Subtitles"
            case requestId = "RequestId"
        }
    }

    /// 基础语音合成
    ///
    /// 腾讯云语音合成技术（TTS）可以将任意文本转化为语音，实现让机器和应用张口说话。
    /// 腾讯TTS技术可以应用到很多场景，比如，移动APP语音播报新闻；智能设备语音提醒；依靠网上现有节目或少量录音，快速合成明星语音，降低邀约成本；支持车载导航语音合成的个性化语音播报。
    /// 基础合成支持 SSML，语法详见 [SSML 标记语言](https://cloud.tencent.com/document/product/1073/49575)。
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func textToVoice(_ input: TextToVoiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TextToVoiceResponse> {
        self.client.execute(action: "TextToVoice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 基础语音合成
    ///
    /// 腾讯云语音合成技术（TTS）可以将任意文本转化为语音，实现让机器和应用张口说话。
    /// 腾讯TTS技术可以应用到很多场景，比如，移动APP语音播报新闻；智能设备语音提醒；依靠网上现有节目或少量录音，快速合成明星语音，降低邀约成本；支持车载导航语音合成的个性化语音播报。
    /// 基础合成支持 SSML，语法详见 [SSML 标记语言](https://cloud.tencent.com/document/product/1073/49575)。
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func textToVoice(_ input: TextToVoiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TextToVoiceResponse {
        try await self.client.execute(action: "TextToVoice", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 基础语音合成
    ///
    /// 腾讯云语音合成技术（TTS）可以将任意文本转化为语音，实现让机器和应用张口说话。
    /// 腾讯TTS技术可以应用到很多场景，比如，移动APP语音播报新闻；智能设备语音提醒；依靠网上现有节目或少量录音，快速合成明星语音，降低邀约成本；支持车载导航语音合成的个性化语音播报。
    /// 基础合成支持 SSML，语法详见 [SSML 标记语言](https://cloud.tencent.com/document/product/1073/49575)。
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func textToVoice(text: String, sessionId: String, volume: Float? = nil, speed: Float? = nil, projectId: Int64? = nil, modelType: Int64? = nil, voiceType: Int64? = nil, primaryLanguage: Int64? = nil, sampleRate: UInt64? = nil, codec: String? = nil, enableSubtitle: Bool? = nil, segmentRate: UInt64? = nil, emotionCategory: String? = nil, emotionIntensity: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TextToVoiceResponse> {
        self.textToVoice(.init(text: text, sessionId: sessionId, volume: volume, speed: speed, projectId: projectId, modelType: modelType, voiceType: voiceType, primaryLanguage: primaryLanguage, sampleRate: sampleRate, codec: codec, enableSubtitle: enableSubtitle, segmentRate: segmentRate, emotionCategory: emotionCategory, emotionIntensity: emotionIntensity), region: region, logger: logger, on: eventLoop)
    }

    /// 基础语音合成
    ///
    /// 腾讯云语音合成技术（TTS）可以将任意文本转化为语音，实现让机器和应用张口说话。
    /// 腾讯TTS技术可以应用到很多场景，比如，移动APP语音播报新闻；智能设备语音提醒；依靠网上现有节目或少量录音，快速合成明星语音，降低邀约成本；支持车载导航语音合成的个性化语音播报。
    /// 基础合成支持 SSML，语法详见 [SSML 标记语言](https://cloud.tencent.com/document/product/1073/49575)。
    /// 默认接口请求频率限制：20次/秒。
    @inlinable
    public func textToVoice(text: String, sessionId: String, volume: Float? = nil, speed: Float? = nil, projectId: Int64? = nil, modelType: Int64? = nil, voiceType: Int64? = nil, primaryLanguage: Int64? = nil, sampleRate: UInt64? = nil, codec: String? = nil, enableSubtitle: Bool? = nil, segmentRate: UInt64? = nil, emotionCategory: String? = nil, emotionIntensity: Int64? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TextToVoiceResponse {
        try await self.textToVoice(.init(text: text, sessionId: sessionId, volume: volume, speed: speed, projectId: projectId, modelType: modelType, voiceType: voiceType, primaryLanguage: primaryLanguage, sampleRate: sampleRate, codec: codec, enableSubtitle: enableSubtitle, segmentRate: segmentRate, emotionCategory: emotionCategory, emotionIntensity: emotionIntensity), region: region, logger: logger, on: eventLoop)
    }
}
