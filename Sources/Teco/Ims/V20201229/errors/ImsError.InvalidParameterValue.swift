//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCImsError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case emptyImageContent = "InvalidParameterValue.EmptyImageContent"
            case imageSizeTooSmall = "InvalidParameterValue.ImageSizeTooSmall"
            case invalidContent = "InvalidParameterValue.InvalidContent"
            case invalidDataId = "InvalidParameterValue.InvalidDataId"
            case invalidFileContentSize = "InvalidParameterValue.InvalidFileContentSize"
            case invalidImageContent = "InvalidParameterValue.InvalidImageContent"
            case invalidParameter = "InvalidParameterValue.InvalidParameter"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 图片内容参数为空。
        public static var emptyImageContent: InvalidParameterValue {
            InvalidParameterValue(.emptyImageContent)
        }
        
        /// 图片分辨率太低。
        public static var imageSizeTooSmall: InvalidParameterValue {
            InvalidParameterValue(.imageSizeTooSmall)
        }
        
        /// FileContent和FileUrl为空。
        public static var invalidContent: InvalidParameterValue {
            InvalidParameterValue(.invalidContent)
        }
        
        /// DataId格式错误。
        public static var invalidDataId: InvalidParameterValue {
            InvalidParameterValue(.invalidDataId)
        }
        
        /// 图片文件内容大小异常。
        public static var invalidFileContentSize: InvalidParameterValue {
            InvalidParameterValue(.invalidFileContentSize)
        }
        
        /// 图片内容错误。
        public static var invalidImageContent: InvalidParameterValue {
            InvalidParameterValue(.invalidImageContent)
        }
        
        /// 参数值错误。
        public static var invalidParameter: InvalidParameterValue {
            InvalidParameterValue(.invalidParameter)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCImsError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCImsError.InvalidParameterValue, rhs: TCImsError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCImsError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCImsError.InvalidParameterValue {
    public func toImsError() -> TCImsError {
        guard let code = TCImsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCImsError(code, context: self.context)
    }
}