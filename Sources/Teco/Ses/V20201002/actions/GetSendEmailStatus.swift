//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Ses {
    /// GetSendEmailStatus请求参数结构体
    public struct GetSendEmailStatusRequest: TCRequestModel {
        /// 发送的日期，必填。仅支持查询某个日期，不支持范围查询。
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCDateEncoding public var requestDate: Date

        /// 偏移量。默认为0
        public let offset: UInt64

        /// 拉取最大条数，最多 100。
        public let limit: UInt64

        /// SendMail接口返回的MessageId字段。
        public let messageId: String?

        /// 收件人邮箱。
        public let toEmailAddress: String?

        public init(requestDate: Date, offset: UInt64, limit: UInt64, messageId: String? = nil, toEmailAddress: String? = nil) {
            self.requestDate = requestDate
            self.offset = offset
            self.limit = limit
            self.messageId = messageId
            self.toEmailAddress = toEmailAddress
        }

        enum CodingKeys: String, CodingKey {
            case requestDate = "RequestDate"
            case offset = "Offset"
            case limit = "Limit"
            case messageId = "MessageId"
            case toEmailAddress = "ToEmailAddress"
        }
    }

    /// GetSendEmailStatus返回参数结构体
    public struct GetSendEmailStatusResponse: TCResponseModel {
        /// 邮件发送状态列表
        public let emailStatusList: [SendEmailStatus]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case emailStatusList = "EmailStatusList"
            case requestId = "RequestId"
        }
    }

    /// 获取邮件发送的状态（待废弃）
    ///
    /// 获取邮件发送状态。仅支持查询30天之内的数据
    /// 默认接口请求频率限制：1次/秒
    @inlinable
    public func getSendEmailStatus(_ input: GetSendEmailStatusRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetSendEmailStatusResponse> {
        self.client.execute(action: "GetSendEmailStatus", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取邮件发送的状态（待废弃）
    ///
    /// 获取邮件发送状态。仅支持查询30天之内的数据
    /// 默认接口请求频率限制：1次/秒
    @inlinable
    public func getSendEmailStatus(_ input: GetSendEmailStatusRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSendEmailStatusResponse {
        try await self.client.execute(action: "GetSendEmailStatus", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取邮件发送的状态（待废弃）
    ///
    /// 获取邮件发送状态。仅支持查询30天之内的数据
    /// 默认接口请求频率限制：1次/秒
    @inlinable
    public func getSendEmailStatus(requestDate: Date, offset: UInt64, limit: UInt64, messageId: String? = nil, toEmailAddress: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetSendEmailStatusResponse> {
        self.getSendEmailStatus(GetSendEmailStatusRequest(requestDate: requestDate, offset: offset, limit: limit, messageId: messageId, toEmailAddress: toEmailAddress), logger: logger, on: eventLoop)
    }

    /// 获取邮件发送的状态（待废弃）
    ///
    /// 获取邮件发送状态。仅支持查询30天之内的数据
    /// 默认接口请求频率限制：1次/秒
    @inlinable
    public func getSendEmailStatus(requestDate: Date, offset: UInt64, limit: UInt64, messageId: String? = nil, toEmailAddress: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSendEmailStatusResponse {
        try await self.getSendEmailStatus(GetSendEmailStatusRequest(requestDate: requestDate, offset: offset, limit: limit, messageId: messageId, toEmailAddress: toEmailAddress), logger: logger, on: eventLoop)
    }
}
