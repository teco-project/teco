//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Ses {
    /// UpdateEmailSmtpPassWord请求参数结构体
    public struct UpdateEmailSmtpPassWordRequest: TCRequestModel {
        /// smtp密码，长度限制64
        public let password: String

        /// 发信邮箱,长度限制128
        public let emailAddress: String

        public init(password: String, emailAddress: String) {
            self.password = password
            self.emailAddress = emailAddress
        }

        enum CodingKeys: String, CodingKey {
            case password = "Password"
            case emailAddress = "EmailAddress"
        }
    }

    /// UpdateEmailSmtpPassWord返回参数结构体
    public struct UpdateEmailSmtpPassWordResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 设置邮箱的smtp密码
    ///
    /// 设置邮箱的smtp密码。若要通过smtp发送邮件，必须为邮箱设置smtp密码。初始时，邮箱没有设置smtp密码，不能使用smtp的方式发送邮件。设置smtp密码后，可以修改密码。
    @inlinable @discardableResult
    public func updateEmailSmtpPassWord(_ input: UpdateEmailSmtpPassWordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateEmailSmtpPassWordResponse> {
        self.client.execute(action: "UpdateEmailSmtpPassWord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 设置邮箱的smtp密码
    ///
    /// 设置邮箱的smtp密码。若要通过smtp发送邮件，必须为邮箱设置smtp密码。初始时，邮箱没有设置smtp密码，不能使用smtp的方式发送邮件。设置smtp密码后，可以修改密码。
    @inlinable @discardableResult
    public func updateEmailSmtpPassWord(_ input: UpdateEmailSmtpPassWordRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateEmailSmtpPassWordResponse {
        try await self.client.execute(action: "UpdateEmailSmtpPassWord", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 设置邮箱的smtp密码
    ///
    /// 设置邮箱的smtp密码。若要通过smtp发送邮件，必须为邮箱设置smtp密码。初始时，邮箱没有设置smtp密码，不能使用smtp的方式发送邮件。设置smtp密码后，可以修改密码。
    @inlinable @discardableResult
    public func updateEmailSmtpPassWord(password: String, emailAddress: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateEmailSmtpPassWordResponse> {
        self.updateEmailSmtpPassWord(.init(password: password, emailAddress: emailAddress), region: region, logger: logger, on: eventLoop)
    }

    /// 设置邮箱的smtp密码
    ///
    /// 设置邮箱的smtp密码。若要通过smtp发送邮件，必须为邮箱设置smtp密码。初始时，邮箱没有设置smtp密码，不能使用smtp的方式发送邮件。设置smtp密码后，可以修改密码。
    @inlinable @discardableResult
    public func updateEmailSmtpPassWord(password: String, emailAddress: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateEmailSmtpPassWordResponse {
        try await self.updateEmailSmtpPassWord(.init(password: password, emailAddress: emailAddress), region: region, logger: logger, on: eventLoop)
    }
}
