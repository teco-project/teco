//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Ses {
    /// ListReceivers请求参数结构体
    public struct ListReceiversRequest: TCPaginatedRequest {
        /// 偏移量，整型，从0开始
        public let offset: UInt64

        /// 限制数目，整型，不超过100
        public let limit: UInt64

        /// 列表状态(1 待上传 2 上传中  3传完成)，若查询所有就不传这个字段
        public let status: UInt64?

        /// 列表名称的关键字，模糊查询
        public let keyWord: String?

        public init(offset: UInt64, limit: UInt64, status: UInt64? = nil, keyWord: String? = nil) {
            self.offset = offset
            self.limit = limit
            self.status = status
            self.keyWord = keyWord
        }

        enum CodingKeys: String, CodingKey {
            case offset = "Offset"
            case limit = "Limit"
            case status = "Status"
            case keyWord = "KeyWord"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: ListReceiversResponse) -> ListReceiversRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return .init(offset: self.offset + .init(response.getItems().count), limit: self.limit, status: self.status, keyWord: self.keyWord)
        }
    }

    /// ListReceivers返回参数结构体
    public struct ListReceiversResponse: TCPaginatedResponse {
        /// 总数
        public let totalCount: UInt64

        /// 数据记录
        public let data: [ReceiverData]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case totalCount = "TotalCount"
            case data = "Data"
            case requestId = "RequestId"
        }

        /// Extract the returned ``ReceiverData`` list from the paginated response.
        public func getItems() -> [ReceiverData] {
            self.data
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> UInt64? {
            self.totalCount
        }
    }

    /// 查询收件人列表
    ///
    /// 根据条件查询收件人列表，支持分页，模糊查询，状态查询
    @inlinable
    public func listReceivers(_ input: ListReceiversRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListReceiversResponse> {
        self.client.execute(action: "ListReceivers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询收件人列表
    ///
    /// 根据条件查询收件人列表，支持分页，模糊查询，状态查询
    @inlinable
    public func listReceivers(_ input: ListReceiversRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListReceiversResponse {
        try await self.client.execute(action: "ListReceivers", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询收件人列表
    ///
    /// 根据条件查询收件人列表，支持分页，模糊查询，状态查询
    @inlinable
    public func listReceivers(offset: UInt64, limit: UInt64, status: UInt64? = nil, keyWord: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListReceiversResponse> {
        self.listReceivers(.init(offset: offset, limit: limit, status: status, keyWord: keyWord), region: region, logger: logger, on: eventLoop)
    }

    /// 查询收件人列表
    ///
    /// 根据条件查询收件人列表，支持分页，模糊查询，状态查询
    @inlinable
    public func listReceivers(offset: UInt64, limit: UInt64, status: UInt64? = nil, keyWord: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListReceiversResponse {
        try await self.listReceivers(.init(offset: offset, limit: limit, status: status, keyWord: keyWord), region: region, logger: logger, on: eventLoop)
    }

    /// 查询收件人列表
    ///
    /// 根据条件查询收件人列表，支持分页，模糊查询，状态查询
    @inlinable
    public func listReceiversPaginated(_ input: ListReceiversRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(UInt64?, [ReceiverData])> {
        self.client.paginate(input: input, region: region, command: self.listReceivers, logger: logger, on: eventLoop)
    }

    /// 查询收件人列表
    ///
    /// 根据条件查询收件人列表，支持分页，模糊查询，状态查询
    @inlinable @discardableResult
    public func listReceiversPaginated(_ input: ListReceiversRequest, region: TCRegion? = nil, onResponse: @escaping (ListReceiversResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.listReceivers, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 查询收件人列表
    ///
    /// 根据条件查询收件人列表，支持分页，模糊查询，状态查询
    ///
    /// - Returns: `AsyncSequence`s of ``ReceiverData`` and ``ListReceiversResponse`` that can be iterated over asynchronously on demand.
    @inlinable
    public func listReceiversPaginator(_ input: ListReceiversRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<ListReceiversRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.listReceivers, logger: logger, on: eventLoop)
    }
}
