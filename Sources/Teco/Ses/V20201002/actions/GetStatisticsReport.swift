//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoDateHelpers

extension Ses {
    /// GetStatisticsReport请求参数结构体
    public struct GetStatisticsReportRequest: TCRequestModel {
        /// 开始日期
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCDateEncoding public var startDate: Date
        
        /// 结束日期
        ///
        /// **Important:** This has to be a `var` due to a property wrapper restriction, which is about to be removed in the future.
        /// For discussions, see [Allow Property Wrappers on Let Declarations](https://forums.swift.org/t/pitch-allow-property-wrappers-on-let-declarations/61750).
        ///
        /// Although mutating this property is possible for now, it may become a `let` variable at any time. Please don't rely on such behavior.
        @TCDateEncoding public var endDate: Date
        
        /// 发信域名
        public let domain: String?
        
        /// 收件方邮箱类型，例如gmail.com
        public let receivingMailboxType: String?
        
        public init (startDate: Date, endDate: Date, domain: String? = nil, receivingMailboxType: String? = nil) {
            self.startDate = startDate
            self.endDate = endDate
            self.domain = domain
            self.receivingMailboxType = receivingMailboxType
        }
        
        enum CodingKeys: String, CodingKey {
            case startDate = "StartDate"
            case endDate = "EndDate"
            case domain = "Domain"
            case receivingMailboxType = "ReceivingMailboxType"
        }
    }
    
    /// GetStatisticsReport返回参数结构体
    public struct GetStatisticsReportResponse: TCResponseModel {
        /// 发信统计报告，按天
        public let dailyVolumes: [Volume]
        
        /// 发信统计报告，总览
        public let overallVolume: Volume
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case dailyVolumes = "DailyVolumes"
            case overallVolume = "OverallVolume"
            case requestId = "RequestId"
        }
    }
    
    /// 获取发送统计数据
    ///
    /// 获取近期发送的统计情况，包含发送量、送达率、打开率、退信率等一系列数据。
    @inlinable
    public func getStatisticsReport(_ input: GetStatisticsReportRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetStatisticsReportResponse > {
        self.client.execute(action: "GetStatisticsReport", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 获取发送统计数据
    ///
    /// 获取近期发送的统计情况，包含发送量、送达率、打开率、退信率等一系列数据。
    @inlinable
    public func getStatisticsReport(_ input: GetStatisticsReportRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetStatisticsReportResponse {
        try await self.client.execute(action: "GetStatisticsReport", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 获取发送统计数据
    ///
    /// 获取近期发送的统计情况，包含发送量、送达率、打开率、退信率等一系列数据。
    @inlinable
    public func getStatisticsReport(startDate: Date, endDate: Date, domain: String? = nil, receivingMailboxType: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < GetStatisticsReportResponse > {
        self.getStatisticsReport(GetStatisticsReportRequest(startDate: startDate, endDate: endDate, domain: domain, receivingMailboxType: receivingMailboxType), logger: logger, on: eventLoop)
    }
    
    /// 获取发送统计数据
    ///
    /// 获取近期发送的统计情况，包含发送量、送达率、打开率、退信率等一系列数据。
    @inlinable
    public func getStatisticsReport(startDate: Date, endDate: Date, domain: String? = nil, receivingMailboxType: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetStatisticsReportResponse {
        try await self.getStatisticsReport(GetStatisticsReportRequest(startDate: startDate, endDate: endDate, domain: domain, receivingMailboxType: receivingMailboxType), logger: logger, on: eventLoop)
    }
}
