//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Ses {
    /// CreateEmailTemplate请求参数结构体
    public struct CreateEmailTemplateRequest: TCRequestModel {
        /// 模板名称
        public let templateName: String

        /// 模板内容
        public let templateContent: TemplateContent

        public init(templateName: String, templateContent: TemplateContent) {
            self.templateName = templateName
            self.templateContent = templateContent
        }

        enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case templateContent = "TemplateContent"
        }
    }

    /// CreateEmailTemplate返回参数结构体
    public struct CreateEmailTemplateResponse: TCResponseModel {
        /// 模板id
        public let templateID: UInt64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case templateID = "TemplateID"
            case requestId = "RequestId"
        }
    }

    /// 创建邮件模板
    ///
    /// 创建模板，该模板可以是TXT或者HTML，请注意如果HTML不要包含外部文件的CSS。模板中的变量使用 {{变量名}} 表示。
    /// 注意：模板需要审核通过才可以使用。
    @inlinable
    public func createEmailTemplate(_ input: CreateEmailTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEmailTemplateResponse> {
        self.client.execute(action: "CreateEmailTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建邮件模板
    ///
    /// 创建模板，该模板可以是TXT或者HTML，请注意如果HTML不要包含外部文件的CSS。模板中的变量使用 {{变量名}} 表示。
    /// 注意：模板需要审核通过才可以使用。
    @inlinable
    public func createEmailTemplate(_ input: CreateEmailTemplateRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEmailTemplateResponse {
        try await self.client.execute(action: "CreateEmailTemplate", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建邮件模板
    ///
    /// 创建模板，该模板可以是TXT或者HTML，请注意如果HTML不要包含外部文件的CSS。模板中的变量使用 {{变量名}} 表示。
    /// 注意：模板需要审核通过才可以使用。
    @inlinable
    public func createEmailTemplate(templateName: String, templateContent: TemplateContent, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEmailTemplateResponse> {
        self.createEmailTemplate(.init(templateName: templateName, templateContent: templateContent), region: region, logger: logger, on: eventLoop)
    }

    /// 创建邮件模板
    ///
    /// 创建模板，该模板可以是TXT或者HTML，请注意如果HTML不要包含外部文件的CSS。模板中的变量使用 {{变量名}} 表示。
    /// 注意：模板需要审核通过才可以使用。
    @inlinable
    public func createEmailTemplate(templateName: String, templateContent: TemplateContent, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEmailTemplateResponse {
        try await self.createEmailTemplate(.init(templateName: templateName, templateContent: templateContent), region: region, logger: logger, on: eventLoop)
    }
}
