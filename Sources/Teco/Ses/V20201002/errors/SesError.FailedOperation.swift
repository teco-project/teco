//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSesError {
    public struct FailedOperation: TCErrorType {
        enum Code: String {
            case attachContentToolarge = "FailedOperation.AttachContentToolarge"
            case emailAddrInBlacklist = "FailedOperation.EmailAddrInBlacklist"
            case emailContentToolarge = "FailedOperation.EmailContentToolarge"
            case exceedSendLimit = "FailedOperation.ExceedSendLimit"
            case exceedTemplateLimit = "FailedOperation.ExceedTemplateLimit"
            case frequencyLimit = "FailedOperation.FrequencyLimit"
            case highRejectionRate = "FailedOperation.HighRejectionRate"
            case incorrectEmail = "FailedOperation.IncorrectEmail"
            case incorrectSender = "FailedOperation.IncorrectSender"
            case insufficientBalance = "FailedOperation.InsufficientBalance"
            case insufficientQuota = "FailedOperation.InsufficientQuota"
            case invalidAttachName = "FailedOperation.InvalidAttachName"
            case invalidLimit = "FailedOperation.InvalidLimit"
            case invalidTemplateID = "FailedOperation.InvalidTemplateID"
            case missingEmailContent = "FailedOperation.MissingEmailContent"
            case noAttachPermission = "FailedOperation.NoAttachPermission"
            case notAuthenticatedSender = "FailedOperation.NotAuthenticatedSender"
            case notSupportDate = "FailedOperation.NotSupportDate"
            case protocolCheckErr = "FailedOperation.ProtocolCheckErr"
            case receiverHasUnsubscribed = "FailedOperation.ReceiverHasUnsubscribed"
            case rejectedByRecipients = "FailedOperation.RejectedByRecipients"
            case sendEmailErr = "FailedOperation.SendEmailErr"
            case serviceNotAvailable = "FailedOperation.ServiceNotAvailable"
            case templateContentToolarge = "FailedOperation.TemplateContentToolarge"
            case temporaryBlocked = "FailedOperation.TemporaryBlocked"
            case tooManyAttachments = "FailedOperation.TooManyAttachments"
            case tooManyRecipients = "FailedOperation.TooManyRecipients"
            case unsupportMailType = "FailedOperation.UnsupportMailType"
            case withOutPermission = "FailedOperation.WithOutPermission"
            case wrongContentJson = "FailedOperation.WrongContentJson"
            case other = "FailedOperation"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 附件太大，请参考单个附件以及附件总量大小限制。
        public static var attachContentToolarge: FailedOperation {
            FailedOperation(.attachContentToolarge)
        }
        
        /// 邮件地址在黑名单中。
        public static var emailAddrInBlacklist: FailedOperation {
            FailedOperation(.emailAddrInBlacklist)
        }
        
        /// 邮件内容太大，请减少发送邮件内容。
        public static var emailContentToolarge: FailedOperation {
            FailedOperation(.emailContentToolarge)
        }
        
        /// 超出当日总量发送限制。
        public static var exceedSendLimit: FailedOperation {
            FailedOperation(.exceedSendLimit)
        }
        
        /// 超出最大模板数量限制。
        public static var exceedTemplateLimit: FailedOperation {
            FailedOperation(.exceedTemplateLimit)
        }
        
        /// 触发频率控制，短时间内对同一地址发送过多邮件。
        public static var frequencyLimit: FailedOperation {
            FailedOperation(.frequencyLimit)
        }
        
        /// 拒信率过高，被临时block。
        public static var highRejectionRate: FailedOperation {
            FailedOperation(.highRejectionRate)
        }
        
        /// 邮箱地址错误。
        public static var incorrectEmail: FailedOperation {
            FailedOperation(.incorrectEmail)
        }
        
        /// 发件人格式不正确。请参考文档示例填写。
        public static var incorrectSender: FailedOperation {
            FailedOperation(.incorrectSender)
        }
        
        /// 余额不足，账号欠费等。
        public static var insufficientBalance: FailedOperation {
            FailedOperation(.insufficientBalance)
        }
        
        /// 套餐包额度不足。
        public static var insufficientQuota: FailedOperation {
            FailedOperation(.insufficientQuota)
        }
        
        /// 不支持的附件名称，请检查附件名称是否含有特殊字符，详情请参考附录附件说明。
        public static var invalidAttachName: FailedOperation {
            FailedOperation(.invalidAttachName)
        }
        
        /// 超过查询限制，Limit最大支持100。
        public static var invalidLimit: FailedOperation {
            FailedOperation(.invalidLimit)
        }
        
        /// 模板ID无效或者不可用。
        public static var invalidTemplateID: FailedOperation {
            FailedOperation(.invalidTemplateID)
        }
        
        /// 缺少发信内容（TemplateData和Simple不能同时为空)。
        public static var missingEmailContent: FailedOperation {
            FailedOperation(.missingEmailContent)
        }
        
        /// 没有附件发送权限，请检查。
        public static var noAttachPermission: FailedOperation {
            FailedOperation(.noAttachPermission)
        }
        
        /// 发件sender没有经过认证，无法发送。
        public static var notAuthenticatedSender: FailedOperation {
            FailedOperation(.notAuthenticatedSender)
        }
        
        /// 不支持查询该日期邮件记录，仅支持查询90天之内的数据。
        public static var notSupportDate: FailedOperation {
            FailedOperation(.notSupportDate)
        }
        
        /// 协议检查错误，请检查协议是否正确。
        public static var protocolCheckErr: FailedOperation {
            FailedOperation(.protocolCheckErr)
        }
        
        /// 收件人已退订。
        public static var receiverHasUnsubscribed: FailedOperation {
            FailedOperation(.receiverHasUnsubscribed)
        }
        
        /// 邮件被收信人拒绝。
        public static var rejectedByRecipients: FailedOperation {
            FailedOperation(.rejectedByRecipients)
        }
        
        /// 您的发送遇到问题，请联系腾讯云提交工单沟通原因并解决。
        public static var sendEmailErr: FailedOperation {
            FailedOperation(.sendEmailErr)
        }
        
        /// 临时性错误，请求未生效，请重试。
        public static var serviceNotAvailable: FailedOperation {
            FailedOperation(.serviceNotAvailable)
        }
        
        /// 模板内容太大，请减少模板内容。
        public static var templateContentToolarge: FailedOperation {
            FailedOperation(.templateContentToolarge)
        }
        
        /// 因触发了某些规则导致临时Block。
        public static var temporaryBlocked: FailedOperation {
            FailedOperation(.temporaryBlocked)
        }
        
        /// 附件数量太多，单封邮件最多支持10个附件。
        public static var tooManyAttachments: FailedOperation {
            FailedOperation(.tooManyAttachments)
        }
        
        /// 收件人数太多，最多支持同时发送50人。
        public static var tooManyRecipients: FailedOperation {
            FailedOperation(.tooManyRecipients)
        }
        
        /// 不支持的邮箱类型。
        public static var unsupportMailType: FailedOperation {
            FailedOperation(.unsupportMailType)
        }
        
        /// 仅支持使用模板发送邮件。
        public static var withOutPermission: FailedOperation {
            FailedOperation(.withOutPermission)
        }
        
        /// TemplateData字段格式不正确，请保持为json格式。
        public static var wrongContentJson: FailedOperation {
            FailedOperation(.wrongContentJson)
        }
        
        /// 操作失败。
        public static var other: FailedOperation {
            FailedOperation(.other)
        }
    }
}

extension TCSesError.FailedOperation: Equatable {
    public static func == (lhs: TCSesError.FailedOperation, rhs: TCSesError.FailedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCSesError.FailedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCSesError.FailedOperation {
    public func toSesError() -> TCSesError {
        guard let code = TCSesError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCSesError(code, context: self.context)
    }
}