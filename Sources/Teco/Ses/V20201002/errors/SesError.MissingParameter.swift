//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSesError {
    public struct MissingParameter: TCErrorType {
        enum Code: String {
            case cycleParamNecessary = "MissingParameter.CycleParamNecessary"
            case emailsNecessary = "MissingParameter.EmailsNecessary"
            case receiverIdNecessary = "MissingParameter.ReceiverIdNecessary"
            case sendParamNecessary = "MissingParameter.SendParamNecessary"
            case timedParamNecessary = "MissingParameter.TimedParamNecessary"
            case other = "MissingParameter"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 周期发送任务需选择开始时间和间隔时间。
        public static var cycleParamNecessary: MissingParameter {
            MissingParameter(.cycleParamNecessary)
        }
        
        /// 收件人地址必须传。
        public static var emailsNecessary: MissingParameter {
            MissingParameter(.emailsNecessary)
        }
        
        /// 收件人列表Id必传。
        public static var receiverIdNecessary: MissingParameter {
            MissingParameter(.receiverIdNecessary)
        }
        
        /// 发件地址、收件人列表,发件模板必须传。
        public static var sendParamNecessary: MissingParameter {
            MissingParameter(.sendParamNecessary)
        }
        
        /// 定时发送任务需选择开始时间。
        public static var timedParamNecessary: MissingParameter {
            MissingParameter(.timedParamNecessary)
        }
        
        /// 缺少参数错误。
        public static var other: MissingParameter {
            MissingParameter(.other)
        }
    }
}

extension TCSesError.MissingParameter: Equatable {
    public static func == (lhs: TCSesError.MissingParameter, rhs: TCSesError.MissingParameter) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCSesError.MissingParameter: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCSesError.MissingParameter {
    public func toSesError() -> TCSesError {
        guard let code = TCSesError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCSesError(code, context: self.context)
    }
}