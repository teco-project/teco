//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCSesError {
    public struct OperationDenied: TCSesErrorType {
        enum Code: String {
            case domainNotVerified = "OperationDenied.DomainNotVerified"
            case exceedDomainLimit = "OperationDenied.ExceedDomainLimit"
            case exceedSenderLimit = "OperationDenied.ExceedSenderLimit"
            case receiverIsOperating = "OperationDenied.ReceiverIsOperating"
            case receiverNotExist = "OperationDenied.ReceiverNotExist"
            case receiverStatusError = "OperationDenied.ReceiverStatusError"
            case repeatPassWord = "OperationDenied.RepeatPassWord"
            case sendAddressStatusError = "OperationDenied.SendAddressStatusError"
            case templateStatusError = "OperationDenied.TemplateStatusError"
            case other = "OperationDenied"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 域名验证失败，请检查域名是否通过验证。
        public static var domainNotVerified: OperationDenied {
            OperationDenied(.domainNotVerified)
        }

        /// 超出最大发信域名限制。
        public static var exceedDomainLimit: OperationDenied {
            OperationDenied(.exceedDomainLimit)
        }

        /// 超出最大发信地址限制。
        public static var exceedSenderLimit: OperationDenied {
            OperationDenied(.exceedSenderLimit)
        }

        /// 收件人列表正在上传中，请稍后操作。
        ///
        /// 可能是收件人列表正在上传收件人地址，等待一段时间再操作，必要时可以反馈问题
        public static var receiverIsOperating: OperationDenied {
            OperationDenied(.receiverIsOperating)
        }

        /// 收件人列表不存在。
        ///
        /// 确认一下收件人Id是否正确真实，必须为已创建的收件人列表的id
        public static var receiverNotExist: OperationDenied {
            OperationDenied(.receiverNotExist)
        }

        /// 收件人列表空或状态不是上传完成。
        ///
        /// 检查收件人列表中是否存在收件人地址或者正在进行上传，尚未完成全部上传工作
        public static var receiverStatusError: OperationDenied {
            OperationDenied(.receiverStatusError)
        }

        /// 不能与上一次设置密码相同。
        public static var repeatPassWord: OperationDenied {
            OperationDenied(.repeatPassWord)
        }

        /// 发信地址不存在或者状态不是通过状态。
        ///
        /// 发信地址不存在或者状态不是通过,请检查发信地址是否创建
        public static var sendAddressStatusError: OperationDenied {
            OperationDenied(.sendAddressStatusError)
        }

        /// 发信模板不存在或者状态不是审核通过状态。
        ///
        /// 发信模板不存在或者状态不是审核通过，请检查
        public static var templateStatusError: OperationDenied {
            OperationDenied(.templateStatusError)
        }

        /// 操作被拒绝。
        public static var other: OperationDenied {
            OperationDenied(.other)
        }

        public func asSesError() -> TCSesError {
            let code: TCSesError.Code
            switch self.error {
            case .domainNotVerified:
                code = .operationDenied_DomainNotVerified
            case .exceedDomainLimit:
                code = .operationDenied_ExceedDomainLimit
            case .exceedSenderLimit:
                code = .operationDenied_ExceedSenderLimit
            case .receiverIsOperating:
                code = .operationDenied_ReceiverIsOperating
            case .receiverNotExist:
                code = .operationDenied_ReceiverNotExist
            case .receiverStatusError:
                code = .operationDenied_ReceiverStatusError
            case .repeatPassWord:
                code = .operationDenied_RepeatPassWord
            case .sendAddressStatusError:
                code = .operationDenied_SendAddressStatusError
            case .templateStatusError:
                code = .operationDenied_TemplateStatusError
            case .other:
                code = .operationDenied
            }
            return TCSesError(code, context: self.context)
        }
    }
}
