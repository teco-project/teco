//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCSesError {
    public struct OperationDenied: TCErrorType {
        enum Code: String {
            case domainNotVerified = "OperationDenied.DomainNotVerified"
            case exceedDomainLimit = "OperationDenied.ExceedDomainLimit"
            case exceedSenderLimit = "OperationDenied.ExceedSenderLimit"
            case receiverIsOperating = "OperationDenied.ReceiverIsOperating"
            case receiverNotExist = "OperationDenied.ReceiverNotExist"
            case receiverStatusError = "OperationDenied.ReceiverStatusError"
            case sendAddressStatusError = "OperationDenied.SendAddressStatusError"
            case templateStatusError = "OperationDenied.TemplateStatusError"
            case other = "OperationDenied"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 域名验证失败，请检查域名是否通过验证。
        public static var domainNotVerified: OperationDenied {
            OperationDenied(.domainNotVerified)
        }
        
        /// 超出最大发信域名限制。
        public static var exceedDomainLimit: OperationDenied {
            OperationDenied(.exceedDomainLimit)
        }
        
        /// 超出最大发信地址限制。
        public static var exceedSenderLimit: OperationDenied {
            OperationDenied(.exceedSenderLimit)
        }
        
        /// 收件人列表正在被操作，请稍后操作。
        public static var receiverIsOperating: OperationDenied {
            OperationDenied(.receiverIsOperating)
        }
        
        /// 收件人列表不存在。
        public static var receiverNotExist: OperationDenied {
            OperationDenied(.receiverNotExist)
        }
        
        /// 收件人列表空或状态不是上传完成。
        public static var receiverStatusError: OperationDenied {
            OperationDenied(.receiverStatusError)
        }
        
        /// 发信地址不存在或者状态不是通过状态。
        public static var sendAddressStatusError: OperationDenied {
            OperationDenied(.sendAddressStatusError)
        }
        
        /// 发信模板不存在或者状态不是审核通过状态。
        public static var templateStatusError: OperationDenied {
            OperationDenied(.templateStatusError)
        }
        
        /// 操作被拒绝。
        public static var other: OperationDenied {
            OperationDenied(.other)
        }
    }
}

extension TCSesError.OperationDenied: Equatable {
    public static func == (lhs: TCSesError.OperationDenied, rhs: TCSesError.OperationDenied) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCSesError.OperationDenied: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCSesError.OperationDenied {
    public func toSesError() -> TCSesError {
        guard let code = TCSesError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCSesError(code, context: self.context)
    }
}