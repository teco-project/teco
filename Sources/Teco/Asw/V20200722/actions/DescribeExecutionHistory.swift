//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Asw {
    /// DescribeExecutionHistory请求参数结构体
    public struct DescribeExecutionHistoryRequest: TCRequestModel {
        /// 执行资源名
        public let executionResourceName: String

        public init(executionResourceName: String) {
            self.executionResourceName = executionResourceName
        }

        enum CodingKeys: String, CodingKey {
            case executionResourceName = "ExecutionResourceName"
        }
    }

    /// DescribeExecutionHistory返回参数结构体
    public struct DescribeExecutionHistoryResponse: TCResponseModel {
        /// 执行的事件列表
        public let events: [ExecutionEvent]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case events = "Events"
            case requestId = "RequestId"
        }
    }

    /// 查询执行的事件历史
    ///
    /// 一次执行会有很多步骤，经过很多节点，这个接口描述某一次执行的事件的历史
    @inlinable
    public func describeExecutionHistory(_ input: DescribeExecutionHistoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExecutionHistoryResponse> {
        self.client.execute(action: "DescribeExecutionHistory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询执行的事件历史
    ///
    /// 一次执行会有很多步骤，经过很多节点，这个接口描述某一次执行的事件的历史
    @inlinable
    public func describeExecutionHistory(_ input: DescribeExecutionHistoryRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExecutionHistoryResponse {
        try await self.client.execute(action: "DescribeExecutionHistory", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询执行的事件历史
    ///
    /// 一次执行会有很多步骤，经过很多节点，这个接口描述某一次执行的事件的历史
    @inlinable
    public func describeExecutionHistory(executionResourceName: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeExecutionHistoryResponse> {
        self.describeExecutionHistory(DescribeExecutionHistoryRequest(executionResourceName: executionResourceName), logger: logger, on: eventLoop)
    }

    /// 查询执行的事件历史
    ///
    /// 一次执行会有很多步骤，经过很多节点，这个接口描述某一次执行的事件的历史
    @inlinable
    public func describeExecutionHistory(executionResourceName: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeExecutionHistoryResponse {
        try await self.describeExecutionHistory(DescribeExecutionHistoryRequest(executionResourceName: executionResourceName), logger: logger, on: eventLoop)
    }
}
