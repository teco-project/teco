//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Asw {
    /// StopExecution请求参数结构体
    public struct StopExecutionRequest: TCRequestModel {
        /// 执行名称
        public let executionQrn: String

        public init(executionQrn: String) {
            self.executionQrn = executionQrn
        }

        enum CodingKeys: String, CodingKey {
            case executionQrn = "ExecutionQrn"
        }
    }

    /// StopExecution返回参数结构体
    public struct StopExecutionResponse: TCResponseModel {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 停止状态机
    ///
    /// 终止某个状态机
    @inlinable @discardableResult
    public func stopExecution(_ input: StopExecutionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopExecutionResponse> {
        self.client.execute(action: "StopExecution", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 停止状态机
    ///
    /// 终止某个状态机
    @inlinable @discardableResult
    public func stopExecution(_ input: StopExecutionRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopExecutionResponse {
        try await self.client.execute(action: "StopExecution", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 停止状态机
    ///
    /// 终止某个状态机
    @inlinable @discardableResult
    public func stopExecution(executionQrn: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StopExecutionResponse> {
        self.stopExecution(.init(executionQrn: executionQrn), region: region, logger: logger, on: eventLoop)
    }

    /// 停止状态机
    ///
    /// 终止某个状态机
    @inlinable @discardableResult
    public func stopExecution(executionQrn: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StopExecutionResponse {
        try await self.stopExecution(.init(executionQrn: executionQrn), region: region, logger: logger, on: eventLoop)
    }
}
