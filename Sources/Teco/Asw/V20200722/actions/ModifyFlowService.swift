//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Asw {
    /// ModifyFlowService请求参数结构体
    public struct ModifyFlowServiceRequest: TCRequestModel {
        /// 状态机资源名
        public let flowServiceResource: String

        /// 定义JSON
        public let definition: String

        /// 状态机所属服务名
        public let flowServiceName: String

        /// 状态机所属服务中文名
        public let flowServiceChineseName: String

        /// 是否是新角色
        public let isNewRole: Bool

        /// 状态机类型
        public let type: String

        /// 角色资源名
        public let roleResource: String

        /// 状态机备注
        public let description: String?

        /// 是否允许日志投递
        public let enableCLS: Bool?

        public init(flowServiceResource: String, definition: String, flowServiceName: String, flowServiceChineseName: String, isNewRole: Bool, type: String, roleResource: String, description: String? = nil, enableCLS: Bool? = nil) {
            self.flowServiceResource = flowServiceResource
            self.definition = definition
            self.flowServiceName = flowServiceName
            self.flowServiceChineseName = flowServiceChineseName
            self.isNewRole = isNewRole
            self.type = type
            self.roleResource = roleResource
            self.description = description
            self.enableCLS = enableCLS
        }

        enum CodingKeys: String, CodingKey {
            case flowServiceResource = "FlowServiceResource"
            case definition = "Definition"
            case flowServiceName = "FlowServiceName"
            case flowServiceChineseName = "FlowServiceChineseName"
            case isNewRole = "IsNewRole"
            case type = "Type"
            case roleResource = "RoleResource"
            case description = "Description"
            case enableCLS = "EnableCLS"
        }
    }

    /// ModifyFlowService返回参数结构体
    public struct ModifyFlowServiceResponse: TCResponseModel {
        /// 状态机资源名
        public let flowServiceResource: String

        /// 更新时间
        public let updateDate: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowServiceResource = "FlowServiceResource"
            case updateDate = "UpdateDate"
            case requestId = "RequestId"
        }
    }

    /// 修改状态机
    ///
    /// 该接口用于修改状态机
    @inlinable
    public func modifyFlowService(_ input: ModifyFlowServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyFlowServiceResponse> {
        self.client.execute(action: "ModifyFlowService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改状态机
    ///
    /// 该接口用于修改状态机
    @inlinable
    public func modifyFlowService(_ input: ModifyFlowServiceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyFlowServiceResponse {
        try await self.client.execute(action: "ModifyFlowService", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改状态机
    ///
    /// 该接口用于修改状态机
    @inlinable
    public func modifyFlowService(flowServiceResource: String, definition: String, flowServiceName: String, flowServiceChineseName: String, isNewRole: Bool, type: String, roleResource: String, description: String? = nil, enableCLS: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyFlowServiceResponse> {
        self.modifyFlowService(.init(flowServiceResource: flowServiceResource, definition: definition, flowServiceName: flowServiceName, flowServiceChineseName: flowServiceChineseName, isNewRole: isNewRole, type: type, roleResource: roleResource, description: description, enableCLS: enableCLS), region: region, logger: logger, on: eventLoop)
    }

    /// 修改状态机
    ///
    /// 该接口用于修改状态机
    @inlinable
    public func modifyFlowService(flowServiceResource: String, definition: String, flowServiceName: String, flowServiceChineseName: String, isNewRole: Bool, type: String, roleResource: String, description: String? = nil, enableCLS: Bool? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyFlowServiceResponse {
        try await self.modifyFlowService(.init(flowServiceResource: flowServiceResource, definition: definition, flowServiceName: flowServiceName, flowServiceChineseName: flowServiceChineseName, isNewRole: isNewRole, type: type, roleResource: roleResource, description: description, enableCLS: enableCLS), region: region, logger: logger, on: eventLoop)
    }
}
