//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cpdp {
    /// MigrateOrderRefundQuery请求参数结构体
    public struct MigrateOrderRefundQueryRequest: TCRequestModel {
        /// 商户号
        public let merchantId: String

        /// 支付渠道，ALIPAY对应支付宝渠道；UNIONPAY对应银联渠道
        public let payChannel: String

        /// 退款订单号，最长64位，仅支持数字、 字母
        public let refundOrderId: String

        /// 退款流水号
        public let tradeSerialNo: String

        /// 接入环境。沙箱环境填 sandbox。
        public let profile: String?

        public init(merchantId: String, payChannel: String, refundOrderId: String, tradeSerialNo: String, profile: String? = nil) {
            self.merchantId = merchantId
            self.payChannel = payChannel
            self.refundOrderId = refundOrderId
            self.tradeSerialNo = tradeSerialNo
            self.profile = profile
        }

        enum CodingKeys: String, CodingKey {
            case merchantId = "MerchantId"
            case payChannel = "PayChannel"
            case refundOrderId = "RefundOrderId"
            case tradeSerialNo = "TradeSerialNo"
            case profile = "Profile"
        }
    }

    /// MigrateOrderRefundQuery返回参数结构体
    public struct MigrateOrderRefundQueryResponse: TCResponseModel {
        /// 请求成功状态
        public let isSuccess: Bool

        /// 交易流水号
        public let tradeSerialNo: String

        /// 交易备注
        public let tradeMsg: String

        /// 交易状态：0=交易待处理；1=交易处理中；2=交易处理成功；3=交易失败；4=状态未知
        public let tradeStatus: Int64

        /// 第三方支付机构支付交易号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let thirdChannelOrderId: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case isSuccess = "IsSuccess"
            case tradeSerialNo = "TradeSerialNo"
            case tradeMsg = "TradeMsg"
            case tradeStatus = "TradeStatus"
            case thirdChannelOrderId = "ThirdChannelOrderId"
            case requestId = "RequestId"
        }
    }

    /// 智慧零售-系统迁移存量订单退款查询
    ///
    /// 提交退款申请后，通过调用该接口查询退款状态。退款可能有一定延时。
    @inlinable
    public func migrateOrderRefundQuery(_ input: MigrateOrderRefundQueryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<MigrateOrderRefundQueryResponse> {
        self.client.execute(action: "MigrateOrderRefundQuery", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 智慧零售-系统迁移存量订单退款查询
    ///
    /// 提交退款申请后，通过调用该接口查询退款状态。退款可能有一定延时。
    @inlinable
    public func migrateOrderRefundQuery(_ input: MigrateOrderRefundQueryRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> MigrateOrderRefundQueryResponse {
        try await self.client.execute(action: "MigrateOrderRefundQuery", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 智慧零售-系统迁移存量订单退款查询
    ///
    /// 提交退款申请后，通过调用该接口查询退款状态。退款可能有一定延时。
    @inlinable
    public func migrateOrderRefundQuery(merchantId: String, payChannel: String, refundOrderId: String, tradeSerialNo: String, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<MigrateOrderRefundQueryResponse> {
        let input = MigrateOrderRefundQueryRequest(merchantId: merchantId, payChannel: payChannel, refundOrderId: refundOrderId, tradeSerialNo: tradeSerialNo, profile: profile)
        return self.client.execute(action: "MigrateOrderRefundQuery", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 智慧零售-系统迁移存量订单退款查询
    ///
    /// 提交退款申请后，通过调用该接口查询退款状态。退款可能有一定延时。
    @inlinable
    public func migrateOrderRefundQuery(merchantId: String, payChannel: String, refundOrderId: String, tradeSerialNo: String, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> MigrateOrderRefundQueryResponse {
        let input = MigrateOrderRefundQueryRequest(merchantId: merchantId, payChannel: payChannel, refundOrderId: refundOrderId, tradeSerialNo: tradeSerialNo, profile: profile)
        return try await self.client.execute(action: "MigrateOrderRefundQuery", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
}
