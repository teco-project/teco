//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cpdp {
    /// CreateOpenBankMerchant请求参数结构体
    public struct CreateOpenBankMerchantRequest: TCRequestModel {
        /// 外部商户ID。
        public let outMerchantId: String

        /// 渠道名称。
        /// __TENPAY__: 商企付
        public let channelName: String

        /// 外部商户名称。
        public let outMerchantName: String

        /// 第三方渠道商户信息。详情见附录-复杂类型。
        public let externalMerchantInfo: String

        /// 外部商户简称。
        public let outMerchantShortName: String?

        /// 外部商户描述
        public let outMerchantDescription: String?

        /// 环境类型。
        /// __release__:生产环境
        /// __sandbox__:沙箱环境
        /// _不填默认为生产环境_
        public let environment: String?

        public init(outMerchantId: String, channelName: String, outMerchantName: String, externalMerchantInfo: String, outMerchantShortName: String? = nil, outMerchantDescription: String? = nil, environment: String? = nil) {
            self.outMerchantId = outMerchantId
            self.channelName = channelName
            self.outMerchantName = outMerchantName
            self.externalMerchantInfo = externalMerchantInfo
            self.outMerchantShortName = outMerchantShortName
            self.outMerchantDescription = outMerchantDescription
            self.environment = environment
        }

        enum CodingKeys: String, CodingKey {
            case outMerchantId = "OutMerchantId"
            case channelName = "ChannelName"
            case outMerchantName = "OutMerchantName"
            case externalMerchantInfo = "ExternalMerchantInfo"
            case outMerchantShortName = "OutMerchantShortName"
            case outMerchantDescription = "OutMerchantDescription"
            case environment = "Environment"
        }
    }

    /// CreateOpenBankMerchant返回参数结构体
    public struct CreateOpenBankMerchantResponse: TCResponseModel {
        /// 错误码。
        /// __SUCCESS__: 成功
        /// __其他__: 见附录-错误码表
        public let errCode: String

        /// 错误消息。
        public let errMessage: String

        /// 返回结果。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: CreateOpenBankMerchantResult?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case errMessage = "ErrMessage"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 云企付-创建商户
    @inlinable
    public func createOpenBankMerchant(_ input: CreateOpenBankMerchantRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOpenBankMerchantResponse> {
        self.client.execute(action: "CreateOpenBankMerchant", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云企付-创建商户
    @inlinable
    public func createOpenBankMerchant(_ input: CreateOpenBankMerchantRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOpenBankMerchantResponse {
        try await self.client.execute(action: "CreateOpenBankMerchant", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云企付-创建商户
    @inlinable
    public func createOpenBankMerchant(outMerchantId: String, channelName: String, outMerchantName: String, externalMerchantInfo: String, outMerchantShortName: String? = nil, outMerchantDescription: String? = nil, environment: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateOpenBankMerchantResponse> {
        self.createOpenBankMerchant(.init(outMerchantId: outMerchantId, channelName: channelName, outMerchantName: outMerchantName, externalMerchantInfo: externalMerchantInfo, outMerchantShortName: outMerchantShortName, outMerchantDescription: outMerchantDescription, environment: environment), region: region, logger: logger, on: eventLoop)
    }

    /// 云企付-创建商户
    @inlinable
    public func createOpenBankMerchant(outMerchantId: String, channelName: String, outMerchantName: String, externalMerchantInfo: String, outMerchantShortName: String? = nil, outMerchantDescription: String? = nil, environment: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateOpenBankMerchantResponse {
        try await self.createOpenBankMerchant(.init(outMerchantId: outMerchantId, channelName: channelName, outMerchantName: outMerchantName, externalMerchantInfo: externalMerchantInfo, outMerchantShortName: outMerchantShortName, outMerchantDescription: outMerchantDescription, environment: environment), region: region, logger: logger, on: eventLoop)
    }
}
