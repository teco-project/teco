//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension Cpdp {
    /// QueryCompanyTitle请求参数结构体
    public struct QueryCompanyTitleRequest: TCRequestModel {
        /// 公司抬头关键字
        public let companyTitleKeyword: String

        /// 开票平台ID。0：高灯，1：票易通
        public let invoicePlatformId: Int64

        /// 销方纳税人识别号
        public let sellerTaxpayerNum: String

        /// 接入环境。沙箱环境填sandbox。
        public let profile: String?

        public init(companyTitleKeyword: String, invoicePlatformId: Int64, sellerTaxpayerNum: String, profile: String? = nil) {
            self.companyTitleKeyword = companyTitleKeyword
            self.invoicePlatformId = invoicePlatformId
            self.sellerTaxpayerNum = sellerTaxpayerNum
            self.profile = profile
        }

        enum CodingKeys: String, CodingKey {
            case companyTitleKeyword = "CompanyTitleKeyword"
            case invoicePlatformId = "InvoicePlatformId"
            case sellerTaxpayerNum = "SellerTaxpayerNum"
            case profile = "Profile"
        }
    }

    /// QueryCompanyTitle返回参数结构体
    public struct QueryCompanyTitleResponse: TCResponseModel {
        /// 错误码
        public let errCode: String

        /// 错误消息
        public let errMessage: String

        /// 公司抬头结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: [CompanyTitleResult]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case errMessage = "ErrMessage"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 智慧零售-查询公司抬头
    @inlinable
    public func queryCompanyTitle(_ input: QueryCompanyTitleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryCompanyTitleResponse> {
        self.client.execute(action: "QueryCompanyTitle", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 智慧零售-查询公司抬头
    @inlinable
    public func queryCompanyTitle(_ input: QueryCompanyTitleRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryCompanyTitleResponse {
        try await self.client.execute(action: "QueryCompanyTitle", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 智慧零售-查询公司抬头
    @inlinable
    public func queryCompanyTitle(companyTitleKeyword: String, invoicePlatformId: Int64, sellerTaxpayerNum: String, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryCompanyTitleResponse> {
        self.queryCompanyTitle(.init(companyTitleKeyword: companyTitleKeyword, invoicePlatformId: invoicePlatformId, sellerTaxpayerNum: sellerTaxpayerNum, profile: profile), region: region, logger: logger, on: eventLoop)
    }

    /// 智慧零售-查询公司抬头
    @inlinable
    public func queryCompanyTitle(companyTitleKeyword: String, invoicePlatformId: Int64, sellerTaxpayerNum: String, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryCompanyTitleResponse {
        try await self.queryCompanyTitle(.init(companyTitleKeyword: companyTitleKeyword, invoicePlatformId: invoicePlatformId, sellerTaxpayerNum: sellerTaxpayerNum, profile: profile), region: region, logger: logger, on: eventLoop)
    }
}
