//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cpdp {
    /// QueryMerchantOrder请求参数结构体
    public struct QueryMerchantOrderRequest: TCRequestModel {
        /// 进件成功后返给商户方的AppId。
        public let merchantAppId: String

        /// 平台流水号。平台唯一订单号。
        public let orderNo: String

        public init(merchantAppId: String, orderNo: String) {
            self.merchantAppId = merchantAppId
            self.orderNo = orderNo
        }

        enum CodingKeys: String, CodingKey {
            case merchantAppId = "MerchantAppId"
            case orderNo = "OrderNo"
        }
    }

    /// QueryMerchantOrder返回参数结构体
    public struct QueryMerchantOrderResponse: TCResponseModel {
        /// 进件成功后返给商户方的AppId。
        public let merchantAppId: String

        /// 平台流水号。平台唯一订单号。
        public let orderNo: String

        /// 订单支付状态。0-下单失败 1-下单成功未支付 2-支付成功 3-支付失败 4-退款中 5-退款成功 6-退款失败 7-待付款 8-待确认。
        public let status: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case merchantAppId = "MerchantAppId"
            case orderNo = "OrderNo"
            case status = "Status"
            case requestId = "RequestId"
        }
    }

    /// 云鉴-消费订单查询接口
    @inlinable
    public func queryMerchantOrder(_ input: QueryMerchantOrderRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryMerchantOrderResponse> {
        self.client.execute(action: "QueryMerchantOrder", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云鉴-消费订单查询接口
    @inlinable
    public func queryMerchantOrder(_ input: QueryMerchantOrderRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryMerchantOrderResponse {
        try await self.client.execute(action: "QueryMerchantOrder", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云鉴-消费订单查询接口
    @inlinable
    public func queryMerchantOrder(merchantAppId: String, orderNo: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryMerchantOrderResponse> {
        self.queryMerchantOrder(QueryMerchantOrderRequest(merchantAppId: merchantAppId, orderNo: orderNo), logger: logger, on: eventLoop)
    }

    /// 云鉴-消费订单查询接口
    @inlinable
    public func queryMerchantOrder(merchantAppId: String, orderNo: String, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryMerchantOrderResponse {
        try await self.queryMerchantOrder(QueryMerchantOrderRequest(merchantAppId: merchantAppId, orderNo: orderNo), logger: logger, on: eventLoop)
    }
}
