//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cpdp {
    /// QueryOpenBankSubMerchantCredential请求参数结构体
    public struct QueryOpenBankSubMerchantCredentialRequest: TCRequestModel {
        /// 渠道商户ID。
        public let channelMerchantId: String

        /// 渠道子商户ID。
        public let channelSubMerchantId: String

        /// 渠道名称。详见附录-枚举类型-ChannelName。
        public let channelName: String

        /// 支付方式。
        /// 合利宝渠道不需要传。
        public let paymentMethod: String?

        /// 外部申请流水号。
        /// 外部申请流水号与渠道申请流水号两者选填其一。
        public let outApplyId: String?

        /// 渠道申请流水号。
        /// 外部申请流水号与渠道申请流水号两者选填其一。
        public let channelApplyId: String?

        /// 环境类型。
        /// __release__:生产环境
        /// __sandbox__:沙箱环境
        /// _不填默认为生产环境_
        public let environment: String?

        public init(channelMerchantId: String, channelSubMerchantId: String, channelName: String, paymentMethod: String? = nil, outApplyId: String? = nil, channelApplyId: String? = nil, environment: String? = nil) {
            self.channelMerchantId = channelMerchantId
            self.channelSubMerchantId = channelSubMerchantId
            self.channelName = channelName
            self.paymentMethod = paymentMethod
            self.outApplyId = outApplyId
            self.channelApplyId = channelApplyId
            self.environment = environment
        }

        enum CodingKeys: String, CodingKey {
            case channelMerchantId = "ChannelMerchantId"
            case channelSubMerchantId = "ChannelSubMerchantId"
            case channelName = "ChannelName"
            case paymentMethod = "PaymentMethod"
            case outApplyId = "OutApplyId"
            case channelApplyId = "ChannelApplyId"
            case environment = "Environment"
        }
    }

    /// QueryOpenBankSubMerchantCredential返回参数结构体
    public struct QueryOpenBankSubMerchantCredentialResponse: TCResponseModel {
        /// 错误码。
        public let errCode: String

        /// 错误消息。
        public let errMessage: String

        /// 返回结果
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: QueryOpenBankSubMerchantCredentialResult?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case errMessage = "ErrMessage"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 云企付-子商户资质文件查询
    @inlinable
    public func queryOpenBankSubMerchantCredential(_ input: QueryOpenBankSubMerchantCredentialRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryOpenBankSubMerchantCredentialResponse> {
        self.client.execute(action: "QueryOpenBankSubMerchantCredential", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云企付-子商户资质文件查询
    @inlinable
    public func queryOpenBankSubMerchantCredential(_ input: QueryOpenBankSubMerchantCredentialRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryOpenBankSubMerchantCredentialResponse {
        try await self.client.execute(action: "QueryOpenBankSubMerchantCredential", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云企付-子商户资质文件查询
    @inlinable
    public func queryOpenBankSubMerchantCredential(channelMerchantId: String, channelSubMerchantId: String, channelName: String, paymentMethod: String? = nil, outApplyId: String? = nil, channelApplyId: String? = nil, environment: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryOpenBankSubMerchantCredentialResponse> {
        self.queryOpenBankSubMerchantCredential(QueryOpenBankSubMerchantCredentialRequest(channelMerchantId: channelMerchantId, channelSubMerchantId: channelSubMerchantId, channelName: channelName, paymentMethod: paymentMethod, outApplyId: outApplyId, channelApplyId: channelApplyId, environment: environment), region: region, logger: logger, on: eventLoop)
    }

    /// 云企付-子商户资质文件查询
    @inlinable
    public func queryOpenBankSubMerchantCredential(channelMerchantId: String, channelSubMerchantId: String, channelName: String, paymentMethod: String? = nil, outApplyId: String? = nil, channelApplyId: String? = nil, environment: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryOpenBankSubMerchantCredentialResponse {
        try await self.queryOpenBankSubMerchantCredential(QueryOpenBankSubMerchantCredentialRequest(channelMerchantId: channelMerchantId, channelSubMerchantId: channelSubMerchantId, channelName: channelName, paymentMethod: paymentMethod, outApplyId: outApplyId, channelApplyId: channelApplyId, environment: environment), region: region, logger: logger, on: eventLoop)
    }
}
