//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cpdp {
    /// QueryReconciliationDocument请求参数结构体
    public struct QueryReconciliationDocumentRequest: TCRequestModel {
        /// String(22)，商户号
        public let mrchCode: String

        /// STRING(10)，文件类型（充值文件-CZ; 提现文件-TX; 交易文件-JY; 余额文件-YE; 合约文件-HY）
        public let fileType: String

        /// STRING(8)，文件日期（格式：20190101）
        public let fileDate: String

        /// STRING(1027)，保留域
        public let reservedMsg: String?

        /// STRING(12)，接入环境，默认接入沙箱环境。接入正式环境填"prod"
        public let profile: String?

        public init(mrchCode: String, fileType: String, fileDate: String, reservedMsg: String? = nil, profile: String? = nil) {
            self.mrchCode = mrchCode
            self.fileType = fileType
            self.fileDate = fileDate
            self.reservedMsg = reservedMsg
            self.profile = profile
        }

        enum CodingKeys: String, CodingKey {
            case mrchCode = "MrchCode"
            case fileType = "FileType"
            case fileDate = "FileDate"
            case reservedMsg = "ReservedMsg"
            case profile = "Profile"
        }
    }

    /// QueryReconciliationDocument返回参数结构体
    public struct QueryReconciliationDocumentResponse: TCResponseModel {
        /// String(20)，返回码
        public let txnReturnCode: String

        /// String(100)，返回信息
        public let txnReturnMsg: String

        /// String(22)，交易流水号
        public let cnsmrSeqNo: String

        /// STRING(10)，本次交易返回查询结果记录数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultNum: String?

        /// 交易信息数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tranItemArray: [FileItem]?

        /// STRING(1027)，保留域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reservedMsg: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case txnReturnCode = "TxnReturnCode"
            case txnReturnMsg = "TxnReturnMsg"
            case cnsmrSeqNo = "CnsmrSeqNo"
            case resultNum = "ResultNum"
            case tranItemArray = "TranItemArray"
            case reservedMsg = "ReservedMsg"
            case requestId = "RequestId"
        }
    }

    /// 云鉴-查询对账文件信息
    ///
    /// 查询对账文件信息。平台调用该接口获取需下载对账文件的文件名称以及密钥。 平台获取到信息后， 可以再调用OPENAPI的文件下载功能。
    @inlinable
    public func queryReconciliationDocument(_ input: QueryReconciliationDocumentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryReconciliationDocumentResponse> {
        self.client.execute(action: "QueryReconciliationDocument", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 云鉴-查询对账文件信息
    ///
    /// 查询对账文件信息。平台调用该接口获取需下载对账文件的文件名称以及密钥。 平台获取到信息后， 可以再调用OPENAPI的文件下载功能。
    @inlinable
    public func queryReconciliationDocument(_ input: QueryReconciliationDocumentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryReconciliationDocumentResponse {
        try await self.client.execute(action: "QueryReconciliationDocument", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 云鉴-查询对账文件信息
    ///
    /// 查询对账文件信息。平台调用该接口获取需下载对账文件的文件名称以及密钥。 平台获取到信息后， 可以再调用OPENAPI的文件下载功能。
    @inlinable
    public func queryReconciliationDocument(mrchCode: String, fileType: String, fileDate: String, reservedMsg: String? = nil, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryReconciliationDocumentResponse> {
        self.queryReconciliationDocument(.init(mrchCode: mrchCode, fileType: fileType, fileDate: fileDate, reservedMsg: reservedMsg, profile: profile), region: region, logger: logger, on: eventLoop)
    }

    /// 云鉴-查询对账文件信息
    ///
    /// 查询对账文件信息。平台调用该接口获取需下载对账文件的文件名称以及密钥。 平台获取到信息后， 可以再调用OPENAPI的文件下载功能。
    @inlinable
    public func queryReconciliationDocument(mrchCode: String, fileType: String, fileDate: String, reservedMsg: String? = nil, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryReconciliationDocumentResponse {
        try await self.queryReconciliationDocument(.init(mrchCode: mrchCode, fileType: fileType, fileDate: fileDate, reservedMsg: reservedMsg, profile: profile), region: region, logger: logger, on: eventLoop)
    }
}
