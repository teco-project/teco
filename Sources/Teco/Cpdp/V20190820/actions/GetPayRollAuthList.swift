//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoPaginationHelpers

extension Cpdp {
    /// GetPayRollAuthList请求参数结构体
    public struct GetPayRollAuthListRequest: TCPaginatedRequest {
        /// 用户在商户对应appid下的唯一标识
        public let openId: String

        /// 微信服务商下特约商户的商户号，由微信支付生成并下发
        public let subMerchantId: String

        /// 核身日期，一次只能查询一天，最久可查询90天内的记录，格式为YYYY-MM-DD
        public let authDate: String

        /// 非负整数，表示该次请求资源的起始位置，从0开始计数
        public let offset: Int64

        /// 非0非负的整数，该次请求可返回的最大资源条数，默认值为10，最大支持10条
        public let limit: Int64

        /// 是服务商在微信申请公众号/小程序或移动应用成功后分配的账号ID（与服务商主体一致）
        /// 当输入服务商Appid时，会校验其与服务商商户号的绑定关系。服务商APPID和与特约商户APPID至少输入一个，且必须要有拉起领薪卡小程序时使用的APPID
        public let wechatAppId: String?

        /// 特约商户在微信申请公众号/小程序或移动应用成功后分配的账号ID（与特约商户主体一致）
        /// 当输入特约商户Appid时，会校验其与特约商户号的绑定关系。服务商APPID和与特约商户APPID至少输入一个，且必须要有拉起领薪卡小程序时使用的APPID
        public let wechatSubAppId: String?

        /// 核身状态，列表查询仅提供成功状态的核身记录查询，故此字段固定AUTHENTICATE_SUCCESS即可
        public let authStatus: String?

        public init(openId: String, subMerchantId: String, authDate: String, offset: Int64, limit: Int64, wechatAppId: String? = nil, wechatSubAppId: String? = nil, authStatus: String? = nil) {
            self.openId = openId
            self.subMerchantId = subMerchantId
            self.authDate = authDate
            self.offset = offset
            self.limit = limit
            self.wechatAppId = wechatAppId
            self.wechatSubAppId = wechatSubAppId
            self.authStatus = authStatus
        }

        enum CodingKeys: String, CodingKey {
            case openId = "OpenId"
            case subMerchantId = "SubMerchantId"
            case authDate = "AuthDate"
            case offset = "Offset"
            case limit = "Limit"
            case wechatAppId = "WechatAppId"
            case wechatSubAppId = "WechatSubAppId"
            case authStatus = "AuthStatus"
        }

        /// Compute the next request based on API response.
        public func makeNextRequest(with response: GetPayRollAuthListResponse) -> GetPayRollAuthListRequest? {
            guard !response.getItems().isEmpty else {
                return nil
            }
            return GetPayRollAuthListRequest(openId: self.openId, subMerchantId: self.subMerchantId, authDate: self.authDate, offset: self.offset + response.limit, limit: self.limit, wechatAppId: self.wechatAppId, wechatSubAppId: self.wechatSubAppId, authStatus: self.authStatus)
        }
    }

    /// GetPayRollAuthList返回参数结构体
    public struct GetPayRollAuthListResponse: TCPaginatedResponse {
        /// 核身结果列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let results: [PayRollAuthResult]?

        /// 总记录条数
        public let total: Int64

        /// 记录起始位置，该次请求资源的起始位置，请求中包含偏移量时应答消息返回相同偏移量，否则返回默认值0
        public let offset: Int64

        /// 本次返回条数
        public let limit: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case results = "Results"
            case total = "Total"
            case offset = "Offset"
            case limit = "Limit"
            case requestId = "RequestId"
        }

        /// Extract the returned item list from the paginated response.
        public func getItems() -> [PayRollAuthResult] {
            self.results ?? []
        }

        /// Extract the total count from the paginated response.
        public func getTotalCount() -> Int64? {
            self.total
        }
    }

    /// 务工卡-查询核身记录
    @inlinable
    public func getPayRollAuthList(_ input: GetPayRollAuthListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetPayRollAuthListResponse> {
        self.client.execute(action: "GetPayRollAuthList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 务工卡-查询核身记录
    @inlinable
    public func getPayRollAuthList(_ input: GetPayRollAuthListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetPayRollAuthListResponse {
        try await self.client.execute(action: "GetPayRollAuthList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 务工卡-查询核身记录
    @inlinable
    public func getPayRollAuthList(openId: String, subMerchantId: String, authDate: String, offset: Int64, limit: Int64, wechatAppId: String? = nil, wechatSubAppId: String? = nil, authStatus: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetPayRollAuthListResponse> {
        let input = GetPayRollAuthListRequest(openId: openId, subMerchantId: subMerchantId, authDate: authDate, offset: offset, limit: limit, wechatAppId: wechatAppId, wechatSubAppId: wechatSubAppId, authStatus: authStatus)
        return self.client.execute(action: "GetPayRollAuthList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 务工卡-查询核身记录
    @inlinable
    public func getPayRollAuthList(openId: String, subMerchantId: String, authDate: String, offset: Int64, limit: Int64, wechatAppId: String? = nil, wechatSubAppId: String? = nil, authStatus: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetPayRollAuthListResponse {
        let input = GetPayRollAuthListRequest(openId: openId, subMerchantId: subMerchantId, authDate: authDate, offset: offset, limit: limit, wechatAppId: wechatAppId, wechatSubAppId: wechatSubAppId, authStatus: authStatus)
        return try await self.client.execute(action: "GetPayRollAuthList", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 务工卡-查询核身记录
    @inlinable
    public func getPayRollAuthListPaginated(_ input: GetPayRollAuthListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<(Int64?, [PayRollAuthResult])> {
        self.client.paginate(input: input, region: region, command: self.getPayRollAuthList, logger: logger, on: eventLoop)
    }

    /// 务工卡-查询核身记录
    @inlinable @discardableResult
    public func getPayRollAuthListPaginated(_ input: GetPayRollAuthListRequest, region: TCRegion? = nil, onResponse: @escaping (GetPayRollAuthListResponse, EventLoop) -> EventLoopFuture<Bool>, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        self.client.paginate(input: input, region: region, command: self.getPayRollAuthList, callback: onResponse, logger: logger, on: eventLoop)
    }

    /// 务工卡-查询核身记录
    ///
    /// - Returns: `AsyncSequence`s of `PayRollAuthResult` and `GetPayRollAuthListResponse` that can be iterated over asynchronously on demand.
    @inlinable
    public func getPayRollAuthListPaginator(_ input: GetPayRollAuthListRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> TCClient.PaginatorSequences<GetPayRollAuthListRequest> {
        TCClient.Paginator.makeAsyncSequences(input: input, region: region, command: self.getPayRollAuthList, logger: logger, on: eventLoop)
    }
}
