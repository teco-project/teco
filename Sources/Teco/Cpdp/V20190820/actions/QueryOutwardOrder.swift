//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cpdp {
    /// QueryOutwardOrder请求参数结构体
    public struct QueryOutwardOrderRequest: TCRequestModel {
        /// 对接方汇出指令编号
        public let transactionId: String

        /// 接入环境。沙箱环境填sandbox
        public let profile: String?

        public init(transactionId: String, profile: String? = nil) {
            self.transactionId = transactionId
            self.profile = profile
        }

        enum CodingKeys: String, CodingKey {
            case transactionId = "TransactionId"
            case profile = "Profile"
        }
    }

    /// QueryOutwardOrder返回参数结构体
    public struct QueryOutwardOrderResponse: TCResponseModel {
        /// 查询汇出结果
        public let result: QueryOutwardOrderResult

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 跨境-查询汇出结果
    @inlinable
    public func queryOutwardOrder(_ input: QueryOutwardOrderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryOutwardOrderResponse> {
        self.client.execute(action: "QueryOutwardOrder", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 跨境-查询汇出结果
    @inlinable
    public func queryOutwardOrder(_ input: QueryOutwardOrderRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryOutwardOrderResponse {
        try await self.client.execute(action: "QueryOutwardOrder", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 跨境-查询汇出结果
    @inlinable
    public func queryOutwardOrder(transactionId: String, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<QueryOutwardOrderResponse> {
        self.queryOutwardOrder(.init(transactionId: transactionId, profile: profile), region: region, logger: logger, on: eventLoop)
    }

    /// 跨境-查询汇出结果
    @inlinable
    public func queryOutwardOrder(transactionId: String, profile: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryOutwardOrderResponse {
        try await self.queryOutwardOrder(.init(transactionId: transactionId, profile: profile), region: region, logger: logger, on: eventLoop)
    }
}
