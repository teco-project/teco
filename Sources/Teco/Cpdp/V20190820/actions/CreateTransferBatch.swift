//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cpdp {
    /// CreateTransferBatch请求参数结构体
    public struct CreateTransferBatchRequest: TCRequestModel {
        /// 商户号。
        /// 示例值：129284394
        public let merchantId: String
        
        /// 转账明细列表。
        /// 发起批量转账的明细列表，最多三千笔
        public let transferDetails: [TransferDetailRequest]
        
        /// 直连商户appId。
        /// 即商户号绑定的appid。
        /// 示例值：wxf636efh567hg4356
        public let merchantAppId: String
        
        /// 商家批次单号。
        /// 商户系统内部的商家批次单号，此参数只能由数字、字母组成，商户系统内部唯一，UTF8编码，最多32个字符。
        /// 示例值：plfk2020042013
        public let merchantBatchNo: String
        
        /// 批次名称。
        /// 批量转账的名称。
        /// 示例值：2019年1月深圳分部报销单
        public let batchName: String
        
        /// 转账说明。
        /// UTF8编码，最多32个字符。
        /// 示例值：2019年深圳分部报销单
        public let batchRemark: String
        
        /// 转账总金额。
        /// 转账金额，单位为分。
        /// 示例值：4000000
        public let totalAmount: UInt64
        
        /// 转账总笔数。
        /// 一个转账批次最多允许发起三千笔转账。
        /// 示例值：200
        public let totalNum: UInt64
        
        /// 环境名。
        /// release: 现网环境
        /// sandbox: 沙箱环境
        /// development: 开发环境
        /// 缺省: release
        public let profile: String?
        
        public init (merchantId: String, transferDetails: [TransferDetailRequest], merchantAppId: String, merchantBatchNo: String, batchName: String, batchRemark: String, totalAmount: UInt64, totalNum: UInt64, profile: String? = nil) {
            self.merchantId = merchantId
            self.transferDetails = transferDetails
            self.merchantAppId = merchantAppId
            self.merchantBatchNo = merchantBatchNo
            self.batchName = batchName
            self.batchRemark = batchRemark
            self.totalAmount = totalAmount
            self.totalNum = totalNum
            self.profile = profile
        }
        
        enum CodingKeys: String, CodingKey {
            case merchantId = "MerchantId"
            case transferDetails = "TransferDetails"
            case merchantAppId = "MerchantAppId"
            case merchantBatchNo = "MerchantBatchNo"
            case batchName = "BatchName"
            case batchRemark = "BatchRemark"
            case totalAmount = "TotalAmount"
            case totalNum = "TotalNum"
            case profile = "Profile"
        }
    }
    
    /// CreateTransferBatch返回参数结构体
    public struct CreateTransferBatchResponse: TCResponseModel {
        /// 商家批次单号。
        /// 商户系统内部的商家批次单号，此参数只能由数字、字母组成，商户系统内部唯一，UTF8编码，最多32个字符。
        /// 示例值：plfk2020042013
        public let merchantBatchNo: String
        
        /// 微信批次单号。
        /// 微信商家转账系统返回的唯一标识。
        /// 示例值：1030000071100999991182020050700019480001
        public let batchId: String
        
        /// 批次受理成功时返回，遵循rfc3339标准格式。格式为YYYY-MM-DDTHH:mm:ss.sss+TIMEZONE，YYYY-MM-DD表示年月日，T出现在字符串中，表示time元素的开头，HH:mm:ss.sss表示时分秒毫秒，TIMEZONE表示时区（+08:00表示东八区时间，领先UTC 8小时，即北京时间）。例如：2015-05-20T13:29:35.120+08:00表示北京时间2015年05月20日13点29分35秒。
        /// 示例值：2015-05-20T13:29:35.120+08:00
        public let createTime: String
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case merchantBatchNo = "MerchantBatchNo"
            case batchId = "BatchId"
            case createTime = "CreateTime"
            case requestId = "RequestId"
        }
    }
    
    /// 智慧薪酬-发起批量转账
    ///
    /// 微信商户发起批量转账
    @inlinable
    public func createTransferBatch(_ input: CreateTransferBatchRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateTransferBatchResponse > {
        self.client.execute(action: "CreateTransferBatch", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 智慧薪酬-发起批量转账
    ///
    /// 微信商户发起批量转账
    @inlinable
    public func createTransferBatch(_ input: CreateTransferBatchRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTransferBatchResponse {
        try await self.client.execute(action: "CreateTransferBatch", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 智慧薪酬-发起批量转账
    ///
    /// 微信商户发起批量转账
    @inlinable
    public func createTransferBatch(merchantId: String, transferDetails: [TransferDetailRequest], merchantAppId: String, merchantBatchNo: String, batchName: String, batchRemark: String, totalAmount: UInt64, totalNum: UInt64, profile: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < CreateTransferBatchResponse > {
        self.createTransferBatch(CreateTransferBatchRequest(merchantId: merchantId, transferDetails: transferDetails, merchantAppId: merchantAppId, merchantBatchNo: merchantBatchNo, batchName: batchName, batchRemark: batchRemark, totalAmount: totalAmount, totalNum: totalNum, profile: profile), logger: logger, on: eventLoop)
    }
    
    /// 智慧薪酬-发起批量转账
    ///
    /// 微信商户发起批量转账
    @inlinable
    public func createTransferBatch(merchantId: String, transferDetails: [TransferDetailRequest], merchantAppId: String, merchantBatchNo: String, batchName: String, batchRemark: String, totalAmount: UInt64, totalNum: UInt64, profile: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateTransferBatchResponse {
        try await self.createTransferBatch(CreateTransferBatchRequest(merchantId: merchantId, transferDetails: transferDetails, merchantAppId: merchantAppId, merchantBatchNo: merchantBatchNo, batchName: batchName, batchRemark: batchRemark, totalAmount: totalAmount, totalNum: totalNum, profile: profile), logger: logger, on: eventLoop)
    }
}
