//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Cpdp {
    /// QueryBankClear请求参数结构体
    public struct QueryBankClearRequest: TCRequestModel {
        /// String(22)，商户号（签约客户号）
        public let mrchCode: String
        
        /// STRING(2)，功能标志（1: 全部; 2: 指定时间段）
        public let functionFlag: String
        
        /// STRING (10)，页码（起始值为1，每次最多返回20条记录，第二页返回的记录数为第21至40条记录，第三页为41至60条记录，顺序均按照建立时间的先后）
        public let pageNum: String
        
        /// STRING(8)，开始日期（若是指定时间段查询，则必输，当查询全部时，不起作用。格式: 20190101）
        public let startDate: String?
        
        /// STRING(8)，终止日期（若是指定时间段查询，则必输，当查询全部时，不起作用。格式：20190101）
        public let endDate: String?
        
        /// STRING(1027)，保留域
        public let reservedMsg: String?
        
        /// STRING(12)，接入环境，默认接入沙箱环境。接入正式环境填"prod"
        public let profile: String?
        
        public init (mrchCode: String, functionFlag: String, pageNum: String, startDate: String? = nil, endDate: String? = nil, reservedMsg: String? = nil, profile: String? = nil) {
            self.mrchCode = mrchCode
            self.functionFlag = functionFlag
            self.pageNum = pageNum
            self.startDate = startDate
            self.endDate = endDate
            self.reservedMsg = reservedMsg
            self.profile = profile
        }
        
        enum CodingKeys: String, CodingKey {
            case mrchCode = "MrchCode"
            case functionFlag = "FunctionFlag"
            case pageNum = "PageNum"
            case startDate = "StartDate"
            case endDate = "EndDate"
            case reservedMsg = "ReservedMsg"
            case profile = "Profile"
        }
    }
    
    /// QueryBankClear返回参数结构体
    public struct QueryBankClearResponse: TCResponseModel {
        /// String(20)，返回码
        public let txnReturnCode: String
        
        /// String(100)，返回信息
        public let txnReturnMsg: String
        
        /// String(22)，交易流水号
        public let cnsmrSeqNo: String
        
        /// STRING (10)，本次交易返回查询结果记录数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resultNum: String?
        
        /// STRING(30)，起始记录号
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let startRecordNo: String?
        
        /// STRING(2)，结束标志（0: 否; 1: 是）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let endFlag: String?
        
        /// STRING (10)，符合业务查询条件的记录总数（重复次数, 一次最多返回20条记录）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let totalNum: String?
        
        /// 交易信息数组
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tranItemArray: [ClearItem]?
        
        /// STRING(1027)，保留域
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let reservedMsg: String?
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case txnReturnCode = "TxnReturnCode"
            case txnReturnMsg = "TxnReturnMsg"
            case cnsmrSeqNo = "CnsmrSeqNo"
            case resultNum = "ResultNum"
            case startRecordNo = "StartRecordNo"
            case endFlag = "EndFlag"
            case totalNum = "TotalNum"
            case tranItemArray = "TranItemArray"
            case reservedMsg = "ReservedMsg"
            case requestId = "RequestId"
        }
    }
    
    /// 云鉴-查询银行在途清算结果
    ///
    /// 查询银行在途清算结果。查询时间段内交易网的在途清算结果。
    @inlinable
    public func queryBankClear(_ input: QueryBankClearRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < QueryBankClearResponse > {
        self.client.execute(action: "QueryBankClear", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 云鉴-查询银行在途清算结果
    ///
    /// 查询银行在途清算结果。查询时间段内交易网的在途清算结果。
    @inlinable
    public func queryBankClear(_ input: QueryBankClearRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryBankClearResponse {
        try await self.client.execute(action: "QueryBankClear", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// 云鉴-查询银行在途清算结果
    ///
    /// 查询银行在途清算结果。查询时间段内交易网的在途清算结果。
    @inlinable
    public func queryBankClear(mrchCode: String, functionFlag: String, pageNum: String, startDate: String? = nil, endDate: String? = nil, reservedMsg: String? = nil, profile: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < QueryBankClearResponse > {
        self.queryBankClear(QueryBankClearRequest(mrchCode: mrchCode, functionFlag: functionFlag, pageNum: pageNum, startDate: startDate, endDate: endDate, reservedMsg: reservedMsg, profile: profile), logger: logger, on: eventLoop)
    }
    
    /// 云鉴-查询银行在途清算结果
    ///
    /// 查询银行在途清算结果。查询时间段内交易网的在途清算结果。
    @inlinable
    public func queryBankClear(mrchCode: String, functionFlag: String, pageNum: String, startDate: String? = nil, endDate: String? = nil, reservedMsg: String? = nil, profile: String? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> QueryBankClearResponse {
        try await self.queryBankClear(QueryBankClearRequest(mrchCode: mrchCode, functionFlag: functionFlag, pageNum: pageNum, startDate: startDate, endDate: endDate, reservedMsg: reservedMsg, profile: profile), logger: logger, on: eventLoop)
    }
}
