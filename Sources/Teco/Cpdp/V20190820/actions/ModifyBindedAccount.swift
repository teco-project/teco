//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Cpdp {
    /// ModifyBindedAccount请求参数结构体
    public struct ModifyBindedAccountRequest: TCRequestModel {
        /// 主播Id
        public let anchorId: String

        /// 1 微信企业付款
        /// 2 支付宝转账
        /// 3 平安银企直连代发转账
        public let transferType: Int64

        /// 收款方标识。
        /// 微信为open_id；
        /// 支付宝为会员alipay_user_id;
        /// 平安为收款方银行账号;
        public let accountNo: String

        /// 手机号
        public let phoneNum: String

        public init(anchorId: String, transferType: Int64, accountNo: String, phoneNum: String) {
            self.anchorId = anchorId
            self.transferType = transferType
            self.accountNo = accountNo
            self.phoneNum = phoneNum
        }

        enum CodingKeys: String, CodingKey {
            case anchorId = "AnchorId"
            case transferType = "TransferType"
            case accountNo = "AccountNo"
            case phoneNum = "PhoneNum"
        }
    }

    /// ModifyBindedAccount返回参数结构体
    public struct ModifyBindedAccountResponse: TCResponseModel {
        /// 错误码。响应成功："SUCCESS"，其他为不成功。
        public let errCode: String

        /// 响应消息。
        public let errMessage: String

        /// 该字段为null。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let result: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case errCode = "ErrCode"
            case errMessage = "ErrMessage"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 灵云-重新绑定账号
    @inlinable
    public func modifyBindedAccount(_ input: ModifyBindedAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBindedAccountResponse> {
        self.client.execute(action: "ModifyBindedAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 灵云-重新绑定账号
    @inlinable
    public func modifyBindedAccount(_ input: ModifyBindedAccountRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBindedAccountResponse {
        try await self.client.execute(action: "ModifyBindedAccount", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 灵云-重新绑定账号
    @inlinable
    public func modifyBindedAccount(anchorId: String, transferType: Int64, accountNo: String, phoneNum: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyBindedAccountResponse> {
        self.modifyBindedAccount(.init(anchorId: anchorId, transferType: transferType, accountNo: accountNo, phoneNum: phoneNum), region: region, logger: logger, on: eventLoop)
    }

    /// 灵云-重新绑定账号
    @inlinable
    public func modifyBindedAccount(anchorId: String, transferType: Int64, accountNo: String, phoneNum: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyBindedAccountResponse {
        try await self.modifyBindedAccount(.init(anchorId: anchorId, transferType: transferType, accountNo: accountNo, phoneNum: phoneNum), region: region, logger: logger, on: eventLoop)
    }
}
