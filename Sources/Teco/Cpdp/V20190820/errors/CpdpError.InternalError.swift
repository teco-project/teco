//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCpdpError {
    public struct InternalError: TCErrorType {
        enum Code: String {
            case backendConnectionError = "InternalError.BackendConnectionError"
            case backendError = "InternalError.BackendError"
            case backendInternalError = "InternalError.BackendInternalError"
            case backendNetworkError = "InternalError.BackendNetworkError"
            case backendRouterError = "InternalError.BackendRouterError"
            case backendTimeOut = "InternalError.BackendTimeOut"
            case dbAccessError = "InternalError.DBAccessError"
            case deleteDBError = "InternalError.DeleteDBError"
            case duplicateKeyError = "InternalError.DuplicateKeyError"
            case fundSummaryAcctNoInconsistentError = "InternalError.FundSummaryAcctNoInconsistentError"
            case invoiceExist = "InternalError.InvoiceExist"
            case midas = "InternalError.Midas"
            case parameterError = "InternalError.ParameterError"
            case sandBoxAccessError = "InternalError.SandBoxAccessError"
            case saveDBError = "InternalError.SaveDBError"
            case sigGenError = "InternalError.SigGenError"
            case subAccountNotFoundError = "InternalError.SubAccountNotFoundError"
            case unknown = "InternalError.Unknown"
            case unkownError = "InternalError.UnkownError"
            case other = "InternalError."
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 内部连接后端错误。
        public static var backendConnectionError: InternalError {
            InternalError(.backendConnectionError)
        }
        
        /// 后端服务访问错误。
        public static var backendError: InternalError {
            InternalError(.backendError)
        }
        
        /// 服务内部错误。
        public static var backendInternalError: InternalError {
            InternalError(.backendInternalError)
        }
        
        /// 内部调用后端网络错误。
        public static var backendNetworkError: InternalError {
            InternalError(.backendNetworkError)
        }
        
        /// 内部调用路由错误。
        public static var backendRouterError: InternalError {
            InternalError(.backendRouterError)
        }
        
        /// 内部调用后端超时。
        public static var backendTimeOut: InternalError {
            InternalError(.backendTimeOut)
        }
        
        /// 数据库访问错误。
        public static var dbAccessError: InternalError {
            InternalError(.dbAccessError)
        }
        
        /// 数据删除失败。
        public static var deleteDBError: InternalError {
            InternalError(.deleteDBError)
        }
        
        /// 数据重复插入错误。
        public static var duplicateKeyError: InternalError {
            InternalError(.duplicateKeyError)
        }
        
        /// 资金汇总账号不一致错误。
        public static var fundSummaryAcctNoInconsistentError: InternalError {
            InternalError(.fundSummaryAcctNoInconsistentError)
        }
        
        /// 发票已开具。
        public static var invoiceExist: InternalError {
            InternalError(.invoiceExist)
        }
        
        /// 聚鑫内部系统未知错误。
        public static var midas: InternalError {
            InternalError(.midas)
        }
        
        /// 参数错误。
        public static var parameterError: InternalError {
            InternalError(.parameterError)
        }
        
        /// 沙箱环境访问错误。
        public static var sandBoxAccessError: InternalError {
            InternalError(.sandBoxAccessError)
        }
        
        /// 数据保存失败。
        public static var saveDBError: InternalError {
            InternalError(.saveDBError)
        }
        
        /// 生成签名失败。
        public static var sigGenError: InternalError {
            InternalError(.sigGenError)
        }
        
        /// 子账户不存在错误。
        public static var subAccountNotFoundError: InternalError {
            InternalError(.subAccountNotFoundError)
        }
        
        /// 内部错误。
        public static var unknown: InternalError {
            InternalError(.unknown)
        }
        
        /// 未知错误。
        public static var unkownError: InternalError {
            InternalError(.unkownError)
        }
        
        /// 系统错误。
        public static var other: InternalError {
            InternalError(.other)
        }
    }
}

extension TCCpdpError.InternalError: Equatable {
    public static func == (lhs: TCCpdpError.InternalError, rhs: TCCpdpError.InternalError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCpdpError.InternalError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCpdpError.InternalError {
    public func toCpdpError() -> TCCpdpError {
        guard let code = TCCpdpError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCpdpError(code, context: self.context)
    }
}