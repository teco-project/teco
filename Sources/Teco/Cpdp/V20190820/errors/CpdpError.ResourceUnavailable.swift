//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCpdpError {
    public struct ResourceUnavailable: TCErrorType {
        enum Code: String {
            case midasBalance = "ResourceUnavailable.MidasBalance"
            case midasDay = "ResourceUnavailable.MidasDay"
            case midasFrozenAmount = "ResourceUnavailable.MidasFrozenAmount"
            case midasMerchantBalance = "ResourceUnavailable.MidasMerchantBalance"
            case midasOrder = "ResourceUnavailable.MidasOrder"
            case midasUserBalance = "ResourceUnavailable.MidasUserBalance"
            case midasWallet = "ResourceUnavailable.MidasWallet"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        public static var midasBalance: ResourceUnavailable {
            ResourceUnavailable(.midasBalance)
        }
        
        /// 聚鑫单日限额。
        public static var midasDay: ResourceUnavailable {
            ResourceUnavailable(.midasDay)
        }
        
        /// 聚鑫订单剩余冻结金额不足，因此会完结失败。
        public static var midasFrozenAmount: ResourceUnavailable {
            ResourceUnavailable(.midasFrozenAmount)
        }
        
        /// 聚鑫商户可用余额不足。
        public static var midasMerchantBalance: ResourceUnavailable {
            ResourceUnavailable(.midasMerchantBalance)
        }
        
        /// 聚鑫单笔限额。
        public static var midasOrder: ResourceUnavailable {
            ResourceUnavailable(.midasOrder)
        }
        
        /// 聚鑫用户可用余额不足。
        public static var midasUserBalance: ResourceUnavailable {
            ResourceUnavailable(.midasUserBalance)
        }
        
        /// 聚鑫钱包支付超限。
        public static var midasWallet: ResourceUnavailable {
            ResourceUnavailable(.midasWallet)
        }
    }
}

extension TCCpdpError.ResourceUnavailable: Equatable {
    public static func == (lhs: TCCpdpError.ResourceUnavailable, rhs: TCCpdpError.ResourceUnavailable) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCpdpError.ResourceUnavailable: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCpdpError.ResourceUnavailable {
    public func toCpdpError() -> TCCpdpError {
        guard let code = TCCpdpError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCpdpError(code, context: self.context)
    }
}