//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCpdpError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case midasLargeFile = "LimitExceeded.MidasLargeFile"
            case midasOrder = "LimitExceeded.MidasOrder"
            case midasOrderCanceled = "LimitExceeded.MidasOrderCanceled"
            case midasOrderClosed = "LimitExceeded.MidasOrderClosed"
            case midasOrderExpired = "LimitExceeded.MidasOrderExpired"
            case midasOrderFailed = "LimitExceeded.MidasOrderFailed"
            case midasOrderPartialSuccess = "LimitExceeded.MidasOrderPartialSuccess"
            case midasOrderProcessing = "LimitExceeded.MidasOrderProcessing"
            case midasOrderSuccess = "LimitExceeded.MidasOrderSuccess"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 聚鑫文件过大。
        public static var midasLargeFile: LimitExceeded {
            LimitExceeded(.midasLargeFile)
        }
        
        /// 聚鑫不允许并发下单。
        public static var midasOrder: LimitExceeded {
            LimitExceeded(.midasOrder)
        }
        
        /// 聚鑫订单已取消。
        public static var midasOrderCanceled: LimitExceeded {
            LimitExceeded(.midasOrderCanceled)
        }
        
        /// 聚鑫已关单。
        public static var midasOrderClosed: LimitExceeded {
            LimitExceeded(.midasOrderClosed)
        }
        
        /// 聚鑫订单已过期，包括超时未支付、超过退款期限等情况。
        public static var midasOrderExpired: LimitExceeded {
            LimitExceeded(.midasOrderExpired)
        }
        
        /// 聚鑫处理失败。
        public static var midasOrderFailed: LimitExceeded {
            LimitExceeded(.midasOrderFailed)
        }
        
        /// 聚鑫处理部分成功部分失败。
        public static var midasOrderPartialSuccess: LimitExceeded {
            LimitExceeded(.midasOrderPartialSuccess)
        }
        
        /// 聚鑫处理中。
        public static var midasOrderProcessing: LimitExceeded {
            LimitExceeded(.midasOrderProcessing)
        }
        
        /// 聚鑫处理成功，请勿再提交。
        public static var midasOrderSuccess: LimitExceeded {
            LimitExceeded(.midasOrderSuccess)
        }
    }
}

extension TCCpdpError.LimitExceeded: Equatable {
    public static func == (lhs: TCCpdpError.LimitExceeded, rhs: TCCpdpError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCpdpError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCpdpError.LimitExceeded {
    public func toCpdpError() -> TCCpdpError {
        guard let code = TCCpdpError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCpdpError(code, context: self.context)
    }
}