//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCCpdpError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case account = "ResourceNotFound.Account"
            case batchInfoNotFound = "ResourceNotFound.BatchInfoNotFound"
            case invoiceNotFound = "ResourceNotFound.InvoiceNotFound"
            case key = "ResourceNotFound.Key"
            case merchantInfoNotFound = "ResourceNotFound.MerchantInfoNotFound"
            case midasExternalApp = "ResourceNotFound.MidasExternalApp"
            case midasExternalOrder = "ResourceNotFound.MidasExternalOrder"
            case midasOrder = "ResourceNotFound.MidasOrder"
            case midasSign = "ResourceNotFound.MidasSign"
            case platformInfoNotFound = "ResourceNotFound.PlatformInfoNotFound"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 账户不匹配或不存在。
        public static var account: ResourceNotFound {
            ResourceNotFound(.account)
        }
        
        /// 批次信息不存在。
        public static var batchInfoNotFound: ResourceNotFound {
            ResourceNotFound(.batchInfoNotFound)
        }
        
        /// 发票信息不存在。
        public static var invoiceNotFound: ResourceNotFound {
            ResourceNotFound(.invoiceNotFound)
        }
        
        /// 密钥不匹配或不存在。
        public static var key: ResourceNotFound {
            ResourceNotFound(.key)
        }
        
        /// 商户信息不存在。
        public static var merchantInfoNotFound: ResourceNotFound {
            ResourceNotFound(.merchantInfoNotFound)
        }
        
        /// 聚鑫第三方应用未查找到。
        public static var midasExternalApp: ResourceNotFound {
            ResourceNotFound(.midasExternalApp)
        }
        
        /// 聚鑫第三方渠道找不到订单，ORDER_NOT_FOUND表示支付中台找不到订单。
        public static var midasExternalOrder: ResourceNotFound {
            ResourceNotFound(.midasExternalOrder)
        }
        
        /// 聚鑫订单没有查到记录。
        public static var midasOrder: ResourceNotFound {
            ResourceNotFound(.midasOrder)
        }
        
        /// 聚鑫签约关系不存在。
        public static var midasSign: ResourceNotFound {
            ResourceNotFound(.midasSign)
        }
        
        /// 平台信息不存在。
        public static var platformInfoNotFound: ResourceNotFound {
            ResourceNotFound(.platformInfoNotFound)
        }
    }
}

extension TCCpdpError.ResourceNotFound: Equatable {
    public static func == (lhs: TCCpdpError.ResourceNotFound, rhs: TCCpdpError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCpdpError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCpdpError.ResourceNotFound {
    public func toCpdpError() -> TCCpdpError {
        guard let code = TCCpdpError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCCpdpError(code, context: self.context)
    }
}