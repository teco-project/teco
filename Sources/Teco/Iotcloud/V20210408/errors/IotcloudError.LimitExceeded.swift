//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotcloudError {
    public struct LimitExceeded: TCErrorType {
        enum Code: String {
            case caAlreadyBindProduct = "LimitExceeded.CAAlreadyBindProduct"
            case caCertNameRepeat = "LimitExceeded.CACertNameRepeat"
            case caCertNotSupport = "LimitExceeded.CACertNotSupport"
            case caRepeat = "LimitExceeded.CARepeat"
            case deviceExceedLimit = "LimitExceeded.DeviceExceedLimit"
            case firmwareExceedLimit = "LimitExceeded.FirmwareExceedLimit"
            case messageSaved = "LimitExceeded.MessageSaved"
            case offlineMessageExceedLimit = "LimitExceeded.OfflineMessageExceedLimit"
            case productExceedLimit = "LimitExceeded.ProductExceedLimit"
            case topicPolicyExceedLimit = "LimitExceeded.TopicPolicyExceedLimit"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// CA证书已经绑定了产品，无法操作。
        public static var caAlreadyBindProduct: LimitExceeded {
            LimitExceeded(.caAlreadyBindProduct)
        }
        
        /// CA证书名称重复。
        public static var caCertNameRepeat: LimitExceeded {
            LimitExceeded(.caCertNameRepeat)
        }
        
        /// 不支持私有证书操作。
        public static var caCertNotSupport: LimitExceeded {
            LimitExceeded(.caCertNotSupport)
        }
        
        /// CA证书重复。
        public static var caRepeat: LimitExceeded {
            LimitExceeded(.caRepeat)
        }
        
        /// 设备数量超过限制。
        public static var deviceExceedLimit: LimitExceeded {
            LimitExceeded(.deviceExceedLimit)
        }
        
        /// 固件数量超出限制。
        public static var firmwareExceedLimit: LimitExceeded {
            LimitExceeded(.firmwareExceedLimit)
        }
        
        /// 消息已经保存到离线队列。
        public static var messageSaved: LimitExceeded {
            LimitExceeded(.messageSaved)
        }
        
        /// qos为1的离线消息超过数量限制。
        public static var offlineMessageExceedLimit: LimitExceeded {
            LimitExceeded(.offlineMessageExceedLimit)
        }
        
        /// 超过产品数量限制。
        public static var productExceedLimit: LimitExceeded {
            LimitExceeded(.productExceedLimit)
        }
        
        /// Topic数量超出限制。
        public static var topicPolicyExceedLimit: LimitExceeded {
            LimitExceeded(.topicPolicyExceedLimit)
        }
    }
}

extension TCIotcloudError.LimitExceeded: Equatable {
    public static func == (lhs: TCIotcloudError.LimitExceeded, rhs: TCIotcloudError.LimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIotcloudError.LimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIotcloudError.LimitExceeded {
    /// - Returns: ``TCIotcloudError`` that holds the same error and context.
    public func toIotcloudError() -> TCIotcloudError {
        guard let code = TCIotcloudError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIotcloudError(code, context: self.context)
    }
}

extension TCIotcloudError.LimitExceeded {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
