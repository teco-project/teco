//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCIotcloudError {
    public struct ResourceNotFound: TCErrorType {
        enum Code: String {
            case caCertNotExist = "ResourceNotFound.CACertNotExist"
            case createMultiDeviceTaskNotExist = "ResourceNotFound.CreateMultiDeviceTaskNotExist"
            case deviceFirmwareTaskNotExist = "ResourceNotFound.DeviceFirmwareTaskNotExist"
            case deviceHasNoFirmware = "ResourceNotFound.DeviceHasNoFirmware"
            case deviceNotExist = "ResourceNotFound.DeviceNotExist"
            case deviceResourceNotExist = "ResourceNotFound.DeviceResourceNotExist"
            case deviceShadowNotExist = "ResourceNotFound.DeviceShadowNotExist"
            case firmwareNotExist = "ResourceNotFound.FirmwareNotExist"
            case firmwareTaskNotExist = "ResourceNotFound.FirmwareTaskNotExist"
            case productNotExist = "ResourceNotFound.ProductNotExist"
            case productOrDeviceNotExist = "ResourceNotFound.ProductOrDeviceNotExist"
            case productResourceNotExist = "ResourceNotFound.ProductResourceNotExist"
            case resourceFileNotExist = "ResourceNotFound.ResourceFileNotExist"
            case taskNotExist = "ResourceNotFound.TaskNotExist"
            case thingModelNotExist = "ResourceNotFound.ThingModelNotExist"
            case topicPolicyNotExist = "ResourceNotFound.TopicPolicyNotExist"
            case topicRuleNotExist = "ResourceNotFound.TopicRuleNotExist"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// CA证书不存在。
        public static var caCertNotExist: ResourceNotFound {
            ResourceNotFound(.caCertNotExist)
        }
        
        /// 批量创建设备任务不存在。
        public static var createMultiDeviceTaskNotExist: ResourceNotFound {
            ResourceNotFound(.createMultiDeviceTaskNotExist)
        }
        
        /// 设备固件升级任务不存在。
        public static var deviceFirmwareTaskNotExist: ResourceNotFound {
            ResourceNotFound(.deviceFirmwareTaskNotExist)
        }
        
        /// 设备无固件版本。
        public static var deviceHasNoFirmware: ResourceNotFound {
            ResourceNotFound(.deviceHasNoFirmware)
        }
        
        /// 设备不存在。
        public static var deviceNotExist: ResourceNotFound {
            ResourceNotFound(.deviceNotExist)
        }
        
        /// 设备资源不存在。
        public static var deviceResourceNotExist: ResourceNotFound {
            ResourceNotFound(.deviceResourceNotExist)
        }
        
        /// 设备影子不存在。
        public static var deviceShadowNotExist: ResourceNotFound {
            ResourceNotFound(.deviceShadowNotExist)
        }
        
        /// 固件不存在。
        public static var firmwareNotExist: ResourceNotFound {
            ResourceNotFound(.firmwareNotExist)
        }
        
        /// 固件升级任务不存在。
        public static var firmwareTaskNotExist: ResourceNotFound {
            ResourceNotFound(.firmwareTaskNotExist)
        }
        
        /// 产品不存在。
        public static var productNotExist: ResourceNotFound {
            ResourceNotFound(.productNotExist)
        }
        
        /// 用户不存在此产品或设备。
        public static var productOrDeviceNotExist: ResourceNotFound {
            ResourceNotFound(.productOrDeviceNotExist)
        }
        
        /// 产品资源不存在。
        public static var productResourceNotExist: ResourceNotFound {
            ResourceNotFound(.productResourceNotExist)
        }
        
        /// 资源文件不存在。
        public static var resourceFileNotExist: ResourceNotFound {
            ResourceNotFound(.resourceFileNotExist)
        }
        
        /// 任务不存在。
        public static var taskNotExist: ResourceNotFound {
            ResourceNotFound(.taskNotExist)
        }
        
        /// 物模型不存在。
        public static var thingModelNotExist: ResourceNotFound {
            ResourceNotFound(.thingModelNotExist)
        }
        
        /// Topic不存在。
        public static var topicPolicyNotExist: ResourceNotFound {
            ResourceNotFound(.topicPolicyNotExist)
        }
        
        /// 规则不存在。
        public static var topicRuleNotExist: ResourceNotFound {
            ResourceNotFound(.topicRuleNotExist)
        }
    }
}

extension TCIotcloudError.ResourceNotFound: Equatable {
    public static func == (lhs: TCIotcloudError.ResourceNotFound, rhs: TCIotcloudError.ResourceNotFound) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCIotcloudError.ResourceNotFound: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCIotcloudError.ResourceNotFound {
    public func toIotcloudError() -> TCIotcloudError {
        guard let code = TCIotcloudError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCIotcloudError(code, context: self.context)
    }
}