//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Iotcloud {
    /// DescribeProductTask请求参数结构体
    public struct DescribeProductTaskRequest: TCRequestModel {
        /// 产品ID
        public let productId: String

        /// 任务ID
        public let taskId: UInt64

        public init(productId: String, taskId: UInt64) {
            self.productId = productId
            self.taskId = taskId
        }

        enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case taskId = "TaskId"
        }
    }

    /// DescribeProductTask返回参数结构体
    public struct DescribeProductTaskResponse: TCResponseModel {
        /// 产品任务详细信息
        public let taskInfo: ProductTaskInfo

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case taskInfo = "TaskInfo"
            case requestId = "RequestId"
        }
    }

    /// 查看产品任务详情
    ///
    /// 本接口（DescribeProductTask）用于查看产品级别的任务信息
    @inlinable
    public func describeProductTask(_ input: DescribeProductTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProductTaskResponse> {
        self.client.execute(action: "DescribeProductTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查看产品任务详情
    ///
    /// 本接口（DescribeProductTask）用于查看产品级别的任务信息
    @inlinable
    public func describeProductTask(_ input: DescribeProductTaskRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProductTaskResponse {
        try await self.client.execute(action: "DescribeProductTask", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查看产品任务详情
    ///
    /// 本接口（DescribeProductTask）用于查看产品级别的任务信息
    @inlinable
    public func describeProductTask(productId: String, taskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeProductTaskResponse> {
        self.describeProductTask(.init(productId: productId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }

    /// 查看产品任务详情
    ///
    /// 本接口（DescribeProductTask）用于查看产品级别的任务信息
    @inlinable
    public func describeProductTask(productId: String, taskId: UInt64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeProductTaskResponse {
        try await self.describeProductTask(.init(productId: productId, taskId: taskId), region: region, logger: logger, on: eventLoop)
    }
}
