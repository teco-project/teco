//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Iotcloud {
    /// 查询私有CA绑定的产品列表
    @inlinable
    public func describePrivateCABindedProducts(_ input: DescribePrivateCABindedProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture < DescribePrivateCABindedProductsResponse > {
        self.client.execute(action: "DescribePrivateCABindedProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
    
    /// 查询私有CA绑定的产品列表
    @inlinable
    public func describePrivateCABindedProducts(_ input: DescribePrivateCABindedProductsRequest, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribePrivateCABindedProductsResponse {
        try await self.client.execute(action: "DescribePrivateCABindedProducts", serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }
    
    /// DescribePrivateCABindedProducts请求参数结构体
    public struct DescribePrivateCABindedProductsRequest: TCRequestModel {
        /// 证书名称
        public let certName: String
        
        /// 查询偏移量
        public let offset: UInt64
        
        /// 查询的数据量，默认为20， 最大为200
        public let limit: UInt64
        
        public init (certName: String, offset: UInt64, limit: UInt64) {
            self.certName = certName
            self.offset = offset
            self.limit = limit
        }
        
        enum CodingKeys: String, CodingKey {
            case certName = "CertName"
            case offset = "Offset"
            case limit = "Limit"
        }
    }
    
    /// DescribePrivateCABindedProducts返回参数结构体
    public struct DescribePrivateCABindedProductsResponse: TCResponseModel {
        /// 私有CA绑定的产品列表
        public let products: [BindProductInfo]
        
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String
        
        enum CodingKeys: String, CodingKey {
            case products = "Products"
            case requestId = "RequestId"
        }
    }
}
