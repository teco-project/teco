//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Kms {
    /// GetServiceStatus请求参数结构体
    public struct GetServiceStatusRequest: TCRequest {
        public init() {
        }
    }

    /// GetServiceStatus返回参数结构体
    public struct GetServiceStatusResponse: TCResponse {
        /// KMS服务是否开通， true 表示已开通
        public let serviceEnabled: Bool

        /// 服务不可用类型： 0-未购买，1-正常， 2-欠费停服， 3-资源释放
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let invalidType: Int64?

        /// 0-普通版，1-旗舰版
        public let userLevel: UInt64

        /// 旗舰版到期时间（Epoch Unix Timestamp）。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proExpireTime: UInt64?

        /// 旗舰版是否自动续费：0-不自动续费，1-自动续费
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proRenewFlag: UInt64?

        /// 旗舰版购买记录的唯一性标识。如果为开通旗舰版，则返回值为空
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let proResourceId: String?

        /// 是否开通 KMS 托管版
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exclusiveVSMEnabled: Bool?

        /// 是否开通 KMS 独享版
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exclusiveHSMEnabled: Bool?

        /// KMS 订阅信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let subscriptionInfo: String?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case serviceEnabled = "ServiceEnabled"
            case invalidType = "InvalidType"
            case userLevel = "UserLevel"
            case proExpireTime = "ProExpireTime"
            case proRenewFlag = "ProRenewFlag"
            case proResourceId = "ProResourceId"
            case exclusiveVSMEnabled = "ExclusiveVSMEnabled"
            case exclusiveHSMEnabled = "ExclusiveHSMEnabled"
            case subscriptionInfo = "SubscriptionInfo"
            case requestId = "RequestId"
        }
    }

    /// 查询服务状态
    ///
    /// 用于查询该用户是否已开通KMS服务
    @inlinable
    public func getServiceStatus(_ input: GetServiceStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetServiceStatusResponse> {
        self.client.execute(action: "GetServiceStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询服务状态
    ///
    /// 用于查询该用户是否已开通KMS服务
    @inlinable
    public func getServiceStatus(_ input: GetServiceStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetServiceStatusResponse {
        try await self.client.execute(action: "GetServiceStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询服务状态
    ///
    /// 用于查询该用户是否已开通KMS服务
    @inlinable
    public func getServiceStatus(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetServiceStatusResponse> {
        self.getServiceStatus(.init(), region: region, logger: logger, on: eventLoop)
    }

    /// 查询服务状态
    ///
    /// 用于查询该用户是否已开通KMS服务
    @inlinable
    public func getServiceStatus(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetServiceStatusResponse {
        try await self.getServiceStatus(.init(), region: region, logger: logger, on: eventLoop)
    }
}
