//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Kms {
    /// DescribeKeys请求参数结构体
    public struct DescribeKeysRequest: TCRequestModel {
        /// 查询CMK的ID列表，批量查询一次最多支持100个KeyId
        public let keyIds: [String]

        public init(keyIds: [String]) {
            self.keyIds = keyIds
        }

        enum CodingKeys: String, CodingKey {
            case keyIds = "KeyIds"
        }
    }

    /// DescribeKeys返回参数结构体
    public struct DescribeKeysResponse: TCResponseModel {
        /// 返回的属性信息列表
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let keyMetadatas: [KeyMetadata]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case keyMetadatas = "KeyMetadatas"
            case requestId = "RequestId"
        }
    }

    /// 获取多个主密钥属性
    ///
    /// 该接口用于批量获取主密钥属性信息。
    @inlinable
    public func describeKeys(_ input: DescribeKeysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKeysResponse> {
        self.client.execute(action: "DescribeKeys", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取多个主密钥属性
    ///
    /// 该接口用于批量获取主密钥属性信息。
    @inlinable
    public func describeKeys(_ input: DescribeKeysRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKeysResponse {
        try await self.client.execute(action: "DescribeKeys", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取多个主密钥属性
    ///
    /// 该接口用于批量获取主密钥属性信息。
    @inlinable
    public func describeKeys(keyIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeKeysResponse> {
        self.describeKeys(.init(keyIds: keyIds), region: region, logger: logger, on: eventLoop)
    }

    /// 获取多个主密钥属性
    ///
    /// 该接口用于批量获取主密钥属性信息。
    @inlinable
    public func describeKeys(keyIds: [String], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeKeysResponse {
        try await self.describeKeys(.init(keyIds: keyIds), region: region, logger: logger, on: eventLoop)
    }
}
