//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Kms {
    /// ListAlgorithms请求参数结构体
    public struct ListAlgorithmsRequest: TCRequestModel {
        public init() {
        }
    }

    /// ListAlgorithms返回参数结构体
    public struct ListAlgorithmsResponse: TCResponseModel {
        /// 本地区支持的对称加密算法
        public let symmetricAlgorithms: [AlgorithmInfo]

        /// 本地区支持的非对称加密算法
        public let asymmetricAlgorithms: [AlgorithmInfo]

        /// 本地区支持的非对称签名验签算法
        public let asymmetricSignVerifyAlgorithms: [AlgorithmInfo]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case symmetricAlgorithms = "SymmetricAlgorithms"
            case asymmetricAlgorithms = "AsymmetricAlgorithms"
            case asymmetricSignVerifyAlgorithms = "AsymmetricSignVerifyAlgorithms"
            case requestId = "RequestId"
        }
    }

    /// 列出当前Region支持的加密方式
    @inlinable
    public func listAlgorithms(_ input: ListAlgorithmsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListAlgorithmsResponse> {
        self.client.execute(action: "ListAlgorithms", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 列出当前Region支持的加密方式
    @inlinable
    public func listAlgorithms(_ input: ListAlgorithmsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAlgorithmsResponse {
        try await self.client.execute(action: "ListAlgorithms", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 列出当前Region支持的加密方式
    @inlinable
    public func listAlgorithms(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListAlgorithmsResponse> {
        self.listAlgorithms(ListAlgorithmsRequest(), region: region, logger: logger, on: eventLoop)
    }

    /// 列出当前Region支持的加密方式
    @inlinable
    public func listAlgorithms(region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListAlgorithmsResponse {
        try await self.listAlgorithms(ListAlgorithmsRequest(), region: region, logger: logger, on: eventLoop)
    }
}
