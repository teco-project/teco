//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCKmsError {
    public struct UnsupportedOperation: TCErrorType {
        enum Code: String {
            case externalCmkCanNotRotate = "UnsupportedOperation.ExternalCmkCanNotRotate"
            case notExternalCmk = "UnsupportedOperation.NotExternalCmk"
            case notUserCreatedCmk = "UnsupportedOperation.NotUserCreatedCmk"
            case serviceTemporaryUnavailable = "UnsupportedOperation.ServiceTemporaryUnavailable"
            case unsupportedKeyUsageInCurrentRegion = "UnsupportedOperation.UnsupportedKeyUsageInCurrentRegion"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 用户导入类型的CMK禁止轮换。
        public static var externalCmkCanNotRotate: UnsupportedOperation {
            UnsupportedOperation(.externalCmkCanNotRotate)
        }
        
        /// CMK类型错误，仅支持External CMK。
        public static var notExternalCmk: UnsupportedOperation {
            UnsupportedOperation(.notExternalCmk)
        }
        
        /// 仅支持对用户自己创建的CMK做更新。
        public static var notUserCreatedCmk: UnsupportedOperation {
            UnsupportedOperation(.notUserCreatedCmk)
        }
        
        /// 服务暂时不可用。
        public static var serviceTemporaryUnavailable: UnsupportedOperation {
            UnsupportedOperation(.serviceTemporaryUnavailable)
        }
        
        /// 加密方式在当前region不支持。
        public static var unsupportedKeyUsageInCurrentRegion: UnsupportedOperation {
            UnsupportedOperation(.unsupportedKeyUsageInCurrentRegion)
        }
    }
}

extension TCKmsError.UnsupportedOperation: Equatable {
    public static func == (lhs: TCKmsError.UnsupportedOperation, rhs: TCKmsError.UnsupportedOperation) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCKmsError.UnsupportedOperation: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCKmsError.UnsupportedOperation {
    public func toKmsError() -> TCKmsError {
        guard let code = TCKmsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCKmsError(code, context: self.context)
    }
}