//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCKmsError {
    public struct ResourceUnavailable: TCKmsErrorType {
        enum Code: String {
            case cloudResourceBindingNotFound = "ResourceUnavailable.CloudResourceBindingNotFound"
            case cmkArchived = "ResourceUnavailable.CmkArchived"
            case cmkDisabled = "ResourceUnavailable.CmkDisabled"
            case cmkNotFound = "ResourceUnavailable.CmkNotFound"
            case cmkNotPendingDelete = "ResourceUnavailable.CmkNotPendingDelete"
            case cmkShouldBeDisabled = "ResourceUnavailable.CmkShouldBeDisabled"
            case cmkStateNotSupport = "ResourceUnavailable.CmkStateNotSupport"
            case keyDisabled = "ResourceUnavailable.KeyDisabled"
            case keyPendingDelete = "ResourceUnavailable.KeyPendingDelete"
            case notPurchased = "ResourceUnavailable.NotPurchased"
            case tokenExpired = "ResourceUnavailable.TokenExpired"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// cmk和云资源的绑定关系不存在。
        public static var cloudResourceBindingNotFound: ResourceUnavailable {
            ResourceUnavailable(.cloudResourceBindingNotFound)
        }
        
        /// CMK已存档。
        public static var cmkArchived: ResourceUnavailable {
            ResourceUnavailable(.cmkArchived)
        }
        
        /// CMK已被禁用。
        public static var cmkDisabled: ResourceUnavailable {
            ResourceUnavailable(.cmkDisabled)
        }
        
        /// CMK不存在。
        public static var cmkNotFound: ResourceUnavailable {
            ResourceUnavailable(.cmkNotFound)
        }
        
        /// CMK不是计划删除状态不能被执行取消计划删除。
        public static var cmkNotPendingDelete: ResourceUnavailable {
            ResourceUnavailable(.cmkNotPendingDelete)
        }
        
        /// 未被禁用的CMK不能被计划删除。
        public static var cmkShouldBeDisabled: ResourceUnavailable {
            ResourceUnavailable(.cmkShouldBeDisabled)
        }
        
        /// CMK 状态不支持该操作。
        public static var cmkStateNotSupport: ResourceUnavailable {
            ResourceUnavailable(.cmkStateNotSupport)
        }
        
        /// 密钥已被禁用。
        public static var keyDisabled: ResourceUnavailable {
            ResourceUnavailable(.keyDisabled)
        }
        
        /// 不可用密钥：密钥待删除。
        public static var keyPendingDelete: ResourceUnavailable {
            ResourceUnavailable(.keyPendingDelete)
        }
        
        /// 白盒密钥服务尚未开通。
        public static var notPurchased: ResourceUnavailable {
            ResourceUnavailable(.notPurchased)
        }
        
        /// Token已过期。
        public static var tokenExpired: ResourceUnavailable {
            ResourceUnavailable(.tokenExpired)
        }
        
        public func asKmsError() -> TCKmsError {
            let code: TCKmsError.Code
            switch self.error {
            case .cloudResourceBindingNotFound: 
                code = .resourceUnavailable_CloudResourceBindingNotFound
            case .cmkArchived: 
                code = .resourceUnavailable_CmkArchived
            case .cmkDisabled: 
                code = .resourceUnavailable_CmkDisabled
            case .cmkNotFound: 
                code = .resourceUnavailable_CmkNotFound
            case .cmkNotPendingDelete: 
                code = .resourceUnavailable_CmkNotPendingDelete
            case .cmkShouldBeDisabled: 
                code = .resourceUnavailable_CmkShouldBeDisabled
            case .cmkStateNotSupport: 
                code = .resourceUnavailable_CmkStateNotSupport
            case .keyDisabled: 
                code = .resourceUnavailable_KeyDisabled
            case .keyPendingDelete: 
                code = .resourceUnavailable_KeyPendingDelete
            case .notPurchased: 
                code = .resourceUnavailable_NotPurchased
            case .tokenExpired: 
                code = .resourceUnavailable_TokenExpired
            }
            return TCKmsError(code, context: self.context)
        }
    }
}
