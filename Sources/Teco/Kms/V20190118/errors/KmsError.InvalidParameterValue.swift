//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCKmsError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case aliasAlreadyExists = "InvalidParameterValue.AliasAlreadyExists"
            case duplicatedKeyId = "InvalidParameterValue.DuplicatedKeyId"
            case invalidAlias = "InvalidParameterValue.InvalidAlias"
            case invalidCiphertext = "InvalidParameterValue.InvalidCiphertext"
            case invalidHsmClusterId = "InvalidParameterValue.InvalidHsmClusterId"
            case invalidKeyId = "InvalidParameterValue.InvalidKeyId"
            case invalidKeyUsage = "InvalidParameterValue.InvalidKeyUsage"
            case invalidPlaintext = "InvalidParameterValue.InvalidPlaintext"
            case invalidType = "InvalidParameterValue.InvalidType"
            case materialNotMatch = "InvalidParameterValue.MaterialNotMatch"
            case tagKeysDuplicated = "InvalidParameterValue.TagKeysDuplicated"
            case tagsNotExisted = "InvalidParameterValue.TagsNotExisted"
            case other = "InvalidParameterValue"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 别名已经存在。
        public static var aliasAlreadyExists: InvalidParameterValue {
            InvalidParameterValue(.aliasAlreadyExists)
        }
        
        /// KeyId重复。
        public static var duplicatedKeyId: InvalidParameterValue {
            InvalidParameterValue(.duplicatedKeyId)
        }
        
        /// 别名格式错误。
        public static var invalidAlias: InvalidParameterValue {
            InvalidParameterValue(.invalidAlias)
        }
        
        /// 密文格式错误。
        public static var invalidCiphertext: InvalidParameterValue {
            InvalidParameterValue(.invalidCiphertext)
        }
        
        /// 无效的 HSM 集群 ID。
        public static var invalidHsmClusterId: InvalidParameterValue {
            InvalidParameterValue(.invalidHsmClusterId)
        }
        
        /// KeyId不合法。
        public static var invalidKeyId: InvalidParameterValue {
            InvalidParameterValue(.invalidKeyId)
        }
        
        /// KeyUsage参数错误。
        public static var invalidKeyUsage: InvalidParameterValue {
            InvalidParameterValue(.invalidKeyUsage)
        }
        
        /// Plaintext不合法。
        public static var invalidPlaintext: InvalidParameterValue {
            InvalidParameterValue(.invalidPlaintext)
        }
        
        /// Type参数错误。
        public static var invalidType: InvalidParameterValue {
            InvalidParameterValue(.invalidType)
        }
        
        /// 导入的密钥材料和历史导入不同。
        public static var materialNotMatch: InvalidParameterValue {
            InvalidParameterValue(.materialNotMatch)
        }
        
        /// 标签键重复。
        public static var tagKeysDuplicated: InvalidParameterValue {
            InvalidParameterValue(.tagKeysDuplicated)
        }
        
        /// 标签键或标签值不存在。
        public static var tagsNotExisted: InvalidParameterValue {
            InvalidParameterValue(.tagsNotExisted)
        }
        
        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }
    }
}

extension TCKmsError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCKmsError.InvalidParameterValue, rhs: TCKmsError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCKmsError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCKmsError.InvalidParameterValue {
    /// - Returns: ``TCKmsError`` that holds the same error and context.
    public func toKmsError() -> TCKmsError {
        guard let code = TCKmsError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCKmsError(code, context: self.context)
    }
}

extension TCKmsError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
