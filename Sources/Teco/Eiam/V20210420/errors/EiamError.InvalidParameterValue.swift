//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import TecoCore

extension TCEiamError {
    public struct InvalidParameterValue: TCEiamErrorType {
        enum Code: String {
            case accountIdsCanNotBeEmpty = "InvalidParameterValue.AccountIdsCanNotBeEmpty"
            case appIdCanNotBeEmpty = "InvalidParameterValue.AppIdCanNotBeEmpty"
            case applicationInfoSortKeyIllegal = "InvalidParameterValue.ApplicationInfoSortKeyIllegal"
            case entityTypeNotMatch = "InvalidParameterValue.EntityTypeNotMatch"
            case lengthExceeded = "InvalidParameterValue.LengthExceeded"
            case newPasswordCanNotBeEmpty = "InvalidParameterValue.NewPasswordCanNotBeEmpty"
            case parameterIllegal = "InvalidParameterValue.ParameterIllegal"
            case sortKeyIllegal = "InvalidParameterValue.SortKeyIllegal"
            case userIdCanNotBeEmpty = "InvalidParameterValue.UserIdCanNotBeEmpty"
            case userNameCanNotBeEmpty = "InvalidParameterValue.UserNameCanNotBeEmpty"
            case userPhoneCanNotBeEmpty = "InvalidParameterValue.UserPhoneCanNotBeEmpty"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        /// 账号ID列表不能为空。
        public static var accountIdsCanNotBeEmpty: InvalidParameterValue {
            InvalidParameterValue(.accountIdsCanNotBeEmpty)
        }

        /// 应用ID不能为空。
        public static var appIdCanNotBeEmpty: InvalidParameterValue {
            InvalidParameterValue(.appIdCanNotBeEmpty)
        }

        /// 应用信息分页展示的排列属性不合法。
        public static var applicationInfoSortKeyIllegal: InvalidParameterValue {
            InvalidParameterValue(.applicationInfoSortKeyIllegal)
        }

        /// EntityType不匹配。
        public static var entityTypeNotMatch: InvalidParameterValue {
            InvalidParameterValue(.entityTypeNotMatch)
        }

        /// 参数的长度超出限制。
        public static var lengthExceeded: InvalidParameterValue {
            InvalidParameterValue(.lengthExceeded)
        }

        /// 新密码不能为空。
        public static var newPasswordCanNotBeEmpty: InvalidParameterValue {
            InvalidParameterValue(.newPasswordCanNotBeEmpty)
        }

        /// 参数不合法。
        public static var parameterIllegal: InvalidParameterValue {
            InvalidParameterValue(.parameterIllegal)
        }

        /// 分页展示的排序属性不合法。
        public static var sortKeyIllegal: InvalidParameterValue {
            InvalidParameterValue(.sortKeyIllegal)
        }

        /// 用户ID不能为空。
        public static var userIdCanNotBeEmpty: InvalidParameterValue {
            InvalidParameterValue(.userIdCanNotBeEmpty)
        }

        /// 用户名不能为空。
        public static var userNameCanNotBeEmpty: InvalidParameterValue {
            InvalidParameterValue(.userNameCanNotBeEmpty)
        }

        /// 用户手机不能为空。
        public static var userPhoneCanNotBeEmpty: InvalidParameterValue {
            InvalidParameterValue(.userPhoneCanNotBeEmpty)
        }

        public func asEiamError() -> TCEiamError {
            let code: TCEiamError.Code
            switch self.error {
            case .accountIdsCanNotBeEmpty:
                code = .invalidParameterValue_AccountIdsCanNotBeEmpty
            case .appIdCanNotBeEmpty:
                code = .invalidParameterValue_AppIdCanNotBeEmpty
            case .applicationInfoSortKeyIllegal:
                code = .invalidParameterValue_ApplicationInfoSortKeyIllegal
            case .entityTypeNotMatch:
                code = .invalidParameterValue_EntityTypeNotMatch
            case .lengthExceeded:
                code = .invalidParameterValue_LengthExceeded
            case .newPasswordCanNotBeEmpty:
                code = .invalidParameterValue_NewPasswordCanNotBeEmpty
            case .parameterIllegal:
                code = .invalidParameterValue_ParameterIllegal
            case .sortKeyIllegal:
                code = .invalidParameterValue_SortKeyIllegal
            case .userIdCanNotBeEmpty:
                code = .invalidParameterValue_UserIdCanNotBeEmpty
            case .userNameCanNotBeEmpty:
                code = .invalidParameterValue_UserNameCanNotBeEmpty
            case .userPhoneCanNotBeEmpty:
                code = .invalidParameterValue_UserPhoneCanNotBeEmpty
            }
            return TCEiamError(code, context: self.context)
        }
    }
}
