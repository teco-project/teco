//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Acp {
    /// DescribeScanTaskStatus请求参数结构体
    public struct DescribeScanTaskStatusRequest: TCRequest {
        /// 任务来源, 0:小程序诊断, 1:预留字段(暂未使用), 2:app诊断(android), 3:app漏洞扫描;
        public let source: Int64

        /// 应用平台, 0:android, 1:ios, 2:小程序
        public let platform: Int64

        /// 任务id
        public let taskID: String

        /// 任务类型, 0:基础版, 1:专家版, 2:本地化
        public let taskType: Int64

        public init(source: Int64, platform: Int64, taskID: String, taskType: Int64) {
            self.source = source
            self.platform = platform
            self.taskID = taskID
            self.taskType = taskType
        }

        enum CodingKeys: String, CodingKey {
            case source = "Source"
            case platform = "Platform"
            case taskID = "TaskID"
            case taskType = "TaskType"
        }
    }

    /// DescribeScanTaskStatus返回参数结构体
    public struct DescribeScanTaskStatusResponse: TCResponse {
        /// 返回值, 0:成功, 其他值请查看“返回值”定义
        public let result: Int64

        /// 0:默认值(待检测/待咨询), 1.检测中,  4:任务完成/咨询完成, 5:任务失败, 6:咨询中;
        public let status: Int64

        /// 诊断失败的错误信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errMsg: String?

        /// 任务流详情
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let flowSteps: [TaskFlowStepsInfo]?

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case result = "Result"
            case status = "Status"
            case errMsg = "ErrMsg"
            case flowSteps = "FlowSteps"
            case requestId = "RequestId"
        }
    }

    /// 查询应用合规隐私诊断任务状态
    ///
    /// 查询App隐私合规诊断任务状态
    @inlinable
    public func describeScanTaskStatus(_ input: DescribeScanTaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeScanTaskStatusResponse> {
        self.client.execute(action: "DescribeScanTaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询应用合规隐私诊断任务状态
    ///
    /// 查询App隐私合规诊断任务状态
    @inlinable
    public func describeScanTaskStatus(_ input: DescribeScanTaskStatusRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScanTaskStatusResponse {
        try await self.client.execute(action: "DescribeScanTaskStatus", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询应用合规隐私诊断任务状态
    ///
    /// 查询App隐私合规诊断任务状态
    @inlinable
    public func describeScanTaskStatus(source: Int64, platform: Int64, taskID: String, taskType: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeScanTaskStatusResponse> {
        self.describeScanTaskStatus(.init(source: source, platform: platform, taskID: taskID, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }

    /// 查询应用合规隐私诊断任务状态
    ///
    /// 查询App隐私合规诊断任务状态
    @inlinable
    public func describeScanTaskStatus(source: Int64, platform: Int64, taskID: String, taskType: Int64, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeScanTaskStatusResponse {
        try await self.describeScanTaskStatus(.init(source: source, platform: platform, taskID: taskID, taskType: taskType), region: region, logger: logger, on: eventLoop)
    }
}
