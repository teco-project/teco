//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date

extension Mariadb {
    /// 数据库账号信息
    public struct Account: TCInputModel {
        /// 账户的名称
        public let user: String
        
        /// 账户的域名
        public let host: String
        
        public init (user: String, host: String) {
            self.user = user
            self.host = host
        }
        
        enum CodingKeys: String, CodingKey {
            case user = "User"
            case host = "Host"
        }
    }
    
    /// 列权限信息
    public struct ColumnPrivilege: TCInputModel {
        /// 数据库名
        public let database: String
        
        /// 数据库表名
        public let table: String
        
        /// 数据库列名
        public let column: String
        
        /// 权限信息
        public let privileges: [String]
        
        public init (database: String, table: String, column: String, privileges: [String]) {
            self.database = database
            self.table = table
            self.column = column
            self.privileges = privileges
        }
        
        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case table = "Table"
            case column = "Column"
            case privileges = "Privileges"
        }
    }
    
    /// 约束类型值的范围
    public struct ConstraintRange: TCOutputModel {
        /// 约束类型为section时的最小值
        public let min: String
        
        /// 约束类型为section时的最大值
        public let max: String
        
        enum CodingKeys: String, CodingKey {
            case min = "Min"
            case max = "Max"
        }
    }
    
    /// 云数据库账号信息
    public struct DBAccount: TCOutputModel {
        /// 用户名
        public let userName: String
        
        /// 用户可以从哪台主机登录（对应 MySQL 用户的 host 字段，UserName + Host 唯一标识一个用户，IP形式，IP段以%结尾；支持填入%；为空默认等于%）
        public let host: String
        
        /// 用户备注信息
        public let description: String
        
        /// 创建时间
        // FIXME: Codable support not implemented for datetime yet.
        public let createTime: Date
        
        /// 最后更新时间
        // FIXME: Codable support not implemented for datetime yet.
        public let updateTime: Date
        
        /// 只读标记，0：否， 1：该账号的sql请求优先选择备机执行，备机不可用时选择主机执行，2：优先选择备机执行，备机不可用时操作失败。
        public let readOnly: Int64
        
        /// 该字段对只读帐号有意义，表示选择主备延迟小于该值的备机
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delayThresh: Int64?
        
        /// 针对只读账号，设置策略是否固定备机，0：不固定备机，即备机不满足条件与客户端不断开连接，Proxy选择其他可用备机，1：备机不满足条件断开连接，确保一个连接固定备机。
        public let slaveConst: Int64
        
        enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case host = "Host"
            case description = "Description"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case readOnly = "ReadOnly"
            case delayThresh = "DelayThresh"
            case slaveConst = "SlaveConst"
        }
    }
    
    /// 云数据库实例备份时间配置信息
    public struct DBBackupTimeConfig: TCOutputModel {
        /// 实例 ID
        public let instanceId: String
        
        /// 每天备份执行的区间的开始时间，格式 mm:ss，形如 22:00
        public let startBackupTime: String
        
        /// 每天备份执行的区间的结束时间，格式 mm:ss，形如 23:00
        public let endBackupTime: String
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case startBackupTime = "StartBackupTime"
            case endBackupTime = "EndBackupTime"
        }
    }
    
    /// 描述云数据库实例的详细信息。
    public struct DBInstance: TCOutputModel {
        /// 实例 ID，唯一标识一个 TDSQL 实例
        public let instanceId: String
        
        /// 实例名称，用户可修改
        public let instanceName: String
        
        /// 实例所属应用 ID
        public let appId: Int64
        
        /// 实例所属项目 ID
        public let projectId: Int64
        
        /// 实例所在地域名称，如 ap-shanghai
        public let region: String
        
        /// 实例所在可用区名称，如 ap-shanghai-1
        public let zone: String
        
        /// 私有网络 ID，基础网络时为 0
        public let vpcId: Int64
        
        /// 子网 ID，基础网络时为 0
        public let subnetId: Int64
        
        /// 实例状态：0 创建中，1 流程处理中， 2 运行中，3 实例未初始化，-1 实例已隔离，4 实例初始化中，5 实例删除中，6 实例重启中，7 数据迁移中
        public let status: Int64
        
        /// 内网 IP 地址
        public let vip: String
        
        /// 内网端口
        public let vport: Int64
        
        /// 外网访问的域名，公网可解析
        public let wanDomain: String
        
        /// 外网 IP 地址，公网可访问
        public let wanVip: String
        
        /// 外网端口
        public let wanPort: Int64
        
        /// 实例创建时间，格式为 2006-01-02 15:04:05
        // FIXME: Codable support not implemented for datetime yet.
        public let createTime: Date
        
        /// 实例最后更新时间，格式为 2006-01-02 15:04:05
        // FIXME: Codable support not implemented for datetime yet.
        public let updateTime: Date
        
        /// 自动续费标志：0 否，1 是
        public let autoRenewFlag: Int64
        
        /// 实例到期时间，格式为 2006-01-02 15:04:05
        // FIXME: Codable support not implemented for datetime yet.
        public let periodEndTime: Date
        
        /// 实例所属账号
        public let uin: String
        
        /// TDSQL 版本信息
        public let tdsqlVersion: String
        
        /// 实例内存大小，单位 GB
        public let memory: Int64
        
        /// 实例存储大小，单位 GB
        public let storage: Int64
        
        /// 字符串型的私有网络ID
        public let uniqueVpcId: String
        
        /// 字符串型的私有网络子网ID
        public let uniqueSubnetId: String
        
        /// 原始实例ID（过时字段，请勿依赖该值）
        public let originSerialId: String
        
        /// 节点数，2为一主一从，3为一主二从
        public let nodeCount: UInt64
        
        /// 是否临时实例，0为否，非0为是
        public let isTmp: UInt64
        
        /// 独享集群ID，为空表示为普通实例
        public let exclusterId: String
        
        /// 数字实例ID（过时字段，请勿依赖该值）
        public let id: UInt64
        
        /// 产品类型 ID
        public let pid: Int64
        
        /// 最大 Qps 值
        public let qps: Int64
        
        /// 付费模式
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let paymode: String?
        
        /// 实例处于异步任务时的异步任务流程ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let locker: Int64?
        
        /// 实例目前运行状态描述
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let statusDesc: String?
        
        /// 外网状态，0-未开通；1-已开通；2-关闭；3-开通中
        public let wanStatus: Int64
        
        /// 该实例是否支持审计。1-支持；0-不支持
        public let isAuditSupported: UInt64
        
        /// 机器型号
        public let machine: String
        
        /// 是否支持数据加密。1-支持；0-不支持
        public let isEncryptSupported: Int64
        
        /// 实例CPU核数
        public let cpu: Int64
        
        /// 实例IPv6标志
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let ipv6Flag: UInt64?
        
        /// 内网IPv6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let vipv6: String?
        
        /// 外网IPv6
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanVipv6: String?
        
        /// 外网IPv6端口
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanPortIpv6: UInt64?
        
        /// 外网IPv6状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let wanStatusIpv6: UInt64?
        
        /// 数据库引擎
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbEngine: String?
        
        /// 数据库版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbVersion: String?
        
        /// DCN标志，0-无，1-主实例，2-灾备实例
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dcnFlag: Int64?
        
        /// DCN状态，0-无，1-创建中，2-同步中，3-已断开
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dcnStatus: Int64?
        
        /// DCN灾备实例数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dcnDstNum: Int64?
        
        /// 1： 主实例（独享型）, 2: 主实例, 3： 灾备实例, 4： 灾备实例（独享型）
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceType: Int64?
        
        /// 实例标签信息
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let resourceTags: [ResourceTag]?
        
        /// 数据库版本
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dbVersionId: String?
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case appId = "AppId"
            case projectId = "ProjectId"
            case region = "Region"
            case zone = "Zone"
            case vpcId = "VpcId"
            case subnetId = "SubnetId"
            case status = "Status"
            case vip = "Vip"
            case vport = "Vport"
            case wanDomain = "WanDomain"
            case wanVip = "WanVip"
            case wanPort = "WanPort"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
            case autoRenewFlag = "AutoRenewFlag"
            case periodEndTime = "PeriodEndTime"
            case uin = "Uin"
            case tdsqlVersion = "TdsqlVersion"
            case memory = "Memory"
            case storage = "Storage"
            case uniqueVpcId = "UniqueVpcId"
            case uniqueSubnetId = "UniqueSubnetId"
            case originSerialId = "OriginSerialId"
            case nodeCount = "NodeCount"
            case isTmp = "IsTmp"
            case exclusterId = "ExclusterId"
            case id = "Id"
            case pid = "Pid"
            case qps = "Qps"
            case paymode = "Paymode"
            case locker = "Locker"
            case statusDesc = "StatusDesc"
            case wanStatus = "WanStatus"
            case isAuditSupported = "IsAuditSupported"
            case machine = "Machine"
            case isEncryptSupported = "IsEncryptSupported"
            case cpu = "Cpu"
            case ipv6Flag = "Ipv6Flag"
            case vipv6 = "Vipv6"
            case wanVipv6 = "WanVipv6"
            case wanPortIpv6 = "WanPortIpv6"
            case wanStatusIpv6 = "WanStatusIpv6"
            case dbEngine = "DbEngine"
            case dbVersion = "DbVersion"
            case dcnFlag = "DcnFlag"
            case dcnStatus = "DcnStatus"
            case dcnDstNum = "DcnDstNum"
            case instanceType = "InstanceType"
            case resourceTags = "ResourceTags"
            case dbVersionId = "DbVersionId"
        }
    }
    
    /// 云数据库参数信息。
    public struct DBParamValue: TCInputModel {
        /// 参数名称
        public let param: String
        
        /// 参数值
        public let value: String
        
        public init (param: String, value: String) {
            self.param = param
            self.value = value
        }
        
        enum CodingKeys: String, CodingKey {
            case param = "Param"
            case value = "Value"
        }
    }
    
    /// dcn 配置情况
    public struct DCNReplicaConfig: TCOutputModel {
        /// DCN 运行状态，START为正常运行，STOP为暂停
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let roReplicationMode: String?
        
        /// 延迟复制的类型，DEFAULT为正常，DUE_TIME为指定时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let delayReplicationType: String?
        
        /// 延迟复制的指定时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let dueTime: String?
        
        /// 延迟复制时的延迟秒数
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicationDelay: Int64?
        
        enum CodingKeys: String, CodingKey {
            case roReplicationMode = "RoReplicationMode"
            case delayReplicationType = "DelayReplicationType"
            case dueTime = "DueTime"
            case replicationDelay = "ReplicationDelay"
        }
    }
    
    /// DCN的状态信息
    public struct DCNReplicaStatus: TCOutputModel {
        /// DCN 的运行状态，START为正常运行，STOP为暂停，
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?
        
        /// 当前延迟情况，取备实例的 master 节点的 delay 值
        public let delay: Int64
        
        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case delay = "Delay"
        }
    }
    
    /// 数据库信息
    public struct Database: TCOutputModel {
        /// 数据库名称
        public let dbName: String
        
        enum CodingKeys: String, CodingKey {
            case dbName = "DbName"
        }
    }
    
    /// 数据库函数信息
    public struct DatabaseFunction: TCOutputModel {
        /// 函数名称
        public let `func`: String
        
        enum CodingKeys: String, CodingKey {
            case `func` = "Func"
        }
    }
    
    /// 数据库权限
    public struct DatabasePrivilege: TCInputModel {
        /// 权限信息
        public let privileges: [String]
        
        /// 数据库名
        public let database: String
        
        public init (privileges: [String], database: String) {
            self.privileges = privileges
            self.database = database
        }
        
        enum CodingKeys: String, CodingKey {
            case privileges = "Privileges"
            case database = "Database"
        }
    }
    
    /// 数据库存储过程信息
    public struct DatabaseProcedure: TCOutputModel {
        /// 存储过程名称
        public let proc: String
        
        enum CodingKeys: String, CodingKey {
            case proc = "Proc"
        }
    }
    
    /// 数据库表信息
    public struct DatabaseTable: TCOutputModel {
        /// 表名
        public let table: String
        
        enum CodingKeys: String, CodingKey {
            case table = "Table"
        }
    }
    
    /// 数据库视图信息
    public struct DatabaseView: TCOutputModel {
        /// 视图名称
        public let view: String
        
        enum CodingKeys: String, CodingKey {
            case view = "View"
        }
    }
    
    /// DCN详情条目
    public struct DcnDetailItem: TCOutputModel {
        /// 实例ID
        public let instanceId: String
        
        /// 实例名称
        public let instanceName: String
        
        /// 实例地域
        public let region: String
        
        /// 实例可用区
        public let zone: String
        
        /// 实例IP地址
        public let vip: String
        
        /// 实例IPv6地址
        public let vipv6: String
        
        /// 实例端口
        public let vport: Int64
        
        /// 实例状态
        public let status: Int64
        
        /// 实例状态描述
        public let statusDesc: String
        
        /// 实例DCN标志，1-主，2-备
        public let dcnFlag: Int64
        
        /// 实例DCN状态，0-无，1-创建中，2-同步中，3-已断开
        public let dcnStatus: Int64
        
        /// 实例CPU核数
        public let cpu: Int64
        
        /// 实例内存大小，单位 GB
        public let memory: Int64
        
        /// 实例存储大小，单位 GB
        public let storage: Int64
        
        /// 付费模式
        public let payMode: Int64
        
        /// 实例创建时间，格式为 2006-01-02 15:04:05
        public let createTime: String
        
        /// 实例到期时间，格式为 2006-01-02 15:04:05
        public let periodEndTime: String
        
        /// 1： 主实例（独享型）, 2: 主实例, 3： 灾备实例, 4： 灾备实例（独享型）
        public let instanceType: Int64
        
        /// DCN复制的配置信息；对于主实例，此字段为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicaConfig: DCNReplicaConfig
        
        /// DCN复制的状态；对于主实例，此字段为null
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let replicaStatus: DCNReplicaStatus
        
        /// 是否开启了 kms
        public let encryptStatus: Int64
        
        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case instanceName = "InstanceName"
            case region = "Region"
            case zone = "Zone"
            case vip = "Vip"
            case vipv6 = "Vipv6"
            case vport = "Vport"
            case status = "Status"
            case statusDesc = "StatusDesc"
            case dcnFlag = "DcnFlag"
            case dcnStatus = "DcnStatus"
            case cpu = "Cpu"
            case memory = "Memory"
            case storage = "Storage"
            case payMode = "PayMode"
            case createTime = "CreateTime"
            case periodEndTime = "PeriodEndTime"
            case instanceType = "InstanceType"
            case replicaConfig = "ReplicaConfig"
            case replicaStatus = "ReplicaStatus"
            case encryptStatus = "EncryptStatus"
        }
    }
    
    /// 订单信息
    public struct Deal: TCOutputModel {
        /// 订单号
        public let dealName: String
        
        /// 所属账号
        public let ownerUin: String
        
        /// 商品数量
        public let count: Int64
        
        /// 关联的流程 Id，可用于查询流程执行状态
        public let flowId: Int64
        
        /// 只有创建实例且已完成发货的订单会填充该字段，表示该订单创建的实例的 ID
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let instanceIds: [String]?
        
        /// 付费模式，0后付费/1预付费
        public let payMode: Int64
        
        enum CodingKeys: String, CodingKey {
            case dealName = "DealName"
            case ownerUin = "OwnerUin"
            case count = "Count"
            case flowId = "FlowId"
            case instanceIds = "InstanceIds"
            case payMode = "PayMode"
        }
    }
    
    /// 函数权限信息
    public struct FunctionPrivilege: TCInputModel {
        /// 数据库名
        public let database: String
        
        /// 数据库函数名
        public let functionName: String
        
        /// 权限信息
        public let privileges: [String]
        
        public init (database: String, functionName: String, privileges: [String]) {
            self.database = database
            self.functionName = functionName
            self.privileges = privileges
        }
        
        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case functionName = "FunctionName"
            case privileges = "Privileges"
        }
    }
    
    /// 按机型归类的实例可售卖规格信息
    public struct InstanceSpec: TCInputModel, TCOutputModel {
        /// 设备型号
        public let machine: String
        
        /// 该机型对应的可售卖规格列表
        public let specInfos: [SpecConfigInfo]
        
        public init (machine: String, specInfos: [SpecConfigInfo]) {
            self.machine = machine
            self.specInfos = specInfos
        }
        
        enum CodingKeys: String, CodingKey {
            case machine = "Machine"
            case specInfos = "SpecInfos"
        }
    }
    
    /// 拉取的日志信息
    public struct LogFileInfo: TCOutputModel {
        /// Log最后修改时间
        public let mtime: UInt64
        
        /// 文件长度
        public let length: UInt64
        
        /// 下载Log时用到的统一资源标识符
        public let uri: String
        
        /// 文件名
        public let fileName: String
        
        enum CodingKeys: String, CodingKey {
            case mtime = "Mtime"
            case length = "Length"
            case uri = "Uri"
            case fileName = "FileName"
        }
    }
    
    /// 描述实例的各个DB节点信息
    public struct NodeInfo: TCOutputModel {
        /// DB节点ID
        public let nodeId: String
        
        /// DB节点角色，取值为master或者slave
        public let role: String
        
        enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case role = "Role"
        }
    }
    
    /// 参数约束
    public struct ParamConstraint: TCOutputModel {
        /// 约束类型,如枚举enum，区间section
        public let type: String
        
        /// 约束类型为enum时的可选值列表
        public let `enum`: String?
        
        /// 约束类型为section时的范围
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let range: ConstraintRange
        
        /// 约束类型为string时的可选值列表
        public let string: String
        
        enum CodingKeys: String, CodingKey {
            case type = "Type"
            case `enum` = "Enum"
            case range = "Range"
            case string = "String"
        }
    }
    
    /// DB参数描述
    public struct ParamDesc: TCOutputModel {
        /// 参数名字
        public let param: String
        
        /// 当前参数值
        public let value: String
        
        /// 设置过的值，参数生效后，该值和value一样。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let setValue: String?
        
        /// 系统默认值
        public let `default`: String
        
        /// 参数限制
        public let constraint: ParamConstraint
        
        /// 是否有设置过值，false:没有设置过值，true:有设置过值。
        public let haveSetValue: Bool
        
        /// 是否需要重启生效，false:不需要重启，
        /// true:需要重启
        public let needRestart: Bool
        
        enum CodingKeys: String, CodingKey {
            case param = "Param"
            case value = "Value"
            case setValue = "SetValue"
            case `default` = "Default"
            case constraint = "Constraint"
            case haveSetValue = "HaveSetValue"
            case needRestart = "NeedRestart"
        }
    }
    
    /// 修改参数结果
    public struct ParamModifyResult: TCOutputModel {
        /// 修改参数名字
        public let param: String
        
        /// 参数修改结果。0表示修改成功；-1表示修改失败；-2表示该参数值非法
        public let code: Int64
        
        enum CodingKeys: String, CodingKey {
            case param = "Param"
            case code = "Code"
        }
    }
    
    /// 存储过程权限信息
    public struct ProcedurePrivilege: TCInputModel {
        /// 数据库名
        public let database: String
        
        /// 数据库存储过程名
        public let procedure: String
        
        /// 权限信息
        public let privileges: [String]
        
        public init (database: String, procedure: String, privileges: [String]) {
            self.database = database
            self.procedure = procedure
            self.privileges = privileges
        }
        
        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case procedure = "Procedure"
            case privileges = "Privileges"
        }
    }
    
    /// 售卖可用区信息
    public struct RegionInfo: TCOutputModel {
        /// 地域英文ID
        public let region: String
        
        /// 地域数字ID
        public let regionId: Int64
        
        /// 地域中文名
        public let regionName: String
        
        /// 可用区列表
        public let zoneList: [ZonesInfo]
        
        /// 可选择的主可用区和从可用区
        public let availableChoice: [ZoneChooseInfo]
        
        enum CodingKeys: String, CodingKey {
            case region = "Region"
            case regionId = "RegionId"
            case regionName = "RegionName"
            case zoneList = "ZoneList"
            case availableChoice = "AvailableChoice"
        }
    }
    
    /// 标签对象，包含tagKey & tagValue
    public struct ResourceTag: TCInputModel, TCOutputModel {
        /// 标签键key
        public let tagKey: String
        
        /// 标签值value
        public let tagValue: String
        
        public init (tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }
        
        enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }
    
    /// 安全组详情
    public struct SecurityGroup: TCOutputModel {
        /// 项目ID
        public let projectId: Int64
        
        /// 创建时间，时间格式：yyyy-mm-dd hh:mm:ss
        public let createTime: String
        
        /// 安全组ID
        public let securityGroupId: String
        
        /// 安全组名称
        public let securityGroupName: String
        
        /// 安全组备注
        public let securityGroupRemark: String
        
        /// 入站规则
        public let inbound: [SecurityGroupBound]
        
        /// 出站规则
        public let outbound: [SecurityGroupBound]
        
        enum CodingKeys: String, CodingKey {
            case projectId = "ProjectId"
            case createTime = "CreateTime"
            case securityGroupId = "SecurityGroupId"
            case securityGroupName = "SecurityGroupName"
            case securityGroupRemark = "SecurityGroupRemark"
            case inbound = "Inbound"
            case outbound = "Outbound"
        }
    }
    
    /// 安全出入口规则
    public struct SecurityGroupBound: TCOutputModel {
        /// 策略，ACCEPT 或者 DROP
        public let action: String
        
        /// 来源 IP 或 IP 段，例如192.168.0.0/16
        public let cidrIp: String
        
        /// 端口
        public let portRange: String
        
        /// 网络协议，支持 UDP、TCP 等
        public let ipProtocol: String
        
        enum CodingKeys: String, CodingKey {
            case action = "Action"
            case cidrIp = "CidrIp"
            case portRange = "PortRange"
            case ipProtocol = "IpProtocol"
        }
    }
    
    /// 慢查询条目信息
    public struct SlowLogData: TCOutputModel {
        /// 语句校验和，用于查询详情
        public let checkSum: String
        
        /// 数据库名称
        public let db: String
        
        /// 抽象的SQL语句
        public let fingerPrint: String
        
        /// 平均的锁时间
        public let lockTimeAvg: String
        
        /// 最大锁时间
        public let lockTimeMax: String
        
        /// 最小锁时间
        public let lockTimeMin: String
        
        /// 锁时间总和
        public let lockTimeSum: String
        
        /// 查询次数
        public let queryCount: String
        
        /// 平均查询时间
        public let queryTimeAvg: String
        
        /// 最大查询时间
        public let queryTimeMax: String
        
        /// 最小查询时间
        public let queryTimeMin: String
        
        /// 查询时间总和
        public let queryTimeSum: String
        
        /// 扫描行数
        public let rowsExaminedSum: String
        
        /// 发送行数
        public let rowsSentSum: String
        
        /// 最后执行时间
        public let tsMax: String
        
        /// 首次执行时间
        public let tsMin: String
        
        /// 帐号
        public let user: String
        
        /// 样例Sql
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let exampleSql: String?
        
        /// 账户的域名
        public let host: String
        
        enum CodingKeys: String, CodingKey {
            case checkSum = "CheckSum"
            case db = "Db"
            case fingerPrint = "FingerPrint"
            case lockTimeAvg = "LockTimeAvg"
            case lockTimeMax = "LockTimeMax"
            case lockTimeMin = "LockTimeMin"
            case lockTimeSum = "LockTimeSum"
            case queryCount = "QueryCount"
            case queryTimeAvg = "QueryTimeAvg"
            case queryTimeMax = "QueryTimeMax"
            case queryTimeMin = "QueryTimeMin"
            case queryTimeSum = "QueryTimeSum"
            case rowsExaminedSum = "RowsExaminedSum"
            case rowsSentSum = "RowsSentSum"
            case tsMax = "TsMax"
            case tsMin = "TsMin"
            case user = "User"
            case exampleSql = "ExampleSql"
            case host = "Host"
        }
    }
    
    /// 实例可售卖规格详细信息，创建实例和扩容实例时 Pid+MemSize 唯一确定一种售卖规格，磁盘大小可用区间为[MinDataDisk,MaxDataDisk]
    public struct SpecConfigInfo: TCOutputModel {
        /// 设备型号
        public let machine: String
        
        /// 内存大小，单位 GB
        public let memory: Int64
        
        /// 数据盘规格最小值，单位 GB
        public let minStorage: Int64
        
        /// 数据盘规格最大值，单位 GB
        public let maxStorage: Int64
        
        /// 推荐的使用场景
        public let suitInfo: String
        
        /// 最大 Qps 值
        public let qps: Int64
        
        /// 产品类型 Id
        public let pid: Int64
        
        /// 节点个数，2 表示一主一从，3 表示一主二从
        public let nodeCount: Int64
        
        /// Cpu核数
        public let cpu: Int64
        
        enum CodingKeys: String, CodingKey {
            case machine = "Machine"
            case memory = "Memory"
            case minStorage = "MinStorage"
            case maxStorage = "MaxStorage"
            case suitInfo = "SuitInfo"
            case qps = "Qps"
            case pid = "Pid"
            case nodeCount = "NodeCount"
            case cpu = "Cpu"
        }
    }
    
    /// 数据库列信息
    public struct TableColumn: TCOutputModel {
        /// 列名称
        public let col: String
        
        /// 列类型
        public let type: String
        
        enum CodingKeys: String, CodingKey {
            case col = "Col"
            case type = "Type"
        }
    }
    
    /// 数据库表权限
    public struct TablePrivilege: TCInputModel {
        /// 数据库名
        public let database: String
        
        /// 数据库表名
        public let table: String
        
        /// 权限信息
        public let privileges: [String]
        
        public init (database: String, table: String, privileges: [String]) {
            self.database = database
            self.table = table
            self.privileges = privileges
        }
        
        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case table = "Table"
            case privileges = "Privileges"
        }
    }
    
    /// 视图权限信息
    public struct ViewPrivileges: TCInputModel {
        /// 数据库名
        public let database: String
        
        /// 数据库视图名
        public let view: String
        
        /// 权限信息
        public let privileges: [String]
        
        public init (database: String, view: String, privileges: [String]) {
            self.database = database
            self.view = view
            self.privileges = privileges
        }
        
        enum CodingKeys: String, CodingKey {
            case database = "Database"
            case view = "View"
            case privileges = "Privileges"
        }
    }
    
    /// 分片节点可用区选择
    public struct ZoneChooseInfo: TCOutputModel {
        /// 主可用区
        public let masterZone: ZonesInfo
        
        /// 可选的从可用区
        public let slaveZones: [ZonesInfo]
        
        enum CodingKeys: String, CodingKey {
            case masterZone = "MasterZone"
            case slaveZones = "SlaveZones"
        }
    }
    
    /// 可用区信息
    public struct ZonesInfo: TCOutputModel {
        /// 可用区英文ID
        public let zone: String
        
        /// 可用区数字ID
        public let zoneId: Int64
        
        /// 可用区中文名
        public let zoneName: String
        
        /// 是否在售
        public let onSale: Bool
        
        enum CodingKeys: String, CodingKey {
            case zone = "Zone"
            case zoneId = "ZoneId"
            case zoneName = "ZoneName"
            case onSale = "OnSale"
        }
    }
}