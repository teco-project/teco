//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension TCMariadbError {
    public struct InvalidParameterValue: TCErrorType {
        enum Code: String {
            case accountAlreadyExists = "InvalidParameterValue.AccountAlreadyExists"
            case badSyncMode = "InvalidParameterValue.BadSyncMode"
            case badUserRight = "InvalidParameterValue.BadUserRight"
            case badUserType = "InvalidParameterValue.BadUserType"
            case illegalCount = "InvalidParameterValue.IllegalCount"
            case illegalExclusterID = "InvalidParameterValue.IllegalExclusterID"
            case illegalInitParam = "InvalidParameterValue.IllegalInitParam"
            case illegalInstanceId = "InvalidParameterValue.IllegalInstanceId"
            case illegalLogSaveDays = "InvalidParameterValue.IllegalLogSaveDays"
            case illegalQuantity = "InvalidParameterValue.IllegalQuantity"
            case illegalRightParam = "InvalidParameterValue.IllegalRightParam"
            case illegalZone = "InvalidParameterValue.IllegalZone"
            case instanceNameIllegal = "InvalidParameterValue.InstanceNameIllegal"
            case invalidParameterValueError = "InvalidParameterValue.InvalidParameterValueError"
            case specIdIllegal = "InvalidParameterValue.SpecIdIllegal"
            case superUserForbidden = "InvalidParameterValue.SuperUserForbidden"
            case syncModeNotAllowed = "InvalidParameterValue.SyncModeNotAllowed"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        /// Initializer used by ``TCClient`` to match an error of this type.
        ///
        /// You should not use this initializer directly as there are no public initializers for ``TCErrorContext``.
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 想要创建的账号已经存在。
        public static var accountAlreadyExists: InvalidParameterValue {
            InvalidParameterValue(.accountAlreadyExists)
        }
        
        /// 该实例不支持此同步模式。
        public static var badSyncMode: InvalidParameterValue {
            InvalidParameterValue(.badSyncMode)
        }
        
        /// 指定的权限无法赋予给该账号。
        public static var badUserRight: InvalidParameterValue {
            InvalidParameterValue(.badUserRight)
        }
        
        /// 账号类型不正确。
        public static var badUserType: InvalidParameterValue {
            InvalidParameterValue(.badUserType)
        }
        
        /// 商品数量超出限制。
        public static var illegalCount: InvalidParameterValue {
            InvalidParameterValue(.illegalCount)
        }
        
        /// 找不到数据库实例所属的独享集群。
        public static var illegalExclusterID: InvalidParameterValue {
            InvalidParameterValue(.illegalExclusterID)
        }
        
        /// 初始化数据库实例参数错误。
        public static var illegalInitParam: InvalidParameterValue {
            InvalidParameterValue(.illegalInitParam)
        }
        
        /// 非法实例ID。
        public static var illegalInstanceId: InvalidParameterValue {
            InvalidParameterValue(.illegalInstanceId)
        }
        
        /// 修改log保存天数时过小或过大。
        public static var illegalLogSaveDays: InvalidParameterValue {
            InvalidParameterValue(.illegalLogSaveDays)
        }
        
        /// 商品数量超出限制。
        public static var illegalQuantity: InvalidParameterValue {
            InvalidParameterValue(.illegalQuantity)
        }
        
        /// 权限参数不正确。
        public static var illegalRightParam: InvalidParameterValue {
            InvalidParameterValue(.illegalRightParam)
        }
        
        /// 未找到对应的可用区信息。
        public static var illegalZone: InvalidParameterValue {
            InvalidParameterValue(.illegalZone)
        }
        
        /// 非法的实例名称。
        public static var instanceNameIllegal: InvalidParameterValue {
            InvalidParameterValue(.instanceNameIllegal)
        }
        
        /// 参数验证错误。
        public static var invalidParameterValueError: InvalidParameterValue {
            InvalidParameterValue(.invalidParameterValueError)
        }
        
        /// 找不到数据库实例对应的规格信息。
        public static var specIdIllegal: InvalidParameterValue {
            InvalidParameterValue(.specIdIllegal)
        }
        
        /// 系统用户不允许操作。
        public static var superUserForbidden: InvalidParameterValue {
            InvalidParameterValue(.superUserForbidden)
        }
        
        public static var syncModeNotAllowed: InvalidParameterValue {
            InvalidParameterValue(.syncModeNotAllowed)
        }
    }
}

extension TCMariadbError.InvalidParameterValue: Equatable {
    public static func == (lhs: TCMariadbError.InvalidParameterValue, rhs: TCMariadbError.InvalidParameterValue) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCMariadbError.InvalidParameterValue: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCMariadbError.InvalidParameterValue {
    /// - Returns: ``TCMariadbError`` that holds the same error and context.
    public func toMariadbError() -> TCMariadbError {
        guard let code = TCMariadbError.Code(rawValue: self.error.rawValue) else {
            fatalError("Unexpected internal conversion error!\nPlease file a bug at https://github.com/teco-project/teco to help address the problem.")
        }
        return TCMariadbError(code, context: self.context)
    }
}

extension TCMariadbError.InvalidParameterValue {
    /// - Returns: ``TCCommonError`` that holds the same error and context.
    public func toCommonError() -> TCCommonError? {
        if let context = self.context, let error = TCCommonError(errorCode: self.error.rawValue, context: context) {
            return error
        }
        return nil
    }
}
