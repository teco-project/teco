//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mariadb {
    /// DescribeDBTmpInstances请求参数结构体
    public struct DescribeDBTmpInstancesRequest: TCRequestModel {
        /// 实例ID
        public let instanceId: String

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    /// DescribeDBTmpInstances返回参数结构体
    public struct DescribeDBTmpInstancesResponse: TCResponseModel {
        /// 临时实例
        public let tmpInstances: [TmpInstance]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case tmpInstances = "TmpInstances"
            case requestId = "RequestId"
        }
    }

    /// 获取实例回档生成的临时实例
    ///
    /// 本接口（DescribeDBTmpInstances）用于获取实例回档生成的临时实例
    @inlinable
    public func describeDBTmpInstances(_ input: DescribeDBTmpInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBTmpInstancesResponse> {
        self.client.execute(action: "DescribeDBTmpInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 获取实例回档生成的临时实例
    ///
    /// 本接口（DescribeDBTmpInstances）用于获取实例回档生成的临时实例
    @inlinable
    public func describeDBTmpInstances(_ input: DescribeDBTmpInstancesRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBTmpInstancesResponse {
        try await self.client.execute(action: "DescribeDBTmpInstances", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 获取实例回档生成的临时实例
    ///
    /// 本接口（DescribeDBTmpInstances）用于获取实例回档生成的临时实例
    @inlinable
    public func describeDBTmpInstances(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeDBTmpInstancesResponse> {
        self.describeDBTmpInstances(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }

    /// 获取实例回档生成的临时实例
    ///
    /// 本接口（DescribeDBTmpInstances）用于获取实例回档生成的临时实例
    @inlinable
    public func describeDBTmpInstances(instanceId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DescribeDBTmpInstancesResponse {
        try await self.describeDBTmpInstances(.init(instanceId: instanceId), region: region, logger: logger, on: eventLoop)
    }
}
